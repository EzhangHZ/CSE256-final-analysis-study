["from sys import stdin\n\ndef solve():\n    for _ in range(int(stdin.readline().rstrip())):\n        res = []\n        (minL, maxR) = (10 ** 10, 0)\n        (costL, costR) = (10 ** 10, 10 ** 10)\n        (max_len, cost_len) = (0, 0)\n        for _ in range(int(stdin.readline().rstrip())):\n            (l, r, c) = map(int, stdin.readline().rstrip().split())\n            if l < minL:\n                minL = l\n                costL = c\n            elif l == minL:\n                costL = min(costL, c)\n            if r > maxR:\n                maxR = r\n                costR = c\n            elif r == maxR:\n                costR = min(costR, c)\n            if max_len < r - l + 1:\n                max_len = r - l + 1\n                cost_len = c\n            elif max_len == r - l + 1:\n                cost_len = min(cost_len, c)\n            if max_len == maxR - minL + 1:\n                ans = min(costR + costL, cost_len)\n            else:\n                ans = costR + costL\n            res.append(ans)\n        print('\\n'.join(map(str, res)))\nsolve()", "import sys\nints = map(int, sys.stdin.read().split())\nt = next(ints)\nfor _ in range(t):\n    n = next(ints)\n    left = None\n    right = None\n    cost_left = None\n    cost_right = None\n    covers = False\n    cover_cost = 99999999999\n    out = []\n    for k in range(n):\n        (a, b, c) = (next(ints), next(ints), next(ints))\n        if left is None or a < left:\n            left = a\n            cost_left = c\n            covers = False\n            cover_cost = 99999999999\n        elif left == a and c < cost_left:\n            cost_left = c\n        if right is None or b > right:\n            right = b\n            cost_right = c\n            covers = False\n            cover_cost = 99999999999\n        elif right == b and c < cost_right:\n            cost_right = c\n        if left == a and right == b:\n            covers = True\n            cover_cost = min(cover_cost, c)\n        if covers:\n            out.append(str(min(cost_left + cost_right, cover_cost)))\n        else:\n            out.append(str(cost_left + cost_right))\n    print('\\n'.join(out))", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    n = int(inp())\n    d = dict()\n    bl = (11 ** 9, -1)\n    br = (0, -1)\n    bad = 11 ** 9\n    ans = [None] * n\n    for i in range(n):\n        (l, r, c) = map(int, inp().split())\n        bl = min(bl, (l, c))\n        br = max(br, (r, -c))\n        d[l, r] = min(d.get((l, r), bad), c)\n        ans[i] = min(bl[1] - br[1], d.get((bl[0], br[0]), bad))\n    print('\\n'.join(map(str, ans)))\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    INF = pow(10, 10)\n    best_left = INF\n    best_right = -INF\n    l_cost = INF\n    r_cost = INF\n    t_cost = INF\n    result = []\n    for i in range(n):\n        (left, right, cost) = map(int, input().split())\n        if left < best_left:\n            l_cost = INF\n            t_cost = INF\n            best_left = left\n        if right > best_right:\n            r_cost = INF\n            t_cost = INF\n            best_right = right\n        if left == best_left:\n            l_cost = min(l_cost, cost)\n        if right == best_right:\n            r_cost = min(r_cost, cost)\n        if left == best_left and right == best_right:\n            t_cost = min(t_cost, cost)\n        cost = min(l_cost + r_cost, t_cost)\n        result.append(str(cost))\n    print('\\n'.join(result))", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    mi = 10 ** 10\n    ma = -1\n    ans = sys.maxsize\n    tmp = sys.maxsize\n    for i in range(n):\n        (l, r, c) = map(int, input().split())\n        if mi > l:\n            tmp = sys.maxsize\n            mi = l\n            mincost = c\n        elif mi == l and mincost > c:\n            mincost = c\n        if ma < r:\n            tmp = sys.maxsize\n            ma = r\n            maxcost = c\n        elif ma == r and maxcost > c:\n            maxcost = c\n        if mi == l and ma == r:\n            tmp = min(tmp, c)\n        print(min(mincost + maxcost, tmp))", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    mi = 10 ** 10\n    ma = -1\n    tmp = 10 ** 10\n    for i in range(n):\n        (l, r, c) = map(int, input().split())\n        if mi > l:\n            tmp = 10 ** 10\n            mi = l\n            mincost = c\n        elif mi == l and mincost > c:\n            mincost = c\n        if ma < r:\n            tmp = 10 ** 10\n            ma = r\n            maxcost = c\n        elif ma == r and maxcost > c:\n            maxcost = c\n        if mi == l and ma == r:\n            tmp = min(tmp, c)\n        print(min(mincost + maxcost, tmp))", "import sys\ninput = sys.stdin.readline\nMAX = sys.maxsize\n\ndef inp():\n    return int(input())\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\ndef solve(segments):\n    (first, last) = (MAX, -1)\n    (first_cost, last_cost) = (MAX, MAX)\n    tmp = MAX\n    for s in segments:\n        ((l, r), c) = s\n        if first > l:\n            tmp = MAX\n            first = l\n            first_cost = c\n        elif first == l and first_cost > c:\n            first_cost = c\n        if last < r:\n            tmp = MAX\n            last = r\n            last_cost = c\n        elif last == r and last_cost > c:\n            last_cost = c\n        if first == l and last == r:\n            tmp = min(tmp, c)\n        print(min(first_cost + last_cost, tmp))\nfor _ in range(inp()):\n    s = list()\n    for _ in range(inp()):\n        (l, r, c) = read_int_list()\n        s.append(((l, r), c))\n    solve(s)", "from itertools import permutations as per\nfrom math import factorial as fact\nfrom difflib import SequenceMatcher\nimport sys\ninput = sys.stdin.readline\nimport bisect\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef fun():\n    n = int(input())\n    d = {}\n    (ml, mr) = (10 ** 9 + 1, 0)\n    (c1, c2) = (0, 0)\n    for i in range(n):\n        (l, r, c) = map(int, input().split())\n        if l < ml:\n            ml = l\n            c1 = c\n        elif l == ml:\n            c1 = min(c1, c)\n        if r > mr:\n            mr = r\n            c2 = c\n        elif r == mr:\n            c2 = min(c2, c)\n        if (l, r) in d:\n            d[l, r] = min(d[l, r], c)\n        else:\n            d[l, r] = c\n        if (ml, mr) in d:\n            print(min(d[ml, mr], c1 + c2))\n        else:\n            print(c1 + c2)\nt = int(input())\nfor _ in range(t):\n    fun()", "from sys import *\ninput = stdin.readline\na = int(input())\nfor x in range(a):\n    b = int(input())\n    lmin = 99999999999\n    rmax = 0\n    lval = 99999999999\n    rval = 99999999999\n    maxsize = 0\n    ans = 0\n    for y in range(b):\n        (c, d, e) = map(int, input().split())\n        if d - c + 1 > maxsize or (d - c + 1 == maxsize and e < ans):\n            maxsize = d - c + 1\n            ans = e\n        if c < lmin or (c == lmin and e < lval):\n            lval = e\n            lmin = c\n        if d > rmax or (d == rmax and e < rval):\n            rval = e\n            rmax = d\n        if maxsize == rmax - lmin + 1:\n            print(min(ans, lval + rval))\n        else:\n            print(lval + rval)", "import sys\ninput = sys.stdin.readline\nMAX = sys.maxsize\n\ndef inp():\n    return int(input())\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\ndef solve(segments):\n    first = 10 ** 10\n    last = -1\n    tmp = MAX\n    (first_cost, last_cost) = (MAX, MAX)\n    for s in segments:\n        ((l, r), c) = s\n        if first > l:\n            tmp = MAX\n            first = l\n            first_cost = c\n        elif first == l and first_cost > c:\n            first_cost = c\n        if last < r:\n            tmp = MAX\n            last = r\n            last_cost = c\n        elif last == r and last_cost > c:\n            last_cost = c\n        if first == l and last == r:\n            tmp = min(tmp, c)\n        print(min(first_cost + last_cost, tmp))\nfor _ in range(inp()):\n    s = list()\n    for _ in range(inp()):\n        (l, r, c) = read_int_list()\n        s.append(((l, r), c))\n    solve(s)", "import sys, heapq\n\ndef print(s):\n    sys.stdout.write('{}\\n'.format(s))\nout = []\nfor t in range(int(input())):\n    n = int(input())\n    lo = 1000000001\n    hi = 0\n    mins = []\n    maxs = []\n    completes = []\n    for s in range(n):\n        (l, r, c) = map(int, input().split())\n        if l == lo:\n            heapq.heappush(mins, (c, l, r))\n        elif l < lo:\n            lo = l\n            mins = []\n            heapq.heappush(mins, (c, l, r))\n            completes = []\n        if r == hi:\n            heapq.heappush(maxs, (c, l, r))\n            if l == lo:\n                heapq.heappush(completes, (c, l, r))\n        elif r > hi:\n            hi = r\n            maxs = []\n            completes = []\n            heapq.heappush(maxs, (c, l, r))\n            if l == lo:\n                heapq.heappush(completes, (c, l, r))\n        cheapestTwo = mins[0][0] + maxs[0][0]\n        if len(completes) > 0:\n            cheapestComplete = completes[0][0]\n            out.append(min(cheapestComplete, cheapestTwo))\n        else:\n            out.append(cheapestTwo)\nprint('\\n'.join(map(str, out)))", "import sys\nimport typing\nfrom typing import Callable, Dict, List, Set, Tuple\nsys.setrecursionlimit(10 ** 6)\nVec = List[int]\nVecVec = List[Vec]\nsinput: Callable[..., str] = sys.stdin.readline\nMOD: int = 998244353\nINF: float = float('Inf')\nIINF: int = sys.maxsize // 2\n\ndef main() -> None:\n    n = int(sinput())\n    lrc = [tuple(map(int, sinput().split())) for _ in range(n)]\n    width = []\n    cost = []\n    max_w = 0\n    min_c = IINF\n    for (l, r, c) in lrc:\n        if r - l + 1 > max_w:\n            max_w = r - l + 1\n            min_c = c\n        elif r - l + 1 == max_w:\n            min_c = min(min_c, c)\n        width.append(max_w)\n        cost.append(min_c)\n    left = IINF\n    left_cost = 0\n    right = -IINF\n    right_cost = 0\n    for (i, (l, r, c)) in enumerate(lrc):\n        if l < left:\n            left = l\n            left_cost = c\n        elif l == left:\n            left_cost = min(left_cost, c)\n        if r > right:\n            right = r\n            right_cost = c\n        elif r == right:\n            right_cost = min(right_cost, c)\n        if right - left + 1 > width[i]:\n            cost[i] = left_cost + right_cost\n        elif right - left + 1 == width[i]:\n            cost[i] = min(cost[i], left_cost + right_cost)\n    print(*cost, sep='\\n')\nt = int(sinput())\nfor _ in range(t):\n    main()", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    minL = float('inf')\n    maxR = float('-inf')\n    costLR = float('inf')\n    costL = None\n    costR = None\n    N = int(input())\n    for x in range(N):\n        (l, r, c) = map(int, input().split())\n        if l < minL:\n            costLR = float('inf')\n            minL = l\n            costL = c\n        elif l == minL:\n            costL = min(costL, c)\n        if r > maxR:\n            costLR = float('inf')\n            maxR = r\n            costR = c\n        elif r == maxR:\n            costR = min(costR, c)\n        ans = costL + costR\n        if l == minL and r == maxR:\n            costLR = min(costLR, c)\n        ans = min(ans, costLR)\n        print(ans)", "import sys\ninput = sys.stdin.readline\ninf = 11000000000.0\nfor _ in range(int(input())):\n    max_size = 0\n    max_size_cost = 0\n    (leftmost, rightmost) = (inf, 0)\n    (l_cost, r_cost) = (0, 0)\n    for i in range(int(input())):\n        (l, r, cost) = map(int, input().split())\n        if r - l + 1 > max_size or (r - l + 1 == max_size and max_size_cost > cost):\n            max_size_cost = cost\n            max_size = r - l + 1\n        if l < leftmost or (l == leftmost and cost < l_cost):\n            l_cost = cost\n            leftmost = l\n        if r > rightmost or (r == rightmost and cost < r_cost):\n            r_cost = cost\n            rightmost = r\n        print([r_cost + l_cost, min(max_size_cost, r_cost + l_cost)][rightmost - leftmost + 1 == max_size])", "out = []\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    left = float('inf')\n    right = maxsize = maxsizecost = -float('inf')\n    for j in range(n):\n        (l, r, c) = map(int, input().split())\n        if r - l + 1 > maxsize or (r - l + 1 == maxsize and c < maxsizecost):\n            maxsize = r - l + 1\n            maxsizecost = c\n        if l < left or (l == left and c < lcost):\n            lcost = c\n            left = l\n        if r > right or (r == right and c < rcost):\n            rcost = c\n            right = r\n        if right - left + 1 == maxsize:\n            out.append(min(maxsizecost, lcost + rcost))\n        else:\n            out.append(lcost + rcost)\nprint(*out, sep='\\n')", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\nt = int(input())\nfor rtt in range(t):\n    n = int(input())\n    a1 = 0\n    a2 = 0\n    b1 = 10 ** 9 + 1\n    b2 = 0\n    c1 = 0\n    c2 = 0\n    for r in range(n):\n        (a, b, c) = get_ints()\n        if a1 < b - a + 1 or (a1 == b - a + 1 and a2 > c):\n            a1 = b - a + 1\n            a2 = c\n        if b1 > a or (b1 == a and b2 > c):\n            b1 = a\n            b2 = c\n        if c1 < b or (c1 == b and c2 > c):\n            c1 = b\n            c2 = c\n        if a1 > c1 - b1 + 1:\n            sys.stdout.write(str(a2) + '\\n')\n        elif a1 == c1 - b1 + 1:\n            sys.stdout.write(str(min(a2, b2 + c2)) + '\\n')\n        else:\n            sys.stdout.write(str(b2 + c2) + '\\n')", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip('\\r\\n')\nA = 10 ** 9 + 1\nfor i in range(int(input())):\n    n = int(input())\n    (min_l, max_r) = (A, 0)\n    (min_cost_min_l, min_cost_max_r) = (A, A)\n    (max_length, min_cost_max_length) = (0, A)\n    for j in range(n):\n        (l, r, c) = map(int, input().split())\n        if l == min_l:\n            min_cost_min_l = min(min_cost_min_l, c)\n        if l < min_l:\n            min_l = l\n            min_cost_min_l = c\n        if r == max_r:\n            min_cost_max_r = min(min_cost_max_r, c)\n        if r > max_r:\n            max_r = r\n            min_cost_max_r = c\n        if r - l + 1 == max_length:\n            min_cost_max_length = min(min_cost_max_length, c)\n        if r - l + 1 > max_length:\n            max_length = r - l + 1\n            min_cost_max_length = c\n        if max_r - min_l + 1 == max_length:\n            print(min(min_cost_max_length, min_cost_min_l + min_cost_max_r))\n        else:\n            print(min_cost_min_l + min_cost_max_r)", "import sys\ninput = sys.stdin.readline\nfor test in range(int(input())):\n    n = int(input())\n    lm = 2 ** 69\n    rm = -1\n    res = 2 ** 69\n    for _ in range(n):\n        (l, r, c) = list(map(int, input().split()))\n        if lm > l:\n            lm = l\n            mcl = c\n            res = 2 ** 69\n        elif lm == l and c < mcl:\n            mcl = c\n        if r > rm:\n            rm = r\n            mcr = c\n            res = 2 ** 69\n        elif r == rm and c < mcr:\n            mcr = c\n        if r == rm and l == lm:\n            res = min(res, c)\n        res = min(res, mcr + mcl)\n        print(res)", "I = open(0).readline\nfor _ in [0] * int(I()):\n    x = y = z = 1e+62\n    for _ in [0] * int(I()):\n        (l, r, c) = map(int, I().split())\n        x = min(x, l << 31 | c)\n        y = min(y, -r << 31 | c)\n        z = min(z, l - r << 31 | c)\n        print(min(x + y, z) & 2 ** 31 - 1)", "from itertools import permutations as per\nfrom math import factorial as fact\nfrom difflib import SequenceMatcher\nimport sys\ninp = sys.stdin.readline\nimport bisect\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nt = int(inp())\nfor _ in range(t):\n    n = int(inp())\n    (ml, mr) = (10 ** 9 + 1, 0)\n    (c1, c2) = (0, 0)\n    c3 = 0\n    rng = 0\n    for i in range(n):\n        (l, r, c) = map(int, inp().split())\n        if l < ml:\n            ml = l\n            c1 = c\n        elif l == ml:\n            c1 = min(c1, c)\n        if r > mr:\n            mr = r\n            c2 = c\n        elif r == mr:\n            c2 = min(c2, c)\n        if r - l + 1 == rng:\n            c3 = min(c3, c)\n        elif r - l + 1 > rng:\n            rng = r - l + 1\n            c3 = c\n        if rng == mr - ml + 1:\n            print(min(c3, c1 + c2))\n        else:\n            print(c1 + c2)", "p = open(0).readline\nfor i in [0] * int(p()):\n    x = y = z = 5e+18\n    for f in [0] * int(p()):\n        (l, r, c) = map(int, p().split())\n        x = min(x, l << 31 | c)\n        y = min(y, -r << 31 | c)\n        print(min(x + y, (z := min(z, l - r << 31 | c))) & 2 ** 31 - 1)", "I = open(0).readline\nfor _ in [0] * int(I()):\n    x = y = z = 5e+18\n    for _ in [0] * int(I()):\n        (l, r, c) = map(int, I().split())\n        x = min(x, l << 31 | c)\n        y = min(y, -r << 31 | c)\n        z = min(z, l - r << 31 | c)\n        print(min(x + y, z) & 2 ** 31 - 1)", "from itertools import permutations as per\nfrom math import factorial as fact\nfrom difflib import SequenceMatcher\nimport sys\ninput = sys.stdin.readline\nimport bisect\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = {}\n    (ml, mr) = (10 ** 9 + 1, 0)\n    (c1, c2) = (0, 0)\n    for i in range(n):\n        (l, r, c) = map(int, input().split())\n        if l < ml:\n            ml = l\n            c1 = c\n        elif l == ml:\n            c1 = min(c1, c)\n        if r > mr:\n            mr = r\n            c2 = c\n        elif r == mr:\n            c2 = min(c2, c)\n        if (l, r) in d:\n            d[l, r] = min(d[l, r], c)\n        else:\n            d[l, r] = c\n        if (ml, mr) in d:\n            print(min(d[ml, mr], c1 + c2))\n        else:\n            print(c1 + c2)", "I = open(0).readline\nfor _ in [0] * int(I()):\n    x = y = z = 5e+18\n    for _ in [0] * int(I()):\n        (l, r, c) = map(int, I().split())\n        x = min(x, l << 31 | c)\n        y = min(y, -r << 31 | c)\n        print(min(x + y, (z := min(z, l - r << 31 | c))) & 2 ** 31 - 1)", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    n = int(inp())\n    d = dict()\n    bl = (11 ** 9, -1)\n    br = (0, -1)\n    bad = 11 ** 9\n    ans = [None] * n\n    for i in range(n):\n        (l, r, c) = map(int, inp().split())\n        bl = min(bl, (l, c))\n        br = max(br, (r, -c))\n        d[l, r] = min(d.get((l, r), bad), c)\n        ans[i] = min(bl[1] - br[1], d.get((bl[0], br[0]), bad))\n    print('\\n'.join(map(str, ans)))\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "import sys\n\ndef sol(bestleft, besright, bestboth, l, r, c):\n    if r - l > bestboth[1] - bestboth[0] or (r - l == bestboth[1] - bestboth[0] and c < bestboth[2]):\n        bestboth = (l, r, c)\n    if l < bestleft[0] or (l == bestleft[0] and c < bestleft[2]):\n        bestleft = (l, r, c)\n    if r > besright[1] or (r == besright[1] and c < besright[2]):\n        besright = (l, r, c)\n    if bestboth[1] - bestboth[0] == besright[1] - bestleft[0]:\n        return (bestleft, besright, bestboth, min(bestboth[2], bestleft[2] + besright[2]))\n    else:\n        return (bestleft, besright, bestboth, bestleft[2] + besright[2])\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    bestleft = (float('inf'), float('-inf'), float('inf'))\n    besright = (float('inf'), float('-inf'), float('inf'))\n    bestboth = (float('inf'), float('-inf'), float('inf'))\n    ans = float('inf')\n    for _ in range(n):\n        (l, r, c) = map(int, sys.stdin.readline().strip().split())\n        (bestleft, besright, bestboth, ans) = sol(bestleft, besright, bestboth, l, r, c)\n        print(ans)", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    n = int(inp())\n    d = dict()\n    bl = (11 ** 9, -1)\n    br = (0, -1)\n    bad = 11 ** 9\n    ans = [None] * n\n    for i in range(n):\n        (l, r, c) = map(int, inp().split())\n        bl = min(bl, (l, c))\n        br = max(br, (r, -c))\n        d[l, r] = min(d.get((l, r), bad), c)\n        ans[i] = min(bl[1] - br[1], d.get((bl[0], br[0]), bad))\n    print('\\n'.join(map(str, ans)))\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "p = open(0).readline\nfor i in [0] * int(p()):\n    x = y = z = 5e+18\n    for f in [0] * int(p()):\n        (l, r, c) = map(int, p().split())\n        x = min(x, l << 31 | c)\n        y = min(y, -r << 31 | c)\n        print(min(x + y, (z := min(z, l - r << 31 | c))) & 2 ** 31 - 1)\nnum_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()", "I = open(0).readline\nfor _ in [0] * int(I()):\n    x = y = z = 5e+18\n    for _ in [0] * int(I()):\n        (l, r, c) = map(int, I().split())\n        x = min(x, l << 31 | c)\n        y = min(y, -r << 31 | c)\n        print(min(x + y, (z := min(z, l - r << 31 | c))) & 2 ** 31 - 1)", "from itertools import permutations as per\nfrom math import factorial as fact\nfrom difflib import SequenceMatcher\nimport sys\ninp = sys.stdin.readline\nimport bisect\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nt = int(inp())\nfor _ in range(t):\n    n = int(inp())\n    d = {}\n    (ml, mr) = (10 ** 9 + 1, 0)\n    (c1, c2) = (0, 0)\n    for i in range(n):\n        (l, r, c) = map(int, inp().split())\n        if l < ml:\n            ml = l\n            c1 = c\n        elif l == ml:\n            c1 = min(c1, c)\n        if r > mr:\n            mr = r\n            c2 = c\n        elif r == mr:\n            c2 = min(c2, c)\n        if (l, r) in d:\n            d[l, r] = min(d[l, r], c)\n        else:\n            d[l, r] = c\n        if (ml, mr) in d:\n            print(min(d[ml, mr], c1 + c2))\n        else:\n            print(c1 + c2)", "I = open(0).readline\nfor _ in [0] * int(I()):\n    x = (2000000000.0, 2000000000.0)\n    y = z = (0, 2000000000.0)\n    for _ in [0] * int(I()):\n        (l, r, c) = map(int, I().split())\n        x = (d, e) = min(x, (l, c))\n        y = (f, g) = min(y, (-r, c))\n        z = min(z, (l - r, c))\n        print(min((d + f, e + g), z)[1])", "I = open(0).readline\nfor _ in [0] * int(I()):\n    x = y = z = (2000000000.0, 0)\n    for _ in [0] * int(I()):\n        (l, r, c) = map(int, I().split())\n        x = (d, e) = min(x, (l, c))\n        y = (f, g) = min(y, (-r, c))\n        z = min(z, (l - r, c))\n        print(min((d + f, e + g), z)[1])", "for _ in range(int(input())):\n    n = int(input())\n    si = [list(map(int, input().split())) for i in range(n)]\n    lowest_number = si[0][0]\n    highest_number = si[0][1]\n    difference = highest_number - lowest_number\n    lowest_cost = si[0][2]\n    highest_cost = si[0][2]\n    difference_cost = si[0][2]\n    print(si[0][2])\n    for i in si[1:]:\n        (si0, si1, si2) = i\n        if si0 < lowest_number or (si0 == lowest_number and si2 < lowest_cost):\n            lowest_number = si0\n            lowest_cost = si2\n        if si1 > highest_number or (si1 == highest_number and si2 < highest_cost):\n            highest_number = si1\n            highest_cost = si2\n        if si1 - si0 > difference or (si1 - si0 == difference and si2 < difference_cost):\n            difference = si1 - si0\n            difference_cost = si2\n        if difference == highest_number - lowest_number:\n            print(min(difference_cost, lowest_cost + highest_cost))\n        else:\n            print(lowest_cost + highest_cost)", "import sys\nINT_MAX = sys.maxsize\ninp = sys.stdin.readline\nfor _ in range(int(inp())):\n    n = int(inp())\n    d = {}\n    ml = (INT_MAX, INT_MAX)\n    mr = (0, -1)\n    for i in range(n):\n        (l, r, c) = map(int, inp().split())\n        ml = min(ml, (l, c))\n        mr = max(mr, (r, -c))\n        d[l, r] = min(d.get((l, r), INT_MAX), c)\n        print(min(ml[1] - mr[1], d.get((ml[0], mr[0]), INT_MAX)))", "import sys\ninput = sys.stdin.readline\ninf = 11000000000.0\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = [inf, inf]\n    e = [-inf, -inf]\n    o = [-inf, -inf]\n    for i in range(n):\n        (l, r, c) = map(int, input().split())\n        s = min(s, [l, c])\n        e = max(e, [r, -c])\n        o = max(o, [r - l, -c])\n        ans = s[1] - e[1]\n        if e[0] - s[0] == o[0]:\n            ans = min(ans, -o[1])\n        print(str(ans))", "out = []\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = (10 ** 10, 0)\n    r = (-10 ** 10, 0)\n    seen = dict()\n    for i in range(n):\n        (li, ri, ci) = map(int, input().split())\n        if (li, ri) not in seen:\n            seen[li, ri] = 10 ** 10\n        seen[li, ri] = min(seen[li, ri], ci)\n        l = min(l, (li, ci))\n        r = max(r, (ri, -ci))\n        p = [l[1] - r[1]]\n        if (l[0], r[0]) in seen:\n            p.append(seen[l[0], r[0]])\n        out.append(min(p))\nprint('\\n'.join(map(str, out)))", "from collections import Counter, defaultdict, deque\nimport heapq\nimport bisect\nfrom sys import stdin, stdout\nfrom itertools import repeat\nimport math, random\n\ndef inp(force_list=False):\n    re = list(map(int, input().split()))\n    if len(re) == 1 and (not force_list):\n        return re[0]\n    return re\n\ndef inst():\n    return input().strip()\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nmod = 1000000007\n\ndef my_main():\n    kase = inp()\n    pans = []\n    mx = int(1e+17)\n    for ka in range(kase):\n        n = inp()\n        da = [inp() for i in range(n)]\n        ans = [str(da[0][-1])]\n        (mx, mi) = (0, 0)\n        tt = 0\n        for ii in range(1, n):\n            (l, r, c) = da[ii]\n            if l < da[mi][0] or (l == da[mi][0] and c < da[mi][-1]):\n                mi = ii\n            if r > da[mx][1] or (r == da[mx][1] and c < da[mx][-1]):\n                mx = ii\n            if l <= da[tt][0] and r >= da[tt][1]:\n                if l == da[tt][0] and r == da[tt][1] and (c >= da[tt][-1]):\n                    pass\n                else:\n                    tt = ii\n            cost = da[mx][-1] + da[mi][-1]\n            if da[tt][0] == da[mi][0] and da[tt][1] == da[mx][1]:\n                cost = min(cost, da[tt][-1])\n            ans.append(str(cost))\n        pans.append('\\n'.join(ans))\n    print('\\n'.join(pans))\nmy_main()", "import sys\ninput = sys.stdin.readline\ninf = 11000000000.0\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = [inf, inf]\n    e = [-inf, -inf]\n    o = [-inf, -inf]\n    for i in range(n):\n        (l, r, c) = map(int, input().split())\n        s = min(s, [l, c])\n        e = max(e, [r, -c])\n        o = max(o, [r - l, -c])\n        ans = s[1] - e[1]\n        if e[0] - s[0] == o[0]:\n            ans = min(ans, -o[1])\n        print(str(ans))", "def intshop(arr):\n    minleft = float('inf')\n    maxright = 0\n    maxlen = 0\n    costl = 0\n    costr = 0\n    costlen = 0\n    for i in range(len(arr)):\n        (l, r, c) = (arr[i][0], arr[i][1], arr[i][2])\n        if l < minleft:\n            minleft = l\n            costl = c\n        elif minleft == l:\n            costl = min(costl, c)\n        if maxright < r:\n            maxright = r\n            costr = c\n        elif maxright == r:\n            costr = min(costr, c)\n        if maxlen < r - l + 1:\n            maxlen = r - l + 1\n            costlen = c\n        elif maxlen == r - l + 1:\n            costlen = min(costlen, c)\n        cost = costl + costr\n        if maxlen == maxright - minleft + 1:\n            cost = min(cost, costlen)\n        print(cost)\nt = int(input())\nwhile t:\n    n = int(input())\n    res = []\n    while n:\n        arr = list(map(int, input().split()))\n        res.append(arr)\n        n -= 1\n    intshop(res)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    low = [10000000000, 10000000000]\n    high = [0, 1000000000]\n    both = [10000000000, 0, 1000000000]\n    res = [0 for i in range(n)]\n    for i in range(n):\n        (l, r, c) = map(int, input().split())\n        if l < low[0]:\n            low[0] = l\n            low[1] = c\n        elif l == low[0]:\n            if c < low[1]:\n                low[1] = c\n        if r > high[0]:\n            high[0] = r\n            high[1] = c\n        elif r == high[0]:\n            if c < high[1]:\n                high[1] = c\n        if l == low[0] and r == high[0]:\n            if l == both[0] and r == both[1]:\n                if both[2] > c:\n                    both[2] = c\n            else:\n                both[0] = l\n                both[1] = r\n                both[2] = c\n        res[i] = low[1] + high[1]\n        if low[0] == both[0] and high[0] == both[1]:\n            res[i] = min(res[i], both[2])\n    for i in res:\n        print(i)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lefts = []\n    rights = []\n    costs = []\n    ans = []\n    for j in range(n):\n        (l, r, c) = map(int, input().split())\n        lefts.append(l)\n        rights.append(r)\n        costs.append(c)\n    mni = 0\n    mxi = 0\n    starts = {}\n    singles = {}\n    for i in range(n):\n        singles[rights[i] - lefts[i] + 1] = min(singles.get(rights[i] - lefts[i] + 1, 1 << 62), costs[i])\n        if (lefts[mni], costs[mni]) > (lefts[i], costs[i]):\n            mni = i\n        if (-rights[mxi], costs[mxi]) > (-rights[i], costs[i]):\n            mxi = i\n        if costs[mni] + costs[mxi] <= singles.get(rights[mxi] - lefts[mni] + 1, 1 << 62):\n            ans.append(costs[mni] + costs[mxi])\n        else:\n            ans.append(singles[rights[mxi] - lefts[mni] + 1])\n    print('\\n'.join(map(str, ans)))", "import sys\nINT_MAX = sys.maxsize\ninp = sys.stdin.readline\nfor _ in range(int(inp())):\n    n = int(inp())\n    d = {}\n    ml = (INT_MAX, INT_MAX)\n    mr = (0, -1)\n    for i in range(n):\n        (l, r, c) = map(int, inp().split())\n        ml = min(ml, (l, c))\n        mr = max(mr, (r, -c))\n        d[l, r] = min(d.get((l, r), INT_MAX), c)\n        print(min(ml[1] - mr[1], d.get((ml[0], mr[0]), INT_MAX)))", "for _ in range(int(input())):\n    n = int(input())\n    x = [list(map(int, input().split())) for i in range(n)]\n    costl = x[0][2]\n    costr = x[0][2]\n    l = x[0][0]\n    r = x[0][1]\n    L = r - l\n    costL = x[0][2]\n    print(x[0][2])\n    for i in x[1:]:\n        (a, b, c) = i\n        if a < l or (a == l and c < costl):\n            costl = c\n            l = a\n        if b > r or (b == r and c < costr):\n            costr = c\n            r = b\n        if b - a > L or (b - a == L and c < costL):\n            costL = c\n            L = b - a\n        if r - l < L:\n            print(costL)\n        elif r - l == L:\n            print(min(costl + costr, costL))\n        else:\n            print(costl + costr)", "import sys\ninput = sys.stdin.readline\ninf = 1e+18\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = [inf, inf]\n    e = [-inf, -inf]\n    o = [-inf, -inf]\n    for i in range(n):\n        (l, r, c) = map(int, input().split())\n        s = min(s, [l, c])\n        e = max(e, [r, -c])\n        o = max(o, [r - l, -c])\n        ans = s[1] - e[1]\n        if e[0] - s[0] == o[0]:\n            ans = min(ans, -o[1])\n        print(str(ans))", "from math import gcd, sqrt\nfrom functools import cmp_to_key\nfrom string import ascii_lowercase as alph\nimport os, sys\nfrom itertools import permutations\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt')\n    sys.stdout = open('output.txt', 'w')\nINF = float('inf')\n\ndef readList():\n    return [int(i) for i in input().strip().split()]\n\ndef solve():\n    n = int(input())\n    a = []\n    for i in range(n):\n        (l, r, c) = readList()\n        a.append([l, r, c])\n    (curL, curR) = (a[0][0], a[0][1])\n    cost = [a[0][2]] * 3\n    s = 0\n    while s < n:\n        (l, r, c) = a[s]\n        if l < curL:\n            curL = l\n            cost[0] = c\n            if r >= curR:\n                cost[2] = c\n            else:\n                cost[2] = INF\n        if r > curR:\n            curR = r\n            cost[1] = c\n            if l <= curL:\n                cost[2] = c\n            else:\n                cost[2] = INF\n        if l == curL:\n            cost[0] = min(cost[0], c)\n        if r == curR:\n            cost[1] = min(cost[1], c)\n        if l == curL and r == curR:\n            cost[2] = min(cost[2], c)\n        print(min(cost[0] + cost[1], cost[2]))\n        s += 1\n\ndef test(t):\n    while t:\n        t -= 1\n        solve()\nt = int(input())\ntest(t)", "import sys\ninput = sys.stdin.readline\ninf = 11000000000.0\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    (ml, cl) = (inf, inf)\n    (mr, cr) = (0, inf)\n    (maxlen, clen) = (0, inf)\n    for i in range(n):\n        (l, r, c) = map(int, input().split())\n        if l < ml:\n            ml = l\n            cl = inf\n        if l == ml:\n            cl = min(cl, c)\n        if r > mr:\n            mr = r\n            cr = inf\n        if r == mr:\n            cr = min(cr, c)\n        if maxlen < r - l + 1:\n            maxlen = r - l + 1\n            clen = inf\n        if maxlen == r - l + 1:\n            clen = min(clen, c)\n        ans = cl + cr\n        if maxlen == mr - ml + 1:\n            ans = min(ans, clen)\n        print(ans)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    segs = []\n    for i in range(n):\n        segs.append(tuple(map(int, input().split())))\n    min_index = 0\n    max_index = 0\n    coast_to_coast = 0\n    ans = [segs[0][2]]\n    for i in range(1, len(segs)):\n        if segs[i][0] < segs[min_index][0] or (segs[i][0] == segs[min_index][0] and segs[i][2] < segs[min_index][2]):\n            min_index = i\n        if segs[i][1] > segs[max_index][1] or (segs[i][1] == segs[max_index][1] and segs[i][2] < segs[max_index][2]):\n            max_index = i\n        if segs[i][0] == segs[min_index][0] and segs[i][1] == segs[max_index][1]:\n            if coast_to_coast == -1 or (segs[coast_to_coast][0] != segs[min_index][0] or segs[coast_to_coast][1] != segs[max_index][1]) or segs[coast_to_coast][2] > segs[i][2]:\n                coast_to_coast = i\n        res = segs[min_index][2] + segs[max_index][2]\n        if segs[coast_to_coast][0] != segs[min_index][0] or segs[coast_to_coast][1] != segs[max_index][1]:\n            coast_to_coast = -1\n        if coast_to_coast != -1:\n            res = min(res, segs[coast_to_coast][2])\n        ans.append(res)\n    print('\\n'.join(map(str, ans)))", "for i in range(int(input())):\n    n = int(input())\n    s = [[int(i) for i in input().split()] for _ in range(n)]\n    mini = s[0]\n    maxi = s[0]\n    c = s[0]\n    for i in s:\n        if i[0] == mini[0] and i[2] <= mini[2] or i[0] < mini[0]:\n            mini = i\n        if i[1] == maxi[1] and i[2] <= maxi[2] or i[1] > maxi[1]:\n            maxi = i\n        if i[0] < c[0] or i[1] > c[1]:\n            c = i\n        elif c[0] == i[0] and c[1] == i[1] and (c[2] > i[2]):\n            c = i\n        if mini[0] < c[0] or maxi[1] > c[1]:\n            print(mini[2] + maxi[2])\n        elif c[0] == mini[0] and c[1] == maxi[1]:\n            print(min(c[2], mini[2] + maxi[2]))\n        else:\n            print(c[2])", "import sys\ninp = sys.stdin.readline\ninf = int(9000000000.0)\nt = int(inp())\nfor i in range(t):\n    n = int(inp())\n    rr = [-inf, -inf]\n    ll = [inf, inf]\n    mxl = [-inf, -inf]\n    for j in range(n):\n        (a, b, c) = [int(x) for x in inp().split()]\n        rr = max(rr, [b, -c])\n        ll = min(ll, [a, c])\n        mxl = max(mxl, [b - a + 1, -c])\n        a1 = abs(rr[1]) + abs(ll[1])\n        a2 = abs(mxl[1])\n        if mxl[0] == rr[0] - ll[0] + 1:\n            print(min(a1, a2))\n        else:\n            print(a1)", "from collections import defaultdict\nfor j in range(int(input())):\n    n = int(input())\n    (ml, mr) = (10000000000, -1)\n    (lc, lr) = (10000000000, 100000000000)\n    dicl = defaultdict(lambda : 100000000000)\n    dicr = defaultdict(lambda : 100000000000)\n    dic = defaultdict(lambda : 100000000000)\n    ans = []\n    for i in range(n):\n        (l, r, c) = list(map(int, input().split()))\n        if ml == l:\n            lc = min(lc, c)\n        if mr == r:\n            lr = min(lr, c)\n        if l < ml:\n            ml = l\n            lc = c\n        if mr < r:\n            mr = r\n            lr = c\n        dic[l, r] = min(dic[l, r], c)\n        mi = lc + lr\n        mi = min(dic[ml, mr], mi)\n        ans.append(mi)\n    for i in ans:\n        print(i)", "z = ''\nfor i in range(int(input())):\n    n = int(input())\n    s = [[int(i) for i in input().split()] for _ in range(n)]\n    mini = s[0]\n    maxi = s[0]\n    c = s[0]\n    for i in s:\n        if i[0] == mini[0] and i[2] <= mini[2] or i[0] < mini[0]:\n            mini = i\n        if i[1] == maxi[1] and i[2] <= maxi[2] or i[1] > maxi[1]:\n            maxi = i\n        if i[0] < c[0] or i[1] > c[1]:\n            c = i\n        elif c[0] == i[0] and c[1] == i[1] and (c[2] > i[2]):\n            c = i\n        if mini[0] < c[0] or maxi[1] > c[1]:\n            z += str(mini[2] + maxi[2]) + '\\n'\n        elif c[0] == mini[0] and c[1] == maxi[1]:\n            z += str(min(c[2], mini[2] + maxi[2])) + '\\n'\n        else:\n            z += str(c[2]) + '\\n'\nprint(z)", "def check(t1, t2, c):\n    if t1 != t2:\n        return c[t1] + c[t2]\n    else:\n        return c[t1]\nfor _ in range(int(input())):\n    n = int(input())\n    (l, r, c) = ([0] * n, [0] * n, [0] * n)\n    for i in range(n):\n        (x, y, z) = map(int, input().split())\n        l[i] = x\n        r[i] = y\n        c[i] = z\n    (t1, t2, t3) = (0, 0, 0)\n    for i in range(n):\n        if l[i] < l[t1] or (l[i] == l[t1] and c[i] < c[t1]):\n            t1 = i\n        if r[i] > r[t2] or (r[i] == r[t2] and c[i] < c[t2]):\n            t2 = i\n        if l[i] < l[t3] or r[i] > r[t3] or (l[i] == l[t3] and r[i] == r[t3] and (c[i] < c[t3])):\n            t3 = i\n        if l[t3] <= l[t1] and r[t3] >= r[t2] and (l[t3] < l[t1] or r[t3] > r[t2] or c[t3] < check(t1, t2, c)):\n            print(c[t3])\n        else:\n            print(check(t1, t2, c))", "out = []\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = {}\n    left = (float('inf'), 0)\n    right = (float('-inf'), 0)\n    for _ in range(n):\n        (l, r, c) = map(int, input().split())\n        if (l, r) not in d:\n            d[l, r] = float('inf')\n        d[l, r] = min(d[l, r], c)\n        left = min(left, (l, c))\n        right = max(right, (r, -c))\n        p = [left[1] - right[1]]\n        if (left[0], right[0]) in d:\n            p.append(d[left[0], right[0]])\n        out.append(min(p))\nprint(*out, sep='\\n')", "def hr(i, j, ct):\n    return ct[i] if i == j else ct[i] + ct[j]\nfor _ in range(int(input())):\n    n = int(input())\n    lt = [0 for _ in range(n)]\n    rt = [0 for _ in range(n)]\n    ct = [0 for _ in range(n)]\n    for i in range(n):\n        (lt[i], rt[i], ct[i]) = map(int, input().split())\n    i = j = k = 0\n    for z in range(n):\n        if lt[z] < lt[i] or (lt[z] == lt[i] and ct[z] < ct[i]):\n            i = z\n        if rt[z] > rt[j] or (rt[z] == rt[j] and ct[z] < ct[j]):\n            j = z\n        if lt[z] < lt[k] or rt[z] > rt[k] or (lt[z] == lt[k] and rt[z] == rt[k] and (ct[z] < ct[k])):\n            k = z\n        if lt[k] <= lt[i] and rt[k] >= rt[j] and (lt[k] < lt[i] or rt[k] > rt[j] or ct[k] < hr(i, j, ct)):\n            print(ct[k])\n        else:\n            print(hr(i, j, ct))", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, input().split())))\n    (p, q, a) = (0, 0, 0)\n    for i in range(n):\n        (l, r, c) = arr[i]\n        if l < arr[p][0] or (l == arr[p][0] and c < arr[p][2]):\n            p = i\n        if r > arr[q][1] or (r == arr[q][1] and c < arr[q][2]):\n            q = i\n        if l < arr[a][0] or r > arr[a][1] or (l == arr[a][0] and r == arr[a][1] and (c < arr[a][2])):\n            a = i\n        cost = arr[p][2] + arr[q][2] - int(p == q) * arr[p][2]\n        if arr[a][0] <= arr[p][0] and arr[a][1] >= arr[q][1] and (arr[a][0] < arr[p][0] or arr[a][1] > arr[q][1] or arr[a][2] < cost):\n            print(arr[a][2])\n        else:\n            print(cost)", "import sys\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    best_l = 1e+17\n    best_r = -1\n    best_l_cost = 1e+17\n    best_r_cost = 1e+17\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n    o = {}\n    for i in range(n):\n        item = a[i]\n        if item[0] < best_l:\n            best_l = item[0]\n            best_l_cost = item[2]\n        if item[0] == best_l:\n            best_l_cost = min(best_l_cost, item[2])\n        if item[1] > best_r:\n            best_r = item[1]\n            best_r_cost = item[2]\n        if item[1] == best_r:\n            best_r_cost = min(best_r_cost, item[2])\n        if o.get((item[0], item[1])):\n            o[item[0], item[1]] = min(o[item[0], item[1]], item[2])\n        else:\n            o[item[0], item[1]] = item[2]\n        k = o.get((best_l, best_r))\n        if k == None:\n            k = 1e+17\n        print(min(best_l_cost + best_r_cost, k))", "import math, bisect, heapq, random, sys, itertools\ninput = sys.stdin.readline\nints = lambda : list(map(int, input().split()))\nalpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\np = 10 ** 9 + 7\nfor t in range(int(input())):\n    (n,) = ints()\n    query = [ints() for i in range(n)][::-1]\n    (l, r, c) = query.pop()\n    ANS = []\n    ANS.append(c)\n    (cl, cr) = (c, c)\n    (L, R) = (l, r)\n    (left, right, rg) = ({}, {}, {})\n    left[l] = c\n    right[r] = c\n    rg[l, r] = c\n    for i in range(n - 1):\n        (l, r, c) = query.pop()\n        if l not in left:\n            left[l] = p\n        left[l] = min(left[l], c)\n        if r not in right:\n            right[r] = p\n        right[r] = min(right[r], c)\n        if (l, r) not in rg:\n            rg[l, r] = p\n        rg[l, r] = min(rg[l, r], c)\n        L = min(l, L)\n        R = max(r, R)\n        ans = left[L] + right[R]\n        if (L, R) in rg:\n            ans = min(rg[L, R], ans)\n        ANS.append(ans)\n    print(*ANS, sep='\\n')", "from collections import defaultdict\nfor j in range(int(input())):\n    n = int(input())\n    (ml, mr) = (10000000000, -1)\n    dicl = defaultdict(lambda : 100000000000)\n    dicr = defaultdict(lambda : 100000000000)\n    dic = {}\n    ans = []\n    for i in range(n):\n        (l, r, c) = list(map(int, input().split()))\n        dicl[l] = min(dicl[l], c)\n        dicr[r] = min(dicr[r], c)\n        ml = min(ml, l)\n        mr = max(mr, r)\n        if (l, r) in dic:\n            dic[l, r] = min(dic[l, r], c)\n        else:\n            dic[l, r] = c\n        mi = dicl[ml] + dicr[mr]\n        if (ml, mr) in dic:\n            mi = min(dic[ml, mr], mi)\n        ans.append(mi)\n    for mi in ans:\n        print(mi)", "from heapq import heappush, heappop\nans = []\nfor _ in range(int(input())):\n    (lheap, rheap, all) = ([], [], [])\n    for i in range(int(input())):\n        (l, r, c) = map(int, input().split())\n        heappush(lheap, (l, c, r))\n        heappush(rheap, (-r, c, l))\n        heappush(all, (l - r, c, l, r))\n        left = lheap[0][0]\n        lc = lheap[0][1]\n        right = -rheap[0][0]\n        rc = rheap[0][1]\n        (la, ra) = (all[0][2], all[0][3])\n        if (la, ra) == (left, right) and all[0][1] < lc + rc:\n            ans.append(all[0][1])\n        else:\n            ans.append(lc + rc)\nprint(*ans, sep='\\n')", "import math\nfor i in range(int(input())):\n    n = int(input())\n    mi = 2000101001\n    ma = -1\n    c = []\n    cost = 2000101001\n    mind = -1\n    maxd = -1\n    ans = []\n    prev = [2000101001, -1]\n    for j in range(n):\n        arr = list(map(int, input().split()))\n        c.append(arr[2])\n        mi = min(mi, arr[0])\n        ma = max(ma, arr[1])\n        if prev[0] == arr[0]:\n            if c[-1] < c[mind]:\n                mind = j\n        elif arr[0] < prev[0]:\n            mind = j\n        if prev[1] == arr[1]:\n            if c[-1] < c[maxd]:\n                maxd = j\n        elif arr[1] > prev[1]:\n            maxd = j\n        if [mi, ma] == prev:\n            if mi == arr[0] and ma == arr[1]:\n                cost = min(cost, arr[2], c[mind] + c[maxd])\n            else:\n                cost = min(cost, c[mind] + c[maxd])\n        elif mi == arr[0] and ma == arr[1]:\n            cost = min(arr[2], c[mind] + c[maxd])\n        else:\n            cost = c[mind] + c[maxd]\n        prev = [mi, ma]\n        ans.append(cost)\n    for j in ans:\n        print(j)", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom collections import deque\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor i in range(int(input())):\n    n = int(input())\n    (l, r, c) = int_arr()\n    d = {}\n    d[l] = c\n    d[r] = c\n    d[l, r] = c\n    mn_l = l\n    mn_r = r\n    print(c)\n    for i in range(n - 1):\n        (l, r, c) = int_arr()\n        d[l] = min(c, d.get(l, float('inf')))\n        d[r] = min(c, d.get(r, float('inf')))\n        d[l, r] = min(c, d.get((l, r), float('inf')))\n        mn_l = min(mn_l, l)\n        mn_r = max(mn_r, r)\n        ans = min(d[mn_l] + d[mn_r], d.get((mn_l, mn_r), float('inf')))\n        print(ans)", "import math, bisect, heapq, random, sys, itertools\nints = lambda : list(map(int, input().split()))\nalpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\np = 10 ** 9 + 7\nfor t in range(int(input())):\n    (n,) = ints()\n    query = [ints() for i in range(n)][::-1]\n    (l, r, c) = query.pop()\n    ANS = []\n    ANS.append(c)\n    (cl, cr) = (c, c)\n    (L, R) = (l, r)\n    (left, right, rg) = ({}, {}, {})\n    left[l] = c\n    right[r] = c\n    rg[l, r] = c\n    for i in range(n - 1):\n        (l, r, c) = query.pop()\n        if l not in left:\n            left[l] = p\n        left[l] = min(left[l], c)\n        if r not in right:\n            right[r] = p\n        right[r] = min(right[r], c)\n        if (l, r) not in rg:\n            rg[l, r] = p\n        rg[l, r] = min(rg[l, r], c)\n        L = min(l, L)\n        R = max(r, R)\n        ans = left[L] + right[R]\n        if (L, R) in rg:\n            ans = min(rg[L, R], ans)\n        ANS.append(ans)\n    print(*ANS, sep='\\n')", "import sys\nfast = lambda : sys.stdin.readline()\n\ndef ans():\n    n = int(fast())\n    HashMap = {}\n    arr = []\n    minimum_val = float('inf')\n    maximum_val = -float('inf')\n    result = []\n    for _ in range(n):\n        (a, b, c) = [int(x) for x in fast().split()]\n        minimum_val = min(a, minimum_val)\n        maximum_val = max(b, maximum_val)\n        arr.append([a, b, c])\n        if a not in HashMap:\n            HashMap[a] = c\n        else:\n            HashMap[a] = min(HashMap[a], c)\n        if b not in HashMap:\n            HashMap[b] = c\n        else:\n            HashMap[b] = min(HashMap[b], c)\n        if (a, b) not in HashMap:\n            HashMap[a, b] = c\n        else:\n            HashMap[a, b] = min(HashMap[a, b], c)\n        result.append(min(HashMap[minimum_val] + HashMap[maximum_val], HashMap.get((minimum_val, maximum_val), float('inf'))))\n    for i in result:\n        print(i)\nfor _ in range(int(fast())):\n    ans()", "sI = lambda : input()\niI = lambda : int(input())\nmI = lambda : map(int, input().split())\nlI = lambda : list(mI())\nfor i in range(iI()):\n    n = iI()\n    (l, r, c) = ([], [], [])\n    for i in range(n):\n        (a, b, g) = mI()\n        l.append(a)\n        r.append(b)\n        c.append(g)\n    ans = [c[0]]\n    d = {}\n    d[l[0], r[0]] = c[0]\n    mn = 0\n    mx = 0\n    for i in range(1, n):\n        if (l[i], r[i]) not in d:\n            d[l[i], r[i]] = c[i]\n        d[l[i], r[i]] = min(c[i], d[l[i], r[i]])\n        if l[i] < l[mn] or (l[i] == l[mn] and c[i] < c[mn]):\n            mn = i\n        if r[i] > r[mx] or (r[i] == r[mx] and c[i] < c[mx]):\n            mx = i\n        ans1 = c[mx] + c[mn]\n        ans1 = min(ans1, d.get((l[mn], r[mx]), 10 ** 15))\n        ans.append(ans1)\n    for i in ans:\n        print(i)", "class ValCost:\n\n    def __init__(self, val, cost):\n        self.val = val\n        self.cost = cost\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        n = int(input())\n        segments = []\n        for j in range(n):\n            (l, r, c) = [int(x) for x in input().split(' ')]\n            segments.append([l, r, c])\n        cost = segments[0][2]\n        min1 = ValCost(segments[0][0], cost)\n        max1 = ValCost(segments[0][1], cost)\n        longest = ValCost(segments[0][1] - segments[0][0], cost)\n        print(cost)\n        for i in range(1, len(segments)):\n            segment = segments[i]\n            (l, r, c) = segment\n            if l == min1.val:\n                min1.cost = min(min1.cost, c)\n            if r == max1.val:\n                max1.cost = min(max1.cost, c)\n            if l < min1.val:\n                min1 = ValCost(l, c)\n            if r > max1.val:\n                max1 = ValCost(r, c)\n            if r - l == longest.val:\n                longest.cost = min(longest.cost, c)\n            if r - l > longest.val:\n                longest = ValCost(r - l, c)\n            best = min1.cost + max1.cost\n            if longest.val == max1.val - min1.val:\n                print(min(longest.cost, best))\n            else:\n                print(best)\nmain()", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log2, ceil\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom bisect import insort\nfrom collections import Counter\nfrom collections import deque\nfrom heapq import heappush, heappop, heapify\nfrom itertools import permutations, combinations\nfrom itertools import accumulate as ac\nfrom random import randint as ri, shuffle\nmod = int(1000000000.0) + 7\nip = lambda : int(stdin.readline())\ninp = lambda : map(int, stdin.readline().split())\nips = lambda : stdin.readline().rstrip()\nout = lambda x: stdout.write(str(x) + '\\n')\nt = ip()\nfor _ in range(t):\n    n = ip()\n    arr = []\n    cur_min = float('inf')\n    cur_max = -float('inf')\n    dic = dd(lambda : float('inf'))\n    cost = dd(lambda : float('inf'))\n    ch = set()\n    for i in range(n):\n        (l, r, c) = inp()\n        ch.add((l, r))\n        cost[l, r] = min(cost[l, r], c)\n        dic[l] = min(dic[l], c)\n        dic[r] = min(dic[r], c)\n        cur_min = min(cur_min, l)\n        cur_max = max(cur_max, r)\n        if (cur_min, cur_max) in ch:\n            ans = min(cost[cur_min, cur_max], dic[cur_min] + dic[cur_max])\n        else:\n            ans = dic[cur_min] + dic[cur_max]\n        print(ans)", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log2, ceil\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom bisect import insort\nfrom collections import Counter\nfrom collections import deque\nfrom heapq import heappush, heappop, heapify\nfrom itertools import permutations, combinations\nfrom itertools import accumulate as ac\nfrom random import randint as ri, shuffle\nmod = int(1000000000.0) + 7\nip = lambda : int(stdin.readline())\ninp = lambda : map(int, stdin.readline().split())\nips = lambda : stdin.readline().rstrip()\nout = lambda x: stdout.write(str(x) + '\\n')\nt = ip()\nfor _ in range(t):\n    n = ip()\n    arr = []\n    cur_min = float('inf')\n    cur_max = -float('inf')\n    dic = dd(lambda : float('inf'))\n    cost = dd(lambda : float('inf'))\n    ch = set()\n    for i in range(n):\n        (l, r, c) = inp()\n        ch.add((l, r))\n        cost[l, r] = min(cost[l, r], c)\n        dic[l] = min(dic[l], c)\n        dic[r] = min(dic[r], c)\n        cur_min = min(cur_min, l)\n        cur_max = max(cur_max, r)\n        if (cur_min, cur_max) in ch:\n            ans = min(cost[cur_min, cur_max], dic[cur_min] + dic[cur_max])\n        else:\n            ans = dic[cur_min] + dic[cur_max]\n        print(ans)", "import collections\nimport sys\nfrom collections import deque\nimport heapq\nimport bisect\nimport copy\nMOD = 1000000007\nNO = lambda : print('NO')\nYES = lambda : print('YES')\n_1 = lambda : print(-1)\nari = lambda : [int(_) for _ in input().split()]\ncin = lambda : int(input())\ncis = lambda : input()\nshow = lambda x: print(x)\nfast = lambda : sys.stdin.readline()\ntest_case = 1\ntest_case = int(input())\nsys.setrecursionlimit(10 ** 6)\n\ndef ans():\n    n = int(fast())\n    dito = collections.defaultdict(lambda : float('inf'))\n    arr = []\n    mini = float('inf')\n    maxi = -1\n    for i in range(n):\n        (a, b, c) = [int(x) for x in fast().split()]\n        mini = min(a, mini)\n        maxi = max(b, maxi)\n        arr.append([a, b, c])\n        dito[a] = min(dito[a], c)\n        dito[b] = min(dito[b], c)\n        dito[a, b] = min(dito[a, b], c)\n        print(min(dito[mini] + dito[maxi], dito.get((mini, maxi), float('inf'))))\n    return\nfor _ in range(test_case):\n    ans()", "import sys\ninput = sys.stdin.readline\nfrom pprint import pprint\nimport math\nINF = 1 << 63\n\ndef do():\n    from collections import defaultdict\n    specialcost = defaultdict(lambda : defaultdict(lambda : INF))\n    cost = defaultdict(lambda : INF)\n    n = int(input())\n    dat = []\n    for _ in range(n):\n        dat.append(map(int, input().split()))\n    (curl, curr) = (INF, -INF)\n    for i in range(n):\n        (l, r, c) = dat[i]\n        specialcost[l][r] = min(specialcost[l][r], c)\n        (curl, curr) = (min(l, curl), max(r, curr))\n        (cost[l], cost[r]) = (min(cost[l], c), min(cost[r], c))\n        print(min(cost[curl] + cost[curr], specialcost[curl][curr]))\nq = int(input())\nfor _ in range(q):\n    do()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    (low, high, cost) = [int(k) for k in input().split()]\n    lowcost = cost\n    highcost = cost\n    print(cost)\n    for j in range(n - 1):\n        (l, r, c) = [int(k) for k in input().split()]\n        if low > l and high < r:\n            lowcost = c\n            highcost = c\n            cost = c\n            low = l\n            high = r\n        elif low > l:\n            lowcost = c\n            low = l\n            if r == high:\n                cost = c\n                if highcost > c:\n                    highcost = c\n            else:\n                cost = lowcost + highcost\n        elif high < r:\n            highcost = c\n            high = r\n            if l == low:\n                cost = c\n                if lowcost > c:\n                    lowcost = c\n            else:\n                cost = lowcost + highcost\n        elif low == l and high == r:\n            if cost > c:\n                cost = c\n                if highcost > c:\n                    highcost = c\n                if lowcost > c:\n                    lowcost = c\n        elif low == l:\n            if lowcost > c:\n                lowcost = c\n            if lowcost + highcost < cost:\n                cost = lowcost + highcost\n        elif high == r:\n            if highcost > c:\n                highcost = c\n            if lowcost + highcost < cost:\n                cost = lowcost + highcost\n        print(cost)", "for _ in range(int(input())):\n    n = int(input())\n    (low, high, cost) = [int(k) for k in input().split()]\n    lowcost = cost\n    highcost = cost\n    print(cost)\n    for j in range(n - 1):\n        (l, r, c) = [int(k) for k in input().split()]\n        if low > l and high < r:\n            lowcost = c\n            highcost = c\n            cost = c\n            low = l\n            high = r\n        elif low > l:\n            lowcost = c\n            low = l\n            if r == high:\n                cost = c\n                if highcost > c:\n                    highcost = c\n            else:\n                cost = lowcost + highcost\n        elif high < r:\n            highcost = c\n            high = r\n            if l == low:\n                cost = c\n                if lowcost > c:\n                    lowcost = c\n            else:\n                cost = lowcost + highcost\n        elif low == l and high == r:\n            if cost > c:\n                cost = c\n                if highcost > c:\n                    highcost = c\n                if lowcost > c:\n                    lowcost = c\n        elif low == l:\n            if lowcost > c:\n                lowcost = c\n            if lowcost + highcost < cost:\n                cost = lowcost + highcost\n        elif high == r:\n            if highcost > c:\n                highcost = c\n            if lowcost + highcost < cost:\n                cost = lowcost + highcost\n        print(cost)", "def main():\n    from math import inf\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        lf = [inf, -1]\n        rt = [-1, -1]\n        one = [inf, -1, -1]\n        for i in range(n):\n            (l, r, c) = map(int, input().split())\n            if l < lf[0] or (l == lf[0] and c < lf[1]):\n                lf = [l, c]\n            if r > rt[0] or (r == rt[0] and c < rt[1]):\n                rt = [r, c]\n            if l < one[0] or r > one[1] or (l == one[0] and r == one[1] and (c < one[2])):\n                one = [l, r, c]\n            if one[0] < lf[0] or one[1] > rt[0] or (lf[0] == one[0] and rt[0] == one[1] and (lf[1] + rt[1] > one[2])):\n                print(one[2])\n            else:\n                print(lf[1] + rt[1])\nmain()", "import math\nimport sys\nimport queue\nfrom heapq import heappop, heappush\nimport random\n\ndef solve():\n    n = int(input())\n    (left_min, right_max, cost) = map(int, input().split())\n    max_r = right_max - left_min\n    print(cost)\n    left_cost = cost\n    right_cost = cost\n    for i in range(n - 1):\n        (l, r, c) = map(int, input().split())\n        if r - l == max_r:\n            cost = min(cost, c)\n        if r - l > max_r:\n            max_r = r - l\n            cost = c\n        if r >= right_max:\n            if r == right_max:\n                right_cost = min(right_cost, c)\n            else:\n                (right_max, right_cost) = (r, c)\n        if l <= left_min:\n            if l == left_min:\n                left_cost = min(left_cost, c)\n            else:\n                (left_min, left_cost) = (l, c)\n        if right_max - left_min > max_r:\n            cost = left_cost + right_cost\n        if right_max - left_min == max_r:\n            cost = min(cost, left_cost + right_cost)\n        print(cost)\nmulti_test = 1\nif multi_test:\n    t = int(input())\n    for _ in range(t):\n        solve()\nelse:\n    solve()", "t = int(input())\none = 1\nzero = 0\nimport heapq\nfor _ in range(t):\n    n = int(input())\n    lrc = []\n    for i in range(n):\n        lrc.append([int(x) for x in input().split()])\n    one *= 1\n    zero += 0\n    l_heap = []\n    r_heap = []\n    lr_cost = dict()\n    for i in range(n):\n        heapq.heappush(l_heap, (lrc[i][0], lrc[i][2]))\n        heapq.heappush(r_heap, (-lrc[i][1], lrc[i][2]))\n        if (lrc[i][0], lrc[i][1]) in lr_cost:\n            lr_cost[lrc[i][0], lrc[i][1]] = min(lr_cost[lrc[i][0], lrc[i][1]], lrc[i][2])\n        else:\n            lr_cost[lrc[i][0], lrc[i][1]] = lrc[i][2]\n            one *= 1\n            zero += 0\n        Min = l_heap[0][1] + r_heap[0][1]\n        if (l_heap[0][0], -r_heap[0][0]) in lr_cost:\n            Min = min(Min, lr_cost[l_heap[0][0], -r_heap[0][0]])\n            one *= 1\n            zero += 0\n        print(Min)", "for iii in range(int(input())):\n    minn = 98765432456\n    maxx = -456789867564\n    lenn = -1\n    lenncost = 987654321\n    minncost = 987654321\n    maxxcost = 12345678998765432\n    for jjj in range(int(input())):\n        (a, b, c) = map(int, input().split())\n        if a == minn and minncost >= c:\n            minncost = c\n        elif a < minn:\n            minn = a\n            minncost = c\n        if b == maxx and maxxcost >= c:\n            maxxcost = c\n        elif b > maxx:\n            maxx = b\n            maxxcost = c\n        if b - a == lenn and lenncost >= c:\n            lenncost = c\n        elif b - a > lenn:\n            lenn = b - a\n            lenncost = c\n        if maxx - minn == lenn:\n            if lenncost <= maxxcost + minncost:\n                print(lenncost)\n            else:\n                print(maxxcost + minncost)\n        else:\n            print(minncost + maxxcost)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    si = input().split()\n    print(int(si[2]))\n    lowest_number = int(si[0])\n    highest_number = int(si[1])\n    difference = highest_number - lowest_number\n    lowest_cost = highest_cost = difference_cost = int(si[2])\n    for i in range(1, n):\n        si = input().split()\n        si0 = int(si[0])\n        si1 = int(si[1])\n        si2 = int(si[2])\n        if si0 < lowest_number or (si0 == lowest_number and si2 < lowest_cost):\n            lowest_number = si0\n            lowest_cost = si2\n        if si1 > highest_number or (si1 == highest_number and si2 < highest_cost):\n            highest_number = si1\n            highest_cost = si2\n        if si1 - si0 > difference or (si1 - si0 == difference and si2 < difference_cost):\n            difference = si1 - si0\n            difference_cost = si2\n        if difference == highest_number - lowest_number:\n            print(min(difference_cost, lowest_cost + highest_cost))\n        else:\n            print(lowest_cost + highest_cost)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    si = input().split()\n    print(int(si[2]))\n    lowest_number = int(si[0])\n    highest_number = int(si[1])\n    difference = highest_number - lowest_number\n    lowest_cost = highest_cost = difference_cost = int(si[2])\n    for i in range(1, n):\n        si = input().split()\n        si0 = int(si[0])\n        si1 = int(si[1])\n        si2 = int(si[2])\n        if si0 < lowest_number or (si0 == lowest_number and si2 < lowest_cost):\n            lowest_number = si0\n            lowest_cost = si2\n        if si1 > highest_number or (si1 == highest_number and si2 < highest_cost):\n            highest_number = si1\n            highest_cost = si2\n        if si1 - si0 > difference or (si1 - si0 == difference and si2 < difference_cost):\n            difference = si1 - si0\n            difference_cost = si2\n        if difference == highest_number - lowest_number:\n            print(min(difference_cost, lowest_cost + highest_cost))\n        else:\n            print(lowest_cost + highest_cost)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    si = input().split()\n    print(int(si[2]))\n    lowest_number = int(si[0])\n    highest_number = int(si[1])\n    difference = highest_number - lowest_number\n    lowest_cost = highest_cost = difference_cost = int(si[2])\n    for i in range(1, n):\n        si = input().split()\n        si0 = int(si[0])\n        si1 = int(si[1])\n        si2 = int(si[2])\n        if si0 < lowest_number or (si0 == lowest_number and si2 < lowest_cost):\n            lowest_number = si0\n            lowest_cost = si2\n        if si1 > highest_number or (si1 == highest_number and si2 < highest_cost):\n            highest_number = si1\n            highest_cost = si2\n        if si1 - si0 > difference or (si1 - si0 == difference and si2 < difference_cost):\n            difference = si1 - si0\n            difference_cost = si2\n        if difference == highest_number - lowest_number:\n            print(min(difference_cost, lowest_cost + highest_cost))\n        else:\n            print(lowest_cost + highest_cost)", "def solve():\n    smallest = 10 ** 10\n    bigest = -10 ** 10\n    tien_a = 0\n    tien_b = 0\n    tien_row = 10 ** 10\n    k = 0\n    max_d = -10 ** 10\n    for i in range(int(input())):\n        (a, b, m) = map(int, input().split())\n        if a < smallest:\n            smallest = a\n            tien_a = m\n            max_d = bigest - smallest + 1\n            tien_row = 10 ** 10\n        if b > bigest:\n            bigest = b\n            tien_b = m\n            max_d = bigest - smallest + 1\n            tien_row = 10 ** 10\n        if a == smallest and m < tien_a:\n            tien_a = m\n        if b == bigest and m < tien_b:\n            tien_b = m\n        if b - a + 1 >= max_d:\n            max_d = b - a + 1\n            tien_row = min(tien_row, m)\n        print(min(tien_a + tien_b, tien_row))\nfor i in range(int(input())):\n    solve()", "def solve():\n    n = int(input())\n    valL = 0\n    valR = 0\n    mxN = 0\n    mnval = 0\n    for i in range(0, n):\n        (l, r, c) = map(int, input().split())\n        if i == 0:\n            mnL = l\n            mxR = r\n            valL = c\n            valR = c\n            mxN = r - l + 1\n            mnval = c\n            print(c)\n            continue\n        if l < mnL:\n            mnL = l\n            valL = c\n        elif l == mnL:\n            valL = min(valL, c)\n        if r > mxR:\n            mxR = r\n            valR = c\n        elif r == mxR:\n            valR = min(valR, c)\n        if r - l + 1 > mxN:\n            mxN = r - l + 1\n            mnval = c\n        elif r - l + 1 == mxN:\n            mnval = min(mnval, c)\n        ans = valL + valR\n        if mxR - mnL + 1 == mxN:\n            ans = min(ans, mnval)\n        print(ans)\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "maxval = 10 ** 9 + 1\nT = int(input())\nfor testcase in range(1, T + 1):\n    n = int(input())\n    low = maxval\n    high = 0\n    bestlow = maxval\n    besthigh = maxval\n    bestbothcost = maxval\n    bestbothcandidate = False\n    for s in range(n):\n        (l, r, c) = list(map(int, input().split()))\n        if l < low:\n            low = l\n            bestlow = c\n            bestbothcost = maxval\n            bestbothcandidate = False\n        elif l == low:\n            if c < bestlow:\n                bestlow = c\n        if r > high:\n            high = r\n            besthigh = c\n            bestbothcost = maxval\n            bestbothcandidate = False\n        elif r == high:\n            if c < besthigh:\n                besthigh = c\n        if l == low and r == high:\n            if c < bestbothcost:\n                bestbothcost = c\n                bestbothcandidate = True\n        if bestbothcandidate:\n            if bestbothcost < bestlow + besthigh:\n                print(bestbothcost)\n            else:\n                bestbothcandidate = False\n                print(bestlow + besthigh)\n        else:\n            print(bestlow + besthigh)", "import sys\nt = int(input())\nfor rtt in range(t):\n    n = int(input())\n    a1 = 0\n    a2 = 0\n    b1 = 10 ** 9 + 1\n    b2 = 0\n    c1 = 0\n    c2 = 0\n    for r in range(n):\n        (a, b, c) = map(int, input().split())\n        if a1 < b - a + 1 or (a1 == b - a + 1 and a2 > c):\n            a1 = b - a + 1\n            a2 = c\n        if b1 > a or (b1 == a and b2 > c):\n            b1 = a\n            b2 = c\n        if c1 < b or (c1 == b and c2 > c):\n            c1 = b\n            c2 = c\n        if a1 > c1 - b1 + 1:\n            sys.stdout.write(str(a2) + '\\n')\n        elif a1 == c1 - b1 + 1:\n            sys.stdout.write(str(min(a2, b2 + c2)) + '\\n')\n        else:\n            sys.stdout.write(str(b2 + c2) + '\\n')", "def main():\n    from math import inf\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        lf = [inf, int(-1)]\n        rt = [int(-1), int(-1)]\n        one = [inf, int(-1), int(-1)]\n        for j in range(n):\n            (l, r, c) = map(int, input().split())\n            if l < lf[0] or (l == lf[0] and c < lf[1]):\n                lf = [l, c]\n            if r > rt[0] or (r == rt[0] and c < rt[1]):\n                rt = [r, c]\n            if l < one[0] or r > one[1] or (l == one[0] and r == one[1] and (c < one[2])):\n                one = [l, r, c]\n            if one[0] < lf[0] or one[1] > rt[0] or (lf[0] == one[0] and rt[0] == one[1] and (lf[1] + rt[1] > one[2])):\n                print(one[2])\n            else:\n                print(lf[1] + rt[1])\nmain()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = math.inf\n    h = 0\n    c = 0\n    h_cost = 0\n    ph = 0\n    l_cost = 0\n    lh = 0\n    ans = []\n    for q in range(n):\n        (L, R, C) = list(map(int, input().split()))\n        if l > L and h < R:\n            c = C\n            l_cost = C\n            h_cost = C\n            l = L\n            h = R\n        elif l > L:\n            l = L\n            l_cost = C\n            if h == R:\n                c = C\n                h_cost = min(h_cost, C)\n            else:\n                c = l_cost + h_cost\n        elif R > h:\n            h = R\n            h_cost = C\n            if l == L:\n                c = C\n                l_cost = min(l_cost, C)\n            else:\n                c = l_cost + h_cost\n        elif l == L and h == R:\n            l_cost = min(l_cost, C)\n            h_cost = min(h_cost, C)\n            c = min(C, c)\n        elif l == L:\n            l_cost = min(l_cost, C)\n            c = min(c, l_cost + h_cost)\n        elif h == R:\n            h_cost = min(h_cost, C)\n            c = min(c, l_cost + h_cost)\n        print(c)", "for pratyush in range(int(input())):\n    m = float('inf')\n    lc = float('inf')\n    mc = float('inf')\n    xc = float('inf')\n    (x, l) = (0, -1)\n    for i in range(int(input())):\n        (a, b, c) = map(int, input().split())\n        if a == m and mc >= c:\n            mc = c\n        elif a < m:\n            (m, mc) = (a, c)\n        if b == x and xc >= c:\n            xc = c\n        elif b > x:\n            (x, xc) = (b, c)\n        if b - a == l and lc >= c:\n            lc = c\n        elif b - a > l:\n            (l, lc) = (b - a, c)\n        if x - m == l:\n            if lc <= xc + mc:\n                print(lc)\n            else:\n                print(xc + mc)\n        else:\n            print(mc + xc)"]