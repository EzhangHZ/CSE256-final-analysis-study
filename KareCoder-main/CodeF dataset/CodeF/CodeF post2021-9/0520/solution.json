["from math import sqrt, ceil\nimport os\nimport sys\nfrom collections import defaultdict, deque\nfrom io import BytesIO, IOBase\nfrom collections import Counter\nfrom functools import lru_cache\nfrom collections import deque\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        (l_ind, r_ind) = (0, n)\n        res = 0\n        pl = 0\n        pr = 0\n        nl = None\n        nv = None\n        temp = 1\n        c = 0\n        for (i, el) in enumerate(arr):\n            if el > 0:\n                temp *= 1\n            elif el < 0:\n                temp *= -1\n            else:\n                temp = 0\n            if abs(el) == 2:\n                c += 1\n            if temp > 0:\n                if c > res:\n                    res = c\n                    l_ind = pl\n                    r_ind = i\n            elif temp < 0:\n                if nv == None:\n                    nl = i\n                    nv = c\n                elif c - nv > res:\n                    res = c - nv\n                    l_ind = nl + 1\n                    r_ind = i\n            else:\n                pl = i + 1\n                pr = 0\n                nl = None\n                nv = None\n                temp = 1\n                c = 0\n        (a, b, v) = (l_ind, r_ind, res)\n        if v == 0:\n            print(n, 0)\n        else:\n            print(a, n - b - 1)\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nmain()", "from math import sqrt, ceil\nimport os\nimport sys\nfrom collections import defaultdict, deque\nfrom io import BytesIO, IOBase\nfrom collections import Counter\nfrom functools import lru_cache\nfrom collections import deque\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        (l_ind, r_ind) = (0, n)\n        res = 0\n        pl = 0\n        pr = 0\n        nl = None\n        nv = None\n        temp = 1\n        c = 0\n        for (i, el) in enumerate(arr):\n            if el > 0:\n                temp *= 1\n            elif el < 0:\n                temp *= -1\n            else:\n                temp = 0\n            if abs(el) == 2:\n                c += 1\n            if temp > 0:\n                if c > res:\n                    res = c\n                    l_ind = pl\n                    r_ind = i\n            elif temp < 0:\n                if nv == None:\n                    nl = i\n                    nv = c\n                elif c - nv > res:\n                    res = c - nv\n                    l_ind = nl + 1\n                    r_ind = i\n            else:\n                pl = i + 1\n                pr = 0\n                nl = None\n                nv = None\n                temp = 1\n                c = 0\n        (a, b, v) = (l_ind, r_ind, res)\n        if v == 0:\n            print(n, 0)\n        else:\n            print(a, n - b - 1)\nmain()", "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        (l_ind, r_ind) = (0, n)\n        res = 0\n        pl = 0\n        pr = 0\n        nl = None\n        nv = None\n        temp = 1\n        c = 0\n        for (i, el) in enumerate(arr):\n            if el > 0:\n                temp *= 1\n            elif el < 0:\n                temp *= -1\n            else:\n                temp = 0\n            if abs(el) == 2:\n                c += 1\n            if temp > 0:\n                if c > res:\n                    res = c\n                    l_ind = pl\n                    r_ind = i\n            elif temp < 0:\n                if nv == None:\n                    nl = i\n                    nv = c\n                elif c - nv > res:\n                    res = c - nv\n                    l_ind = nl + 1\n                    r_ind = i\n            else:\n                pl = i + 1\n                pr = 0\n                nl = None\n                nv = None\n                temp = 1\n                c = 0\n        (a, b, v) = (l_ind, r_ind, res)\n        if v == 0:\n            print(n, 0)\n        else:\n            print(a, n - b - 1)\nmain()", "import sys\nimport math\n\ndef cal(a):\n    count = 0\n    for x in a:\n        if x < 0:\n            count = count + 1\n    if count % 2 == 0:\n        sum = 0\n        for x in a:\n            if abs(x) > 1:\n                sum += 1\n        return [sum, 0, 0]\n    neg = []\n    for i in range(len(a)):\n        if a[i] < 0:\n            neg.append(i)\n    x = 0\n    for i in range(neg[0] + 1, len(a)):\n        x += abs(a[i]) > 1\n    y = 0\n    for i in range(0, neg[-1]):\n        y += abs(a[i]) > 1\n    if x > y:\n        return [x, neg[0] + 1, 0]\n    else:\n        return [y, 0, len(a) - neg[-1]]\nttime = int(input())\nfor ccount in range(ttime):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = (0, 0, len(a))\n    prev = []\n    for i in range(len(a)):\n        if a[i] == 0:\n            temp = cal(prev)\n            temp[1] = temp[1] + i - len(prev)\n            temp[2] = temp[2] + len(a) - i\n            if ans[0] < temp[0]:\n                ans = temp\n            prev = []\n        else:\n            prev.append(a[i])\n    if len(prev) > 0:\n        temp = cal(prev)\n        temp[1] = temp[1] + len(a) - len(prev)\n        if ans[0] < temp[0]:\n            ans = temp\n    print(ans[1], ans[2])", "for _ in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    ans = 0\n    (ansl, ansr) = (n, 0)\n    l = -1\n    for i in range(n + 1):\n        if i == n or nums[i] == 0:\n            count = 0\n            left = -1\n            right = -1\n            neg = 1\n            zr = 0\n            zl = 0\n            for j in range(l + 1, i):\n                if nums[j] < 0:\n                    neg *= -1\n                    right = j\n                    zr = 0\n                if abs(nums[j]) == 2:\n                    count += 1\n                    zr += 1\n                    if left == -1:\n                        zl += 1\n                if nums[j] < 0 and left == -1:\n                    left = j\n            if neg == -1:\n                if count - zl > count - zr:\n                    right = i\n                    count -= zl\n                else:\n                    left = l\n                    count -= zr\n            else:\n                left = l\n                right = i\n            if ans < count:\n                ans = count\n                ansl = left + 1\n                ansr = n - right\n            l = i\n    print(ansl, ansr)", "def count(nums):\n    total = {-2: 0, -1: 0, 1: 0, 2: 0}\n    for i in nums:\n        total[i] += 1\n    return total\n\ndef solution():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    ans = 0\n    (x, y) = (n, 0)\n    zero_pos = [-1] + [i for i in range(n) if a[i] == 0] + [n]\n    for i in range(len(zero_pos) - 1):\n        (l, r) = (zero_pos[i] + 1, zero_pos[i + 1] - 1)\n        c = count(a[l:r + 1])\n        if (c[-1] + c[-2]) % 2 == 0 and c[2] + c[-2] > ans:\n            ans = c[2] + c[-2]\n            (x, y) = (l, n - r - 1)\n        elif (c[-1] + c[-2]) % 2 != 0:\n            (leftpos, rightpos) = (l, r)\n            while a[leftpos] > 0:\n                leftpos += 1\n            while a[rightpos] > 0:\n                rightpos -= 1\n            c = count(a[l:rightpos])\n            if c[2] + c[-2] > ans:\n                ans = c[2] + c[-2]\n                (x, y) = (l, n - rightpos)\n            c = count(a[leftpos + 1:r + 1])\n            if c[2] + c[-2] > ans:\n                ans = c[2] + c[-2]\n                (x, y) = (leftpos + 1, n - r - 1)\n    print(x, y)\nt = int(input())\nfor _ in range(t):\n    solution()", "tests = int(input())\nfor _ in range(tests):\n    num_len = int(input())\n    n = num_len\n    all_num = input()\n    a = [int(i) for i in all_num.split(' ')]\n    a = [1] + a + [0]\n    m = 0\n    lef = 0\n    rig = num_len\n    num_len = len(a)\n    op = [0] * num_len\n    ex = [0] * num_len\n    j = 0\n    l = 0\n    for i in range(1, num_len):\n        if a[i] < 0:\n            op[i] = op[i - 1] + 1\n        else:\n            op[i] = op[i - 1]\n        if a[i] == 2 or a[i] == -2:\n            ex[i] = ex[i - 1] + 1\n        else:\n            ex[i] = ex[i - 1]\n        if a[i] == 0:\n            for j in range(l + 1, i):\n                if (op[j] - op[l]) % 2 == 0 and ex[j] - ex[l] > m:\n                    lef = l\n                    rig = n - j\n                    m = ex[j] - ex[l]\n                if (op[i - 1] - op[j - 1]) % 2 == 0 and ex[i - 1] - ex[j - 1] > m:\n                    lef = j - 1\n                    rig = n - i + 1\n                    m = ex[i - 1] - ex[j - 1]\n            l = i\n    print('{} {}'.format(lef, rig))", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    best = (1, 0, n, 0)\n    best_pow_neg = (1, 0, 0)\n    best_pow_pos = (1, 0, 0)\n    prefix_pow = 0\n    prefix_sign = 1\n    for i in range(n):\n        if a[i] == 0:\n            best_pow_neg = (1, 0, i + 1)\n            best_pow_pos = (1, 0, i + 1)\n            prefix_pow = 0\n            prefix_sign = 1\n            continue\n        prefix_pow += abs(a[i]) == 2\n        prefix_sign *= a[i] // abs(a[i])\n        if prefix_sign == -1:\n            cur = (prefix_sign * best_pow_neg[0], prefix_pow - best_pow_neg[1], best_pow_neg[2], n - i - 1)\n        else:\n            cur = (prefix_sign * best_pow_pos[0], prefix_pow - best_pow_pos[1], best_pow_pos[2], n - i - 1)\n        best = max(best, cur)\n        if prefix_sign == 1:\n            best_pow_pos = min(best_pow_pos, (prefix_sign, prefix_pow, i + 1))\n        if best_pow_neg[0] == 1 or prefix_pow < best_pow_neg[1]:\n            best_pow_neg = (prefix_sign, prefix_pow, i + 1)\n    print(best[2], best[3])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    numbers = [int(num) for num in input().split()]\n    max_pow_2 = 0\n    remove_from_start = n\n    remove_from_end = 0\n    idx = 0\n    j = 0\n    pow_2 = 0\n    sign = True\n    while idx < n:\n        if numbers[idx] == 0:\n            idx += 1\n            j = idx\n            pow_2 = 0\n            sign = True\n            continue\n        if idx > 0 and numbers[idx - 1] != 0:\n            if numbers[idx - 1] < 0:\n                sign = not sign\n            if abs(numbers[idx - 1]) == 2:\n                pow_2 -= 1\n            if sign and pow_2 > max_pow_2:\n                max_pow_2 = pow_2\n                remove_from_start = idx\n                remove_from_end = n - j\n        while j < n and numbers[j] != 0:\n            if numbers[j] < 0:\n                sign = not sign\n            if abs(numbers[j]) == 2:\n                pow_2 += 1\n            if sign and pow_2 > max_pow_2:\n                max_pow_2 = pow_2\n                remove_from_start = idx\n                remove_from_end = n - j - 1\n            j += 1\n        idx += 1\n    print(remove_from_start, remove_from_end)", "from collections import defaultdict\nMOD = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.append(0)\n    solve_for = []\n    ans = 0\n    begin = 0\n    end = 0\n    for (idx, i) in enumerate(arr):\n        if i != 0:\n            if len(solve_for) == 0:\n                begin = idx\n            solve_for.append(i)\n            end = idx\n        else:\n            solve_for.clear()\n            tmp_ans = 1\n            twos = 0\n            negs = 0\n            for i in range(begin, end + 1):\n                if abs(arr[i]) == 2:\n                    twos += 1\n                if arr[i] < 0:\n                    negs += 1\n                if negs % 2 == 0:\n                    if twos > ans:\n                        fin_beg = begin\n                        fin_end = i\n                        ans = twos\n            twos = 0\n            negs = 0\n            for i in range(end, begin - 1, -1):\n                if abs(arr[i]) == 2:\n                    twos += 1\n                if arr[i] < 0:\n                    negs += 1\n                if negs % 2 == 0:\n                    if twos > ans:\n                        fin_beg = i\n                        fin_end = end\n                        ans = twos\n    if ans == 0:\n        print(0, n)\n    else:\n        print(fin_beg, n - (fin_end + 1))", "t = int(input())\nfor i in range(t):\n    _ = int(input())\n    nums = list(map(int, input().split()))\n    start = 0\n    end = 0\n    count_2 = 0\n    neg = 1\n    max_prod = 0\n    max_range = [0, 0]\n    while start <= end and start < len(nums):\n        if end == len(nums) or nums[end] == 0:\n            if start == end:\n                count_2 = 0\n                start = end = end + 1\n                continue\n            count_2 -= abs(nums[start]) // 2\n            neg *= nums[start] // abs(nums[start])\n            start += 1\n            if neg * count_2 > max_prod:\n                max_prod = count_2\n                max_range = [start, end]\n        else:\n            count_2 += abs(nums[end]) // 2\n            neg *= nums[end] // abs(nums[end])\n            end += 1\n            if neg * count_2 > max_prod:\n                max_prod = count_2\n                max_range = [start, end]\n    print(max_range[0], len(nums) - max_range[1])"]