["import sys\n\ndef solve():\n    F = [None] * int(400000.0 + 4)\n    Finv = [None] * len(F)\n    F[0] = 1\n    MOD = int(1000000000.0 + 7)\n    for i in range(1, len(F)):\n        F[i] = F[i - 1] * i % MOD\n    Finv[-1] = pow(F[-1], MOD - 2, MOD)\n    for i in range(len(F) - 1, 0, -1):\n        Finv[i - 1] = Finv[i] * i % MOD\n    inp = sys.stdin.readline\n    n = int(inp())\n    a = list(map(int, inp().split()))\n    r = 0\n    for i in range(n + 1):\n        if a[i] > 0:\n            r = (r + F[a[i] + i] * Finv[a[i] - 1] * Finv[i + 1]) % MOD\n    print(r)\n\ndef main():\n    solve()\nmain()", "mod = 10 ** 9 + 7\nm = 4 * 10 ** 5 + 1\nf = [None] * m\nf[0] = 1\nfor i in range(1, m):\n    f[i] = f[i - 1] * i % mod\nf_inv = [None] * m\nf_inv[-1] = pow(f[-1], mod - 2, mod)\nfor i in reversed(range(1, m)):\n    f_inv[i - 1] = f_inv[i] * i % mod\ninput()\nprint(sum((f[a + i] * f_inv[a - 1] * f_inv[i + 1] for (i, a) in enumerate(map(int, input().split())) if a > 0)) % mod)", "MOD = 10 ** 9 + 7\nans = 0\nfact = [1]\nfor i in range(1, 4 * 10 ** 5 + 5):\n    fact.append(fact[-1] * i % MOD)\n\ndef c(m, n):\n    return fact[m] * pow(fact[m - n] * fact[n], -1, MOD)\nn = int(input())\nfor (i, a) in enumerate(map(int, input().split())):\n    if a > 0:\n        ans += c(a + i, i + 1) % MOD\n        ans %= MOD\nprint(ans)", "M = 1000000007\nn = int(input())\narr = (*map(int, input().split()),)\nN = max((arr[i] + i for i in range(n))) + 2\nfacts = [1]\nfor i in range(1, N + 1):\n    facts.append(facts[-1] * i % M)\ninvnums = [0] * (N + 1)\ninvfacts = [0] * (N + 1)\ninvnums[0] = 1\ninvnums[1] = 1\ninvfacts[0] = 1\ninvfacts[1] = 1\nfor i in range(2, N + 1):\n    invnums[i] = invnums[M % i] * (M - M // i) % M\n    invfacts[i - 1] = invnums[i - 1] * invfacts[i - 2] % M\ninvfacts[N] = invnums[N] * invfacts[N - 1] % M\n\ndef comb(n, r):\n    return facts[n] * invfacts[n - r] % M * invfacts[r] % M\nans = 0\nfor i in range(n + 1):\n    if arr[i]:\n        ans = (ans + comb(i + arr[i], i + 1)) % M\nprint(ans)", "MOD = 10 ** 9 + 7\nans = 0\nfact = [1]\nfor i in range(1, 4 * 10 ** 5 + 5):\n    fact.append(fact[-1] * i % MOD)\n\ndef c(m, n):\n    return fact[m] * pow(fact[m - n] * fact[n], -1, MOD)\nn = int(input())\nfor (i, a) in enumerate(map(int, input().split())):\n    if a > 0:\n        ans += c(a + i, i + 1) % MOD\n        ans %= MOD\nprint(ans)", "N = int(input())\nx = list(map(int, input().split()))\nans = 0\nMOD = 1000000007\nfor i in range(0, len(x)):\n    x[i] += i\nif x[0] == 0:\n    ans = 0\nelse:\n    tmp = x[0]\n    ll = x[0]\n    lr = x[0]\n    r = 1\n    for i in range(0, len(x)):\n        while lr < x[i]:\n            lr += 1\n            tmp *= lr\n            tmp %= MOD\n        while lr > x[i]:\n            if lr > 0:\n                tmp *= pow(lr, -1, MOD)\n                tmp %= MOD\n            lr -= 1\n        while ll > lr - i:\n            ll -= 1\n            tmp *= ll\n        while ll < lr - i:\n            if ll > 0:\n                tmp *= pow(ll, -1, MOD)\n                tmp %= MOD\n            ll += 1\n        while r <= i:\n            r += 1\n            tmp *= pow(r, -1, MOD)\n            tmp %= MOD\n        tmp = int(tmp)\n        ans += tmp\n        ans = int(ans)\n        ans %= MOD\nprint(int(ans))", "import gc\nimport math\nfrom collections import Counter, deque, defaultdict\nfrom sys import stdout\nimport time\nfrom math import factorial, log, gcd\nimport sys\nfrom decimal import Decimal\nimport threading\nfrom heapq import *\n\ndef S():\n    return sys.stdin.readline().split()\n\ndef I():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef IS():\n    return sys.stdin.readline().replace('\\n', '')\n\ndef main():\n    n = II()\n    a = I()\n    ans = 0\n    for i in range(n + 1):\n        el = a[i]\n        if el > 0:\n            d = fact[el + i] * pow(fact[i + 1], -1, mod) * pow(fact[el - 1], -1, mod)\n            ans += d\n        else:\n            break\n    print(ans % mod)\nmod = 10 ** 9 + 7\nfact = [1] * (4 * 10 ** 5 + 3)\nfor i in range(2, 4 * 10 ** 5 + 3):\n    fact[i] = i * fact[i - 1] % mod\nmain()", "M = 10 ** 9 + 7\nfact = [1 for i in range(400007)]\nfor i in range(1, 400007):\n    fact[i] = fact[i - 1] * i % M\n\ndef ncr(n, k):\n    return fact[n] * pow(fact[n - k], -1, M) * pow(fact[k], -1, M) % M\nN = int(input())\na = [int(i) for i in input().split()]\ns = 0\nfor i in range(N + 1):\n    if a[i] == 0:\n        break\n    s += ncr(a[i] + i, i + 1)\n    s %= M\nprint(s)"]