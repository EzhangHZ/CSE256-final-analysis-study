["def main():\n    for _ in range(int(input())):\n        problem()\n\ndef problem():\n    n = int(input())\n    starts = list(map(int, input().split()))\n    ends = list(map(int, input().split()))\n    durations = []\n    time = 0\n    for (start, end) in zip(starts, ends):\n        if start > time:\n            duration = end - start\n        else:\n            duration = end - time\n        time = end\n        durations.append(duration)\n    print(' '.join(map(str, durations)))\nimport sys\ninput = sys.stdin.readline\nexit(main())", "def solve(n, ss, fs):\n    (t, ds) = (0, [])\n    for _ in range(n):\n        (s, f) = (ss.popleft(), fs.popleft())\n        d = f - s if s >= t else f - t\n        t = f\n        ds.append(d)\n    print(' '.join(map(str, ds)))\n\ndef main():\n    from sys import stdin\n    from itertools import islice\n    from collections import deque\n    tkns = map(int, stdin.read().split())\n    t = next(tkns)\n    for _ in range(t):\n        n = next(tkns)\n        (s, f) = (deque(islice(tkns, n)), deque(islice(tkns, n)))\n        solve(n, s, f)\nmain()", "import sys\n\ndef main():\n    input = sys.stdin.readline\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        s = list(map(int, input().split()))\n        f = list(map(int, input().split()))\n        d = []\n        d.append(f[0] - s[0])\n        for j in range(1, n):\n            d.append(f[j] - max(f[j - 1], s[j]))\n        print(' '.join(map(str, d)))\n    return\nmain()", "import sys\nimport collections\ninp = lambda : sys.stdin.readline().rstrip()\nLS = lambda : list(map(int, inp().split()))\nfor _ in range(int(inp())):\n    n = int(inp())\n    ls_s = [0] + LS()\n    ls_f = [0] + LS()\n    ans = []\n    for i in range(1, len(ls_s)):\n        if ls_s[i] < ls_f[i - 1]:\n            ans.append(ls_f[i] - ls_f[i - 1])\n        else:\n            ans.append(ls_f[i] - ls_s[i])\n    print(' '.join(list(map(str, ans))))", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\nn = inp()\nfor _ in range(n):\n    length = inp()\n    array1 = inlt()\n    array2 = inlt()\n    answer = []\n    time = array1[0]\n    for i in range(length):\n        if array1[i] > time:\n            time = array1[i]\n        timeTaken = array2[i] - time\n        time += timeTaken\n        answer.append(str(timeTaken))\n    print(' '.join(answer))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    d = []\n    for i in range(n):\n        if i == 0:\n            d.append(f[i] - s[i])\n        else:\n            d.append(f[i] - f[i - 1] if f[i - 1] > s[i] else f[i] - s[i])\n    print(' '.join(map(str, d)))", "import sys\nimport os\nfrom collections import Counter, defaultdict, deque\nfrom heapq import heapify, heappush, heappop\nfrom functools import lru_cache\nfrom math import floor, ceil, sqrt, gcd\nfrom string import ascii_lowercase\nfrom math import gcd\nfrom bisect import bisect_left, bisect, bisect_right\n\ndef read():\n    return input().strip()\n\ndef read_int():\n    return int(read())\n\ndef read_str_list():\n    return read().split()\n\ndef read_numeric_list():\n    return list(map(int, read_str_list()))\n\ndef solve(N, start_arr, end_arr):\n    curr_time = 0\n    ans = []\n    for i in range(N):\n        (start_time, end_time) = (start_arr[i], end_arr[i])\n        if curr_time < start_time:\n            curr_time = start_time\n        ans.append(end_time - curr_time)\n        curr_time = end_time\n    return ' '.join(map(str, ans))\nT = read_int()\nfor t in range(T):\n    N = read_int()\n    start_arr = read_numeric_list()\n    end_arr = read_numeric_list()\n    print(solve(N, start_arr, end_arr))", "from collections import deque\nN = int(input())\nfor n in range(N):\n    answer = ''\n    s = int(input())\n    if s > 1:\n        arr1 = deque(list(map(int, input().split())))\n        arr2 = deque(list(map(int, input().split())))\n        c = arr1.popleft()\n        d = arr2.popleft()\n        answer = [d - c]\n        end = d\n        for i in range(1, s):\n            a = arr1.popleft()\n            b = arr2.popleft()\n            if end <= a:\n                answer.append(b - a)\n            else:\n                answer.append(b - end)\n            end = b\n        print(' '.join([str(a) for a in answer]))\n    else:\n        a = int(input())\n        b = int(input())\n        print(b - a)", "from collections import Counter\nfrom functools import lru_cache\nimport heapq\nfrom itertools import combinations\nimport math\nimport sys\nresult = []\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    (timeEntered, timeEnded) = (list(map(int, input().split())), list(map(int, input().split())))\n\n    def solve():\n        tasks = []\n        currentTime = float('inf')\n        for (i, timeOne) in enumerate(timeEntered):\n            tasks.append((timeOne, timeEnded[i], i))\n            currentTime = min(currentTime, timeOne)\n        tasks.sort()\n        res = [0] * n\n        currentTime = 0\n        for (timeOne, timeTwo, idx) in tasks:\n            if timeOne >= currentTime:\n                res[idx] = str(timeTwo - timeOne)\n                currentTime = timeTwo\n            else:\n                res[idx] = str(timeTwo - currentTime)\n                currentTime = timeTwo\n        return res\n    ans = solve()\n    print(' '.join(ans))", "x = int(input())\n\ndef cal(n, a, b):\n    ans = [0] * n\n    t = 0\n    for i in range(n):\n        if a[i] < t:\n            ans[i] = b[i] - t\n        else:\n            ans[i] = b[i] - a[i]\n        t = b[i]\n    res = [str(i) for i in ans]\n    return ' '.join(res)\nfor jj in range(x):\n    n = int(input())\n    arr1 = [int(i) for i in input().split(' ')]\n    arr2 = [int(i) for i in input().split(' ')]\n    print(cal(n, arr1, arr2))", "def solve():\n    n = int(input())\n    s = [int(i) for i in input().split()]\n    e = [int(i) for i in input().split()]\n    res = [e[0] - s[0]]\n    for i in range(1, n):\n        if s[i] < e[i - 1]:\n            res.append(e[i] - e[i - 1])\n        else:\n            res.append(e[i] - s[i])\n    print(' '.join([str(i) for i in res]))\n    return\n\ndef main():\n    for _ in range(int(input())):\n        solve()\n    return\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = []\n    ans.append(b[0] - a[0])\n    for i in range(1, n):\n        ans.append(b[i] - max(b[i - 1], a[i]))\n    print(' '.join(map(str, ans)))", "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split(' ')))\n    f = list(map(int, input().split(' ')))\n    b = 0\n    ans = [None] * n\n    for i in range(n):\n        if s[i] > b:\n            ans[i] = f[i] - s[i]\n        else:\n            ans[i] = f[i] - b\n        b = f[i]\n    print(' '.join(map(str, ans)))", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = []\n    for i in range(n):\n        if i == 0:\n            ans.append(b[i] - a[i])\n        elif a[i] >= b[i - 1]:\n            ans.append(b[i] - a[i])\n        else:\n            ans.append(b[i] - b[i - 1])\n    print(' '.join(map(str, ans)))\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    start = list(map(int, input().split()))\n    end = list(map(int, input().split()))\n    durations = []\n    durations.append(str(end[0] - start[0]))\n    for i in range(1, n):\n        if start[i] >= end[i - 1]:\n            durations.append(str(end[i] - start[i]))\n        else:\n            durations.append(str(end[i] - end[i - 1]))\n    print(' '.join(durations))", "def possible(s, f, n):\n    result = ''\n    for i in range(n):\n        result += ' ' if result else ''\n        if i > 0 and s[i] < f[i - 1]:\n            result += str(f[i] - f[i - 1])\n        else:\n            result += str(f[i] - s[i])\n    print(result)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    possible(s, f, n)", "def solve():\n    n = int(input())\n    s = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    f.insert(0, 0)\n    print(' '.join([str(f[i] - max(f[i - 1], s[i - 1])) for i in range(1, len(f))]))\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    list1 = list(map(int, input().rstrip().split()))\n    list2 = list(map(int, input().rstrip().split()))\n    list2.insert(0, 0)\n    print(' '.join([str(list2[i] - max(list2[i - 1], list1[i - 1])) for i in range(1, n + 1)]))", "def f():\n    n = int(input())\n    s = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    d = [0] * n\n    d[0] = f[0] - s[0]\n    for i in range(1, n):\n        d[i] = f[i] - max(f[i - 1], s[i])\n    print(' '.join((str(x) for x in d)))\nfor _ in range(int(input())):\n    f()", "t = int(input())\n\ndef helper(n, s1, s2):\n    end = -1\n    ans = []\n    for i in range(n):\n        if end == -1:\n            end = s2[i]\n            ans.append(s2[i] - s1[i])\n        elif end <= s1[i]:\n            end = s2[i]\n            ans.append(s2[i] - s1[i])\n        elif end > s1[i]:\n            ans.append(s2[i] - end)\n            end = s2[i]\n    return ans\nfor i in range(t):\n    n = int(input())\n    (s1, s2) = (list(map(int, input().split())), list(map(int, input().split())))\n    res = helper(n, s1, s2)\n    res = ' '.join(list(map(str, res)))\n    print(res)", "n = int(input())\nfor _ in range(n):\n    leng = int(input())\n    start = list(map(int, input().split()))\n    end = list(map(int, input().split()))\n    time = []\n    prev = 0\n    for i in range(leng):\n        if start[i] < prev:\n            time.append(end[i] - prev)\n        elif start[i] >= prev:\n            time.append(end[i] - start[i])\n        prev = end[i]\n    print(' '.join(map(str, time)))", "def fn(start, finish):\n    result = []\n    result.append(finish[0] - start[0])\n    flag = finish[0]\n    for i in range(1, len(start)):\n        if start[i] >= flag:\n            result.append(finish[i] - start[i])\n        else:\n            result.append(finish[i] - flag)\n        flag = finish[i]\n    result = ' '.join((str(e) for e in result))\n    return result\nt = int(input())\nfor i in range(t):\n    n = input()\n    start = [int(j) for j in input().split()]\n    finish = [int(k) for k in input().split()]\n    output = fn(start, finish)\n    print(output)", "def solve():\n    g = int(input())\n    m = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    mx = m[0]\n    out = []\n    for i in range(g):\n        if m[i] > mx:\n            mx = m[i]\n        out.append(str(l[i] - mx))\n        mx = l[i]\n    return ' '.join(out)\nn = int(input())\nfor i in range(n):\n    print(solve())", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    res = []\n    for i in range(n):\n        if i >= 1 and s[i] < e[i - 1]:\n            diff = e[i] - e[i - 1]\n        else:\n            diff = e[i] - s[i]\n        res.append(diff)\n    print(' '.join(map(str, res)))", "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    d = []\n    d.append(f[0] - s[0])\n    for i in range(1, n):\n        if s[i] > f[i - 1]:\n            d.append(f[i] - s[i])\n        else:\n            d.append(f[i] - f[i - 1])\n    str_d = [str(x) for x in d]\n    print(' '.join(str_d))", "def sol(a, b):\n    d = []\n    d.append(str(b[0] - a[0]))\n    for _ in range(1, len(a)):\n        if a[_] >= b[_ - 1]:\n            d.append(str(b[_] - a[_]))\n        else:\n            d.append(str(b[_] - b[_ - 1]))\n    return ' '.join(d)\nt = int(input())\nfor _ in range(t):\n    n = input()\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    print(sol(a, b))", "_ = int(input())\nfor __ in range(_):\n    n = int(input())\n    arr1 = list(map(int, input().split()))\n    arr2 = list(map(int, input().split()))\n    out = [arr2[0] - arr1[0]]\n    for x in range(1, n):\n        if arr1[x] < arr2[x - 1]:\n            out.append(arr2[x] - arr2[x - 1])\n        else:\n            out.append(arr2[x] - arr1[x])\n    print(' '.join([str(x) for x in out]))", "from collections import deque\n\ndef solve(s, f):\n    q = deque()\n    startTime = s[0]\n    lastDoneTime = f[0]\n    ans = []\n    ans.append(f[0] - s[0])\n    for i in range(1, len(s)):\n        startTime = max(lastDoneTime, s[i])\n        ans.append(f[i] - startTime)\n        lastDoneTime = f[i]\n    return ans\nt = int(input())\nfor i in range(t):\n    input()\n    s = list(map(int, input().split(' ')))\n    f = list(map(int, input().split(' ')))\n    ans = solve(s, f)\n    print(' '.join(map(str, ans)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    current = 0\n    d = [0] * n\n    for i in range(n):\n        if s[i] >= current:\n            current = s[i]\n        d[i] = f[i] - current\n        current = f[i]\n    print(' '.join(map(str, d)))", "for _ in range(int(input())):\n    n = int(input())\n    s = [int(x) for x in input().split()]\n    f = [int(x) for x in input().split()]\n    d = []\n    cur_time = 0\n    for i in range(len(s)):\n        if s[i] > cur_time:\n            cur_time = f[i]\n            d.append(f[i] - s[i])\n        else:\n            d.append(-cur_time + f[i])\n            cur_time = f[i]\n    print(' '.join([str(x) for x in d]))", "t = int(input())\nans = list()\nfor i in range(0, t):\n    n = int(input())\n    arrs = [int(x) for x in input().split()]\n    arrf = [int(x) for x in input().split()]\n    time = arrf[0] - arrs[0]\n    s = f'{time}'\n    for j in range(1, n):\n        time = min(arrf[j] - arrs[j], arrf[j] - arrf[j - 1])\n        s += f' {time}'\n    ans.append(s)\nfor s in ans:\n    print(s)", "import os\nimport sys\nimport string\nimport math\nn = int(input())\n\ndef solve(startTimes, endTimes, numTasks):\n    workTimes = []\n    counter = 0\n    outStr = ''\n    for s in range(numTasks):\n        if startTimes[s] > counter:\n            counter = startTimes[s]\n        wTime = endTimes[s] - counter\n        workTimes.append(wTime)\n        counter = endTimes[s]\n        outStr += f'{wTime} '\n    print(outStr)\nfor i in range(n):\n    numTasks = int(input())\n    startTimes = input().split(' ')\n    endTimes = input().split(' ')\n    startTimes = list(map(lambda x: int(x), startTimes))\n    endTimes = list(map(lambda x: int(x), endTimes))\n    solve(startTimes, endTimes, numTasks)", "for _ in range(int(input())):\n    n = int(input())\n    ts = [int(x) for x in input().split()]\n    fs = [int(x) for x in input().split()]\n    ds = []\n    prevf = 0\n    for (t, f) in zip(ts, fs):\n        if prevf > t:\n            d = f - prevf\n        else:\n            d = f - t\n        prevf = f\n        ds.append(str(d))\n    print(' '.join(ds))", "run = int(input())\nfor i in range(run):\n    n = int(input())\n    st = list(map(int, input().split()))\n    fn = list(map(int, input().split()))\n    f = 0\n    out = []\n    for i in range(n):\n        if st[i] > f:\n            out.append(fn[i] - st[i])\n        else:\n            out.append(fn[i] - f)\n        f = fn[i]\n    os = ''\n    for i in out:\n        os += str(i) + ' '\n    print(os.rstrip())", "for _ in range(int(input())):\n    input()\n    x = [int(a) for a in input().split()]\n    y = [int(a) for a in input().split()]\n    prev_f = -1\n    d = []\n    for i in range(len(x)):\n        d.append(str(y[i] - max(x[i], prev_f)))\n        prev_f = y[i]\n    print(' '.join(d))", "def solve():\n    n = int(input())\n    s = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    d = [0] * n\n    for i in range(n):\n        if i == 0:\n            d[i] = f[i] - s[i]\n        else:\n            d[i] = f[i] - max(s[i], f[i - 1])\n    print(' '.join(map(str, d)))\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    S = list(map(int, input().split()))\n    F = list(map(int, input().split()))\n    (d1, D) = (F[0] - S[0], [])\n    D.append(d1)\n    for i in range(1, n):\n        if F[i - 1] > S[i]:\n            D.append(F[i] - F[i - 1])\n        else:\n            D.append(F[i] - S[i])\n    print(' '.join((str(x) for x in D)))", "for _ in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    k = [l2[0] - l1[0]]\n    for i in range(1, n):\n        if l1[i] > l2[i - 1]:\n            k.append(l2[i] - l1[i])\n        else:\n            k.append(l2[i] - l2[i - 1])\n    a = ' '.join((str(i) for i in k))\n    print(a)", "t = int(input())\nfor _ in range(t):\n    d = []\n    duration = 0\n    n = int(input())\n    s = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    d.append(f[0] - s[0])\n    duration += d[0]\n    for i in range(1, n):\n        if s[i] >= f[i - 1]:\n            d.append(f[i] - s[i])\n            duration += d[i]\n        else:\n            d.append(f[i] - f[i - 1])\n            duration += d[i]\n    print(' '.join(map(str, d)))", "for _ in range(int(input())):\n    n = int(input())\n    s = [*map(int, input().split())]\n    f = [*map(int, input().split())]\n    ans = []\n    for i in range(n):\n        ans.append(f[i] - (f[i - 1] if i > 0 and f[i - 1] > s[i] else s[i]))\n    print(' '.join((str(x) for x in ans)))", "for _ in range(int(input())):\n    n = int(input())\n    s = [int(x) for x in input().split()]\n    f = [int(x) for x in input().split()]\n    time = []\n    for i in range(n):\n        if i == 0:\n            time.append(str(f[i] - s[i]))\n        else:\n            time.append(str(f[i] - max(s[i], f[i - 1])))\n    print(' '.join(time))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    startTime = [int(j) for j in input().split()]\n    finTime = [int(j) for j in input().split()]\n    duration = []\n    for j in range(0, n):\n        if j == 0:\n            duration.append(str(finTime[j] - startTime[j]))\n        elif finTime[j - 1] > startTime[j]:\n            duration.append(str(finTime[j] - finTime[j - 1]))\n        else:\n            duration.append(str(finTime[j] - startTime[j]))\n    print(' '.join(duration))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s1 = [int(x) for x in input().split()]\n    f1 = [int(x) for x in input().split()]\n    res = f1[0] - s1[0]\n    temp = [res]\n    for i in range(1, len(s1)):\n        if s1[i] >= f1[i - 1]:\n            result = f1[i] - s1[i]\n            temp.append(result)\n        else:\n            result = f1[i] - f1[i - 1]\n            temp.append(result)\n    new = ' '.join((str(x) for x in temp))\n    print(new)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    r = []\n    for (idx, (i, j)) in enumerate(zip(s, f)):\n        if idx == 0:\n            r.append(j - i)\n            continue\n        if i > f[idx - 1]:\n            r.append(j - i)\n        else:\n            r.append(j - f[idx - 1])\n    print(' '.join(map(str, r)))", "def main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        s = [int(i) for i in input().split(' ')]\n        f = [int(i) for i in input().split(' ')]\n        print(str(Solution(n, s, f)))\n\ndef Solution(n, s, f):\n    result = [str(f[0] - s[0])]\n    for i in range(1, n):\n        result.append(str(f[i] - max(s[i], f[i - 1])))\n    return ' '.join(result)\nmain()", "def f():\n    n = int(input())\n    s = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    d = [0 for _ in range(n)]\n    d[0] = f[0] - s[0]\n    for i in range(1, n):\n        d[i] = f[i] - max(f[i - 1], s[i])\n    print(' '.join((str(x) for x in d)))\nfor _ in range(int(input())):\n    f()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    o = []\n    o += [f[0] - s[0]]\n    for j in range(1, n):\n        if s[j] < f[j - 1]:\n            o += [f[j] - f[j - 1]]\n        else:\n            o += [f[j] - s[j]]\n    print(' '.join(list(map(str, o))))", "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    ans = f'{f[0] - s[0]} '\n    for i in range(1, n):\n        ans += f'{f[i] - max(f[i - 1], s[i])} '\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    result = []\n    j = 0\n    while j < n - 1:\n        if l2[j] > l1[j + 1]:\n            l1[j + 1] = l2[j]\n        result.append(l2[j] - l1[j])\n        j = j + 1\n    result.append(l2[n - 1] - l1[n - 1])\n    print(' '.join(map(str, result)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    res = [str(f[0] - s[0])]\n    for i in range(1, n):\n        res.append(str(f[i] - max(s[i], f[i - 1])))\n    print(' '.join(res))", "for _ in range(int(input())):\n    n = int(input())\n    s = [int(a) for a in input().split()]\n    f = [int(b) for b in input().split()]\n    res = []\n    t = 0\n    for (a, b) in zip(s, f):\n        t = max(t, a)\n        res.append(b - t)\n        t = b\n    print(' '.join(map(str, res)))", "from posixpath import split\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    f = 0\n    ans = ''\n    for i in range(n):\n        ans += str(b[i] - max(a[i], f)) + ' '\n        f = b[i]\n    print(ans)", "N = int(input())\nfor x in range(N):\n    l = int(input())\n    s = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    final = []\n    for i in range(l):\n        if i == 0:\n            final.append(f[i] - s[i])\n        elif s[i] <= f[i - 1]:\n            final.append(f[i] - f[i - 1])\n        else:\n            final.append(f[i] - s[i])\n    print(' '.join(list(map(str, final))))", "t = int(input())\nfor i in range(t):\n    answer = []\n    previous = 0\n    n = int(input())\n    s = [int(i) for i in input().split()]\n    f = [int(i) for i in input().split()]\n    for j in range(n):\n        if s[j] >= previous:\n            answer.append(str(f[j] - s[j]))\n        else:\n            answer.append(str(f[j] - f[j - 1]))\n        previous = f[j]\n    print(' '.join(answer))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = [int(i) for i in input().split()]\n    f = [int(i) for i in input().split()]\n    times = [0] * n\n    times[0] = f[0] - s[0]\n    prev = f[0]\n    for i in range(1, n):\n        times[i] = f[i] - max(f[i - 1], s[i])\n    print(' '.join(map(str, times)))", "for _ in range(int(input())):\n    n = int(input())\n    ans = []\n    s = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    ans.append(f[0] - s[0])\n    for i in range(1, n):\n        s[i] = max(s[i], f[i - 1])\n        ans.append(f[i] - s[i])\n    print(' '.join(map(str, ans)))", "test = int(input())\nfor t in range(test):\n    n = int(input())\n    s = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    lst = []\n    pend = 0\n    for i in range(n):\n        start = s[i]\n        end = f[i]\n        time = end - max(pend, start)\n        pend = end\n        lst.append(str(time))\n    print(' '.join(lst))", "t = int(input())\nfor i in range(0, t):\n    alpha = ''\n    n = int(input())\n    x = list(map(int, input().split(' ')))\n    y = list(map(int, input().split(' ')))\n    alpha += str(y[0] - x[0])\n    if n > 1:\n        for j in range(1, n):\n            if x[j] >= y[j - 1]:\n                alpha += ' ' + str(y[j] - x[j])\n            elif x[j] < y[j - 1]:\n                alpha += ' ' + str(y[j] - y[j - 1])\n    print(alpha)", "m = int(input())\nfor i in range(m):\n    n = int(input())\n    s = [int(i) for i in input().split()]\n    j = [int(i) for i in input().split()]\n    d = [j[0] - s[0]] + [0] * (n - 1)\n    for i in range(1, n):\n        d[i] = j[i] - max(j[i - 1], s[i])\n    print(' '.join([str(i) for i in d]))", "from ast import For\nimport sys\nncases = int(input())\n\ndef solve():\n    ntasks = int(input())\n    begTimes = [int(x) for x in str(input()).split(' ')]\n    endTimes = [int(x) for x in str(input()).split(' ')]\n    times = [(begTimes[i], endTimes[i]) for i in range(ntasks)]\n    i = 1\n    r = [str(times[0][1] - times[0][0])]\n    while i < ntasks:\n        r.append(str(times[i][1] - max([begTimes[i], endTimes[i - 1]])))\n        i += 1\n    result.append(' '.join(r))\nresult = []\nfor x in range(ncases):\n    solve()\n[print(x) for x in result]", "for _ in range(int(input())):\n    n = input()\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    out = ''\n    out += str(b[0] - a[0]) + ' '\n    for i in range(1, len(b)):\n        out += str(b[i] - max(b[i - 1], a[i])) + ' '\n    print(out)", "num_of_cases = int(input())\nfor case in range(0, num_of_cases):\n    num_of_tasks = int(input())\n    start_times = list(map(int, input().split(' ')))\n    finish_times = list(map(int, input().split(' ')))\n    total = []\n    i = 0\n    for (i, (s, f)) in enumerate(zip(start_times, finish_times)):\n        if not i:\n            total.append(f - s)\n        elif s >= finish_times[i - 1]:\n            total.append(f - s)\n        else:\n            total.append(f - finish_times[i - 1])\n        i += 1\n    print(' '.join([str(n) for n in total]))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = list(map(int, input().split(' ')))\n    f = list(map(int, input().split(' ')))\n    l = [f[0] - s[0]]\n    for i in range(1, n):\n        l.append(f[i] - max(f[i - 1], s[i]))\n    print(' '.join((str(x) for x in l)))", "for _ in range(int(input())):\n    a = int(input())\n    s1 = list(map(int, input().split()))\n    s2 = list(map(int, input().split()))\n    count = 0\n    for z in range(1, a):\n        if s1[z] < s2[z - 1]:\n            s1[z] = s2[z - 1]\n    ans = ''\n    for p in range(a):\n        ans += str(s2[p] - s1[p]) + ' '\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    d = [0] * n\n    d[0] = f[0] - s[0]\n    for i in range(1, n):\n        d[i] = f[i] - max(f[i - 1], s[i])\n    print(' '.join((str(x) for x in d)))", "num = int(input())\nfor i in range(num):\n    n = int(input())\n    start = input()\n    start = start.split(' ')\n    start = [int(x) for x in start]\n    finish = input()\n    finish = finish.split(' ')\n    finish = [int(x) for x in finish]\n    res = [str(finish[0] - start[0])]\n    for j in range(1, n):\n        if start[j] <= finish[j - 1]:\n            res.append(str(finish[j] - finish[j - 1]))\n        else:\n            res.append(str(finish[j] - start[j]))\n    print(' '.join(res))", "t = int(input())\nfor i in range(t):\n    v = []\n    n = int(input())\n    x = input()\n    s = x.split(' ')\n    y = input()\n    f = y.split(' ')\n    v.append(str(int(f[0]) - int(s[0])))\n    k = int(f[0])\n    for i in range(len(s)):\n        s[i] = int(s[i])\n        f[i] = int(f[i])\n        if i != 0:\n            if s[i] > k:\n                v.append(str(f[i] - s[i]))\n            else:\n                v.append(str(f[i] - k))\n        k = f[i]\n    print(' '.join(v))", "tc = int(input())\nwhile tc > 0:\n    flag = 0\n    n = int(input())\n    A = [int(i) for i in input().split(' ')]\n    B = [int(i) for i in input().split(' ')]\n    x = '{} '.format(B[0] - A[0])\n    for i in range(1, n):\n        if A[i] > B[i - 1]:\n            x = x + '{} '.format(B[i] - A[i])\n        else:\n            x = x + '{} '.format(B[i] - B[i - 1])\n    print(x)\n    tc = tc - 1", "for _ in range(int(input())):\n    size = int(input())\n    d = [None] * size\n    s = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    start = 0\n    for i in range(size):\n        start = max(start, s[i])\n        time_taken = f[i] - start\n        d[i] = str(time_taken)\n        start = f[i]\n    print(' '.join(d))", "for _ in range(0, int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    op = []\n    op.append(f[0] - s[0])\n    if n > 1:\n        (i, j) = (1, 1)\n        while i < n and j < n:\n            if s[i] > f[j - 1]:\n                op.append(f[j] - s[i])\n            else:\n                op.append(f[j] - f[j - 1])\n            i += 1\n            j += 1\n    print(' '.join((str(x) for x in op)))", "t = int(input())\nfor p in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = []\n    ans.append(b[0] - a[0])\n    cnt = 1\n    i = 1\n    while cnt != n:\n        if a[i] > b[i - 1]:\n            ans.append(b[i] - a[i])\n        else:\n            ans.append(b[i] - b[i - 1])\n        cnt += 1\n        i += 1\n    print(' '.join(map(str, ans)))", "from sys import stdin, stdout, setrecursionlimit\nimport collections\nimport math\nfrom collections import deque\n\ndef test():\n    return\n\ndef solve():\n    return\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        s = list(map(int, input().split()))\n        f = list(map(int, input().split()))\n        res = [f[0] - s[0]]\n        prev = f[0]\n        for i in range(1, n):\n            x = max(s[i], prev)\n            res.append(f[i] - x)\n            prev = f[i]\n        print(*res)\n    return\ninput = stdin.readline\nmain()", "from math import ceil\n\ndef sol():\n    n = int(input())\n    (a, b, c) = (n // 3, n // 3, n // 3)\n    if n % 3 == 0:\n        b += 1\n        c -= 1\n    elif n % 3 == 1:\n        b += 2\n        c -= 1\n    elif n % 3 == 2:\n        a += 1\n        b += 2\n        c -= 1\n    print(a, b, c)\n\ndef solv():\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    diff = max((a[i] - b[i] for i in range(n)))\n    if diff < 0:\n        return 'NO'\n    for i in range(n):\n        if a[i] - b[i] < 0:\n            return 'NO'\n        elif a[i] - b[i] < diff:\n            if b[i] != 0:\n                return 'NO'\n    return 'YES'\n\ndef solve():\n    n = int(input())\n    s = list(map(int, input().strip().split()))\n    f = list(map(int, input().strip().split()))\n    d = [f[0] - s[0]]\n    for i in range(1, n):\n        d.append(min(f[i] - f[i - 1], f[i] - s[i]))\n    print(' '.join((str(i) for i in d)))\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    p = 0\n    D = []\n    for i in range(n):\n        d = f[i] - s[i]\n        if p > s[i]:\n            d = f[i] - p\n        p = f[i]\n        D.append(str(d))\n    print(' '.join(D))", "for _ in range(int(input())):\n    input()\n    (start_times, end_times) = (list(map(int, input().split())), list(map(int, input().split())))\n    durations = [end_times[0] - start_times[0]]\n    index = 1\n    while len(durations) != len(start_times):\n        duration = end_times[index] - max(start_times[index], end_times[index - 1])\n        index += 1\n        durations.append(duration)\n    print(' '.join(map(str, durations)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    given_times = [int(num) for num in input().split()]\n    completed_times = [int(num) for num in input().split()]\n    durations = [completed_times[0] - given_times[0]]\n    last_task_completed = completed_times[0]\n    for (task_given_time, task_completed_time) in zip(given_times[1:], completed_times[1:]):\n        task_start_time = max(task_given_time, last_task_completed)\n        duration = task_completed_time - task_start_time\n        durations.append(duration)\n        last_task_completed = task_completed_time\n    durations = [str(d) for d in durations]\n    print(' '.join(durations))", "num_of_cases = int(input())\nfor _ in range(num_of_cases):\n    N = int(input())\n    start = [int(x) for x in input().split(' ')]\n    end = [int(x) for x in input().split(' ')]\n    res = []\n    cur_time = 0\n    for idx in range(N):\n        cur_time = max(cur_time, start[idx])\n        res.append(str(end[idx] - cur_time))\n        cur_time = end[idx]\n    print(' '.join(res))", "for _ in range(int(input())):\n    size = int(input())\n    d = [None] * size\n    s = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    start = 0\n    for i in range(size):\n        start = max(start, s[i])\n        time_taken = f[i] - start\n        d[i] = str(time_taken)\n        start = f[i]\n    print(' '.join(d))", "for _ in range(int(input())):\n    (n, sol) = (int(input()), [])\n    s = list(map(int, input().split(' ')))\n    f = list(map(int, input().split(' ')))\n    for i in range(1, n):\n        if s[i] < f[i - 1]:\n            s[i] = f[i - 1]\n    for (i, j) in zip(s, f):\n        sol.append(str(j - i))\n    print(' '.join(sol))", "import sys\nfrom sys import stdin, stdout\nfrom math import ceil, floor, sqrt, log, log2, log10\nfrom collections import Counter\nint_max = float('inf')\nint_min = -float('inf')\nmod = 10 ** 9 + 7\nANS = []\ninput = stdin.readline\n\ndef solve():\n    pass\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    brr = list(map(int, input().split()))\n    currStart = arr[0]\n    lastEnd = brr[0]\n    out = [brr[0] - arr[0]]\n    for i in range(1, n):\n        if arr[i] < lastEnd:\n            currStart = lastEnd\n        else:\n            currStart = arr[i]\n        out.append(brr[i] - currStart)\n        lastEnd = brr[i]\n    print(*out)", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    list1 = [int(num) for num in input().split()]\n    list2 = [int(num) for num in input().split()]\n    d1 = list2[0] - list1[0]\n    s = str(d1)\n    i = 1\n    for i in range(1, len(list2)):\n        if list1[i] >= list2[i - 1]:\n            s += ' ' + str(list2[i] - list1[i])\n        else:\n            s += ' ' + str(list2[i] - list2[i - 1])\n    print(s)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    start = [int(x) for x in input().split()]\n    end = [0] + [int(x) for x in input().split()]\n    duration = []\n    for i in range(n):\n        x = end[i + 1] - max(start[i], end[i])\n        duration.append(str(x))\n    print(' '.join(duration))", "T = int(input(''))\nfor i in range(T):\n    n = int(input(''))\n    a = input('').split()\n    a = [int(x) for x in a]\n    b = input('').split()\n    b = [int(x) for x in b]\n    ans = []\n    j = 0\n    for j in range(n):\n        if j == 0:\n            ans.append(b[j] - a[j])\n        elif a[j] > b[j - 1]:\n            ans.append(b[j] - a[j])\n        else:\n            ans.append(b[j] - b[j - 1])\n    finalans = ' '.join((str(y) for y in ans))\n    print(finalans)", "n = int(input())\nlist_for_tasks = []\nfor i in range(n):\n    list_to_append = []\n    a = [int(input())]\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    list_to_append = [a, b, c]\n    list_for_tasks.append(list_to_append)\nlist_ = list_for_tasks\nnn = n\ntimes_final = []\nfor j in range(nn):\n    times = []\n    for i in range(list_[j][0][0]):\n        if i == 0:\n            time = '{}'.format(list_[j][2][i] - list_[j][1][i])\n            times.append(time)\n        elif list_[j][1][i] >= list_[j][2][i - 1]:\n            time = '{}'.format(list_[j][2][i] - list_[j][1][i])\n            times.append(time)\n        else:\n            time = '{}'.format(list_[j][2][i] - list_[j][2][i - 1])\n            times.append(time)\n    times_final.append(times)\nfor m in range(n):\n    print(' '.join(times_final[m]))", "n = int(input())\nfor i in range(n):\n    x = input()\n    s = list(map(int, input().split(' ')))\n    f = list(map(int, input().split(' ')))\n    out = str()\n    for j in range(len(f)):\n        if j == 0:\n            out += str(f[0] - s[0])\n        elif s[j] < f[j - 1]:\n            out += str(f[j] - f[j - 1])\n        else:\n            out += str(f[j] - s[j])\n        out += ' '\n    print(out)", "for t in range(int(input())):\n    n = int(input())\n    arr1 = list(map(int, input().split()))\n    arr2 = list(map(int, input().split()))\n    s = ''\n    for i in range(n):\n        if i != 0 and arr1[i] >= arr2[i - 1] or i == 0:\n            s += str(arr2[i] - arr1[i]) + ' '\n        else:\n            s += str(arr2[i] - arr2[i - 1]) + ' '\n    print(s)", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [0] * n\n    now = -1\n    for i in range(n):\n        if a[i] >= now:\n            c[i] = b[i] - a[i]\n            now = b[i]\n        else:\n            c[i] = b[i] - now\n            now = b[i]\n    print(*c)\nT = int(input())\nfor _ in range(T):\n    solve()", "x = lambda : map(int, input().split())\n(t,) = x()\nfor _ in '+' * t:\n    n = x()\n    a = [*x()]\n    b = [*x()]\n    print(*(x - max(y, z) for (x, y, z) in zip(b, a, [0] + b)))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().strip().split()))\n    e = list(map(int, input().strip().split()))\n    co = 0\n    lans = []\n    for i in range(n):\n        if s[i] >= co:\n            lans.append(e[i] - s[i])\n            co = e[i]\n        elif e[i] - co < 0:\n            lans.append(0)\n        else:\n            lans.append(e[i] - co)\n            co = e[i]\n    print(*lans)", "t = int(input())\nfor p in range(t):\n    n = int(input())\n    si = list(map(int, input().split()))\n    fi = list(map(int, input().split()))\n    pl = [fi[0] - si[0]]\n    for i in range(1, n):\n        if si[i] >= fi[i - 1]:\n            pl.append(fi[i] - si[i])\n        else:\n            pl.append(fi[i] - fi[i - 1])\n    ch = ''\n    for i in range(n):\n        ch += str(pl[i]) + ' '\n    print(ch)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input().split()\n    f = input().split()\n    liss = []\n    lisf = []\n    lis = []\n    for j in range(n):\n        liss.append(int(s[j]))\n        lisf.append(int(f[j]))\n    lis.append(str(lisf[0] - liss[0]))\n    for j in range(1, n):\n        if liss[j] > lisf[j - 1]:\n            lis.append(str(lisf[j] - liss[j]))\n        else:\n            lis.append(str(lisf[j] - lisf[j - 1]))\n    print(' '.join(lis))", "from sys import stdin, stdout\nimport sys\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 6)\n\ndef main():\n    t = int(stdin.readline().strip())\n    for tc in range(1, t + 1):\n        n = int(stdin.readline().strip())\n        s = [int(x) for x in stdin.readline().split()]\n        f = [int(x) for x in stdin.readline().split()]\n        duration = [0 for i in range(n)]\n        duration[0] = f[0] - s[0]\n        for i in range(1, n):\n            duration[i] = f[i] - max(f[i - 1], s[i])\n        print(*duration)\nmain()", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = R()\n    (*b,) = R()\n    print(*(x - max(y, z) for (x, y, z) in zip(b, [0] + b, a)))", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = R()\n    (*b,) = R()\n    print(*(x - max(y, z) for (x, y, z) in zip(b, [0] + b, a)))", "def CF797C(starts, ends):\n    curr = 0\n    answer = []\n    for (start, end) in zip(starts, ends):\n        start = max(start, curr)\n        answer.append(end - start)\n        curr = end\n    return answer\nfor _ in range(int(input())):\n    input()\n    print(*CF797C(list(map(int, input().split())), list(map(int, input().split()))))", "from collections import defaultdict\nimport math as m\nimport sys\ninput = sys.stdin.readline\n\ndef get2int():\n    p = input().split()\n    return (int(p[0]), int(p[1]))\n\ndef get3int():\n    p = input().split()\n    return (int(p[0]), int(p[1]), int(p[2]))\n\ndef get4int():\n    p = input().split()\n    return (int(p[0]), int(p[1]), int(p[2]), int(p[3]))\n\ndef cinarr():\n    return [int(i) for i in input().split()]\n\ndef solve():\n    n = int(input())\n    a = cinarr()\n    b = cinarr()\n    done = [0] * n\n    done[0] = b[0] - a[0]\n    for i in range(1, n):\n        if a[i] >= b[i - 1]:\n            done[i] = b[i] - a[i]\n        else:\n            done[i] = b[i] - b[i - 1]\n    for i in range(n):\n        print(done[i], end=' ')\n    print()\nfor case in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = [int(x) for x in input().split()]\n    f = [int(x) for x in input().split()]\n    d = [f[0] - max(s[0], 0)]\n    for i in range(1, n):\n        d.append(f[i] - max(s[i], f[i - 1]))\n    print(*d)"]