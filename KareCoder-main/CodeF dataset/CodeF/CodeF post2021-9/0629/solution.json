["def solve():\n    n = int(input())\n    nums = list(map(int, input().split()))\n    ans = n * (n * 2 + 1)\n    visited = [0] * n\n    path = []\n    pt = 0\n    flag = False\n    while not visited[pt]:\n        path.append(pt)\n        visited[pt] = 1\n        pt += nums[pt]\n        if not 0 <= pt < n:\n            break\n    else:\n        ans -= (n - sum(visited)) * (2 * n + 1)\n        flag = True\n    cnt = sum(visited)\n    if flag:\n        ans -= cnt * cnt\n    else:\n        ans -= (1 + cnt) * cnt // 2\n    new_visited = [0] * n\n    note = visited[:]\n    for i in range(n):\n        if not note[i]:\n            tmp = []\n            f = False\n            while not note[i]:\n                tmp.append(i)\n                note[i] = 1\n                i += nums[i]\n                if not 0 <= i < n:\n                    break\n                if note[i] and new_visited[i] >= 0 or visited[i]:\n                    f = True\n            if f:\n                if new_visited[i]:\n                    i = new_visited[i] - 1\n                for x in tmp:\n                    new_visited[x] = i + 1\n            else:\n                for x in tmp:\n                    new_visited[x] = -1\n    path_note = {v: i for (i, v) in enumerate(path)}\n    for i in range(n):\n        if not visited[i]:\n            if new_visited[i] != -1:\n                if visited[new_visited[i] - 1] == 0 or flag:\n                    ans -= cnt\n                else:\n                    ans -= cnt - path_note[new_visited[i] - 1]\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "def dfs(i, f, g):\n    f[i] = 1\n    for it in g[i]:\n        dfs(it, f, g)\n        f[i] += f[it]\nfor _ in range(int(input())):\n    n = int(input())\n    g = [[] for i in range(n)]\n    a = list(map(int, input().split()))\n    for i in range(n):\n        if 0 <= i + a[i] and i + a[i] < n:\n            g[i + a[i]].append(i)\n    f = [0 for i in range(n)]\n    for i in range(n):\n        if i + a[i] < 0 or i + a[i] >= n:\n            dfs(i, f, g)\n    ans = 0\n    if f[0]:\n        vals = set()\n        current = 0\n        while 0 <= current and current < n:\n            vals.add(current)\n            current = current + a[current]\n        ans += (n - len(vals)) * (2 * n + 1)\n    cur = 0\n    for it in f:\n        if it > 0:\n            cur += 1\n    vals = set()\n    current = 0\n    while 0 <= current and current < n:\n        if current in vals:\n            break\n        vals.add(current)\n        ans += cur - f[current] + (n + 1)\n        current = current + a[current]\n    print(ans)"]