["import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    c = mx = i = int()\n    for x in input().split():\n        mx = max(mx, int(x))\n        if mx == i + 1:\n            c += 1\n        i += 1\n    print(c)", "import sys\nimport math\nfrom collections import deque\ninput = sys.stdin.readline\n\ndef multiple():\n    a = map(int, input().split())\n    return a\n\ndef array():\n    a = input().split()\n    return a\n\ndef intarray():\n    a = list(map(int, input().split()))\n    return a\n\ndef smaller(a1, a2):\n    n = len(a1)\n    for i in range(n):\n        if a1[i] < a2[i]:\n            return True\n        elif a1[i] > a2[i]:\n            return False\n    return False\n\ndef solution():\n    n = int(input())\n    a = intarray()\n    maxsofar = a[0]\n    smallcountpossible = a[0] - 1\n    ans = 1\n    for i in range(1, n):\n        if smallcountpossible <= 0:\n            ans += 1\n        if a[i] > maxsofar:\n            smallcountpossible += a[i] - maxsofar - 1\n            maxsofar = a[i]\n        else:\n            smallcountpossible -= 1\n    print(ans)\n    return\nt = int(input())\nfor _ in range(t):\n    solution()", "from collections import defaultdict, deque\nfrom heapq import heappush, heappop\nfrom bisect import bisect_left, bisect_right\nimport sys, itertools, math\nsys.setrecursionlimit(10 ** 5)\ninput = sys.stdin.readline\nsqrt = math.sqrt\n\ndef LI():\n    return list(map(int, input().split()))\n\ndef LF():\n    return list(map(float, input().split()))\n\ndef LI_():\n    return list(map(lambda x: int(x) - 1, input().split()))\n\ndef II():\n    return int(input())\n\ndef IF():\n    return float(input())\n\ndef S():\n    return input().rstrip()\n\ndef LS():\n    return S().split()\n\ndef IR(n):\n    return [II() for _ in range(n)]\n\ndef LIR(n):\n    return [LI() for _ in range(n)]\n\ndef FR(n):\n    return [IF() for _ in range(n)]\n\ndef LFR(n):\n    return [LI() for _ in range(n)]\n\ndef LIR_(n):\n    return [LI_() for _ in range(n)]\n\ndef SR(n):\n    return [S() for _ in range(n)]\n\ndef LSR(n):\n    return [LS() for _ in range(n)]\nmod = 1000000007\ninf = 10000000000.0\n\ndef solve():\n    t = II()\n    for _ in range(t):\n        n = II()\n        p = LI()\n        ans = [0, 0]\n        nn = 0\n        for pi in p:\n            if ans[0] == ans[1]:\n                ans[0] = pi\n                nn += 1\n            if ans[0] < pi:\n                ans[0] = pi\n            ans[1] += 1\n        print(nn)\n    return\nsolve()", "import sys\nimport random\n\ndef solve():\n    inp = sys.stdin.readline\n    n = int(inp())\n    p = list(map(int, inp().split()))\n    w = [False] * (n + 2)\n    ans = 0\n    m = 0\n    j = 1\n    for i in p:\n        m = max(m, i)\n        w[i] = True\n        while w[j]:\n            j += 1\n        if j > m:\n            ans += 1\n    print(ans)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "import sys\nfrom typing import List\n\ndef sol(perm: List[int]) -> int:\n    max_ = 0\n    counter = 0\n    for (idx, num) in enumerate(perm):\n        max_ = max(max_, num)\n        if max_ == idx + 1:\n            counter += 1\n    return counter\n\ndef main():\n    inp = sys.stdin.readlines()\n    rest = inp[1:]\n    permutations = rest[1::2]\n    permutations = [[int(num) for num in line.split()] for line in permutations]\n    for perm in permutations:\n        print(sol(perm))\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef solve(n, p):\n    stack = []\n    for i in range(n):\n        curr = (p[i], p[i])\n        while stack and stack[-1][1] > curr[0]:\n            (a, b) = stack.pop()\n            curr = (min(a, curr[0]), max(b, curr[1]))\n        stack.append(curr)\n    print(len(stack))\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    solve(n, p)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    p = [int(i) for i in input().split()]\n    c = 0\n    mx = 0\n    for i in range(n):\n        mx = max(mx, p[i])\n        if mx == i + 1:\n            c = c + 1\n    print(c)", "import sys\ninput = sys.stdin.readline\nfor j in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 0\n    x = 0\n    for i in range(n):\n        x = max(x, a[i])\n        if x == i + 1:\n            cnt += 1\n    print(cnt)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p = [int(x) for x in input().split(' ')]\n    ma = 0\n    res = 0\n    for j in range(n):\n        ma = max(ma, p[j])\n        if ma == j + 1:\n            res += 1\n    print(res)", "import sys\n\ndef solution(array):\n    array.insert(0, 0)\n    max_num = 0\n    num_comps = -1\n    for (i, pi) in enumerate(array):\n        max_num = max(pi, max_num)\n        if i == max_num:\n            num_comps += 1\n    print(num_comps)\n    return\ninput = sys.stdin.read().splitlines()\nt = int(input[0])\noffset = 1\nfor test in range(t):\n    n = input[2 * test + offset]\n    array = input[2 * test + offset + 1].split(' ')\n    array = [int(e) for e in array]\n    solution(array)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p = [int(x) for x in input().split(' ')]\n    ma = 0\n    res = 0\n    for j in range(n):\n        ma = max(ma, p[j])\n        if ma == j + 1:\n            res += 1\n    print(res)", "import sys\ninput = sys.stdin.readline\nfor j in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 0\n    x = 0\n    for i in range(n):\n        x = max(x, a[i])\n        if x == i + 1:\n            cnt += 1\n    print(cnt)", "import sys\ninput = sys.stdin.readline\nfor j in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 0\n    x = 0\n    for i in range(n):\n        x = max(x, a[i])\n        if x == i + 1:\n            cnt += 1\n    print(cnt)", "import sys\ninput = sys.stdin.readline\nfor j in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = 0\n    x = 0\n    for i in range(n):\n        x = max(x, a[i])\n        if x == i + 1:\n            c += 1\n    print(c)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    cnt = 0\n    currmax = p[0]\n    for i in range(n):\n        if p[i] > currmax:\n            currmax = p[i]\n        if currmax == i + 1:\n            cnt += 1\n    print(cnt)", "import sys\ninput = sys.stdin.readline\nfor j in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    count = 0\n    x = 0\n    for i in range(n):\n        x = max(x, arr[i])\n        if x == i + 1:\n            count += 1\n    print(count)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    cnt = 0\n    currmax = p[0]\n    for i in range(n):\n        if p[i] > currmax:\n            currmax = p[i]\n        if currmax == i + 1:\n            cnt += 1\n            if i + 1 < n:\n                currmax = p[i + 1]\n    print(cnt)", "import sys\ninput = sys.stdin.readline\nfor case in range(int(input())):\n    length = int(input())\n    line = list(map(int, input().split()))\n    maxx = 0\n    maxs = []\n    for i in line:\n        if i > maxx:\n            maxx = i\n        maxs.append(maxx)\n    minx = 999999\n    mins = []\n    for i in line[::-1]:\n        if i < minx:\n            minx = i\n        mins.append(minx)\n    mins.reverse()\n    quantity = 0\n    for i in range(1, length):\n        if line[i] > line[i - 1] and maxs[i - 1] < mins[i]:\n            quantity += 1\n    print(quantity + 1)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    p = [int(i) for i in input().split()]\n    op = p.index(1)\n    np = p.index(n)\n    if op > np:\n        print(1)\n        continue\n    c = 0\n    mx = 0\n    for i in range(n):\n        mx = max(mx, p[i])\n        if mx == i + 1:\n            c = c + 1\n    print(c)", "import sys\ninput = sys.stdin.readline\n\ndef solve(n, p):\n    v = -float('inf')\n    cnt = 0\n    for i in range(n):\n        v = max(v, p[i])\n        if v == i + 1:\n            cnt += 1\n    print(cnt)\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    solve(n, p)", "from collections import Counter, defaultdict, deque\nimport bisect\nfrom sys import stdin, stdout\nfrom itertools import repeat\nimport math\n\ndef inp(force_list=False):\n    re = list(map(int, input().split()))\n    if len(re) == 1 and (not force_list):\n        return re[0]\n    return re\n\ndef inst():\n    return input().strip()\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nMOD = 998244353\n\ndef my_main():\n    kase = inp()\n    pans = []\n    for kk in range(kase):\n        n = inp()\n        da = inp(True)\n        st = []\n        for i in range(n):\n            st.append((da[i], da[i]))\n            while len(st) >= 2 and (st[-2][0] < st[-1][0] < st[-2][1] or st[-1][0] < st[-2][0] < st[-1][1] or da[i] < st[-2][1]):\n                (x, y) = st.pop()\n                (a, b) = st.pop()\n                st.append((min(x, a), max(y, b)))\n        pans.append(str(len(st)))\n    print('\\n'.join(pans))\nmy_main()", "import sys\ninput = sys.stdin.readline\nfor case in range(int(input())):\n    length = int(input())\n    line = list(map(int, input().split()))\n    maxx = 0\n    maxs = []\n    for i in line:\n        if i > maxx:\n            maxx = i\n        maxs.append(maxx)\n    minx = 999999\n    mins = []\n    for i in line[::-1]:\n        if i < minx:\n            minx = i\n        mins.append(minx)\n    mins.reverse()\n    quantity = 0\n    for i in range(1, length):\n        if line[i] > line[i - 1] and maxs[i - 1] < mins[i]:\n            quantity += 1\n    print(quantity + 1)", "n = int(input())\nkiller = []\nfor i in range(n):\n    k = int(input())\n    cnt = 0\n    ans = 0\n    mylist = list(map(int, input().split()))\n    for (x, i) in enumerate(mylist, 1):\n        ans = max(ans, i)\n        if x < ans:\n            pass\n        else:\n            cnt = cnt + 1\n    killer.append(cnt)\nprint(*killer, sep='\\n')", "import sys\ninput = sys.stdin.readline\n\ndef solve(n, p):\n    nextSmaller = [-1] * n\n    stack = []\n    for i in range(n):\n        while stack and p[stack[-1]] > p[i]:\n            nextSmaller[stack.pop()] = i\n        stack.append(i)\n    intervals = []\n    visited = set()\n    for i in range(n):\n        if i in visited:\n            continue\n        idx = i\n        visited.add(idx)\n        while nextSmaller[idx] != -1:\n            idx = nextSmaller[idx]\n            visited.add(idx)\n        intervals.append((i, idx, p[i], p[idx]))\n    count = 1\n    (ps, pe, pmax, pmin) = intervals[0]\n    for i in range(1, len(intervals)):\n        (cs, ce, cmax, cmin) = intervals[i]\n        if ps <= cs <= pe:\n            (ps, pe) = (min(ps, cs), max(pe, ce))\n            (pmax, pmin) = (max(pmax, cmax), min(pmin, cmin))\n        elif pmax > cmin:\n            (ps, pe) = (min(ps, cs), max(pe, ce))\n            (pmax, pmin) = (max(pmax, cmax), min(pmin, cmin))\n        else:\n            count += 1\n            (ps, pe, pmax, pmin) = (cs, ce, cmax, cmin)\n    print(count)\n    return\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    solve(n, p)", "t = int(input())\nresults = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    m = 0\n    n = 0\n    c = 0\n    for a in arr:\n        if a > m:\n            n = n + (a - m - 1)\n            m = a\n        else:\n            n -= 1\n        if n == 0:\n            c += 1\n    results.append(c)\nfor r in results:\n    print(r)", "l1 = []\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ma = c = 0\n    for i in range(n):\n        ma = max(ma, l[i])\n        if ma == i + 1:\n            c += 1\n    l1.append(c)\nprint(*l1, sep='\\n')", "p = []\na = int(input())\nfor i in range(a):\n    e = int(input())\n    q = list(map(int, input().split()))\n    g = list()\n    h = q[0] - 1\n    x = q[0]\n    for j in range(1, e):\n        if q[j] < x:\n            h -= 1\n        elif h != 0:\n            h += q[j] - x - 1\n            x = q[j]\n        else:\n            g.append(x)\n            h = q[j] - x - 1\n            x = q[j]\n    g.append(0)\n    p.append(g)\nfor i in p:\n    print(len(i))", "p = []\na = int(input())\nfor i in range(a):\n    e = int(input())\n    q = list(map(int, input().split()))\n    g = list()\n    h = q[0] - 1\n    x = q[0]\n    for j in range(1, e):\n        if q[j] < x:\n            h -= 1\n        elif h != 0:\n            h += q[j] - x - 1\n            x = q[j]\n        else:\n            g.append(x)\n            h = q[j] - x - 1\n            x = q[j]\n    g.append(0)\n    p.append(g)\nfor i in p:\n    print(len(i))", "a = int(input())\np = []\nfor i in range(a):\n    e = int(input())\n    q = list(map(int, input().split()))\n    g = list()\n    h = q[0] - 1\n    x = q[0]\n    for j in range(1, e):\n        if q[j] < x:\n            h -= 1\n        elif h != 0:\n            h += q[j] - x - 1\n            x = q[j]\n        else:\n            g.append(x)\n            h = q[j] - x - 1\n            x = q[j]\n    g.append(0)\n    p.append(g)\nfor i in p:\n    print(len(i))", "sI = lambda : input()\niI = lambda : int(input())\nmI = lambda : map(int, input().split())\nlI = lambda : list(mI())\nfrom math import ceil\nfrom collections import defaultdict\nanss = []\nfor _ in range(iI()):\n    n = iI()\n    a = lI()\n    cm = a[0]\n    vis = 0\n    ans = 0\n    for i in range(n):\n        cm = max(cm, a[i])\n        vis += 1\n        if vis == cm:\n            ans += 1\n    anss.append(ans)\nfor i in anss:\n    print(i)", "import sys\nt = int(sys.stdin.readline())\nfor iiii in range(t):\n    n = sys.stdin.readline()\n    n = int(n)\n    ar = sys.stdin.readline().split(' ')\n    ar = [int(i) for i in ar]\n    idx = dict()\n    for i in range(len(ar)):\n        idx[ar[i]] = i\n    ans = []\n    now = []\n    for i in ar:\n        if len(now) == 0 or now[0] > i:\n            now.append(i)\n        else:\n            ans.append(now)\n            now = [i]\n    if len(now) != 0:\n        ans.append(now)\n    count = len(ans)\n    for i in range(len(ans)):\n        now = ans[i]\n        len_now = len(now)\n        need = now[0] - idx[now[0]]\n        if len_now < need:\n            count -= 1\n    print(count)", "T = int(input())\nrt = []\n\ndef root(i):\n    while i != rt[i]:\n        rt[i] = rt[rt[i]]\n        i = rt[i]\n    return i\n\ndef merge(a, b):\n    (a, b) = (root(a), root(b))\n    if a == b:\n        return\n    rt[b] = a\nres = []\nwhile T:\n    N = int(input())\n    vals = [*map(int, input().split())]\n    rt = [*range(N)]\n    st = []\n    for (i, val) in enumerate(vals):\n        if not st or st[-1][0] < val:\n            st.append((val, i))\n        else:\n            last = st[-1]\n            while len(st) and st[-1][0] > val:\n                merge(st[-1][1], i)\n                st.pop()\n            st.append(last)\n    res.append(len(set([root(i) for i in rt])))\n    T -= 1\nprint(*res, sep='\\n')", "class UnionFind(object):\n\n    def __init__(self, n):\n        self.parent = [-1] * n\n\n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.find(self.parent[x]))\n        return self.parent[x]\n\n    def union(self, x, y):\n        (root_x, root_y) = (self.find(x), self.find(y))\n        if root_x == root_y:\n            return\n        self.parent[root_x] = root_y\n\n    def isconnected(self, x, y):\n        return self.find(x) == self.find(y)\n\ndef main():\n    t = int(input())\n    ans = []\n    for _ in range(t):\n        n = int(input())\n        p = [int(s) for s in input().split()]\n        stack = []\n        UF = UnionFind(n)\n        for i in range(n):\n            UF.parent[i] = i\n            stack.append((p[i], p[i], i))\n            while len(stack) >= 2 and stack[-1][0] < stack[-2][1]:\n                (min_, max_) = (min(stack[-1][0], stack[-2][0]), max(stack[-1][1], stack[-2][1]))\n                stack.pop()\n                stack[-1] = (min_, max_, stack[-1][2])\n                UF.union(i, stack[-1][2])\n        res = 0\n        for i in range(n):\n            if UF.parent[i] == i:\n                res += 1\n        ans.append(res)\n    print('\\n'.join([str(num) for num in ans]))\nmain()", "t = int(input())\nimport sys\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    a = [int(x) for x in sys.stdin.readline().split()]\n    ans = [a[0]]\n    for i in range(1, n):\n        x = ans[-1]\n        while len(ans) > 0 and ans[-1] > a[i]:\n            ans.pop()\n        ans.append(max(a[i], x))\n    print(len(ans))", "def solveC(a):\n    if len(a) == 1:\n        return 1\n    intervals = []\n    max = a[0]\n    min = a[0]\n    for value in a[1:]:\n        if value > max:\n            intervals.append([min, max])\n            max = value\n            min = value\n        if value < min:\n            min = value\n    intervals.append([min, max])\n    intervals = sorted(intervals, key=lambda x: x[0])\n    merged = mergeIntervals(intervals)\n    return len(merged)\n\ndef mergeIntervals(intervals):\n    result = []\n    current = intervals[0]\n    for interval in intervals[1:]:\n        if current[1] > interval[0]:\n            current[0] = min(current[0], interval[0])\n            current[1] = max(current[1], interval[1])\n        else:\n            result.append(current)\n            current = interval\n    result.append(current)\n    return result\nnum_tests = int(input().split()[0])\nfor t in range(num_tests):\n    n = int(input().split()[0])\n    a = [int(x) for x in input().split()]\n    print(solveC(a))", "from collections import deque\nnbTest = int(input())\n\ndef mergeTop(q):\n    if len(q) < 2:\n        return 0\n    top = q.pop()\n    top2 = q.pop()\n    if top2[0] > top[1]:\n        new = [max(top2[0], top[0]), min(top[1], top2[1])]\n        q.append(new)\n        return 1\n    else:\n        q.append(top2)\n        q.append(top)\n        return 0\nfor blak in range(nbTest):\n    nbN = int(input())\n    q = deque()\n    heads = []\n    maxHead = 0\n    for sNum in input().split():\n        num = int(sNum)\n        toAdd = [num, num]\n        q.append(toAdd)\n        while mergeTop(q):\n            continue\n    print(len(q))", "import sys\n\ndef run():\n    _ = int(input())\n    arr = list(map(int, input().split()))\n    ans = list()\n    for v in arr:\n        w = v\n        while len(ans) and ans[-1] > v:\n            w = max(w, ans.pop())\n        ans.append(w)\n    print(len(ans))\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        run()\nmain()", "t = int(input())\n1 + 1\nimport sys\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    a = sys.stdin.readline().split()\n    for i in range(0, n):\n        a[i] = int(a[i])\n    ans = [a[0]]\n    for i in range(1, n):\n        x = ans[-1]\n        while len(ans) > 0 and ans[-1] > a[i]:\n            ans.pop()\n        ans.append(max(a[i], x))\n    print(len(ans))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    p_i = 0\n    ma = l[0]\n    c = 1\n    for i in range(1, n):\n        if l[i] > ma:\n            if l[p_i] <= i:\n                c += 1\n            p_i = i\n            ma = l[i]\n    print(c)", "def ii():\n    return int(input())\n\ndef li():\n    return list(map(int, input().split()))\nt = ii()\nwhile t:\n    t -= 1\n    n = ii()\n    a = li()\n    if n == 1:\n        print(1)\n    elif n == 2:\n        if a[0] == 2:\n            print(1)\n        else:\n            print(2)\n    else:\n        curr = 0\n        ans = 0\n        for i in range(n):\n            if a[i] > curr:\n                curr = a[i]\n            if curr == i + 1:\n                ans += 1\n        print(ans)", "from sys import maxsize\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    p_i = 0\n    max = l[0]\n    component = 1\n    for i in range(1, n):\n        if l[i] > max:\n            if l[p_i] <= i:\n                component += 1\n            p_i = i\n            max = l[i]\n    print(component)", "t = int(input())\nimport sys\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    a = sys.stdin.readline().split()\n    for i in range(0, n):\n        a[i] = int(a[i])\n    ans = [a[0]]\n    for i in range(1, n):\n        x = ans[-1]\n        while len(ans) > 0 and ans[-1] > a[i]:\n            ans.pop()\n        ans.append(max(a[i], x))\n    print(len(ans))", "cases = int(input())\nfor _ in range(cases):\n    num = int(input())\n    arr = list(map(int, input().split()))\n    sor = sorted(arr)\n    if arr == sor:\n        print(num)\n    elif arr[0] == num:\n        print(1)\n    else:\n        mx = 0\n        ans = 0\n        st = set()\n        prev = 1\n        for n in arr:\n            if n > mx:\n                if not st:\n                    ans += 1\n                mx = n\n                for i in range(prev, mx):\n                    st.add(i)\n                prev = mx + 1\n            else:\n                st.remove(n)\n        print(ans)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    answer = 0\n    goal = 0\n    cnt = 0\n    for n in arr:\n        if n > goal:\n            if cnt == goal:\n                answer += 1\n            goal = n\n        cnt += 1\n    print(answer)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    p_i = 0\n    ma = l[0]\n    c = 1\n    for i in range(1, n):\n        if l[i] > ma:\n            if l[p_i] <= i:\n                c += 1\n            p_i = i\n            ma = l[i]\n    print(c)", "from audioop import reverse\n\ndef crush(stack):\n    while len(stack) > 1 and stack[-1][0] < stack[-2][1]:\n        a = stack.pop()\n        b = stack.pop()\n        stack.append([min(a[0], b[0]), max(a[1], b[1])])\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if list(sorted(a, reverse=True)) == a:\n        print(1)\n        continue\n    stack = []\n    for i in range(n):\n        if len(stack) > 0 and a[i] < stack[-1][1]:\n            stack[-1][0] = min(stack[-1][0], a[i])\n            stack[-1][1] = max(stack[-1][1], a[i])\n            crush(stack)\n        else:\n            stack.append([a[i], a[i]])\n    print(len(stack))", "def solve():\n    input()\n    A = [int(x) for x in input().split()]\n    mx = 0\n    ret = 0\n    left = set()\n    for x in A:\n        if x > mx:\n            if not left:\n                ret += 1\n            for y in range(mx + 1, x):\n                left.add(y)\n            mx = x\n        if x in left:\n            left.remove(x)\n    return ret\nt = int(input())\nfor _ in range(t):\n    print(solve())", "n = int(input())\nfor e in range(n):\n    t = int(input())\n    l = list(map(int, input().split()))\n    i = 1\n    s = [l[0]]\n    while i < len(l):\n        if l[i] > s[-1]:\n            s.append(l[i])\n            i += 1\n        else:\n            c = 0\n            while s != [] and l[i] < s[-1]:\n                if c == 0:\n                    q = s.pop()\n                else:\n                    s.pop()\n                c += 1\n            s.append(q)\n            i += 1\n    print(len(s))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    P = [int(pi) for pi in input().split()]\n    stack = list()\n    for p in P:\n        stack.append((p, p))\n        while len(stack) >= 2:\n            (max1, min1) = stack.pop()\n            (max2, min2) = stack.pop()\n            if max2 > min1:\n                stack.append((max(max1, max2), min(min1, min2)))\n            else:\n                stack.append((max2, min2))\n                stack.append((max1, min1))\n                break\n    print(len(stack))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mex = arr[0]\n    used = 1\n    cnt = 0\n    for i in range(1, n):\n        if mex == used:\n            cnt += 1\n        mex = max(mex, arr[i])\n        used += 1\n    print(cnt + 1)", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        p = [int(s) for s in input().split()]\n        stack = []\n        for i in range(n):\n            stack.append((p[i], p[i]))\n            while len(stack) >= 2 and stack[-1][0] < stack[-2][1]:\n                min_ = min(stack[-1][0], stack[-2][0])\n                max_ = max(stack[-1][1], stack[-2][1])\n                stack.pop()\n                stack[-1] = (min_, max_)\n        print(len(stack))\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = input().split()\n    runningMax = [0] * n\n    runningMin = [n] * n\n    runningMax[0] = int(p[0])\n    runningMin[n - 1] = int(p[n - 1])\n    for i in range(1, n):\n        runningMax[i] = max(runningMax[i - 1], int(p[i]))\n        runningMin[n - i - 1] = min(runningMin[n - i], int(p[n - i - 1]))\n    components = 1\n    for i in range(1, n):\n        if runningMin[i] > runningMax[i - 1]:\n            components += 1\n    print(components)", "for _ in range(int(input())):\n    n = int(input())\n    numbers = list(map(int, input().split(' ')))\n    cnt = 0\n    mx = 0\n    for (i, nb) in enumerate(numbers):\n        mx = max(mx, nb)\n        if mx == i + 1:\n            cnt += 1\n    print(cnt)", "for __ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    num = 0\n    ans = 0\n    for i in range(n):\n        if ar[i] > num:\n            num = ar[i]\n        if i + 1 == num:\n            ans += 1\n    print(ans)", "from sys import maxsize\n\ndef ga():\n    return list(map(int, input().split()))\nfor _ in range(int(input())):\n    n = int(input())\n    arr = ga()\n    stack = []\n    for i in arr:\n        stack.append((i, i))\n        while len(stack) >= 2:\n            (mi1, ma1) = stack[-1]\n            (mi2, ma2) = stack[-2]\n            if mi1 < ma2:\n                stack.pop()\n                stack.pop()\n                stack.append((min(mi1, mi2), max(ma1, ma2)))\n            else:\n                break\n    print(len(stack))", "import math\nfrom collections import *\n\ndef solve():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    s = 0\n    c = 0\n    for i in range(n):\n        s += a[i]\n        if s == (i + 1) * (i + 2) // 2:\n            c += 1\n    print(c)\nt = int(input())\nfor _ in range(t):\n    solve()", "import collections\nfrom math import ceil, gcd, sqrt, log\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    stack = [A[0]]\n    for i in range(1, n):\n        top = stack[-1]\n        while stack and stack[-1] > A[i]:\n            stack.pop()\n        stack.append(max(top, A[i]))\n    print(len(stack))\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    z = list(map(int, input().split()))\n    mx = 0\n    x = [[z[0], z[0]]]\n    for i in range(1, n):\n        if z[i] < x[-1][1]:\n            if z[i] < x[-1][0]:\n                x[-1][0] = z[i]\n        else:\n            x.append([z[i], z[i]])\n        while len(x) > 1 and x[-1][0] < x[-2][1]:\n            (a, b) = (x.pop(), x.pop())\n            x.append([min(a[0], b[0]), max(a[1], b[1])])\n    print(len(x))", "def main_function():\n    test_cases = range(int(input()))\n    for test_case in test_cases:\n        n = int(input())\n        a = [int(i) for i in input().split(' ')]\n        roots = [a[0]]\n        for i in range(1, len(a)):\n            max_val = roots[-1]\n            if a[i] > max_val:\n                roots.append(a[i])\n            else:\n                while len(roots) > 0 and roots[-1] > a[i]:\n                    roots.pop()\n                roots.append(max_val)\n        print(len(roots))\nmain_function()", "import bisect\n\ndef solve(a, n):\n    res = 1\n    nodes = [0] * n\n    nodes[0] = a[0]\n    for i in range(1, n):\n        idx = bisect.bisect(nodes, a[i], 0, res)\n        if idx == res:\n            nodes[idx] = a[i]\n        else:\n            nodes[idx] = nodes[res - 1]\n        res = idx + 1\n    print(res)\n    return\nt = int(input())\nfor i in range(1, t + 1):\n    n = int(input())\n    a = list(map(int, input().split()))\n    solve(a, n)", "n = int(input())\nfor i in range(n):\n    tam = int(input())\n    lista = list(map(int, input().split()))\n    maior = 0\n    soma = 0\n    contagem = 0\n    for j in range(tam):\n        if lista[j] > maior:\n            if contagem == maior:\n                soma += 1\n                maior = lista[j]\n            else:\n                maior = lista[j]\n        contagem += 1\n    print(soma)", "from math import *\nfrom math import factorial as fact, comb as ncr\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\nfrom array import array\ninp = lambda : int(input())\nli = lambda : list(map(int, input().split()))\nlb = lambda : list(map(int, input()))\nls = lambda : list(input())\narr = lambda a: array('i', a)\nbi = lambda n: bin(n).replace('0b', '')\nyn = lambda f: print('NYOE S'[f::2])\n\ndef solve(__=1):\n    for _ in range(__):\n        n = inp()\n        a = li()\n        c = 0\n        m = 0\n        for (i, x) in enumerate(a):\n            m = max(m, x)\n            if m == i + 1:\n                c += 1\n        print(c)\nsolve(inp())", "for _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    ans = 0\n    cur = 1\n    val = lis[0]\n    for i in range(1, n):\n        if val == cur:\n            ans += 1\n        val = max(val, lis[i])\n        cur += 1\n    print(ans + 1)", "T = int(input())\nfor i in range(T):\n    n = int(input())\n    inpt = [int(x) for x in input().split(' ')]\n    stack = []\n    for ele in reversed(inpt):\n        if len(stack) > 0:\n            mins = float('inf')\n            while 1:\n                if len(stack) > 0:\n                    if stack[-1] < ele:\n                        pe = stack.pop()\n                        mins = min(pe, mins)\n                    else:\n                        pe = min(mins, ele)\n                        stack.append(pe)\n                        break\n                else:\n                    pe = min(mins, ele)\n                    stack.append(pe)\n                    break\n        else:\n            stack.append(ele)\n    print(len(stack))", "t = int(input())\nwhile t:\n    n = int(input())\n    p = list(map(int, input().split()))\n    m = 0\n    ans = 0\n    for i in range(n):\n        if p[i] >= m:\n            if i >= m:\n                ans = ans + 1\n            m = p[i]\n    print(ans)\n    t = t - 1", "from math import *\nfrom math import factorial as fact, comb as ncr\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\nfrom array import array\ninp = lambda : int(input())\nli = lambda : list(map(int, input().split()))\nlb = lambda : list(map(int, input()))\nls = lambda : list(input())\narr = lambda a: array('i', a)\nbi = lambda n: bin(n).replace('0b', '')\nyn = lambda f: print('NYOE S'[f::2])\n\ndef solve(__=1):\n    for _ in range(__):\n        n = inp()\n        a = li()\n        c = 0\n        m = 0\n        for (i, x) in enumerate(a):\n            m = max(m, x)\n            if m == i + 1:\n                c += 1\n        print(c)\nsolve(inp())", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().strip().split()))\n    ma = l[0]\n    co = 0\n    for i in range(n):\n        if l[i] > ma:\n            ma = l[i]\n        if ma == i + 1:\n            co += 1\n    print(co)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    p_i = 0\n    ma = l[0]\n    c = 1\n    for i in range(1, n):\n        if l[i] > ma:\n            if l[p_i] <= i:\n                c += 1\n            p_i = i\n            ma = l[i]\n    print(c)", "for __ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    num = 0\n    ans = 0\n    for i in range(n):\n        if ar[i] > num:\n            num = ar[i]\n        if i + 1 == num:\n            ans += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    cnt = 0\n    currmax = p[0]\n    for i in range(n):\n        if p[i] > currmax:\n            currmax = p[i]\n        if currmax == i + 1:\n            cnt += 1\n            if i + 1 < n:\n                currmax = p[i + 1]\n    print(cnt)", "t = int(input())\nfor _ in range(t):\n    _ = int(input())\n    arr = list(map(int, input().split()))\n    (maxs, max_maxs) = ([], 0)\n    for i in arr:\n        max_yet = i\n        while maxs and i < maxs[-1]:\n            max_yet = max(max_yet, maxs.pop())\n        maxs.append(max_yet)\n    print(len(maxs))", "def func():\n    n = int(input())\n    l = list(map(int, input().split()))\n    comp = 0\n    (high, cnt) = (0, 0)\n    for i in l:\n        if high == cnt:\n            high = i\n            comp += 1\n        high = max(high, i)\n        cnt += 1\n    return comp\nt = int(input())\nfor i in range(t):\n    print(func())", "T = int(input())\nfor z in range(0, T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    count = 1\n    Max = A[0]\n    res = 0\n    if count == Max:\n        res += 1\n    for i in range(1, N):\n        count += 1\n        if Max < A[i]:\n            Max = A[i]\n        if count == Max:\n            res += 1\n    print(res)", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    (mx, ans) = (0, 0)\n    for i in range(n):\n        mx = max(mx, a[i])\n        ans += mx == i + 1\n    print(ans)\ntst = int(input())\nwhile tst:\n    solve()\n    tst -= 1", "def main():\n    T = int(input())\n    for k in range(T):\n        n = int(input())\n        array = list(map(int, input().split(' ')))\n        (mx, count) = (0, 0)\n        for i in range(len(array)):\n            mx = max(array[i], mx)\n            if mx == i + 1:\n                count += 1\n        print(count)\nmain()", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = []\n    m = 0\n    c = 0\n    a = [int(x) for x in input().split(' ')]\n    i = 0\n    for j in a:\n        m = max(m, j)\n        if m == i + 1:\n            c += 1\n        i += 1\n    print(c)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = []\n    m = 0\n    c = 0\n    a = [int(x) for x in input().split(' ')]\n    i = 0\n    for j in a:\n        m = max(m, j)\n        if m == i + 1:\n            c += 1\n        i += 1\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    c = 0\n    s = 0\n    for j in range(n):\n        s = s + arr[j]\n        if s == (j + 1) * (j + 2) // 2:\n            c += 1\n    print(c)", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_ls():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        ls = get_ls()\n        ans = mx = 0\n        for i in range(len(ls)):\n            mx = max(ls[i], mx)\n            if mx == i + 1:\n                ans += 1\n        print(ans)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    c = 0\n    s = 0\n    for j in range(n):\n        s = s + arr[j]\n        if s == (j + 1) * (j + 2) // 2:\n            c += 1\n    print(c)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = [int(i) for i in input().strip().split()]\n    count = 0\n    free_to_go = 0\n    for i in range(n):\n        if p[i] > i + 1:\n            free_to_go = max(free_to_go, p[i])\n        if i + 1 >= free_to_go:\n            count += 1\n    print(count)", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    x = 0\n    for i in range(n):\n        x = max(x, a[i])\n        if x == i + 1:\n            count += 1\n    print(count)", "for i in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    j = 0\n    otv = 1\n    while j < n:\n        if j == 0:\n            k = p[0] - 1\n            tekysh_k = p[0]\n            naibolosh_v_k = p[0]\n        elif tekysh_k == naibolosh_v_k:\n            otv += 1\n            k = p[j] - 1 - j\n            tekysh_k = p[j]\n            naibolosh_v_k = p[j]\n        else:\n            k = naibolosh_v_k - j\n            tekysh_k = naibolosh_v_k\n            j -= 1\n        while k > 0:\n            j += 1\n            if p[j] < tekysh_k:\n                k -= 1\n            elif p[j] > naibolosh_v_k:\n                naibolosh_v_k = p[j]\n        j += 1\n    print(otv)", "def read_nums():\n    return [int(x) for x in input().split()]\n\ndef solve():\n    (n,) = read_nums()\n    perm = read_nums()\n    res = 0\n    cur_sum = 0\n    target_sum = 0\n    for i in range(n):\n        cur_sum += perm[i]\n        target_sum += i + 1\n        if cur_sum == target_sum:\n            res += 1\n    return res\n\ndef main():\n    (t,) = read_nums()\n    for _ in range(t):\n        print(solve())\nmain()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = 0\n    mi = 1000000000.0\n    ma = -1000000000.0\n    for i in range(n):\n        if a[i] > ma:\n            ma = a[i]\n        if a[i] < mi:\n            mi = a[i]\n        if mi == 1 and ma == i + 1:\n            c += 1\n    print(c)", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    s = 0\n    ans = 0\n    for j in range(0, n):\n        s = s + lis[j]\n        if s == (j + 1) * (j + 2) // 2:\n            ans = ans + 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = 0\n    mi = 1000000000.0\n    ma = -1000000000.0\n    for i in range(n):\n        if a[i] > ma:\n            ma = a[i]\n        if a[i] < mi:\n            mi = a[i]\n        if mi == 1 and ma == i + 1:\n            c += 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = 0\n    mi = 1000000000.0\n    ma = -1000000000.0\n    for i in range(n):\n        if a[i] > ma:\n            ma = a[i]\n        if a[i] < mi:\n            mi = a[i]\n        if mi == 1 and ma == i + 1:\n            c += 1\n    print(c)", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    s = 0\n    ans = 0\n    for j in range(0, n):\n        s = s + lis[j]\n        if s == (j + 1) * (j + 2) // 2:\n            ans = ans + 1\n    print(ans)", "from math import ceil, log10\nimport bisect\nimport math\nfrom collections import defaultdict\nfrom itertools import groupby\nfrom collections import defaultdict, Counter\nfrom heapq import heappop, heappush\nfrom collections import deque\nfrom re import A\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = 0\n    maximum = 0\n    for i in range(n):\n        maximum = max(maximum, arr[i])\n        if maximum == i + 1:\n            ans += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l1 = [int(i) for i in input().split()]\n    st = []\n    for i in range(n):\n        if st:\n            if l1[i] < st[-1][0]:\n                if l1[i] < st[-1][1]:\n                    st[-1][1] = l1[i]\n            else:\n                st.append([l1[i], l1[i]])\n        else:\n            st.append([l1[i], l1[i]])\n    ans = 1\n    p = st[-1][1]\n    for i in range(len(st) - 2, -1, -1):\n        if st[i][0] > p:\n            p = min(p, st[i][1])\n            continue\n        else:\n            ans += 1\n            p = st[i][1]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().strip().split()))\n    ma = l[0]\n    co = 0\n    for i in range(n):\n        if l[i] > ma:\n            ma = l[i]\n        if ma == i + 1:\n            co += 1\n    print(co)", "def merge(stack):\n    while len(stack) >= 2:\n        (max1, min1) = stack.pop()\n        (max2, min2) = stack.pop()\n        if max2 > min1:\n            stack.append((max(max1, max2), min(min1, min2)))\n        else:\n            stack.append((max2, min2))\n            stack.append((max1, min1))\n            break\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    P = [int(pi) for pi in input().split()]\n    stack = list()\n    for p in P:\n        stack.append((p, p))\n        merge(stack)\n    print(len(stack))", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    a = input().split()\n    for i in range(0, n):\n        a[i] = int(a[i])\n    ans = [a[0]]\n    for i in range(1, n):\n        x = ans[-1]\n        while len(ans) > 0 and ans[-1] > a[i]:\n            ans.pop()\n        ans.append(max(a[i], x))\n    print(len(ans))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = 0\n    mi = 1000000000.0\n    ma = -1000000000.0\n    for i in range(n):\n        if a[i] > ma:\n            ma = a[i]\n        if a[i] < mi:\n            mi = a[i]\n        if mi == 1 and ma == i + 1:\n            c += 1\n    print(c)", "for i in range(int(input())):\n    n = int(input())\n    P = [int(k) for k in input().split()]\n    d = 1\n    z = P[0]\n    m = 0\n    for k in range(n):\n        if z < P[k]:\n            z = P[k]\n        if d == z:\n            m += 1\n        d += 1\n    print(m)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = 0\n    mi = 1000000000.0\n    ma = -1000000000.0\n    for i in range(n):\n        if a[i] > ma:\n            ma = a[i]\n        if a[i] < mi:\n            mi = a[i]\n        if mi == 1 and ma == i + 1:\n            c += 1\n    print(c)"]