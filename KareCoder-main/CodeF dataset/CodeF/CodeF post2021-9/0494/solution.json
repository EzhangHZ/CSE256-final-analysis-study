["n = int(input())\na = []\ns = 0\nfor i in range(n):\n    x = list(map(int, input().split()))\n    a.append(x)\n    s += sum(x)\nb = []\nfor i in range(n):\n    b.append(a[i][n - i - 1])\nprint(s - min(b))", "n = int(input())\ns = 0\ntable = []\nfor i in range(n):\n    numbers = list(map(int, input().split()))\n    table.append(numbers)\n    s += sum(numbers)\nspecific_nums = [table[i][n - 1 - i] for i in range(n)]\nminimum_spec_num = min(specific_nums)\nprint(s - minimum_spec_num)", "p = [*map(int, open(0).read().split())]\nn = p[0]\ng = p[1:]\nprint(sum(g) - min(g[n - 1:-1:n - 1]))", "l = [*map(int, open(0).read().split())]\nn = l[0]\no = l[1:]\nprint(sum(o) - min(o[n - 1:-1:n - 1]))", "(n, p, sum, m) = (int(input()), [], 0, 10 ** 10)\nfor i in range(n):\n    arr = [int(x) for x in input().split()]\n    for a in arr:\n        sum += a\n    if arr[n - 1 - i] < m:\n        m = arr[n - 1 - i]\n    p.append(arr)\nprint(sum - m)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nsummary = 0\nminimal = -1\nn = inp()\nfor i in range(n):\n    j = inlt()\n    if minimal == -1:\n        minimal = j[-1]\n    elif minimal > j[n - i - 1]:\n        minimal = j[n - i - 1]\n    summary += sum(j)\nsys.stdout.write(str(summary - minimal))", "n = int(input())\nt = 0\nmin_diag = 100000000000\ngrid = []\nfor i in range(n):\n    row = list(map(int, input().split()))\n    grid.append(row)\n    t += sum(row)\n(r, c) = (0, n - 1)\nwhile r < n:\n    min_diag = min(min_diag, grid[r][c])\n    c -= 1\n    r += 1\nprint(t - min_diag)", "k = int(input())\ns = 0\na = []\nfor i in range(k):\n    l = list(map(int, input().split()))\n    a.append(l[k - i - 1])\n    s += sum(l)\ns -= min(a)\nprint(s)", "import sys\nrd = sys.stdin.readline\nn = int(rd())\n(summ, minn) = (0, -1)\nfor i in range(n):\n    a = list(map(int, rd().split()))\n    if minn == -1:\n        minn = a[-1]\n    else:\n        minn = min(minn, a[n - i - 1])\n    summ += sum(a)\nprint(summ - minn)", "n = int(input())\nans = 0\nnew = []\nfor i in range(n):\n    a = input().split(' ')\n    a = [int(ia) for ia in a]\n    new.append(a[n - 1 - 1 * i])\n    ans += sum(a)\nprint(ans - min(new))", "n = int(input())\narr = []\nfor i in range(n):\n    arr.append([int(x) for x in input().split()])\ns = 0\nfor i in range(n):\n    s = s + sum(arr[i], start=0)\nm = 10000000000000000\nfor i in range(n):\n    m = min(m, arr[n - i - 1][i])\nprint(s - m)", "sum = 0\nn = int(input())\nmatrix = []\ndiagonals = []\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\nfor i in range(n):\n    diagonals.append(matrix[i][n - i - 1])\nfor i in range(n):\n    for j in range(n):\n        sum += matrix[i][j]\nsum -= min(diagonals)\nprint(sum)", "n = int(input())\nlines = [list(map(int, input().split())) for i in range(n)]\ntotal = 0\nfor line in lines:\n    total += sum(line)\ntemp = []\nfor i in range(n):\n    temp.append(lines[i][n - i - 1])\ntotal -= min(temp)\nprint(total)", "(lst, antidiag) = ([], [])\nn = int(input())\nfor i in range(n):\n    a = list(map(int, input().split()))\n    antidiag.append(a[n - 1 - i])\n    lst.append(a)\nmindiag = min(antidiag)\nans = 0\nfor i in lst:\n    ans += sum(i)\nprint(ans - mindiag)", "import sys\nimport math\n\ndef solve():\n    n = int(input())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n    sum = 0\n    mn = 2000000000.0\n    for i in range(n):\n        for j in range(n):\n            sum += a[i][j]\n    i = 0\n    j = n - 1\n    t = n\n    while t > 0:\n        mn = min(mn, a[i][j])\n        i += 1\n        j -= 1\n        t -= 1\n    print(sum - mn)\nsolve()", "def fun(l):\n    min = l[-1][0]\n    for j in range(len(l)):\n        if min > l[-1 - j][j]:\n            min = l[-1 - j][j]\n    ans = 0\n    for i in range(len(l)):\n        for j in range(len(l)):\n            ans = ans + l[i][j]\n    ans = ans - min\n    print(ans)\nls = []\nl = []\nn = int(input())\nfor i in range(n):\n    l = list(map(int, input().split()))\n    ls.append(l)\n    l = []\nfun(ls)", "n = int(input())\nnum = []\nans = 0\nfor i in range(n):\n    x = list(map(int, input().split()))\n    num.append(x)\nfor i in num:\n    ans += sum(i)\nx = num[0][n - 1]\nfor i in range(n):\n    x = min(x, num[i][n - i - 1])\nans -= x\nprint(ans)", "n = int(input())\nret = []\nres = 0\nmr = float('inf')\nfor x in range(n):\n    ret.append(list(map(int, input().split())))\n    mr = min(mr, ret[-1][n - x - 1])\n    res += sum(ret[-1])\nprint(res - mr) if n != 1 else print(ret[0][0])", "n = int(input())\ngrid = [[int(x) for x in input().split()] for _ in range(n)]\nagg = sum((sum(grid[i]) for i in range(n)))\np = min((grid[i][-(i + 1)] for i in range(n)))\nprint(agg - p)", "p = [*map(int, open(0).read().split())]\nn = p[0]\ng = p[1:]\nprint(sum(g) - min(g[n - 1:-1:n - 1]))", "from math import ceil, sqrt\nn = int(input())\ngrid = [[*map(int, input().split())] for i in range(n)]\nm = min((grid[i][::-1][i] for i in range(n)))\ns = sum((sum(i) for i in grid))\nprint(s - m)", "import sys\ns = sys.stdin.read()\n\ndef solve(cell_data, n):\n    result = sum(cell_data)\n    select_cell = cell_data[n - 1:-1:n - 1]\n    find_lowest_cell = min(select_cell)\n    result = result - find_lowest_cell\n    print(result)\nlines = s.split('\\n')\ncell_data = []\nfor line in lines[1:-1]:\n    row_data = [int(i) for i in line.split()]\n    cell_data.extend(row_data)\nn = len(row_data)\nsolve(cell_data, n)", "n = int(input())\ncount = 0\na = float('inf')\nfor i in range(n):\n    b = list(map(int, input().split()))\n    count += sum(b)\n    a = min(a, b[n - 1 - i])\nprint(count - a)", "p = [*map(int, open(0).read().split())]\nn = p[0]\ng = p[1:]\nprint(sum(g) - min(g[n - 1:-1:n - 1]))", "n = int(input())\nmap_ = []\nfor i in range(n):\n    map_.append(list(map(lambda x: int(x), input().split(' '))))\ndiag_arr = []\nfor i in range(n):\n    diag_arr.append(map_[i][n - i - 1])\ntotal = 0\nfor row in map_:\n    total += sum(row)\nmin_ = min(diag_arr)\nprint(total - min_)", "p = [*map(int, open(0).read().split())]\nn = p[0]\ng = p[1:]\nprint(sum(g) - min(g[n - 1:-1:n - 1]))", "n = int(input())\narr = [list(map(int, input().split())) for i in range(n)]\nprint(sum((sum(i) for i in arr)) - min((arr[i][-(i + 1)] for i in range(n))))", "def f(L, S):\n    return L - min(S)\nN = int(input())\nS = []\nL = 0\nfor i in range(N):\n    y = list(map(int, input().split()))\n    L += sum(y)\n    S.append(y[N - i - 1])\nprint(f(L, S))", "def main():\n    maxsum = 0\n    sq = []\n    n = int(input(''))\n    for i in range(n):\n        l = input().split(' ')\n        li = [int(x) for x in l]\n        sq.append(li)\n        maxsum += sum(li)\n    maxsum -= min([sq[i][n - 1 - i] for i in range(n)])\n    print(maxsum)\nmain()", "n = int(input())\narr = []\nans = 0\nfor i in range(n):\n    a = list(map(int, input().split()))\n    arr += [a]\n    ans += sum(a)\ni = 0\nj = n - 1\nmn = arr[i][j]\ni += 1\nj -= 1\nwhile i < n and j >= 0:\n    mn = min(mn, arr[i][j])\n    i += 1\n    j -= 1\nprint(ans - mn)", "n = int(input())\nif n < 2:\n    print('Invalid input')\n    exit(1)\na = []\nfor i in range(0, n):\n    temp = []\n    temp = list(map(int, input().split()))[:n]\n    a.append(temp)\nb = 1\nx = []\nfor i in range(0, n):\n    count = 0\n    for j in range(0, n):\n        x.append(a[i][n - b])\n        count += 1\n        b += 1\n        if count == 1:\n            break\ny = min(x)\ncount2 = 0\nsum1 = 0\nfor i in range(0, n):\n    for j in range(0, n):\n        if a[i][j] == y and count2 == 0:\n            count2 += 1\n            continue\n        sum1 += a[i][j]\nprint(sum1)", "tilematrix = []\nn = int(input())\nrow = []\nsum = 0\nfor j in range(n):\n    row = input().split()\n    for x in range(n):\n        row[x] = int(row[x])\n        sum += row[x]\n    tilematrix.append(row)\ndiagonal = []\nfor l in range(n):\n    diagonal.append(tilematrix[l][n - 1 - l])\nanswer = sum - min(diagonal)\nprint(answer)", "n = int(input())\ns = 0\nmi = 10000000000\nfor i in range(1, n + 1):\n    m = list(map(int, input().split()))\n    s += sum(m)\n    if m[len(m) - i] < mi:\n        mi = m[len(m) - i]\nprint(s - mi)", "num = int(input())\ns = 0\nlist1 = []\nfor i in range(num):\n    l = list(map(int, input().split()))\n    list1.append(l[num - i - 1])\n    s += sum(l)\ns -= min(list1)\nprint(s)", "n = int(input())\na1 = []\nsum = 0\nfor j in range(0, n):\n    s = input()\n    x = [int(i) for i in s.split(' ')]\n    a1.append(x)\nfor i in range(0, n):\n    for j in range(0, n):\n        sum = sum + a1[i][j]\nsmall = sum\nfor i in range(0, n):\n    small = min(small, a1[i][n - 1 - i])\nprint(sum - small)"]