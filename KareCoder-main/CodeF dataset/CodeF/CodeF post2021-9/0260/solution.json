["inp = (*open(0),)\nout = []\nfor (a, b) in zip(inp[2::3], inp[3::3]):\n    a = list(map(int, a.split()))\n    b = list(map(int, b.split()))\n    out.append(str(sum(sorted(a + b[:-1], reverse=True)[:len(a) - 1]) + b[-1]))\nprint('\\n'.join(out))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    k1 = b[-1]\n    b.remove(k1)\n    l = a + b\n    l.sort()\n    l = l[::-1]\n    l.insert(0, k1)\n    print(sum(l[:n]))", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    if n == 1:\n        print(b[-1])\n    else:\n        print(sum((sorted(a + b[:-1]) + [b[-1]])[-n:]))", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    s1 = list(map(int, input().split()))\n    s2 = list(map(int, input().split()))\n    b = s2.pop()\n    l2 = s1 + s2\n    l2.sort()\n    l3 = l2[m:m + n - 1]\n    print(sum(l3) + b)", "def run():\n    _ = input()\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    n = len(a)\n    if n == 1:\n        print(b[-1])\n        return\n    arr = a + b[:-1]\n    arr.sort()\n    print(sum(arr[-(n - 1):]) + b[-1])\ntests_nr = int(input())\nfor _ in range(tests_nr):\n    run()", "I = lambda : [*map(int, input().split())]\nfor _ in ' ' * I()[0]:\n    (n, m) = I()\n    a = I()\n    b = I()\n    if n == 1:\n        print(b[-1])\n        continue\n    print(sum(sorted(a + b[:-1])[-n + 1:]) + b[-1])", "import sys, heapq\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    heapq.heapify(a)\n    for i in range(m):\n        heapq.heappop(a)\n        heapq.heappush(a, b[i])\n    print(sum(a))", "def max_sum(n, m, a, b):\n    d = b\n    b = b[:-1]\n    c = a + b\n    c = sorted(c, reverse=True)\n    c = c[:n - 1]\n    ans = sum(c) + d[-1]\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(max_sum(n, m, a, b))", "test_cases = int(input())\nfor i in range(test_cases):\n    (n, m) = map(int, input().split())\n    a_list = input().split()\n    b_list = input().split()\n    ai_list = [int(item) for item in a_list]\n    bj_list = [int(item) for item in b_list]\n    c_list = ai_list + bj_list\n    c_list.sort()\n    c_list.reverse()\n    if bj_list[m - 1] not in c_list[0:n]:\n        c_list[n - 1] = bj_list[m - 1]\n    print(sum(c_list[0:n]))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    res = [b[-1]]\n    b.pop()\n    a += b\n    a.sort(reverse=True)\n    res.extend(a)\n    print(sum(res[:n]))", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    a = sorted(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = sorted(a + b[:-1])\n    if len(a) == 1:\n        print(b[-1])\n    else:\n        print(b[-1] + sum(c[-n + 1:]))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    sum = b[-1]\n    a.extend(b[:-1])\n    a.sort(reverse=True)\n    for i in a[:n - 1]:\n        sum += i\n    print(sum)", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    a = []\n    b = []\n    c = []\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    f = b[m - 1]\n    b.pop()\n    c = a + b\n    c.sort(reverse=True)\n    ans = f\n    for i in range(n - 1):\n        ans += c[i]\n    print(ans)", "for _ in ' ' * int(input()):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    s = sum(sorted(a + b[:-1], reverse=True)[:n - 1]) + b[-1]\n    print(s)", "import sys\ninput = sys.stdin.readline\ncase = int(input())\nfor c in range(case):\n    (n, m) = map(int, input().split())\n    ln = list(map(int, input().split()))\n    lm = list(map(int, input().split()))\n    a = ln + lm\n    b = [a[-1]]\n    b = b + sorted(a[:-1], reverse=True)\n    ans = 0\n    for i in range(n):\n        ans += b[i]\n    print(ans)", "import heapq\n\ndef solve():\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    heapq.heapify(a)\n    for b in map(int, input().split()):\n        heapq.heapreplace(a, b)\n    print(sum(a))\nfor _ in range(int(input())):\n    solve()", "from heapq import heapify, heapreplace\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    heapify(a)\n    b = map(int, input().split())\n    for x in b:\n        heapreplace(a, x)\n    print(sum(a))", "dd = int(input())\nfor i in range(dd):\n    (n, m) = map(int, input().split())\n    s1 = list(map(int, input().split()))\n    s2 = list(map(int, input().split()))\n    b = s2.pop()\n    l2 = s1 + s2\n    l2.sort()\n    l3 = l2[m:m + n - 1]\n    print(sum(l3) + b)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    last_b = b[m - 1]\n    c = a + b[:m - 1]\n    c.sort()\n    print(last_b + sum(c[m:]))", "t = int(input(''))\nfor _ in range(t):\n    (n, m) = [int(x) for x in input('').split(' ')]\n    A = [int(x) for x in input('').split(' ')]\n    B = [int(x) for x in input('').split(' ')]\n    C = sorted(A + B[:-1])\n    x = B[-1]\n    if n == 1:\n        print(x)\n    else:\n        print(x + sum(C[-n + 1:]))", "from heapq import heapify, heappop, heappush\nfor tcase in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    heapify(a)\n    for x in b:\n        y = heappop(a)\n        heappush(a, x)\n    print(sum(a))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = 0\n    c += b[-1]\n    b.pop(-1)\n    l = a + b\n    l.sort(reverse=True)\n    for j in range(n - 1):\n        c += l[j]\n    print(c)", "from heapq import heappush, heappop, heapify\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l1 = list(map(int, input().split()))\n    heapify(l)\n    for i in range(m):\n        tmp = heappop(l)\n        heappush(l, l1[i])\n    print(sum(l))", "from heapq import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    (*a,) = R()\n    heapify(a)\n    for x in R():\n        heapreplace(a, x)\n    print(sum(a))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [int(num) for num in input().split()]\n    a += [int(num) for num in input().split()]\n    sorted_lst = sorted(a[:-1]) + [a[-1]]\n    sorted_lst.reverse()\n    ans = 0\n    for i in range(n):\n        ans += sorted_lst[i]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.extend(b)\n    ans = a[:n + m - 1]\n    ans.sort()\n    ans.append(a[n + m - 1])\n    ans.reverse()\n    print(sum(ans[:n]))", "nos = int(input())\nfor i in range(nos):\n    sums = 0\n    (n, m) = map(int, input().split())\n    l1 = [int(x) for x in input().split()]\n    l2 = [int(x) for x in input().split()]\n    l3 = l1 + l2[:len(l2) - 1]\n    l3.sort(reverse=True)\n    for i in range(n - 1):\n        sums += l3[i]\n    sums += l2[len(l2) - 1]\n    print(sums)", "import heapq\nk = int(input())\nfor _ in range(k):\n    (n, m) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    ar2 = list(map(int, input().split()))\n    heapq.heapify(ar)\n    for i in range(m):\n        heapq.heappop(ar)\n        heapq.heappush(ar, ar2[i])\n    print(sum(ar))", "for _ in range(int(input())):\n    [n, m] = list(map(int, input().split(' ')))\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    a.sort()\n    a = a[1:]\n    k = b[-1]\n    a += b[:-1]\n    a.sort(reverse=True)\n    print(sum(a[:n - 1]) + k)", "from heapq import heapify, heappush, heappop\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    boards = list(map(int, input().split()))\n    op = list(map(int, input().split()))\n    heapify(boards)\n    for i in op:\n        heappop(boards)\n        heappush(boards, i)\n    print(sum(boards))", "import heapq\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr1 = list(map(int, input().split()))\n    arr2 = list(map(int, input().split()))\n    heapq.heapify(arr1)\n    for num in arr2:\n        heapq.heapreplace(arr1, num)\n    print(sum(arr1))", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    last = l2[-1]\n    l1 = sorted(l1, reverse=True)\n    ans = 0\n    if n > m:\n        l2 = sorted(l2[0:m - 1] + l1[:], reverse=True)\n        ans = sum(l2[:n - 1]) + last\n    else:\n        l2 = sorted(l2[0:m - 1] + l1[:], reverse=True)\n        ans = sum(l2[0:n - 1]) + last\n    print(ans)", "t = int(input())\nfor p in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    count = sum(a) + b[-1] - a[0]\n    b = b[:-1]\n    b.sort(reverse=True)\n    i = 1\n    while i != m and i != n:\n        if a[i] < b[i - 1]:\n            count = count - a[i] + b[i - 1]\n        else:\n            break\n        i += 1\n    print(count)", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\nfor _ in range(IN()):\n    (n, r) = IP()\n    (a, b) = (I(), I())\n    m = b[-1]\n    b.remove(b[-1])\n    l = a + b\n    l.sort(reverse=True)\n    l.insert(0, m)\n    print(sum(l[:n]))", "import sys\nsys.setrecursionlimit(10 ** 7)\nmod = 10 ** 9 + 7\n\ndef readInt():\n    return int(input())\n\ndef readIntList():\n    return list(map(int, input().split()))\n\ndef readStringList():\n    return list(input())\n\ndef readStringListWithSpace():\n    return list(input().split())\n\ndef readString():\n    return input()\n\ndef execute():\n    import heapq\n    for _ in range(readInt()):\n        (n, m) = readIntList()\n        arr = readIntList()\n        q = readIntList()\n        heapq.heapify(arr)\n        for i in q:\n            heapq.heappop(arr)\n            heapq.heappush(arr, i)\n        print(sum(arr))\nexecute()", "import os\nimport math\nimport collections\nimport bisect\nimport functools\nimport itertools\nimport heapq\n\ndef solve(a, b, n, m):\n    heapq.heapify(a)\n    for x in b:\n        heapq.heappop(a)\n        heapq.heappush(a, x)\n    return sum(a)\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(solve(a, b, n, m))", "import heapq\nfor tes in range(int(input())):\n    (n, p) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    heapq.heapify(A)\n    for b in B:\n        heapq.heappop(A)\n        heapq.heappush(A, b)\n    print(sum(A))", "import heapq\nfor _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    heapq.heapify(a)\n    for i in b:\n        heapq.heappop(a)\n        heapq.heappush(a, i)\n    print(sum(a))", "for i in range(0, int(input())):\n    (n, m) = [int(i) for i in input().split()]\n    q = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    q += a\n    q.sort()\n    q = q[m:]\n    if not a[-1] in q:\n        q[0] = a[-1]\n    print(sum(q))", "import heapq\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    heapq.heapify(a)\n    for i in b:\n        heapq.heapreplace(a, i)\n    print(sum(a))", "import heapq\nt = int(input())\nfor z in range(t):\n    (n, m) = list(map(int, input().split()))[:2]\n    a = list(map(int, input().split()))[:n]\n    b = list(map(int, input().split()))[:m]\n    heapq.heapify(a)\n    for i in b:\n        heapq.heappop(a)\n        heapq.heappush(a, i)\n    print(sum(a))", "import heapq\nfrom bisect import bisect_left\nfor q in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    lis = []\n    for item in arr:\n        heapq.heappush(lis, item)\n    for i in range(m):\n        heapq.heappop(lis)\n        heapq.heappush(lis, b[i])\n    print(sum(lis))", "from heapq import heapify, heappush, heappop\n\ndef max_sum(a, b, n, m):\n    heapify(a)\n    for item in b:\n        heappop(a)\n        heappush(a, item)\n    sum = 0\n    for item in a:\n        sum += item\n    return sum\nt = int(input())\nwhile t:\n    (n, m) = [int(item) for item in input().split(' ')]\n    a = [int(item) for item in input().split(' ')]\n    b = [int(item) for item in input().split(' ')]\n    print(max_sum(a, b, n, m))\n    t -= 1", "import heapq\n\ndef operation(arrayA, arrayB, a, b):\n    heapq.heapify(arrayA)\n    for i in range(int(b)):\n        top = heapq.heappop(arrayA)\n        heapq.heappush(arrayA, arrayB[i])\n        arrayB[i] = top\n    return sum(arrayA)\nnumOfInputs = int(input())\nfor i in range(numOfInputs):\n    (a, b) = input().split()\n    arrayA = [int(x) for x in input().split()]\n    arrayB = [int(x) for x in input().split()]\n    print(operation(arrayA, arrayB, a, b))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    mm = l2[-1]\n    l2.remove(l2[-1])\n    l = l1 + l2\n    l.sort(reverse=True)\n    l.insert(0, mm)\n    print(sum(l[:n]))", "test_cases = int(input())\nfor i in range(test_cases):\n    (n, m) = map(int, input().split())\n    a_list = input().split()\n    b_list = input().split()\n    ai_list = [int(item) for item in a_list]\n    bj_list = [int(item) for item in b_list]\n    c_list = ai_list + bj_list[0:m - 1]\n    c_list.sort()\n    c_list.reverse()\n    c_list = [bj_list[m - 1]] + c_list\n    print(sum(c_list[0:n]))", "def max_sum(n, m, a, b):\n    d = b\n    b = b[:-1]\n    c = a + b\n    c = sorted(c, reverse=True)\n    c = c[:n - 1]\n    sm = sum(c) + d[-1]\n    return sm\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(max_sum(n, m, a, b))", "from heapq import heappush, heappop\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    replace = list(map(int, input().split()))\n    for va in replace:\n        heappop(arr)\n        heappush(arr, va)\n    print(sum(arr))", "import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nfrom heapq import *\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nt = inp()\nfor i in range(t):\n    (n, m) = mp()\n    a = li()\n    b = li()\n    k = b.pop()\n    a.sort()\n    b.sort(reverse=True)\n    a[0] = k\n    j = 0\n    for i in range(1, len(a)):\n        if j < len(b) and a[i] < b[j]:\n            a[i] = b[j]\n            j += 1\n    print(sum(a))", "import heapq\ntests = int(input())\nfor i in range(tests):\n    (n, m) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    changes = list(map(int, input().split()))\n    heapq.heapify(nums)\n    for j in range(m):\n        heapq.heappop(nums)\n        heapq.heappush(nums, changes[j])\n    print(sum(nums))", "import heapq\nt = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    heapq.heapify(a)\n    for bj in b:\n        heapq.heappop(a)\n        heapq.heappush(a, bj)\n    print(sum(a))", "import sys\nimport collections\nfrom math import ceil, gcd, sqrt, log\nimport bisect\nimport heapq\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    (n, m) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    minHeap = []\n    for i in A:\n        heapq.heappush(minHeap, i)\n    for a in B:\n        heapq.heappop(minHeap)\n        heapq.heappush(minHeap, a)\n    print(sum(minHeap))\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom collections import Counter\nfrom bisect import bisect_left as bl, bisect_right as br\nimport heapq\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nmod = 1000000007\nfor _ in range(int(input())):\n    (n, m) = mul()\n    a = seq()\n    b = seq()\n    heapq.heapify(a)\n    for i in b:\n        heapq.heappop(a)\n        heapq.heappush(a, i)\n    print(sum(a))", "from heapq import *\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    h = []\n    for i in l:\n        heappush(h, i)\n    l = list(map(int, input().split()))\n    for i in l:\n        x = heappop(h)\n        heappush(h, i)\n    print(sum(h))", "from heapq import heapify, heappop, heappush\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    heapify(a)\n    for i in range(m):\n        heappop(a)\n        heappush(a, b[i])\n    print(sum(a))", "from heapq import *\ntests = int(input())\nfor _ in range(tests):\n    (n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    heapify(a)\n    b.reverse()\n    while b:\n        ai = heappop(a)\n        heappush(a, b.pop())\n    print(sum(a))", "in_il = lambda : list(map(int, input().split()))\nin_sl = lambda : input().split()\nin_i = lambda : int(input())\nMAX_INT = float('inf')\nimport heapq\n\ndef solve():\n    (n, m) = in_il()\n    a = in_il()\n    b = in_il()\n    heapq.heapify(a)\n    for num in b:\n        heapq.heappop(a)\n        heapq.heappush(a, num)\n    print(sum(a))\nfor _ in range(in_i()):\n    solve()", "import heapq\n\ndef solve(lst1, lst2):\n    heapq.heapify(lst1)\n    for i in range(len(lst2)):\n        x = lst2[i]\n        y = heapq.heappop(lst1)\n        heapq.heappush(lst1, x)\n    return sum(lst1)\nfor _ in range(int(input())):\n    input()\n    lst1 = list(map(int, input().split()))\n    lst2 = list(map(int, input().split()))\n    print(solve(lst1, lst2))", "import heapq\nt = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    heapq.heapify(a)\n    for j in b:\n        x = heapq.heappop(a)\n        heapq.heappush(a, j)\n    print(sum(a))", "from heapq import *\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    h = []\n    for ele in a:\n        heappush(h, ele)\n    for ele in b:\n        _ = heappop(h)\n        heappush(h, ele)\n    print(sum(h))", "import heapq\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    heapq.heapify(a)\n    for i in range(m):\n        tmp = heapq.heappop(a)\n        heapq.heappush(a, b[i])\n    print(sum(a))", "from heapq import heappush, heappop, heapify\nnum = int(input())\nfor _ in range(num):\n    (n, m) = map(int, input().split())\n    aa = sorted(list(map(int, input().split())))\n    bb = list(map(int, input().split()))\n    heapify(aa)\n    for i in bb:\n        heappop(aa)\n        heappush(aa, i)\n    print(sum(aa))", "import heapq\nimport math\neps = 10 ** (-9)\n\ndef solve():\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    a = input().split()\n    b = input().split()\n    a = [int(x) for x in a]\n    b = [int(x) for x in b]\n    heapq.heapify(a)\n    for x in b:\n        heapq.heappop(a)\n        heapq.heappush(a, x)\n    print(sum(a))\n    return\nt = int(input())\nfor _ in range(t):\n    solve()", "import heapq\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    heapq.heapify(a)\n    for ele in b:\n        n = heapq.heappop(a)\n        heapq.heappush(a, ele)\n    print(sum(a))", "import heapq\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    brr = list(map(int, input().split()))\n    hp = []\n    for e in arr:\n        heapq.heappush(hp, e)\n    for e in brr:\n        a = heapq.heappop(hp)\n        heapq.heappush(hp, e)\n    print(sum(hp))", "import heapq\ntest = int(input())\nfor _ in range(test):\n    (n, m) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    heapq.heapify(arr)\n    change = [int(x) for x in input().split()]\n    for i in change:\n        heapq.heappop(arr)\n        heapq.heappush(arr, i)\n    print(sum(arr))", "t = int(input())\nimport heapq\nfor i in range(t):\n    (n, m) = (int(x) for x in input().split(' '))\n    a_n = [int(x) for x in input().split(' ')]\n    a_m = [int(x) for x in input().split(' ')]\n    heapq.heapify(a_n)\n    for el in a_m:\n        heapq.heapreplace(a_n, el)\n    print(sum(a_n))", "import math\nimport sys\nfrom collections import Counter, defaultdict, deque\nimport heapq\n\ndef solve():\n    (n, m) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    brr = list(map(int, input().split()))\n    heap = []\n    heapq.heapify(heap)\n    for i in range(0, n):\n        heapq.heappush(heap, arr[i])\n    for j in range(m):\n        minValue = heapq.heappop(heap)\n        heapq.heappush(heap, brr[j])\n    maxSum = 0\n    for i in heap:\n        maxSum += i\n    return maxSum\nt = int(input())\nwhile t:\n    print(solve())\n    t -= 1", "from typing import List\nfrom bisect import *\nfrom collections import *\nfrom functools import *\nfrom itertools import *\nfrom math import *\nfrom queue import PriorityQueue\nINF = 2 ** 64 - 1\nMOD = 10 ** 9 + 7\nmi = lambda : map(int, input().split())\nli = lambda : list(mi())\n\ndef main2(n, m, a, b):\n    stack = PriorityQueue()\n    for v in a:\n        stack.put(v)\n    for i in range(m):\n        curr = stack.get()\n        stack.put(b[i])\n    ans = 0\n    while stack.empty() == False:\n        ans += stack.get()\n    print(ans)\n    return\n\ndef main(n, m, a, b):\n    all = []\n    for i in range(n):\n        all.append(a[i])\n    for i in range(m - 1):\n        all.append(b[i])\n    all.sort(reverse=True)\n    ans = b[m - 1]\n    for i in range(n - 1):\n        ans += all[i]\n    print(ans)\n    return\ncaseNum = int(input())\nfor i in range(0, caseNum):\n    (n, m) = li()\n    a = li()\n    b = li()\n    main(n, m, a, b)", "import sys, os\nif os.getlogin() == 'arun':\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nfrom collections import defaultdict\nfrom math import comb, sqrt, floor\nimport heapq\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    lt = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    heapq.heapify(lt)\n    for i in range(m):\n        heapq.heappop(lt)\n        heapq.heappush(lt, l2[i])\n    k = sum(list(lt))\n    print(k)", "from heapq import heapify, heappop, heappush\n\ndef solution():\n    (n, m) = (int(num) for num in input().split())\n    a = [int(num) for num in input().split()]\n    b = [int(num) for num in input().split()]\n    heapify(a)\n    for num in b:\n        heappop(a)\n        heappush(a, num)\n    print(sum(a))\n\ndef main():\n    t = int(input())\n    while t:\n        solution()\n        t -= 1\nmain()", "import heapq\nn = int(input())\n\ndef solve(n, m, a, b):\n    heapq.heapify(a)\n    for item in b:\n        heapq.heappop(a)\n        heapq.heappush(a, item)\n    return sum(a)\nfor _ in range(n):\n    (n, m) = [int(_) for _ in input().split()]\n    a = [int(_) for _ in input().split()]\n    b = [int(_) for _ in input().split()]\n    print(solve(n, m, a, b))", "import sys, os\nif os.getlogin() == 'arun':\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nfrom collections import defaultdict\nfrom math import comb, sqrt, floor\nimport heapq\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    lt = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    heapq.heapify(lt)\n    for i in range(m):\n        heapq.heapreplace(lt, l2[i])\n    k = sum(list(lt))\n    print(k)", "import heapq\nt = int(input())\nfor x in range(t):\n    [n, m] = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    heapq.heapify(a)\n    for i in b:\n        heapq.heappop(a)\n        heapq.heappush(a, i)\n    print(sum(a))", "def helper(arr, arr2):\n    arr = sorted(arr)\n    import heapq\n    minH = []\n    ans = sum(arr)\n    for num in arr:\n        heapq.heappush(minH, num)\n    for i in range(len(arr2)):\n        small = heapq.heappop(minH)\n        ans += arr2[i] - small\n        heapq.heappush(minH, arr2[i])\n    return ans\nfor i in range(int(input())):\n    lst = list(map(int, input().split(' ')))\n    arr = list(map(int, input().split(' ')))\n    arr2 = list(map(int, input().split(' ')))\n    print(helper(arr, arr2))", "def helper(arr, arr2):\n    arr = sorted(arr)\n    import heapq\n    minH = []\n    ans = sum(arr)\n    for num in arr:\n        heapq.heappush(minH, num)\n    for i in range(len(arr2)):\n        small = heapq.heappop(minH)\n        ans += arr2[i] - small\n        heapq.heappush(minH, arr2[i])\n    return ans\nfor i in range(int(input())):\n    lst = list(map(int, input().split(' ')))\n    arr = list(map(int, input().split(' ')))\n    arr2 = list(map(int, input().split(' ')))\n    print(helper(arr, arr2))", "import heapq as hq\nfor _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split(' ')]\n    arr = [int(x) for x in input().split(' ')]\n    brr = [int(x) for x in input().split(' ')]\n    heap = []\n    for x in arr:\n        hq.heappush(heap, x)\n    for x in brr:\n        hq.heappop(heap)\n        hq.heappush(heap, x)\n    print(sum(heap))", "import heapq\nfrom collections import defaultdict, Counter\nimport bisect\ngraph = defaultdict(set)\n\ndef listinput():\n    return list(map(int, input().split()))\n\ndef solve(a, b):\n    res = 0\n    heapq.heapify(a)\n    heapq.heappop(a)\n    heapq.heappush(a, b[0])\n    res = sum(a)\n    sum_ = res\n    for i in range(1, len(b)):\n        minimum = heapq.heappop(a)\n        sum_ = sum_ + b[i] - minimum\n        res = max(res, sum_)\n        heapq.heappush(a, b[i])\n    return sum(a)\nfor _ in range(int(input())):\n    (n, m) = listinput()\n    a = listinput()\n    b = listinput()\n    print(solve(a, b))", "import heapq\n\ndef heappush(heap, item):\n    return heapq.heappush(heap, item)\n\ndef heappop(heap):\n    return heapq.heappop(heap)\nt = int(input())\nwhile t:\n    (n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    mm = []\n    heapq.heapify(mm)\n    for i in a:\n        heappush(mm, i)\n    for i in b:\n        heappop(mm)\n        heappush(mm, i)\n    print(sum(mm))\n    t = t - 1", "import heapq\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    heapq.heapify(a)\n    s = sum(a)\n    for i in range(m):\n        s -= heapq.heappop(a)\n        heapq.heappush(a, b[i])\n        s += b[i]\n    print(s)", "import heapq\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    heapq.heapify(A)\n    ret = sum(A)\n    for i in range(m):\n        temp = heapq.heappop(A)\n        tt = B[i] - temp\n        ret += tt\n        heapq.heappush(A, B[i])\n    print(ret)\n    t -= 1", "import heapq as hq\nt = int(input())\nfor tests in range(t):\n    (n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    pq = [i for i in a]\n    hq.heapify(pq)\n    for i in b:\n        cur = hq.heappop(pq)\n        hq.heappush(pq, i)\n    res = 0\n    while len(pq):\n        res += hq.heappop(pq)\n    print(res)", "import math\nimport heapq\nfrom collections import *\nimport math\n\ndef solve():\n    (n, m) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    pq = []\n    for i in range(n):\n        heapq.heappush(pq, a[i])\n    for i in range(m):\n        heapq.heappop(pq)\n        heapq.heappush(pq, b[i])\n    print(sum(pq))\nt = int(input())\nfor _ in range(t):\n    solve()", "import heapq\niter = int(input())\nfor _ in range(iter):\n    (n, m) = list(map(int, input().split(' ')))\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    s = sum(a)\n    heapq.heapify(a)\n    for i in range(m):\n        s -= heapq.heappop(a)\n        s += b[i]\n        heapq.heappush(a, b[i])\n    print(s)", "import bisect\n\ndef insert(list, n):\n    bisect.insort(list, n)\n    return list\nt = int(input())\nfor z in range(t):\n    nm = input().split(' ')\n    n = int(nm[0])\n    m = int(nm[1])\n    data1 = input().split(' ')\n    data2 = input().split(' ')\n    s = 0\n    for i in range(n):\n        data1[i] = int(data1[i])\n        s += data1[i]\n    for i in range(m):\n        data2[i] = int(data2[i])\n    data1.sort()\n    for i in range(m):\n        s -= data1[0]\n        data1.pop(0)\n        s += data2[i]\n        data1 = insert(data1, data2[i])\n    print(s)", "for _ in range(int(input())):\n    (a, b) = [int(x) for x in input().split()]\n    (ar1, ar2) = (list(map(int, input().split())), list(map(int, input().split())))\n    for i in ar2:\n        ar1.sort()\n        ar1 = ar1[1:]\n        ar1.append(i)\n    print(sum(ar1))", "for _ in range(int(input())):\n    (n, m) = [int(_) for _ in input().split()]\n    X = sorted([int(_) for _ in input().split()])\n    Y = [int(_) for _ in input().split()]\n    for _ in Y:\n        X.pop(0)\n        X.append(_)\n        X.sort()\n    print(sum(X))", "for i in range(int(input())):\n    (a, b) = map(int, input().split())\n    la = list(map(int, input().split()))\n    bl = list(map(int, input().split()))\n    while len(bl):\n        la.sort()\n        la.pop(0)\n        la.append(bl[0])\n        bl.pop(0)\n    print(sum(la))", "import sys\nsys.setrecursionlimit(10 ** 9)\nfor i in range(int(input())):\n    L1 = list(map(int, input().split()))\n    L2 = list(map(int, input().split()))\n    L3 = list(map(int, input().split()))\n    for j in range(L1[1]):\n        L2.sort()\n        L2 = L2[1:]\n        L2 += [L3[j]]\n    print(sum(L2))", "t = int(input())\nfor _ in range(t):\n    input()\n    nlst = list(map(int, input().split()))\n    mlst = list(map(int, input().split()))\n    for x in mlst:\n        nlst[nlst.index(min(nlst))] = x\n    print(sum(nlst))", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, m) = map(int, inp().split())\n    a = list(map(int, inp().split()))\n    b = list(map(int, inp().split()))\n    for it in range(len(b)):\n        mn = min(a)\n        pos = a.index(mn)\n        a[pos] = b[it]\n    ans = sum(a)\n    print(ans)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for j in range(m):\n        mini = min(a)\n        el = a.index(mini)\n        a[el] = b[j]\n    print(sum(a))", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    (*a,) = R()\n    for x in R():\n        a[a.index(min(a))] = x\n    print(sum(a))", "import sys\nn = int(sys.stdin.readline())\nfor _ in range(n):\n    (n, m) = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    ans = 0\n    for i in b:\n        a[a.index(min(a))] = i\n    print(sum(a))", "import sys\n\ndef comp(x, y):\n    return x <= y\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, m) = map(int, inp().split())\n    a = list(map(int, inp().split()))\n    b = list(map(int, inp().split()))\n    for x in b:\n        mn = min(a)\n        pos = a.index(mn)\n        a[pos] = x\n    print(sum(a))\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "import sys\n\ndef solve():\n    (n, m) = map(int, sys.stdin.readline().split())\n    va = sorted(map(int, sys.stdin.readline().split()))\n    vb = map(int, sys.stdin.readline().split())\n    for i in vb:\n        va[va.index(min(va))] = i\n    print(sum(va))\n\ndef main():\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        solve()\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for el in b:\n        i = a.index(min(a))\n        a[i] = el\n    print(sum(a))", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, m) = map(int, inp().split())\n    a = list(map(int, inp().split()))\n    b = list(map(int, inp().split()))\n    for v in b:\n        x = min(a)\n        pos = a.index(x)\n        a[pos] = v\n    print(sum(a))\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for j in range(m):\n        a[a.index(min(a))] = b[j]\n    print(sum(a))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for i in list(map(int, input().split())):\n        a[a.index(min(a))] = i\n    print(sum(a))"]