["def solve(n, a, s):\n    ar = [0] * n\n    if s == ['1'] * n or s == ['0'] * n:\n        a = list(map(str, a))\n        return ' '.join(a)\n    for i in range(n):\n        ar[a[i] - 1] = i\n    c = 1\n    ans = [0] * n\n    for i in range(n):\n        if s[ar[i]] == '0':\n            ans[ar[i]] = c\n            c += 1\n    for i in range(n):\n        if s[ar[i]] == '1':\n            ans[ar[i]] = c\n            c += 1\n    ans = list(map(str, ans))\n    return ' '.join(ans)\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = list(input())\n    print(solve(n, a, s))", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    n = int(inp())\n    p = list(map(int, inp().split()))\n    pi = [None] * (n + 1)\n    for i in range(n):\n        pi[p[i]] = i\n    s = inp()\n    ans = [None] * n\n    c = [0, 0]\n    for i in range(1, n + 1):\n        x = pi[i]\n        y = int(s[x])\n        ans[x] = c[y]\n        c[y] += 1\n    o = [1, 1 + c[0]]\n    for i in range(1, n + 1):\n        x = pi[i]\n        y = int(s[x])\n        ans[x] += o[y]\n    print(' '.join(map(str, ans)))\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "import sys\n\ndef berland_music(n, p, s):\n    ones = []\n    zeros = []\n    for i in range(n):\n        if s[i] == '1':\n            ones += [i]\n        else:\n            zeros += [i]\n    zero_weights = list(range(1, len(zeros) + 1))\n    one_weights = list(range(len(zeros) + 1, n + 1))\n    ones.sort(key=lambda x: -p[x])\n    zeros.sort(key=lambda x: -p[x])\n    output = [None] * n\n    for z in zeros:\n        output[z] = zero_weights.pop()\n    for o in ones:\n        output[o] = one_weights.pop()\n    return ' '.join(map(str, output))\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = input()\n    sys.stdout.write(f'{berland_music(n, p, s)}\\n')", "import sys\n\ndef berland_music(n, p, s):\n    ones = []\n    zeros = []\n    for i in range(n):\n        if s[i] == '1':\n            ones += [i]\n        else:\n            zeros += [i]\n    zero_weights = list(range(1, len(zeros) + 1))\n    one_weights = list(range(len(zeros) + 1, n + 1))\n    ones.sort(key=lambda x: -p[x])\n    zeros.sort(key=lambda x: -p[x])\n    output = [None] * n\n    for z in zeros:\n        output[z] = zero_weights.pop()\n    for o in ones:\n        output[o] = one_weights.pop()\n    return ' '.join(map(str, output))\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = input()\n    sys.stdout.write(f'{berland_music(n, p, s)}\\n')", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    s = input()\n    cnt = s.count('0')\n    lmemo = [0 for _ in range(cnt)]\n    umemo = [0 for _ in range(n - cnt)]\n    for i in range(n):\n        if s[i] == '0' and a[i] <= cnt:\n            lmemo[a[i] - 1] = 1\n        if s[i] == '1' and a[i] > cnt:\n            umemo[a[i] - cnt - 1] = 1\n    lcnt = 0\n    ucnt = 0\n    for i in range(n):\n        if s[i] == '0' and a[i] > cnt:\n            while True:\n                if lmemo[lcnt] == 1:\n                    lcnt += 1\n                else:\n                    break\n            a[i] = lcnt + 1\n            lcnt += 1\n        if s[i] == '1' and a[i] <= cnt:\n            while True:\n                if umemo[ucnt] == 1:\n                    ucnt += 1\n                else:\n                    break\n            a[i] = ucnt + 1 + cnt\n            ucnt += 1\n    print(' '.join(map(str, a)))", "def solution():\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    l = input()\n    d = {p[x]: l[x] for x in range(n)}\n    count = 2\n    for i in range(n):\n        if d[i + 1] == '0':\n            d[i + 1] = count\n            count += 1\n    for i in range(n):\n        if d[i + 1] == '1':\n            d[i + 1] = count\n            count += 1\n    a = []\n    for i in p:\n        a += [str(d[i] - 1)]\n    print(' '.join(a))\ntry:\n    import sys\n    import os\n    if os.path.exists('2.in.txt'):\n        sys.stdin = open('2.in.txt', 'r')\n        sys.stdout = open('2.out.txt', 'w')\nexcept:\n    pass\nt = int(input())\nwhile t:\n    solution()\n    t -= 1", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    P = [int(d) for d in input().split()]\n    s = [int(d) for d in list(input())]\n    ct = sum(s)\n    Q = [0] * n\n    used = [0] * (n + 1)\n    for a in range(n):\n        if s[a] == 1 and P[a] > n - ct:\n            Q[a] = P[a]\n            used[P[a]] = 1\n        elif s[a] == 0 and P[a] <= n - ct:\n            Q[a] = P[a]\n            used[P[a]] = 1\n    hit = n - ct + 1\n    lit = n - ct\n    while hit <= n and used[hit] == 1:\n        hit += 1\n    while lit > 0 and used[lit] == 1:\n        lit -= 1\n    for a in range(n):\n        if Q[a] != 0:\n            continue\n        if s[a] == 1:\n            Q[a] = hit\n            hit += 1\n            while hit <= n and used[hit] == 1:\n                hit += 1\n        elif s[a] == 0:\n            Q[a] = lit\n            lit -= 1\n            while lit > 0 and used[lit] == 1:\n                lit -= 1\n    print(' '.join([str(d) for d in Q]))", "def main():\n    tests = int(input())\n    for i in range(tests):\n        n = int(input())\n        dict_p = {}\n        p = [int(i) for i in input().split()]\n        b = [int(i) for i in list(input())]\n        for i in p:\n            dict_p[i] = -1\n        b1 = []\n        b2 = []\n        for i in range(n):\n            if b[i] == 0:\n                b1.append(p[i])\n            else:\n                b2.append(p[i])\n        b1.sort()\n        b2.sort()\n        p.sort()\n        b3 = b1 + b2\n        for i in range(n):\n            dict_p[b3[i]] = p[i]\n        list_out = list(dict_p.values())\n        list_out = [str(i) for i in list_out]\n        print(' '.join(list_out))\nmain()", "N = int(200000.0)\nt = int(input())\nx = [0 for _ in range(N)]\nx2 = [0 for _ in range(N)]\ns2 = [0 for _ in range(N)]\nq = [0 for _ in range(N)]\nfor i in range(t):\n    n = int(input())\n    p = [int(x) - 1 for x in input().split(' ')]\n    s = input()\n    for i in range(n):\n        x[p[i]] = i\n        s2[p[i]] = s[i]\n    j = 0\n    for i in range(n):\n        if s2[i] == '0':\n            x2[j] = x[i]\n            j += 1\n    for i in range(n):\n        if s2[i] == '1':\n            x2[j] = x[i]\n            j += 1\n    for i in range(n):\n        q[x2[i]] = i\n    print(' '.join([str(a + 1) for a in q[:n]]))", "for _ in range(int(input())):\n    n = int(input())\n    p = (*map(int, input().split()),)\n    s = input()\n    good = []\n    bad = []\n    for i in range(n):\n        if s[i] == '1':\n            good.append(p[i])\n        else:\n            bad.append(p[i])\n    d = {rating: index for (index, rating) in enumerate(sorted(bad), 1)}\n    d.update({rating: index for (index, rating) in enumerate(sorted(good), len(bad) + 1)})\n    print(' '.join((str(d[rating]) for rating in p)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = input()\n    bad = []\n    good = []\n    for i in range(len(s)):\n        if s[i] == '0':\n            bad.append(p[i])\n        else:\n            good.append(p[i])\n    bad = list(sorted(bad))\n    good = list(sorted(good))\n    dic = {}\n    start = 1\n    for i in bad + good:\n        dic[i] = start\n        start += 1\n    ans = []\n    for i in p:\n        ans.append(str(dic[i]))\n    print(' '.join(ans))", "num_cases = int(input())\nfor i in range(num_cases):\n    num_songs = int(input())\n    predicted_ratings = list(map(int, input().split()))\n    like_dislike_string = input()\n    initial_positions_dict = {}\n    dislike_list = []\n    like_list = []\n    for j in range(num_songs):\n        if like_dislike_string[j] == '0':\n            dislike_list.append(predicted_ratings[j])\n        else:\n            like_list.append(predicted_ratings[j])\n        initial_positions_dict[predicted_ratings[j]] = j\n    dislike_list.sort()\n    like_list.sort()\n    predicted_ratings_sorted = dislike_list + like_list\n    final_predict_list = [0] * num_songs\n    new_predict = 1\n    for value in predicted_ratings_sorted:\n        final_predict_list[initial_positions_dict[value]] = new_predict\n        new_predict += 1\n    print(' '.join(list(map(str, final_predict_list))))", "for case in range(int(input())):\n    N = int(input())\n    L = list(map(int, input().split()))\n    L2 = list(map(int, input()))\n    likes = N - sum(L2) + 1\n    cur = 1\n    index = {L[x]: x for x in range(N)}\n    ans = [0] * N\n    for x in range(1, N + 1):\n        i = index[x]\n        if L2[i] == 0:\n            ans[i] = cur\n            cur += 1\n        else:\n            ans[i] = likes\n            likes += 1\n    print(' '.join(map(str, ans)))", "kl = int(input())\nfor kkl in range(kl):\n    n = int(input())\n    sp = [int(i) for i in input().split()]\n    st = input()\n    k0 = st.count('0')\n    sp0 = []\n    sp1 = []\n    for i in range(n):\n        if st[i] == '0' and sp[i] > k0:\n            sp0.append(i)\n        if st[i] == '1' and sp[i] <= k0:\n            sp1.append(i)\n    for i in range(len(sp0)):\n        (sp[sp0[i]], sp[sp1[i]]) = (sp[sp1[i]], sp[sp0[i]])\n    print(*sp)", "t = int(input())\nresults = []\nfor i in range(t):\n    n = int(input())\n    ratings = [int(x) for x in input().split()]\n    s = input()\n    k = s.count('0')\n    rateStore = {'0': [], '1': []}\n    posStore = {'0': [], '1': []}\n    for j in range(n):\n        if s[j] == '0':\n            if ratings[j] > k:\n                if len(rateStore['1']) != 0:\n                    ratings[posStore['0'].pop()] = ratings[j]\n                    ratings[j] = rateStore['1'].pop()\n                else:\n                    rateStore['0'].append(ratings[j])\n                    posStore['1'].append(j)\n        elif ratings[j] <= k:\n            if len(rateStore['0']) != 0:\n                ratings[posStore['1'].pop()] = ratings[j]\n                ratings[j] = rateStore['0'].pop()\n            else:\n                rateStore['1'].append(ratings[j])\n                posStore['0'].append(j)\n    results.append(ratings)\nfor result in results:\n    for i in range(len(result)):\n        print(result[i], end=' ')\n    print('')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = str(input())\n    d = {}\n    for i in range(n):\n        d[p[i]] = i\n    selected = []\n    rej = []\n    for i in range(n):\n        if s[i] == '1':\n            selected.append(p[i])\n        else:\n            rej.append(p[i])\n    ans = [-1 for i in range(n)]\n    num = n\n    selected = sorted(selected, reverse=True)\n    for x in selected:\n        ans[d[x]] = num\n        num -= 1\n    num = 1\n    rej = sorted(rej)\n    for x in rej:\n        ans[d[x]] = num\n        num += 1\n    print(' '.join(map(str, ans)))", "from dis import dis\ntest = int(input())\nfor i in range(test):\n    songs = int(input())\n    firstrat = [int(x) for x in input().split()]\n    liking = input()\n    dislike = 0\n    decrease = []\n    increase = []\n    for j in range(songs):\n        if liking[j] == '0':\n            dislike += 1\n    for j in range(songs):\n        if firstrat[j] > dislike and liking[j] == '0':\n            decrease.append(j)\n        elif liking[j] == '1' and firstrat[j] <= dislike:\n            increase.append(j)\n    moves = len(decrease)\n    for k in range(moves):\n        inl = decrease[k]\n        inh = increase[k]\n        stable = firstrat[inl]\n        firstrat[inl] = firstrat[inh]\n        firstrat[inh] = stable\n    print(*firstrat)", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = input()\n    (z, o) = (dict(), dict())\n    q = 1\n    for i in range(n):\n        if s[i] == '0':\n            z[p[i]] = i\n        else:\n            o[p[i]] = i\n    for i in sorted(z):\n        p[z[i]] = q\n        q += 1\n    for i in sorted(o):\n        p[o[i]] = q\n        q += 1\n    print(' '.join(map(str, p)))", "def find(n, p, s):\n    low = []\n    high = []\n    for i in range(n):\n        if int(s[i]) == 0:\n            low.append(p[i])\n        else:\n            high.append(p[i])\n    a = len(low)\n    b = len(high)\n    low.sort()\n    high.sort()\n    map = {}\n    for i in range(a):\n        map[low[i]] = i + 1\n    for i in range(b):\n        map[high[i]] = i + a + 1\n    q = []\n    for i in range(n):\n        q.append(str(map[p[i]]))\n    return ' '.join(q)\ncases = int(input())\nfor _ in range(cases):\n    n = int(input())\n    line = input().split()\n    s = input()\n    p = []\n    for elem in line:\n        p.append(int(elem))\n    print(find(n, p, s))", "t = int(input())\nfor t1 in range(t):\n    n = int(input())\n    plist = list(map(int, input().split()))\n    sbev = input()\n    dislike_s = 1\n    like_s = 1\n    dislike_list = []\n    like_list = []\n    for i in range(len(sbev)):\n        if sbev[i] == '0':\n            like_s += 1\n            dislike_list.append(plist[i])\n        else:\n            like_list.append(plist[i])\n    dislike_list = sorted(dislike_list)\n    like_list = sorted(like_list)\n    dislike_index = dict()\n    like_index = dict()\n    answer = []\n    for i in range(len(dislike_list)):\n        dislike_index[dislike_list[i]] = i\n    for i in range(len(like_list)):\n        like_index[like_list[i]] = i\n    for i in range(len(sbev)):\n        if sbev[i] == '1':\n            answer.append(like_index[plist[i]] + like_s)\n        else:\n            answer.append(dislike_index[plist[i]] + dislike_s)\n    print(' '.join((str(x) for x in answer)))", "def func():\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = input()\n    reql = [0 for i in range(n)]\n    d1 = {}\n    d2 = {}\n    for i in range(n):\n        if s[i] == '1':\n            d1[l[i]] = i\n        elif s[i] == '0':\n            d2[l[i]] = i\n    k1 = len(d1)\n    res1 = {key: d1[key] for key in sorted(d1)}\n    res2 = {key: d2[key] for key in sorted(d2)}\n    sidx1 = n - k1 + 1\n    sidx2 = 1\n    for i in res1:\n        reql[res1[i]] = str(sidx1)\n        sidx1 += 1\n    for i in res2:\n        reql[res2[i]] = str(sidx2)\n        sidx2 += 1\n    return ' '.join(reql)\nt = int(input())\nfor i in range(t):\n    print(func())", "import sys\ninput = sys.stdin.readline\n\ndef read_ints():\n    return list(map(int, input().strip().split()))\n\ndef read_strs():\n    s = input().strip()\n    return list(map(int, list(s)))\n\ndef solve(p, s):\n    lower = [rating for (index, rating) in enumerate(p) if s[index] == 0]\n    upper = [rating for (index, rating) in enumerate(p) if s[index] == 1]\n    index_map = {}\n    for (index, rating) in enumerate(p):\n        index_map[rating] = index\n    lower.sort()\n    upper.sort()\n    combined = lower + upper\n    result = [0 for _ in p]\n    for (index, rating) in enumerate(combined):\n        result[index_map[rating]] = index + 1\n    return result\nn = int(input())\nfor i in range(n):\n    m = int(input())\n    p = read_ints()\n    s = read_strs()\n    print(*solve(p, s))", "from collections import Counter, defaultdict, deque\nimport bisect\nfrom sys import stdin, stdout\nfrom itertools import repeat\nimport math\n\ndef inp(force_list=False):\n    re = list(map(int, input().split()))\n    if len(re) == 1 and (not force_list):\n        return re[0]\n    return re\n\ndef inst():\n    return input().strip()\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nMOD = 998244353\n\ndef query(a, b, c):\n    print('! %d %d %d' % (a + 1, b + 1, c + 1))\n    stdout.flush()\n    return inp()\n\ndef solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    cost = sum(a[0:n - 2 * k]) + sum(map(lambda x: a[x + n - 2 * k] // a[x + n - k], range(0, k)))\n    print(cost)\n\ndef my_main():\n    kase = inp()\n    pans = []\n    for _ in range(kase):\n        n = inp()\n        da = inp(True)\n        st = inst()\n        (z, o) = ([], [])\n        for i in range(n):\n            if st[i] == '1':\n                o.append((da[i], i))\n            else:\n                z.append((da[i], i))\n        o.sort()\n        z.sort()\n        ans = [0] * n\n        now = 1\n        for i in range(len(z)):\n            ans[z[i][-1]] = now\n            now += 1\n        for i in range(len(o)):\n            ans[o[i][-1]] = now\n            now += 1\n        pans.append(' '.join(map(str, ans)))\n    print('\\n'.join(pans))\nmy_main()", "import math\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    s = input().strip()\n    id = [0] * (n + 1)\n    for i in range(n):\n        id[a[i]] = i + 1\n    l = []\n    d = []\n    for i in range(n):\n        if s[i] != '0':\n            l.append(a[i])\n        else:\n            d.append(a[i])\n    l.sort()\n    d.sort()\n    res = [0] * (n + 1)\n    c = 1\n    for i in d:\n        res[id[i]] = c\n        c += 1\n    for i in l:\n        res[id[i]] = c\n        c += 1\n    res.pop(0)\n    print(*res)", "from sys import stdin\nn = int(stdin.readline().strip())\nfor i in range(n):\n    sn = int(stdin.readline().strip())\n    pp = [int(x) for x in stdin.readline().split()]\n    likes = [bool(int(x)) for x in stdin.readline().strip()]\n    liked_pp = [pp[i] for i in range(sn) if likes[i]]\n    disliked_pp = [pp[i] for i in range(sn) if not likes[i]]\n    liked_ppd = {p: i for (i, p) in enumerate(sorted(liked_pp))}\n    liked_qq = {p: liked_ppd[p] + len(disliked_pp) + 1 for p in liked_pp}\n    disliked_ppd = {p: i for (i, p) in enumerate(sorted(disliked_pp))}\n    disliked_qq = {p: disliked_ppd[p] + 1 for p in disliked_pp}\n    qq = [liked_qq[p] if p in liked_qq else disliked_qq[p] for p in pp]\n    print(' '.join([str(q) for q in qq]))", "import sys, collections\ninum = lambda : int(input())\nimap = lambda : map(int, input().split())\nilist = lambda : list(map(int, input().split()))\nfor t in range(inum()):\n    (n, arr, w, ar1, ar2) = (inum(), ilist(), input(), list(), list())\n    (cnt, one) = (1, 1)\n    ans = [-cnt for i in range(n)]\n    for i in range(0, n, 1):\n        if w[i] == '0':\n            ar2.append(arr[i])\n        else:\n            ar1.append(arr[i])\n    ar1.sort()\n    ar2.sort()\n    mp = collections.defaultdict(lambda : 0)\n    for i in ar2:\n        mp[i] = cnt\n        cnt += one\n    for i in ar1:\n        mp[i] = cnt\n        cnt += one\n    ans = [str(mp[arr[i]]) for i in range(n)]\n    sys.stdout.write(str(' '.join(ans)) + '\\n')", "for _ in range(int(input())):\n    x = int(input())\n    per = list(map(int, input().split()))\n    string = input()\n    cnt1 = string.count('1')\n    if cnt1 == x:\n        print(*per)\n        continue\n    hash1 = [0] * (x + 1)\n    hash2 = [0] * (x + 1)\n    temp1 = x - cnt1 + 1\n    temp2 = 1\n    for i in range(x):\n        if string[i] == '1':\n            hash1[per[i]] = 1\n        else:\n            hash1[per[i]] = 0\n    for i in range(1, x + 1):\n        if hash1[i] == 0:\n            hash2[i] = temp2\n            temp2 += 1\n        else:\n            hash2[i] = temp1\n            temp1 += 1\n    ans = []\n    for i in per:\n        ans.append(hash2[i])\n    print(*ans)", "t = int(input())\nfor i in range(t):\n    mapper1 = {}\n    mapper2 = {}\n    ans = []\n    n = int(input())\n    rating = input().split()\n    rating = [int(j) for j in rating]\n    for (j, k) in enumerate(rating):\n        mapper1[k] = j\n    ld = list(input())\n    ld = [int(j) for j in ld]\n    a = 1\n    b = ld.count(0) + 1\n    for j in range(1, n + 1):\n        if ld[mapper1[j]] == 0:\n            mapper2[mapper1[j]] = a\n            a += 1\n        else:\n            mapper2[mapper1[j]] = b\n            b += 1\n    for j in range(n):\n        ans.append(mapper2[j])\n    ans = [str(j) for j in ans]\n    print(' '.join(ans))", "def solve():\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = input()\n    arr = [(char, pri, idx) for (char, pri, idx) in zip(s, p, range(n))]\n    arr.sort()\n    result = [0 for _ in range(n)]\n    for i in range(n):\n        result[arr[i][2]] = i + 1\n    print(' '.join(map(str, result)))\nt = int(input())\nfor _ in range(t):\n    solve()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    rate = list(map(int, input().split()))\n    s = list(input().strip())\n    s = [int(s[j]) for j in range(n)]\n    perm = [j + 1 for j in range(n)]\n    ans = [0] * n\n    like = {}\n    dislike = {}\n    for j in range(n):\n        if s[j] == 1:\n            like[rate[j]] = j\n        else:\n            dislike[rate[j]] = j\n    temp = list(dislike.keys())\n    x = len(temp)\n    temp.sort()\n    a = 0\n    for j in temp:\n        ans[dislike[j]] = str(perm[a])\n        a += 1\n    temp = list(like.keys())\n    x = len(temp)\n    temp.sort()\n    for j in temp:\n        ans[like[j]] = str(perm[a])\n        a += 1\n    print(' '.join(ans))", "import sys\n\ndef R():\n    return list(map(int, I().split()))\nI = sys.stdin.readline\nfor _ in range(int(I())):\n    n = int(I())\n    a = R()\n    s = I()\n    d = {}\n    for i in range(n):\n        d[a[i]] = s[i]\n    z = 0\n    y = 1\n    for i in d:\n        if d[i] == '0':\n            z += 1\n    for i in range(n):\n        if d[i + 1] == '0':\n            d[i + 1] = y\n            y += 1\n        else:\n            d[i + 1] = z + 1\n            z += 1\n    for i in d:\n        print(d[i], end=' ')\n    print()", "from collections import Counter\nfrom math import ceil, floor, log, gcd\nimport bisect as bs\nimport sys\ninput = sys.stdin.readline\ninp_lis = lambda : list(map(int, input().split()))\ninp_multi = lambda : map(int, input().split())\ninp_int = lambda : int(input().strip())\nfor _ in range(int(input().strip())):\n    n = inp_int()\n    p = inp_lis()\n    s = input().strip()\n    o = {}\n    z = {}\n    for i in range(n):\n        if s[i] == '0':\n            z[p[i]] = i\n        else:\n            o[p[i]] = i\n    t = len(z)\n    for each in sorted(z.keys(), reverse=True):\n        p[z[each]] = t\n        t -= 1\n    t = len(z) + 1\n    for each in sorted(o.keys()):\n        p[o[each]] = t\n        t += 1\n    print(*p)", "import sys\n\ndef solve(n, nums, s):\n    z = 0\n    zero_list = []\n    ones_list = []\n    for i in range(n):\n        if s[i] == '0':\n            z += 1\n            zero_list.append((nums[i], i))\n        else:\n            ones_list.append((nums[i], i))\n    if z == n or z == 0:\n        return nums\n    zero_list.sort(key=lambda x: x[0], reverse=True)\n    ones_list.sort(key=lambda x: x[0])\n    o = z + 1\n    for (val, idx) in zero_list:\n        nums[idx] = z\n        z -= 1\n    for (val, idx) in ones_list:\n        nums[idx] = o\n        o += 1\n    return nums\nt = int(input())\nwhile t:\n    n = int(input())\n    nums = list(map(int, input().split()))\n    s = input()\n    print(*solve(n, nums, s))\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = input()\n    l = sorted([(s[i], l[i], i) for i in range(n)])\n    w = [0] * n\n    for i in range(n):\n        w[l[i][2]] = str(i + 1)\n    print(' '.join(w))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    p = [int(num) for num in input().split()]\n    s = [int(num) for num in input().strip()]\n    q = []\n    start = 1\n    num_of_zeros = s.count(0)\n    start2 = num_of_zeros + 1\n    were = set((p[ind] for ind in range(n) if s[ind] == 0))\n    were2 = set((p[ind] for ind in range(n) if s[ind] == 1))\n    for ind in range(n):\n        if s[ind] == 0:\n            if p[ind] <= num_of_zeros:\n                q.append(p[ind])\n            else:\n                while start in were:\n                    start += 1\n                q.append(start)\n                were.add(start)\n        elif p[ind] > num_of_zeros:\n            q.append(p[ind])\n        else:\n            while start2 in were2:\n                start2 += 1\n            q.append(start2)\n            were2.add(start2)\n    print(*q)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split(' ')]\n    s = input()\n    arr2 = [1] * n\n    zeros = s.count('0')\n    for i in range(n):\n        arr2[arr[i] - 1] = i\n    ans = [1] * n\n    z = 0\n    o = 0\n    for i in range(n):\n        idx = arr2[i]\n        if s[idx] == '0':\n            ans[idx] = z + 1\n            z += 1\n        else:\n            ans[idx] = o + zeros + 1\n            o += 1\n    print(*ans, sep=' ')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    l = s.count('1')\n    d = n - l\n    m = {}\n    for i in a:\n        m[i] = 0\n    li = []\n    dl = []\n    for i in range(n):\n        if s[i] == '1':\n            li.append(a[i])\n        else:\n            dl.append(a[i])\n    li.sort()\n    dl.sort()\n    c = 1\n    for i in dl:\n        m[i] = c\n        c += 1\n    for i in li:\n        m[i] = c\n        c += 1\n    print(*m.values())", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = [int(x) for x in input().split(' ')]\n    s = input()\n    output = [0 for _ in range(n)]\n    selected = []\n    unselected = []\n    for i in range(n):\n        if s[i] == '1':\n            selected.append((p[i], i))\n        else:\n            unselected.append((p[i], i))\n    selected.sort(reverse=True)\n    unselected.sort(reverse=True)\n    rating = n\n    for (initial_rating, song) in selected:\n        output[song] = str(rating)\n        rating -= 1\n    for (initial_rating, song) in unselected:\n        output[song] = str(rating)\n        rating -= 1\n    print(' '.join(output))", "import math\n\ndef test():\n    n = int(input())\n    res = []\n    ind = []\n    a = list(map(int, input().split()))\n    for i in range(n):\n        res.append(0)\n        ind.append(0)\n    for i in range(n):\n        ind[a[i] - 1] = i\n    s = input()\n    q = b = 0\n    for i in range(n):\n        if s[i] == '1':\n            q += 1\n    b = n - q\n    t1 = 1\n    t2 = b + 1\n    for i in range(n):\n        if s[ind[i]] == '0':\n            res[ind[i]] = t1\n            t1 += 1\n        else:\n            res[ind[i]] = t2\n            t2 += 1\n    for i in range(n):\n        print(res[i], end=' ')\n    print()\nt = int(input())\nfor i in range(t):\n    test()", "t = int(input())\nfor j in range(0, t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = input()\n    f = []\n    q = []\n    d = []\n    for i in range(0, n):\n        q.append(0)\n        d.append(0)\n        f.append('0')\n    for i in range(0, n):\n        q[l[i] - 1] = i + 1\n        if s[i] == '1':\n            f[l[i] - 1] = '1'\n    c = n\n    for i in range(0, n):\n        if f[n - i - 1] == '1':\n            d[q[n - i - 1] - 1] = str(c)\n            c -= 1\n    for i in range(0, n):\n        if f[n - i - 1] == '0':\n            d[q[n - i - 1] - 1] = str(c)\n            c -= 1\n    print(' '.join(d))", "def solve(n, p, s):\n    (cnt0, cnt1) = (0, 0)\n    for i in s:\n        if i == 0:\n            cnt0 += 1\n        else:\n            cnt1 += 1\n    res = [-1 for i in range(n)]\n    x = [i + 1 for i in range(n)]\n    for i in range(n):\n        if s[i] == 1:\n            if p[i] > cnt0:\n                res[i] = p[i]\n                x[p[i] - 1] = -1\n        elif p[i] <= cnt0:\n            res[i] = p[i]\n            x[p[i] - 1] = -1\n    (x1, x0) = (n - 1, 0)\n    for i in range(n):\n        if res[i] == -1:\n            if s[i] == 1:\n                while x[x1] == -1:\n                    x1 -= 1\n                res[i] = x[x1]\n                x[x1] = -1\n            else:\n                while x[x0] == -1:\n                    x0 += 1\n                res[i] = x[x0]\n                x[x0] = -1\n    return res\nfor i in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = [int(i) for i in input()]\n    print(*solve(n, p, s))", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    s = input()\n    tej = [0] * (n + 1)\n    count0 = 0\n    ans = [0]\n    for j in range(0, n):\n        if s[j] == '0':\n            tej[lis[j]] = 0\n            count0 = count0 + 1\n        else:\n            tej[lis[j]] = 1\n        ans.append(0)\n    y = 1\n    z = count0 + 1\n    for g in range(1, n + 1):\n        if tej[g] == 1:\n            ans[g] = z\n            z = z + 1\n        else:\n            ans[g] = y\n            y = y + 1\n    k = ''\n    for c in lis:\n        print(ans[c], end=' ')\n    print('')", "def berlandMusic():\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = input()\n    liked = list()\n    disliked = list()\n    for ind in range(len(s)):\n        if s[ind] == '0':\n            disliked.append(p[ind])\n        else:\n            liked.append(p[ind])\n    disliked.sort()\n    liked.sort(reverse=True)\n    values = dict()\n    for i in range(len(liked)):\n        values[liked[i]] = n - i\n    for i in range(1, len(disliked) + 1):\n        values[disliked[i - 1]] = i\n    for num in p:\n        print(values[num], end=' ')\n    print()\n    return\nt = int(input())\nfor i in range(t):\n    berlandMusic()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    s = input()\n    d = {}\n    for i in range(n):\n        d[lst[i]] = s[i]\n    c = 1\n    for i in range(1, n + 1):\n        if d[i] == '0':\n            d[i] = c\n            c += 1\n    for i in range(1, n + 1):\n        if d[i] == '1':\n            d[i] = c\n            c += 1\n    for i in d:\n        print(d[i], end=' ')\n    print()", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = input()\n    d = defaultdict(list)\n    res = []\n    count0 = s.count('0')\n    (num1, num2) = (1, count0 + 1)\n    sets = set()\n    for i in range(n):\n        if s[i] == '0':\n            if p[i] <= count0:\n                sets.add(p[i])\n        elif p[i] > count0:\n            sets.add(p[i])\n    for i in range(n):\n        if s[i] == '0':\n            if p[i] <= count0:\n                res.append(p[i])\n            else:\n                while True:\n                    if num1 not in sets:\n                        res.append(num1)\n                        num1 += 1\n                        break\n                    num1 += 1\n        elif p[i] > count0:\n            res.append(p[i])\n        else:\n            while True:\n                if num2 not in sets:\n                    res.append(num2)\n                    num2 += 1\n                    break\n                num2 += 1\n    print(*res)", "def solve():\n    l = int(input())\n    ratings = list(map(int, input().split()))\n    vsec = list(input())\n    liked = []\n    disliked = []\n    for (i, x) in enumerate(vsec):\n        if x == '1':\n            liked.append([i, ratings[i]])\n        else:\n            disliked.append([i, ratings[i]])\n    disliked.sort(key=lambda x: x[1])\n    liked.sort(key=lambda x: x[1])\n    graph = {}\n    index = 1\n    for x in disliked:\n        graph[x[0]] = index\n        index += 1\n    for x in liked:\n        graph[x[0]] = index\n        index += 1\n    return ' '.join(map(str, [graph[x] for x in range(len(graph))]))\nn = int(input())\nfor i in range(n):\n    print(solve())", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = input()\n    like = []\n    dislike = []\n    fun1 = dict()\n    fun2 = dict()\n    index1 = index2 = 0\n    for i in range(n):\n        if s[i] == '1':\n            like.append(p[i])\n            fun1[index1] = i\n            index1 += 1\n        else:\n            fun2[index2] = i\n            index2 += 1\n            dislike.append(p[i])\n    if len(like) * len(dislike) == 0:\n        print(' '.join([str(pi) for pi in p]))\n    else:\n        sort1 = sorted(enumerate(like), key=lambda x: x[1])\n        sort2 = sorted(enumerate(dislike), key=lambda x: x[1])\n        like1 = [x[1] for x in sort1]\n        dislike1 = [x[1] for x in sort2]\n        idx1 = [x[0] for x in sort1]\n        idx2 = [x[0] for x in sort2]\n        i = 0\n        j = len(dislike) - 1\n        while i < len(like) and j >= 0 and (like1[i] < dislike1[j]):\n            i += 1\n            j -= 1\n        for k in range(i):\n            id1 = fun1[idx1[k]]\n            id2 = fun2[idx2[len(dislike) - 1 - k]]\n            (p[id1], p[id2]) = (p[id2], p[id1])\n        print(' '.join([str(pi) for pi in p]))", "testcases = int(input())\nfor i in range(testcases):\n    n = int(input())\n    l = [int(x) for x in input().split(' ')]\n    q = input()\n    won = 0\n    loss = 0\n    for i in range(len(q)):\n        if q[i] == '0':\n            loss += 1\n    won = loss + 1\n    loss = 1\n    wl = [0] * (n + 1)\n    for i in range(0, n):\n        if q[i] == '0':\n            wl[l[i]] = 0\n        else:\n            wl[l[i]] = 1\n    for i in range(1, n + 1):\n        if wl[i] == 1:\n            wl[i] = won\n            won += 1\n        else:\n            wl[i] = loss\n            loss += 1\n    for i in range(len(l)):\n        print(wl[l[i]], end=' ')\n    print()", "n_testcase = int(input())\nfor _ in range(n_testcase):\n    n = int(input())\n    pre_rating = list(map(int, input().split()))\n    vote = input()\n    disliked_song = []\n    liked_song = []\n    for i in range(n):\n        if vote[i] == '1':\n            liked_song.append([i, pre_rating[i]])\n        else:\n            disliked_song.append([i, pre_rating[i]])\n    liked_song.sort(key=lambda x: x[1])\n    disliked_song.sort(key=lambda x: x[1])\n    n_disliked_song = len(disliked_song)\n    n_liked_song = len(liked_song)\n    for i in range(n_disliked_song):\n        pre_rating[disliked_song[i][0]] = i + 1\n    for i in range(n_liked_song):\n        pre_rating[liked_song[i][0]] = i + 1 + n_disliked_song\n    print(' '.join(map(str, pre_rating)))", "for T in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    ar = [0] * n\n    s = input()\n    for i in range(n):\n        ar[arr[i] - 1] = s[i]\n    c = n\n    for i in range(n - 1, -1, -1):\n        if ar[i] == '1':\n            ar[i] = c\n            c -= 1\n    for i in range(n - 1, -1, -1):\n        if ar[i] == '0':\n            ar[i] = c\n            c -= 1\n    for i in range(n):\n        print(ar[arr[i] - 1], end=' ')\n    print()", "for i in range(int(input())):\n    n = int(input())\n    pi = list(map(int, input().split()))\n    si = input()\n    dic = {}\n    for i in pi:\n        dic[i] = 0\n    dislike = []\n    like = []\n    for i in range(n):\n        if si[i] == '0':\n            dislike.append(pi[i])\n        else:\n            like.append(pi[i])\n    all = sorted(dislike) + sorted(like)\n    q = 1\n    while q <= n:\n        dic[all[q - 1]] = q\n        q += 1\n    print(*dic.values())", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = input()\n    (zeros, ones) = ([], [])\n    for i in range(n):\n        if s[i] == '0':\n            zeros.append(p[i])\n        else:\n            ones.append(p[i])\n    if not zeros or not ones:\n        for x in p:\n            print(x, end=' ')\n    else:\n        zeros.sort()\n        ones.sort()\n        dic = {}\n        start = 1\n        for x in zeros:\n            dic[x] = start\n            start += 1\n        for y in ones:\n            dic[y] = start\n            start += 1\n        for x in p:\n            print(dic[x], end=' ')\n    print()", "t = int(input())\nfor test_case in range(t):\n    n = int(input())\n    int_list = list(map(int, input().split()))\n    s = input()\n    zero_count = 0\n    one_count = 0\n    for char in s:\n        if char == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n    lowest_like_num = zero_count + 1\n    dislike_num = zero_count\n    wrong_zero_list = []\n    wrong_one_list = []\n    for i in range(n):\n        if s[i] == '0':\n            if int_list[i] > dislike_num:\n                wrong_one_list.append(int_list[i])\n        elif s[i] == '1':\n            if int_list[i] <= dislike_num:\n                wrong_zero_list.append(int_list[i])\n    zero_element = 0\n    one_element = 0\n    for i in range(n):\n        if s[i] == '0':\n            if int_list[i] <= dislike_num:\n                continue\n            else:\n                int_list[i] = wrong_zero_list[zero_element]\n                zero_element += 1\n        elif s[i] == '1':\n            if int_list[i] > dislike_num:\n                continue\n            else:\n                int_list[i] = wrong_one_list[one_element]\n                one_element += 1\n    for i in int_list:\n        print(i, end=' ')\n    print()", "for i in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = input()\n    zero = s.count('0')\n    l = []\n    all = []\n    for j in range(n):\n        all.append(j + 1)\n    for j in range(n):\n        if s[j] == '0' and p[j] <= zero or (s[j] == '1' and p[j] > zero):\n            l.append(p[j])\n            all[p[j] - 1] = 0\n        elif s[j] == '0':\n            l.append(-1)\n        else:\n            l.append(-2)\n    zeroes = all[:zero]\n    ones = all[zero:]\n    zeroes.sort(reverse=True)\n    ones.sort(reverse=True)\n    z = 0\n    o = 0\n    for j in range(n):\n        if l[j] == -1:\n            l[j] = zeroes[z]\n            z += 1\n        elif l[j] == -2:\n            l[j] = ones[o]\n            o += 1\n    print(*l, sep=' ')", "for i in range(int(input())):\n    n = int(input())\n    pi = list(map(int, input().split()))\n    si = input()\n    dic = {}\n    for i in pi:\n        dic[i] = 0\n    dislike = []\n    like = []\n    for i in range(n):\n        if si[i] == '0':\n            dislike.append(pi[i])\n        else:\n            like.append(pi[i])\n    all = sorted(dislike) + sorted(like)\n    q = 1\n    while q <= n:\n        dic[all[q - 1]] = q\n        q += 1\n    print(*dic.values())", "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = input()\n    liked = {}\n    disliked = {}\n    for i in range(n):\n        if s[i] == '1':\n            liked[arr[i]] = i\n        else:\n            disliked[arr[i]] = i\n    answer = [0] * n\n    cur = 1\n    for i in sorted(disliked.keys()):\n        answer[disliked[i]] = cur\n        cur += 1\n    for i in sorted(liked.keys()):\n        answer[liked[i]] = cur\n        cur += 1\n    for i in answer:\n        print(i, end=' ')\n    print()\nt = int(input())\nfor _ in range(t):\n    solve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = input()\n    l = [0] * (n * 2)\n    c = 0\n    for i in range(n):\n        if s[i] == '1':\n            l[p[i] - 1] = 1\n            c += 1\n    no = n - c\n    x = 1\n    y = no + 1\n    for k in range(n):\n        if l[k] == 0:\n            l[k + n] = x\n            x += 1\n        else:\n            l[k + n] = y\n            y += 1\n    for j in range(n):\n        index = p[j] - 1 + n\n        print(l[index], end=' ')\n    print('')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    (ps, ng) = ([], [])\n    (pc, nc) = (0, 0)\n    for i in range(n):\n        if s[i] == '1':\n            ps.append(a[i])\n            pc += 1\n        else:\n            ng.append(a[i])\n            nc += 1\n    ps = sorted(ps)\n    ng = sorted(ng)\n    d = {}\n    for i in range(len(ng)):\n        d[ng[i]] = i + 1\n    for i in range(len(ps)):\n        d[ps[i]] = nc + i + 1\n    ans = [-1 for i in range(n)]\n    for i in range(n):\n        ans[i] = d[a[i]]\n    print(' '.join([str(i) for i in ans]))", "import sys\nfrom sys import stdin, stdout\nfrom math import ceil, floor, sqrt, log, log2, log10\nfrom collections import Counter\nint_max = float('inf')\nint_min = -float('inf')\nmod = 10 ** 9 + 7\nANS = []\ninput = stdin.readline\n\ndef solve():\n    pass\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = input().strip()\n    ind = [0] * (n + 1)\n    for i in range(n):\n        ind[arr[i]] = i + 1\n    lk = []\n    dk = []\n    for i in range(n):\n        if s[i] == '0':\n            dk.append(arr[i])\n        else:\n            lk.append(arr[i])\n    lk.sort()\n    dk.sort()\n    out = [0] * (n + 1)\n    curr = 1\n    for i in dk:\n        out[ind[i]] = curr\n        curr += 1\n    for i in lk:\n        out[ind[i]] = curr\n        curr += 1\n    out.pop(0)\n    print(*out)", "n = int(input())\nfor i in range(n):\n    n = int(input())\n    y = []\n    z = []\n    a = [int(x) for x in input().split()]\n    for i in range(n):\n        y.append(0)\n        z.append(0)\n    for i in range(n):\n        z[a[i] - 1] = i\n    s = str(input())\n    q = b = 0\n    for i in range(n):\n        if s[i] == '1':\n            q += 1\n    b = n - q\n    t1 = 1\n    t2 = b + 1\n    for i in range(n):\n        if s[z[i]] == '0':\n            y[z[i]] = t1\n            t1 += 1\n        else:\n            y[z[i]] = t2\n            t2 += 1\n    print(*y)", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nsys.setrecursionlimit(100000000)\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = input()\n    one = [arr[idx] for (idx, ch) in enumerate(x) if ch == '1']\n    zero = list(set(arr) - set(one))\n    one.sort()\n    zero.sort()\n    i = 1\n    d = dict()\n    for j in range(len(zero)):\n        d[zero[j]] = i\n        i += 1\n    for j in range(len(one)):\n        d[one[j]] = i\n        i += 1\n    for i in arr:\n        print(d.get(i), end=' ')\n    print()\n\ndef main():\n    t = int(input())\n    while t:\n        solve()\n        t -= 1\nmain()", "testcases = int(input())\nfor i in range(testcases):\n    n = int(input())\n    l = [int(x) for x in input().split(' ')]\n    q = input()\n    likedsong = 0\n    unlikedsong = 0\n    for i in range(len(q)):\n        if q[i] == '0':\n            unlikedsong += 1\n    likedsong = unlikedsong + 1\n    unlikedsong = 1\n    likeunlike = [0] * (n + 1)\n    for i in range(0, n):\n        if q[i] == '0':\n            likeunlike[l[i]] = 0\n        else:\n            likeunlike[l[i]] = 1\n    for i in range(1, n + 1):\n        if likeunlike[i] == 1:\n            likeunlike[i] = likedsong\n            likedsong += 1\n        else:\n            likeunlike[i] = unlikedsong\n            unlikedsong += 1\n    for i in range(len(l)):\n        print(likeunlike[l[i]], end=' ')\n    print()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    ans = [0] * n\n    p = list(map(int, input().split()))\n    p = list(enumerate(p))\n    s = input()\n    s0 = []\n    s1 = []\n    for i in range(n):\n        if s[i] == '0':\n            s0.append(p[i])\n        else:\n            s1.append(p[i])\n    s0.sort(key=lambda x: x[1])\n    s1.sort(key=lambda x: x[1])\n    k = 1\n    for i in range(len(s0)):\n        ans[s0[i][0]] = k\n        k += 1\n    for i in range(len(s1)):\n        ans[s1[i][0]] = k\n        k += 1\n    print(*ans)", "t = int(input())\nfor test_case in range(t):\n    n = int(input())\n    int_list = list(map(int, input().split()))\n    s = input()\n    zero_count = 0\n    one_count = 0\n    for char in s:\n        if char == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n    lowest_like_num = zero_count + 1\n    dislike_num = zero_count\n    wrong_zero_list = []\n    wrong_one_list = []\n    for i in range(n):\n        if s[i] == '0':\n            if int_list[i] <= dislike_num:\n                continue\n            elif int_list[i] > dislike_num:\n                wrong_one_list.append(int_list[i])\n        elif s[i] == '1':\n            if int_list[i] <= dislike_num:\n                wrong_zero_list.append(int_list[i])\n            elif int_list[i] > dislike_num:\n                continue\n    zero_element = 0\n    one_element = 0\n    for i in range(n):\n        if s[i] == '0':\n            if int_list[i] <= dislike_num:\n                continue\n            else:\n                int_list[i] = wrong_zero_list[zero_element]\n                zero_element += 1\n        elif s[i] == '1':\n            if int_list[i] > dislike_num:\n                continue\n            else:\n                int_list[i] = wrong_one_list[one_element]\n                one_element += 1\n    for i in int_list:\n        print(i, end=' ')\n    print()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    w = map(int, input().split())\n    s = input()[:-1]\n    p = sorted(zip(s, w, range(n)))\n    d = [0] * n\n    for i in range(n):\n        d[p[i][2]] = i + 1\n    print(*d)", "import sys\nget = sys.stdin.readline\nfor _ in range(int(get())):\n    N = int(get())\n    p = list(map(int, get().split()))\n    s = str(get())\n    likes = s.count('1')\n    dislikes = s.count('0')\n    disliked_songs = [0] * dislikes\n    j = 0\n    for i in range(N):\n        if s[i] == '0':\n            disliked_songs[j] = p[i]\n            j += 1\n    disliked_songs.sort()\n    rating = [x for x in p]\n    rat = 1\n    liked_songs = [0] * likes\n    j = 0\n    for i in range(N):\n        if s[i] == '1':\n            liked_songs[j] = p[i]\n            j += 1\n    liked_songs.sort()\n    chup = {}\n    for x in disliked_songs:\n        chup[x] = rat\n        rat += 1\n    for x in liked_songs:\n        chup[x] = rat\n        rat += 1\n    for i in range(N):\n        rating[i] = chup[p[i]]\n    print(*rating)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    zero = []\n    one = []\n    d = {}\n    for i in a:\n        d[i] = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            zero.append(a[i])\n        elif s[i] == '1':\n            one.append(a[i])\n    zero.sort()\n    one.sort()\n    x = 1\n    for i in zero:\n        d[i] = x\n        x += 1\n    for i in one:\n        d[i] = x\n        x += 1\n    print(*d.values())", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    s = input()\n    if '1' in s and '0' in s:\n        c = 0\n        lstl = []\n        lstd = []\n        for j in range(n):\n            if s[j] == '1':\n                c += 1\n                lstl.append((lst[j], j))\n            else:\n                lstd.append((lst[j], j))\n        lstl.sort(key=lambda y: y[0], reverse=True)\n        lstd.sort(key=lambda y: y[0], reverse=True)\n        f = n\n        for g in lstl:\n            lst[g[1]] = f\n            f -= 1\n        w = len(lstd)\n        for d in lstd:\n            lst[d[1]] = w\n            w -= 1\n    print(*lst)", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = input()\n    c1 = s.count('1')\n    fixlike = []\n    fixunlike = []\n    for i in range(n):\n        if s[i] == '1':\n            if p[i] <= n - c1:\n                fixlike.append([p[i], i])\n        elif p[i] > n - c1:\n            fixunlike.append([p[i], i])\n    for i in range(max(len(fixlike), len(fixunlike))):\n        (p[fixlike[i][1]], p[fixunlike[i][1]]) = (p[fixunlike[i][1]], p[fixlike[i][1]])\n    print(*p)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    n1 = s.count('0')\n    a1 = [0] * n\n    a2 = [0] * n\n    a3 = [0] * n\n    a4 = [0] * n\n    for i in range(n):\n        if s[i] == '1':\n            a1[a[i] - 1] = 1\n        else:\n            a1[a[i] - 1] = 0\n    l = 0\n    d = 0\n    for i in range(n):\n        if a1[i] == 1:\n            l += 1\n        else:\n            d += 1\n        a2[i] = l\n        a3[i] = d\n    for i in range(n):\n        if s[i] == '0':\n            a4[i] = a3[a[i] - 1]\n        else:\n            a4[i] = a2[a[i] - 1] + n1\n    print(*a4)", "for _ in range(int(input())):\n    N = int(input())\n    P = list(map(int, input().split()))\n    S = input()\n    pos = [-1] * (N + 1)\n    lis_0 = []\n    lis_1 = []\n    for i in range(N):\n        p = P[i]\n        pos[p] = i\n        if S[i] == '0':\n            lis_0.append(p)\n        else:\n            lis_1.append(p)\n    lis_0.sort()\n    lis_1.sort()\n    ans = [-1] * N\n    ct = 1\n    for p in lis_0:\n        i = pos[p]\n        ans[i] = ct\n        ct += 1\n    for p in lis_1:\n        i = pos[p]\n        ans[i] = ct\n        ct += 1\n    print(*ans)", "cases = int(input())\nfor _ in range(cases):\n    num = int(input())\n    arr = list(map(int, input().split()))\n    s = input()\n    likes = [n for (n, i) in zip(arr, s) if i == '1']\n    hates = [n for (n, i) in zip(arr, s) if i == '0']\n    l_num = num - len(likes)\n    likes.sort()\n    lst1 = list(range(l_num + 1, num + 1))\n    hates.sort()\n    lst2 = list(range(1, l_num + 1))\n    likes_map = {n: p for (n, p) in zip(likes, lst1)}\n    hates_map = {n: p for (n, p) in zip(hates, lst2)}\n    ans = []\n    likes_map.update(hates_map)\n    for n in arr:\n        ans.append(likes_map[n])\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    p = [int(i) for i in input().split()]\n    zero = [0] * n\n    one = [0] * n\n    s = input()\n    for i in range(len(s)):\n        if s[i] == '0':\n            zero[p[i] - 1] = 1\n        else:\n            one[p[i] - 1] = 1\n    i = 1\n    for k in range(len(zero)):\n        if zero[k] == 1:\n            zero[k] = i\n            i += 1\n    for k in range(len(one)):\n        if one[k] == 1:\n            one[k] = i\n            i += 1\n    ans = []\n    for i in range(len(p)):\n        if s[i] == '0':\n            ans.append(zero[p[i] - 1])\n        else:\n            ans.append(one[p[i] - 1])\n    print(*ans)", "import heapq\nimport sys\nimport math\nfrom collections import deque\nfrom bisect import bisect_left, bisect_right\nI = sys.stdin.readline\nII = lambda : int(I())\nIN = lambda x: map(int, x.split())\nFN = lambda x: map(float, x.split())\nL = lambda x: list(IN(x))\nM = 1000000007\nP = print\nT = True\nF = False\nfor _ in range(II()):\n    n = II()\n    p = L(I())\n    s = input()\n    nz = 0\n    for i in s:\n        if i == '0':\n            nz += 1\n    no = len(s) - nz\n    lz = []\n    lo = []\n    for i in range(n):\n        if s[i] == '0' and p[i] > nz:\n            lz.append((p[i], i))\n        if s[i] == '1' and p[i] <= nz:\n            lo.append((p[i], i))\n    lz.sort()\n    lo.sort()\n    for i in range(len(lz)):\n        (p[lz[i][1]], p[lo[i][1]]) = (p[lo[i][1]], p[lz[i][1]])\n    print(*p, sep=' ')", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = input()\n    d = {}\n    (g, p) = ([], [])\n    for i in range(n):\n        if s[i] == '0':\n            p.append(l[i])\n        else:\n            g.append(l[i])\n    p.sort()\n    g.sort()\n    p.extend(g)\n    k = 1\n    for i in p:\n        d[i] = k\n        k += 1\n    for i in l:\n        print(d[i], end=' ')\n    print()", "import sys\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, sys.stdin.readline().split()))\n    s = list(sys.stdin.readline())\n    del s[-1]\n    x = 0\n    c = 0\n    c1 = 0\n    e = []\n    f = []\n    for j in range(n):\n        if s[j] == '0':\n            e.append((a[j], j))\n            x += 1\n        else:\n            f.append((a[j], j))\n    e.sort()\n    f.sort()\n    y = n - x\n    for j in range(x):\n        s[e[j][1]] = j + 1\n    for j in range(y):\n        s[f[j][1]] = x + 1 + j\n    print(' '.join([str(i) for i in s]))", "def solve():\n    n = int(input())\n    List1 = list(map(int, input().split()))\n    String = input()\n    Dict1 = {}\n    Dict0 = {}\n    for (i, item) in enumerate(String):\n        if item == '1':\n            Dict1[List1[i]] = i\n        else:\n            Dict0[List1[i]] = i\n    new = {}\n    itr = n\n    for i in reversed(sorted(Dict1)):\n        loc = Dict1.get(i)\n        new[loc] = itr\n        itr -= 1\n    for i in reversed(sorted(Dict0)):\n        loc = Dict0.get(i)\n        new[loc] = itr\n        itr -= 1\n    for i in range(n):\n        print(new.get(i), end=' ')\n    print()\ncases = int(input())\nfor i in range(cases):\n    solve()", "t = int(input())\nwhile t:\n    n = int(input())\n    A = list(map(int, input().split(' ')))\n    s = str(input())\n    D = {}\n    (B, C) = ([], [])\n    for i in range(n):\n        D[A[i]] = i\n    for i in range(n):\n        if s[i] == '1':\n            B.append(A[i])\n        else:\n            C.append(A[i])\n    B.sort()\n    C.sort()\n    ans = [0] * n\n    m = len(B)\n    if m == len(A):\n        m = 1\n    else:\n        m = n - m + 1\n    for i in range(len(B)):\n        ans[D[B[i]]] = m\n        m = m + 1\n    m = 1\n    for i in range(len(C)):\n        ans[D[C[i]]] = m\n        m = m + 1\n    print(*ans)\n    t = t - 1", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    s = input()\n    l = []\n    d = []\n    for i in range(len(arr)):\n        if s[i] == '1':\n            l.append(arr[i])\n        else:\n            d.append(arr[i])\n    l.sort()\n    d.sort()\n    mp = {}\n    for i in range(len(l) - 1, -1, -1):\n        mp[l[i]] = n\n        n -= 1\n    for i in range(len(d) - 1, -1, -1):\n        mp[d[i]] = n\n        n -= 1\n    ans = []\n    for i in range(len(arr)):\n        ans.append(mp[arr[i]])\n    print(*ans)", "cases = int(input())\nwhile cases > 0:\n    n = int(input())\n    p = list(map(int, input().split()))\n    q = list(input())\n    f = []\n    s = []\n    ind = {}\n    for i in range(n):\n        if q[i] == '0':\n            f.append(p[i])\n        else:\n            s.append(p[i])\n        ind[p[i]] = i\n    f.sort()\n    s.sort()\n    j = 1\n    for i in f:\n        p[ind[i]] = j\n        j += 1\n    for i in s:\n        p[ind[i]] = j\n        j += 1\n    for i in p:\n        print(i, end=' ')\n    print()\n    cases -= 1", "import sys\nn = int(input())\nfor i in range(n):\n    p = int(input())\n    L = input().split(' ')\n    s = input()\n    L1 = []\n    for j in range(p):\n        L[j] = int(L[j])\n        if s[j] == '1':\n            L1.append(int(L[j]) + 200000)\n        else:\n            L1.append(int(L[j]))\n    L1.sort()\n    mapDic = {}\n    for j in range(p):\n        if L1[j] > 200000:\n            mapDic[L1[j] - 200000] = j + 1\n        else:\n            mapDic[L1[j]] = j + 1\n    for j in range(p):\n        L[j] = mapDic[L[j]]\n    print(' '.join([str(x) for x in L]))\n    sys.stdout.flush()", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = input()\n    lik = []\n    dikl = []\n    for i in range(n):\n        if s[i] == '0':\n            dikl.append(l[i])\n        else:\n            lik.append(l[i])\n    D = {}\n    dikl.sort()\n    lik.sort()\n    ct0 = s.count('0')\n    t = 1\n    for i in range(ct0):\n        D[dikl[i]] = t\n        t += 1\n    for i in range(0, n - ct0):\n        D[lik[i]] = t\n        t += 1\n    for i in l:\n        print(D[i], end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    rr = list(map(int, input().split()))\n    ss = input()\n    kk = set(ss)\n    if len(kk) == 1:\n        print(*rr)\n    else:\n        z1 = []\n        o1 = []\n        ones = ss.count('1')\n        zeros = n - ones\n        z2 = list(range(1, zeros + 1))\n        o2 = list(range(zeros + 1, n + 1))\n        for i in range(n):\n            if ss[i] == '1':\n                o1.append(rr[i])\n            else:\n                z1.append(rr[i])\n        o1.sort()\n        z1.sort()\n        onemap = {}\n        zeromap = {}\n        for i in range(len(o1)):\n            onemap[o1[i]] = o2[i]\n        for i in range(len(z1)):\n            zeromap[z1[i]] = z2[i]\n        ans = []\n        for i in range(n):\n            if ss[i] == '0':\n                ans.append(zeromap[rr[i]])\n            else:\n                ans.append(onemap[rr[i]])\n        print(*ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = input()\n    like = []\n    dislike = []\n    ind = []\n    d = dict()\n    if s.count('0') == 0:\n        print(*p)\n    elif s.count('1') == 0:\n        print(*p)\n    else:\n        like = []\n        dislike = []\n        for i in range(n):\n            if s[i] == '1':\n                like.append(p[i])\n            else:\n                dislike.append(p[i])\n        like.sort()\n        dislike.sort()\n        x = dislike + like\n        for j in range(len(x)):\n            d[x[j]] = j + 1\n        for k in range(len(p)):\n            p[k] = d[p[k]]\n        print(*p)", "def solve():\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    s = input()\n    L = sorted([(s[i], p[i], i) for i in range(n)])\n    q = [-1 for i in range(n)]\n    for i in range(n):\n        q[L[i][2]] = i + 1\n    print(*q)\nt = int(input())\nfor _ in range(t):\n    solve()", "for t in range(int(input())):\n    n = int(input())\n    P = [int(i) for i in input().split()]\n    s = input()\n    (D, L) = (list(), list())\n    for i in range(n):\n        if s[i] == '0':\n            D.append(P[i])\n        else:\n            L.append(P[i])\n    D.sort()\n    L.sort()\n    D = D + L\n    (d, ans) = (dict(), list())\n    for i in range(n):\n        d[D[i]] = i + 1\n    for i in range(n):\n        ans.append(d[P[i]])\n    print(*ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    p = [0] + [*map(int, input().split(' '))]\n    s = input()\n    q = [0] * (n + 1)\n    for j in range(1, n + 1):\n        q[p[j]] = j\n    disliked = []\n    liked = []\n    for j in range(1, n + 1):\n        if s[q[j] - 1:q[j]] == '1':\n            liked += [q[j]]\n        else:\n            disliked += [q[j]]\n    songs = [0] * (n + 1)\n    x = 1\n    for j in disliked:\n        songs[j] = x\n        x += 1\n    for j in liked:\n        songs[j] = x\n        x += 1\n    for j in range(1, n + 1):\n        print(songs[j], end=' ')\n    print()", "for i in range(int(input())):\n    n = int(input())\n    rating = list(map(int, input().split(' ')))\n    string = input()\n    liked = []\n    disliked = []\n    for j in range(n):\n        if string[j] == '1':\n            liked.append(rating[j])\n        else:\n            disliked.append(rating[j])\n    liked.sort()\n    disliked.sort()\n    liked_sorted = liked\n    disliked_sorted = disliked\n    dict = {}\n    for k in range(len(liked_sorted)):\n        dict[liked_sorted[-k - 1]] = n - k\n    for k in range(len(disliked_sorted)):\n        dict[disliked_sorted[k]] = k + 1\n    out = ''\n    for z in range(len(rating)):\n        out += str(dict[rating[z]]) + ' '\n    out.strip()\n    print(out)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    d = []\n    e = []\n    for i in range(len(s)):\n        if s[i] == '0':\n            d.append(a[i])\n        else:\n            e.append(a[i])\n    d.sort()\n    e.sort()\n    x = {}\n    y = {}\n    for i in range(len(d)):\n        x[d[i]] = i + 1\n    for i in range(len(e)):\n        y[e[i]] = len(d) + 1 + i\n    for i in range(len(a)):\n        if a[i] in x.keys():\n            a[i] = x[a[i]]\n        else:\n            a[i] = y[a[i]]\n    print(*a)", "cases = int(input())\nfor i in range(cases):\n    n = int(input())\n    entrada = input().split()\n    p = []\n    for j in entrada:\n        p.append(int(j))\n    entrada = input()\n    s = [int(j) for j in entrada]\n    liked_indexes = []\n    disliked_indexes = []\n    reverse_p = [0 for i in p]\n    for i in range(n):\n        reverse_p[p[i] - 1] = i\n    for j in range(n, 0, -1):\n        index = reverse_p[j - 1]\n        if s[index] == 1:\n            liked_indexes.append(index)\n        else:\n            disliked_indexes.append(index)\n    priority = liked_indexes + disliked_indexes\n    value = n\n    for i in priority:\n        p[i] = value\n        value -= 1\n    for j in range(len(p) - 1):\n        print(p[j], end=' ')\n    print(p[-1])", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = input()\n    l1 = []\n    l2 = []\n    for i in range(n):\n        if s[i] == '1':\n            l2.append(l[i])\n        else:\n            l1.append(l[i])\n    l1.sort()\n    l2.sort()\n    l1 = l1 + l2\n    d = {}\n    for i in range(n):\n        d[l1[i]] = i + 1\n    y = []\n    for i in range(n):\n        y.append(d[l[i]])\n    print(*y)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = input()\n    l1 = []\n    l2 = []\n    for (i, ele) in enumerate(s):\n        if ele == '1':\n            l1.append(l[i])\n        else:\n            l2.append(l[i])\n    l1.sort()\n    l2.sort()\n    d = defaultdict(int)\n    x = 1\n    for ele in l2:\n        d[ele] = x\n        x += 1\n    for ele in l1:\n        d[ele] = x\n        x += 1\n    ans = []\n    for ele in l:\n        ans.append(d[ele])\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = input()\n    pos = {}\n    neg = {}\n    for i in range(n):\n        if s[i] == '1':\n            pos[p[i]] = 0\n        else:\n            neg[p[i]] = 0\n    cnt = 1\n    for i in sorted(neg):\n        neg[i] = cnt\n        cnt += 1\n    for i in sorted(pos):\n        pos[i] = cnt\n        cnt += 1\n    for i in range(n):\n        if s[i] == '1':\n            print(pos[p[i]], end=' ')\n        else:\n            print(neg[p[i]], end=' ')\n    print()"]