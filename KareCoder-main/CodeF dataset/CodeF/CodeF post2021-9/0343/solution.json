["import sys\ninp = sys.stdin.readline\n\ndef solve():\n    n = int(inp())\n    a = [list(map(int, inp().split()))]\n    while True:\n        c = [0] * (n + 1)\n        for i in a[-1]:\n            c[i] += 1\n        b = [c[i] for i in a[-1]]\n        if b == a[-1]:\n            break\n        a.append(b)\n    ans = []\n    for i in range(int(inp())):\n        (x, k) = map(int, inp().split())\n        ans.append(str(a[min(len(a) - 1, k)][x - 1]))\n    print('\\n'.join(ans))\n\ndef main():\n    for i in range(int(inp())):\n        solve()\nmain()", "def main():\n    import sys\n    input = sys.stdin.readline\n    M = int(1000000000.0 + 7)\n    for _ in range(int(input())):\n        n = int(input())\n        s = list(map(int, input().split()))\n        l = [[]]\n        for i in range(n):\n            l[0].append(s[i])\n        while True:\n            d = {}\n            l.append([])\n            for i in range(n):\n                if s[i] in d:\n                    d[s[i]] += 1\n                else:\n                    d[s[i]] = 1\n            for i in range(n):\n                s[i] = d[s[i]]\n                l[-1].append(s[i])\n            if l[-1] == l[-2]:\n                break\n        for _ in range(int(input())):\n            (a, k) = map(int, input().split())\n            if k >= len(l):\n                print(l[-1][a - 1])\n            else:\n                print(l[k][a - 1])\nmain()", "def main():\n    import sys\n    input = sys.stdin.readline\n    M = int(1000000000.0 + 7)\n    for _ in range(int(input())):\n        n = int(input())\n        s = list(map(int, input().split()))\n        l = [[]]\n        for i in range(n):\n            l[0].append(s[i])\n        while True:\n            d = {}\n            l.append([])\n            for i in range(n):\n                if s[i] in d:\n                    d[s[i]] += 1\n                else:\n                    d[s[i]] = 1\n            for i in range(n):\n                s[i] = d[s[i]]\n                l[-1].append(s[i])\n            if l[-1] == l[-2]:\n                break\n        for _ in range(int(input())):\n            (a, k) = map(int, input().split())\n            if k >= len(l):\n                print(l[-1][a - 1])\n            else:\n                print(l[k][a - 1])\nmain()", "from copy import deepcopy\nimport sys\nimport math\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    a = [int(x) for x in sys.stdin.readline().split()]\n    m = math.ceil(math.log(n, 2)) + 1\n    arrays = []\n    occur = {}\n    arrays.append(a)\n    for i in a:\n        if i in occur:\n            occur[i] += 1\n        else:\n            occur[i] = 1\n    for __ in range(m):\n        cur_a = []\n        for i in range(n):\n            cur_a.append(occur[arrays[-1][i]])\n        occur = {}\n        for i in cur_a:\n            if i in occur:\n                occur[i] += 1\n            else:\n                occur[i] = 1\n        arrays.append(cur_a)\n    for __ in range(int(sys.stdin.readline())):\n        (x, k) = map(int, sys.stdin.readline().split())\n        if k > m:\n            print(arrays[m][x - 1])\n        else:\n            print(arrays[k][x - 1])", "for _ in range(int(input())):\n    n = int(input())\n    a = [list(map(int, input().split()))]\n    while True:\n        c = [0] * (n + 1)\n        for i in a[-1]:\n            c[i] += 1\n        b = [c[i] for i in a[-1]]\n        if b == a[-1]:\n            break\n        a.append(b)\n    ans = []\n    for i in range(int(input())):\n        (x, k) = map(int, input().split())\n        ans.append(str(a[min([len(a) - 1, k])][x - 1]))\n    print('\\n'.join(ans))", "import sys\nimport bisect\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    arr = [a]\n    while True:\n        d = {}\n        for i in arr[-1]:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        arr.append([d[arr[-1][i]] for i in range(n)])\n        for i in range(n):\n            if arr[-1][i] != arr[-2][i]:\n                break\n        else:\n            break\n    for q in range(int(input())):\n        (x, k) = map(int, input().split())\n        k = min(k, len(arr) - 1)\n        print(arr[k][x - 1])\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\nfrom collections import defaultdict\ninput = sys.stdin.readline\n\ndef get_integers():\n    return map(int, input().strip().split())\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    arr = [int(x) for x in input().strip().split()]\n    storage = []\n    storage.append(arr)\n    while True:\n        counter = defaultdict(int)\n        for num in storage[-1]:\n            counter[num] += 1\n        temp_set = set(storage[-1])\n        flag = all([True if counter[key] == key else False for key in temp_set])\n        if flag:\n            break\n        temp_arr = []\n        for num in storage[-1]:\n            temp_arr.append(counter[num])\n        storage.append(temp_arr)\n    limit = len(storage) - 1\n    q = int(input().strip())\n    for _ in range(q):\n        (xi, ki) = get_integers()\n        if ki > limit:\n            ki = limit\n        print(storage[ki][xi - 1])", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    d = [*map(int, input().split())]\n    q = dict()\n    for i in d:\n        try:\n            q[i] += 1\n        except:\n            q[i] = 1\n    pp = [d.copy()]\n    while 1:\n        tq = dict()\n        for i in range(n):\n            d[i] = q[d[i]]\n            try:\n                tq[d[i]] += 1\n            except:\n                tq[d[i]] = 1\n        if q == tq:\n            break\n        pp.append(d.copy())\n        q = tq\n    for _ in range(int(input())):\n        (x, k) = map(int, input().split())\n        print(pp[-1][x - 1] if k > len(pp) - 1 else pp[k][x - 1])", "import sys\nfrom collections import Counter\ninput = sys.stdin.readline\n\ndef trans(l):\n    cd = Counter(l)\n    t = [0] * len(l)\n    for i in range(len(l)):\n        t[i] = cd[l[i]]\n    return t\n\ndef findAll(l):\n    ret = []\n    ret.append(l)\n    while l != trans(l):\n        l = trans(l)\n        ret.append(l)\n    return ret\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pre = findAll(a)\n    qn = int(input())\n    for _ in range(qn):\n        (x, k) = map(int, input().split())\n        if k >= len(pre) - 1:\n            print(pre[len(pre) - 1][x - 1])\n        else:\n            print(pre[k][x - 1])", "from sys import stdin\nfrom collections import deque, Counter\n\ndef solve():\n    for _ in range(int(stdin.readline().strip())):\n        N = int(stdin.readline().rstrip())\n        A = list(map(int, stdin.readline().rstrip().split()))\n        queries = []\n        Q = int(stdin.readline().rstrip())\n        for i in range(Q):\n            (x, k) = map(int, stdin.readline().rstrip().split())\n            queries.append((k, x - 1, i))\n        queries = deque(sorted(queries))\n        results = [0] * Q\n        curr_k = 0\n        stop = 0\n        while len(queries):\n            (k, x, i) = queries.popleft()\n            if stop or k == curr_k:\n                results[i] = A[x]\n            else:\n                prev_k = curr_k\n                curr_k = k\n                for _ in range(curr_k - prev_k):\n                    cnt = Counter(A)\n                    prev_A = A\n                    A = [cnt[x] for x in A]\n                    if A == prev_A:\n                        stop = 1\n                        break\n                results[i] = A[x]\n        print('\\n'.join(map(str, results)))\nsolve()", "t = int(input())\n\ndef compare(x, y):\n    for i in range(len(x)):\n        if x[i] != y[i]:\n            return False\n    return True\nout = []\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [a]\n    i = 1\n    while True:\n        counter = dict()\n        tmp = []\n        for x in b[i - 1]:\n            if x not in counter:\n                counter[x] = b[i - 1].count(x)\n            tmp.append(counter[x])\n        if compare(tmp, b[i - 1]):\n            break\n        b.append(tmp)\n        i += 1\n    q = int(input())\n    for j in range(q):\n        (x, k) = list(map(int, input().split()))\n        out.append(str(b[min(k, i - 1)][x - 1]))\nprint('\\n'.join(out))", "import sys\ninput = sys.stdin.readline\nfrom collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    c = int(n ** 0.5) + 2\n    W = [w]\n    for i in range(c):\n        s = Counter(w)\n        w = [s[i] for i in w]\n        W.append(w)\n    for i in range(int(input())):\n        (x, k) = map(int, input().split())\n        k = min(k, c)\n        print(W[k][x - 1])", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nfrom collections import Counter\ninp_vars_int = lambda : map(int, input().split())\ninp_list_int = lambda : list(map(int, input().split()))\nt = int(input())\nfor _ in range(t):\n    _ = input()\n    a = inp_list_int()\n    n = len(a)\n    q = int(input())\n    trans = [a]\n    while True:\n        a_p = trans[-1]\n        cnt = Counter(a_p)\n        a_t = [None for _ in range(n)]\n        changes = 0\n        for (i, ai) in enumerate(a_p):\n            a_t[i] = cnt[ai]\n            if ai != cnt[ai]:\n                changes += 1\n        if changes == 0:\n            break\n        else:\n            trans.append(a_t)\n    for _ in range(q):\n        (x, k) = inp_vars_int()\n        if k >= len(trans):\n            k = -1\n        print(trans[k][x - 1])", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    q = int(input())\n    (steps, queries) = ([arr], [])\n    for _ in range(q):\n        (m1, n1) = map(int, input().split())\n        queries.append([m1, n1])\n    for i in range(20):\n        (d, new) = ({}, steps[-1].copy())\n        for a in steps[-1]:\n            d[a] = d.get(a, 0) + 1\n        for i in range(n):\n            new[i] = d[new[i]]\n        steps.append(new)\n    for (q1, q2) in queries:\n        q2 = min(q2, len(steps) - 1)\n        print(steps[q2][q1 - 1])", "def divine(n, a, qs):\n    evolutions = {0: a}\n    counts = {0: count(a)}\n    evo = 0\n    while True:\n        new_a = [0] * n\n        changed = False\n        for i in range(n):\n            old_ai = evolutions[evo][i]\n            new_ai = counts[evo][old_ai]\n            if old_ai != new_ai:\n                changed = True\n            new_a[i] = new_ai\n        evo += 1\n        evolutions[evo] = new_a\n        counts[evo] = count(new_a)\n        if not changed:\n            break\n    for (xi, ki) in qs:\n        ki = min(ki, evo)\n        print(evolutions[ki][xi - 1])\n\ndef count(a):\n    counts = {}\n    for ai in a:\n        if ai in counts:\n            counts[ai] += 1\n        else:\n            counts[ai] = 1\n    return counts\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    q = int(input())\n    qs = []\n    for _ in range(q):\n        (x, k) = map(int, input().split(' '))\n        qs += [(x, k)]\n    divine(n, a, qs)", "def countElements(arrList):\n    arrDict = {}\n    for arr in arrList:\n        if arr not in arrDict.keys():\n            arrDict[arr] = 1\n        else:\n            arrDict[arr] += 1\n    return arrDict\n\ndef DivineArray(s):\n    arrList = list(map(int, s.split(' ')))\n    m = int(input())\n    x_and_k = []\n    for _ in range(m):\n        x_and_k.append(list(map(int, input().split(' '))))\n    noOfIterations = 0\n    for i in range(m):\n        if x_and_k[i][1] > noOfIterations:\n            noOfIterations = x_and_k[i][1]\n    arrTransforms.append(arrList.copy())\n    for _ in range(noOfIterations):\n        arrDict = countElements(arrList)\n        for j in range(len(arrList)):\n            arrList[j] = arrDict[arrList[j]]\n        arrTransforms.append(arrList.copy())\n        if arrTransforms[-1] == arrTransforms[-2]:\n            break\n    for i in range(len(x_and_k)):\n        try:\n            print(arrTransforms[x_and_k[i][1]][x_and_k[i][0] - 1])\n        except:\n            print(arrTransforms[-1][x_and_k[i][0] - 1])\nn = int(input())\nfor _ in range(n):\n    arrTransforms = []\n    x = int(input())\n    DivineArray(input())", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    qi = []\n    for _ in range(q):\n        qi += [list(map(int, input().split()))]\n    ki = [a]\n    for _ in range(10 ** 9):\n        acpy = a.copy()\n        cnt = {i: a.count(i) for i in set(a)}\n        for i in range(n):\n            acpy[i] = cnt[a[i]]\n        if acpy == a:\n            break\n        a = acpy\n        ki.append(acpy)\n    for (x, k) in qi:\n        try:\n            print(ki[k][x - 1])\n        except IndexError:\n            print(ki[-1][x - 1])\nt = int(input())\nfor _ in range(t):\n    solve()", "from collections import defaultdict\nfrom functools import reduce\nfrom typing import Counter\n\ndef solve(n, nums, q, query):\n    state = defaultdict(list)\n    max_query = reduce(lambda c, x: max(x[1], c), query, 0)\n    steps = 0\n    state[steps] = nums\n    changing = True\n    while steps < max_query and changing:\n        counter = Counter(state[steps])\n        steps += 1\n        state[steps] = [counter[state[steps - 1][i]] for i in range(n)]\n        if state[steps] == state[steps - 1]:\n            changing = False\n    ans = []\n    for (index, step) in query:\n        if step > steps:\n            ans.append(state[steps][index - 1])\n        else:\n            ans.append(state[step][index - 1])\n    return ans\nans = []\nfor _ in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    q = int(input())\n    query = [list(map(int, input().split())) for _ in range(q)]\n    ans.append(solve(n, nums, q, query))\nfor a in ans:\n    print(*a, sep='\\n')", "import sys\nimport collections\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef solve(nums, q):\n\n    def t(nums):\n        ans = []\n        c = collections.Counter(nums)\n        stop = 1\n        for i in nums:\n            ans.append(c[i])\n            if i != c[i]:\n                stop = 0\n        return (ans, stop)\n    for i in range(len(q)):\n        q[i] += [i]\n    q.sort(key=lambda x: x[1])\n    ini = 0\n    ans = [None] * len(q)\n    stop = 0\n    for i in q:\n        if stop:\n            ans[i[2]] = nums[i[0] - 1]\n        else:\n            for j in range(ini, i[1]):\n                (nums, stop) = t(nums)\n                if stop:\n                    break\n            ini = i[1]\n            ans[i[2]] = nums[i[0] - 1]\n    return ans\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    nums = get_ints()\n    num_q = int(input())\n    q = []\n    for i in range(num_q):\n        q.append(get_ints())\n    ans = solve(nums, q)\n    for i in ans:\n        print(i)", "def countElements(arrList):\n    arrDict = {}\n    for arr in arrList:\n        if arr not in arrDict.keys():\n            arrDict[arr] = 1\n        else:\n            arrDict[arr] += 1\n    return arrDict\n\ndef DivineArray(s):\n    arrList = list(map(int, s.split(' ')))\n    m = int(input())\n    x_and_k = []\n    for _ in range(m):\n        x_and_k.append(list(map(int, input().split(' '))))\n    noOfIterations = 0\n    for i in range(m):\n        if x_and_k[i][1] > noOfIterations:\n            noOfIterations = x_and_k[i][1]\n    arrTransforms = []\n    arrTransforms.append(arrList.copy())\n    for _ in range(noOfIterations):\n        arrDict = countElements(arrList)\n        for j in range(len(arrList)):\n            arrList[j] = arrDict[arrList[j]]\n        arrTransforms.append(arrList.copy())\n        if arrTransforms[-1] == arrTransforms[-2]:\n            break\n    for i in range(len(x_and_k)):\n        try:\n            print(arrTransforms[x_and_k[i][1]][x_and_k[i][0] - 1])\n        except:\n            print(arrTransforms[-1][x_and_k[i][0] - 1])\nn = int(input())\nfor _ in range(n):\n    x = int(input())\n    DivineArray(input())", "from collections import Counter\nfrom typing import List, Tuple\n\ndef divine_array(xs: List[int], qs: List[Tuple[int, int]]) -> List[int]:\n    state = xs\n    state_key = 0\n    cache = {str(state_key): state}\n    final_state = []\n    final_state_key = 0\n    while final_state != state:\n        grps = Counter(state)\n        state = [grps[i] for i in state]\n        state_key += 1\n        cache[str(state_key)] = state\n        if state == cache[str(state_key - 1)]:\n            final_state = state\n            final_state_key = state_key\n    results = [cache[str(min(k, final_state_key))][x - 1] for (x, k) in qs]\n    return results\nresults = []\nnr_of_tests = int(input())\nfor _ in range(nr_of_tests):\n    xs_len = int(input())\n    xs_str = input()\n    xs = [int(x) for x in xs_str.split(' ')]\n    nr_of_queries = int(input())\n    queries = []\n    for _ in range(nr_of_queries):\n        q_str = input()\n        (x, k) = [int(s) for s in q_str.split(' ')]\n        queries.append((x, k))\n    results += divine_array(xs, queries)\nfor result in results:\n    print(result)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    queries = []\n    for query in range(q):\n        queries.append(list(map(int, input().split())))\n    generations = {0: a}\n    for i in range(1, 15):\n        gencounter = Counter(generations[i - 1])\n        generations[i] = [gencounter[i] for i in generations[i - 1]]\n    for (idx, gen) in queries:\n        try:\n            print(generations[gen][idx - 1])\n        except KeyError:\n            print(generations[14][idx - 1])", "def tranform(arr):\n    count = [0] * len(arr)\n    res = []\n    for i in arr:\n        count[i - 1] += 1\n    for i in arr:\n        res.append(count[i - 1])\n    return res\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    q = int(input())\n    p = []\n    maxk = 0\n    for i in range(q):\n        l = list(map(int, input().split()))\n        p.append(l)\n        maxk = max(maxk, l[1])\n    dist = {0: arr}\n    for i in range(1, maxk + 1):\n        current = dist[i - 1]\n        present = tranform(current)\n        if current == present:\n            maxk = i - 1\n            break\n        dist[i] = present\n    for i in p:\n        index = i[0]\n        transform = i[1]\n        if transform > maxk:\n            transform = maxk\n        print(dist[transform][index - 1])", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = [int(_) for _ in input().split()]\n    q = int(input())\n    qs = [[int(_) for _ in input().split()] + [i] for i in range(q)]\n    ans = [0] * q\n    qs.sort(key=lambda it: it[1])\n    (i, j) = (0, 0)\n    while j < q and i == qs[j][1]:\n        ans[qs[j][2]] = nums[qs[j][0] - 1]\n        j += 1\n    while j < q and i < qs[j][1]:\n        cnt = Counter(nums)\n        nums2 = [cnt[z] for z in nums]\n        if nums2 == nums:\n            break\n        nums = nums2\n        i += 1\n        while j < q and i == qs[j][1]:\n            ans[qs[j][2]] = nums[qs[j][0] - 1]\n            j += 1\n    while j < q:\n        ans[qs[j][2]] = nums[qs[j][0] - 1]\n        j += 1\n    for x in ans:\n        print(x)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = [int(_) for _ in input().split()]\n    q = int(input())\n    qs = [[int(_) for _ in input().split()] + [i] for i in range(q)]\n    ans = [0] * q\n    qs.sort(key=lambda it: it[1])\n    (i, j) = (0, 0)\n    while j < q and i == qs[j][1]:\n        ans[qs[j][2]] = nums[qs[j][0] - 1]\n        j += 1\n    while j < q and i < qs[j][1]:\n        cnt = Counter(nums)\n        nums2 = [cnt[z] for z in nums]\n        if nums2 == nums:\n            break\n        nums = nums2\n        i += 1\n        while j < q and i == qs[j][1]:\n            ans[qs[j][2]] = nums[qs[j][0] - 1]\n            j += 1\n    while j < q:\n        ans[qs[j][2]] = nums[qs[j][0] - 1]\n        j += 1\n    for x in ans:\n        print(x)", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    arr = int_arr()\n    dict = {}\n    ch = []\n    ch.append(arr)\n    temp = arr.copy()\n    for k in range(200):\n        for i in range(n):\n            dict[temp[i]] = dict.get(temp[i], 0) + 1\n        for i in range(n):\n            temp[i] = dict[temp[i]]\n        ch.append(temp)\n        temp = temp.copy()\n        dict = {}\n    for i in range(int(input())):\n        (l, m) = int_arr()\n        if m >= 200:\n            print(ch[200][l - 1])\n        else:\n            print(ch[m][l - 1])", "import sys\nsys.setrecursionlimit(10 ** 9)\n\ndef cin(datatype):\n    return datatype(sys.stdin.readline())\n\ndef spin(datatype, retype=None):\n    if retype is None:\n        return map(datatype, sys.stdin.readline().split())\n    return retype(map(datatype, sys.stdin.readline().split()))\n\ndef curse(l: list):\n    mem = {}\n    re = []\n    for i in l:\n        if i not in mem:\n            mem[i] = l.count(i)\n        re.append(mem[i])\n    return re\nT = cin(int)\nwhile T > 0:\n    n = cin(int)\n    arr = spin(int, list)\n    q = cin(int)\n    mem = {0: arr[:], 1: curse(arr)}\n    rep = -1\n    for i in range(q):\n        Q = spin(int, list)\n        if rep != -1:\n            if Q[1] >= rep:\n                print(mem[rep - 1][Q[0] - 1])\n            else:\n                print(mem[Q[1]][Q[0] - 1])\n        else:\n            for j in range(1, Q[1] + 1):\n                if j not in mem:\n                    mem[j] = curse(mem[j - 1])\n                if mem[j] == mem[j - 1]:\n                    rep = j\n                    break\n            if rep != -1:\n                if Q[1] >= rep:\n                    print(mem[rep - 1][Q[0] - 1])\n                else:\n                    print(mem[Q[1]][Q[0] - 1])\n            else:\n                print(mem[Q[1]][Q[0] - 1])\n    T -= 1", "R = lambda : map(int, input().split())\n\ndef counter(l):\n    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    l2 = [d[i] for i in l]\n    return l2\n(n,) = R()\nfor i in range(n):\n    (length,) = R()\n    l = list(R())\n    (q,) = R()\n    ql = []\n    for j in range(q):\n        ql.append([j] + list(R()))\n    ql.sort(key=lambda x: x[2])\n    breaker = False\n    Max = ql[-1][-1]\n    c = 0\n    q3 = []\n    l2 = l.copy()\n    for k in ql:\n        if k[-1] <= Max:\n            while c < k[-1]:\n                l2 = counter(l)\n                if l2 == l:\n                    breaker = True\n                l = l2.copy()\n                c += 1\n                if breaker:\n                    Max = c\n                    break\n        q3.append([l2[k[1] - 1], k[0]])\n    q3.sort(key=lambda x: x[1])\n    for e in q3:\n        print(e[0])", "def solve(arr, n):\n    loop = 0\n    arrays = []\n    arrays.append(arr)\n    while True:\n        count = [0 for i in range(n + 1)]\n        for x in arr:\n            count[x] += 1\n        temp = []\n        flag = False\n        for x in arr:\n            y = count[x]\n            temp.append(y)\n            if x != y:\n                flag = True\n        if not flag:\n            break\n        loop += 1\n        arr = temp\n        arrays.append(arr)\n    maxm = loop\n    q = int(input())\n    for _ in range(q):\n        (x, k) = map(int, input().split())\n        if k >= maxm:\n            print(arrays[-1][x - 1])\n        else:\n            print(arrays[k][x - 1])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    solve(arr, n)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    li = []\n    li.append(a)\n    for i in range(n):\n        d = dict()\n        for i in range(n):\n            if a[i] in d:\n                d[a[i]] += 1\n            else:\n                d[a[i]] = 1\n        b = []\n        for i in range(n):\n            b.append(d[a[i]])\n        if b == a:\n            li.append(b)\n            break\n        else:\n            li.append(b)\n            a = b\n    le = len(li)\n    q = int(input())\n    for i in range(q):\n        (x, k) = map(int, input().split())\n        if k < le:\n            print(li[k][x - 1])\n        else:\n            print(li[-1][x - 1])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    last = []\n    changes = [a.copy()]\n    while True:\n        dct = {}\n        for el in a:\n            dct[el] = dct.get(el, 0) + 1\n        for i in range(len(a)):\n            a[i] = dct[a[i]]\n        changes.append(a.copy())\n        if a == last:\n            break\n        last = a.copy()\n    len_array = len(changes)\n    for _ in range(q):\n        (x, k) = map(int, input().split())\n        if k >= len_array:\n            print(changes[-1][x - 1])\n        else:\n            print(changes[k][x - 1])", "from collections import Counter\nfor _ in range(int(input())):\n    i = int(input())\n    l = list(map(int, input().split()))\n    log = []\n    log.append(l)\n    for x in range(15):\n        tem = Counter(l)\n        l = [tem[x] for x in l]\n        log.append(l)\n    for __ in range(int(input())):\n        (x, k) = map(int, input().split())\n        if k > 15:\n            k = 15\n        print(log[k][x - 1])", "from collections import Counter\nfor _ in range(int(input())):\n    i = int(input())\n    l = list(map(int, input().split()))\n    log = []\n    log.append(l)\n    for x in range(15):\n        tem = Counter(l)\n        l = [tem[x] for x in l]\n        log.append(l)\n    for __ in range(int(input())):\n        (x, k) = map(int, input().split())\n        if k > 15:\n            k = 15\n        print(log[k][x - 1])", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    res = []\n    res.append(arr)\n    temp1 = arr.copy()\n    temp2 = [0 for i in range(n)]\n    while 1:\n        k = 0\n        cnt = Counter(temp1)\n        for j in temp1:\n            temp2[k] = cnt[j]\n            k += 1\n        if temp2 == temp1:\n            break\n        for j in range(n):\n            temp1[j] = temp2[j]\n        lst = temp2.copy()\n        res.append(lst)\n    Q = int(input())\n    for q in range(Q):\n        (x, k) = map(int, input().split())\n        if k < len(res):\n            print(res[k][x - 1])\n        else:\n            print(res[-1][x - 1])", "def fun():\n    import collections\n    for _ in range(int(input())):\n        n = int(input())\n        v = list(map(int, input().split()))\n        arr = []\n        temp = v\n        while len(arr) == 0 or temp != v:\n            arr.append(list(v))\n            temp = list(v)\n            cnt = collections.Counter(v)\n            for i in range(len(v)):\n                v[i] = cnt[v[i]]\n        q = int(input())\n        while q:\n            (x, k) = map(int, input().split())\n            if k >= len(arr):\n                k = len(arr) - 1\n            print(arr[k][x - 1])\n            q -= 1\n    return\nfun()", "from collections import Counter\nfor _ in range(int(input())):\n    i = int(input())\n    l = list(map(int, input().split()))\n    log = []\n    log.append(l)\n    for x in range(15):\n        tem = Counter(l)\n        l = [tem[x] for x in l]\n        log.append(l)\n    for __ in range(int(input())):\n        (x, k) = map(int, input().split())\n        if k > 15:\n            k = 15\n        print(log[k][x - 1])", "import math\nfrom collections import Counter\nimport copy\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    q = int(input())\n    Dict = {}\n    Dict[0] = [i for i in arr]\n    change = 0\n    ma = 1\n    prev = arr\n    while True:\n        count = Counter(prev)\n        temp = []\n        change = 0\n        for i in range(n):\n            if prev[i] != count[prev[i]]:\n                change = 1\n            temp.append(count[prev[i]])\n        if change == 0:\n            break\n        Dict[ma] = temp\n        prev = temp\n        ma += 1\n    for i in range(q):\n        (a, k) = [int(i) for i in input().split()]\n        if k >= ma:\n            print(prev[a - 1])\n        else:\n            print(Dict[k][a - 1])", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = []\n    l1.append(l)\n    for x in range(15):\n        t = Counter(l)\n        l = [t[x] for x in l]\n        l1.append(l)\n    y = int(input())\n    for __ in range(y):\n        (x, k) = map(int, input().split())\n        if k > 15:\n            k = 15\n        print(l1[k][x - 1])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    ans = [lst]\n    while True:\n        lst1 = []\n        dic = {}\n        for j in lst:\n            dic[j] = 0\n        for j in lst:\n            dic[j] += 1\n        for h in lst:\n            lst1.append(dic[h])\n        if lst1 == ans[-1]:\n            break\n        else:\n            ans.append(lst1)\n            lst = lst1.copy()\n    l = len(ans)\n    q = int(input())\n    for j in range(q):\n        (x, k) = map(int, input().split())\n        if k <= l - 1:\n            print(ans[k][x - 1])\n        else:\n            print(ans[-1][x - 1])", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mp = defaultdict(int)\n    for i in a:\n        mp[i] += 1\n    ta = a.copy()\n    p = 0\n    ans = []\n    while True:\n        ans.append(a.copy())\n        tmp = defaultdict(int)\n        for i in range(n):\n            a[i] = mp[a[i]]\n            tmp[a[i]] += 1\n        p += 1\n        if ta == a:\n            break\n        ta = a.copy()\n        mp = tmp\n    for __ in range(int(input())):\n        (x, k) = map(int, input().split())\n        if k >= p:\n            print(ans[-1][x - 1])\n        else:\n            print(ans[k][x - 1])", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    l.append(list(map(int, input().split())))\n    y = []\n    y = l.copy()\n    p = 0\n    while True:\n        f = 2001 * [0]\n        for i in l[p]:\n            f[i] += 1\n        y = []\n        for i in range(n):\n            y.append(f[l[p][i]])\n        l.append(y)\n        if l[-1] == l[-2]:\n            break\n        p += 1\n    q = int(input())\n    for i in range(q):\n        (x, k) = map(int, input().split())\n        if k >= len(l):\n            print(l[-1][x - 1])\n        else:\n            print(l[k][x - 1])", "import collections\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    prev = list(map(int, input().split()))\n    ck = True\n    curr = [0 for i in range(n)]\n    k = collections.Counter(prev)\n    cnt = 0\n    flag = 0\n    matrix = [prev]\n    while curr != prev:\n        for i in range(n):\n            if prev[i] in k:\n                curr[i] = k[prev[i]]\n        matrix.append(curr)\n        k = collections.Counter(curr)\n        cnt += 1\n        if prev == curr:\n            break\n        else:\n            prev = curr\n            curr = [0 for i in range(n)]\n    q = int(input())\n    for i in range(q):\n        (ax, k1) = map(int, input().split())\n        if k1 >= cnt:\n            print(matrix[cnt - 1][ax - 1])\n        else:\n            print(matrix[k1][ax - 1])", "import collections\nfrom math import ceil, gcd, sqrt, log\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    q = int(input())\n    net = collections.Counter(A)\n    table = [A]\n    for i in range(10):\n        B = []\n        for j in table[-1]:\n            B.append(net[j])\n        table.append(B)\n        net = collections.Counter(B)\n    for i in range(q):\n        (x, k) = map(int, input().split())\n        if k < 10:\n            print(table[k][x - 1])\n        else:\n            print(table[10][x - 1])\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "from collections import Counter\nimport random\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = Counter(arr)\n    kcc = [arr]\n    itcount = 0\n    while 1:\n        newarr = [d[i] for i in arr]\n        kcc.append(newarr)\n        if newarr == arr:\n            break\n        itcount += 1\n        arr = newarr\n        d = Counter(newarr)\n    q = int(input())\n    for _1 in range(q):\n        (x, k) = map(int, input().split())\n        if k < itcount:\n            print(kcc[k][x - 1])\n        else:\n            print(kcc[-1][x - 1])", "def freq(arr):\n    d = dict()\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    return d\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    a.append(list(map(int, input().split())))\n    i = 0\n    while True:\n        d = freq(a[i])\n        x = []\n        for j in a[i]:\n            x.append(d[j])\n        a.append(x)\n        if a[-1] == a[-2]:\n            break\n        i += 1\n    z = len(a) - 1\n    q = int(input())\n    for q1 in range(q):\n        (x, k) = map(int, input().split())\n        if k >= z:\n            print(a[z][x - 1])\n        else:\n            print(a[k][x - 1])", "for _ in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    prev = -1\n    ans = [0, 1]\n    p = []\n    p += l\n    while ans[-1] != ans[-2]:\n        d = dict()\n        for i in range(len(l)):\n            if l[i] in d:\n                d[l[i]] += 1\n            else:\n                d[l[i]] = 1\n        ex = []\n        for i in range(len(l)):\n            l[i] = d[l[i]]\n            ex.append(l[i])\n        ans.append(ex)\n    ans.pop(0)\n    ans.pop(0)\n    ans.pop(-1)\n    ans = [p] + ans\n    q = int(input())\n    for k in range(q):\n        (ind, k) = map(int, input().split())\n        if k >= len(ans):\n            k = -1\n        print(ans[k][ind - 1])", "import sys\nfrom collections import Counter\n_DEBUG = False\nif _DEBUG:\n    fd = open('input.txt', 'r')\n    sys.stdin = fd\n\ndef find_next(A, n):\n    d = Counter(A)\n    Anext = A.copy()\n    for i in range(n):\n        Anext[i] = d[A[i]]\n    if Anext == A:\n        return (Anext, True)\n    else:\n        return (Anext, False)\nfor t in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    Acopy = A.copy()\n    states = []\n    states.append(A)\n    i = 0\n    while True:\n        (A, flag) = find_next(A, n)\n        if flag:\n            break\n        else:\n            states.append(A)\n        i += 1\n    (nrows, ncols) = (len(states), len(states[0]))\n    Q = int(input())\n    for q in range(Q):\n        tup = input().split()\n        (j, i) = map(int, tup)\n        if i < nrows:\n            print(states[i][j - 1])\n        else:\n            print(states[nrows - 1][j - 1])\nfd.close() if _DEBUG else None", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    di = Counter(a)\n    arr = [a]\n    a1 = []\n    for i in range(n):\n        a1.append(di[a[i]])\n    arr.append(a1)\n    i = 1\n    while True:\n        di = Counter(arr[i])\n        a2 = []\n        for j in range(n):\n            a2.append(di[arr[i][j]])\n        if a2 == arr[-1]:\n            break\n        arr.append(a2)\n        i += 1\n    size = len(arr)\n    q = int(input())\n    for i in range(q):\n        (x, k) = map(int, input().split())\n        if k < size:\n            print(arr[k][x - 1])\n        else:\n            print(arr[-1][x - 1])", "import collections as coll\nfor testcase in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split(' ')]\n    q = int(input())\n    log = [a]\n    for i in range(1, 16):\n        freq = coll.Counter(log[i - 1])\n        log.append([freq[log[i - 1][j]] for j in range(n)])\n    for i in range(q):\n        (x, k) = [int(_) for _ in input().split(' ')]\n        if k > 15:\n            k = 15\n        print(log[k][x - 1])", "from collections import Counter\nfor _ in range(int(input())):\n    i = int(input())\n    l = list(map(int, input().split()))\n    log = []\n    log.append(l)\n    for x in range(15):\n        tem = Counter(l)\n        l = [tem[x] for x in l]\n        log.append(l)\n    for __ in range(int(input())):\n        (x, k) = map(int, input().split())\n        if k > 15:\n            k = 15\n        print(log[k][x - 1])", "from collections import Counter\nfor _ in range(int(input())):\n    i = int(input())\n    l = list(map(int, input().split()))\n    log = [l]\n    for x in range(15):\n        tem = Counter(l)\n        l = [tem[x] for x in l]\n        log.append(l)\n    for __ in range(int(input())):\n        (x, k) = map(int, input().split())\n        if k > 15:\n            k = 15\n        print(log[k][x - 1])", "import math\nimport random\nfrom collections import Counter\nfor t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    q = int(input())\n    cnt = Counter(arr)\n    query = []\n    query += [arr]\n    bool = False\n    iter = 0\n    iter2 = 0\n    prevarr = arr[:]\n    xnt = 0\n    querarr = []\n    querarr += [arr]\n    while True:\n        newarr = []\n        for i in range(n):\n            newarr += [cnt[prevarr[i]]]\n        if newarr == prevarr:\n            break\n        querarr += [newarr]\n        xnt += 1\n        cnt = Counter(newarr)\n        prevarr = newarr[:]\n    for i in range(q):\n        (x, k) = map(int, input().split())\n        if k == 0:\n            print(arr[x - 1])\n            continue\n        if k >= xnt:\n            print(querarr[xnt][x - 1])\n            continue\n        if k < xnt:\n            print(querarr[k][x - 1])\n            continue", "from collections import *\nfor _ in range(int(input())):\n    input()\n    l = list(map(int, input().split()))\n    d = {0: l}\n    for i in range(1, 16):\n        c = Counter(d[i - 1])\n        d[i] = [c[j] for j in d[i - 1]]\n    for i in range(int(input())):\n        (x, y) = map(int, input().split())\n        print(d[y][x - 1] if y < 15 else d[15][x - 1])", "T = int(input())\nfor test in range(1, T + 1):\n    N = int(input())\n    A = [int(S) for S in input().split()]\n    status = [A[:]]\n    for step in range(1, N + 1):\n        newStat = status[-1][:]\n        count = {}\n        for num in newStat:\n            if num not in count:\n                count[num] = 0\n            count[num] += 1\n        for idx in range(len(newStat)):\n            newStat[idx] = count[newStat[idx]]\n        if newStat == status[-1]:\n            break\n        status.append(newStat)\n    queries = int(input())\n    for query in range(queries):\n        (idx, after) = [int(S) for S in input().split()]\n        if after < len(status):\n            print(status[after][idx - 1])\n        else:\n            print(status[-1][idx - 1])", "import copy\n\ndef arr_eq(arr1, arr2):\n    for (a, b) in zip(arr1, arr2):\n        if a != b:\n            return False\n    return True\n\ndef do():\n    n = int(input())\n    arr = [int(n) for n in input().split()]\n    hist = [copy.copy(arr)]\n    while True:\n        vals = {}\n        for n in arr:\n            if n not in vals:\n                vals[n] = 0\n            vals[n] += 1\n        new_arr = [vals[n] for n in arr]\n        if arr_eq(new_arr, hist[-1]):\n            break\n        hist.append(copy.copy(new_arr))\n        arr = new_arr\n    q = int(input())\n    while q > 0:\n        temp = [int(i) for i in input().split()]\n        (x, k) = (temp[0] - 1, temp[1])\n        if k < len(hist):\n            print(hist[k][x])\n        else:\n            print(hist[-1][x])\n        q -= 1\nt = int(input())\nwhile t > 0:\n    do()\n    t -= 1", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    li = []\n    li.append(a)\n    for i in range(n):\n        d = dict()\n        for i in range(n):\n            if a[i] in d:\n                d[a[i]] += 1\n            else:\n                d[a[i]] = 1\n        b = []\n        for i in range(n):\n            b.append(d[a[i]])\n        if b == a:\n            li.append(b)\n            break\n        else:\n            li.append(b)\n            a = b\n    le = len(li)\n    q = int(input())\n    for i in range(q):\n        (x, k) = map(int, input().split())\n        if k < le:\n            print(li[k][x - 1])\n        else:\n            print(li[-1][x - 1])", "import collections\nfrom math import ceil, gcd, sqrt, log\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    q = int(input())\n    net = collections.Counter(A)\n    table = [A]\n    for i in range(20):\n        B = []\n        for j in table[-1]:\n            B.append(net[j])\n        table.append(B)\n        net = collections.Counter(B)\n    for i in range(q):\n        (x, k) = map(int, input().split())\n        if k < 20:\n            print(table[k][x - 1])\n        else:\n            print(table[20][x - 1])\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "from collections import defaultdict\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = []\n    while True:\n        d = defaultdict(lambda : 0)\n        ans.append(a.copy())\n        for j in a:\n            d[j] += 1\n        eq = True\n        for j in d.keys():\n            if d[j] != j:\n                eq = False\n        for j in range(n):\n            a[j] = d[a[j]]\n        if eq:\n            ans.append(a)\n            break\n    l = len(ans)\n    for j in range(int(input())):\n        (x, k) = map(int, input().split())\n        if k < l:\n            print(ans[k][x - 1])\n        else:\n            print(ans[-1][x - 1])", "def fre(arr, n):\n    d = dict()\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    return d\nfor _ in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    arr = []\n    arr.append(l)\n    while True:\n        d = fre(arr[-1], n)\n        l = []\n        for i in arr[-1]:\n            l.append(d[i])\n        arr.append(l)\n        if arr[-1] == arr[-2]:\n            break\n    for abcd in range(int(input())):\n        (x, k) = map(int, input().split())\n        if k >= len(arr) - 1:\n            print(arr[len(arr) - 1][x - 1])\n        else:\n            print(arr[k][x - 1])", "import copy\nt = int(input())\nwhile t:\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    temp = copy.deepcopy(a)\n    s = [temp]\n    while True:\n        b = 0\n        dic = {}\n        for x in a:\n            if x in dic:\n                dic[x] += 1\n            else:\n                dic[x] = 1\n        for i in range(n):\n            if a[i] != dic[a[i]]:\n                b = 1\n            a[i] = dic[a[i]]\n        s.append(copy.deepcopy(a))\n        if b == 0:\n            break\n    for i in range(q):\n        (x, k) = map(int, input().split())\n        if k < len(s):\n            print(s[k][x - 1])\n        else:\n            print(s[-1][x - 1])\n    t -= 1", "from collections import Counter\nfor _ in range(int(input())):\n    i = int(input())\n    l = list(map(int, input().split()))\n    log = []\n    log.append(l)\n    for x in range(15):\n        tem = Counter(l)\n        l = [tem[x] for x in l]\n        log.append(l)\n    for __ in range(int(input())):\n        (x, k) = map(int, input().split())\n        if k > 15:\n            k = 15\n        print(log[k][x - 1])", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    list1 = [int(num) for num in input().split()]\n    q = int(input())\n    grid = [list1]\n    while 1:\n        dict1 = {}\n        for i in range(0, n):\n            if list1[i] in dict1:\n                dict1[list1[i]] += 1\n            else:\n                dict1[list1[i]] = 1\n        new = []\n        for i in range(0, n):\n            new.append(dict1[list1[i]])\n        if new != grid[len(grid) - 1]:\n            grid.append(new)\n            list1 = new\n        else:\n            break\n    for i in range(0, q):\n        inputs1 = [int(num) for num in input().split()]\n        k = inputs1[1]\n        if k < len(grid):\n            print(grid[k][inputs1[0] - 1])\n        else:\n            print(grid[len(grid) - 1][inputs1[0] - 1])", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    arr = []\n    cr = []\n    for i in range(n):\n        cr.append(a[i])\n    arr.append(a)\n    while True:\n        ar = [0] * (n + 5)\n        for i in range(n):\n            ar[cr[i]] += 1\n        for i in range(n):\n            cr[i] = ar[cr[i]]\n        if cr == arr[-1]:\n            break\n        else:\n            ex = []\n            for i in cr:\n                ex.append(i)\n            arr.append(ex)\n    n1 = len(arr)\n    q = int(input())\n    for _ in range(q):\n        (x, k) = map(int, input().split())\n        if k > n1 - 1:\n            k = n1 - 1\n        print(arr[k][x - 1])", "def getarr(d, n):\n    arr = [0 for i in range(n)]\n    for k in d.keys():\n        for v in d[k]:\n            arr[v] = k\n    return arr\n\ndef f(arr):\n    d = {}\n    for i in range(len(arr)):\n        if arr[i] in d:\n            d[arr[i]].append(i)\n        else:\n            d[arr[i]] = [i]\n    change = True\n    iter = 0\n    ans = {}\n    n = len(arr)\n    while change:\n        ans[iter] = getarr(d, n)\n        flag = False\n        d1 = {}\n        for k in d.keys():\n            count = len(d[k])\n            if count != k:\n                flag = True\n            if count not in d1:\n                d1[count] = d[k]\n            else:\n                d1[count] = d1[count] + d[k]\n        if flag:\n            change = True\n            iter += 1\n        else:\n            change = False\n        d = d1\n    return {'iter': iter, 'final': getarr(d, n), 'arr': ans}\nres = f([2, 1, 1, 4, 3, 1, 2])\ntc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    q = int(input())\n    result = f(arr)\n    n_iter = result['iter']\n    final_arr = result['final']\n    inter = result['arr']\n    for q1 in range(q):\n        (a, b) = list(map(int, input().split()))\n        a -= 1\n        if b >= n_iter:\n            print(final_arr[a])\n        else:\n            print(inter[b][a])", "from collections import defaultdict, Counter\nfrom queue import PriorityQueue, Queue\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    transformation = [a]\n    u = Counter(a)\n    while True:\n        change = False\n        b = [0] * n\n        for i in range(n):\n            if u[transformation[-1][i]] != transformation[-1][i]:\n                b[i] = u[transformation[-1][i]]\n                change = True\n            else:\n                b[i] = transformation[-1][i]\n        if change:\n            transformation.append(b)\n            u = Counter(b)\n        else:\n            break\n    for _ in range(q):\n        (x, k) = map(int, input().split())\n        print(transformation[min(len(transformation) - 1, k)][x - 1])", "from collections import Counter\n\ndef mgc(a):\n    fans = [a]\n    ans = []\n    while True:\n        b = Counter(a)\n        ans = []\n        for i in a:\n            ans.append(b[i])\n        if fans[-1] == ans:\n            break\n        fans.append(ans)\n        a = ans\n    return fans\n\ndef query(fans, x, k):\n    if k >= len(fans):\n        return fans[-1][x - 1]\n    return fans[k][x - 1]\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    fans = mgc(a)\n    for i in range(q):\n        (x, k) = map(int, input().split())\n        print(query(fans, x, k))", "from collections import Counter\n\ndef test_case():\n    n = input()\n    a = [int(i) for i in input().split()]\n    pos = dict()\n    steps = [a]\n    seen = set(a)\n    while True:\n        count = Counter(a)\n        b = tuple([count[i] for i in a])\n        if b in seen:\n            break\n        seen.add(b)\n        pos[b] = len(steps)\n        steps.append(b)\n        a = tuple(b)\n    q = int(input())\n    posa = pos[a]\n    for i in range(q):\n        (x, k) = (int(i) for i in input().split())\n        if k <= posa:\n            print(steps[k][x - 1])\n        else:\n            k -= posa\n            k %= len(steps) - posa\n            print(steps[k + posa][x - 1])\n\ndef main():\n    tc = int(input())\n    for i in range(tc):\n        test_case()\nmain()", "from copy import deepcopy as copy\nfor _ in range(int(input())):\n    n = int(input())\n    f = [0 for i in range(n + 1)]\n    x = list(map(int, input().split()))\n    for i in x:\n        f[i] += 1\n    ans = [x]\n    while 1:\n        f2 = [0 for i in range(n + 1)]\n        y = [0 for i in range(n)]\n        for i in range(n):\n            y[i] = f[x[i]]\n            f2[y[i]] += 1\n        f = f2\n        if x == y:\n            break\n        x = y\n        ans += [y]\n    q = int(input())\n    for i in range(q):\n        (iq, kq) = map(int, input().split())\n        if kq >= len(ans):\n            kq = -1\n        print(ans[kq][iq - 1])", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    line = [int(ch) for ch in input().split()]\n    q = int(input())\n    (l, line1) = ([line], [])\n    while True:\n        b = Counter(line)\n        line1 = []\n        for j in line:\n            line1.append(b[j])\n        if l[-1] == line1:\n            break\n        l.append(line1)\n        line = line1\n    for j in range(q):\n        (x, y) = map(int, input().split())\n        if y >= len(l):\n            print(l[-1][x - 1])\n        else:\n            print(l[y][x - 1])", "def change(astring):\n    alist = [astring]\n    while True:\n        adict = {i: astring.count(i) for i in set(astring)}\n        astring2 = [adict[i] for i in astring]\n        if astring2 == astring:\n            break\n        astring = astring2\n        alist.append(astring)\n    return alist\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    astring = list(map(int, input().split()))\n    alist = change(astring)\n    count = len(alist)\n    q = int(input())\n    for _ in range(q):\n        (x, k) = map(int, input().split())\n        print(alist[min(k, count - 1)][x - 1])", "t = int(input())\nfor ii in range(t):\n    n = int(input())\n    aa = []\n    a = list(map(int, input().split()))\n    l3 = list()\n\n    def fun(l1, l2):\n        l2 = []\n        d = {}\n        for i in l1:\n            if i in d.keys():\n                d[i] += 1\n            else:\n                d[i] = 1\n        for i in l1:\n            l2.append(d[i])\n        l3.append(l1)\n        if l1 == l2:\n            return\n        else:\n            return fun(l2, l2)\n    q = int(input())\n    fun(a, [])\n    for iii in range(q):\n        (x, y) = list(map(int, input().split()))\n        if y >= len(l3):\n            print(l3[-1][x - 1])\n        else:\n            print(l3[y][x - 1])", "from collections import Counter\n\ndef ca(array, l, a=True):\n    while a == True:\n        ll = dict(Counter(array))\n        for i in range(0, len(array)):\n            array[i] = ll[array[i]]\n        gl[l] = array[:]\n        if l > 2:\n            if gl[l - 1] == gl[l]:\n                a = False\n        l += 1\nfor _ in range(int(input())):\n    n = int(input())\n    array = list(map(int, input().split()))\n    l = 1\n    gl = {0: array[:]}\n    array = ca(array, l, a=True)\n    gl = list(gl.values())\n    for __ in range(int(input())):\n        (a, b) = map(int, input().split())\n        if len(gl) - 1 < b:\n            cc = gl[-1][a - 1]\n            print(cc)\n        else:\n            cc = gl[b][a - 1]\n            print(cc)", "t = int(input())\nwhile t:\n    n = int(input())\n    L = input().split()\n    f = [0]\n    g = [0]\n    c = 0\n    fin = [[]]\n    for i in range(n):\n        f.append(0)\n        g.append(0)\n        L[i] = int(L[i])\n        fin[-1].append(L[i])\n    for i in range(n):\n        f[L[i]] += 1\n    for i in range(1, n + 1):\n        g[f[i]] += 1\n    for i in range(1, n + 1):\n        if i * g[i] != 0:\n            if i * g[i] != i:\n                g[i * g[i]] += 1\n                g[i] = 0\n                c += 1\n    for j in range(c + 1):\n        for i in range(n):\n            L[i] = f[L[i]]\n        for i in range(n + 1):\n            f[i] = 0\n        for i in range(n):\n            f[L[i]] += 1\n        fin.append([])\n        for i in range(n):\n            fin[-1].append(L[i])\n    q = int(input())\n    while q:\n        (x, k) = [int(i) for i in input().split()]\n        x -= 1\n        if k <= c:\n            print(fin[k][x])\n        else:\n            print(fin[-1][x])\n        q -= 1\n    t -= 1", "from collections import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = ([*R()],)\n    (q,) = R()\n    for _ in [0] * 11:\n        c = Counter((b := a[-1]))\n        a += ([c[x] for x in b],)\n    while q:\n        q -= 1\n        (x, k) = R()\n        print(a[min(k, 10)][x - 1])", "for _ in range(int(input())):\n    n = int(input())\n    xd = []\n    xd += [list(map(int, input().split()))]\n    while True:\n        xd += [[]]\n        temp = {}\n        for i in range(n):\n            temp[xd[-2][i]] = temp.setdefault(xd[-2][i], 0) + 1\n        for i in range(n):\n            xd[-1] += [temp[xd[-2][i]]]\n        if xd[-1] == xd[-2]:\n            break\n    for _ in range(int(input())):\n        (x, k) = map(int, input().split())\n        if k >= len(xd):\n            print(xd[-1][x - 1])\n        else:\n            print(xd[k][x - 1])", "from collections import defaultdict, deque\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    adj = []\n    steps = 0\n    while True:\n        prev = [i for i in a]\n        f = [0 for i in range(n + 1)]\n        adj.append(prev)\n        for x in a:\n            f[x] += 1\n        for i in range(n):\n            a[i] = f[a[i]]\n        if a == prev:\n            break\n        steps += 1\n    q = int(input())\n    for i in range(q):\n        (x, k) = map(int, input().split())\n        x -= 1\n        k = min(steps, k)\n        print(adj[k][x])", "from collections import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = ([*R()],)\n    (q,) = R()\n    for _ in [0] * 11:\n        c = Counter((b := a[-1]))\n        a += ([c[x] for x in b],)\n    while q:\n        q -= 1\n        (x, k) = R()\n        print(a[min(k, 10)][x - 1])", "from collections import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = ([*R()],)\n    (q,) = R()\n    for _ in [0] * 11:\n        c = Counter((b := a[-1]))\n        a += ([c[x] for x in b],)\n    while q:\n        q -= 1\n        (x, k) = R()\n        print(a[min(k, 10)][x - 1])", "from collections import Counter\n\ndef check_equal(a1, a2, n):\n    for i in range(n):\n        if a1[i] != a2[i]:\n            return False\n    return True\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    states = [arr]\n    si = 0\n    while True:\n        st = states[si]\n        d = Counter(st)\n        next_state = [0] * n\n        for i in range(n):\n            next_state[i] = d[st[i]]\n        states.append(next_state)\n        si += 1\n        if check_equal(next_state, st, n):\n            break\n    q = int(input())\n    for ii in range(q):\n        (x, k) = map(int, input().split())\n        k = min(k, len(states) - 1)\n        print(states[k][x - 1])", "T = int(input().strip())\nfor t in range(T):\n    n = int(input().strip())\n    array = list(map(int, input().strip().split()))\n    q = int(input().strip())\n    table = [array]\n    while True:\n        last = table[-1]\n        freq = {}\n        for num in last:\n            if num not in freq:\n                freq[num] = 0\n            freq[num] += 1\n        finished = True\n        for num in freq:\n            if freq[num] != num:\n                finished = False\n                break\n        if finished:\n            break\n        next_array = []\n        for num in last:\n            next_array.append(freq[num])\n        table.append(next_array)\n    for query in range(q):\n        (x, k) = list(map(int, input().strip().split()))\n        x -= 1\n        if k >= len(table):\n            print(table[-1][x])\n        else:\n            print(table[k][x])", "aCount = int(input())\nfor a in range(aCount):\n    aSize = int(input())\n    array = list(map(int, input().split()))\n    qCount = int(input())\n    transforms = [array]\n    repeatTransformIndex = 0\n    for q in range(qCount):\n        s = input().split()\n        Xi = int(s[0])\n        Ki = int(s[1])\n        lastTransformIndex = len(transforms) - 1\n        if Ki > lastTransformIndex and repeatTransformIndex == 0:\n            lastTransform = transforms[lastTransformIndex]\n            for k in range(lastTransformIndex, Ki):\n                vCounts = {}\n                for v in lastTransform:\n                    if v in vCounts:\n                        vCounts[v] = vCounts[v] + 1\n                    else:\n                        vCounts[v] = 1\n                newTransform = []\n                for v in lastTransform:\n                    newTransform.append(vCounts[v])\n                if newTransform != lastTransform:\n                    transforms.append(newTransform)\n                    lastTransform = newTransform\n                else:\n                    repeatTransformIndex = k\n                    break\n        if repeatTransformIndex > 0:\n            print(transforms[min(Ki, repeatTransformIndex)][Xi - 1])\n        else:\n            print(transforms[min(Ki, len(transforms) - 1)][Xi - 1])", "from collections import Counter\nfor _ in range(int(input())):\n    i = int(input())\n    l = list(map(int, input().split()))\n    log = [l]\n    for x in range(15):\n        tem = Counter(l)\n        l = [tem[x] for x in l]\n        log.append(l)\n    for __ in range(int(input())):\n        (x, k) = map(int, input().split())\n        print(log[min(15, k)][x - 1])", "from collections import *\ng = lambda : map(int, input().split())\n(t,) = g()\nwhile t:\n    t -= 1\n    g()\n    a = ([*g()],)\n    (q,) = g()\n    for _ in [0] * 11:\n        c = Counter((b := a[-1]))\n        a += ([c[x] for x in b],)\n    while q:\n        q -= 1\n        (x, k) = g()\n        print(a[min(k, 10)][x - 1])", "from collections import *\ng = lambda : map(int, input().split())\n(t,) = g()\nwhile t:\n    t -= 1\n    g()\n    a = ([*g()],)\n    (q,) = g()\n    for y in [0] * 11:\n        c = Counter((b := a[-1]))\n        a += ([c[x] for x in b],)\n    while q:\n        q -= 1\n        (x, k) = g()\n        print(a[min(k, 10)][x - 1])", "from collections import Counter\n\ndef read_nums():\n    return [int(x) for x in input().split()]\n\ndef run_step(nums):\n    res = []\n    counter = Counter(nums)\n    for num in nums:\n        res.append(counter[num])\n    return res\n\ndef run_steps(nums):\n    res = [nums.copy()]\n    while True:\n        new_arr = run_step(res[-1])\n        if new_arr == res[-1]:\n            break\n        res.append(new_arr)\n    return res\n\ndef solve():\n    (n,) = read_nums()\n    nums = read_nums()\n    answers = run_steps(nums)\n    (q,) = read_nums()\n    for _ in range(q):\n        (x, k) = read_nums()\n        k = min(k, len(answers) - 1)\n        print(answers[k][x - 1])\n\ndef main():\n    (t,) = read_nums()\n    for _ in range(t):\n        solve()\nmain()", "from collections import Counter\nfor i in range(int(input())):\n    n = int(input())\n    a = input().split()\n    nw_lst = []\n    nw_lst.append(a)\n    dct = Counter(a)\n    while True:\n        lst2 = []\n        for i in nw_lst[-1]:\n            lst2.append(dct[i])\n        if lst2 == nw_lst[-1]:\n            break\n        else:\n            dct = Counter(lst2)\n            nw_lst.append(lst2)\n    q = int(input())\n    for i in range(q):\n        (x, k) = map(int, input().split())\n        t = len(nw_lst)\n        if k < t:\n            print(nw_lst[k][x - 1])\n        else:\n            print(nw_lst[-1][x - 1])", "from collections import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = ([*R()],)\n    (q,) = R()\n    for _ in [0] * 11:\n        c = Counter((b := a[-1]))\n        a += ([c[x] for x in b],)\n    while q:\n        q -= 1\n        (x, k) = R()\n        print(a[min(k, 10)][x - 1])", "from collections import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = ([*R()],)\n    (q,) = R()\n    for _ in [0] * 10:\n        c = Counter((b := a[-1]))\n        a += ([c[x] for x in b],)\n    while q:\n        q -= 1\n        (x, k) = R()\n        print(a[min(k, 10)][x - 1])", "from collections import Counter\nfor _ in range(int(input())):\n    i = int(input())\n    l = list(map(int, input().split()))\n    log = [l]\n    for x in range(15):\n        tem = Counter(l)\n        l = [tem[x] for x in l]\n        log.append(l)\n    for __ in range(int(input())):\n        (x, k) = map(int, input().split())\n        print(log[min(15, k)][x - 1])", "n_cases = int(input())\nfor j in range(n_cases):\n    arr_len = int(input())\n    arr_s = input()\n    q_num = int(input())\n    arr = []\n    steps = []\n    for nino in arr_s.split(' '):\n        arr.append(int(nino))\n    steps += arr\n    idrb = True\n    while idrb:\n        idrb = False\n        arr_k = {}\n        for c in range(1, arr_len + 1):\n            arr_k[c] = 0\n        for b in arr:\n            arr_k[b] += 1\n        for s in range(arr_len):\n            key = arr[s]\n            if arr_k[key] != key:\n                idrb = True\n                arr[s] = arr_k[key]\n        if idrb:\n            steps += arr\n    for d in range(q_num):\n        q = input().split(' ')\n        a = int(q[0])\n        k = int(q[1])\n        leno = int(len(steps) / arr_len)\n        if k >= leno:\n            k = leno - 1\n        index = k * arr_len + (a - 1)\n        print(str(steps[index]))", "n_cases = int(input())\nfor j in range(n_cases):\n    arr_len = int(input())\n    arr_s = input()\n    q_num = int(input())\n    arr = []\n    steps = []\n    for nino in arr_s.split(' '):\n        arr.append(int(nino))\n    steps += arr\n    idrb = True\n    while idrb:\n        idrb = False\n        arr_k = {}\n        for c in range(1, arr_len + 1):\n            arr_k[c] = 0\n        for b in arr:\n            arr_k[b] += 1\n        for s in range(arr_len):\n            key = arr[s]\n            if arr_k[key] != key:\n                idrb = True\n                arr[s] = arr_k[key]\n        if idrb:\n            steps += arr\n    for d in range(q_num):\n        q = input().split(' ')\n        a = int(q[0])\n        k = int(q[1])\n        leno = int(len(steps) / arr_len)\n        if k >= leno:\n            k = leno - 1\n        index = k * arr_len + (a - 1)\n        print(steps[index])", "from collections import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = ([*R()],)\n    (q,) = R()\n    for _ in [0] * 11:\n        c = Counter((b := a[-1]))\n        a += ([c[x] for x in b],)\n    while q:\n        q -= 1\n        (x, k) = R()\n        print(a[min(k, 10)][x - 1])", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    arr = [[0 for i in range(n)] for j in range(50)]\n    a = list(map(int, input().strip().split()))\n    arr[0] = a.copy()\n    for i in range(1, 50):\n        mp = [0 for i in range(n + 1)]\n        for x in arr[i - 1]:\n            mp[x] += 1\n        for j in range(n):\n            arr[i][j] = mp[arr[i - 1][j]]\n    q = int(input())\n    for i in range(q):\n        (id, k) = map(int, input().strip().split())\n        k = min(k, 45)\n        print(arr[k][id - 1])", "class Solution:\n\n    def __init__(self, arr=None):\n        self.initalArr = []\n        self.currentDict = {}\n        for i in arr:\n            if i in self.currentDict:\n                self.currentDict[i] += 1\n            else:\n                self.currentDict[i] = 1\n        if arr:\n            self.initalArr.append(arr)\n            for j in range(20):\n                new = []\n                for i in range(len(self.initalArr[-1])):\n                    new.append(self.currentDict[self.initalArr[-1][i]])\n                self.initalArr.append(new)\n                newDict = {}\n                for i in new:\n                    if i in newDict:\n                        newDict[i] += 1\n                    else:\n                        newDict[i] = 1\n                self.currentDict = newDict\n\n    def transformation(self, x: int, k: int):\n        if len(self.initalArr) > k:\n            return self.initalArr[k][x - 1]\n        else:\n            return self.initalArr[-1][x - 1]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    obj = Solution(arr)\n    query = int(input())\n    for __ in range(query):\n        (x, k) = list(map(int, input().split()))\n        print(obj.transformation(x, k))", "t = int(input())\nfor tc in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        try:\n            d[arr[i]] += 1\n        except:\n            d[arr[i]] = 1\n    res = [arr]\n    tmp = []\n    for i in range(n):\n        tmp.append(d[arr[i]])\n    res.append(tmp)\n    while True:\n        d = {}\n        for i in range(n):\n            try:\n                d[res[-1][i]] += 1\n            except:\n                d[res[-1][i]] = 1\n        tmp = []\n        for i in range(n):\n            tmp.append(d[res[-1][i]])\n        if tmp == res[-1]:\n            break\n        res.append(tmp)\n    q = int(input())\n    for j in range(q):\n        (x, k) = map(int, input().split())\n        try:\n            print(res[k][x - 1])\n        except:\n            print(res[-1][x - 1])", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    t = [s.copy()]\n    while True:\n        c = Counter(s)\n        for i in range(n):\n            s[i] = c[s[i]]\n        if s == t[-1]:\n            break\n        else:\n            t += [s.copy()]\n    mxlen = len(t) - 1\n    for i in range(int(input())):\n        (q, w) = map(int, input().split())\n        w = min(w, mxlen)\n        print(t[w][q - 1])", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    k = int(input())\n    track = []\n    track.append(arr[:])\n    for _ in range(15):\n        dp = {}\n        for i in arr:\n            if i in dp:\n                dp[i] += 1\n            else:\n                dp[i] = 1\n        for j in range(n):\n            arr[j] = dp[arr[j]]\n        track.append(arr[:])\n    for _ in range(k):\n        try:\n            (x, y) = map(int, input().split())\n            print(track[y][x - 1])\n        except:\n            print(track[-1][x - 1])"]