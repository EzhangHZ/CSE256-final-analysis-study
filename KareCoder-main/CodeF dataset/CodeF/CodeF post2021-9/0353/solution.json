["from collections import deque\nfrom collections import OrderedDict\nimport queue\nimport heapq\nimport math\nfrom re import I\nimport sys\nsys.setrecursionlimit(10 ** 6)\n\ndef sf():\n    return [int(x) for x in input().split(' ')]\n\ndef sfi():\n    return int(input())\n\ndef sfs():\n    return input()\n\ndef printf(x):\n    print(x)\n    sys.stdout.flush()\n\ndef main():\n    t = sfi()\n    for tc in range(t):\n        fr = {}\n        n = sfi()\n        ls = sf()\n        sm = sum(ls) << 1\n        if sm % len(ls):\n            print('0')\n            continue\n        tot = int(sm / len(ls))\n        res = 0\n        for i in ls:\n            x = tot - i\n            if x in fr:\n                res += fr[x]\n            if i in fr:\n                fr[i] += 1\n            else:\n                fr[i] = 1\n        print(res)\nmain()", "def getPairsCount(arr, n, sum):\n    unordered_map = {}\n    count = 0\n    for i in range(n):\n        if sum - arr[i] in unordered_map:\n            count += unordered_map[sum - arr[i]]\n        if arr[i] in unordered_map:\n            unordered_map[arr[i]] += 1\n        else:\n            unordered_map[arr[i]] = 1\n    return count\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    ave = s / n * 2\n    if int(ave) != ave:\n        print(0)\n    else:\n        co = getPairsCount(a, n, int(ave))\n        print(co)", "def getPairsCount(arr, n, sum):\n    unordered_map = {}\n    count = 0\n    for i in range(n):\n        if sum - arr[i] in unordered_map:\n            count += unordered_map[sum - arr[i]]\n        if arr[i] in unordered_map:\n            unordered_map[arr[i]] += 1\n        else:\n            unordered_map[arr[i]] = 1\n    return count\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a) / n\n    s = 2 * s\n    if int(s) == s:\n        print(getPairsCount(a, n, int(s)))\n    else:\n        print(0)", "def solve(n, a):\n    s2 = sum(a) * 2\n    if s2 % n:\n        return 0\n    target = s2 // n\n    d = {}\n    res = 0\n    for v in a:\n        diff = target - v\n        count = d.get(diff, 0)\n        res += count\n        count = d.get(v, 0)\n        d[v] = count + 1\n    return res\nt = int(input())\nfor i_t in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    print(solve(n, a))", "def getPairsCount(arr, n, sum):\n    unordered_map = {}\n    count = 0\n    for i in range(n):\n        if sum - arr[i] in unordered_map:\n            count += unordered_map[sum - arr[i]]\n        if arr[i] in unordered_map:\n            unordered_map[arr[i]] += 1\n        else:\n            unordered_map[arr[i]] = 1\n    return count\n\ndef solve(arr, n):\n    sm = sum(arr)\n    mean = sm / n\n    val = round(sm - mean * (n - 2), 3)\n    if int(val) != val:\n        return 0\n    return getPairsCount(arr, n, int(val))\nfor i in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    print(solve(arr, n))", "for t in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    numbers = {}\n    ans = 0\n    sum_ = 2 * sum(a)\n    if sum_ % n != 0:\n        print(0)\n        continue\n    tk = sum_ // n\n    for num in a:\n        if tk - num in numbers:\n            ans += numbers[tk - num]\n        if num not in numbers:\n            numbers[num] = 0\n        numbers[num] += 1\n    print(ans)", "from collections import Counter as co\n\ndef f():\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = sum(l)\n    if 2 * s % n:\n        return 0\n    d = co(l)\n    c = 0\n    x = 2 * s // n\n    for i in d:\n        if x - i in d:\n            if i != x - i:\n                c += d[i] * d[x - i]\n            else:\n                c += d[i] * (d[i] - 1)\n    return c // 2\nfor _ in range(int(input())):\n    print(f())", "import math\n\ndef check(nums, numsDict):\n    s = sum(nums)\n    l = len(nums)\n    if s * (l - 2) % l != 0:\n        return 0\n    else:\n        target = s - s * (l - 2) // l\n        return twoSum(numsDict, target)\n\ndef twoSum(numsDict, target):\n    res = 0\n    for n in numsDict:\n        if target - n in numsDict:\n            if n < target - n:\n                res += numsDict[n] * numsDict[target - n]\n            elif n == target - n:\n                res += math.comb(numsDict[n], 2)\n    return res\n\ndef main():\n    numOfTest = int(input())\n    res = []\n    for _ in range(numOfTest):\n        input()\n        nums = list(map(int, input().split()))\n        numsDict = {}\n        for n in nums:\n            if n in numsDict:\n                numsDict[n] += 1\n            else:\n                numsDict[n] = 1\n        res.append(check(nums, numsDict))\n    print(*res, sep='\\n')\nmain()", "def solve():\n    n = int(input())\n    try:\n        arr = list(map(int, input().split()))\n        sm = sum(arr)\n        ans = 0\n        avg = float(sm / n) * 2\n        temp = dict()\n        for i in range(n):\n            if avg - arr[i] in temp:\n                ans += temp[avg - arr[i]]\n            if arr[i] in temp:\n                temp[arr[i]] += 1\n            else:\n                temp[arr[i]] = 1\n        print(ans)\n    except EOFError as e:\n        print('Error')\nfor case in range(int(input())):\n    solve()", "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\n\ndef solve(nums):\n    n = len(nums)\n    sum_ = sum(nums)\n    nm = sum_ / n\n    esum_ = nm * (n - 2)\n    diff = sum_ - esum_\n    count = 0\n    c = defaultdict(int)\n    for i in nums:\n        x = diff - i\n        if x in c:\n            count += c[x]\n        c[i] += 1\n    print(count)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    solve(nums)", "for _ in range(int(input())):\n    n = int(input())\n    d = {}\n    l = list(map(int, input().split()))\n    s = sum(l) * 2\n    ans = 0\n    if s % n == 0:\n        s = s // n\n        for i in range(n):\n            temp = s - l[i]\n            if temp in d:\n                ans += d[temp]\n            if l[i] in d:\n                d[l[i]] += 1\n            else:\n                d[l[i]] = 1\n    print(ans)", "from collections import defaultdict\n\ndef main():\n    n = int(input())\n    l = list(map(int, input().split()))\n    mean = 2 * sum(l) / n\n    d = defaultdict(int)\n    ans = 0\n    for x in l:\n        if mean - x in d:\n            ans += d[mean - x]\n        d[x] += 1\n    print(ans)\nfor _ in range(int(input())):\n    main()", "def mgc(a, n):\n    x = 2 * sum(a) / n\n    mp = {}\n    ans = 0\n    for i in a:\n        if x - i in mp:\n            ans += mp[x - i]\n        if i in mp:\n            mp[i] += 1\n        else:\n            mp[i] = 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(mgc(a, n))", "from collections import defaultdict\n\ndef twoSum(a_list, target):\n    res = 0\n    candi = defaultdict(int)\n    for num in a_list:\n        if num in candi:\n            res += candi[num]\n        candi[target - num] += 1\n    return res\nn_case = int(input())\nfor _ in range(n_case):\n    n = int(input())\n    a_list = list(map(int, input().split(' ')))\n    avg = sum(a_list) * 2 / n\n    if int(avg) != avg:\n        print(0)\n    else:\n        print(twoSum(a_list, avg))", "t = int(input())\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    avg = sum(arr) / n\n    target = avg + avg\n    d = dict()\n    ans = 0\n    for i in arr:\n        comp = target - i\n        if comp in d.keys():\n            ans += d[comp]\n        if i not in d.keys():\n            d[i] = 1\n        else:\n            d[i] += 1\n    print(ans)\nfor i in range(t):\n    solve()", "def delete_2_ints(n: int, a: list):\n    sum_of_2_ints = sum(a) * 2 / n\n    return count_twoSum(a, sum_of_2_ints)\n\ndef count_twoSum(my_list: list, k: int):\n    my_map = {}\n    for i in my_list:\n        if i in my_map:\n            my_map[i] += 1\n        else:\n            my_map[i] = 1\n    res = 0\n    for i in my_list:\n        my_k = k - i\n        if my_k == i:\n            res += my_map[my_k] - 1\n        elif my_k in my_map:\n            res += my_map[my_k]\n    return int(res / 2)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(delete_2_ints(n, a))", "n = int(input())\nfor e in range(n):\n    n1 = int(input())\n    l1 = list(map(int, input().split()))\n    q = sum(l1) / len(l1)\n    q2 = q * 2\n    if q2 - int(q2) != 0:\n        print(0)\n    else:\n        q2 = int(q2)\n        h = {}\n        c = 0\n        for i in range(len(l1)):\n            x = q2 - l1[i]\n            if x in h:\n                c += h[x]\n            if l1[i] in h:\n                h[l1[i]] += 1\n            else:\n                h[l1[i]] = 1\n        print(c)", "def solve():\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    s = sum(arr)\n    ss = 2 * s / n\n    if not ss.is_integer():\n        print(0)\n        return\n    ss = int(ss)\n    c_map = {}\n    for i in arr:\n        if i not in c_map:\n            c_map[i] = 0\n        c_map[i] += 1\n    count = 0\n    for (i, j) in c_map.items():\n        if ss - i in c_map:\n            if ss - i == i:\n                count += j * (j - 1)\n            else:\n                count += j * c_map[ss - i]\n    print(int(count / 2))\nt = int(input())\nfor i in range(t):\n    solve()", "q = int(input())\nfor _ in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict()\n    for x in a:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    s = sum(a)\n    if s * (n - 2) % n != 0:\n        print(0)\n        continue\n    else:\n        t = s * (n - 2) // n\n        ans = 0\n        for x in a:\n            y = s - t - x\n            if x == y:\n                ans += d[y] - 1\n            elif y in d:\n                ans += d[y]\n        print(ans // 2)", "def getcount(arr, n, sum):\n    m = {}\n    count = 0\n    for i in range(n):\n        if sum - arr[i] in m:\n            count += m[sum - arr[i]]\n        if arr[i] in m:\n            m[arr[i]] += 1\n        else:\n            m[arr[i]] = 1\n    return count\nfor x in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = sum(arr)\n    avg = s / n\n    df = s - avg * (n - 2)\n    ans = getcount(arr, n, df)\n    print(ans)", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    k = 2 * sum(a) / len(a)\n    d = {}\n    r = 0\n    for x in a:\n        r += d.get(k - x, 0)\n        d[x] = d.get(x, 0) + 1\n    print(r)", "for iteration in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    sum_a = sum(a)\n    k = sum_a / n\n    if k * 10 % 5 != 0:\n        print(0)\n        continue\n    pairs = {}\n    total = 0\n    required = 2 * k\n    for element in a:\n        total += pairs.get(required - element, 0)\n        if element in pairs.keys():\n            pairs[element] += 1\n        else:\n            pairs[element] = 1\n    print(total)", "t = int(input())\nsolution = []\nfor testCase in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    s = sum(nums)\n    if 2 * s % n != 0:\n        solution.append(0)\n        continue\n    desiredSum = 2 * s // n\n    numMap = {}\n    ans = 0\n    for num in nums:\n        if desiredSum - num in numMap:\n            ans += numMap[desiredSum - num]\n        if num in numMap:\n            numMap[num] += 1\n        else:\n            numMap[num] = 1\n    solution.append(ans)\nfor ans in solution:\n    print(ans)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    s = sum(l)\n    x = float(s * 2 / n)\n    if not x.is_integer():\n        print(0)\n        continue\n    x = int(x)\n    i = 0\n    black_list = set()\n    c = Counter(l)\n    for (v, vv) in c.items():\n        w = x - v\n        if w == v:\n            if vv > 1:\n                i += sum(range(vv))\n        elif w in c.keys():\n            i += c[w] * vv / 2\n    print(int(i))", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    k = 2 * sum(a) / len(a)\n    d = {}\n    r = 0\n    for x in a:\n        r += d.get(k - x, 0)\n        d[x] = d.get(x, 0) + 1\n    print(r)", "def handler(nums):\n    mean = sum(nums) / len(nums)\n    target = 2 * mean\n    dict = {}\n    for i in range(len(nums)):\n        if dict.get(nums[i]) is not None:\n            dict[nums[i]] += 1\n        else:\n            dict[nums[i]] = 1\n    count = 0\n    for key in dict:\n        if 2 * key <= target:\n            if 2 * key == target:\n                count += (dict[key] - 1) * dict[key] / 2\n            elif target - key in dict:\n                count += dict[key] * dict[target - key]\n    return count\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    print(int(handler(nums)))", "import collections\n\ndef is_equal(a, b):\n    return a == b\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    total = sum(arr)\n    avg = total / n\n    pairs = 0\n    if is_equal(avg, (total - 2 * avg) / (n - 2)):\n        target = avg * 2\n        ctr = collections.Counter(arr)\n        for el in ctr:\n            if el < avg:\n                pairs += ctr[el] * ctr[target - el]\n            elif el == avg:\n                pairs += ctr[el] * (ctr[target - el] - 1) // 2\n    print(pairs)", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    k = 2 * sum(a) / len(a)\n    d = {}\n    r = 0\n    for x in a:\n        r += d.get(k - x, 0)\n        d[x] = d.get(x, 0) + 1\n    print(r)", "def pairs_count(arr, n, sum):\n    ans = 0\n    arr = sorted(arr)\n    (i, j) = (0, n - 1)\n    while i < j:\n        if arr[i] + arr[j] < sum:\n            i += 1\n        elif arr[i] + arr[j] > sum:\n            j -= 1\n        else:\n            x = arr[i]\n            xx = i\n            while i < j and arr[i] == x:\n                i += 1\n            y = arr[j]\n            yy = j\n            while j >= i and arr[j] == y:\n                j -= 1\n            if x == y:\n                temp = i - xx + yy - j - 1\n                ans += temp * (temp + 1) // 2\n            else:\n                ans += (i - xx) * (yy - j)\n    return ans\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(float, input().split()))\n    s = sum(a) / n\n    summ = float(sum(a) - s * (n - 2))\n    print(pairs_count(a, n, summ))", "def getPairsCount(arr, n, sum):\n    unordered_map = {}\n    count = 0\n    for i in range(n):\n        if sum - arr[i] in unordered_map:\n            count += unordered_map[sum - arr[i]]\n        if arr[i] in unordered_map:\n            unordered_map[arr[i]] += 1\n        else:\n            unordered_map[arr[i]] = 1\n    return count\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(float, input().split()))\n    s = sum(a) / n\n    summ = float(sum(a) - s * (n - 2))\n    print(getPairsCount(a, n, summ))", "for _ in range(int(input())):\n    a = int(input())\n    l = list(map(int, input().split()))\n    k = sum(l)\n    k = k * 2\n    if k % a:\n        print(0)\n    else:\n        dic = {}\n        k = k // a\n        out = 0\n        for i in range(a):\n            b = k - l[i]\n            if b in dic:\n                out += dic[b]\n            if l[i] not in dic:\n                dic[l[i]] = 1\n            else:\n                dic[l[i]] += 1\n        print(out)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    k = 2 * s / n\n    d = {}\n    r = 0\n    for x in a:\n        r += d.get(k - x, 0)\n        d[x] = d.get(x, 0) + 1\n    print(r)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = sum(arr)\n    twoSum = 2 * s / n\n    hashmap = {}\n    cnt = 0\n    for e in arr:\n        if twoSum - e in hashmap:\n            cnt += hashmap[twoSum - e]\n        if e in hashmap:\n            hashmap[e] += 1\n        else:\n            hashmap[e] = 1\n    print(cnt)", "def getPairsCount(arr, n, sum):\n    unordered_map = {}\n    count = 0\n    for i in range(n):\n        if sum - arr[i] in unordered_map:\n            count += unordered_map[sum - arr[i]]\n        if arr[i] in unordered_map:\n            unordered_map[arr[i]] += 1\n        else:\n            unordered_map[arr[i]] = 1\n    return count\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    temp = 2 * sum(arr)\n    for i in range(n):\n        arr[i] *= n\n    ans = getPairsCount(arr, n, temp)\n    print(ans)", "def cnt(arr, n, summ):\n    count = 0\n    mdict = {}\n    for i in range(n):\n        if summ - arr[i] in mdict:\n            count += mdict[summ - arr[i]]\n        if arr[i] in mdict:\n            mdict[arr[i]] += 1\n        else:\n            mdict[arr[i]] = 1\n    print(count)\nfor _ in range(int(input())):\n    n = int(input())\n    grid = list(map(int, input().split()))\n    res = 2 * sum(grid) / n\n    cnt(grid, n, res)", "from typing import Counter\nimport sys\nfrom collections import defaultdict as dd\nfrom math import *\n\ndef vinp():\n    return map(int, input().split())\n\ndef linp():\n    return list(map(int, input().split()))\n\ndef sinp():\n    return input()\n\ndef inp():\n    return int(input())\n\ndef mod(f):\n    return f % 1000000007\n\ndef pr(*x):\n    print(*x)\n\ndef finp():\n    f = open('input.txt', 'r')\n    f = f.read().split('\\n')\n    return f\n\ndef finp():\n    f = open('input.txt', 'r')\n    f = f.read().split('\\n')\n    return f\n\ndef fout():\n    return open('output.txt', 'w')\n\ndef fpr(f, x):\n    f.write(x + '\\n')\n\ndef csort(c):\n    sorted(c.items(), key=lambda pair: pair[1], reverse=True)\n\ndef indc(l, n):\n    c = {}\n    for i in range(n):\n        c[l[i]] = c.get(l[i], []) + [i + 1]\n    return c\n\ndef co(l, n, k):\n    temp = {}\n    f = 0\n    for i in range(n):\n        if k - l[i] in temp:\n            f += temp[k - l[i]]\n        if l[i] in temp:\n            temp[l[i]] += 1\n        else:\n            temp[l[i]] = 1\n    return f\ncou = inp()\nfor _ in range(cou):\n    n = inp()\n    l = linp()\n    s = sum(l)\n    pr(co(l, n, s - s / n * (n - 2)))", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    k = 2 * sum(a) / len(a)\n    d = {}\n    r = 0\n    for x in a:\n        r += d.get(k - x, 0)\n        d[x] = d.get(x, 0) + 1\n    print(r)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = sum(arr)\n    twoSum = s - s / n * (n - 2)\n    hashmap = {}\n    cnt = 0\n    for e in arr:\n        if twoSum - e in hashmap:\n            cnt += hashmap[twoSum - e]\n        if e in hashmap:\n            hashmap[e] += 1\n        else:\n            hashmap[e] = 1\n    print(cnt)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    target = 2 * sum(arr) / n\n    d = {}\n    ans = 0\n    for el in arr:\n        if target - el in d:\n            ans += d[target - el]\n        if el not in d:\n            d[el] = 0\n        d[el] += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    res = {}\n    s = 0\n    n = int(input())\n    arr = list(map(int, input().split()))\n    k = sum(arr) * 2\n    if k % n:\n        print(0)\n        continue\n    k //= n\n    for i in arr:\n        e = k - i\n        if e < 0:\n            continue\n        s += res.get(e, 0)\n        res[i] = res.get(i, 0) + 1\n    print(s)", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nfrom collections import Counter\ninp_vars_int = lambda : map(int, input().split())\ninp_list_int = lambda : list(map(int, input().split()))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = inp_list_int()\n    cnt = Counter(a)\n    res = 0\n    k = sum(a) / len(a)\n    for num in cnt:\n        if num > k:\n            res += cnt[num] * cnt[2 * k - num]\n    res += cnt[k] * (cnt[k] - 1) // 2\n    print(res)", "from math import *\nfrom math import factorial as fact, comb as ncr\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom array import array\nfrom collections import Counter as ctr\nfrom collections import deque as dq\nli = lambda : list(map(int, input().split()))\narr = lambda a: array('i', a)\nbi = lambda n: bin(n).replace('0b', '')\n\ndef solve():\n    for _ in range(int(input())):\n        n = int(input())\n        a = li()\n        pn = {}\n        c = 0\n        s = 2 * (sum(a) / n)\n        if int(s) == s:\n            for i in range(n):\n                if s - a[i] in pn:\n                    c += pn[s - a[i]]\n                if a[i] in pn:\n                    pn[a[i]] += 1\n                else:\n                    pn[a[i]] = 1\n            print(c)\n        else:\n            print(0)\nsolve()", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    k = 2 * sum(a) / len(a)\n    d = {}\n    r = 0\n    for x in a:\n        r += d.get(k - x, 0)\n        d[x] = d.get(x, 0) + 1\n    print(r)", "import sys\nimport collections\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = collections.Counter(a)\n    avg = sum(a) / n\n    ans = 0\n    for x in cnt:\n        y = avg * 2 - x\n        if x == y:\n            ans += (cnt[x] - 1) * cnt[x] // 2\n        elif x < y:\n            ans += cnt[x] * cnt[y]\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "import sys\nfrom collections import defaultdict\n\ndef del_two_element(n, a):\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    n = len(a)\n    s = sum(a)\n    p = 2 * s // n\n    n_pair = 0\n    d = defaultdict(lambda : 0)\n    if (s - p) * n != s * (n - 2):\n        return 0\n    for i in a:\n        x = p - i\n        n_pair += d[x]\n        d[i] += 1\n    return n_pair\nt = int(sys.stdin.readline())\nfor _ in range(0, t):\n    n = map(int, input())\n    a = sys.stdin.readline().split()\n    print(del_two_element(n, a))"]