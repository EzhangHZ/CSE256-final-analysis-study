["import sys\n\ndef solve():\n    MOD = 32768\n    dp = [None] * MOD\n    dp[0] = 0\n    q = [0]\n    qi = 0\n    while qi < len(q):\n        x = q[qi]\n        qi += 1\n        tmp = [(x - 1) % MOD]\n        if x % 2 == 0:\n            tmp.append(x // 2)\n            tmp.append(x // 2 + MOD // 2)\n        for y in tmp:\n            if dp[y] is None:\n                dp[y] = dp[x] + 1\n                q.append(y)\n    inp = sys.stdin.readline\n    n = int(inp())\n    print(' '.join((str(dp[i]) for i in map(int, inp().split()))))\n\ndef main():\n    solve()\nmain()", "T = int(input())\noutp = []\nglobal md\nmd = 32768\nglobal dct\ndct = md * [-1]\ndct[0] = 0\n\ndef maxdiv(i):\n    p = 0\n    while not i % 2 ** p:\n        p += 1\n    return p - 1\n\ndef val(i):\n    if dct[i] >= 0:\n        return dct[i]\n    else:\n        optA = 1 + val((i + 1) % md)\n        optB = 15 - maxdiv(i)\n        vl = min(optA, optB)\n        dct[i] = vl\n        return vl\nfor i in range(md - 1, 0, -1):\n    _ = val(i)\nA = [int(c) for c in input().split(' ')]\nfor n in A:\n    outp.append(dct[n])\nprint(' '.join([str(c) for c in outp]))", "N = 32768\ndp = [0] * (N + 1)\nst = [0] * (N + 1)\nq = [N]\nst[0] = 1\ndp[0] = 0\nst[q[0]] = 1\nwhile q:\n    uq = []\n    for i in q:\n        if not st[i - 1]:\n            uq.append(i - 1)\n            dp[i - 1] = dp[i] + 1\n            st[i - 1] = 1\n        if not i % 2:\n            (a, b) = (i // 2, (i + 32768) // 2)\n            if not st[a]:\n                uq.append(a)\n                dp[a] = dp[i] + 1\n                st[a] = 1\n            if not st[b]:\n                uq.append(b)\n                dp[b] = dp[i] + 1\n                st[b] = 1\n    q = uq\ndp[N] = 1\nn = int(input())\nll = list(map(int, input().split()))\nfor i in range(N + 1):\n    if 16 == dp[i]:\n        print(i)\nfor i in ll:\n    print(dp[i], end=' ')", "n = int(input())\na = map(int, input().split())\nc = 32768\narr = [[] for i in range(c)]\nfor i in range(c):\n    arr[(i + 1) % c].append(i)\n    arr[2 * i % c].append(i)\ndist = [-1] * c\nactive = [0]\ncounter = 0\nwhile len(active) != 0:\n    nextactive = []\n    for at in active:\n        if dist[at] == -1:\n            dist[at] = counter\n            for e in arr[at]:\n                nextactive.append(e)\n    active = nextactive.copy()\n    counter += 1\nfor j in a:\n    print(dist[j], end=' ')", "lim = 32768\ndp = [15] * lim\ndp[0] = 0\nfor i in range(1, lim):\n    b = bin(i)\n    b = b[::-1]\n    for j in range(len(b)):\n        if b[j] == '1':\n            dp[i] = 15 - j\n            break\ndp[-1] = 1\ni = 32766\nwhile i > 0:\n    dp[i] = min(dp[i], dp[i + 1] + 1)\n    i -= 1\nn = int(input())\narr = list(map(int, input().split()))\nfor z in arr:\n    print(dp[z], end=' ')\nprint()", "def calc():\n    to_do = [32768]\n    res[32768] = 0\n    res[0] = 0\n    n = []\n    full = dict()\n    while to_do:\n        old = to_do[0]\n        n.clear()\n        if old > 0:\n            n.append(old - 1)\n        if not old & 1 and old:\n            n.append(old // 2)\n            n.append((32768 + old) // 2)\n        to_do.pop(0)\n        tmp = res[old]\n        for item in n:\n            if res[item] == 'a':\n                res[item] = res[old] + 1\n                full[item] = res[old] + 1\n                to_do.append(item)\n                if item > 32767:\n                    item = item % 32768\n                    res[item] = res[old] + 1\n                    full[item] = res[old] + 1\n                    to_do.append(item)\nn = int(input())\nres = ['a'] * 32769\ncalc()\na = [int(x) for x in input().split()]\nfor i in a:\n    print(res[i], end=' ')", "dp = [15] * 32768\nfor i in range(1, 32768):\n    b = bin(i)\n    b = b[::-1]\n    for j in range(len(b)):\n        if b[j] == '1':\n            dp[i] = 15 - j\n            break\ndp[0] = 0\ndp[32767] = 1\ni = 32766\nwhile i > 0:\n    dp[i] = min(dp[i], dp[i + 1] + 1)\n    i -= 1\nn = int(input())\narr = list(map(int, input().split()))\nfor z in arr:\n    print(dp[z], end=' ')\nprint()", "import copy\nimport math\n\ndef xx(y):\n    s = bin(y)\n    an = 0\n    for i in reversed(range(len(s))):\n        if s[i] == '1':\n            an = i\n            break\n    return len(s) - an\nd = [100000000] * 32769\nd[32768] = 0\nd[0] = 0\nfor i in reversed(range(32768)):\n    d[i] = min(d[i + 1] + 1, 16 - xx(i))\nd[0] = 0\nka = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in a:\n    ans.append(d[i])\nprint(*ans)", "from collections import *\nans = 32768\na = [-1 for i in range(ans + 8)]\nl = [[] for i in range(ans + 8)]\ns = deque([])\nfor i in range(ans):\n    l[(i + 1) % ans].append(i)\n    l[i * 2 % ans].append(i)\na[0] = 0\ns.append(0)\nwhile s:\n    x = s.popleft()\n    for temp in l[x]:\n        if a[temp] == -1:\n            a[temp] = a[x] + 1\n            s.append(temp)\nfor _ in range(1):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in l:\n        print(a[i], end=' ')", "import collections\nn = int(input())\na = list(map(int, input().strip().split()))\ngraph = collections.defaultdict(list)\nMOD = 32768\nfor i in range(1, MOD):\n    graph[(i + 1) % MOD].append(i)\n    graph[(i << 1) % MOD].append(i)\nque = collections.deque([0])\ndist = [0] * MOD\nwhile que:\n    curNode = que.popleft()\n    for nxtNode in graph[curNode]:\n        if dist[nxtNode] == 0:\n            que.append(nxtNode)\n            dist[nxtNode] = dist[curNode] + 1\nfor i in range(n):\n    print(dist[a[i]], end=' ')", "def solvecff():\n    n = int(input())\n    lis = [int(i) for i in input().split()]\n    from collections import defaultdict\n    a = {i: -1 for i in range(32768)}\n    mod = 32768\n    l = [[i] for i in range(mod)]\n    for i in range(mod):\n        l[(i + 1) % mod].append(i)\n        l[i * 2 % mod].append(i)\n    a[0] = 0\n    s = []\n    s.append(0)\n    while len(s) != 0:\n        x = s[0]\n        s.pop(0)\n        for tmp in l[x]:\n            if a[tmp] == -1:\n                a[tmp] = a[x] + 1\n                s.append(tmp)\n    ans = []\n    for i in lis:\n        ans.append(str(a[i]))\n    print(' '.join(ans))\nsolvecff()", "seen = set()\ncost = {}\nm = 2 ** 15\nqueue = [(0, 0)]\nwhile len(queue) > 0:\n    (v, distance) = queue.pop(0)\n    if v in seen:\n        continue\n    seen.add(v)\n    cost[v] = distance\n    if v % 2 == 0:\n        queue.append(((v + m) // 2, distance + 1))\n        queue.append((v // 2, distance + 1))\n    queue.append(((v - 1) % m, distance + 1))\nn = int(input())\na = map(int, input().split())\nprint(' '.join([str(cost[x]) for x in a]))", "import functools\nLIM = 32768\n\n@functools.lru_cache(None)\ndef _solve_with_2(n):\n    a = 0\n    while n:\n        n = n % LIM * 2 % LIM\n        a += 1\n    return a\n\n@functools.lru_cache(None)\ndef solve(n):\n    if n == 0:\n        return 0\n    return min(1 + solve((n + 1) % LIM), _solve_with_2(n))\nn = int(input())\nfor i in range(LIM - 1, -1, -1):\n    solve(i)\narr = list(map(int, input().split()))\nprint(' '.join(list(map(str, map(solve, arr)))))", "import heapq\n\ndef solution(m):\n    ans = {i: 20 for i in range(m)}\n    ans[0] = 0\n    visited = set()\n    q = [(0, 0)]\n    while q:\n        (d, r) = heapq.heappop(q)\n        if not r in visited:\n            visited.add(r)\n            ans[r] = d\n        a = (r - 1) % m\n        if not a in visited:\n            heapq.heappush(q, (d + 1, a))\n        if r % 2 == 0:\n            (b, c) = (r // 2, (m + r) // 2)\n            if not b in visited:\n                heapq.heappush(q, (d + 1, b))\n            if c != b and (not c in visited):\n                heapq.heappush(q, (d + 1, c))\n    return ans\nn = int(input())\nl = [int(k) for k in input().split(' ')]\ndistances = solution(32768)\nd = [distances[k] for k in l]\nans = ''\nfor c in d:\n    ans += ' '\n    ans += str(c)\nprint(ans[1:])", "import sys\ninput = lambda : sys.stdin.readline()[:-1]\nni = lambda : int(input())\nna = lambda : list(map(int, input().split()))\nyes = lambda : print('yes')\nYes = lambda : print('Yes')\nYES = lambda : print('YES')\nno = lambda : print('no')\nNo = lambda : print('No')\nNO = lambda : print('NO')\nn = ni()\nm = 32768\ndist = [float('inf') for i in range(m)]\ndist[0] = 0\nfrom collections import deque\ndq = deque([0])\ng = [[] for i in range(m)]\nfor i in range(m):\n    g[(i + 1) % m].append(i)\n    g[i * 2 % m].append(i)\nwhile dq:\n    e = dq.popleft()\n    for f in g[e]:\n        if dist[f] == float('inf'):\n            dist[f] = dist[e] + 1\n            dq.append(f)\na = na()\nprint(*[dist[a[i]] for i in range(n)])", "import math\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    pre = [0 for i in range(32769)]\n    for i in range(1, 32769):\n        ans = 0\n        n = i\n        while n % 32768 != 0:\n            ans += 1\n            n = n * 2\n        pre[i] = ans\n    for i in range(2, 32769):\n        x = 1\n        j = i - 1\n        while j >= 1 and pre[j] > pre[i] + x:\n            pre[j] = pre[i] + x\n            x += 1\n            j -= 1\n    ans = []\n    for x in arr:\n        ans.append(pre[x])\n    print(*ans)\nsolve()", "dp = [15] * 32768\nfor i in range(1, 32768):\n    x = i\n    n = 0\n    while x > 0:\n        n += 1\n        x = x * 2 % 32768\n    dp[i] = n\ndp[0] = 0\ndp[32767] = 1\ni = 32766\nwhile i > 0:\n    dp[i] = min(dp[i], dp[i + 1] + 1)\n    i -= 1\nn = int(input())\narr = list(map(int, input().split()))\nfor z in arr:\n    print(dp[z], end=' ')\nprint()", "dp = [15] * 32768\nfor i in range(0, 32768):\n    x = i\n    n = 0\n    while x > 0:\n        n += 1\n        x = x * 2 % 32768\n    dp[i] = n\ndp[32767] = 1\nfor i in reversed(range(1, 32767)):\n    dp[i] = min(dp[i], dp[i + 1] + 1)\nn = int(input())\narr = list(map(int, input().split()))\nfor z in arr:\n    print(dp[z], end=' ')\nprint()", "answers = [15] * 32768\nfor i in range(0, 32768):\n    x = i\n    n = 0\n    while x > 0:\n        n += 1\n        x = x * 2 % 32768\n    answers[i] = n\nanswers[32767] = 1\nfor i in reversed(range(1, 32767)):\n    t = answers[i + 1] + 1\n    if t < answers[i]:\n        answers[i] = t\nn = int(input())\na = list(map(int, input().split()))\nfor x in a:\n    print(answers[x], end=' ')\nprint()", "def fill(pow):\n    d = [pow for _ in range(2 ** pow)]\n    d[0] = 0\n    for p in range(pow, 0, -1):\n        for k in range(2 ** (pow - p)):\n            d[k * 2 ** p] = min(d[k * 2 ** p], pow - p)\n    return d\npow = 15\nmod = 2 ** pow\nd = fill(pow)\nn = int(input())\na = [int(x) for x in input().split()]\nans = []\nfor i in range(n):\n    opts = [d[(a[i] + j) % mod] + j for j in range(pow)]\n    ans.append(min(opts))\nprint(*ans, sep=' ')", "def get_two(num):\n    n = num\n    tws1 = 0\n    while not n % 2 == 1:\n        tws1 += 1\n        n //= 2\n    return tws1\ninput()\nnum = map(int, input().split())\nnum = list(num)\n\ndef get_min(n):\n    if n == 0:\n        return 0\n    ans = 15\n    for i in range(15):\n        ans1 = i + 15 - get_two(n + i)\n        if ans1 < ans:\n            ans = ans1\n    return ans\nprint(*[get_min(i) for i in num])", "from queue import Queue\nN = 32768\nf = [0 if i == 0 else -1 for i in range(N)]\ne = [[] for i in range(N)]\nfor i in range(N):\n    e[(i + 1) % N].append(i)\n    e[2 * i % N].append(i)\nq = Queue()\nq.put(0)\nwhile q.qsize() != 0:\n    u = q.get()\n    for v in e[u]:\n        if f[v] == -1:\n            f[v] = f[u] + 1\n            q.put(v)\ninput()\nprint(' '.join(map(lambda x: str(f[int(x)]), input().split())))", "def count_two(element: int):\n    count = 0\n    while element % 2 == 0:\n        count += 1\n        element //= 2\n        if count == 15:\n            break\n    return count\n\ndef calculate():\n    op = []\n    for i in range(N):\n        minimum = float('inf')\n        for j in range(15):\n            if (arr[i] + j) % 2 == 0:\n                a = count_two(arr[i] + j)\n                ans = 15 - a\n                ans += j\n            else:\n                ans = 15\n            if ans < minimum:\n                minimum = ans\n        op.append(minimum)\n    return op\nN = int(input())\narr = list(map(int, input().split()))\nprint(' '.join(map(str, calculate())))", "import sys, os.path\nimport math\nif os.path.exists('Input.txt'):\n    sys.stdin = open('Input.txt', 'r')\n    sys.stdout = open('Output.txt', 'w')\n\ndef operation(a):\n    if a == 0:\n        return 0\n    ans = float('inf')\n    for i in range(15):\n        (value, op) = (a + i, 0)\n        while value % 2 == 0:\n            value = value // 2\n            op += 1\n        ans = min(ans, 15 - op + i)\n    return ans\nn = int(input())\na = list(map(int, input().split()))\nans = [operation(i) for i in a]\nprint(*ans)", "n = int(input())\nl = [*map(int, input().split())]\nstep = 15\nl1 = list((i for i in range(1, 16)))\nA = lambda x: 2 ** x\nl2 = list(map(A, l1))\nfor a in l:\n    step_minus = 0\n    for i in range(15):\n        if a % l2[i] == 0:\n            if step_minus < i + 1:\n                step_minus = i + 1\n        elif l2[i] - a % l2[i] < i + 1:\n            if step_minus < i + 1 - (l2[i] - a % l2[i]):\n                step_minus = i + 1 - (l2[i] - a % l2[i])\n    print(step - step_minus, end=' ')", "def CCircle(s1):\n    for i in s1:\n        if i == 0:\n            print(0, end=' ')\n            continue\n        cnt = 15\n        for addOneCnt in range(15):\n            cur = i + addOneCnt\n            pow_cnt = 0\n            while cur % 2 == 0:\n                cur = cur // 2\n                pow_cnt += 1\n            cnt = min(cnt, addOneCnt + (15 - pow_cnt))\n        print(cnt, end=' ')\ncases_cnt = int(input())\ns1 = [int(x) for x in input().strip().split(' ')]\nres = CCircle(s1)", "n = int(input())\nl = map(int, input().split())\nans = ''\nfor i in l:\n    x = []\n    for j in range(16):\n        x.append(-i % 2 ** j + 15 - j)\n    ans += str(min(x)) + ' '\nprint(ans)", "n = int(input())\nl = map(int, input().split())\nans = ''\nfor i in l:\n    x = []\n    for j in range(16):\n        x.append(-i % 2 ** j + 15 - j)\n    ans += str(min(x)) + ' '\nprint(ans)", "from math import ceil, log\nres = []\nint(input())\nl = list(map(int, input().split()))\nc = 32768\n\ndef nexp(i, max):\n    exp = ceil(log(i, 2))\n    if 2 ** exp - i < 15 and 2 ** exp - i + 15 - exp < 15:\n        return 2 ** exp - i + 15 - exp\n    else:\n        tmp = i\n        steps = 0\n        if i % 2 != 0:\n            i += 1\n            steps += 1\n        while i % c != 0:\n            if steps > max:\n                return max + 1\n            i *= 2\n            steps += 1\n        return steps\n\ndef minsteps(i):\n    exp = ceil(log(i, 2))\n    if i == 0:\n        return 0\n    else:\n        steps = 15\n        for j in range(15):\n            tmp = j + i\n            c = 0\n            while tmp % 2 == 0:\n                tmp /= 2\n                c += 1\n            steps = min(steps, j + 15 - c)\n        return steps\ns = ''\nfor i in l:\n    if i == 0:\n        s += '0 '\n    else:\n        steps = minsteps(i)\n        s += str(steps) + ' '\nprint(s)", "def solve(i, c):\n    if i % 32768 == 0:\n        return c\n    while i:\n        i = 2 * i % 32768\n        c = c + 1\n        if i == 0:\n            break\n    return c\n\ndef nextPowerOf2(n):\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n\nans = [0 for i in range(32789)]\nfor i in range(1, 32789):\n    ans[i] = solve(i, 0)\nfor _ in range(1):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    A = []\n    for i in a:\n        np = nextPowerOf2(i)\n        c = ans[i]\n        for j in range(i + 1, i + 12):\n            c = min(c, j - i + ans[j])\n        c = min(c, np - i + ans[np])\n        A.append(c)\n    print(*A)", "def ct(a):\n    n = a\n    ans = 0\n    while n % 2 == 0 and n > 1:\n        n //= 2\n        ans += 1\n    return ans\nn = int(input())\nl = list(map(int, input().split()))\nansl = list()\nfor i in range(n):\n    step = 15\n    if l[i] % 2 == 1:\n        temp = l[i]\n        pt = 1\n        while pt <= 15:\n            step = min(step, 15 - ct(l[i] + pt) + pt)\n            pt += 2\n    else:\n        temp = l[i]\n        pt = 0\n        while pt < 15:\n            step = min(step, 15 - ct(temp + pt) + pt)\n            pt += 2\n    ansl.append(min(step, (32768 - l[i]) % 32768))\nprint(*ansl)", "def get_cnt(n):\n    cnt = 0\n    while n % 2 == 0:\n        n //= 2\n        cnt += 1\n    return 15 - cnt\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    res = []\n    for x in a:\n        if x == 0:\n            res.append(0)\n            continue\n        cnt = 15\n        for j in range(16):\n            cnt = min(cnt, get_cnt(x + j) + j)\n        res.append(cnt)\n    print(*res)\nsolve()", "import random\nt = int(input())\nl = list(map(int, input().split()))\nanswers = []\nfor i in l:\n    minmovement = None\n    counter = 0\n    if i == 0:\n        answers.append('0')\n        continue\n    for j in range(i, i + 15):\n        numof2inprimefactorisation = 0\n        num = j\n        c = 0\n        while num % 2 == 0:\n            num = num // 2\n            c += 1\n        if minmovement == None:\n            minmovement = 15 - c + counter\n        elif minmovement > 15 - c + counter:\n            minmovement = 15 - c + counter\n        counter += 1\n    if i == 32768:\n        minmovement = 1\n    answers.append(str(minmovement))\nprint(' '.join(answers))", "def check_2(num):\n    res = 0\n    while num > 0:\n        if num % 2 == 0:\n            num = num // 2\n            res += 1\n        else:\n            break\n    return res\n\ndef min_steps(num):\n    if num == 0:\n        return 0\n    res = 15\n    for i in range(15):\n        cur = num + i\n        res = min(res, i + 15 - check_2(cur))\n    return res\nn = int(input())\ndata = input().strip().split(' ')\ndata = [int(e) for e in data]\nfor e in data:\n    print(min_steps(e), end=' ')", "def berat(x):\n    if x % 32768 == 0:\n        return 15\n    elif x % 16384 == 0:\n        return 14\n    elif x % 8192 == 0:\n        return 13\n    elif x % 4096 == 0:\n        return 12\n    elif x % 2048 == 0:\n        return 11\n    elif x % 1024 == 0:\n        return 10\n    elif x % 512 == 0:\n        return 9\n    elif x % 256 == 0:\n        return 8\n    elif x % 128 == 0:\n        return 7\n    elif x % 64 == 0:\n        return 6\n    elif x % 32 == 0:\n        return 5\n    elif x % 16 == 0:\n        return 4\n    elif x % 8 == 0:\n        return 3\n    elif x % 4 == 0:\n        return 2\n    elif x % 2 == 0:\n        return 1\n    else:\n        return 0\nn = int(input())\narr = list(map(int, input().split()))\ndp = [0] * 32769\nfor i in range(1, 32769):\n    dp[i] = berat(i)\nfor i in arr:\n    min1 = 15\n    if i == 0:\n        print(0)\n        continue\n    for j in range(0, 15):\n        if i + j > 32768:\n            break\n        temp = 15 - dp[i + j]\n        min1 = min(min1, temp + j)\n    print(min1, end=' ')", "import collections\nimport math\n\ndef ii():\n    return int(input())\n\ndef mi():\n    return map(int, input().split())\n\ndef li():\n    return list(map(int, input().split()))\nn = ii()\na = li()\nans = []\nfor i in a:\n    if i == 0:\n        ans.append(0)\n        continue\n    tmax = 0\n    for j in range(16):\n        t = 0\n        s = i + j\n        while s % 2 == 0:\n            t += 1\n            s //= 2\n        if t > j:\n            tmax = max(tmax, t - j)\n    ans.append(15 - tmax)\nprint(*ans)", "n = int(input())\nans = []\nfor value in map(int, input().split()):\n    if value == 0:\n        print(0)\n        continue\n    min_steps = float('inf')\n    for x in range(1, 16):\n        rem = value % (1 << x)\n        min_steps = min(min_steps, ((1 << x) - rem if rem else 0) + (15 - x))\n    print(min_steps, end=' ')", "def main() -> None:\n    MOD = 32768\n    count = [-1] * MOD\n    count[0] = 0\n    for j in range(100):\n        que = []\n        for i in range(MOD):\n            if count[i] != -1:\n                continue\n            if count[(i + 1) % MOD] != -1 or count[i * 2 % MOD] != -1:\n                que.append(i)\n        for i in que:\n            count[i] = j + 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    res = [count[x] for x in a]\n    print(*res)\nmain()", "from collections import Counter, deque\nimport math\nfrom random import randint\nfrom bisect import bisect\nimport sys\nimport re\nMOD = 32768\nMAX = sys.maxsize\nMIN = -sys.maxsize\n\nclass get:\n\n    def int():\n        return list(map(int, input().split()))\n\n    def str():\n        return input().split()\n\n    def float():\n        return list(map(float, input().split()))\n\n    def map():\n        return map(int, input().split())\n\ndef sqrt(x):\n    return int(math.sqrt(x)) + 1\n\ndef gcd(*args):\n    result = args[0]\n    for item in args:\n        result = math.gcd(result, item)\n    return result\n\ndef LCM(a, b):\n    return a * b // math.gcd(a, b)\n\ndef isPrime(n):\n    if n == 1:\n        return False\n    for i in range(2, sqrt(n)):\n        if n % i == 0:\n            return False\n    return True\n\ndef find(n):\n    ans = 16\n    for i in range(17):\n        x = n + i\n        c = 0\n        x %= MOD\n        if x == 0:\n            ans = min(ans, i)\n            continue\n        while x > 0 and x % 2 == 0:\n            c += 1\n            x = x // 2\n        ans = min(i + 15 - c, ans)\n    return ans\n\ndef solve():\n    n = int(input())\n    a = get.int()\n    arr = []\n    for item in a:\n        arr.append(find(item))\n    print(*arr)\nsolve()", "n = int(input())\na = list(map(int, input().split()))\narr = []\nfor i in range(1, 32768 + 1):\n    x = bin(i)\n    x = x[2:]\n    x = '00000000000000000000000000000' + x\n    x = x[-16:]\n    x = x[::-1]\n    n2 = len(x)\n    c1 = 0\n    k = 0\n    while k < n2:\n        if x[k] == '0':\n            c1 += 1\n        else:\n            break\n        k += 1\n    curans = 15 - c1\n    arr.append(curans)\narr2 = []\nfor i in a:\n    ans = 15\n    for j in range(0, 16):\n        if i + j > 32768:\n            break\n        tempans = arr[i + j - 1] + j\n        ans = min(ans, tempans)\n    arr2.append(ans)\nprint(*arr2)", "def count_factor_2(n):\n    count = 0\n    while n > 0 and n % 2 == 0:\n        count += 1\n        n //= 2\n    return count\ntc = int(input())\nfor n in list(map(int, input().split())):\n    if n == 0:\n        print(0, end=' ')\n        continue\n    ans = 15\n    for j in range(15):\n        tn = n + j\n        ans = min(ans, 15 - count_factor_2(tn) + j)\n    print(ans, end=' ')", "from base64 import b16decode\nimport sys, math\n\ndef f(n):\n    if n == 0:\n        return 0\n    else:\n        h = int(math.log(n, 2))\n        if 2 ** h == n:\n            return 15 - h\n        else:\n            x = 0\n            b = 16\n            y = 0\n            for i in range(n, n + 15 + 1):\n                y = i\n                while y % 2 == 0:\n                    y = y // 2\n                    x = x + 1\n                b = min(b, 15 - x + i - n)\n                x = 0\n            return b\ninput = sys.stdin.readline\nm = int(input())\nl = list(map(int, input().split()))\nfor i in range(m):\n    print(f(l[i]), end=' ')\nprint()", "def count(num):\n    c = 0\n    while num % 2 == 0:\n        c += 1\n        num = num // 2\n    return c\nn = int(input())\nv = list(map(int, input().split()))\nfor i in v:\n    if i == 0:\n        print(0)\n        continue\n    ans = 15\n    for j in range(16):\n        ans = min(ans, 15 - count(i + j) + j)\n    print(ans, end=' ')", "n = input()\na = [int(i) for i in input().split()]\nres = []\nfor k in a:\n    possibilities = []\n    for i in range(1, 16):\n        puiss = 2 ** i\n        rest = k % puiss\n        possibilities += [(puiss - rest) * (rest != 0) + 15 - i]\n    res += [min(possibilities)]\nprint(*res, sep=' ')", "def pow_two(n):\n    if n == 0:\n        return 15\n    p = 0\n    while n % 2 == 0:\n        n //= 2\n        p += 1\n    return p\nn = int(input())\nm = 32768\na = [int(s) for s in input().split()]\nfor i in range(n):\n    maximum = 15\n    j = 15\n    while j > 0:\n        step = 15 - j\n        if 15 + step - pow_two(a[i] + step) < maximum:\n            maximum = step + 15 - pow_two(a[i] + step)\n        j -= 1\n    print(maximum, end=' ')", "import fileinput\nimport math\n\ndef find_two_representation(b):\n    c = 1.0 * b\n    twos = 0\n    while c % 2 == 0:\n        twos += 1\n        c /= 2\n    return (c, twos)\n\ndef minops(b):\n    if b % 32768 == 0:\n        return 0\n    n = 15\n    options = [b + i for i in range(0, n)]\n    operations = [i for i in range(0, n)]\n    for j in range(len(options)):\n        (prefactor, num_twos) = find_two_representation(options[j])\n        num_ops_left = n - num_twos\n        operations[j] += num_ops_left\n    return min(operations)\n\ndef getanswer(a):\n    answer = [0] * len(a)\n    for j in range(len(a)):\n        answer[j] = minops(a[j])\n    return answer\n\ndef solve():\n    ins = []\n    for line in fileinput.input():\n        ins.append(line.strip('\\n'))\n    num_ints = ins[0]\n    ints = [int(j) for j in ins[1].split(' ')]\n    answer = getanswer(ints)\n    out = ' '.join([str(j) for j in answer]) + ' '\n    print(out)\nsolve()", "from queue import Queue\nfrom re import A\nVAL = 32768\nbfs_queue = Queue(0)\nbfs_queue.put((VAL, 0))\ndp = [-1] * (VAL + 5)\ndp[0] = 0\nwhile not bfs_queue.empty():\n    val_top = bfs_queue.get()\n    top = val_top[0]\n    cnt = val_top[1]\n    if dp[top] != -1:\n        continue\n    dp[top] = cnt\n    bfs_queue.put(((top - 1) % VAL, cnt + 1))\n    if top % 2 == 0:\n        bfs_queue.put((top // 2, cnt + 1))\n        bfs_queue.put(((top + VAL) // 2 % VAL, cnt + 1))\nn = int(input())\na_list = list(map(int, input().split()))\nresult = [dp[a] for a in a_list]\nprint(*result, sep=' ')", "import sys\ninput = sys.stdin.readline\n\ndef solve(n, arr):\n    m = 2 ** 15\n    ans = []\n    hashmap = {}\n    for i in range(n):\n        val = float('inf')\n        for j in range(arr[i], min(arr[i] + 15, m + 1)):\n            if j in hashmap:\n                cnt = hashmap[j]\n                val = min(val, abs(j - arr[i]) + 15 - cnt)\n                continue\n            num = j\n            cnt = 0\n            for k in range(15, -1, -1):\n                if num % 2 ** k == 0:\n                    cnt = k\n                    break\n            hashmap[num] = cnt\n            val = min(val, abs(j - arr[i]) + 15 - cnt)\n        ans.append(val)\n    print(*ans)\nn = int(input())\narr = list(map(int, input().split()))\nsolve(n, arr)", "def bc(n):\n    x = 0\n    if n == 0:\n        return 0\n    while n % 2 == 0:\n        x += 1\n        n = n // 2\n    return 15 - x\nn = int(input())\nl = list(map(int, input().split()))\nt = [float('inf') for _ in range(n)]\nfor i in range(n):\n    for j in range(15):\n        t[i] = min(t[i], j + bc(l[i] + j))\nprint(*t)", "import math\n\ndef val(m):\n    p = 0\n    while m % 2 == 0:\n        p += 1\n        m //= 2\n    return p\nn = int(input())\nl = list(map(int, input().split()))\nfor i in range(n):\n    op = 15\n    if l[i] == 0:\n        op = 0\n    else:\n        for j in range(16):\n            op = min(15 - val(l[i] + j) + j, op)\n    print(op, end=' ')", "import math\nimport os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nl = [0] * 32769\nfor i in range(1, 32769):\n    j = 0\n    min1 = 0\n    while j <= 15:\n        s = i + j\n        c = 0\n        while s % 2 == 0:\n            s = s // 2\n            c += 1\n        if c - j > min1:\n            min1 = abs(c - j)\n        j += 1\n    l[i] = 15 - min1\nn = inp()\na = li()\nfor i in a:\n    prl(l[i])", "n = int(input())\na = [int(x) for x in input().split()]\nfor x in a:\n    t = 2\n    ans = 15\n    for i in range(15):\n        p = x % t\n        if p == 0:\n            ans = min(ans, 14 - i)\n        p = t - p\n        ans = min(ans, p + 14 - i)\n        t <<= 1\n    print(ans, end=' ')", "import collections\nfrom math import ceil, gcd, sqrt, log\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    ans = []\n    for i in range(n):\n        if A[i] == 0:\n            ans.append(0)\n            continue\n        moves = 15\n        for add in range(16):\n            num = A[i] + add\n            for two_pow in range(16):\n                if num % 2 == 1:\n                    moves = min(moves, 15 - two_pow + add)\n                    break\n                num = num // 2\n        ans.append(moves)\n    print(*ans)\nt = 1\nwhile t != 0:\n    solve()\n    t -= 1", "from math import log2\ninput()\nfor x in map(int, input().split()):\n    ans = 15\n    for i in range(15):\n        a = 1\n        n = x + i\n        while n & 1 != 1 and a <= 15:\n            a += 1\n            n >>= 1\n        ans = min(15 - a + i, ans)\n    print(ans + 1, end=' ')", "from sys import stdin, stdout\n\ndef to_bit(x):\n    return bin(x)[2:]\n\ndef trailing_zeros(n):\n    if n == 0:\n        return 15\n    s = str(to_bit(n))\n    return len(s) - len(s.rstrip('0'))\n\ndef cal(x):\n    return min((15 - trailing_zeros(x + i) + i for i in range(16)))\n\ndef solve():\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a = [cal(x) for x in a]\n    ans = ' '.join(map(str, a))\n    print(ans)\nsolve()", "n = int(input())\narr = list(map(int, input().split()))\nlst = []\nfor i in arr:\n    k = 16\n    for j in range(16):\n        n2 = 0\n        m = i + j\n        while m % 2 == 0 and n2 < 15:\n            m = m // 2\n            n2 += 1\n        k = min(k, j + 15 - n2)\n    lst.append(str(k))\nprint(' '.join(lst))", "n = int(input())\narr = [int(x) for x in input().split()]\nlis = [15 for i in range(32770)]\nlis[0] = 0\nfor i in range(1, 32769):\n    num = i\n    m = 15\n    for j in range(15):\n        temp = num + j\n        count = 0\n        while temp % 2 == 0 and temp > 0:\n            count += 1\n            temp //= 2\n        m = min(m, 15 - count + j)\n    lis[num] = m\nfor item in arr:\n    print(lis[item], end=' ')", "import math\nn = int(input())\nx = list(map(int, input().split()))\nfor i in range(n):\n    a = x[i]\n    if a == 0:\n        print(0, end=' ')\n        continue\n    if 32768 % a == 0:\n        print(int(math.log(32768 // a, 2)), end=' ')\n        continue\n    m = 0\n    for i in range(16):\n        c = 0\n        z = a + i\n        while z % 2 == 0:\n            z = z // 2\n            c += 1\n        m = max(c - i, m)\n    print(min(15, 15 - m), end=' ')", "def count_twos(num):\n    c = 0\n    while num > 0:\n        if num % 2 == 0:\n            num = num // 2\n            c += 1\n        else:\n            break\n    return c\nn = int(input())\nanslist = ''\nlist1 = [int(num) for num in input().split()]\nfor i in range(0, len(list1)):\n    num1 = list1[i]\n    if num1 == 32768:\n        anslist += str(1) + ' '\n    elif num1 == 0:\n        anslist += str(0) + ' '\n    else:\n        two_list = [count_twos(num1)]\n        for i in range(1, 16):\n            temp = num1 + i\n            two_list.append(count_twos(temp))\n        moves_list = []\n        for i in range(0, 16):\n            moves = i + (15 - two_list[i])\n            moves_list.append(moves)\n        anslist += str(min(moves_list)) + ' '\nprint(anslist.strip())", "lst = []\nfor i in range(16):\n    lst.append(pow(2, i))\nn = int(input())\na = list(map(int, input().split()))\nfor i in a:\n    if i == 0:\n        print(0, end=' ')\n        continue\n    x = 0\n    for j in range(15):\n        if lst[j] > i:\n            x = j\n    ans1 = 15\n    for k in range(1, j + 2):\n        if i % lst[k] == 0:\n            ans = 15 - k\n        else:\n            ans = (i // lst[k] + 1) * lst[k] - i + 15 - k\n        ans1 = min(ans1, ans)\n    print(ans1, end=' ')", "n = int(input())\narr = input().split(' ')\nfor i in range(n):\n    temp1 = int(arr[i])\n    if temp1 == 0:\n        print(0, end=' ')\n    else:\n        ans = 16\n        for j in range(16):\n            temp2 = temp1 + j\n            cnt = 0\n            while temp2 % 2 == 0:\n                cnt += 1\n                temp2 = temp2 // 2\n            res = j + 15 - cnt\n            ans = min(ans, res)\n        print(ans, end=' ')\nprint()", "from math import log2\ninput()\nfor x in map(int, input().split()):\n    ans = 15\n    for i in range(15):\n        a = 1\n        n = x + i\n        while n & 1 != 1 and a <= 15:\n            a += 1\n            n >>= 1\n        ans = min(15 - a + i, ans)\n    print(ans + 1, end=' ')", "import math\nn = int(input())\narr = list(map(int, input().split()))\nans = []\n\ndef twos(x):\n    count = 0\n    for i in range(15):\n        if x // 2 == x / 2:\n            x = x // 2\n            count += 1\n        else:\n            return count\n    return count\nfor x in arr:\n    arr = []\n    for i in range(15):\n        arr.append(twos(x + i) - i)\n    ans.append(15 - max(arr))\nprint(*ans)", "import math\n\ndef f2(x):\n    pow2 = x & ~(x - 1)\n    return int(math.log(pow2, 2))\nn = int(input())\nl = list(map(int, input().split()))\nfor i in l:\n    if i == 0:\n        print(0, end=' ')\n    else:\n        nf2 = f2(i)\n        minn = 15 - nf2\n        if minn <= 0:\n            print(0, end=' ')\n        else:\n            for j in range(1, minn + 1):\n                if 15 + j - f2(i + j) < minn:\n                    minn = j + 15 - f2(i + j)\n            print(minn, end=' ')", "import math\n\ndef f2(x):\n    pow2 = x & ~(x - 1)\n    return int(math.log(pow2, 2))\nn = int(input())\nl = list(map(int, input().split()))\nfor i in l:\n    if i == 0:\n        print(0, end=' ')\n    else:\n        nf2 = f2(i)\n        minn = 15 - nf2\n        if minn <= 0:\n            print(0, end=' ')\n        else:\n            for j in range(1, minn + 1):\n                if 15 + j - f2(i + j) < minn:\n                    minn = j + 15 - f2(i + j)\n            print(minn, end=' ')", "n = int(input())\narr = [int(x) for x in input().split()]\nlis = [15 for i in range(32770)]\nlis[0] = 0\nfor i in range(1, 32769):\n    num = i\n    m = 15\n    for j in range(15):\n        temp = num + j\n        count = 0\n        while temp % 2 == 0 and temp > 0:\n            count += 1\n            temp //= 2\n        m = min(m, 15 - count + j)\n    lis[num] = m\nfor item in arr:\n    print(lis[item], end=' ')", "n = int(input())\na = list(map(int, input().split()))\nfor x in a:\n    temp1 = x\n    if x == 0:\n        print(0)\n        continue\n    arr = [0] * 16\n    i = 0\n    while x:\n        arr[i] = x % 2\n        x = x // 2\n        i += 1\n    ans = min(15, 32768 - temp1)\n    p = 1\n    temp = 1\n    t = -1\n    for i in range(16):\n        if arr[i] == 1:\n            if t == -1:\n                t = i\n            p = 1\n        else:\n            ans = min(ans, temp + 15 - i)\n            temp += 2 ** i\n    ans = min(ans, 15 - t)\n    print(ans, end=' ')", "import math\nn = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n    ans1 = 15\n    for j in range(0, 16):\n        x = math.gcd(32768, a[i] + j)\n        y = math.log(x, 2)\n        ans1 = min(ans1, j + (15 - y))\n    ans.append(int(ans1))\nprint(*ans)", "import sys\na = int(input())\nb = [int(i) for i in input().split()]\nmod = 32768\nout = []\nfor i in range(a):\n    mi = 999999\n    if b[i] % mod == 0:\n        out.append(0)\n        continue\n    for j in range(0, 16):\n        tpow = 0\n        m = b[i] + j\n        while m % 2 == 0:\n            tpow += 1\n            m //= 2\n        mi = min(mi, j + 15 - tpow)\n    out.append(mi)\nfor i in out:\n    print(i, end=' ')\nprint()", "import math\nn = int(input())\nl = list(map(int, input().split()))\nfor i in l:\n    if i != 0:\n        ans = 15\n    else:\n        print(0, end=' ')\n        continue\n    for j in range(0, 16):\n        op1 = j\n        op2 = 15\n        if (i + j) % 2 == 0:\n            count = 0\n            x = i + j\n            while x != 0 and x % 2 == 0:\n                x = x // 2\n                count += 1\n            op2 = op2 - count\n        ans = min(ans, op1 + op2)\n    print(ans, end=' ')", "from math import inf\nn = int(input())\na = [int(x) for x in input().split()]\n\ndef greatestbinfactor(x):\n    s = 0\n    m = x\n    while 1:\n        (m, mod) = divmod(m, 2)\n        if mod:\n            break\n        s += 1\n    return s\n\ndef ispower2(x):\n    q = x\n    while q > 1:\n        (q, mod) = divmod(q, 2)\n        if mod:\n            return False\n    return True\nfor x in a:\n    if x == 0:\n        print(0, end=' ')\n    else:\n        res = 15\n        for i in range(res):\n            k = x + i\n            gbf = greatestbinfactor(k)\n            mx = -1\n            if gbf > mx:\n                mx = gbf\n            res = min(res, 15 - gbf + i)\n        print(res, end=' ')\nprint()", "n = int(input())\nnums = input().split(' ')\nMOD = 32768\nfor i in nums:\n    k = int(i)\n    if k == 0:\n        print('0', end=' ')\n        continue\n    K = k\n    ans = 15\n    for j in range(1, 16):\n        k = K + j\n        cnt = 0\n        while k % 2 == 0 and k != 0:\n            cnt += 1\n            k = int(k / 2)\n        ans = min(ans, 15 + j - cnt)\n    if K % 2 == 0:\n        k = K\n        cnt = 0\n        while k % 2 == 0 and k != 0:\n            cnt += 1\n            k = int(k / 2)\n        ans = min(ans, 15 - cnt)\n    print(ans, end=' ')\nprint()", "n = int(input())\na = [int(x) for x in input().split()]\nfor i in a:\n    if i == 0:\n        print(0, end=' ')\n    else:\n        ans = 32769\n        for j in range(16):\n            x = i + j\n            cnt = 0\n            while x % 2 == 0:\n                cnt += 1\n                x = x // 2\n            calc = j + 15 - cnt\n            ans = min(ans, calc)\n        print(ans, end=' ')\nprint()", "dp = [32769] * 32768\ndp[0] = 0\nfor cycle in range(20):\n    for x in reversed(range(32768)):\n        dp[x] = min(dp[x], min(dp[(x + 1) % 32768], dp[2 * x % 32768]) + 1)\nn = int(input())\na = [int(x) for x in input().split()]\nb = [str(dp[x]) for x in a]\nprint(' '.join(b))", "l = int(input())\na = list(map(int, input().split()))\nmod = 32768\nfor n in a:\n    I = n\n    ans = 15\n    cnt = 0\n    for i in range(15):\n        temp = str(bin(I))[::-1]\n        ans = min(ans, 15 - temp.find('1') + cnt)\n        cnt += 1\n        I += 1\n    if n == 0:\n        ans = 0\n    print(ans, end=' ')"]