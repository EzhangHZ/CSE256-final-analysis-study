["for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = a[:]\n    b.sort()\n    needed = (n + k + 1) // 2 - 1\n    (md, ml, mr) = (b[needed] - b[0], 0, needed)\n    for i in range(needed, n):\n        cd = b[i] - b[i - needed]\n        if cd < md:\n            (md, ml, mr) = (cd, i - needed, i)\n    print(b[ml], b[mr])\n    balance = 0\n    splits = []\n    for i in range(n):\n        if len(splits) >= k - 1:\n            break\n        if b[ml] <= a[i] <= b[mr]:\n            balance += 1\n        else:\n            balance -= 1\n        if balance > 0:\n            balance = 0\n            splits.append(i)\n    if k > 1:\n        print(1, splits[0] + 1)\n        for i in range(1, k - 1):\n            print(splits[i - 1] + 2, splits[i] + 1)\n        print(splits[-1] + 2, n)\n    else:\n        print(1, n)", "import math\n\ndef solve(a, n, k):\n    m = math.ceil((n + k) / 2)\n    cnt = [0] * (n + 1)\n    for aa in a:\n        cnt[aa] += 1\n    min_len = n + 111\n    (l, r) = (0, 0)\n    (i, j) = (1, 1)\n    num = 0\n    while j <= n + 1:\n        if num < m:\n            if j == n + 1:\n                break\n            num += cnt[j]\n            j += 1\n        else:\n            if j - i < min_len:\n                min_len = j - i\n                l = i\n                r = j - 1\n            num -= cnt[i]\n            i += 1\n    print(l, r)\n    begin = 0\n    for i in range(k - 1):\n        num = 0\n        for j in range(begin, n):\n            if l <= a[j] <= r:\n                num += 1\n            else:\n                num -= 1\n            if num >= 1:\n                print(begin + 1, j + 1)\n                begin = j + 1\n                break\n    print(begin + 1, n)\n    return\nt = int(input())\nwhile t:\n    (n, k) = list(map(int, input().split(' ')))\n    a = list(map(int, input().split(' ')))\n    solve(a, n, k)\n    t -= 1", "from collections import Counter\n\ndef solve_case():\n    (n, k) = map(int, input().strip().split())\n    a = list(map(int, input().strip().split()))\n    stats = Counter(a)\n    keys = sorted(stats.keys())\n    min_sum = (n + k + 1) // 2\n    (l, lv, s) = (0, keys[0], 0)\n    (blv, brv, bdiff) = (0, 0, 10 ** 10)\n    for (r, rv) in enumerate(keys):\n        s += stats[rv]\n        if s < min_sum:\n            continue\n        while s - stats[lv] >= min_sum:\n            s -= stats[lv]\n            l += 1\n            lv = keys[l]\n        diff = rv - lv\n        if diff < bdiff:\n            (bdiff, blv, brv) = (diff, lv, rv)\n    print(blv, brv)\n    last_idx = 0\n    balance = 0\n    found = 0\n    for (idx, value) in enumerate(a):\n        if found == k - 1:\n            break\n        balance += 1 if blv <= value <= brv else -1\n        if balance > 0:\n            print(last_idx + 1, idx + 1)\n            (last_idx, balance) = (idx + 1, 0)\n            found += 1\n    print(last_idx + 1, n)\nt = int(input())\nfor _ in range(t):\n    solve_case()", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    sa = sorted(a)\n    cnt = [0 for i in range(n + 1)]\n    for i in range(n):\n        cnt[a[i]] += 1\n    for i in range(2, n + 1):\n        cnt[i] += cnt[i - 1]\n    ans = (-1, n)\n    need = (n + k + 1) // 2\n    for i in range(n - need + 1):\n        new_ans = (sa[i], sa[i + need - 1])\n        if new_ans[1] - new_ans[0] < ans[1] - ans[0]:\n            ans = new_ans\n    print(ans[0], ans[1])\n    lst = 0\n    cnt = 0\n    for i in range(n):\n        if k == 1:\n            break\n        if ans[0] <= a[i] <= ans[1]:\n            cnt += 1\n        else:\n            cnt -= 1\n        if cnt > 0:\n            print(lst + 1, i + 1)\n            lst = i + 1\n            cnt = 0\n            k -= 1\n    print(lst + 1, n)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    sa = sorted(a)\n    cnt = [0 for i in range(n + 1)]\n    for i in range(n):\n        cnt[a[i]] += 1\n    for i in range(2, n + 1):\n        cnt[i] += cnt[i - 1]\n    ans = (-1, n)\n    need = (n + k + 1) // 2\n    for i in range(n - need + 1):\n        new_ans = (sa[i], sa[i + need - 1])\n        if new_ans[1] - new_ans[0] < ans[1] - ans[0]:\n            ans = new_ans\n    print(ans[0], ans[1])\n    lst = 0\n    cnt = 0\n    for i in range(n):\n        if k == 1:\n            break\n        if ans[0] <= a[i] <= ans[1]:\n            cnt += 1\n        else:\n            cnt -= 1\n        if cnt > 0:\n            print(lst + 1, i + 1)\n            lst = i + 1\n            cnt = 0\n            k -= 1\n    print(lst + 1, n)", "ans = []\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    (a, b) = (1, n)\n    kol = (n + k + 1) // 2\n    used = [0] * (n + 2)\n    for i in range(n):\n        used[x[i]] += 1\n    (l, r) = (1, 1)\n    m = 0\n    for r in range(1, n + 1):\n        m += used[r]\n        while m - used[l] >= kol:\n            m -= used[l]\n            l += 1\n        if m >= kol and r - l < b - a:\n            (a, b) = (l, r)\n    otv = []\n    otv.append([a, b])\n    l = 0\n    k1 = 0\n    k2 = 0\n    for i in range(0, n):\n        if k == 1:\n            otv.append([i + 1, n])\n            break\n        if a <= x[i] <= b:\n            k1 += 1\n        else:\n            k2 += 1\n        if k1 > k2:\n            otv.append([l + 1, i + 1])\n            l = i + 1\n            k -= 1\n            (k1, k2) = (0, 0)\n    ans.append(otv)\nfor i in range(len(ans)):\n    for j in range(len(ans[i])):\n        print(ans[i][j][0], ans[i][j][1])", "import copy\nT = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = copy.deepcopy(a)\n    b.sort()\n    (x, y) = (0, b[n - 1])\n    ln = (n + k + 1) // 2\n    for i in range(0, n - ln + 1):\n        if y - x > b[i + ln - 1] - b[i]:\n            (x, y) = (b[i], b[i + ln - 1])\n    print(x, y)\n    c = [1 if x <= a[i] <= y else -1 for i in range(n)]\n    (rch, sum) = (1, 0)\n    ls = 0\n    for i in range(n):\n        if rch == k:\n            break\n        sum += c[i]\n        if sum == rch:\n            print(ls + 1, i + 1)\n            ls = i + 1\n            rch += 1\n    print(ls + 1, n)"]