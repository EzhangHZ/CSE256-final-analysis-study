["import sys\nI = sys.stdin.readline\nO = sys.stdout.write\n(a, b) = map(int, I().split())\nc = list(map(int, I().split()))\nc.sort()\nc = c[::-1]\nfor i in range(1, len(c)):\n    c[i] = c[i] + c[i - 1]\nfor j in range(b):\n    (p, r) = map(int, I().split())\n    if p == r:\n        O(str(c[p - 1]) + '\\n')\n    else:\n        O(str(c[p - 1] - c[p - r - 1]) + '\\n')", "import sys\nI = sys.stdin.readline\nO = sys.stdout.write\n(a, b) = map(int, I().split())\nc = list(map(int, I().split()))\nc.sort()\nc = c[::-1]\nfor i in range(1, len(c)):\n    c[i] = c[i] + c[i - 1]\nfor j in range(b):\n    (p, r) = map(int, I().split())\n    if p == r:\n        O(str(c[p - 1]) + '\\n')\n    else:\n        O(str(c[p - 1] - c[p - r - 1]) + '\\n')", "import math\nimport sys\nimport threading\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nfrom collections import deque\n\ndef helper(nd):\n    vis[nd] = 1\n    here = 1\n    for ng in gr[nd]:\n        if vis[ng] == 0:\n            here += helper(ng)\n    tot[nd] = here\n    return here\n\ndef helper1(nd, par):\n    ch = []\n    for ng in gr[nd]:\n        if ng != par:\n            ch.append(ng)\n    if len(ch) == 0:\n        return 0\n    if len(ch) == 1:\n        return tot[nd] - 2\n    return max(tot[ch[1]] - 1 + helper1(ch[0], nd), tot[ch[0]] - 1 + helper1(ch[1], nd))\n\ndef shouvik():\n    global vis, tot, gr, dp\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    pr = [arr[0]]\n    for i in range(1, n):\n        pr.append(pr[-1] + arr[i])\n    while q:\n        (x, y) = map(int, input().split())\n        q -= 1\n        idx1 = n - x\n        idx2 = idx1 + y - 1\n        if idx1 == 0:\n            print(pr[idx2])\n        else:\n            print(pr[idx2] - pr[idx1 - 1])\nshouvik()", "import sys\ninput = sys.stdin.readline\nprint = sys.stdout.write\n(n, q) = map(int, input().split())\nitems = list(map(int, input().split()))\nitems.sort(reverse=True)\nprefix = [0] * (n + 1)\nfor i in range(n):\n    prefix[i + 1] = items[i] + prefix[i]\nfor i in range(q):\n    (x, y) = map(int, input().split())\n    price = prefix[x] - prefix[x - y]\n    print(str(price) + '\\n')", "r = open(0)\ng = lambda : map(int, next(r).split())\n(n, q) = g()\na = [0]\nfor x in sorted(g())[::-1]:\n    a += (a[-1] + x,)\nfor b in [0] * q:\n    (x, y) = g()\n    print(a[x] - a[x - y])", "r = open(0)\ng = lambda : map(int, next(r).split())\n(n, q) = g()\na = [0]\nfor x in sorted(g())[::-1]:\n    a += (a[-1] + x,)\nfor b in [0] * q:\n    (x, y) = g()\n    print(a[x] - a[x - y])", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\na = [0]\nfor x in sorted(R())[::-1]:\n    a += (a[-1] + x,)\nfor _ in [0] * q:\n    (x, y) = R()\n    print(a[x] - a[x - y])", "f = open(0)\n(n, q) = map(int, next(f).split())\na = [0]\nfor x in sorted(map(int, next(f).split()))[::-1]:\n    a += (a[-1] + x,)\nfor _ in [0] * q:\n    (x, y) = map(int, next(f).split())\n    print(a[x] - a[x - y])", "import sys\ninput = sys.stdin.readline\nprint = sys.stdout.write\n(n, q) = map(int, input().split())\nitems = list(map(int, input().split()))\nitems.sort(reverse=True)\nfor idx in range(1, n):\n    items[idx] = items[idx] + items[idx - 1]\nfor _ in range(q):\n    (x, y) = map(int, input().split())\n    if x == y:\n        print(str(items[x - 1]) + '\\n')\n    else:\n        print(str(items[x - 1] - items[x - y - 1]) + '\\n')", "def read_int() -> int:\n    return int(input().strip())\n\ndef read_ints_map() -> map:\n    return map(int, input().strip().split())\n\ndef read_ints_list() -> [int]:\n    return [*read_ints_map()]\ntry:\n    fin = open('./input.txt')\n    import sys\n    sys.stdin = fin\nexcept:\n    pass\nf = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\nb = [0] * (n + 1)\nfor (i, p) in enumerate(sorted(R(), reverse=True)):\n    b[i + 1] = b[i] + p\nfor _ in range(q):\n    (x, y) = R()\n    print(b[x] - b[x - y])", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\na = [0]\nfor x in sorted(R())[::-1]:\n    a += (a[-1] + x,)\nfor _ in [0] * q:\n    (x, y) = R()\n    print(a[x] - a[x - y])", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\na = [0]\nfor x in sorted(R())[::-1]:\n    a += (a[-1] + x,)\nfor _ in [0] * q:\n    (x, y) = R()\n    print(a[x] - a[x - y])", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\na = [0]\nfor x in sorted(R())[::-1]:\n    a += (a[-1] + x,)\nfor _ in [0] * q:\n    (x, y) = R()\n    print(a[x] - a[x - y])", "def read_int() -> int:\n    return int(input().strip())\n\ndef read_ints_map() -> map:\n    return map(int, input().strip().split())\n\ndef read_ints_list() -> [int]:\n    return [*read_ints_map()]\ntry:\n    FIN = open('./input.txt')\nexcept:\n    FIN = open(0)\nR = lambda : map(int, next(FIN).split())\n(n, q) = R()\nb = [0] * (n + 1)\nfor (i, p) in enumerate(sorted(R(), reverse=True)):\n    b[i + 1] = b[i] + p\nfor _ in range(q):\n    (x, y) = R()\n    print(b[x] - b[x - y])", "import random\nimport io, os\nimport sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\np = [int(i) for i in input().split()]\np.sort(reverse=True)\nsums = [0 for i in range(n)]\nsums[0] = p[0]\nfor i in range(1, n):\n    sums[i] = sums[i - 1] + p[i]\nfor i in range(q):\n    (x, y) = map(int, input().split())\n    if y == x:\n        sys.stdout.write(str(sums[x - 1]) + '\\n')\n    else:\n        sys.stdout.write(str(sums[x - 1] - sums[x - 1 - y]) + '\\n')", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\na = [0]\nfor x in sorted(R())[::-1]:\n    a += (a[-1] + x,)\nfor _ in [0] * q:\n    (x, y) = R()\n    print(a[x] - a[x - y])", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\narr.sort()\nfor i in range(1, n):\n    arr[i] += arr[i - 1]\narr = [0] + arr\nfor i in range(q):\n    (x, y) = map(int, input().split())\n    print(arr[n - x + y] - arr[n - x])", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\na = [0]\nfor x in sorted(R())[::-1]:\n    a += (a[-1] + x,)\nfor _ in [0] * q:\n    (x, y) = R()\n    print(a[x] - a[x - y])", "input = __import__('sys').stdin.readline\n(n, m) = [int(a) for a in input().split()]\nar = list(map(int, input().split()))[:n]\nar.sort(reverse=True)\nb = [ar[0]]\nfor i in range(1, n):\n    b.append(b[-1] + ar[i])\nfor i in range(m):\n    (x, y) = [int(a) for a in input().split()]\n    if x == y:\n        print(b[x - 1])\n        continue\n    print(b[x - 1] - b[x - y - 1])", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\na = [0]\nfor x in sorted(R())[::-1]:\n    a += (a[-1] + x,)\nfor _ in [0] * q:\n    (x, y) = R()\n    print(a[x] - a[x - y])", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\np = list(map(int, input().split()))\np.sort()\ns = [0]\nfor i in range(n):\n    s.append(p[i] + s[i])\nfor _ in range(q):\n    (x, y) = map(int, input().split())\n    print(s[n - x + y] - s[n - x])", "r = open(0)\ng = lambda : map(int, next(r).split())\n(n, q) = g()\na = [0]\nfor x in sorted(g())[::-1]:\n    a += (a[-1] + x,)\nfor b in [0] * q:\n    (x, y) = g()\n    print(a[x] - a[x - y])", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    ps = [0] * (n + 1)\n    curr = 0\n    for i in range(n):\n        curr += arr[i]\n        ps[i + 1] = curr\n    for _ in range(q):\n        (x, y) = map(int, input().split())\n        print(ps[n - x + y] - ps[n - x])\n    return\nsolve()", "from itertools import accumulate\n\ndef main():\n    (n, q) = map(int, input().split())\n    prices = list(map(int, input().split()))\n    prices.sort()\n    acc_prices = list(accumulate(prices, initial=0))\n    for _ in range(q):\n        (x, y) = map(int, input().split())\n        ans = acc_prices[n - x + y] - acc_prices[n - x]\n        print(ans)\nimport sys\ninput = sys.stdin.readline\nexit(main())", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\na = [0]\nfor x in sorted(R())[::-1]:\n    a += (a[-1] + x,)\nfor _ in [0] * q:\n    (x, y) = R()\n    print(a[x] - a[x - y])", "import random\nimport io, os\nimport sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\np = [int(i) for i in input().split()]\np = sorted(p, reverse=True)\nsums = [0 for i in range(n)]\nsums[0] = p[0]\nfor i in range(1, n):\n    sums[i] = sums[i - 1] + p[i]\nfor i in range(q):\n    (x, y) = map(int, input().split())\n    if y == x:\n        sys.stdout.write(str(sums[x - 1]) + '\\n')\n    else:\n        sys.stdout.write(str(sums[x - 1] - sums[x - 1 - y]) + '\\n')", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\narr.sort()\nbrr = [0]\nfor i in range(n):\n    brr.append(arr[i] + brr[i])\nfor _ in range(q):\n    (x, y) = map(int, input().split())\n    print(brr[n - x + y] - brr[n - x])", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\np = [0]\nfor w in sorted(R()):\n    p += (p[-1] + w,)\nfor _ in ' ' * q:\n    (x, y) = R()\n    print(p[n - x + y] - p[n - x])", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\na = list(map(int, input().split()))\na.sort(reverse=True)\nx = 0\nfor i in range(n):\n    a[i] += x\n    x = a[i]\nfor i in range(q):\n    (x, y) = map(int, input().split())\n    ans = 0\n    if x == y:\n        ans = a[x - 1]\n    else:\n        ans = a[x - 1] - a[x - y - 1]\n    sys.stdout.write(str(ans) + '\\n')", "r = open(0)\ng = lambda : map(int, next(r).split())\n(n, q) = g()\na = [0]\nfor x in sorted(g())[::-1]:\n    a += (a[-1] + x,)\nfor b in [0] * q:\n    (x, y) = g()\n    print(a[x] - a[x - y])", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\na = [0]\nfor x in sorted(R())[::-1]:\n    a += (a[-1] + x,)\nfor _ in [0] * q:\n    (x, y) = R()\n    print(a[x] - a[x - y])", "import sys\ninput = sys.stdin.readline\n(a, b) = map(int, input().split())\nl = list(map(int, input().split()))\nl.sort(reverse=True)\nx = [0]\nfor i in l:\n    x.append(i + x[-1])\nfor _ in range(b):\n    (y, z) = map(int, input().split())\n    print(x[y] - x[y - z])", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\nb = [0]\nfor i in sorted(R()):\n    b.append(b[-1] + i)\nfor i in range(q):\n    (x, y) = R()\n    print(b[n - x + y] - b[n - x])", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\na = [0]\nfor x in sorted(R())[::-1]:\n    a += (a[-1] + x,)\nfor _ in [0] * q:\n    (x, y) = R()\n    print(a[x] - a[x - y])", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\na = [0]\nfor x in sorted(R())[::-1]:\n    a += (a[-1] + x,)\nfor _ in [0] * q:\n    (x, y) = R()\n    print(a[x] - a[x - y])", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\np = list(map(int, input().split()))\np.sort()\np = p[::-1]\nres = []\nans = 0\nfor i in range(n):\n    ans += p[i]\n    res.append(ans)\nfor i in range(q):\n    (x, y) = map(int, input().split())\n    if x - y - 1 < 0:\n        print(res[x - 1])\n    else:\n        print(res[x - 1] - res[x - y - 1])", "import sys\ninput = sys.stdin.readline\n(n, q) = [int(i) for i in input().split()]\np = [int(i) for i in input().split()]\np = sorted(p)\nprefix = [0]\nfor (i, _p) in enumerate(p):\n    prefix.append(prefix[i] + _p)\nfor _ in range(q):\n    (x, y) = [int(i) for i in input().split()]\n    print(prefix[-(x - y + 1)] - prefix[-x - 1])", "import sys\nfrom itertools import accumulate\n\ndef rall():\n    return [x.strip() for x in sys.stdin.readlines()]\n\ndef rl():\n    return sys.stdin.readline().strip()\n\ndef rl_types(types):\n    str_list = [x for x in sys.stdin.readline().strip().split(' ')]\n    return [types[i](str_list[i]) for i in range(len(str_list))]\n\ndef pr(something=''):\n    sys.stdout.write(str(something) + '\\n')\n\ndef pra(array):\n    sys.stdout.write(' '.join([str(x) for x in array]) + '\\n')\n\ndef solve(array):\n    return array\n(n, q) = map(int, rl().split(' '))\npvals = list(map(int, rl().split(' ')))\npvals.sort()\naccum = [0, *accumulate(pvals)]\nfor _ in range(q):\n    (x, y) = map(int, rl().split(' '))\n    print(accum[n - x + y] - accum[n - x])", "import sys\nfrom itertools import accumulate\ninput = sys.stdin.readline\n(n, q) = list(map(int, input().split()))\np = list(map(int, input().split()))\np.sort()\npreSum = list(accumulate(p, initial=0))\nfor _ in range(q):\n    (x, y) = list(map(int, input().split()))\n    (l, r) = (n - x, n - x + y - 1)\n    print(preSum[r + 1] - preSum[l])", "import sys\n(n, p) = map(int, sys.stdin.readline().split())\nl = map(int, sys.stdin.readline().split())\nl = sorted(l, reverse=True)\nfor i in range(n - 1, 0, -1):\n    l[i - 1] += l[i]\nfor _ in range(p):\n    (xi, yi) = map(int, sys.stdin.readline().split())\n    a = n - xi\n    b = a + yi\n    if a == 0:\n        print(l[-b])\n    else:\n        print(l[-b] - l[-a])", "import sys\nipt = sys.stdin.readline\n(n, t) = map(int, ipt().split())\narr = list(map(int, ipt().split()))\narr.sort()\narr1 = []\no = 2\narr1.append(0)\narr1.append(arr[n - 1])\ns = n - 2\nwhile s >= 0:\n    arr1.append(arr1.__getitem__(o - 1) + arr[s])\n    o += 1\n    s -= 1\nfor e in range(t):\n    (x, y) = map(int, ipt().split())\n    print(arr1[n - (n - x)] - arr1[x - y])", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\nb = [0]\nfor i in sorted(R()):\n    b.append(b[-1] + i)\nfor _ in [0] * q:\n    (x, y) = R()\n    print(b[n - x + y] - b[n - x])", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\ns = [a[0]]\nfor i in range(1, n):\n    s.append(a[i] + s[i - 1])\nfor i in range(q):\n    (x, y) = map(int, input().split())\n    l = n - x\n    r = l + y - 1\n    if l == 0:\n        print(s[r])\n    else:\n        print(s[r] - s[l - 1])", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\nb = [0]\na = sorted(R(), reverse=True)\nfor i in a:\n    b.append(b[-1] + i)\nfor _ in [0] * q:\n    (x, y) = R()\n    print(b[x] - b[x - y])", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nb = [0]\nfor i in range(n):\n    b.append(a[i] + b[i])\nfor i in range(q):\n    (x, y) = map(int, input().split())\n    print(b[n - x + y] - b[n - x])", "inp = lambda : int(input())\nmul = lambda : map(int, input().split())\njn = lambda x, l: x.join(map(str, l))\nstrlst = lambda : list(input())\nlst = lambda : list(map(int, input().split()))\ndd = lambda : defaultdict(lambda : 0)\nimport sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfrom math import ceil, log, floor, sqrt, gcd, log10\n(n, q) = mul()\na = lst()\na.sort(reverse=True)\nl = [0] * n\ncnt = 0\nfor i in range(n):\n    cnt += a[i]\n    l[i] = cnt\nfor i in range(q):\n    (x, y) = mul()\n    d = x - y\n    if d == 0:\n        ans = l[x - 1]\n    else:\n        ans = l[x - 1] - l[d - 1]\n    print(ans)", "import sys\n(n, p) = map(int, sys.stdin.readline().split())\nl = map(int, sys.stdin.readline().split())\nl = sorted(l, reverse=True)\nfor i in range(n - 1, 0, -1):\n    l[i - 1] += l[i]\nfor _ in range(p):\n    (xi, yi) = map(int, sys.stdin.readline().split())\n    a = n - xi\n    b = a + yi\n    if a == 0:\n        sys.stdout.write(str(l[-b]) + '\\n')\n    else:\n        sys.stdout.write(str(l[-b] - l[-a]) + '\\n')", "import io, os, sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\np = list(map(int, input().split()))\np.sort()\ncp = p.copy()\nfor i in range(1, n):\n    cp[i] = cp[i] + cp[i - 1]\ncp = [0] + cp\nfor _ in range(q):\n    (x, y) = map(int, input().split())\n    print(cp[n] - cp[n - x] - (cp[n] - cp[n - x + y]))", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\narr = sorted([*map(int, input().split())], reverse=True)\ndp = [0] * n\ndp[0] = arr[0]\nfor i in range(1, n):\n    dp[i] = dp[i - 1] + arr[i]\nfor i in range(q):\n    (x, y) = map(int, input().split())\n    if x == y:\n        print(dp[x - 1])\n    else:\n        print(dp[x - 1] - dp[x - y - 1])", "import sys\nfrom sys import stdin, stdout\nfrom math import ceil, floor, sqrt, log, log2, log10\nfrom collections import Counter\nint_max = float('inf')\nint_min = -float('inf')\nmod = 10 ** 9 + 7\nANS = []\ninput = stdin.readline\n\ndef solve():\n    pass\nt = 1\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    pre = [0]\n    for i in range(n):\n        pre.append(pre[-1] + arr[i])\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        print(pre[n - x + y] - pre[n - x])", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\naa = [0 for i in range(n + 1)]\naa[-2] = a[-1]\nfor i in range(n - 1):\n    aa[-i - 3] = aa[-i - 2] + a[-i - 2]\nfor _ in range(q):\n    (x, y) = map(int, input().split())\n    print(aa[n - x] - aa[n - x + y])", "import sys\ninput = sys.stdin.readline\n\ndef nextInt():\n    return int(input())\n\ndef arrayIn():\n    return list(map(int, input().split()))\n\ndef nextLine():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n(n, Q) = invr()\narr = arrayIn()\nsuffix = [0] * (n + 1)\narr.sort()\nfor i in range(n):\n    suffix[i + 1] = suffix[i] + arr[n - i - 1]\nfor q in range(Q):\n    (x, y) = invr()\n    print(suffix[x] - suffix[x - y])", "import sys\ninput = sys.stdin.readline\n\ndef print(*args, end='\\n', sep=' ') -> None:\n    sys.stdout.write(sep.join(map(str, args)) + end)\n(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\narr.sort(reverse=True)\nprr = [0] * (n + 1)\nfor i in range(n):\n    prr[i + 1] = prr[i] + arr[i]\nfor i in range(q):\n    (x, y) = map(int, input().split())\n    print(prr[x] - prr[x - y])", "class Solution:\n\n    def Promo(self, n, pref, x, y):\n        return pref[n - x + y] - pref[n - x]\nimport sys\ninput = sys.stdin.readline\nsol = Solution()\n(n, q) = list(map(int, input().split()))\npi = list(map(int, input().split()))\npi.sort()\npref = [0]\nsumm = 0\nfor i in range(n):\n    summ += pi[i]\n    pref.append(summ)\nfor _ in range(q):\n    (x, y) = list(map(int, input().split()))\n    print(sol.Promo(n, pref, x, y))", "import collections\nimport math\n\ndef function():\n    (n, q) = map(int, input().split(' '))\n    a = [0]\n    res = []\n    for x in sorted([int(e) for e in input().split()])[::-1]:\n        a += (a[-1] + x,)\n    for _ in [0] * q:\n        (x, y) = map(int, input().split(' '))\n        res.append(a[x] - a[x - y])\n    return res\nres = function()\nfor e in res:\n    print(e)", "f = open(0)\nR = lambda : map(int, next(f).split())\n(n, q) = R()\np = [0]\nfor w in sorted(R()):\n    p += (p[-1] + w,)\nfor _ in ' ' * q:\n    (x, y) = R()\n    print(p[n - x + y] - p[n - x])", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n(n, q) = get_ints()\narr = get_list()\narr.sort()\npre = [arr[0] for _ in range(n)]\nfor i in range(1, n):\n    pre[i] = pre[i - 1] + arr[i]\nfor _ in range(q):\n    (x, y) = get_ints()\n    if x == n:\n        if y != 0:\n            print(pre[y - 1])\n        else:\n            print(0)\n    else:\n        ind = n - x - 1\n        off = pre[ind + y] - pre[ind]\n        print(off)", "import sys\ninput = lambda : sys.stdin.readline().strip()\nd = [0]\n(a, b) = map(int, input().split())\nl = sorted(list(map(int, input().split())), reverse=True)\ns = 0\nv = 0\nfor i in l:\n    v += i\n    d.append(v)\nfor _ in range(b):\n    (n, m) = map(int, input().split())\n    print(d[n] - d[n - m])", "import sys\nimport collections\nimport bisect\nimport math\nfrom functools import lru_cache\nsys.setrecursionlimit(10 ** 6)\n(n, q) = list(map(int, sys.stdin.readline().split()))\narr = list(map(int, sys.stdin.readline().split()))\narr.sort()\nprefix = [0]\ncurr = 0\nfor num in arr:\n    curr += num\n    prefix.append(curr)\nfor _ in range(q):\n    (x, y) = list(map(int, sys.stdin.readline().split()))\n    i = len(prefix) - x - 1\n    j = i + y\n    print(prefix[j] - prefix[i])", "import sys\n(n, q) = map(int, sys.stdin.readline().split())\nlst = list(map(int, sys.stdin.readline().split()))\nlst.sort(reverse=True)\npre = [lst[0]]\nfor j in range(1, n):\n    pre.append(pre[-1] + lst[j])\nfor j in range(q):\n    (x, y) = map(int, sys.stdin.readline().split())\n    a = pre[x - 1]\n    ele = x - y\n    if ele == 0:\n        print(a)\n    else:\n        b = pre[ele - 1]\n        print(a - b)", "from math import inf, gcd, log, log2, floor, ceil, sqrt\nfrom collections import Counter, defaultdict\nfrom heapq import heappush, heappop, heapify\nfrom functools import lru_cache\nfrom itertools import accumulate\nimport sys\nfrom bisect import *\nDIRS = [[1, 0], [0, 1], [0, -1], [-1, 0], [-1, -1], [1, 1], [-1, 1], [1, -1]]\nMOD = 10 ** 9 + 7\ninput = sys.stdin.readline\n\ndef solve():\n    (n, q) = [int(x) for x in input().split(' ')]\n    p = [int(x) for x in input().split(' ')]\n    p.sort(reverse=True)\n    qs = []\n    for _ in range(q):\n        (x, y) = [int(x) for x in input().split(' ')]\n        qs.append([x, y])\n    pfs = list(accumulate(p))\n    for (x, y) in qs:\n        if x == y:\n            total = pfs[x - 1]\n        else:\n            total = pfs[x - 1] - pfs[x - y - 1]\n        print(total)\nsolve()", "import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n(n, q) = mp()\nl = li()\nl.sort()\nl.reverse()\nk = [l[0]]\ns = l[0]\nfor i in range(1, n):\n    s += l[i]\n    k.append(s)\nfor _ in range(q):\n    (s, s1) = (0, 0)\n    (x, y) = mp()\n    if x - y == 0:\n        print(k[x - 1])\n    else:\n        print(k[x - 1] - k[x - y - 1])", "strng = lambda : input()\ninp = lambda : int(input())\nmul = lambda : map(int, input().split())\njn = lambda x, l: x.join(map(str, l))\nstrlst = lambda : list(input())\nlst = lambda : list(map(int, input().split()))\ndd = lambda : defaultdict(lambda : 0)\nimport sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfrom math import ceil, log, floor, sqrt, gcd, log10\n(n, q) = mul()\na = lst()\na.sort()\nl = [0] * n\ncnt = 0\nfor i in range(n - 1, -1, -1):\n    cnt += a[i]\n    l[n - i - 1] = cnt\nfor i in range(q):\n    (x, y) = mul()\n    if x - y == 0:\n        ans = l[x - 1]\n    else:\n        ans = l[x - 1] - l[x - y - 1]\n    print(ans)", "import random\nimport io, os\nimport sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\np = [int(i) for i in input().split()]\nrandom.shuffle(p)\np.sort(reverse=True)\nsums = [0 for i in range(n)]\nsums[0] = p[0]\nfor i in range(1, n):\n    sums[i] = sums[i - 1] + p[i]\nfor i in range(q):\n    (x, y) = map(int, input().split())\n    if y == x:\n        sys.stdout.write(str(sums[x - 1]) + '\\n')\n    else:\n        sys.stdout.write(str(sums[x - 1] - sums[x - 1 - y]) + '\\n')", "(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\nl = sorted(l)\nans = [0]\nitem = []\nfor i in l:\n    ans.append(ans[-1] + i)\nfor i in range(m):\n    (x, y) = map(int, input().split())\n    item.append(ans[n - x + y] - ans[n - x])\nfor i in item:\n    print(i)", "(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\nl = sorted(l, reverse=True)\nans = [0]\nc = []\nfor i in l:\n    ans.append(ans[-1] + i)\nfor i in range(m):\n    (x, y) = map(int, input().split())\n    if x != y:\n        c.append(ans[x] - ans[x - y])\n    else:\n        c.append(ans[x])\nfor i in c:\n    print(i)", "from collections import Counter\nimport sys\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef solve(A, i, j):\n    if i == j:\n        return A[i - 1]\n    else:\n        return A[i - 1] - A[i - j - 1]\n(n, m) = get_ints()\narr = get_ints()\narr.sort(reverse=True)\nfor i in range(1, len(arr)):\n    arr[i] = arr[i] + arr[i - 1]\nfor i in range(m):\n    (i, j) = get_ints()\n    print(solve(arr, i, j))", "from collections import deque, defaultdict, Counter, OrderedDict\nfrom itertools import product, groupby, permutations, combinations, accumulate, zip_longest, combinations_with_replacement\nfrom math import gcd, floor, inf, log2, sqrt, log10, factorial\nfrom bisect import bisect_right, bisect_left, insort_left\nfrom statistics import mode\nfrom string import ascii_lowercase, ascii_uppercase\nfrom heapq import heapify, heappop, heappush, heappushpop, heapreplace, nlargest, nsmallest, merge\nfrom copy import deepcopy\nfrom random import shuffle, randint\nimport random\nfrom operator import xor, or_\nfrom typing import List\n(n, cases) = map(int, input().split())\narr = sorted(map(int, input().split()))[::-1]\npre = [0] + list(accumulate(arr))\nans = []\nfor _ in range(cases):\n    (x, y) = map(int, input().split())\n    ans.append(pre[x] - pre[x - y])\nfor n in ans:\n    print(n)", "import sys\ninput = sys.stdin.readline\n\ndef free(price, n, x, y):\n    if x == n:\n        return price[y - 1]\n    return price[n - x + y - 1] - price[n - x - 1]\n(n, queries) = map(int, input().split())\nprice = list(map(int, input().split()))\nprice = sorted(price)\nfor i in range(1, n):\n    price[i] += price[i - 1]\nfor _ in range(queries):\n    (x, y) = map(int, input().split())\n    print(free(price, n, x, y))", "import sys\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\na = [0] + [int(i) for i in input().split()]\na.sort()\nfor i in range(1, len(a)):\n    a[i] += a[i - 1]\nfor _ in range(m):\n    (x, y) = map(int, input().split())\n    print(a[n - x + y] - a[n - x])", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\np = list(map(int, input().split()))\np = sorted(p, reverse=True)\ns = [p[0]]\nfor i in range(1, n):\n    s.append(s[-1] + p[i])\nfor _ in range(q):\n    (x, y) = map(int, input().split())\n    if y == 0:\n        print(0)\n    elif x - y == 0:\n        print(s[x - 1])\n    else:\n        print(s[x - 1] - s[x - y - 1])", "from os import error\nimport sys\ninput = sys.stdin.readline\nDEBUG = False\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef solve(sms):\n    (n, m) = inlt()\n    if n == m:\n        return sms[n - 1]\n    return sms[n - 1] - sms[n - m - 1]\n(n, q) = inlt()\ndatum = sorted(inlt())[::-1]\nsms = [0] * n\nfor i in range(n):\n    sms[i] = datum[i]\n    if i > 0:\n        sms[i] += sms[i - 1]\nfor t in range(q):\n    ans = solve(sms)\n    print(ans)", "(n, q) = map(int, input().split())\np = list(map(int, input().split()))\npr = [0] * (len(p) + 1)\na = []\np.sort(reverse=True)\nfor i in range(1, len(pr)):\n    pr[i] = pr[i - 1] + p[i - 1]\nfor i in range(q):\n    (x, y) = map(int, input().split())\n    s = pr[x] - pr[x - y]\n    a.append(s)\nfor i in range(len(a)):\n    print(a[i])", "from collections import Counter\nfrom functools import lru_cache\nimport heapq\nfrom itertools import combinations\nimport sys\ninput = sys.stdin.readline\n(n, x) = map(int, input().split())\narray = list(map(int, input().split()))\nqueries = []\nfor z in range(x):\n    queries.append(list(map(int, input().split())))\n\ndef solve():\n    result = []\n    array.sort(reverse=True)\n    prefixSum = []\n    currentSum = 0\n    for num in array:\n        currentSum += num\n        prefixSum.append(currentSum)\n    for (left, right) in queries:\n        diff = left - right\n        leftSum = 0 if not diff else prefixSum[diff - 1]\n        result.append(prefixSum[left - 1] - leftSum)\n    return result\nres = solve()\nfor re in res:\n    print(re)", "(n, q) = map(int, input().split())\narray = sorted(list(map(int, input().split())), reverse=True)\nsums = [0]\nfor i in range(n):\n    sums.append(sums[-1] + array[i])\nresults = []\nfor i in range(q):\n    (x, y) = map(int, input().split())\n    results.append(sums[x] - sums[x - y])\nprint(*results, sep='\\n')", "(n, q) = [int(v) for v in input().split()]\np = [int(v) for v in input().split()]\np = sorted(p, reverse=True)\nresult = []\nfor i in range(1, len(p)):\n    p[i] = p[i] + p[i - 1]\nfor _ in [0] * q:\n    (x, y) = [int(v) for v in input().split()]\n    result.append(p[x - 1] - (p[x - y - 1] if x != y else 0))\nfor v in result:\n    print(v)", "import sys\nfrom itertools import accumulate\nsys.setrecursionlimit(2 * 10 ** 6)\n\ndef test():\n    pass\n\ndef main():\n    (n, q) = map(int, input().split())\n    ps = list(map(int, input().split()))\n    qs = []\n    for _ in range(q):\n        qs.append(list(map(int, input().split())))\n    ps.sort()\n    ps = ps[::-1]\n    acc = [0] + list(accumulate(ps))\n    for (x, y) in qs:\n        a = x - y\n        print(acc[x] - acc[a])\n\ndef init():\n    import sys\n    import os\n    if 'DOCKER_HOST' in os.environ:\n        test()\n        sys.stdin = open('test.txt')\ninit()\nmain()", "(n, q) = map(int, input().split())\nl = []\nl = map(int, input().split())\nl = list(l)\nX = []\nY = []\nfor i in range(0, q):\n    (x, y) = map(int, input().split())\n    X.append(x)\n    Y.append(y)\nm = len(l)\nx1 = len(X)\ny1 = len(Y)\nl.sort()\nsum = [0]\nfor i in range(0, m):\n    sum.append(sum[i] + l[i])\nfor j in range(0, x1):\n    s = sum[m - X[j] + Y[j]] - sum[m - X[j]]\n    print(s)", "(n, q) = map(int, input().split())\np = list(map(int, input().split()))\npr = [0] * (len(p) + 1)\na = []\np.sort(reverse=True)\nfor i in range(1, len(pr)):\n    pr[i] = pr[i - 1] + p[i - 1]\nfor i in range(q):\n    (x, y) = map(int, input().split())\n    s = pr[x] - pr[x - y]\n    a.append(s)\nfor i in range(len(a)):\n    print(a[i])", "import sys\nbuffer = sys.stdin.readlines()\n(n, q) = list(map(int, buffer[0].split()))\narray = list(map(int, buffer[1].split()))\narray.sort()\nprefix = [0] * (n + 1)\nfor i in range(1, n + 1):\n    prefix[i] = prefix[i - 1] + array[i - 1]\nans = ''\nfor j in range(q):\n    (x, y) = [int(elem) for elem in buffer[2 + j].split()]\n    res = prefix[n - x + y] - prefix[n - x]\n    ans += str(res) + '\\n'\nsys.stdout.write(ans)", "(n, q) = [int(x) for x in input().split()]\nelements = [int(x) for x in input().split()]\nqueries = []\nfor i in range(q):\n    xy = [int(x) for x in input().split()]\n    queries += xy\nelements.sort(reverse=True)\nfor i in range(1, int(n)):\n    elements[i] += elements[i - 1]\nfor i in range(0, len(queries), 2):\n    x = queries[i]\n    y = queries[i + 1]\n    if x == y:\n        print(elements[x - 1])\n    else:\n        print(elements[x - 1] - elements[x - y - 1])", "from re import L\nres = []\n\ndef promo(nums, n, x, y):\n    r = n - x\n    if x == y:\n        total = nums[x - 1]\n    else:\n        total = nums[x - 1] - nums[x - y - 1]\n    res.append(total)\n    return\n(n, q) = input().split()\nA = list(map(int, input().split()))\nA.sort(reverse=True)\nfor i in range(1, int(n)):\n    A[i] += A[i - 1]\nfor i in range(int(q)):\n    (x, y) = input().split()\n    promo(A, int(n), int(x), int(y))\nfor n in res:\n    print(n)", "import sys\nipt = sys.stdin.readline\n(n, q) = list(map(int, ipt().split()))\nl = sorted(list(map(int, ipt().split())))\np = [0] * (n + 1)\nfor (i, elem) in enumerate(l):\n    p[i + 1] = p[i] + l[i]\nfor _ in range(q):\n    (x, y) = list(map(int, ipt().split()))\n    print(p[-x + y - 1] - p[-x - 1])", "(length, n) = map(int, input().split())\ngoods_prices = [int(s) for s in input().split()]\ngoods_prices.sort()\nanswer = []\nanswer_array = [0]\nfor i in range(length):\n    answer_array.append(goods_prices[i] + answer_array[i])\nfor i in range(n):\n    (last_indexes, cheap_prices) = map(int, input().split())\n    answer.append(answer_array[length - last_indexes + cheap_prices] - answer_array[length - last_indexes])\nfor i in range(n):\n    print(answer[i])", "(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\nqueries = []\nfor i in range(q):\n    (x, y) = map(int, input().split())\n    queries.append([x, y])\narr.sort(reverse=True)\nsumarr = [0] * (n + 1)\nsum1 = 0\nfor i in range(1, len(arr) + 1):\n    sumarr[i] = arr[i - 1] + sumarr[i - 1]\nfor i in queries:\n    elementstobechosen = i[0]\n    elementstobediscounted = i[1]\n    print(sumarr[elementstobechosen] - sumarr[elementstobechosen - elementstobediscounted])", "(n, m) = list(map(int, input().split()))\nl = list(map(int, input().split()))\nq = []\nfor _ in range(m):\n    q.append(list(map(int, input().split())))\nl.sort()\nprefix = [0]\nfor i in l:\n    prefix.append(prefix[-1] + i)\nfor (i, j) in q:\n    left = n - i\n    print(prefix[left + j] - prefix[left])", "import sys\ninput = sys.stdin.readline\n\ndef to_int(x):\n    return int(float(x))\nn_q_str = input().split()\np_str = input().split()\n(n, q) = list(map(to_int, n_q_str))\np_list = list(map(to_int, p_str))\np_sorted = sorted(p_list, reverse=True)\nprefix_list = []\ns = 0\nfor a in range(n):\n    s = s + p_sorted[a]\n    prefix_list.append(s)\nfor b in range(q):\n    x_y_str = input().split()\n    (x, y) = list(map(to_int, x_y_str))\n    if x == y:\n        y_sum = prefix_list[x - 1]\n    else:\n        y_sum = prefix_list[x - 1] - prefix_list[x - y - 1]\n    print(y_sum)"]