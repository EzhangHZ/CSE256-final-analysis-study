["import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, m) = map(int, inp().split())\n    d = [max(i, n - 1 - i) + max(j, m - 1 - j) for j in range(m) for i in range(n)]\n    d.sort()\n    print(' '.join(map(str, d)))\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = n + m - 2\n    mas = []\n    for i in range(0, m // 2):\n        mas.append(d)\n        d -= 1\n    if m > 1:\n        mas = mas * 2\n    if m % 2 == 1:\n        mas.append(d)\n    for i in range(1, n // 2):\n        for j in range(0, m):\n            mas.append(mas[j] - i)\n    if n > 1:\n        mas = mas * 2\n        if n % 2 == 1:\n            for j in range(0, m):\n                mas.append(mas[j] - n // 2)\n    mas.sort()\n    print(' '.join([str(i) for i in mas]))", "import sys\ninput = sys.stdin.readline\nrepeat = int(input())\nfor _ in range(repeat):\n    (n, m) = map(int, input().split())\n    mini = m // 2 + n // 2\n    maxi = mini + (m - 1) // 2 + (n - 1) // 2\n    limit = min((n + 1) // 2, (m + 1) // 2)\n    length = maxi - mini + 1\n    number = [limit * 4] * length\n    i = 0\n    d = limit - 1\n    while True:\n        if d <= 0:\n            break\n        number[i] -= d * 4\n        number[length - i - 1] -= d * 4\n        i += 1\n        d -= 1\n    if n % 2 == 1:\n        for i in range((m + 1) // 2):\n            number[i] -= 2\n    if m % 2 == 1:\n        for i in range((n + 1) // 2):\n            number[i] -= 2\n    if n % 2 == 1 and m % 2 == 1:\n        number[0] += 1\n    for i in range(length):\n        for j in range(number[i]):\n            print(mini + i, end=' ')\n    print()", "T = int(input())\n\ndef main(r, c):\n    d = []\n    for i in range(1, r + 1):\n        for k in range(1, c + 1):\n            d.append(max(abs(i - 1) + abs(k - 1), abs(i - 1) + abs(k - c), abs(i - r) + abs(k - 1), abs(i - r) + abs(k - c)))\n    d.sort()\n    output = ''\n    for i in d:\n        output += str(i) + ' '\n    return output[:-1]\n\nclass case:\n\n    def __init__(self, Line):\n        temp = Line.split()\n        self.rows = int(temp[0])\n        self.col = int(temp[1])\ncases = []\nfor i in range(T):\n    line = input()\n    cases.append(case(line))\nfor i in range(T):\n    print(main(cases[i].rows, cases[i].col))", "import math, re\n\ndef fastlist():\n    return list(map(int, input().split()))\n\ndef fastint():\n    return int(input())\n\ndef solve():\n    (n, m) = fastlist()\n    res = []\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i >= n // 2 + 1 and j >= m // 2 + 1:\n                res.append(i + j - 2)\n            elif i < n // 2 + 1 and j >= m // 2 + 1:\n                res.append(abs(n - i) + j - 1)\n            elif i < n // 2 + 1 and j < m // 2 + 1:\n                res.append(abs(n - i) + abs(m - j))\n            else:\n                res.append(i - 1 + abs(m - j))\n    res.sort()\n    return ' '.join(list(map(str, res)))\nt = int(input())\nfor _ in range(t):\n    print(solve())", "def solve(n: int, m: int):\n    ans = []\n    for i in range(n):\n        for j in range(m):\n            ans.append(max(n - i - 1, i) + max(m - j - 1, j))\n    ans.sort()\n    print(' '.join(map(str, ans)))\nfor _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    solve(n, m)", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(*sorted((max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m))))", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(*sorted((max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m))))", "import sys\ninput = sys.stdin.readline\nnum_test_cases = int(input())\nfor test_case_ittr in range(num_test_cases):\n    (num_rows, num_cols) = [int(x) for x in input().split()]\n    i_center = (num_rows - 1) / 2\n    j_center = (num_cols - 1) / 2\n    offset = i_center + j_center\n    distances = [int(abs(i - i_center) + abs(j - j_center) + offset) for i in range(num_rows) for j in range(num_cols)]\n    distances.sort()\n    print(*distances)", "size = int(input())\nfor i in range(size):\n    str1 = input().split()\n    n = int(str1[0])\n    m = int(str1[1])\n    output = []\n    for i in range(n):\n        x = max(abs(0 - i), abs(n - 1 - i))\n        for j in range(m):\n            y = max(abs(0 - j), abs(m - 1 - j))\n            output += [x + y]\n    out = sorted(output)\n    print(' '.join(map(str, out)))", "T = int(input())\n\ndef main(r, c):\n    d = []\n    for i in range(1, r + 1):\n        for k in range(1, c + 1):\n            d.append(max(abs(i - 1) + abs(k - 1), abs(i - 1) + abs(k - c), abs(i - r) + abs(k - 1), abs(i - r) + abs(k - c)))\n    d.sort()\n    output = ''\n    for i in d:\n        output += str(i) + ' '\n    return output[:-1]\n\nclass case:\n\n    def __init__(self, Line):\n        temp = Line.split()\n        self.rows = int(temp[0])\n        self.col = int(temp[1])\ncases = []\nfor i in range(T):\n    line = input()\n    cases.append(case(line))\nfor i in range(T):\n    print(main(cases[i].rows, cases[i].col))", "def read_input():\n    t = int(input())\n    test_cases = []\n    for i in range(t):\n        i_line = input().split(' ')\n        test_case = [int(i_line[0]), int(i_line[1])]\n        test_cases.append(test_case)\n    return test_cases\n\ndef solve(test_case):\n    (n, m) = (test_case[0], test_case[1])\n    values_of_seats = []\n    for i in range(n):\n        for j in range(m):\n            value = max(i, n - i - 1) + max(j, m - j - 1)\n            values_of_seats.append(value)\n    values_of_seats.sort()\n    for k in range(n * m):\n        print(values_of_seats[k], end=' ')\n    print()\n\ndef main():\n    test_cases = read_input()\n    for test_case in test_cases:\n        solve(test_case)\nmain()", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    seats = []\n    for i in range(n):\n        for j in range(m):\n            seats.append(max(i, n - 1 - i) + max(j, m - 1 - j))\n    seats.sort()\n    print(*seats)", "nt = int(input())\nans = []\n\ndef soln(n, m):\n    k = 0\n    max_dist = []\n    ans = []\n    for x in range(n):\n        for y in range(m):\n            max_dist.append(max(x, n - x - 1) + max(y, m - y - 1))\n    max_dist.sort()\n    return max_dist\nfor x in range(nt):\n    inp = list(map(int, input().split()))\n    (n, m) = (inp[0], inp[1])\n    ans.append(soln(n, m))\nfor a in ans:\n    for x in a:\n        print(x, end=' ')\n    print()", "def problemB(n, m):\n    distance = []\n    for i in range(n):\n        for j in range(m):\n            distance.append(max(i + j, i + abs(j - m + 1), abs(i - n + 1) + j, abs(i - n + 1) + abs(j - m + 1)))\n    distance.sort()\n    return ' '.join([str(num) for num in distance])\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split(' '))\n    print(problemB(n, m))", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(*sorted((max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m))))", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(*sorted((max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m))))", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(*sorted((max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m))))", "import sys\nfrom math import ceil\nls = []\nfor l in sys.stdin:\n    lst = l.rstrip('\\n')\n    if len(lst) > 0:\n        ls.append(lst)\nfor l in ls:\n    sys.stderr.write(l + '\\n')\nsys.stderr.write('-- output --\\n')\n\ndef d(u, v):\n    return abs(u[0] - v[0]) + abs(u[1] - v[1])\n\ndef opp(i, n):\n    return n - 1 if i < n // 2 else 0\n\ndef coin_opp(i, j, n, m):\n    return (opp(i, n), opp(j, m))\n\ndef solve(n, m):\n    res = []\n    for i in range(n):\n        for j in range(m):\n            res.append(d((i, j), coin_opp(i, j, n, m)))\n    return sorted(res)\nfor l in ls[1:]:\n    (n, m) = [int(w) for w in l.split(' ')]\n    print(*solve(n, m))", "t = int(input())\nfor test in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    print(*sorted([max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m)]))", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(*sorted((max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m))))", "for t in range(int(input())):\n    (k, m) = map(int, input().split())\n    print(*sorted((max(x, k - 1 - x) + max(y, m - 1 - y) for x in range(k) for y in range(m))))", "for t in range(int(input())):\n    (k, m) = map(int, input().split())\n    print(*sorted((max(x, k - 1 - x) + max(y, m - 1 - y) for x in range(k) for y in range(m))))", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(*sorted((max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m))))", "from math import *\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\nfrom array import array\nfrom re import search\ninp = lambda : int(input())\nli = lambda : list(map(int, input().split()))\nlb = lambda : list(map(int, input()))\nls = lambda : list(input())\narr = lambda a: array('i', a)\nbi = lambda n: bin(n).replace('0b', '')\nyn = lambda f: print('NYOE S'[f::2])\nsbstr = lambda a, s: search('.*'.join(a), s)\n\ndef solve(__=1):\n    for _ in range(__):\n        (n, m) = li()\n        d = []\n        for i in range(n):\n            for j in range(m):\n                d.append(max(i + j, i + (m - 1 - j), n - 1 - i + j, m + n - i - j - 2))\n        d.sort()\n        print(*d)\nsolve(inp())", "T = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    print(*sorted([max(i, n - i - 1) + max(j, m - j - 1) for i in range(n) for j in range(m)]))", "t = int(input())\nnt = []\nmt = []\nfor i in range(t):\n    temp = input().split()\n    nt.append(int(temp[0]))\n    mt.append(int(temp[1]))\nfor i in range(t):\n    n = nt[i]\n    m = mt[i]\n    tab = []\n    for a in range(n):\n        for b in range(m):\n            if a >= n / 2:\n                c = 0\n            else:\n                c = n - 1\n            if b >= m / 2:\n                d = 0\n            else:\n                d = m - 1\n            tab.append(abs(a - c) + abs(b - d))\n    tab.sort(reverse=True)\n    for k in range(n * m - 1, -1, -1):\n        print(tab[k], end=' ')\n    print('')", "import math\nn = int(input())\nfor _ in range(n):\n    (n, m) = map(int, input().split())\n    dist = m // 2 + n // 2\n    (m, n) = (max(m, n), min(m, n))\n    med_n = (n - 1) / 2\n    med_m = (m - 1) / 2\n    l = []\n    l += [dist] * ((m % 2 or 2) * (n % 2 or 2))\n    for i in range(1, dist + n % 2 + m % 2):\n        count = 0\n        for j in range(i + 1):\n            if med_n - j < 0:\n                break\n            if med_m - i + j >= 0:\n                count += 4 - 2 * (j == i) * (m % 2) - 2 * (j == 0) * (n % 2)\n        l += [dist + i] * count\n    print(*l)", "from collections import defaultdict\nimport sys, math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = defaultdict(lambda : 0)\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            st = max(n - i + m - j, i - 1 + j - 1, i - 1 + m - j, n - i + j - 1)\n            d[st] += 1\n    ans = []\n    for i in d.keys():\n        ans += [i] * d[i]\n    ans.sort()\n    print(*ans)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(*sorted((max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m))))", "def solve():\n    (n, m) = list(map(int, list(input().split())))\n    x = []\n    for i in range(n):\n        for j in range(m):\n            x.append(max(i, n - i - 1) + max(j, m - j - 1))\n    x.sort()\n    print(*x)\nq = int(input())\nfor i in range(q):\n    solve()", "T = int(input())\nfor t in range(T):\n    (n, m) = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        for j in range(m):\n            l.append(max(i, n - 1 - i) + max(j, m - j - 1))\n    print(*sorted(l))", "I = lambda : [int(x) for x in input().split()]\nfor t in range(int(input())):\n    (n, m) = I()\n    list = [max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m)]\n    list.sort()\n    print(*list)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(*sorted([max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m)]))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    lst = []\n    for i in range(n):\n        for j in range(m):\n            lst.append(max(i, n - 1 - i) + max(j, m - 1 - j))\n    lst = sorted(lst)\n    print(*lst)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(*sorted((max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m))))", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(*sorted((max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m))))", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(*sorted((max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m))))", "t = int(input())\nfor i in range(t):\n    (m, n) = map(lambda x: int(x), input().split())\n    arr = []\n    for i in range(m):\n        for j in range(n):\n            a = i + j\n            b = i + n - 1 - j\n            c = m - 1 - i + j\n            d = m - 1 - i + n - 1 - j\n            arr.append(max(a, b, c, d))\n    print(' '.join(map(lambda x: str(x), sorted(arr))))", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(*sorted((max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m))))", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(*sorted((max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m))))", "I = lambda : [int(x) for x in input().split()]\nfor t in range(int(input())):\n    (n, m) = I()\n    list = [max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m)]\n    list.sort()\n    print(*list)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(*sorted((max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m))))", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(*sorted((max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m))))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(*sorted((max(x + y, n - 1 - x + y, x + m - 1 - y, n - 1 - x + m - 1 - y) for x in range(n) for y in range(m))))", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(*sorted((max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m))))", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(*sorted((max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m))))", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(*sorted((max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m))))", "import math\nfrom collections import *\nimport math\n\ndef solve():\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        for j in range(m):\n            a.append(max(i, n - i - 1) + max(j, m - j - 1))\n    a.sort()\n    print(*a)\nt = int(input())\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    dis = []\n    for i in range(n):\n        for j in range(m):\n            x = max(j, m - j - 1)\n            y = max(i, n - i - 1)\n            dist = x + y\n            dis.append(dist)\n    dis.sort()\n    print(*dis)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        for j in range(m):\n            dist = max(i, n - 1 - i) + max(j, m - 1 - j)\n            a.append(dist)\n    a.sort()\n    print(*a)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    k = []\n    for i in range(n):\n        for j in range(m):\n            a1 = i + j\n            a2 = i + m - 1 - j\n            a3 = j + n - 1 - i\n            a4 = n - 1 - i + m - 1 - j\n            k.append(max(a1, a2, a3, a4))\n    k = sorted(k)\n    k = [str(i) for i in k]\n    print(' '.join(k))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = []\n    for i in range(m):\n        for j in range(n):\n            ans.append(max(i, m - i - 1) + max(j, n - j - 1))\n    ans.sort()\n    print(*ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    res = []\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            res.append(max(n - i, i - 1) + max(m - j, j - 1))\n    print(*sorted(res))", "for _ in range(int(input())):\n    a = list(map(int, input().split()))\n    (m, n, mm, nn) = (max(a), min(a), 1, 1)\n    (r, res) = (m * n // 2, [])\n    for i in range(r):\n        if nn == n + 1:\n            nn = 1\n            mm += 1\n        f = m - mm + n - nn\n        s = m - mm + nn - 1\n        res += [max(f, s)]\n        nn += 1\n    res = 2 * res\n    p = m * n\n    if p % 2:\n        f = n - (n + 1) // 2 + m - (m + 1) // 2\n        res += [f]\n    res = sorted(res)\n    print(*res, sep=' ')", "t = int(input())\nwhile t:\n    t -= 1\n    (n, m) = [int(i) for i in input().split()]\n    v = []\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dist = max(i - 1, n - i) + max(j - 1, m - j)\n            v.append(dist)\n    v.sort()\n    print(*v)", "import sys\ninput = sys.stdin.readline\nt = int(input().strip())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    lst = []\n    for i in range(n):\n        for j in range(m):\n            lst.append(max(abs(i) + abs(j), abs(i) + abs(m - j - 1), abs(j) + abs(n - i - 1), abs(n - i - 1) + abs(m - j - 1)))\n    print(*sorted(lst))", "def solve(n, m):\n    res = []\n    for i in range(n):\n        for j in range(m):\n            dists = [i + j, i + (m - j - 1), n - i - 1 + j, n - i - 1 + (m - j - 1)]\n            res.append(max(dists))\n    print(*sorted(res))\nt = int(input())\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    solve(n, m)", "for l in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        for j in range(m):\n            a.append(max(i, n - i - 1) + max(j, m - j - 1))\n    print(*sorted(a))", "import math\n\ndef main_function():\n    test_cases = range(int(input()))\n    for test_case in test_cases:\n        (n, m) = [int(i) for i in input().split()]\n        map = [[0 for i in range(m)] for j in range(n)]\n        for i in range(n):\n            for j in range(m):\n                map[i][j] = max(abs(i) + abs(j), abs(n - i - 1) + abs(j), abs(n - i - 1) + abs(m - j - 1), abs(i) + abs(m - j - 1))\n        real_one = []\n        for i in range(n):\n            for j in range(m):\n                real_one.append(map[i][j])\n        real_one.sort()\n        print(' '.join([str(u) for u in real_one]))\nmain_function()", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(*sorted((max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m))))", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    arr = []\n    for i in range(1, (r + 1) // 2 + 1):\n        for j in range(1, (c + 1) // 2 + 1):\n            val = abs(r - i) + abs(c - j)\n            factor = 4\n            if j == (c + 1) // 2 and c % 2 != 0:\n                factor = factor // 2\n            if i == (r + 1) // 2 and r % 2 != 0:\n                factor = factor // 2\n            for k in range(factor):\n                arr.append(val)\n    arr.sort()\n    for i in arr:\n        print(i, end=' ')\n    print()", "t = int(input())\nwhile t > 0:\n    (n, m) = list(map(int, list(input().split())))\n    x = []\n    for i in range(n):\n        for j in range(m):\n            x.append(max(i, n - i - 1) + max(j, m - j - 1))\n    x.sort()\n    print(*x)\n    t -= 1", "def solve(n, m):\n    corners = [[1, 1], [1, m], [n, 1], [n, m]]\n    dist = []\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            maxDist = max([abs(ci - i) + abs(cj - j) for (ci, cj) in corners])\n            dist.append(maxDist)\n    dist.sort()\n    print(' '.join(map(str, dist)))\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split(' '))\n    solve(n, m)", "from collections import Counter\nT = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    l = []\n    for i in range(N):\n        for j in range(M):\n            l.append(max(i, N - i - 1) + max(j, M - j - 1))\n    print(*sorted(l))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = []\n    for j in range(n):\n        for k in range(m):\n            a.append(max(j + k, j + m - 1 - k, n - 1 - j + k, n + m - 2 - j - k))\n    a.sort()\n    print(*a)", "t = int(input())\nwhile t > 0:\n    (n, m) = list(map(int, list(input().split())))\n    x = []\n    for i in range(n):\n        for j in range(m):\n            x.append(max(i, n - i - 1) + max(j, m - j - 1))\n    x.sort()\n    print(*x)\n    t -= 1", "import math\nt = int(input())\nfor _ in range(t):\n    (rr, cc) = list(map(int, input().split()))\n    x = rr\n    y = cc\n    r = math.ceil(rr / 2)\n    c = math.ceil(cc / 2)\n    lst = []\n    i = 1\n    j = 1\n    while i < rr or j < cc:\n        if i > r:\n            x = 1\n        else:\n            x = rr\n        if j > c:\n            y = 1\n        else:\n            y = cc\n        lst.append(abs(x - i) + abs(y - j))\n        if j == cc:\n            j = 1\n            i += 1\n        else:\n            j += 1\n    lst.append(max(lst))\n    lst.sort()\n    print(*lst)", "from re import L\nimport sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\n\ndef func():\n    (r, c) = mul()\n    req = []\n    for i in range(r):\n        for j in range(c):\n            req.append(max(i, r - 1 - i) + max(j, c - 1 - j))\n    req.sort()\n    print(*req)\nt = inp()\nfor i in range(t):\n    func()", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        for j in range(m):\n            x = i + j\n            x = max(x, n - 1 - i + m - 1 - j)\n            x = max(x, i + m - 1 - j)\n            x = max(x, n - 1 - i + j)\n            l.append(x)\n    l.sort()\n    print(*l)", "import math\nmod = 10 ** 9 + 7\n\ndef findval(i, j, n, m):\n    val1 = abs(i - 1) + abs(j - 1)\n    val2 = abs(i - n) + j - 1\n    val3 = abs(i - 1) + abs(j - m)\n    val4 = abs(i - n) + abs(j - m)\n    val = max({val1, val2, val3, val4})\n    return val\n\ndef main():\n    t = int(input())\n    while t != 0:\n        ans = []\n        (n, m) = map(int, input().split())\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                val = findval(i, j, n, m)\n                ans.append(val)\n        ans.sort()\n        for it in ans:\n            print(it, end=' ')\n        print()\n        t -= 1\nmain()", "import sys, bisect, math\nfrom collections import deque, Counter\ninput = lambda : sys.stdin.readline().strip()\nceil = lambda x: math.ceil(x)\nmod = 10 ** 9 + 7\n\ndef solve():\n    (n, m) = map(int, input().split())\n    a = []\n    dist = lambda d1, d2: abs(d1[0] - d2[0]) + abs(d1[1] - d2[1])\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            ma = max(dist([i, j], [1, 1]), dist([i, j], [1, m]), dist([i, j], [n, 1]), dist([i, j], [n, m]))\n            a.append(ma)\n    a.sort()\n    return ' '.join((str(x) for x in a))\nt = 1\nt = int(input())\nfor _ in range(t):\n    print(solve())", "for z in range(int(input())):\n    arr = []\n    (n, m) = map(int, input().split())\n    for i in range(n):\n        for j in range(m):\n            max_d = max(i + j, i + (m - 1 - j), n - 1 - i + j, m + n - i - j - 2)\n            arr.append(max_d)\n    arr.sort()\n    print(*arr)", "def int_input():\n    a = int(input())\n    return a\n\ndef int_list_input():\n    a = list(map(int, input().split()))\n    return a\n\ndef solve():\n    (n, m) = int_list_input()\n    arr = []\n    for i in range(n):\n        for j in range(m):\n            a = max(i + j, i + (m - j - 1), n - i - 1 + j, n - i - 1 + (m - j - 1))\n            arr.append(a)\n    arr.sort()\n    for i in range(n * m):\n        print(arr[i], end=' ')\n    print()\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split(' '))\n    l = [max(x, n - 1 - x) + max(y, m - 1 - y) for x in range(n) for y in range(m)]\n    l.sort()\n    for i in l:\n        print(i, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = []\n    for i in range(n):\n        for j in range(m):\n            d.append(max(i + j, m - 1 - j + i, n - 1 - i + j, m + n - i - j - 2))\n    d.sort()\n    print(*d)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [0 for i in range(n * m)]\n    for i in range(n):\n        for j in range(m):\n            a[i * m + j] = max(i + j, i + m - j - 1, n - i + j - 1, n - i + m - j - 2)\n    a.sort()\n    print(*a)", "no = int(input(''))\nfor i in range(no):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        for j in range(m):\n            l.append(max(i, n - 1 - i) + max(j, m - 1 - j))\n    l.sort()\n    for p in range(n * m):\n        print(l[p], end=' ')\n    print()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        for j in range(m):\n            arr.append(max(i + j, m + n - i - j - 2, m + i - j - 1, n - i + j - 1))\n    arr.sort()\n    for i in arr:\n        print(str(i), end=' ')\n    print()", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = []\n    for j in range(n):\n        for k in range(m):\n            a.append(max(j + k, j + m - 1 - k, n - 1 - j + k, n - 2 - j + m - k))\n    a.sort()\n    print(*a)", "t = int(input())\nfor i in range(0, t):\n    (n, k) = map(int, input().split())\n    lis = []\n    for y in range(n):\n        for z in range(k):\n            lis.append(max(n - 1 - y + k - 1 - z, y + z, y + k - 1 - z, n - 1 - y + z))\n    lis.sort()\n    for out in lis:\n        print(out, end=' ')\n    print('')", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    dists = []\n    for i in range(n):\n        for j in range(m):\n            x = max(j, m - j - 1)\n            y = max(i, n - i - 1)\n            dist = x + y\n            dists.append(dist)\n    dists.sort()\n    for i in range(n * m):\n        print(dists[i], end=' ')\n    print()", "for i in range(0, int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    for j in range(1, n + 1):\n        for k in range(1, m + 1):\n            l.append(max(abs(1 - k), abs(k - m)) + max(abs(1 - j), abs(n - j)))\n    l.sort()\n    print(*l, sep=' ')", "import sys\ninput = sys.stdin.readline\nMAX = sys.maxsize\nsys.setrecursionlimit(10 ** 9)\n\ndef inp():\n    return int(input())\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\ndef read_list():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef manhattan(x, y, a, b):\n    return abs(x - a) + abs(y - b)\n\ndef solve(n, m):\n    corners = [(0, 0), (0, m - 1), (n - 1, 0), (n - 1, m - 1)]\n    d = []\n    for x in range(n):\n        for y in range(m):\n            cd = []\n            for c in corners:\n                cd.append(manhattan(x, y, c[0], c[1]))\n            d.append(max(cd))\n    print(*sorted(d))\nfor _ in range(inp()):\n    (n, m) = read_int_list()\n    solve(n, m)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            l.append(max(abs(n - i + m - j), abs(n - i + j - 1), abs(m - j + i - 1), abs(i + j - 2)))\n    l.sort()\n    print(*l)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    cnt = [0] * (n + m - 1)\n    for i in range(n):\n        for j in range(m):\n            dist = max(i, n - i - 1) + max(j, m - j - 1)\n            cnt[dist] += 1\n    for i in range(n + m - 1):\n        for j in range(cnt[i]):\n            print(i, end=' ')\n    print()", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    (x1, y1) = (0, 0)\n    (x2, y2) = (n - 1, 0)\n    (x3, y3) = (0, m - 1)\n    (x4, y4) = (n - 1, m - 1)\n    A = list()\n    for i in range(n):\n        for j in range(m):\n            d1 = abs(i - x1) + abs(j - y1)\n            d2 = abs(i - x2) + abs(j - y2)\n            d3 = abs(i - x3) + abs(j - y3)\n            d4 = abs(i - x4) + abs(j - y4)\n            d = max(d1, d2, d3, d4)\n            A.append(d)\n    A.sort()\n    print(*A)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = []\n    for k in range(n):\n        for j in range(m):\n            d.append(max(abs(k - 1 + 1) + abs(j + 1 - 1), abs(k + 1 - 1) + abs(j + 1 - m), abs(k + 1 - n) + abs(j + 1 - 1), abs(k + 1 - n) + abs(j + 1 - m)))\n    d.sort()\n    print(*d)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    cnt = [0] * (n + m - 1)\n    for i in range(n):\n        for j in range(m):\n            dist = max(i, n - i - 1) + max(j, m - j - 1)\n            cnt[dist] += 1\n    for i in range(n + m - 1):\n        for j in range(cnt[i]):\n            print(i, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, m) = [int(item) for item in input().split()]\n    ans = [0] * (m * n)\n    ang = []\n    for i in range(1, n + 1):\n        for y in range(1, m + 1):\n            ang.append(min([i, n + 1 - i]) + min([y, m + 1 - y]) - 1)\n    ans[0] = n // 2 + m // 2\n    ang.sort(reverse=True)\n    tambah = 0\n    for x in range(1, len(ang)):\n        if ang[x] != ang[x - 1]:\n            tambah += 1\n        else:\n            pass\n        ans[x] = ans[0] + tambah\n    print(*ans)", "import sys\ninput = sys.stdin.readline\nMAX = sys.maxsize\nsys.setrecursionlimit(10 ** 9)\n\ndef inp():\n    return int(input())\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\ndef read_list():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef manhattan(x, y, a, b):\n    return abs(x - a) + abs(y - b)\n\ndef solve(n, m):\n    corners = [(0, 0), (0, m - 1), (n - 1, 0), (n - 1, m - 1)]\n    d = []\n    for x in range(n):\n        for y in range(m):\n            cd = []\n            for c in corners:\n                cd.append(manhattan(x, y, c[0], c[1]))\n            cd.sort()\n            d.append(cd[3])\n    print(*sorted(d))\nfor _ in range(inp()):\n    (n, m) = read_int_list()\n    solve(n, m)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        for j in range(m):\n            t = []\n            t.append(i + j)\n            t.append(i + abs(m - 1 - j))\n            t.append(abs(n - 1 - i) + j)\n            t.append(abs(n - 1 - i) + abs(m - 1 - j))\n            l.append(max(t))\n    l.sort()\n    print(*l)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = []\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            ans.append(max(i - 1 + j - 1, max(i - 1 + abs(j - m), max(j - 1 + abs(i - n), abs(i - n) + abs(j - m)))))\n    ans.sort()\n    print(*ans)", "def solution(m, n):\n    res = []\n    visit = [[0] * n for _ in range(m)]\n    (row, col) = ([], [])\n    if m % 2 == 1:\n        row.append(m // 2)\n    else:\n        row.append(m // 2)\n        row.append(m // 2 - 1)\n    if n % 2 == 1:\n        col.append(n // 2)\n    else:\n        col.append(n // 2)\n        col.append(n // 2 - 1)\n    q = []\n    for r in row:\n        for c in col:\n            q.append((r, c))\n            visit[r][c] = 1\n    while q:\n        (r, c) = (q[0][0], q[0][1])\n        dist = max(r, m - r - 1) + max(c, n - c - 1)\n        res += [dist] * len(q)\n        for _ in range(len(q)):\n            (r, c) = q.pop(0)\n            for (x, y) in [(r - 1, c), (r, c - 1), (r, c + 1), (r + 1, c)]:\n                if 0 <= x < m and 0 <= y < n and (visit[x][y] == 0):\n                    visit[x][y] = 1\n                    q.append((x, y))\n    return ' '.join([str(k) for k in res])\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(solution(n, m))", "import sys\n\ndef solve(n, m):\n    if n % 2 and m % 2:\n        level = {(n // 2, m // 2)}\n    elif n % 2 and (not m % 2):\n        level = {(n // 2, cj) for cj in [m // 2 - 1, m // 2]}\n    elif not n % 2 and m % 2:\n        level = {(ci, m // 2) for ci in [n // 2 - 1, n // 2]}\n    else:\n        level = {(ci, cj) for ci in [n // 2 - 1, n // 2] for cj in [m // 2 - 1, m // 2]}\n    visit = level.copy()\n    (ci, cj) = list(level)[0]\n    v = max((abs(pi - ci) + abs(pj - cj) for (pi, pj) in [(0, 0), (0, m - 1), (n - 1, 0), (n - 1, m - 1)]))\n    res = [v] * len(level)\n    while level:\n        nextlevel = set()\n        for (pi, pj) in level:\n            for (ci, cj) in [(pi - 1, pj), (pi, pj - 1), (pi, pj + 1), (pi + 1, pj)]:\n                if 0 <= ci < n and 0 <= cj < m and ((ci, cj) not in visit):\n                    visit.add((ci, cj))\n                    nextlevel.add((ci, cj))\n        level = nextlevel\n        res += [res[-1] + 1] * len(level)\n    return res[:n * m]\ninput = sys.stdin.readline\nt = int(input()[:-1])\nfor _ in range(t):\n    (n, m) = [int(part) for part in input()[:-1].split()]\n    for val in solve(n, m):\n        print(val, end=' ')\n    print('\\n', end='')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = []\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            ans.append(max(i - 1 + j - 1, n - i + m - j, n - i + j - 1, m + i - j - 1))\n    ans.sort()\n    for i in ans:\n        print(i, end=' ')\n    print()"]