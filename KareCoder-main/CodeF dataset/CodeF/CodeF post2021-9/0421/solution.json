["def power(a, b):\n    res = 1\n    while b:\n        if b & 1:\n            res = res * a % 1000000007\n        a = a * a % 1000000007\n        b >>= 1\n    return res\nh = int(input())\nx = 2 ** h - 1\nprint(6 * power(4, x - 1) % 1000000007)", "k = int(input())\nmod = 1000000007\nprint(6 * pow(4, pow(2, k) - 2, mod) % mod)", "n = int(input())\ns = 0\nfor i in range(2, n + 1):\n    s += 2 ** i\na = pow(2, s, 10 ** 9 + 7)\nprint(a * 6 % (10 ** 9 + 7))", "mod = 1000000007\nn = int(input())\nans = 6\nval = 16\nfor i in range(1, n):\n    ans = ans * val % mod\n    val = val * val % mod\nprint(ans)", "MOD = 10 ** 9 + 7\nprint(6 * pow(4, 2 ** int(input()) - 2, MOD) % MOD)", "k = int(input())\nx = int(pow(2, k) - 2)\nprint(6 * pow(4, x, 1000000007) % 1000000007)", "from sys import stdin\n\ndef read_input():\n    k = int(stdin.readline())\n    return (k,)\n\ndef solve(k):\n    return 6 * pow(4, 2 ** k - 2, 1000000007) % 1000000007\n\ndef main():\n    input = read_input()\n    answer = solve(*input)\n    print(answer)\nmain()", "def func():\n    total = pow(2, k) - 1\n    ans = 6 * pow(4, total - 1, mod)\n    print(ans % mod)\nmod = 10 ** 9 + 7\nk = int(input())\nfunc()", "import sys\nMOD = int(1000000000.0 + 7)\n\ndef solve():\n    inp = sys.stdin.readline\n    n = int(inp())\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = dp[i - 1] * 4 * dp[i - 1] * 4 % MOD\n    print(dp[n - 1] * 6 % MOD)\n\ndef main():\n    solve()\nmain()", "MOD = 10 ** 9 + 7\nk = int(input())\ncnt = pow(2, k) - 1\nans = pow(4, cnt - 1, MOD) * 6 % MOD\nprint(ans)", "n = int(input())\nprint(6 * pow(4, pow(2, n) - 2, 1000000007) % 1000000007)", "def main():\n    k = int(input())\n    if k == 1:\n        print(6)\n        return\n    p = 2 ** k - 2\n    print(6 * pow(4, p, 1000000000 + 7) % (1000000000 + 7))\nmain()", "n = int(input())\nn_ver = 0\nmod = pow(10, 9) + 7\nfor i in range(n):\n    n_ver = n_ver + pow(2, i)\nres = 6 * pow(4, n_ver - 1, mod) % mod\nprint(res)", "n = int(input())\nmodd = 1000000007\nnodes = pow(2, n) - 1\nans1 = pow(4, nodes - 1, modd)\nprint(ans1 * 6 % modd)", "import math\nMOD = 1000000000 + 7\n\ndef modInverse(b, m):\n    g = math.gcd(b, m)\n    if g != 1:\n        return -1\n    else:\n        return pow(b, m - 2, m)\n\ndef modDivide(a, b, m):\n    a = a % m\n    inv = modInverse(b, m)\n    if inv == -1:\n        print('Division not defined')\n    else:\n        return inv * a % m\n\ndef s(n):\n    if n == 1:\n        return 6\n    c = s(n - 1)\n    return modDivide(c * c * 8, 3, MOD)\nn = int(input())\nprint(s(n))", "def rubiks_coloring(k):\n    n = 1\n    modulo = 10 ** 9 + 7\n    for _ in range(k - 1):\n        n = 4 * n * n\n        n %= modulo\n    n = 6 * n * n\n    n %= modulo\n    return n\nk = int(input())\nprint(rubiks_coloring(k))", "from math import log\nn = int(input())\nx = 2 ** n - 2\ncnt = pow(4, x, 1000000007)\nprint(cnt * 6 % 1000000007)", "k = int(input())\nprint(6 * pow(4, pow(2, k) - 2, 1000000007) % 1000000007)", "kkkk = int(input())\nprint(6 * pow(4, pow(2, kkkk) - 2, 1000000007) % 1000000007)", "m = int(input())\nc = pow(2, m) - 2\nb = pow(4, c, 1000000007)\nb = b * 6 % 1000000007\nprint(b)", "M = 10 ** 9 + 7\n\ndef binpowmodulus(a, b, M):\n    if b == 1:\n        return a % M\n    if b == 0:\n        return 1\n    if b % 2 == 0:\n        ans = binpowmodulus(a, b // 2, M)\n        return ans * ans % M\n    else:\n        ans = binpowmodulus(a, (b - 1) // 2, M)\n        return ans * a % M * ans % M\nk = int(input())\nk = 2 ** k - 1\nprint(6 * binpowmodulus(4, k - 1, M) % M)", "k = int(input())\nprint(6 * pow(4, pow(2, k) - 2, 1000000007) % 1000000007)", "ESP = 1000000007\nk = int(input())\nprint(6 * pow(4, 2 ** k - 2, ESP) % ESP)", "x = int(input())\nprint(6 * pow(4, pow(2, x) - 2, 1000000007) % 1000000007)", "n = int(input())\nmod = 10 ** 9 + 7\nprint(6 * pow(4, pow(2, n) - 2, mod) % mod)", "n = int(input())\nmod = 10 ** 9 + 7\nprint(6 * pow(4, pow(2, n) - 2, mod) % mod)", "n = int(input())\nans = 6\nfor i in range(1, n):\n    ans = ans * pow(4, 2 ** i, mod=10 ** 9 + 7) % (10 ** 9 + 7)\nprint(ans)", "mod = 10 ** 9 + 7\nk = int(input())\nprint(pow(4, 2 ** k - 2, mod) * 6 % mod)", "n = int(input())\nMOD = 10 ** 9 + 7\np = 6\nfor i in range(1, n):\n    p = p * pow(4, 2 ** i, MOD) % MOD\nprint(p)", "n = int(input())\nnodes = 2 ** n\nnodes = nodes - 2\nres = pow(4, nodes, 1000000007)\nres = res * 6 % 1000000007\nprint(res)", "MOD = 1000000007\n\ndef binpow(a, b, m):\n    a = a % m\n    res = 1\n    while b > 0:\n        if b & 1:\n            res = res * a % m\n        a = a * a % m\n        b >>= 1\n    return res\nk = int(input())\nif k == 1:\n    print(6)\nelse:\n    t1 = -1 * (1 - pow(2, k)) - 1\n    t = binpow(4, t1, MOD) * 6 % MOD\n    print(t)", "k = int(input())\nmod = 1000000007\nans = 6 * pow(4, pow(2, k) - 2, mod) % mod\nprint(ans)", "tree = int(input())\nprint(6 * pow(4, pow(2, tree) - 2, 1000000007) % 1000000007)", "n = int(input())\nmod = 1000000007\nprint(6 * pow(4, 2 ** n - 2, mod) % mod)", "print(6 * pow(4, pow(2, int(input())) - 2, 1000000007) % 1000000007)", "def power(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\n\ndef pow(x, y):\n    res = 1\n    x = x\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x\n        y = y >> 1\n        x = x * x\n    return res\nn = int(input())\nnodes = pow(2, n) - 2\nmod = 1000000000 + 7\nans1 = power(4, nodes, mod)\nans1 *= 6\nans1 %= mod\nprint(ans1)", "MOD = 1000000007\n\ndef power(a, b, mod=MOD):\n    if b == 0:\n        return 1\n    ans = power(a, b // 2, mod)\n    ans *= ans\n    ans = ans % mod\n    if b % 2 != 0:\n        ans *= a\n    return ans % mod\n\ndef solution(k):\n    exp = (1 << k) - 2\n    ans = power(4, exp)\n    ans *= 6\n    return ans % MOD\nk = int(input())\nans = solution(k)\nprint(ans)", "n = int(input())\np = (1 << n) - 2\nmod = 10 ** 9 + 7\nans = pow(4, p, mod)\nans *= 6\nprint(ans % mod)", "modulo = pow(10, 9) + 7\n\ndef power(base, exp):\n    if exp < 0:\n        return 1 / power(base, -exp)\n    ans = 1\n    while exp:\n        if exp & 1:\n            ans *= base\n        exp >>= 1\n        base *= base\n        base %= modulo\n        ans %= modulo\n    return ans % modulo\nk = int(input())\nresult = 6 * power(4, pow(2, k) - 2) % modulo\nprint(result)", "import math\nmod = 10 ** 9 + 7\nn = int(input())\nd = 2 ** n - 2\nprint(6 * pow(4, d, mod) % mod)", "mod = 1000000007\nn = int(input())\nout = 6\nvalue = 16\nfor i in range(1, n):\n    out = out * value % mod\n    value = value * value % mod\nprint(out)", "mod = 1000000007\nn = int(input())\nout = 6\nvalue = 16\nfor i in range(1, n):\n    out = out * value % mod\n    value = value * value % mod\nprint(out)", "mod = 1000000007\nn = int(input())\nout = 6\nvalue = 16\nfor i in range(1, n):\n    out = out * value % mod\n    value = value * value % mod\nprint(out)", "mod = 1000000007\nn = int(input())\nout = 6\nvalue = 16\nfor i in range(1, n):\n    out = out * value % mod\n    value = value * value % mod\nprint(out)", "mod = 1000000007\nn = int(input())\nans = 6\nval = 16\nfor i in range(1, n):\n    ans = ans * val % mod\n    val = val * val % mod\nprint(ans)", "mod = 1000000007\nn = int(input())\nans = 6\nval = 16\nfor i in range(1, n):\n    ans = ans * val % mod\n    val = val * val % mod\nprint(ans)", "import sys\ninput = sys.stdin.readline\nn = int(input())\nprint(pow(4, 2 ** n - 2, 10 ** 9 + 7) * 6 % (10 ** 9 + 7))", "print(6 * pow(4, pow(2, int(input())) - 2, 1000000007) % 1000000007)", "def ans2(k, prev):\n    return 6 * prev\nMOD = 10 ** 9 + 7\nk = int(input())\nprev = 1\nfor i in range(k - 1):\n    prev = (4 * prev) ** 2 % MOD\nres = ans2(k, prev) % MOD\nprint(res)", "n = int(input())\nprint(6 * pow(4, pow(2, n) - 2, 1000000007) % 1000000007)", "print(6 * pow(4, 2 ** int(input()) - 2, 10 ** 9 + 7) % (10 ** 9 + 7))", "n = int(input())\nprint(6 * pow(4, pow(2, n) - 2, 1000000007) % 1000000007)", "print(6 * pow(4, pow(2, int(input())) - 2, 1000000007) % 1000000007)", "def power(x, y, mod):\n    res = 1\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % mod\n        y = y >> 1\n        x = x * x % mod\n    return res % mod\n\ndef fun():\n    k = int(input())\n    inf = int(1000000000.0 + 7)\n    t1 = pow(2, k)\n    t1 -= 2\n    t2 = power(4, t1, inf)\n    print(t2 * 6 % inf)\n    pass\nfun()", "n = int(input())\nk = pow(2, n) - 2\nans = pow(4, k, 1000000007)\nprint(ans * 6 % 1000000007)", "m = 10 ** 9 + 7\nn = int(input())\nn -= 1\nprint(6 * pow(4, 2 * (pow(2, n) - 1), m) % m)", "print(6 * pow(4, 2 ** int(input()) - 2, 10 ** 9 + 7) % (10 ** 9 + 7))", "def power_of_4(pow):\n    if pow == 0:\n        return 1\n    elif pow == 1:\n        return 4\n    else:\n        p = power_of_4(pow // 2)\n        if pow % 2 == 0:\n            return p * p % 1000000007\n        else:\n            return p * p * 4 % 1000000007\nn = int(input())\nnumNodes = 2 ** n - 1\nans = 6\nprint(ans * power_of_4(numNodes - 1) % 1000000007)", "import sys\ninput = sys.stdin.readline\nM = 1000000007\nk = int(input())\nx = 2 ** k - 1\nprint(6 * pow(4, x - 1, M) % M)", "import sys\n\ndef readnum():\n    input = sys.stdin.readline\n    a = list(map(int, input().split()))\n    return a\n\ndef printf(val):\n    sys.stdout.write(str(val) + '\\n')\nn = readnum()[0]\n\ndef power(a, b, mod):\n    if b == 1:\n        return a\n    if b == 0:\n        return 1\n    ans = power(a, b // 2, mod)\n    ans *= ans\n    if b % 2:\n        ans *= a\n    ans = ans % mod\n    return ans\nprint(6 * power(4, 2 ** n - 2, 10 ** 9 + 7) % (10 ** 9 + 7))", "n = int(input())\nx = 4\nfor i in range(n):\n    x **= 2\n    x %= 10 ** 9 + 7\nprint(375000003 * x % (10 ** 9 + 7))", "n = int(input())\nmod = 10 ** 9 + 7\nprint(6 * pow(4, pow(2, n) - 2, mod) % mod)", "import math\nbig_number = int(1000000000.0 + 7)\na = int(input())\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    tmp = power(a, b // 2)\n    result = tmp * tmp\n    result = result % big_number\n    if b % 2 == 1:\n        result = result * a\n    return result % big_number\nm = pow(2, a) - 2\nprint(6 * power(4, m) % big_number)", "n = int(input())\nmod = 1000000007\nc1 = 6\nc2 = 16\nfor i in range(1, n):\n    c1 = c1 * c2 % mod\n    c2 = c2 * c2 % mod\nprint(c1)", "print(6 * pow(4, 2 ** int(input()) - 2, 10 ** 9 + 7) % (10 ** 9 + 7))", "mod = 1000000007\nn = int(input())\nanswer = 6\nvalue = 16\nfor i in range(1, n):\n    answer = answer * value % mod\n    value = value * value % mod\nprint(answer)", "k = int(input())\nl = [1]\nm = 10 ** 9 + 7\nfor i in range(k - 1):\n    l.append(16 * l[-1] ** 2 % m)\nprint(6 * l[-1] % m)", "print(str(6 * pow(4, pow(2, int(input())) - 2, 1000000007) % 1000000007))", "d = {1: 6, 2: 96, 3: 24576, 4: 610612729, 5: 218379003, 6: 979862110, 7: 47316973, 8: 781894559, 9: 304775472, 10: 153616455, 11: 217549120, 12: 417282843, 13: 915434300, 14: 934234, 15: 115095058, 16: 422120691, 17: 394710257, 18: 374487330, 19: 263582894, 20: 61556388, 21: 672219263, 22: 26965409, 23: 739859600, 24: 681105159, 25: 317561710, 26: 205882741, 27: 653224436, 28: 468274591, 29: 776665722, 30: 686170158, 31: 490502902, 32: 830053173, 33: 491866864, 34: 553769136, 35: 905505924, 36: 425351916, 37: 809070133, 38: 747936966, 39: 182445995, 40: 622757975, 41: 896821809, 42: 914685395, 43: 586027906, 44: 551317088, 45: 715056107, 46: 876956862, 47: 468036582, 48: 151560108, 49: 469809072, 50: 902552662, 51: 282872349, 52: 716427856, 53: 359665739, 54: 79733389, 55: 738462480, 56: 467900233, 57: 690506414, 58: 166788441, 59: 950618124, 60: 937481864}\nprint(d[int(input())])", "mod = int(1000000000.0 + 7)\n\ndef ksm(a: int, k: int) -> int:\n    res = 1\n    while k > 0:\n        if k & 1:\n            res = res * a % mod\n        a = a * a % mod\n        k >>= 1\n    return res\n\ndef main() -> None:\n    n = int(input())\n    print(ksm(4, (1 << n) - 2) * 6 % mod)\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    k = int(input())\n    mo = 10 ** 9 + 7\n    print(6 * pow(4, 2 ** k - 2, mo) % mo)\nsolve()", "n = int(input())\nmod = 10 ** 9 + 7\n\ndef binpow(a, n, mod):\n    if n == 0:\n        return 1\n    if n == 1:\n        return a % mod\n    if n % 2 == 0:\n        return binpow(a, n // 2, mod) ** 2 % mod\n    else:\n        return binpow(a, n - 1, mod) * a % mod\nk = binpow(4, (1 << n) - 2, mod) % mod\nprint(k * 6 % mod)", "MOD = 1000000007\nprint(6 * pow(4, pow(2, eval(input())) - 2, MOD) % MOD)", "print(6 * pow(4, 2 ** int(input()) - 2, 10 ** 9 + 7) % (10 ** 9 + 7))", "mod = 10 ** 9 + 7\n\ndef bin_exp(n, p):\n    ans = 1\n    while p:\n        if p & 1:\n            ans = ans * n % mod\n        n = n * n % mod\n        p >>= 1\n    return ans\nn = int(input())\nnodes = (1 << n) - 2\nprint(6 * bin_exp(4, nodes) % mod)", "def powe(a, b, mod):\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    pr = powe(a, b // 2, mod)\n    pr *= pr\n    pr %= mod\n    if b % 2 == 1:\n        pr *= a\n        pr %= mod\n    return pr\n\ndef rubiks_cube_coloring():\n    p = powe(4, 2 ** int(input()) - 2, 10 ** 9 + 7)\n    print(6 * p % (10 ** 9 + 7))\nrubiks_cube_coloring()", "k = int(input())\nans = 6 * pow(4, pow(2, k) - 2, pow(10, 9) + 7)\nans = ans % (pow(10, 9) + 7)\nprint(ans)", "mod = 10 ** 9 + 7\nn = int(input())\nx = pow(2, n) - 2\nprint(6 * pow(4, x, mod) % mod)", "n = int(input())\nmod = 1000000007\n\ndef qmi(x, y):\n    ans = 1\n    base = x\n    while y > 0:\n        if y & 1:\n            ans *= base\n        base *= base\n        y >>= 1\n    return ans\nprint(6 * pow(4, qmi(2, n) - 2, mod) % mod)", "k = int(input())\nmod = 10 ** 9 + 7\n\ndef calc(level):\n    if level == 1:\n        return 1\n    return pow(4 * calc(level - 1), 2, mod)\nprint(6 * calc(k) % (10 ** 9 + 7))", "def binpow(a, n):\n    res = 1\n    while n:\n        if n & 1:\n            res *= a % int(1000000000.0 + 7)\n        a *= a % int(1000000000.0 + 7)\n        n >>= 1\n    return res % int(1000000000.0 + 7)\nn = int(input())\nans = 6\nres = binpow(4, 2 ** n - 2)\nprint(ans * res % int(1000000000.0 + 7))", "n = int(input())\nsum = 6\npowe = 1\nmo = 1000000007\ns = 4\nfor i in range(2, n + 1):\n    powe = powe * 2\n    s = s * s\n    s = s % mo\n    sum = sum % mo\n    sum = sum * s\nprint(sum % mo)", "mod = 1000000007\nn = int(input())\nprint(pow(4, pow(2, n) - 2, mod) * 6 % mod)", "n = int(input())\nx = pow(2, n) - 2\nMOD = 1000000007\ny = pow(4, x, MOD)\ny = y * 6 % MOD\nprint(y)", "z = int(input())\nprint(6 * pow(4, pow(2, z) - 2, 1000000007) % 1000000007)", "p = 1000000007\n\ndef power(x, y):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nn = int(input())\nnodes = (1 << n) - 1\nnodes -= 1\nans = 6 * power(4, nodes) % p\nprint(ans)", "m = 1000000007\nk = int(input())\nans = 1\nfor i in range(k - 1):\n    ans = (ans * 4) ** 2 % m\nprint(6 * ans % m)", "n = int(input())\ns = 0\nfor i in range(2, n + 1):\n    s += 2 ** i\na = pow(2, s, 10 ** 9 + 7)\nprint(a * 6 % (10 ** 9 + 7))", "n = int(input())\nmod = 1000000007\n\ndef qmi(x, y):\n    ans = 1\n    base = x\n    while y > 0:\n        if y & 1:\n            ans *= base\n        base *= base\n        y >>= 1\n    return ans\nprint(6 * pow(4, qmi(2, n) - 2, mod) % mod)", "k = int(input())\nl = [1]\nm = 10 ** 9 + 7\nfor i in range(k - 1):\n    l.append(16 * l[-1] ** 2 % m)\nprint(6 * l[-1] % m)", "n = int(input())\nmod = 1000000000 + 7\nres = 6\nm = 16\ni: int\nfor i in range(1, n):\n    res *= m % mod\n    res %= mod\n    m *= m % mod\n    m %= mod\nprint(int(res))", "print(6 * pow(4, pow(2, int(input())) - 2, 1000000007) % 1000000007)", "mod = 1000000007\nn = int(input())\nans = 6\nval = 16\nfor i in range(1, n):\n    ans = ans * val % mod\n    val = val * val % mod\nprint(ans)", "print(6 * pow(4, pow(2, int(input())) - 2, 1000000007) % 1000000007)", "n = int(input())\nmod = 1000000007\nw = 6 * pow(4, pow(2, n) - 2, mod) % mod\nprint(w)", "MOD = int(1000000000.0 + 7)\nn = int(input())\ntotal = pow(2, n) - 1\nans = 6 * pow(4, total - 1, MOD)\nprint(ans % MOD)", "n = int(input())\nnode = 2 ** n - 1\n\ndef fast_pow(a, b):\n    res = 1\n    while b:\n        if b & 1:\n            res = res * a % 1000000007\n        a = a * a % 1000000007\n        b >>= 1\n    return res\nres = fast_pow(4, node - 1) * 6 % 1000000007\nprint(res)", "def power(a, b):\n    res = 1\n    while b:\n        if b & 1:\n            res = res * a % 1000000007\n        a = a * a % 1000000007\n        b >>= 1\n    return res\nh = int(input())\nx = 2 ** h - 2\nprint(6 * power(4, x) % 1000000007)"]