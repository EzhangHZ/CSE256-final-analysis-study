["import math\nlines = [*open(0)]\nsizes = lines[1].split(' ')\n(tot, running) = (0, 0)\nminval = 0\nfor lock in sizes:\n    tot += int(lock)\n    running += 1\n    minval = max(minval, tot / running)\nfor mintime in lines[3:]:\n    if int(mintime) < minval:\n        print('-1')\n    else:\n        print(math.ceil(tot / int(mintime)))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    V = list(map(int, input().split()))\n    arr = []\n    curr = 0\n    val = -float('inf')\n    for i in range(n):\n        curr += V[i]\n        val = max(val, curr // (i + 1) + (curr % (i + 1) > 0) * 1)\n        arr.append(val)\n    S = sum(V)\n    q = int(input())\n    for _ in range(q):\n        tj = int(input())\n        cnt = S // tj + (S % tj > 0) * 1\n        print(cnt) if cnt <= n and arr[cnt - 1] <= tj else print(-1)\n    return\nsolve()", "from math import ceil\nimport os, sys\nisLocal = os.environ.get('USER', '') == 'xueenpeng'\nif isLocal:\n    sys.stdin = open('./file/input.txt', 'r')\n    pass\n\ndef main():\n    n = int(input())\n    locks = list(map(int, input().split(' ')))\n    q = int(input())\n    querys = []\n    for _ in range(q):\n        querys.append(int(input()))\n    minTime = 0\n    count = 0\n    total = 0\n    for lock in locks:\n        count += 1\n        total += lock\n        minTime = max(minTime, ceil(total / count))\n    for query in querys:\n        if query < minTime:\n            print(-1)\n        else:\n            ans = ceil(total / query)\n            print(ans)\nmain()", "import itertools\nn = int(input())\nv = list(itertools.accumulate(map(int, input().split())))\nm = max(((v[i] - 1) // (i + 1) + 1 for i in range(n)))\nfor _ in range(int(input())):\n    t = int(input())\n    print((v[-1] - 1) // t + 1 if t >= m else -1)", "import itertools\nn = int(input())\nv = list(itertools.accumulate(map(int, input().split())))\nm = max(((v[i] - 1) // (i + 1) + 1 for i in range(n)))\nfor _ in range(int(input())):\n    t = int(input())\n    print((v[-1] - 1) // t + 1 if t >= m else -1)", "import sys\nn = int(input())\nV = [int(i) for i in input().split()]\n(time, total) = (0, 0)\nfor i in range(n):\n    total += V[i]\n    time = max(time, (total + i) // (i + 1))\n    pass\nfor q in range(int(input())):\n    t = int(input())\n    if t < time:\n        res = -1\n    else:\n        res = (total + t - 1) // t\n    sys.stdout.write(str(res) + '\\n')\n    pass", "import itertools\nn = int(input())\nv = list(itertools.accumulate(map(int, input().split())))\nm = max(((v[i] - 1) // (i + 1) + 1 for i in range(n)))\nfor _ in range(int(input())):\n    t = int(input())\n    print((v[-1] - 1) // t + 1 if t >= m else -1)", "n = int(input())\nV = [int(i) for i in input().split()]\n(time, total) = (0, 0)\nfor i in range(n):\n    total += V[i]\n    time = max(time, (total + i) // (i + 1))\n    pass\nfor q in range(int(input())):\n    t = int(input())\n    if t < time:\n        print(-1)\n    else:\n        print((total + t - 1) // t)\n    pass", "n = int(input())\nV = [int(i) for i in input().split()]\n(time, total) = (0, 0)\nfor i in range(n):\n    total += V[i]\n    time = max(time, (total + i) // (i + 1))\n    pass\nfor q in range(int(input())):\n    t = int(input())\n    if t < time:\n        print(-1)\n    else:\n        print((total + t - 1) // t)\n    pass", "import math\nfrom itertools import accumulate\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    qn = int(input())\n    acc = list(accumulate(arr))\n    cca = [0] * len(acc)\n    for i in range(len(acc)):\n        cca[i] = int(math.ceil(acc[i] / (i + 1)))\n    maxx = max(cca)\n    for _ in range(qn):\n        q = int(input())\n        if q < maxx:\n            print(-1)\n        else:\n            print(int(math.ceil(acc[-1] / q)))\n\ndef init():\n    import os\n    import sys\n    sys.setrecursionlimit(2 * 10 ** 6)\n    if 'CP_LOCAL_ENV' in os.environ:\n        sys.stdin = open('cf_test_d.txt')\ninit()\nmain()", "number = int(input())\nV = [int(i) for i in input().split()]\n(time, total) = (0, 0)\nfor i in range(number):\n    total += V[i]\n    time = max(time, (total + i) // (i + 1))\n    pass\nfor q in range(int(input())):\n    t = int(input())\n    if t < time:\n        print(-1)\n    else:\n        print((total + t - 1) // t)\n    pass", "n = int(input())\nV = list(map(int, input().split()))\n(time, total) = (0, 0)\nfor i in range(n):\n    total += V[i]\n    time = max(time, (total + i) // (i + 1))\nfor q in range(int(input())):\n    t = int(input())\n    if t < time:\n        print(-1)\n    else:\n        print((total + t - 1) // t)", "n = int(input())\nV = list(map(int, input().split()))\n(time, total) = (0, 0)\nfor i in range(n):\n    total += V[i]\n    time = max(time, (total + i) // (i + 1))\nfor q in range(int(input())):\n    t = int(input())\n    if t < time:\n        print(-1)\n    else:\n        print((total + t - 1) // t)", "import itertools\nn = int(input())\nv = list(itertools.accumulate(map(int, input().split())))\nm = max(((v[i] - 1) // (i + 1) + 1 for i in range(n)))\nfor _ in range(int(input())):\n    t = int(input())\n    print((v[-1] - 1) // t + 1 if t >= m else -1)", "import itertools\nn = int(input())\nv = list(itertools.accumulate(map(int, input().split())))\nm = max(((v[i] - 1) // (i + 1) + 1 for i in range(n)))\nfor _ in range(int(input())):\n    t = int(input())\n    print((v[-1] - 1) // t + 1 if t >= m else -1)", "import itertools\nn = int(input())\nv = list(itertools.accumulate(map(int, input().split())))\nm = max(((v[i] - 1) // (i + 1) + 1 for i in range(n)))\nfor _ in range(int(input())):\n    t = int(input())\n    print((v[-1] - 1) // t + 1 if t >= m else -1)", "from math import ceil\nr = range\ni = lambda : int(input())\ns = lambda : input().split()\nfor _ in r(1):\n    n = i()\n    v = list(map(int, s()))\n    dp = []\n    sum = 0\n    max = 0\n    for _ in r(n):\n        sum += v[_]\n        val = ceil(sum / (_ + 1))\n        dp += (val,)\n        if val > max:\n            max = val\n    for _ in r(i()):\n        t = i()\n        print(ceil(sum / t)) if max <= t else print(-1)", "from math import ceil\nn = int(input())\nv = list(map(int, input().split()))\ns = sum(v)\nprefix = [0]\nfor i in range(n):\n    prefix.append(prefix[i] + v[i])\nmin_time = max([ceil(prefix[i] / i) for i in range(1, n + 1)])\nq = int(input())\nfor _ in range(q):\n    t = int(input())\n    if t < min_time:\n        print(-1)\n    else:\n        print(ceil(s / t))", "import math\nn = int(input())\narr = list(map(int, input().split()))\nsum = 0\nmaxi = 0\nfor i in range(n):\n    sum += arr[i]\n    maxi = max(maxi, math.ceil(sum / (i + 1)))\nfor _ in range(int(input())):\n    t = int(input())\n    ans = math.ceil(sum / t)\n    if maxi > t:\n        ans = -1\n    print(int(ans))", "import math\nn = int(input())\narr = list(map(int, input().split()))\nsum = 0\nmaxi = 0\nfor i in range(n):\n    sum += arr[i]\n    maxi = max(maxi, math.ceil(sum / (i + 1)))\nfor _ in range(int(input())):\n    t = int(input())\n    ans = math.ceil(sum / t)\n    if maxi > t:\n        ans = -1\n    print(int(ans))", "import itertools\nn = int(input())\nv = list(itertools.accumulate(map(int, input().split())))\nm = max(((v[i] - 1) // (i + 1) + 1 for i in range(n)))\nfor _ in range(int(input())):\n    t = int(input())\n    print((v[-1] - 1) // t + 1 if t >= m else -1)", "import itertools\nn = int(input())\nv = list(itertools.accumulate(map(int, input().split())))\nm = max(((v[i] - 1) // (i + 1) + 1 for i in range(n)))\nfor _ in range(int(input())):\n    t = int(input())\n    print((v[-1] - 1) // t + 1 if t >= m else -1)", "import itertools\nn = int(input())\nv = list(itertools.accumulate(map(int, input().split())))\nm = max(((v[i] - 1) // (i + 1) + 1 for i in range(n)))\nfor _ in range(int(input())):\n    t = int(input())\n    print((v[-1] - 1) // t + 1 if t >= m else -1)", "import math as ma\nr = range\nR = lambda : int(input())\nnum_of_locks = R()\nvols_arr = list(map(int, input().split(' ')))\nsum_of_vols = 0\navg_vols = []\nfor _ in r(len(vols_arr)):\n    sum_of_vols += vols_arr[_]\n    avg_vols += (ma.ceil(sum_of_vols / (_ + 1)),)\nmax_avg_vols = max(avg_vols)\nfor _ in r(R()):\n    liters = R()\n    answer = ma.ceil(sum_of_vols / liters)\n    if max_avg_vols > liters:\n        answer = -1\n    print(answer)", "import itertools\nm = 0\nn = int(input())\nv = list(itertools.accumulate(map(int, input().split())))\nfor i in range(n):\n    m = max((v[i] - 1) // (i + 1) + 1, m)\nfor _ in range(int(input())):\n    t = int(input())\n    print((v[-1] - 1) // t + 1 if t >= m else -1)", "def ceil_div(a, b):\n    return (a - 1) // b + 1\nn = int(input())\nv = list(map(int, input().split()))\np_v = [0]\nfor v_i in v:\n    p_v.append(p_v[-1] + v_i)\nm = max((ceil_div(p_v[i], i) for i in range(1, n + 1)))\nq = int(input())\nfor _ in range(q):\n    t_j = int(input())\n    if t_j < m:\n        print(-1)\n    else:\n        print(ceil_div(p_v[n], t_j))", "import math\nn = int(input())\narr = list(map(int, input().split()))\nsum = 0\nmaxi = 0\nfor i in range(n):\n    sum += arr[i]\n    maxi = max(maxi, math.ceil(sum / (i + 1)))\nfor _ in range(int(input())):\n    t = int(input())\n    ans = math.ceil(sum / t)\n    if maxi > t:\n        ans = -1\n    print(int(ans))", "import math\nn = int(input())\narr = list(map(int, input().split()))\nsum = 0\nmaxi = 0\nfor i in range(n):\n    sum += arr[i]\n    maxi = max(maxi, math.ceil(sum / (i + 1)))\nfor _ in range(int(input())):\n    t = int(input())\n    ans = math.ceil(sum / t)\n    if maxi > t:\n        ans = -1\n    print(int(ans))", "import math\nfor _ in range(1):\n    n = int(input())\n    a = list(map(int, input().split()))\n    maxi = [0] * n\n    s = 0\n    for i in range(n):\n        s += a[i]\n        maxi[i] = max(maxi[i - 1], math.ceil(s / (i + 1)))\n    q = int(input())\n    for i in range(q):\n        t = int(input())\n        ans = math.ceil(s / t)\n        if ans <= n and t >= maxi[ans - 1]:\n            print(ans)\n        else:\n            print(-1)", "import math\nn = int(input())\nL = list(map(int, input().split()))\nP = [0] * n\nP[0] = L[0]\nfor i in range(1, n):\n    P[i] = P[i - 1] + L[i]\nm = L[0]\nfor i in range(1, n):\n    a = P[i]\n    b = math.ceil(a / (i + 1))\n    if b > m:\n        m = b\n    else:\n        pass\nq = int(input())\nfor _ in range(q):\n    s = int(input())\n    if s < m:\n        print(-1)\n    else:\n        a = P[-1]\n        print(math.ceil(a / s))", "import bisect\nimport itertools\nn = int(input())\nv = list(itertools.accumulate(map(int, input().split())))\nt = list(itertools.accumulate(((v[i] - 1) // (i + 1) + 1 for i in range(n)), max))\nt = list((max(t[i], (v[-1] - 1) // (i + 1) + 1) for i in range(n)))\nt.reverse()\nfor _ in range(int(input())):\n    a = bisect.bisect_right(t, int(input()))\n    print(n + 1 - a if a > 0 else -1)", "n = int(input())\nv = list(map(int, input().split()))\nassert n == len(v)\nvs = v[0]\nts = [0] * n\nts[0] = v[0]\nfor i in range(1, n):\n    vs += v[i]\n    ts[i] = max(ts[i - 1], (vs + i + 1 - 1) // (i + 1))\nq = int(input())\nfor i in range(q):\n    t = int(input())\n    if t < ts[-1]:\n        print(-1)\n    else:\n        print((vs + t - 1) // t)", "n = int(input())\nv = list(map(int, input().split()))\nq = int(input())\nsm = sum(v)\npr = v[0]\nt = [sm]\nsmp = v[0]\nfor i in range(1, n):\n    smp += v[i]\n    pr = max(pr, pr + (smp - pr * (i + 1) + i) // (i + 1))\n    t += [max(pr, pr + (sm - (i + 1) * pr + i) // (i + 1))]\nfor _ in range(q):\n    ta = int(input())\n    if ta < t[-1]:\n        print(-1)\n    else:\n        print((sm + ta - 1) // ta)", "import bisect\n\ndef solve():\n    (a,) = list(map(int, input().split()))\n    mas = list(map(int, input().split()))\n    vents = []\n    prefsum = [0]\n    for i in range(len(mas)):\n        prefsum.append(prefsum[-1] + mas[i])\n    ourmax = 0\n    for i in range(len(mas)):\n        ourmax = max(ourmax, (prefsum[i + 1] + i) // (i + 1))\n        vents.append(-max((prefsum[-1] + i) // (i + 1), ourmax))\n    q = int(input())\n    for i in range(q):\n        request = int(input())\n        x = bisect.bisect_left(vents, -request)\n        if x == a:\n            print(-1)\n        else:\n            print(x + 1)\nn = 1\nwhile n != 0:\n    n -= 1\n    solve()", "import itertools\nimport bisect\nn = int(input())\nv = list(map(int, input().split()))\ns = list(itertools.accumulate(v))\nu = [(s[i] - 1) // (i + 1) + 1 for i in range(n)]\nk = list(itertools.accumulate(u, max))\nt = [float('inf'), s[n - 1]] + [max(k[i - 2], (s[n - 1] - 1) // i + 1) for i in range(2, n + 1)]\nt.reverse()\nfor _ in range(int(input())):\n    a = bisect.bisect_right(t, int(input()))\n    print(n + 1 - a if a > 0 else -1)", "import math\nn = int(input())\narr = list(map(int, input().split()))\nsum = 0\nmaxi = 0\nfor i in range(n):\n    sum += arr[i]\n    maxi = max(maxi, math.ceil(sum / (i + 1)))\nfor _ in range(int(input())):\n    t = int(input())\n    ans = math.ceil(sum / t)\n    if maxi > t:\n        ans = -1\n    print(int(ans))", "from math import ceil as cl\nn = int(input())\nlst = list(map(int, input().split(' ')))\nmx = -1\nsum = 0\nfor i in range(n):\n    sum += lst[i]\n    mx = max(mx, cl(sum / (i + 1)))\nq = int(input())\nfor y in range(q):\n    h = int(input())\n    ans = cl(sum / h)\n    if mx > h:\n        ans = -1\n    print(ans)", "num_locks = int(input())\nvolumn = list(map(int, input().split()))\nsum_cur = 0\nmin_t = []\nmax_min_t = []\nfor i in range(len(volumn)):\n    sum_cur += volumn[i]\n    t_i = sum_cur // (i + 1) + (sum_cur % (i + 1) > 0) * 1\n    min_t.append(t_i)\n    if i == 0:\n        max_min_t.append(t_i)\n    else:\n        max_min_t.append(max(max_min_t[-1], t_i))\nnum_queries = int(input())\nsv = sum(volumn)\nfor _ in range(num_queries):\n    t = int(input())\n    min_open = sv // t + (sv % t > 0) * 1\n    if min_open > num_locks:\n        print(-1)\n    elif t < max_min_t[min_open - 1]:\n        print(-1)\n    else:\n        print(min_open)"]