["from sys import stdin\nimport math\nn = int(stdin.readline().strip())\n\ndef s():\n    (n, k) = [int(x) for x in stdin.readline().split(' ')]\n    aa = [int(x) for x in stdin.readline().split(' ')]\n    tot = sum(aa)\n    need = tot - k\n    aa2 = sorted(aa)\n    m = aa2[0]\n    total_gain = 0\n    best_steps = None\n    for (i, a) in enumerate(reversed(aa2)):\n        x = math.ceil((need - total_gain) / (i + 1))\n        if x < 0:\n            x = 0\n        steps = i + x\n        if best_steps is None or steps < best_steps:\n            best_steps = steps\n        gain = a - m\n        total_gain += gain\n    if best_steps < 0:\n        best_steps = 0\n    print(best_steps)\nfor i in range(n):\n    s()", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, k) = map(int, inp().split())\n    a = list(map(int, inp().split()))\n    a.sort()\n    s = sum(a)\n    if s <= k:\n        print(0)\n        return\n    ans = s - k\n    s -= a[0]\n    for i in range(1, n):\n        s -= a[n - i]\n        x = max(a[0] + (s - k + i) // (i + 1), 0)\n        ans = min(ans, x + i)\n    print(ans)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "def answer(arr, n, k):\n    arr.sort()\n    sum1 = sum(arr)\n    if sum1 <= k:\n        return 0\n    minimum = sum1 - k\n    ans = minimum\n    total = 0\n    for i in range(n - 1, 0, -1):\n        total += arr[i] - arr[0]\n        rem = minimum - total\n        if rem <= 0:\n            ans = min(ans, n - i)\n            return ans\n        f = (rem + (n - i)) // (n - i + 1)\n        v = f + n - i\n        if v <= ans:\n            ans = v\n    return ans\nt = int(input())\nfor K in range(t):\n    inp = input().split()\n    n = int(inp[0])\n    k = int(inp[1])\n    arr = []\n    inp = input().split()\n    for i in inp:\n        arr.append(int(i))\n    print(answer(arr, n, k))", "def solve(n, k, arr):\n    s = sum(arr)\n    if s <= k:\n        return 0\n    if n == 1:\n        return s - k\n    arr.sort()\n    stack = [arr[i] - arr[0] for i in range(1, n)]\n    ans = 0\n    m = 10 ** 18\n    while stack and s > k:\n        z = ans + (s - k + ans) // (ans + 1)\n        m = min(m, z)\n        s -= stack[-1]\n        stack.pop()\n        ans += 1\n    if s > k:\n        ans += (s - k + ans) // (ans + 1)\n    return min(ans, m)\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(solve(n, k, arr))", "t = int(input())\n\ndef solve(n, k, a):\n    a = sorted(a)\n    s = sum(a)\n    if s <= k:\n        return 0\n    if n == 1:\n        return s - k\n    mn = a[0]\n    rs = s - mn\n    ans = s - k\n    for i in range(n - 1, 0, -1):\n        rs -= a[i]\n        c = 1 + n - i\n        nmn = (k - rs) // c\n        ans = min(ans, c - 1 + max(mn - nmn, 0))\n    return ans\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, k, a))", "import sys\n\ndef func():\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    sm = sum(l)\n    l.sort()\n    s = []\n    for i in range(1, n):\n        s.append(l[i] - l[0])\n    count = 0\n    mn = sys.maxsize\n    while len(s) and sm > k:\n        mn = min(mn, count + (sm - k + count) // (count + 1))\n        sm -= s[-1]\n        s.pop()\n        count += 1\n    if sm > k:\n        count += (sm - k + count) // (count + 1)\n    return min(mn, count)\nt = int(input())\nfor i in range(t):\n    print(func())", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    smallest = a.pop()\n    n -= 1\n    sums = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        sums[i] = sums[i + 1] + a[i]\n    ans = int(1e+30)\n    for i in range(n + 1):\n        level = (k - sums[i]) // (i + 1)\n        ans = min(ans, max(0, smallest - level) + i)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    summ = sum(a)\n    if summ <= k:\n        print(0)\n        return\n    ans = summ - k\n    summ -= a[0]\n    for i in range(1, n):\n        summ -= a[n - i]\n        x = max(a[0] + (summ - k + i) // (i + 1), 0)\n        ans = min(ans, x + i)\n    print(ans)\nfor i in range(int(input())):\n    solve()", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = sum(a)\n    ans = 10 ** 18\n    prefix = [0]\n    for i in range(1, n):\n        prefix.append(prefix[i - 1] + a[i])\n    for i in range(n):\n        m = (k - prefix[i]) // (n - i)\n        if m < a[0]:\n            ans = min(ans, a[0] - m + n - i - 1)\n        else:\n            ans = min(ans, n - i - 1)\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, k) = R()\n    a = sorted(R())\n    s = 0\n    r = 2000000000.0\n    for x in a:\n        s += x\n        n -= 1\n        r = min(r, n - min(0, k - s - a[0] * n) // (n + 1))\n    print(r)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, k) = R()\n    a = sorted(R())\n    r = 2000000000.0\n    for x in a:\n        k -= x\n        n -= 1\n        r = min(r, n - min(0, k - a[0] * n) // (n + 1))\n    print(r)", "from math import floor\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    if n == 1:\n        print(max(0, x[0] - k))\n    elif sum(x) <= k:\n        print(0)\n    else:\n        temp = sum(x) - k\n        x = sorted(x)\n        ans = temp\n        s = x[0]\n        for i in range(n - 1, 0, -1):\n            s += x[i]\n            xd = floor((s - temp) / (n - i + 1))\n            if xd < x[0]:\n                temp_ans = x[0] - xd + n - i\n            else:\n                temp_ans = n - i\n            if temp_ans < ans:\n                ans = temp_ans\n        print(ans)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, k) = R()\n    a = sorted(R())\n    r = 2000000000.0\n    for x in a:\n        k -= x\n        n -= 1\n        r = min(r, n - min(0, k - a[0] * n) // (n + 1))\n    print(r)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, k) = R()\n    a = sorted(R())\n    r = 2000000000.0\n    for x in a:\n        k -= x\n        n -= 1\n        r = min(r, n - min(0, k - a[0] * n) // (n + 1))\n    print(r)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, k) = R()\n    a = sorted(R())\n    r = 2000000000.0\n    for x in a:\n        k -= x\n        n -= 1\n        r = min(r, n - min(0, k - a[0] * n) // (n + 1))\n    print(r)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a_list = [int(i) for i in input().split()]\n    a_list.sort(reverse=True)\n    a_len = len(a_list)\n    a_sum = sum(a_list)\n    a_min = a_list[-1]\n    awn = max((a_sum - k, 0))\n    a = a_sum - k\n    i0 = 0\n    for i in range(n - 1):\n        i0 += 1\n        a -= a_list[i] - a_min\n        i1 = (a - 1) // (i + 2) + 1\n        if i1 < 0:\n            i1 = 0\n        if i0 + i1 < awn:\n            awn = i1 + i0\n    print(awn)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, k) = R()\n    a = sorted(R())\n    r = 2000000000.0\n    for x in a:\n        k -= x\n        n -= 1\n        r = min(r, n - min(0, k - a[0] * n) // (n + 1))\n    print(r)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, k) = R()\n    a = sorted(R())\n    r = 2000000000.0\n    for x in a:\n        k -= x\n        n -= 1\n        r = min(r, n - min(0, k - a[0] * n) // (n + 1))\n    print(r)", "p = lambda : map(int, input().split())\n(t,) = p()\nwhile t:\n    t -= 1\n    (n, k) = p()\n    a = sorted(p())\n    r = 2000000000.0\n    for x in a:\n        k -= x\n        n -= 1\n        r = min(r, n - min(0, k - a[0] * n) // (n + 1))\n    print(r)", "import math\n\ndef solve():\n    (length, vsota) = map(int, input().split())\n    sez = sorted(list(map(int, input().split())))\n    zacVsota = sum(sez)\n    mini = zacVsota - vsota\n    ostaleVsote = [0, 0]\n    for (i, x) in enumerate(sez[1:-1]):\n        ostaleVsote.append(x + ostaleVsote[i + 1])\n    if zacVsota <= vsota:\n        return 0\n    if length == 1:\n        return zacVsota - vsota\n    for (i, x) in enumerate(sez[::-1]):\n        ostalaVsota = ostaleVsote[-i - 1]\n        moguBiBit = math.floor((vsota - ostalaVsota) / (i + 2))\n        if moguBiBit >= sez[0]:\n            operacij = i + 1\n        else:\n            operacij = i + 1 + sez[0] - moguBiBit\n        mini = min(operacij, mini)\n    return mini\nn = int(input())\nfor i in range(n):\n    print(solve())", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, k) = R()\n    a = sorted(R())\n    r = 2000000000.0\n    for x in a:\n        k -= x\n        n -= 1\n        r = min(r, n - min(0, k - a[0] * n) // (n + 1))\n    print(r)", "from math import ceil, floor\nimport sys\ninput = sys.stdin.readline\nnum_test_cases = int(input())\nfor test_case_ittr in range(num_test_cases):\n    (n, threshold) = [int(x) for x in input().strip().split()]\n    arr = [int(x) for x in input().strip().split()]\n    arr.sort()\n    amount_to_lose = max(sum(arr) - threshold, 0)\n    ans = amount_to_lose\n    if amount_to_lose > 0:\n        sufix_sum = 0\n        for i in range(1, n):\n            sufix_sum += arr[-i]\n            numerator = amount_to_lose + i * arr[0] - sufix_sum\n            num_decriments = ceil(numerator / (i + 1))\n            num_decriments = max(0, num_decriments)\n            ans = min(ans, num_decriments + i)\n    print(ans)", "from math import *\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    s = sum(a)\n    d = max(s - k, 0)\n    d1 = 0\n    a1 = [i + 1 for i in range(n)]\n    for i in range(n - 1):\n        d1 = d1 + a[-(i + 1)] - a[0]\n        if d1 >= d:\n            a1[i] = i + 1\n        else:\n            a1[i] = ceil((d - d1) / (i + 2)) + i + 1\n    a1[n - 1] = d\n    print(min(a1))", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, k) = R()\n    a = sorted(R())\n    r = 2000000000.0\n    for x in a:\n        k -= x\n        n -= 1\n        r = min(r, n - min(0, k - a[0] * n) // (n + 1))\n    print(r)", "def solve(n, k, arr):\n    if n == 1:\n        return 0 if arr[0] <= k else arr[0] - k\n    arr.sort()\n    S = sum(arr)\n    a0 = arr[0]\n    if S <= k:\n        return 0\n    prefixSum = [0] * n\n    curr = 0\n    for i in range(n):\n        curr += arr[i]\n        prefixSum[i] = curr\n    ans = S - k\n    for i in range(n - 1, 0, -1):\n        rangeSum = prefixSum[n - 1] - prefixSum[i - 1]\n        a = min((a0 + rangeSum - S + k) // (n - i + 1), a0)\n        ans = min(a0 - a + n - i, ans)\n    return ans\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(solve(n, k, arr))", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    (n, k) = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    m = arr[0]\n    t = 0\n    for i in arr[1:]:\n        t += i\n    ans = m + t - k\n    if ans < 0:\n        ans = 0\n    sub = 0\n    j = n - 1\n    for x in range(1, n):\n        sub += arr[j]\n        s = k - t + sub\n        yy = s // (x + 1)\n        if m <= yy:\n            y = 0\n        else:\n            y = m - yy\n        ans = min(ans, x + y)\n        j -= 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    m = l[0]\n    l[0] = 0\n    for i in range(1, n):\n        l[i] += l[i - 1]\n    ans = float('inf')\n    for i in range(n):\n        a = (k - l[i]) // (n - i)\n        if a >= m:\n            ans = min(ans, n - i - 1)\n        else:\n            ans = min(ans, m - a + n - i - 1)\n    print(ans)", "import math\nfor i in range(int(input())):\n    (n, K) = map(int, input().split())\n    A = [int(k) for k in input().split()]\n    A.sort()\n    l = sum(A) - K\n    if l <= 0:\n        print(0)\n    else:\n        ans = l\n        for k in range(n - 1, 0, -1):\n            l = l - (A[k] - A[0])\n            ans = min(ans, n - k + max(0, math.ceil(l / (n - k + 1))))\n        print(ans)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, k) = R()\n    a = sorted(R())\n    r = 2000000000.0\n    for x in a:\n        k -= x\n        n -= 1\n        smallest = a[0]\n        difference = k - smallest * n\n        average_difference = min(0, difference) // (n + 1)\n        r = min(r, n - average_difference)\n    print(r)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    x = sum(arr)\n    cnt = 0\n    arr.sort()\n    stack = []\n    minn = 1000000000000000007\n    for i in range(1, n):\n        stack.append(arr[i] - arr[0])\n    while stack and x > m:\n        minn = min(minn, cnt + (x - m + cnt) // (cnt + 1))\n        x -= stack.pop()\n        cnt += 1\n    if x > m:\n        cnt += (x - m + cnt) // (cnt + 1)\n    print(min(cnt, minn))", "import math\nresult = []\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    a = sorted(list(map(int, input().split())))\n    (m, length) = (min(a), len(a))\n    need_sum = sum(a) - k\n    a_diff = list(map(lambda x: x - a[0], a))\n    current_sum = sum(a_diff)\n    answer = max(0, need_sum)\n    for i in range(1, n):\n        current_sum -= a_diff[i - 1]\n        new_answer = math.ceil(max(0, need_sum - current_sum) / (n - i + 1)) + (n - i)\n        if answer is None or new_answer < answer:\n            answer = new_answer\n    result.append(answer)\nprint('\\n'.join(map(str, result)))", "import heapq\nimport sys\nimport math\nfrom collections import deque\nfrom bisect import bisect_left, bisect_right\nI = sys.stdin.readline\nII = lambda : int(I())\nIN = lambda x: map(int, x.split())\nFN = lambda x: map(float, x.split())\nL = lambda x: list(IN(x))\nM = 1000000007\nP = print\nT = True\nF = False\nfor _ in range(II()):\n    (n, k) = IN(I())\n    a = L(I())\n    s = sum(a)\n    if s <= k:\n        print(0)\n        continue\n    t = s - k\n    l = t\n    ls = 0\n    a.sort()\n    for i in range(n - 1, 0, -1):\n        ls += a[i] - a[0]\n        rem = t - ls\n        if rem <= 0:\n            l = min(l, n - i)\n            break\n        f = (rem + n - i) // (n - i + 1)\n        c = f + n - i\n        if c < l:\n            l = c\n    print(l)", "import sys\nimport bisect\nimport math\nfrom collections import deque\ninput = lambda : sys.stdin.readline().strip()\nceil = lambda x: math.ceil(x)\nmod = 10 ** 9 + 7\n\ndef solve():\n    (n, k) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    s = sum(a)\n    m = s - k\n    (l, cnt) = (0, 0)\n    for i in reversed(range(1, n)):\n        (l, cnt) = (l + a[i], cnt + 1)\n        x = max(ceil((s - k + a[0] * cnt - l) / (cnt + 1)), 0)\n        m = min(x + cnt, m)\n    return max(m, 0)\nt = 1\nt = int(input())\nfor _ in range(t):\n    print(solve())", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort()\n    total = sum(a)\n    l = []\n    for i in range(1, n):\n        l.append(a[i] - a[0])\n    t = 10 ** 18\n    ans = 0\n    while len(l) > 0 and total > k:\n        t = min(t, ans + (total - k + ans) // (ans + 1))\n        total -= l.pop()\n        ans += 1\n    if total > k:\n        ans += (total - k + ans) // (ans + 1)\n    print(min(ans, t))", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    sm = sum(arr)\n    if sm <= k:\n        print(0)\n    else:\n        mn = sm - k\n        x = arr[-1]\n        cnt = 2\n        for i in range(2, n):\n            arr[i] += arr[i - 1]\n        for i in range(n - 2, -1, -1):\n            s = arr[i]\n            if i == 0:\n                s = 0\n            df = k - s\n            df = df // cnt\n            if df > arr[0]:\n                df = arr[0]\n            mn = min(mn, cnt - 1 + arr[0] - df)\n            cnt += 1\n        print(mn)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    s = sum(A)\n    A.sort()\n    ans = 0\n    res = []\n    for i in range(1, n):\n        res.append(A[i] - A[0])\n    min_v = 10 ** 18\n    while len(res) > 0 and s > k:\n        min_v = min(min_v, ans + (s + ans - k) // (ans + 1))\n        s -= res.pop(-1)\n        ans += 1\n    if s > k:\n        ans += (s + ans - k) // (ans + 1)\n    print(min(ans, min_v))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    ans = 10 ** 18\n    s = sum(a) - a[0]\n    for y in range(n):\n        need_min = (k - s) // (y + 1)\n        x = max(0, a[0] - need_min)\n        ans = min(ans, x + y)\n        s -= a[-y - 1]\n    print(ans)", "import math\nt = int(input())\nfor x in range(t):\n    [n, k] = [int(d) for d in input().split()]\n    A = [int(d) for d in input().split()]\n    A.sort()\n    left = sum(A) - k\n    if left <= 0:\n        print('0')\n        continue\n    ans = left\n    for a in range(n - 1, 0, -1):\n        left -= A[a] - A[0]\n        ans = min(ans, n - a + max(0, math.ceil(left / (n - a + 1))))\n    print(ans)", "import math\nfor i in range(int(input())):\n    (n, K) = map(int, input().split())\n    A = [int(k) for k in input().split()]\n    A.sort()\n    l = sum(A) - K\n    if l <= 0:\n        print(0)\n    else:\n        ans = l\n        for k in range(n - 1, 0, -1):\n            l = l - (A[k] - A[0])\n            ans = min(ans, n - k + max(0, math.ceil(l / (n - k + 1))))\n        print(ans)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if sum(l) <= k:\n        print(0)\n        continue\n    if sum(l) == k + 1:\n        print(1)\n        continue\n    s = 0\n    d = sum(l) - k\n    res = d\n    for i in range(n - 1, 0, -1):\n        s += l[i]\n        res = min(res, n - i + max(0, math.ceil((d - s + (n - i) * l[0]) / (n - i + 1))))\n    print(res)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    v = [int(i) for i in input().split()]\n    v.sort()\n    ans = v[0] + n - 1\n    for i in range(n):\n        if i > 0:\n            k -= v[i]\n        temp = k\n        temp /= n - i\n        temp = math.floor(temp)\n        w = temp\n        ans = min(ans, max(0, v[0] - w) + n - i - 1)\n    print(ans)", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n    a = A[0]\n    if len(A) == 1:\n        print(max(0, a - K))\n        continue\n    S = [a]\n    for v in A[1:]:\n        S.append(S[-1] + v)\n    ans = 1 << 60\n    for l in range(N):\n        x = max(0, -(-(S[-l - 1] + l * a - K) // (l + 1)))\n        ans = min(ans, x + l)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    s = sum(A)\n    A.sort()\n    ans = 0\n    res = []\n    for i in range(1, n):\n        res.append(A[i] - A[0])\n    min_v = 10 ** 18\n    while len(res) > 0 and s > k:\n        min_v = min(min_v, ans + (s + ans - k) // (ans + 1))\n        s -= res.pop(-1)\n        ans += 1\n    if s > k:\n        ans += (s + ans - k) // (ans + 1)\n    print(min(ans, min_v))", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    s = sum(A)\n    if s <= k:\n        print(0)\n    else:\n        A.sort()\n        diff = s - k\n        ans = s - k\n        s = 0\n        for i in range(n - 1, 0, -1):\n            s += A[i]\n            if s - (n - i) * A[0] >= diff:\n                calc = 0\n            else:\n                calc = math.ceil((diff - s + (n - i) * A[0]) / (n - i + 1))\n            ans = min(ans, calc + n - i)\n        print(ans)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    v = [int(i) for i in input().split()]\n    v.sort()\n    ans = v[0] + n - 1\n    for i in range(n):\n        if i > 0:\n            k -= v[i]\n        temp = k\n        temp /= n - i\n        temp = math.floor(temp)\n        w = temp\n        ans = min(ans, max(0, v[0] - w) + n - i - 1)\n    print(ans)", "import math\nt = int(input())\nfor x in range(t):\n    [n, k] = [int(d) for d in input().split()]\n    A = [int(d) for d in input().split()]\n    A.sort()\n    left = sum(A) - k\n    if left <= 0:\n        print('0')\n        continue\n    ans = left\n    for a in range(n - 1, 0, -1):\n        left -= A[a] - A[0]\n        ans = min(ans, n - a + max(0, math.ceil(left / (n - a + 1))))\n    print(ans)", "import math\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(j) for j in input().split()]\n    a.sort()\n    if sum(a) <= k:\n        print('0')\n    elif n == 1:\n        print(a[0] - k)\n    else:\n        (sumi, cnt) = (0, 0)\n        cost = []\n        for j in range(1, n):\n            sumi += a[j]\n            cnt += 1\n            x = math.floor((k - sumi) / (n - cnt))\n            cost.append(n - cnt - 1 + max(a[0] - x, 0))\n        cost.append(max(a[0] - k // n, 0) + n - 1)\n        print(min(cost))", "from itertools import permutations as per\nfrom math import factorial as fact\nfrom difflib import SequenceMatcher\nimport bisect\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    psum = [] + a\n    psum[0] = 0\n    for i in range(2, n):\n        psum[i] += psum[i - 1]\n    ans = 10 ** 18\n    for i in range(n):\n        x = max(0, a[0] - (k - psum[n - i - 1]) // (i + 1))\n        ans = min(ans, x + i)\n    print(ans)", "_ = int(input())\nfor __ in range(_):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    li = arr[0]\n    s = sum(arr)\n    if s <= k:\n        print(0)\n        continue\n    if n == 1:\n        print(li - k)\n        continue\n    avg = k // n\n    wyn = s - k\n    tmp_wyn = 10 ** 18\n    tmp_s_1 = li\n    if li > avg:\n        wyn = min(wyn, li - avg + n - 1)\n    else:\n        wyn = min(wyn, n - 1)\n    for x in range(1, n):\n        tmp_s_1 += arr[x]\n        if tmp_s_1 + (n - x - 1) * li <= k:\n            wyn = min(wyn, n - x - 1)\n    tmp_s = 0\n    for x in range(1, n):\n        tmp_s += arr[x]\n        diff = (k - tmp_s) // (n - x)\n        if diff >= li:\n            tmp_wyn = n - x - 1\n        else:\n            tmp_wyn = li - diff + n - x - 1\n        wyn = min(wyn, tmp_wyn)\n    print(wyn)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ss = sum(a)\n    if ss <= k:\n        print(0)\n        continue\n    if n == 1:\n        print(a[0] - k)\n        continue\n    a.sort()\n    cc = a.count(a[0])\n    ans = min(ss - cc + max(0, a[0] * cc - k), ss - k)\n    s = 0\n    x = 0\n    for i in range(n - 1, 0, -1):\n        s += a[i]\n        x += 1\n        ans = min(ans, max(math.ceil((ss - s + x * a[0] - k) / (x + 1)), 0) + x)\n    print(ans)", "from sys import stdin\ninput = stdin.readline\nfrom math import ceil\nfor test in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    s = sum(a)\n    m = 0\n    a.sort()\n    for i in range(1, n):\n        m += a[i] - a[0]\n    res = max(ceil((s - m - k) / n), 0) + n - 1\n    for i in range(1, n):\n        m -= a[i] - a[0]\n        c = max(ceil((s - m - k) / (n - i)), 0) + n - i - 1\n        res = min(res, c)\n    print(res)", "import math\nfrom sys import stdin, stdout, setrecursionlimit\nfrom bisect import bisect_left as bsl\nfrom bisect import bisect_right as bsr\nimport heapq as hq\nsetrecursionlimit(2 ** 20)\nt = 1\nt = int(stdin.readline())\nfor _ in range(t):\n    (n, k) = list(map(int, stdin.readline().rstrip().split()))\n    a = list(map(int, stdin.readline().rstrip().split()))\n    su = sum(a)\n    if su <= k:\n        print(0)\n        continue\n    cnt = 0\n    a.sort()\n    suf = [0] * (n + 1)\n    suf[n - 1] = a[n - 1]\n    for i in range(n - 2, -1, -1):\n        suf[i] = a[i] + suf[i + 1]\n    ans = su - k\n    diff = su - k\n    for y in range(1, n):\n        if diff - suf[n - y] + y * a[0] < 0:\n            ans = min(ans, y)\n            continue\n        tmp = (y + diff - suf[n - y] + y * a[0]) // (y + 1)\n        ans = min(ans, tmp + y)\n    print(ans)", "from sys import stdin\nimport math\nfrom collections import deque\nfrom heapq import heapify, heappop, heappush\nfrom bisect import bisect_left, bisect_right\ninput = stdin.readline\n\ndef ceil(m, n):\n    val = m // n\n    if m % n != 0:\n        return val + 1\n    return val\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    total = sum(arr)\n    if total <= k:\n        print(0)\n        continue\n    differ = total - k\n    diff = [0] * n\n    for i in range(n - 1, -1, -1):\n        diff[i] = arr[i] - arr[0]\n        if i < n - 1:\n            diff[i] = diff[i] + diff[i + 1]\n    chances = [0] * n\n    for i in range(n - 1, 0, -1):\n        chances[i] = max(0, ceil(differ - diff[i], n - i + 1)) + (n - i)\n    chances[0] = differ\n    print(min(chances))", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort(reverse=True)\n    total = sum(arr)\n    diff = total - k\n    answer = max(diff, 0)\n    prefix_sum = []\n    prefix_sum.append(0)\n    for i in range(1, n + 1):\n        prefix_sum.append(prefix_sum[i - 1] + arr[i - 1])\n    minimum = min(arr)\n    for b in range(n):\n        a = b * minimum + total - prefix_sum[b] - k\n        a /= b + 1\n        a = ceil(a)\n        a = max(0, a)\n        answer = min(answer, a + b)\n    print(answer)", "import math\nimport sys\nimport queue\nfrom heapq import heappop, heappush\nimport random\n\ndef solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    e = sum(a)\n    if e <= k:\n        print(0)\n        return\n    a.sort()\n    res = 0\n    q = 0\n    i = n - 1\n    while i > 0:\n        d = a[i] - a[0]\n        if q >= d:\n            yd = q - d + 1\n            ye = (e - k + q) // (q + 1)\n            e = e - (q + 1) * max(1, min(yd, ye))\n            a[0] -= max(1, min(yd, ye))\n            res += max(1, min(yd, ye))\n        else:\n            res += 1\n            e -= d\n            q += 1\n            i -= 1\n        if e <= k:\n            print(res)\n            return\n    print(res + (e - k + n - 1) // n)\nmulti_test = 1\nif multi_test:\n    t = int(input())\n    for _ in range(t):\n        solve()\nelse:\n    solve()", "t = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    a1 = []\n    s1 = 0\n    for i in range(n):\n        s1 += a[i]\n        a1.append(s1)\n    s = sum(a)\n    ans = []\n    for i in range(n):\n        if (i * a[0] + a1[n - i - 1] - k) % (i + 1) == 0:\n            ans1 = (i * a[0] + a1[n - i - 1] - k) // (i + 1)\n            if ans1 <= 0:\n                ans1 = 0\n            ans.append(ans1 + i)\n        else:\n            ans1 = (i * a[0] + a1[n - i - 1] - k) // (i + 1)\n            if ans1 < 0:\n                ans1 = 0\n            else:\n                ans1 += 1\n            ans.append(ans1 + i)\n    if s <= k:\n        print(0)\n    else:\n        ans1 = 1e+18\n        for i in range(len(ans)):\n            if ans[i] >= 1:\n                ans1 = min(ans1, ans[i])\n        print(int(ans1))", "t = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    pre = [i for i in a]\n    for i in range(1, n):\n        pre[i] += pre[i - 1]\n    if pre[-1] < k:\n        print(0)\n    else:\n        ans = pre[-1] - k\n        i = n - 1\n        cnt = 0\n        while i > 0:\n            cnt += 1\n            sm = k - (pre[i - 1] - pre[0])\n            num = sm // (cnt + 1)\n            if (num + 1) * (cnt + 1) + (pre[i - 1] - pre[0]) <= k:\n                num += 1\n            elif num * (cnt + 1) + (pre[i - 1] - pre[0]) > k:\n                num -= 1\n            tmp = cnt\n            if num < pre[0]:\n                tmp += pre[0] - num\n            ans = min(ans, tmp)\n            i -= 1\n        print(ans)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    prefix = [0 for i in range(n)]\n    arr.sort()\n    prefix[0] = 0\n    ans = float('inf')\n    for i in range(1, n):\n        prefix[i] = arr[i] + prefix[i - 1]\n    for i in range(n - 1, -1, -1):\n        s = prefix[i]\n        diff = k - s\n        req = diff // (n - i)\n        for j in range(req - 1, req + 1):\n            cnt = 0\n            if j * (n - i) + s > k:\n                continue\n            if j <= arr[0]:\n                cnt += arr[0] - j\n            cnt += n - i - 1\n            ans = min(ans, cnt)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    prefix = [0 for i in range(n)]\n    arr.sort()\n    prefix[0] = 0\n    ans = float('inf')\n    for i in range(1, n):\n        prefix[i] = arr[i] + prefix[i - 1]\n    for i in range(n - 1, -1, -1):\n        s = prefix[i]\n        diff = k - s\n        req = diff // (n - i)\n        for j in range(req - 1, req + 2):\n            cnt = 0\n            if j * (n - i) + s > k:\n                continue\n            if j <= arr[0]:\n                cnt += arr[0] - j\n            cnt += n - i - 1\n            ans = min(ans, cnt)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    prefix = [0 for i in range(n)]\n    arr.sort()\n    prefix[0] = 0\n    ans = float('inf')\n    for i in range(1, n):\n        prefix[i] = arr[i] + prefix[i - 1]\n    for i in range(n - 1, -1, -1):\n        s = prefix[i]\n        diff = k - s\n        req = diff // (n - i)\n        for j in range(req - 3, req + 3):\n            cnt = 0\n            if j * (n - i) + s > k:\n                continue\n            if j <= arr[0]:\n                cnt += arr[0] - j\n            cnt += n - i - 1\n            ans = min(ans, cnt)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l = sorted(l)\n    pre = [0] * (n + 1)\n    for i in range(1, n):\n        pre[i] = pre[i - 1] + l[i]\n    ans = int(1000000000000000.0 + 1)\n    for i in range(n - 1, -1, -1):\n        s = pre[i]\n        cnt = n - i\n        req = k - s\n        req = req // cnt\n        for x in range(req - 5, req + 6):\n            if s + x * cnt > k:\n                continue\n            curr = 0\n            if x <= l[0]:\n                curr += l[0] - x\n            curr += cnt - 1\n            ans = min(ans, curr)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l = sorted(l)\n    pre = [0] * (n + 1)\n    for i in range(1, n):\n        pre[i] = pre[i - 1] + l[i]\n    ans = int(1000000000000000.0 + 1)\n    for i in range(n - 1, -1, -1):\n        s = pre[i]\n        cnt = n - i\n        req = k - s\n        req = req // cnt\n        for x in range(req - 5, req + 6):\n            if s + x * cnt > k:\n                continue\n            curr = 0\n            if x <= l[0]:\n                curr += l[0] - x\n            curr += cnt - 1\n            ans = min(ans, curr)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    prefix = [0 for i in range(n)]\n    arr.sort()\n    prefix[0] = 0\n    ans = float('inf')\n    for i in range(1, n):\n        prefix[i] = arr[i] + prefix[i - 1]\n    for i in range(n - 1, -1, -1):\n        s = prefix[i]\n        diff = k - s\n        req = diff // (n - i)\n        for j in range(req - 4, req + 4):\n            cnt = 0\n            if j * (n - i) + s > k:\n                continue\n            if j <= arr[0]:\n                cnt += arr[0] - j\n            cnt += n - i - 1\n            ans = min(ans, cnt)\n    print(ans)"]