["def solve():\n    (n, d) = map(int, input().split())\n    a = sorted([*map(int, input().split())])[::-1]\n    (i, j, r) = (0, len(a), 0)\n    while i < j:\n        x = a[i]\n        while x <= d:\n            j -= 1\n            if i < j:\n                x += a[i]\n            else:\n                return r\n        else:\n            r += 1\n            i += 1\n    return r\nprint(solve())", "(n, d) = [int(i) for i in input().split()]\narr = [int(i) for i in input().split()]\n\ndef cal(n, d, arr):\n    arr.sort(reverse=True)\n    t = 0\n    ans = 0\n    for i in range(n):\n        if i <= n - t - 1:\n            p = d // arr[i]\n            if i + 1 + p <= n - t:\n                ans += 1\n                t += p\n            else:\n                break\n        else:\n            break\n    return ans\nprint(cal(n, d, arr))", "(n, d) = map(int, input().split())\npowers = sorted(map(int, input().split()), reverse=True)\nwins = 0\nfor power in powers:\n    req = d // power + 1\n    n -= req\n    if n >= 0:\n        wins += 1\n    else:\n        break\nprint(wins)", "(n, d) = map(int, input().split())\nl = list(map(int, input().split()))\nl.sort(reverse=True)\nc = 0\nfor i in range(n):\n    x = d // l[i] + 1\n    n = n - x\n    if n >= 0:\n        c = c + 1\n    else:\n        break\nprint(c)", "from collections import deque\n(N, M) = input().split(' ')\nN = int(N)\nM = int(M)\npowers = [int(i) for i in input().split(' ')]\npowers.sort()\nq = deque(powers)\nc = 0\nwhile q:\n    curr = q.pop()\n    org = curr\n    while curr <= M and q:\n        q.popleft()\n        curr += org\n    if curr > M:\n        c += 1\nprint(c)", "(n, d) = map(int, input().split())\np = list(map(int, input().split()))\np.sort(reverse=True)\nc = 0\na = 0\nfor i in range(n):\n    c = c + d // p[i] + 1\n    if c <= n:\n        a = a + 1\n    else:\n        break\nprint(a)", "(n, x) = map(int, input().split())\nl = [int(a) for a in input().split()]\nl.sort(reverse=True)\nc = 0\ni = 0\nv = l[i]\nt = 0\n(ans, curr) = (0, 0)\nfor i in l:\n    curr += x // i + 1\n    if curr > n:\n        break\n    ans += 1\nprint(ans)", "(n, x) = map(int, input().split())\nl = [int(a) for a in input().split()]\nl.sort(reverse=True)\nc = 0\ni = 0\nv = 0\nt = 0\nwhile n:\n    v += l[i]\n    if v > x:\n        c += 1\n        i += 1\n        v = 0\n    n -= 1\nprint(c)", "(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\nl.sort(reverse=True)\nc = 0\nans = 0\nfor i in range(n):\n    c = c + (m // l[i] + 1)\n    if c <= n:\n        ans = ans + 1\n    else:\n        break\nprint(ans)", "import sys\nimport math\nfrom collections import Counter\n\ndef gi():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef gs():\n    return sys.stdin.readline().strip()\n\ndef fun(ep, a):\n    a.sort()\n    if min(a) > ep:\n        return len(a)\n    l = len(a)\n    j = l - 1\n    i = -1\n    s = a[j]\n    c = 0\n    while i < j:\n        if s > ep:\n            c += 1\n            j -= 1\n            if i < j:\n                s = a[j]\n            else:\n                s = -1\n        else:\n            i += 1\n            if i < j:\n                s += a[j]\n            else:\n                s = -1\n    if s > ep:\n        c += 1\n    return c\nfor _ in range(1):\n    p = gi()\n    a = gi()\n    print(fun(p[-1], a))", "(N, D) = list(map(int, input().split()))\np = [int(i) for i in input().split()]\np.sort()\np.reverse()\nans = 0\nr = N - 1\nfor l in range(N):\n    mem = D // p[l]\n    r -= mem\n    if r >= l:\n        ans += 1\n    else:\n        break\nprint(ans)", "def R():\n    return [*map(int, input().split())]\n(n, d) = R()\na = R()\na = sorted(a)\nans = 0\nj = 0\nfor i in range(n - 1, -1, -1):\n    r = d // a[i]\n    if r <= i - j:\n        ans += 1\n        j += r\n    else:\n        break\nprint(ans)", "inputs = list(map(int, input().split()))\na = list(map(int, input().split()))\ncnt = 0\ncursum = 0\n(l, r) = (0, inputs[0] - 1)\na.sort()\ncursum = 0\nwhile l <= r:\n    cursum += a[r]\n    while l <= r and cursum > inputs[1]:\n        cnt += 1\n        r -= 1\n        cursum = a[r]\n    l += 1\nprint(cnt)", "(n, d) = map(int, input().split())\nl = list(map(int, input().split()))\nl.sort(reverse=True)\ncnt = 0\ncount = len(l)\nfor i in l:\n    x = d // i + 1\n    if count - x < 0:\n        break\n    count -= x\n    cnt += 1\nprint(cnt)", "(n, d) = [int(i) for i in input().split()]\nx = [int(i) for i in input().split()]\nx.sort(reverse=True)\ns = 0\na = 0\nfor i in x:\n    s += d // i + 1\n    if s > n:\n        break\n    a += 1\nprint(a)", "(n, d) = [int(i) for i in input().split()]\nx = [int(i) for i in input().split()]\nx.sort(reverse=True)\ns = 0\na = 0\nfor i in x:\n    s += d // i + 1\n    if s > n:\n        break\n    a += 1\nprint(a)", "(n, d) = list(map(int, input().split()))\nk = list(map(int, input().split()))\nk.sort(reverse=True)\ncount = 0\nremain = n\nwhile True:\n    use = d // k[count] + 1\n    if use > remain:\n        print(count)\n        break\n    remain = remain - use\n    count = count + 1\n    if remain == 0:\n        print(count)\n        break", "(n, d) = map(int, input().split())\np = list(map(int, input().split(' ')))\np.sort(reverse=True)\ntotal = 0\nc = 0\nfor i in p:\n    number = d // i + 1\n    total += number\n    if total > n:\n        break\n    else:\n        c += 1\nprint(c)", "(n, enemyPower) = map(int, input().split())\nplayerStrength = list(map(int, input().split()))\nplayerStrength.sort()\nleft = 0\nright = n - 1\nteamStrength = 0\nans = 0\nwhile left <= right:\n    teamStrength += playerStrength[right]\n    if teamStrength > enemyPower:\n        ans += 1\n        right -= 1\n        teamStrength = 0\n    else:\n        left += 1\nprint(ans)", "(n, d) = [int(i) for i in input().split()]\nx = [int(i) for i in input().split()]\nx.sort(reverse=True)\ns = 0\na = 0\nfor i in x:\n    s += d // i + 1\n    if s > n:\n        break\n    a += 1\nprint(a)", "(n, d) = [int(i) for i in input().split()]\nx = [int(i) for i in input().split()]\nx.sort(reverse=True)\ns = 0\na = 0\nfor i in x:\n    s += d // i + 1\n    if s > n:\n        break\n    a += 1\nprint(a)", "d = int(input().split(' ')[1])\np = sorted(map(int, input().split(' ')))\nc = 0\nl = 0\nr = len(p) - 1\ns = p[r]\nwhile r > l:\n    while s <= d:\n        s += p[r]\n        l += 1\n    if l > r:\n        break\n    r -= 1\n    s = p[r]\n    c += 1\nif p[0] > d:\n    c += 1\nprint(c)", "(N, D) = [int(i) for i in input().split()]\nlist = [int(i) for i in input().split()]\nlist.sort(reverse=True)\nplayers = 0\ncount = 0\nfor i in list:\n    players += D // i + 1\n    if players > N:\n        break\n    count += 1\nprint(count)", "(N, D) = map(int, input().split())\nP = list(map(int, input().split()))\nP.sort(reverse=True)\ncnt = 0\ntotal = 0\nfor i in P:\n    need = (D + i) // i\n    total += need\n    if total <= N:\n        cnt += 1\nprint(cnt)", "import sys\nnd = [int(ii) for ii in input().split()]\n(n, d) = (nd[0], nd[1])\np = [int(ii) for ii in input().split()]\np.sort(reverse=True)\n(i, ans) = (0, 0)\nwhile n > 0:\n    n -= d // p[i] + 1\n    if n < 0:\n        break\n    ans += 1\n    i += 1\nprint(ans)", "(n, d) = map(int, input().split())\nl = list(map(int, input().split()))\na = 0\ns = 0\nl.sort(reverse=True)\nfor i in l:\n    s += d // i + 1\n    if s > n:\n        break\n    else:\n        a += 1\nprint(a)", "import math\nfrom collections import *\n\ndef solve():\n    (n, d) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    a.sort(reverse=True)\n    i = 0\n    t = n\n    c = 0\n    while t > 0:\n        l = d // a[i] + 1\n        if t >= l:\n            t -= l\n            i += 1\n            c += 1\n        else:\n            break\n    print(c)\nsolve()", "from math import floor\n\ndef main():\n    (n, d) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort(reverse=True)\n    diff = floor(d / arr[0]) + 1\n    count = 0\n    i = 1\n    length = n\n    while n >= diff:\n        count += 1\n        n = n - diff\n        if i < length:\n            diff = floor(d / arr[i]) + 1\n            i += 1\n        else:\n            break\n    print(count)\nmain()", "(n, d) = list(map(int, input().split()))\narr = list(map(int, input().split()))\narr.sort()\n(ptr1, ptr2) = (0, n - 1)\n(cur_power, answer) = (0, 0)\nwhile ptr2 >= ptr1:\n    cur_power = arr[ptr2]\n    while cur_power <= d and ptr1 < ptr2:\n        ptr1 += 1\n        cur_power += arr[ptr2]\n    if cur_power > d:\n        answer += 1\n    ptr2 -= 1\nprint(answer)", "class Solution:\n\n    def basketballTogether(self, n, d, ps):\n        ps.sort(reverse=True)\n        (sum_, count) = (0, 0)\n        for pi in ps:\n            need = (d + pi) // pi\n            sum_ += need\n            if sum_ > n:\n                return count\n            else:\n                count += 1\n        return count\nsol = Solution()\n(n, d) = list(map(int, input().split()))\nps = list(map(int, input().split()))\nprint(sol.basketballTogether(n, d, ps))", "(n, d) = map(int, input().split())\nl = list(map(int, input().split()))\nplayers = len(l)\nl.sort(reverse=True)\ncounter = 0\nfor i in l:\n    needed = d // i + 1\n    if players >= needed:\n        players = players - needed\n        counter += 1\n    else:\n        break\nprint(counter)", "def fn(l1, l2):\n    if l1[0] == 1:\n        return int(l2[0] > l1[1])\n    l2.sort()\n    i = 0\n    j = l1[0] - 1\n    cnt = 0\n    while 1:\n        if i == j:\n            if l2[i] > l1[1]:\n                cnt += 1\n            break\n        req = l1[1] // l2[j]\n        if i + req - 1 < j:\n            cnt += 1\n            i += req\n            j -= 1\n        else:\n            break\n    return cnt\nl1 = list(map(int, input().split()))\nl2 = list(map(int, input().split()))\nprint(fn(l1, l2))", "(n, d) = map(int, input().split())\nkoroshite = sorted(list(map(int, input().split())))\nans = 0\nkk = len(koroshite)\nindexer = -1\nwhile kk > 0:\n    ageru = d // koroshite[indexer] + 1\n    if ageru > kk:\n        break\n    else:\n        kk -= ageru\n        ans += 1\n        indexer -= 1\nprint(ans)", "(n, m) = list(map(int, input().split()))\na = list(map(int, input().split()))\na.sort(reverse=True)\ni = ans = sm = 0\nwhile n:\n    sm += a[i]\n    if sm > m:\n        ans += 1\n        i += 1\n        sm = 0\n    n -= 1\nprint(ans)", "(n, d) = map(int, input().split())\nplayers = list(map(int, input().split()))\nplayers.sort(reverse=True)\ni = 0\nj = len(players) - 1\nresult = 0\nwhile i <= j:\n    if i == j:\n        if players[i] > d:\n            result += 1\n        break\n    num = d // players[i]\n    if num == 0:\n        result += 1\n        i += 1\n        continue\n    j = j - num\n    if j < i:\n        break\n    i += 1\n    result += 1\nprint(result)", "import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n(n, x) = mp()\nl = li()\nl.sort(reverse=True)\ni = 0\nk = 0\nc = 0\nwhile k < n:\n    r = x // l[i] + 1\n    if r <= n - k:\n        c += 1\n        k += r\n        i += 1\n    else:\n        break\npr(c)", "(n, d) = map(int, input().split())\np = list(map(int, input().split()))\np.sort()\nnum_of_players = 1\nr = n - 1\nl = 0\nwin = 0\nwhile l + num_of_players - 1 <= r and num_of_players <= n:\n    if p[r] * num_of_players <= d:\n        num_of_players = num_of_players + 1\n    else:\n        r = r - 1\n        l = l + num_of_players - 1\n        win = win + 1\nprint(win)", "(n, d) = [int(i) for i in input().split()]\nx = [int(i) for i in input().split()]\nx.sort(reverse=True)\ns = 0\na = 0\nfor i in x:\n    s += d // i + 1\n    if s > n:\n        break\n    a += 1\nprint(a)", "(n, d) = map(int, input().split())\np = list(map(int, input().split()))\np.sort(reverse=True)\n(cnt, ans) = (len(p), 0)\nfor e in p:\n    if cnt >= d // e + 1:\n        cnt -= d // e + 1\n        ans += 1\n    else:\n        break\nprint(ans)", "(n, k) = list(map(int, input().split(sep=' ')))\narr = list(map(int, input().split(sep=' ')))\narr.sort()\ncnt = 0\ns = 0\ni = -1\nwhile s < n:\n    s += k // arr[i] + 1\n    i = i - 1\n    cnt = cnt + 1\nif s > n:\n    print(cnt - 1)\nelif s == n:\n    print(cnt)", "(n, m) = map(int, input().split())\narr = list(map(int, input().split()))\n(l, r) = (0, len(arr) - 1)\ncnt = 0\narr.sort()\nsm = 0\nwhile l <= r:\n    sm += arr[r]\n    if sm > m:\n        sm = 0\n        cnt += 1\n        r -= 1\n    else:\n        l += 1\nprint(cnt)", "(n, d) = map(int, input().split())\na = list(map(int, input().split()))\na.sort(reverse=True)\nans = 0\nr = 0\nl = n\nfor i in range(n):\n    r = d // a[i] + 1\n    if r <= l:\n        l -= r\n        ans += 1\n    else:\n        break\nprint(ans)", "(n, d) = map(int, input().split())\np_arr = list(map(int, input().split()))\nwin_s = 0\nteam = []\np_arr.sort()\n(i, j) = (0, len(p_arr) - 1)\nwhile i <= j:\n    sum_ = p_arr[j]\n    while sum_ <= d and i < j:\n        sum_ += p_arr[j]\n        i += 1\n    if sum_ > d:\n        win_s += 1\n    j -= 1\nprint(win_s)", "import sys\n(n, m) = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\na.sort()\nnn = 0\nans = 0\nfor i in range(n - 1, -1, -1):\n    k = m // a[i] + 1\n    nn += k\n    if nn <= n:\n        ans += 1\n    else:\n        break\nprint(ans)", "import sys\n\ndef input(type=str):\n    return type(sys.stdin.readline().strip())\n\ndef input_n(type=str):\n    return list(map(type, input().split()))\n(N, D) = input_n(int)\nP = input_n(int)\nP.sort()\nleft = 0\nright = N - 1\nwin_cnt = 0\nwhile True:\n    left += D // P[right] + 1 - 1\n    right -= 1\n    if left - right > 1:\n        break\n    win_cnt += 1\nprint(win_cnt)", "(n, d) = map(int, input().split())\narr = list(map(int, input().split()))\nans = 0\nind = n - 1\narr.sort()\nwhile n > 0:\n    t = d // arr[ind] + 1\n    if t <= n:\n        n -= t\n        ans += 1\n    else:\n        break\n    ind -= 1\nprint(ans)", "(n, d) = map(int, input().split())\nl = list(map(int, input().split()))\nl.sort()\n(i, j) = (-1, n - 1)\nc = 1\nans = 0\nwhile i < j:\n    if l[j] * c > d:\n        ans += 1\n        j -= 1\n        c = 1\n    else:\n        i += 1\n        c += 1\nprint(ans)", "(n, d) = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n(i, j) = (0, n - 1)\nans = 0\nwhile i <= j:\n    k = d // a[j] + 1\n    if i + k - 1 <= j:\n        ans += 1\n        j -= 1\n        i += k - 1\n    else:\n        break\nprint(ans)", "def basketball():\n    (n, m) = map(int, input().split())\n    team = list(map(int, input().split()))\n    team.sort()\n    k = 1\n    ans = 0\n    index = 0\n    sep_1 = n\n    while k != 0:\n        i = m // team[n - 1 - index] + 1\n        if i * team[n - 1 - index] > m and i <= sep_1:\n            sep_1 = sep_1 - i\n            ans = ans + 1\n        else:\n            break\n        index = index + 1\n    print(ans)\nbasketball()", "from math import ceil\n(n, d) = list(map(int, input().split(' ')))\np = list(map(int, input().split(' ')))\np.sort(reverse=True)\ncount = 0\nif min(p) > d:\n    print(n)\nelse:\n    for i in p:\n        need = ceil((d + 1) / i)\n        count += 1\n        n -= need\n        if n < 0:\n            print(count - 1)\n            break", "(n, d) = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n(i, j) = (0, n - 1)\nans = 0\nwhile i <= j:\n    k = d // a[j] + 1\n    if i + k - 1 <= j:\n        ans += 1\n        j -= 1\n        i += k - 1\n    else:\n        break\nprint(ans)", "(n, d) = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n(i, j) = (0, n - 1)\nans = 0\nwhile i <= j:\n    k = d // a[j] + 1\n    if i + k - 1 <= j:\n        ans += 1\n        j -= 1\n        i += k - 1\n    else:\n        break\nprint(ans)", "(n, d) = [int(i) for i in input().split()]\nplis = [int(j) for j in input().split()]\nplis = sorted(plis)\nwin = 0\nwhile n > 0:\n    n -= d // int(plis[-1]) + 1\n    if n >= 0:\n        win += 1\n        del plis[-1]\n    else:\n        break\nprint(win)", "(n, d) = map(int, input().split())\ns = list(map(int, input().split()))\nk = n\nr = -1\ns.sort()\nwhile k - d // s[r] - 1 >= 0:\n    k -= d // s[r] + 1\n    r -= 1\n    if r < -n:\n        break\nprint(-1 - r)", "import math\n(N, d) = map(int, input().split())\nplayers = sorted(map(int, input().split()), reverse=True)\nwin = 0\nfor player in players:\n    c = math.ceil((d + 1) / player)\n    if c <= N:\n        win += 1\n        N -= c\n    else:\n        break\nprint(win)", "def bas_togeather():\n    from math import ceil\n    (n, d) = map(int, input().split())\n    p = list(map(int, input().split()))\n    rest = n\n    i = 0\n    p = sorted(p, reverse=True)\n    games = 0\n    while i < n and p[i] * rest / d > 1:\n        rest -= int(d / p[i]) + 1\n        i += 1\n        games += 1\n    print(games)\nbas_togeather()", "(n, D) = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\ni = 0\nj = n - 1\ncount = 0\nwhile i <= j:\n    k = D // a[j] + 1\n    if i + k - 1 <= j:\n        count += 1\n        j -= 1\n        i += k - 1\n    else:\n        break\nprint(count)", "(n, d) = [int(i) for i in input().split()]\nx = [int(i) for i in input().split()]\nx.sort(reverse=True)\ns = 0\na = 0\nfor i in x:\n    s += d // i + 1\n    if s > n:\n        break\n    a += 1\nprint(a)", "(n, d) = map(int, input().split())\np = list(map(int, input().split()))\np = sorted(p)[::-1]\ni = 0\nans = 0\nresult = 0\nwhile ans <= n and i < n:\n    if p[i] > d:\n        ans += 1\n        if ans <= n:\n            result += 1\n        i += 1\n    else:\n        ans += d // p[i] + 1\n        i += 1\n        if ans <= n:\n            result += 1\n        else:\n            break\nprint(result)", "(n, d) = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n(i, j) = (0, n - 1)\nans = 0\nwhile i <= j:\n    sum = a[j]\n    while sum <= d and i < j:\n        sum += a[j]\n        i += 1\n    if sum > d:\n        ans += 1\n    j -= 1\nprint(ans)", "(n, d) = input().split()\n(n, d) = (int(n), int(d))\npp = input().split()\np = []\nfor i in pp:\n    p.append(int(i))\np.sort(reverse=True)\njug_usa = 0\nfor i in range(n):\n    jug_nec = d // p[i] + 1\n    jug_usa += jug_nec\n    if jug_usa > n:\n        break\nif jug_usa == n:\n    i += 1\nprint(i)", "(n, d) = map(int, input().split())\nl = list(map(int, input().split()))\nl.sort(reverse=True)\nansi = 0\ni = 0\nlength = n - 1\nwhile i <= length:\n    x = d // l[i]\n    x += 1\n    length = length - (x - 1)\n    if length < i:\n        break\n    ansi += 1\n    i += 1\nprint(ansi)", "(n, d) = map(int, input().split())\narr = list(map(int, input().split()))\narr.sort(reverse=True)\n(c, w) = (0, 0)\nfor i in range(n):\n    player_need = (d + arr[i]) // arr[i]\n    c += player_need\n    if c > n:\n        print(w)\n        exit(0)\n    else:\n        w += 1\nprint(w)", "(N, D) = input().split()\nN = int(N)\nD = int(D)\ncandidates = [int(x) for x in input().split()]\ncandidates.sort()\nans = 0\nwhile N > 0:\n    best = candidates.pop()\n    c_needed = D // best + 1\n    N -= c_needed\n    if N >= 0:\n        ans += 1\nprint(ans)", "nd = input().split()\n(n, d) = (int(nd[0]), int(nd[1]))\np = [int(x) for x in input().split()]\np.sort()\n(l, r) = (0, n - 1)\ncnt = 0\nwhile l <= r:\n    if p[r] > d:\n        cnt += 1\n        r -= 1\n    else:\n        m = (d + 1) // p[r] + (1 if (d + 1) % p[r] > 0 else 0)\n        r -= 1\n        l += m - 1\n        if l <= r + 1:\n            cnt += 1\nprint(cnt)", "(b, c) = map(int, input().split())\nd = [int(x) for x in input().split()]\nd.sort(reverse=True)\ne = 0\nwins = 0\nfor ele in d:\n    e += c // ele + 1\n    if e > b:\n        break\n    wins += 1\nprint(wins)", "(n, d) = list(map(int, input().split()))\narr = list(map(int, input().split()))\narr.sort()\n(ptr1, ptr2) = (0, n - 1)\n(cur_power, answer) = (0, 0)\nwhile ptr2 >= ptr1:\n    cur_power += arr[ptr2]\n    if cur_power > d:\n        answer += 1\n        ptr2 -= 1\n        cur_power = 0\n    else:\n        ptr1 += 1\nprint(answer)", "(N, D) = map(int, input().split())\npowers = list(map(int, input().split()))\npowers.sort()\nleft = 0\nright = N - 1\ncount = 0\nwhile True:\n    times = D // powers[right]\n    times += 1\n    if right - left + 1 >= times:\n        left += times - 1\n        count += 1\n        right -= 1\n    else:\n        break\nprint(count)", "import math\n(n, d) = map(int, input().split())\narr = list(map(int, input().split()))\narr.sort()\ni = len(arr) - 1\nans = 0\npeple = len(arr)\nwhile True:\n    temp = d // arr[i] + 1\n    if peple >= temp:\n        peple -= temp\n        i -= 1\n        ans += 1\n    else:\n        break\nprint(ans)", "import math\n(n, d) = map(int, input().split())\npowers = list(map(int, input().split()))\ncount = 0\n(left, right) = (0, n - 1)\npowers.sort()\nwhile left <= right:\n    curr = powers[right]\n    while curr <= d and left != right:\n        curr += powers[right]\n        left += 1\n    right -= 1\n    if curr > d:\n        count += 1\nprint(count)", "infor = input().split()\nnums = int(infor[0])\nenemy = int(infor[1])\nlists = input().split()\nfor x in range(len(lists)):\n    lists[x] = int(lists[x])\nlists.sort()\nfront = 0\nanswer = 0\nfor x in range(len(lists) - 1, -1, -1):\n    need = int(enemy / lists[x])\n    if x - need < front:\n        break\n    front += need\n    answer += 1\nprint(answer)", "(n, d) = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\narr.sort()\ni = 0\nj = n - 1\ncount = 0\nwhile i <= j:\n    number = int(d / arr[j]) + 1\n    if i == j and number == 1:\n        count += 1\n        break\n    i += number - 1\n    if i <= j:\n        count += 1\n    j -= 1\nprint(count)", "(n, d) = map(int, input().split())\nans = 0\ni = 0\npw = 0\na = sorted(map(int, input().split()), reverse=True)\nwhile n:\n    pw += a[i]\n    if pw > d:\n        ans += 1\n        i += 1\n        pw = 0\n    n -= 1\nprint(ans)", "(n, d) = map(int, input().split())\np = list(map(int, input().split()))\np.sort()\n(i, j) = (0, n - 1)\nans = 0\nwhile i <= j:\n    k = d // p[j] + 1\n    if j - i + 1 < k:\n        break\n    else:\n        ans += 1\n        i += k - 1\n        j -= 1\nprint(ans)", "import math\n(n, d) = map(int, input().split())\na = list(map(int, input().split()))\na.sort(reverse=True)\nk = 0\nteams = 0\nfor i in a:\n    if d % i == 0:\n        k += d // i + 1\n    else:\n        k += math.ceil(d / i)\n    if k > n:\n        break\n    teams += 1\nprint(teams)", "import math\n(n, d) = map(int, input().split())\np = list(map(int, input().split()))\np.sort(reverse=True)\nans = 0\nboo = 0\nfor i in p:\n    x = (d + i) // i\n    boo += x\n    if boo <= n:\n        ans += 1\nprint(ans)", "(n, d) = map(int, input().split())\np = list(map(int, input().split()))\np.sort()\n(i, j) = (0, n - 1)\ncount = 0\nwhile i <= j:\n    k = d // p[j] + 1\n    if j - i + 1 < k:\n        break\n    else:\n        count += 1\n        i += k - 1\n        j -= 1\nprint(count)", "inp = list(map(int, input().split()))\nn = inp[0]\nd = inp[1]\np = list(map(int, input().split()))\np.sort(reverse=True)\nind = 0\nleft = n\nwin = 0\nfor i in range(1, n + 1):\n    while True:\n        if left - i < 0 or ind > n - 1:\n            break\n        if p[ind] * i > d:\n            ind += 1\n            left -= i\n            win += 1\n        else:\n            break\n    if left - i < 0:\n        break\nprint(win)", "(n, t) = list(map(int, input().split()))\na = list(map(int, input().split()))\na.sort()\nl = 0\nr = n - 1\nans = 0\nwhile l <= r:\n    need = t // a[r]\n    if l + need > r:\n        break\n    l += need\n    r -= 1\n    ans += 1\nprint(ans)", "(N, D) = map(int, input().split())\np = list(map(int, input().split()))\np = sorted(p)[::-1]\ni = 0\nj = N - 1\ncount = 0\nwhile i <= j:\n    c = D // p[i]\n    c = c + 1\n    if c <= j - i + 1:\n        count += 1\n        i += 1\n        j = j - c + 1\n    else:\n        break\nprint(count)", "(n, d) = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n(i, j) = (0, n - 1)\nans = 0\nwhile i <= j:\n    k = d // a[j] + 1\n    if i + k - 1 <= j:\n        ans += 1\n        j -= 1\n        i += k - 1\n    else:\n        break\nprint(ans)", "from math import ceil\n(n, d) = map(int, input().split())\nl = list(map(int, input().split()))\nl.sort(reverse=True)\nct = 0\nmem = n\nfor i in range(n):\n    x = ceil(d / l[i])\n    if l[i] > d and mem >= 1:\n        mem -= 1\n        ct += 1\n    elif l[i] == d and mem >= 2:\n        mem -= 2\n        ct += 1\n    elif x <= mem and x * l[i] != d:\n        mem -= x\n        ct += 1\nprint(ct)", "x = list(map(int, input().split()))\ns = list(map(int, input().split()))\nz = 0\nindex = len(s) - 1\nr = len(s)\ns.sort()\nfor i in range(1, x[0] + 1):\n    while i <= r and s[index] * i > x[1]:\n        r -= i\n        index -= 1\n        z += 1\nprint(z)", "from math import ceil\n(n, d) = map(int, input().split())\nL = list(map(int, input().split()))\nL.sort(reverse=True)\ncnt = 0\ntotal = 0\nfor i in L:\n    num = ceil((d + 1) / i)\n    if num + cnt <= n:\n        cnt += num\n        total += 1\n    else:\n        break\nprint(total)", "import math\n(n, d) = map(int, input().split())\np = list(map(int, input().split()))\np.sort(reverse=True)\nlast_id = len(p) - 1\ncnt = 0\nfor (idx, pi) in enumerate(p):\n    if idx > last_id:\n        break\n    num = math.floor(d / pi) + 1\n    last_id -= num - 1\n    if last_id < idx:\n        break\n    else:\n        cnt += 1\nprint(cnt)", "from math import ceil\n(n, d) = map(int, input().split())\narr = list(map(int, input().split()))\nans = 0\narr.sort(reverse=True)\nfor num in arr:\n    loda = d // num + 1\n    if n >= loda:\n        ans += 1\n        n -= loda\nprint(ans)", "(n, target) = [int(x) for x in input().split()]\nplayers = [int(x) for x in input().split()]\nsolution = 0\n(l, r) = (0, n - 1)\nplayers.sort(reverse=True)\nwhile l <= r:\n    team = players[l]\n    while team <= target and l < r:\n        team += players[l]\n        r -= 1\n    if team > target:\n        solution += 1\n    l += 1\nprint(solution)", "(n, d) = [int(i) for i in input().split()]\nx = [int(i) for i in input().split()]\nx.sort(reverse=True)\ns = 0\na = 0\nfor i in x:\n    s += d // i + 1\n    if s > n:\n        break\n    a += 1\nprint(a)", "(n, d) = [int(i) for i in input().split()]\nx = [int(i) for i in input().split()]\nx.sort(reverse=True)\ns = 0\na = 0\nfor i in x:\n    s += d // i + 1\n    if s > n:\n        break\n    a += 1\nprint(a)", "import math as m\n\ndef calc(N, P, D):\n    pUsed = 0\n    teams = 0\n    for i in range(0, N):\n        pUsed += m.ceil(D / P[i] + 1e-12)\n        if pUsed > N:\n            break\n        teams += 1\n    return teams\n(N, D) = [int(item) for item in input().split()]\nP = [int(item) for item in input().split()]\nP.sort(reverse=True)\nprint(calc(N, P, D))", "(N, D) = map(int, input().split())\nP = list(map(int, input().split()))\nP.sort(reverse=True)\ncnt = 0\ntotal = 0\nfor i in P:\n    need = (D + i) // i\n    total += need\n    if total <= N:\n        cnt += 1\nprint(cnt)", "(n, d) = map(int, input().split())\ns = sorted(list(map(int, input().split())), reverse=True)\nx = 0\nans = 0\ni = 0\nwhile n > 0:\n    x += s[i]\n    if x > d:\n        ans += 1\n        x = 0\n        i += 1\n    n -= 1\nprint(ans)", "import math\nND = input().split()\n(N, D) = (int(ND[0]), int(ND[1]))\nl = list(map(int, input().split()))\nl.sort(reverse=True)\n(i, j) = (0, len(l) - 1)\ncnt = 0\nwhile i <= j:\n    if j - i >= D // l[i]:\n        cnt += 1\n        j -= D // l[i]\n        i += 1\n    else:\n        break\nprint(cnt)", "(n, s) = map(int, input().split())\nlst = list(map(int, input().split()))\n(i, j) = (0, n - 1)\nlst.sort()\n(cnt, sum) = (0, lst[j])\nwhile i <= j:\n    while sum <= s and i < j:\n        sum += lst[j]\n        i += 1\n    if sum > s:\n        cnt += 1\n    j -= 1\n    sum = lst[j]\nprint(cnt)", "(n, d) = list(map(int, input().split()))\nl = list(map(int, input().split()))\nl.sort(reverse=True)\nsol = [d // l[i] + 1 for i in range(n)]\nfinal = [sol[0]]\nfor i in range(1, len(sol)):\n    final.append(final[i - 1] + sol[i])\ntest = False\nlow = 0\nhigh = n - 1\nwhile low <= high and test == False:\n    mid = (low + high) // 2\n    if final[mid] == n:\n        print(mid + 1)\n        test = True\n        break\n    elif final[mid] < n:\n        low = mid + 1\n    else:\n        high = mid - 1\nif test == False:\n    print(low)", "L = list(map(int, input().split()))\nN = L[0]\nD = L[1]\nn = list(map(int, input().split()))\nn.sort()\na = 0\nb = 0\nfor i in range(N):\n    c = int(D // n[N - 1 - i]) + 1\n    if N - a >= c and a < N:\n        a = a + c\n        b = b + 1\n    else:\n        break\nprint(b)", "(m, n) = map(int, input().split())\nlg = list(map(int, input().split()))\nlg.sort()\ncount = 0\nj = m - 1\nwhile m > 0:\n    g = n // lg[j]\n    if lg[j] * (g + 1) > n and m >= g + 1:\n        m -= g + 1\n        count += 1\n    else:\n        break\n    j -= 1\nprint(count)", "from math import ceil\n\ndef solve():\n    (n, d) = map(int, input().split())\n    powers = sorted(list(map(int, input().split())), reverse=True)\n    p2 = len(powers)\n    p1 = 0\n    cnt = 0\n    while p2 > 0:\n        p2 -= ceil((d - powers[p1] + 0.1) / powers[p1]) + 1\n        if p2 >= 0:\n            cnt += 1\n        p1 += 1\n    print(cnt)\nsolve()", "x = input().split()\nn = int(x[0])\nd = int(x[1])\ny = input().split()\nfor i in range(n):\n    y[i] = int(y[i])\ny.sort(reverse=True)\nang = n\nhsl = 0\nfor i in range(n):\n    a = d // y[i]\n    if ang >= a + 1:\n        ang = ang - (a + 1)\n        hsl += 1\n    else:\n        break\nprint(hsl)", "x = input().split()\nd = int(x[1])\np = map(int, input().split())\np = sorted(p)\nwinteams = 0\nplayers = int(x[0])\ni = -1\npt = d // p[i] + 1\npowteam = p[i] * pt\nwhile powteam > d and pt <= players:\n    pt = d // p[i] + 1\n    players -= pt\n    winteams += 1\n    i -= 1\nprint(winteams)"]