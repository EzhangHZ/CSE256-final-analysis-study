["import sys, math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    m = int(input())\n    l = list(map(int, input().split()))\n    p = max(l)\n    s = 0\n    s2 = 0\n    o = 0\n    for i in range(m):\n        s = s + p - l[i]\n        s2 = s2 + p + 1 - l[i]\n        if (p - l[i]) % 2 == 1:\n            o = o + 1\n    ans = 2 * (s // 3) + s % 3\n    if o > s // 3 + 1:\n        ans = o * 2 - 1\n    ans2 = 2 * (s2 // 3) + s2 % 3\n    if m - o > s2 // 3 + 1:\n        ans2 = (m - o) * 2 - 1\n    print(min(ans, ans2))", "import sys, math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    m = int(input())\n    l = list(map(int, input().split()))\n    p = max(l)\n    s = 0\n    s2 = 0\n    o = 0\n    for i in range(m):\n        s = s + p - l[i]\n        s2 = s2 + p + 1 - l[i]\n        if (p - l[i]) % 2 == 1:\n            o = o + 1\n    ans = 2 * (s // 3) + s % 3\n    if o > s // 3 + 1:\n        ans = o * 2 - 1\n    ans2 = 2 * (s2 // 3) + s2 % 3\n    if m - o > s2 // 3 + 1:\n        ans2 = (m - o) * 2 - 1\n    print(min(ans, ans2))", "def getmin(arr1, c):\n    arr = list(arr1)\n    mx = max(arr)\n    for i in range(n):\n        arr[i] = mx + c - arr[i]\n    s = sum(arr)\n    c = 0\n    for i in arr:\n        if i % 2 == 1:\n            c += 1\n    d = 2 * c - 1\n    s -= c * 1 + (c - 1) * 2\n    if s <= 0:\n        pass\n    else:\n        t = s // 3\n        rem = s % 3\n        if rem != 0:\n            d += 1\n        d += 2 * t\n    return d\n\ndef solve(arr1):\n    return min(getmin(arr1, 0), getmin(arr1, 1))\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    arr1 = [int(x) for x in input().split()]\n    print(solve(arr1))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().strip().split()))\n    l.sort()\n    a = l.count(l[-1])\n    (odd, even) = (0, 0)\n    for i in l:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    su = sum(l[:n - a])\n    needed = l[-1] * (n - a) - su\n    if l[-1] % 2 == 0:\n        (p1, p2) = (odd, even)\n    else:\n        (p1, p2) = (even, odd)\n    ans = max(2 * (needed // 3) + needed % 3, 2 * p1 - 1)\n    needed += n\n    ans2 = max(2 * (needed // 3) + needed % 3, 2 * p2 - 1)\n    print(min(ans, ans2))", "def calc(arr: list, maximum: int):\n    (odd, even) = (0, 0)\n    days = 0\n    for element in arr:\n        remaining = maximum - element\n        odd += remaining % 2\n        even += remaining // 2\n    mutual_days = min(odd, even)\n    days += 2 * mutual_days\n    even -= mutual_days\n    odd -= mutual_days\n    if odd != 0:\n        days += 2 * odd - 1\n    days += 4 * (even // 3)\n    remainder = even % 3\n    if remainder == 1:\n        days += 2\n    elif remainder == 2:\n        days += 3\n    return days\nfor _ in range(int(input())):\n    input()\n    a = list(map(int, input().split()))\n    print(min(calc(a, max(a)), calc(a, max(a) + 1)))", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    (x1, x2) = (0, 0)\n    mx = max(a)\n    (ans1, ans2) = (0, 0)\n    for x in a:\n        t = mx - x\n        if t % 2 == 1:\n            x1 += 1\n        x2 += t // 2\n    if x1 == x2:\n        ans1 = x1 * 2\n    elif x1 > x2:\n        t = x1 - x2\n        ans1 = t * 2 - 1 + x2 * 2\n    else:\n        t = x2 - x1\n        res = 0\n        if t % 3 == 0:\n            res = t // 3 * 4\n        else:\n            res = t // 3 * 4 + t % 3 + 1\n        ans1 = x1 * 2 + res\n    mx += 1\n    (x1, x2) = (0, 0)\n    for x in a:\n        t = mx - x\n        if t % 2 == 1:\n            x1 += 1\n        x2 += t // 2\n    if x1 == x2:\n        ans2 = x1 * 2\n    elif x1 > x2:\n        t = x1 - x2\n        ans2 = t * 2 - 1 + x2 * 2\n    else:\n        t = x2 - x1\n        res = 0\n        if t % 3 == 0:\n            res = t // 3 * 4\n        else:\n            res = t // 3 * 4 + t % 3 + 1\n        ans2 = x1 * 2 + res\n    print(min(ans1, ans2))\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nout = ''\nfor _ in range(t):\n    n = int(input())\n    h = [int(x) for x in input().split()]\n    target = max(h)\n    odds = 0\n    evens = 0\n    for x in h:\n        evens += (target - x) // 2\n        odds += (target - x) % 2\n    total = odds * 2 - 1\n    evens -= odds - 1\n    if evens > 0:\n        total += evens // 3 * 4\n        total += max(0, evens % 3 * 2 - 1)\n    target = max(h) + 1\n    odds = 0\n    evens = 0\n    for x in h:\n        evens += (target - x) // 2\n        odds += (target - x) % 2\n    total2 = odds * 2 - 1\n    evens -= odds - 1\n    if evens > 0:\n        total2 += evens // 3 * 4\n        total2 += max(0, evens % 3 * 2 - 1)\n    out += str(min(total, total2)) + '\\n'\nprint(out)", "def calc(arr: list, maximum: int):\n    (odd, even) = (0, 0)\n    days = 0\n    for element in arr:\n        remaining = maximum - element\n        odd += remaining % 2\n        even += remaining // 2\n    mutual_days = min(odd, even)\n    days += 2 * mutual_days\n    even -= mutual_days\n    odd -= mutual_days\n    if odd != 0:\n        days += 2 * odd - 1\n    days += 4 * (even // 3)\n    remainder = even % 3\n    if remainder != 0:\n        days += remainder + 1\n    return days\nfor _ in range(int(input())):\n    input()\n    a = list(map(int, input().split()))\n    print(min(calc(a, max(a)), calc(a, max(a) + 1)))", "import sys\ninput = sys.stdin.readline\n\ndef solve(n, h):\n    h.sort()\n    target = h[-1]\n\n    def find(target):\n        ans = 0\n        cnt = {1: 0, 2: 0}\n        for i in range(n):\n            if (target - arr[i]) % 2:\n                cnt[1] += 1\n            cnt[2] += (target - arr[i]) // 2\n        if cnt[1] == cnt[2]:\n            return 2 * cnt[1]\n        elif cnt[2] > cnt[1]:\n            ans = 2 * cnt[1] + (cnt[2] - cnt[1]) // 3 * 4\n            if (cnt[2] - cnt[1]) % 3 != 0:\n                ans += (cnt[2] - cnt[1]) % 3 + 1\n            return ans\n        else:\n            return 2 * cnt[2] + (cnt[1] - cnt[2] - 1) * 2 + 1\n    res = min(find(target), find(target + 1))\n    print(res)\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    solve(n, arr)", "def solve(m, a):\n    ev = od = 0\n    for i in a:\n        ev += (m - i) // 2\n        od += (m - i) % 2\n    if od >= ev:\n        return od * 2 - (od != ev)\n    ev = (ev - od) * 2\n    return od * 2 + ev // 3 * 2 + ev % 3\nI = lambda : map(int, input().split())\n(t,) = I()\nfor _ in [1] * t:\n    (n,) = I()\n    a = [*I()]\n    m = max(a)\n    print(min(solve(m, a), solve(m + 1, a)))", "for q in range(int(input())):\n    n = input()\n    arr = [int(x) for x in input().split()]\n\n    def helper(h, ans):\n        (odd, even) = (0, 0)\n        for item in arr:\n            even += (h - item) // 2\n            odd += (h - item) % 2\n        t = min(odd, even)\n        ans += 2 * t\n        odd -= t\n        even -= t\n        ans += 4 * (even // 3)\n        rem = even % 3\n        if rem == 1:\n            ans += 2\n        elif rem == 2:\n            ans += 3\n        if odd:\n            ans += 2 * odd - 1\n        return ans\n    m = max(arr)\n    ans = min(helper(m, 0), helper(m + 1, 0))\n    print(ans)", "inp = lambda : list(map(int, input().split()))\nfor _ in range(int(input())):\n    n = int(input())\n    t = inp()\n    c = 0\n    m = max(t)\n\n    def mm(m):\n        n1 = n2 = 0\n        tot = 0\n        for i in t:\n            n1 += (m - i) % 2\n            n2 += (m - i) // 2\n        return n1 * 2 - 1 if n2 < n1 else (n2 * 2 + n1) // 3 * 2 + (n2 * 2 + n1) % 3\n    print(min(mm(m), mm(m + 1)))", "def calc(a: list, k: int):\n    (c1, c2) = (0, 0)\n    for item in a:\n        if (k - item) % 2 == 1:\n            c1 += 1\n        c2 += (k - item) // 2\n    if c1 > c2:\n        return c1 * 2 - 1\n    if c1 == c2:\n        return c1 * 2\n    c2 = (c2 - c1) * 2\n    return c1 * 2 + c2 // 3 * 2 + c2 % 3\nfor _ in range(int(input())):\n    input()\n    a = list(map(int, input().split()))\n    print(min(calc(a, max(a)), calc(a, max(a) + 1)))", "def calc(a: list, k: int):\n    (c1, c2) = (0, 0)\n    for item in a:\n        if (k - item) % 2 == 1:\n            c1 += 1\n        c2 += (k - item) // 2\n    if c1 > c2:\n        return c1 * 2 - 1\n    if c1 == c2:\n        return c1 * 2\n    c2 = (c2 - c1) * 2\n    return c1 * 2 + c2 // 3 * 2 + c2 % 3\nfor _ in range(int(input())):\n    input()\n    a = list(map(int, input().split()))\n    print(min(calc(a, max(a)), calc(a, max(a) + 1)))", "t = int(input())\ntest_cases = []\nfor i in range(t):\n    lst = []\n    n = int(input())\n    inp = list(map(int, input().split()))\n    for i in range(n):\n        lst.append(inp[i])\n    test_cases.append(lst)\n\ndef countDays(lst, max_h):\n    max_height = max_h\n    ones = 0\n    twos = 0\n    for i in range(len(lst)):\n        diff = max_height - lst[i]\n        twos += int(diff / 2)\n        ones += diff % 2\n    days = 0\n    min_days = min(ones, twos)\n    days = 2 * min_days\n    twos -= min_days\n    ones -= min_days\n    days += 4 * int(twos / 3)\n    remainder = twos % 3\n    if remainder == 1:\n        days += 2\n    elif remainder == 2:\n        days += 3\n    if ones != 0:\n        days += 2 * ones - 1\n    return days\nanswers = []\nfor lst in test_cases:\n    minimun = min(countDays(lst, max(lst)), countDays(lst, max(lst) + 1))\n    answers.append(minimun)\nfor i in answers:\n    print(i)", "def solve(m, a):\n    ev = od = 0\n    for i in a:\n        ev += (m - i) // 2\n        od += (m - i) % 2\n    if od >= ev:\n        return od * 2 - (od != ev)\n    ev = (ev - od) * 2\n    return od * 2 + ev // 3 * 2 + ev % 3\nI = lambda : map(int, input().split())\n(t,) = I()\nfor _ in [1] * t:\n    (n,) = I()\n    b = [*I()]\n    mx = max(b)\n    print(min(solve(mx, b), solve(mx + 1, b)))", "def solve(N, A):\n    res = float('inf')\n    mx = max(A)\n    for m in [mx, mx + 1]:\n        two = one = 0\n        for a in A:\n            two += (m - a) // 2\n            one += (m - a) % 2\n        if two - one >= 2:\n            t = (two - one + 1) // 3\n            one += 2 * t\n            two -= t\n        if two < one:\n            res = min(res, one * 2 - 1)\n        elif two == one:\n            res = min(res, one * 2)\n        elif two == one + 1:\n            res = min(res, two * 2)\n        else:\n            return False\n    return res\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        A = list(map(int, input().split()))\n        out = solve(N, A)\n        print(out)\nmain()", "def minimumDays(array):\n\n    def solve(array, max_height):\n        (ones, twos) = (0, 0)\n        for height in array:\n            ones += (max_height - height) % 2\n            twos += (max_height - height) // 2\n        if ones > twos:\n            return ones * 2 - 1\n        elif ones == twos:\n            return ones * 2\n        twos = (twos - ones) * 2\n        return ones * 2 + twos // 3 * 2 + twos % 3\n    max_height = max(array)\n    return min(solve(array, max_height), solve(array, max_height + 1))\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        A = list(map(int, input().split()))\n        out = minimumDays(A)\n        print(out)\nmain()", "for q in range(int(input())):\n    n = input()\n    arr = [int(x) for x in input().split()]\n\n    def helper(h, ans):\n        (odd, even) = (0, 0)\n        for item in arr:\n            even += (h - item) // 2\n            odd += (h - item) % 2\n        t = min(odd, even)\n        ans += 2 * t\n        odd -= t\n        even -= t\n        ans += 4 * (even // 3)\n        rem = even % 3\n        if rem == 1:\n            ans += 2\n        elif rem == 2:\n            ans += 3\n        if odd:\n            ans += 2 * odd - 1\n        return ans\n    ans = min(helper(max(arr), 0), helper(max(arr) + 1, 0))\n    print(ans)", "def solve(N, A):\n    res = float('inf')\n    mx = max(A)\n    for m in [mx, mx + 1]:\n        two = one = 0\n        for a in A:\n            two += (m - a) // 2\n            one += (m - a) % 2\n        if two - one >= 2:\n            t = (two - one + 1) // 3\n            one += 2 * t\n            two -= t\n        if two < one:\n            res = min(res, one * 2 - 1)\n        elif two == one:\n            res = min(res, one * 2)\n        elif two == one + 1:\n            res = min(res, two * 2)\n        else:\n            assert False\n    return res\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        A = list(map(int, input().split()))\n        out = solve(N, A)\n        print(out)\nmain()", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom collections import deque\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    arr = int_arr()\n    mx = max(arr)\n    ans = float('inf')\n    for i in range(2):\n        mx += i\n        one = 0\n        two = 0\n        for j in range(n):\n            diff = mx - arr[j]\n            two += diff // 2\n            one += diff % 2\n        tot = two * 2 + one\n        s = tot // 3 * 2\n        if tot % 3 == 1:\n            s += 1\n        elif tot % 3 == 2:\n            s += 2\n        ans = min(ans, max(one * 2 - 1, s))\n    print(ans)", "def solve(lst, h):\n    even = 0\n    odd = 0\n    ans = 0\n    for i in range(len(lst)):\n        x = h - lst[i]\n        even += int(x / 2)\n        odd += x % 2\n    if odd > even:\n        ans = 2 * odd - 1\n    elif odd == even:\n        ans = 2 * odd\n    else:\n        y = even - odd\n        if y % 3 == 0:\n            ans += 2 * odd\n            ans += y / 3 * 4\n        elif y % 3 == 1:\n            ans += 2 * odd\n            ans += (y - 1) / 3 * 4 + 2\n        else:\n            ans += 2 * odd\n            ans += (y - 2) / 3 * 4 + 3\n    return int(ans)\nfor _ in range(int(input())):\n    n = int(input())\n    inp = list(map(int, input().split()))\n    height = max(inp)\n    print(min(solve(inp, height), solve(inp, height + 1)))", "def solve(v1):\n    m = max(v1)\n    ans = float('inf')\n    for i in range(2):\n        m += i\n        twoCount = 0\n        oneCount = 0\n        for i in v1:\n            if m - i > 0:\n                oneCount += (m - i) % 2\n                twoCount += (m - i) // 2\n        total = oneCount + twoCount * 2\n        need = total // 3 * 2 + total % 3\n        ans = min(ans, max(need, oneCount * 2 - 1))\n    return ans\n\ndef main():\n    size = int(input())\n    for i in range(size):\n        input()\n        v1 = list(map(int, input().split(' ')))\n        print(solve(v1))\nmain()", "t = int(input())\nwhile t:\n    n = int(input())\n    l = list(map(int, input().split()))\n    m = max(l)\n    e = 0\n    ee = 0\n    o = 0\n    oo = 0\n    for i in range(n):\n        if (m - l[i]) % 2 == 1:\n            e += (m - l[i] - 1) // 2\n            o += 1\n            ee += (m - l[i] + 1) // 2\n        else:\n            e += (m - l[i]) // 2\n            oo += 1\n            ee += (m - l[i]) // 2\n    ans = 0\n    anss = 0\n    if o > e:\n        ans = 2 * o - 1\n    else:\n        ans = 2 * o + 2 * (2 * (e - o) // 3) + 2 * (e - o) % 3\n    if oo > ee:\n        anss = 2 * oo - 2\n    else:\n        anss = 2 * oo + 2 * (2 * (ee - oo) // 3) + 2 * (ee - oo) % 3\n    print(min(ans, anss))\n    t -= 1", "def solve(v1):\n    m = max(v1)\n    ans = float('inf')\n    for i in range(2):\n        m += i\n        even = 0\n        odd = 0\n        for i in v1:\n            if m - i > 0:\n                odd += (m - i) % 2\n                even += (m - i) // 2\n        total = odd + even * 2\n        need = total // 3 * 2 + total % 3\n        ans = min(ans, max(need, odd * 2 - 1))\n    return ans\nn = int(input())\nfor i in range(n):\n    input()\n    v1 = list(map(int, input().split(' ')))\n    print(solve(v1))", "def qq(q1, q2):\n    if q2 >= q1:\n        ans = 2 * q1\n        rest = q2 - q1\n        (triad, rest) = divmod(rest, 3)\n        ans += triad << 2\n        if rest:\n            ans += rest + 1\n    else:\n        ans = 2 * q1 - 1\n    return ans\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    p_even = 0\n    q_even = 0\n    p_odd = 0\n    q_odd = 0\n    m = 0\n    for h in map(int, input().split()):\n        if h > m:\n            d = h - m\n            dd = d >> 1\n            p_even += dd * q_even\n            p_odd += dd * q_odd\n            if d & 1:\n                if m & 1:\n                    p_even += q_even\n                else:\n                    p_odd += q_odd\n            m = h\n        if h & 1:\n            q_odd += 1\n            p_odd += m - h >> 1\n        else:\n            q_even += 1\n            p_even += m - h >> 1\n    n1 = q_even if m & 1 else q_odd\n    n2 = p_even + p_odd\n    m1 = q_odd if m & 1 else q_even\n    m2 = n2 + n1\n    print(min(qq(n1, n2), qq(m1, m2)))", "for t in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    (a, b) = (0, 0)\n    m = max(x)\n    for i in x:\n        if (m - i) % 2 == 1:\n            a += 1\n            b += (m - i - 1) // 2\n        else:\n            b += (m - i) // 2\n    if b > a:\n        (a, b) = (a + 2 * ((b - a) // 3), b - (b - a) // 3)\n    if b - a == 2:\n        a += 2\n        b -= 1\n    (a, b) = ((a - 1) * 2 + 1, b * 2)\n    m = max(a, b)\n    z = m\n    m = max(x) + 1\n    (a, b) = (0, 0)\n    for i in x:\n        if (m - i) % 2 == 1:\n            a += 1\n            b += (m - i - 1) // 2\n        else:\n            b += (m - i) // 2\n    if b > a:\n        (a, b) = (a + 2 * ((b - a) // 3), b - (b - a) // 3)\n    if b - a == 2:\n        a += 2\n        b -= 1\n    (a, b) = ((a - 1) * 2 + 1, b * 2)\n    m = max(a, b)\n    print(min(z, m))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = max(l)\n    one = 0\n    two = 0\n    best = 10 ** 9\n    for i in l:\n        two += (a - i) // 2\n        one += (a - i) % 2\n    x = (two - one) // 3\n    if x >= 0:\n        two -= x\n        one += 2 * x\n        if one <= two:\n            best = 2 * two\n        else:\n            best = 2 * one - 1\n        two -= 1\n        one += 2\n        if one <= two:\n            best = min(best, 2 * two)\n        else:\n            best = min(best, 2 * one - 1)\n    elif one <= two:\n        best = min(best, 2 * two)\n    else:\n        best = min(best, 2 * one - 1)\n    a += 1\n    one = 0\n    two = 0\n    for i in l:\n        two += (a - i) // 2\n        one += (a - i) % 2\n    x = (two - one) // 3\n    if x >= 0:\n        two -= x\n        one += 2 * x\n        if one <= two:\n            best = min(best, 2 * two)\n        else:\n            best = min(best, 2 * one - 1)\n        two -= 1\n        one += 2\n        if one <= two:\n            best = min(best, 2 * two)\n        else:\n            best = min(best, 2 * one - 1)\n    elif one <= two:\n        best = min(best, 2 * two)\n    else:\n        best = min(best, 2 * one - 1)\n    print(best)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    h = list(map(int, input().split()))\n    tallest = max(h)\n    results = []\n    for x in [tallest, tallest + 1]:\n        result = 0\n        odddays = 0\n        evendays = 0\n        for tree in h:\n            odddays += (x - tree) % 2\n            evendays += (x - tree) // 2\n        if evendays > odddays:\n            extra_evendays = evendays - odddays\n            odddays_replacing_evendays = extra_evendays // 3\n            evendays -= odddays_replacing_evendays\n            odddays += 2 * odddays_replacing_evendays\n            if extra_evendays % 3 == 2:\n                evendays -= 1\n                odddays += 2\n        result = max(odddays * 2 - 1, evendays * 2)\n        results.append(result)\n    print(min(results))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    h = list(map(int, input().split()))\n    tallest = max(h)\n    results = []\n    for x in [tallest, tallest + 1]:\n        result = 0\n        odddays = 0\n        evendays = 0\n        for tree in h:\n            odddays += (x - tree) % 2\n            evendays += (x - tree) // 2\n        if evendays > odddays:\n            extra_evendays = evendays - odddays + 1\n            evendays_replaced_by_odddays = extra_evendays // 3\n            evendays -= evendays_replaced_by_odddays\n            odddays += 2 * evendays_replaced_by_odddays\n        result = max(odddays * 2 - 1, evendays * 2)\n        results.append(result)\n    print(min(results))", "x = int(input())\n\ndef days(e, o):\n    if e >= o:\n        if (e - o) % 3 == 0:\n            d = 2 * o + 4 * ((e - o) // 3)\n        elif (e - o) % 3 == 1:\n            d = 2 * o + 4 * ((e - o) // 3) + 2\n        else:\n            d = 2 * o + 4 * ((e - o) // 3) + 3\n    elif o > e:\n        d = 2 * o - 1\n    return d\n\ndef k(arr_diff):\n    e = int(0)\n    o = int(0)\n    for j in arr_diff:\n        e += j // 2\n        o += j % 2\n    return (e, o)\nfor i in range(x):\n    n = int(input())\n    s = input()\n    arr = [int(j) for j in s.split(' ')]\n    d1 = 0\n    d2 = 0\n    arr_ch = []\n    m = 0\n    for j in arr:\n        if j > m:\n            m = j\n    arr_diff = [int(m - k) for k in arr]\n    arr_diff1 = []\n    zer = 0\n    for p in arr_diff:\n        if p != 0:\n            arr_diff1.append(p + 1)\n        else:\n            zer += 1\n            arr_diff1.append(p)\n    (e, o) = k(arr_diff)\n    (e1, o1) = k(arr_diff1)\n    d1 = days(e, o)\n    d2 = days(e1, o1 + zer)\n    if d1 < d2:\n        print(d1)\n    else:\n        print(d2)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mx = max(a)\n    ans = float('inf')\n    for z in range(2):\n        mx += z\n        (twos, ones) = (0, 0)\n        for i in range(n):\n            diff = mx - a[i]\n            twos += diff // 2\n            ones += diff % 2\n        res = 0\n        days = min(twos, ones)\n        res = 2 * days\n        twos -= days\n        ones -= days\n        res += 4 * (twos // 3)\n        rem = twos % 3\n        if rem == 1:\n            res += 2\n        elif rem == 2:\n            res += 3\n        if ones:\n            res += 2 * ones - 1\n        ans = min(ans, res)\n    print(ans)", "n = int(input())\nfor i in range(n):\n    l = int(input())\n    values = list(map(int, input().split()))\n    results = []\n    for maximum in [max(values), max(values) + 1]:\n        n_odd = 0\n        n_even = 0\n        diffs = [maximum - el for el in values if el != maximum]\n        for d in diffs:\n            n_odd += d % 2\n            n_even += d // 2\n        minimum = min(n_odd, n_even)\n        days = minimum * 2\n        n_odd -= minimum\n        n_even -= minimum\n        if n_odd == 0:\n            by_odd = n_even // 3\n            days += by_odd * 4\n            n_even %= 3\n            if n_even:\n                days += +(2 if n_even == 1 else 3)\n        else:\n            days += n_odd * 2 - 1\n        results.append(days)\n    print(min(results))", "t = int(input())\nwhile t:\n    n = int(input())\n    h = []\n    for i in input().split():\n        h.append(int(i))\n    hmax = max(h)\n    odd = even = 0\n    for hi in h:\n        ht = hmax - hi\n        odd += ht % 2 & 1\n        even += ht // 2\n    if odd < even:\n        even -= odd\n        ans1 = 2 * (odd + even // 3 * 2) + (even % 3 + 1 if even % 3 else 0)\n    elif odd == even:\n        ans1 = odd * 2\n    else:\n        odd -= even\n        ans1 = even * 2 + odd * 2 - 1\n    hmax += 1\n    odd = even = 0\n    for hi in h:\n        ht = hmax - hi\n        odd += ht % 2 & 1\n        even += ht // 2\n    if odd < even:\n        even -= odd\n        ans2 = 2 * (odd + even // 3 * 2) + (even % 3 + 1 if even % 3 else 0)\n    elif odd == even:\n        ans2 = odd * 2\n    else:\n        odd -= even\n        ans2 = even * 2 + odd * 2 - 1\n    print(min(ans1, ans2))\n    t -= 1", "n_testcases = int(input())\nfor i in range(n_testcases):\n    n_trees = int(input())\n    trees_height = input().split(' ')\n    trees_height = [int(l) for l in trees_height]\n    possible_required_days = []\n    possible_max_heights = [max(trees_height), max(trees_height) + 1]\n    for max_height in possible_max_heights:\n        ones = 0\n        twos = 0\n        days_needed = 0\n        for tree_height in trees_height:\n            diff = max_height - tree_height\n            twos += diff // 2\n            ones += diff % 2\n        consecutive_pattern = min(twos, ones)\n        days_needed = consecutive_pattern * 2\n        twos -= consecutive_pattern\n        ones -= consecutive_pattern\n        days_needed += twos // 3 * 4\n        remainder = twos % 3\n        if remainder == 1:\n            days_needed += 2\n        elif remainder == 2:\n            days_needed += 3\n        if ones:\n            days_needed += 2 * ones - 1\n        possible_required_days.append(days_needed)\n    print(min(possible_required_days))", "def count_days(h, array):\n    odd = 0\n    even = 0\n    for i in range(len(array)):\n        diff = h - array[i]\n        even += diff // 2\n        odd += diff % 2\n    days = 0\n    cnt = min(odd, even)\n    days = 2 * cnt\n    even -= cnt\n    odd -= cnt\n    days += 4 * (even // 3)\n    rem = even % 3\n    if rem == 1:\n        days += 2\n    elif rem == 2:\n        days += 3\n    if odd != 0:\n        days += 2 * odd - 1\n    return days\nt = int(input())\nfor i in range(t):\n    arr_len = input()\n    s = input()\n    array = s.split()\n    array = [int(i) for i in array]\n    answers = []\n    h = max(array)\n    answers.append(count_days(h, array))\n    answers.append(count_days(h + 1, array))\n    answers.append(count_days(h + 2, array))\n    print(min(answers))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    (codd, ceven) = (0, 0)\n    for i in range(n):\n        diff = m - a[i]\n        if diff % 2 == 1:\n            codd += 1\n        ceven += diff // 2\n    ans = 10 ** 18\n    diff = max(0, (ceven - codd - 1) // 3)\n    codd += 2 * diff\n    ceven -= diff\n    ans = min(ans, max(ceven * 2, codd * 2 - 1))\n    if ceven > 0:\n        codd += 2\n        ceven -= 1\n        ans = min(ans, max(ceven * 2, codd * 2 - 1))\n    m = max(a) + 1\n    (codd, ceven) = (0, 0)\n    for i in range(n):\n        diff = m - a[i]\n        if diff % 2 == 1:\n            codd += 1\n        ceven += diff // 2\n    ans2 = 10 ** 18\n    diff = max(0, (ceven - codd - 1) // 3)\n    codd += 2 * diff\n    ceven -= diff\n    ans2 = min(ans2, max(ceven * 2, codd * 2 - 1))\n    if ceven > 0:\n        codd += 2\n        ceven -= 1\n        ans2 = min(ans2, max(ceven * 2, codd * 2 - 1))\n    print(min(ans, ans2))", "T = int(input())\nwhile T:\n    T -= 1\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    mx = max(a)\n    ans = int(1e+18)\n    for m in {mx, mx + 1}:\n        ans1 = 0\n        ans2 = 0\n        for i in range(len(a)):\n            d = m - a[i]\n            ans2 += d // 2\n            ans1 += d % 2\n        if ans2 > ans1:\n            dif = (ans2 - ans1) // 3\n            ans1 += dif * 2\n            ans2 -= dif\n        ans = min(ans, max(ans2 * 2, ans1 * 2 - 1))\n        if ans2 > 0:\n            ans2 -= 1\n            ans1 += 2\n            ans = min(ans, max(ans2 * 2, ans1 * 2 - 1))\n    print(ans)", "for i in range(int(input())):\n    a = int(input())\n    b = [*map(int, input().split())]\n    b.sort()\n    c = []\n    for i in range(len(b) - 1):\n        y = b[-1] - b[i]\n        c.append(y)\n    t = c.count(0)\n    for u in range(t):\n        c.remove(0)\n    even = 0\n    odd = 0\n    for j in range(len(c)):\n        even += c[j] // 2\n        odd += c[j] % 2\n    if odd > even:\n        ans = 2 * odd - 1\n    else:\n        x = even - odd\n        if x % 3 == 0 or x % 3 == 1:\n            ans = 2 * (even - x // 3)\n        else:\n            ans = 2 * (even - x // 3 - 1) + 1\n    d = []\n    for k in range(len(b)):\n        z = b[-1] + 1 - b[k]\n        d.append(z)\n    even1 = 0\n    odd1 = 0\n    for l in range(len(d)):\n        even1 += d[l] // 2\n        odd1 += d[l] % 2\n    if odd1 > even1:\n        ans1 = 2 * odd1 - 1\n    else:\n        y = even1 - odd1\n        if y % 3 == 0 or y % 3 == 1:\n            ans1 = 2 * (even1 - y // 3)\n        else:\n            ans1 = 2 * (even1 - y // 3 - 1) + 1\n    if ans > ans1:\n        print(ans1)\n    else:\n        print(ans)", "def solveByMe():\n    n = int(input())\n    lis = [int(i) for i in input().split()]\n    mx = max(lis)\n    res = pow(10, 18)\n    for h in range(mx, mx + 4):\n        one = two = 0\n        for i in range(n):\n            two += (h - lis[i]) // 2\n            one += (h - lis[i]) % 2\n        al = one + two * 2\n        days = al // 3 * 2\n        if al % 3 == 1:\n            days += 1\n        if al % 3 == 2:\n            days += 2\n        res = min(res, max(one * 2 - 1, days))\n    print(res)\ntt = int(input())\nwhile tt:\n    tt -= 1\n    solveByMe()", "def find(b, x):\n    v = [0, 0]\n    a = []\n    for i in range(len(b)):\n        if x - b[i] > 0:\n            a.append(x - b[i])\n    for i in range(len(a)):\n        v[1] += a[i] // 2\n        if a[i] % 2:\n            v[0] += 1\n    ans = 0\n    if v[0] > v[1]:\n        ans = 2 * v[1]\n        v[0] -= v[1]\n        v[0] -= 1\n        ans += 1\n        ans += 2 * v[0]\n    elif v[1] == v[0] + 1:\n        ans = 2 * (v[0] + 1)\n    elif v[0] == v[1]:\n        ans = 2 * v[0]\n    else:\n        ans += 2 * v[0]\n        v[1] -= v[0]\n        v[0] = 0\n        x = v[1] // 3\n        ans += 4 * x\n        v[1] = v[1] % 3\n        if v[1] == 1:\n            ans += 2\n        elif v[1] == 2:\n            ans += 3\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = max(a)\n    print(min(find(a, x), find(a, x + 1), find(a, x + 2)))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    ans = 1e+18\n    for jj in range(m, m + 4):\n        (x, y) = (0, 0)\n        for kk in a:\n            x += (jj - kk) % 2\n            y += (jj - kk) // 2\n        ans = min(max((x + y * 2) // 3 * 2 + (x + y * 2) % 3, x * 2 - 1), ans)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    ans = 1e+18\n    for jj in range(m, m + 4):\n        (x, y) = (0, 0)\n        for kk in a:\n            x += (jj - kk) % 2\n            y += (jj - kk) // 2\n        ans = min(max((x + y * 2) // 3 * 2 + (x + y * 2) % 3, x * 2 - 1), ans)\n    print(ans)", "t = int(input())\nwhile t:\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    mx = max(a)\n    res = 1e+18\n    h = mx\n    while h <= mx + 3:\n        two = 0\n        one = 0\n        for x in a:\n            two += (h - x) // 2\n            one += (h - x) % 2\n        all = one + two * 2\n        days = all // 3 * 2\n        if all % 3 == 1:\n            days += 1\n        if all % 3 == 2:\n            days += 2\n        res = min(res, max(one * 2 - 1, days))\n        h += 1\n    print(res)\n    t -= 1", "import math\nfor i in range(int(input())):\n    n = int(input())\n    H = [int(k) for k in input().split()]\n    a = max(H)\n    b = max(H)\n    MAX = 1e+18\n    while a <= b + 3:\n        t = 0\n        o = 0\n        for x in H:\n            t += (a - x) // 2\n            o += (a - x) % 2\n        T = o + t * 2\n        days = T // 3 * 2\n        if T % 3 == 1:\n            days += 1\n        if T % 3 == 2:\n            days += 2\n        MAX = min(MAX, max(o * 2 - 1, days))\n        a += 1\n    print(MAX)", "t = int(input())\nwhile t:\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    mx = max(a)\n    res = 1e+18\n    h = mx\n    while h <= mx + 3:\n        two = 0\n        one = 0\n        for x in a:\n            two += (h - x) // 2\n            one += (h - x) % 2\n        all = one + two * 2\n        days = all // 3 * 2\n        if all % 3 == 1:\n            days += 1\n        if all % 3 == 2:\n            days += 2\n        res = min(res, max(one * 2 - 1, days))\n        h += 1\n    print(res)\n    t -= 1", "import math\nfor i in range(int(input())):\n    n = int(input())\n    h = [int(k) for k in input().split()]\n    h.sort()\n    MAX = 1e+18\n    a = h[-1]\n    b = []\n    for j in range(4):\n        a += j\n        t = 0\n        c = 0\n        for k in range(n):\n            t += (a - h[k]) // 2\n            c += (a - h[k]) % 2\n        T = t * 2 + c\n        totald = T // 3 * 2\n        if T % 3 == 1:\n            totald += 1\n        if T % 3 == 2:\n            totald += 2\n        MAX = min(MAX, max(c * 2 - 1, totald))\n    print(MAX)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    h = [int(k) for k in input().split()]\n    h.sort()\n    MAX = 1e+18\n    a = h[-1]\n    b = []\n    for j in range(4):\n        a += j\n        t = 0\n        c = 0\n        for k in range(n):\n            t += (a - h[k]) // 2\n            c += (a - h[k]) % 2\n        T = t * 2 + c\n        totald = T // 3 * 2\n        if T % 3 == 1:\n            totald += 1\n        if T % 3 == 2:\n            totald += 2\n        MAX = min(MAX, max(c * 2 - 1, totald))\n    print(MAX)", "t = int(input())\n\ndef solve(n: int, h: list) -> None:\n    mx = max(h)\n\n    def find(target: int) -> int:\n        (two, one, d) = (0, 0, 0)\n        for x in h:\n            if target - x == 1:\n                one += 1\n                d += 1\n            else:\n                two += (target - x) // 2\n                one += target - x & 1\n        ans = 0\n        if one > two:\n            ans = one * 2 - 1\n        elif two > one:\n            (left, right) = (0, two - one)\n            while left <= right:\n                mid = (left + right) // 2\n                if one + mid * 2 <= two - mid + 1:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            ans = max((two - right) * 2, (one + 2 * right) * 2 - 1)\n        else:\n            ans = two * 2\n        return ans\n    print(min(find(mx), find(mx + 1)))\nwhile t > 0:\n    n = int(input())\n    h = list(map(int, input().split()))\n    solve(n, h)\n    t -= 1", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    h = list(map(int, input().split(' ')))\n    max_h = max(h)\n    odd0 = 0\n    odd1 = 0\n    even0 = 0\n    even1 = 0\n    l = 0\n    u = 0\n    for hi in h:\n        diff = max_h - hi\n        l += diff // 2\n        u += diff * 2\n        if diff % 2 == 0:\n            even0 += diff / 2\n            even1 += diff / 2\n            odd1 += 1\n        else:\n            odd0 += 1\n            even0 += int((diff - 1) / 2)\n            even1 += int((diff + 1) / 2)\n    while l <= u:\n        inter = int((l + u) / 2)\n        if math.ceil(inter / 2) >= odd0 and math.floor(inter / 2) * 2 + math.ceil(inter / 2) - odd0 >= even0 * 2 or (math.ceil(inter / 2) >= odd1 and math.floor(inter / 2) * 2 + math.ceil(inter / 2) - odd1 >= even1 * 2):\n            u = inter - 1\n        else:\n            l = inter + 1\n    print(l)"]