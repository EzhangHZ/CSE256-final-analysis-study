["from collections import deque\nI = input\n\ndef f(x, pre):\n    q = deque([(x, pre)])\n    dp = [0] * (n + 1)\n    R = []\n    while q:\n        (u, p) = q.popleft()\n        R.append(u)\n        for v in g[u]:\n            if v != p:\n                g[v].remove(u)\n                q.append((v, u))\n    for u in R[::-1]:\n        z = c = 0\n        for v in g[u]:\n            z += dp[v]\n            if dp[v] == 0:\n                c += 1\n            dp[u] = z + max(0, c - 1)\n    return dp[x]\nfor _ in [0] * int(I()):\n    n = int(I())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, I().split())\n        g[u].append(v)\n        g[v].append(u)\n    if n == 1:\n        z = 0\n    else:\n        for u in range(1, n + 1):\n            if len(g[u]) >= 3:\n                z = f(u, 0)\n                break\n        else:\n            z = 1\n    print(z)", "from collections import deque\nI = input\n\ndef f(x, pre):\n    q = deque([(x, pre)])\n    dp = [0] * (n + 1)\n    R = []\n    while q:\n        (u, p) = q.popleft()\n        R.append(u)\n        for v in g[u]:\n            if v != p:\n                g[v].remove(u)\n                q.append((v, u))\n    for u in R[::-1]:\n        z = c = 0\n        for v in g[u]:\n            z += dp[v]\n            if dp[v] == 0:\n                c += 1\n            dp[u] = z + max(0, c - 1)\n    return dp[x]\nfor _ in [0] * int(I()):\n    n = int(I())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, I().split())\n        g[u].append(v)\n        g[v].append(u)\n    if n == 1:\n        z = 0\n    else:\n        for u in range(1, n + 1):\n            if len(g[u]) >= 3:\n                z = f(u, 0)\n                break\n        else:\n            z = 1\n    print(z)", "from collections import deque\nI = input\n\ndef f(x, pre):\n    q = deque([(x, pre)])\n    dp = [0] * (n + 1)\n    R = []\n    while q:\n        (u, p) = q.popleft()\n        R.append(u)\n        for v in g[u]:\n            if v != p:\n                g[v].remove(u)\n                q.append((v, u))\n    for u in R[::-1]:\n        z = c = 0\n        for v in g[u]:\n            z += dp[v]\n            if dp[v] == 0:\n                c += 1\n            dp[u] = z + max(0, c - 1)\n    return dp[x]\nfor _ in [0] * int(I()):\n    n = int(I())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, I().split())\n        g[u].append(v)\n        g[v].append(u)\n    if n == 1:\n        z = 0\n    else:\n        for u in range(1, n + 1):\n            if len(g[u]) >= 3:\n                z = f(u, 0)\n                break\n        else:\n            z = 1\n    print(z)", "from collections import deque\nI = input\n\ndef f(x, pre):\n    q = deque([(x, pre)])\n    dp = [0] * (n + 1)\n    R = []\n    while q:\n        (u, p) = q.popleft()\n        R.append(u)\n        for v in g[u]:\n            if v != p:\n                g[v].remove(u)\n                q.append((v, u))\n    for u in R[::-1]:\n        z = c = 0\n        for v in g[u]:\n            z += dp[v]\n            if dp[v] == 0:\n                c += 1\n            dp[u] = z + max(0, c - 1)\n    return dp[x]\nfor _ in [0] * int(I()):\n    n = int(I())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, I().split())\n        g[u].append(v)\n        g[v].append(u)\n    if n == 1:\n        z = 0\n    else:\n        for u in range(1, n + 1):\n            if len(g[u]) >= 3:\n                z = f(u, 0)\n                break\n        else:\n            z = 1\n    print(z)", "from collections import deque\nI = input\n\ndef f(x, pre):\n    q = deque([(x, pre)])\n    dp = [0] * (n + 1)\n    R = []\n    while q:\n        (u, p) = q.popleft()\n        R.append(u)\n        for v in g[u]:\n            if v != p:\n                g[v].remove(u)\n                q.append((v, u))\n    for u in R[::-1]:\n        z = c = 0\n        for v in g[u]:\n            z += dp[v]\n            if dp[v] == 0:\n                c += 1\n            dp[u] = z + max(0, c - 1)\n    return dp[x]\nfor _ in [0] * int(I()):\n    n = int(I())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, I().split())\n        g[u].append(v)\n        g[v].append(u)\n    if n == 1:\n        z = 0\n    else:\n        for u in range(1, n + 1):\n            if len(g[u]) >= 3:\n                z = f(u, 0)\n                break\n        else:\n            z = 1\n    print(z)", "from collections import deque\nI = input\n\ndef f(x, pre):\n    q = deque([(x, pre)])\n    dp = [0] * (n + 1)\n    R = []\n    while q:\n        (u, p) = q.popleft()\n        R.append(u)\n        for v in g[u]:\n            if v != p:\n                g[v].remove(u)\n                q.append((v, u))\n    for u in R[::-1]:\n        z = c = 0\n        for v in g[u]:\n            z += dp[v]\n            if dp[v] == 0:\n                c += 1\n            dp[u] = z + max(0, c - 1)\n    return dp[x]\nfor _ in [0] * int(I()):\n    n = int(I())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, I().split())\n        g[u].append(v)\n        g[v].append(u)\n    if n == 1:\n        z = 0\n    else:\n        for u in range(1, n + 1):\n            if len(g[u]) >= 3:\n                z = f(u, 0)\n                break\n        else:\n            z = 1\n    print(z)", "from collections import deque\nI = input\n\ndef f(x, pre):\n    q = deque([(x, pre)])\n    dp = [0] * (n + 1)\n    R = []\n    while q:\n        (u, p) = q.popleft()\n        R.append(u)\n        for v in g[u]:\n            if v != p:\n                g[v].remove(u)\n                q.append((v, u))\n    for u in R[::-1]:\n        z = c = 0\n        for v in g[u]:\n            z += dp[v]\n            if dp[v] == 0:\n                c += 1\n            dp[u] = z + max(0, c - 1)\n    return dp[x]\nfor _ in [0] * int(I()):\n    n = int(I())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, I().split())\n        g[u].append(v)\n        g[v].append(u)\n    if n == 1:\n        z = 0\n    else:\n        for u in range(1, n + 1):\n            if len(g[u]) >= 3:\n                z = f(u, 0)\n                break\n        else:\n            z = 1\n    print(z)", "from collections import deque\nI = input\n\ndef f(x, pre):\n    q = deque([(x, pre)])\n    dp = [0] * (n + 1)\n    R = []\n    while q:\n        (u, p) = q.popleft()\n        R.append(u)\n        for v in g[u]:\n            if v != p:\n                g[v].remove(u)\n                q.append((v, u))\n    for u in R[::-1]:\n        z = c = 0\n        for v in g[u]:\n            z += dp[v]\n            if dp[v] == 0:\n                c += 1\n            dp[u] = z + max(0, c - 1)\n    return dp[x]\nfor _ in [0] * int(I()):\n    n = int(I())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, I().split())\n        g[u].append(v)\n        g[v].append(u)\n    if n == 1:\n        z = 0\n    else:\n        for u in range(1, n + 1):\n            if len(g[u]) >= 3:\n                z = f(u, 0)\n                break\n        else:\n            z = 1\n    print(z)"]