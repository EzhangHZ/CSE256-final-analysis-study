["for s in [*open(0)][1:]:\n    (n, k, r, c) = map(int, s.split())\n    s = n // k * ('X' + '.' * (k - 1)) * 4\n    for j in range((i := (2 * n + r % k - c % k)), i - n, -1):\n        print(s[j:j + n])", "t = int(input())\nfor i in range(t):\n    (n, k, r, c) = map(int, input().split())\n    l = []\n    for i in range(k):\n        s = i * '.' + 'X' + (k - i - 1) * '.'\n        l.append(s)\n    if c % k == 0:\n        a = k - 1\n    else:\n        a = c % k - 1\n    if r % k == 0:\n        b = k - 1\n    else:\n        b = r % k - 1\n    x = l[b]\n    l[b] = l[a]\n    l[a] = x\n    for i in range(k):\n        l[i] = l[i] * int(n / k)\n    l = l * int(n / k)\n    for i in l:\n        print(i)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, k, r, c) = map(int, input().split())\n    (r, c) = ((r - 1) % k, (c - 1) % k)\n    l = [['.'] * k for _ in range(k)]\n    for i in range(k):\n        l[i][i] = 'X'\n    l[r][r] = '.'\n    l[c][c] = '.'\n    l[r][c] = 'X'\n    l[c][r] = 'X'\n    for i in range(n // k):\n        for e in l:\n            print(''.join(e) * (n // k))", "t = int(input())\nfor _ in range(t):\n    (n, k, r, c) = input().split()\n    (n, k, r, c) = (int(n), int(k), int(r), int(c))\n    r -= 1\n    c -= 1\n    r %= k\n    c %= k\n    matrix = [['.' for _ in range(n)] for __ in range(n)]\n    for rid in range(n // k):\n        radd = rid * k\n        for cid in range(n // k):\n            cadd = cid * k\n            for i in range(k):\n                matrix[radd + i][cadd + i] = 'X'\n            matrix[radd + r][cadd + r] = '.'\n            matrix[radd + c][cadd + c] = '.'\n            matrix[radd + r][cadd + c] = 'X'\n            matrix[radd + c][cadd + r] = 'X'\n    for i in range(n):\n        print(''.join(matrix[i]))", "for s in [*open(0)][1:]:\n    (n, k, r, c) = map(int, s.split())\n    a = [['.'] * k for i in range(k)]\n    for i in range(k):\n        a[(i + r - 1) % k][(i + c - 1) % k] = 'X'\n    for i in range(n):\n        print(''.join(a[i % k] * (n // k)))", "def solve():\n    x = int(input())\n    for __ in range(x):\n        [n, k, r, c] = list(map(int, input().split()))\n        rep = n // k\n        r = (r - 1) % k\n        c = (c - 1) % k\n        sub = [['.'] * k for __ in range(k)]\n        sub[r][c] = 'X'\n        sub[c][r] = 'X'\n        for i in range(k):\n            for j in range(k):\n                if i == j and i != r and (i != c):\n                    sub[i][j] = 'X'\n                    break\n        for i in range(rep):\n            for j in range(k):\n                print(''.join(sub[j]) * rep)\nsolve()", "for _ in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    a = [['.' for _ in range(n)] for _ in range(n)]\n    r -= 1\n    c -= 1\n    up = r\n    lf = c\n    while up >= 0:\n        for i in range(lf, n, k):\n            a[up][i] = 'X'\n        for i in range(lf, -1, -k):\n            a[up][i] = 'X'\n        up -= 1\n        lf -= 1\n    low = r + 1\n    lf = c + 1\n    while low < n:\n        for i in range(lf, n, k):\n            a[low][i] = 'X'\n        for i in range(lf, -1, -k):\n            try:\n                a[low][i] = 'X'\n            except:\n                pass\n        low += 1\n        lf += 1\n    for v in a:\n        print(''.join(v))", "for i in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    r = (r - 1) % k\n    c = (c - 1) % k\n    d = n // k\n    for l in range(d):\n        for j in range(k):\n            if j == r:\n                print(('.' * c + 'X' + '.' * (k - c - 1)) * d)\n            elif j == c:\n                print(('.' * r + 'X' + '.' * (k - r - 1)) * d)\n            else:\n                print(('.' * j + 'X' + '.' * (k - j - 1)) * d)", "for _ in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    L = []\n    for i in range(n):\n        L.append('')\n    r -= 1\n    c -= 1\n    tar = [c]\n    j = c + k\n    while j < n:\n        tar.append(j)\n        j += k\n    j = c - k\n    while j >= 0:\n        tar.append(j)\n        j -= k\n    tar.sort()\n    tp = ''\n    for i in range(n):\n        if i in tar:\n            tp += 'X'\n        else:\n            tp += '.'\n    L[r] = tp\n    for i in range(r + 1, n):\n        temp = L[i - 1]\n        tot = temp[1:] + temp[0]\n        L[i] = tot\n    for i in range(r - 1, -1, -1):\n        temp = L[i + 1]\n        tot = temp[n - 1] + temp[0:n - 1]\n        L[i] = tot\n    for i in range(n):\n        print(L[i])", "def f(n, k, r, c):\n    r = r - 1\n    c = c - 1\n    r = r % k\n    c = c % k\n    A = []\n    col = 0\n    for i in range(k):\n        if i == r:\n            curr = '.' * c + 'X' + (k - c - 1) * '.'\n        elif i != r and col != c:\n            curr = '.' * col + 'X' + (k - col - 1) * '.'\n            col += 1\n        else:\n            col += 1\n            curr = '.' * col + 'X' + (k - col - 1) * '.'\n            col += 1\n        A.append(curr)\n    mul = n // k\n    for i in range(k):\n        A[i] = A[i] * mul\n    return A\ntc = int(input())\nwhile tc > 0:\n    (n, k, r, c) = [int(i) for i in input().split(' ')]\n    A = f(n, k, r, c)\n    for i in range(n // k):\n        for j in range(k):\n            print(A[j])\n    tc = tc - 1", "for _ in range(int(input())):\n    (n, k, r, c) = list(map(int, input().split()))\n    ans = []\n    for _ in range(n):\n        ans.append(list('.' * n))\n    ans[r - 1][c - 1] = 'X'\n    col = c\n    for i in range(0, r)[::-1]:\n        for j in range(c - 1, n + c, k):\n            ans[i][j % n] = 'X'\n        c += 1\n    c = col\n    for i in range(r - 1, n):\n        for j in range(c - 1, n + c, k):\n            ans[i][j % n] = 'X'\n        c -= 1\n    print('\\n'.join(list(map(''.join, ans))))", "def main():\n    t = int(input())\n    for j in range(t):\n        (n, k, r, c) = map(int, input().split())\n        matrix = [['.'] * k for i in range(k)]\n        nr = (r - 1) % k\n        nc = (c - 1) % k\n        matrix[nr][nc] = 'X'\n        for i in range(1, k):\n            matrix[(nr + i) % k][(nc + i) % k] = 'X'\n        matrix = [''.join(matrix[i]) for i in range(k)]\n        result = [matrix[i % k] * (n // k) for i in range(k * (n // k))]\n        for res in result:\n            print(res)\nmain()", "for _ in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    t = (r - 1) % k + c\n    x = t % k\n    s = ''\n    for i in range(1, n + 1):\n        if i % k == x:\n            s += 'X'\n        else:\n            s += '.'\n    print(s)\n    for j in range(n - 1):\n        s = s[1:] + s[0]\n        print(s)", "def main():\n    length = int(input())\n    for _ in range(length):\n        (n, k, r, c) = list(map(int, input().split(' ')))\n        res = [['.'] * n for _ in range(n)]\n        solver((r - 1) % k, (c - 1) % k, res, k, n)\n        for line in res:\n            print(''.join(line))\n\ndef solver(r, c, grid, k, n):\n    (_r, _c) = (0, 0)\n    (arr_r, arr_c) = ([r], [c])\n    for _ in range(k - 1):\n        if _r == r:\n            _r += 1\n        if _c == c:\n            _c += 1\n        arr_r.append(_r)\n        arr_c.append(_c)\n        _r += 1\n        _c += 1\n    t = n // k\n    for i in range(t ** 2):\n        t_r = i // t\n        t_c = i % t\n        for j in range(len(arr_r)):\n            _r = t_r * k + arr_r[j]\n            _c = t_c * k + arr_c[j]\n            grid[_r][_c] = 'X'\nmain()", "for _ in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    s = 'X'\n    s1 = '.' * (k - 1)\n    a = (s + s1) * (n // k)\n    for _ in range(c - 1):\n        a = a[-1] + a[:n - 1]\n    for _ in range(r - 1):\n        a = a[1:] + a[0]\n    l = []\n    for _ in range(n):\n        l.append(a)\n        a = a[-1] + a[:n - 1]\n    for x in l:\n        print(x)", "def cal(n, k, r, c):\n    if k == 1:\n        return ['X' * n for i in range(n)]\n    res = [['.'] * n for _ in range(n)]\n    (r, c) = (r - 1, c - 1)\n    if r <= c:\n        st = n - 1 + c - r\n    else:\n        st = n - 1 - (r - c)\n    p = []\n    for i in range(st, 2 * n - 1, k):\n        p.append(i)\n    for i in range(st, -1, -k):\n        p.append(i)\n    p = p[1:]\n    for i in p:\n        if i <= n - 1:\n            (x, y) = [n - 1 - i, 0]\n            while x < n and y < n:\n                res[x][y] = 'X'\n                x += 1\n                y += 1\n        else:\n            (x, y) = [0, i - (n - 1)]\n            while x < n and y < n:\n                res[x][y] = 'X'\n                x += 1\n                y += 1\n    ans = []\n    for i in res:\n        ans.append(''.join(i))\n    return ans\nfor jj in range(int(input())):\n    (n, k, r, c) = [int(i) for i in input().split()]\n    res = cal(n, k, r, c)\n    for i in res:\n        print(i)", "t = int(input())\n\ndef tostring(table):\n    return '\\n'.join([''.join(row) for row in table])\n\ndef solve(n, k, r, c):\n    if k == 1:\n        return tostring([['X'] * n] * n)\n    table = []\n    for i in range(n):\n        table.append(['.'] * n)\n    start_row = r - 1\n    start_col = c - 1\n    for i in range(n):\n        current_row = (start_row + i) % n\n        current_col = (start_col + i) % n\n        table[current_row][current_col] = 'X'\n        another_col = current_col\n        while another_col < n:\n            table[current_row][another_col] = 'X'\n            another_col += k\n        another_col = current_col\n        while another_col >= 0:\n            table[current_row][another_col] = 'X'\n            another_col -= k\n    return tostring(table)\nfor _ in range(t):\n    (n, k, r, c) = [int(x) for x in input().split(' ')]\n    print(solve(n, k, r, c))", "for s in [*open(0)][1:]:\n    (n, k, r, c) = map(int, s.split())\n    s = n // k * ('X' + '.' * (k - 1)) * 4\n    i = 2 * n + r % k - c % k\n    for j in range(i, i - n, -1):\n        print(s[j:j + n])", "t = int(input())\nfor i in range(t):\n    a = list(map(int, input().split()))\n    n = a[0]\n    k = a[1]\n    r = a[2]\n    c = a[3]\n    num = (c - 1) % k - (r - 1) % k\n    if num < 0:\n        num += k\n\n    def xval(row):\n        return ((row - 1) % k + num) % k\n    for j in range(1, n + 1):\n        c = ['.'] * n\n        myval = xval(j)\n        while myval <= n - 1:\n            c[myval] = 'X'\n            myval += k\n        str1 = ''\n        print(str1.join(c))", "from math import ceil\nimport sys\ninput = sys.stdin.readline\n\ndef print(*args, end='\\n', sep=' ') -> None:\n    sys.stdout.write(sep.join(map(str, args)) + end)\n\ndef Solve():\n    for t in range(int(input())):\n        (n, k, r, c) = map(int, input().split())\n        z = n // k\n        r %= k\n        c %= k\n        ss = [''] * k\n        for i in range(k):\n            s = ('.' * i + 'X' + '.' * (k - i - 1)) * z\n            ss[i] = s\n        (ss[c - 1], ss[r - 1]) = (ss[r - 1], ss[c - 1])\n        ss = ss * z\n        print(*ss, sep='\\n')\nSolve()", "for _ in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    x = 0\n    (r, c) = (r - 1, c - 1)\n    p = ('X' + '.' * (k - 1)) * (n // k)\n    matrix = []\n    for i in range(n):\n        s = p[x:n] + p[:x]\n        matrix.append(s)\n        x = (x + 1) % k\n    idx = 0\n    while matrix[(r + idx) % n][c] != 'X':\n        idx += 1\n    for i in range(n):\n        print(matrix[(i + idx) % n])", "for s in [*open(0)][1:]:\n    (n, k, r, c) = map(int, s.split())\n    s = n // k * ('X' + '.' * (k - 1)) * 3\n    for j in range((i := (n + (r - c) % k)), i - n, -1):\n        print(s[j:j + n])", "for s in [*open(0)][1:]:\n    (n, k, r, c) = map(int, s.split())\n    s = n * 2 * ('X' + '.' * (k - 1))\n    for j in range((i := (n + (r - c) % k)), i - n, -1):\n        print(s[j:j + n])", "for _ in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    (r, c) = ((r - 1) % k, (c - 1) % k)\n    mat = [['.' for i in range(k)] for j in range(k)]\n    mat[r][c] = 'X'\n    (rowBool, colBool) = ([False] * k, [False] * k)\n    rowBool[r] = colBool[c] = True\n    for i in range(k):\n        for j in range(k):\n            if not rowBool[i] and (not colBool[j]):\n                mat[i][j] = 'X'\n                rowBool[i] = colBool[j] = True\n    for _ in range(n // k):\n        for j in range(k):\n            print(''.join(mat[j] * (n // k)))", "def fillrow(row, start):\n    for i in range(row, n, k):\n        for j in range(start, n, k):\n            mat[i][j] = 'X'\nfor _ in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    r -= 1\n    c -= 1\n    div = n // k\n    mat = [['.' for i in range(n)] for j in range(n)]\n    r = r - r // k * k\n    c = c - c // k * k\n    pos = set()\n    for i in range(k):\n        if i == r:\n            continue\n        pos.add(i)\n    count = 0\n    for i in range(k):\n        if count == c:\n            count += 1\n        if i in pos:\n            fillrow(i, count)\n            count += 1\n        else:\n            fillrow(r, c)\n    for i in range(n):\n        print(''.join(mat[i]))", "num = int(input())\nfor i in range(num):\n    data = input()\n    data = data.split(' ')\n    n = int(data[0])\n    k = int(data[1])\n    r = int(data[2])\n    c = int(data[3])\n    fil = []\n    ans = []\n    if k == 1:\n        for z in range(n):\n            row = 'X' * n\n            ans.append(row)\n        print('\\n'.join(ans))\n    else:\n        isTrues = True\n        for z in range(k):\n            row = ''\n            if (z + 1 == r % k or (r % (z + 1) == 0 and z + 1 == k)) and isTrues:\n                isTrues = False\n                for j in range(k):\n                    if j + 1 == c % k or (c % (j + 1) == 0 and j + 1 == k):\n                        row += 'X'\n                    else:\n                        row += '.'\n            else:\n                isTrue = True\n                for j in range(k):\n                    if j + 1 != c % k and j + 1 not in fil and isTrue:\n                        fil.append(j + 1)\n                        row += 'X'\n                        isTrue = False\n                    else:\n                        row += '.'\n            row = row * int(n / k)\n            ans.append(row)\n        ans = ans * int(n / k)\n        print('\\n'.join(ans))", "t = int(input())\nfor i in range(0, t):\n    (n, k, r, s) = map(int, input().split())\n    m = r % k\n    if m == 0:\n        m = k\n    p = s % k\n    if p == 0:\n        p = k\n    l = []\n    if p + m - 2 > k - 1:\n        bl = True\n        j = 0\n        while bl == True:\n            if m + p - k - 2 - j < 0:\n                break\n            l.append((m + p - k - 2 - j) * '.' + 'X' + (2 * k + j - m - p + 1) * '.')\n            j = j + 1\n        for j in range(0, k - len(l)):\n            l.append((k - j - 1) * '.' + 'X' + j * '.')\n    else:\n        bl2 = True\n        j = 0\n        while bl2 == True:\n            if p + m - 2 - j < 0:\n                break\n            l.append((p + m - 2 - j) * '.' + 'X' + (k + 1 - p - m + j) * '.')\n            j = j + 1\n        for j in range(0, k - len(l)):\n            l.append((k - j - 1) * '.' + 'X' + j * '.')\n    for j in range(0, n):\n        print(n // k * l[j % k])", "for _ in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    r = r - 1\n    c = c - 1\n    arr = []\n    count = 0\n    for i in range(n):\n        arr.append(['.'] * n)\n    l = 0\n    for i in range(0, n):\n        for j in range(l, n, k):\n            arr[i][j] = 'X'\n        l += 1\n        if l == k:\n            l = 0\n    while arr[r][c] != 'X':\n        l = arr[0]\n        arr.pop(0)\n        arr.append(l)\n    for i in range(n):\n        print(''.join(arr[i]))", "for _ in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    (r, c) = (r - 1, c - 1)\n    m = (r + c) % k\n    arr = [['.'] * n for _ in range(n)]\n    for d in range(m, 2 * n - 1, k):\n        i = min(d, n - 1)\n        for j in range(d - i, i + 1):\n            arr[i][j] = 'X'\n            i -= 1\n    for i in arr:\n        print(''.join(i))", "for s in [*open(0)][1:]:\n    (n, k, r, c) = map(int, s.split())\n    s = n * 2 * ('X' + '.' * (k - 1))\n    for j in range((i := (n + (r - c) % k)), i - n, -1):\n        print(s[j:j + n])", "for i in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    r = (r - 1) % k\n    c = (c - 1) % k\n    d = n // k\n    for l in range(d):\n        for j in range(k):\n            if j == r:\n                print(('.' * c + 'X' + '.' * (k - c - 1)) * d)\n            elif j == c:\n                print(('.' * r + 'X' + '.' * (k - r - 1)) * d)\n            else:\n                print(('.' * j + 'X' + '.' * (k - j - 1)) * d)", "t = int(input())\nfor ind in range(t):\n    inp = input().split(' ')\n    n = int(inp[0])\n    k = int(inp[1])\n    y = int(inp[2])\n    x = int(inp[3])\n    u = (x - y) % k\n    for i in range(n):\n        sub = '.' * u + 'X' + '.' * max(0, k - u - 1)\n        print(sub * int(n / k))\n        u += 1\n        u %= k", "def main():\n    for t in range(int(input())):\n        (n, k, x, y) = map(int, input().split())\n        s = ['.' for i in range(n)]\n        for i in range(y - 1, -1, -k):\n            s[i] = 'X'\n        for i in range(y - 1, n, k):\n            s[i] = 'X'\n        s = s[x - 1:] + s[:x - 1]\n        for i in range(n):\n            print(''.join(s))\n            s = s[-1:] + s[:-1]\nmain()", "for _ in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        arr.append('')\n    key = 1\n    while key <= n:\n        if (key - c) % k == 0:\n            arr[r - 1] += 'X'\n        else:\n            arr[r - 1] += '.'\n        key += 1\n    for i in range(r, n):\n        temp = arr[i - 1]\n        arr[i] = temp[n - 1] + temp[0:n - 1]\n    for i in range(r - 2, -1, -1):\n        temp = arr[i + 1]\n        arr[i] = temp[1:n] + temp[0]\n    for l in arr:\n        print(l)", "import sys\nt = int(input())\nfor _ in range(t):\n    mas = [int(ii) for ii in input().split()]\n    (n, k, r, c) = (mas[0], mas[1], mas[2], mas[3])\n    ans = [['.'] * n] * n\n    a = (c % k - r % k) % k\n    for i in range(n):\n        temp = ['.'] * k\n        temp[(i + a) % k] = 'X'\n        ans[i] = temp * (n // k)\n    for j in range(n):\n        print(''.join(ans[j]))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, k, r, c) = map(int, input().split())\n    ans = [['.'] * n for _ in range(n)]\n    cnt = n // k + 1 if n % k else n // k\n    for i in range(r, n):\n        st = (c - 1 + i - (r - 1)) % n\n        for j in range(cnt):\n            ans[i][(st + j * k) % n] = 'X'\n    for i in range(r - 1, -1, -1):\n        st = (c - 1 - (r - 1 - i)) % n\n        for j in range(cnt):\n            ans[i][(st + j * k) % n] = 'X'\n    for pat in ans:\n        print(''.join(pat))\n    return\nfor _ in range(int(input())):\n    solve()", "def move(x, y, shift, n):\n    return (x, (y + shift + n) % n)\n\ndef solve(n, k, r, c):\n    shift = c - r\n    origin = set([move(i, i, shift, k) for i in range(k)])\n    ans = [['.'] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if (i % k, j % k) in origin:\n                ans[i][j] = 'X'\n    for line in ans:\n        print(''.join(line))\nN = int(input())\nfor _ in range(N):\n    ss = input().split(' ')\n    (n, k, r, c) = (int(ss[0]), int(ss[1]), int(ss[2]), int(ss[3]))\n    solve(n, k, r - 1, c - 1)", "def ss(n, k, r, c):\n    a = [['.' for i in range(n)] for i in range(n)]\n    inc = 0\n    for i in range(r, n):\n        inc = inc % k\n        for j in range(c + inc, n, k):\n            if j >= n:\n                continue\n            a[i][j] = 'X'\n        for j in range(c + inc, -1, -k):\n            if j >= n:\n                continue\n            a[i][j] = 'X'\n        inc += 1\n    dec = 0\n    for i in range(r, -1, -1):\n        dec = dec % k\n        for j in range(c + dec, n, k):\n            if j >= n:\n                continue\n            a[i][j] = 'X'\n        for j in range(c + dec, -1, -k):\n            if j >= n:\n                continue\n            a[i][j] = 'X'\n        dec -= 1\n    return a\nfor _ in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    (r, c) = (r - 1, c - 1)\n    a = ss(n, k, r, c)\n    for i in a:\n        print(''.join(i))", "for _ in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    l = [0 for j in range(n)]\n    r -= 1\n    c -= 1\n    target = [c]\n    j = c + k\n    while j < n:\n        target.append(j)\n        j += k\n    j = c - k\n    while j >= 0:\n        target.append(j)\n        j -= k\n    target.sort()\n    temp = ''\n    for j in range(n):\n        if j in target:\n            temp += 'X'\n        else:\n            temp += '.'\n    l[r] = temp\n    for j in range(r + 1, n):\n        temp = l[j - 1]\n        a = temp[1:] + temp[0]\n        l[j] = a\n    for j in range(r - 1, -1, -1):\n        temp = l[j + 1]\n        a = temp[n - 1] + temp[0:n - 1]\n        l[j] = a\n    for j in range(n):\n        print(l[j])", "from collections import deque\n\ndef solution():\n    (n, k, r, c) = map(int, input().split())\n    rem = c % k\n    s = ['.' for i in range(k)]\n    s[rem - 1] = 'X'\n    row = deque(n // k * s)\n    ans = deque([row])\n    row1 = row.copy()\n    for i in range(r + 1, n + 1):\n        row1.rotate(1)\n        ans.append(row1.copy())\n    row1 = row.copy()\n    for i in range(r - 1, 0, -1):\n        row1.rotate(-1)\n        ans.appendleft(row1.copy())\n    for row in ans:\n        print(''.join(row))\n\ndef main():\n    t = int(input())\n    while t:\n        solution()\n        t -= 1\nmain()", "for _ in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    s = [['.'] * n for i in range(n)]\n    r -= 1\n    c -= 1\n    for i in range(n):\n        x = (r + i) % n\n        y = (c + i) % n\n        s[x][y] = 'X'\n        j = y + k\n        while j < n:\n            s[x][j] = 'X'\n            j += k\n        j = y - k\n        while j >= 0:\n            s[x][j] = 'X'\n            j -= k\n    for i in range(n):\n        print(''.join(s[i]))", "from collections import deque\nfor _ in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    a = ['X'] + ['.' for i in range(k - 1)]\n    s = []\n    for i in range(n // k):\n        s += a\n    ans = [0] * n\n    if (c - 1) % k:\n        ans[r - 1] = s[-((c - 1) % k):] + s[:-((c - 1) % k)]\n    else:\n        ans[r - 1] = s\n    up = deque([c for c in ans[r - 1]])\n    down = deque([c for c in ans[r - 1]])\n    for i in range(r, n):\n        up.appendleft(up.pop())\n        ans[i] = [c for c in up]\n    for i in range(r - 2, -1, -1):\n        down.append(down.popleft())\n        ans[i] = [c for c in down]\n    for e in ans:\n        print(''.join(e))", "for s in [*open(0)][1:]:\n    (n, k, r, c) = map(int, s.split())\n    a = [['.'] * k for i in range(k)]\n    for i in range(k):\n        a[(i + r - 1) % k][(i + c - 1) % k] = 'X'\n    for i in range(n):\n        print(''.join(a[i % k] * (n // k)))", "for i in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    f = [['.'] * n for j in range(n)]\n    f[r - 1][c - 1] = 'X'\n    for j in range(n // k):\n        for t in range(k):\n            for q in range((c - r + t) % k, n, k):\n                f[j * k + t][q] = 'X'\n    for j in f:\n        print(''.join(j))", "for h in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    x = []\n    r -= 1\n    c -= 1\n    for i in range(n):\n        x.append(['.'] * (2 * n))\n    x[r][c] = 'x'\n    v = c + r\n    i = v\n    while i >= 0:\n        x[0][i] = 'x'\n        i -= k\n    i = v\n    while i < 2 * n:\n        x[0][i] = 'x'\n        i += k\n    for i in range(2 * n):\n        if x[0][i] == 'x':\n            (a, b) = (0, i)\n            while b >= 0 and a < n:\n                x[a][b] = 'X'\n                a += 1\n                b -= 1\n    for i in x:\n        print(''.join(i[:n]))", "def miis():\n    return map(int, input().split())\nfor _ in range(int(input())):\n    (n, k, r, c) = miis()\n    if k == 1:\n        for i in range(n):\n            print('X' * n)\n        continue\n    ans = [['.'] * n for i in range(n)]\n    p = (c - 1 - (r - 1)) % k\n    for i in range(n):\n        for j in range(p % k, n, k):\n            ans[i][j] = 'X'\n        p += 1\n    for i in ans:\n        print(''.join(i))", "def codeforces(n, k, r, c):\n    c -= 1\n    arr = ['.' for i in range(n)]\n    ro = 0\n    for i in range(r - 1):\n        c = (c + 1) % n\n    tp = c\n    while ro < n:\n        b = arr.copy()\n        tc = tp\n        while tc >= 0:\n            b[tc] = 'X'\n            tc -= k\n        tc = tp\n        while tc < n:\n            b[tc] = 'X'\n            tc += k\n        tp = (tp - 1) % n\n        print(''.join(b))\n        ro += 1\nt = int(input())\nfor test in range(t):\n    (n, k, r, c) = [int(i) for i in input().split()]\n    codeforces(n, k, r, c)", "def solution(n, k, r, c):\n    ans = [['.' for i in range(n)] for j in range(n)]\n    r -= 1\n    c -= 1\n    for i in range(n):\n        ans[r][c] = 'X'\n        for j in range(c, n, k):\n            ans[r][j] = 'X'\n        for j in range(c, -1, -k):\n            ans[r][j] = 'X'\n        r += 1\n        c += 1\n        if r == n:\n            r = 0\n        if c == n:\n            c = 0\n    for i in range(n):\n        print(''.join(ans[i]))\nt = int(input())\nfor _ in range(t):\n    (n, k, r, c) = list(map(int, input().split()))\n    solution(n, k, r, c)", "def underground_comp(n, k, r, c):\n    mat = [['.'] * n for _ in range(n)]\n    (block_r, block_c) = ((r - 1) % k, (c - 1) % k)\n    for i in range(n // k):\n        for j in range(n // k):\n            (curr_r_offset, curr_c_offset) = (i * k, j * k)\n            (curr_r, curr_c) = ((block_r + 1) % k, (block_c + 1) % k)\n            while mat[curr_r_offset + curr_r][curr_c_offset + curr_c] != 'X':\n                mat[curr_r_offset + curr_r][curr_c_offset + curr_c] = 'X'\n                (curr_r, curr_c) = ((curr_r + 1) % k, (curr_c + 1) % k)\n    return mat\nnum_tests = int(input())\nfor _ in range(num_tests):\n    (n, k, r, c) = tuple(map(int, input().strip().split()))\n    mat = underground_comp(n, k, r, c)\n    for row in mat:\n        print(''.join(row))", "T = int(input())\nfor t in range(T):\n    (n, k, r, c) = map(int, input().split())\n    res = [['.' for i in range(n)] for j in range(n)]\n    res[r - 1][c - 1] = 'X'\n    for cur_r in range(n):\n        cur_c = (cur_r - r + c + n) % n\n        cnt = 0\n        while cnt < n // k:\n            res[cur_r][cur_c] = 'X'\n            cur_c = (cur_c + k) % n\n            cnt += 1\n    for row in res:\n        print(''.join(row))", "import sys\nN = int(input())\n\ndef table(n, k, r, c):\n    loc = (r - 1 + c - 1) % n\n    loc = loc % k\n    index = []\n    while loc < n:\n        index.append(loc)\n        loc += k\n    for _ in range(n):\n        line = ['.' for _ in range(n)]\n        for i in index:\n            line[i] = 'X'\n        print(''.join(line))\n        index = list(map(lambda x: x - 1 if x >= 0 else n - 2, index))\nfor _ in range(N):\n    (n, k, r, c) = map(int, sys.stdin.readline().split())\n    table(n, k, r, c)", "t = int(input())\nfor i in range(t):\n    (n, k, r, c) = list(map(int, input().strip().split()))\n    arr = [['.'] * n for i in range(n)]\n    r0 = (r - 1) % k\n    c0 = (c - 1) % k\n    for x in range(int(n / k)):\n        for y in range(int(n / k)):\n            i = r0\n            j = c0\n            for _ in range(k):\n                arr[i + k * y][j + k * x] = 'X'\n                i = (i + 1) % k\n                j = (j + 1) % k\n    for i in range(n):\n        s = ''.join(arr[i])\n        print(s)", "for h in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    temp = []\n    c -= 1\n    r -= 1\n    for i in range(n):\n        temp.append(['.'] * (2 * n))\n    temp[r][c] = 'X'\n    var = c + r\n    i = var\n    while i >= 0:\n        temp[0][i] = 'X'\n        i -= k\n    i = var\n    while i < 2 * n:\n        temp[0][i] = 'X'\n        i += k\n    for i in range(2 * n):\n        if temp[0][i] == 'X':\n            (w, q) = (i, 0)\n            while w >= 0 and q < n:\n                q += 1\n                w -= 1\n                temp[q - 1][w + 1] = 'X'\n    for i in temp:\n        print(''.join(i[:n]))", "import math\nt = int(input())\nfor tc in range(t):\n    (n, k, r, c) = map(int, input().split())\n    a = list()\n    x = [['.'] * k for _ in range(k)]\n    ra = r % k\n    if ra == 0:\n        row = k - 1\n    else:\n        row = ra - 1\n    ca = c % k\n    if ca == 0:\n        col = k - 1\n    else:\n        col = ca - 1\n    x[row][col] = 'X'\n    if row == col:\n        for i in range(k):\n            for j in range(k):\n                if i == j:\n                    x[i][j] = 'X'\n        for i in range(n // k):\n            for i in range(k):\n                for j in range(n // k):\n                    print(''.join(x[i]), end='')\n                print('')\n    else:\n        for i in range(k):\n            for j in range(k):\n                if i != row and j != col:\n                    if i == j:\n                        x[i][j] = 'X'\n        rno = cno = 0\n        for j in range(k):\n            if 'X' not in x[j]:\n                rno = j\n        xt = [[x[j][i] for j in range(len(x))] for i in range(len(x[0]))]\n        for z in range(k):\n            if 'X' not in xt[z]:\n                cno = z\n        x[rno][cno] = 'X'\n        for i in range(n // k):\n            for i in range(k):\n                for j in range(n // k):\n                    print(''.join(x[i]), end='')\n                print('')", "for t in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    ans = [['.' for j in range(n + 1)] for i in range(n + 1)]\n    c1 = c\n    c2 = c\n    for i in range(r, n + 1):\n        modulus = c1 % k\n        for j in range(1, n + 1):\n            if j % k == modulus:\n                ans[i][j] = 'X'\n        c1 += 1\n    for i in range(r - 1, 0, -1):\n        modulus = (c - 1) % k\n        for j in range(1, n + 1):\n            if j % k == modulus:\n                ans[i][j] = 'X'\n        c -= 1\n    for i in range(1, n + 1):\n        print(''.join(ans[i][1:]))", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, k, r, c) = map(int, inp().split())\n    x = -(r - 1 + c - 1)\n    print('\\n'.join((''.join(('X' if (i + j + x) % k == 0 else '.' for j in range(n))) for i in range(n))))\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "def solve(n, k, r, c):\n    identifier = (r + c - 2) % k\n    result = []\n    for ri in range(n):\n        row = ''\n        for ci in range(n):\n            if (ri + ci) % k == identifier:\n                row += 'X'\n            else:\n                row += '.'\n        result.append(row)\n    return '\\n'.join(result)\nt = int(input())\nfor _ in range(t):\n    (n, k, r, c) = [int(e) for e in input().split()]\n    print(solve(n, k, r, c))", "def toStr(s):\n    new = ''\n    for x in s:\n        new += x\n    return new\nfor _ in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    r -= 1\n    c -= 1\n    grid = []\n    for i in range(n):\n        row = []\n        for i in range(n):\n            row.append('.')\n        grid.append(row)\n    for j in range(n // k):\n        for i in range(n):\n            grid[r][c] = 'X'\n            r += 1\n            c -= 1\n            r = r % n\n            c = c % n\n        r += k\n        r = r % n\n    for i in range(n):\n        print(toStr(grid[i]))", "t = int(input())\nfor _ in range(t):\n    (n, k, r, c) = map(int, input().split())\n    L = [['.' for i in range(n)] for i in range(n)]\n    for i in range(r - 1, n + r - 1):\n        for j in range(c - 1 + i - r + 1, n + c - 1 + r + 2 * n, k):\n            L[i % n][j % n] = 'X'\n    for i in range(n):\n        A = L[i]\n        print(''.join(A))", "DEBUG = False\n\ndef solution(n, k, r, c):\n    r -= 1\n    c -= 1\n    grid = [['.' for _ in range(n)] for _ in range(n)]\n    start_i = r\n    start_j = c % k\n    for i in range(start_i, start_i + n):\n        for j in range(start_j, n, k):\n            grid[i % n][j] = 'X'\n        start_j = (start_j + 1) % k\n    assert grid[r][c] == 'X'\n    for row in grid:\n        print(''.join((str(i) for i in row)))\n\ndef main():\n    if DEBUG:\n        import os\n        os.chdir(os.path.dirname(__file__))\n        global input\n        f = open('Sample.txt')\n        input = lambda : f.readline().strip()\n    T = int(input())\n    for t in range(T):\n        (n, k, r, c) = map(int, input().split())\n        solution(n, k, r, c)\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, k, r, c) = [int(i) for i in input().split()]\n    mat = [['.'] * n for _ in range(n)]\n    r -= 1\n    c -= 1\n    rem = (r + c) % k\n    for i in range(n):\n        for j in range(n):\n            if (i + j) % k == rem:\n                mat[i][j] = 'X'\n    for i in mat:\n        print(''.join(i))", "for _ in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    (r, c) = (r - 1, c - 1)\n    y = (r + c) % k\n    ans = [['.' for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if (i + j - y) % k == 0:\n                ans[i][j] = 'X'\n    for i in range(n):\n        print(''.join(ans[i]))", "for i in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    r -= 1\n    c -= 1\n    rc = (r + c) % k\n    out = []\n    for x in range(n):\n        line = []\n        for y in range(n):\n            if (x + y) % k == rc:\n                line.append('X')\n            else:\n                line.append('.')\n        out.append(''.join(line))\n    print('\\n'.join(out))", "def solve(n, k, a, b):\n    phase = a + b - 2\n    while phase < 0:\n        phase += k\n    phase %= k\n    for _ in range(n):\n        print(phase * '.' + 'X', end='')\n        for _ in range(n // k - 1):\n            print((k - 1) * '.' + 'X', end='')\n        print((k - 1 - phase) * '.')\n        phase += k - 1\n        phase %= k\nt = int(input())\nfor _ in range(t):\n    (n, k, a, b) = map(int, input().split())\n    solve(n, k, a, b)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, k, r, c) = map(int, input().split())\n    s = c + r - 1\n    s = (s - 1) % k\n    m = ['.'] * (n * 3)\n    for x in range(s, n * 3, k):\n        m[x] = 'X'\n    mab = []\n    for x in range(n):\n        print(''.join((str(s) for s in m[x:x + n])))", "for i in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    for j in range(n):\n        print(''.join(('X.'[(t - j + r - c) % k > 0] for t in range(n))))", "for s in [*open(0)][1:]:\n    (n, k, r, c) = map(int, s.split())\n    n = range(n)\n    for j in n:\n        print(''.join(('X.'[(i - j + r - c) % k > 0] for i in n)))", "testcase = int(input())\nfor _ in range(testcase):\n    (n, k, r, c) = [int(num) for num in input().split()]\n    grid = [['.'] * n for _ in range(n)]\n    t = (r - c + k) % k\n    for i in range(n):\n        for j in range(n):\n            if (i - j + k) % k == t:\n                grid[i][j] = 'X'\n    for row in grid:\n        print(''.join(row))", "def solve(n, k, rr, cc):\n    r = (rr - 1) % k\n    c = (cc - 1) % k\n    for row in range(0, n):\n        s = ''\n        for col in range(0, n):\n            isX = (col % k - c - (r - row % k)) % k == 0\n            if isX:\n                s += 'X'\n            else:\n                s += '.'\n        print(s)\nt = int(input())\nfor i in range(0, t):\n    values = input().split(' ')\n    solve(int(values[0]), int(values[1]), int(values[2]), int(values[3]))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, k, r, c) = list(map(int, input().split()))\n    for i in range(n):\n        print(''.join(['X' if (j + 1 - c - (i + 1 - r)) % k == 0 else '.' for j in range(n)]))", "t = int(input())\nimport sys\nfor i in sys.stdin:\n    (n, k, r, c) = map(int, i.split())\n    a = (r - 1 + c - 1) % k\n    for i in range(n):\n        aa = []\n        for j in range(n):\n            if (i + j) % k == a:\n                aa.append('X')\n            else:\n                aa.append('.')\n        print(''.join(aa))", "a = int(input())\nfor i in range(a):\n    (n, k, r, c) = map(int, input().split())\n    ans = [['.' for i in range(n)] for i in range(n)]\n    t = c - 1\n    while ans[r - 1][t % n] != 'X':\n        while ans[r - 1][t % n] != 'X':\n            ans[r - 1][t % n] = 'X'\n            t += k\n        r += 1\n        t += 1\n        r %= n\n        t %= n\n    for i in range(n):\n        print(''.join(map(str, ans[i])))", "for s in [*open(0)][1:]:\n    (n, k, r, c) = map(int, s.split())\n    n = range(n)\n    for j in n:\n        print(''.join(('X.'[(i - j + r - c) % k > 0] for i in n)))", "for _ in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    n = range(n)\n    for j in n:\n        print(''.join(('X.'[(i + j) % k != (r + c - 2) % k] for i in n)))", "for s in [*open(0)][1:]:\n    (n, k, r, c) = map(int, s.split())\n    n = range(n)\n    for j in n:\n        print(''.join(('X.'[(i - j + r - c) % k > 0] for i in n)))", "t = int(input())\nfor i in range(t):\n    (n, k, r, c) = map(int, input().split())\n    tabl = [None] * n\n    for x in range(n):\n        tabl[x] = ['.'] * n\n    tabl[r - 1][c - 1] = 'X'\n    s = r - 1\n    phi = 0\n    for x in range(n):\n        for y in range(n // k):\n            tabl[s % n][((c - 1 + phi) % k + k * y) % n] = 'X'\n        phi += 1\n        s += 1\n    for x in range(n):\n        s = ''\n        for y in range(n):\n            s += tabl[x][y]\n        print(s)", "def make_grid(n):\n    grid = [['.' for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        grid[i][i] = 'X'\n    return grid\n\ndef move(grid, r, c):\n    while grid[r][c] != 'X':\n        temp = grid[0]\n        for i in range(len(grid) - 1):\n            grid[i] = grid[i + 1]\n        grid[-1] = temp\n    return grid\n\ndef algo(n, k, r, c):\n    r = (r - 1) % k\n    c = (c - 1) % k\n    grid = make_grid(k)\n    move(grid, r, c)\n    res = [['' for _ in range(n)] for _ in range(n)]\n    for i in range(n // k):\n        for j in range(n // k):\n            for dx in range(k):\n                for dy in range(k):\n                    row = i * k + dx\n                    col = j * k + dy\n                    res[row][col] = grid[dx][dy]\n    return res\n\ndef print_grid(grid):\n    for i in range(len(grid)):\n        print(''.join(grid[i]))\nn = int(input())\nfor _ in range(n):\n    arr = input().split(' ')\n    for i in range(4):\n        arr[i] = int(arr[i])\n    print_grid(algo(arr[0], arr[1], arr[2], arr[3]))", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k, idx, jdx) = map(int, input().split())\n    idx -= 1\n    jdx -= 1\n    a = []\n    for i in range(n):\n        a += [['.'] * n]\n    for i in range(n):\n        for j in range(n):\n            if (i + j) % k == (idx + jdx) % k:\n                a[i][j] = 'X'\n    for i in range(n):\n        print(''.join(a[i]))", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, k, r, c) = map(int, input().split())\n    Map = [['.'] * n for _ in range(n)]\n    Map[r - 1][c - 1] = 'X'\n    D = [['.'] * k for _ in range(k)]\n    a = (r - 1) % k\n    b = (c - 1) % k\n    for _ in range(k):\n        D[a][b] = 'X'\n        a += 1\n        b += 1\n        if a == k:\n            a = 0\n        if b == k:\n            b = 0\n    for i in range(0, n, k):\n        for j in range(0, n, k):\n            for p in range(k):\n                for q in range(k):\n                    Map[i + p][j + q] = D[p][q]\n    for data in Map:\n        print(''.join(data))", "a = int(input())\nfor numb in range(a):\n    (n, k, r, c) = list(map(int, input().split()))\n    lista = [['.'] * n for k in range(n)]\n    if k == 1:\n        for x in range(n):\n            print('X' * n)\n    else:\n        baser = r\n        basec = c\n        for s in range(n // k):\n            if r - n // k * s < k + r:\n                baser = r - n // k * (s + 1)\n                break\n        for s in range(n // k):\n            if c - n // k * s < k + c:\n                basec = c - n // k * (s + 1)\n                break\n        for x in range(n):\n            for y in range(n):\n                if baser - basec == 0 and x == y:\n                    lista[x][y] = 'X'\n                if (x - y) % k == (baser - basec) % k:\n                    lista[x][y] = 'X'\n        for x in lista:\n            print(''.join(x))", "t = int(input())\nfor _ in range(t):\n    (n, k, r, c) = map(int, input().split())\n    out = ''\n    for i in range(n):\n        for j in range(n):\n            out += 'X' if (i + j - r - c + 2) % k == 0 else '.'\n        out += '\\n'\n    print(out, end='')", "t = int(input())\nfor _ in range(t):\n    (n, k, r, c) = map(int, input().split())\n    a = [['.'] * n for _ in range(n)]\n    row = 0\n    c -= 1\n    r -= 1\n    sc = c % k\n    while row < n:\n        row += 1\n        for i in range(n):\n            if i % k == sc:\n                a[r][i] = 'X'\n        sc += 1\n        sc %= k\n        r += 1\n        r %= n\n    for i in range(n):\n        s = ''\n        for j in range(n):\n            s += a[i][j]\n        print(s)", "t = int(input())\nfor _ in range(t):\n    (n, k, r, c) = map(int, input().split())\n    out = ''\n    for i in range(n):\n        for j in range(n):\n            out += 'X' if (i + j - r - c + 2) % k == 0 else '.'\n        out += '\\n'\n    print(out, end='')", "for _ in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    out = ''\n    for i in range(n):\n        for j in range(n):\n            out += 'X' if (i + j - r - c + 2) % k == 0 else '.'\n        out += '\\n'\n    print(out, end='')", "for _ in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    r -= 1\n    c -= 1\n    r %= k\n    c %= k\n    res = [['.' for _ in range(k)] for _ in range(k)]\n    res[r][c] = 'X'\n    j = 0\n    for i in range(k):\n        if i == r:\n            continue\n        if j == c:\n            j += 1\n        res[i][j] = 'X'\n        j += 1\n    ANS = [['.' for _ in range(n)] for _ in range(n)]\n    for ii in range(n // k):\n        for i in range(k):\n            for jj in range(n // k):\n                for j in range(k):\n                    ANS[ii * k + i][jj * k + j] = res[i][j]\n    for i in range(n):\n        print(''.join(ANS[i]))", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    (n, k, r, c) = map(int, sys.stdin.readline().strip().split())\n    rem = (r + c - 2) % k\n    for i in range(n):\n        for j in range(n):\n            if (i + j) % k == rem:\n                sys.stdout.write('X')\n            else:\n                sys.stdout.write('.')\n        sys.stdout.write('\\n')", "t = int(input())\nwhile t > 0:\n    (n, k, r, c) = map(int, input().split())\n    row = ''\n    for i in range(n):\n        for j in range(n):\n            gapR = r - (i + 1)\n            gapC = j + gapR + 1\n            if abs(c - gapC) % k == 0:\n                row += 'X'\n            else:\n                row += '.'\n        if i == n - 1:\n            break\n        row += '\\n'\n    print(row)\n    t -= 1", "import sys\nsys.setrecursionlimit(10 ** 6)\nfrom collections import Counter, deque, defaultdict\n\ndef place_k(grid, n, k, r, c):\n    grid[r][c] = 'X'\n    c = (c + k) % n\n    while grid[r][c] != 'X':\n        grid[r][c] = 'X'\n        c = (c + k) % n\nip = sys.stdin.readline\nop = sys.stdout.write\nt = int(ip())\nres = []\nfor _ in range(t):\n    (n, k, r, c) = [int(x) for x in ip().split()]\n    grid = [['.' for _ in range(n)] for _ in range(n)]\n    place_k(grid, n, k, r - 1, c - 1)\n    c1 = (c + n - 1) % n\n    for i in range(r - 2, -1, -1):\n        c1 = (c1 + 1) % n\n        place_k(grid, n, k, i, c1)\n    c2 = (c + n - 2) % n\n    for i in range(r, n):\n        place_k(grid, n, k, i, c2)\n        c2 = (c2 + n - 1) % n\n    res.append(grid)\nfor grid in res:\n    for i in range(len(grid)):\n        for j in range(len(grid)):\n            op(grid[i][j])\n        op('\\n')", "t = int(input())\nwhile t > 0:\n    (n, k, r, c) = map(int, input().split())\n    row = ''\n    for i in range(n):\n        for j in range(n):\n            gapR = r - (i + 1)\n            gapC = j - gapR + 1\n            if abs(c - gapC) % k == 0:\n                row += 'X'\n            else:\n                row += '.'\n        if i == n - 1:\n            break\n        row += '\\n'\n    print(row)\n    t -= 1", "for _ in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    for i in range(n):\n        for j in range(n):\n            if (i - j) % k == (r - c) % k:\n                print(end='X')\n            else:\n                print(end='.')\n        print()", "t = int(input())\nfor i in range(t):\n    (n, k, r, c) = map(int, input().split())\n    c -= 1\n    r -= 1\n    mat = [list('.' * n) for _ in range(n)]\n    dis = k - 1\n    while r != 0:\n        if r > 0 and c > 0:\n            c -= 1\n        else:\n            c = dis\n        r -= 1\n    while c - k >= 0:\n        c -= k\n    for r in range(n):\n        old_c = c\n        for c in range(c, n, k):\n            mat[r][c] = 'X'\n        c = old_c + 1\n        if c > dis:\n            c -= k\n    for j in range(n):\n        print(*mat[j], sep='')", "for _ in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    for i in range(n):\n        for j in range(n):\n            if (i - j + k) % k == (r - c + k) % k:\n                print(end='X')\n            else:\n                print(end='.')\n        print()", "for _ in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    for i in range(n):\n        for j in range(n):\n            if (i - j + k) % k == (r - c + k) % k:\n                print(end='X')\n            else:\n                print(end='.')\n        print()", "def xxx(a, x, n):\n    (x, y) = (min(x, n), x - min(x, n))\n    while y <= n:\n        a[x][y] = 'X'\n        y += 1\n        x -= 1\n    return 0\nfor _ in range(int(input())):\n    (n, k, r, c) = map(int, input().split())\n    a = [['.'] * n for _ in range(n)]\n    for i in range((r + c - 2) % k, n * 2 - 1, k):\n        xxx(a, i, n - 1)\n    for i in range(n):\n        print(*a[i], sep='')", "import sys\n\ndef solve():\n    for _ in range(int(input())):\n        (n, k, a, b) = map(int, input().split())\n        li = [['.' for i in range(n)] for i in range(n)]\n        a -= 1\n        b -= 1\n        for i in range(n // k):\n            for i in range(n):\n                li[a][b] = 'X'\n                if a == n - 1:\n                    a = -1\n                if b == n - 1:\n                    b = -1\n                a += 1\n                b += 1\n            a -= k\n        for i in range(n):\n            print(*li[i], sep='')\n\ndef main():\n    solve()\nmain()", "import sys\nimport math\nfrom collections import Counter\nfrom collections import defaultdict\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef solve(n, k, r, c):\n    mat = []\n    for i in range(k):\n        t = []\n        for j in range(k):\n            t.append('.')\n        mat.append(t)\n    r = r % k\n    c = c % k\n    mat[r][c] = 'X'\n    tt = k\n    for i in range(tt):\n        mat[r][c] = 'X'\n        r = (r + 1) % k\n        c = (c + 1) % k\n    temp = mat.copy()\n    matrixx = []\n    for i in mat:\n        temp = []\n        for j in range(n // k):\n            temp += i\n        matrixx.append(temp)\n    return matrixx * (n // k)\nt = int(input())\nfor _ in range(t):\n    arr = get_ints()\n    ans = solve(arr[0], arr[1], arr[2], arr[3])\n    for i in ans:\n        for j in i:\n            print(j, end='')\n        print()", "for _ in range(int(input())):\n    inp = input().split(' ')\n    (n, k, r, c) = (int(inp[0]), int(inp[1]), int(inp[2]) - 1, int(inp[3]) - 1)\n    mat = [['.' for _ in range(n)] for _ in range(n)]\n    mat[r][c] = 'X'\n    x = y = c\n    t = r\n    while x >= 0 or y < n:\n        x -= k\n        y += k\n        if x >= 0:\n            mat[t][x] = 'X'\n        if y < n:\n            mat[t][y] = 'X'\n    (p, q) = (r, c)\n    while r > 0:\n        r -= 1\n        c -= 1\n        if c < 0:\n            c = n - 1\n        mat[r][c] = 'X'\n        x = y = c\n        while x >= 0 or y < n:\n            x -= k\n            y += k\n            if x >= 0:\n                mat[r][x] = 'X'\n            if y < n:\n                mat[r][y] = 'X'\n    while p < n - 1:\n        p += 1\n        q += 1\n        if q >= n:\n            q = 0\n        mat[p][q] = 'X'\n        x = y = q\n        while x >= 0 or y < n:\n            x -= k\n            y += k\n            if x >= 0:\n                mat[p][x] = 'X'\n            if y < n:\n                mat[p][y] = 'X'\n    for i in range(n):\n        print(*mat[i], sep='')", "for i in range(int(input())):\n    (n, k, r, c) = map(int, input().split(' '))\n    if r % k == 0:\n        block_row = r // k\n    else:\n        block_row = 1 + r // k\n    if c % k == 0:\n        block_col = c // k\n    else:\n        block_col = 1 + c // k\n    b1_r = (block_row - 1) * k + 1\n    b1_c = (block_col - 1) * k + 1\n    bx = r - b1_r\n    by = c - b1_c\n    row = ['.'] * k\n    block = []\n    for i in range(k):\n        block.append(row[:])\n    block[bx][by] = 'X'\n    for i in range(k):\n        block[bx][by] = 'X'\n        bx = (bx + 1) % k\n        by = (by + 1) % k\n    for i in range(n):\n        ro = i % k\n        for i in range(n // k):\n            for i in block[ro]:\n                print(i, end='')\n        print()"]