["import sys\ninput = sys.stdin.readline\nmod = 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    brr = [int(x) for x in input().split()]\n    iarr = [0] * (n + 1)\n    ibrr = [0] * (n + 1)\n    for i in range(n):\n        iarr[arr[i]] = i\n        ibrr[brr[i]] = i\n    ans = []\n    vst = [False] * (n + 1)\n    for i in range(n):\n        if vst[i]:\n            continue\n        if arr[i] == brr[i]:\n            vst[i] = True\n            continue\n        a = arr[i]\n        b = brr[i]\n        vst[i] = True\n        cnt = 1\n        while b != arr[i]:\n            vst[iarr[b]] = True\n            a = b\n            b = brr[iarr[b]]\n            cnt += 1\n        ans.append(cnt)\n    ans.sort(reverse=True)\n    (a, b) = (1, n)\n    rev = 0\n    for num in ans:\n        oa = a\n        ob = b\n        a += num // 2\n        b -= num // 2\n        rev += (ob - oa + (b - a + 2)) * (num // 2)\n    print(rev)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums_a = [int(x) for x in input().split()]\n    nums_b = [int(x) for x in input().split()]\n    map_a_b = {}\n    for (x, y) in zip(nums_a, nums_b):\n        if x != y:\n            map_a_b[x] = y\n    new_cnt = 0\n    for num in list(map_a_b.keys()):\n        if map_a_b[num] != num:\n            tmp = num\n            cnt = 0\n            while map_a_b[tmp] != tmp:\n                new_tmp = map_a_b[tmp]\n                map_a_b[tmp] = tmp\n                tmp = new_tmp\n                cnt += 1\n            new_cnt += cnt // 2\n    print(2 * (n - new_cnt) * new_cnt)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = {a[i]: int(s) for (i, s) in enumerate(input().split())}\n    vis = [0 for _ in range(n)]\n    k = 1\n    max = n - 1\n    ans = 0\n    for u in range(n):\n        if vis[u] != 0:\n            continue\n        cur = u\n        cnt = 0\n        while vis[cur] == 0:\n            vis[cur] = k\n            cur = p[cur + 1] - 1\n            cnt += 1\n            if cnt % 2 == 0:\n                ans += max\n                max -= 2\n    ans *= 2\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = {a[i]: int(s) for (i, s) in enumerate(input().split())}\n    vis = [0 for _ in range(n)]\n    k = 1\n    max = n - 1\n    ans = 0\n    for u in range(n):\n        if vis[u] != 0:\n            continue\n        cur = u\n        cnt = 0\n        while vis[cur] == 0:\n            vis[cur] = k\n            cur = p[cur + 1] - 1\n            cnt += 1\n            if cnt % 2 == 0:\n                ans += max\n                max -= 2\n    ans *= 2\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = {a[i]: int(s) for (i, s) in enumerate(input().split())}\n    vis = [0 for _ in range(n)]\n    k = 1\n    max = n - 1\n    ans = 0\n    for u in range(n):\n        if vis[u] != 0:\n            continue\n        cur = u\n        cnt = 0\n        while vis[cur] == 0:\n            vis[cur] = k\n            cur = p[cur + 1] - 1\n            cnt += 1\n            if cnt % 2 == 0:\n                ans += max\n                max -= 2\n    ans *= 2\n    print(ans)", "f = lambda : input().strip()\nt = int(f())\nfor _ in range(t):\n    n = int(f())\n    a = [int(x) for x in f().split(' ')]\n    g = {a[i]: int(x) for (i, x) in enumerate(f().split(' '))}\n    del a\n    u = [0 for _ in range(n)]\n    i = 0\n    k = 1\n    answer = 0\n    max_dist = n - 1\n    for i in range(n):\n        if u[i] != 0:\n            continue\n        j = i\n        cl = 0\n        while u[j] == 0:\n            u[j] = k\n            j = g[j + 1] - 1\n            cl += 1\n            if cl % 2 == 0:\n                answer += max_dist\n                max_dist -= 2\n        k += 1\n    answer *= 2\n    print(answer)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = {a[i]: int(s) for (i, s) in enumerate(input().split())}\n    vis = [0 for _ in range(n + 1)]\n    max = n - 1\n    ans = 0\n    for u in range(1, n + 1):\n        if vis[u] != 0:\n            continue\n        cur = u\n        cnt = 0\n        while vis[cur] == 0:\n            vis[cur] = 1\n            cur = p[cur]\n            cnt += 1\n            if cnt % 2 == 0:\n                ans += max\n                max -= 2\n    ans *= 2\n    print(ans)", "def dfs(node, adj, vis):\n    current = node\n    path_length = 0\n    while current != -1:\n        path_length += 1\n        vis[current] = True\n        next = -1\n        for i in adj[current]:\n            if not vis[i]:\n                next = i\n                break\n        current = next\n    return path_length\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    adj = [[] for _ in range(n + 1)]\n    for i in range(n):\n        if a[i] != b[i]:\n            u = a[i]\n            v = b[i]\n            adj[u].append(v)\n            adj[v].append(u)\n    l = []\n    vis = [False for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        if not vis[i]:\n            val = dfs(i, adj, vis)\n            l.append(val)\n    positives = sum([val // 2 for val in l])\n    negatives = sum([val // 2 for val in l])\n    if positives == 0:\n        print(0)\n        return\n    x = [i + 1 for i in range(n)]\n    pos = x[-positives:]\n    neg = x[:negatives]\n    pos_val = sum(pos)\n    neg_val = sum(neg)\n    print(2 * (pos_val - neg_val))\nTESTS = int(input())\nwhile TESTS:\n    solve()\n    TESTS -= 1", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    ca = list(map(int, input().split()))\n    cb = list(map(int, input().split()))\n    graph = [[] for _ in range(n)]\n    colorPos = [[] for _ in range(n)]\n    for i in range(n):\n        (pa, pb) = (ca[i], cb[i])\n        colorPos[pa - 1].append(i)\n        colorPos[pb - 1].append(i)\n    for i in range(n):\n        (p1, p2) = colorPos[i]\n        graph[p1].append(p2)\n        graph[p2].append(p1)\n    arr = []\n    vis = set()\n    for i in range(n):\n        if i not in vis:\n            stack = [i]\n            num1 = len(vis)\n            vis.add(i)\n            while stack:\n                curr = stack.pop()\n                for nei in graph[curr]:\n                    if nei not in vis:\n                        vis.add(nei)\n                        stack.append(nei)\n            num2 = len(vis)\n            arr.append(num2 - num1)\n    arr.sort(reverse=True)\n    ans = 0\n    (f, b) = (1, n)\n    for num in arr:\n        if num == 1:\n            continue\n        ans += (b - f) * (num - 1) - (num - 2) * (num - 1) // 2\n        ans += b - num // 2 + 1 - f if num % 2 == 0 else num // 2\n        f += num // 2\n        b -= num // 2\n    return ans\nfor _ in range(int(input())):\n    print(solve())"]