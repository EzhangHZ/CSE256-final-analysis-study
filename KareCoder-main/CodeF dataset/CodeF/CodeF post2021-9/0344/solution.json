["from itertools import accumulate\nfrom math import gcd\n\ndef solution():\n    n = int(input())\n    nums = [int(num) for num in input().split()]\n    a = list(accumulate(nums))\n    best = 1\n    for num in reversed(a[:n - 1]):\n        best = max(best, gcd(a[-1], num))\n    print(best)\n\ndef main():\n    t = int(input())\n    while t:\n        solution()\n        t -= 1\nmain()", "import math\n\ndef program():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    s = 0\n    total_sum = sum(a)\n    gcd_list = []\n    for i in range(0, n - 1):\n        s += a[i]\n        gcd_list.append(math.gcd(s, total_sum - s))\n    return max(gcd_list)\nt = int(input())\nanswers = []\nfor i in range(0, t):\n    answers.append(program())\nfor i in answers:\n    print(i)", "import math\nfor k in [*open(0)][2::2]:\n    (*a, k) = map(int, k.split())\n    k += sum(a)\n    m = r = 0\n    for x in a:\n        r += x\n        m = max(m, math.gcd(k, r))\n    print(m)", "import math\n\ndef main():\n    _i = int(input())\n    for _ in range(_i):\n        n = int(input().strip('\\r\\n'))\n        a = [int(x) for x in input().strip('\\r\\n').split()]\n        s1 = a[0]\n        s2 = sum(a) - a[0]\n        res = math.gcd(s1, s2)\n        for x in a[1:-1]:\n            s1 += x\n            s2 -= x\n            res = max(res, math.gcd(s1, s2))\n        print(res)\nmain()", "import sys\nimport threading\nfrom math import *\nfrom bisect import *\nfrom collections import *\nfrom heapq import *\nfrom functools import *\n\ndef gl():\n    return list(map(int, input().split()))\n\ndef gi():\n    return int(input())\n\ndef gc():\n    return input()\nmod = int(pow(10, 9)) + 7\n\ndef solution():\n    n = gi()\n    arr = gl()\n    left = 0\n    right = sum(arr)\n    ans = 1\n    for i in range(n - 1):\n        left += arr[i]\n        right -= arr[i]\n        ans = max(ans, gcd(left, right))\n    return print(ans)\n\ndef main():\n    t = gi()\n    for _ in range(t):\n        solution()\nthreading.stack_size(1 << 27)\nsys.setrecursionlimit(1 << 30)\nmain_thread = threading.Thread(target=main)\nmain_thread.start()\nmain_thread.join()", "import math\nT = int(input())\nfor t in range(0, T):\n    maxi = 1\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    summ = sum(a)\n    var = 0\n    for i in range(0, n - 1):\n        var = var + a[i]\n        x = math.gcd(var, summ - var)\n        if x > maxi:\n            maxi = x\n    print(maxi)", "from math import gcd\n\ndef f(n, L):\n    ans = -float('inf')\n    total = sum(L)\n    sum1 = 0\n    ans = 0\n    for i in range(len(L)):\n        sum1 += L[i]\n        total -= L[i]\n        if sum1 != 0 and total != 0:\n            t = gcd(total, sum1)\n            if t > ans:\n                ans = t\n    return ans\nt = int(input())\nfor i in range(t):\n    x = int(input())\n    L = [int(d) for d in input().split()]\n    print(f(x, L))", "import math\nfor s in [*open(0)][2::2]:\n    (*a, l) = map(int, s.split())\n    s = sum(a) + l\n    m = r = 0\n    for x in a:\n        r += x\n        m = max(m, math.gcd(s, r))\n    print(m)", "from math import *\nfor i in [*open(0)][2::2]:\n    i = list(map(int, i.split()))\n    s = sum(i)\n    g = 0\n    t = 0\n    for j in i[:-1]:\n        t += j\n        g = max(g, gcd(t, s - t))\n    print(g)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split()))\n    S = sum(L)\n    L1 = []\n    Sum = 0\n    for i in range(n - 1):\n        Sum += L[i]\n        L1.append(gcd(Sum, S - Sum))\n    print(max(L1))", "from math import gcd\n\ndef solve():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    s = sum(a)\n    pre = 0\n    ans = 0\n    for i in range(0, n - 1):\n        pre += a[i]\n        ans = max(ans, gcd(pre, s - pre))\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "from math import gcd\n\ndef main():\n    for __ in range(int(input())):\n        n = int(input())\n        l = list(map(int, input().split()))\n        s = sum(l)\n        (su, mx) = (0, -1)\n        for i in range(n - 1):\n            su += l[i]\n            mx = max(mx, gcd(su, s - su))\n        print(mx)\nmain()", "import math\nfor s in [*open(0)][2::2]:\n    (*a, l) = map(int, s.split())\n    s = sum(a) + l\n    m = r = 0\n    for x in a:\n        r += x\n        m = max(m, math.gcd(s, r))\n    print(m)", "import sys\nfrom math import *\nfrom collections import defaultdict, deque\ninput = sys.stdin.readline\nmod = 10 ** 9 + 7\nINF = 1061109567\nN = int(2 * 10 ** 5 + 5)\nLINF = 4557430888798830399\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    sum1 = sum(a)\n    sum2 = 0\n    ans = 1\n    for i in range(n - 1):\n        sum2 += a[i]\n        ans = max(ans, gcd(sum2, sum1 - sum2))\n    print(ans)\nT = int(input())\nfor t in range(T):\n    solve()", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    s = sum(a)\n    m = 1\n    c = 0\n    for i in range(n - 1):\n        c += a[i]\n        x = s - c\n        z = gcd(c, x)\n        if z > m:\n            m = z\n    print(m)", "from math import *\nfor i in [*open(0)][2::2]:\n    i = [*map(int, i.split())]\n    s = sum(i)\n    g = t = 0\n    for j in i[:-1]:\n        t += j\n        g = max(g, gcd(t, s - t))\n    print(g)", "from math import *\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    ans = 1\n    w = 0\n    for i in a[:n - 1]:\n        w += i\n        ans = max(ans, gcd(w, s - w))\n    print(ans)", "from math import gcd\n\ndef main():\n    t = int(input())\n    for i in range(0, t):\n        n = int(input())\n        a = [int(x) for x in input().split(' ')]\n        max_gcd = 1\n        left_sum = 0\n        right_sum = sum(a)\n        counter = 0\n        for el in a:\n            if counter == n - 1:\n                break\n            counter += 1\n            left_sum = left_sum + el\n            right_sum = right_sum - el\n            temp = gcd(left_sum, right_sum)\n            if temp > max_gcd:\n                max_gcd = temp\n        print(max_gcd)\nmain()", "def main():\n    import math\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        for i in range(1, n):\n            a[i] += a[i - 1]\n        ans = 1\n        for i in range(n - 1):\n            ans = max(ans, math.gcd(a[n - 1], a[i]))\n        print(ans)\nmain()", "import math\nt = int(input())\nfor _ in range(t):\n    input()\n    x = list(map(int, input().split()))\n    sm = sum(x)\n    cnt = 0\n    mx = 1\n    for a in x[:-1]:\n        cnt += a\n        mx = max(math.gcd(cnt, sm), mx)\n    print(mx)", "import math\nimport sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    sum = []\n    Total = 0\n    for i in arr:\n        Total += i\n        sum.append(Total)\n    ans = math.gcd(sum[0], Total - sum[0])\n    for i in range(1, n - 1):\n        if ans < math.gcd(sum[i], Total - sum[i]):\n            ans = math.gcd(sum[i], Total - sum[i])\n    print(ans)", "import math\nfor s in [*open(0)][2::2]:\n    (*a, s) = map(int, s.split())\n    s += sum(a)\n    m = r = 0\n    for x in a:\n        r += x\n        m = max(m, math.gcd(s, r))\n    print(m)", "from math import *\nfor i in [*open(0)][2::2]:\n    i = [*map(int, i.split())]\n    s = sum(i)\n    g = 0\n    t = 0\n    for j in i[:-1]:\n        t += j\n        g = max(g, gcd(t, s - t))\n    print(g)", "import math\nfor s in [*open(0)][2::2]:\n    (*a, s) = map(int, s.split())\n    s += sum(a)\n    m = r = 0\n    for x in a:\n        r += x\n        m = max(m, math.gcd(s, r))\n    print(m)", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s1 = sum(a)\n    s2 = 0\n    best = 0\n    for i in range(n - 1):\n        s2 += a[i]\n        best = max(best, gcd(s1 - s2, s2))\n    print(best)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    numbers = [int(num) for num in input().split(' ', n - 1)]\n    sum1 = sum(numbers)\n    sum2 = 0\n    ans = []\n    for j in range(n - 1):\n        sum2 += numbers[j]\n        ans.append(math.gcd(sum2, sum1 - sum2))\n    print(max(ans))", "from math import gcd\nt = int(input())\nfor p in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    sum = []\n    cnt = 0\n    for i in range(n):\n        cnt += a[i]\n        sum.append(cnt)\n    maxim = 0\n    for i in range(n - 1):\n        x = gcd(sum[-1] - sum[i], sum[i])\n        if x > maxim:\n            maxim = x\n    print(maxim)", "import math\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    s = sum(a)\n    m = r = 0\n    for x in a[:-1]:\n        r += x\n        m = max(m, math.gcd(s, r))\n    print(m)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    s = sum(nums)\n    res = 1\n    cur = 0\n    for i in range(n - 1):\n        cur += nums[i]\n        res = max(res, gcd(cur, s - cur))\n    print(res)", "import math\nt = int(input())\nA = []\nfor i in range(t):\n    n = int(input())\n    a = [int(p) for p in input().split()]\n    A.append(a)\nfor i in range(t):\n    arr = A[i]\n    tot = sum(arr)\n    ans = 0\n    kiri = 0\n    for j in range(len(arr) - 1):\n        kiri += arr[j]\n        ans = max(ans, math.gcd(kiri, tot - kiri))\n    print(ans)", "import math\nfor s in [*open(0)][2::2]:\n    (*a, s) = map(int, s.split())\n    s += sum(a)\n    m = r = 0\n    for x in a:\n        r += x\n        m = max(m, math.gcd(s, r))\n    print(m)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    sumo = sum(a)\n    temp = 0\n    ans = []\n    for i in range(n - 1):\n        temp += a[i]\n        ans.append(math.gcd(temp, sumo - temp))\n    print(max(ans))", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    sem = sum(arr)\n    k = 0\n    ans = 0\n    for i in range(n - 1):\n        k = k + arr[i]\n        ans = max(ans, math.gcd(k, sem - k))\n    print(ans)\n    t = t - 1", "import math\nimport sys\nt = int(input())\nfor i in range(t):\n    n = int(sys.stdin.readline())\n    lst = list(map(int, sys.stdin.readline().split()))\n    s = sum(lst)\n    cur = 0\n    ans = 1\n    for j in lst[:n - 1]:\n        cur += j\n        left = s - cur\n        ans = max(ans, math.gcd(cur, left))\n    print(ans)", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom collections import Counter\nfrom bisect import bisect_left as bl, bisect_right as br\nimport heapq\nfrom itertools import permutations\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nmod = 1000000007\ntest = int(input())\nfor _ in range(test):\n    n = inp()\n    a = seq()\n    add = 0\n    ans = 0\n    s = sum(a)\n    for i in range(len(a) - 1):\n        add += a[i]\n        s -= a[i]\n        ans = max(ans, gcd(s, add))\n    print(ans)", "import math\nfor s in [*open(0)][2::2]:\n    (*a, s) = map(int, s.split())\n    s += sum(a)\n    m = r = 0\n    for x in a:\n        r += x\n        m = max(m, math.gcd(s, r))\n    print(m)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    S = sum(a)\n    L = 0\n    best = 1\n    for x in a[:-1]:\n        S -= x\n        L += x\n        best = max(best, math.gcd(S, L))\n    print(best)", "import math\nimport sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nfor _ in range(inp()):\n    n = inp()\n    arr = inlt()\n    sumer = sum(arr)\n    ans = 0\n    ans2 = sumer\n    maxer = 1\n    for i in arr:\n        ans += i\n        ans2 -= i\n        if ans and ans2:\n            maxer = max(maxer, math.gcd(ans, ans2))\n    print(maxer)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    biggest_gcd = 0\n    l = a[0]\n    r = sum(a[1:])\n    p = 1\n    while r != 0:\n        gcd = math.gcd(l, r)\n        if gcd > biggest_gcd:\n            biggest_gcd = gcd\n        l += a[p]\n        r -= a[p]\n        p += 1\n    print(biggest_gcd)", "import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nt = inp()\nfor i in range(t):\n    n = inp()\n    l = li()\n    l1 = []\n    m = 0\n    s = 0\n    for i in l:\n        s += i\n        l1.append(s)\n    for i in range(len(l1) - 1):\n        m = max(gcd(l1[-1], l1[i]), m)\n    print(m)", "import math\nfor ii in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    fan = 0\n    j = 0\n    for i in range(n - 1):\n        j += a[i]\n        fan = max(fan, math.gcd(j, s - j))\n    print(fan)", "from math import gcd as g\nI = input\nfor i in range(int(I())):\n    n = int(I())\n    x = list(map(int, I().split()))\n    Sum = sum(x)\n    (a, b) = (1, 0)\n    for i in range(n - 1):\n        b += x[i]\n        Sum -= x[i]\n        a = max(a, g(Sum, b))\n    print(a)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    summ = sum(arr)\n    maxgcd = 0\n    temp = 0\n    for i in arr:\n        summ -= i\n        temp += i\n        if summ == 0:\n            break\n        maxgcd = max(maxgcd, gcd(temp, summ))\n    print(maxgcd)", "import math\nfor _ in range(int(input())):\n    a = int(input())\n    li = list(map(int, input().split()))\n    su = sum(li)\n    an = 1\n    ans = 0\n    for i in range(a - 1):\n        ans += li[i]\n        an = max(an, math.gcd(ans, su - ans))\n    print(an)", "from math import gcd\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    ans = 0\n    sum1 = 0\n    for i in range(n - 1):\n        sum1 += a[i]\n        ans = max(ans, gcd(sum1, s - sum1))\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "import sys, io, os, math\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\n(t,) = I()\nfor _ in range(t):\n    (n,) = I()\n    nums = I()\n    sumr = sum(nums)\n    suml = 0\n    res = 0\n    for x in nums[:-1]:\n        sumr -= x\n        suml += x\n        res = max(math.gcd(sumr, suml), res)\n    print(res)", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    s = sum(b)\n    pre = 0\n    after = s\n    res = 1\n    for i in range(n - 1):\n        pre += b[i]\n        after -= b[i]\n        res = max(res, gcd(pre, after))\n    print(res)", "import math\niter = int(input())\nfor _ in range(iter):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    s = sum(a)\n    pre = 0\n    ans = 1\n    for i in range(n - 1):\n        pre += a[i]\n        ans = max(ans, math.gcd(pre, s - pre))\n    print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = list(map(int, input().split()))\n    sm = sum(x)\n    mx_gcd = 1\n    p = 0\n    for i in x[0:n - 1]:\n        p += i\n        sm -= i\n        gcd = math.gcd(p, sm)\n        mx_gcd = max(mx_gcd, gcd)\n    print(mx_gcd)", "from math import gcd\nfor _ in range(int(input())):\n    a = int(input())\n    arr = list(map(int, input().split()))\n    x = sum(arr)\n    m = 0\n    n = x\n    ans = 1\n    for i in range(a - 1):\n        m += arr[i]\n        n -= arr[i]\n        ans = max(ans, gcd(m, n))\n    print(ans)", "from math import gcd\nt = int(input())\nfor p in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    sum = []\n    cnt = 0\n    for i in range(n):\n        cnt += a[i]\n        sum.append(cnt)\n    maxim = 0\n    for i in range(n - 1):\n        x = gcd(sum[-1] - sum[i], sum[i])\n        if x > maxim:\n            maxim = x\n    print(maxim)", "import sys\nfrom os import path\nimport math\ngcd = math.gcd\nFILE = False\nif FILE:\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef get_int():\n    return int(sys.stdin.readline())\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef find_gcd_partitions(array):\n    array_length = len(array)\n    left = 0\n    sum = 0\n    max_gcd = 1\n    for n in array:\n        sum += n\n    for n in array[:-1]:\n        left += n\n        sum -= n\n        b = gcd(left, sum)\n        if gcd(left, sum) > max_gcd:\n            max_gcd = b\n    return max_gcd\nnum_tests = get_int()\nfor i in range(num_tests):\n    length = get_int()\n    array = [int(x) for x in get_string().split(' ')]\n    num_max_gcd_partitions = find_gcd_partitions(array)\n    sys.stdout.write(str(num_max_gcd_partitions))\n    sys.stdout.write('\\n')", "import math\nfor _ in range(int(input())):\n    a = int(input())\n    b = list(map(int, input().split()))\n    sume = sum(b)\n    m = 0\n    ans = 1\n    for i in range(a - 1):\n        m += b[i]\n        ans = max(ans, math.gcd(sume, sume - m))\n    print(ans)", "from math import gcd\nn = int(input())\nfor j in range(n):\n    t = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    g = 0\n    s = sum(a)\n    for i in a[:-1]:\n        g += i\n        k = gcd(s - g, g)\n        if k > ans:\n            ans = k\n    print(ans)", "from sys import stdin, stdout\nfrom math import gcd\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    ml = []\n    s = 0\n    for i in range(n):\n        s += nums[i]\n        ml.append(s)\n    k = 1\n    for j in range(n - 1):\n        k = max(gcd(ml[-1], ml[j]), k)\n    print(k)", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    total = sum(a)\n    pre = [0]\n    for i in a:\n        pre.append(pre[-1] + i)\n    ans = 1\n    from math import gcd\n    for i in range(n - 1):\n        x = pre[i + 1]\n        y = total - x\n        ans = max(ans, gcd(x, y))\n    print(ans)", "from itertools import *\n\ndef check(arr):\n    n = len(arr)\n    if arr[0] == start and arr[1] == end:\n        for i in range(1, n - 1):\n            if arr[i] % (i + 1) != 0:\n                return 0\n        return 1\n    else:\n        return 0\n\ndef func(n):\n    lst = []\n    for i in range(1, n + 1):\n        lst.append(i)\n    perm = permutations(lst)\n    for i in perm:\n        if check(i) == 1:\n            print(i)\nfrom math import gcd\nt = int(input())\nmod = 1000000007\nfor i in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    total = sum(arr)\n    res = 1\n    curr = 0\n    for i in range(n - 1):\n        curr += arr[i]\n        last = total - curr\n        res = max(res, gcd(curr, last))\n    print(res)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    num = list(map(int, input().split()))\n    (sum1, sum2) = (sum(num), 0)\n    ans = 0\n    for i in range(n):\n        sum1 -= num[i]\n        sum2 += num[i]\n        if sum1 != 0 and sum2 != 0:\n            ans = max(ans, math.gcd(sum1, sum2))\n    print(ans)", "from math import gcd\n\ndef N():\n    return int(input())\n\ndef A():\n    return [int(x) for x in input().split()]\n\ndef S():\n    return input()\nfor _ in range(N()):\n    n = N()\n    if 'codeforces' == 28226329:\n        print('Tanmay')\n    a = A()\n    s = sum(a)\n    ans = gcd(a[-1], s - a[-1])\n    c = 0\n    for i in range(n - 1):\n        c += a[i]\n        ans = max(ans, gcd(c, s - c))\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    pref = [0]\n    for i in arr:\n        pref.append(pref[-1] + i)\n    del pref[0]\n    to = sum(arr)\n    idx = 0\n    ans = 0\n    for i in pref:\n        if i < to:\n            ans = max(ans, gcd(i, to - i))\n    print(ans)", "import math\nn = int(input())\nfor _ in range(n):\n    x = int(input())\n    l = [int(i) for i in input().split()]\n    s = sum(l)\n    p = 0\n    m = 0\n    for i in range(x - 1):\n        p += l[i]\n        s -= l[i]\n        m = max(m, math.gcd(p, s))\n    print(m)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    l = 0\n    ans = -100000.0\n    for i in range(n - 1):\n        s -= a[i]\n        l += a[i]\n        ans = max(ans, gcd(s, l))\n    print(ans)", "import math\n\ndef solve():\n    n = int(input())\n    ai = list(map(int, input().split()))\n    r = sum(ai)\n    l = 0\n    ans = 0\n    for i in range(n - 1):\n        l += ai[i]\n        r -= ai[i]\n        ans = max(ans, math.gcd(l, r))\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    pre = 0\n    ans = 1\n    for i in range(n - 1):\n        pre += a[i]\n        ans = max(ans, math.gcd(pre, s - pre))\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = 1\n    for i in range(1, n):\n        a[i] += a[i - 1]\n    p = a[-1]\n    for x in a[:n - 1]:\n        g = max(gcd(x, p), g)\n    print(g)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = input().split()\n    for v in range(len(a)):\n        a[v] = int(a[v])\n    max = 0\n    a.append(0)\n    b = a[0]\n    c = sum(a) - b\n    for j in range(1, n):\n        if math.gcd(b, c) > max:\n            max = math.gcd(b, c)\n        b += a[j]\n        c -= a[j]\n    print(max)", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    tab = list(map(int, input().split()))\n    s1 = sum(tab)\n    s2 = 0\n    m = 1\n    for i in range(n - 1):\n        s2 += tab[i]\n        s1 -= tab[i]\n        m = max(m, math.gcd(s1, s2))\n    print(m)\n    t -= 1", "import math\n\ndef solve():\n    n = int(input())\n    v = list(map(int, input().split()))\n    pre = [0] * n\n    rev = [0] * n\n    pre[0] = v[0]\n    for i in range(1, n):\n        pre[i] = pre[i - 1] + v[i]\n    rev[n - 1] = v[n - 1]\n    for i in range(n - 2, -1, -1):\n        rev[i] = rev[i + 1] + v[i]\n    ans = 0\n    for i in range(n - 1):\n        ans = max(ans, math.gcd(pre[i], rev[i + 1]))\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "from math import gcd\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    for i in range(n):\n        s += a[i]\n    ans = 0\n    pref = 0\n    for i in range(n - 1):\n        pref += a[i]\n        ans = max(ans, gcd(pref, s - pref))\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    s = sum(a)\n    ans = z = 0\n    for i in a[:-1]:\n        z += i\n        ans = max(ans, gcd(z, s - z))\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split()))\n    S = sum(L)\n    L1 = []\n    Sum = 0\n    for i in range(n - 1):\n        Sum += L[i]\n        L1.append(gcd(Sum, S - Sum))\n    print(max(L1))", "from math import gcd\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    S = sum(a)\n    L = 0\n    best = 1\n    for x in a[:-1]:\n        S -= x\n        L += x\n        best = max(best, gcd(S, L))\n    print(best)", "import math\nT = int(input(''))\nfor i in range(T):\n    n = int(input())\n    str1 = input()\n    l1 = [int(c) for c in str1.split()]\n    leftSum = 0\n    rightSum = sum(l1)\n    maxGCD = 1\n    for j in range(len(l1) - 1):\n        leftSum += l1[j]\n        rightSum -= l1[j]\n        newGCD = math.gcd(leftSum, rightSum)\n        if newGCD > maxGCD:\n            maxGCD = newGCD\n    print(maxGCD)", "import sys\nif sys.platform == 'ios':\n    import clipboard\n    a = clipboard.get()\n    a = a.split('\\n')\n    text = '\\n'.join(a)\n    with open('input_file.txt', 'w') as f:\n        f.write(text)\n    sys.stdin = open('input_file.txt')\nsys.setrecursionlimit(4100000)\nstdin = sys.stdin\nni = lambda : int(ns())\nna = lambda : list(map(int, stdin.readline().split()))\nns = lambda : stdin.readline().strip()\nfrom math import gcd\nt = int(input())\nfor _ in range(t):\n    N = ni()\n    A = list(map(int, input().split()))\n    for i in range(1, N):\n        A[i] += A[i - 1]\n    ans = 0\n    for i in range(N - 1):\n        x = gcd(A[i], A[-1] - A[i])\n        ans = max(x, ans)\n    print(ans)", "from math import gcd\ntest_case = int(input())\nfor test in range(test_case):\n    n = int(input())\n    A = list(map(int, input().split()))\n    S = sum(A)\n    P = [0] * n\n    P[0] = A[0]\n    for i in range(1, n):\n        P[i] = P[i - 1] + A[i]\n    ans = 0\n    for i in range(n - 1):\n        d = gcd(P[i], S)\n        ans = max(ans, d)\n    print(ans)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    ans = []\n    pre = [0] * (n + 1)\n    for j in range(1, n + 1):\n        pre[j] = pre[j - 1] + a[j - 1]\n    pre.remove(0)\n    pre.pop(n - 1)\n    b = list(map(lambda x: s - x, pre))\n    for i in range(n - 1):\n        ans.append(math.gcd(pre[i], b[i]))\n    print(max(ans))", "from math import gcd\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    p = [l[0]]\n    for i in range(1, len(l)):\n        p.append(p[i - 1] + l[i])\n    ans = -1\n    for i in range(len(p) - 1):\n        ans = max(ans, gcd(p[i], p[n - 1] - p[i]))\n    print(ans)", "import math\nfor __ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    acc = 0\n    ans = 0\n    for i in range(n - 1):\n        acc += a[i]\n        ans = max(ans, math.gcd(acc, s - acc))\n    print(ans)", "import math\n\ndef ans(arr):\n    prf_sum = [arr[0]]\n    for i in range(1, len(arr)):\n        prf_sum.append(prf_sum[-1] + arr[i])\n    max_found = 0\n    for i in range(0, len(arr) - 1):\n        tmp = math.gcd(prf_sum[i], prf_sum[-1] - prf_sum[i])\n        max_found = max(max_found, tmp)\n    return max_found\ntest_cases = int(input())\nwhile test_cases != 0:\n    d = input()\n    d2 = list(map(int, input().split()))\n    print(ans(d2))\n    test_cases -= 1", "from typing import List\nfrom bisect import *\nfrom collections import *\nfrom functools import *\nfrom itertools import *\nfrom math import *\nfrom queue import PriorityQueue\nINF = 2 ** 64 - 1\nMOD = 10 ** 9 + 7\nmi = lambda : map(int, input().split())\nli = lambda : list(mi())\n\ndef isPrime(n):\n    if n == 1:\n        return False\n    m = int(sqrt(n))\n    for i in range(2, m + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef main(n, nums):\n    s = sum(nums)\n    ans = 1\n    pre = 0\n    for i in range(0, n - 1):\n        pre += nums[i]\n        ans = max(ans, gcd(pre, s - pre))\n    print(ans)\n    return\ncaseNum = int(input())\nfor i in range(0, caseNum):\n    n = int(input())\n    nums = li()\n    main(n, nums)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    sum = 0\n    for j in range(n):\n        sum += a[j]\n    q = 0\n    w = 1\n    for k in range(n - 1):\n        sum -= a[k]\n        q += a[k]\n        w = max(w, math.gcd(sum, q))\n    print(w)", "from math import gcd\nfrom functools import reduce\n\ndef lstStrRd():\n    return list(input())\n\ndef intRd():\n    return int(input())\n\ndef lstRd():\n    return list(map(int, input().split()))\nfor _ in range(intRd()):\n    n = intRd()\n    l = lstRd()\n    z = sum(l)\n    c = 0\n    ll = [1]\n    for i in range(n - 1):\n        c += l[i]\n        ll.append(gcd(c, z - c))\n    print(max(ll))", "import math\nt = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    list1 = [int(num) for num in input().split()]\n    temp = sum(list1)\n    sum1 = temp\n    max1 = 1\n    div = 0\n    for i in range(n - 1, 0, -1):\n        div += list1[i]\n        sum1 = sum1 - list1[i]\n        if math.gcd(sum1, div) > max1:\n            max1 = math.gcd(sum1, div)\n    print(max1)", "import math\nt = int(input())\nn_arr = []\na_arr = []\nfor num in range(t):\n    n_arr.append(int(input()))\n    a_arr.append([int(val) for val in input().split()])\nfor arr in a_arr:\n    left = 0\n    right = sum(arr)\n    gmax = 0\n    for i in range(len(arr) - 1):\n        left += arr[i]\n        right -= arr[i]\n        g = math.gcd(left, right)\n        gmax = max(g, gmax)\n    print(gmax)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = sum(l)\n    r = 0\n    x = 0\n    for i in range(n - 1):\n        r = r + l[i]\n        x = max(gcd(s - r, r), x)\n    print(x)", "import math\nfor q in range(int(input())):\n    a = int(input())\n    l = list(map(int, input().split()))[:a]\n    new = 0\n    sum_l = sum(l)\n    max_l = 0\n    for i in range(a):\n        sum_l -= l[i]\n        new += l[i]\n        if sum_l != 0:\n            max_l = max(max_l, math.gcd(sum_l, new))\n    print(max_l)", "import math\nt = int(input())\nfor i in range(t):\n    foo = 1\n    n = int(input())\n    arr = [n]\n    bar = str(input())\n    arr = bar.split()\n    for j in range(n):\n        arr[j] = int(arr[j])\n    cum_sum = [arr[0]]\n    for j in range(1, n):\n        cum_sum.append(cum_sum[j - 1] + arr[j])\n    sum = cum_sum[-1]\n    for j in range(n - 1):\n        a = math.gcd(sum, cum_sum[j])\n        if a != 1:\n            foo = max(a, foo)\n    print(foo)", "import sys\nimport math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    r = 0\n    l = 0\n    ans = 0\n    for i in range(n):\n        r += a[i]\n    for i in range(n - 1):\n        l += a[i]\n        r -= a[i]\n        ans = max(ans, math.gcd(l, r))\n    print(ans)", "import math as m\nt = eval(input())\nfor test in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    for i in range(n):\n        s += a[i]\n    ans = 0\n    pref = 0\n    for i in range(n - 1):\n        pref += a[i]\n        ans = max(ans, m.gcd(pref, s - pref))\n    print(ans)", "import math\nt = int(input())\nfor k in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    x = sum(c)\n    y = 0\n    ans = 1\n    for i in c[:-1]:\n        x -= i\n        y += i\n        ans = max(ans, math.gcd(x, y))\n    print(ans)", "import math\nt = int(input())\noutput = []\nfor i in range(2 * t):\n    lst = list(map(int, input().split()))\n    if i & 1 == 0:\n        n = lst[0]\n    else:\n        sum_lst = [lst[0]]\n        for j in range(1, n):\n            sum_lst.append(sum_lst[j - 1] + lst[j])\n        gcdList = []\n        for j in range(n - 1):\n            gcdList.append(math.gcd(sum_lst[n - 1], sum_lst[j]))\n        maxi = gcdList[0]\n        j = 0\n        while j < n - 1:\n            if gcdList[j] > maxi:\n                maxi = gcdList[j]\n                j += 1\n            else:\n                j += 1\n        output.append(maxi)\nfor i in range(t):\n    print(output[i])", "from math import gcd\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    for i in range(n):\n        s += a[i]\n    ans = 0\n    pref = 0\n    for i in range(n - 1):\n        pref += a[i]\n        ans = max(ans, gcd(pref, s - pref))\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    list1 = []\n    x = arr[0]\n    list1 = [x]\n    max_gcd = 0\n    s = 0\n    for i in range(1, n):\n        list1.append(arr[i] + list1[i - 1])\n    s = list1[n - 1]\n    for i in range(0, n - 1):\n        max_gcd = max(math.gcd(list1[i], s - list1[i]), max_gcd)\n    print(max_gcd)", "import math\nMOD = 1000000007\n\ndef solve():\n    n = int(input())\n    v = list(map(int, input().split()))\n    pre = [0] * n\n    rev = [0] * n\n    pre[0] = v[0]\n    for i in range(1, n):\n        pre[i] = pre[i - 1] + v[i]\n    rev[n - 1] = v[n - 1]\n    for i in range(n - 2, -1, -1):\n        rev[i] = rev[i + 1] + v[i]\n    ans = 0\n    for i in range(n - 1):\n        ans = max(ans, math.gcd(pre[i], rev[i + 1]))\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (a, b) = (0, sum(arr))\n    ans = 0\n    for i in range(n - 1):\n        a += arr[i]\n        b -= arr[i]\n        ans = max(ans, gcd(a, b))\n    print(ans)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (pfs, sfs) = (sum(l[:1]), sum(l[1:]))\n    ans = math.gcd(pfs, sfs)\n    for i in range(1, n - 1):\n        pfs = pfs + l[i]\n        sfs = sfs - l[i]\n        ans = max(ans, math.gcd(pfs, sfs))\n    print(ans)", "import math\nn = int(input())\nfor i in range(n):\n    length = int(input())\n    arr = list(map(int, input().split()))\n    lol = []\n    esum = 0\n    for p in range(length):\n        esum += arr[p]\n        lol.append(esum)\n    maxsum = lol[length - 1]\n    ans = 1\n    for j in range(length - 1):\n        ans = max(ans, math.gcd(lol[j], maxsum - lol[j]))\n    print(ans)", "from math import gcd\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    for i in range(n):\n        s += a[i]\n    ans = 0\n    pref = 0\n    for i in range(n - 1):\n        pref += a[i]\n        ans = max(ans, gcd(pref, s - pref))\n    print(ans)", "import math\nimport copy\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    z = list(map(int, input().split()))\n    b = z.copy()\n    d = z.copy()\n    for i in range(1, n):\n        b[i] = b[i - 1] + b[i]\n    for i in range(n - 2, -1, -1):\n        d[i] = d[i + 1] + d[i]\n    ans = [1]\n    for i in range(1, n):\n        ans.append(math.gcd(b[i - 1], d[i]))\n    print(max(ans))"]