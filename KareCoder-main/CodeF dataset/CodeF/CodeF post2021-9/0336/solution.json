["for s in [*open(0)][2::2]:\n    print(len((a := s.split())))\n    i = 0\n    for x in map(int, a):\n        i += 1\n        print(i, 2 ** len(f'{x:b}') - x)", "for s in [*open(0)][2::2]:\n    print(len((a := s.split())))\n    i = 0\n    for x in map(int, a):\n        i += 1\n        print(i, 2 ** len(f'{x:b}') - x)", "for s in [*open(0)][2::2]:\n    print(len((a := s.split())))\n    i = 0\n    for x in map(int, a):\n        i += 1\n        print(i, 2 ** len(f'{x:b}') - x)", "for k in [*open(0)][2::2]:\n    print(len((a := k.split())))\n    i = 0\n    for x in map(int, a):\n        i += 1\n        print(i, 2 ** len(f'{x:b}') - x)", "for s in [*open(0)][2::2]:\n    print(len((a := s.split())))\n    i = 0\n    for x in map(int, a):\n        i += 1\n        print(i, 2 ** len(f'{x:b}') - x)", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s.strip())\n\ndef invr():\n    return map(int, input().split())\nfor _ in range(inp()):\n    n = inp()\n    arr = inlt()\n    print(n)\n    for i in range(n):\n        val = int(math.log2(arr[i]))\n        print(i + 1, 2 ** (val + 1) - arr[i])", "import math\nt = int(input())\nfor j in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(n)\n    for i in range(n):\n        power = int(math.log(arr[i], 2))\n        print(i + 1, 2 ** (power + 1) - arr[i])", "import math\nt = int(input())\nfor j in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(n)\n    for i in range(n):\n        power = int(math.log(arr[i], 2))\n        print(i + 1, 2 ** (power + 1) - arr[i])", "import math as mt\nMAXN = 10001\n\ndef sieve():\n    for i in range(4, MAXN, 2):\n        spf[i] = 2\n    for i in range(3, mt.ceil(mt.sqrt(MAXN))):\n        if spf[i] == i:\n            for j in range(i * i, MAXN, i):\n                if spf[j] == j:\n                    spf[j] = i\n\ndef getFactorization(x):\n    d = {}\n    while x != 1:\n        if spf[x] in d:\n            d[spf[x]] += 1\n        else:\n            d[spf[x]] = 1\n        x = x // spf[x]\n    return d\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    print(n)\n    for i in range(n):\n        x = int(mt.log(a[i], 2)) + 1\n        print(i + 1, pow(2, x) - a[i])", "t = int(input())\nimport math\nfor z in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(n)\n    for i in range(n):\n        s = int(math.log(a[i]) / math.log(2)) + 1\n        print(i + 1, 2 ** s - a[i])", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    ans = []\n    for (i, val) in enumerate(a):\n        p = int(math.log(val, 2)) + 1\n        d = pow(2, p) - val\n        ans.append((i + 1, d))\n    print(len(ans))\n    for (i, val) in enumerate(ans):\n        print(val[0], val[1])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    steps = []\n    for i in range(n):\n        l = len('{:b}'.format(arr[i]))\n        old = arr[i]\n        if 1 << l >= arr[i]:\n            arr[i] = 1 << l\n        else:\n            arr[i] = 1 << l + 1\n        if arr[i] > old:\n            steps.append((i + 1, arr[i] - old))\n    print(len(steps))\n    for (i, x) in steps:\n        print(i, x)", "import sys\nfrom os import path\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef solve(n, a):\n\n    def f(x):\n        p = 2\n        while p <= x:\n            p *= 2\n        return p\n    print(n)\n    for i in range(n):\n        d = f(a[i]) - a[i]\n        print(i + 1, d, sep=' ')\n        a[i] += d\n\ndef main():\n    testcases = int(input())\n    for _ in range(testcases):\n        n = int(input())\n        array = list(map(int, input().split()))\n        solve(n, array)\nif path.exists('Tests'):\n    sys.stdin = open('Tests/input_1.txt', 'r')\n    sys.stdout = open('Tests/output_1a.txt', 'w')\nmain()", "import math\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split())) + [10 ** 10]\n    s = sum(a)\n    print(n)\n    for i in range(n):\n        k = int(math.log(a[i], 2))\n        print(i + 1, (1 << k + 1) - a[i])\nt = int(input())\nfor i in range(t):\n    solve()", "from math import log2\ntest_case = int(input())\nfor test in range(test_case):\n    n = int(input())\n    List = list(map(int, input().split()))\n    m = min(List)\n    M = []\n    for i in range(n):\n        c = int(log2(List[i])) + 1\n        t = 2 ** c\n        M.append([i + 1, t - List[i]])\n    print(len(M))\n    for i in M:\n        print(i[0], i[1])", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    cnt = 1\n    print(n)\n    for i in arr:\n        print(cnt, end=' ')\n        x = 1\n        while x <= i:\n            x *= 2\n        print(x - i)\n        cnt += 1\n    t -= 1", "import sys\n\ndef fn(a, l):\n    print(l)\n    for index in range(l):\n        val = bin(a[index])\n        calc = (int(bin(2 ** (len(val) - 2) - 1), 2) ^ int(val, 2)) + 1\n        print(index + 1, calc)\ninput = sys.stdin.readlines()\nfor i in range(int(input[0].strip('\\n'))):\n    new_list = [int(x) for x in input[2 * i + 2].strip('\\n').split(' ')]\n    len_list = int(input[2 * i + 1].strip('\\n'))\n    fn(new_list, len_list)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split()))\n    Max = L[0]\n    L1 = []\n    count = n\n    for i in range(0, n):\n        rec = 1\n        while rec <= L[i]:\n            rec *= 2\n        L1.append((i + 1, rec - L[i]))\n    print(count)\n    for j in L1:\n        print(f'{j[0]} {j[1]}')"]