["def decali(tab: list, d):\n    res = []\n    for i in tab:\n        res.append(i + d)\n    return res\nt = int(input())\nl = []\ncakes = []\ndispensers = []\nfor i in range(t):\n    ch = input()\n    a = [int(x) for x in ch.split()]\n    l.append(a)\n    ch = input()\n    a = [int(x) for x in ch.split()]\n    cakes.append(a)\n    ch = input()\n    a = [int(x) for x in ch.split()]\n    dispensers.append(a)\nfor i in range(t):\n    n = l[i][0]\n    w = l[i][1]\n    h = l[i][2]\n    cake = cakes[i]\n    disp = dispensers[i]\n    poss = h <= w\n    j = 0\n    while j < n and poss:\n        if cake[j] - w <= disp[j] - h and cake[j] + w >= disp[j] + h:\n            j += 1\n        else:\n            if cake[j] + w < disp[j] + h:\n                cal = disp[j] + h - cake[j] - w\n            else:\n                cal = disp[j] - h - (cake[j] - w)\n            k = 0\n            while k < j and poss:\n                if cake[k] - w + cal > disp[k] - h or cake[k] + w + cal < disp[k] + h:\n                    poss = False\n                else:\n                    k += 1\n            if poss:\n                cake = decali(cake, cal)\n            j += 1\n    if poss:\n        print('YES')\n    else:\n        print('NO')", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, w, h) = map(int, inp().split())\n    a = list(map(int, inp().split()))\n    b = list(map(int, inp().split()))\n    r = int(10 ** 9 + 7)\n    l = -r\n    for i in range(n):\n        l = max(l, a[i] - w - b[i] + h)\n        r = min(r, a[i] + w - b[i] - h)\n    if l <= r:\n        print('YES')\n    else:\n        print('NO')\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "T = int(input())\nfor t in range(T):\n    (n, w, h) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    b = sorted(list(map(int, input().split())))\n    c = [a[i] - b[i] for i in range(n)]\n    if abs(max(c) - min(c)) <= 2 * (w - h):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    (n, w, h) = map(int, input().split())\n    l1 = [int(i) for i in input().split()]\n    l2 = [int(i) for i in input().split()]\n    l3 = []\n    for i in range(n):\n        l3.append(l1[i] - l2[i])\n    if max(l3) - min(l3) > 2 * (w - h):\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (n, w, h) = map(int, input().split())\n    cakes = list(map(int, input().split()))\n    dispenser = list(map(int, input().split()))\n    status = True\n    (a, b) = (float('-inf'), float('inf'))\n    for i in range(n):\n        a = max(a, cakes[i] - w + h - dispenser[i])\n        b = min(b, cakes[i] - dispenser[i] + w - h)\n        if a > b:\n            print('NO')\n            status = False\n            break\n    if status:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    (n, w, h) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    gap = b[0] - h - (a[0] - w)\n    flag = True\n    new_gap = 0\n    for i in range(n):\n        a[i] += gap\n        if a[i] + w < b[i] + h:\n            flag = False\n            break\n        new_gap = max(new_gap, a[i] - w - (b[i] - h))\n    if not flag:\n        print('NO')\n        continue\n    if new_gap == 0:\n        print('YES')\n        continue\n    for i in range(n):\n        a[i] -= new_gap\n        if a[i] + w < b[i] + h:\n            flag = False\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "def main():\n    t = int(input().strip())\n    for _ in range(t):\n        (n, w, h) = map(int, input().strip().split())\n        a = list(map(int, input().strip().split()))\n        b = list(map(int, input().strip().split()))\n        a = [i - a[0] for i in a]\n        b = [i - b[0] for i in b]\n        shift = max((x - y for (x, y) in zip(a, b)))\n        b = [i + shift for i in b]\n        allow = 2 * (w - h)\n        if all((y <= x + allow for (x, y) in zip(a, b))):\n            print('YES')\n        else:\n            print('NO')\nmain()", "t = int(input())\nfor j in range(t):\n    temp = input().split()\n    (n, w, h) = (int(temp[0]), int(temp[1]), int(temp[2]))\n    an = [int(x) for x in input().split()]\n    bn = [int(x) for x in input().split()]\n    delta = an[0] - bn[0]\n    kr = abs(-w + h)\n    pos = 2 * kr\n    for i in range(pos + 1):\n        flag = True\n        ancop = an.copy()\n        for k in range(len(ancop)):\n            ancop[k] = ancop[k] - delta - kr + i\n            if abs(ancop[k] - bn[k]) > kr:\n                flag = False\n                break\n        if flag:\n            print('YES')\n            break\n    else:\n        print('NO')", "T = int(input())\nfor _ in range(T):\n    (N, W, H) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    (l, r) = ([], [])\n    for i in range(N):\n        l.append(A[i] - W - (B[i] - H))\n        r.append(A[i] + W - (B[i] + H))\n    (L, R) = (l[0], r[0])\n    for i in range(N):\n        L = max(L, l[i])\n        R = min(R, r[i])\n    print('YES' if L <= R else 'NO')", "for t in range(int(input())):\n    (n, w, h) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    mov = []\n    for i in range(n):\n        mov.append([b[i] + h - (a[i] + w), b[i] - h - (a[i] - w)])\n    ans = list(mov[0])\n    for i in mov:\n        ans[0] = max(i[0], ans[0])\n        ans[1] = min(i[1], ans[1])\n    if ans[0] <= ans[1]:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, w, h) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(1, n):\n        a[i] -= a[0]\n        b[i] -= b[0]\n    a[0] = 0\n    b[0] = 0\n    k = h - w\n    FLAG = False\n    while b[0] + k + h <= a[0] + w:\n        flag = True\n        for i in range(n):\n            if a[i] - w <= b[i] + k - h and a[i] + w >= b[i] + k + h:\n                continue\n            flag = False\n            break\n        if flag:\n            FLAG = True\n            break\n        k += 1\n    if FLAG:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, w, h) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    cake_left = a[0] - w\n    cake_right = a[0] + w\n    choc_left = b[0] - h\n    choc_right = b[0] + h\n    move_left_min = max(0, cake_left - choc_left)\n    move_left_max = max(0, cake_right - choc_right)\n    move_right_min = max(0, -cake_right + choc_right)\n    move_right_max = max(0, -cake_left + choc_left)\n    p = 'NO'\n\n    def check(pos, a, b):\n        k = False\n        for i in range(n):\n            cake_left = a[i] - w + pos\n            cake_right = a[i] + w + pos\n            choc_left = b[i] - h\n            choc_right = b[i] + h\n            if not (cake_left <= choc_left and cake_right >= choc_right):\n                k = True\n                break\n        return k\n    pos = move_left_min\n    while pos <= move_left_max:\n        if check(-pos, a, b):\n            pos = pos + 1\n        else:\n            pos = move_left_max + 1\n            p = 'YES'\n    if p == 'YES':\n        print(p)\n    else:\n        pos = move_right_min\n        while pos <= move_right_max:\n            if check(pos, a, b):\n                pos = pos + 1\n            else:\n                pos = move_right_max + 1\n                p = 'YES'\n        print(p)", "t = int(input())\nfor _ in range(0, t):\n    inputs = [int(num) for num in input().split()]\n    n = inputs[0]\n    w = inputs[1]\n    h = inputs[2]\n    list2 = [int(num) for num in input().split()]\n    list1 = [int(num) for num in input().split()]\n    list3 = []\n    for i in range(0, n):\n        ds = list1[i] - h\n        de = list1[i] + h\n        mid1 = de - w\n        mid2 = ds + w\n        list3.append((mid1, mid2))\n    delta1 = list3[0][0] - list2[0]\n    delta2 = list3[0][1] - list2[0]\n    delta3 = (list3[0][0] + list3[0][1]) // 2 - list2[0]\n    flag = 0\n    diff = list3[0][1] - list3[0][0]\n    flag1 = 0\n    for i in range(0, diff + 1):\n        delta = list3[0][0] + i - list2[0]\n        flag = 0\n        for i in range(0, n):\n            cmid = list2[i] + delta\n            if cmid >= list3[i][0] and cmid <= list3[i][1]:\n                pass\n            else:\n                flag = 1\n                break\n        if flag == 0:\n            print('YES')\n            flag1 = 1\n            break\n    if flag1 == 0:\n        print('NO')", "T = int(input())\nfor t in range(T):\n    (N, W, H) = [int(x) for x in input().split()]\n    cakes = [(int(x) - W, int(x) + W) for x in input().split()]\n    cakes = [(l - cakes[0][0], r - cakes[0][0]) for (l, r) in cakes]\n    disps = [(int(x) - H, int(x) + H) for x in input().split()]\n    disps = [(l - disps[0][0], r - disps[0][0]) for (l, r) in disps]\n    diff = cakes[0][1] - 2 * H - cakes[0][0]\n    if diff < 0:\n        print('NO')\n        break\n    for d in range(diff + 1):\n        for n in range(N):\n            (cl, cr) = cakes[n]\n            (dl, dr) = disps[n]\n            dl += d\n            dr += d\n            if not (dl >= cl and dr <= cr):\n                break\n        else:\n            print('YES')\n            break\n    else:\n        print('NO')", "def solve(a, b, w, h):\n    r1 = [0] * len(a)\n    r2 = [0] * len(a)\n    for ni in range(n):\n        r1[ni] = b[ni] - h - (a[ni] - w)\n        r2[ni] = a[ni] + w - (b[ni] + h)\n    minr1 = min(r1)\n    minr2 = min(r2)\n    if minr1 + minr2 >= 0:\n        return 'YES'\n    return 'NO'\nt = int(input())\nans = []\nfor ti in range(t):\n    (n, w, h) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    ans.append(solve(a, b, w, h))\nfor a in ans:\n    print(a)", "t = int(input())\nfor _ in range(t):\n    (n, w, h) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l1 = []\n    l2 = []\n    for element in a:\n        l1.append(element - w)\n        l1.append(element + w)\n    sh = l1[0] - (b[0] - h)\n    for element in b:\n        l2.append(sh + element - h)\n        l2.append(sh + element + h)\n    c = []\n    for i in range(2 * n):\n        c.append(l1[i] - l2[i])\n    (max1, min1) = (0, 1000000000)\n    (max2, min2) = (0, 1000000000)\n    for i in range(len(c)):\n        if i % 2 == 0:\n            if c[i] > max1:\n                max1 = c[i]\n            if c[i] < min1:\n                min1 = c[i]\n        if i % 2 == 1:\n            if c[i] > max2:\n                max2 = c[i]\n            if c[i] < min2:\n                min2 = c[i]\n    out = 'YES'\n    if max1 > 0:\n        if min2 - max1 < 0:\n            out = 'NO'\n    if min2 < 0:\n        if max1 - min2 > 0:\n            out = 'NO'\n    print(out)", "for _ in range(int(input())):\n    (n, w, h) = map(int, input().split(' '))\n    a = [int(no) for no in input().split()]\n    b = [int(no) for no in input().split()]\n    c = []\n    d = []\n    e = []\n    f = -9999999999999999\n    for i in range(len(a)):\n        c.append(a[i] - w)\n        c.append(a[i] + w)\n        d.append(b[i] - h)\n        d.append(b[i] + h)\n        e.append(a[i] - w - b[i] + h)\n        e.append(a[i] + w - b[i] - h)\n        f = max(f, a[i] - w - b[i] + h)\n    for i in range(len(c)):\n        c[i] -= f\n    g = 0\n    for i in range(0, len(c) - 1, 2):\n        if c[i] > d[i] or c[i + 1] < d[i + 1]:\n            g = 1\n            break\n    if g == 1:\n        print('NO')\n    else:\n        print('YES')", "from sys import stdin, stdout\ninput = stdin.readline\nt = int(input())\nfor i in range(t):\n    (n, w, h) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    shift1 = a[0] - w + h - b[0]\n    shift2 = shift1 + 2 * (w - h)\n    max1 = max2 = -10 ** 5\n    for i in range(n):\n        max1 = max(max1, a[i] - w + h - b[i] - shift1)\n        max2 = max(max2, b[i] + shift2 - (a[i] + w - h))\n    print('YES') if max1 + max2 <= 2 * (w - h) else print('NO')", "from math import ceil\nfor _ in range(int(input())):\n    (n, w, h) = map(int, input().split())\n    md = w - h\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = [x - y for (x, y) in zip(a, b)]\n    print(['NO', 'YES'][max(d) - min(d) <= md * 2])", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, w, h) = R()\n    r = 9000000000.0\n    l = -r\n    for (x, y) in zip(R(), R()):\n        l = max(l, y - x - w + h)\n        r = min(r, y - x + w - h)\n    print('YNEOS'[l > r::2])", "li = lambda : list(map(int, input().split()))\nfor _ in range(int(input())):\n    (n, w, h) = li()\n    a = li()\n    b = li()\n    c = [a[i] - b[i] for i in range(n)]\n    print('YES' if max(c) - min(c) <= 2 * (w - h) else 'NO')", "for _ in range(int(input())):\n    (n, w, h) = map(int, input().split())\n    cake = list(map(int, input().split()))\n    dispense = list(map(int, input().split()))\n    c = [cake[i] - dispense[i] for i in range(n)]\n    if abs(max(c) - min(c) <= 2 * (w - h)):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, w, h) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    b = sorted(list(map(int, input().split())))\n    c = [a[i] - b[i] for i in range(n)]\n    if abs(max(c) - min(c)) <= 2 * (w - h):\n        print('YES')\n    else:\n        print('NO')", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, w, h) = R()\n    (a, b) = zip(*((y - x - w + h, y - x + w - h) for (x, y) in zip(R(), R())))\n    print('YNEOS'[max(a) > min(b)::2])", "n_tests = int(input())\nres = []\nfor num_test in range(n_tests):\n    (n, w, h) = list(map(int, input().split()))\n    big = list(map(int, input().split()))\n    small = list(map(int, input().split()))\n    big.sort()\n    small.sort()\n    left = -float('inf')\n    right = float('inf')\n    for i in range(n):\n        left = max(left, big[i] - w + h - small[i])\n        right = min(right, big[i] + w - h - small[i])\n    if right >= left:\n        res.append('YES')\n    else:\n        res.append('NO')\nprint('\\n'.join(res))", "na = lambda : list(map(int, input().split()))\nfor _ in range(na()[0]):\n    (n, w, h) = na()\n    a = na()\n    b = na()\n    l = float('inf')\n    r = -l\n    for i in range(n):\n        l = min(b[i] - a[i], l)\n        r = max(b[i] - a[i], r)\n    print('YES' if r - l <= 2 * (w - h) else 'NO')", "import sys\ninput = sys.stdin.readline\n\ndef exe():\n    cakes.sort()\n    conveyor.sort()\n    cakes_range = [[cakes[i] - w - (cakes[0] - w), cakes[i] + w - (cakes[0] - w)] for i in range(n)]\n    conveyor_range = [[conveyor[i] - h - (conveyor[0] - h), conveyor[i] + h - (conveyor[0] - h)] for i in range(n)]\n    adjust = 2 * (w - h)\n    i = 0\n    move = 0\n    while i < n and adjust >= 0:\n        if cakes_range[i][0] <= conveyor_range[i][0] + move:\n            if conveyor_range[i][1] + move <= cakes_range[i][1]:\n                adjust = min(adjust, cakes_range[i][1] - (conveyor_range[i][1] + move))\n            else:\n                return 'NO'\n        else:\n            adjust -= cakes_range[i][0] - (conveyor_range[i][0] + move)\n            move += cakes_range[i][0] - (conveyor_range[i][0] + move)\n        i += 1\n    if adjust < 0:\n        return 'NO'\n    return 'YES'\nfor _ in range(int(input())):\n    (n, w, h) = map(int, input().split())\n    cakes = list(map(int, input().split()))\n    conveyor = list(map(int, input().split()))\n    print(exe())", "for _ in range(int(input())):\n    (n, w, h) = map(int, input().split())\n    cakes = list(sorted(map(int, input().split())))\n    mechanisms = list(sorted(map(int, input().split())))\n    for i in range(n):\n        cakes[i] = (cakes[i] - w, cakes[i] + w)\n        mechanisms[i] = (mechanisms[i] - h, mechanisms[i] + h)\n    d = mechanisms[0][1] - cakes[0][1]\n    a = w * 2 + 1 - h * 2 - 1\n    for i in range(1, n):\n        if cakes[i][0] + d > mechanisms[i][0]:\n            print('NO')\n            break\n        if cakes[i][1] + d < mechanisms[i][1]:\n            diff = mechanisms[i][1] - (cakes[i][1] + d)\n            if a < diff:\n                print('NO')\n                break\n            a -= diff\n            d += diff\n        else:\n            a = min(a, mechanisms[i][0] - (cakes[i][0] + d))\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (n, w, h) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    mn = -1000000000.0\n    mx = 1000000000.0\n    for i in range(n):\n        mx = min(mx, b[i] - h - a[i] + w)\n        mn = max(mn, b[i] + h - a[i] - w)\n    if mn <= mx:\n        print('YES')\n    else:\n        print('NO')", "g = lambda : list(map(int, input().split()))\nfor _ in range(int(input())):\n    (n, w, h) = g()\n    a = g()\n    b = g()\n    l = float('inf')\n    r = -l\n    for i in range(n):\n        l = min(b[i] - a[i], l)\n        r = max(b[i] - a[i], r)\n    print('YES' if r - l <= 2 * (w - h) else 'NO')", "for i in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    if a == 1:\n        b = int(input())\n        c = int(input())\n        print('YES')\n    else:\n        arrw = list(map(int, input().split()))\n        arrh = list(map(int, input().split()))\n        maxv = arrw[0] - arrh[0]\n        minv = maxv\n        for l in range(1, a):\n            if arrw[l] - arrh[l] > maxv:\n                maxv = arrw[l] - arrh[l]\n            elif arrw[l] - arrh[l] < minv:\n                minv = arrw[l] - arrh[l]\n        if maxv - minv > 2 * (b - c):\n            print('NO')\n        else:\n            print('YES')"]