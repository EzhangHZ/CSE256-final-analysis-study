["import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    e = 0\n    o = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            e += 1\n        else:\n            o += 1\n    ans = sum(a)\n    for i in range(q):\n        (p, v) = map(int, input().split())\n        if p == 0:\n            ans = ans + e * v\n            if v % 2 == 1:\n                e = 0\n                o = n\n        else:\n            ans = ans + o * v\n            if v % 2 == 1:\n                e = n\n                o = 0\n        print(ans)", "import sys\nt = int(sys.stdin.readline().strip())\nfor i in range(t):\n    nq = sys.stdin.readline().strip().split()\n    n = int(nq[0])\n    q = int(nq[1])\n    array_line = sys.stdin.readline().strip().split()\n    sum_a = 0\n    count_odd = 0\n    count_even = 0\n    for e in array_line:\n        en = int(e)\n        sum_a += en\n        if en % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    for qn in range(q):\n        query = sys.stdin.readline().strip().split()\n        x = int(query[1])\n        if query[0] == '0':\n            sum_a += count_even * x\n            if x % 2 == 1:\n                count_odd += count_even\n                count_even = 0\n        elif query[0] == '1':\n            sum_a += count_odd * x\n            if x % 2 == 1:\n                count_even += count_odd\n                count_odd = 0\n        print(sum_a)", "import sys\nimport math\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nfrom functools import lru_cache\nimport heapq\nsys.setrecursionlimit(200000)\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef cust():\n    s = input()\n    return s[:len(s) - 1]\n\ndef solve():\n    (n, q) = inlt()\n    arr = inlt()\n    Sum = sum(arr)\n    oddCount = 0\n    evenCount = 0\n    for i in arr:\n        if i % 2 == 0:\n            evenCount += 1\n        else:\n            oddCount += 1\n    for _ in range(q):\n        (b, x) = inlt()\n        if b:\n            Sum += oddCount * x\n            if x % 2 == 1:\n                evenCount += oddCount\n                oddCount = 0\n        else:\n            Sum += evenCount * x\n            if x % 2 == 1:\n                oddCount += evenCount\n                evenCount = 0\n        print(Sum)\nt = inp()\nfor _ in range(t):\n    solve()", "import sys\nfrom pprint import pprint\ninput = sys.stdin.readline\nT = int(input())\nv = []\nfor i in range(T):\n    (n, q) = map(int, input().split())\n    L = [*map(int, input().split())]\n    odd = 0\n    even = 0\n    for i in L:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    sum_ = sum(L)\n    for i in range(q):\n        (operation, value) = map(int, input().split())\n        if operation == 0:\n            sum_ += even * value\n            if value % 2 == 1:\n                odd += even\n                even = 0\n        else:\n            sum_ += odd * value\n            if value % 2 == 1:\n                even += odd\n                odd = 0\n        v.append(sum_)\nprint(*v, sep='\\n')", "import sys\nfrom heapq import heapify, heappush, heappop\nfrom math import ceil, floor, sqrt, gcd\nfrom collections import defaultdict, deque\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\n\ndef int_arr():\n    return list(map(int, input().split()))\n\ndef str_arr():\n    return list(map(str, input().split()))\n\ndef get_str():\n    return map(str, input().split())\n\ndef get_int():\n    return map(int, input().split())\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nmod = 1000000007\n\ndef solve():\n    (n, q) = get_int()\n    arr = int_arr()\n    (o, e, tot) = (0, 0, 0)\n    for i in arr:\n        if i % 2 == 0:\n            e += 1\n        else:\n            o += 1\n        tot += i\n    for i in range(q):\n        (x, y) = get_int()\n        if x == 0:\n            tot += e * y\n            if y % 2 == 1:\n                o += e\n                e = 0\n            print(tot)\n        elif x == 1:\n            tot += o * y\n            if y % 2 == 1:\n                e += o\n                o = 0\n            print(tot)\nT = 1\nT = int(input())\nwhile T:\n    solve()\n    T -= 1", "import sys\ninput = sys.stdin.readline\n\ndef readIntList():\n    return list(map(int, input().split()))\n\ndef sol():\n    N = readIntList()\n    L = readIntList()\n    (odd, ev) = (0, 0)\n    for i in range(N[0]):\n        if L[i] % 2 == 0:\n            ev += 1\n    odd = N[0] - ev\n    s = sum(L)\n    for _ in range(N[1]):\n        A = readIntList()\n        if A[0] == 1:\n            s += odd * A[1]\n            if A[1] % 2 == 1:\n                ev += odd\n                odd = 0\n        if A[0] == 0:\n            s += ev * A[1]\n            if A[1] % 2 == 1:\n                odd += ev\n                ev = 0\n        print(s)\nt = int(input())\nfor _ in range(t):\n    sol()", "from sys import stdin, stdout\nt = int(stdin.readline().strip())\nfor _ in range(t):\n    (n, q) = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    summ = evens_count = odds_count = 0\n    for num in arr:\n        summ += num\n        if num % 2 == 0:\n            evens_count += 1\n        else:\n            odds_count += 1\n    for _ in range(q):\n        (typ, num) = map(int, stdin.readline().split())\n        if typ == 0:\n            summ += num * evens_count\n            if num % 2 == 1:\n                odds_count += evens_count\n                evens_count = 0\n        else:\n            summ += num * odds_count\n            if num % 2 == 1:\n                evens_count += odds_count\n                odds_count = 0\n        print(summ)", "import sys\nt = int(sys.stdin.readline())\nfor test in range(t):\n    (n, q) = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    odd = 0\n    even = 0\n    for num in a:\n        if num % 2 == 1:\n            odd += 1\n        else:\n            even += 1\n    ans = sum(a)\n    for query in range(q):\n        (key, x) = map(int, sys.stdin.readline().split())\n        if key == 0:\n            if x % 2 == 0:\n                ans += even * x\n            else:\n                ans += even * x\n                odd += even\n                even = 0\n        elif x % 2 == 0:\n            ans += odd * x\n        else:\n            ans += odd * x\n            even += odd\n            odd = 0\n        print(ans)", "output = []\nt = int(input())\nfor i in range(t):\n    q = int(input().split(' ')[1])\n    arr = [int(x) for x in input().split(' ')]\n    tot = sum(arr)\n    (o, e) = (0, 0)\n    for x in arr:\n        if x % 2 == 0:\n            e += 1\n        else:\n            o += 1\n    for j in range(q):\n        (t, x) = [int(x) for x in input().split(' ')]\n        if t == 0:\n            tot += e * x\n            if x % 2 == 1:\n                o += e\n                e = 0\n        else:\n            tot += o * x\n            if x % 2 == 1:\n                e += o\n                o = 0\n        output.append(str(tot))\nprint('\\n'.join(output))", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    odd = sum((1 for i in range(n) if a[i] % 2 == 1))\n    even = n - odd\n    s = sum(a)\n    for _ in range(q):\n        (type, x) = map(int, input().split())\n        if type == 0:\n            s += even * x\n            if x % 2 == 1:\n                odd = n\n                even = 0\n        elif type == 1:\n            s += odd * x\n            if x % 2 == 1:\n                even = n\n                odd = 0\n        print(s)", "import sys\nreadline = sys.stdin.readline\nT = int(readline())\nfor _ in range(T):\n    (N, Q) = map(int, readline().split())\n    A = list(map(int, readline().split()))\n    SUM = sum(A)\n    C = [0] * 2\n    for a in A:\n        C[a % 2] += 1\n    add = 0\n    for _ in range(Q):\n        (cmd, x) = map(int, readline().split())\n        if cmd == 0:\n            add += C[0] * x\n            if x % 2:\n                C[1] += C[0]\n                C[0] = 0\n        else:\n            add += C[1] * x\n            if x % 2:\n                C[0] += C[1]\n                C[1] = 0\n        print(SUM + add)", "import sys, math\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    even = 0\n    odd = 0\n    (n, q) = map(int, sys.stdin.readline().split())\n    arr = list(map(int, sys.stdin.readline().split()))\n    all_even = 0\n    all_odd = 0\n    num_even = 0\n    num_odd = 0\n    for i in arr:\n        if i % 2 == 0:\n            all_even += i\n            num_even += 1\n        else:\n            all_odd += i\n            num_odd += 1\n    for i in range(q):\n        (a, b) = map(int, sys.stdin.readline().split())\n        if a == 0:\n            all_even += b * num_even\n            if b % 2 != 0:\n                num_odd += num_even\n                num_even = 0\n        else:\n            all_odd += b * num_odd\n            if b % 2 != 0:\n                num_even += num_odd\n                num_odd = 0\n        print(all_even + all_odd)", "import sys\nfrom collections import *\nsys.setrecursionlimit(10 ** 5)\nitr = (line for line in sys.stdin.read().strip().split('\\n'))\nINP = lambda : next(itr)\n\ndef ni():\n    return int(INP())\n\ndef nl():\n    return [int(_) for _ in INP().split()]\nt = ni()\nfor case in range(t):\n    (n, q) = nl()\n    a = nl()\n    (oddS, eveS) = (0, 0)\n    tot = 0\n    for i in a:\n        tot += i\n        if i % 2 == 0:\n            eveS += 1\n        else:\n            oddS += 1\n    for _ in range(q):\n        (a, b) = nl()\n        if a == 0:\n            tot += b * eveS\n            if b % 2 != 0:\n                oddS += eveS\n                eveS = 0\n        else:\n            tot += b * oddS\n            if b % 2 != 0:\n                eveS += oddS\n                oddS = 0\n        print(tot)", "from sys import stdin\nfor i in range(int(stdin.readline().strip())):\n    (x, y) = map(int, stdin.readline().strip().split())\n    a2 = list(map(int, stdin.readline().strip().split()))\n    v = sum(a2)\n    ec = 0\n    oc = 0\n    for j in range(x):\n        if a2[j] % 2 == 0:\n            ec += 1\n        else:\n            oc += 1\n    for j in range(y):\n        (p, q) = map(int, stdin.readline().strip().split())\n        if p == 1:\n            v += q * oc\n            if q % 2 != 0:\n                ec += oc\n                oc = 0\n        elif p == 0:\n            v += q * ec\n            if q % 2 != 0:\n                oc += ec\n                ec = 0\n        print(v)", "import sys\ninput = sys.stdin.readline\nfor i in range(int(input())):\n    (n, q) = map(int, input().split())\n    l = list(map(int, input().split()))[:n]\n    even_count = len(list(filter(lambda x: x % 2 == 0, l)))\n    odd_count = len(list(filter(lambda x: x % 2 != 0, l)))\n    s = sum(l)\n    for _ in range(q):\n        (t, x) = map(int, input().split())\n        if t % 2 == 0:\n            s += even_count * x\n            if x % 2 != 0:\n                odd_count += even_count\n                even_count = 0\n        else:\n            s += odd_count * x\n            if x % 2 != 0:\n                even_count += odd_count\n                odd_count = 0\n        print(s)", "import sys\ninput = sys.stdin.readline\nfor test in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (e, o, es, os) = (0, 0, 0, 0)\n    for i in a:\n        if i % 2 == 0:\n            es += i\n            e += 1\n        else:\n            os += i\n            o += 1\n    for qu in range(q):\n        (t, x) = map(int, input().split())\n        if t == 0:\n            if x % 2 == 0:\n                es += e * x\n            else:\n                o += e\n                es += e * x\n                e = 0\n                os += es\n                es = 0\n        elif x % 2 == 0:\n            os += o * x\n        else:\n            e += o\n            os += o * x\n            o = 0\n            es += os\n            os = 0\n        print(es + os)", "def Incr(arr, qr):\n    even = 0\n    for x in arr:\n        if x % 2 == 0:\n            even += 1\n    odd = len(arr) - even\n    SUM = sum(arr)\n    ans = []\n    for q in qr:\n        if q[0] == 0:\n            SUM = SUM + even * q[1]\n            if q[1] % 2 == 1:\n                odd = len(arr)\n                even = 0\n        else:\n            SUM = SUM + odd * q[1]\n            if q[1] % 2 == 1:\n                even = len(arr)\n                odd = 0\n        ans.append(SUM)\n    return ans\nOUTPUT = []\nfor _ in range(int(input())):\n    (N, Q) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    qr = []\n    for i in range(Q):\n        qr.append([int(x) for x in input().split()])\n    OUTPUT.extend(Incr(arr, qr))\nfor _ in OUTPUT:\n    print(_)", "from collections import Counter\nimport sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return str(input())\n\ndef invr():\n    return map(int, input().split())\nT = inp()\nfor i in range(T):\n    arr = inlt()\n    n = arr[0]\n    q = arr[1]\n    arr = inlt()\n    ssum = sum(arr)\n    o = 0\n    e = 0\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            e += 1\n        else:\n            o += 1\n    for i in range(q):\n        x = inlt()\n        if x[0] == 0:\n            ssum += e * x[1]\n            if x[1] % 2 != 0:\n                o = o + e\n                e = 0\n        else:\n            ssum += o * x[1]\n            if x[1] % 2 != 0:\n                e = o + e\n                o = 0\n        print(ssum)", "import sys\ncount = int(sys.stdin.readline())\nfor _ in range(count):\n    (n, q) = [int(f) for f in list(sys.stdin.readline().split())]\n    a = [int(z) for z in list(sys.stdin.readline().split())]\n    nc_arr = [x for x in a if x % 2 != 0]\n    c_arr = [x for x in a if x % 2 == 0]\n    nc_count = len(nc_arr)\n    c_count = len(c_arr)\n    nc_sum = sum(nc_arr)\n    c_sum = sum(c_arr)\n    for i in range(q):\n        (command, adder) = [int(f) for f in list(sys.stdin.readline().split())]\n        if command == 0:\n            c_sum += c_count * adder\n            if adder % 2 != 0:\n                nc_count += c_count\n                nc_sum += c_sum\n                c_count = 0\n                c_sum = 0\n        if command == 1:\n            nc_sum += nc_count * adder\n            if adder % 2 != 0:\n                c_count += nc_count\n                c_sum += nc_sum\n                nc_count = 0\n                nc_sum = 0\n        print(nc_sum + c_sum)", "import collections\nimport sys\nfrom typing import List\nfrom bisect import bisect_left, bisect_right, insort_left, insort_right\nfrom collections import defaultdict, Counter, deque\nfrom heapq import heappush, heappop\nfrom itertools import accumulate\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nn = inp()\nres = []\nfor _ in range(n):\n    l = inlt()\n    t = l[1]\n    odd = []\n    even = []\n    for x in inlt():\n        if x & 1:\n            odd.append(x)\n        else:\n            even.append(x)\n    odd_sum = sum(odd)\n    odd_cnt = len(odd)\n    even_sum = sum(even)\n    even_cnt = len(even)\n    for _ in range(t):\n        (q, n) = inlt()\n        if q == 0:\n            even_sum += even_cnt * n\n            if n & 1:\n                odd_sum += even_sum\n                odd_cnt += even_cnt\n                even_sum = 0\n                even_cnt = 0\n        elif q == 1:\n            odd_sum += odd_cnt * n\n            if n & 1:\n                even_sum += odd_sum\n                even_cnt += odd_cnt\n                odd_sum = 0\n                odd_cnt = 0\n        res.append(even_sum + odd_sum)\nfor x in res:\n    print(x)", "fl = 'input.txt'\nimport sys\nimport math\nflh = sys.stdin\ntest_cases = int(flh.readline())\nres = []\nfor case in range(test_cases):\n    (n, q) = [int(x) for x in flh.readline().strip().split()]\n    a = [int(x) for x in flh.readline().strip().split()]\n    even_sum = 0\n    odd_sum = 0\n    even_count = 0\n    odd_count = 0\n    for i in a:\n        if i % 2 == 0:\n            even_count += 1\n            even_sum += i\n        else:\n            odd_count += 1\n            odd_sum += i\n    for i in range(q):\n        (t, num) = [int(x) for x in flh.readline().strip().split()]\n        if t == 0:\n            print(even_sum + odd_sum + num * even_count)\n            if num % 2 == 0:\n                even_sum += num * even_count\n            else:\n                odd_sum += num * even_count + even_sum\n                odd_count += even_count\n                even_count = 0\n                even_sum = 0\n        else:\n            print(even_sum + odd_sum + num * odd_count)\n            if num % 2 == 0:\n                odd_sum += num * odd_count\n            else:\n                even_sum += num * odd_count + odd_sum\n                even_count += odd_count\n                odd_count = 0\n                odd_sum = 0", "from collections import defaultdict\nt = int(input())\nans = list()\nfor _ in range(t):\n    (m, n) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    cnt = defaultdict(int)\n    tmp = sum(nums)\n    for num in nums:\n        if num % 2 == 0:\n            cnt[0] += 1\n        else:\n            cnt[1] += 1\n    for i in range(n):\n        (types, val) = map(int, input().split())\n        if types == 0:\n            tmp += cnt[0] * val\n            if val % 2 != 0:\n                cnt[1] += cnt[0]\n                cnt[0] = 0\n        else:\n            tmp += cnt[1] * val\n            if val % 2 != 0:\n                cnt[0] += cnt[1]\n                cnt[1] = 0\n        ans.append(tmp)\nfor i in ans:\n    print(i)", "from collections import defaultdict\nt = int(input())\nans = list()\nfor _ in range(t):\n    (m, n) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    cnt = defaultdict(int)\n    tmp = sum(nums)\n    for num in nums:\n        if num % 2 == 0:\n            cnt[0] += 1\n        else:\n            cnt[1] += 1\n    for i in range(n):\n        (types, val) = map(int, input().split())\n        if types == 0:\n            tmp += cnt[0] * val\n            if val % 2 != 0:\n                cnt[1] += cnt[0]\n                cnt[0] = 0\n        else:\n            tmp += cnt[1] * val\n            if val % 2 != 0:\n                cnt[0] += cnt[1]\n                cnt[1] = 0\n        ans.append(tmp)\nfor i in ans:\n    print(i)", "def naiveSolution(n, arr, q, qry):\n    resutl = []\n    for i in range(q):\n        (qt, x) = qry[i]\n        if qt == 0:\n            for j in range(n):\n                if arr[j] % 2 == 0:\n                    arr[j] += x\n        else:\n            for j in range(n):\n                if arr[j] % 2 != 0:\n                    arr[j] += x\n        resutl.append(sum(arr))\n    return resutl\n\ndef solution(n, arr, q, qry):\n    sm = 0\n    even = 0\n    odd = 0\n    result = []\n    for i in range(n):\n        sm += arr[i]\n        if arr[i] % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    for i in range(q):\n        (x, y) = qry[i]\n        if x == 0:\n            sm += even * y\n            if y % 2 != 0:\n                odd += even\n                even = 0\n        else:\n            sm += odd * y\n            if y % 2 != 0:\n                even += odd\n                odd = 0\n        result.append(sm)\n    return result\nresult = []\nt = int(input())\nfor i in range(t):\n    (n, q) = [int(x) for x in input().split(' ')]\n    arr = [int(x) for x in input().split(' ')]\n    qry = []\n    for j in range(q):\n        qry.append([int(x) for x in input().split(' ')])\n    result.append(solution(n, arr, q, qry))\nfor res in result:\n    for s in res:\n        print(s)", "out = []\nfor _ in range(int(input())):\n    (n, q) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    s = 0\n    (even, odd) = (0, 0)\n    for i in a:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        s += i\n    for __ in range(q):\n        (t, x) = [int(i) for i in input().split()]\n        if t == 0:\n            s += even * x\n            if x % 2 == 1:\n                (even, odd) = (0, n)\n        else:\n            s += odd * x\n            if x % 2 == 1:\n                (even, odd) = (n, 0)\n        out.append(s)\nfor i in out:\n    print(i)", "t = int(input())\nans = []\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    koln = 0\n    kolc = 0\n    s = 0\n    for i in a:\n        if i % 2 == 0:\n            kolc += 1\n        else:\n            koln += 1\n        s += i\n    for _ in range(q):\n        (t, x) = map(int, input().split())\n        if t == 0:\n            s += kolc * x\n            if x % 2 == 1:\n                koln += kolc\n                kolc = 0\n        if t == 1:\n            s += koln * x\n            if x % 2 == 1:\n                kolc += koln\n                koln = 0\n        ans.append(s)\nfor i in ans:\n    print(i)", "tt = int(input())\nresults = []\nwhile tt > 0:\n    tt -= 1\n    (n, q) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    sums = sum(a)\n    odd = 0\n    even = 0\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    for i in range(q):\n        (t, x) = map(int, input().split())\n        if t == 0:\n            sums += even * x\n            if x % 2 == 1:\n                odd += even\n                even = 0\n        else:\n            sums += odd * x\n            if x % 2 == 1:\n                even += odd\n                odd = 0\n        results.append(sums)\nfor i in range(len(results)):\n    print(results[i])", "from collections import defaultdict\nfrom sys import stdin, stdout\nimport string\n\ndef solution(N, A, q_type, xj, even, odd, curr_sum):\n    if q_type == 0:\n        curr_sum += even * xj\n        if xj % 2 == 1:\n            odd += even\n            even = 0\n    if q_type == 1:\n        curr_sum += odd * xj\n        if xj % 2 == 1:\n            even += odd\n            odd = 0\n    print(curr_sum)\n    return (A, even, odd, curr_sum)\ntest_cases = int(stdin.readline())\nfor it in range(test_cases):\n    (N, q) = (int(x) for x in stdin.readline().split())\n    A = [int(x) for x in stdin.readline().split()]\n    even = len([i for i in range(len(A)) if A[i] % 2 == 0])\n    odd = len([i for i in range(len(A)) if A[i] % 2 == 1])\n    curr_sum = sum(A)\n    for it in range(q):\n        (q_type, xj) = (int(x) for x in stdin.readline().split())\n        (A, even, odd, curr_sum) = solution(N, A, q_type, xj, even, odd, curr_sum)", "t = int(input())\nres = []\nfor i in range(t):\n    query = []\n    (n, q) = map(int, input().split(' '))\n    nums = list(map(int, input().split(' ')))\n    even = [j for j in range(n) if nums[j] % 2 == 0]\n    odd = [j for j in range(n) if nums[j] % 2 != 0]\n    l_even = len(even)\n    l_odd = len(odd)\n    s = sum(nums)\n    for j in range(q):\n        (a, b) = map(int, input().split(' '))\n        if a == 0:\n            s += b * l_even\n            res.append(s)\n            if b % 2 != 0:\n                l_odd += l_even\n                l_even = 0\n        else:\n            s += b * l_odd\n            res.append(s)\n            if b % 2 != 0:\n                l_even += l_odd\n                l_odd = 0\nfor i in range(len(res)):\n    print(res[i])", "def f(arr, queries):\n    odd = 0\n    even = 0\n    s = 0\n    for el in arr:\n        if el % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        s += el\n    for (qt, v) in queries:\n        if qt == 0:\n            s += v * even\n            if v % 2 == 1:\n                odd += even\n                even = 0\n        else:\n            s += v * odd\n            if v % 2 == 1:\n                even += odd\n                odd = 0\n        print(s)\nt = int(input())\nfor i in range(t):\n    (n, q) = [int(el) for el in input().split(' ')]\n    arr = [int(el) for el in input().split(' ')]\n    queries = []\n    for j in range(q):\n        (qt, v) = [int(el) for el in input().split(' ')]\n        queries.append((qt, v))\n    f(arr, queries)", "def foo(n, q, ls, qs):\n    even = 0\n    odd = 0\n    s = sum(ls)\n    ans = []\n    for i in ls:\n        if i % 2:\n            odd += 1\n        else:\n            even += 1\n    for (type, i) in qs:\n        if type == 0:\n            s += even * i\n            if i % 2:\n                (odd, even) = (odd + even, 0)\n            else:\n                (odd, even) = (odd, even)\n        else:\n            s += odd * i\n            if i % 2:\n                (odd, even) = (0, odd + even)\n            else:\n                (odd, even) = (odd, even)\n        ans.append(s)\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, q) = [int(i) for i in input().split()]\n    ls = [int(i) for i in input().split()]\n    qs = []\n    for _ in range(q):\n        qs.append([int(i) for i in input().split()])\n    for s in foo(n, q, ls, qs):\n        print(s)", "import math\nfrom collections import defaultdict\n\ndef solve():\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    qa = []\n    for i in range(q):\n        qa.append(list(map(int, input().split())))\n    e = 0\n    o = 0\n    sumi = sum(a)\n    for i in a:\n        if i % 2 == 0:\n            e += 1\n        else:\n            o += 1\n    for j in qa:\n        if j[0] == 0:\n            if j[1] % 2 == 0:\n                sumi += e * j[1]\n            else:\n                sumi += e * j[1]\n                o += e\n                e = 0\n        elif j[1] % 2 == 0:\n            sumi += o * j[1]\n        else:\n            sumi += o * j[1]\n            e += o\n            o = 0\n        print(sumi)\n\ndef main():\n    for _ in range(int(input())):\n        solve()\nmain()", "def solve():\n    (n, q) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    query = []\n    for i in range(q):\n        query.append(input().split())\n    su = sum(arr)\n    e = o = 0\n    for i in arr:\n        if i % 2 == 0:\n            e += 1\n        else:\n            o += 1\n    for i in query:\n        if int(i[0]) % 2 == 0 and int(i[1]) % 2 == 0:\n            su = su + e * int(i[1])\n            print(su)\n        elif int(i[0]) % 2 != 0 and int(i[1]) % 2 != 0:\n            su = su + o * int(i[1])\n            print(su)\n            e = o + e\n            o = 0\n        elif int(i[0]) % 2 != 0 and int(i[1]) % 2 == 0:\n            su = su + o * int(i[1])\n            print(su)\n        else:\n            su = su + e * int(i[1])\n            print(su)\n            o = o + e\n            e = 0\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "def solve(n, q, a, y):\n    odd = len([x for x in a if x % 2 != 0])\n    even = len([x for x in a if x % 2 == 0])\n    total = sum(a)\n    for i in y:\n        if i[0] == '0':\n            total += even * int(i.split()[-1])\n            if int(i.split()[-1]) % 2 != 0:\n                odd += even\n                even = 0\n        else:\n            total += odd * int(i.split()[-1])\n            if int(i.split()[-1]) % 2 != 0:\n                even += odd\n                odd = 0\n        print(total)\nt = int(input())\nwhile t:\n    n = [int(x) for x in list(input().split())]\n    (n, q) = (n[0], n[1])\n    a = [int(x) for x in list(input().split())]\n    queries = []\n    for i in range(q):\n        temp = input()\n        queries.append(temp)\n    solve(n, q, a, queries)\n    t -= 1", "from typing import List, Tuple\n\ndef solve1(As: List[int], xs: List[Tuple[int, int]]) -> List[int]:\n    sum_as: int = 0\n    cant_even_as: int = 0\n    cant_odd_as: int = 0\n    for a in As:\n        sum_as += a\n        if a % 2 == 0:\n            cant_even_as += 1\n        else:\n            cant_odd_as += 1\n    ans: List[int] = []\n    for (t, x) in xs:\n        if t == 0:\n            sum_as += cant_even_as * x\n            if x % 2 != 0:\n                cant_odd_as += cant_even_as\n                cant_even_as = 0\n        else:\n            sum_as += cant_odd_as * x\n            if x % 2 != 0:\n                cant_even_as += cant_odd_as\n                cant_odd_as = 0\n        ans.append(sum_as)\n    return ans\n\ndef parse1() -> Tuple[List[int], List[Tuple[int, int]]]:\n    (n, q) = map(int, input().split())\n    As: List[int] = list(map(int, input().split()))\n    xs: List[Tuple[int, int]] = [tuple(map(int, input().split())) for _ in range(q)]\n    return (As, xs)\n\ndef main():\n    t: int = int(input())\n    for _ in range(t):\n        (As, xs) = parse1()\n        ans: List[int] = solve1(As, xs)\n        print(*ans, sep='\\n')\nmain()", "t = int(input())\nresult = []\nfor i in range(t):\n    (n, q) = list(map(int, input().split(' ')))\n    ai = list(map(int, input().split(' ')))\n    (sum, nbp, nbi) = (0, 0, 0)\n    for j in ai:\n        if j % 2 == 0:\n            nbp += 1\n        else:\n            nbi += 1\n        sum += j\n    for j in range(q):\n        (type, xj) = list(map(int, input().split(' ')))\n        if (type == 0) & (xj % 2 == 1):\n            sum += nbp * xj\n            nbi += nbp\n            nbp = 0\n        elif (type == 0) & (xj % 2 == 0):\n            sum += nbp * xj\n        elif (type == 1) & (xj % 2 == 1):\n            sum += nbi * xj\n            nbp += nbi\n            nbi = 0\n        else:\n            sum += nbi * xj\n        result.append(sum)\nfor i in result:\n    print(i)", "t = int(input())\nres = []\n\ndef calc(A, n):\n    odd = []\n    even = []\n    sum = 0\n    for i in range(0, n):\n        sum += A[i]\n        if A[i] % 2 == 0:\n            even.append(A[i])\n        else:\n            odd.append(A[i])\n    return (odd, even, sum)\nfor i in range(t):\n    (n, q) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    (odd, even, sum_A) = calc(A, n)\n    (odd_l, even_l) = (len(odd), len(even))\n    for i in range(q):\n        (type, x) = list(map(int, input().split()))\n        if type == 0:\n            if x % 2 == 0:\n                sum_A += x * even_l\n            else:\n                sum_A += x * even_l\n                odd_l += even_l\n                even_l = 0\n        elif x % 2 == 0:\n            sum_A += x * odd_l\n        else:\n            sum_A += x * odd_l\n            even_l += odd_l\n            odd_l = 0\n        res.append(sum_A)\nprint(*res, sep='\\n')", "class Solution:\n\n    def __init__(self):\n        n = int(input())\n        for _ in range(n):\n            (_, q) = [int(x) for x in input().split()]\n            numbers = [int(x) for x in input().split()]\n            queries = []\n            for _ in range(q):\n                queries.append([int(x) for x in input().split()])\n            for n in solution(numbers, queries):\n                print(n)\n\ndef solution(numbers, queries):\n    (even, odd) = (0, 0)\n    num_sum = 0\n    for n in numbers:\n        if n % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num_sum += n\n    response = []\n    for q in queries:\n        if q[0] == 0:\n            num_sum += even * q[1]\n            if q[1] % 2 != 0:\n                odd += even\n                even = 0\n        else:\n            num_sum += odd * q[1]\n            if q[1] % 2 != 0:\n                even += odd\n                odd = 0\n        response.append(num_sum)\n    return response\nSolution()", "t = int(input())\n\ndef solve(n, q, nums, queries):\n    (even, odd, total) = (0, 0, 0)\n    for num in nums:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        total += num\n    result = []\n    for (pol, val) in queries:\n        if pol == 0:\n            total += val * even\n            if val % 2 == 0:\n                pass\n            else:\n                odd += even\n                even = 0\n        else:\n            total += val * odd\n            if val % 2 == 0:\n                pass\n            else:\n                even += odd\n                odd = 0\n        result.append(total)\n    return result\nfor i in range(t):\n    (n, q) = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    queries = []\n    for j in range(q):\n        queries.append(list(map(int, input().split())))\n    lst = solve(n, q, nums, queries)\n    for ans in lst:\n        print(ans)", "def funct(n, q, arr, queries):\n    even = 0\n    odd = 0\n    s = sum(arr)\n    for i in arr:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    for i in queries:\n        if i[0] == 0:\n            if i[1] % 2 == 0:\n                s += even * i[1]\n            else:\n                s += even * i[1]\n                odd += even\n                even = 0\n        elif i[1] % 2 == 0:\n            s += odd * i[1]\n        else:\n            s += odd * i[1]\n            even += odd\n            odd = 0\n        print(s)\nt = int(input())\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    arr = [int(ele) for ele in input().split()]\n    queries = []\n    for i in range(q):\n        (a, b) = map(int, input().split())\n        queries.append([a, b])\n    funct(n, q, arr, queries)", "t = int(input())\nfor _ in range(t):\n    (n, q) = [int(x) for x in input().split(' ')]\n    seq = [int(x) for x in input().split(' ')]\n    queries = []\n    for _ in range(q):\n        queries.append([int(x) for x in input().split(' ')])\n    odds = 0\n    evens = 0\n    odd_len = 0\n    even_len = 0\n    for num in seq:\n        if num % 2 == 0:\n            evens += num\n            even_len += 1\n        else:\n            odds += num\n            odd_len += 1\n    for (q, num) in queries:\n        if q % 2 == 0:\n            evens += num * even_len\n            if num % 2 != 0:\n                odds += evens\n                odd_len += even_len\n                evens = 0\n                even_len = 0\n        else:\n            odds += num * odd_len\n            if num % 2 != 0:\n                evens += odds\n                even_len += odd_len\n                odds = 0\n                odd_len = 0\n        print(evens + odds)", "def solution():\n    (n, q) = (int(num) for num in input().split())\n    a = [int(num) for num in input().split()]\n    queries = []\n    for i in range(q):\n        queries.append([int(num) for num in input().split()])\n    even = 0\n    odd = 0\n    s = 0\n    for num in a:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        s += num\n    ans = []\n    for (type, x) in queries:\n        if type == 0:\n            s += even * x\n            ans.append(s)\n            if x % 2 == 1:\n                odd += even\n                even = 0\n        else:\n            s += odd * x\n            ans.append(s)\n            if x % 2 == 1:\n                even += odd\n                odd = 0\n    for num in ans:\n        print(num)\n\ndef main():\n    t = int(input())\n    while t:\n        solution()\n        t -= 1\nmain()", "def even_odd_increments(n, q, array, queries):\n    (even, odd) = (0, 0)\n    (seven, sodd) = (0, 0)\n    for i in range(len(array)):\n        if array[i] % 2 == 0:\n            seven += array[i]\n            even += 1\n        else:\n            sodd += array[i]\n            odd += 1\n    for query in queries:\n        evenodd = query[0]\n        value = query[1]\n        sum_ele = 0\n        if evenodd == 0:\n            if value % 2 == 0:\n                seven += value * even\n            else:\n                sodd += seven + value * even\n                odd += even\n                (seven, even) = (0, 0)\n        elif evenodd == 1:\n            if value % 2 == 0:\n                sodd += value * odd\n            else:\n                seven += sodd + value * odd\n                even += odd\n                (sodd, odd) = (0, 0)\n        print(seven + sodd)\nt = int(input())\nfor i in range(t):\n    (n, q) = input().split(' ')\n    (n, q) = (int(n), int(q))\n    array = input().split(' ')\n    array = [int(val) for val in array]\n    queries = []\n    for i in range(q):\n        query = input().split(' ')\n        query = [int(val) for val in query]\n        queries.append(query)\n    even_odd_increments(n, q, array, queries)", "t = int(input())\nans = []\nfor _ in range(t):\n    (n, q) = tuple(map(int, input().split()))\n    a = list(map(int, input().split()))\n    an = [[0, 0], [0, 0]]\n    for i in a:\n        if i % 2 == 0:\n            an[0][0] += 1\n            an[0][1] += i\n        else:\n            an[1][0] += 1\n            an[1][1] += i\n    for i in range(q):\n        (ty, x) = tuple(map(int, input().split()))\n        an[ty][1] += an[ty][0] * x\n        if ty == 0 and x % 2 == 1:\n            an[1][0] += an[0][0]\n            an[1][1] += an[0][1]\n            an[0] = [0, 0]\n        elif ty == 1 and x % 2 == 1:\n            an[0][0] += an[1][0]\n            an[0][1] += an[1][1]\n            an[1] = [0, 0]\n        ans.append(an[0][1] + an[1][1])\nfor i in ans:\n    print(i)", "k = int(input())\nfor l in range(k):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = []\n    temp = []\n    for i in range(q):\n        (ind, val) = map(int, input().split())\n        temp = [ind, val]\n        b.append(temp)\n    en = 0\n    od = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            en += 1\n        else:\n            od += 1\n    ans = sum(a)\n    for i in range(q):\n        aa = b[i][0]\n        bb = b[i][1]\n        if aa == 0 and bb % 2 == 0:\n            ans = ans + en * bb\n        elif aa == 0:\n            ans += en * bb\n            od += en\n            en = 0\n        if aa == 1 and bb % 2 == 0:\n            ans += bb * od\n        elif aa == 1:\n            ans += bb * od\n            en += od\n            od = 0\n        print(ans)", "t = int(input())\nfor i in range(t):\n    inp = input().split()\n    (n, q) = (int(inp[0]), int(inp[1]))\n    ls = list(map(int, input().split()))\n    a = []\n    for i in range(q):\n        a.append(list(map(int, input().split())))\n    (ev, od) = (0, 0)\n    sum1 = 0\n    for i in ls:\n        if i % 2 == 0:\n            ev += 1\n            sum1 += i\n        else:\n            od += 1\n            sum1 += i\n    for i in a:\n        if i[0] == 0:\n            if i[1] % 2 == 0:\n                sum1 += ev * i[1]\n                print(sum1)\n            else:\n                od = n\n                sum1 += ev * i[1]\n                ev = 0\n                print(sum1)\n        elif i[1] % 2 == 0:\n            sum1 += od * i[1]\n            print(sum1)\n        else:\n            ev = n\n            sum1 += od * i[1]\n            od = 0\n            print(sum1)", "def even_odd_increments(n, q, array, queries):\n    (even, odd) = (0, 0)\n    (seven, sodd) = (0, 0)\n    for i in range(len(array)):\n        if array[i] % 2 == 0:\n            seven += array[i]\n            even += 1\n        else:\n            sodd += array[i]\n            odd += 1\n    for query in queries:\n        evenodd = query[0]\n        value = query[1]\n        sum_ele = 0\n        if evenodd == 0:\n            if value % 2 == 0:\n                seven += value * even\n            else:\n                sodd += seven + value * even\n                odd += even\n                (seven, even) = (0, 0)\n        elif evenodd == 1:\n            if value % 2 == 0:\n                sodd += value * odd\n            else:\n                seven += sodd + value * odd\n                even += odd\n                (sodd, odd) = (0, 0)\n        print(seven + sodd)\nt = int(input())\nfor i in range(t):\n    (n, q) = input().split(' ')\n    (n, q) = (int(n), int(q))\n    array = input().split(' ')\n    array = [int(val) for val in array]\n    queries = []\n    for i in range(q):\n        query = input().split(' ')\n        query = [int(val) for val in query]\n        queries.append(query)\n    even_odd_increments(n, q, array, queries)", "def even_odd_increments(n, q, array, queries):\n    (even, odd) = (0, 0)\n    (seven, sodd) = (0, 0)\n    for i in range(len(array)):\n        if array[i] % 2 == 0:\n            seven += array[i]\n            even += 1\n        else:\n            sodd += array[i]\n            odd += 1\n    for query in queries:\n        evenodd = query[0]\n        value = query[1]\n        sum_ele = 0\n        if evenodd == 0:\n            if value % 2 == 0:\n                seven += value * even\n            else:\n                sodd += seven + value * even\n                odd += even\n                (seven, even) = (0, 0)\n        elif evenodd == 1:\n            if value % 2 == 0:\n                sodd += value * odd\n            else:\n                seven += sodd + value * odd\n                even += odd\n                (sodd, odd) = (0, 0)\n        print(seven + sodd)\nt = int(input())\nfor i in range(t):\n    (n, q) = input().split(' ')\n    (n, q) = (int(n), int(q))\n    array = input().split(' ')\n    array = [int(val) for val in array]\n    queries = []\n    for i in range(q):\n        query = input().split(' ')\n        query = [int(val) for val in query]\n        queries.append(query)\n    even_odd_increments(n, q, array, queries)", "t = int(input())\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    l = []\n    for h in range(q):\n        a = list(map(int, input().split()))\n        l.append(a)\n    even = 0\n    s = 0\n    for x in arr:\n        if x % 2 == 0:\n            even += 1\n        s += x\n    odd = n - even\n    for h in l:\n        (e, o) = (0, 0)\n        if h[1] % 2 == 0:\n            e = 1\n        else:\n            o = 1\n        if h[0] == 0:\n            if e:\n                s += h[1] * even\n            else:\n                s += h[1] * even\n                even = 0\n                odd = n\n        elif e:\n            s += h[1] * odd\n        else:\n            s += h[1] * odd\n            odd = 0\n            even = n\n        print(s)", "n = int(input())\nfor z in range(n):\n    (l, t) = [int(x) for x in input().split()]\n    lis = [int(x) for x in input().split()]\n    ops = []\n    for i in range(t):\n        ops.append([int(x) for x in input().split(' ', 1)])\n    o = 0\n    e = 0\n    ss = sum(lis)\n    for i in lis:\n        if i % 2 == 0:\n            e += 1\n        else:\n            o += 1\n    for i in range(t):\n        if ops[i][0] == 0:\n            if ops[i][1] % 2 == 0:\n                ss += e * ops[i][1]\n            else:\n                ss += e * ops[i][1]\n                o += e\n                e = 0\n        elif ops[i][1] % 2 == 0:\n            ss += o * ops[i][1]\n        else:\n            ss += o * ops[i][1]\n            e += o\n            o = 0\n        print(ss)", "for i in range(int(input())):\n    (n, q) = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    que = []\n    for j in range(q):\n        que.append(list(map(int, input().split())))\n    isum = sum(nums)\n    e = 0\n    o = 0\n    for it in nums:\n        if it % 2 == 0:\n            e += 1\n        else:\n            o += 1\n    for k in que:\n        if k[0] == 0:\n            isum += e * k[1]\n            if k[1] % 2 != 0:\n                o += e\n                e = 0\n        else:\n            isum += o * k[1]\n            if k[1] % 2 != 0:\n                e += o\n                o = 0\n        print(isum)", "listOfNums = []\nodd = []\neven = []\nlistOfCommand = []\nn = int(input())\nfor i in range(n):\n    (len_array, len_oper) = map(int, input().split())\n    listOfNums.append(list(map(int, input().split())))\n    b = []\n    for k in range(len_oper):\n        b.append(list(map(int, input().split())))\n    listOfCommand.append(b)\nfor i in range(len(listOfNums)):\n    even = 0\n    odd = 0\n    sumList = sum(listOfNums[i])\n    for k in range(len(listOfNums[i])):\n        if listOfNums[i][k] % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    for k in range(len(listOfCommand[i])):\n        if listOfCommand[i][k][0] == 0:\n            sumList += even * listOfCommand[i][k][1]\n            if listOfCommand[i][k][1] % 2 == 1:\n                odd += even\n                even = 0\n        else:\n            sumList += odd * listOfCommand[i][k][1]\n            if listOfCommand[i][k][1] % 2 == 1:\n                even += odd\n                odd = 0\n        print(sumList)", "t = int(input())\nfor i in range(t):\n    inp = input().split()\n    (n, q) = (int(inp[0]), int(inp[1]))\n    ls = list(map(int, input().split()))\n    a = []\n    for i in range(q):\n        a.append(list(map(int, input().split())))\n    (ev, od) = (0, 0)\n    sum1 = 0\n    for i in ls:\n        if i % 2 == 0:\n            ev += 1\n            sum1 += i\n        else:\n            od += 1\n            sum1 += i\n    for i in a:\n        if i[0] == 0:\n            if i[1] % 2 == 0:\n                sum1 += ev * i[1]\n                print(sum1)\n            else:\n                od = n\n                sum1 += ev * i[1]\n                ev = 0\n                print(sum1)\n        elif i[1] % 2 == 0:\n            sum1 += od * i[1]\n            print(sum1)\n        else:\n            ev = n\n            sum1 += od * i[1]\n            od = 0\n            print(sum1)", "def evenOdds(n, q, nums, queries):\n    tsum = sum(nums)\n    evens = odds = 0\n    for el in nums:\n        if el % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    freq = [[0, evens], [1, odds]]\n    res = []\n    for (st, val) in queries:\n        isOdd = True\n        if val % 2 == 0:\n            isOdd = False\n        for k in range(2):\n            (ost, ct) = freq[k]\n            if ost == 0 and st == 0:\n                tsum += ct * val\n                if isOdd:\n                    freq[k][0] = 1\n            elif ost == 1 and st == 1:\n                tsum += ct * val\n                if isOdd:\n                    freq[k][0] = 0\n        res.append(tsum)\n    return res\nT = int(input())\nfor i in range(T):\n    (n, q) = [int(i) for i in input().split()]\n    nums = [int(i) for i in input().split()]\n    queries = []\n    for j in range(q):\n        (typei, x) = [int(i) for i in input().split()]\n        queries.append([typei, x])\n    out = evenOdds(n, q, nums, queries)\n    for j in out:\n        print(j)", "t = int(input())\nfor j in range(t):\n    (n, q) = map(int, input().split(' '))\n    na = list(map(int, input().split(' ')))\n    qa = []\n    for m in range(q):\n        qa.append(list(map(int, input().split(' '))))\n    s = sum(na)\n    ch = 0\n    nch = 0\n    for i in na:\n        if i % 2 == 0:\n            ch = ch + 1\n        else:\n            nch = nch + 1\n    for i in range(q):\n        if qa[i][0] == 0:\n            s = s + ch * qa[i][1]\n            if qa[i][1] % 2 != 0:\n                nch = nch + ch\n                ch = 0\n        if qa[i][0] == 1:\n            s = s + nch * qa[i][1]\n            if qa[i][1] % 2 != 0:\n                ch = ch + nch\n                nch = 0\n        print(s)", "for _ in range(int(input())):\n    (n, nq) = map(int, input().split())\n    a = list(map(int, input().split()))\n    q = list()\n    for i in range(nq):\n        q.append(list(map(int, input().split())))\n    (odd, even) = (0, 0)\n    (sev, sod) = (0, 0)\n    for i in a:\n        if i % 2 == 0:\n            even += 1\n            sev += i\n        else:\n            odd += 1\n            sod += i\n    for i in q:\n        if i[0] % 2 == 0:\n            sev += i[1] * even\n            if i[1] % 2 == 1:\n                odd += even\n                even = 0\n        else:\n            sod += i[1] * odd\n            if i[1] % 2 == 1:\n                even += odd\n                odd = 0\n        print(sev + sod)", "for t in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = [int(s) for s in input().split()]\n    t_p = []\n    x = []\n    for i in range(q):\n        (tp, x_) = map(int, input().split())\n        t_p.append(tp)\n        x.append(x_)\n    b = [k % 2 for k in a]\n    odd = b.count(1)\n    even = b.count(0)\n    summ = sum(a)\n    for i in range(q):\n        if t_p[i] == 0:\n            summ += even * x[i]\n            if x[i] % 2 == 1:\n                even = 0\n                odd = n\n        else:\n            summ += odd * x[i]\n            if x[i] % 2 == 1:\n                even = n\n                odd = 0\n        print(summ)", "T = int(input())\nwhile T:\n    (n, q) = map(int, input().split())\n    l = list(map(int, input().split()))\n    queries = []\n    for i in range(q):\n        queries.append(list(map(int, input().split())))\n    (even, odd, some) = (0, 0, 0)\n    for ele in l:\n        if ele % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        some += ele\n    ans = []\n    for u in queries:\n        if u[0] == 0:\n            some = some + even * u[1]\n            ans.append(some)\n            if u[1] % 2 != 0:\n                odd = odd + even\n                even = 0\n        else:\n            some = odd * u[1] + some\n            ans.append(some)\n            if u[1] % 2 != 0:\n                even = even + odd\n                odd = 0\n    for a in ans:\n        print(a)\n    T -= 1", "t = int(input())\nfor _ in range(t):\n    (n, q) = list(map(int, input().split()))\n    lis = list(map(int, input().split()))\n    process = []\n    for u in range(q):\n        process.append(list(map(int, input().split())))\n    total = sum(lis)\n    neven = 0\n    nodd = 0\n    for m in lis:\n        if m % 2 == 0:\n            neven += 1\n        else:\n            nodd += 1\n    for i in process:\n        a = i[0]\n        b = i[1]\n        if a % 2 != 0 and b % 2 != 0:\n            total += nodd * b\n            neven = n\n            nodd = 0\n            print(total)\n        elif a % 2 == 0 and b % 2 == 0:\n            total += neven * b\n            print(total)\n        elif a % 2 == 0 and b % 2 != 0:\n            total += neven * b\n            nodd = n\n            neven = 0\n            print(total)\n        elif a % 2 != 0 and b % 2 == 0:\n            total += nodd * b\n            print(total)", "t = int(input())\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    l = [int(j) for j in input().split()]\n    quer = []\n    for k in range(q):\n        q1 = [int(x) for x in input().split()]\n        quer.append(q1)\n    e = 0\n    o = 0\n    summ = sum(l[0:])\n    for j in l:\n        if j % 2 == 0:\n            e += 1\n        else:\n            o += 1\n    for k in quer:\n        if k[0] == 0 and k[1] % 2 != 0:\n            o += e\n            summ = summ + e * k[1]\n            e = 0\n        elif k[0] == 1 and k[1] % 2 != 0:\n            e += o\n            summ = summ + o * k[1]\n            o = 0\n        elif k[0] == 0:\n            summ = summ + e * k[1]\n        elif k[0] == 1:\n            summ = summ + o * k[1]\n        print(summ)", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    L = list(map(int, input().split()))\n    L3 = []\n    for k in range(n):\n        if L[k] % 2 == 0:\n            L3.append(0)\n        else:\n            L3.append(1)\n    even = L3.count(0)\n    odd = L3.count(1)\n    total = sum(L)\n    L2 = []\n    for i in range(q):\n        L2.append(tuple(map(int, input().split())))\n    for j in range(q):\n        if L2[j][0] == 0:\n            print(total + even * L2[j][1])\n            total = total + even * L2[j][1]\n            if L2[j][1] % 2 == 1:\n                odd += even\n                even -= even\n        else:\n            print(total + odd * L2[j][1])\n            total = total + odd * L2[j][1]\n            if L2[j][1] % 2 == 1:\n                even += odd\n                odd -= odd", "t = eval(input())\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    k = []\n    k1 = [0] * 2\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            k1[0] += 1\n        else:\n            k1[1] += 1\n    for i in range(q):\n        k.append(list(map(int, input().split())))\n    sun = sum(a)\n    for i in range(len(k)):\n        if k[i][0] == 1:\n            sun += k[i][1] * k1[1]\n            if k[i][1] % 2 == 1:\n                k1[0] += k1[1]\n                k1[1] = 0\n        else:\n            sun += k[i][1] * k1[0]\n            if k[i][1] % 2 == 1:\n                k1[1] += k1[0]\n                k1[0] = 0\n        print(sun)", "times = int(input())\nfor time in range(times):\n    (len_list, q) = map(int, input().split(' '))\n    try:\n        list1 = input().split(' ')\n        for i in range(len(list1)):\n            list1[i] = int(list1[i])\n    except:\n        list1 = [int(input())]\n    q_list = []\n    for i in range(q):\n        m = [0] * 2\n        q_list.append(m)\n    for i in range(q):\n        (x, y) = map(int, input().split(' '))\n        q_list[i][0] = x\n        q_list[i][1] = y\n    ji = 0\n    ou = 0\n    sum_list = sum(list1)\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            ou += 1\n        else:\n            ji += 1\n    for i in range(q):\n        if q_list[i][0] == 0:\n            sum_list += ou * q_list[i][1]\n            print(sum_list)\n            if q_list[i][1] % 2 == 1:\n                ji += ou\n                ou = 0\n            else:\n                pass\n        else:\n            sum_list += ji * q_list[i][1]\n            print(sum_list)\n            if q_list[i][1] % 2 == 1:\n                ou += ji\n                ji = 0", "def process(queries, array, k):\n    suma = sum(array)\n    for i in range(len(queries)):\n        if queries[i][1] % 2 == 0:\n            if queries[i][0] == 0:\n                suma += queries[i][1] * k['even']\n            else:\n                suma += queries[i][1] * k['odd']\n        if queries[i][1] % 2 != 0:\n            if queries[i][0] == 0:\n                suma += queries[i][1] * k['even']\n                k['odd'] += k['even']\n                k['even'] = 0\n            else:\n                suma += queries[i][1] * k['odd']\n                k['even'] += k['odd']\n                k['odd'] = 0\n        print(suma)\nnumberoftimestheprogramruns = int(input())\nwhile numberoftimestheprogramruns > 0:\n    (n, q) = input().split()\n    n = int(n)\n    q = int(q)\n    array = input().split()\n    k = {'even': 0, 'odd': 0}\n    for i in range(len(array)):\n        array[i] = int(array[i])\n        if array[i] % 2 == 0:\n            k['even'] += 1\n        else:\n            k['odd'] += 1\n    queries = []\n    t = q\n    while q != 0:\n        query = input().split()\n        for i in range(len(query)):\n            query[i] = int(query[i])\n        queries.append(query)\n        q = q - 1\n    q = t\n    numberoftimestheprogramruns -= 1\n    process(queries, array, k)", "from collections import defaultdict\nfrom os import path\nimport sys\nfrom collections import defaultdict\nfrom turtle import st\n\ndef int_inp():\n    return int(input())\n\ndef mul_inp():\n    return map(int, input().split())\n\ndef arr_inp():\n    return list(map(int, input().split()))\n\ndef solution():\n    (n, q) = mul_inp()\n    a = arr_inp()\n    q = [arr_inp() for i in range(q)]\n    n_odd = 0\n    n_even = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            n_even += 1\n        else:\n            n_odd += 1\n    s = sum(a)\n    for i in range(len(q)):\n        if q[i][0] == 0:\n            s += n_even * q[i][1]\n            print(s)\n        else:\n            s += n_odd * q[i][1]\n            print(s)\n        if q[i][1] % 2 == 1 and q[i][0] == 1:\n            n_even = n\n            n_odd = 0\n        if q[i][1] % 2 == 1 and q[i][0] == 0:\n            n_odd = n\n            n_even = 0\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nfor _ in range(int(input())):\n    solution()", "t = int(input())\nnq_sp = []\na = []\nq = []\nfor i in range(t):\n    n_q = input()\n    n_q = n_q.split()\n    nq_sp.append([int(x) for x in n_q])\n    a_inp = input()\n    a_inp = a_inp.split()\n    a.append([int(x) for x in a_inp])\n    q.append([])\n    for j in range(int(n_q[1])):\n        q_inp = input()\n        q_inp = q_inp.split()\n        q[i].append([int(x) for x in q_inp])\nfor i in range(t):\n    n = nq_sp[i][0]\n    qq = nq_sp[i][1]\n    s = sum(a[i])\n    chet = [x % 2 for x in a[i]]\n    n_chet = chet.count(0)\n    n_nechet = chet.count(1)\n    for j in range(qq):\n        f = q[i][j][0]\n        k = q[i][j][1]\n        if f == 0:\n            s += n_chet * k\n            if k % 2 == 1:\n                n_nechet += n_chet\n                n_chet = 0\n        else:\n            s += n_nechet * k\n            if k % 2 == 1:\n                n_chet += n_nechet\n                n_nechet = 0\n        print(s)", "def solve():\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ec = 0\n    oc = 0\n    sum = 0\n    for i in a:\n        sum += i\n        if i % 2 == 0:\n            ec += 1\n        else:\n            oc += 1\n    for i in range(q):\n        (t, x) = map(int, input().split())\n        if t == 0:\n            sum += ec * x\n            if x % 2 != 0:\n                ec = 0\n                oc = n\n        else:\n            sum += oc * x\n            if x % 2 != 0:\n                ec = n\n                oc = 0\n        print(sum)\nfor t in range(0, int(input())):\n    solve()", "import sys\nsys.setrecursionlimit(10 ** 7)\nmod = 10 ** 9 + 7\n\ndef readInt():\n    return int(input())\n\ndef readIntList():\n    return list(map(int, input().split()))\n\ndef readStringList():\n    return list(input())\n\ndef readStringListWithSpace():\n    return list(input().split())\n\ndef readString():\n    return input()\n\ndef execute():\n    t = readInt()\n    for _ in range(t):\n        (n, q) = readIntList()\n        arr = readIntList()\n        (odd, even) = (0, 0)\n        res = sum(arr)\n        for (i, c) in enumerate(arr):\n            if c & 1:\n                odd += 1\n            else:\n                even += 1\n        for __ in range(q):\n            (ty, x) = readString().split(' ')\n            x = int(x)\n            if ty == '1':\n                res += odd * x\n                if x & 1:\n                    even += odd\n                    odd = 0\n            else:\n                res += even * x\n                if x & 1:\n                    odd += even\n                    even = 0\n            print(res)\nexecute()", "def solve():\n    (n, q) = map(int, input().split())\n    (*a,) = map(int, input().split())\n    s = sum(a)\n    even = odd = 0\n    for i in a:\n        if i % 2 == 0:\n            even += 1\n    odd = n - even\n    for _ in range(q):\n        (typ, x) = map(int, input().split())\n        if typ == 0:\n            s += x * even\n            if x % 2 == 1:\n                even = 0\n                odd = n\n        else:\n            s += x * odd\n            if x % 2 == 1:\n                even = n\n                odd = 0\n        print(s)\nfor _ in ' ' * int(input()):\n    solve()", "def solve():\n    a = input().split()\n    n = int(a[0])\n    q = int(a[1])\n    array = input().split()\n    a = 0\n    while a < n:\n        array[a] = int(array[a])\n        a += 1\n    even = 0\n    odd = 0\n    a = 0\n    while a < n:\n        if array[a] % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        a += 1\n    sum_ = sum(array)\n    while q > 0:\n        a = input().split()\n        type = int(a[0])\n        add = int(a[1])\n        if type == 0:\n            sum_ += even * add\n            print(sum_)\n        else:\n            sum_ += odd * add\n            print(sum_)\n        if add % 2 == 1 and type == 0:\n            odd += even\n            even = 0\n        elif add % 2 == 1 and type == 1:\n            even += odd\n            odd = 0\n        q -= 1\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1", "def solve():\n    (n, q) = list(map(int, input().split(' ')))\n    arr = list(map(int, input().split(' ')))\n    odd_count = 0\n    even_count = 0\n    curr_sum = sum(arr)\n    for val in arr:\n        if val % 2:\n            odd_count += 1\n        else:\n            even_count += 1\n    for _ in range(q):\n        (typ, val) = list(map(int, input().split(' ')))\n        if typ:\n            curr_sum += odd_count * val\n            if val % 2:\n                even_count += odd_count\n                odd_count = 0\n        else:\n            curr_sum += even_count * val\n            if val % 2:\n                odd_count += even_count\n                even_count = 0\n        print(curr_sum)\n    return curr_sum\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "def even_odd_increment():\n    (lenght_of_array, no_of_queries) = map(int, input().split())\n    elements_of_araay = list(map(int, input().split()))\n    even_length = 0\n    odd_length = 0\n    for e in elements_of_araay:\n        if e % 2 == 0:\n            even_length += 1\n        else:\n            odd_length += 1\n    count = 0\n    sum_of_array = sum(elements_of_araay)\n    for i in range(no_of_queries):\n        (type, increment) = map(int, input().split())\n        if type == 0:\n            if increment % 2 == 0:\n                x = even_length * increment\n                count += x\n            else:\n                x = even_length * increment\n                count += x\n                odd_length += even_length\n                even_length = 0\n        elif increment % 2 == 0:\n            x = odd_length * increment\n            count += x\n        else:\n            x = odd_length * increment\n            count += x\n            even_length += odd_length\n            odd_length = 0\n        print(sum_of_array + count)\n\ndef main():\n    test_cases = int(input())\n    for i in range(test_cases):\n        even_odd_increment()\nmain()", "def even_odd_increment():\n    t = int(input())\n    for i in range(t):\n        (len_arr, no_of_queries) = map(int, input().split())\n        elements = list(map(int, input().split()))\n        (even, odd) = (0, 0)\n        for e in elements:\n            if e % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        increment = 0\n        sum_array = sum(elements)\n        for j in range(no_of_queries):\n            (tj, xj) = map(int, input().split())\n            if tj == 0:\n                if xj % 2 == 0:\n                    x = even * xj\n                    increment += x\n                else:\n                    x = even * xj\n                    increment += x\n                    odd += even\n                    even = 0\n            elif xj % 2 == 0:\n                x = odd * xj\n                increment += x\n            else:\n                x = odd * xj\n                increment += x\n                even += odd\n                odd = 0\n            print(sum_array + increment)\neven_odd_increment()", "def solve():\n    I = input\n    (n, q) = map(int, I().split())\n    a = list(map(int, I().split()))\n    odd = [i for i in a if i % 2]\n    even = [i for i in a if i % 2 == 0]\n    (cnt, cnt1) = (sum(even), sum(odd))\n    o = len(odd)\n    e = len(even)\n    for _ in range(q):\n        (q_type, x) = map(int, I().split())\n        if q_type:\n            if x % 2:\n                cnt1 = x * o + cnt1\n                o = 0\n                e = n\n            else:\n                cnt1 = x * o + cnt1\n        elif x % 2:\n            cnt = x * e + cnt\n            e = 0\n            o = n\n        else:\n            cnt = x * e + cnt\n        print(cnt + cnt1)\nfor _ in range(int(input())):\n    solve()", "def solve():\n    I = input\n    (n, q) = map(int, I().split())\n    a = list(map(int, I().split()))\n    odd = [i for i in a if i % 2]\n    (cnt, cnt1) = (sum(a) - sum(odd), sum(odd))\n    o = len(odd)\n    e = n - o\n    for _ in range(q):\n        (q_type, x) = map(int, I().split())\n        if q_type:\n            if x % 2:\n                cnt1 = x * o + cnt1\n                o = 0\n                e = n\n            else:\n                cnt1 = x * o + cnt1\n        elif x % 2:\n            cnt = x * e + cnt\n            e = 0\n            o = n\n        else:\n            cnt = x * e + cnt\n        print(cnt + cnt1)\nfor _ in range(int(input())):\n    solve()", "def check(n, q):\n    st = input().split()\n    s1 = 0\n    s0 = 0\n    sm = 0\n    for el in st:\n        eln = int(el)\n        if eln % 2:\n            s1 += 1\n        else:\n            s0 += 1\n        sm += eln\n    for ii in range(q):\n        (t, x) = map(int, input().split())\n        if t == 0:\n            sm += s0 * x\n            if x % 2:\n                s1 += s0\n                s0 = 0\n        else:\n            sm += s1 * x\n            if x % 2:\n                s0 += s1\n                s1 = 0\n        print(sm)\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    check(a, b)", "import sys\nimport threading\nfrom functools import lru_cache\nfrom collections import defaultdict, deque\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, q) = [int(i) for i in input().split()]\n        a = [int(i) for i in input().split()]\n        even_count = 0\n        odd_count = 0\n        cur_sum = 0\n        for num in a:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            cur_sum += num\n        for i in range(q):\n            (type, x) = [int(i) for i in input().split()]\n            if type == 0:\n                cur_sum += even_count * x\n            else:\n                cur_sum += odd_count * x\n            is_odd = x % 2 != 0\n            if is_odd:\n                if type == 0:\n                    odd_count = n\n                    even_count = 0\n                else:\n                    odd_count = 0\n                    even_count = n\n            print(cur_sum)\nsys.setrecursionlimit(1 << 30)\nthreading.stack_size(1 << 27)\nmain_thread = threading.Thread(target=main)\nmain_thread.start()\nmain_thread.join()", "def main():\n    t = int(input())\n    for _ in range(t):\n        (n, q) = map(int, input().split())\n        l = [int(x) for x in input().split()]\n        od = ev = oc = ec = 0\n        for i in l:\n            if i % 2 == 1:\n                od += i\n                oc += 1\n            else:\n                ev += i\n                ec += 1\n        ans = 0\n        for i in range(q):\n            (a, b) = map(int, input().split())\n            ans = 0\n            if a == 0:\n                ev += ec * b\n                if b % 2 == 1:\n                    oc += ec\n                    ec = 0\n                    od += ev\n                    ev = 0\n                ans = ev + od\n            else:\n                od += oc * b\n                if b % 2 != 0:\n                    ec += oc\n                    oc = 0\n                    ev += od\n                    od = 0\n                ans = od + ev\n            print(ans)\nmain()", "def main():\n    t = int(input())\n    for i in range(t):\n        (n, q) = map(int, input().split())\n        a = list(map(int, input().split()))\n        jishu = [i for i in a if i % 2 == 1]\n        jslen = len(jishu)\n        oushulen = n - jslen\n        sums = sum(a)\n        for i in range(q):\n            (z, xi) = map(int, input().split())\n            if z == 0:\n                sums += oushulen * xi\n                if xi & 1:\n                    jslen = n\n                    oushulen = 0\n                print(sums)\n            else:\n                sums += jslen * xi\n                if xi & 1:\n                    oushulen = n\n                    jslen = 0\n                print(sums)\nmain()", "def main():\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    chet = 0\n    nchet = 0\n    total = 0\n    for i in range(n):\n        total += a[i]\n        if a[i] % 2 == 0:\n            chet += 1\n        else:\n            nchet += 1\n    for _ in range(q):\n        (tp, x) = map(int, input().split())\n        sm = 0\n        if tp == 0:\n            total += x * chet\n            if x % 2 == 1:\n                nchet += chet\n                chet = 0\n        if tp == 1:\n            total += x * nchet\n            if x % 2 == 1:\n                chet += nchet\n                nchet = 0\n        print(total)\nfor _ in range(int(input())):\n    main()", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    odd = 0\n    even = 0\n    ans = 0\n    for x in arr:\n        if x % 2 == 1:\n            odd += 1\n        else:\n            even += 1\n        ans += x\n    while q > 0:\n        (t, x) = map(int, input().split())\n        if t == 0:\n            ans += even * x\n            if x % 2 == 1:\n                odd += even\n                even = 0\n        else:\n            ans += odd * x\n            if x % 2 == 1:\n                even += odd\n                odd = 0\n        print(ans)\n        q -= 1", "def solve():\n    even_sum = 0\n    odd_sum = 0\n    odd_count = 0\n    even_count = 0\n    (n, q) = map(int, input().split())\n    l = list(map(int, input().split()))\n    for i in range(n):\n        if l[i] % 2 == 0:\n            even_sum += l[i]\n            even_count += 1\n        else:\n            odd_sum += l[i]\n            odd_count += 1\n    add_sum = 0\n    for j in range(q):\n        (t, x) = map(int, input().split())\n        if t == 0:\n            add_sum += even_count * x\n            if x % 2 != 0:\n                odd_count += even_count\n                even_count = 0\n        else:\n            add_sum += odd_count * x\n            if x % 2 != 0:\n                even_count += odd_count\n                odd_count = 0\n        print(even_sum + odd_sum + add_sum)\nfor i in range(int(input())):\n    solve()", "def solve():\n    (n, q) = map(int, input().split())\n    l = list(map(int, input().split()))\n    (s, e, o) = (0, 0, 0)\n    for i in range(n):\n        if l[i] % 2:\n            o += 1\n        else:\n            e += 1\n        s += l[i]\n    for i in range(q):\n        (type, val) = map(int, input().split())\n        if type == 0:\n            s += val * e\n            if val % 2:\n                o += e\n                e = 0\n        else:\n            s += val * o\n            if val % 2:\n                e += o\n                o = 0\n        print(s)\nt = int(input())\nfor i in range(t):\n    solve()", "from collections import defaultdict\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, q) = map(int, input().split())\n        (*nums,) = map(int, input().split())\n        total = sum(nums)\n        added = 0\n        odds = 0\n        evens = 0\n        for num in nums:\n            if num % 2 == 0:\n                evens += 1\n            else:\n                odds += 1\n        for query in range(q):\n            (op, val) = map(int, input().split())\n            if op == 0:\n                added += evens * val\n                if val % 2 != 0:\n                    odds += evens\n                    evens = 0\n            elif op == 1:\n                added += odds * val\n                if val % 2 != 0:\n                    evens += odds\n                    odds = 0\n            total = total + added\n            print(total)\n            added = 0\nmain()", "def main():\n    t = int(input())\n    for i in range(t):\n        (n, q) = map(int, input().split())\n        a = list(map(int, input().split()))\n        olen = len([i for i in a if not i % 2])\n        jlen = n - olen\n        suma = sum(a)\n        for i in range(q):\n            (z, xi) = map(int, input().split())\n            if z == 0:\n                suma += xi * olen\n                if xi & 1:\n                    olen = 0\n                    jlen = n\n                print(suma)\n            else:\n                suma += xi * jlen\n                if xi & 1:\n                    olen = n\n                    jlen = 0\n                print(suma)\nmain()", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    oc = 0\n    tc = 0\n    for x in map(int, input().split()):\n        tc += x\n        oc += x % 2\n    ec = n - oc\n    for __ in range(q):\n        (t, x) = map(int, input().split())\n        if t == 0 and ec > 0:\n            tc += ec * x\n            if x % 2:\n                ec = 0\n                oc = n\n        elif t == 1 and oc > 0:\n            tc += oc * x\n            if x % 2:\n                oc = 0\n                ec = n\n        print(tc)", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = sum(arr)\n    odds = 0\n    evens = 0\n    for num in arr:\n        if num % 2:\n            odds += 1\n        else:\n            evens += 1\n    for _ in range(q):\n        (a, b) = map(int, input().split())\n        if not a:\n            ans += evens * b\n            if b % 2:\n                odds += evens\n                evens = 0\n        else:\n            ans += odds * b\n            if b % 2:\n                evens += odds\n                odds = 0\n        print(ans)", "def single_case():\n    (n, q) = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    s = sum(t)\n    odd = sum((1 for el in t if el & 1))\n    p = [len(t) - odd, odd]\n    for _ in range(q):\n        (parity, value) = list(map(int, input().split()))\n        s += p[parity] * value\n        if value & 1:\n            p[parity ^ 1] = len(t)\n            p[parity] = 0\n        print(s)\nz = int(input())\nfor _ in range(z):\n    single_case()", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    count_odd = 0\n    count_even = 0\n    for i in a:\n        if i % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    ans = sum(a)\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        if x == 1:\n            ans += count_odd * y\n            if y % 2 != 0:\n                count_odd = 0\n                count_even = n\n        else:\n            ans += count_even * y\n            if y % 2 != 0:\n                count_even = 0\n                count_odd = n\n        print(ans)", "def solve():\n    (n, q) = map(int, input().split())\n    A = list(map(int, input().split()))\n    evenNumbers = 0\n    oddNumbers = 0\n    evenSum = 0\n    oddSum = 0\n    for i in range(n):\n        if A[i] % 2:\n            oddNumbers += 1\n            oddSum += A[i]\n        else:\n            evenNumbers += 1\n            evenSum += A[i]\n    for query in range(q):\n        (type, x) = map(int, input().split())\n        if type == 0:\n            evenSum += evenNumbers * x\n            if x % 2:\n                oddNumbers += evenNumbers\n                oddSum += evenSum\n                evenNumbers = 0\n                evenSum = 0\n        else:\n            oddSum += oddNumbers * x\n            if x % 2:\n                evenNumbers += oddNumbers\n                evenSum += oddSum\n                oddNumbers = 0\n                oddSum = 0\n        print(oddSum + evenSum)\nfor _ in range(int(input())):\n    solve()", "from collections import defaultdict\nt = int(input())\n\ndef solve():\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    sum_even = 0\n    sum_odd = 0\n    count_even = 0\n    count_odd = 0\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            count_even += 1\n        else:\n            sum_odd += arr[i]\n            count_odd += 1\n    while q:\n        (type, x) = map(int, input().split())\n        if type == 0:\n            sum_even += count_even * x\n            print(sum_even + sum_odd)\n            if x % 2 != 0:\n                count_even = 0\n                count_odd = n\n        else:\n            sum_odd += count_odd * x\n            print(sum_odd + sum_even)\n            if x % 2 != 0:\n                count_even = n\n                count_odd = 0\n        q -= 1\nwhile t:\n    solve()\n    t -= 1", "def main():\n    t = int(input())\n    for _ in range(t):\n        (n, q) = map(int, input().split())\n        li = [int(x) for x in input().split()]\n        (ev, od, sm) = (0, 0, 0)\n        for i in li:\n            if i % 2 == 0:\n                ev += 1\n            else:\n                od += 1\n            sm += i\n        for __ in range(q):\n            (typ, amt) = map(int, input().split())\n            if typ == 0:\n                sm += ev * amt\n                if amt % 2 != 0:\n                    od += ev\n                    ev = 0\n            else:\n                sm += od * amt\n                if amt % 2 != 0:\n                    ev += od\n                    od = 0\n            print(sm)\nmain()", "def opr():\n    s = input().split()\n    n = int(s[0])\n    q = int(s[1])\n    s = input().split()\n    (odd, even, ans) = (0, 0, 0)\n    for i in s:\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        ans += int(i)\n    for i in range(q):\n        qr = input().split()\n        if qr[0] == '0':\n            ans += even * int(qr[1])\n            if int(qr[1]) % 2 != 0:\n                odd += even\n                even = 0\n        else:\n            ans += odd * int(qr[1])\n            if int(qr[1]) % 2 != 0:\n                even += odd\n                odd = 0\n        print(ans)\nT = int(input())\nwhile T > 0:\n    T -= 1\n    opr()", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = sum(a)\n    e = 0\n    o = 0\n    for ele in a:\n        if ele % 2 == 0:\n            e += 1\n        else:\n            o += 1\n    for _ in range(q):\n        (typej, xj) = map(int, input().split())\n        if typej == 0:\n            ans += e * xj\n            if xj % 2 != 0:\n                o += e\n                e = 0\n            print(ans)\n        else:\n            ans += o * xj\n            if xj % 2 != 0:\n                e += o\n                o = 0\n            print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    sm = sum(a)\n    evn = 0\n    odd = 0\n    for i in a:\n        if i % 2 == 0:\n            evn += 1\n        else:\n            odd += 1\n    for _ in range(q):\n        (x, y) = map(int, input().split())\n        if x == 1:\n            sm += odd * y\n            if y % 2 != 0:\n                evn = n\n                odd = 0\n        else:\n            sm += evn * y\n            if y % 2 != 0:\n                evn = 0\n                odd = n\n        print(sm)", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    cnt_even = 0\n    for j in a:\n        if j % 2 == 0:\n            cnt_even += 1\n    cnt_odd = n - cnt_even\n    for i in range(q):\n        (type, x) = map(int, input().split())\n        if type == 0:\n            s = s + cnt_even * x\n            if x % 2 == 1:\n                cnt_odd = n\n                cnt_even = 0\n        else:\n            s = s + cnt_odd * x\n            if x % 2 == 1:\n                cnt_even = n\n                cnt_odd = 0\n        print(s)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ev = 0\n    sump = sum(a)\n    for j in range(n):\n        if a[j] % 2 == 0:\n            ev += 1\n    od = n - ev\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        if x == 0:\n            sump += ev * y\n            if y % 2 == 1:\n                ev = 0\n                od = n\n        else:\n            sump += od * y\n            if y % 2 == 1:\n                ev = n\n                od = 0\n        print(sump)"]