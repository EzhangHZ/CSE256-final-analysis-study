["t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    vals = list(map(int, input().split()))\n    (L, R) = map(int, input().split())\n    L -= 1\n    R -= 1\n    s = 0\n    xr = 0\n    for i in range(L, R + 1):\n        s += vals[i]\n        xr ^= vals[i]\n    f = s - xr\n    (l, r) = (L, L)\n    (ml, mr) = (L, R)\n    (curs, curxr) = (0, 0)\n    while r <= R:\n        curs += vals[r]\n        curxr ^= vals[r]\n        if curs - curxr == f:\n            while l < r and curs - vals[l] - (curxr ^ vals[l]) == f:\n                curs -= vals[l]\n                curxr ^= vals[l]\n                l += 1\n            if mr - ml > r - l:\n                (mr, ml) = (r, l)\n        r += 1\n    print(ml + 1, mr + 1)", "import sys\nimport math\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, q) = map(int, inp().split())\n    a = list(map(int, inp().split()))\n    p = [0] * (n + 1)\n    x = [0] * (n + 1)\n    for i in range(n):\n        p[i + 1] = p[i] + a[i]\n    for i in range(n):\n        x[i + 1] = x[i] ^ a[i]\n\n    def cost(l, r):\n        return p[r] - p[l - 1] - (x[r] ^ x[l - 1])\n    for i in range(q):\n        (l, r) = map(int, inp().split())\n        ans = cost(l, r)\n        answ = (n + 10, -1, -1)\n        rr = r\n        for i in range(l, r + 1):\n            rr = max(i, rr)\n            while rr < n and cost(i, rr) < ans:\n                rr += 1\n            while rr - 1 >= i and cost(i, rr - 1) >= ans:\n                rr -= 1\n            if cost(i, rr) == ans:\n                answ = min(answ, (rr - i, i, rr))\n        print(answ[1], answ[2])\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "from math import *\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (L, R) = map(int, input().split())\n    pairs = dict()\n    pref_s = [0]\n    pref_x = pref_s[:]\n    for i in range(n):\n        pref_s.append(pref_s[-1] + a[i])\n        pref_x.append(pref_x[-1] ^ a[i])\n    (l, r) = (1, n)\n    pred = pref_s[r] - pref_s[l - 1] - (pref_x[r] ^ pref_x[l - 1])\n    l = r = 1\n    for i in range(2, n + 1):\n        r = i\n        s = pref_s[r] - pref_s[l - 1] - (pref_x[r] ^ pref_x[l - 1])\n        if pred == s:\n            while l + 1 <= r and pref_s[r] - pref_s[l] - (pref_x[r] ^ pref_x[l]) >= s:\n                s = pref_s[r] - pref_s[l - 1] - (pref_x[r] ^ pref_x[l - 1])\n                l += 1\n        pairs[l, r] = s\n    l = r = 1\n    ans = 0\n    for key in pairs:\n        if ans < pairs[key] or (ans == pairs[key] and r - l + 1 > key[1] - key[0] + 1):\n            (l, r) = (key[0], key[1])\n            ans = pairs[key]\n    print(l, r)", "def compute(prefixS, prefixXor, l, r):\n    if l == 0:\n        return prefixS[r] - prefixXor[r]\n    return prefixS[r] - prefixS[l - 1] - (prefixXor[r] ^ prefixXor[l - 1])\nt = int(input())\nwhile t:\n    (n, q) = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    (l, r) = list(map(int, input().split()))\n    l -= 1\n    r -= 1\n    prefixS = nums[:]\n    prefixXor = nums[:]\n    for i in range(1, n):\n        prefixS[i] += prefixS[i - 1]\n        prefixXor[i] ^= prefixXor[i - 1]\n    maxSum = prefixS[n - 1] - prefixXor[n - 1]\n    (start, end) = (1, n - 1)\n    while start <= end:\n        mid = (start + end) // 2\n        (i, j) = (0, mid - 1)\n        flag = 0\n        while j < n:\n            temp = compute(prefixS, prefixXor, i, j)\n            if temp == maxSum:\n                flag = 1\n                break\n            j += 1\n            i += 1\n        if flag:\n            (l, r) = (i, j)\n            end = mid - 1\n        else:\n            start = mid + 1\n    print(l + 1, ' ', r + 1)\n    t -= 1", "def compute(prefixS, prefixXor, l, r):\n    if l == 0:\n        return prefixS[r] - prefixXor[r]\n    return prefixS[r] - prefixS[l - 1] - (prefixXor[r] ^ prefixXor[l - 1])\nt = int(input())\nwhile t:\n    (n, q) = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    (l, r) = list(map(int, input().split()))\n    l -= 1\n    r -= 1\n    prefixS = nums[:]\n    prefixXor = nums[:]\n    for i in range(1, n):\n        prefixS[i] += prefixS[i - 1]\n        prefixXor[i] ^= prefixXor[i - 1]\n    maxSum = prefixS[n - 1] - prefixXor[n - 1]\n    (start, end) = (1, n - 1)\n    while start <= end:\n        mid = (start + end) // 2\n        (i, j) = (0, mid - 1)\n        flag = 0\n        while j < n:\n            temp = compute(prefixS, prefixXor, i, j)\n            if temp == maxSum:\n                flag = 1\n                break\n            j += 1\n            i += 1\n        if flag:\n            (l, r) = (i, j)\n            end = mid - 1\n        else:\n            start = mid + 1\n    print(l + 1, ' ', r + 1)\n    t -= 1", "import math\nI = input\nt = int(I())\nwhile t > 0:\n    t -= 1\n    (n, q) = map(int, I().split())\n    a = [*map(int, I().split())]\n    psum = [0] * n\n    pxor = [0] * n\n    for i in range(0, n):\n        psum[i] = (psum[i - 1] if i else 0) + a[i]\n        pxor[i] = (pxor[i - 1] if i else 0) ^ a[i]\n    (l, r) = map(int, I().split())\n    mxval = 0\n    ans = (0, 0)\n    for i in range(n):\n        l = i\n        h = n - 1\n        pps = 0 if not i else psum[i - 1]\n        ppx = 0 if not i else pxor[i - 1]\n        mx = psum[h] - pps - (pxor[h] ^ ppx)\n        if mx < mxval:\n            continue\n        while l < h:\n            m = l + (h - l) // 2\n            f = psum[m] - pps - (pxor[m] ^ ppx)\n            if f < mx:\n                l = m + 1\n            else:\n                h = m\n        if mx > mxval or h - i < ans[1] - ans[0]:\n            mxval = mx\n            ans = (i, h)\n    print(ans[0] + 1, ans[1] + 1)", "test = int(input())\nfor testtest in range(test):\n    (n, q) = map(int, input().split())\n    L = list(map(int, input().split()))\n    (l, r) = map(int, input().split())\n    s = 0\n    x = 0\n    S = [0] * n\n    X = [0] * n\n    for i in range(n):\n        s += L[i]\n        x ^= L[i]\n        S[i] = s\n        X[i] = x\n    S += [0]\n    X += [0]\n    Ans = [0, n - 1]\n    for i in range(0, n):\n        a = i\n        b = n - 1\n        while a < b:\n            c = (a + b) // 2\n            if S[c] - S[i - 1] - (X[c] ^ X[i - 1]) == s - x:\n                b = c\n                continue\n            else:\n                a = c + 1\n                continue\n        if a - i < Ans[1] - Ans[0]:\n            Ans = [i, a]\n        if S[n - 1] - S[i] - (X[n - 1] ^ X[i]) != s - x:\n            break\n    print(Ans[0] + 1, Ans[1] + 1)"]