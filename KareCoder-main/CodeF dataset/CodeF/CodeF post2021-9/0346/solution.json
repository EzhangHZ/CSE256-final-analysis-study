["import sys\nDEBUG = False\n\ndef transform(s, chars):\n    n_steps = 0\n    new_s\n\ndef check(s, chars):\n    chars = set(chars)\n    max_len = 0\n    cur_len = 0\n    prev_was = 0\n    for c in s:\n        if not c in chars:\n            cur_len += 1\n        else:\n            max_len = max(max_len, cur_len + prev_was)\n            cur_len = 0\n            prev_was = 1\n    print(max_len)\n\ndef main(f):\n    t = int(f.readline())\n    for i in range(t):\n        n = int(f.readline())\n        s = f.readline().strip()\n        special_chars = f.readline().split()[1:]\n        check(s, special_chars)\nif DEBUG:\n    f = open('input.txt', 'r')\nelse:\n    f = sys.stdin\nmain(f)\nf.close()", "import sys\ninput = sys.stdin.readline\nfor t in range(int(input())):\n    n = int(input())\n    s = input()\n    k = input().split()[1:]\n    m = e = 0\n    for i in range(n):\n        if s[i] in k:\n            e = max(e, i - m)\n            m = i\n    print(e)", "import sys\ninput = sys.stdin.readline\nfor i in range(int(input())):\n    lenn = int(input())\n    string = input()\n    inp = input().split()\n    (lenn1, special) = (inp[0], inp[1:])\n    len_subs = []\n    count = 0\n    huh = 0\n    first = -1\n    for i in range(lenn):\n        if string[i] in special:\n            if first == -1:\n                first = i\n                huh = 1\n            else:\n                huh = 0\n                second = i\n                len_subs.append(second - first)\n                first = i\n            if huh == 1:\n                len_subs.append(i)\n    try:\n        print(max(len_subs))\n    except:\n        print(0)", "import sys\nI = sys.stdin.readline\nfor _ in range(int(I())):\n    n = int(I())\n    s = I().strip()\n    lst = set(I().split()[1:])\n    (res, cur) = (0, 0)\n    for c in s:\n        if c in lst:\n            res = max(res, cur)\n            cur = 1\n        else:\n            cur += 1\n    print(res)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    k = set(input().split())\n    p = 0\n    c = 0\n    m = 0\n    for i in range(n - 1):\n        if s[i + 1] not in k:\n            c += 1\n        else:\n            m = max(m, c + 1)\n            c = 0\n    print(m)", "from sys import stdin, stdout\nimport collections\nimport math\n\ndef solve():\n    return\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        s = input().strip()\n        k = input().split()\n        k.pop(0)\n        k = set(k)\n        g = []\n        for i in range(n):\n            if s[i] in k:\n                g.append(i)\n        ans = 0\n        if g and g[0] != 0:\n            g.insert(0, 0)\n        for i in range(len(g) - 1):\n            ans = max(ans, g[i + 1] - g[i])\n        print(ans)\n    return\ninput = stdin.readline\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    N = int(input())\n    P = input()\n    S = set(input().split()[1:])\n    specials = []\n    for (i, c) in enumerate(P):\n        if c in S:\n            specials.append(i)\n    lifes = []\n    for i in range(len(specials)):\n        if len(lifes) == 0:\n            lifes.append(specials[i])\n        else:\n            lifes.append(max(lifes[-1], specials[i] - specials[i - 1]))\n    if not lifes:\n        return 0\n    else:\n        return lifes[-1]\nfor _ in range(int(input())):\n    print(solve())", "from sys import stdin, setrecursionlimit\ninput = stdin.readline\nsetrecursionlimit(int(1000000000.0))\n\ndef ii():\n    return int(input())\n\ndef li():\n    return list(map(int, input().split()))\nfor _ in range(ii()):\n    n = ii()\n    s = input().strip()\n    a = input().split()\n    a = set(a)\n    (cnt, ans) = (0, 0)\n    for i in s:\n        if i in a:\n            ans = max(ans, cnt)\n            cnt = 1\n        else:\n            cnt += 1\n    print(ans)", "import math, bisect, heapq, random, sys, itertools\nsys.setrecursionlimit(2 * 10 ** 5)\ninput = sys.stdin.readline\n\ndef gprint(t, ans=''):\n    print(f'Case #{t + 1}:', ans)\nints = lambda : list(map(int, input().split()))\nalpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\np2 = [1]\np = 10 ** 9 + 7\ninf = 10 ** 20 + 7\nfact = [1]\nANS = []\nfor t in range(int(input())):\n    n = int(input())\n    a = input().strip()\n    b = input().strip().split()\n    b = set(b[1:])\n    ans = 0\n    c = 0\n    start = p\n    for i in range(n - 1, -1, -1):\n        if a[i] in b:\n            start = i - 1\n            break\n    if start == p:\n        print(0)\n    else:\n        for i in range(start, -1, -1):\n            c += 1\n            ans = max(c, ans)\n            if a[i] in b:\n                c = 0\n        print(ans)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    c = list(input().split())[1:]\n    c = set(c)\n    t = 0\n    m = 0\n    for i in range(n):\n        if s[i] in c:\n            m = max(m, t)\n            t = 1\n        else:\n            t += 1\n    print(m)", "import sys\nT = int(sys.stdin.readline().strip())\nfor t in range(T):\n    n = int(sys.stdin.readline().strip())\n    s = sys.stdin.readline().strip()\n    tmp = sys.stdin.readline().strip().split(' ')\n    delete = set(tmp[1:])\n    ans = 0\n    pre = 0\n    for c in s:\n        if c not in delete:\n            pre += 1\n        else:\n            ans = max(ans, pre)\n            pre = 1\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, s) = (int(input()), input())\n    spe = set([*input().split()][1:])\n    pre = res = 0\n    for i in range(n):\n        if s[i] in spe:\n            res = max(res, i - pre)\n            pre = i\n    print(res)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    c = list(input().split())[1:]\n    c = set(c)\n    t = 0\n    m = 0\n    for i in range(n):\n        if s[i] in c:\n            m = max(m, t)\n            t = 1\n        else:\n            t += 1\n    print(m)", "def solve() -> int:\n    n = int(input())\n    password = input()\n    (_, *special) = input().split()\n    special = set(special)\n    result = None\n    current = 0\n    for char in password:\n        if char in special:\n            if result is None:\n                result = current\n            else:\n                result = max(result, current + 1)\n            current = 0\n        else:\n            current += 1\n    if result is None:\n        result = 0\n    return result\nresults = []\nfor _ in range(int(input())):\n    results.append(str(solve()))\nprint('\\n'.join(results))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    str = input()\n    c = set(list(input().split())[1:])\n    t = 0\n    m = 0\n    for i in range(n):\n        if str[i] in c:\n            m = max(m, t)\n            t = 1\n        else:\n            t += 1\n    print(m)", "import sys\ninput = sys.stdin.readline\nfor f in range(int(input())):\n    (n, s) = (int(input()), input())\n    d = set([*input().split()][1:])\n    p = r = 0\n    for i in range(n):\n        if s[i] in d:\n            r = max(r, i - p)\n            p = i\n    print(r)", "import sys\ninput = sys.stdin.readline\nfor f in range(int(input())):\n    (n, s) = (int(input()), input())\n    d = set([*input().split()][1:])\n    p = r = 0\n    for i in range(n):\n        if s[i] in d:\n            r = max(r, i - p)\n            p = i\n    print(r)", "import sys\ninput = sys.stdin.readline\nfor f in range(int(input())):\n    (n, s) = (int(input()), input())\n    d = set([*input().split()][1:])\n    p = r = 0\n    for i in range(n):\n        if s[i] in d:\n            r = max(r, i - p)\n            p = i\n    print(r)", "import sys\ninput = sys.stdin.readline\nfor f in range(int(input())):\n    (n, s) = (int(input()), input())\n    d = set([*input().split()][1:])\n    p = r = 0\n    for i in range(n):\n        if s[i] in d:\n            r = max(r, i - p)\n            p = i\n    print(r)", "import sys\ninput = sys.stdin.readline\nfor t in range(int(input())):\n    n = int(input())\n    s = input()\n    k = set(input().split()[1:])\n    m = e = 0\n    for i in range(n):\n        if s[i] in k:\n            e = max(e, i - m)\n            m = i\n    print(e)", "import sys\nT = int(sys.stdin.readline().strip())\nfor t in range(T):\n    n = int(sys.stdin.readline().strip())\n    s = sys.stdin.readline().strip()\n    tmp = sys.stdin.readline().strip().split(' ')\n    delete = set(tmp[1:])\n    ans = 0\n    pre = 0\n    for c in s:\n        if c not in delete:\n            pre += 1\n        else:\n            ans = max(ans, pre)\n            pre = 1\n    print(ans)", "from sys import stdin, setrecursionlimit\ninput = stdin.readline\nsetrecursionlimit(int(1000000000.0))\n\ndef ii():\n    return int(input())\n\ndef li():\n    return list(map(int, input().split()))\nfor _ in range(ii()):\n    n = ii()\n    s = input().strip()\n    a = input().split()\n    a = set(a)\n    (cnt, ans) = (0, 0)\n    for i in s:\n        if i in a:\n            ans = max(ans, cnt)\n            cnt = 1\n        else:\n            cnt += 1\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfor f in range(int(input())):\n    (n, s) = (int(input()), input())\n    d = set([*input().split()][1:])\n    p = r = 0\n    for i in range(n):\n        if s[i] in d:\n            r = max(r, i - p)\n            p = i\n    print(r)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    dlugosc = int(input())\n    slowo = input()\n    unikat = set(input().split()[1:])\n    temp = 0\n    odp = 0\n    for i in range(dlugosc):\n        if slowo[i] in unikat:\n            odp = max(odp, temp)\n            temp = 1\n        else:\n            temp += 1\n    print(odp)", "import sys\ninput = sys.stdin.readline\nfor i in range(int(input())):\n    n = int(input())\n    pas = input()\n    a = set(list(input().split())[1:])\n    z = m = 0\n    for j in range(n):\n        if pas[j] in a:\n            m = max(m, z)\n            z = 1\n        else:\n            z += 1\n    print(m)", "import sys\ninput = sys.stdin.readline\nfor f in range(int(input())):\n    (n, s) = (int(input()), input())\n    d = set([*input().split()][1:])\n    p = r = 0\n    for i in range(n):\n        if s[i] in d:\n            r = max(r, i - p)\n            p = i\n    print(r)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    c = list(input().split())[1:]\n    c = set(c)\n    t = 0\n    m = 0\n    for i in range(n):\n        if s[i] in c:\n            m = max(m, t)\n            t = 1\n        else:\n            t += 1\n    print(m)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    c = set(list(input().split())[1:])\n    t = 0\n    m = 0\n    for i in range(n):\n        if s[i] in c:\n            m = max(m, t)\n            t = 1\n        else:\n            t += 1\n    print(m)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()[:-1]\n    d = set(input()[:-1].split()[1:])\n    m = 0\n    c = 0\n    for i in range(n):\n        if s[i] in d:\n            m = max(m, c)\n            c = 0\n        c += 1\n    print(m)", "import sys\nI = sys.stdin.readline\nfor _ in range(int(I())):\n    n = int(I())\n    s = I().strip()\n    lst = set(I().split()[1:])\n    (res, cur) = (0, 0)\n    for c in s:\n        if c in lst:\n            res = max(res, cur)\n            cur = 1\n        else:\n            cur += 1\n    print(res)", "import math\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    se = set([*input().split()][1:])\n    mx = 0\n    cur = 0\n    for i in range(n):\n        if s[i] in se:\n            mx = max(mx, i - cur)\n            cur = i\n    print(mx)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    c = list(input().split())[1:]\n    c = set(c)\n    t = 0\n    m = 0\n    for i in range(n):\n        if s[i] in c:\n            m = max(m, t)\n            t = 1\n        else:\n            t += 1\n    print(m)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    c = list(input().split())[1:]\n    c = set(c)\n    t = 0\n    m = 0\n    for i in range(n):\n        if s[i] in c:\n            m = max(m, t)\n            t = 1\n        else:\n            t += 1\n    print(m)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    c = list(input().split())[1:]\n    c = set(c)\n    m = 0\n    t = 0\n    for j in range(n):\n        if s[j] in c:\n            m = max(m, t)\n            t = 1\n        else:\n            t += 1\n    print(m)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, s) = (int(input()), input())\n    spe = set([*input().split()][1:])\n    pre = res = 0\n    for i in range(n):\n        if s[i] in spe:\n            res = max(res, i - pre)\n            pre = i\n    print(res)", "import sys\ninput = sys.stdin.readline\nfor f in range(int(input())):\n    (n, s) = (int(input()), input())\n    d = set([*input().split()][1:])\n    p = r = 0\n    for i in range(n):\n        if s[i] in d:\n            r = max(r, i - p)\n            p = i\n    print(r)", "import sys\ninput = sys.stdin.readline\nfor f in range(int(input())):\n    n = int(input())\n    s = input()\n    d = set([*input().split()][1:])\n    c = ans = 0\n    for i in range(n):\n        if s[i] in d:\n            ans = max(ans, i - c)\n            c = i\n    print(ans)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cl = set(input().split()[1:])\n    (ans, prev) = (0, 0)\n    for i in s:\n        if i not in cl:\n            prev += 1\n        else:\n            ans = max(ans, prev)\n            prev = 1\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, s) = (int(input()), input())\n    spe = set([*input().split()][1:])\n    pre = res = 0\n    for i in range(n):\n        if s[i] in spe:\n            res = max(res, i - pre)\n            pre = i\n    print(res)", "import sys\nT = int(sys.stdin.readline())\nfor t in range(T):\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline()\n    tmp = sys.stdin.readline().split()\n    delete = set(tmp[1:])\n    ans = 0\n    pre = 0\n    for c in s:\n        if c not in delete:\n            pre += 1\n        else:\n            ans = max(ans, pre)\n            pre = 1\n    print(ans)", "import sys\nT = int(sys.stdin.readline())\nfor t in range(T):\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline()\n    tmp = sys.stdin.readline().strip().split(' ')\n    delete = set(tmp[1:])\n    ans = 0\n    pre = 0\n    for c in s:\n        if c not in delete:\n            pre += 1\n        else:\n            ans = max(ans, pre)\n            pre = 1\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    sp = set(input().split()[1:])\n    p = 0\n    ans = 0\n    for i in range(n):\n        if s[i] in sp:\n            ans = max(ans, i - p)\n            p = i\n    print(ans)", "import sys, math\nINF = 1 << 100\nmod = 1000000007\ninput = lambda : sys.stdin.readline().rstrip()\nli = lambda : list(map(int, input().split()))\nt = int(input())\nout = []\nfor _ in range(t):\n    N = int(input())\n    S = input()\n    C = input().split()\n    st = set(C[1:])\n    lst = []\n    if S[0] in st:\n        lst.append(1)\n    else:\n        lst.append(0)\n    x = 0\n    for i in range(1, N):\n        if S[i] in st:\n            if not lst[-1]:\n                lst.append(1)\n            else:\n                x = 1\n        else:\n            lst.append(0)\n    lst2 = [x]\n    cnt = 0\n    for i in range(len(lst)):\n        if lst[i]:\n            lst2.append(cnt)\n            cnt = 1\n        else:\n            cnt += 1\n    out.append(max(lst2))\nfor o in out:\n    print(o)", "import math as m\ni = input()\ninp = []\ninp2 = []\nfor a in range(0, int(i)):\n    input()\n    inp += [input()]\n    inp2 += [input()]\n\ndef maxx(arr):\n    if arr == []:\n        return 0\n    return max(arr)\nfor i in range(len(inp)):\n    s = inp[i]\n    S = inp2[i].split()\n    count = 0\n    a = []\n    for c in s:\n        if c in S:\n            a += [count]\n            count = 1\n        else:\n            count += 1\n    print(maxx(a))", "import sys\ninput = sys.stdin.readline\nfor jj in range(int(input())):\n    (n, s) = (int(input()), input())\n    arr = set([*input().split()][1:])\n    a = ans = 0\n    for i in range(n):\n        if s[i] in arr:\n            ans = max(ans, i - a)\n            a = i\n    print(ans)", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    s = input()\n    k = set(input().split()[1:])\n    ans = marker = 0\n    for i in range(n):\n        if s[i] in k:\n            ans = max(ans, i - marker)\n            marker = i\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    c = list(input().split()[1:])\n    c = set(c)\n    m = 0\n    t = 0\n    for j in range(n):\n        if s[j] in c:\n            m = max(m, t)\n            t = 1\n        else:\n            t += 1\n    print(m)", "import sys\nT = int(sys.stdin.readline())\nfor t in range(T):\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline()\n    tmp = sys.stdin.readline().strip().split()\n    delete = set(tmp[1:])\n    ans = 0\n    pre = 0\n    for c in s:\n        if c not in delete:\n            pre += 1\n        else:\n            ans = max(ans, pre)\n            pre = 1\n    print(ans)", "from math import inf, gcd, log, log2, floor, ceil, sqrt\nfrom collections import Counter, defaultdict\nfrom heapq import heappush, heappop, heapify\nfrom functools import lru_cache\nimport sys\nDIRS = [[1, 0], [0, 1], [0, -1], [-1, 0], [-1, -1], [1, 1], [-1, 1], [1, -1]]\nMOD = 10 ** 9 + 7\ninput = sys.stdin.readline\nt = int(input())\n\ndef solve():\n    n = int(input())\n    s = input().strip('\\n')\n    k = [x for x in input().strip('\\n').split(' ')]\n    kn = int(k[0])\n    k = set(k[1:])\n    spec = [0]\n    for i in range(n):\n        if s[i] in k:\n            spec.append(i)\n    if not spec:\n        print(0)\n        return\n    best = -inf\n    for i in range(1, len(spec)):\n        best = max(best, spec[i] - spec[i - 1])\n    print(max(best, 0))\nwhile t:\n    solve()\n    t -= 1", "import sys\nsys.setrecursionlimit(2 * 10 ** 5)\ninput = sys.stdin.readline\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input().strip()\n    arr = input().strip().split()\n    dict = {}\n    for j in range(1, len(arr)):\n        dict[arr[j]] = 1\n    st = 0\n    md = 0\n    for j in range(n):\n        if s[j] in dict.keys():\n            if j - st > md:\n                md = j - st\n            st = j\n    print(md)", "import math\nimport sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    special = [x for x in input().split()]\n    k = int(special[0])\n    special = set(special[1:])\n    current_pos = -1\n    previous_pos = -1\n    difference = 0\n    ans = -100\n    for i in range(n):\n        if s[i] in special:\n            previous_pos = current_pos\n            current_pos = i\n            if previous_pos == -1:\n                difference = current_pos\n            else:\n                difference = abs(current_pos - previous_pos)\n        ans = max(difference, ans)\n    print(ans)", "import sys\nt = int(sys.stdin.readline())\nfor i in range(t):\n    n = int(sys.stdin.readline())\n    password = sys.stdin.readline()\n    specials = list(map(str, sys.stdin.readline().split()))\n    specials.pop(0)\n    ans = 0\n    intervals = [0]\n    begin = 0\n    for (index, letter) in enumerate(password):\n        if letter in specials:\n            intervals.append(index - begin)\n            begin = index\n    print(max(intervals))", "import sys\ninput = sys.stdin.readline\n\ndef check(l1, l2):\n    for i in l1:\n        if i in l2:\n            return False\n            break\n    else:\n        return True\ntc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    s = input()\n    k = list(s)\n    c = list(input().split())\n    cnt = 0\n    i = 0\n    if check(c, k) == True:\n        print(0)\n    else:\n        l = []\n        a = 0\n        i = 0\n        for i in range(len(s)):\n            if s[i] in c and a == 0:\n                l.append(i)\n                a += 1\n            if s[i] in c and a != 0:\n                for j in range(i + 1, len(s)):\n                    if s[j] in c:\n                        l.append(j - i)\n                        break\n        print(max(l))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    s = input().strip()\n    arr = list(input().split())\n    bag = set()\n    for c in arr[1:]:\n        bag.add(c)\n    cnt = ans = 0\n    dis = {}\n    tmp = []\n    for i in range(n):\n        if s[i] in bag:\n            ans = max(ans, cnt)\n            if cnt not in dis:\n                dis[cnt] = 0\n            tmp.append(cnt)\n            dis[cnt] += 1\n            cnt = 0\n        else:\n            cnt += 1\n    if not tmp:\n        return ans\n    if dis[ans] > 1:\n        return ans + 1\n    else:\n        return ans if tmp[0] == ans else ans + 1\nfor _ in range(int(input())):\n    print(solve())", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    string = sys.stdin.readline().split()[0]\n    items = sys.stdin.readline().split()[1:]\n    hashmap = [0] * 27\n    for i in items:\n        hashmap[ord(i) - ord('a')] = 1\n    maxi = 0\n    pre = 0\n    for (index, val) in enumerate(string):\n        if hashmap[ord(val) - ord('a')]:\n            maxi = max(maxi, index - pre)\n            pre = index\n    print(maxi)", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor testcase in range(1, T + 1):\n    n = int(input())\n    s = input()\n    ss = [False for i in range(n)]\n    (k_, *c) = list(input().split())\n    f = set(c)\n    for i in range(n):\n        if s[i] in f:\n            ss[i] = True\n    cmax = 0\n    count = -2 * n\n    for l in ss[::-1]:\n        count += 1\n        if l:\n            cmax = max(cmax, count)\n            count = 0\n    cmax = max(cmax, count)\n    print(cmax)", "from sys import stdin\n\ndef input():\n    return stdin.readline().strip()\n\ndef read_int():\n    return int(input())\n\ndef read_ints():\n    return map(int, input().split())\nt = read_int()\nfor case_num in range(t):\n    n = read_int()\n    s = input()\n    special = input().split()[1:]\n    svec = [False] * 26\n    for ch in special:\n        svec[ord(ch) - ord('a')] = True\n    x = [i for (i, ch) in enumerate(s) if svec[ord(ch) - ord('a')]]\n    last = 0\n    ans = 0\n    for i in x:\n        ans = max(ans, i - last)\n        last = i\n    print(ans)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = input()\n    a = set(map(str, input().split()))\n    o = 0\n    maxx = 0\n    for j in range(n):\n        if l[j] in a:\n            maxx = max(maxx, o)\n            o = 1\n        else:\n            o += 1\n    print(maxx)", "import sys\nfrom collections import defaultdict\nMYPC = False\nif MYPC:\n    sys.stdin = open('in.txt', 'r')\n    sys.stdout = open('out.txt', 'w')\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nimport math\nfrom collections import defaultdict\nt = int(input())\nwhile t:\n    t -= 1\n    b = int(input())\n    s = input()\n    tej = input()\n    dic = defaultdict(bool)\n    for j in range(1, len(tej)):\n        dic[tej[j]] = True\n    ind = 0\n    par_ans = 0\n    for j in range(0, b):\n        if dic[s[j]]:\n            par_ans = max(par_ans, j - ind)\n            ind = j\n    print(par_ans)", "from collections import *\nALL = []\nfor _ in ' ' * int(input()):\n    n = int(input())\n    s = input()\n    a = input().split()\n    k = int(a[0])\n    a = a[1:]\n    d = defaultdict(int)\n    for i in a:\n        d[i] = 1\n    v = []\n    c = 0\n    mx = 0\n    c1 = 0\n    for i in s:\n        if i in d:\n            v.append(c)\n            c = 0\n        else:\n            c += 1\n    for i in v:\n        if i > mx:\n            mx = i\n            c1 = 1\n        elif mx == i:\n            c1 += 1\n    out = 0\n    if len(v) and mx >= 0:\n        if c1 > 1 or v[0] < mx:\n            out = mx + 1\n        else:\n            out = mx\n    ALL.append(out)\nprint(*ALL, sep='\\n')", "n = int(input())\ndatas = []\nfor i in range(n):\n    l = int(input())\n    s = input()\n    data = input().split()\n    letters = data[1:]\n    datas.append((s, letters))\n\ndef solve(s, letters):\n    letters = set(letters)\n    i = 0\n    m = None\n    c = 0\n    for l in s:\n        if l in letters:\n            if m is None:\n                m = i\n            else:\n                if c:\n                    i += 1\n                m = max(m, i)\n            i = 0\n            c += 1\n        if l not in letters:\n            i += 1\n    print(m or 0)\nfor (s, letters) in datas:\n    solve(s, letters)", "import sys\nimport math\nfrom math import gcd, sqrt, log2, ceil, floor\nimport heapq as hq\nfrom bisect import bisect_right, bisect_left, bisect\nimport itertools\nfrom sys import stdin, stdout, setrecursionlimit\nMOD = int(1000000000.0) + 7\nalp = 'abcdefghijklmnopqrstuvwxyz'\nT = 1\nT = int(stdin.readline())\nfor _ in range(T):\n    n = int(stdin.readline())\n    s = str(stdin.readline().strip('\\n'))\n    b = list(stdin.readline().strip('\\n'))\n    k = int(b[0])\n    d = {}\n    for i in b[1:]:\n        if i != ' ':\n            d[i] = 1\n    ss = ''\n    for i in s:\n        if i in d:\n            ss += '1'\n        else:\n            ss += '0'\n    ix = []\n    for i in range(n):\n        if ss[i] == '1':\n            ix.append(i)\n    ix = [0] + ix\n    ans = 0\n    for i in range(len(ix) - 1):\n        ans = max(ans, ix[i + 1] - ix[i])\n    print(ans)"]