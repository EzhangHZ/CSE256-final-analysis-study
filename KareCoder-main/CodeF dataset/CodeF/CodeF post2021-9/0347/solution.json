["import sys\nimport bisect\nimport math\nfrom collections import deque\ninput = lambda : sys.stdin.readline().strip()\nmod = 10 ** 9 + 7\n\ndef solve():\n    (n, q) = map(int, input().split())\n    s = input()\n    cnt = 0\n    for i in range(n):\n        if i + 2 < n and s[i:i + 3] == 'abc':\n            cnt += 1\n    s = list(s)\n    ans = ''\n    for _q in range(q):\n        (pos, char) = input().split()\n        pos = int(pos)\n        pos -= 1\n        if s[pos] != char:\n            if s[pos] == 'a' and pos + 2 < n and (s[pos:pos + 3] == ['a', 'b', 'c']):\n                cnt -= 1\n            elif s[pos] == 'b' and 0 < pos < n - 1 and (s[pos - 1:pos + 2] == ['a', 'b', 'c']):\n                cnt -= 1\n            elif s[pos] == 'c' and pos > 1 and (s[pos - 2:pos + 1] == ['a', 'b', 'c']):\n                cnt -= 1\n            s[pos] = char\n            if s[pos] == 'a' and pos + 2 < n and (s[pos:pos + 3] == ['a', 'b', 'c']):\n                cnt += 1\n            elif s[pos] == 'b' and 0 < pos < n - 1 and (s[pos - 1:pos + 2] == ['a', 'b', 'c']):\n                cnt += 1\n            elif s[pos] == 'c' and pos > 1 and (s[pos - 2:pos + 1] == ['a', 'b', 'c']):\n                cnt += 1\n        ans += str(cnt) + '\\n'\n    return ans[:-1]\nt = 1\nfor _ in range(t):\n    print(solve())", "from sys import stdin\ninput = stdin.readline\n(n, q) = [int(i) for i in input().split()]\ns = list(input())\nm = ''.join(s)\nc = m.count('abc')\nfor i in range(q):\n    (a, b) = input().split()\n    a = int(a) - 1\n    if s[a] == b:\n        print(c)\n        continue\n    if s[a] == 'a':\n        if a < n - 2 and s[a + 1] == 'b' and (s[a + 2] == 'c'):\n            c -= 1\n    elif s[a] == 'c':\n        if a > 1 and s[a - 2] == 'a' and (s[a - 1] == 'b'):\n            c -= 1\n    elif s[a] == 'b':\n        if a < n - 1 and a > 0 and (s[a - 1] == 'a') and (s[a + 1] == 'c'):\n            c -= 1\n    s[a] = b\n    if b == 'a':\n        if a < n - 2 and s[a + 1] == 'b' and (s[a + 2] == 'c'):\n            c += 1\n    elif b == 'c':\n        if a > 1 and s[a - 2] == 'a' and (s[a - 1] == 'b'):\n            c += 1\n    elif a < n - 1 and a > 0 and (s[a - 1] == 'a') and (s[a + 1] == 'c'):\n        c += 1\n    print(c)", "(n, q) = input().split()\n(n, q) = (int(n), int(q))\ns = input()\nabc = s.count('abc')\ns = list(s)\nlst = []\nwhile q > 0:\n    (i, c) = input().split()\n    i = int(i)\n    if s[i - 1] != c:\n        if i >= 1 and i + 1 <= len(s) - 1:\n            if s[i - 1] == 'a' and s[i] == 'b' and (s[i + 1] == 'c'):\n                abc -= 1\n            elif c == 'a' and s[i] == 'b' and (s[i + 1] == 'c'):\n                abc += 1\n        if i >= 2 and i <= len(s) - 1:\n            if s[i - 1] == 'b' and s[i - 2] == 'a' and (s[i] == 'c'):\n                abc -= 1\n            elif c == 'b' and s[i - 2] == 'a' and (s[i] == 'c'):\n                abc += 1\n        if i >= 3:\n            if s[i - 1] == 'c' and s[i - 2] == 'b' and (s[i - 3] == 'a'):\n                abc -= 1\n            elif c == 'c' and s[i - 2] == 'b' and (s[i - 3] == 'a'):\n                abc += 1\n    s[i - 1] = c\n    lst.append(str(abc))\n    q -= 1\nprint('\\n'.join(lst))", "import sys\n\ndef doStuff(i):\n    if s[i] == 'c':\n        if i > 1:\n            if s[i - 1] == 'b' and s[i - 2] == 'a':\n                return True\n    elif s[i] == 'b':\n        if i > 0 and i < n - 1:\n            if s[i - 1] == 'a' and s[i + 1] == 'c':\n                return True\n    elif i < n - 2:\n        if s[i + 1] == 'b' and s[i + 2] == 'c':\n            return True\n    return False\n(n, q) = map(int, sys.stdin.readline().split())\ns = sys.stdin.readline().rstrip()\nmn = s.count('abc')\ns = list(s)\nfor _ in range(q):\n    (i, c) = sys.stdin.readline().split()\n    i = int(i) - 1\n    if s[i] == c:\n        print(mn)\n        continue\n    if doStuff(i):\n        mn -= 1\n    s[i] = c\n    if doStuff(i):\n        mn += 1\n    print(mn)", "import sys\ninput = sys.stdin.readline\n(n, q) = map(int, input().split())\ns = input()[:-1]\nt = s.count('abc')\nw = list(s)\nfor _ in range(q):\n    (i, x) = input()[:-1].split()\n    i = int(i)\n    if w[i - 1] == x:\n        print(t)\n    else:\n        d = ''.join(w[max(0, i - 3):min(i + 2, n)])\n        c1 = d.count('abc')\n        w[i - 1] = x\n        d = ''.join(w[max(0, i - 3):min(i + 2, n)])\n        c2 = d.count('abc')\n        t -= c1 - c2\n        print(t)", "def solve(N, Q, S, queries):\n    S = list(S)\n    cnt = 0\n    for (i, c) in enumerate(S):\n        if c == 'a' and i + 2 < N and (S[i + 1] == 'b') and (S[i + 2] == 'c'):\n            cnt += 1\n    for (i, c) in queries:\n        if S[i] == 'a' and i + 2 < N and (S[i + 1] == 'b') and (S[i + 2] == 'c'):\n            cnt -= 1\n        elif S[i] == 'b' and i + 1 < N and (S[i + 1] == 'c') and (i - 1 >= 0) and (S[i - 1] == 'a'):\n            cnt -= 1\n        elif S[i] == 'c' and i - 2 >= 0 and (S[i - 2] == 'a') and (S[i - 1] == 'b'):\n            cnt -= 1\n        S[i] = c\n        if S[i] == 'a' and i + 2 < N and (S[i + 1] == 'b') and (S[i + 2] == 'c'):\n            cnt += 1\n        elif S[i] == 'b' and i + 1 < N and (S[i + 1] == 'c') and (i - 1 >= 0) and (S[i - 1] == 'a'):\n            cnt += 1\n        elif S[i] == 'c' and i - 2 >= 0 and (S[i - 2] == 'a') and (S[i - 1] == 'b'):\n            cnt += 1\n        print(cnt)\n(N, Q) = list(map(int, input().split()))\nS = input()\nqueries = []\nfor i in range(Q):\n    (num, c) = map(str, input().split())\n    queries.append((int(num) - 1, c))\nsolve(N, Q, S, queries)", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, q) = map(int, inp().split())\n    a = [None] * (n + 4)\n    i = 2\n    for c in inp():\n        a[i] = c\n        i += 1\n    a[1] = 'd'\n    a[0] = 'd'\n    a[n + 2] = 'd'\n    a[n + 3] = 'd'\n    r = 0\n    for i in range(2, n + 2):\n        r += a[i] == 'a' and a[i + 1] == 'b' and (a[i + 2] == 'c')\n    for i in range(q):\n        (p, c) = inp().split()\n        p = int(p)\n        for i in range(p - 1, p + 2):\n            r -= a[i] == 'a' and a[i + 1] == 'b' and (a[i + 2] == 'c')\n        a[p + 1] = c\n        for i in range(p - 1, p + 2):\n            r += a[i] == 'a' and a[i + 1] == 'b' and (a[i + 2] == 'c')\n        print(r)\n\ndef main():\n    solve()\nmain()", "(n, q) = map(int, input().split())\nstr = input()\nres = str.count('abc')\n\ndef is_abc(my_str, idx):\n    str_len = len(my_str)\n    if my_str[idx - 1] == 'a':\n        if idx >= str_len - 1:\n            return False\n        else:\n            return my_str[idx - 1:idx + 2] == ['a', 'b', 'c']\n    if my_str[idx - 1] == 'b':\n        if idx == str_len or idx == 1:\n            return False\n        else:\n            return my_str[idx - 2:idx + 1] == ['a', 'b', 'c']\n    if my_str[idx - 1] == 'c':\n        if idx < 3:\n            return False\n        else:\n            return my_str[idx - 3:idx] == ['a', 'b', 'c']\n    return False\nstr = list(str)\nf_res = []\nfor _ in range(q):\n    (idx, let) = input().split()\n    idx = int(idx)\n    if is_abc(str, idx) == True:\n        str[idx - 1] = let\n        if is_abc(str, idx) != True:\n            res -= 1\n    else:\n        str[idx - 1] = let\n        if is_abc(str, idx) == True:\n            res += 1\n    f_res.append(res)\nfor a in f_res:\n    print(a)", "import sys\nimport math\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\ndef SI():\n    return sys.stdin.readline().strip()\n\ndef multi_Fun(arr):\n    count = 0\n    for i in range(n - 2):\n        if lst[i:i + 3] == ['a', 'b', 'c']:\n            count += 1\n    return count\n    pass\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n(n, q) = MI()\nlst = list(SI())\ncount = ''.join(lst).count('abc')\nfor __ in range(q):\n    temp = SI().split()\n    p = int(temp[0]) - 1\n    c = temp[1]\n    b1 = lst[max(p - 2, 0):min(n, p + 3)]\n    b1 = ''.join(b1).count('abc')\n    lst[p] = c\n    b2 = ''.join(lst[max(p - 2, 0):min(n, p + 3)]).count('abc')\n    count += b2 - b1\n    print(count)", "import sys\n(n, q) = map(int, sys.stdin.readline().split())\ns = list(sys.stdin.readline().strip())\nidx = 2\nres = 0\nwhile idx < len(s):\n    if s[idx - 2] == 'a' and s[idx - 1] == 'b' and (s[idx] == 'c'):\n        res += 1\n        idx += 3\n    else:\n        idx += 1\nfor _ in range(q):\n    (i, c) = sys.stdin.readline().split()\n    i = int(i) - 1\n    start = max(0, i - 2)\n    for idx in range(start, i + 1):\n        if idx + 2 >= len(s):\n            break\n        if s[idx] == 'a' and s[idx + 1] == 'b' and (s[idx + 2] == 'c'):\n            res -= 1\n    s[i] = c\n    for idx in range(start, i + 1):\n        if idx + 2 >= len(s):\n            break\n        if s[idx] == 'a' and s[idx + 1] == 'b' and (s[idx + 2] == 'c'):\n            res += 1\n    print(res)", "def c(i):\n    return s[i:i + 3] == ['a', 'b', 'c']\n(n, q) = map(int, input().split())\ns = list(input())\ncnt = 0\ntc = [0] * n\nr = [0] * n\nfor i in range(n - 2):\n    if c(i):\n        cnt += 1\n        r[i] = 1\n        r[i + 1] = 2\n        r[i + 2] = 3\nans = []\nfor _ in range(q):\n    (j, p) = input().split()\n    j = int(j) - 1\n    s[j] = p\n    for i in range(max(0, j - 2), min(n - 2, j + 1)):\n        if c(i) and r[i] != 1:\n            cnt += 1\n            r[i] = 1\n            r[i + 1] = 2\n            r[i + 2] = 3\n        elif not c(i) and (r[i] == 1 or r[i + 1] == 2 or r[i + 2] == 3):\n            cnt -= 1\n            if r[i] == 1:\n                r[i] = 0\n            if r[i + 1] == 2:\n                r[i + 1] = 0\n            if r[i + 2] == 3:\n                r[i + 2] = 0\n    ans.append(cnt)\nprint('\\n'.join(map(str, ans)))", "def recalculate(pos, c, s, current):\n    was = count_abc(s, pos - 2, pos + 3)\n    s[pos] = c\n    now = count_abc(s, pos - 2, pos + 3)\n    return current - was + now\n\ndef count_abc(s, fr, to):\n    count = 0\n    if fr < 0:\n        fr = 0\n    if to > len(s):\n        to = len(s)\n    for i in range(fr, to - 2):\n        if s[i:i + 3] == list('abc'):\n            count = count + 1\n    return count\nimport sys\nline = sys.stdin.readline()\n(n, q) = line.split(' ')\nn = int(n)\nq = int(q)\ns = list(sys.stdin.readline())\ncurrent_count = count_abc(s, 0, len(s))\nfor _ in range(0, q):\n    (pos, c) = sys.stdin.readline().split(' ')\n    pos = int(pos) - 1\n    c = c[0]\n    current_count = recalculate(pos, c, s, current_count)\n    print(current_count)", "import itertools\nfrom math import floor, log, log2, ceil, sqrt\nfrom itertools import groupby\nfrom decimal import Decimal, getcontext\nimport sys\nfrom collections import deque\nt = 1\nres = []\n[n, q] = list(map(int, input().split()))\nfor _ in range(t):\n    s = list(input())\n    poses = []\n    starts = set()\n    for i in range(n):\n        if s[i] == 'a' and i + 2 < n and (''.join(s[i:i + 3]) == 'abc'):\n            starts.add(i)\n    count = len(starts)\n    ans = []\n    for _ in range(q):\n        pos = input().split()\n        (pos, sym) = (int(pos[0]), pos[1])\n        pos -= 1\n        s[pos] = sym\n        start = max(pos - 2, 0)\n        end = min(pos + 2, n - 1)\n        for j in range(start, end + 1):\n            if ''.join(s[j:j + 3]) == 'abc':\n                if not j in starts:\n                    starts.add(j)\n                    count += 1\n            elif j in starts:\n                count -= 1\n                starts.remove(j)\n        ans.append(count)\nfor i in range(q):\n    print(ans[i])", "(n, q) = map(int, input().split())\ns = input()\ns1 = list(s)\ncount1 = s.count('abc')\nfor i in range(q):\n    pk = input().split()\n    p = int(pk[0]) - 1\n    k = pk[1]\n    if k == s1[p]:\n        print(count1)\n    else:\n        if s1[p] == 'a':\n            if p <= n - 3 and s1[p + 1] == 'b' and (s1[p + 2] == 'c'):\n                if count1 > 0:\n                    count1 -= 1\n        elif s1[p] == 'b':\n            if p <= n - 2 and p >= 1 and (s1[p - 1] == 'a') and (s1[p + 1] == 'c'):\n                if count1 > 0:\n                    count1 -= 1\n        elif s1[p] == 'c':\n            if p >= 2 and s1[p - 2] == 'a' and (s1[p - 1] == 'b'):\n                if count1 > 0:\n                    count1 -= 1\n        s1[p] = k\n        if s1[p] == 'a':\n            if p <= n - 3 and s1[p + 1] == 'b' and (s1[p + 2] == 'c'):\n                if count1 < n:\n                    count1 += 1\n        elif s1[p] == 'b':\n            if p >= 1 and p <= n - 2 and (s1[p - 1] == 'a') and (s1[p + 1] == 'c'):\n                if count1 < n:\n                    count1 += 1\n        elif s1[p] == 'c':\n            if p >= 2 and s1[p - 2] == 'a' and (s1[p - 1] == 'b'):\n                if count1 < n:\n                    count1 += 1\n        print(count1)", "(n, q) = list(map(int, input().split()))\ns = input()\nabc_count = s.count('abc')\ns = list(s)\nfor _ in range(q):\n    (i, c) = list(input().split())\n    i = int(i)\n    if s[i - 1] == c:\n        print(abc_count)\n        continue\n    try:\n        if s[i - 1] == 'a' and i - 1 >= 0 and (s[i] == 'b') and (s[i + 1] == 'c'):\n            abc_count -= 1\n        elif s[i - 1] == 'b' and i - 2 >= 0 and (s[i - 2] == 'a') and (s[i] == 'c'):\n            abc_count -= 1\n        elif s[i - 1] == 'c' and i - 3 >= 0 and (s[i - 2] == 'b') and (s[i - 3] == 'a'):\n            abc_count -= 1\n    except IndexError:\n        pass\n    s[i - 1] = c\n    try:\n        if s[i - 1] == 'a' and i - 1 >= 0 and (s[i] == 'b') and (s[i + 1] == 'c'):\n            abc_count += 1\n        elif s[i - 1] == 'b' and i - 2 >= 0 and (s[i - 2] == 'a') and (s[i] == 'c'):\n            abc_count += 1\n        elif s[i - 1] == 'c' and i - 3 >= 0 and (s[i - 2] == 'b') and (s[i - 3] == 'a'):\n            abc_count += 1\n    except IndexError:\n        pass\n    print(abc_count)", "def solve():\n    (n, q) = [int(x) for x in input().split()]\n    a = [i for i in input()]\n    count = 0\n    for i in range(0, n - 2):\n        if a[i] == 'a' and a[i + 1] == 'b' and (a[i + 2] == 'c'):\n            count += 1\n    for t in range(q):\n        (ind, c) = input().split()\n        ind = int(ind) - 1\n        if ind > 1:\n            if a[ind - 2] == 'a' and a[ind - 1] == 'b' and (a[ind] == 'c'):\n                count -= 1\n        if ind > 0 and ind < n - 1:\n            if a[ind - 1] == 'a' and a[ind] == 'b' and (a[ind + 1] == 'c'):\n                count -= 1\n        if ind < n - 2:\n            if a[ind] == 'a' and a[ind + 1] == 'b' and (a[ind + 2] == 'c'):\n                count -= 1\n        a[ind] = c\n        if ind > 1:\n            if a[ind - 2] == 'a' and a[ind - 1] == 'b' and (a[ind] == 'c'):\n                count += 1\n        if ind > 0 and ind < n - 1:\n            if a[ind - 1] == 'a' and a[ind] == 'b' and (a[ind + 1] == 'c'):\n                count += 1\n        if ind < n - 2:\n            if a[ind] == 'a' and a[ind + 1] == 'b' and (a[ind + 2] == 'c'):\n                count += 1\n        print(count)\nsolve()", "(n, q) = map(int, input().split())\ns = input()\nl = s.count('abc')\ns = list(s)\nr = ['a', 'b', 'c']\nfor _ in range(q):\n    (ind, c) = input().split()\n    ind = int(ind) - 1\n    if s[ind:ind + 3] == r:\n        l -= 1\n    elif s[ind - 1:ind + 2] == r:\n        l -= 1\n    elif s[ind - 2:ind + 1] == r:\n        l -= 1\n    s[ind] = c\n    if s[ind:ind + 3] == r:\n        l += 1\n    elif s[ind - 1:ind + 2] == r:\n        l += 1\n    elif s[ind - 2:ind + 1] == r:\n        l += 1\n    print(l)", "def problem2(n, q, string, query, indexABC):\n    (pos, val) = query\n    if pos in indexABC or pos - 1 in indexABC or pos - 2 in indexABC:\n        if val != string[pos]:\n            for p in [pos, pos - 1, pos - 2]:\n                if p in indexABC:\n                    indexABC.remove(p)\n    if val == 'a':\n        if pos < n - 2 and string[pos + 1] == 'b' and (string[pos + 2] == 'c') and (pos not in indexABC):\n            indexABC.add(pos)\n    elif val == 'b':\n        if 0 < pos < n - 1 and string[pos + 1] == 'c' and (string[pos - 1] == 'a') and (pos - 1 not in indexABC):\n            indexABC.add(pos - 1)\n    elif 1 < pos and string[pos - 1] == 'b' and (string[pos - 2] == 'a') and (pos - 2 not in indexABC):\n        indexABC.add(pos - 2)\n    string[pos] = val\n    return (string, indexABC)\n(n, q) = [int(num) for num in input().split(' ')]\nstring = list(input())\nindexABC = set()\nfor i in range(n - 2):\n    if string[i] == 'a' and string[i + 1] == 'b' and (string[i + 2] == 'c'):\n        indexABC.add(i)\nfor _ in range(q):\n    query = input().split(' ')\n    query = (int(query[0]) - 1, query[1])\n    (string, indexABC) = problem2(n, q, string, query, indexABC)\n    print(len(indexABC))", "(n, q) = map(int, input().split())\nstr = input()\ncnt = 0\nfor i in range(2, n):\n    if str[i - 2] + str[i - 1] + str[i] == 'abc':\n        cnt += 1\nstr = list([i for i in str])\nstr.append([0] * 2)\nfor _ in range(q):\n    (pos, ch) = input().split()\n    pos = int(pos) - 1\n    if str[pos] == 'a' and str[pos + 1] == 'b' and (str[pos + 2] == 'c') and (ch != str[pos]):\n        cnt -= 1\n    elif str[pos] == 'b' and str[pos - 1] == 'a' and (str[pos + 1] == 'c') and (ch != str[pos]):\n        cnt -= 1\n    elif str[pos] == 'c' and str[pos - 2] == 'a' and (str[pos - 1] == 'b') and (ch != str[pos]):\n        cnt -= 1\n    if str[pos] == ch:\n        pass\n    elif ch == 'a' and str[pos + 1] == 'b' and (str[pos + 2] == 'c'):\n        cnt += 1\n    elif ch == 'b' and str[pos - 1] == 'a' and (str[pos + 1] == 'c'):\n        cnt += 1\n    elif ch == 'c' and str[pos - 2] == 'a' and (str[pos - 1] == 'b'):\n        cnt += 1\n    str[pos] = ch\n    print(cnt)", "(n, q) = map(int, input().split())\ns = input()\nl = list(s)\nans = s.count('abc')\nfor _ in range(q):\n    (idx, char) = input().split()\n    idx = int(idx) - 1\n    if l[idx] == char:\n        print(ans)\n    else:\n        if idx + 2 < len(l) and l[idx] == 'a' and (l[idx + 1] == 'b') and (l[idx + 2] == 'c'):\n            ans -= 1\n        if idx - 1 >= 0 and idx + 1 < len(s) and (l[idx] == 'b') and (l[idx - 1] == 'a') and (l[idx + 1] == 'c'):\n            ans -= 1\n        if idx - 2 >= 0 and l[idx] == 'c' and (l[idx - 1] == 'b') and (l[idx - 2] == 'a'):\n            ans -= 1\n        l[idx] = char\n        if idx + 2 < len(l) and l[idx] == 'a' and (l[idx + 1] == 'b') and (l[idx + 2] == 'c'):\n            ans += 1\n        if idx - 1 >= 0 and idx + 1 < len(s) and (l[idx] == 'b') and (l[idx - 1] == 'a') and (l[idx + 1] == 'c'):\n            ans += 1\n        if idx - 2 >= 0 and l[idx] == 'c' and (l[idx - 1] == 'b') and (l[idx - 2] == 'a'):\n            ans += 1\n        print(ans)", "(n, q) = map(int, input().split())\ns = input()\nans = s.count('abc')\ns = list(s)\n\ndef check(x):\n    if s[x] == 'a' and x + 2 < n:\n        return s[x + 1] + s[x + 2] == 'bc'\n    elif s[x] == 'b' and x > 0 and (x + 1 < n):\n        return s[x - 1] + s[x + 1] == 'ac'\n    elif s[x] == 'c' and x > 1:\n        return s[x - 2] + s[x - 1] == 'ab'\n    else:\n        return False\nfor _ in range(q):\n    (x, y) = input().split()\n    x = int(x) - 1\n    if check(x):\n        ans -= 1\n    s[x] = y\n    if check(x):\n        ans += 1\n    print(ans)", "import sys\nimport bisect\ninp = sys.stdin.readline\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(1):\n    (n, q) = map(int, inp().split())\n    s = 'dd' + input() + 'dd'\n    ans = s.count('abc')\n    s = list(s)\n    for _ in range(q):\n        (p, c) = input().split()\n        p = int(p) + 1\n        x = p - 2\n        y = p + 3\n        ans -= ''.join(s[x:y]).count('abc')\n        s[p] = c\n        ans += ''.join(s[x:y]).count('abc')\n        print(ans)", "(n, q) = map(int, input().split())\ns = [i for i in input()]\ncnt = 0\nstate = 0\nfor i in range(len(s)):\n    if s[i] == 'a':\n        state = 1\n    elif s[i] == 'b':\n        if state == 1:\n            state = 2\n        else:\n            state = 0\n    else:\n        if state == 2:\n            cnt += 1\n        state = 0\nfor _ in range(q):\n    (i, c) = input().split()\n    i = int(i) - 1\n    if s[i] == 'a':\n        if i + 1 < len(s) and s[i + 1] == 'b' and (i + 2 < len(s)) and (s[i + 2] == 'c'):\n            cnt -= 1\n    elif s[i] == 'b':\n        if i > 0 and s[i - 1] == 'a' and (i + 1 < len(s)) and (s[i + 1] == 'c'):\n            cnt -= 1\n    elif i - 2 >= 0 and s[i - 2] == 'a' and (s[i - 1] == 'b'):\n        cnt -= 1\n    s[i] = c\n    if s[i] == 'a':\n        if i + 1 < len(s) and s[i + 1] == 'b' and (i + 2 < len(s)) and (s[i + 2] == 'c'):\n            cnt += 1\n    elif s[i] == 'b':\n        if i > 0 and s[i - 1] == 'a' and (i + 1 < len(s)) and (s[i + 1] == 'c'):\n            cnt += 1\n    elif i - 2 >= 0 and s[i - 2] == 'a' and (s[i - 1] == 'b'):\n        cnt += 1\n    print(cnt)", "(n, q) = map(int, input().split())\ns = input()\nstarts = set()\nfor i in range(len(s) - 2):\n    if s[i:i + 3] == 'abc':\n        starts.add(i)\ns = list(s)\ntochange = len(starts)\nfor _ in range(q):\n    (i, l) = input().split()\n    i = int(i)\n    i -= 1\n    if l != s[i]:\n        if s[i] == 'a' and starts.discard(i) == i:\n            tochange -= 1\n        elif s[i] == 'b' and starts.discard(i - 1) == i - 1:\n            tochange -= 1\n        elif s[i] == 'c' and starts.discard(i - 2) == i - 2:\n            tochange -= 1\n        if l == 'a' and i < len(s) - 2 and (s[i + 1] == 'b') and (s[i + 2] == 'c'):\n            starts.add(i)\n            tochange += 1\n        if l == 'b' and i < len(s) - 1 and (i > 0) and (s[i + 1] == 'c') and (s[i - 1] == 'a'):\n            starts.add(i - 1)\n            tochange += 1\n        if l == 'c' and i > 1 and (s[i - 1] == 'b') and (s[i - 2] == 'a'):\n            starts.add(i - 2)\n            tochange += 1\n        s[i] = l\n    print(len(starts))", "(n, q) = list(map(int, input().split()))\ns = input()\nl = list(s)\ncurr = s.count('abc')\nfor _ in range(q):\n    (idx, char) = input().split()\n    idx = int(idx)\n    idx -= 1\n    if l[idx] == char:\n        print(curr)\n    else:\n        if idx + 2 < len(l) and l[idx] == 'a' and (l[idx + 1] == 'b') and (l[idx + 2] == 'c'):\n            curr -= 1\n        if idx - 1 >= 0 and idx + 1 < len(s) and (l[idx] == 'b') and (l[idx - 1] == 'a') and (l[idx + 1] == 'c'):\n            curr -= 1\n        if idx - 2 >= 0 and l[idx] == 'c' and (l[idx - 1] == 'b') and (l[idx - 2] == 'a'):\n            curr -= 1\n        l[idx] = char\n        if idx + 2 < len(l) and l[idx] == 'a' and (l[idx + 1] == 'b') and (l[idx + 2] == 'c'):\n            curr += 1\n        if idx - 1 >= 0 and idx + 1 < len(s) and (l[idx] == 'b') and (l[idx - 1] == 'a') and (l[idx + 1] == 'c'):\n            curr += 1\n        if idx - 2 >= 0 and l[idx] == 'c' and (l[idx - 1] == 'b') and (l[idx - 2] == 'a'):\n            curr += 1\n        print(curr)", "nq = list(map(int, input().split()))\ns = input()\ns = list(s)\nk = 0\nfor i in range(len(s) - 2):\n    if s[i] == 'a':\n        if s[i + 1] == 'b':\n            if s[i + 2] == 'c':\n                k += 1\nfor _ in range(nq[1]):\n    q = input().split()\n    pos = int(q[0])\n    x = q[1]\n    if s[pos - 1] == 'a' and pos + 1 < len(s):\n        if s[pos] == 'b' and s[pos + 1] == 'c':\n            k -= 1\n    if (s[pos - 1] == 'b' and pos < len(s)) and pos - 2 >= 0:\n        if s[pos - 2] == 'a' and s[pos] == 'c':\n            k -= 1\n    if s[pos - 1] == 'c' and pos - 3 >= 0:\n        if s[pos - 2] == 'b' and s[pos - 3] == 'a':\n            k -= 1\n    s[pos - 1] = x\n    if s[pos - 1] == 'a' and pos + 1 < len(s):\n        if s[pos] == 'b' and s[pos + 1] == 'c':\n            k += 1\n    if (s[pos - 1] == 'b' and pos < len(s)) and pos - 2 >= 0:\n        if s[pos - 2] == 'a' and s[pos] == 'c':\n            k += 1\n    if s[pos - 1] == 'c' and pos - 3 >= 0:\n        if s[pos - 2] == 'b' and s[pos - 3] == 'a':\n            k += 1\n    print(k)", "(n, q) = map(int, input().split())\ns = list(input())\nvis = [0] * n\nans = 0\nfor i in range(n):\n    if s[i] == 'a' and i + 2 < n and (s[i + 1] == 'b') and (s[i + 2] == 'c'):\n        vis[i] = 1\n        ans += 1\nfor i in range(q):\n    (pos, c) = input().split()\n    pos = int(pos)\n    pos -= 1\n    if s[pos] == 'a':\n        if pos + 2 < n and s[pos + 1] == 'b' and (s[pos + 2] == 'c'):\n            ans -= 1\n    elif s[pos] == 'b':\n        if pos + 1 < n and pos - 1 >= 0 and (s[pos + 1] == 'c') and (s[pos - 1] == 'a'):\n            ans -= 1\n    elif pos - 2 >= 0 and s[pos - 1] == 'b' and (s[pos - 2] == 'a'):\n        ans -= 1\n    if c == 'a':\n        if pos + 2 < n and s[pos + 1] == 'b' and (s[pos + 2] == 'c'):\n            ans += 1\n    elif c == 'b':\n        if pos + 1 < n and pos > 0 and (s[pos + 1] == 'c') and (s[pos - 1] == 'a'):\n            ans += 1\n    elif pos - 2 >= 0 and s[pos - 1] == 'b' and (s[pos - 2] == 'a'):\n        ans += 1\n    s[pos] = c\n    print(ans)", "(n, q) = map(int, input().split())\nA = list(input())\ns = 0\nfor i in range(0, n - 2):\n    if A[i] == 'a' and A[i + 1] == 'b' and (A[i + 2] == 'c'):\n        s += 1\nfor i in range(0, q):\n    B = [x for x in input().split()]\n    j = int(B[0]) - 1\n    if B[1] != A[j]:\n        if j < n - 2 and A[j] == 'a' and (A[j + 1] == 'b') and (A[j + 2] == 'c'):\n            s -= 1\n        elif j > 0 and j < n - 1 and (A[j - 1] == 'a') and (A[j] == 'b') and (A[j + 1] == 'c'):\n            s -= 1\n        elif j > 1 and A[j - 2] == 'a' and (A[j - 1] == 'b') and (A[j] == 'c'):\n            s -= 1\n        A[j] = B[1]\n        if j < n - 2 and A[j] == 'a' and (A[j + 1] == 'b') and (A[j + 2] == 'c'):\n            s += 1\n        elif j > 0 and j < n - 1 and (A[j - 1] == 'a') and (A[j] == 'b') and (A[j + 1] == 'c'):\n            s += 1\n        elif j > 1 and A[j - 2] == 'a' and (A[j - 1] == 'b') and (A[j] == 'c'):\n            s += 1\n    print(s)", "(n, k) = map(int, input().split())\ns = list(input())\nans = 0\ni = 0\nwhile i < n - 2:\n    if s[i] == 'a' and s[i + 1] == 'b' and (s[i + 2] == 'c'):\n        ans += 1\n        i += 2\n    else:\n        i += 1\nfor _ in range(k):\n    ss = input().split()\n    (ind, al) = (int(ss[0]), ss[1])\n    ind -= 1\n    if s[ind] == al:\n        print(ans)\n    else:\n        for j in range(max(0, ind - 2), min(n - 2, ind + 1)):\n            if s[j] == 'a' and s[j + 1] == 'b' and (s[j + 2] == 'c'):\n                ans -= 1\n        if al == 'a' and ind < n - 2:\n            if s[ind + 1] == 'b' and s[ind + 2] == 'c':\n                ans += 1\n        elif al == 'b' and ind < n - 1 and (ind > 0):\n            if s[ind - 1] == 'a' and s[ind + 1] == 'c':\n                ans += 1\n        elif ind > 1 and al == 'c':\n            if s[ind - 2] == 'a' and s[ind - 1] == 'b':\n                ans += 1\n        s[ind] = al\n        print(ans)", "try:\n    (N, Q) = map(int, input().split())\n    S = str(input())\n    count = S.count('abc')\n    S = 'xx' + S + 'xx'\n    S = list(S)\n    for q in range(Q):\n        (x, y) = map(str, input().split())\n        x = int(x) + 1\n        temp = S[x - 2:x + 3]\n        if 'abc' in ''.join(temp):\n            count -= 1\n        S[x] = y\n        temp = S[x - 2:x + 3]\n        if 'abc' in ''.join(temp):\n            count += 1\n        print(count)\nexcept:\n    pass", "def inp():\n    return list(map(int, input().split()))\n(n, q) = inp()\na = list(input())\nabc = set()\nfor i in range(n - 2):\n    if a[i] == 'a':\n        if a[i + 1] == 'b':\n            if a[i + 2] == 'c':\n                abc.add(i)\nfor j in range(q):\n    (i, c) = input().split()\n    if n < 3:\n        print(0)\n        continue\n    i = int(i)\n    i -= 1\n    a[i] = c\n    if i in abc:\n        if c != 'a':\n            abc.remove(i)\n    elif i - 1 in abc:\n        if c != 'b':\n            abc.remove(i - 1)\n    elif i - 2 in abc:\n        if c != 'c':\n            abc.remove(i - 2)\n    if ''.join(a[i:i + 3]) == 'abc':\n        abc.add(i)\n    elif ''.join(a[i - 1:i + 2]) == 'abc':\n        abc.add(i - 1)\n    elif ''.join(a[i - 2:i + 1]) == 'abc':\n        abc.add(i - 2)\n    print(len(abc))", "p = input\n(n, q) = map(int, p().split())\ns = p()\nc = s.count('abc')\nv = [*s]\nwhile q:\n    (a, b) = p().split()\n    a = int(a) - 1\n    d = 1\n    q -= 1\n    while d + 3:\n        if 'abc' in ''.join(v[max(a - 2, 0):a + 3]):\n            c -= d\n        v[a] = b\n        d -= 2\n    print(c)", "(n, q) = map(int, input().split())\ns = input()\nanswer = s.count('abc')\ns = [i for i in s]\nfor _ in range(q):\n    (pos, c) = input().split()\n    pos = int(pos) - 1\n    if s[pos] != c:\n        curr_s = s[max(0, pos - 2):min(n, pos + 3)]\n        curr_answer = ''.join(curr_s).count('abc')\n        s[pos] = c\n        new_s = s[max(0, pos - 2):min(n, pos + 3)]\n        new_answer = ''.join(new_s).count('abc')\n        answer += new_answer - curr_answer\n    print(answer)", "(n, q) = map(int, input().split())\na = list(str(input()))\na = ['x', 'x'] + a + ['x', 'x']\np1 = []\np2 = []\nans = 0\ncnt = 1\nfor i in range(4, n + 2):\n    if a[i - 1] == 'b' and a[i - 2] == 'a':\n        if a[i] == 'c':\n            ans += 1\nfor i in range(q):\n    (pos, ch) = input().split()\n    pos = int(pos)\n    pos += 1\n    if ch == a[pos]:\n        print(ans)\n    else:\n        s1 = [a[pos - 2], a[pos - 1], a[pos]]\n        s2 = [a[pos - 1], a[pos], a[pos + 1]]\n        s3 = [a[pos], a[pos + 1], a[pos + 2]]\n        t = ['a', 'b', 'c']\n        if s1 == t or s2 == t or s3 == t:\n            ans -= 1\n        a[pos] = ch\n        s1 = [a[pos - 2], a[pos - 1], a[pos]]\n        s2 = [a[pos - 1], a[pos], a[pos + 1]]\n        s3 = [a[pos], a[pos + 1], a[pos + 2]]\n        if s1 == t or s2 == t or s3 == t:\n            ans += 1\n        print(ans)", "(n, q) = input().split()\nn = int(n)\nq = int(q)\ns = list(input())\nbase = 0\nfor i in range(n - 2):\n    if s[i] == 'a' and s[i + 1] == 'b' and (s[i + 2] == 'c'):\n        base += 1\n\ndef makes_abc(x, i, s):\n    if x == 'a':\n        if i < len(s) - 2:\n            if s[i + 1] == 'b' and s[i + 2] == 'c':\n                return True\n    if x == 'b':\n        if i > 0 and i < len(s) - 1:\n            if s[i - 1] == 'a' and s[i + 1] == 'c':\n                return True\n    if x == 'c':\n        if i > 1:\n            if s[i - 2] == 'a' and s[i - 1] == 'b':\n                return True\n    return False\nwhile q > 0:\n    q -= 1\n    (i, x) = input().split()\n    i = int(i)\n    i = i - 1\n    if s[i] != x:\n        if makes_abc(s[i], i, s):\n            base -= 1\n        if makes_abc(x, i, s):\n            base += 1\n        s[i] = x\n    print('  ', base)", "I = input\n(n, q) = map(int, I().split())\ns = I()\nc = s.count('abc')\nv = [*s]\nwhile q:\n    (a, b) = I().split()\n    a = int(a) - 1\n    d = 1\n    q -= 1\n    while d + 3:\n        if 'abc' in ''.join(v[max(a - 2, 0):a + 3]):\n            c -= d\n        v[a] = b\n        d -= 2\n    print(c)", "def check_a(l, i):\n    if i >= len(l) - 2:\n        return False\n    else:\n        if l[i + 1] == 'b' and l[i + 2] == 'c':\n            return True\n        return False\n\ndef check_b(l, i):\n    if i == 0 or i == len(l) - 1:\n        return False\n    else:\n        if l[i - 1] == 'a' and l[i + 1] == 'c':\n            return True\n        return False\n\ndef check_c(l, i):\n    if i < 2:\n        return False\n    else:\n        if l[i - 1] == 'b' and l[i - 2] == 'a':\n            return True\n        return False\n\ndef fun(l, idx):\n    if l[idx] == 'a':\n        return check_a(l, idx)\n    elif l[idx] == 'b':\n        return check_b(l, idx)\n    else:\n        return check_c(l, idx)\n(n, q) = map(int, input().split())\ns = input().rstrip()\nl = [x for x in s]\ncount = i = 0\nwhile i < n - 2:\n    if l[i] == 'a' and l[i + 1] == 'b' and (l[i + 2] == 'c'):\n        count += 1\n        i += 3\n    else:\n        i += 1\nfor z in range(q):\n    (idx, c) = map(str, input().split())\n    idx = int(idx) - 1\n    if c == l[idx]:\n        print(count)\n    else:\n        ans = fun(l, idx)\n        if ans:\n            count -= 1\n        l[idx] = c\n        ans2 = fun(l, idx)\n        if ans2:\n            count += 1\n        print(count)", "def check(s, i, n):\n    if s[i] == 'a' and i + 2 < n:\n        if s[i + 1] == 'b' and s[i + 2] == 'c':\n            return True\n        return False\n    if s[i] == 'b' and i > 0 and (i < n - 1):\n        if s[i - 1] == 'a' and s[i + 1] == 'c':\n            return True\n        return False\n    if s[i] == 'c' and i > 1:\n        if s[i - 2] == 'a' and s[i - 1] == 'b':\n            return True\n    return False\n(n, q) = map(int, input().split())\ns = list(input())\nans = 0\nfor i in range(n - 2):\n    if s[i] == 'a' and s[i + 1] == 'b' and (s[i + 2] == 'c'):\n        ans += 1\nfor _ in range(q):\n    (p, v) = map(str, input().split())\n    p = int(p) - 1\n    ans -= int(check(s, p, n))\n    s[p] = v\n    ans += int(check(s, p, n))\n    print(ans)", "(q, n) = map(int, input().split())\ns = '11' + input() + '11'\ncounter = s.count('abc')\ns = list(s)\nfor i in range(n):\n    (num, a) = input().split()\n    num = int(num)\n    num += 1\n    st = s[num - 2] + s[num - 1] + s[num] + s[num + 1] + s[num + 2]\n    st_new = s[num - 2] + s[num - 1] + a + s[num + 1] + s[num + 2]\n    counter += st_new.count('abc') - st.count('abc')\n    s[num] = a\n    print(counter)", "(N, Q) = map(int, input().split())\nS = list(input())\np1 = count = 0\nwhile p1 < N - 2:\n    if S[p1:p1 + 3] == ['a', 'b', 'c']:\n        count += 1\n        p1 += 3\n    else:\n        p1 += 1\nfor i in range(Q):\n    (ind, char) = input().split()\n    ind = int(ind) - 1\n    if S[ind] == 'a':\n        if S[ind:min(ind + 3, N)] == ['a', 'b', 'c']:\n            count -= 1\n    if S[ind] == 'b':\n        if S[max(0, ind - 1):min(ind + 2, N)] == ['a', 'b', 'c']:\n            count -= 1\n    if S[ind] == 'c':\n        if S[max(0, ind - 2):ind + 1] == ['a', 'b', 'c']:\n            count -= 1\n    S[ind] = char\n    if S[ind] == 'a':\n        if S[ind:min(ind + 3, N)] == ['a', 'b', 'c']:\n            count += 1\n    if S[ind] == 'b':\n        if S[max(0, ind - 1):min(ind + 2, N)] == ['a', 'b', 'c']:\n            count += 1\n    if S[ind] == 'c':\n        if S[max(0, ind - 2):ind + 1] == ['a', 'b', 'c']:\n            count += 1\n    print(count)", "(n, q) = map(int, input().split())\ns = input()\nans = s.count('abc')\ns = [i for i in s]\nfor _ in range(q):\n    (i, c) = input().split()\n    if 'abc' in ''.join(s[max(0, int(i) - 3):int(i) + 2]):\n        ans -= 1\n    s[int(i) - 1] = c\n    if 'abc' in ''.join(s[max(0, int(i) - 3):int(i) + 2]):\n        ans += 1\n    print(ans)", "(n, q) = input().split()\ns = input()\nans = s.count('abc')\ns = [i for i in s]\nfor i in range(int(q)):\n    (id_num, val) = input().split()\n    ans -= [0, 1]['abc' in ''.join(s[max(0, int(id_num) - 3):int(id_num) + 2])]\n    s[int(id_num) - 1] = val\n    ans += [0, 1]['abc' in ''.join(s[max(0, int(id_num) - 3):int(id_num) + 2])]\n    print(ans)", "(a, q) = map(int, input().split())\ns = input()\nans = s.count('abc')\ns = list(s)\nfor idd in range(q):\n    (pos, c) = input().split()\n    i = int(pos) - 1\n    pehle = 0\n    if i - 2 >= 0:\n        if s[i - 2] == 'a' and s[i - 1] == 'b' and (s[i] == 'c'):\n            pehle += 1\n    if i - 1 >= 0 and i + 1 < len(s):\n        if s[i - 1] == 'a' and s[i] == 'b' and (s[i + 1] == 'c'):\n            pehle += 1\n    if i + 2 < len(s):\n        if s[i] == 'a' and s[i + 1] == 'b' and (s[i + 2] == 'c'):\n            pehle += 1\n    s[i] = c\n    new = 0\n    if i - 2 >= 0:\n        if s[i - 2] == 'a' and s[i - 1] == 'b' and (s[i] == 'c'):\n            new += 1\n    if i - 1 >= 0 and i + 1 < len(s):\n        if s[i - 1] == 'a' and s[i] == 'b' and (s[i + 1] == 'c'):\n            new += 1\n    if i + 2 < len(s):\n        if s[i] == 'a' and s[i + 1] == 'b' and (s[i + 2] == 'c'):\n            new += 1\n    ans += new - pehle\n    print(ans)", "(n, q) = input().split()\ns = input()\nans = s.count('abc')\ns = [i for i in s]\nfor i in range(int(q)):\n    (id_num, val) = input().split()\n    ans -= [0, 1]['abc' in ''.join(s[max(0, int(id_num) - 3):int(id_num) + 2])]\n    s[int(id_num) - 1] = val\n    ans += [0, 1]['abc' in ''.join(s[max(0, int(id_num) - 3):int(id_num) + 2])]\n    print(ans)", "inputs = input().split()\n(numLets, numQ) = (int(inputs[0]), int(inputs[1]))\nnumAbc = 0\nlets = input().split()\n(i, posSet) = (0, set())\nlets = list(lets[0])\nwhile i < len(lets) - 2:\n    if lets[i] == 'a' and lets[i + 1] == 'b' and (lets[i + 2] == 'c'):\n        posSet.add(i)\n        i += 3\n        numAbc += 1\n    else:\n        i += 1\nfor _ in range(numQ):\n    inputs = input().split()\n    (pos, let) = (int(inputs[0]), inputs[1])\n    if lets[pos - 1] != let:\n        if pos - 1 - (ord(lets[pos - 1]) - ord('a')) in posSet:\n            posSet.remove(pos - 1 - (ord(lets[pos - 1]) - ord('a')))\n        lets[pos - 1] = let\n        start = max(0, pos - 3)\n        end = min(pos, len(lets) - 2)\n        for i in range(start, end):\n            if lets[i] == 'a' and lets[i + 1] == 'b' and (lets[i + 2] == 'c'):\n                posSet.add(i)\n                numAbc += 1\n                break\n    print(len(posSet))", "(n, q) = map(int, input().split())\ns = input()\nm = s.count('abc')\ns = list(s)\nfor _ in range(q):\n    (i, c) = input().split()\n    i = int(i) - 1\n    if s[i] == c:\n        pass\n    else:\n        x0 = s[i] + s[i + 1] + s[i + 2] if i < n - 2 else ''\n        y0 = s[i - 1] + s[i] + s[i + 1] if i > 0 and i < n - 1 else ''\n        z0 = s[i - 2] + s[i - 1] + s[i] if i > 1 else ''\n        num1 = (x0 == 'abc') + (y0 == 'abc') + (z0 == 'abc')\n        s[i] = c\n        x = s[i] + s[i + 1] + s[i + 2] if i < n - 2 else ''\n        y = s[i - 1] + s[i] + s[i + 1] if i > 0 and i < n - 1 else ''\n        z = s[i - 2] + s[i - 1] + s[i] if i > 1 else ''\n        num2 = (x == 'abc') + (y == 'abc') + (z == 'abc')\n        m += num2 - num1\n    print(m)", "(n, q) = map(int, input().split())\nx = input()\ns = []\nfor i in x:\n    s.append(i)\nv = [0] * n\nc = 0\nfor i in range(n - 2):\n    if s[i:i + 3] == ['a', 'b', 'c']:\n        v[i] = 1\n        c += 1\nfor i in range(q):\n    (p, ch) = input().split()\n    p = int(p)\n    j = p - 1\n    r = 0\n    while j >= 0 and r < 3:\n        if v[j] != 0:\n            c -= 1\n            v[j] = 0\n            break\n        j -= 1\n        r += 1\n    if ch == 'a':\n        s[p - 1] = ch\n        if p <= n - 2:\n            if s[p - 1:p + 2] == ['a', 'b', 'c']:\n                v[p - 1] = 1\n                c += 1\n        print(c)\n    elif ch == 'b':\n        s[p - 1] = ch\n        if p <= n - 1 and p > 1:\n            if s[p - 2:p + 1] == ['a', 'b', 'c']:\n                v[p - 2] = 1\n                c += 1\n        print(c)\n    else:\n        s[p - 1] = ch\n        if p <= n and p > 2:\n            if s[p - 3:p] == ['a', 'b', 'c']:\n                v[p - 3] = 1\n                c += 1\n        print(c)", "(n, q) = map(int, input().split())\ns = input()\nans = s.count('abc')\ns = list(s)\nfor i in range(q):\n    (pos, ch) = map(str, input().split())\n    pos = int(pos)\n    if s[pos - 1] == ch:\n        print(ans)\n    else:\n        if pos - 2 > 0 and s[pos - 3] + s[pos - 2] + s[pos - 1] == 'abc':\n            ans -= 1\n        elif pos - 1 > 0 and pos < n and (s[pos - 2] + s[pos - 1] + s[pos] == 'abc'):\n            ans -= 1\n        elif pos + 1 < n and s[pos - 1] + s[pos] + s[pos + 1] == 'abc':\n            ans -= 1\n        if ch == 'c':\n            if pos > 2 and s[pos - 2] == 'b' and (s[pos - 3] == 'a'):\n                ans += 1\n        elif ch == 'b':\n            if pos > 1 and pos < n and (s[pos - 2] == 'a') and (s[pos] == 'c'):\n                ans += 1\n        elif pos < n - 1 and s[pos] == 'b' and (s[pos + 1] == 'c'):\n            ans += 1\n        print(ans)\n        s[pos - 1] = ch", "(n, k) = map(int, input().split())\ns = input()\nc = s.count('abc')\ns = list(s)\nwhile k:\n    (x, y) = input().split(' ')\n    x = int(x) - 1\n    if y != s[x]:\n        for i in range(3):\n            if ''.join(s[x - i:x - i + 3]) == 'abc':\n                c -= 1\n        s[x] = y\n        for i in range(3):\n            if ''.join(s[x - i:x - i + 3]) == 'abc':\n                c += 1\n    k -= 1\n    print(c)", "import sys\nfrom math import sqrt, gcd\nfrom collections import deque\nsys.setrecursionlimit(10 ** 8)\nI = lambda : int(input())\nS = lambda : input().strip()\nM = lambda : map(int, input().strip().split())\nL = lambda : list(map(int, input().strip().split()))\nmod = 1000000007\n(n, q) = M()\ns = list(S())\nc = 0\nfor i in range(n - 2):\n    if s[i] == 'a' and s[i + 1] == 'b' and (s[i + 2] == 'c'):\n        c += 1\nfor i in range(q):\n    (i, ch) = input().split()\n    i = int(i) - 1\n    if s[i] == ch:\n        print(c)\n    else:\n        a = 0\n        for j in range(max(0, i - 2), min(i + 1, n - 2)):\n            if s[j] == 'a' and s[j + 1] == 'b' and (s[j + 2] == 'c'):\n                a += 1\n        s[i] = ch\n        for j in range(max(0, i - 2), min(i + 1, n - 2)):\n            if s[j] == 'a' and s[j + 1] == 'b' and (s[j + 2] == 'c'):\n                a -= 1\n        c -= a\n        print(c)", "base = ['a', 'b', 'c']\n\ndef check(pos):\n    if arr[pos - 2:pos + 1] == base or arr[pos - 1:pos + 2] == base or arr[pos:pos + 3] == base:\n        return 1\n    return 0\n(n, q) = list(map(int, input().split()))\nstring = input()\narr = list(string)\n(ans, cnt) = ([], 0)\nfor i in range(n):\n    if arr[i:i + 3] == ['a', 'b', 'c']:\n        cnt += 1\nfor t in range(q):\n    (idx, val) = list(map(str, input().split()))\n    idx = int(idx) - 1\n    initial = check(idx)\n    arr[idx] = val\n    final = check(idx)\n    cnt += final - initial\n    print(cnt)", "(n, q) = map(int, input().split())\ns = input()\nans = s.count('abc')\nl = list(s)\nfor j in range(q):\n    (i, c) = map(str, input().split())\n    ind = int(i) - 1\n    if l[ind:ind + 3] == ['a', 'b', 'c']:\n        ans -= 1\n    elif l[ind - 1:ind + 2] == ['a', 'b', 'c']:\n        ans -= 1\n    elif l[ind - 2:ind + 1] == ['a', 'b', 'c']:\n        ans -= 1\n    l[int(i) - 1] = c\n    if l[ind:ind + 3] == ['a', 'b', 'c']:\n        ans += 1\n    elif l[ind - 1:ind + 2] == ['a', 'b', 'c']:\n        ans += 1\n    elif l[ind - 2:ind + 1] == ['a', 'b', 'c']:\n        ans += 1\n    print(ans)", "(n, q) = map(int, input().split())\ns = list(input())\na = 0\nA = set()\nB = set()\nC = set()\nfor i in range(1, n - 1):\n    if s[i] == 'b':\n        if s[i - 1] == 'a' and s[i + 1] == 'c':\n            a += 1\nfor _ in range(q):\n    (x, y) = input().split()\n    x = int(x)\n    aa = 0\n    b = 0\n    c = 0\n    try:\n        aa = -int(s[x - 3:x] == ['a', 'b', 'c'])\n    except IndexError:\n        pass\n    try:\n        b = -int(s[x - 2:x + 1] == ['a', 'b', 'c'])\n    except IndexError:\n        pass\n    try:\n        c = -int(s[x - 1:x + 2] == ['a', 'b', 'c'])\n    except IndexError:\n        pass\n    s[x - 1] = y\n    try:\n        aa += int(s[x - 3:x] == ['a', 'b', 'c'])\n    except IndexError:\n        pass\n    try:\n        b += int(s[x - 2:x + 1] == ['a', 'b', 'c'])\n    except IndexError:\n        pass\n    try:\n        c += int(s[x - 1:x + 2] == ['a', 'b', 'c'])\n    except IndexError:\n        pass\n    a += aa + b + c\n    print(a)", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "def checkdelta(s, pos, c, n):\n    before_count = 0\n    for i in range(pos - 2, pos + 1):\n        if i >= 0 and i < n - 2:\n            if s[i] == 'a' and s[i + 1] == 'b' and (s[i + 2] == 'c'):\n                before_count += 1\n    after_count = 0\n    s[pos] = c\n    for i in range(pos - 2, pos + 1):\n        if i >= 0 and i < n - 2:\n            if s[i] == 'a' and s[i + 1] == 'b' and (s[i + 2] == 'c'):\n                after_count += 1\n    return (before_count, after_count)\ninput_string = input()\ninput_string = input_string.split()\nn = int(input_string[0])\nq = int(input_string[1])\ns = list(input())\nabc_count = 0\nfor i in range(0, n - 2):\n    if s[i] == 'a' and s[i + 1] == 'b' and (s[i + 2] == 'c'):\n        abc_count += 1\nfor _ in range(0, q):\n    input_string = input()\n    input_string = input_string.split()\n    pos = int(input_string[0]) - 1\n    c = input_string[1]\n    (before_count, after_count) = checkdelta(s, pos, c, n)\n    abc_count = abc_count + after_count - before_count\n    print(abc_count)", "def re_cnt(i):\n    return 0 <= i and i + 2 < n and (s[i] == 'a') and (s[i + 1] == 'b') and (s[i + 2] == 'c')\n(n, q) = map(int, input().split())\ns = input()\ncnt = s.count('abc')\ns = list(s)\nfor _ in range(q):\n    inp = input().split()\n    pos = int(inp[0]) - 1\n    cnt -= re_cnt(pos - 2)\n    cnt -= re_cnt(pos - 1)\n    cnt -= re_cnt(pos)\n    s[pos] = inp[1]\n    cnt += re_cnt(pos - 2)\n    cnt += re_cnt(pos - 1)\n    cnt += re_cnt(pos)\n    print(cnt)", "import sys\nfrom collections import deque\nimport heapq\nimport bisect\nimport copy\nMOD = 1000000007\nNO = lambda : print('NO')\nYES = lambda : print('YES')\n_1 = lambda : print(-1)\nari = lambda : [int(_) for _ in input().split()]\ncin = lambda : int(input())\ncis = lambda : input()\nshow = lambda x: print(x)\nfast = lambda : sys.stdin.readline()\ntest_case = 1\nsys.setrecursionlimit(10 ** 6)\n\ndef ans():\n    (n, query) = ari()\n    word = list(cis())\n    totalcount = 0\n    for i in range(n):\n        if word[i:i + 3] == ['a', 'b', 'c']:\n            totalcount += 1\n    for q in range(query):\n        (index, w) = cis().split()\n        index = int(index) - 1\n        for _ in range(max(0, index - 2), index + 1):\n            if word[_:_ + 3] == ['a', 'b', 'c']:\n                totalcount -= 1\n        word[index] = w\n        for _ in range(max(0, index - 2), index + 1):\n            if word[_:_ + 3] == ['a', 'b', 'c']:\n                totalcount += 1\n        print(totalcount)\nfor _ in range(test_case):\n    ans()", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "(n, q) = map(int, input().split())\ns = list(input())\ncnt = 0\nfor i in range(n - 2):\n    if ''.join(s[i:i + 3]) == 'abc':\n        cnt += 1\nfor i in range(q):\n    (index, c) = input().split()\n    index = int(index) - 1\n    if s[index] == c:\n        print(cnt)\n    else:\n        for i in range(max(0, index - 2), index + 1):\n            if ''.join(s[i:i + 3]) == 'abc':\n                cnt -= 1\n        s[index] = c\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(s[j:j + 3]) == 'abc':\n                cnt += 1\n        print(cnt)", "(n, x) = map(int, input().split())\ns = list(input())\nr = 0\nfor i in range(n - 2):\n    if s[i] == 'a' and s[i + 1] == 'b' and (s[i + 2] == 'c'):\n        r += 1\nfor _ in range(x):\n    (ind, elem) = input().split()\n    ind = int(ind) - 1\n    if ind >= 2 and s[ind - 2] + s[ind - 1] + s[ind] == 'abc':\n        r -= 1\n    elif 1 <= ind <= n - 2 and s[ind - 1] + s[ind] + s[ind + 1] == 'abc':\n        r -= 1\n    elif ind <= n - 3 and s[ind] + s[ind + 1] + s[ind + 2] == 'abc':\n        r -= 1\n    s[ind] = elem\n    if ind >= 2 and s[ind - 2] + s[ind - 1] + s[ind] == 'abc':\n        r += 1\n    elif 1 <= ind <= n - 2 and s[ind - 1] + s[ind] + s[ind + 1] == 'abc':\n        r += 1\n    elif ind <= n - 3 and s[ind] + s[ind + 1] + s[ind + 2] == 'abc':\n        r += 1\n    print(r)", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "(n, q) = map(int, input().split())\ns = list(input())\n\ndef count(s):\n    ans = 0\n    for i in range(len(s) - 2):\n        if s[i:i + 3] == ['a', 'b', 'c']:\n            ans += 1\n    return ans\nori = count(s)\nfor _ in range(q):\n    (i, c) = input().split()\n    i = int(i)\n    l = 0 if i < 3 else i - 3\n    r = n if i > n - 2 else i + 2\n    prev = count(s[l:r])\n    s[i - 1] = c\n    now = count(s[l:r])\n    ori -= prev - now\n    print(ori)", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "def check(arr, ind):\n    if ind < len(arr) - 2:\n        if arr[ind] + arr[ind + 1] + arr[ind + 2] == 'abc':\n            return 1\n    if 0 < ind < len(arr) - 1:\n        if arr[ind - 1] + arr[ind] + arr[ind + 1] == 'abc':\n            return 1\n    if ind > 1:\n        if arr[ind - 2] + arr[ind - 1] + arr[ind] == 'abc':\n            return 1\n    return 0\n(N, Q) = map(int, input().split())\nS = input()\nts = S.count('abc')\narr = list(S)\nfor q in range(Q):\n    (a, b) = map(str, input().split())\n    if arr[int(a) - 1] == b:\n        print(ts)\n    else:\n        ts -= check(arr, int(a) - 1)\n        arr[int(a) - 1] = b\n        ts += check(arr, int(a) - 1)\n        print(ts)", "def solve():\n    (length, queries) = map(int, input().split())\n    string = list(input())\n    count = 0\n    for i in range(length - 2):\n        if ''.join(string[i:i + 3]) == 'abc':\n            count += 1\n    for i in range(queries):\n        (idx, char) = input().split()\n        idx = int(idx) - 1\n        for j in range(max(0, idx - 2), idx + 1):\n            if ''.join(string[j:j + 3]) == 'abc':\n                count -= 1\n        string[idx] = char\n        for j in range(max(0, idx - 2), idx + 1):\n            if ''.join(string[j:j + 3]) == 'abc':\n                count += 1\n        print(count)\nsolve()", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "(n, q) = [int(s) for s in input().split()]\ns = input().strip()\na = [s[i] for i in range(n)]\nabc_index = set()\nfor i in range(n - 2):\n    if a[i] == 'a' and a[i + 1] == 'b' and (a[i + 2] == 'c'):\n        abc_index.add(i)\nfor qq in range(q):\n    (pos, c) = [s for s in input().split()]\n    pos = int(pos) - 1\n    a[pos] = c\n    for i in range(max(0, pos - 2), min(pos + 1, n - 2)):\n        if a[i] == 'a' and a[i + 1] == 'b' and (a[i + 2] == 'c'):\n            abc_index.add(i)\n        else:\n            abc_index.discard(i)\n    print(len(abc_index))", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "def solve():\n    (n, q) = map(int, input().split(' '))\n    s = list(input())\n    count = 0\n    for i in range(n - 2):\n        if ''.join(s[i:i + 3]) == 'abc':\n            count += 1\n    for i in range(q):\n        (i, ch) = input().split(' ')\n        i = int(i) - 1\n        for j in range(max(0, i - 2), i + 1):\n            if ''.join(s[j:j + 3]) == 'abc':\n                count -= 1\n        s[i] = ch\n        for j in range(max(0, i - 2), i + 1):\n            if ''.join(s[j:j + 3]) == 'abc':\n                count += 1\n        print(count)\nsolve()", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "(n, q) = map(int, input().split())\nmas = input()\nmas = list(mas)\ncount = 0\nabc = set()\nif n > 3:\n    for i in range(n - 2):\n        if mas[i] == 'a' and mas[i + 1] == 'b' and (mas[i + 2] == 'c'):\n            count += 1\n            abc.add(i)\nfor j in range(q):\n    (pos, c) = map(str, input().split())\n    pos = int(pos)\n    pos -= 1\n    mas[pos] = c\n    if n < 3:\n        print(0)\n    else:\n        temp = 0\n        for i in range(pos - 2, pos + 1):\n            if i >= 0 and i < n - 2:\n                if mas[i] == 'a' and mas[i + 1] == 'b' and (mas[i + 2] == 'c'):\n                    if i not in abc:\n                        abc.add(i)\n                        temp += 1\n                elif i in abc:\n                    temp -= 1\n                    abc.discard(i)\n        count += temp\n        print(count)", "(n, q) = map(int, input().split())\ns = input()\nz = s.count('abc')\ns = list(s)\nfor _ in range(q):\n    t = input().split()\n    (i, c) = (int(t[0]) - 1, t[1])\n    for j in range(max(0, i - 2), i + 1):\n        if s[j:j + 3] == ['a', 'b', 'c']:\n            z -= 1\n    s[i] = c\n    for j in range(max(0, i - 2), i + 1):\n        if s[j:j + 3] == ['a', 'b', 'c']:\n            z += 1\n    print(z)", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "def solve():\n    (n, m) = map(int, input().split(' '))\n    a = list(input())\n    num = 0\n    for i in range(n - 2):\n        if ''.join(a[i:i + 3]) == 'abc':\n            num += 1\n    for i in range(m):\n        (index, ch) = input().split(' ')\n        index = int(index) - 1\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num -= 1\n        a[index] = ch\n        for j in range(max(0, index - 2), index + 1):\n            if ''.join(a[j:j + 3]) == 'abc':\n                num += 1\n        print(num)\nsolve()", "(n, q) = map(int, input().split())\ns = str(input())\ncount = s.count('abc')\ns = list(s)\nwhile q > 0:\n    (p, d) = input().split()\n    p = int(p) - 1\n    for i in range(max(0, p - 2), p + 1):\n        if ''.join(s[i:i + 3]) == 'abc':\n            count -= 1\n    s[p] = d\n    for j in range(max(0, p - 2), p + 1):\n        if ''.join(s[j:j + 3]) == 'abc':\n            count += 1\n    print(count)\n    q -= 1", "(n, q) = map(int, input().split())\ns = input()\nz = s.count('abc')\ns = list(s)\nfor _ in range(q):\n    t = input().split()\n    (i, c) = (int(t[0]) - 1, t[1])\n    z -= len([j for j in range(max(0, i - 2), i + 1) if s[j:j + 3] == ['a', 'b', 'c']])\n    s[i] = c\n    z += len([j for j in range(max(0, i - 2), i + 1) if s[j:j + 3] == ['a', 'b', 'c']])\n    print(z)", "(n, m) = map(int, input().split(' '))\na = list(input())\nnum = 0\nfor i in range(n - 2):\n    if ''.join(a[i:i + 3]) == 'abc':\n        num += 1\nfor i in range(m):\n    (index, ch) = input().split(' ')\n    index = int(index) - 1\n    for j in range(max(0, index - 2), index + 1):\n        if ''.join(a[j:j + 3]) == 'abc':\n            num -= 1\n    a[index] = ch\n    for j in range(max(0, index - 2), index + 1):\n        if ''.join(a[j:j + 3]) == 'abc':\n            num += 1\n    print(num)", "import sys, os, io\nimport math\nimport bisect\n(n, q) = [int(i) for i in input().split()]\ns = list(input())\npre = 0\nfor i in range(n - 2):\n    if ''.join(s[i:i + 3]) == 'abc':\n        pre += 1\nfor i in range(q):\n    (pos, c) = input().split()\n    pos = int(pos)\n    pos -= 1\n    for k in range(max(0, pos - 2), pos + 1):\n        if ''.join(s[k:k + 3]) == 'abc':\n            pre -= 1\n    s[pos] = c\n    for k in range(max(0, pos - 2), pos + 1):\n        if ''.join(s[k:k + 3]) == 'abc':\n            pre += 1\n    print(pre)", "(n, m) = map(int, input().split(' '))\na = list(input())\nnum = 0\nfor i in range(n - 2):\n    if ''.join(a[i:i + 3]) == 'abc':\n        num += 1\nfor i in range(m):\n    (id, ch) = input().split(' ')\n    id = int(id) - 1\n    for j in range(max(0, id - 2), id + 1):\n        if ''.join(a[j:j + 3]) == 'abc':\n            num -= 1\n    a[id] = ch\n    for j in range(max(0, id - 2), id + 1):\n        if ''.join(a[j:j + 3]) == 'abc':\n            num += 1\n    print(num)", "(n, q) = map(int, input().split())\ns = list(input())\ncnt = 0\nfor i in range(n - 2):\n    if ''.join(s[i:i + 3]) == 'abc':\n        cnt += 1\nfor i in range(q):\n    (index, c) = input().split()\n    index = int(index) - 1\n    for i in range(max(0, index - 2), index + 1):\n        if ''.join(s[i:i + 3]) == 'abc':\n            cnt -= 1\n    s[index] = c\n    for j in range(max(0, index - 2), index + 1):\n        if ''.join(s[j:j + 3]) == 'abc':\n            cnt += 1\n    print(cnt)"]