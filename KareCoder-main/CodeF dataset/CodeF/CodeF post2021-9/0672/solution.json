["import sys\nfrom collections import defaultdict\n\ndef main():\n    t = int(sys.stdin.readline()[:-1])\n    for _ in range(t):\n        n = int(sys.stdin.readline()[:-1])\n        s1 = sys.stdin.readline()[:-1]\n        s2 = sys.stdin.readline()[:-1]\n        ps = defaultdict(int)\n        for i in range(n):\n            if s1[i] > s2[n - 1 - i]:\n                st = (s2[n - 1 - i], s1[i])\n            else:\n                st = (s1[i], s2[n - 1 - i])\n            ps[st] += 1\n        (t, flag) = (0, True)\n        for (k, v) in ps.items():\n            if v & 1:\n                t += 1\n                if k[0] != k[1]:\n                    flag = False\n        if t == 0:\n            print('YES')\n        elif t == 1:\n            if flag:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('NO')\nmain()", "from collections import Counter\nfor _ in range(int(input())):\n    (_, s1, s2) = (input() for _ in range(3))\n    odd = [p for (p, v) in Counter((frozenset((x, y)) for (x, y) in zip(reversed(s1), s2))).items() if v % 2]\n    print(('NO', 'YES')[len(odd) == 0 or (len(odd) == 1 and len(odd[0]) == 1)])", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    s1 = input().strip()\n    s2 = input().strip()\n    cnt = {}\n    for i in range(n):\n        (x, y) = (ord(s1[i]), ord(s2[n - 1 - i]))\n        (x, y) = (min(x, y), max(x, y))\n        if (x, y) not in cnt:\n            cnt[x, y] = 0\n        cnt[x, y] += 1\n    if all([cnt[key] % 2 == 0 for key in cnt]):\n        return 'YES'\n    else:\n        un = 0\n        same = False\n        for key in cnt:\n            if cnt[key] % 2:\n                un += 1\n                same = key[0] == key[1]\n        return 'YES' if un == 1 and same else 'NO'\nfor _ in range(int(input())):\n    print(solve())", "from collections import Counter\nfor _ in range(int(input())):\n    (_, s1, s2) = (input() for _ in range(3))\n    odd = [p for (p, v) in Counter((frozenset((x, y)) for (x, y) in zip(reversed(s1), s2))).items() if v % 2]\n    print(('NO', 'YES')[len(odd) == 0 or (len(odd) == 1 and len(odd[0]) == 1)])", "from collections import Counter\nfor _ in range(int(input())):\n    (_, s1, s2) = (input() for _ in range(3))\n    odd = [p for (p, v) in Counter((frozenset((x, y)) for (x, y) in zip(reversed(s1), s2))).items() if v % 2]\n    print(('NO', 'YES')[len(odd) == 0 or (len(odd) == 1 and len(odd[0]) == 1)])", "from collections import Counter\nfor SHDFVBLWSGFVYUV in range(int(input())):\n    (SHDFVBLWSGFVYUV, sSHDFVBLWSGFVYUV1, sSHDFVBLWSGFVYUV2) = (input() for SHDFVBLWSGFVYUV in range(3))\n    odd = [p for (p, v) in Counter((frozenset((x, y)) for (x, y) in zip(reversed(sSHDFVBLWSGFVYUV1), sSHDFVBLWSGFVYUV2))).items() if v % 2]\n    print(('NO', 'YES')[len(odd) == 0 or (len(odd) == 1 and len(odd[0]) == 1)])", "def putin():\n    return map(int, input().split())\n\ndef solve():\n    n = int(input())\n    s = input()\n    r = input()\n    pairs = []\n    for i in range(len(s)):\n        pairs.append(tuple(sorted([s[i], r[n - 1 - i]])))\n    D = {}\n    for elem in pairs:\n        if elem in D:\n            D[elem] += 1\n        else:\n            D[elem] = 1\n    odd = 0\n    for elem in D:\n        if D[elem] % 2 == 1:\n            if elem[0] != elem[1]:\n                return 'NO'\n            odd += 1\n    return 'YES' if odd < 2 else 'NO'\nt = int(input())\nfor i in range(t):\n    print(solve())", "def putin():\n    return map(int, input().split())\n\ndef solv():\n    a = int(input())\n    x = input()\n    R = input()\n    pair = []\n    for j in range(len(x)):\n        pair.append(tuple(sorted([x[j], R[a - 1 - j]])))\n    A = {}\n    for elem in pair:\n        if elem in A:\n            A[elem] += 1\n        else:\n            A[elem] = 1\n    odd = 0\n    for elem in A:\n        if A[elem] % 2 == 1:\n            if elem[0] != elem[1]:\n                return 'NO'\n            odd += 1\n    return 'YES' if odd < 2 else 'NO'\nQ = int(input())\nfor J in range(Q):\n    print(solv())", "from collections import Counter\nfor i in range(int(input())):\n    n = int(input())\n    s = input()\n    t = input()\n    pairs = []\n    flag = True\n    for i in range(n):\n        pairs.append(tuple(sorted((s[i], t[n - i - 1]))))\n    x = Counter(pairs)\n    odd = 0\n    for t in x:\n        if x[t] % 2 == 1:\n            if t[0] != t[1]:\n                print('NO')\n                flag = False\n                break\n            odd += 1\n    if flag:\n        if odd < 2:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor i in range(t):\n    length = int(input())\n    s1 = list(input())\n    s2 = list(input())\n    tmp = dict()\n    for j in range(0, length):\n        c1 = s1[j]\n        c2 = s2[length - j - 1]\n        if c2 < c1:\n            (c1, c2) = (c2, c1)\n        tmp[c1 + c2] = tmp.get(c1 + c2, 0) + 1\n    flag = False\n    flag_odd = 0\n    for x in tmp:\n        if tmp[x] % 2 == 1:\n            flag_odd += 1\n            if length % 2 == 0:\n                print('NO')\n                flag = True\n                break\n            elif flag_odd > 1 or x[0] != x[1]:\n                print('NO')\n                flag = True\n                break\n    if flag:\n        continue\n    print('YES')", "from collections import defaultdict, Counter\nhasher = 10 ** 5\n\ndef solve():\n    n = int(input())\n    s = input()\n    t = input()\n    hs = defaultdict(int)\n    for i in range(n):\n        (lt, rt) = (s[i], t[n - 1 - i])\n        hs[ord(min(lt, rt)) * hasher + ord(max(lt, rt))] += 1\n    ans = 0\n    for (x, y) in hs.items():\n        if y % 2 == 0:\n            continue\n        ans += 1\n        if x // hasher != x % hasher:\n            print('NO')\n            return False\n    print('YES' if ans <= 1 else 'NO')\nfor _ in range(int(input())):\n    solve()", "tc = int(input())\nfor i in range(tc):\n    all_pairs = {}\n    s = int(input())\n    s1 = input()\n    s2 = input()\n    for i in range(s):\n        k1 = (s1[i], s2[-1 - i])\n        k2 = (s2[-1 - i], s1[i])\n        if k1 in all_pairs:\n            all_pairs[k1] += 1\n        else:\n            all_pairs[k1] = 1\n        if k2 in all_pairs and k2 != k1:\n            all_pairs[k2] += 1\n        elif k2 != k1:\n            all_pairs[k2] = 1\n    works = True\n    flag = True\n    for key in all_pairs:\n        if all_pairs[key] % 2 == 1:\n            if key[0] == key[1] and flag:\n                flag = False\n            else:\n                works = False\n                break\n    if works:\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\n\ndef one():\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    c = Counter(((min(s1[i], s2[-i - 1]), max(s1[i], s2[-i - 1])) for i in range(n)))\n    r = [k for (k, v) in c.items() if v % 2]\n    return len(r) == 0 or (len(r) == 1 and r[0][0] == r[0][1])\nt = int(input())\nfor i in range(t):\n    print('YES' if one() else 'NO')", "from collections import Counter\n\ndef Pre_Suf():\n    num = int(input())\n    p = input()\n    s = input()\n    c = Counter(((min(p[i], s[-i - 1]), max(p[i], s[-i - 1])) for i in range(num)))\n    res = [k for (k, v) in c.items() if v % 2]\n    return len(res) == 0 or (len(res) == 1 and res[0][0] == res[0][1])\ntestc = int(input())\nfor i in range(testc):\n    print('YES' if Pre_Suf() else 'NO')", "from typing import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    map_ = Counter(((min(s1[i], s2[-i - 1]), max(s1[i], s2[-i - 1])) for i in range(n)))\n    res = [key for (key, value) in map_.items() if value % 2]\n    ans = len(res) == 0 or (len(res) == 1 and res[0][0] == res[0][1])\n    print('YES' if ans else 'NO')", "from typing import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    map_ = Counter(((min(s1[i], s2[-i - 1]), max(s1[i], s2[-i - 1])) for i in range(n)))\n    res = [key for (key, value) in map_.items() if value % 2]\n    ans = len(res) == 0 or (len(res) == 1 and res[0][0] == res[0][1])\n    print('YES' if ans else 'NO')", "import sys\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    if s1 == s2:\n        print('YES')\n        continue\n    s2 = s2[::-1]\n    d = {}\n    for i in range(n):\n        temp = (max(ord(s1[i]), ord(s2[i])), min(ord(s1[i]), ord(s2[i])))\n        if temp not in d.keys():\n            d[temp] = 1\n        else:\n            d[temp] += 1\n    if n % 2 == 0:\n        stop = 0\n        for j in d.keys():\n            if d[j] % 2 == 1:\n                stop = 1\n                break\n        if stop == 1:\n            print('NO')\n        else:\n            print('YES')\n    else:\n        odd = 0\n        stop = 0\n        for j in d.keys():\n            if d[j] % 2 == 1:\n                odd += 1\n                if j[0] != j[1] or odd > 1:\n                    stop = 1\n                    break\n        if stop == 1:\n            print('NO')\n        else:\n            print('YES')", "import builtins\ntests = int(input())\nfor it in range(tests):\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    d = dict()\n    for i in range(n):\n        l = (min(s1[i], s2[n - i - 1]), max(s1[i], s2[n - i - 1]))\n        if l not in d:\n            d[l] = 0\n        d[l] += 1\n    cnt = 0\n    cnt2 = 0\n    for i in d:\n        if i[0] == i[1] and d[i] % 2 == 1:\n            cnt += 1\n        if i[0] != i[1] and d[i] % 2 == 1:\n            cnt2 = 1\n    if cnt2 > 0:\n        print('NO')\n        continue\n    if n % 2 == 0:\n        if cnt > 0:\n            print('NO')\n            continue\n        print('YES')\n        continue\n    if cnt != 1:\n        print('NO')\n        continue\n    print('YES')"]