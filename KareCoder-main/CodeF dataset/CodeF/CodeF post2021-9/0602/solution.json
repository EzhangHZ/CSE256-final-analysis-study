["from collections import defaultdict, OrderedDict\nInputList = lambda Dtype: [Dtype(x) for x in input().split()]\nimport bisect\n\ndef solve():\n    N = int(input())\n    nums = InputList(int)\n    n_zeros = bisect.bisect(nums, 0)\n    nums = nums[n_zeros:]\n    if not nums:\n        return 0\n    for _ in range(N - 1):\n        diff = []\n        if n_zeros:\n            diff.append(nums[0])\n            n_zeros -= 1\n        for i in range(len(nums) - 1):\n            cur = nums[i + 1] - nums[i]\n            if cur:\n                diff.append(cur)\n            else:\n                n_zeros += 1\n        if not diff:\n            return 0\n        if len(diff) == 1:\n            return diff[0]\n        nums = sorted(diff)\nReturnMode = True\nt = None\nif not t:\n    t = int(input())\nif ReturnMode:\n    for _ in range(t):\n        ans = solve()\n        if type(ans) == list:\n            print(*ans)\n        else:\n            print(ans)\nelse:\n    for _ in range(t):\n        solve()", "import sys\nimport math\nT = int(sys.stdin.readline())\n\ndef remove_zeros(A):\n    zeros = 0\n    for a in A:\n        if a == 0:\n            zeros += 1\n        else:\n            break\n    return (zeros, A[zeros:])\n\ndef solve(A):\n    (zeros, A) = remove_zeros(A)\n    while True:\n        if A == []:\n            return 0\n        if len(A) == 1:\n            return A[0]\n        new_A = [A[i + 1] - A[i] for i in range(len(A) - 1)]\n        if zeros > 0:\n            new_A = [A[0]] + new_A\n            zeros -= 1\n        new_A.sort()\n        (new_zeros, A) = remove_zeros(new_A)\n        zeros += new_zeros\nfor _ in range(T):\n    N = int(sys.stdin.readline())\n    A = list(map(int, sys.stdin.readline().split()))\n    print(solve(A))", "import bisect\n\ndef solve():\n    n = int(input())\n    g = list(map(int, input().split()))\n    cnt = n - 1\n    while cnt:\n        cnt -= 1\n        b = []\n        for i in range(1, len(g)):\n            b.append(g[i] - g[i - 1])\n        b.sort()\n        g = b[bisect.bisect(b, 0):]\n        if len(g) <= cnt:\n            g.insert(0, 0)\n    print(g[0])\nT = int(input())\nfor _ in range(T):\n    solve()", "import bisect\n\ndef solve():\n    n = int(input())\n    g = list(map(int, input().split()))\n    cnt = n - 1\n    while cnt:\n        cnt -= 1\n        b = []\n        for i in range(1, len(g)):\n            b.append(g[i] - g[i - 1])\n        b.sort()\n        g = b[bisect.bisect(b, 0):]\n        if len(g) <= cnt:\n            g.insert(0, 0)\n    print(g[0])\nT = int(input())\nfor _ in range(T):\n    solve()", "import bisect\n\ndef solve():\n    n = int(input())\n    g = list(map(int, input().split()))\n    cnt = n - 1\n    while cnt:\n        cnt -= 1\n        b = []\n        for i in range(1, len(g)):\n            b.append(g[i] - g[i - 1])\n        b.sort()\n        g = b[bisect.bisect(b, 0):]\n        if len(g) <= cnt:\n            g.insert(0, 0)\n    print(g[0])\nT = int(input())\nfor _ in range(T):\n    solve()", "for tcase in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c0 = len([x for x in a if x == 0])\n    a = [x for x in a if x > 0]\n    while len(a) > 1:\n        if c0 > 0:\n            a.append(0)\n            c0 -= 1\n        a.sort()\n        b = []\n        for i in range(len(a) - 1):\n            if a[i] == a[i + 1]:\n                c0 += 1\n            else:\n                b.append(a[i + 1] - a[i])\n        a = b[:]\n    print(a[0] if len(a) > 0 else 0)", "t = int(input())\nwhile t:\n    p = int(input())\n    s = list(map(int, input().split()))\n    check = 0\n    while p > 1:\n        a = []\n        if check > 0:\n            check -= 1\n            a.append(s[0])\n        for i in range(1, len(s)):\n            if s[i] == s[i - 1]:\n                check += 1\n            else:\n                a.append(s[i] - s[i - 1])\n        s = a\n        if len(s) == 0:\n            break\n        s = sorted(a)\n        p -= 1\n    if len(s) == 0:\n        print(0)\n    else:\n        print(s[0])\n    t -= 1", "for tcase in range(int(input())):\n    n = int(input())\n    a = []\n    c0 = 0\n    for x in map(int, input().split()):\n        if x == 0:\n            c0 += 1\n        else:\n            a.append(x)\n    while len(a) > 1:\n        if c0 > 0:\n            a.append(0)\n            c0 -= 1\n        a.sort()\n        b = []\n        for i in range(len(a) - 1):\n            if a[i] == a[i + 1]:\n                c0 += 1\n            else:\n                b.append(a[i + 1] - a[i])\n        a = b[:]\n    print(a[0] if len(a) > 0 else 0)", "import sys\ninput = sys.stdin.readline\n\ndef high_bound(arr, val):\n    l = -1\n    r = len(arr)\n    while r - l > 1:\n        m = (l + r) // 2\n        if arr[m] <= val:\n            l = m\n        else:\n            r = m\n    return r\nfor _ in range(int(input())):\n    n = int(input())\n    (*a,) = map(int, input().split())\n    cnt = high_bound(a, 0)\n    a = [0] * (cnt > 0) + a[cnt:]\n    cnt = max(cnt - 1, 0)\n    for i in range(n - 1, 0, -1):\n        b = []\n        for j in range(len(a) - 1):\n            d = a[j + 1] - a[j]\n            if d:\n                b.append(d)\n            else:\n                cnt += 1\n        if cnt:\n            b.append(0)\n            cnt -= 1\n        b.sort()\n        a = b\n    print(b[0])", "from bisect import bisect as b\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    f = l.copy()\n    l.sort()\n    for j in range(1, n):\n        k = []\n        for i in range(1, len(l)):\n            k.append(l[i] - l[i - 1])\n        k.sort()\n        l = k[b(k, 0):]\n        if len(l) < n - j:\n            l.insert(0, 0)\n    if len(l) == 1:\n        print(l[0])", "from bisect import bisect as b\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for j in range(1, n):\n        k = []\n        for i in range(1, len(l)):\n            k.append(l[i] - l[i - 1])\n        k.sort()\n        l = k[b(k, 0):]\n        if len(l) < n - j:\n            l.insert(0, 0)\n    if len(l) == 1:\n        print(l[0])", "from bisect import bisect as b\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    f = l.copy()\n    l.sort()\n    for j in range(1, n):\n        k = []\n        for i in range(1, len(l)):\n            k.append(l[i] - l[i - 1])\n        k.sort()\n        l = k[k.count(0):]\n        if len(l) < n - j:\n            l.insert(0, 0)\n    if len(l) == 1:\n        print(l[0])", "from bisect import bisect as b\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    f = l.copy()\n    l.sort()\n    for j in range(1, n):\n        k = []\n        for i in range(1, len(l)):\n            k.append(l[i] - l[i - 1])\n        k.sort()\n        l = k[k.count(0):]\n        if len(l) < n - j:\n            l.insert(0, 0)\n    if len(l) == 1:\n        print(l[0])", "from bisect import bisect as b\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for j in range(1, n):\n        k = []\n        for i in range(1, len(l)):\n            k.append(l[i] - l[i - 1])\n        k.sort()\n        l = k[b(k, 0):]\n        if len(l) < n - j:\n            l.insert(0, 0)\n    if len(l) == 1:\n        print(l[0])", "from bisect import bisect as b\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for j in range(1, n):\n        k = []\n        for i in range(1, len(l)):\n            k.append(l[i] - l[i - 1])\n        k.sort()\n        l = k[b(k, 0):]\n        if len(l) < n - j:\n            l.insert(0, 0)\n    if len(l) == 1:\n        print(l[0])", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    for j in range(1, n):\n        k = []\n        for i in range(1, len(l)):\n            k.append(l[i] - l[i - 1])\n        k.sort()\n        l = k[k.count(0):]\n        if len(l) < n - j:\n            l.insert(0, 0)\n    if len(l) == 1:\n        print(l[0])", "from bisect import bisect as b\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    f = l.copy()\n    l.sort()\n    for j in range(1, n):\n        k = []\n        for i in range(1, len(l)):\n            k.append(l[i] - l[i - 1])\n        k.sort()\n        l = k[k.count(0):]\n        if len(l) < n - j:\n            l.insert(0, 0)\n    if len(l) == 1:\n        print(l[0])", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    cz = 0\n    while len(l) > 1:\n        temp = list()\n        for i in range(len(l) - 1):\n            val = l[i + 1] - l[i]\n            if val > 0:\n                temp.append(val)\n            else:\n                cz += 1\n        if cz > 0:\n            temp.append(0)\n            cz -= 1\n        temp.sort()\n        l = temp\n    if len(l) == 0:\n        print(0)\n    else:\n        print(l[0])", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    f = l.copy()\n    l.sort()\n    for j in range(1, n):\n        k = []\n        for i in range(1, len(l)):\n            k.append(l[i] - l[i - 1])\n        k.sort()\n        l = k[k.count(0):]\n        if len(l) < n - j:\n            l.insert(0, 0)\n    if len(l) == 1:\n        print(l[0])", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    arrA = list(map(int, input().split()))\n    arr = arrA.copy()\n    arrA.sort()\n    for j in range(1, n):\n        k = []\n        for i in range(len(arrA) - 1):\n            k.append(arrA[i + 1] - arrA[i])\n        k.sort()\n        arrA = k[k.count(0):]\n        if len(arrA) < n - j:\n            arrA.insert(0, 0)\n    if len(arrA) == 1:\n        print(arrA[0])", "from bisect import bisect as b\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for j in range(1, n):\n        k = []\n        for i in range(1, len(l)):\n            k.append(l[i] - l[i - 1])\n        k.sort()\n        l = k[b(k, 0):]\n        if len(l) < n - j:\n            l.insert(0, 0)\n        if len(l) == 1:\n            break\n    if len(l) == 1:\n        print(l[0])", "from bisect import bisect as b\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for j in range(1, n):\n        k = []\n        for i in range(1, len(l)):\n            k.append(l[i] - l[i - 1])\n        k.sort()\n        l = k[b(k, 0):]\n        if len(l) < n - j:\n            l.insert(0, 0)\n    if len(l) == 1:\n        print(l[0])", "from bisect import bisect as b\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for j in range(1, n):\n        k = []\n        for i in range(1, len(l)):\n            k.append(l[i] - l[i - 1])\n        k.sort()\n        l = k[b(k, 0):]\n        if len(l) < n - j:\n            l.insert(0, 0)\n    if len(l) == 1:\n        print(l[0])", "from bisect import bisect as b\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for j in range(1, n):\n        k = []\n        for i in range(1, len(l)):\n            k.append(l[i] - l[i - 1])\n        k.sort()\n        l = k[b(k, 0):]\n        if len(l) < n - j:\n            l.insert(0, 0)\n    if len(l) == 1:\n        print(l[0])", "from bisect import bisect as b\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for j in range(1, n):\n        k = []\n        for i in range(1, len(l)):\n            k.append(l[i] - l[i - 1])\n        k.sort()\n        l = k[b(k, 0):]\n        if len(l) < n - j:\n            l.insert(0, 0)\n    if len(l) == 1:\n        print(l[0])", "from collections import Counter\nfor tcase in range(int(input())):\n    n = int(input())\n    a = list(Counter(map(int, input().split())).items())\n    a.sort()\n    while not (n == 1 or (len(a) == 2 and a[0][0] == 0)):\n        b = Counter()\n        for i in range(len(a) - 1):\n            if a[i][1] > 1:\n                b[0] += a[i][1] - 1\n            b[a[i + 1][0] - a[i][0]] += 1\n        if a[-1][1] > 1:\n            b[0] += a[-1][1] - 1\n        a = list(b.items())\n        a.sort()\n        n -= 1\n    if len(a) > 1:\n        print(a[1][0] - a[0][0])\n    elif a[0][1] > 1:\n        print(0)\n    else:\n        print(a[0][0])", "from collections import defaultdict\nt = int(input())\nfor jj in range(t):\n    n = int(input())\n    p = [int(i) for i in input().split(' ')]\n    dic = defaultdict(int)\n    for i in p:\n        dic[i] += 1\n    while len(dic) > 1:\n        dd = defaultdict(int)\n        k = sorted(dic.keys())\n        if dic[k[0]] > 1:\n            dd[0] += dic[k[0]] - 1\n        for i in range(1, len(k)):\n            dd[k[i] - k[i - 1]] += 1\n            if dic[k[i]] > 1:\n                dd[0] += dic[k[i]] - 1\n        dic = dd\n    for a in dic.keys():\n        if dic[a] == 1:\n            ans = a\n        else:\n            ans = 0\n    print(ans)"]