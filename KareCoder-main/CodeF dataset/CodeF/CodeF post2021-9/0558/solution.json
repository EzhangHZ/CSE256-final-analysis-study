["for _ in range(int(input())):\n    n = int(input())\n    x = [(int(i[1]), i[0]) for i in enumerate(input().split())]\n    y = [(int(i[1]), i[0]) for i in enumerate(input().split())]\n    x = sorted(x, reverse=True)\n    y = sorted(y, reverse=True)\n    q = set()\n    for i in range(n):\n        q.add(x[i][1])\n        q.add(y[i][1])\n        if len(q) == i + 1:\n            break\n    ans = ['0'] * n\n    for i in q:\n        ans[i] = '1'\n    print(''.join(ans))", "for _ in range(int(input())):\n    n = int(input())\n    x = [(int(i[1]), i[0]) for i in enumerate(input().split())]\n    y = [(int(i[1]), i[0]) for i in enumerate(input().split())]\n    x = sorted(x, reverse=True)\n    y = sorted(y, reverse=True)\n    q = set()\n    for i in range(n):\n        q.add(x[i][1])\n        q.add(y[i][1])\n        if len(q) == i + 1:\n            break\n    ans = ['0'] * n\n    for i in q:\n        ans[i] = '1'\n    print(''.join(ans))", "for _ in range(int(input())):\n    n = int(input())\n    x = [(int(i[1]), i[0]) for i in enumerate(input().split())]\n    y = [(int(i[1]), i[0]) for i in enumerate(input().split())]\n    x = sorted(x, reverse=True)\n    y = sorted(y, reverse=True)\n    q = set()\n    for i in range(n):\n        q.add(x[i][1])\n        q.add(y[i][1])\n        if len(q) == i + 1:\n            break\n    ans = ['0'] * n\n    for i in q:\n        ans[i] = '1'\n    print(''.join(ans))", "for _ in range(int(input())):\n    n = int(input())\n    x = [(int(i[1]), i[0]) for i in enumerate(input().split())]\n    y = [(int(i[1]), i[0]) for i in enumerate(input().split())]\n    x = sorted(x, reverse=True)\n    y = sorted(y, reverse=True)\n    q = set()\n    for i in range(n):\n        q.add(x[i][1])\n        q.add(y[i][1])\n        if len(q) == i + 1:\n            break\n    ans = ['0'] * n\n    for i in q:\n        ans[i] = '1'\n    print(''.join(ans))", "import sys\nprinter = []\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    a = sorted([(int(s), i) for (i, s) in enumerate(sys.stdin.readline().split())], reverse=True)\n    b = sorted([(int(s), i) for (i, s) in enumerate(sys.stdin.readline().split())], reverse=True)\n    nodes = set()\n    for i in range(n):\n        nodes.add(a[i][1])\n        nodes.add(b[i][1])\n        if len(nodes) == i + 1:\n            break\n    printer.append(''.join(['1' if i in nodes else '0' for i in range(n)]))\nprint('\\n'.join(printer))", "from typing import List\n\ndef solve(a: List[int], b: List[int]) -> str:\n    n = len(a)\n    pairs = [(a[i], b[i], i) for i in range(n)]\n    sorted_by_a = sorted(pairs)\n    sorted_by_b = sorted(pairs, key=lambda p: (p[1], p[0], p[2]))\n    visited = [False for _ in range(n)]\n    minimal_a = max(a)\n    minimal_b = max(b)\n    while sorted_by_a and sorted_by_b:\n        for p in [sorted_by_a[-1], sorted_by_b[-1]]:\n            (a, b, i) = p\n            if a >= minimal_a:\n                visited[i] = True\n            if b >= minimal_b:\n                visited[i] = True\n            if visited[i]:\n                minimal_a = min(minimal_a, a)\n                minimal_b = min(minimal_b, b)\n        if visited[sorted_by_a[-1][2]]:\n            sorted_by_a.pop()\n            continue\n        if visited[sorted_by_b[-1][2]]:\n            sorted_by_b.pop()\n            continue\n        break\n    return ''.join([{False: '0', True: '1'}[v] for v in visited])\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(solve(a, b))", "from collections import deque\nfrom sys import stdin\nfrom typing import DefaultDict\nread = stdin.readline\nfor _ in range(int(read())):\n    n = int(read())\n    a = list(map(int, read().split()))\n    asort = sorted([(a[i], i) for i in range(n)])\n    b = list(map(int, read().split()))\n    bsort = sorted([(b[i], i) for i in range(n)])\n    ans = [0] * n\n    memo = DefaultDict(lambda : set([]))\n    for i in range(n - 1):\n        memo[asort[i][1]].add(asort[i + 1][1])\n        memo[bsort[i][1]].add(bsort[i + 1][1])\n    visited = set([asort[-1][1]])\n    queue = deque([asort[-1][1]])\n    ans[asort[-1][1]] = 1\n    while queue:\n        curr = queue.popleft()\n        for adj in memo[curr]:\n            if not ans[adj]:\n                queue.append(adj)\n                ans[adj] = 1\n    print(*ans, sep='')", "from collections import deque\nfrom sys import stdin\nfrom typing import DefaultDict\nread = stdin.readline\nfor _ in range(int(read())):\n    n = int(read())\n    a = list(map(int, read().split()))\n    asort = sorted([(a[i], i) for i in range(n)])\n    b = list(map(int, read().split()))\n    bsort = sorted([(b[i], i) for i in range(n)])\n    ans = [0] * n\n    memo = DefaultDict(lambda : set([]))\n    for i in range(n - 1):\n        memo[asort[i][1]].add(asort[i + 1][1])\n        memo[bsort[i][1]].add(bsort[i + 1][1])\n    visited = set([asort[-1][1]])\n    queue = deque([asort[-1][1]])\n    ans[asort[-1][1]] = 1\n    while queue:\n        curr = queue.popleft()\n        for adj in memo[curr]:\n            if not ans[adj]:\n                queue.append(adj)\n                ans[adj] = 1\n    print(*ans, sep='')", "from collections import deque\nfrom typing import DefaultDict\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    asort = sorted([(a[i], i) for i in range(n)])\n    b = list(map(int, input().split()))\n    bsort = sorted([(b[i], i) for i in range(n)])\n    ans = [0] * n\n    memo = DefaultDict(lambda : set([]))\n    for i in range(n - 1):\n        memo[asort[i][1]].add(asort[i + 1][1])\n        memo[bsort[i][1]].add(bsort[i + 1][1])\n    visited = set([asort[-1][1]])\n    queue = deque([asort[-1][1]])\n    ans[asort[-1][1]] = 1\n    while queue:\n        curr = queue.popleft()\n        for adj in memo[curr]:\n            if not ans[adj]:\n                queue.append(adj)\n                ans[adj] = 1\n    print(*ans, sep='')", "from collections import deque, defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    pairs = [(a[i], b[i], i) for i in range(n)]\n    sorta = sorted(pairs)\n    sortb = sorted(pairs, key=lambda x: (x[1], x[0], x[2]))\n    vis = [False] * n\n    ma = max(a)\n    mb = max(b)\n    while sorta and sortb:\n        for p in [sorta[-1], sortb[-1]]:\n            (a, b, i) = p\n            if a >= ma:\n                vis[i] = True\n            if b >= mb:\n                vis[i] = True\n            if vis[i]:\n                ma = min(ma, a)\n                mb = min(mb, b)\n        if vis[sorta[-1][2]]:\n            sorta.pop()\n            continue\n        if vis[sortb[-1][2]]:\n            sortb.pop()\n            continue\n        break\n    ans = ''\n    for i in vis:\n        if i:\n            ans += '1'\n        else:\n            ans += '0'\n    print(ans)", "t = int(input())\nout = ''\nfor _ in range(t):\n    n = int(input())\n    a = [[int(x)] for x in input().split()]\n    b = [[int(x)] for x in input().split()]\n    order = [[a[i][0], b[i][0]] for i in range(n)]\n    for i in range(n):\n        a[i].append(b[i][0])\n        b[i].append(a[i][0])\n    a.sort()\n    b.sort()\n    i = n - 1\n    j = n - 1\n    min1 = a[i][0]\n    min2 = b[i][0]\n    while i >= 0 or j >= 0:\n        if i >= 0 and a[i][0] >= min1:\n            min2 = min(min2, a[i][1])\n            i -= 1\n        elif j >= 0 and b[j][0] >= min2:\n            min1 = min(min1, b[j][1])\n            j -= 1\n        else:\n            break\n    for (g1, g2) in order:\n        out += str(int(g1 >= min1 or g2 >= min2))\n    out += '\\n'\nprint(out)", "import sys\ninput = sys.stdin.readline\nout = ''\nfor _ in range(int(input())):\n    n = int(input())\n    a = [[int(x)] for x in input().split()]\n    b = [[int(x)] for x in input().split()]\n    order = [[a[i][0], b[i][0]] for i in range(n)]\n    for i in range(n):\n        a[i].append(b[i][0])\n        b[i].append(a[i][0])\n    a.sort()\n    b.sort()\n    i = n - 1\n    j = n - 1\n    min1 = a[i][0]\n    min2 = b[i][0]\n    while i >= 0 or j >= 0:\n        if i >= 0 and a[i][0] >= min1:\n            min2 = min(min2, a[i][1])\n            i -= 1\n        elif j >= 0 and b[j][0] >= min2:\n            min1 = min(min1, b[j][1])\n            j -= 1\n        else:\n            break\n    for (g1, g2) in order:\n        out += str(int(g1 >= min1 or g2 >= min2))\n    print(out)\n    out = ''", "out = ''\nfor _ in range(int(input())):\n    n = int(input())\n    a = [[int(x)] for x in input().split()]\n    b = [[int(x)] for x in input().split()]\n    order = [[a[i][0], b[i][0]] for i in range(n)]\n    for i in range(n):\n        a[i].append(b[i][0])\n        b[i].append(a[i][0])\n    a.sort()\n    b.sort()\n    i = n - 1\n    j = n - 1\n    min1 = a[i][0]\n    min2 = b[i][0]\n    while i >= 0 or j >= 0:\n        if i >= 0 and a[i][0] >= min1:\n            min2 = min(min2, a[i][1])\n            i -= 1\n        elif j >= 0 and b[j][0] >= min2:\n            min1 = min(min1, b[j][1])\n            j -= 1\n        else:\n            break\n    for (g1, g2) in order:\n        out += str(int(g1 >= min1 or g2 >= min2))\n    print(out)\n    out = ''", "import functools\n\ndef reader():\n    a = [int(v) for v in input().split(' ')]\n    unsort_a = a[:]\n    a = [i for i in range(len(a))]\n    cmp = lambda x, y: unsort_a[x] - unsort_a[y]\n    a.sort(key=functools.cmp_to_key(cmp))\n    return (unsort_a, a)\n\ndef solve(n):\n    (unsort_a, a) = reader()\n    (unsort_b, b) = reader()\n    l = n - 1\n    cnt = [0] * n\n    need = 0\n    ans = [False] * n\n    while l >= 0:\n        aidx = a[l]\n        bidx = b[l]\n        cnt[aidx] += 1\n        cnt[bidx] -= 1\n        ans[aidx] = True\n        ans[bidx] = True\n        if aidx != bidx:\n            need += 2\n            if cnt[aidx] == 0:\n                need -= 2\n            if cnt[bidx] == 0:\n                need -= 2\n        if need == 0:\n            break\n        l -= 1\n    assert need == 0\n    print(''.join(['1' if i else '0' for i in ans]))\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    solve(n)", "from heapq import heappush, heappop\nfrom collections import deque\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ha = []\n    hb = []\n    for i in range(n):\n        heappush(ha, [-a[i], i])\n        heappush(hb, [-b[i], i])\n    qa = deque([])\n    qb = deque([])\n    x = heappop(ha)\n    qb.append(x[1])\n    ans = ['0' for i in range(n)]\n    va = [0 for i in range(n)]\n    vb = [0 for i in range(n)]\n    va[x[1]] = 1\n    ans[x[1]] = '1'\n    while True:\n        if len(qb) == 0 and len(qa) == 0:\n            break\n        if len(qb) > 0:\n            x = qb.popleft()\n            if vb[x] == 1:\n                continue\n            while len(hb) > 0 and hb[0][1] != x:\n                y = heappop(hb)\n                qa.append(y[1])\n                ans[y[1]] = '1'\n                vb[y[1]] = 1\n            heappop(hb)\n        if len(qa) > 0:\n            x = qa.popleft()\n            if va[x] == 1:\n                continue\n            while len(ha) > 0 and ha[0][1] != x:\n                y = heappop(ha)\n                qb.append(y[1])\n                ans[y[1]] = '1'\n                va[y[1]] = 1\n            heappop(ha)\n    print(''.join(ans))", "from collections import deque\nfor i in range(int(input())):\n    a = int(input())\n    b = enumerate([int(x) for x in input().split()], start=1)\n    c = enumerate([int(x) for x in input().split()], start=1)\n    b = [i[0] for i in sorted(b, key=lambda x: x[1])]\n    c = [i[0] for i in sorted(c, key=lambda x: x[1])]\n    d1 = {}\n    d2 = {}\n    for i in range(a):\n        d1[b[i]] = i\n        d2[c[i]] = i\n    winners = set()\n    b = deque(b)\n    c = deque(c)\n    temp = deque([b.pop(), c.pop()])\n    while len(temp) > 0:\n        q = temp.pop()\n        q1 = d1[q]\n        q2 = d2[q]\n        if len(b) > q1:\n            for i in range(q1, len(b)):\n                temp.appendleft(b.pop())\n        if len(c) > q2:\n            for i in range(q2, len(c)):\n                temp.appendleft(c.pop())\n        winners.add(q)\n    for i in range(a):\n        if i + 1 in winners:\n            print('1', end='')\n        else:\n            print('0', end='')\n    print()", "import functools\n\ndef reader():\n    a = [int(v) for v in input().split(' ')]\n    unsort_a = a[:]\n    a = [i for i in range(len(a))]\n    cmp = lambda x, y: unsort_a[x] - unsort_a[y]\n    a.sort(key=functools.cmp_to_key(cmp))\n    return (unsort_a, a)\n\ndef solve(n):\n    (unsort_a, a) = reader()\n    (unsort_b, b) = reader()\n    l = n - 1\n    cnt = [0] * n\n    need = 0\n    ans = [False] * n\n    mina = unsort_a[a[n - 1]]\n    minb = unsort_b[b[n - 1]]\n    (i, j) = (n - 1, n - 1)\n    ans[a[i]] = ans[b[j]] = True\n    while True:\n        change = False\n        while j >= 0 and unsort_b[b[j]] >= minb:\n            mina = min(mina, unsort_a[b[j]])\n            ans[b[j]] = True\n            change = True\n            j -= 1\n        while i >= 0 and unsort_a[a[i]] >= mina:\n            minb = min(minb, unsort_b[a[i]])\n            ans[a[i]] = True\n            change = True\n            i -= 1\n        if not change:\n            break\n    print(''.join(['1' if i else '0' for i in ans]))\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    solve(n)", "def inlt():\n    return list(map(int, input().split()))\nimport sys\nfrom collections import defaultdict\nfrom math import sqrt, ceil, floor, factorial, log\nfrom bisect import bisect_left, bisect_right\nfrom io import BytesIO, IOBase, StringIO\ninput = lambda : sys.stdin.readline().rstrip()\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    l1 = inlt()\n    l2 = inlt()\n    for j in range(len(l1)):\n        l1[j] = [l1[j], j]\n    for j in range(len(l2)):\n        l2[j] = [l2[j], j]\n    l1.sort()\n    l2.sort()\n    dic1 = defaultdict(int)\n    dic2 = defaultdict(int)\n    for j in range(len(l1)):\n        dic1[l1[j][1]] = j\n    for j in range(len(l2)):\n        dic2[l2[j][1]] = j\n    ans = defaultdict(bool)\n    start = [l1[-1]]\n    ans[l1[-1][1]] = True\n    l1[-1] = []\n    while len(start) > 0:\n        new = []\n        for j in start:\n            ans[j[1]] = True\n            first = dic1[j[1]] + 1\n            second = dic2[j[1]] + 1\n            while first < n and len(l1[first]) > 0:\n                new.append(l1[first])\n                l1[first] = []\n                first += 1\n            while second < n and len(l2[second]) > 0:\n                new.append(l2[second])\n                l2[second] = []\n                second += 1\n        start = new\n    st = ''\n    for j in range(0, n):\n        if ans[j]:\n            st = st + '1'\n        else:\n            st = st + '0'\n    print(st)"]