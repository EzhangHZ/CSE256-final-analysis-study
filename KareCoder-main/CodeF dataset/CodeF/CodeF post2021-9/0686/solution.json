["from heapq import heappop, heappush\nimport math\n(n, m) = map(int, input().split())\nlst = [[] for i in range(n + 1)]\npaths = [0] * (n + 1)\nfor i in range(m):\n    (a, b) = map(int, input().split())\n    lst[b].append(a)\n    paths[a] += 1\narr = []\narr.append((0, n))\ndays = [math.inf] * (n + 1)\ndays[n] = 0\nmark = [False] * (n + 1)\nwhile arr:\n    ele = heappop(arr)\n    if mark[ele[1]]:\n        continue\n    mark[ele[1]] = True\n    for i in lst[ele[1]]:\n        if ele[0] + paths[i] < days[i]:\n            days[i] = ele[0] + paths[i]\n            heappush(arr, (days[i], i))\n        paths[i] -= 1\nprint(days[1])", "import heapq as h\nINF = 1001001001\n(N, M) = map(int, input().split())\nG = [[] for _ in range(N)]\nd = [0] * N\nfor _ in range(M):\n    (U, V) = map(int, input().split())\n    G[V - 1].append(U - 1)\n    d[U - 1] += 1\ndists = [INF] * N\ndists[N - 1] = 0\nqueue = [(0, N - 1)]\nwhile queue:\n    (dist, V) = h.heappop(queue)\n    if dists[V] < dist:\n        continue\n    for v in G[V]:\n        if dist + d[v] < dists[v]:\n            dists[v] = dist + d[v]\n            h.heappush(queue, (dist + d[v], v))\n        d[v] -= 1\nprint(dists[0])", "import heapq as h\nINF = 1001001001\n(N, M) = map(int, input().split())\nG = [[] for _ in range(N)]\nd = [0] * N\nfor _ in range(M):\n    (U, V) = map(int, input().split())\n    G[V - 1].append(U - 1)\n    d[U - 1] += 1\ndists = [INF] * N\ndists[N - 1] = 0\nqueue = [(0, N - 1)]\nwhile queue:\n    (dist, V) = h.heappop(queue)\n    if dists[V] < dist:\n        continue\n    for v in G[V]:\n        if dist + d[v] < dists[v]:\n            dists[v] = dist + d[v]\n            h.heappush(queue, (dist + d[v], v))\n        d[v] -= 1\nprint(dists[0])", "import heapq as h\nINF = 1001001001\n(N, M) = map(int, input().split())\nG = [[] for _ in range(N)]\nd = [0] * N\nfor _ in range(M):\n    (U, V) = map(int, input().split())\n    G[V - 1].append(U - 1)\n    d[U - 1] += 1\ndists = [INF] * N\ndists[N - 1] = 0\nqueue = [(0, N - 1)]\nwhile queue:\n    (dist, V) = h.heappop(queue)\n    if dists[V] < dist:\n        continue\n    for v in G[V]:\n        if dist + d[v] < dists[v]:\n            dists[v] = dist + d[v]\n            h.heappush(queue, (dist + d[v], v))\n        d[v] -= 1\nprint(dists[0])", "import heapq\ninput = __import__('sys').stdin.readline\n(n, m) = map(int, input().split())\ndeg = [0] * n\nrev_adj = [[] for _ in range(n)]\nfor _ in range(m):\n    (u, v) = map(lambda x: int(x) - 1, input().split())\n    deg[u] += 1\n    rev_adj[v].append(u)\ndist = [10 ** 6] * n\ndist[-1] = 0\nqueue = []\nheapq.heappush(queue, (0, n - 1))\nwhile len(queue) > 0:\n    (d, u) = heapq.heappop(queue)\n    if d > dist[u]:\n        continue\n    for v in rev_adj[u]:\n        if dist[v] > dist[u] + deg[v]:\n            dist[v] = dist[u] + deg[v]\n            heapq.heappush(queue, (dist[v], v))\n        deg[v] -= 1\nprint(dist[0])"]