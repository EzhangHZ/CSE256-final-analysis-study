["def count(b, n):\n    l = []\n    for i in range(n):\n        c = 0\n        for j in range(n):\n            if b[j][j - i] == '1':\n                c += 1\n        l.append(c)\n    return l\nfor i in range(int(input())):\n    s = input()\n    n = int(input())\n    p = []\n    for j in range(n):\n        p.append(input())\n    s = count(p, n)\n    print(n - 2 * max(s) + sum(s))", "T = int(input())\nq = []\nfor i in range(T):\n    input()\n    n = int(input())\n    m = []\n    for i in range(n):\n        c = input()\n        m.append(c)\n    q.append((n, m))\n\ndef solve(n, mat):\n    max_long = 0\n    id = -1\n    counter = []\n    for r in range(n):\n        tot = 0\n        for j in range(n):\n            c = (r + j) % n\n            if mat[j][c] == '1':\n                tot += 1\n        if tot > max_long:\n            max_long = tot\n            id = i\n        counter.append(tot)\n    counter.remove(max_long)\n    print(n - max_long + sum(counter))\nfor (n, mat) in q:\n    solve(n, mat)", "from math import *\nfrom collections import *\nimport math, os, sys, heapq, bisect, random\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for case in range(how_much_noob_I_am):\n        inp()\n        n = inpu()\n        l = [inp() for i in range(n)]\n        res = 0\n        cnt2 = 0\n        for i in range(n):\n            cnt2 += l[i].count('1')\n        for i in range(n):\n            cnt = 0\n            p = i\n            for j in range(n):\n                if l[j][p % n] == '1':\n                    cnt += 1\n                p += 1\n            res = max(res, cnt)\n        print(n + cnt2 - 2 * res)\nmain()", "def solve():\n    ans = 0\n    for s in range(n):\n        i = 0\n        j = s\n        diag = 0\n        while i < n:\n            if matrix[i][j] == '1':\n                diag += 1\n            i += 1\n            j += 1\n            if j == n:\n                j = 0\n        ans = max(ans, diag)\n    return ans\nfor _ in range(int(input())):\n    a = input()\n    n = int(input())\n    matrix = []\n    ones = 0\n    for _ in range(n):\n        matrix.append(input())\n        ones += matrix[-1].count('1')\n    print(ones - 2 * solve() + n)", "for _ in range(int(input())):\n    thousandminusseven = input()\n    n = int(input())\n    a = [input() for _ in range(n)]\n    for i in range(1, n):\n        a[i] = a[i][i:n] + a[i][:i]\n    cnt = sum((sum((c == '1' for c in t)) for t in a))\n    bans = n ** 2\n    mxc = max((sum((a[i][j] == '1' for i in range(n))) for j in range(n)))\n    print(cnt + n - 2 * mxc)", "for _ in range(int(input())):\n    input()\n    n = int(input())\n    o = 0\n    arr = list()\n    for i in range(n):\n        s = input()\n        arr.append(s)\n        o += s.count('1')\n    best = 0\n    for i in range(n):\n        curr = 0\n        for j in range(n):\n            if arr[j][(j + i) % n] == '1':\n                curr += 1\n        best = max(best, curr)\n    print(o - best + (n - best))", "import sys\n\ndef main():\n    input = sys.stdin\n    if len(sys.argv) >= 2:\n        input = open(sys.argv[1], 'r')\n    n = int(input.readline().strip())\n    for i in range(n):\n        input.readline()\n        size = int(input.readline().strip())\n        mtrx = [[int(t) for t in input.readline().strip()] for i in range(size)]\n        countOnesOnDiag = lambda idx, m, sz: sum([m[(idx + k) % size][k] for k in range(sz)])\n        OnesOnDiag = [countOnesOnDiag(i, mtrx, size) for i in range(size)]\n        tmax = max(OnesOnDiag)\n        tsum = sum(OnesOnDiag)\n        print(size - tmax + tsum - tmax)\nmain()", "t = int(input())\nwhile t:\n    n = input()\n    if n != '':\n        n = int(n)\n        ones = [0] * n\n        for turn in range(n):\n            s = input()\n            for i in range(n):\n                if s[i] == '1':\n                    ones[i - turn] = ones[i - turn] + 1\n        print(sum(ones) - max(ones) + n - max(ones))\n    else:\n        continue\n    t = t - 1", "def intlist():\n    return [int(i) for i in input()]\n\ndef solve():\n    pp = input()\n    n = int(input())\n    l = []\n    oness = 0\n    for i in range(n):\n        ll = intlist()\n        oness += ll.count(1)\n        l.append(ll + ll)\n    ma = 0\n    for i in range(0, n):\n        d = 0\n        for j in range(0, n):\n            d += l[j][i + j]\n        if d > ma:\n            ma = d\n    ans = oness - ma + (n - ma)\n    return ans\nt = input()\nfor tt in range(int(t)):\n    print(solve())", "for _ in range(int(input())):\n    input()\n    n = int(input())\n    a = [list(map(int, input())) for _ in range(n)]\n    s = sum(map(sum, a))\n    u = max((sum((a[i][(i + d) % n] for i in range(n))) for d in range(n)))\n    print(n - u + (s - u))", "for i in range(int(input())):\n    input()\n    (ans, size) = (0, int(input()))\n    matrix = [list(map(int, list(input()))) for line in range(size)]\n    diagonals = []\n    for x in range(size):\n        diagonals.append(sum((matrix[y][(x + y) % size] for y in range(size))))\n    best = sorted(diagonals)[-1]\n    print(str(size - best + sum(diagonals) - best))", "for _ in range(int(input())):\n    input()\n    n = int(input())\n    x = 0\n    mat = []\n    ans = 0\n    for i in range(n):\n        temp = input()\n        mat.append(temp)\n        x += temp.count('1')\n    for i in range(n):\n        cur = 0\n        for j in range(n):\n            if mat[j][(j + i) % n] == '1':\n                cur += 1\n        ans = max(ans, cur)\n    print(x - ans + (n - ans))", "for _ in range(int(input())):\n    input()\n    n = int(input())\n    a = [list(map(int, input())) for _ in range(n)]\n    s = sum(map(sum, a))\n    u = max((sum((a[i][(i + d) % n] for i in range(n))) for d in range(n)))\n    print(n - u + (s - u))", "def solution():\n    newline = input()\n    n = int(input())\n    A = []\n    count_one = 0\n    for _ in range(n):\n        row = [int(i) for i in input()]\n        A.append(row)\n        count_one += sum(row)\n    max_one = 0\n    for i in range(n):\n        record = 0\n        for j in range(n):\n            record += A[j][(i + j) % n]\n        max_one = max(max_one, record)\n    zero_to_one = n - max_one\n    one_to_zero = count_one - max_one\n    print(zero_to_one + one_to_zero)\nt = int(input())\nfor _ in range(t):\n    solution()", "def solve():\n    input()\n    n = int(input())\n    matrix = tuple((tuple((int(i) for i in iter(input()))) for _ in range(n)))\n    cached = tuple((sum((matrix[k][k + i - n] for k in range(n))) for i in range(n)))\n    print(sum(cached) + n - 2 * max(cached))\nfor _ in range(int(input())):\n    solve()", "def solve():\n    input()\n    n = int(input())\n    matrix = tuple((tuple((int(i) for i in iter(input()))) for _ in range(n)))\n    cached = tuple((sum((matrix[k][k + i - n] for k in range(n))) for i in range(n)))\n    print(sum(cached) + n - 2 * max(cached))\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor _ in range(t):\n    input()\n    n = int(input())\n    sum_per_diagonal = [0] * n\n    for i in range(n):\n        digits = input()\n        for (j, digit) in enumerate(digits):\n            sum_per_diagonal[(n + j - i) % n] += digit == '1'\n    print(sum(sum_per_diagonal) + n - 2 * max(sum_per_diagonal))", "for _ in range(int(input())):\n    input()\n    n = int(input())\n    a = [list(map(int, input())) for _ in range(n)]\n    s = sum(map(sum, a))\n    u = max((sum((a[i][(i + d) % n] for i in range(n))) for d in range(n)))\n    print(n - u + (s - u))", "def solve():\n    input()\n    n = int(input())\n    matrix = tuple((tuple((int(i) for i in iter(input()))) for _ in range(n)))\n    cached = tuple((sum((matrix[k][k + i - n] for k in range(n))) for i in range(n)))\n    print(sum(cached) + n - 2 * max(cached))\nfor _ in range(int(input())):\n    solve()", "def solve():\n    input()\n    n = int(input())\n    matrix = tuple((tuple((int(i) for i in iter(input()))) for _ in range(n)))\n    cached = tuple((sum((matrix[k][k + i - n] for k in range(n))) for i in range(n)))\n    print(sum(cached) + n - 2 * max(cached))\nfor _ in range(int(input())):\n    solve()", "def solve():\n    input()\n    n = int(input())\n    matrix = tuple((tuple((int(i) for i in iter(input()))) for _ in range(n)))\n    cached = tuple((sum((matrix[k][k + i - n] for k in range(n))) for i in range(n)))\n    print(sum(cached) + n - 2 * max(cached))\nfor _ in range(int(input())):\n    solve()", "T = int(input())\nwhile T > 0:\n    T -= 1\n    input()\n    n = int(input())\n    arr = []\n    for i in range(n):\n        tmp = input()\n        arr.append(tmp)\n    ans = 0\n    cnt = 0\n    for i in range(n):\n        tmp = 0\n        for j in range(n):\n            if arr[j][(i + j) % n] == '1':\n                tmp += 1\n                cnt += 1\n        ans = max(ans, tmp)\n    print(cnt + n - ans - ans)", "def minburles(matrix):\n    n = len(matrix)\n    num1 = 0\n    numd = 0\n    for j0 in range(n):\n        j = j0\n        cnt = 0\n        for i in range(n):\n            if matrix[i][j] == 1:\n                cnt += 1\n                num1 += 1\n            j += 1\n            j %= n\n        numd = max(numd, cnt)\n    return n + num1 - 2 * numd\nt = int(input())\nfor _ in range(t):\n    _ = input()\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        matrix.append([int(x) for x in input()])\n    print(minburles(matrix))"]