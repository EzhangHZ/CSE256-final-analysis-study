["for _ in range(int(input())):\n    s = list(input())\n    (first, last) = (s[0], s[-1])\n    min_way = abs(ord(s[0]) - ord(s[-1]))\n    if first > last:\n        en = sorted(enumerate(s, 1), key=lambda x: x[1], reverse=True)\n        s = ''.join(sorted(s, reverse=True))\n    else:\n        en = sorted(enumerate(s, 1), key=lambda x: x[1])\n        s = ''.join(sorted(s))\n    (l_idx, r_idx) = (s.find(first), s.rfind(last))\n    print(min_way, r_idx - l_idx + 1)\n    path = [i[0] for i in en[l_idx:r_idx + 1]]\n    print(' '.join(map(str, path)))", "t = int(input())\nresults = []\nfor i in range(t):\n    s = input()\n    result = []\n    indices = {}\n    for (idx, c) in enumerate(s):\n        if s[0] <= c and c <= s[-1] or (s[-1] <= c and c <= s[0]):\n            c = ord(c)\n            if c not in indices.keys():\n                indices[c] = []\n            indices[c].append(idx + 1)\n    dir = -1 if s[0] > s[-1] else 1\n    for i in range(ord(s[0]), ord(s[-1]) + dir, dir):\n        if i in indices.keys():\n            result.extend(indices[i])\n    results.append(((abs(ord(s[-1]) - ord(s[0])), len(result)), [str(item) for item in result]))\nfor item in results:\n    print(item[0][0], item[0][1])\n    print(' '.join(item[1]))", "from collections import defaultdict\n\ndef solution(string):\n    min_step = ord(string[0]) - ord(string[-1])\n    ans = ['1']\n    char_to_idx = defaultdict(list)\n    for i in range(1, len(string) - 1):\n        char_to_idx[ord(string[i])].append(str(i + 1))\n    inc = 1 if min_step < 0 else -1\n    for key in range(ord(string[0]), ord(string[-1]) + inc, inc):\n        for idx in char_to_idx[key]:\n            ans.append(idx)\n    ans.append(str(len(string)))\n    print('%d %d' % (abs(min_step), len(ans)))\n    print(' '.join(ans))\nt = int(input())\nfor _ in range(t):\n    solution(input())", "def readNums():\n    return [int(i) for i in input().split()]\nn = int(input())\nfor i in range(n):\n    s = input()\n    r = False\n    if s[0] > s[-1]:\n        r = True\n    a = min(s[0], s[-1])\n    b = max(s[0], s[-1])\n    s = s[1:-1]\n    l = sorted(zip(s, range(len(s))))\n    ans = []\n    for (j, k) in l:\n        if a <= j <= b:\n            ans.append(str(k + 2))\n    if r:\n        ans = ans[::-1]\n    print(abs(ord(a) - ord(b)), len(ans) + 2)\n    ans = ['1'] + ans + [str(len(s) + 2)]\n    print(' '.join(ans))", "def ordonner(a):\n    return ord(a) - 96\nt = int(input())\nresult = []\nfor i in range(t):\n    s = input()\n    n = len(s)\n    indices = [[] for j in range(26)]\n    Lindexes = list(map(ordonner, s))\n    interm = Lindexes[1:-1]\n    for j in range(n - 2):\n        indices[interm[j] - 1].append(str(j + 2))\n    interm.sort()\n    if Lindexes[0] > Lindexes[-1]:\n        interm.reverse()\n    visitedTiles = ['1']\n    (start, end) = (min(Lindexes[0], Lindexes[-1]), max(Lindexes[0], Lindexes[-1]))\n    for j in interm:\n        if start <= j <= end:\n            visitedTiles += indices[j - 1]\n            indices[j - 1] = []\n    cost = abs(Lindexes[0] - Lindexes[-1])\n    visitedTiles.append(str(n))\n    result.append(str(cost) + ' ' + str(len(visitedTiles)))\n    result.append(' '.join(visitedTiles))\nfor i in result:\n    print(i)", "t = int(input())\nalps = 'abcdefghijklmnopqrstuvwxyz'\nalps_dict = dict()\nfor (i, char) in enumerate(alps):\n    alps_dict[char] = i\nfor _ in range(t):\n    s = input().strip()\n    arr = [[] for i in range(26)]\n    for i in range(1, len(s) - 1):\n        char = s[i]\n        arr[alps_dict[char]].append(i + 1)\n    (st, ed) = (alps_dict[s[0]], alps_dict[s[-1]])\n    (_cost, _cnt) = (abs(st - ed), 2)\n    path = [1]\n    if st <= ed:\n        for i in range(st, ed + 1):\n            for idx in arr[i]:\n                path.append(idx)\n            _cnt += len(arr[i])\n    else:\n        for i in range(st, ed - 1, -1):\n            for idx in arr[i]:\n                path.append(idx)\n            _cnt += len(arr[i])\n    path.append(len(s))\n    print(_cost, _cnt)\n    print(' '.join([str(i) for i in path]))", "from collections import defaultdict\nN = int(input())\nfor _ in range(N):\n    K = input().strip('\\r\\n')\n    dp = defaultdict(lambda : [])\n    A = ord(K[0])\n    B = ord(K[-1])\n    state = A <= B\n    dist = abs(B - A)\n    for i in range(len(K)):\n        v = ord(K[i])\n        if state and v >= A and (v <= B):\n            dp[v].append(i + 1)\n        if not state and v >= B and (v <= A):\n            dp[v].append(i + 1)\n    jump = 0\n    ans = []\n    if state:\n        P = A\n        while P <= B:\n            ans.extend(dp[P])\n            jump += len(dp[P])\n            P += 1\n    else:\n        P = A\n        while P >= B:\n            ans.extend(dp[P])\n            jump += len(dp[P])\n            P -= 1\n    print(f'{dist} {jump}')\n    print(' '.join([str(x) for x in ans]))", "t = int(input())\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nd = {alphabet[i]: i + 1 for i in range(26)}\nd00 = {alphabet[i]: i for i in range(26)}\nfor ncase in range(1, t + 1):\n    s = [i for i in input()]\n    d0 = {c: [] for c in alphabet}\n    for i in range(len(s)):\n        d0[s[i]].append(i + 1)\n    if s[0] == s[-1]:\n        ans = d0[s[0]]\n        cost = 0\n    elif s[0] < s[-1]:\n        ans = []\n        for i in range(d00[s[0]], d00[s[-1]] + 1):\n            ans += d0[alphabet[i]]\n    else:\n        ans = []\n        for i in range(d00[s[-1]], d00[s[0]] + 1):\n            d0[alphabet[i]].reverse()\n            ans += d0[alphabet[i]]\n        ans.reverse()\n    cost = abs(d[s[-1]] - d[s[0]])\n    m = len(ans)\n    print(cost, m)\n    print(' '.join((str(i) for i in ans)))", "def decode(s, n):\n    dictx = {}\n    for i in range(n):\n        index = ord(s[i]) - 96\n        try:\n            dictx[index].append(i)\n        except KeyError:\n            dictx[index] = []\n            dictx[index].append(i)\n    return dictx\nfor z in range(int(input())):\n    m = 0\n    s = input()\n    length = len(s)\n    dict_0 = decode(s, length)\n    (beg, fin) = (ord(s[0]) - 96, ord(s[length - 1]) - 96)\n    cost = abs(beg - fin)\n    ans = []\n    symbol = ' '\n    if beg <= fin:\n        for i in range(beg, fin + 1):\n            try:\n                m += len(dict_0[i])\n                for j in dict_0[i]:\n                    ans.append(str(j + 1))\n            except KeyError:\n                continue\n    else:\n        for i in range(fin, beg + 1):\n            try:\n                m += len(dict_0[i])\n                dict_0[i].reverse()\n                for j in dict_0[i]:\n                    ans.append(str(j + 1))\n            except KeyError:\n                continue\n        ans.reverse()\n    print('{} {}'.format(cost, m))\n    print(symbol.join(tuple(ans)))", "def sign(n):\n    if n > 0:\n        return 1\n    elif n == 0:\n        return 404\n    else:\n        return -1\nn = int(input())\nfull_ans = []\nfor m in range(n):\n    inp_str = input()\n    max_s = max(inp_str[0], inp_str[-1])\n    min_s = min(inp_str[0], inp_str[-1])\n    sybls_indxs = dict()\n    ans = [str(ord(max_s) - ord(min_s)), str(1)]\n    for i in range(1, len(inp_str) - 1):\n        if min_s <= inp_str[i] <= max_s:\n            if inp_str[i] not in sybls_indxs.keys():\n                sybls_indxs[inp_str[i]] = [str(i + 1)]\n            else:\n                sybls_indxs[inp_str[i]].append(str(i + 1))\n    one = sign(ord(inp_str[-1]) - ord(inp_str[0]))\n    for i in range(ord(inp_str[0]), ord(inp_str[-1]) + one, one):\n        if chr(i) in sybls_indxs:\n            ans += sybls_indxs[chr(i)]\n    ans.append(str(len(inp_str)))\n    full_ans.append(ans)\nfor ans in full_ans:\n    print(ans[0], len(ans[1:]), sep=' ')\n    print(' '.join(ans[1:]))", "t = int(input())\nfor i in range(t):\n    s = input()\n    d = {}\n    for i in range(len(s)):\n        d.setdefault(s[i], [])\n        d[s[i]].append(i)\n    r = []\n    if s[0] < s[-1]:\n        for c in sorted(d.keys()):\n            if s[0] <= c <= s[-1]:\n                r.extend(d[c])\n    else:\n        for c in sorted(d.keys(), reverse=True):\n            if s[0] >= c >= s[-1]:\n                r.extend(d[c])\n    print(abs(ord(s[0]) - ord(s[-1])), len(r))\n    print(' '.join((str(i + 1) for i in r)))", "t = int(input())\nfor _ in range(t):\n    alphs = {chr(x): [] for x in range(ord('a'), ord('z') + 1)}\n    s = input()\n    for (i, c) in enumerate(s):\n        alphs[c].append(i + 1)\n    (src, dst) = (s[0], s[-1])\n    rng = 1\n    if src > dst:\n        rng = -1\n    res = []\n    for x in range(ord(src), ord(dst) + rng, rng):\n        res += alphs[chr(x)]\n    print(abs(ord(src) - ord(dst)), len(res))\n    print(' '.join([str(r) for r in res]))", "import math, re\n\ndef fastlist():\n    return list(map(int, input().split()))\n\ndef fastint():\n    return int(input())\n\ndef solve():\n    s = input()\n    b = []\n    plitki = []\n    for i in range(26):\n        b.append(0)\n        plitki.append([])\n    chp = 0\n    p = []\n    for i in range(len(s)):\n        b[ord(s[i]) - 97] += 1\n        plitki[ord(s[i]) - 97].append(i + 1)\n    if ord(s[0]) - 97 > ord(s[-1]) - 97:\n        for i in range(ord(s[0]) - 97, ord(s[-1]) - 98, -1):\n            chp += b[i]\n            p += plitki[i]\n    elif ord(s[0]) - 97 < ord(s[-1]) - 97:\n        for i in range(ord(s[0]) - 97, ord(s[-1]) - 96):\n            chp += b[i]\n            p += plitki[i]\n    else:\n        chp = b[ord(s[i]) - 97]\n        p = plitki[ord(s[0]) - 97]\n    print(abs(ord(s[0]) - 97 - (ord(s[-1]) - 97)), chp)\n    print(' '.join(list(map(str, p))))\nt = int(input())\nfor _ in range(t):\n    solve()", "def solve(s):\n    lst = []\n    for (i, c) in enumerate(s):\n        lst.append((ord(c) - ord('a') + 1, i + 1))\n    lb = min(lst[0][0], lst[-1][0])\n    ub = max(lst[0][0], lst[-1][0])\n    lst2 = lst[1:-1]\n    lst2.sort(key=lambda x: x[0], reverse=lst[0][0] > lst[-1][0])\n    lst3 = [1] + [i for (c, i) in lst2 if lb <= c <= ub] + [len(s)]\n    print(ub - lb, len(lst3))\n    print(' '.join([str(i) for i in lst3]))\nn_case = int(input())\nwhile n_case:\n    n_case -= 1\n    solve(input())", "d = {}\nh = 0\nm = 'abcdefghijklmnopqrstuvwxyz'\nfor j in m:\n    h += 1\n    d[j] = h\nt = int(input())\nfor j in range(0, t):\n    p = input()\n    mi = min(d[p[0]], d[p[-1]])\n    ma = max(d[p[0]], d[p[-1]])\n    op = m[mi - 1:ma]\n    o = 0\n    s = {}\n    for i in op:\n        o += 1\n        s[i] = []\n    for i in range(0, len(p)):\n        if d[p[i]] >= mi and d[p[i]] <= ma:\n            s[p[i]].append(str(i + 1))\n    eu = ''\n    if d[p[0]] >= d[p[-1]]:\n        eu = op[::-1]\n    else:\n        eu = op[:]\n    z = []\n    for i in eu:\n        if i in s and len(s[i]) > 0:\n            z += s[i]\n    print(ma - mi, len(z))\n    print(' '.join(z))", "t = int(input())\nwhile t > 0:\n    s = input()\n    n = len(s)\n    indices = [[] for _ in range(26)]\n    ans = list()\n    m = 0\n    for i in range(n):\n        indices[ord(s[i]) - 97].append(i + 1)\n    cost = abs(ord(s[0]) - ord(s[n - 1]))\n    if s[n - 1] > s[0]:\n        start = ord(s[0]) - 97\n        for i in range(start, ord(s[n - 1]) - 97 + 1):\n            length = len(indices[i])\n            m = m + length\n            for j in range(0, length):\n                ans.append(indices[i][j])\n    else:\n        start = ord(s[0]) - 97\n        for i in range(start, ord(s[n - 1]) - 97 - 1, -1):\n            length = len(indices[i])\n            m = m + length\n            for j in range(0, length):\n                ans.append(indices[i][j])\n    print(f'{cost} {m}')\n    print(' '.join(list(map(str, ans))))\n    t -= 1", "for _ in range(int(input())):\n    string = input().strip()\n    s = string[0]\n    s_l = ord(s)\n    e = string[-1]\n    e_l = ord(e)\n    min_cost = ord(e) - ord(s)\n    path = []\n    if min_cost == 0:\n        for (i, char) in enumerate(string, 1):\n            if char == s:\n                path.append(i)\n    elif min_cost > 0:\n        temp_path = []\n        for (i, char) in enumerate(string, 1):\n            if i == 1 or i == len(string):\n                continue\n            if s_l <= ord(char) <= e_l:\n                temp_path.append((char, i))\n        temp_path.sort(key=lambda t: ord(t[0]) - s_l)\n        path = [1] + [i[1] for i in temp_path] + [len(string)]\n    else:\n        temp_path = []\n        for (i, char) in enumerate(string, 1):\n            if i == 1 or i == len(string):\n                continue\n            if e_l <= ord(char) <= s_l:\n                temp_path.append((char, i))\n        temp_path.sort(key=lambda t: ord(t[0]) - s_l, reverse=True)\n        path = [1] + [i[1] for i in temp_path] + [len(string)]\n    print(f'{abs(min_cost)} {len(path)}')\n    print(' '.join([str(i) for i in path]))", "t = int(input())\nfor _ in range(t):\n    s = input()\n    d = {}\n    for i in range(len(s)):\n        if s[i] in d:\n            d[s[i]].append(i)\n        else:\n            d[s[i]] = [i]\n    out = []\n    (st, ed) = (ord(min(s[0], s[-1])), ord(max(s[0], s[-1])))\n    print(ed - st, end=' ')\n    l = [chr(i) for i in range(st, ed + 1)]\n    if s[0] > s[-1]:\n        l = l[::-1]\n    for ch in l:\n        if ch not in d:\n            continue\n        for ind in d[ch]:\n            out.append(str(ind + 1))\n    print(len(out))\n    print(' '.join(out))", "t = int(input())\nfor t1 in range(t):\n    s = input()\n    pos = dict()\n    for i in range(len(s)):\n        x = s[i]\n        if x in pos:\n            pos[x].append(str(i + 1))\n        else:\n            pos[x] = [str(i + 1)]\n    start = ord(s[0])\n    end = ord(s[-1])\n    if start == end:\n        step = 1\n    else:\n        step = (end - start) // abs(end - start)\n    ans = []\n    cost = 0\n    prev = start\n    for i in range(start, end + step, step):\n        if chr(i) in pos:\n            cost += abs(i - prev)\n            prev = i\n            ans += pos[chr(i)]\n    print(cost, len(ans))\n    print(' '.join(ans))", "from collections import defaultdict\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    pos = defaultdict(list)\n    for i in range(n):\n        pos[s[i]].append(i)\n    (of, ol) = (ord(s[0]), ord(s[-1]))\n    res = []\n    if of <= ol:\n        for c in range(of, ol + 1):\n            cc = chr(c)\n            for x in pos[cc]:\n                res.append(x + 1)\n    else:\n        for c in reversed(range(ol, of + 1)):\n            cc = chr(c)\n            for x in pos[cc]:\n                res.append(x + 1)\n    print(abs(of - ol), len(res))\n    print(' '.join(map(str, res)))", "import sys\ninput = sys.stdin.readline\nfor i in range(int(input())):\n    s = input()[:-1]\n    l = [[] for i in range(26)]\n    for i in range(len(s)):\n        l[ord(s[i]) - 97].append(i + 1)\n    st = [1, -1][s[0] > s[-1]]\n    ans = []\n    for i in range(ord(s[0]) - 97, ord(s[-1]) - 97 + st, st):\n        ans.extend(l[i])\n    print(abs(ord(s[-1]) - ord(s[0])), len(ans))\n    print(*ans)", "t = int(input())\n\ndef solve(first, last, d, s):\n    sol = [first]\n    col = s[first]\n    while col <= s[last]:\n        for x in d[col]:\n            if x not in [first, last]:\n                sol.append(x)\n        col += 1\n    sol.append(last)\n    return sol\nfor _ in range(t):\n    s = [ord(x) - 97 for x in input()]\n    first = 0\n    last = len(s) - 1\n    d = {i: [] for i in range(26)}\n    for (i, si) in enumerate(s):\n        d[si].append(i)\n    if s[first] < s[last]:\n        sol = solve(first, last, d, s)\n    elif s[last] < s[first]:\n        sol = solve(last, first, d, s)[::-1]\n    else:\n        sol = sorted(d[s[first]])\n    if len(s) == 1:\n        print(0, 1)\n        print(s[0])\n    else:\n        print(abs(s[0] - s[-1]), len(sol))\n        print(' '.join([str(x + 1) for x in sol]))", "import sys\ninput = sys.stdin.readline\n\ndef fun(s):\n    return ord(s) - ord('a') + 1\nfor _ in range(int(input())):\n    s = input().strip()\n    n = len(s)\n    d = {}\n    for i in range(n):\n        if s[i] in d:\n            d[s[i]].append(i + 1)\n        else:\n            d[s[i]] = [i + 1]\n    if s[0] == s[n - 1]:\n        print(0, len(d[s[0]]))\n        print(*d[s[0]])\n    elif s[0] < s[n - 1]:\n        a = sorted(d.keys())\n        f = []\n        c = 0\n        m = 0\n        for i in range(a.index(s[0]), a.index(s[n - 1])):\n            c += fun(a[i + 1]) - fun(a[i])\n            m += len(d[a[i]])\n            f += d[a[i]]\n        m += len(d[a[a.index(s[n - 1])]])\n        f += d[a[a.index(s[n - 1])]]\n        print(c, m)\n        print(*f)\n    else:\n        a = sorted(d.keys(), reverse=True)\n        f = []\n        c = 0\n        m = 0\n        for i in range(a.index(s[0]), a.index(s[n - 1])):\n            c += abs(fun(a[i + 1]) - fun(a[i]))\n            m += len(d[a[i]])\n            f += d[a[i]]\n        m += len(d[a[a.index(s[n - 1])]])\n        f += d[a[a.index(s[n - 1])]]\n        print(c, m)\n        print(*f)", "n = int(input())\nalpha = '_abcdefghijklmnopqrstuvwxyz'\nfor i in range(n):\n    line = str(input())\n    hm = {}\n    for a in alpha[1:]:\n        hm[a] = []\n    for j in range(len(line)):\n        a = line[j]\n        hm[a].append(j)\n    start = line[0]\n    end = line[-1]\n    si = alpha.index(start)\n    ei = alpha.index(end)\n    cost = max(si, ei) - min(si, ei)\n    jumps = 0\n    indices = ''\n    if si < ei:\n        for j in range(si, ei + 1):\n            a = alpha[j]\n            jumps += len(hm[a])\n            for ind in hm[a]:\n                indices += str(ind + 1) + ' '\n    else:\n        for j in range(si, ei - 1, -1):\n            a = alpha[j]\n            jumps += len(hm[a])\n            for ind in hm[a]:\n                indices += str(ind + 1) + ' '\n    print(cost, jumps)\n    print(indices[:-1])", "for tc in range(int(input())):\n    string = input()\n    n = len(string)\n    latin_lc = 'abcdefghijklmnopqrstuvwxyz'\n    string_info = []\n    first = (string[0], 1, ord(string[0]) - 96)\n    last = (string[n - 1], n, ord(string[n - 1]) - 96)\n    if first[2] < last[2]:\n        seq = 'a'\n        (lower, higher) = (first[2], last[2])\n    else:\n        seq = 'd'\n        (lower, higher) = (last[2], first[2])\n    for i in range(1, n - 1):\n        ordinal = ord(string[i]) - 96\n        if ordinal >= lower and ordinal <= higher:\n            string_info.append((string[i], i + 1, ordinal))\n    if seq == 'a':\n        string_info.sort(key=lambda x: x[2])\n    elif seq == 'd':\n        string_info.sort(key=lambda x: x[2], reverse=True)\n    print(abs(first[2] - last[2]), 1 + len(string_info) + 1)\n    index = [str(first[1])]\n    for e in string_info:\n        index.append(str(e[1]))\n    index.append(str(last[1]))\n    print(' '.join(index))", "import sys\ninput = sys.stdin.readline\nfor i in range(int(input())):\n    s = input()[:-1]\n    l = [[] for i in range(26)]\n    for i in range(len(s)):\n        l[ord(s[i]) - 97].append(i + 1)\n    st = [1, -1][s[0] > s[-1]]\n    ans = []\n    for i in range(ord(s[0]) - 97, ord(s[-1]) - 97 + st, st):\n        ans.extend(l[i])\n    print(abs(ord(s[-1]) - ord(s[0])), len(ans))\n    print(*ans)", "t = int(input())\nimport string\nlst = list(string.ascii_lowercase)\nh = {lst[i]: i for i in range(len(lst))}\nl = list(h.keys())\n\ndef helper(s):\n    ans = []\n    small = min(h[s[0]], h[s[-1]])\n    big = max(h[s[0]], h[s[-1]])\n    for i in range(1, len(s) - 1):\n        c = h[s[i]]\n        if small <= h[s[i]] <= big:\n            ans.append((str(i + 1), h[s[i]]))\n    final = '1'\n    if h[s[0]] > h[s[-1]]:\n        ans = sorted(ans, key=lambda x: x[1], reverse=True)\n    else:\n        ans = sorted(ans, key=lambda x: x[1])\n    ans = [ans[i][0] for i in range(len(ans))]\n    arr = [0] * 3\n    arr[0] = str(big - small)\n    arr[1] = str(2 + len(ans))\n    ans = ['1'] + ans + [str(len(s))]\n    arr[2] = ans\n    return arr\nfor i in range(t):\n    s = input()\n    res = helper(s)\n    print(int(res[0]), int(res[1]))\n    print(' '.join(res[2]))", "readMl = lambda _f, _n: (_f(input()) for _ in range(_n))\n\ndef readLn() -> map:\n    return map(int, input().split())\n\ndef alp(s: str) -> int:\n    return ord(s) - ord('a')\n\ndef Solve() -> None:\n    s = input()\n    n = len(s)\n    m = [[] for _ in range(26)]\n    for i in range(n):\n        m[alp(s[i])].append(i + 1)\n    (ansmn, ansmx) = (abs(alp(s[-1]) - alp(s[0])), 0)\n    ansord = []\n    if s[-1] > s[0]:\n        for i in range(alp(s[0]), alp(s[-1]) + 1):\n            ansmx += len(m[i])\n            ansord.extend(m[i])\n    elif s[-1] < s[0]:\n        for i in range(alp(s[0]), alp(s[-1]) - 1, -1):\n            ansmx += len(m[i])\n            ansord.extend(m[i])\n    else:\n        ansmx = len(m[alp(s[0])])\n        ansord = m[alp(s[0])]\n    print(ansmn, ansmx)\n    print(*ansord)\n\ndef Main() -> None:\n    for _ in range(int(input())):\n        Solve()\nMain()", "from collections import defaultdict\nfor _ in range(int(input())):\n    s = input()\n    dt = defaultdict(list)\n    for (idx, ch) in enumerate(s):\n        dt[ch].append(idx + 1)\n    begin = ord(s[0])\n    end = ord(s[-1])\n    ans = []\n    if begin < end:\n        for i in range(begin, end + 1):\n            ans.extend(dt[chr(i)])\n    else:\n        for i in range(begin, end - 1, -1):\n            ans.extend(dt[chr(i)])\n    print(abs(begin - end), len(ans))\n    print(*ans)", "t = int(input())\nfor i in range(t):\n    ans = ''\n    occur = [[] for j in range(26)]\n    s = input()\n    cost = ord(s[-1]) - ord(s[0])\n    if cost >= 0:\n        low = ord(s[0]) - ord('a')\n        high = ord(s[-1]) - ord('a')\n        rev = False\n    else:\n        low = ord(s[-1]) - ord('a')\n        high = ord(s[0]) - ord('a')\n        cost = -cost\n        rev = True\n    for (pos, char) in enumerate(s):\n        occur[ord(char) - ord('a')].append(pos)\n    occured = list(filter(None, occur[low:high + 1]))\n    if rev:\n        occured = reversed(occured)\n    m = 0\n    for locs in occured:\n        for loc in locs:\n            ans += str(loc + 1) + ' '\n            m += 1\n    print(cost, m)\n    print(ans.strip())", "for i in range(int(input())):\n    s = input()\n    als = [(s[i], i + 1) for i in range(1, len(s) - 1) if s[-(s[0] > s[-1])] <= s[i] <= s[-(s[0] <= s[-1])]]\n    als.sort(reverse=s[0] > s[-1])\n    print(f'{abs(ord(s[0]) - ord(s[-1]))} {len(als) + 2}\\n' + '1 ' + ' '.join((str(als[i][1]) for i in range(len(als)))) + f' {len(s)}')", "import sys\ninput = sys.stdin.readline\nfor i in range(int(input())):\n    s = input()[:-1]\n    l = [[] for i in range(26)]\n    for i in range(len(s)):\n        l[ord(s[i]) - 97].append(i + 1)\n    st = [1, -1][s[0] > s[-1]]\n    ans = []\n    for i in range(ord(s[0]) - 97, ord(s[-1]) - 97 + st, st):\n        ans.extend(l[i])\n    print(abs(ord(s[-1]) - ord(s[0])), len(ans))\n    print(*ans)", "def cal(s):\n    dic = {}\n    for (i, p) in enumerate(s):\n        v = ord(p)\n        if v in dic:\n            dic[v].append(i + 1)\n        else:\n            dic[v] = [i + 1]\n    (a, b) = (ord(s[0]), ord(s[-1]))\n    m = abs(a - b)\n    if a <= b:\n        st = a\n        ed = b + 1\n        tg = 1\n    else:\n        st = a\n        ed = b - 1\n        tg = -1\n    ans = []\n    for i in range(st, ed, tg):\n        if i in dic:\n            ans += dic[i]\n    return [m] + [len(ans)] + ans\nfor jj in range(int(input())):\n    s = input()\n    res = cal(s)\n    print(*res[:2])\n    print(*res[2:])", "import sys\nimport heapq\nimport math\ninput = sys.stdin.readline\nfrom collections import Counter, defaultdict\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef main():\n    string = input().strip()\n    charMap = defaultdict(list)\n    for i in range(len(string)):\n        char = string[i]\n        charMap[char].append(i + 1)\n    sum_ = 0\n    stack = [1]\n    direction = -1 if string[0] > string[-1] else 1\n    prevChar = string[0]\n    for i in range(ord(string[0]), ord(string[-1]) + direction, direction):\n        character = chr(i)\n        if character in charMap:\n            while charMap[character]:\n                popped = charMap[character].pop()\n                if popped != 1 and popped != len(string):\n                    stack.append(popped)\n        sum_ += abs(ord(prevChar) - ord(character))\n        prevChar = character\n    if len(string) != 1:\n        stack.append(len(string))\n    print(sum_, len(stack))\n    print(*stack)\nt = inp()\nfor _ in range(t):\n    main()", "a = ord('a')\n\ndef solve(string: str):\n    numbers = createArr(string)\n    size = len(numbers)\n    first = numbers[0]\n    last = numbers[size - 1]\n    if first <= last:\n        numbers.sort(key=lambda x: (x[0], x[1]))\n    elif first > last:\n        numbers.sort(key=lambda x: x[1])\n        numbers.sort(reverse=True, key=lambda x: x[0])\n    start = findFirst(numbers, first[0])\n    i = start + 1\n    res = 0\n    indexes = [1]\n    while i < size and (not (numbers[i - 1] == last and numbers[i] != last)):\n        res += abs(numbers[i][0] - numbers[i - 1][0])\n        indexes.append(numbers[i][1])\n        i += 1\n    print(res, i - start)\n    print(' '.join([str(i) for i in indexes]))\n\ndef findFirst(numbers, first):\n    for i in range(len(numbers)):\n        if numbers[i][0] == first:\n            return i\n\ndef createArr(string: str):\n    arr = []\n    for (i, v) in enumerate(string):\n        arr.append((ord(v) - a + 1, i + 1))\n    return arr\n\ndef toChar(digit):\n    return chr(int(digit) + a - 1)\namountTests = int(input())\nfor _ in range(amountTests):\n    string = input()\n    solve(string)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    s = input().strip()\n    n = len(s)\n    pos = [[] for _ in range(26)]\n    (v1, v2) = (min(ord(s[0]), ord(s[-1])), max(ord(s[0]), ord(s[-1])))\n    cost = v2 - v1\n    for i in range(n):\n        if v1 <= ord(s[i]) <= v2:\n            pos[ord(s[i]) - ord('a')].append(i + 1)\n    ans = []\n    if ord(s[0]) <= ord(s[-1]):\n        for each in pos:\n            for idx in each:\n                ans.append(idx)\n    else:\n        pos = pos[::-1]\n        for each in pos:\n            for idx in each:\n                ans.append(idx)\n    print(*[cost, len(ans)])\n    print(*ans)\nfor _ in range(int(input())):\n    solve()", "testcases = int(input())\nfor i in range(testcases):\n    input_1 = input()\n    string_list = [*input_1]\n    start = string_list[0]\n    end = string_list[len(string_list) - 1]\n    if start < end:\n        letters = list(map(chr, range(ord(start), ord(end) + 1)))\n        reverse = False\n        dictionary = {key: [] for key in list(map(chr, range(ord(start), ord(end) + 1)))}\n    else:\n        letters = list(map(chr, range(ord(end), ord(start) + 1)))[::-1]\n        reverse = True\n        dictionary = {key: [] for key in list(map(chr, range(ord(end), ord(start) + 1)))}\n    for i in range(len(string_list)):\n        if string_list[i] in dictionary.keys():\n            dictionary[string_list[i]].append(i + 1)\n    cost = 0\n    sequence = list()\n    n_visited = 0\n    last_letter = start\n    for i in letters:\n        dict_i = dictionary[i]\n        for j in range(len(dict_i)):\n            sequence.append(dict_i[j])\n            n_visited += 1\n            cost += abs(ord(last_letter) - ord(i))\n            last_letter = i\n    print(' '.join(map(str, [cost, n_visited])))\n    print(' '.join(map(str, sequence)))", "index = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\nn = int(input())\nfor num in range(n):\n    words = ans = []\n    count = [[] for i in range(27)]\n    a = input()\n    for i in range(len(a)):\n        count[index[a[i]]].append(i + 1)\n    jieshu = index[a[-1]]\n    kaishi = index[a[0]]\n    waste = abs(jieshu - kaishi)\n    shun = []\n    step = 0\n    for i in range(kaishi, jieshu + 1) if kaishi < jieshu else range(kaishi, jieshu - 1, -1):\n        ans.extend(count[i])\n    print(waste, len(ans))\n    print(*ans)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    pos = [[] for _ in range(26)]\n    for i in range(n):\n        pos[ord(s[i]) - ord('a')].append(i + 1)\n    res = []\n    k = ord(s[0]) - ord('a')\n    l = ord(s[-1]) - ord('a')\n    rng = None\n    if k <= l:\n        rng = range(k, l + 1)\n    else:\n        rng = range(k, l - 1, -1)\n    cost = 0\n    prev = k\n    for i in rng:\n        res.extend(pos[i])\n        if len(pos[i]) > 0:\n            cost += abs(i - prev)\n            prev = i\n    print(cost, len(res))\n    print(*res)", "t = int(input())\nfor _ in range(t):\n    s = [ord(x) - 96 for x in input()]\n    cost = abs(s[0] - s[-1])\n    (l, r) = sorted([s[0], s[-1]])\n    path = [i for (i, x) in enumerate(s) if l <= x <= r]\n    del path[0]\n    del path[-1]\n    if s[0] < s[-1]:\n        path.sort(key=lambda i: s[i])\n    else:\n        path.sort(key=lambda i: s[i], reverse=True)\n    print(cost, len(path) + 2)\n    print(1, *[i + 1 for i in path], len(s))", "import sys\nsys.setrecursionlimit(200000)\nimport math\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\ninput = sys.stdin.readline\nfrom functools import lru_cache\nimport heapq\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\ntestcases = inp()\nfor i in range(testcases):\n    arr = insr()\n    f = defaultdict(list)\n    answer1 = [0, 0]\n    answer = []\n    prevKey = arr[0]\n    y = 1 if arr[0] < arr[-1] else -1\n    for i in range(len(arr)):\n        if arr[0] <= arr[i] <= arr[-1] or arr[0] >= arr[i] >= arr[-1]:\n            f[arr[i]].append(i + 1)\n    for key in sorted(f.keys())[::y]:\n        if arr[0] <= key <= arr[-1] or arr[0] >= key >= arr[-1]:\n            answer.extend(f[key])\n            answer1[0] += abs(ord(prevKey) - ord(key))\n            answer1[1] += len(f[key])\n            prevKey = key\n    print(*answer1)\n    print(*answer)", "import sys\n\ndef JumpingonTiles(s):\n    int_s = [ord(i) for i in s]\n    start = min(int_s[0], int_s[-1])\n    end = max(int_s[0], int_s[-1])\n    desc = False\n    if int_s[0] > int_s[-1]:\n        desc = True\n    steps = []\n    for i in range(1, len(int_s) - 1):\n        if int_s[i] <= end and int_s[i] >= start:\n            steps.append([int_s[i], i])\n    steps = sorted(steps, reverse=desc)\n    ret = []\n    ret.append('1')\n    for (_, i) in steps:\n        ret.append(str(i + 1))\n    ret.append(str(len(int_s)))\n    sys.stdout.write(str(end - start) + ' ' + str(len(steps) + 2) + '\\n')\n    sys.stdout.write(' '.join(ret) + '\\n')\n\ndef inp():\n    return int(input())\nnum_testcases = inp()\nfor i in range(num_testcases):\n    s = input()\n    JumpingonTiles(s)", "for _ in range(int(input())):\n    s = [ord(x) - 96 for x in input()]\n    cost = abs(s[0] - s[-1])\n    (l, r) = sorted([s[0], s[-1]])\n    path = [i for (i, x) in enumerate(s) if l <= x <= r]\n    del path[0]\n    del path[-1]\n    if s[0] < s[-1]:\n        path.sort(key=lambda i: s[i])\n    else:\n        path.sort(key=lambda i: s[i], reverse=True)\n    print(cost, len(path) + 2)\n    print(1, *[i + 1 for i in path], len(s))", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    s = input()\n    g = defaultdict(list)\n    for (i, c) in enumerate(s):\n        g[c].append(i)\n    cost = abs(ord(s[0]) - ord(s[-1]))\n    ans = []\n    (start, end) = (ord(s[0]), ord(s[-1]))\n    if start > end:\n        for i in range(start, end - 1, -1):\n            for x in g[chr(i)]:\n                ans.append(x + 1)\n    else:\n        for i in range(start, end + 1):\n            for x in g[chr(i)]:\n                ans.append(x + 1)\n    print(cost, len(ans))\n    print(*ans)\nfor _ in range(int(input())):\n    solve()", "tc = int(input())\nfor _ in range(tc):\n    test = input()\n    fch = test[0]\n    lch = test[-1]\n    upper = max(ord(fch), ord(lch))\n    lower = min(ord(fch), ord(lch))\n    res = {}\n    for i in range(1, len(test)):\n        if lower <= ord(test[i]) <= upper:\n            res[i + 1] = ord(test[i])\n    if ord(fch) <= ord(lch):\n        sorted_dict = dict(sorted(res.items(), key=lambda item: item[1]))\n    else:\n        sorted_dict = dict(sorted(res.items(), key=lambda item: item[1], reverse=True))\n    print(f'{abs(ord(fch) - ord(lch))} {len(sorted_dict) + 1}')\n    res = ''\n    res += '1'\n    for (key, value) in sorted_dict.items():\n        res += f' {key}'\n    print(res)", "from string import ascii_lowercase\nt = int(input())\nscore = {x: i + 1 for (i, x) in enumerate(ascii_lowercase)}\nfor _ in range(t):\n    s = input()\n    if s[0] > s[-1]:\n        ss = sorted([(x, i) for (i, x) in enumerate(s)], key=lambda k: (k[0], -k[1]), reverse=True)\n    else:\n        ss = sorted([(x, i) for (i, x) in enumerate(s)])\n    start = None\n    end = None\n    for (i, x) in enumerate(ss):\n        if x[1] == 0 and start is None:\n            start = i\n        if x[0] == s[-1]:\n            end = i\n    max_score = abs(score[ss[end][0]] - score[ss[start][0]])\n    max_jumps = end - start + 1\n    path = [ss[x][1] + 1 for x in range(start, end + 1)]\n    print(max_score, max_jumps)\n    print(' '.join(map(str, path)))", "from collections import defaultdict\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    chars = defaultdict(list)\n    for (i, c) in enumerate(s, 1):\n        chars[c].append(i)\n    answer = []\n    start = ord(s[0])\n    end = ord(s[-1])\n    rng = range(start, end + 1) if start <= end else range(start, end - 1, -1)\n    for i in rng:\n        answer.extend(chars[chr(i)])\n    answer.remove(1)\n    answer.remove(n)\n    answer = [1] + answer + [n]\n    print(abs(end - start), len(answer))\n    print(*answer)", "from collections import Counter, defaultdict\nfor _ in ' ' * int(input()):\n    p = input()\n    n = list(enumerate(p))\n    if p[0] > p[-1]:\n        n.sort(key=lambda j: j[1], reverse=True)\n    else:\n        n.sort(key=lambda j: j[1])\n    x = []\n    f = 0\n    for (i, a) in n:\n        if i == 0:\n            f = 1 ^ f\n        if f:\n            x.append(i + 1)\n        if i == len(p) - 1:\n            break\n    print(abs(ord(p[0]) - ord(p[-1])), len(x), '\\n', *x)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    f = ord(s[0])\n    l = ord(s[-1])\n    cost = abs(f - l)\n    d = {}\n    for i in range(len(s)):\n        if d.get(ord(s[i]), -1) == -1:\n            d[ord(s[i])] = [i + 1]\n        else:\n            d[ord(s[i])].append(i + 1)\n    m = 0\n    lst = []\n    if f < l:\n        for key in sorted(d.keys()):\n            if f <= key <= l:\n                lst += d[key]\n                m += len(d[key])\n    else:\n        for key in sorted(d.keys(), reverse=True):\n            if l <= key <= f:\n                lst += d[key]\n                m += len(d[key])\n    print(cost, m)\n    print(*lst)", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    ns = sorted(list(range(n)), key=lambda x: s[x], reverse=True if s[0] > s[n - 1] else False)\n    active = False\n    ans = []\n    for i in range(n):\n        if ns[i] == 0:\n            active = True\n        if active:\n            ans.append(ns[i] + 1)\n        if ns[i] == n - 1:\n            break\n    print(abs(ord(s[n - 1]) - ord(s[0])), len(ans))\n    print(*ans)", "n = int(input())\nresult = []\nfor i in range(0, n):\n    line_index = [ord(c) for c in input()]\n    cost_final = abs(line_index[-1] - line_index[0])\n    min_el = min(line_index[-1], line_index[0])\n    max_el = max(line_index[-1], line_index[0])\n    list_with_ind = list(zip(range(1, len(line_index) + 1), line_index))\n    line_index_fav = [(ind, el) for (ind, el) in list_with_ind if el >= min_el and el <= max_el]\n    line_index_fav.sort(key=lambda x: x[1]) if min_el == line_index[0] else line_index_fav.sort(key=lambda x: x[1], reverse=True)\n    m_final = len(line_index_fav)\n    result.append([cost_final, m_final])\n    result.append([el for (el, _) in line_index_fav])\nfor r in result:\n    print(*r)", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    ns = sorted(list(range(n)), key=lambda x: s[x], reverse=True if s[0] > s[n - 1] else False)\n    active = False\n    ans = []\n    for i in range(n):\n        if ns[i] == 0:\n            active = True\n        if active:\n            ans.append(ns[i] + 1)\n        if ns[i] == n - 1:\n            break\n    print(abs(ord(s[n - 1]) - ord(s[0])), len(ans))\n    print(*ans)", "import sys\nT = int(input())\nfor _ in range(T):\n    arr = []\n    s = input()\n    for (i, l) in enumerate(s):\n        arr.append((ord(l) - ord('a') + 1, i + 1))\n    start = arr[0][0]\n    end = arr[-1][0]\n    res = []\n    ans = 0\n    reverse = False\n    if start > end:\n        reverse = True\n        (start, end) = (end, start)\n    for (n, i) in sorted(arr, key=lambda x: (x[0], -x[1] if reverse else x[1])):\n        if n >= start and n <= end:\n            res.append(str(i))\n    print(end - start, len(res))\n    print(' '.join(res[::-1]) if reverse else ' '.join(res))", "import string\n\ndef main():\n    s = input()\n    retard_dict = {i: [] for i in range(1, 27)}\n    items = []\n    for (index, elem) in enumerate(s):\n        retard = string.ascii_lowercase.index(elem) + 1\n        items.append(retard)\n        retard_dict[retard].append(index + 1)\n    result = []\n    cost = 0\n    m = 0\n    if items[0] < items[-1]:\n        last = items[0]\n        for i in range(items[0], items[-1] + 1):\n            if i in items:\n                item = i\n                cost += item - last\n                last = item\n                retard_now = retard_dict[item]\n                m += len(retard_now)\n                result += retard_now\n    else:\n        last = items[0]\n        for i in range(items[0], items[-1] - 1, -1):\n            if i in items:\n                item = i\n                cost += last - item\n                last = item\n                retard_now = retard_dict[item]\n                m += len(retard_now)\n                result += retard_now\n    print(cost, m)\n    return result\nfor asd in range(int(input())):\n    print(*main())", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    s = list(input().strip())\n    n = len(s)\n    begin = s.pop(0)\n    end = s.pop(-1)\n    if begin < end:\n        newS = [(j, i) for (i, j) in enumerate(s) if j >= begin and j <= end]\n        newS.sort(reverse=False)\n    elif end < begin:\n        newS = [(j, i) for (i, j) in enumerate(s) if j >= end and j <= begin]\n        newS.sort(reverse=True)\n    else:\n        newS = [(j, i) for (i, j) in enumerate(s) if j == begin]\n    print(abs(ord(end) - ord(begin)), len(newS) + 2, sep=' ')\n    sol = []\n    sol.append(1)\n    for (j, i) in newS:\n        sol.append(i + 2)\n    sol.append(n)\n    print(*sol)", "def solve():\n    a = input()\n    s = []\n    (mi, ma) = (min(a[0], a[-1]), max(a[0], a[-1]))\n    for i in range(1, len(a) - 1):\n        if mi <= a[i] <= ma:\n            s.append((a[i], i + 1))\n    s.sort()\n    if a[0] > a[-1]:\n        s.reverse()\n    print(abs(ord(a[0]) - ord(a[-1])), len(s) + 2)\n    print(1, end=' ')\n    for j in s:\n        print(j[1], end=' ')\n    print(len(a))\nfor _ in range(int(input())):\n    solve()", "from collections import defaultdict\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    start = ord(s[0])\n    end = ord(s[n - 1])\n    cost = abs(start - end)\n    m = 0\n    indexes = defaultdict(list)\n    for (i, char) in enumerate(s):\n        if i == 0:\n            continue\n        val = ord(char)\n        if val in indexes:\n            indexes[val].append(i + 1)\n        else:\n            indexes[val] = [i + 1]\n    ans = [1]\n    inc = 1 if end >= start else -1\n    for val in range(start, end + inc, inc):\n        if val in indexes:\n            ans.extend(indexes[val])\n    print(cost, len(ans))\n    print(*ans)", "def get_index(a):\n    return ord(a) - 96\n\ndef min_max(s):\n    first = s[0]\n    last = s[-1]\n    index_of_first = get_index(first)\n    index_of_last = get_index(last)\n    cost = abs(index_of_first - index_of_last)\n    print(cost, end=' ')\n    path = []\n    if index_of_first < index_of_last:\n        for i in range(len(s)):\n            index_of_i = get_index(s[i])\n            if index_of_first <= index_of_i <= index_of_last:\n                path.append((i + 1, index_of_i))\n        path.sort(key=lambda x: x[1])\n    else:\n        for i in range(len(s)):\n            index_of_i = get_index(s[i])\n            if index_of_first >= index_of_i >= index_of_last:\n                path.append((i + 1, index_of_i))\n        path.sort(key=lambda x: x[1], reverse=True)\n    print(len(path))\n    print(*list((i[0] for i in path)))\nt = int(input())\nwhile t:\n    t -= 1\n    s = input()\n    min_max(s)", "try:\n    for _ in range(int(input())):\n        n = input()\n        z = abs(ord(n[0]) - ord(n[len(n) - 1]))\n        x = ord(n[0])\n        y = ord(n[len(n) - 1])\n        a = min(x, y)\n        b = max(x, y)\n        l = [[] for i in range(26)]\n        for i in range(len(n)):\n            l[ord(n[i]) - 97].append(i + 1)\n        ans = []\n        st = [1, -1][n[0] > n[-1]]\n        for i in range(ord(n[0]) - 97, ord(n[-1]) - 97 + st, st):\n            ans.extend(l[i])\n        print(z, end=' ')\n        l.sort()\n        print(len(ans))\n        print(*ans)\nexcept:\n    pass", "index = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\nn = int(input())\nfor num in range(n):\n    words = ans = []\n    count = [[] for i in range(27)]\n    a = input()\n    for i in range(len(a)):\n        count[index[a[i]]].append(i + 1)\n    jieshu = index[a[-1]]\n    kaishi = index[a[0]]\n    waste = abs(jieshu - kaishi)\n    shun = []\n    step = 0\n    for i in range(len(a)):\n        k = 1\n    for i in range(kaishi, jieshu + 1) if kaishi < jieshu else range(kaishi, jieshu - 1, -1):\n        ans.extend(count[i])\n    print(waste, len(ans))\n    print(*ans)", "abc = 'abcdefghijklmnopqrstuvwxyz'\nfor t in range(int(input())):\n    s = input()\n    s0 = min(s[0], s[-1])\n    sn = max(s[0], s[-1])\n    n = len(s)\n    d = {}\n    for i in range(n):\n        if s0 <= s[i] <= sn:\n            if s[i] not in d:\n                d[s[i]] = [i + 1]\n            else:\n                d[s[i]].append(i + 1)\n    s = sorted(set(s)) if s[0] <= s[-1] else sorted(set(s), reverse=True)\n    t = []\n    for x in s:\n        if x in d:\n            t.extend(d[x])\n    print(ord(sn) - ord(s0), len(t))\n    print(*t)", "def solve():\n    a = input()\n    s = []\n    (mi, ma) = (min(a[0], a[-1]), max(a[0], a[-1]))\n    for i in range(1, len(a) - 1):\n        if mi <= a[i] <= ma:\n            s.append((a[i], i + 1))\n    s.sort()\n    if a[0] > a[-1]:\n        s.reverse()\n    print(abs(ord(a[0]) - ord(a[-1])), len(s) + 2)\n    print(1, end=' ')\n    for j in s:\n        print(j[1], end=' ')\n    print(len(a))\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    n = input()\n    z = abs(ord(n[0]) - ord(n[-1]))\n    x = ord(n[0])\n    y = ord(n[len(n) - 1])\n    a = min(x, y)\n    b = max(x, y)\n    l = [[] for i in range(26)]\n    for i in range(len(n)):\n        l[ord(n[i]) - 97].append(i + 1)\n    ans = []\n    st = [1, -1][n[0] > n[-1]]\n    for i in range(ord(n[0]) - 97, ord(n[-1]) - 97 + st, st):\n        ans.extend(l[i])\n    print(z, end=' ')\n    l.sort()\n    print(len(ans))\n    print(*ans)", "from collections import Counter, defaultdict\nfor _ in ' ' * int(input()):\n    p = input()\n    n = list(enumerate(p))\n    if p[0] > p[-1]:\n        n.sort(key=lambda j: j[1], reverse=True)\n    else:\n        n.sort(key=lambda j: j[1])\n    x = []\n    f = 0\n    for (i, a) in n:\n        if i == 0:\n            f = 1 ^ f\n        if f:\n            x.append(i + 1)\n        if i == len(p) - 1:\n            break\n    print(abs(ord(p[0]) - ord(p[-1])), len(x), '\\n', *x)", "from collections import defaultdict\nfor _ in range(int(input())):\n    tile = input()\n    index = defaultdict(list)\n    for i in range(len(tile)):\n        index[tile[i]].append(i + 1)\n    direction = 1 if tile[0] < tile[-1] else -1\n    c = ord(tile[0])\n    ans = []\n    while c != ord(tile[-1]) + direction:\n        for v in index[chr(c)]:\n            ans.append(v)\n        c += direction\n    print(abs(ord(tile[-1]) - 96 - (ord(tile[0]) - 96)), len(ans))\n    print(*ans)", "from collections import defaultdict\nfor i in range(int(input())):\n    s = input()\n    d = defaultdict(list)\n    for j in range(len(s)):\n        d[s[j]].append(j + 1)\n    dif = ord(s[0]) - ord(s[-1])\n    l = list(d.keys())\n    ans = []\n    if dif < 0:\n        l.sort()\n        for j in l:\n            if j > s[-1]:\n                break\n            if j < s[0]:\n                continue\n            ans.extend(d[j])\n    else:\n        l.sort(reverse=True)\n        for j in l:\n            if j < s[-1]:\n                break\n            if j > s[0]:\n                continue\n            ans.extend(d[j])\n    print(abs(dif), len(ans))\n    for j in ans:\n        print(j, end=' ')\n    print()", "for _ in range(int(input())):\n    s = input()\n    pos = [[] for i in range(26)]\n    for i in range(len(s)):\n        pos[ord(s[i]) - ord('a')].append(i + 1)\n    l = ord(s[0]) - ord('a')\n    r = ord(s[-1]) - ord('a')\n    ok = l <= r\n    ans = []\n    while True:\n        for x in pos[l]:\n            ans.append(x)\n        if l == r:\n            break\n        l += 1 if ok else -1\n    print(abs(ord(s[0]) - ord(s[-1])), len(ans))\n    print(*ans)", "def solve():\n    s = input()\n    start = min(s[0], s[-1])\n    end = max(s[0], s[-1])\n    cost = ord(end) - ord(start)\n    d_pos = {}\n    tot_arr = []\n    m = 0\n    for idx in range(len(s)):\n        if s[idx] < start or s[idx] > end:\n            continue\n        m += 1\n        tot_arr.append(s[idx])\n        if s[idx] in d_pos:\n            d_pos[s[idx]].append(idx + 1)\n        else:\n            d_pos[s[idx]] = [idx + 1]\n    ff = list(set(tot_arr))\n    if s[0] > s[-1]:\n        ff.sort(reverse=True)\n    else:\n        ff.sort()\n    print(cost, m)\n    path = []\n    for f in ff:\n        path += d_pos[f]\n    print(*path)\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor _ in range(t):\n    M = list(input())\n    L = [(M[i], i + 1) for i in range(len(M))]\n    n = len(L)\n    a = L[0][0]\n    b = L[n - 1][0]\n    ans = abs(ord(a) - ord(b))\n    if a > b:\n        L.sort(reverse=True)\n    else:\n        L.sort()\n    startin = 0\n    for i in range(n):\n        if L[i][0] == a:\n            startin = i\n            break\n    lastin = 0\n    for i in range(n - 1, -1, -1):\n        if L[i][0] == b:\n            lastin = i\n            break\n    A = []\n    for i in range(startin, lastin + 1):\n        A.append(L[i][1])\n    m = len(A)\n    if A[m - 1] != n:\n        c = A.index(n)\n        d = A[m - 1]\n        A[m - 1] = n\n        A[c] = d\n    if A[0] != 1:\n        c = A.index(1)\n        (A[c], A[0]) = (A[0], A[c])\n    print(ans, m)\n    print(*A)", "for _ in range(int(input())):\n    a = list(input())\n    if a[0] > a[-1]:\n        z = [(ord(a[0]) - ord(a[i]), i + 1) for i in range(len(a)) if a[i] <= a[0] and a[i] >= a[-1]]\n    else:\n        z = [(ord(a[i]) - ord(a[0]), i + 1) for i in range(len(a)) if a[i] >= a[0] and a[i] <= a[-1]]\n    z.sort()\n    m = z[-1][0]\n    t = len(z)\n    r = [j for (i, j) in z]\n    print(m, t)\n    print(*r)", "for _ in range(int(input())):\n    w = input()\n    first_let = ord(w[0])\n    last_let = ord(w[-1])\n    rev = False\n    if first_let > last_let:\n        rev = True\n        (first_let, last_let) = (last_let, first_let)\n    out = ['1']\n    out_let = []\n    for x in range(1, len(w) - 1):\n        if first_let <= ord(w[x]) <= last_let:\n            out_let.append([w[x], x])\n    if rev:\n        out_let = sorted(out_let, key=lambda x: (x[0], x[1]), reverse=True)\n    else:\n        out_let = sorted(out_let, key=lambda x: (x[0], x[1]))\n    for x in out_let:\n        out.append(str(x[1] + 1))\n    out.append(str(len(w)))\n    print(abs(first_let - last_let), len(out))\n    print(' '.join(out))", "t = int(input())\nfor i in range(t):\n    s = input()\n    a = ord(s[0])\n    b = ord(s[-1])\n    if a > b:\n        (a, b) = (b, a)\n    ans = []\n    for i in range(1, len(s) - 1):\n        if a <= ord(s[i]) <= b:\n            ans.append((s[i], i + 1))\n    print(b - a, len(ans) + 2)\n    print(1, end=' ')\n    for (_, i) in sorted(ans, key=lambda x: x[0], reverse=s[0] > s[-1]):\n        print(i, end=' ')\n    print(len(s))", "import math\nfrom sys import stdin\ninput = stdin.readline\nt = int(input())\nalpha = 'abcdefghijklmnopqrstuvwxyz'\nout = []\nfor _ in range(t):\n    s = input().strip()\n    p1 = s[0]\n    p2 = s[-1]\n    new = []\n    cost = 0\n    cost = alpha.index(s[0]) - alpha.index(s[-1])\n    for i in range(len(s)):\n        new.append(i + 1)\n    if cost <= 0:\n        new.sort(key=lambda x: s[x - 1])\n    else:\n        new.reverse()\n        new.sort(key=lambda x: s[x - 1])\n    end = len(s)\n    seq = []\n    start = False\n    for i in range(len(new)):\n        if (new[i] == 1 or new[i] == end) and start == False:\n            start = True\n        elif (new[i] == 1 or new[i] == end) and start == True:\n            break\n        elif start == True:\n            seq.append(new[i])\n    if cost > 0:\n        seq.reverse()\n    cost = abs(cost)\n    seq.insert(0, 1)\n    seq.append(end)\n    print(cost, len(seq))\n    print(*seq)", "for _ in range(int(input())):\n    a = list(input())\n    if a[0] > a[-1]:\n        z = [(ord(a[0]) - ord(a[i]), i + 1) for i in range(len(a)) if a[i] <= a[0] and a[i] >= a[-1]]\n    else:\n        z = [(ord(a[i]) - ord(a[0]), i + 1) for i in range(len(a)) if a[i] >= a[0] and a[i] <= a[-1]]\n    z.sort()\n    m = z[-1][0]\n    t = len(z)\n    r = [j for (i, j) in z]\n    print(m, t)\n    print(*r)", "for _ in range(int(input())):\n    n = input()\n    z = abs(ord(n[0]) - ord(n[-1]))\n    x = ord(n[0])\n    y = ord(n[-1])\n    a = min(x, y)\n    b = max(x, y)\n    l = [[] for i in range(26)]\n    for i in range(len(n)):\n        l[ord(n[i]) - 97].append(i + 1)\n    ans = []\n    st = [1, -1][n[0] > n[-1]]\n    for i in range(ord(n[0]) - 97, ord(n[-1]) - 97 + st, st):\n        ans.extend(l[i])\n    print(z, end=' ')\n    l.sort()\n    print(len(ans))\n    print(*ans)", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    d = {chr(o): [] for o in range(ord('a'), ord('z') + 1)}\n    for i in range(1, n - 1):\n        d[s[i]].append(i + 1)\n    if ord(s[0]) < ord(s[-1]):\n        sol = [1]\n        for o in range(ord(s[0]), ord(s[-1]) + 1):\n            sol += d[chr(o)]\n        sol.append(n)\n    elif ord(s[0]) > ord(s[-1]):\n        sol = [1]\n        for o in range(ord(s[0]), ord(s[-1]) - 1, -1):\n            sol += d[chr(o)]\n        sol.append(n)\n    else:\n        sol = [1] + d[s[0]] + [n]\n    print(abs(ord(s[0]) - ord(s[-1])), len(sol))\n    print(*sol)", "import bisect\n\ndef resolve(lines_1):\n    start_digit = ord(lines_1[0])\n    end_digit = ord(lines_1[-1])\n    hash_dict = {}\n    for index in range(len(lines_1)):\n        digit = ord(lines_1[index])\n        if digit in hash_dict.keys():\n            hash_dict[digit].append(index + 1)\n        else:\n            hash_dict[digit] = [index + 1]\n    if start_digit == end_digit:\n        cost = 0\n        digit_length = len(hash_dict[start_digit])\n        return (cost, digit_length, hash_dict[start_digit])\n    elif start_digit < end_digit:\n        cost = end_digit - start_digit\n        res = []\n        for index in range(start_digit, end_digit + 1):\n            if index in hash_dict.keys():\n                res.extend(hash_dict[index])\n        return (cost, len(res), res)\n    else:\n        cost = start_digit - end_digit\n        res = []\n        for index in range(start_digit, end_digit - 1, -1):\n            if index in hash_dict.keys():\n                res.extend(hash_dict[index])\n        return (cost, len(res), res)\n\ndef read_input():\n    lines_1 = input()\n    return lines_1\ncase_num = int(input())\nif not case_num == 0:\n    for index in range(case_num):\n        lines_1 = read_input()\n        (cost, m, res_list) = resolve(lines_1)\n        print(cost, m)\n        for item in res_list:\n            print(str(item) + ' ', end='')\n        print()", "from collections import defaultdict\ntest = int(input())\nwhile test:\n    s = input()\n    ct = defaultdict(list)\n    for i in range(len(s)):\n        ct[s[i]].append(i + 1)\n    start = ord(s[0])\n    stop = ord(s[-1])\n    ans = [1]\n    jumps = 1\n    for i in ct[s[0]]:\n        if i != 1 and i != len(s):\n            jumps += 1\n            ans.append(i)\n    dir = 1\n    if start > stop:\n        dir = -1\n        start -= 1\n    else:\n        start += 1\n    for i in range(start, stop, dir):\n        for j in ct[chr(i)]:\n            ans.append(j)\n            jumps += 1\n    if s[0] != s[-1]:\n        for i in ct[chr(stop)]:\n            if i == len(s):\n                continue\n            ans.append(i)\n            jumps += 1\n    ans.append(len(s))\n    print(abs(ord(s[0]) - ord(s[-1])), jumps + 1)\n    print(*ans)\n    test -= 1", "for abc in range(int(input())):\n    string = input()\n    mas = [ord(string[x]) - ord('a') for x in range(len(string))]\n    index_find = []\n    for x in range(26):\n        index_find.append([])\n    for x in range(len(mas)):\n        index_find[mas[x]].append(x)\n    answer = [0, []]\n    flag = mas[-1] > mas[0]\n    number_index = mas[0]\n    flag1 = True\n    while flag1:\n        if flag:\n            for x in range(mas[-1] - number_index + 1):\n                if index_find[number_index + x]:\n                    answer[1] += index_find[number_index + x]\n                    index_find[number_index + x] = []\n                    number_index = number_index + x\n                    answer[0] += x\n                    if number_index >= mas[-1]:\n                        flag1 = False\n                    break\n        else:\n            for x in range(number_index - mas[-1] + 1):\n                if index_find[number_index - x]:\n                    answer[1] += index_find[number_index - x]\n                    index_find[number_index - x] = []\n                    number_index = number_index - x\n                    answer[0] += x\n                    if number_index <= mas[-1]:\n                        flag1 = False\n                    break\n    print(answer[0], len(answer[1]))\n    answer[1] = [x + 1 for x in answer[1]]\n    print(*answer[1])", "def man():\n    s = input()\n    x = ord(s[0])\n    y = ord(s[-1])\n    cost = abs(x - y)\n    l = [[] for i in range(cost + 1)]\n    num = 0\n    st = -1\n    if x < y:\n        st = 1\n    for i in range(0, len(s)):\n        if x * st <= ord(s[i]) * st <= y * st:\n            num += 1\n            l[st * (ord(s[i]) - x)].append(i + 1)\n    print(cost, num)\n    print(*l[0], end='')\n    for i in l[1:]:\n        if len(i) > 0:\n            print('', *i, end='')\n    print()\nn = int(input())\nfor i in range(n):\n    man()", "from sys import stdin\nrd = stdin.readline\nfor _ in range(int(rd())):\n    s = rd().strip()\n    cost = abs(ord(s[0]) - ord(s[-1]))\n    if s[0] > s[-1]:\n        l = sorted(zip(s, range(len(s))), reverse=True, key=lambda x: (x[0], -x[1]))\n    else:\n        l = sorted(zip(s, range(len(s))))\n    (x, y) = (l.index((s[-1], len(s) - 1)), l.index((s[0], 0)))\n    visits = x - y + 1\n    print(cost, visits)\n    for i in range(y, x + 1):\n        print(l[i][1] + 1, end=' ')\n    print()", "n_tests = int(input())\ninputs = []\nfor test in range(n_tests):\n    inputs.append(list(input()))\n\ndef indices(word, char):\n    indxs = []\n    for (d, char_i) in enumerate(word):\n        if char_i == char:\n            indxs.append(d)\n    return indxs\nfor line in inputs:\n    (start, end) = (line[0], line[-1])\n    sorted_line = sorted(line)\n    if start <= end:\n        new_end = len(line) - sorted_line[::-1].index(end) - 1\n        new_start = sorted_line.index(start)\n        tiles = new_end - new_start + 1\n        cost = ord(end) - ord(start)\n        jump_pattern = []\n        for char in sorted(set(sorted_line[new_start:new_end + 1])):\n            jump_pattern += indices(line, char)\n    else:\n        new_start = len(line) - sorted_line[::-1].index(start) - 1\n        new_end = sorted_line.index(end)\n        tiles = new_start - new_end + 1\n        cost = ord(start) - ord(end)\n        jump_pattern = []\n        for char in sorted(set(sorted_line[new_end:new_start + 1]))[::-1]:\n            jump_pattern += indices(line, char)\n    print(cost, tiles)\n    print(' '.join([str(n + 1) for n in jump_pattern]))", "testcases = int(input().strip())\nfor _ in range(testcases):\n    string = input().strip()\n    n = len(string)\n    (s, e) = (string[0], string[-1])\n    l = []\n    for i in range(n):\n        if s <= e and string[i] >= s and (string[i] <= e) or (s > e and string[i] <= s and (string[i] >= e)):\n            l.append(i + 1)\n    if s <= e:\n        l.sort(key=lambda x: string[x - 1])\n    else:\n        l.sort(reverse=True, key=lambda x: string[x - 1])\n    print(abs(ord(e) - ord(s)), len(l))\n    [print(i, end=' ') for i in l]\n    print()", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    (l, r) = (ord(s[0]), ord(s[-1]))\n    (x, y) = (min(l, r), max(l, r))\n    d = defaultdict(list)\n    a = []\n    for i in range(1, n - 1):\n        if ord(s[i]) >= x and ord(s[i]) <= y:\n            d[s[i]].append(i + 1)\n    for i in sorted(d.items()):\n        a.extend(i[1])\n    print(abs(ord(s[-1]) - ord(s[0])), len(a) + 2)\n    if l < r:\n        print(*[1] + a + [n])\n    else:\n        print(*[1] + a[::-1] + [n])", "import sys\nt = int(input())\nfor _ in range(t):\n    s = [ord(i) - 96 for i in input()]\n    n = len(s)\n    d = {}\n    for j in range(n):\n        if s[j] in d.keys():\n            d[s[j]].append(j + 1)\n        else:\n            d[s[j]] = [j + 1]\n    ans = []\n    (cost, m) = (abs(s[0] - s[-1]), 0)\n    if s[0] <= s[-1]:\n        for i in range(s[0], s[-1] + 1):\n            if i in d.keys():\n                ans += d[i]\n                m += len(d[i])\n    else:\n        for ii in range(s[-1], s[0] + 1):\n            if ii in d.keys():\n                ans += reversed(d[ii])\n                m += len(d[ii])\n        ans.reverse()\n    print(cost, m)\n    print(*ans)", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    arr = [(ord(s[i]), i + 1) for i in range(1, n - 1)]\n    first = ord(s[0])\n    last = ord(s[-1])\n    mn = abs(first - last)\n    if first <= last:\n        arr.sort()\n    else:\n        arr.sort(reverse=True)\n    ans = [1]\n    for (i, j) in arr:\n        if i >= first and i <= last:\n            ans.append(j)\n        elif i <= first and i >= last:\n            ans.append(j)\n    ans.append(n)\n    print(mn, len(ans))\n    for i in ans:\n        print(i, end=' ')\n    print()", "from collections import defaultdict as dd\nfor _ in range(int(input())):\n    string = list(input().strip())\n    n = len(string)\n    left = string[0]\n    right = string[-1]\n    start = min(left, right)\n    end = max(left, right)\n    dk = dd(list)\n    for x in range(n):\n        dk[string[x]].append(x + 1)\n    string.sort()\n    rslt = []\n    dk_ = dd(int)\n    count = 0\n    for x in string:\n        if x >= start and x <= end and (not dk_[x]):\n            rslt.extend(dk[x])\n            count += abs(ord(start) - ord(x))\n            start = x\n            dk_[x] = 1\n    if left < right:\n        print(count, len(rslt))\n        rslt.remove(n)\n        rslt.remove(1)\n        print(1, end=' ')\n        print(*rslt, end=' ')\n        print(n)\n    else:\n        print(count, len(rslt))\n        rslt.remove(n)\n        rslt.remove(1)\n        print(1, end=' ')\n        print(*rslt[::-1], end=' ')\n        print(n)", "tc = int(input())\nfor _ in range(tc):\n    s = input()\n    a = []\n    n = len(s)\n    for i in range(1, n - 1):\n        c = s[i]\n        if c >= s[0] and c <= s[-1] or (c <= s[0] and c >= s[-1]):\n            a.append((c, i + 1))\n    if s[-1] >= s[0]:\n        a.sort()\n    else:\n        a.sort(reverse=True)\n    print(abs(ord(s[-1]) - ord(s[0])), 2 + len(a))\n    print(1, end=' ')\n    if len(a) > 0:\n        print(*[x[1] for x in a], end=' ')\n    print(n)", "def solve():\n    s = input()\n    (minx, maxx, td) = (0, 0, 0)\n    if s[0] < s[-1]:\n        (minx, maxx) = (s[0], s[-1])\n        td = 1\n    else:\n        (minx, maxx) = (s[-1], s[0])\n        td = -1\n    cost = ord(maxx) - ord(minx)\n    pt = []\n    for i in range(1, len(s) - 1):\n        if minx <= s[i] <= maxx:\n            pt.append((i + 1, ord(s[i])))\n    pt.sort(key=lambda w: w[1] * td)\n    print(cost, len(pt) + 2)\n    print(1, end=' ')\n    for it in pt:\n        print(it[0], end=' ')\n    print(len(s))\nt = int(input())\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    a = list(input())\n    if a[0] > a[-1]:\n        z = [(ord(a[0]) - ord(a[i]), i + 1) for i in range(len(a)) if a[i] <= a[0] and a[i] >= a[-1]]\n    else:\n        z = [(ord(a[i]) - ord(a[0]), i + 1) for i in range(len(a)) if a[i] >= a[0] and a[i] <= a[-1]]\n    z.sort()\n    m = z[-1][0]\n    t = len(z)\n    r = [j for (i, j) in z]\n    print(m, t)\n    print(*r)", "def p(c):\n    return ord(c) - ord('a')\nt = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    pos = [[] for i in range(26)]\n    for i in range(n):\n        pos[p(s[i])].append(i)\n    cost = abs(p(s[n - 1]) - p(s[0]))\n    m = len(pos[p(s[n - 1])])\n    step = 1 if p(s[n - 1]) > p(s[0]) else -1\n    for i in range(p(s[0]), p(s[n - 1]), step):\n        if pos[i]:\n            m += len(pos[i])\n    print(cost, m)\n    for i in range(p(s[0]), p(s[n - 1]), step):\n        if pos[i]:\n            for j in pos[i]:\n                print(j + 1, end=' ')\n    for j in pos[p(s[n - 1])]:\n        print(j + 1, end=' ')\n    print()", "t = int(input())\nwhile t > 0:\n    a = []\n    for i in range(26):\n        a += [[]]\n    t -= 1\n    s = input()\n    n = len(s)\n    for i in range(n):\n        a[ord(s[i]) - 97] += [i + 1]\n    start = ord(s[0]) - 97\n    end = ord(s[-1]) - 97\n    ans = []\n    if start <= end:\n        for i in range(start, end + 1):\n            ans += a[i]\n    else:\n        for i in range(start, end - 1, -1):\n            ans += a[i]\n    ans.pop(ans.index(1))\n    ans.pop(ans.index(n))\n    print(abs(start - end), len(ans) + 2)\n    print(1, *ans, n)", "t = int(input())\nfor g in range(t):\n    s = input()\n    cost = abs(ord(s[-1]) - ord(s[0]))\n    a = []\n    for i in range(len(s)):\n        if s[i] not in a:\n            a.append(s[i])\n    a.sort()\n    if a.index(s[0]) > a.index(s[-1]):\n        a = a[::-1]\n    b = []\n    for i in range(len(a)):\n        b.append([])\n    for i in range(len(s)):\n        b[a.index(s[i])].append(i + 1)\n    l = min(a.index(s[0]), a.index(s[-1]))\n    r = max(a.index(s[0]), a.index(s[-1]))\n    ans = []\n    for i in range(l, r + 1):\n        ans += b[i]\n    print(cost, len(ans))\n    print(*ans)", "def main():\n    n = int(input())\n    for i in range(n):\n        s = input()\n        step = False\n        if ord(s[0]) < ord(s[-1]):\n            step = False\n        elif ord(s[-1]) < ord(s[0]):\n            step = True\n        arr = [(ord(s[i]), i) for i in range(len(s))]\n        arr.sort(reverse=step, key=lambda x: x[0])\n        start = arr.index((ord(s[0]), 0))\n        end = arr.index((ord(s[-1]), len(s) - 1))\n        arr = arr[start:end + 1]\n        cost = 0\n        ans = [1]\n        for i in range(1, len(arr)):\n            cost += abs(arr[i][0] - arr[i - 1][0])\n            ans.append(arr[i][1] + 1)\n        print(cost, len(ans))\n        print(*ans, sep=' ')\nmain()"]