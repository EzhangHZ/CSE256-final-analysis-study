["import string\nfor _ in range(int(input())):\n    n = int(input())\n    st = input()\n    s = set()\n    mp = {}\n    letters = list(string.ascii_lowercase)\n\n    def check(l, c):\n        while l in mp:\n            l = mp[l]\n            if l == c:\n                return True\n        return False\n    for c in st:\n        if c in mp:\n            continue\n        for l in letters:\n            if l == c or (l in mp and check(l, c) and (len(mp) < 25)):\n                continue\n            mp[c] = l\n            letters.remove(l)\n            break\n    print(''.join((mp[c] for c in st)))", "import sys\ninput = sys.stdin.readline\nt = int(input())\n\ndef isgood(alpha, c1, c2):\n    c = c2\n    r = 0\n    while c != 0:\n        if c != c1:\n            r = r + 1\n            c = alpha[c]\n        elif r < 25:\n            return 0\n        else:\n            break\n    return 1\n\ndef convert(s):\n    new = ''\n    for i in s:\n        new += i\n    return new\nfor i in range(t):\n    n = int(input())\n    c = list(input())\n    c = c[:-1]\n    alpha = {97: 0}\n    for j in range(ord('b'), ord('z') + 1):\n        alpha[j] = 0\n    r = c\n    letters = list(range(97, ord('z') + 1))\n    for j in range(n):\n        if alpha[ord(r[j])] != 0:\n            r[j] = chr(alpha[ord(r[j])])\n        else:\n            for k in letters:\n                if not isgood(alpha, ord(r[j]), k):\n                    continue\n                alpha[ord(r[j])] = k\n                r[j] = chr(k)\n                letters.remove(k)\n                break\n    sys.stdout.write(convert(r) + '\\n')", "import os\nimport math\nimport collections\nimport bisect\nimport functools\nimport itertools\nimport string\nfrom collections import deque\n\ndef solve(s):\n    q = deque([c for c in string.ascii_lowercase])\n    count_char = len(set([c for c in s]))\n    d = {}\n    res = ''\n    for c in s:\n        if c in d:\n            res += d[c]\n            continue\n        tmp = []\n        while q:\n            if q[0] == c:\n                tmp.append(q.popleft())\n                continue\n            x = q[0]\n            count = 1\n            while x in d and x != c:\n                x = d[x]\n                count += 1\n            if x == c and count < 26:\n                tmp.append(q.popleft())\n            else:\n                break\n        c2 = q.popleft()\n        res += c2\n        d[c] = c2\n        for x in tmp:\n            q.appendleft(x)\n    return res\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    print(solve(s))", "def isCyclic(dct1, dct2, a, n):\n    if n > 26:\n        return False\n    if a not in dct1:\n        return False\n    if dct1[a] in dct2:\n        return True\n    n += 1\n    dct2[dct1[a]] = 0\n    return isCyclic(dct1, dct2, dct1[a], n)\nfor t in range(int(input())):\n    n = int(input())\n    s = input()\n    dct = {}\n    st = set()\n    ans = []\n    lst = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    ind = 0\n    for i in s:\n        ind = 0\n        if i in dct:\n            ans.append(dct[i])\n        elif len(lst) == 1:\n            ans.append(lst[0])\n            dct[i] = lst[0]\n            st.add(lst[0])\n            del lst[0]\n        elif i in st:\n            ind = 0\n            while isCyclic(dct, {i: 0}, lst[ind], 0):\n                ind += 1\n            ans.append(lst[ind])\n            dct[i] = lst[ind]\n            st.add(lst[ind])\n            del lst[ind]\n        else:\n            ind = 0\n            while lst[ind] == i:\n                ind += 1\n            ans.append(lst[ind])\n            dct[i] = lst[ind]\n            st.add(lst[ind])\n            del lst[ind]\n    print(''.join(ans))", "import os\nimport math\nimport collections\nimport bisect\nimport functools\nimport itertools\nimport string\nfrom collections import deque\n\ndef solve(s):\n    q = deque([c for c in string.ascii_lowercase])\n    count_char = len(set([c for c in s]))\n    d = {}\n    res = ''\n    for c in s:\n        if c in d:\n            res += d[c]\n            continue\n        t = 0\n        while True:\n            if q[0] == c:\n                q.append(q.popleft())\n                t += 1\n                continue\n            x = q[0]\n            count = 1\n            while x in d and x != c:\n                x = d[x]\n                count += 1\n            if x == c and count < 26:\n                q.append(q.popleft())\n                t += 1\n            else:\n                break\n        c2 = q.popleft()\n        res += c2\n        d[c] = c2\n        while t > 0:\n            q.appendleft(q.pop())\n            t -= 1\n    return res\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    print(solve(s))", "import sys\ninput = sys.stdin.readline\n\ndef isCyclic(dct1, dct2, a, n):\n    if n > 26:\n        return False\n    if a not in dct1:\n        return False\n    if dct1[a] in dct2:\n        return True\n    n += 1\n    dct2[dct1[a]] = 0\n    return isCyclic(dct1, dct2, dct1[a], n)\nfor t in range(int(input()[:-1])):\n    n = int(input())\n    s = input()\n    s = s[:-1]\n    dct = {}\n    st = set()\n    ans = []\n    lst = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    ind = 0\n    for i in s:\n        ind = 0\n        if i in dct:\n            ans.append(dct[i])\n        elif len(lst) == 1:\n            ans.append(lst[0])\n            dct[i] = lst[0]\n            st.add(lst[0])\n            del lst[0]\n        elif i in st:\n            ind = 0\n            while isCyclic(dct, {i: 0}, lst[ind], 0):\n                ind += 1\n            ans.append(lst[ind])\n            dct[i] = lst[ind]\n            st.add(lst[ind])\n            del lst[ind]\n        else:\n            ind = 0\n            if lst[ind] == i:\n                ind += 1\n            ans.append(lst[ind])\n            dct[i] = lst[ind]\n            st.add(lst[ind])\n            del lst[ind]\n    print(''.join(ans))", "def solve():\n    (N, s) = (int(input()), input())\n    (visited, found, ans) = (set(), [-1] * 26, '')\n\n    def helper(target):\n        ans = 0\n        stop = target\n        while stop != -1:\n            ans += 1\n            stop = found[stop]\n            if stop == target:\n                return ans\n        return -1\n    for i in range(N):\n        x = ord(s[i]) - ord('a')\n        if found[x] != -1:\n            ans += chr(found[x] + ord('a'))\n            continue\n        for j in range(26):\n            if j in visited:\n                continue\n            if j == x:\n                continue\n            found[x] = j\n            z = helper(j)\n            if z != -1 and z != 26:\n                continue\n            else:\n                visited.add(j)\n                break\n        ans += chr(found[x] + ord('a'))\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "def solve():\n    n = int(input())\n    t = input()\n    gin = [-1] * 26\n    gout = [-1] * 26\n    s = ''\n    next = 0\n    for i in t:\n        val = ord(i) - ord('a')\n        if gin[val] > -1:\n            s += chr(ord('a') + gin[val])\n        else:\n            for j in range(26):\n                if gout[j] == -1 and j != val:\n                    (k, found, path) = (j, False, 0)\n                    while gin[k] > -1:\n                        k = gin[k]\n                        path += 1\n                        if k == val:\n                            found = True\n                            break\n                    if not found or path == 25:\n                        gin[val] = j\n                        gout[j] = val\n                        s += chr(ord('a') + j)\n                        break\n    print(s)\ntest = int(input())\nfor i in range(test):\n    solve()", "l = list('abcdefghijklmnopqrstuvwxyz')\n\ndef dfs(d, s, j):\n    if s == j:\n        return 1\n    while s:\n        if j == d[s]:\n            return 1\n        s = d[s]\n    return 0\n\ndef ss(s, n):\n    d = {}\n    d2 = {}\n    for i in l:\n        d[i] = 0\n        d2[i] = ''\n    for i in s:\n        if d2[i] != '':\n            continue\n        for j in l:\n            if i == j:\n                continue\n            if d[j] != 0:\n                continue\n            if dfs(d2, j, i) == 1:\n                continue\n            d2[i] = j\n            d[j] = 1\n            break\n    for i in s:\n        if d2[i] == '':\n            for j in d:\n                if d[j] == 0:\n                    d2[i] = j\n    res = ''\n    for i in s:\n        res += d2[i]\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(input())\n    print(ss(s, n))", "ntestcases = int(input())\nfor i in range(ntestcases):\n    tlen = int(input())\n    t = list(input())\n    sTotMap = {}\n    tTosMap = {}\n    nextLetter = 'a'\n    answer = ['a'] * tlen\n    j = 0\n\n    def detectCycle(s, t):\n        curr = t\n        while curr in sTotMap:\n            next = sTotMap[curr]\n            if next == s:\n                return True\n            curr = next\n        return False\n    for c in t:\n        if c in tTosMap:\n            answer[j] = tTosMap[c]\n            j += 1\n            continue\n        currLetter = nextLetter\n        while currLetter in sTotMap or c == currLetter or (len(sTotMap) < 25 and detectCycle(currLetter, c)):\n            currLetter = chr(ord(currLetter) + 1)\n        if currLetter == nextLetter:\n            nextLetter = chr(ord(nextLetter) + 1)\n        answer[j] = currLetter\n        j += 1\n        sTotMap[currLetter] = c\n        tTosMap[c] = currLetter\n    print(''.join(answer))", "q = int(input())\n\ndef char_position(letter):\n    return ord(letter) - 97\n\ndef isCicular(a, b, g):\n    curr = a\n    while g[char_position(curr)] != None:\n        curr = g[char_position(curr)]\n    return curr == b\nfor _ in range(q):\n    g = [None] * 26\n    l = list('abcdefghijklmnopqrstuvwxyz')\n    n = int(input())\n    t = list(input())\n    out = []\n    first = None\n    for i in range(n):\n        k = 0\n        idx = char_position(t[i])\n        if g[idx] == None:\n            if len(l) == 1:\n                g[idx] = l.pop(0)\n            else:\n                while l[k] == t[i] or ((g[char_position(l[k])] != None and isCicular(l[k], t[i], g)) and k < len(l) - 1):\n                    k += 1\n                g[idx] = l.pop(k)\n        out.append(g[idx])\n    print(''.join(out))", "import math\nimport string\nfrom typing import Optional\n\ndef mapped_read(cast):\n    return map(cast, input().split())\n\ndef read_list(cast):\n    return list(mapped_read(cast))\n\ndef lcm(a, b):\n    return a // math.gcd(a, b) * b\n\ndef check(g, start, t):\n    cnt = 1\n    curr = start\n    while curr in g:\n        cnt += 1\n        curr = g[curr]\n    return cnt == 26 or curr != t\n\ndef solve():\n    (n,) = mapped_read(int)\n    s = input()\n    a = [chr(97 + i) for i in range(26)]\n    prev = {}\n    for c in s:\n        if c not in prev:\n            for i in a:\n                if i != c and (i not in prev or check(prev, i, c)):\n                    prev[c] = i\n                    a.remove(i)\n                    break\n        print(prev[c], end='')\n    print()\none = False\nfor _ in range(1 if one else int(input())):\n    solve()", "def get_root(sss, i):\n    if sss[i] != i:\n        sss[i] = get_root(sss, sss[i])\n    return sss[i]\nfor _ in range(int(input())):\n    (_, sss) = (input(), list(range(26)))\n    (s, letters, coding) = ([ord(c) - 97 for c in input()], [ord(c) - 97 for c in reversed(__import__('string').ascii_lowercase)], [-1] * 26)\n    for char in s:\n        if coding[char] == -1:\n            j = len(letters) - 1\n            u = get_root(sss, char)\n            while j and get_root(sss, letters[j]) == u:\n                j -= 1\n            coding[char] = letters.pop(j)\n            sss[sss[char]] = sss[coding[char]]\n    print(''.join((chr(coding[c] + 97) for c in s)))", "for _ in range(int(input())):\n    n = int(input())\n    t = list(map(lambda x: ord(x) - ord('a'), list(input())))\n    next = [None] * 26\n    prev = [None] * 26\n\n    def ok(c, j):\n        cnt = 1\n        while next[j] != None:\n            j = next[j]\n            cnt += 1\n        if c != j:\n            return True\n        return cnt == 26\n    for (i, c) in enumerate(t):\n        if next[c] == None:\n            for j in range(26):\n                if prev[j] == None and c != j and ok(c, j):\n                    next[c] = j\n                    prev[j] = c\n                    break\n        t[i] = next[c]\n    t = list(map(lambda x: chr(ord('a') + x), t))\n    print(''.join(t))", "def getResult(n, s):\n\n    def check(edges_dict, i):\n        if len(edges_dict.keys()) == 26:\n            return False\n        ori = i\n        while i in edges_dict:\n            i = edges_dict[i]\n            if i == ori:\n                return True\n        return False\n    edges_dict = {}\n    get_father = {}\n    for c in s:\n        if len(edges_dict.keys()) == 26:\n            break\n        if ord(c) - ord('a') in get_father:\n            continue\n        for i in range(26):\n            if i not in edges_dict and i != ord(c) - ord('a'):\n                edges_dict[i] = ord(c) - ord('a')\n                if not check(edges_dict, i):\n                    get_father[ord(c) - ord('a')] = i\n                    break\n                else:\n                    del edges_dict[i]\n    ans = []\n    ss = 'abcdefghijklmnopqrstuvwxyz'\n    for c in s:\n        ans.append(ss[get_father[ord(c) - ord('a')]])\n    return ''.join(ans)\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    print(getResult(n, s))", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    st = input()\n    d = {}\n    gd = {}\n    s = [-1 for k in range(26)]\n\n    def find(i):\n        while s[i] >= 0:\n            i = s[i]\n        return i\n\n    def union(x, y):\n        z = s[x] + s[y]\n        if s[x] <= s[y]:\n            s[x] = z\n            s[y] = x\n        else:\n            s[x] = y\n            s[y] = z\n    res = ''\n    for j in st:\n        if j in gd:\n            res += gd[j]\n            continue\n        for k in range(26):\n            if k not in d:\n                x = find(k)\n                y = find(ord(j) - 97)\n                if x != y or abs(s[x]) == 26:\n                    union(x, y)\n                    d[k] = 1\n                    gd[j] = chr(k + 97)\n                    res += gd[j]\n                    break\n                else:\n                    continue\n            else:\n                continue\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    t = list(map(lambda x: ord(x) - ord('a'), list(input())))\n    next = [None] * 26\n    prev = [None] * 26\n\n    def ok(c, j):\n        cnt = 1\n        while next[j] != None:\n            j = next[j]\n            cnt += 1\n        if c != j:\n            return True\n        return cnt == 26\n    for (i, c) in enumerate(t):\n        if next[c] == None:\n            for j in range(26):\n                if prev[j] == None and c != j and ok(c, j):\n                    next[c] = j\n                    prev[j] = c\n                    break\n        t[i] = next[c]\n    t = list(map(lambda x: chr(ord('a') + x), t))\n    print(''.join(t))", "def firstinlist(letter):\n    while letter in back:\n        letter = back[letter]\n    return letter\nT = int(input())\nfor testcase in range(1, T + 1):\n    n = int(input())\n    t = input()\n    used = {}\n    back = {}\n    notavail = set()\n    res = ''\n    for l in t:\n        if l in used:\n            res += used[l]\n        else:\n            for testnumber in range(ord('a'), ord('z') + 1):\n                if not testnumber in notavail:\n                    if len(used) == 25 or chr(testnumber) != firstinlist(l):\n                        used[l] = chr(testnumber)\n                        back[chr(testnumber)] = l\n                        notavail.add(testnumber)\n                        res += used[l]\n                        break\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    t = list(map(lambda x: ord(x) - ord('a'), list(input())))\n    next = [None] * 26\n    prev = [None] * 26\n\n    def sol(c, j):\n        cnt = 1\n        while next[j] != None:\n            j = next[j]\n            cnt += 1\n        if c != j:\n            return True\n        return cnt == 26\n    for (i, c) in enumerate(t):\n        if next[c] == None:\n            for j in range(26):\n                if prev[j] == None and c != j and sol(c, j):\n                    next[c] = j\n                    prev[j] = c\n                    break\n        t[i] = next[c]\n    t = list(map(lambda x: chr(ord('a') + x), t))\n    print(''.join(t))", "def work():\n    input()\n    s = input()\n    nexts = [None] * 26\n    prevs = [None] * 26\n\n    def travel(cur):\n        siz = 1\n        while nexts[cur] != None:\n            siz += 1\n            cur = nexts[cur]\n        return (cur, siz)\n    for c in s:\n        curval = ord(c) - 97\n        if prevs[curval] != None:\n            continue\n        (v2, siz) = travel(curval)\n        for plaintxt_cand in range(26):\n            if plaintxt_cand == v2 and siz != 26:\n                continue\n            if nexts[plaintxt_cand] != None:\n                continue\n            prevs[curval] = plaintxt_cand\n            nexts[plaintxt_cand] = curval\n            break\n    ans = ''.join([chr(prevs[ord(c) - 97] + 97) for c in s])\n    print(ans)\ntn = int(input())\nfor ti in range(tn):\n    work()", "import math\ntc = int(input())\nalphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\ndef check_circle(k):\n    start_node = k\n    next_node = k\n    while True:\n        next_node = dec[next_node]\n        if next_node == -1:\n            return False\n        if next_node == start_node:\n            return True\nfor z in range(0, tc):\n    l = int(input())\n    s = input()\n    anc = [-1] * 26\n    dec = [-1] * 26\n    string = ''\n    edges = 0\n    for i in range(0, l):\n        letter = s[i]\n        ind = ord(letter) - 97\n        if dec[ind] == -1:\n            for k in range(0, 26):\n                if edges == 25:\n                    if anc[k] == -1:\n                        anc[k] = ind\n                        dec[ind] = k\n                        string += alphabet[k]\n                        edges += 1\n                if anc[k] == -1 and k != ind:\n                    anc[k] = ind\n                    dec[ind] = k\n                    if not check_circle(k):\n                        string += alphabet[k]\n                        edges += 1\n                        break\n                    else:\n                        dec[ind] = -1\n                        anc[k] = -1\n        else:\n            string += alphabet[dec[ind]]\n    print(string)", "def helper(S, j):\n    c = 0\n    p = j\n    while p != -1:\n        c += 1\n        p = S[p]\n        if p == j:\n            return c\n    return -1\ntest = int(input())\nfor t in range(test):\n    n = int(input())\n    A = input()\n    S = [-1] * 26\n    ref = [1] * 26\n    u = ord('a')\n    for i in A:\n        if S[ord(i) - u] == -1:\n            for j in range(26):\n                if ref[j] != 0 and j != ord(i) - u:\n                    S[ord(i) - u] = j\n                    a = helper(S, j)\n                    if a != -1 and a != 26:\n                        continue\n                    else:\n                        ref[j] = 0\n                        break\n    Sa = ''\n    for i in A:\n        Sa += chr(S[ord(i) - u] + u)\n    print(Sa)", "def fnd(x, fa):\n    if x != fa[x]:\n        fa[x] = fnd(fa[x], fa)\n    return fa[x]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    e = []\n    fa = []\n    val = []\n    st = []\n    res = ''\n    for i in range(26):\n        fa.append(i)\n        val.append(i)\n        st.append(False)\n        e.append(1)\n    for i in s:\n        ch = ord(i) - 97\n        if val[ch] == ch:\n            for j in range(26):\n                if st[j]:\n                    continue\n                pa = fnd(j, fa)\n                pb = fnd(ch, fa)\n                if pa != pb or e[pa] == 26:\n                    fa[pa] = pb\n                    e[pb] += e[pa]\n                    st[j] = True\n                    val[ch] = j\n                    break\n            res += chr(val[ch] + 97)\n        else:\n            res += chr(val[ch] + 97)\n    print(res)", "tests = int(input())\nfor _ in range(tests):\n    length = int(input())\n    givenString = input()\n    edge = [-1] * 26\n    redge = [-1] * 26\n\n    def getPathEnd(c):\n        l = 0\n        cur = c\n        while edge[cur] != -1:\n            l += 1\n            cur = edge[cur]\n        return (cur, l)\n    vec = []\n    for c in givenString:\n        vec.append(ord(c) - ord('a'))\n    for i in range(length):\n        if edge[vec[i]] == -1:\n            for c in range(26):\n                if redge[c] == -1:\n                    (clast, len) = getPathEnd(c)\n                    if clast != vec[i] or len == 25:\n                        edge[vec[i]] = c\n                        redge[c] = vec[i]\n                        break\n        vec[i] = edge[vec[i]]\n    ans = ''\n    for i in range(length):\n        ans += chr(vec[i] + ord('a'))\n    print(ans)", "from collections import *\nfrom math import *\nfrom sys import *\n\ndef check(A, j):\n    cnt = 0\n    p = j\n    while p != -1:\n        cnt += 1\n        p = A[p]\n        if p == j:\n            return cnt\n    return -1\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = input()\n    B = [-1] * 26\n    C = [1] * 26\n    D = ''\n    for i in range(N):\n        if B[ord(A[i]) - 97] == -1:\n            for j in range(26):\n                if C[j] != 0 and j != ord(A[i]) - 97:\n                    B[ord(A[i]) - 97] = j\n                    z = check(B, j)\n                    if z != -1 and z != 26:\n                        continue\n                    else:\n                        C[j] = 0\n                        break\n        D += chr(B[ord(A[i]) - 97] + 97)\n    print(D)", "def is_connected(cycle_map, start, end):\n    target = start\n    while 1:\n        if not target in cycle_map:\n            return False\n        target = cycle_map[target]\n        if target == end:\n            return True\nfor _ in range(int(input())):\n    input()\n    s = list(map(ord, list(input())))\n    cycle_map = {}\n    t_map = {}\n    ss = []\n    [ss.append(x) for x in s if not x in ss]\n    pointed = set()\n    pointing = set()\n    for c in ss:\n        next = 97\n        while 1:\n            if c != next:\n                if not next in pointed:\n                    if not is_connected(cycle_map, next, c):\n                        break\n                    if len(pointing) == 25:\n                        break\n                    if not c in pointed:\n                        break\n            next += 1\n        cycle_map[c] = next\n        t_map[chr(c)] = chr(next)\n        pointed.add(next)\n        pointing.add(c)\n    print(''.join([chr(cycle_map[c]) for c in s]))", "import bisect\nimport heapq\nfrom collections import defaultdict, deque\nfrom email import header\nfrom functools import lru_cache\nfrom sys import stdin, stdout\nimport math\nimport sys\ninput = stdin.readline\n\ndef ii():\n    return int(input())\n\ndef lii():\n    return list(map(int, stdin.readline().split()))\n\ndef ss():\n    x = stdin.readline()\n    if x[-1] == '\\n':\n        return x[:-1]\n    return x\n\ndef lss():\n    return list(map(str, stdin.readline().split()))\n\ndef llss():\n    return [i for i in ss()]\n\ndef yes():\n    stdout.write('YES\\n')\n\ndef no():\n    stdout.write('NO\\n')\nfor _ in range(ii()):\n    n = ii()\n    t = llss()\n    inn = {}\n    out = {}\n    res = []\n    asc = 'abcdefghijklmnopqrstuvwxyz'\n    for i in asc:\n        out[i] = False\n        inn[i] = False\n    cnt = 0\n\n    def path(x):\n        visited = set()\n        while out[x] != False:\n            if x in visited:\n                return True\n            visited.add(x)\n            x = out[x]\n        return False\n    for i in t:\n        if out[i] != False:\n            res.append(out[i])\n            continue\n        for j in asc:\n            if inn[j] == False and j != i:\n                inn[j] = i\n                out[i] = j\n                if path(j):\n                    if cnt == 25:\n                        cnt += 1\n                        res.append(j)\n                        break\n                    else:\n                        inn[j] = False\n                        out[i] = False\n                else:\n                    cnt += 1\n                    res.append(j)\n                    break\n    print(''.join(res))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    _str = input()\n    _s = set(range(26))\n    d1 = dict()\n    for j in range(n):\n        c = ord(_str[j]) - ord('a')\n        if c in d1.keys():\n            print(chr(d1[c] + ord('a')), end='')\n            continue\n        else:\n            min_value = min(_s)\n            temp = min_value\n            while temp in d1.keys():\n                temp = d1[temp]\n            if c == temp and len(_s) != 1:\n                d1[c] = min(_s - {min_value})\n            else:\n                d1[c] = min_value\n        print(chr(d1[c] + ord('a')), end='')\n        _s.remove(d1[c])\n    print()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    l1 = [chr(i) for i in range(97, 123)]\n    l2 = [None for i in range(26)]\n    d = dict(zip(l1, l2))\n    done = ''\n    already = ''\n    for i in range(n):\n        if d[s[i]] == None:\n            for j in l1:\n                if j not in done and j != s[i] and (d[j] != s[i]):\n                    d[s[i]] = j\n                    k = s[i]\n                    loop = 0\n                    cp = 1\n                    while loop < 26:\n                        k = d[k]\n                        loop += 1\n                        if d[k] == s[i]:\n                            d[s[i]] = None\n                            cp = 0\n                            break\n                        elif d[k] == None:\n                            done += j\n                            break\n                    if loop == 25:\n                        d[s[i]] = j\n                        break\n                    if cp == 1:\n                        break\n    ans = ''\n    for i in range(n):\n        ans += d[s[i]]\n    print(ans)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    t = input()\n    d = defaultdict(lambda : '')\n    mp = defaultdict(lambda : False)\n    ne = 0\n    ref = 'abcdefghijklmnopqrstuvwxyz'\n    ans = ''\n    for x in t:\n        if d[x]:\n            ans += d[x]\n        else:\n            for ch in ref:\n                if ch != x and (not mp[ch]):\n                    d[x] = ch\n                    ne += 1\n                    tmp = x\n                    for j in range(26):\n                        tmp = d[tmp]\n                        if not tmp:\n                            break\n                    if tmp == '' or ne == 26:\n                        mp[ch] = True\n                        ans += ch\n                        break\n                    else:\n                        d[x] = ''\n                        ne -= 1\n    print(ans)", "def solve():\n    n = int(input())\n    s = input()\n    current_min = 'a'\n    mapping = {}\n    left_used = set()\n    ans = []\n\n    def next_of(x):\n        if x == 'z':\n            return 'a'\n        return chr(ord(x) + 1)\n\n    def connected(start, end):\n        count = 0\n        node = start\n        while node in mapping and node != end:\n            count += 1\n            node = mapping[node]\n        if count == 25:\n            return False\n        return node == end\n    for i in s:\n        if i in mapping:\n            ans.append(mapping[i])\n            continue\n        temp_min = current_min\n        while temp_min == i or temp_min in left_used or connected(temp_min, i):\n            temp_min = next_of(temp_min)\n        left_used.add(temp_min)\n        mapping[i] = temp_min\n        ans.append(temp_min)\n    return ''.join(ans)\nt = int(input())\nwhile t:\n    print(solve())\n    t -= 1", "N = int(input())\n\ndef p(dp, q, level=0):\n    if level == 26:\n        return (q, 26)\n    if q not in dp:\n        return (q, level)\n    return p(dp, dp[q], level + 1)\nfor _ in range(N):\n    dp = {}\n    dp_r = {}\n    Q = 'abcdefghijklmnopqrstuvwxyz'\n    n = int(input())\n    A = input().strip('\\r\\n')\n    ans = []\n    for v in A:\n        if v in dp_r:\n            ans.append(dp_r[v])\n            continue\n        for i in Q:\n            if i not in dp and i != v:\n                (P, D) = p(dp, v, 0)\n                if P == i and D < 25:\n                    continue\n                dp[i] = v\n                dp_r[v] = i\n                ans.append(dp_r[v])\n                break\n    print(''.join(ans))", "alpha = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\ndef opp(ar, j):\n    c = 0\n    p = j\n    while p != -1:\n        c += 1\n        p = ar[p]\n        if p == j:\n            return c\n    return -1\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ar = [-1] * 26\n    ref = [1] * 26\n    for i in range(n):\n        b = alpha.index(s[i])\n        if ar[b] == -1:\n            for j in range(26):\n                if ref[j] != 0 and j != b:\n                    ar[b] = j\n                    z = opp(ar, j)\n                    if z != -1 and z != 26:\n                        continue\n                    else:\n                        ref[j] = 0\n                        break\n        print(str(alpha[ar[b]]), end='')\n    print()", "t = int(input())\nresults = []\nalph = 'abcdefghijklmnopqrstuvwxyz'\n\ndef circle(sdvig: dict, letter, curr):\n    sdvig[letter] = alph[curr]\n    next = letter\n    i = 0\n    while i != 25:\n        next = sdvig.get(next)\n        if next == None:\n            return False\n        if next == letter:\n            return True\n        i += 1\n    sdvig[letter] = None\n    return False\nfor _ in range(t):\n    res = ''\n    used = set()\n    n = int(input())\n    s = input()\n    sdvig = dict()\n    for letter in s:\n        if sdvig.get(letter) == None:\n            curr = 0\n            while letter == alph[curr] or alph[curr] in used or circle(sdvig, letter, curr):\n                curr += 1\n            sdvig[letter] = alph[curr]\n            used.add(alph[curr])\n            res = res + sdvig[letter]\n        else:\n            res = res + sdvig[letter]\n    results.append(res)\nlist(map(print, results))", "t = eval(input())\n\ndef f(x):\n    if x not in k:\n        return x\n    else:\n        return f(k[x])\nfor i in range(t):\n    n = eval(input())\n    s = input()\n    k = {}\n    a = 0\n    k1 = [0] * 26\n    ans = []\n    p = 26\n    for i in s:\n        if i not in k:\n            p -= 1\n            for j in range(26):\n                if k1[j] != 1 and i != chr(j + 97):\n                    if chr(j + 97) in k:\n                        if p == 0:\n                            k[i] = chr(j + 97)\n                            k1[j] = 1\n                            break\n                        if i != f(chr(j + 97)):\n                            k[i] = chr(j + 97)\n                            k1[j] = 1\n                            break\n                    else:\n                        k[i] = chr(j + 97)\n                        k1[j] = 1\n                        break\n    for i in s:\n        ans.append(k[i])\n    for i in ans:\n        print(i, end='')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    t = input()\n    used = set()\n    mapping = {}\n\n    def has(l, c):\n        while l in mapping:\n            l = mapping[l]\n            if l == c:\n                return True\n        return False\n    for c in t:\n        if c in mapping:\n            continue\n        for i in range(26):\n            l = chr(i + ord('a'))\n            if l in used or l == c or (l in mapping and has(l, c) and (len(mapping) < 25)):\n                continue\n            mapping[c] = l\n            used.add(l)\n            break\n    print(''.join((mapping[c] for c in t)))", "for _ in range(int(input())):\n    n = int(input())\n    a = [*input()]\n    counter = 0\n    alpha = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    set1 = set()\n    set2 = set()\n    k = {}\n    for i in a:\n        if k.get(i, -1) == -1:\n            al2 = alpha.copy()\n            if i in al2:\n                al2.remove(i)\n            flag = True\n            while flag == True:\n                m = min(al2)\n                count = 0\n                z = m\n                while count != 26 or z != i:\n                    if k.get(z, -1) == -1:\n                        flag = False\n                        break\n                    else:\n                        z = k[z]\n                        count += 1\n                        if count == 25:\n                            flag = False\n                            break\n                        if z == i:\n                            flag = True\n                            break\n                if flag == True:\n                    al2.remove(m)\n                    m = min(al2)\n            k[i] = m\n            alpha.remove(m)\n    for i in a:\n        print(k[i], end='')\n    print()", "t = int(input())\nfor case in range(t):\n    n = int(input())\n    s = input()\n    cyc = [-1] * 26\n    rcyc = [-1] * 26\n    count = 0\n    out = []\n    for c in s:\n        v = ord(c) - 97\n        if cyc[v] != -1:\n            out.append(chr(97 + cyc[v]))\n            continue\n        bad = [False] * 26\n        if count < 25:\n            u = v\n            while u != -1:\n                bad[u] = True\n                u = rcyc[u]\n        count += 1\n        for i in range(26):\n            if rcyc[i] == -1 and (not bad[i]):\n                cyc[v] = i\n                rcyc[i] = v\n                break\n        out.append(chr(97 + cyc[v]))\n    print(''.join(out))", "def solve(arr, n):\n    ctr = 0\n    k = n\n    while k != -1:\n        ctr += 1\n        k = arr[k]\n        if k == n:\n            return ctr\n    return -1\nfor _ in range(int(input())):\n    n = int(input())\n    string = input()\n    alpha = [-1 for i in range(26)]\n    arr = [1 for i in range(26)]\n    for i in range(n):\n        if alpha[ord(string[i]) - ord('a')] == -1:\n            for j in range(26):\n                if arr[j] != 0 and j != ord(string[i]) - ord('a'):\n                    alpha[ord(string[i]) - ord('a')] = j\n                    bb = solve(alpha, j)\n                    if bb != -1 and bb != 26:\n                        continue\n                    else:\n                        arr[j] = 0\n                        break\n        print(chr(alpha[ord(string[i]) - ord('a')] + ord('a')), end='')\n    print()", "def check(c):\n    cnt = 0\n    while c in mp:\n        cnt += 1\n        c = mp[c]\n        if cnt > 26:\n            return False\n    return True\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input().strip()\n    mp = {}\n    used = set()\n    res = ''\n    for ch in s:\n        if ch not in mp:\n            if len(mp) == 25:\n                for i in range(ord('a'), ord('z') + 1):\n                    c = chr(i)\n                    if c not in used:\n                        mp[ch] = c\n                        break\n            else:\n                for i in range(ord('a'), ord('z') + 1):\n                    c = chr(i)\n                    if c != ch and c not in used:\n                        mp[ch] = c\n                        if check(c):\n                            used.add(c)\n                            break\n                        else:\n                            mp.pop(ch)\n        res += mp[ch]\n    print(res)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    S = input()\n    cir = [-1] * 26\n    lis = [1] * 26\n    for i in S:\n        if cir[ord(i) - ord('a')] == -1:\n            for j in range(26):\n                if lis[j] != 0 and j != ord(i) - ord('a'):\n                    cir[ord(i) - ord('a')] = j\n                    count = 0\n                    temp = j\n                    flag = 1\n                    while temp != -1:\n                        count += 1\n                        temp = cir[temp]\n                        if temp == j:\n                            flag = 0\n                            break\n                    if flag:\n                        count = -1\n                    if count != -1 and count != -1:\n                        continue\n                    else:\n                        lis[j] = 0\n                        break\n        print(chr(cir[ord(i) - ord('a')] + ord('a')), end='')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    t = input()\n    used = set()\n    mapping = {}\n\n    def has(l, c):\n        while l in mapping:\n            l = mapping[l]\n            if l == c:\n                return True\n        return False\n    for c in t:\n        if c in mapping:\n            continue\n        for i in range(26):\n            l = chr(i + ord('a'))\n            if l in used or l == c or (l in mapping and has(l, c) and (len(mapping) < 25)):\n                continue\n            mapping[c] = l\n            used.add(l)\n            break\n    print(''.join((mapping[c] for c in t)))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    seq = {}\n    ispresent = {}\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    canwetake = {}\n    for i in alpha:\n        seq.setdefault(i, -1)\n        ispresent.setdefault(i, -1)\n        canwetake.setdefault(i, 1)\n    count = 0\n    ans = ''\n    for i in range(n):\n        if seq[s[i]] == -1:\n            for j in alpha:\n                if s[i] != j and ispresent[j] == -1:\n                    ref = j\n                    if count == 25:\n                        seq[s[i]] = j\n                        break\n                    isjpresent = -1\n                    while seq[ref] != -1:\n                        if s[i] == seq[ref]:\n                            isjpresent = 1\n                            break\n                        ref = seq[ref]\n                    if isjpresent != 1:\n                        seq[s[i]] = j\n                        count += 1\n                        ispresent[j] = 1\n                        break\n        ans += seq[s[i]]\n    print(ans)", "import sys, threading\n\ndef main():\n\n    def dfs(lttr, visited):\n        (res, size) = (False, 0)\n        if lttr in visited:\n            return (True, len(visited))\n        else:\n            visited.add(lttr)\n            if lttr in graph:\n                (res, size) = res or dfs(graph[lttr], visited)\n        return (res, size)\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        word = input()\n        graph = {}\n        alphabet = [0] * 26\n        for lttr in word:\n            if lttr not in graph:\n                for (i, is_taken) in enumerate(alphabet):\n                    candidate_chr = chr(ord('a') + i)\n                    if is_taken == 0 and candidate_chr != lttr:\n                        graph[lttr] = candidate_chr\n                        alphabet[i] = 1\n                        (cycle_created, size) = dfs(lttr, set())\n                        if cycle_created == True and size < 26:\n                            graph.pop(lttr)\n                            alphabet[i] = 0\n                        else:\n                            break\n        ans = ''\n        for lttr in word:\n            ans += graph[lttr]\n        print(ans)\nthreading.stack_size(1 << 27)\nsys.setrecursionlimit(1 << 30)\nmain_thread = threading.Thread(target=main)\nmain_thread.start()\nmain_thread.join()", "def cq(out, i):\n    c = 1\n    k = out[i]\n    while 1 > 0:\n        if k == -1 or k == i:\n            break\n        else:\n            k = out[k]\n            c += 1\n    if c != 26 and k == i:\n        return 0\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    di = {}\n    out = [-1] * 26\n    s1 = ''\n    for x in s:\n        if x in di:\n            s1 = s1 + di[x]\n        else:\n            for i in range(26):\n                if i != ord(x) - 97 and out[i] == -1:\n                    out[i] = ord(x) - 97\n                    if cq(out, i) == 1:\n                        di[x] = chr(i + 97)\n                        s1 = s1 + di[x]\n                        break\n                    else:\n                        out[i] = -1\n    print(s1)", "def cq(out, i):\n    c = 1\n    k = out[i]\n    while 1 > 0:\n        if k == -1 or k == i:\n            break\n        else:\n            k = out[k]\n            c += 1\n    if c != 26 and k == i:\n        return 0\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    di = {}\n    out = [-1] * 26\n    s1 = ''\n    for x in s:\n        if x in di:\n            s1 = s1 + di[x]\n        else:\n            for i in range(26):\n                if i != ord(x) - 97 and out[i] == -1:\n                    out[i] = ord(x) - 97\n                    if cq(out, i) == 1:\n                        di[x] = chr(i + 97)\n                        s1 = s1 + di[x]\n                        break\n                    else:\n                        out[i] = -1\n    print(s1)", "for _ in range(int(input())):\n    n = int(input())\n    li = list(input())\n    di = {}\n    for i in range(26):\n        di[chr(i + 97)] = '0'\n    ans = ''\n    se = set()\n    for i in range(n):\n        x = li[i]\n        if di[x] != '0':\n            ans += di[x]\n            continue\n        for j in range(26):\n            bo = True\n            y = chr(j + 97)\n            if y in se:\n                continue\n            while y != '0':\n                if y == x and len(se) < 25:\n                    bo = False\n                    break\n                y = di[y]\n            if bo:\n                se.add(chr(j + 97))\n                ans += chr(j + 97)\n                di[x] = chr(j + 97)\n                break\n    print(ans)", "def cq(out, i):\n    c = 1\n    k = out[i]\n    while 1 > 0:\n        if k == -1 or k == i:\n            break\n        else:\n            k = out[k]\n            c += 1\n    if c != 26 and k == i:\n        return 0\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    di = {}\n    out = [-1] * 26\n    s1 = ''\n    for x in s:\n        if x in di:\n            s1 = s1 + di[x]\n        else:\n            for i in range(26):\n                if i != ord(x) - 97 and out[i] == -1:\n                    out[i] = ord(x) - 97\n                    if cq(out, i) == 1:\n                        di[x] = chr(i + 97)\n                        s1 = s1 + di[x]\n                        break\n                    else:\n                        out[i] = -1\n    print(s1)", "def cq(out, i):\n    c = 1\n    k = out[i]\n    while 1 > 0:\n        if k == -1 or k == i:\n            break\n        else:\n            k = out[k]\n            c += 1\n    if c != 26 and k == i:\n        return 0\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    di = {}\n    out = [-1] * 26\n    s1 = ''\n    for x in s:\n        if x in di:\n            s1 = s1 + di[x]\n        else:\n            for i in range(26):\n                if i != ord(x) - 97 and out[i] == -1:\n                    out[i] = ord(x) - 97\n                    if cq(out, i) == 1:\n                        di[x] = chr(i + 97)\n                        s1 = s1 + di[x]\n                        break\n                    else:\n                        out[i] = -1\n    print(s1)", "def cq(out, i):\n    c = 1\n    k = out[i]\n    while 1 > 0:\n        if k == -1 or k == i:\n            break\n        else:\n            k = out[k]\n            c += 1\n    if c != 26 and k == i:\n        return 0\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    di = {}\n    out = [-1] * 26\n    s1 = ''\n    for x in s:\n        if x in di:\n            s1 = s1 + di[x]\n        else:\n            for i in range(26):\n                if i != ord(x) - 97 and out[i] == -1:\n                    out[i] = ord(x) - 97\n                    if cq(out, i) == 1:\n                        di[x] = chr(i + 97)\n                        s1 = s1 + di[x]\n                        break\n                    else:\n                        out[i] = -1\n    print(s1)", "def cq(out, i):\n    c = 1\n    k = out[i]\n    while 1 > 0:\n        if k == -1 or k == i:\n            break\n        else:\n            k = out[k]\n            c += 1\n    if c != 26 and k == i:\n        return 0\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    di = {}\n    out = [-1] * 26\n    s1 = ''\n    for x in s:\n        if x in di:\n            s1 = s1 + di[x]\n        else:\n            for i in range(26):\n                if i != ord(x) - 97 and out[i] == -1:\n                    out[i] = ord(x) - 97\n                    if cq(out, i) == 1:\n                        di[x] = chr(i + 97)\n                        s1 = s1 + di[x]\n                        break\n                    else:\n                        out[i] = -1\n    print(s1)", "def cq(out, i):\n    c = 1\n    k = out[i]\n    while 1 > 0:\n        if k == -1 or k == i:\n            break\n        else:\n            k = out[k]\n            c += 1\n    if c != 26 and k == i:\n        return 0\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    di = {}\n    out = [-1] * 26\n    s1 = ''\n    for x in s:\n        if x in di:\n            s1 = s1 + di[x]\n        else:\n            for i in range(26):\n                if i != ord(x) - 97 and out[i] == -1:\n                    out[i] = ord(x) - 97\n                    if cq(out, i) == 1:\n                        di[x] = chr(i + 97)\n                        s1 = s1 + di[x]\n                        break\n                    else:\n                        out[i] = -1\n    print(s1)", "def cq(out, i):\n    c = 1\n    k = out[i]\n    while 1 > 0:\n        if k == -1 or k == i:\n            break\n        else:\n            k = out[k]\n            c += 1\n    if c != 26 and k == i:\n        return 0\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    di = {}\n    out = [-1] * 26\n    s1 = ''\n    for x in s:\n        if x in di:\n            s1 = s1 + di[x]\n        else:\n            for i in range(26):\n                if i != ord(x) - 97 and out[i] == -1:\n                    out[i] = ord(x) - 97\n                    if cq(out, i) == 1:\n                        di[x] = chr(i + 97)\n                        s1 = s1 + di[x]\n                        break\n                    else:\n                        out[i] = -1\n    print(s1)", "import math\nt = int(input())\nchars = [chr(x) for x in range(97, 97 + 26)]\nalp = [0] * 26\nalpi = [0] * 26\n\ndef getNo(x):\n    return ord(x) - 97\n\ndef checkCircle(x, y):\n    cnt = 1\n    init = y\n    while x != 0 and cnt < 26:\n        cnt += 1\n        x = alp[getNo(x)]\n        if y == x and cnt < 26:\n            return False\n    return True\nfor i in range(t):\n    n = int(input())\n    a = input()\n    alp = [0] * 26\n    alpi = [0] * 26\n    res = ''\n    for char in a:\n        if alp[getNo(char)] != 0:\n            res = res + alp[getNo(char)]\n        else:\n            for c in chars:\n                if c != char and alpi[getNo(c)] == 0 and checkCircle(c, char):\n                    res = res + c\n                    alp[getNo(char)] = c\n                    alpi[getNo(c)] = char\n                    break\n    print(res)", "def cq(out, i):\n    c = 1\n    k = out[i]\n    while 1 > 0:\n        if k == -1 or k == i:\n            break\n        else:\n            k = out[k]\n            c += 1\n    if c != 26 and k == i:\n        return 0\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    di = {}\n    out = [-1] * 26\n    s1 = ''\n    for x in s:\n        if x in di:\n            s1 = s1 + di[x]\n        else:\n            for i in range(26):\n                if i != ord(x) - 97 and out[i] == -1:\n                    out[i] = ord(x) - 97\n                    if cq(out, i) == 1:\n                        di[x] = chr(i + 97)\n                        s1 = s1 + di[x]\n                        break\n                    else:\n                        out[i] = -1\n    print(s1)", "t = int(input())\nfor test in range(t):\n    used = []\n    vin = []\n    vout = []\n    for i in range(123):\n        vin.append(0)\n        vout.append(0)\n    n = int(input())\n    a = list(input())\n    for c in range(n):\n        x = a[c]\n        if vout[ord(x)] != 0:\n            continue\n        for i in range(97, 123):\n            if chr(i) == x:\n                continue\n            if vin[i] != 0:\n                continue\n            curr = i\n            q = True\n            cyclength = 1\n            for j in range(30):\n                if vout[curr] == x:\n                    if cyclength != 25:\n                        q = False\n                if vout[curr] == 0:\n                    break\n                curr = ord(vout[curr])\n                cyclength += 1\n            if q:\n                vin[i] = x\n                vout[ord(x)] = chr(i)\n                break\n    res = ''\n    for c in range(n):\n        res += vout[ord(a[c])]\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    t = input()\n    a = 'abcdefghijklmnopqrstuvwxyz'\n    baap = {}\n    beta = {}\n    for i in range(n):\n        if t[i] in beta:\n            continue\n        j = 0\n        x = t[i]\n        ct = 0\n        while x in baap:\n            x = baap[x]\n            ct += 1\n        while a[j] in baap or a[j] == t[i] or (x == a[j] and ct != 25):\n            j = (j + 1) % 26\n        beta[t[i]] = a[j]\n        baap[a[j]] = t[i]\n    for i in t:\n        print(beta[i], end='')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    t = input()\n    a = 'abcdefghijklmnopqrstuvwxyz'\n    baap = {}\n    beta = {}\n    for i in range(n):\n        if t[i] in beta:\n            continue\n        j = 0\n        x = t[i]\n        ct = 0\n        while x in baap:\n            x = baap[x]\n            ct += 1\n        while a[j] in baap or a[j] == t[i] or (x == a[j] and ct != 25):\n            j = (j + 1) % 26\n        beta[t[i]] = a[j]\n        baap[a[j]] = t[i]\n    for i in t:\n        print(beta[i], end='')\n    print()", "from string import ascii_lowercase\n\ndef solve(n, s):\n    not_used = list(ascii_lowercase)\n    used = []\n    new_s = ''\n    for i in range(n):\n        if s[i] in s[:i]:\n            new_s += new_s[s.index(s[i])]\n        else:\n            if s[i] not in used:\n                if s[i] != not_used[0]:\n                    new_s += not_used.pop(0)\n                else:\n                    new_s += not_used.pop(1)\n            else:\n                k = 2\n                x = s[new_s.index(s[i])]\n                while x != not_used[0]:\n                    if x in used:\n                        x = s[new_s.index(x)]\n                    k += 1\n                    if k == 26:\n                        new_s += not_used.pop(0)\n                        break\n                else:\n                    new_s += not_used.pop(1)\n            used.append(new_s[-1])\n    return new_s\nt = int(input())\noutput = []\nfor i in range(t):\n    n = int(input())\n    s = input()\n    output.append(solve(n, s))\nfor o in output:\n    print(o)", "t = int(input())\nwhile t:\n    mp = {}\n    mem = {}\n    a = 'abcdefghijklmnopqrstuvwxyz'\n    val = 0\n    for i in a:\n        mp[i] = val\n        val += 1\n    parent = []\n    for i in range(len(a)):\n        parent.append(i)\n    st = set()\n\n    def getparent(val):\n        if parent[val] == val:\n            return val\n        parent[val] = getparent(parent[val])\n        return parent[val]\n\n    def getval(char):\n        if mem.get(char, '-') != '-':\n            return mem[char]\n        aparent = getparent(mp[char])\n        for i in a:\n            bparent = getparent(mp[i])\n            if aparent != bparent and i not in st:\n                st.add(i)\n                parent[aparent] = bparent\n                return i\n        for i in a:\n            if i not in st:\n                st.add(i)\n                return i\n        return '-'\n    t -= 1\n    n = int(input())\n    s = input()\n    ans = ''\n    for i in range(len(s)):\n        mem[s[i]] = getval(s[i])\n        ans += mem[s[i]]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    m = {}\n    t = ''\n    for c in s:\n        if c not in m.keys():\n            for i in range(26):\n                x = chr(i + ord('a'))\n                if x == c or x in m.values():\n                    continue\n                while x in m.keys() and m[x] != c:\n                    x = m[x]\n                if x not in m.keys():\n                    m[c] = chr(i + ord('a'))\n                    break\n                if len(m) == 25:\n                    m[c] = chr(i + ord('a'))\n                    break\n        t += m[c]\n    print(t)", "import sys\nimport math\nline_num = 1\nfor line in sys.stdin:\n    if line_num == 1 or line_num % 2 == 0:\n        line_num += 1\n        continue\n    string = line.strip()\n    next = [''] * 26\n    prev = [''] * 26\n    res = []\n    for ch in string:\n        index = ord(ch) - ord('a')\n        if next[index] != '':\n            res.append(next[index])\n        else:\n            dontChoose = set()\n            ptr = index\n            dontChoose.add(index)\n            while prev[ptr] != '':\n                dontChoose.add(ord(prev[ptr]) - 97)\n                ptr = ord(prev[ptr]) - 97\n            for elem in next:\n                if elem != '':\n                    dontChoose.add(ord(elem) - 97)\n            i = 0\n            while i == index or i in dontChoose:\n                i += 1\n            if len(dontChoose) == 26:\n                i = ptr\n            res.append(chr(i + 97))\n            next[index] = chr(i + 97)\n            prev[i] = chr(index + 97)\n    print(''.join(res))\n    line_num += 1", "import sys\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\n\nclass DisjointSet:\n\n    def __init__(self, n):\n        self.parent = [_ for _ in range(n + 1)]\n\n    def find(self, s):\n        if self.parent[s] == s:\n            return s\n        self.parent[s] = self.find(self.parent[s])\n        return self.parent[s]\n\n    def merge(self, x, y):\n        x_set = self.find(x)\n        y_set = self.find(y)\n        self.parent[x] = y_set\n\ndef f(x):\n    return ord(x) - 97\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(f, input()[:n]))\n    DS = DisjointSet(26)\n    c = {}\n    for i in s:\n        if i in c:\n            continue\n        for j in range(26):\n            if i != j and DS.find(j) == j and (DS.find(i) != j):\n                c[i] = j\n                DS.merge(j, i)\n                break\n        else:\n            p = 0\n            for papa in range(26):\n                if DS.find(papa) == papa:\n                    p = papa\n                    break\n            c[i] = p\n    for i in s:\n        print(chr(c[i] + 97), end='')\n    print()", "pre = [-1 for i in range(0, 30)]\nto = [-1 for i in range(0, 30)]\n\ndef check(si, t):\n    if pre[t] != -1:\n        return pre[t] == si\n    if to[si] != -1:\n        return to[si] == t\n    tmp = si\n    cnt = 0\n    while pre[tmp] != -1:\n        tmp = pre[tmp]\n        cnt += 1\n    if tmp == t and cnt != 25:\n        return False\n    to[si] = t\n    pre[t] = si\n    return True\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    k = input()\n    s = []\n    for i in range(0, n):\n        s.append(ord(k[i]) - ord('a'))\n    for i in range(0, 30):\n        pre[i] = to[i] = -1\n    ans = []\n    for i in range(0, n):\n        for j in range(0, 26):\n            if check(s[i], j):\n                ans.append(chr(j + 97))\n    for i in range(0, len(ans)):\n        print(ans[i], end='')\n    print()", "from string import ascii_lowercase\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    not_used = list(ascii_lowercase)\n    used = []\n    new_s = ''\n    for i in range(n):\n        if s[i] in s[:i]:\n            new_s += new_s[s.index(s[i])]\n        else:\n            if s[i] not in used:\n                if s[i] != not_used[0]:\n                    new_s += not_used.pop(0)\n                else:\n                    new_s += not_used.pop(1)\n            else:\n                k = 2\n                x = s[new_s.index(s[i])]\n                while x != not_used[0]:\n                    if x in used:\n                        x = s[new_s.index(x)]\n                    k += 1\n                    if k == 26:\n                        new_s += not_used.pop(0)\n                        break\n                else:\n                    new_s += not_used.pop(1)\n            used.append(new_s[-1])\n    print(new_s)"]