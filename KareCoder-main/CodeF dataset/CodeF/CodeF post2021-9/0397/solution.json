["import sys\nfrom math import sqrt, ceil, floor, gcd\nfrom collections import Counter, defaultdict\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\n\ndef int_arr():\n    return list(map(int, input().split()))\n\ndef str_arr():\n    return list(map(str, input().split()))\n\ndef get_str():\n    return map(str, input().split())\n\ndef get_int():\n    return map(int, input().split())\n\ndef get_flo():\n    return map(float, input().split())\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    ls = int_arr()\n    l = []\n    c = 0\n    ans = 0\n    for i in range(n):\n        l.append(c)\n        if ls[i] < i + 1:\n            c += 1\n            if ls[i] != 0:\n                ans += l[ls[i] - 1]\n    print(ans)\nT = 1\nT = int(input())\nwhile T:\n    solve()\n    T -= 1", "def getint():\n    return [int(i) for i in input().split()]\n\ndef get():\n    return int(input())\n\ndef getstr():\n    return [i for i in input().split()]\n\ndef S():\n    for test in range(int(input())):\n        solve()\nimport math\nimport itertools as it\nimport bisect\nimport time\nimport collections as ct\n\ndef lower_bound(a, x):\n    l = -1\n    r = len(a)\n    while l + 1 != r:\n        mid = l + r >> 1\n        if a[mid] < x:\n            l = mid\n        else:\n            r = mid\n    return r\n\ndef upper_bound(a, x):\n    l = -1\n    r = len(a)\n    while l + 1 != r:\n        mid = l + r >> 1\n        if a[mid] <= x:\n            l = mid\n        else:\n            r = mid\n    return r\n\ndef solve():\n    n = get()\n    a = [0] + getint()\n    ans = 0\n    cnt = [0] * (n + 5)\n    for i in range(1, n + 1):\n        cnt[i] = cnt[i - 1]\n        if a[i] < i:\n            cnt[i] += 1\n            ans += cnt[a[i] - 1]\n    print(ans)\nS()", "def solve(n, a):\n    b = [0] * n\n    result = 0\n    current_qualifying = 0\n    for k in range(n):\n        if a[k] < k + 1:\n            if a[k] - 2 >= 0:\n                result += b[a[k] - 2]\n            current_qualifying += 1\n        b[k] = current_qualifying\n    return result\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(component) for component in input().split(' ')]\n    print(solve(n, a))", "t = int(input())\nfor i in range(t):\n    toto = 0\n    n = int(input())\n    array = list(map(int, input().split()))\n    cumulatif = [0] * (n + 5)\n    for i in range(n):\n        if array[i] < i + 1:\n            cumulatif[i + 1] = cumulatif[i] + 1\n            toto += cumulatif[array[i] - 1]\n        else:\n            cumulatif[i + 1] = cumulatif[i]\n    print(toto)", "for w in range(0, int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    sums = [0] * n\n    s = 0\n    count = 0\n    for i in range(n):\n        v = arr[i]\n        if v < i + 1:\n            s += 1\n            if v > 1:\n                count += sums[v - 2]\n        sums[i] = s\n    print(count)", "t = int(input())\n\ndef solve():\n    n = int(input())\n    lst = list(map(int, input().split()))\n    pairs_found = 0\n    dp = [0] * n\n    dp[0] = 1 if lst[0] < 1 else 0\n    for i in range(1, n):\n        if lst[i] < i + 1:\n            dp[i] = dp[i - 1] + 1\n        else:\n            dp[i] = dp[i - 1]\n    for j in range(n - 1, -1, -1):\n        if lst[j] < j + 1 and lst[j] - 2 >= 0:\n            pairs_found += dp[lst[j] - 2]\n    print(pairs_found)\nwhile t:\n    solve()\n    t -= 1", "def test_case(nums):\n    n = len(nums)\n    nums = [-1] + nums\n    less_than_index = [0] * len(nums)\n    for (index, num) in enumerate(nums):\n        if index == 0:\n            continue\n        if index == 1:\n            if num < index:\n                less_than_index[index] = 1\n            continue\n        less_than_index[index] = less_than_index[index - 1] + (1 if num < index else 0)\n    count_pairs = 0\n    for (index, num) in enumerate(nums):\n        if index == 0:\n            continue\n        if num < index:\n            if num - 1 >= 1 and num - 1 <= n:\n                count_pairs += less_than_index[num - 1]\n    return count_pairs\nnum_case = int(input())\nfor case in range(num_case):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    print(test_case(nums))", "for _ in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    l = []\n    c = 0\n    ans = 0\n    for i in range(len(ls)):\n        l.append(c)\n        if ls[i] < i + 1:\n            c += 1\n            if ls[i] != 0:\n                ans += l[ls[i] - 1]\n    print(ans)", "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    cnt = [0]\n    for i in range(n):\n        if arr[i] < i + 1:\n            cnt += [cnt[-1] + 1]\n        else:\n            cnt += [cnt[-1]]\n    ans = 0\n    for i in range(n):\n        if 0 < arr[i] < i + 1:\n            ans += cnt[arr[i] - 1]\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "def ineq(n, a):\n    ans = 0\n    a = [0] + a\n    s = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if a[i] < i:\n            s[i] = s[i - 1] + 1\n        else:\n            s[i] = s[i - 1]\n        if a[i] < i:\n            ans += s[max(0, a[i] - 1)]\n    return ans\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(ineq(n, a))", "import sys\ninput = sys.stdin.readline\nfrom bisect import bisect_left\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    really_a = []\n    answer = 0\n    for (i, v) in enumerate(a, 1):\n        if v < i:\n            answer += bisect_left(really_a, v)\n            really_a.append(i)\n    print(answer)", "import itertools\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    u = list(itertools.accumulate((x <= i for (i, x) in enumerate(a))))\n    print(sum((u[min(x - 2, n - 1)] for (i, x) in enumerate(a) if 2 <= x <= i)))", "def resi():\n    n = int(input())\n    a = list(map(int, input().split()))\n    br = [0] * n\n    kandidat = [0] * n\n    if 1 > a[0]:\n        br[0] = 1\n        kandidat[0] = 1\n    for i in range(1, n):\n        br[i] = br[i - 1]\n        if i + 1 > a[i]:\n            br[i] += 1\n            kandidat[i] = 1\n    iz = 0\n    for i in range(n):\n        if not kandidat[i]:\n            continue\n        if a[i] - 2 >= 0:\n            iz += br[a[i] - 2]\n    print(iz)\nfor _ in range(int(input())):\n    resi()", "from collections import Counter\nimport math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    dp = [0] * n\n    pairs = 0\n    seen = {}\n    for i in range(n):\n        if a[i] < i + 1:\n            if i == 0:\n                dp[0] += 1\n            elif a[i] > 1:\n                pairs += dp[a[i] - 2]\n            dp[i] = dp[i - 1] + 1\n        else:\n            dp[i] = dp[i - 1]\n    print(pairs)", "from bisect import bisect_left\nfor _ in range(int(input())):\n    n = int(input())\n    count = 0\n    indexes = []\n    for (i, a) in enumerate(map(int, input().split()), 1):\n        if a < i:\n            count += bisect_left(indexes, a)\n            indexes.append(i)\n    print(count)", "import itertools\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    u = list(itertools.accumulate((x <= i for (i, x) in enumerate(a))))\n    total = 0\n    for (i, x) in enumerate(a):\n        if x <= i and x >= 2:\n            total += u[min(x - 2, n - 1)]\n    print(total)", "from bisect import bisect_left\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    answer = 0\n    indexes = []\n    for (i, a) in enumerate(arr, 1):\n        if a < i:\n            answer += bisect_left(indexes, a)\n            indexes.append(i)\n    print(answer)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = [-1] + a\n    l = [0] * (n + 1)\n    ans = 0\n    for i in range(1, n + 1):\n        if a[i] < i:\n            l[i] += l[i - 1] + 1\n            if a[i] > 0:\n                ans += l[a[i] - 1]\n        else:\n            l[i] = l[i - 1]\n    print(ans)", "def main():\n    for t in range(int(input())):\n        n = int(input())\n        a = [0] + list(map(int, input().split()))\n        c = [0 for i in range(n + 1)]\n        for i in range(1, n + 1):\n            if a[i] < i:\n                c[i] = 1\n        for i in range(1, n + 1):\n            c[i] += c[i - 1]\n        ans = 0\n        for i in range(1, n + 1):\n            if a[i] < i and a[i] - 1 > 0:\n                ans += c[a[i] - 1]\n        print(ans)\nmain()", "import sys\nfrom bisect import bisect_left as bl\ninp = sys.stdin.readline\nfor _ in range(int(inp())):\n    n = int(inp())\n    a = list(map(int, inp().split()))\n    b = []\n    count = 0\n    for i in range(n):\n        if a[i] < i + 1:\n            count += bl(b, a[i])\n            b.append(i + 1)\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    ai = list(map(int, input().split()))\n    dp = [0] * n\n    ans = 0\n    for i in range(0, n):\n        dp[i] = dp[i - 1]\n        if ai[i] < i + 1:\n            if ai[i] > 1:\n                ans += dp[ai[i] - 2]\n            dp[i] += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [0] + [int(i) for i in input().split(' ')]\n    kq = 0\n    b = [0] * (n + 1)\n    for i in range(1, n + 1):\n        b[i] = b[i - 1] + (a[i] < i)\n        if a[i] < i:\n            kq += b[max(0, a[i] - 1)]\n    print(kq)", "def count_pairs(n, arr):\n    res = 0\n    total = 0\n    next_min = [[i, 0] for i in range(n + 1)]\n    for (i, val) in enumerate(arr, 1):\n        if i > val:\n            total += 1\n            res += next_min[val - 1][1]\n        next_min[i] = [i, total]\n        if i > val:\n            pass\n    return res\nfor t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(count_pairs(n, arr))", "for _ in range(int(input())):\n    n = int(input())\n    ai = list(map(int, input().split()))\n    dp = [0] * n\n    ans = 0\n    for i in range(0, n):\n        dp[i] = dp[i - 1]\n        if ai[i] < i + 1:\n            if ai[i] > 1:\n                ans += dp[ai[i] - 2]\n            dp[i] += 1\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * n\n    c = [0] * n\n    for i in range(n):\n        if i:\n            c[i] = c[i - 1]\n        if a[i] <= i:\n            b[i] += 1\n            c[i] += 1\n    ans = 0\n    c = [0, 0] + c\n    for i in range(n):\n        if b[i]:\n            ans += c[a[i]]\n    print(ans)", "test = int(input())\nfor t in range(test):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    l = len(arr)\n    result = 0\n    dp = [0] * l\n    for i in range(l):\n        if i > 0:\n            dp[i] = dp[i - 1]\n        if arr[i] < i + 1:\n            dp[i] += 1\n            if 2 <= arr[i]:\n                result += dp[arr[i] - 2]\n    print(result)", "from itertools import count\nT = int(input())\nfor test in range(T):\n    N = int(input())\n    a = list(map(int, input().split()))\n    a.insert(0, 0)\n    is_Valid = [0] * (N + 1)\n    c = [0] * (N + 1)\n    count_val = 0\n    is_Valid[0] = c[0] = 0\n    for i in range(1, N + 1):\n        if i > a[i]:\n            count_val += 1\n            is_Valid[i] = 1\n        else:\n            is_Valid[i] = 0\n        c[i] = count_val\n    answer = 0\n    for i in range(1, N + 1):\n        if is_Valid[i] == 1:\n            if a[i] - 1 > 0:\n                answer += c[a[i] - 1]\n    print(answer)", "from bisect import bisect_left\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    indexes = []\n    ans = 0\n    for x in range(n):\n        if l[x] < x + 1:\n            ans += bisect_left(indexes, l[x])\n            indexes.append(x + 1)\n    print(ans)", "from bisect import bisect_left\n\ndef BinarySearch(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        m = (left + right) // 2\n        if arr[m] > target:\n            right = m\n        else:\n            left = m + 1\n    return left\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    indexes = []\n    ans = 0\n    for x in range(n):\n        if l[x] < x + 1:\n            ans += bisect_left(indexes, l[x])\n            indexes.append(x + 1)\n    print(ans)", "n_test_cases = int(input())\nfor i in range(n_test_cases):\n    n_array = int(input())\n    a = [0] + [int(item) for item in input().split(' ')]\n    results = 0\n    answers = [0] * (n_array + 1)\n    for i in range(1, n_array + 1):\n        answers[i] = answers[i - 1] + (a[i] < i)\n        if a[i] < i:\n            results += answers[max(0, a[i] - 1)]\n    print(results)", "for _ in range(int(input())):\n    n = int(input())\n    a = [0] + [int(i) for i in input().split(' ')]\n    kq = 0\n    b = [0] * (n + 1)\n    for i in range(1, n + 1):\n        b[i] = b[i - 1] + (a[i] < i)\n        if a[i] < i:\n            kq += b[max(0, a[i] - 1)]\n    print(kq)", "from bisect import bisect_left\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = [int(i) for i in input().split(' ')]\n    less = []\n    y = 0\n    for i in range(1, n + 1):\n        if s[i - 1] < i:\n            less += [i]\n            y += bisect_left(less, s[i - 1])\n    print(y)", "n = int(input())\nfor i in range(n):\n    nb = int(input())\n    entree = input().split(' ')\n    entree = [int(x) for x in entree]\n    cumu = [0] * (nb + 1)\n    sol = 0\n    for j in range(nb):\n        if entree[j] < j + 1:\n            sol += cumu[entree[j] - 1]\n            cumu[j + 1] += 1\n        cumu[j + 1] += cumu[j]\n    print(sol)", "for Homu in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    prefix = [0]\n    for i in range(n):\n        if a[i] < i + 1:\n            prefix.append(prefix[-1] + 1)\n        else:\n            prefix.append(prefix[-1])\n    ans = 0\n    for i in range(n):\n        if a[i] < i + 1 and a[i] > 0:\n            ans += prefix[a[i] - 1]\n    print(ans)", "from bisect import bisect_left\nfor _ in range(int(input())):\n    n = int(input())\n    count = 0\n    indexes = []\n    for (i, a) in enumerate(map(int, input().split()), 1):\n        if a < i:\n            count += bisect_left(indexes, a)\n            indexes.append(i)\n    print(count)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = 0\n    arr = list(map(int, input().split()))\n    ref = [0] * n\n    c = [0] * n\n    count = 0\n    for j in range(n):\n        if arr[j] < j + 1:\n            count += 1\n            ref[j] = 1\n        else:\n            ref[j] = 0\n        c[j] = count\n    for k in range(2, n):\n        if ref[k] == 1:\n            if arr[k] - 2 >= 0:\n                ans += c[arr[k] - 2]\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = 0\n    arr = list(map(int, input().split()))\n    ref = [0] * n\n    c = [0] * n\n    count = 0\n    for j in range(n):\n        if arr[j] < j + 1:\n            count += 1\n            ref[j] = 1\n        else:\n            ref[j] = 0\n        c[j] = count\n    for k in range(2, n):\n        if ref[k] == 1:\n            if arr[k] - 2 >= 0:\n                ans += c[arr[k] - 2]\n    print(ans)", "from bisect import bisect_left\nt = int(input())\nanswer = [0] * t\nfor j in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list()\n    for i in range(n):\n        if i + 1 > a[i]:\n            answer[j] += bisect_left(b, a[i])\n            b.append(i + 1)\nprint(*answer, sep='\\n')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [0 for i in range(n)]\n    if a[0] < 1:\n        b[0] = 1\n    else:\n        b[0] = 0\n    for i in range(n):\n        if a[i] < i + 1:\n            b[i] = b[i - 1] + 1\n        else:\n            b[i] = b[i - 1]\n    s = 0\n    for i in range(1, n):\n        if a[i] < i + 1 and a[i] > 1:\n            s += b[a[i] - 2]\n    print(s)", "for _ in range(int(input())):\n    n = int(input())\n    lst = [0] + [int(i) for i in input().split(' ')]\n    pre = [0] * (n + 1)\n    ans = 0\n    for i in range(1, n + 1):\n        pre[i] = pre[i - 1] + (lst[i] < i)\n        if lst[i] < i:\n            ans += pre[max(0, lst[i] - 1)]\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    arr1 = [0] * (n + 1)\n    lst = [True] * n\n    ans = 0\n    for i in range(n):\n        if arr[i] >= i + 1:\n            arr1[i + 1] = 1 + arr1[i]\n            lst[i] = False\n        else:\n            arr1[i + 1] = arr1[i]\n    for j in range(n):\n        if lst[j]:\n            if arr[j] > 0:\n                ans += arr[j] - 1 - arr1[arr[j] - 1]\n    print(ans)", "import bisect\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    arr = []\n    total = 0\n    for j in range(n):\n        if l[j] < j + 1:\n            total += bisect.bisect_left(arr, l[j])\n            arr.append(j + 1)\n    print(total)", "tasks = int(input())\nfor task in range(tasks):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    lows = [0] * n\n    (lowstotal, result) = (0, 0)\n    for i in range(n):\n        if a[i] < i + 1:\n            lowstotal += 1\n        lows[i] = lowstotal\n    for i in range(n):\n        if a[i] < i + 1 and a[i] - 2 >= 0:\n            result += lows[a[i] - 2]\n    print(result)", "def read_int() -> int:\n    return int(input().strip())\n\ndef read_ints_map() -> map:\n    return map(int, input().strip().split())\n\ndef read_ints_list() -> [int]:\n    return [*read_ints_map()]\ntry:\n    fin = open('./input.txt')\n    import sys\n    sys.stdin = fin\nexcept:\n    pass\nimport bisect\nt = read_int()\nfor _ in range(t):\n    n = read_int()\n    a = read_ints_list()\n    b = []\n    count = 0\n    for j in range(n):\n        if a[j] < j + 1:\n            count += bisect.bisect_left(b, a[j])\n            b.append(j + 1)\n    print(count)", "from sys import stdin\nfrom math import log, floor, ceil, gcd\nfrom bisect import bisect_left as bl, bisect_right as br\ninp = lambda : int(stdin.readline())\n\ndef ra(typ):\n    return list(map(typ, stdin.readline().split()))\n\ndef rv(typ):\n    return map(typ, stdin.readline().split())\n\ndef main():\n    for _ in range(inp()):\n        n = inp()\n        a = ra(int)\n        ele = []\n        ind = []\n        for i in range(n):\n            if i + 1 > a[i]:\n                ele.append(a[i])\n                ind.append(i + 1)\n        ans = 0\n        ele.sort()\n        l = len(ele)\n        for i in ind:\n            x = br(ele, i)\n            if x >= l:\n                break\n            ans += l - x\n        print(ans)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = [0] + [int(i) for i in input().split(' ')]\n    kq = 0\n    b = [0] * (n + 1)\n    for i in range(1, n + 1):\n        b[i] = b[i - 1] + (a[i] < i)\n        if a[i] < i:\n            kq += b[max(0, a[i] - 1)]\n    print(kq)", "for _ in range(int(input())):\n    n = int(input())\n    a = [0] + [int(i) for i in input().split(' ')]\n    kq = 0\n    b = [0] * (n + 1)\n    for i in range(1, n + 1):\n        b[i] = b[i - 1] + (a[i] < i)\n        if a[i] < i:\n            kq += b[max(0, a[i] - 1)]\n    print(kq)", "for _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    pre = [0 for i in range(n)]\n    if lst[0] < 1:\n        pre[0] = 1\n    for i in range(1, n):\n        if lst[i] < i + 1:\n            pre[i] = pre[i - 1] + 1\n        else:\n            pre[i] = pre[i - 1]\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        if lst[i] < i + 1 and lst[i] - 2 >= 0:\n            ans += pre[lst[i] - 2]\n    print(ans)", "T = int(input())\nfor _ in range(0, T):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    b = [0] * n\n    for i in range(0, n):\n        if a[i] < i + 1:\n            b[i] = 1\n    for i in range(1, n):\n        b[i] += b[i - 1]\n    ans = 0\n    for i in range(1, n):\n        if a[i] > i:\n            continue\n        x = a[i] - 2\n        if 0 <= x < n:\n            ans += b[x]\n    print(ans)", "import bisect\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    visi = set()\n    hvis = []\n    ntvis = 0\n    for i in range(n):\n        av = a[i]\n        if i + 1 <= av:\n            continue\n        hi = bisect.bisect_left(hvis, av)\n        ntvis += hi\n        hvis.append(i + 1)\n    print(ntvis)", "from bisect import bisect_left as bl\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    nums = []\n    for i in range(n):\n        if a[i] < i + 1:\n            ans += bl(nums, a[i])\n            nums.append(i + 1)\n    print(ans)", "from bisect import bisect_left\nfor _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    b = []\n    ans = 0\n    for i in range(n):\n        if a[i] < i + 1:\n            idx = bisect_left(b, a[i])\n            ans += idx\n            b.append(i + 1)\n    print(ans)", "from bisect import *\n\ndef miis():\n    return map(int, input().split())\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(miis())\n    have = []\n    ans = 0\n    for i in range(n):\n        if a[i] < i + 1:\n            ans += bisect_left(have, a[i])\n            have.append(i + 1)\n    print(ans)", "import bisect\nt = int(input())\nwhile t:\n    k = int(input())\n    l = list(map(int, input().split()))\n    s = []\n    for i in range(k):\n        if l[i] < i + 1:\n            s.append(i + 1)\n    check = 0\n    for i in s:\n        check += bisect.bisect_left(s, l[i - 1])\n    print(check)\n    t -= 1", "for t in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    res = [0] * (n + 3)\n    ans = 0\n    for i in range(1, n + 1):\n        if i > a[i - 1]:\n            ans += res[min(a[i - 1] - 1, n)]\n            res[i] = 1\n        res[i] += res[i - 1]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    smaller_until_now = 0\n    smaller = [0] * n\n    answer = 0\n    for i in range(1, n + 1):\n        if arr[i - 1] < i:\n            smaller_until_now += 1\n            if arr[i - 1] > 1 and smaller[arr[i - 1] - 2] > 0:\n                answer += smaller[arr[i - 1] - 2]\n        smaller[i - 1] = smaller_until_now\n    print(answer)", "from bisect import *\nfor _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    ans = int()\n    index = list()\n    for i in range(n):\n        if lis[i] < i + 1:\n            index.append(i + 1)\n            ans += bisect_left(index, lis[i])\n    print(ans)", "import math\nimport os\nimport collections\nimport sys\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    D = [0]\n    D += A\n    A = D[:]\n    B = [0] * (N + 1)\n    for i in range(1, N + 1):\n        if A[i] < i:\n            B[i] = 1\n    C = B[:]\n    ans = 0\n    for i in range(1, N + 1):\n        B[i] += B[i - 1]\n    for i in range(1, N + 1):\n        if C[i] > 0 and A[i] - 1 >= 0:\n            ans += B[A[i] - 1]\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    res = [0] * (n + 3)\n    ans = 0\n    for i in range(1, n + 1):\n        if i > a[i - 1]:\n            ans += res[min(a[i - 1] - 1, n)]\n            res[i] = 1\n        res[i] += res[i - 1]\n    print(ans)", "Test = int(input())\nfor _ in range(Test):\n    n = int(input())\n    a = list(map(int, input().split()))\n    summ = [0] * (n + 5)\n    for i in range(1, n + 1):\n        if a[i - 1] < i:\n            summ[i] = summ[i - 1] + 1\n        else:\n            summ[i] = summ[i - 1]\n    ans = 0\n    for j in range(1, n + 1):\n        if a[j - 1] < j:\n            ans += summ[min(n, a[j - 1] - 1)]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ps = []\n    if a[0] < 1:\n        ps.append(1)\n    else:\n        ps.append(0)\n    for i in range(1, n):\n        ps.append(ps[-1] + (a[i] < i + 1))\n    dp = [0 for _ in range(n)]\n    for i in range(1, n):\n        if a[i] < i + 1:\n            if a[i] - 2 >= 0:\n                dp[i] = ps[a[i] - 2]\n    print(sum(dp))", "from bisect import *\nfor i in range(int(input())):\n    N = int(input())\n    L = [0] + list(map(int, input().split()))\n    c = 0\n    arr = []\n    for i in range(1, N + 1):\n        if L[i] < i:\n            c += bisect_left(arr, L[i], 0, len(arr))\n            arr.append(i)\n    print(c)", "import math as mt\nfrom collections import defaultdict, deque\nfrom bisect import bisect_left as b_l\nfrom bisect import bisect_right as b_r\nimport sys\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    chk = []\n    ans = 0\n    for i in range(n):\n        if a[i] < i + 1:\n            ans += b_l(chk, a[i], 0, len(chk))\n            chk.append(i + 1)\n    print(ans)", "for t in range(int(input())):\n    (res, total) = (0, 0)\n    n = int(input())\n    arr = list(map(int, input().split()))\n    next_min = [[i, 0] for i in range(n + 1)]\n    for (i, val) in enumerate(arr, 1):\n        if i > val:\n            total += 1\n            res += next_min[val - 1][1]\n        next_min[i] = [i, total]\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = [0] * (n + 1)\n    for i in range(1, n + 1):\n        p[i] = p[i - 1]\n        if a[i - 1] < i:\n            p[i] += 1\n    s = 0\n    for j in range(2, n + 1):\n        if 0 < a[j - 1] < j:\n            s += p[a[j - 1] - 1]\n    print(s)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = []\n    for i in range(n):\n        if l[i] < i + 1:\n            l1.append(i + 1)\n    ans = 0\n    for i in l1:\n        ans += bisect.bisect_left(l1, l[i - 1])\n    print(ans)", "import sys\nimport math\nfrom itertools import combinations\niput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    dat = list(map(int, input().split()))\n    ind = [0] * n\n    if dat[0] == 0:\n        ind[0] = 1\n    ans = 0\n    for i in range(1, len(dat)):\n        if dat[i] < i + 1:\n            ind[i] = 1 + ind[i - 1]\n        else:\n            ind[i] = ind[i - 1]\n    for i in range(len(ind)):\n        if dat[i] == 1 or dat[i] == 0:\n            continue\n        if dat[i] < i + 1:\n            ans += ind[dat[i] - 2]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [-float('inf')] + [int(s) for s in input().split()]\n    pref = [0] * (n + 1)\n    less = [0] * (n + 1)\n    for i in range(1, n + 1):\n        pref[i] = pref[i - 1]\n        if a[i] < i:\n            less[i] = 1\n            pref[i] += 1\n    ans = 0\n    for j in range(2, n + 1):\n        if less[j] and a[j] - 1 > -1:\n            ans += pref[a[j] - 1]\n    print(ans)", "import sys\nfrom bisect import bisect_left\nT = int(sys.stdin.readline())\nfor t in range(T):\n    n = int(sys.stdin.readline())\n    a = [0] + list(map(int, sys.stdin.readline().split()))\n    answer = 0\n    i = []\n    for j in range(len(a)):\n        if a[j] >= j:\n            continue\n        i.append(j)\n        x = bisect_left(i, a[j] - 1)\n        if i[x] >= a[j]:\n            answer += x\n        else:\n            answer += x + 1\n    print(answer)", "from bisect import bisect_left as bsl\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    l = []\n    for i in range(n):\n        if a[i] < i + 1:\n            l.append(i + 1)\n    for j in range(n):\n        if a[j] < j + 1:\n            ans += bsl(l, a[j])\n    print(ans)", "z = lambda : map(int, input().split())\n(t,) = z()\nfor _ in '_' * t:\n    (n,) = z()\n    a = [*z()]\n    tm = [0] * (n + 1)\n    c = 0\n    cnt = 0\n    for i in range(n):\n        if a[i] < i + 1:\n            c += 1\n            tm[i + 1] = c\n            cnt += max(0, tm[a[i]] - 1 * (tm[a[i]] != tm[a[i] - 1]))\n        else:\n            tm[i + 1] = c\n    print(cnt)", "from bisect import bisect_left\nfor i in range(int(input())):\n    s = int(input())\n    lst = list(map(int, input().split()))\n    l = []\n    ans = 0\n    for j in range(s):\n        if lst[j] < j + 1:\n            l.append(j + 1)\n    for k in range(s):\n        if lst[k] < k + 1:\n            ans += bisect_left(l, lst[k])\n    print(ans)", "from bisect import bisect_left\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    ans = 0\n    D = []\n    for i in range(n):\n        if A[i] < i + 1:\n            if len(D) > 0:\n                idx = bisect_left(D, A[i])\n                ans += idx\n            D.append(i + 1)\n    print(ans)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    (l1, l2) = ([], [])\n    for (x, y) in enumerate(a):\n        if y < x + 1:\n            l1 += [x + 1]\n            l2 += [y]\n    res = 0\n    for k in l2:\n        res += bisect.bisect_left(l1, k)\n    print(res)", "from bisect import bisect_left\nx = int(input().strip(' '))\nfor i in range(x):\n    n = int(input().strip(' '))\n    farray = input().split(' ')\n    n = 0\n    l = []\n    l2 = []\n    for i in range(len(farray)):\n        farray[i] = int(farray[i])\n        if farray[i] < i + 1:\n            n += bisect_left(l, farray[i])\n            l.append(i + 1)\n            l2.append(farray[i])\n    print(n)", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    c = [0] * n\n    p = [0] * n\n    res = 0\n    for i in range(n):\n        if a[i] < i + 1:\n            b.append(a[i])\n            c[i] = 1\n    for i in range(n):\n        if i == 0:\n            p[i] = c[i]\n        else:\n            p[i] = p[i - 1] + c[i]\n    for i in range(n - 1, 0, -1):\n        if c[i] == 1 and a[i] >= 2:\n            res += p[a[i] - 2]\n    print(res)", "from collections import defaultdict as df\nimport bisect\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ind = []\n    diff = []\n    for i in range(n):\n        if a[i] < i + 1:\n            ind.append(i + 1)\n    m = len(ind)\n    ans = 0\n    for i in range(m):\n        xx = bisect.bisect_left(ind, a[ind[i] - 1])\n        if xx == 0:\n            continue\n        else:\n            ans += xx\n    print(ans)", "import math\nimport os\nimport collections\nimport sys\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = [0] + list(map(int, input().split()))\n    B = [0] * (N + 1)\n    for i in range(1, N + 1):\n        if A[i] < i:\n            B[i] = 1\n    C = B[:]\n    for i in range(1, N + 1):\n        B[i] += B[i - 1]\n    ans = 0\n    for i in range(1, N + 1):\n        if C[i] > 0 and A[i] - 1 >= 0:\n            ans += B[A[i] - 1]\n    print(ans)", "for loop in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    l = []\n    count = 0\n    x = 0\n    import bisect\n    for i in range(n):\n        if a[i] >= i + 1:\n            continue\n        x = bisect.bisect_left(l, a[i], 0, len(l))\n        count += x\n        l.append(i + 1)\n    print(count)", "from bisect import bisect_left\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    mp1 = []\n    ans = 0\n    for i in range(n):\n        if a[i] < i + 1:\n            mp1.append(i + 1)\n    for j in range(n):\n        if a[j] < j + 1:\n            ans += bisect_left(mp1, a[j])\n    print(ans)", "from collections import defaultdict, OrderedDict\n\ndef solve():\n    n = int(input())\n    arr = [1]\n    arr += [int(x) for x in input().split()]\n    valid = []\n    keys = OrderedDict()\n    for (i, n) in enumerate(arr):\n        if i > n:\n            valid.append((i, n))\n            keys[i] = True\n    count = 0\n    List = list(keys.keys())\n    dic = {List[i]: i for i in range(len(List))}\n    for (i, n) in valid:\n        cand = n - 1\n        while cand >= 1:\n            if cand in keys:\n                count += dic[cand] + 1\n                break\n            cand -= 1\n    print(count)\nt = int(input())\nfor _ in range(t):\n    solve()", "from bisect import bisect_left\nfor i in range(int(input())):\n    n = int(input())\n    pv = []\n    pi = []\n    l = list(map(int, input().split()))\n    for i in range(n):\n        if l[i] < i + 1:\n            pi.append(i + 1)\n            pv.append(l[i])\n    ans = 0\n    k = len(pi)\n    for i in range(-1, -k, -1):\n        ans += bisect_left(pi, pv[i])\n    print(ans)", "import sys\ninput = sys.stdin.readline\nimport bisect\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    (l1, l2) = ([], [])\n    for (x, y) in enumerate(a):\n        if y < x + 1:\n            l1 += [x + 1]\n            l2 += [y]\n    res = 0\n    for k in l2:\n        res += bisect.bisect_left(l1, k)\n    print(res)", "from bisect import bisect_right\nfor _ in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    valid_a = [(idx + 1, num) for (idx, num) in enumerate(nums) if idx + 1 > num]\n    idx_b = sorted((b for (_, b) in valid_a))\n    res = 0\n    for (idx, num) in valid_a:\n        res += len(idx_b) - bisect_right(idx_b, idx)\n    print(res)", "from collections import deque\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    count = 0\n    prefix_sum = [0] * n\n    for i in range(n):\n        prefix_sum[i] = 1 if arr[i] < i + 1 else 0\n        if i >= 1:\n            prefix_sum[i] += prefix_sum[i - 1]\n    for i in range(n):\n        if arr[i] < i + 1:\n            k = arr[i] - 2\n            if k >= 0:\n                count += prefix_sum[k]\n    print(count)", "import bisect\nfor t in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    ele = []\n    idx = []\n    for i in range(n):\n        if arr[i] < i + 1:\n            ele.append(arr[i])\n            idx.append(i + 1)\n    c = 0\n    for i in range(len(ele)):\n        (curr_ele, curr_idx) = (ele[i], idx[i])\n        c += bisect.bisect_left(idx, curr_ele)\n    print(c)", "from bisect import bisect\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    b = []\n    c = []\n    f = 0\n    for i in range(n):\n        if i + 1 > a[i]:\n            b.append(i + 1)\n            c.append(a[i])\n            f += 1\n    c.sort()\n    for i in range(f):\n        count += f - bisect(c, b[i])\n    print(count)", "from bisect import bisect_left\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    numbers = list(map(int, input().split()))\n    indices = []\n    right_pairs = dict()\n    for j in range(len(numbers)):\n        if numbers[j] < j + 1:\n            indices.append(j + 1)\n            right_pairs[j + 1] = numbers[j]\n    result = 0\n    for j in indices:\n        result += bisect_left(indices, int(right_pairs.get(j)))\n    print(result)", "from collections import deque\nimport bisect\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    count = 0\n    count = 0\n    valid_arr = [(idx + 1, num) for (idx, num) in enumerate(arr) if idx + 1 > num]\n    sorted_values = sorted((b for (_, b) in valid_arr))\n    for (idx, num) in valid_arr:\n        count += len(sorted_values) - bisect.bisect_right(sorted_values, idx)\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    a = [(a[i], i + 1) for i in range(n) if a[i] <= i]\n    if len(a) == 0:\n        print(0)\n        continue\n    (vals, indices) = map(sorted, zip(*a))\n    m = len(vals)\n    i = j = ans = 0\n    while i < m:\n        while j < m and indices[j] < vals[i]:\n            j += 1\n        ans += j\n        i += 1\n    print(ans)", "import bisect\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    arr1 = []\n    arr2 = []\n    for i in range(n):\n        if l[i] < i + 1:\n            arr1.append(l[i])\n            arr2.append(i + 1)\n    arr1.sort()\n    ans = 0\n    for x in arr2:\n        ans += len(arr1) - bisect.bisect(arr1, x)\n    print(ans)", "T = int(input())\nwhile T:\n    T -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    cnt = 0\n    ans = 0\n    for i in range(n):\n        if a[i] < i + 1:\n            b.append(a[i])\n            cnt += 1\n    b.sort()\n    j = 0\n    for i in range(n):\n        if a[i] < i + 1:\n            while j < cnt and b[j] <= i + 1:\n                j += 1\n            ans += cnt - j\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    a = [(a[i], i + 1) for i in range(n) if a[i] <= i]\n    if len(a) == 0:\n        print(0)\n        continue\n    (vals, indices) = map(sorted, zip(*a))\n    m = len(vals)\n    i = j = ans = 0\n    while i < m:\n        while j < m and indices[j] < vals[i]:\n            j += 1\n        ans += j\n        i += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    a = [(a[i], i + 1) for i in range(n) if a[i] <= i]\n    if len(a) == 0:\n        print(0)\n        continue\n    (vals, indices) = map(sorted, zip(*a))\n    m = len(vals)\n    i = j = ans = 0\n    while i < m:\n        while j < m and indices[j] < vals[i]:\n            j += 1\n        ans += j\n        i += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    jcnt = 0\n    cnt = 0\n    b = []\n    c = []\n    m = 0\n    for i in range(n):\n        if a[i] < i + 1:\n            b += [a[i]]\n            c += [i + 1]\n            m = i + 1\n    d1 = {}\n    for i in b:\n        if i in d1:\n            d1[i] += 1\n        else:\n            d1[i] = 1\n    d = {}\n    d[m] = 0\n    for i in range(m - 1, -1, -1):\n        d[i] = d[i + 1]\n        if i + 1 in d1:\n            d[i] += d1[i + 1]\n    cnt = 0\n    for i in c:\n        cnt += d[i]\n    print(cnt)", "for _ in range(int(input())):\n    N = int(input())\n    A = [*map(int, input().split())]\n    A = [(A[i], i + 1) for i in range(N) if A[i] <= i]\n    if len(A) == 0:\n        print(0)\n        continue\n    (vals, indices) = map(sorted, zip(*A))\n    i = j = ans = 0\n    while i < len(A):\n        while j < len(A) and indices[j] < vals[i]:\n            j += 1\n        ans += j\n        i += 1\n    print(ans)", "def inlt():\n    return list(map(int, input().split()))\nt = int(input())\nwhile t:\n    t = t - 1\n    n = int(input())\n    a = inlt()\n    s = ''\n    prs = []\n    ans = 0\n    last_sum = 0\n    for i in range(n):\n        x = a[i]\n        prs.append(last_sum)\n        if x < i + 1:\n            last_sum += 1\n            s += '1'\n        else:\n            s += '0'\n    for i in range(1, n):\n        if s[i] == '1':\n            if a[i] - 1 >= 0:\n                ans = ans + prs[int(a[i] - 1)]\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    pos = []\n    val = []\n    for j in range(len(a)):\n        if a[j] < j + 1:\n            pos.append(j + 1)\n            val.append(a[j])\n    ans = 0\n    val.sort()\n    j = 0\n    valptr = 0\n    while j < len(pos) and valptr < len(val):\n        while val[valptr] <= pos[j] and valptr < len(val) - 1:\n            valptr += 1\n        if valptr == len(val) - 1 and val[valptr] <= pos[j]:\n            valptr += 1\n        else:\n            ans += len(val) - valptr\n        j += 1\n    print(ans)", "import bisect\n\ndef cal(v, a):\n    i = bisect.bisect_left(a, v, lo=0, hi=len(a))\n    return i\nfor p in range(int(input())):\n    (n, f) = (int(input()), 0)\n    a = list(map(int, input().split()))\n    (x, y, f) = ([], [], 0)\n    for i in range(n):\n        if a[i] < i + 1:\n            x.append(i + 1)\n            y.append(a[i])\n    x.sort()\n    y.sort()\n    for i in range(len(y)):\n        f += cal(y[i], x)\n    print(f)"]