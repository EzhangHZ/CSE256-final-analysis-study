["ot = []\nfor _ in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    d1_digits = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0}\n    d2_digits = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0}\n    d1 = {}\n    d2 = {}\n    out = 0\n    for x in l1:\n        if x == 1:\n            continue\n        if x not in d1:\n            d1[x] = 1\n        else:\n            d1[x] += 1\n    for x in l2:\n        if x == 1:\n            continue\n        if x in d1:\n            d1[x] -= 1\n            if d1[x] == 0:\n                del d1[x]\n        elif x not in d2:\n            d2[x] = 1\n        else:\n            d2[x] += 1\n    for (x, y) in d1.items():\n        k = len(str(x))\n        if k == 1:\n            d1_digits[x] += y\n        else:\n            d1_digits[k] += y\n            out += y\n    for (x, y) in d2.items():\n        k = len(str(x))\n        if k == 1:\n            d2_digits[x] += y\n        else:\n            d2_digits[k] += y\n            out += y\n    for (x, y) in d1_digits.items():\n        m = min(y, d2_digits[x])\n        out += y - m + (d2_digits[x] - m)\n    ot.append(str(out))\nprint('\\n'.join(ot))", "for _ in range(int(input())):\n    n = int(input())\n    l1 = [int(x) for x in input().split()]\n    l2 = [int(x) for x in input().split()]\n    d1_digits = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0}\n    d2_digits = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0}\n    d1 = {}\n    d2 = {}\n    out = 0\n    for x in l1:\n        if x == 1:\n            continue\n        if x not in d1:\n            d1[x] = 1\n        else:\n            d1[x] += 1\n    for x in l2:\n        if x == 1:\n            continue\n        if x in d1:\n            d1[x] -= 1\n            if d1[x] == 0:\n                del d1[x]\n        elif x not in d2:\n            d2[x] = 1\n        else:\n            d2[x] += 1\n    for (x, y) in d1.items():\n        k = len(str(x))\n        if k == 1:\n            d1_digits[x] += y\n        else:\n            d1_digits[k] += y\n            out += y\n    for (x, y) in d2.items():\n        k = len(str(x))\n        if k == 1:\n            d2_digits[x] += y\n        else:\n            d2_digits[k] += y\n            out += y\n    for (x, y) in d1_digits.items():\n        m = min(y, d2_digits[x])\n        out += y - m + (d2_digits[x] - m)\n    print(out)", "from math import log10\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    marker = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0}\n    ans = 0\n    for item in a:\n        if item not in marker:\n            marker[item] = 1\n        else:\n            marker[item] += 1\n    for i in range(n):\n        if b[i] in marker and marker[b[i]] >= 1:\n            marker[b[i]] -= 1\n            b[i] = -1\n    for key in marker.keys():\n        if int(log10(key)) >= 1:\n            ans += marker[key]\n            marker[int(log10(key)) + 1] += marker[key]\n    for i in range(n):\n        if b[i] == -1:\n            continue\n        else:\n            if int(log10(b[i])) >= 1:\n                b[i] = int(log10(b[i])) + 1\n                ans += 1\n            if b[i] in marker and marker[b[i]] >= 1:\n                marker[b[i]] -= 1\n                b[i] = -1\n    for i in range(2, 10):\n        if i in marker.keys():\n            ans += marker[i]\n            marker[1] += marker[i]\n    for item in b:\n        if item == -1 or item == 1:\n            continue\n        else:\n            ans += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    i = 0\n    j = 0\n    x = [0] * 10\n    y = [0] * 10\n    s = 0\n    while i < n or j < n:\n        if i < n and j < n:\n            if a[i] == b[j]:\n                i += 1\n                j += 1\n            elif a[i] < b[j]:\n                if a[i] < 10:\n                    x[a[i]] += 1\n                else:\n                    x[len(str(a[i]))] += 1\n                    s += 1\n                i += 1\n            elif a[i] > b[j]:\n                if b[j] < 10:\n                    y[b[j]] += 1\n                else:\n                    y[len(str(b[j]))] += 1\n                    s += 1\n                j += 1\n        elif i < n:\n            if a[i] < 10:\n                x[a[i]] += 1\n            else:\n                x[len(str(a[i]))] += 1\n                s += 1\n            i += 1\n        elif j < n:\n            if b[j] < 10:\n                y[b[j]] += 1\n            else:\n                y[len(str(b[j]))] += 1\n                s += 1\n            j += 1\n    for i in range(2, 10):\n        s += abs(x[i] - y[i])\n    print(s)", "from collections import Counter\nfor _ in range(int(input())):\n    useless = input()\n    a = Counter(input().split())\n    a.subtract(Counter(input().split()))\n    ans = 0\n    for key in list(a.keys()):\n        if len(key) > 1:\n            ans += abs(a[key])\n            a[str(len(key))] += a[key]\n            a[key] = 0\n    print(ans + sum((a[key] for key in a.keys() if a[key] > 0)) * 2 - abs(a['1']))", "from collections import Counter\nfor _ in range(int(input())):\n    useless = input()\n    a = Counter(input().split())\n    a.subtract(Counter(input().split()))\n    ans = 0\n    for key in list(a.keys()):\n        if len(key) > 1:\n            ans += abs(a[key])\n            a[str(len(key))] += a[key]\n            a[key] = 0\n    print(ans + sum((a[key] for key in a.keys() if a[key] > 0)) * 2 - abs(a['1']))", "from collections import Counter\nfor _ in range(int(input())):\n    useless = input()\n    a = Counter(input().split())\n    b = Counter(input().split())\n    ans = 0\n    for key in set(a.keys()) & set(b.keys()):\n        if a[key] < b[key]:\n            b[key] -= a[key]\n            a.pop(key)\n        elif a[key] > b[key]:\n            a[key] -= b[key]\n            b.pop(key)\n        else:\n            a.pop(key)\n            b.pop(key)\n    for key in list(a.keys()):\n        if len(key) > 1:\n            ans += a[key]\n            a[str(len(key))] += a[key]\n            a[key] = 0\n    for key in list(b.keys()):\n        if len(key) > 1:\n            ans += b[key]\n            b[str(len(key))] += b[key]\n            b[key] = 0\n    for key in set(a.keys()) & set(b.keys()):\n        if a[key] < b[key]:\n            b[key] -= a[key]\n            a.pop(key)\n        elif a[key] > b[key]:\n            a[key] -= b[key]\n            b.pop(key)\n        else:\n            a.pop(key)\n            b.pop(key)\n    ans += sum((a[key] for key in a.keys())) * 2\n    ans -= a['1'] + b['1']\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    use = input()\n    axe = Counter(input().split())\n    axe.subtract(Counter(input().split()))\n    ans = 0\n    for key in list(axe.keys()):\n        if len(key) > 1:\n            ans += abs(axe[key])\n            axe[str(len(key))] += axe[key]\n            axe[key] = 0\n    print(ans + sum((axe[key] for key in axe.keys() if axe[key] > 0)) * 2 - abs(axe['1']))", "from collections import Counter\nfor _ in range(int(input())):\n    useless = input()\n    a = Counter(input().split())\n    a.subtract(Counter(input().split()))\n    ans = 0\n    for key in list(a.keys()):\n        if len(key) > 1:\n            ans += abs(a[key])\n            a[str(len(key))] += a[key]\n            a[key] = 0\n    print(ans + sum((a[key] for key in a.keys() if a[key] > 0)) * 2 - abs(a['1']))", "import sys\nfrom collections import defaultdict\ninput = sys.stdin.readline\nrand = 731141807\n\ndef cntDig(n):\n    cnt = 0\n    tmp = n\n    while tmp:\n        cnt += 1\n        tmp //= 10\n    return cnt\n\ndef sol(a, b, n):\n    res = 0\n    bst = defaultdict(int)\n    for i in b:\n        bst[i ^ rand] += 1\n    cnta = [0] * 10\n    cntb = [0] * 10\n    for i in a:\n        if bst[i ^ rand]:\n            bst[i ^ rand] -= 1\n        elif i > 9:\n            cnta[cntDig(i)] += 1\n            res += 1\n        else:\n            cnta[i] += 1\n    for i in b:\n        if bst[i ^ rand]:\n            if i > 9:\n                cntb[cntDig(i)] += 1\n                res += 1\n            else:\n                cntb[i] += 1\n            bst[i ^ rand] -= 1\n    for i in range(2, 10):\n        res += abs(cnta[i] - cntb[i])\n    return res\nt = int(input())\nfor case in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(sol(a, b, n))", "def get_digit(num, ups):\n    for (i, upp) in enumerate(ups):\n        if num < upp:\n            return i + 1\nt = int(input())\nups = [10 ** k for k in range(1, 10)]\nfor _ in range(t):\n    n = int(input())\n    As = input().split()\n    As = [int(i) for i in As]\n    Bs = input().split()\n    Bs = [int(i) for i in Bs]\n    adict = dict()\n    for num in As:\n        adict[num] = adict.get(num, 0) + 1\n    bdict = dict()\n    for num in Bs:\n        bdict[num] = bdict.get(num, 0) + 1\n    for num in adict:\n        if num in bdict:\n            v = min(adict[num], bdict[num])\n            adict[num] -= v\n            bdict[num] -= v\n    _step = 0\n    alist = [0 for i in range(10)]\n    blist = [0 for i in range(10)]\n    for num in adict:\n        if adict[num] > 0:\n            if num >= 10:\n                d = get_digit(num, ups)\n                alist[d] += adict[num]\n                _step += adict[num]\n            else:\n                alist[num] += adict[num]\n    for num in bdict:\n        if bdict[num] > 0:\n            if num >= 10:\n                d = get_digit(num, ups)\n                blist[d] += bdict[num]\n                _step += bdict[num]\n            else:\n                blist[num] += bdict[num]\n    for i in range(2, 10):\n        d = abs(alist[i] - blist[i])\n        _step += d\n    print(_step)", "from collections import Counter\nfor _ in range(int(input())):\n    input()\n    a = Counter(input().split())\n    a.subtract(Counter(input().split()))\n    ans = 0\n    for key in list(a):\n        if len(key) > 1:\n            ans += abs(a[key])\n            a[str(len(key))] += a[key]\n            a[key] = 0\n    print(ans + sum((a[key] for key in a.keys() if a[key] > 0)) * 2 - abs(a['1']))", "from collections import Counter\nfor _ in range(int(input())):\n    useless = input()\n    a = Counter(input().split())\n    a.subtract(Counter(input().split()))\n    ans = 0\n    for key in list(a.keys()):\n        if len(key) > 1:\n            ans += abs(a[key])\n            a[str(len(key))] += a[key]\n            a[key] = 0\n    print(ans + sum((a[key] for key in a.keys() if a[key] > 0)) * 2 - abs(a['1']))", "from collections import Counter\nfor _ in range(int(input())):\n    use = input()\n    axe = Counter(input().split())\n    axe.subtract(Counter(input().split()))\n    ans = 0\n    for key in list(axe.keys()):\n        if len(key) > 1:\n            ans += abs(axe[key])\n            axe[str(len(key))] += axe[key]\n            axe[key] = 0\n    print(ans + sum((axe[key] for key in axe.keys() if axe[key] > 0)) * 2 - abs(axe['1']))", "from collections import Counter\nfor _ in range(int(input())):\n    use = input()\n    axe = Counter(input().split())\n    axe.subtract(Counter(input().split()))\n    ans = 0\n    for key in list(axe.keys()):\n        if len(key) > 1:\n            ans += abs(axe[key])\n            axe[str(len(key))] += axe[key]\n            axe[key] = 0\n    print(ans + sum((axe[key] for key in axe.keys() if axe[key] > 0)) * 2 - abs(axe['1']))", "def log10(x):\n    if x < 10:\n        ans = 1\n    elif x < 100:\n        ans = 2\n    elif x < 10000:\n        ans = 2 + log10(x // 100)\n    elif x < 100000000:\n        ans = 4 + log10(x // 10000)\n    else:\n        ans = 9\n    return ans\nfor tcase in range(int(input())):\n    n1 = int(input())\n    a1 = sorted(map(int, input().split()))\n    b1 = sorted(map(int, input().split()))\n    (i, j, a2, b2, ans) = (0, 0, [], [], 0)\n    while i < n1 or j < n1:\n        if j >= n1 or (i < n1 and a1[i] < b1[j]):\n            x = a1[i]\n            if x > 9:\n                x = log10(x)\n                ans += 1\n            a2.append(x)\n            i += 1\n        elif i >= n1 or (j < n1 and b1[j] < a1[i]):\n            x = b1[j]\n            if x > 9:\n                x = log10(x)\n                ans += 1\n            b2.append(x)\n            j += 1\n        else:\n            i += 1\n            j += 1\n    a2.sort()\n    b2.sort()\n    (n2, i, j) = (len(a2), 0, 0)\n    while i < n2 or j < n2:\n        if j >= n2 or (i < n2 and a2[i] < b2[j]):\n            if a2[i] > 1:\n                ans += 1\n            i += 1\n        elif i >= n2 or (j < n2 and b2[j] < a2[i]):\n            if b2[j] > 1:\n                ans += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n    print(ans)", "def log10(x):\n    if x < 10:\n        ans = 1\n    elif x < 100:\n        ans = 2\n    elif x < 10000:\n        ans = 2 + log10(x // 100)\n    elif x < 100000000:\n        ans = 4 + log10(x // 10000)\n    else:\n        ans = 9\n    return ans\nfor tcase in range(int(input())):\n    n1 = int(input())\n    a1 = sorted(map(int, input().split()))\n    b1 = sorted(map(int, input().split()))\n    (i, j, a2, b2, ans) = (0, 0, [], [], 0)\n    while i < n1 or j < n1:\n        if j >= n1 or (i < n1 and a1[i] < b1[j]):\n            x = a1[i]\n            if x > 9:\n                x = log10(x)\n                ans += 1\n            a2.append(x)\n            i += 1\n        elif i >= n1 or (j < n1 and b1[j] < a1[i]):\n            x = b1[j]\n            if x > 9:\n                x = log10(x)\n                ans += 1\n            b2.append(x)\n            j += 1\n        else:\n            i += 1\n            j += 1\n    a2.sort()\n    b2.sort()\n    (n2, i, j) = (len(a2), 0, 0)\n    while i < n2 or j < n2:\n        if j >= n2 or (i < n2 and a2[i] < b2[j]):\n            if a2[i] > 1:\n                ans += 1\n            i += 1\n        elif i >= n2 or (j < n2 and b2[j] < a2[i]):\n            if b2[j] > 1:\n                ans += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    usefull = input()\n    ant = Counter(input().split())\n    ant.subtract(Counter(input().split()))\n    ans = 0\n    for key in list(ant.keys()):\n        if len(key) > 1:\n            ans += abs(ant[key])\n            ant[str(len(key))] += ant[key]\n            ant[key] = 0\n    print(ans + sum((ant[key] for key in ant.keys() if ant[key] > 0)) * 2 - abs(ant['1']))", "test_cases = int(input())\nfor _ in range(test_cases):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    a.sort()\n    b.sort()\n    mapa = [0 for i in range(10)]\n    mapb = [0 for i in range(10)]\n    count = 0\n    i = 0\n    j = 0\n    while j < n and i < n:\n        if a[i] == b[j]:\n            a[i] = 1\n            b[j] = 1\n            i += 1\n            j += 1\n        elif a[i] < b[j]:\n            i += 1\n        elif a[i] > b[j]:\n            j += 1\n    for i in range(n):\n        if a[i] >= 10:\n            a[i] = len(str(a[i]))\n            count += 1\n        if b[i] >= 10:\n            b[i] = len(str(b[i]))\n            count += 1\n        mapa[a[i]] += 1\n        mapb[b[i]] += 1\n    for i in range(2, 10):\n        count += abs(mapa[i] - mapb[i])\n    print(count)", "def log10(x):\n    if x < 10:\n        ans = 1\n    elif x < 100:\n        ans = 2\n    elif x < 10000:\n        ans = 2 + log10(x // 100)\n    elif x < 100000000:\n        ans = 4 + log10(x // 10000)\n    else:\n        ans = 9\n    return ans\nfor tcase in range(int(input())):\n    n1 = int(input())\n    a1 = sorted(map(int, input().split()))\n    b1 = sorted(map(int, input().split()))\n    (i, j, a2, b2, ans) = (0, 0, [], [], 0)\n    while i < n1 or j < n1:\n        if j >= n1 or (i < n1 and a1[i] < b1[j]):\n            x = a1[i]\n            if x > 9:\n                x = log10(x)\n                ans += 1\n            a2.append(x)\n            i += 1\n        elif i >= n1 or (j < n1 and b1[j] < a1[i]):\n            x = b1[j]\n            if x > 9:\n                x = log10(x)\n                ans += 1\n            b2.append(x)\n            j += 1\n        else:\n            i += 1\n            j += 1\n    a2.sort()\n    b2.sort()\n    (n2, i, j) = (len(a2), 0, 0)\n    while i < n2 or j < n2:\n        if j >= n2 or (i < n2 and a2[i] < b2[j]):\n            if a2[i] > 1:\n                ans += 1\n            i += 1\n        elif i >= n2 or (j < n2 and b2[j] < a2[i]):\n            if b2[j] > 1:\n                ans += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n    print(ans)", "from collections import Counter\nt = int(input())\nfor __ in range(t):\n    n = int(input())\n    cnt = Counter(input().split())\n    cnt.subtract(Counter(input().split()))\n    ans = 0\n    keys = list(cnt.keys())\n    for key in keys:\n        if len(key) > 1:\n            cnt[str(len(key))] += cnt[key]\n            ans += abs(cnt[key])\n            cnt[key] = 0\n    for key in cnt:\n        if key != '1':\n            ans += abs(cnt[key])\n    print(ans)", "import sys\nimport math\nfrom collections import Counter\n\ndef gi():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef gs():\n    return sys.stdin.readline().strip()\n\ndef fun(a, b):\n    d1 = Counter(a)\n    d2 = Counter(b)\n    if d1 == d2:\n        return 0\n    c = 0\n    (d1, d2) = (d1 - d2, d2 - d1)\n    a = []\n    b = []\n    for i in d1:\n        for j in range(d1[i]):\n            a.append(i)\n    for i in d2:\n        for j in range(d2[i]):\n            b.append(i)\n    for i in range(len(a)):\n        x = len(str(a[i]))\n        if x > 1:\n            c += 1\n            a[i] = x\n    for j in range(len(b)):\n        x = len(str(b[j]))\n        if x > 1:\n            c += 1\n            b[j] = x\n    d1 = Counter(a)\n    d2 = Counter(b)\n    (d1, d2) = (d1 - d2, d2 - d1)\n    a = []\n    b = []\n    for i in d1:\n        for j in range(d1[i]):\n            a.append(i)\n    for i in d2:\n        for j in range(d2[i]):\n            b.append(i)\n    return len(a) + len(b) + c - a.count(1) - b.count(1)\nfor _ in range(int(input())):\n    x = input()\n    a = gi()\n    b = gi()\n    print(fun(a, b))", "import math as mt\nfrom collections import defaultdict, deque\nimport sys\nfrom bisect import bisect_right as b_r\nfrom bisect import bisect_left as b_l\nfrom os import path\nfrom heapq import *\ninput = sys.stdin.readline\nmod = 1000000007\nINT_MAX = sys.maxsize - 1\nINT_MIN = -sys.maxsize\n\ndef f(x):\n    return len(str(x))\n\ndef myyy__answer():\n    n = int(input())\n    maxah = []\n    maxbh = []\n    for i in input().split():\n        heappush(maxah, -int(i))\n    for i in input().split():\n        heappush(maxbh, -int(i))\n    cnt = 0\n    while len(maxah):\n        a = maxah[0]\n        b = maxbh[0]\n        if a < b:\n            heappop(maxah)\n            heappush(maxah, -f(-a))\n            cnt += 1\n        elif b < a:\n            heappop(maxbh)\n            heappush(maxbh, -f(-b))\n            cnt += 1\n        else:\n            heappop(maxah)\n            heappop(maxbh)\n    return cnt\nfor _ in range(int(input())):\n    print(myyy__answer())", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    w = [int(k) for k in input().split()]\n    z = [int(k) for k in input().split()]\n    a = Counter(w)\n    b = Counter(z)\n    (wnew, znew) = ([], [])\n    res = 0\n    for j in w:\n        if j in b and b[j] > 0:\n            b[j] -= 1\n        else:\n            wnew.append(j)\n    for j in z:\n        if j in a and a[j] > 0:\n            a[j] -= 1\n        else:\n            znew.append(j)\n    for j in range(len(wnew)):\n        if wnew[j] >= 10:\n            wnew[j] = len(str(wnew[j]))\n            res += 1\n    for j in range(len(znew)):\n        if znew[j] >= 10:\n            znew[j] = len(str(znew[j]))\n            res += 1\n    (w, z) = ([], [])\n    a = Counter(wnew)\n    b = Counter(znew)\n    for j in wnew:\n        if j in b and b[j] > 0:\n            b[j] -= 1\n        else:\n            w.append(j)\n    for j in znew:\n        if j in a and a[j] > 0:\n            a[j] -= 1\n        else:\n            z.append(j)\n    for j in range(len(w)):\n        if w[j] > 1:\n            res += 1\n    for j in range(len(z)):\n        if z[j] > 1:\n            res += 1\n    print(res)", "import heapq\n\ndef solution(arr1, arr2):\n    ans = 0\n    (heap1, heap2) = ([], [])\n    for num in arr1:\n        heapq.heappush(heap1, -num)\n    for num in arr2:\n        heapq.heappush(heap2, -num)\n    while heap1 and heap2:\n        top1 = -heap1[0]\n        top2 = -heap2[0]\n        if top1 == top2:\n            heapq.heappop(heap1)\n            heapq.heappop(heap2)\n        elif top1 > top2:\n            heapq.heappop(heap1)\n            heapq.heappush(heap1, -len(str(top1)))\n            ans += 1\n        else:\n            heapq.heappop(heap2)\n            heapq.heappush(heap2, -len(str(top2)))\n            ans += 1\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr1 = list(map(int, input().split(' ')))\n    arr2 = list(map(int, input().split(' ')))\n    solution(arr1, arr2)", "from heapq import heapify, heappop, heappush, heapreplace\nfor loop in range(int(input())):\n    n = int(input())\n    a = [-int(x) for x in input().split()]\n    b = [-int(x) for x in input().split()]\n    heapify(a)\n    heapify(b)\n    count = 0\n    while a:\n        if -a[0] > -b[0]:\n            heapreplace(a, -len(str(-a[0])))\n            count += 1\n        elif -a[0] < -b[0]:\n            heapreplace(b, -len(str(-b[0])))\n            count += 1\n        if a[0] == b[0]:\n            heappop(a)\n            heappop(b)\n    print(count)", "from collections import Counter\n\ndef diglog(l):\n    return len(str(l))\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    k = 0\n    i = 0\n    (a, b) = (list((Counter(a) - Counter(b)).elements()), list((Counter(b) - Counter(a)).elements()))\n    if a != []:\n        for i in range(len(a)):\n            if a[i] >= 10:\n                a[i] = diglog(a[i])\n                k = k + 1\n        for i in range(len(a)):\n            if b[i] >= 10:\n                b[i] = diglog(b[i])\n                k = k + 1\n        (a, b) = (list((Counter(a) - Counter(b)).elements()), list((Counter(b) - Counter(a)).elements()))\n        z = a.count(1)\n        y = b.count(1)\n        print(len(a) + len(b) + k - z - y)\n    else:\n        print(0)", "import math\nimport heapq\nimport sys\ninput = sys.stdin.readline\nin_il = lambda : list(map(int, input().split()))\nin_sl = lambda : input().split()\nin_i = lambda : int(input())\nMAX_INT = float('inf')\n\ndef count_digit(n):\n    return len(str(n))\n\ndef solve():\n    n = in_i()\n    a = list(map(lambda x: -x, in_il()))\n    b = list(map(lambda x: -x, in_il()))\n    heapq.heapify(a)\n    heapq.heapify(b)\n    steps = 0\n    while a or b:\n        if a[0] == b[0]:\n            heapq.heappop(a)\n            heapq.heappop(b)\n        elif a[0] < b[0]:\n            v = heapq.heappop(a)\n            v = count_digit(-v)\n            heapq.heappush(a, -v)\n            steps += 1\n        else:\n            v = heapq.heappop(b)\n            v = count_digit(-v)\n            heapq.heappush(b, -v)\n            steps += 1\n    print(steps)\nfor _ in range(in_i()):\n    solve()", "import sys\nfrom functools import lru_cache\nfrom heapq import heappush, heappop, heapify\ninput = sys.stdin.readline\n\ndef getA():\n    return list(map(int, input().split()))\n\ndef F(A, B):\n    (A, B) = ([-v for v in A], [-v for v in B])\n    (heapify(A), heapify(B))\n    res = 0\n    while A and min(A[0], B[0]) < -1:\n        if A[0] == B[0]:\n            heappop(A)\n            heappop(B)\n            continue\n        if A[0] > B[0]:\n            (A, B) = (B, A)\n            continue\n        v = -heappop(A)\n        heappush(A, -len(str(v)))\n        res += 1\n    return res\nN = int(input())\nfor _ in range(N):\n    n = int(input())\n    (A, B) = (getA(), getA())\n    print(F(A, B))", "import heapq\n\ndef f(arr1, arr2):\n    h1 = [-1 * el for el in arr1]\n    h2 = [-1 * el for el in arr2]\n    heapq.heapify(h1)\n    heapq.heapify(h2)\n    count = 0\n    while len(h1) > 0:\n        m1 = h1[0]\n        m2 = h2[0]\n        if m1 == m2:\n            heapq.heappop(h1)\n            heapq.heappop(h2)\n        elif m1 < m2:\n            k = heapq.heappop(h1)\n            heapq.heappush(h1, -1 * len(str(abs(k))))\n            count += 1\n        else:\n            k = heapq.heappop(h2)\n            heapq.heappush(h2, -1 * len(str(abs(k))))\n            count += 1\n    return count\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr1 = [int(el) for el in input().split(' ')]\n    arr2 = [int(el) for el in input().split(' ')]\n    print(f(arr1, arr2))", "import sys\nfrom functools import lru_cache\nfrom heapq import heappush, heappop, heapify\ninput = sys.stdin.readline\n\ndef getA():\n    return list(map(int, input().split()))\n\ndef F(A, B):\n    (A, B) = ([-v for v in A], [-v for v in B])\n    (heapify(A), heapify(B))\n    res = 0\n    while A and min(A[0], B[0]) < -1:\n        if A[0] == B[0]:\n            heappop(A)\n            heappop(B)\n            continue\n        if A[0] > B[0]:\n            (A, B) = (B, A)\n            continue\n        v = -heappop(A)\n        heappush(A, -len(str(v)))\n        res += 1\n    return res\nN = int(input())\nfor _ in range(N):\n    n = int(input())\n    (A, B) = (getA(), getA())\n    print(F(A, B))", "import sys\nsys.setrecursionlimit(10 ** 6)\nfrom collections import Counter, deque, defaultdict\nimport math\nimport heapq\nip = sys.stdin.readline\nop = sys.stdout.write\nt = int(ip())\nres = []\nfor _ in range(t):\n    n = int(input())\n    A = [int(x) for x in ip().split()]\n    B = [int(x) for x in ip().split()]\n    freqa = defaultdict(int)\n    freqb = defaultdict(int)\n    for (num1, num2) in zip(A, B):\n        freqa[num1] += 1\n        freqb[num2] += 1\n    for (key, val) in freqa.items():\n        f = min(val, freqb[key])\n        freqa[key] -= f\n        freqb[key] -= f\n    moves = 0\n    for num in list(freqa.keys()):\n        f = freqa[num]\n        if f == 0 or num <= 9:\n            continue\n        moves += f\n        new_num = int(math.log10(num)) + 1\n        freqa[new_num] += f\n        freqa[num] = 0\n    for num in list(freqb.keys()):\n        f = freqb[num]\n        if f == 0 or num <= 9:\n            continue\n        moves += f\n        new_num = int(math.log10(num)) + 1\n        freqb[new_num] += f\n        freqb[num] = 0\n    for (key, val) in freqa.items():\n        f = min(val, freqb[key])\n        freqa[key] -= f\n        freqb[key] -= f\n    for (num, f) in freqa.items():\n        if num != 1:\n            moves += f\n    for (num, f) in freqb.items():\n        if num != 1:\n            moves += f\n    res.append(moves)\nfor val in res:\n    op(str(val) + '\\n')", "from heapq import heappush, _heapreplace_max, _heapify_max, _heappop_max\n\nclass MaxHeap:\n\n    def __init__(self, list):\n        self.list = [item for item in list]\n        _heapify_max(self.list)\n\n    def pop(self):\n        val = _heappop_max(self.list)\n        return val\n\n    def push(self, val):\n        heappush(val)\n\n    def get_top(self):\n        return self.list[0]\n\n    def pop_push(self, val):\n        _heapreplace_max(self.list, val)\n\n    def count(self):\n        return len(self.list)\n\ndef get_count_operation_for_same_arrays(list_a: MaxHeap, list_b: MaxHeap) -> int:\n    count_op = 0\n    while list_a.count() > 0:\n        top_a = list_a.get_top()\n        top_b = list_b.get_top()\n        if top_a == top_b:\n            list_a.pop()\n            list_b.pop()\n            continue\n        count_op += 1\n        if top_a > top_b:\n            list_a.pop_push(len(str(top_a)))\n        else:\n            list_b.pop_push(len(str(top_b)))\n    return count_op\ntest_case_count = int(input())\nfor _ in range(test_case_count):\n    count = int(input())\n    list_a = list(map(int, input().split()))\n    list_b = list(map(int, input().split()))\n    first_heap = MaxHeap(sorted(list_a))\n    second_heap = MaxHeap(sorted(list_b))\n    print(get_count_operation_for_same_arrays(first_heap, second_heap))", "import heapq\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [-int(x) for x in input().split()]\n    b = [-int(x) for x in input().split()]\n    heapq.heapify(a)\n    heapq.heapify(b)\n    cnt = 0\n    while a and b:\n        if a[0] == b[0]:\n            heapq.heappop(a)\n            heapq.heappop(b)\n        else:\n            if a[0] < b[0]:\n                v = heapq.heappop(a)\n                v = len(str(-v))\n                heapq.heappush(a, -v)\n            else:\n                v = heapq.heappop(b)\n                v = len(str(-v))\n                heapq.heappush(b, -v)\n            cnt += 1\n    print(cnt)", "from heapq import *\nimport math\n\nclass Solution:\n\n    def minMoves(self, a, b):\n        a = [-i for i in a]\n        b = [-i for i in b]\n        heapify(a)\n        heapify(b)\n        moves = 0\n        while len(a) != 0 and len(b) != 0:\n            if -a[0] == -b[0]:\n                heappop(a)\n                heappop(b)\n            elif -a[0] > -b[0]:\n                x = -heappop(a)\n                x = math.log10(x)\n                x = math.floor(x) + 1\n                heappush(a, -x)\n                moves += 1\n            else:\n                x = -heappop(b)\n                x = math.log10(x)\n                x = math.floor(x) + 1\n                heappush(b, -x)\n                moves += 1\n        return moves\nob = Solution()\nt = int(input())\nwhile t:\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    print(ob.minMoves(a, b))\n    t -= 1", "import heapq, math\n\ndef dlog(x):\n    return math.floor(math.log10(x)) + 1\nfor _ in range(int(input())):\n    n = int(input())\n    a = [-int(x) for x in input().split()]\n    b = [-int(x) for x in input().split()]\n    heapq.heapify(a)\n    c = 0\n    heapq.heapify(b)\n    while n:\n        if a[0] == b[0]:\n            heapq.heappop(a)\n            heapq.heappop(b)\n            n -= 1\n        else:\n            c += 1\n            if a[0] < b[0]:\n                heapq.heappushpop(a, -dlog(-a[0]))\n            else:\n                heapq.heappushpop(b, -dlog(-b[0]))\n    print(c)", "from collections import defaultdict\nimport math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    d = defaultdict(lambda : [0, 0])\n    for i in A:\n        d[i][0] += 1\n    for i in B:\n        d[i][1] += 1\n    A = []\n    B = []\n    for i in d:\n        (a, b) = d[i]\n        if a == b:\n            pass\n        elif a > b:\n            for j in range(a - b):\n                A.append(i)\n        else:\n            for j in range(b - a):\n                B.append(i)\n    L = [0] * 10\n    M = [0] * 10\n    for i in range(1, 10):\n        L[i] = A.count(i)\n        M[i] = B.count(i)\n    ans = 0\n    for i in A:\n        a = int(math.log10(i)) + 1\n        if a > 1:\n            if M[a] > 0:\n                M[a] -= 1\n            else:\n                L[a] += 1\n            ans += 1\n    for i in B:\n        a = int(math.log10(i)) + 1\n        if a > 1:\n            if L[a] > 0:\n                L[a] -= 1\n            else:\n                M[a] += 1\n            ans += 1\n    for i in range(2, 10):\n        (a, b) = (L[i], M[i])\n        ans += abs(a - b)\n    print(ans)", "t = int(input())\nfrom heapq import heapify, heappush, heappop\nwhile t:\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    heap1 = []\n    heap2 = []\n    heapify(heap1)\n    heapify(heap2)\n    for i in l1:\n        heappush(heap1, -1 * i)\n    for j in l2:\n        heappush(heap2, -1 * j)\n    ans = 0\n    while len(heap1) != 0 and len(heap2) != 0:\n        if heap1[0] == heap2[0]:\n            heappop(heap1)\n            heappop(heap2)\n            continue\n        ans += 1\n        if heap1[0] < heap2[0]:\n            a = len(str(heappop(heap1))) - 1\n            heappush(heap1, -1 * a)\n        else:\n            b = len(str(heappop(heap2))) - 1\n            heappush(heap2, -1 * b)\n    print(ans)\n    t -= 1", "from collections import deque, Counter\nfrom math import *\nimport sys\nimport random\nfrom bisect import *\nfrom functools import reduce\nfrom sys import stdin\nfrom heapq import *\nimport copy\ninput = lambda : sys.stdin.readline().rstrip()\nnegx = lambda x: -int(x)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(negx, input().split()))\n    b = list(map(negx, input().split()))\n    heapify(a)\n    heapify(b)\n    ans = 0\n    while len(a) != 0:\n        (x, y) = (a[0], b[0])\n        if x == y:\n            heappop(a)\n            heappop(b)\n        else:\n            if abs(a[0]) > abs(b[0]):\n                heappush(a, -(floor(log10(abs(a[0]))) + 1))\n                heappop(a)\n            else:\n                heappush(b, -(floor(log10(abs(b[0]))) + 1))\n                heappop(b)\n            ans += 1\n    print(ans)", "def log10(x):\n    ans = 0\n    while x > 0:\n        x //= 10\n        ans += 1\n    return ans\nfor tcase in range(int(input())):\n    n1 = int(input())\n    a1 = sorted(map(int, input().split()))\n    b1 = sorted(map(int, input().split()))\n    (i, j, a2, b2, ans) = (0, 0, [], [], 0)\n    while i < n1 or j < n1:\n        if j >= n1 or (i < n1 and a1[i] < b1[j]):\n            x = a1[i]\n            if x > 9:\n                x = log10(x)\n                ans += 1\n            a2.append(x)\n            i += 1\n        elif i >= n1 or (j < n1 and b1[j] < a1[i]):\n            x = b1[j]\n            if x > 9:\n                x = log10(x)\n                ans += 1\n            b2.append(x)\n            j += 1\n        else:\n            i += 1\n            j += 1\n    a2.sort()\n    b2.sort()\n    (n2, i, j) = (len(a2), 0, 0)\n    while i < n2 or j < n2:\n        if j >= n2 or (i < n2 and a2[i] < b2[j]):\n            if a2[i] > 1:\n                ans += 1\n            i += 1\n        elif i >= n2 or (j < n2 and b2[j] < a2[i]):\n            if b2[j] > 1:\n                ans += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n    print(ans)", "import heapq\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    pa = []\n    for i in a:\n        heapq.heappush(pa, -1 * i)\n    pb = []\n    for i in b:\n        heapq.heappush(pb, -1 * i)\n    ans = 0\n    while pa:\n        if -1 * pa[0] == -1 * pb[0]:\n            heapq.heappop(pa)\n            heapq.heappop(pb)\n            continue\n        ans += 1\n        if -1 * pa[0] > -1 * pb[0]:\n            heapq.heappush(pa, -1 * len(str(-1 * pa[0])))\n            heapq.heappop(pa)\n        else:\n            heapq.heappush(pb, -1 * len(str(-1 * pb[0])))\n            heapq.heappop(pb)\n    print(ans)\n    t -= 1", "import sys\ninput = sys.stdin.readline\nfrom heapq import heappush, heappop\nt = int(input())\nfor _ in range(t):\n    input()\n    A = [int(i) for i in input().split()]\n    B = [int(i) for i in input().split()]\n    a = []\n    b = []\n    for i in A:\n        heappush(a, -i)\n    for i in B:\n        heappush(b, -i)\n    ans = 0\n    while len(a) > 0:\n        if a[0] == b[0]:\n            heappop(a)\n            heappop(b)\n        else:\n            if -a[0] < -b[0]:\n                q = -heappop(b)\n                r = len(str(q))\n                heappush(b, -r)\n            else:\n                q = -heappop(a)\n                r = len(str(q))\n                heappush(a, -r)\n            ans += 1\n    print(ans)", "import sys\nimport heapq\nt = int(input())\nresult = []\nfor _ in range(t):\n    n = int(input())\n    (arrayOne, arrayTwo) = (list(input().split()), list(input().split()))\n\n    def solve():\n        (heapOne, heapTwo) = ([-int(num) for num in arrayOne], [-int(num) for num in arrayTwo])\n        heapq.heapify(heapOne)\n        heapq.heapify(heapTwo)\n        count = 0\n        while heapOne and heapTwo:\n            (numOne, numTwo) = (-heapq.heappop(heapOne), -heapq.heappop(heapTwo))\n            if numOne == numTwo:\n                continue\n            if numOne > numTwo:\n                newNum = -len(str(numOne))\n                heapq.heappush(heapOne, newNum)\n                heapq.heappush(heapTwo, -numTwo)\n            else:\n                newNum = -len(str(numTwo))\n                heapq.heappush(heapTwo, newNum)\n                heapq.heappush(heapOne, -numOne)\n            count += 1\n        return count\n    print(solve())", "import heapq\nfor _ in range(int(input())):\n    n = int(input())\n    arr1 = [-int(x) for x in input().split()]\n    arr2 = [-int(x) for x in input().split()]\n    heapq.heapify(arr1)\n    heapq.heapify(arr2)\n    res = 0\n    while arr1:\n        (x, y) = (heapq.heappop(arr1), heapq.heappop(arr2))\n        if x < y:\n            heapq.heappush(arr1, -len(str(-x)))\n            heapq.heappush(arr2, y)\n            res += 1\n        elif x > y:\n            heapq.heappush(arr2, -len(str(-y)))\n            heapq.heappush(arr1, x)\n            res += 1\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = [-int(i) for i in input().split()]\n    b = [-int(i) for i in input().split()]\n    from heapq import heappush, heappop, heapify\n    heapify(a)\n    heapify(b)\n    ans = 0\n    while a:\n        (x, y) = (-heappop(a), -heappop(b))\n        if x > y:\n            x = len(str(x))\n            heappush(a, -x)\n            heappush(b, -y)\n            ans += 1\n        elif x < y:\n            y = len(str(y))\n            heappush(a, -x)\n            heappush(b, -y)\n            ans += 1\n    print(ans)", "import heapq\nfor _ in range(int(input())):\n    n = int(input())\n    a = [-int(x) for x in input().split()]\n    b = [-int(x) for x in input().split()]\n    heapq.heapify(a)\n    heapq.heapify(b)\n    res = 0\n    while a:\n        ha = heapq.heappop(a)\n        hb = heapq.heappop(b)\n        if ha == hb:\n            continue\n        res += 1\n        if -ha > -hb:\n            heapq.heappush(a, -len(str(-ha)))\n            heapq.heappush(b, hb)\n        else:\n            heapq.heappush(a, ha)\n            heapq.heappush(b, -len(str(-hb)))\n    print(res)", "import heapq\nt = int(input())\nfor _ in range(t):\n    input()\n    A = [int(i) for i in input().split()]\n    B = [int(i) for i in input().split()]\n    a = []\n    b = []\n    for i in A:\n        heapq.heappush(a, -i)\n    for i in B:\n        heapq.heappush(b, -i)\n    ans = 0\n    while len(a) > 0:\n        if a[0] == b[0]:\n            heapq.heappop(a)\n            heapq.heappop(b)\n        else:\n            if -a[0] < -b[0]:\n                q = -heapq.heappop(b)\n                r = len(str(q))\n                heapq.heappush(b, -r)\n            else:\n                q = -heapq.heappop(a)\n                r = len(str(q))\n                heapq.heappush(a, -r)\n            ans += 1\n    print(ans)", "import heapq\nt = int(input())\nfor tc in range(t):\n    steps = 0\n    n = int(input())\n    ar_a = map(int, input().split())\n    ar_b = map(int, input().split())\n    inv_a = list(map(lambda x: -x, ar_a))\n    inv_b = list(map(lambda x: -x, ar_b))\n    heapq.heapify(inv_a)\n    heapq.heapify(inv_b)\n    while True:\n        try:\n            max_a = heapq.heappop(inv_a)\n            max_b = heapq.heappop(inv_b)\n            reinsert = False\n            if max_a < max_b:\n                max_a = -(len(str(max_a)) - 1)\n                reinsert = True\n            elif max_b < max_a:\n                max_b = -(len(str(max_b)) - 1)\n                reinsert = True\n            if reinsert:\n                heapq.heappush(inv_a, max_a)\n                heapq.heappush(inv_b, max_b)\n                steps = steps + 1\n        except IndexError:\n            break\n    print(steps)", "from heapq import heappush, heappop, heapify\nt = int(input())\nwhile t:\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    pq1 = []\n    pq2 = []\n    for i in range(n):\n        heappush(pq1, -a[i])\n        heappush(pq2, -b[i])\n    cnt = 0\n    while pq1 and pq2:\n        x = -heappop(pq1)\n        y = -heappop(pq2)\n        if y > x:\n            heappush(pq2, -len(str(y)))\n            heappush(pq1, -x)\n            cnt += 1\n        elif x > y:\n            heappush(pq1, -len(str(x)))\n            heappush(pq2, -y)\n            cnt += 1\n    print(cnt)\n    t -= 1", "import heapq\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr1 = [-int(i) for i in input().split()]\n    arr2 = [-int(i) for i in input().split()]\n    heapq.heapify(arr1)\n    heapq.heapify(arr2)\n    res = 0\n    while arr1:\n        (x, y) = (heapq.heappop(arr1), heapq.heappop(arr2))\n        if x < y:\n            heapq.heappush(arr1, -len(str(-x)))\n            heapq.heappush(arr2, y)\n            res += 1\n        elif x > y:\n            heapq.heappush(arr2, -len(str(-y)))\n            heapq.heappush(arr1, x)\n            res += 1\n    print(res)", "import heapq\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr1 = [-int(i) for i in input().split()]\n    arr2 = [-int(i) for i in input().split()]\n    heapq.heapify(arr1)\n    heapq.heapify(arr2)\n    res = 0\n    while arr1:\n        (x, y) = (heapq.heappop(arr1), heapq.heappop(arr2))\n        if x < y:\n            heapq.heappush(arr1, -len(str(-x)))\n            heapq.heappush(arr2, y)\n            res += 1\n        elif x > y:\n            heapq.heappush(arr2, -len(str(-y)))\n            heapq.heappush(arr1, x)\n            res += 1\n    print(res)", "import sys\nfrom collections import defaultdict\nimport heapq\ninput = sys.stdin.readline\n\ndef num_digits(num):\n    ret = 0\n    while num > 0:\n        num = num // 10\n        ret += 1\n    return ret\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    s = input()\n    a = [-1 * int(i) for i in s.split(' ')]\n    s = input()\n    b = [-1 * int(i) for i in s.split(' ')]\n    heapq.heapify(a)\n    heapq.heapify(b)\n    ans = 0\n    while len(a) > 0:\n        if a[0] == b[0]:\n            heapq.heappop(a)\n            heapq.heappop(b)\n        elif a[0] < b[0]:\n            ans += 1\n            heapq.heappush(a, -1 * num_digits(-1 * heapq.heappop(a)))\n        elif a[0] > b[0]:\n            ans += 1\n            heapq.heappush(b, -1 * num_digits(-1 * heapq.heappop(b)))\n    print(ans)\n    t -= 1", "from heapq import heapify, heappop, heappush\nfor _ in range(int(input())):\n    n = int(input())\n    a = [-int(x) for x in input().split()]\n    b = [-int(x) for x in input().split()]\n    heapify(a)\n    heapify(b)\n    ans = 0\n    while len(a) > 0 or len(b) > 0:\n        a_i = -heappop(a)\n        b_i = -heappop(b)\n        if a_i > b_i:\n            heappush(a, -len(str(a_i)))\n            heappush(b, -b_i)\n            ans += 1\n        elif b_i > a_i:\n            heappush(b, -len(str(b_i)))\n            heappush(a, -a_i)\n            ans += 1\n    print(ans)", "import sys\nimport heapq\n\nclass MaxHeap:\n\n    def __init__(self, data=None):\n        if data is None:\n            self.data = []\n        else:\n            self.data = [-i for i in data]\n            heapq.heapify(self.data)\n\n    def push(self, item):\n        heapq.heappush(self.data, -item)\n\n    def pop(self):\n        return -heapq.heappop(self.data)\n\n    def replace(self, item):\n        return heapq.heapreplace(self.data, -item)\n\n    def top(self):\n        return -self.data[0]\n\n    def empty(self):\n        if len(self.data) == 0:\n            return True\n        return False\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = MaxHeap(list(map(int, input().split())))\n    b = MaxHeap(list(map(int, input().split())))\n    operation = 0\n    while not a.empty():\n        x = a.top()\n        y = b.top()\n        if x > y:\n            a.pop()\n            a.push(len(str(x)))\n            operation += 1\n        elif x < y:\n            b.pop()\n            b.push(len(str(y)))\n            operation += 1\n        else:\n            a.pop()\n            b.pop()\n    print(operation)", "import sys\ninput = sys.stdin.readline\nfrom random import randint\nRANDOM = randint(1, 10 ** 9)\n\nclass hf(int):\n\n    def __init__(self, x):\n        int.__init__(x)\n\n    def __hash__(self):\n        return super(hf, self).__hash__() ^ RANDOM\n\ndef prune(A, B):\n    n = len(A)\n    bag = {}\n    (nA, nB) = ([], [])\n    for i in range(n):\n        v = hf(A[i])\n        if v not in bag:\n            bag[v] = []\n        bag[v].append(i)\n    for i in range(n):\n        v = hf(B[i])\n        if v in bag and bag[v]:\n            bag[v].pop()\n            continue\n        nB.append(B[i])\n    for val in bag:\n        for i in bag[val]:\n            nA.append(A[i])\n    return (nA, nB)\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    ans = 0\n    (nA, nB) = prune(A, B)\n    m = len(nA)\n    for i in range(m):\n        if nA[i] >= 10:\n            nA[i] = len(str(nA[i]))\n            ans += 1\n        if nB[i] >= 10:\n            nB[i] = len(str(nB[i]))\n            ans += 1\n    (nA2, nB2) = prune(nA, nB)\n    k = len(nA2)\n    for i in range(k):\n        if nA2[i] >= 2:\n            ans += 1\n        if nB2[i] >= 2:\n            ans += 1\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "import heapq\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a_l = list(map(lambda x: (-int(x), len(x)), input().split()))\n    b_l = list(map(lambda x: (-int(x), len(x)), input().split()))\n    val = 0\n    heapq.heapify(a_l)\n    heapq.heapify(b_l)\n    while a_l:\n        a = a_l[0]\n        b = b_l[0]\n        if a == b:\n            heapq.heappop(a_l)\n            heapq.heappop(b_l)\n        elif a < b:\n            (_, a2) = heapq.heappop(a_l)\n            heapq.heappush(a_l, (-a2, 1))\n            val += 1\n        else:\n            (_, b2) = heapq.heappop(b_l)\n            heapq.heappush(b_l, (-b2, 1))\n            val += 1\n    print(val)"]