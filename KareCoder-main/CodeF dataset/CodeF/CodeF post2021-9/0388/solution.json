["T = int(input())\nq = []\nfor i in range(T):\n    s = input()\n    q.append(s)\n\ndef solve(s):\n    st = set()\n    sum = 0\n    for c in s:\n        if c in st:\n            sum += len(st) - 1\n            st = set()\n        else:\n            st.add(c)\n    sum += len(st)\n    print(sum)\nfor s in q:\n    solve(s)", "number = int(input())\ntests = []\nfor i in range(number):\n    soz = input()\n    tests.append(soz)\nfor test in tests:\n    queue = []\n    cnt = 0\n    for ch in test:\n        if len(queue) == 0:\n            queue.append(ch)\n        elif ch in queue:\n            queue = []\n            cnt += 2\n        else:\n            queue.append(ch)\n    print(len(test) - cnt)", "import math\nimport sys\nfrom collections import deque\nimport heapq\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\ndef mpp():\n    return map(int, inp().split())\n\ndef lis():\n    return list(mpp())\n\ndef sol(s):\n    v = set()\n    n = len(s)\n    new = ''\n    i = 0\n    j = 1\n    v.add(s[i])\n    while i < n and j < n:\n        if s[j] in v:\n            new += s[j] + s[j]\n            v.clear()\n            i = j + 1\n            if i < n:\n                v.add(s[i])\n            else:\n                break\n            j = i + 1\n        else:\n            v.add(s[j])\n            j += 1\n    return len(s) - len(new)\n\ndef main():\n    t = int(inp())\n    for _ in range(t):\n        s = inp()\n        print(sol(s))\nmain()", "def func():\n    s = input()\n    d = {}\n    k = 0\n    n = len(s)\n    for i in s:\n        if i in d.keys():\n            if d[i] == 1:\n                k += 2\n                d = {}\n        else:\n            d[i] = 1\n    return n - k\nt = int(input())\nL = []\nfor i in range(t):\n    y = func()\n    L.append(y)\nfor i in L:\n    print(i)", "def main():\n    s = input()\n    n = len(s)\n    sset = set()\n    l = 0\n    for z in s:\n        if z in sset:\n            l += 2\n            sset = set()\n        else:\n            sset.add(z)\n    return n - l\nfor _ in range(int(input())):\n    print(main())", "def solve():\n    s = input()\n    st = set()\n    ans = 0\n    for i in range(len(s)):\n        if s[i] in st:\n            ans += 2\n            st = set()\n        else:\n            st.add(s[i])\n    print(abs(len(s) - ans))\ntst = int(input())\nfor i in range(tst):\n    solve()", "import sys\nimport math\nimport itertools\nmod = 998244353\n\ndef ri():\n    return int(input())\n\ndef rl():\n    return list(map(int, input().split()))\n\ndef rls():\n    return list(map(str, input().split()))\n\ndef rm():\n    return map(int, input().split())\n\ndef isPowerOfTwo(x):\n    return x and (not x & x - 1)\n\ndef decimalToBinary(n):\n    return bin(n).replace('0b', '')\n\ndef nextPowerOf2(n):\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n\n\ndef highestPowerof2(x):\n    x |= x >> 1\n    x |= x >> 2\n    x |= x >> 4\n    x |= x >> 8\n    x |= x >> 16\n    return x ^ x >> 1\nfor _ in range(ri()):\n    s = input()\n    st = set()\n    ans = 0\n    for i in s:\n        if i in st:\n            ans += 2\n            st = set()\n        else:\n            st.add(i)\n    print(len(s) - ans)", "def solve():\n    a = input()\n    c = len(a)\n    s = set()\n    for i in a:\n        if i in s:\n            c -= 2\n            s = set()\n        else:\n            s |= {i}\n    print(c)\nt = 1\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1", "def main():\n    for i in range(int(input())):\n        input_str = input()\n        emp_dict = {}\n        ans = len(input_str)\n        for j in range(len(input_str)):\n            if input_str[j] in emp_dict:\n                ans -= 2\n                emp_dict = {}\n            else:\n                emp_dict[input_str[j]] = 1\n        print(ans)\nmain()", "def read():\n    str = input()\n    return str\n\ndef solve(str):\n    num = 0\n    n = len(str)\n    char_set = set()\n    for c in str:\n        if c in char_set:\n            num += 2\n            char_set.clear()\n        else:\n            char_set.add(c)\n    return n - num\n\ndef output(ans):\n    print(ans)\n    pass\nT = eval(input())\nfor i in range(T):\n    str = read()\n    ans = solve(str)\n    output(ans)\npass", "import math\n\ndef main_function():\n    test_cases = range(int(input()))\n    for test_case in test_cases:\n        s = input()\n        counter = 0\n        odd_mode_on = True\n        hashy = {}\n        for i in range(len(s)):\n            if s[i] not in hashy:\n                hashy[s[i]] = 1\n            else:\n                counter += len(hashy) - 1\n                hashy = {}\n        counter += len(hashy)\n        print(counter)\nmain_function()", "for i in range(int(input())):\n    s = input()\n    s1 = ''\n    l = len(s)\n    for j in s:\n        if j in s1:\n            l -= 2\n            s1 = ''\n        else:\n            s1 = s1 + j\n    print(l)", "for i in range(int(input())):\n    s = input()\n    s1 = ''\n    l = len(s)\n    for j in s:\n        if j in s1:\n            l -= 2\n            s1 = ''\n        else:\n            s1 = s1 + j\n    print(l)", "for t in range(int(input())):\n    s = input()\n    n = len(s)\n    cs = ''\n    for i in s:\n        if i in cs:\n            cs = ''\n            n -= 2\n        else:\n            cs += i\n    print(n)", "def even_string(s):\n    n = len(s)\n    c = 0\n    st = ''\n    for i in s:\n        if i in st:\n            st = ''\n            c -= 1\n        else:\n            st += i\n            c += 1\n    return c\nt = int(input())\nfor i in range(t):\n    s = input()\n    print(even_string(s))", "for _ in range(int(input())):\n    b = input()\n    c = set()\n    s = len(b)\n    i = 0\n    for i in b:\n        if i not in c:\n            c.add(i)\n        else:\n            s -= 2\n            c.clear()\n    print(s)", "for i in range(int(input())):\n    s = input()\n    s1 = ''\n    l = len(s)\n    for j in s:\n        if j in s1:\n            l -= 2\n            s1 = ''\n        else:\n            s1 = s1 + j\n    print(l)", "for i in range(int(input())):\n    s = input()\n    s1 = ''\n    l = len(s)\n    for j in s:\n        if j in s1:\n            l -= 2\n            s1 = ''\n        else:\n            s1 = s1 + j\n    print(l)", "for i in range(int(input())):\n    s = input()\n    s1 = ''\n    l = len(s)\n    for j in s:\n        if j in s1:\n            l -= 2\n            s1 = ''\n        else:\n            s1 = s1 + j\n    print(l)", "for i in range(int(input())):\n    s = input()\n    s1 = ''\n    l = len(s)\n    for j in s:\n        if j in s1:\n            l -= 2\n            s1 = ''\n        else:\n            s1 = s1 + j\n    print(l)", "for i in range(int(input())):\n    s = input()\n    s1 = ''\n    l = len(s)\n    for j in s:\n        if j in s1:\n            l -= 2\n            s1 = ''\n        else:\n            s1 = s1 + j\n    print(l)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    stack = []\n    for i in s:\n        if i in stack:\n            n -= 2\n            stack = []\n        else:\n            stack.append(i)\n    print(n)", "n = int(input())\nfor _ in range(n):\n    s = input()\n    res = len(s)\n    temp = ''\n    for i in s:\n        if i in temp:\n            res -= 2\n            temp = ''\n        else:\n            temp += i\n    print(res)", "from sys import stdin, stdout\nfrom collections import defaultdict\nimport math\ninput = stdin.readline\nt = int(input().strip())\nfor _ in range(t):\n    s = input().strip()\n    s = list(s)\n    d = defaultdict(lambda : 0)\n    ans = 0\n    for ch in s:\n        d[ch] += 1\n        if d[ch] == 2:\n            ans += 1\n            d.clear()\n    print(len(s) - 2 * ans)", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    s2 = ''\n    for i in s:\n        if i in s2:\n            n -= 2\n            s2 = ''\n        else:\n            s2 += i\n    print(n)", "def main():\n    t = int(input())\n    for _ in range(t):\n        str_input = list(input())\n        vet = []\n        total = 0\n        for c in str_input:\n            if c in vet:\n                total += len(vet) - 1\n                vet = []\n            else:\n                vet.append(c)\n        total += len(vet)\n        print(total)\nmain()", "t = int(input())\nfor i in range(t):\n    str = input()\n    arr = []\n    count = 0\n    for i in str:\n        if i in arr:\n            count += len(arr) - 1\n            arr = []\n        else:\n            arr.append(i)\n    print(count + len(arr))", "for _ in range(int(input())):\n    s = input()\n    last = {}\n    ans = 0\n    for (i, x) in enumerate(s):\n        if x in last:\n            ans += len(last) - 1\n            last = {}\n        else:\n            last[x] = i\n    ans += len(last)\n    print(ans)", "n = int(input())\nfor i in range(n):\n    word = input()\n    l = []\n    c = 0\n    for i in word:\n        if i in l:\n            c += len(l) - 1\n            l = []\n        else:\n            l.append(i)\n    print(c + len(l))", "t = int(input())\nfor i in range(t):\n    s = input()\n    ans = len(s)\n    S = set()\n    for j in s:\n        if j not in S:\n            S.add(j)\n        else:\n            ans -= 2\n            S.clear()\n    print(ans)", "for _ in range(int(input())):\n    s = input()\n    dict_s = {}\n    r = len(s)\n    for i in s:\n        if i in dict_s:\n            r = r - 2\n            dict_s = {}\n        else:\n            dict_s[i] = 1\n    print(r)", "for _ in range(int(input())):\n    s = input()\n    s1 = ''\n    l = len(s)\n    for i in s:\n        if i in s1:\n            s1 = ''\n            l -= 2\n        else:\n            s1 += i\n    print(l)", "for _ in range(int(input())):\n    a = input()\n    s = set()\n    c = len(a)\n    for i in a:\n        if i in s:\n            c -= 2\n            s = set()\n        else:\n            s.add(i)\n    print(c)", "for _ in range(int(input())):\n    s = list(input())\n    res = len(s)\n    d = set()\n    for i in s:\n        if i in d:\n            res -= 2\n            d.clear()\n        else:\n            d.add(i)\n    print(res)", "n = int(input())\nfor i in range(n):\n    s = input()\n    a = ''\n    l = len(s)\n    for i in s:\n        if i in a:\n            l = l - 2\n            a = ''\n        else:\n            a = a + i\n    print(l)", "t = int(input())\nfor _ in range(t):\n    s = input().strip()\n    (n, m) = (len(s), 0)\n    a = ''\n    for i in s:\n        if i in a:\n            m += 2\n            a = ''\n        else:\n            a += i\n    print(n - m)", "import sys\nimport math\nfrom bisect import bisect_right as br\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    st = input()\n    ans = 0\n    s = set()\n    for i in range(len(st)):\n        if st[i] in s:\n            ans += len(s) - 1\n            s = set()\n        else:\n            s.add(st[i])\n    ans += len(s)\n    print(ans)", "t = int(input())\nfor i in range(0, t):\n    s = input()\n    ans = 0\n    li = []\n    for x in s:\n        if x in li:\n            ans += len(li) - 1\n            li.clear()\n        else:\n            li.append(x)\n    print(ans + len(li))", "from typing import Set\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\nfor s in strings:\n    ans = 0\n    setLetters = set()\n    for i in range(len(s)):\n        if s[i] in setLetters:\n            ans += len(setLetters) - 1\n            setLetters.clear()\n        else:\n            setLetters.add(s[i])\n    ans += len(setLetters)\n    print(ans)", "for i in range(int(input())):\n    s = input()\n    s1 = ''\n    l = len(s)\n    for j in s:\n        if j in s1:\n            l -= 2\n            s1 = ''\n        else:\n            s1 = s1 + j\n    print(l)", "for i in range(int(input())):\n    s = input()\n    l = len(s)\n    s1 = ''\n    for j in s:\n        if j in s1:\n            l -= 2\n            s1 = ''\n        else:\n            s1 = s1 + j\n    print(l)", "t = int(input())\nfor i in range(t):\n    s = input()\n    s1 = ''\n    l = len(s)\n    for j in s:\n        if j in s1:\n            l -= 2\n            s1 = ''\n        else:\n            s1 += j\n    print(l)", "def process_string(s):\n    total = 0\n    reg = dict()\n    for c in s:\n        if c in reg:\n            total += 2\n            reg = dict()\n        else:\n            reg[c] = True\n    return total\nfor _ in range(int(input())):\n    string = input()\n    print(len(string) - process_string(string))", "meow = int(input())\nfor _ in range(meow):\n    word = input()\n    new = ''\n    ans = 0\n    for i in word:\n        if i not in new:\n            new += i\n        else:\n            new = ''\n            ans += 2\n    print(len(word) - ans)", "for _ in range(int(input())):\n    s = input()\n    d = {}\n    ans = len(s)\n    for i in range(len(s)):\n        if s[i] in d:\n            ans -= 2\n            d = {}\n        else:\n            d[s[i]] = 1\n    print(ans)", "def solve(s):\n    cur_count = 0\n    seen = set()\n    ans = 0\n    for char in s:\n        if char not in seen:\n            seen.add(char)\n            cur_count += 1\n        else:\n            ans += cur_count - 1\n            seen = set()\n            cur_count = 0\n    ans += cur_count\n    return ans\nT = int(input())\nfor num_experiment in range(1, T + 1):\n    s = input()\n    ans = solve(s)\n    print(ans)", "from collections import Counter\n\ndef check(s):\n    data = []\n    total = 0\n    for i in range(len(s)):\n        if s[i] not in data:\n            data.append(s[i])\n        else:\n            total += len(data) - 1\n            data.clear()\n    return total + len(data)\nfor _ in range(int(input())):\n    s = input()\n    print(check(s))", "tc = int(input())\nfor _ in range(tc):\n    s = input()\n    n = len(s)\n    track = set()\n    ans = 0\n    i = 0\n    for i in range(n):\n        if s[i] in track:\n            ans += len(track) - 1\n            track = set()\n        else:\n            track.add(s[i])\n    print(ans + len(track))", "n = int(input())\nfor _ in range(n):\n    s = input()\n    ans = 0\n    curr = set()\n    for c in s:\n        if c not in curr:\n            curr.add(c)\n        else:\n            ans += len(curr) - 1\n            curr = set()\n    ans += len(curr)\n    print(ans)", "for _ in range(int(input())):\n    s = input()\n    d = {}\n    ans = len(s)\n    for i in range(len(s)):\n        if s[i] in d:\n            ans -= 2\n            d = {}\n        else:\n            d[s[i]] = 1\n    print(ans)", "for _ in range(int(input())):\n    (a, s, c) = (input(), set(), 0)\n    for i in a:\n        if i in s:\n            c += len(s) - 1\n            s = set()\n        else:\n            s.add(i)\n    print(c + len(s))", "for _ in range(int(input())):\n    (s, l, c) = (input(), [], 0)\n    for i in s:\n        if i in l:\n            c += len(l) - 1\n            l = []\n        else:\n            l.append(i)\n    print(c + len(l))", "for _ in range(int(input())):\n    str = input()\n    arr = []\n    count = 0\n    for i in str:\n        if i in arr:\n            count += len(arr) - 1\n            arr = []\n        else:\n            arr.append(i)\n    print(count + len(arr))", "for _ in range(int(input())):\n    string = input()\n    count = 0\n    pairs = set()\n    for char in string:\n        count += 1\n        if char in pairs:\n            pairs = set()\n            count -= 2\n        else:\n            pairs.add(char)\n    print(count)", "n = int(input())\nfor _ in range(n):\n    s = input()\n    ans = 0\n    curr = set()\n    for c in s:\n        if c not in curr:\n            curr.add(c)\n        else:\n            ans += len(curr) - 1\n            curr = set()\n    ans += len(curr)\n    print(ans)", "for _ in range(int(input())):\n    (s, l, c) = (input(), [], 0)\n    for i in s:\n        if i in l:\n            c += len(l) - 1\n            l = []\n        else:\n            l.append(i)\n    print(c + len(l))", "for _ in range(int(input())):\n    s = input()\n    l = []\n    c = 0\n    for i in s:\n        if i not in l:\n            l.append(i)\n        else:\n            c += len(l) - 1\n            l = []\n    print(c + len(l))", "for _ in range(int(input())):\n    (a, s, c) = (input(), list(), 0)\n    for i in a:\n        if i in s:\n            c += len(s) - 1\n            s = list()\n        else:\n            s.append(i)\n    print(c + len(s))", "for _ in range(int(input())):\n    s = str(input())\n    d = 0\n    arr = []\n    for item in s:\n        if item in arr:\n            d = d + len(arr) - 1\n            arr = []\n        else:\n            arr.append(item)\n    print(d + len(arr))", "for _ in range(int(input())):\n    s = input()\n    l = []\n    c = 0\n    for i in s:\n        if i in l:\n            c += len(l) - 1\n            l = []\n        else:\n            l.append(i)\n    print(c + len(l))", "for _ in range(int(input())):\n    (s, l, count) = (input(), '', 0)\n    for i in s:\n        if i in l:\n            count += len(l) - 1\n            l = ''\n        else:\n            l += i\n    print(count + len(l))", "for _ in range(int(input())):\n    s = input()\n    se = set()\n    ans = len(s)\n    for i in s:\n        if i not in se:\n            se.add(i)\n        else:\n            ans -= 2\n            se.clear()\n            se = set()\n    print(ans)", "for _ in range(int(input())):\n    (s, l, c) = (input(), [], 0)\n    for i in s:\n        if i in l:\n            c += len(l) - 1\n            l = []\n        else:\n            l.append(i)\n    print(c + len(l))", "for _ in range(int(input())):\n    s = input()\n    l = []\n    ans = 0\n    for i in s:\n        if i not in l:\n            l.append(i)\n        else:\n            ans += len(l) - 1\n            l = []\n    print(ans + len(l))", "for _ in range(int(input())):\n    (s, l, count) = (input(), '', 0)\n    for i in s:\n        if i in l:\n            count += len(l) - 1\n            l = ''\n        else:\n            l += i\n    print(count + len(l))", "from collections import Counter\nn = input()\n\ndef solve(s):\n    a = []\n    res = 0\n    for i in s:\n        if i in a:\n            res += len(a) - 1\n            a = []\n        else:\n            a.append(i)\n    return res + len(a)\nfor i in range(int(n)):\n    s = input()\n    print(solve(s))", "t = int(input())\nfor _ in range(t):\n    s = input()\n    l = []\n    ans = 0\n    for k in s:\n        if k in l:\n            ans = ans + len(l) - 1\n            l = []\n        else:\n            l.append(k)\n    ans = ans + len(l)\n    print(ans)", "for _ in range(int(input())):\n    s = input()\n    set_s = set()\n    r = 0\n    for i in s:\n        if i in set_s:\n            r = r + len(set_s) - 1\n            set_s = set()\n        else:\n            set_s.add(i)\n    print(r + len(set_s))", "T = int(input())\n\ndef solve(S):\n    N = len(S)\n    M = 0\n    prev = [0] * 26\n    for c in S:\n        if prev[ord(c) - 97]:\n            prev[ord(c) - 97] = 0\n            M += 2\n            prev = [0] * 26\n        else:\n            prev[ord(c) - 97] = 1\n    print(N - M)\nfor _ in range(T):\n    s = input()\n    solve(s)", "for t in range(int(input())):\n    m = input()\n    k = set()\n    o = 0\n    for z in m:\n        if z in k:\n            o += len(k) - 1\n            k = set()\n        else:\n            k.add(z)\n    print(o + len(k))", "for i in range(int(input())):\n    arr = input()\n    st = set()\n    OTBET = 0\n    for e in arr:\n        if e in st:\n            OTBET += len(st) - 1\n            st.clear()\n        else:\n            st.add(e)\n    print(OTBET + len(st))", "for i in range(int(input())):\n    s = input()\n    arr = []\n    count = 0\n    for c in s:\n        if c in arr:\n            count += len(arr) - 1\n            arr = []\n        else:\n            arr.append(c)\n    count += len(arr)\n    print(count)", "def solve():\n    s = input()\n    n = len(s)\n    memo = dict()\n    pairs = 0\n    for i in range(n):\n        if memo.get(s[i]):\n            pairs += 1\n            memo = dict()\n        else:\n            memo[s[i]] = 1\n    print(n - 2 * pairs)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    solve()", "for __ in range(int(input())):\n    word = input()\n    s = set()\n    l = 0\n    for w in word:\n        if w in s:\n            l += 2\n            s = set()\n        else:\n            s.add(w)\n    print(len(word) - l)", "for i in range(int(input())):\n    s = input()\n    s1 = ''\n    l = len(s)\n    for j in s:\n        if j in s1:\n            l -= 2\n            s1 = ''\n        else:\n            s1 = s1 + j\n    print(l)", "for _ in range(int(input())):\n    s = input()\n    ans = len(s)\n    a1 = set()\n    for j in s:\n        if j not in a1:\n            a1.add(j)\n        else:\n            ans -= 2\n            a1.clear()\n    print(ans)", "for _ in [0] * int(input()):\n    slen = out = 0\n    a = ''\n    for i in input():\n        if i not in a:\n            a = a + i\n        else:\n            out = out + 2\n            a = ''\n        slen = slen + 1\n    print(slen - out)", "for j in range(0, int(input())):\n    s = input()\n    l = []\n    ans = 0\n    for i in s:\n        if i not in l:\n            l.append(i)\n        else:\n            ans += len(l) - 1\n            l = []\n    ans += len(l)\n    print(ans)", "num = int(input())\nwhile num > 0:\n    s = input()\n    m = {}\n    par = 0\n    for c in s:\n        if m.get(c):\n            par = par + 2\n            m.clear()\n        else:\n            m[c] = c\n    print(len(s) - par, end='\\n')\n    num = num - 1", "qtd_casos_teste = int(input())\nfor i in range(qtd_casos_teste):\n    string_teste = input()\n    s1 = ''\n    qtd_caracteres_remover = len(string_teste)\n    for j in string_teste:\n        if j in s1:\n            qtd_caracteres_remover -= 2\n            s1 = ''\n        else:\n            s1 = s1 + j\n    print(qtd_caracteres_remover)", "for _ in range(int(input())):\n    s = input()\n    l = len(s)\n    u = ''\n    for i in s:\n        if i in u:\n            l = l - 2\n            u = ''\n        else:\n            u = u + i\n    print(l)", "for __ in range(int(input())):\n    king = input()\n    one = set()\n    two = 0\n    for l in king:\n        if l in one:\n            two += 2\n            one = set()\n        else:\n            one.add(l)\n    print(len(king) - two)", "t = int(input())\nfor _ in range(t):\n    s = list(input())\n    open = ''\n    total = 0\n    for ch in s:\n        if ch not in open:\n            open += ch\n        else:\n            total += len(open) - 1\n            open = ''\n    total += len(open)\n    print(total)", "for t in range(int(input())):\n    s = input()\n    a = ''\n    ans = 0\n    for i in s:\n        if i not in a:\n            a += i\n        else:\n            ans += 2\n            a = ''\n    print(len(s) - ans)", "for t in range(int(input())):\n    s = input()\n    a = ''\n    ans = 0\n    for i in s:\n        if i not in a:\n            a += i\n        else:\n            ans += 2\n            a = ''\n    print(len(s) - ans)", "for _ in range(int(input())):\n    s = input()\n    ans = 0\n    t = ''\n    for c in s:\n        if not c in t:\n            t += c\n            ans += 1\n        else:\n            t = ''\n            ans -= 1\n    print(ans)", "for _ in range(int(input())):\n    s = input()\n    seen = set()\n    i = 0\n    ans = 0\n    while i < len(s):\n        if s[i] in seen:\n            ans += 2\n            seen = set()\n        else:\n            seen.add(s[i])\n        i += 1\n    print(len(s) - ans)", "import math\nt = int(input())\nfor _ in range(t):\n    s = input()\n    s1 = set()\n    count = 0\n    for c in s:\n        if not s1:\n            s1.add(c)\n        elif c in s1:\n            count += len(s1) - 1\n            s1 = set()\n        else:\n            s1.add(c)\n    print(count + len(s1))", "for _ in range(int(input())):\n    s = input()\n    st = set()\n    ans = 0\n    for i in s:\n        if i in st:\n            ans += 2\n            st = set()\n        else:\n            st.add(i)\n    print(len(s) - ans)", "def minoperations(s):\n    n = len(s)\n    f = [0] * 26\n    ans = 0\n    for c in s:\n        if f[ord(c) - ord('a')]:\n            ans += 2\n            f = [0] * 26\n        else:\n            f[ord(c) - ord('a')] = 1\n    return n - ans\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(minoperations(s))", "def endpoint(string, start, end):\n    letters = []\n    for i in range(start, end):\n        if string[i] in letters:\n            return i\n        letters.append(string[i])\n    return -1\nt = int(input())\noutput = []\nfor i in range(t):\n    string = input()\n    n = len(string)\n    pos = -1\n    pairs = 0\n    while 1 == 1:\n        pos = endpoint(string, pos + 1, n)\n        if pos == -1:\n            break\n        pairs += 1\n    output.append(n - pairs * 2)\nfor i in range(t):\n    print(output[i])", "n = int(input())\nfor _ in range(n):\n    x = input()\n    res = 0\n    mp = {}\n    for i in range(len(x)):\n        if x[i] in mp:\n            res += 2\n            mp.clear()\n        else:\n            mp[x[i]] = 1\n    print(len(x) - res)", "for _ in range(int(input())):\n    line = input()\n    n = len(line)\n    wset = set()\n    recorded = 0\n    for ch in line:\n        if ch in wset:\n            recorded += 2\n            wset = set()\n        else:\n            wset.add(ch)\n    print(n - recorded)", "_ = int(input())\nfor __ in range(_):\n    word = input()\n    s = set()\n    out = 0\n    for letter in word:\n        if letter in s:\n            out += 2\n            s = set()\n        else:\n            s.add(letter)\n    print(len(word) - out)", "def c(a):\n    prev = [0] * 26\n    m = 0\n    mas = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for i in range(len(a)):\n        b = mas.index(a[i])\n        if prev[b] == 0:\n            prev[b] = 1\n        else:\n            prev = [0] * 26\n            m += 2\n    return len(a) - m\na = int(input())\nfor i in range(a):\n    b = input()\n    print(c(b))", "for i in range(int(input())):\n    s = input()\n    s1 = ''\n    l = len(s)\n    for j in s:\n        if j in s1:\n            l -= 2\n            s1 = ''\n        else:\n            s1 = s1 + j\n    print(l)", "from collections import defaultdict\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\nt = int(input())\nfor _ in range(t):\n    dic = defaultdict(int)\n    s = input()\n    sol = 0\n    idx = 0\n    for i in range(len(s)):\n        if dic[s[i]]:\n            dic[s[i]] -= 1\n            sol += sum(dic.values())\n            dic = defaultdict(int)\n        else:\n            dic[s[i]] += 1\n    sol += sum(dic.values())\n    print(sol)", "T = int(input())\nfor K in range(T):\n    a = input()\n    l = []\n    r = []\n    f = 0\n    for i in a:\n        if not l.__contains__(i):\n            l.append(i)\n        else:\n            l.remove(i)\n            r.extend(l)\n            l.clear()\n    r.extend(l)\n    print(len(r))", "l = []\nn = int(input())\nc = 0\nfor i in range(n):\n    s = input()\n    for i in s:\n        if i not in l:\n            l.append(i)\n            c += 1\n        else:\n            c -= 1\n            l = []\n    print(c)\n    l = []\n    c = 0"]