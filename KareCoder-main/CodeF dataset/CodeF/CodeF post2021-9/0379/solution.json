["import math\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    print('YNEOS'[any((y % math.gcd(x, z) for (x, y, z) in zip(a, a[1:], a[2:])))::2])", "import math\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    print('YNEOS'[any((y % math.gcd(x, z) for (x, y, z) in zip(a, a[1:], a[2:])))::2])", "import math\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    print('YNEOS'[any((y % math.gcd(x, z) for (x, y, z) in zip(a, a[1:], a[2:])))::2])", "import math\nfor sdfsfgg in [*open(0)][2::2]:\n    a = (*map(int, sdfsfgg.split()),)\n    print('YNEOS'[any((y % math.gcd(x, z) for (x, y, z) in zip(a, a[1:], a[2:])))::2])", "import math\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    print('YNEOS'[any((y % math.gcd(x, z) for (x, y, z) in zip(a, a[1:], a[2:])))::2])", "import math\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    print('YNEOS'[any((y % math.gcd(x, z) for (x, y, z) in zip(a, a[1:], a[2:])))::2])", "import math\nfor sa in [*open(0)][2::2]:\n    a = (*map(int, sa.split()),)\n    print('YNEOS'[any((y % math.gcd(x, z) for (x, y, z) in zip(a, a[1:], a[2:])))::2])", "import math\nfor k in [*open(0)][2::2]:\n    a = (*map(int, k.split()),)\n    print('YNEOS'[any((y % math.gcd(x, z) for (x, y, z) in zip(a, a[1:], a[2:])))::2])", "from math import gcd\n\ndef solve():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    for i in range(1, n - 1):\n        g = gcd(a[i - 1], a[i + 1])\n        if a[i] % g:\n            print('NO')\n            return\n    print('YES')\nt = int(input())\nfor _ in range(t):\n    solve()", "import math\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    print('YNEOS'[any((y % math.gcd(x, z) for (x, y, z) in zip(a, a[1:], a[2:])))::2])", "import math\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    print('YNEOS'[any((y % math.gcd(x, z) for (x, y, z) in zip(a, a[1:], a[2:])))::2])", "import math\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    print('YNEOS'[any((y % math.gcd(x, z) for (x, y, z) in zip(a, a[1:], a[2:])))::2])", "import math\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    print('YNEOS'[any((y % math.gcd(x, z) for (x, y, z) in zip(a, a[1:], a[2:])))::2])", "import math\nt = int(input())\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n <= 2:\n        print('YES')\n        return\n    for i in range(1, n - 1):\n        if arr[i] % math.gcd(arr[i - 1], arr[i + 1]) != 0:\n            print('NO')\n            return\n    print('YES')\nwhile t:\n    solve()\n    t -= 1", "def fast_sum(a, b, s):\n    b -= (b - a) % s\n    return int((a + b) / 2 * ((b - a) / s + 1))\nfrom math import gcd\n\ndef main():\n    res = []\n    for t in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if n == 1 or n == 2:\n            res.append('YES')\n            continue\n        for i in range(n):\n            if i > 0 and i < n - 1:\n                if a[i] % gcd(a[i - 1], a[i + 1]) != 0:\n                    res.append('NO')\n                    break\n        else:\n            res.append('YES')\n    print('\\n'.join(res))\nmain()", "import math\nn = int(input())\nfor i in range(0, n):\n    x = int(input())\n    a = list(map(int, input().split()))\n    if len(a) == 1:\n        print('YES')\n    else:\n        bl = True\n        for k in range(0, len(a) - 2):\n            if a[k + 1] % math.gcd(a[k], a[k + 2]) != 0:\n                bl = False\n                print('NO')\n                break\n        if bl:\n            print('YES')", "import os\nimport math\nimport collections\nimport bisect\nimport functools\nimport itertools\nimport heapq\n\ndef get_lcm(x, y):\n    return x * y // math.gcd(x, y)\n\ndef solve(a, n):\n    return 'YES' if all((a[i + 1] % math.gcd(a[i], a[i + 2]) == 0 for i in range(n - 2))) else 'NO'\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(a, n))", "import sys\nimport math\ninput = sys.stdin.readline\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = 1\n    for i in range(n - 2):\n        if a[i + 1] % math.gcd(a[i], a[i + 2]) > 0:\n            p = 0\n            break\n    if p == 1:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(1, n - 1):\n        if a[i] % math.gcd(a[i - 1], a[i + 1]) != 0:\n            print('NO')\n            break\n    else:\n        print('YES')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(1, n - 1):\n        if a[i] % math.gcd(a[i - 1], a[i + 1]) != 0:\n            print('NO')\n            break\n    else:\n        print('YES')", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    k = 0\n    if n == 1 or n == 2:\n        print('YES')\n    else:\n        for i in range(n - 2):\n            g = math.gcd(a[i], a[i + 2])\n            if a[i + 1] % g == 0:\n                continue\n            else:\n                k = 1\n                print('NO')\n                break\n        if k == 0:\n            print('YES')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 1\n    if len(set(l)) == 1:\n        print('YES')\n        continue\n    for i in range(1, n - 1):\n        if l[i] % math.gcd(l[i - 1], l[i + 1]):\n            c = 0\n            break\n    if c:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    print('YNEOS'[any((y % math.gcd(x, z) for (x, y, z) in zip(a, a[1:], a[2:])))::2])", "import math\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    print('YNEOS'[any((y % math.gcd(x, z) for (x, y, z) in zip(a, a[1:], a[2:])))::2])", "R = lambda : map(int, input().split())\n(t,) = R()\nimport math as m\nfor _ in range(t):\n    (n,) = R()\n    a = list(R())\n    s = [a[0]] + a\n    q = 'YES'\n    for i in range(n - 2):\n        if a[i + 1] % m.gcd(a[i], a[i + 2]) != 0:\n            q = 'NO'\n            break\n    print(q)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    flag = False\n    k = len(a)\n    for i in range(k - 2):\n        b = gcd(a[i], a[i + 2])\n        if a[i + 1] % b > 0:\n            flag = True\n            break\n    if flag:\n        print('NO')\n    else:\n        print('YES')", "def gcd(a, b):\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a\n\ndef solve(a):\n    for i in range(len(a) - 2):\n        g = gcd(a[i], a[i + 2])\n        if a[i + 1] % g != 0:\n            return False\n    return True\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    if solve(a):\n        print('YES')\n    else:\n        print('NO')", "import math\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    curr_gcd = 1\n    flag = 0\n    for i in range(n - 2):\n        curr_gcd = math.gcd(a[i], a[i + 2])\n        if a[i + 1] % curr_gcd != 0:\n            print('NO')\n            flag = 1\n            break\n    if flag == 1:\n        continue\n    print('YES')", "import math\nimport sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    prev = arr[0]\n    for i in range(n - 1):\n        b = arr[i] * arr[i + 1] // math.gcd(arr[i], arr[i + 1])\n        if math.gcd(b, prev) != arr[i]:\n            return 'NO'\n        prev = b\n    return 'YES'\nfor _ in range(int(input())):\n    print(solve())", "import math\nfrom collections import defaultdict\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 'YES'\n    if n <= 2:\n        print(ans)\n        continue\n    for j in range(n - 2):\n        x = math.gcd(a[j], a[j + 2])\n        if a[j + 1] % x == 0 or x == 1:\n            continue\n        else:\n            ans = 'NO'\n            break\n    print(ans)", "def hcf(a, b):\n    if a == 0:\n        return b\n    return hcf(b % a, a)\nfor d in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    for a in range(n - 1, 1, -1):\n        if ar[a - 1] % hcf(ar[a], ar[a - 2]) != 0:\n            print('NO')\n            break\n    else:\n        print('YES')", "import math\n\ndef lcm(a, b):\n    return a * b / math.gcd(a, b)\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split(' ')]\n    ans = True\n    for i in range(1, n - 1):\n        if a[i] % math.gcd(a[i - 1], a[i + 1]) != 0:\n            ans = False\n            break\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "import sys, math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print('YES')\n    else:\n        for i in range(1, n - 1):\n            if a[i] != a[i - 1] and a[i] != a[i + 1]:\n                y = math.gcd(a[i], a[i - 1])\n                x = math.gcd(a[i], a[i + 1])\n                if math.gcd(a[i - 1], a[i + 1]) == 1 or math.gcd(a[i - 1] // y, a[i + 1] // x) == 1:\n                    continue\n                else:\n                    print('NO')\n                    break\n        else:\n            print('YES')", "from math import gcd\ntt = int(input())\nfor i in range(tt):\n    n = int(input())\n    L = list(map(int, input().split()))\n    flag = True\n    for i in range(1, len(L) - 1):\n        if L[i] < gcd(L[i - 1], L[i + 1]) or L[i] % gcd(L[i - 1], L[i + 1]) != 0:\n            flag = False\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        res = True\n    for i in range(1, n - 1):\n        x = math.gcd(a[i - 1], a[i + 1])\n        if a[i] % x != 0:\n            res = False\n            break\n    if not res:\n        print('NO')\n    else:\n        print('YES')", "from math import gcd\nnumber_of_tests = int(input())\nsolutions = []\nfor i in range(number_of_tests):\n    length = int(input())\n    a = [int(c) for c in input().split()]\n    if length == 1 or length == 2:\n        solutions.append('YES')\n        continue\n    for i in range(length - 2):\n        divs = divmod(a[i + 1], gcd(a[i], a[i + 2]))\n        if divs[0] < 1 or divs[1] != 0:\n            solutions.append('NO')\n            break\n    else:\n        solutions.append('YES')\nfor i in solutions:\n    print(i)", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = a[0]\n    for i in range(n - 1):\n        b = a[i] * a[i + 1] // gcd(a[i], a[i + 1])\n        if gcd(x, b) != a[i]:\n            print('NO')\n            break\n        x = b\n    else:\n        print('YES')", "from math import gcd\n\ndef lcm(i, j):\n    return i * j // gcd(i, j)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [a[0]] + [lcm(a[i], a[i + 1]) for i in range(n - 1)] + [a[-1]]\n    if a == [gcd(b[i], b[i + 1]) for i in range(n)]:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef res():\n    n = int(input())\n    a = [1] + list(map(int, input().split())) + [1]\n    b = (n + 2) * [1]\n    for k in range(1, n + 2):\n        b[k] = lcm(a[k], a[k - 1])\n    for k in range(1, n + 1):\n        if gcd(b[k], b[k + 1]) != a[k]:\n            return 'NO'\n    return 'YES'\n\ndef main():\n    N = int(input())\n    for i in range(N):\n        print(res())\nmain()", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        good = True\n        for i in range(n - 2):\n            if a[i + 1] % gcd(a[i], a[i + 2]) != 0:\n                good = False\n                break\n        if good:\n            print('YES')\n        else:\n            print('NO')\nmain()", "import math\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    a = input().split()\n    for i in range(n):\n        a[i] = int(a[i])\n    if n == 1 or n == 2:\n        print('YES')\n        continue\n    q = True\n    for i in range(1, n - 1):\n        if a[i] % math.gcd(a[i - 1], a[i + 1]) != 0:\n            q = False\n    if q:\n        print('YES')\n    if not q:\n        print('NO')", "import math\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\ndef cal(n, arr):\n    if n == 1:\n        return True\n    b = [arr[0]]\n    for i in range(n - 1):\n        b.append(lcm(arr[i], arr[i + 1]))\n    b.append(arr[-1])\n    c = []\n    for i in range(n):\n        c.append(math.gcd(b[i], b[i + 1]))\n    return c == arr\nfor jj in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    if cal(n, arr):\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)\n\ndef foo(n, a):\n    b = [1] * (n + 1)\n    for i in range(n):\n        b[i] = lcm(b[i], a[i])\n        b[i + 1] = a[i]\n    for i in range(n):\n        if a[i] != math.gcd(b[i], b[i + 1]):\n            return False\n    return True\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    if foo(n, a):\n        print('YES')\n    else:\n        print('NO')", "import math\nimport collections\nimport bisect\nimport heapq\nfrom collections import deque\nfrom math import sqrt, ceil, floor\n\ndef inp_arr():\n    return list(map(int, input().strip().split(' ')))\n\ndef inp_int():\n    return int(input())\n\ndef inp_str():\n    return input()\n\ndef solve():\n    (n,) = inp_arr()\n    a = inp_arr()\n    last = a[0]\n    for i in range(0, n - 1):\n        temp = a[i] * a[i + 1]\n        temp = temp // math.gcd(a[i], a[i + 1])\n        if math.gcd(temp, last) != a[i]:\n            print('NO')\n            return\n        last = temp\n    print('YES')\n    return\ntt = inp_int()\nfor t in range(tt):\n    solve()", "from math import gcd\n\ndef is_good(cand, gcds):\n    for i in range(len(gcds)):\n        if gcd(cand[i], cand[i + 1]) != gcds[i]:\n            return False\n    return True\n\ndef find_candidate(gcds):\n    cand = [1]\n    for x in gcds:\n        if cand[-1] % x != 0:\n            cand[-1] *= x // gcd(cand[-1], x)\n        cand.append(x)\n    return cand\n\ndef solve():\n    _ = int(input())\n    a = [int(x) for x in input().split()]\n    cand = find_candidate(a)\n    return is_good(cand, a)\nt = int(input())\nfor _ in range(t):\n    if solve():\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\n\ndef lcm(a, b):\n    return abs(a * b) // gcd(a, b)\n\ndef func(a, n):\n    if n <= 2:\n        return 'YES'\n    b = [0 for _ in range(n + 1)]\n    b[0] = a[0]\n    for i in range(n - 1):\n        b[i + 1] = lcm(a[i], a[i + 1])\n        if gcd(b[i + 1], b[i]) != a[i]:\n            return 'NO'\n    return 'YES'\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = [int(x) for x in list(input().split(' '))]\n    print(func(a, n))", "t = int(input())\n\ndef gcd(a, b):\n    return gcd(b, a % b) if b != 0 else a\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    f = True\n    for i in range(1, n - 1):\n        if arr[i] % gcd(arr[i - 1], arr[i + 1]) != 0:\n            f = False\n            break\n    print('YES' if f else 'NO')", "import math\ngcd = math.gcd\nlcm = lambda x, y: x // gcd(x, y) * y\n\ndef solve(a):\n    b = [a[0]]\n    for i in range(0, len(a) - 1):\n        b.append(lcm(a[i], a[i + 1]))\n    b.append(a[-1])\n    return b\n\ndef check(a, b):\n    return all([a[i] == gcd(b[i], b[i + 1]) for i in range(len(a))])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = solve(a)\n    print('YES' if check(a, b) else 'NO')", "import math\ngcd = math.gcd\nlcm = lambda x, y: x // gcd(x, y) * y\nsolve = lambda a: [a[0]] + [lcm(a[i], a[i + 1]) for i in range(0, len(a) - 1)] + [a[-1]]\ncheck = lambda a, b: all([a[i] == gcd(b[i], b[i + 1]) for i in range(len(a))])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print('YES' if check(a, solve(a)) else 'NO')", "import math\n\ndef main():\n    for t in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        b = [a[0]]\n        for i in range(n - 1):\n            b.append(a[i] * a[i + 1] // math.gcd(a[i], a[i + 1]))\n        b.append(a[-1])\n        flag = True\n        for i in range(len(b) - 1):\n            if math.gcd(b[i], b[i + 1]) != a[i]:\n                flag = False\n                break\n        print('YES' if flag else 'NO')\nmain()", "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    b = [0 for x in range(n + 1)]\n    for i in range(1, n):\n        b[i] = lcm(arr[i], arr[i - 1])\n    (b[0], b[n]) = (arr[0], arr[-1])\n    f = 1\n    for i in range(n):\n        if arr[i] != gcd(b[i], b[i + 1]):\n            f = 0\n            break\n    if f:\n        print('YES')\n    else:\n        print('NO')", "from math import *\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = [1] + a + [1]\n    b = [1] * (n + 2)\n    for i in range(1, n + 2):\n        b[i] = lcm(a[i], a[i - 1])\n    for i in range(1, n + 1):\n        if gcd(b[i], b[i + 1]) != a[i]:\n            print('NO')\n            return\n    print('YES')\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    na = int(input())\n    a = list(map(int, input().split()))\n    x = a[0]\n    for i in range(na - 1):\n        b = a[i] * a[i + 1] // gcd(a[i], a[i + 1])\n        if gcd(x, b) != a[i]:\n            print('NO')\n            break\n        x = b\n    else:\n        print('YES')", "import math\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * (n + 1)\n    for i in range(n + 1):\n        if i == 0:\n            b[i] = a[i]\n        elif i == n:\n            b[i] = a[n - 1]\n        else:\n            b[i] = a[i] * a[i - 1] // math.gcd(a[i - 1], a[i])\n    flag = True\n    for i in range(n):\n        if math.gcd(b[i], b[i + 1]) != a[i]:\n            flag = False\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "import math\n\ndef lcm(x, y):\n    return x // math.gcd(x, y) * y\n\ndef solve():\n    n = int(input())\n    a = [0] * (n + 2)\n    b = [0] * (n + 2)\n    a[1:n + 1] = list(map(int, input().split()))\n    a[0] = a[n + 1] = 1\n    for i in range(1, n + 2):\n        b[i] = lcm(a[i - 1], a[i])\n    for i in range(1, n + 1):\n        if a[i] != math.gcd(b[i], b[i + 1]):\n            print('NO')\n            return\n    print('YES')\nt = int(input())\nfor _ in range(t):\n    solve()", "from math import *\nfor z in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(1, n - 1):\n        if 1 != gcd(a[i - 1] // gcd(a[i - 1], a[i]), a[i + 1] // gcd(a[i + 1], a[i])) and a[i] + a[i - 1] + a[i + 1] != 3:\n            print('NO')\n            break\n    else:\n        print('YES')", "import math\nfor t in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split(' ')))\n    res = [lst[0]]\n    for i in range(n - 1):\n        res.append(lst[i] * lst[i + 1] // math.gcd(lst[i], lst[i + 1]))\n        if math.gcd(res[-1], res[-2]) != lst[i]:\n            print('NO')\n            break\n    else:\n        print('YES')", "import math\n\ndef lcm(a, b):\n    return int(a * b / math.gcd(a, b))\n\ndef solve(a):\n    b = [0] * len(a)\n    b[0] = a[0]\n    for i in range(1, len(a)):\n        b[i] = lcm(a[i], a[i - 1])\n    for i in range(1, len(a)):\n        if math.gcd(b[i], b[i - 1]) != a[i - 1]:\n            return 'NO'\n    return 'YES'\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        n = int(input())\n        a = [int(e) for e in input().split(' ')]\n        print(solve(a))\nmain()", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    L = list(map(int, input().split()))\n    curr = True\n    for j in range(1, n - 1):\n        if L[j] < math.gcd(L[j - 1], L[j + 1]) or L[j] % math.gcd(L[j - 1], L[j + 1]) != 0:\n            curr = False\n            break\n    if curr:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nfor i in range(int(input())):\n    input()\n    a = list(map(int, input().split()))\n    b = [a[0]]\n    for i in range(1, len(a)):\n        b.append(a[i - 1] * a[i] // gcd(a[i - 1], a[i]))\n        if gcd(b[i - 1], b[i]) != a[i - 1]:\n            print('NO')\n            break\n    else:\n        print('YES')", "def gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = input().split()\n    arr = [int(i) for i in arr]\n    ok = True\n    for i in range(n - 2):\n        val = gcd(arr[i], arr[i + 2])\n        if arr[i + 1] % val != 0:\n            ok = False\n            break\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "def Gcd(x, y):\n    while y:\n        tmp = y\n        y = x % y\n        x = tmp\n    return x\n\ndef Solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = a.copy()\n    b.append(a[-1])\n    for i in range(n):\n        b[i + 1] = b[i + 1] * a[i] // Gcd(b[i + 1], a[i])\n    ok = True\n    for i in range(n):\n        if Gcd(b[i], b[i + 1]) > a[i]:\n            ok = False\n            break\n    print('YES' if ok else 'NO')\n\ndef main():\n    t = int(input())\n    for test in range(t):\n        Solve()\nmain()", "from math import gcd\nfor _ in range(int(input())):\n    input()\n    a = list(map(int, input().split()))\n    b = [a[0]]\n    for i in range(1, len(a)):\n        b.append(a[i - 1] * a[i] // gcd(a[i - 1], a[i]))\n        if gcd(b[i - 1], b[i]) != a[i - 1]:\n            print('NO')\n            break\n    else:\n        print('YES')", "from math import gcd\nimport sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    b = [nums[0]]\n    for i in range(1, n):\n        b.append(nums[i - 1] * nums[i] // gcd(nums[i - 1], nums[i]))\n    b.append(nums[-1])\n    res = 'YES'\n    for i in range(n):\n        if gcd(b[i], b[i + 1]) > nums[i]:\n            res = 'NO'\n            break\n    print(res)", "import math\nt = int(input())\n\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    if n == 1:\n        print('YES')\n    elif n == 2:\n        print('YES')\n    else:\n        fail = False\n        prev = lcm(a[0], a[1])\n        for i in range(1, n - 1):\n            tmp = lcm(a[i], a[i + 1])\n            if math.gcd(tmp, prev) != a[i]:\n                fail = True\n            prev = tmp\n        if fail:\n            print('NO')\n        else:\n            print('YES')", "import os\nimport math\nimport collections\nimport bisect\nimport functools\nimport itertools\nimport heapq\n\ndef get_lcm(x, y):\n    return x * y // math.gcd(x, y)\n\ndef solve(a, n):\n    for i in range(n - 2):\n        g01 = math.gcd(a[i], a[i + 1])\n        g12 = math.gcd(a[i + 1], a[i + 2])\n        if math.gcd(a[i] // g01, a[i + 2] // g12) != 1:\n            return 'NO'\n    return 'YES'\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(a, n))", "import sys\ninput = sys.stdin.readline\nimport math\nfor t in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split(' ')))\n    res = [lst[0]]\n    for i in range(n - 1):\n        res.append(lst[i] * lst[i + 1] // math.gcd(lst[i], lst[i + 1]))\n        if math.gcd(res[-1], res[-2]) != lst[i]:\n            print('NO')\n            break\n    else:\n        print('YES')", "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nt = int(input())\nfor _ in range(t):\n    a = int(input())\n    arr = list(map(int, input().split()))\n    arr2 = [1 for i in range(a + 1)]\n    for i in range(1, a):\n        arr2[i] = lcm(arr[i - 1], arr[i])\n    f = False\n    for i in range(a):\n        if gcd(arr2[i], arr2[i + 1]) > arr[i]:\n            print('NO')\n            f = True\n            break\n    if not f:\n        print('YES')", "def get_gcd(a, b):\n    while b > 0:\n        (a, b) = (b, a % b)\n    return a\n\ndef get_lcm(a, b):\n    gcd = get_gcd(a, b)\n    lcm = a * b // gcd\n    return lcm\noutput = ''\nfor caseno in range(int(input())):\n    answer = 'YES'\n    n = int(input())\n    a = list(map(int, input().split()))\n    preva = a[0]\n    prevb = a[0]\n    for i in a[1:]:\n        currb = get_lcm(preva, i)\n        if get_gcd(currb, prevb) != preva:\n            answer = 'NO'\n            break\n        preva = i\n        prevb = currb\n    output += str(answer) + '\\n'\nprint(output)", "from math import gcd\n\ndef lcm(a, b):\n    return int(a / gcd(a, b) * b)\nn = int(input())\nfor _ in range(n):\n    a = int(input())\n    b = list(map(int, input().split()))\n    b.insert(0, 1)\n    b.insert(a + 1, 1)\n    c = [lcm(b[i], b[i - 1]) for i in range(1, a + 2)]\n    for i in range(a):\n        if gcd(c[i], c[i + 1]) != b[i + 1]:\n            print('NO')\n            break\n    else:\n        print('YES')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = [1] + list(map(int, input().split())) + [1]\n    b = [a[i - 1] * a[i] // math.gcd(a[i - 1], a[i]) for i in range(1, n + 1)]\n    for i in range(1, n):\n        if math.gcd(b[i - 1], b[i]) != a[i]:\n            print('NO')\n            break\n    else:\n        print('YES')", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    if n in [1, 2] or len(list(set(a))) == 1:\n        print('YES')\n        continue\n    b = [-1]\n    for i in range(n - 1):\n        b.append(a[i] * a[i + 1] // gcd(a[i], a[i + 1]))\n    b.append(-1)\n    answer = 'YES'\n    for i in range(1, n - 1):\n        if gcd(b[i], b[i + 1]) != a[i]:\n            answer = 'NO'\n            break\n    print(answer)", "def gcd(y, z):\n    while z:\n        (y, z) = (z, y % z)\n    return abs(y)\n\ndef solve():\n    n = int(input())\n    a = input().split()\n    a = [int(x) for x in a]\n    b = [a[0], a[0]]\n    for i in range(1, n):\n        x = b[-1]\n        if x % a[i]:\n            b[-1] = x * a[i] / gcd(x, a[i])\n        b.append(a[i])\n    for i in range(n):\n        if gcd(b[i], b[i + 1]) != a[i]:\n            print('NO')\n            return\n    print('YES')\nt = int(input())\nfor k in range(t):\n    solve()", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return abs(x)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    lst = []\n    lst.append(a[0])\n    lst.append(a[0])\n    for i in range(1, n):\n        g = a[i]\n        (x, y) = (lst[-1], lst[-2])\n        if gcd(x, g) == g:\n            lst.append(g)\n        else:\n            z = g // gcd(g, x)\n            x = x * z\n            if gcd(x, y) == a[i - 1]:\n                lst.append(g)\n                lst[-2] = x\n            else:\n                print('NO')\n                break\n    else:\n        print('YES')", "from math import gcd\n\ndef N():\n    return int(input())\n\ndef A():\n    return [int(x) for x in input().split()]\n\ndef S():\n    return input()\nfor _ in range(N()):\n    n = N()\n    if 'rgw3t3i29' == 83555:\n        print('Tanmay')\n    a = A()\n    f = True\n    prev = a[0]\n    for i in range(n - 1):\n        lcm = int(a[i] * a[i + 1] / gcd(a[i], a[i + 1]))\n        gc = gcd(prev, lcm)\n        prev = lcm\n        if gc != a[i]:\n            print('NO')\n            f = False\n            break\n    if f:\n        print('YES')", "import math\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\nt = int(input())\nwhile t:\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = True\n    for i in range(n - 2):\n        if math.gcd(lcm(a[i], a[i + 1]), lcm(a[i + 1], a[i + 2])) != a[i + 1]:\n            ans = False\n            break\n    if ans:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    flag = True\n    b = [0] * (n + 1)\n    b[0] = a[0]\n    b[n] = a[n - 1]\n    for j in range(1, n):\n        b[j] = a[j - 1] * a[j] // math.gcd(a[j - 1], a[j])\n    for j in range(n):\n        if a[j] != math.gcd(b[j], b[j + 1]):\n            flag = False\n            break\n    print('YES') if flag else print('NO')", "import math\nfor i in range(int(input())):\n    x = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * (x + 1)\n    b[0] = a[0]\n    b[1] = a[0]\n    for i in range(1, x):\n        b[i + 1] = a[i]\n        g = math.gcd(b[i], a[i])\n        b[i] = b[i] * a[i] // g\n    check = 0\n    for i in range(x):\n        if math.gcd(b[i], b[i + 1]) != a[i]:\n            check = 1\n            break\n    if check:\n        print('NO')\n    else:\n        print('YES')", "from math import gcd\n\ndef lcm(a, b):\n    g = gcd(a, b)\n    return int(a * b / g)\nn = int(input())\nresult = []\nfor i in range(n):\n    l = int(input())\n    a = [1] + [int(x) for x in input().split()]\n    b = [1]\n    for j in range(1, l + 1):\n        b.append(lcm(a[j], a[j - 1]))\n    yes = True\n    for j in range(l):\n        if gcd(b[j], b[j + 1]) != a[j]:\n            yes = False\n            break\n    if yes:\n        result.append('YES')\n    else:\n        result.append('NO')\nprint(*result, sep='\\n')", "from math import *\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n <= 2:\n        print('YES')\n        continue\n    prev = l[0]\n    a = lcm(l[0], l[1])\n    b = lcm(l[1], l[2])\n    for i in range(1, n):\n        if gcd(a, b) != l[i]:\n            print('NO')\n            break\n        if i != n - 2:\n            a = b\n            b = lcm(l[i + 1], l[i + 2])\n        else:\n            print('YES')\n            break\n    else:\n        print('YES')", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [a[0]]\n    sum1 = 0\n    for i in range(n - 1):\n        b.append(a[i] * a[i + 1] // math.gcd(a[i], a[i + 1]))\n    b.append(a[n - 1])\n    for j in range(n):\n        nod = math.gcd(b[j], b[j + 1])\n        if a[j] == nod:\n            sum1 += 1\n    if sum1 == n:\n        print('YES')\n    else:\n        print('NO')", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [a[0]]\n    for i in range(1, n):\n        b.append(a[i - 1] * a[i] // math.gcd(a[i - 1], a[i]))\n    b.append(a[n - 1])\n    answer = 'YES'\n    for i in range(n):\n        if math.gcd(b[i], b[i + 1]) != a[i]:\n            answer = 'NO'\n    print(answer)", "import math\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 'YES'\n    b = [a[0]]\n    for i in range(1, n):\n        b.append(a[i - 1] * a[i] // math.gcd(a[i], a[i - 1]))\n    b.append(a[n - 1])\n    for j in range(n):\n        if math.gcd(b[j], b[j + 1]) != a[j]:\n            ans = 'NO'\n    print(ans)", "import math\nimport sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = [a[0]]\n    for i in range(n - 1):\n        b.append(a[i] * a[i + 1] // math.gcd(a[i], a[i + 1]))\n    b.append(a[-1])\n    f = 1\n    for i in range(n):\n        if math.gcd(b[i], b[i + 1]) != a[i]:\n            f = 0\n            break\n    if f:\n        print('YES')\n    else:\n        print('NO')", "from sys import setrecursionlimit, stdin\nsetrecursionlimit(1 << 20)\nreadline = stdin.readline\nMOD = 998244353\n\ndef I():\n    return int(readline())\n\ndef ST():\n    return readline()[:-1]\n\ndef LI():\n    return list(map(int, readline().split()))\n\ndef LII():\n    return list(map(lambda x: int(x) - 1, readline().split()))\n\ndef LF(x, func):\n    return [func() for _ in [0] * x]\n\ndef SPI():\n    return map(int, readline().split())\n\ndef SPII():\n    return map(lambda x: int(x) - 1, readline().split())\n\ndef FIE(x):\n    return [readline()[:-1] for _ in [0] * x]\n\ndef gcd(x, y):\n    while x:\n        (x, y) = (y % x, x)\n    return y\n\ndef lcm(a, b):\n    return a // gcd(a, b) * b\n\ndef solve():\n    N = I()\n    A = LI()\n    B = []\n    for i in range(N + 1):\n        if i == 0:\n            b = A[i]\n        elif i == N:\n            b = A[i - 1]\n        else:\n            b = lcm(A[i - 1], A[i])\n        B.append(b)\n    AA = []\n    for i in range(N):\n        AA.append(gcd(B[i], B[i + 1]))\n    print('YES' if A == AA else 'NO')\nt = I()\nfor _ in range(t):\n    solve()", "import math\n\ndef solve():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [1 for i in range(n + 1)]\n    for i in range(n):\n        b[i] *= a[i] // math.gcd(b[i], a[i])\n        b[i + 1] *= a[i] // math.gcd(b[i + 1], a[i])\n    for i in range(n):\n        if a[i] == math.gcd(b[i], b[i + 1]):\n            continue\n        print('NO')\n        return\n    print('YES')\nt = int(input())\nfor _ in range(t):\n    solve()", "import math\nfor i in range(int(input())):\n    x = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * (x + 1)\n    b[0] = a[0]\n    b[1] = a[0]\n    for i in range(1, x):\n        b[i + 1] = a[i]\n        g = math.gcd(b[i], a[i])\n        b[i] = b[i] * a[i] // g\n    check = 0\n    for i in range(x):\n        if math.gcd(b[i], b[i + 1]) != a[i]:\n            check = 1\n            break\n    if check:\n        print('NO')\n    else:\n        print('YES')", "def gcd(a, b):\n    x = max(a, b)\n    y = min(a, b)\n    temp = y\n    while temp > 0:\n        y = temp\n        temp = x % y\n        x = y\n    return x\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = [int(x) for x in input().split()]\n    if n == 1 or n == 2:\n        print('YES')\n    else:\n        for i in range(n - 2):\n            if nums[i + 1] % gcd(nums[i], nums[i + 2]) != 0:\n                print('NO')\n                break\n        else:\n            print('YES')", "import sys\nfrom math import sqrt, gcd, factorial, ceil, floor, pi, isqrt\nfrom collections import deque, Counter, OrderedDict\nfrom heapq import heapify, heappush, heappop\ninput = lambda : sys.stdin.readline()\nI = lambda : int(input())\nS = lambda : input().strip()\nM = lambda : map(int, input().strip().split())\nL = lambda : list(map(int, input().strip().split()))\nmod = 10 ** 9 + 7\nfor _ in range(I()):\n    n = I()\n    a = L()\n    b = [1] * (n + 1)\n    for i in range(n):\n        b[i] = b[i] * a[i] // gcd(b[i], a[i])\n        b[i + 1] = a[i]\n    ans = 'YES'\n    for i in range(n):\n        if a[i] != gcd(b[i], b[i + 1]):\n            ans = 'NO'\n            break\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = [arr[0]]\n    for i in range(n - 1):\n        a = arr[i] * arr[i + 1]\n        g = math.gcd(arr[i], arr[i + 1])\n        e = a // g\n        ans.append(e)\n    ans.append(arr[-1])\n    f = False\n    for i in range(n):\n        g = math.gcd(ans[i], ans[i + 1])\n        if arr[i] != g:\n            f = True\n            break\n    if f:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\n\ndef nod(a, b):\n    while a != 0 and b != 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n\ndef nok(a, b):\n    return a * b / nod(a, b)\n\ndef task():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.append(1)\n    b = []\n    for i in range(n + 1):\n        b.append(nok(a[i], a[i - 1]))\n    for i in range(n):\n        if nod(b[i], b[i + 1]) != a[i]:\n            return 'NO'\n    return 'YES'\nfor test in range(t):\n    print(task())", "import math\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    curr_gcd = 1\n    flag = 0\n    for i in range(n - 2):\n        curr_gcd = math.gcd(a[i], a[i + 2])\n        if a[i + 1] % curr_gcd != 0:\n            print('NO')\n            flag = 1\n            break\n    if flag == 1:\n        continue\n    print('YES')", "def gcd(m, n):\n    while n:\n        (m, n) = (n, m % n)\n    return m\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * (n + 1)\n    (b[0], b[n]) = (a[0], a[n - 1])\n    for i in range(1, n):\n        b[i] = a[i] / gcd(a[i - 1], a[i]) * a[i - 1]\n    flag = 1\n    for i in range(n):\n        if a[i] != gcd(b[i], b[i + 1]):\n            print('NO')\n            flag = 0\n            break\n    if flag:\n        print('YES')"]