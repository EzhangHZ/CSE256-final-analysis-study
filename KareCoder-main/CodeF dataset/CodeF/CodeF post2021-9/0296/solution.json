["import sys\ninput = lambda : sys.stdin.readline().strip()\nfor i in range(int(input())):\n    a = int(input())\n    b = []\n    c = set()\n    for i in range(a):\n        d = input()\n        b.append(d)\n        c.add(d)\n    count = ''\n    for j in b:\n        for k in range(1, len(j)):\n            if j[k:] in c and j[:k] in c:\n                count += '1'\n                break\n        else:\n            count += '0'\n    print(count)", "import sys\ninput = lambda : sys.stdin.readline().strip()\nn = int(input())\nfor i in range(n):\n    x = int(input())\n    nums = [input() for i in range(x)]\n    ans = ''\n    num = set(nums)\n    for i in nums:\n        check = True\n        for j in range(1, len(i)):\n            if i[j:] in num and i[:j] in num:\n                ans += '1'\n                check = False\n                break\n        if check:\n            ans += '0'\n    print(ans)", "import sys\ninput = lambda : sys.stdin.readline().strip()\nn = int(input())\nfor i in range(n):\n    x = int(input())\n    nums = [input() for i in range(x)]\n    ans = ''\n    g = {}\n    for i in nums:\n        g[i] = 1\n    for i in nums:\n        check = True\n        for j in range(1, len(i)):\n            if i[j:] in g and i[:j] in g:\n                ans += '1'\n                check = False\n                break\n        if check:\n            ans += '0'\n    print(ans)", "import sys\ninput = sys.stdin.readline\n\ndef print(*args, end='\\n', sep=' ') -> None:\n    sys.stdout.write(sep.join(map(str, args)) + end)\n\ndef dist(a, b):\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\ndef solve() -> None:\n    n = int(input())\n    words = [input().strip() for _ in range(n)]\n    words_set = set(words)\n    res = ''\n    for word in words:\n        for i in range(len(word) - 1):\n            if word[:i + 1] in words_set and word[i + 1:] in words_set:\n                res += '1'\n                break\n        else:\n            res += '0'\n    print(res)\n\ndef main() -> None:\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "import sys\nimport math\nfrom collections import Counter\n\ndef gi():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef gs():\n    return sys.stdin.readline().strip()\n\ndef fun(a):\n    l = len(a)\n    d = set(a)\n    ans = ''\n    for i in a:\n        ln = len(i)\n        j = 1\n        f = 1\n        while j < ln:\n            x = i[:j]\n            if x in d:\n                y = i[j:]\n                if y in d:\n                    ans += '1'\n                    f = 0\n                    break\n            j += 1\n        if f:\n            ans += '0'\n    return ans\nfor _ in range(int(input())):\n    x = int(input())\n    ans = []\n    for i in range(x):\n        ans.append(gs())\n    print(fun(ans))", "def solve():\n    n = int(input())\n    s = [input() for i in range(n)]\n    d = set(s)\n    ans = ''\n    for t in s:\n        for j in range(1, len(t)):\n            if t[:j] in d and t[j:] in d:\n                ans += '1'\n                break\n        else:\n            ans += '0'\n    print(ans)\nT = int(input())\nfor _ in range(T):\n    solve()", "import sys\nT = int(sys.stdin.readline())\n\ndef search(s, hash_set):\n    for p in range(1, len(s)):\n        s1 = s[:p]\n        if hash_set.__contains__(s1):\n            s2 = s[p:]\n            if hash_set.__contains__(s2):\n                return '1'\n    return '0'\nfor t in range(T):\n    n = int(sys.stdin.readline())\n    arr = [sys.stdin.readline().rstrip() for _ in range(n)]\n    hash_set = set(arr)\n    answer = []\n    for (i, s) in enumerate(arr):\n        answer.append(search(s, hash_set))\n    print(''.join(answer))", "def solve(arr, n):\n    st = set()\n    for i in arr:\n        st.add(i)\n    ans = ''\n    for s in arr:\n        answered = False\n        for i in range(len(s)):\n            if s[:i] in st and s[i:] in st:\n                ans += '1'\n                answered = True\n                break\n        if not answered:\n            ans += '0'\n    return ans\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        strings = []\n        for _ in range(n):\n            strings.append(input())\n        res = solve(strings, n)\n        print(res)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        strings_map = {}\n        strings = []\n        for _ in range(n):\n            string = input()\n            if string not in strings_map:\n                strings_map[string] = len(string)\n            strings.append(string)\n        result = ''\n        for string in strings:\n            added = False\n            for i in range(1, len(string)):\n                if string[:i] in strings_map and string[i:] in strings_map:\n                    added = True\n                    result += '1'\n                    break\n            if not added:\n                result += '0'\n        print(result)\nmain()", "x = int(input())\n\ndef cal(n, arr):\n    res = ['0'] * n\n    t = set(arr)\n    for i in range(n):\n        st = arr[i]\n        k = len(st)\n        if k == 1:\n            continue\n        for j in range(1, k):\n            if st[:j] in t and st[j:] in t:\n                res[i] = '1'\n                break\n    return ''.join(res)\nfor jj in range(x):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(input())\n    print(cal(n, arr))", "count = int(input())\n\ndef find_true(a, spis):\n    for p in range(len(a)):\n        if a[:p] in spis and a[p:] in spis:\n            return '1'\n    return '0'\nfor i in range(count):\n    count_of_strings = int(input())\n    string_of_results = ''\n    spisok = []\n    for j in range(count_of_strings):\n        spisok.append(input())\n    settium = set(spisok)\n    for c in spisok:\n        string_of_results += find_true(c, settium)\n    print(string_of_results)", "import sys\nfrom math import sqrt, ceil, floor, gcd\nfrom collections import Counter, defaultdict\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\n\ndef int_arr():\n    return list(map(int, input().split()))\n\ndef str_arr():\n    return list(map(str, input().split()))\n\ndef get_str():\n    return map(str, input().split())\n\ndef get_int():\n    return map(int, input().split())\n\ndef get_flo():\n    return map(float, input().split())\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    d = defaultdict(int)\n    arr = []\n    for i in range(n):\n        s = str(input())\n        d[s] = 1\n        arr.append(s)\n    ans = ''\n    for string in arr:\n        ok = False\n        for i in range(1, len(string)):\n            (x, y) = (string[:i], string[i:])\n            if x in d and y in d:\n                ans += '1'\n                ok = True\n                break\n        if not ok:\n            ans += '0'\n    print(ans)\nT = 1\nT = int(input())\nwhile T:\n    solve()\n    T -= 1", "for _ in range(int(input())):\n    num = int(input())\n    array = [input() for k in range(num)]\n    newArray = set(array)\n    final = []\n    for x in array:\n        for i in range(1, len(x)):\n            if x[:i] in newArray and x[i:] in newArray:\n                final.append('1')\n                break\n        else:\n            final.append('0')\n    print(''.join(final))", "def f(a, s):\n    for i in range(1, len(s)):\n        if s[:i] in a and s[i:] in a:\n            return 1\n    return 0\nt = input()\nfor i in range(int(t)):\n    n = int(input())\n    a = []\n    a_set = set()\n    for i in range(n):\n        k = input()\n        a.append(k)\n        a_set.add(k)\n    ans = ''\n    for i in range(n):\n        if f(a_set, a[i]):\n            ans += '1'\n        else:\n            ans += '0'\n    print(ans)", "def sol(arr):\n    sett = set(arr)\n    ans = []\n    for a in arr:\n        if any([(a[:i] in sett and a[i:]) in sett for i in range(1, len(a))]):\n            ans.append('1')\n        else:\n            ans.append('0')\n    return ans\nx = int(input())\nfor _ in range(x):\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(input().strip())\n    print(''.join(sol(arr)))", "for _ in range(int(input())):\n    n = int(input())\n    s = [input() for i in range(n)]\n    ss = set(s)\n    ans = ''\n    for st in s:\n        for j in range(1, len(st)):\n            if st[:j] in ss and st[j:] in ss:\n                ans += '1'\n                break\n        else:\n            ans += '0'\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    s = [input() for i in range(n)]\n    d = set(s)\n    a = ''\n    for i in s:\n        for j in range(len(i)):\n            if i[:j] in d and i[j:] in d:\n                a += '1'\n                break\n        else:\n            a += '0'\n    print(a)", "a = int(input())\nans = []\nfor i in range(a):\n    t = []\n    amount = int(input())\n    for j in range(amount):\n        string = str(input())\n        t.append(string)\n    s = set(t)\n    b = ''\n    for word in t:\n        for k in range(len(word)):\n            if word[k:] in s and word[:k] in s:\n                b += '1'\n                break\n        else:\n            b += '0'\n    ans.append(b)\nfor i in ans:\n    print(i)", "tests = int(input())\nfor _ in range(tests):\n    n = int(input())\n    words = []\n    for i in range(n):\n        words.append(input())\n    out = []\n    set_words = set(words)\n    for word in words:\n        for i in range(1, len(word)):\n            if word[:i] in set_words and word[i:] in set_words:\n                out.append('1')\n                break\n        else:\n            out.append('0')\n    print(''.join(out))", "import sys\nimport math\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_ls():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        ls = []\n        st = set()\n        for i in range(n):\n            x = input()\n            ls.append(x)\n            st.add(x)\n        ans = ''\n        for i in range(n):\n            ok = False\n            temp = ls[i]\n            temp_len = len(temp)\n            for k in range(1, temp_len):\n                if ls[i][:k] in st and ls[i][k:] in st:\n                    ok = True\n            if ok:\n                ans += '1'\n            else:\n                ans += '0'\n        print(ans)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    ans = ''\n    for i in range(n):\n        l.append(input())\n    d = dict(zip(l, l))\n    for j in l:\n        for k in range(1, len(j)):\n            if j[:k] in d and j[k:] in d:\n                ans += '1'\n                break\n        else:\n            ans += '0'\n    print(ans)", "def solve_task():\n    word_cnt = int(input())\n    words = [input() for i in range(word_cnt)]\n    words_set = set(words)\n    which_words_are_constructable = ''\n    for word in words:\n        is_constructable = False\n        for division_idx in range(1, len(word)):\n            substr_left = word[:division_idx]\n            substr_right = word[division_idx:]\n            if substr_left in words_set and substr_right in words_set:\n                is_constructable = True\n                break\n        which_words_are_constructable += '1' if is_constructable else '0'\n    return which_words_are_constructable\ntestcases_cnt = int(input())\nwhile testcases_cnt:\n    print(solve_task())\n    testcases_cnt -= 1", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    s = [input() for i in range(n)]\n    d = set(s)\n    ans = ''\n    for t in s:\n        for j in range(1, len(t)):\n            if t[:j] in d and t[j:] in d:\n                ans += '1'\n                break\n        else:\n            ans += '0'\n    print(ans)", "I = input\nfor _ in [0] * int(I()):\n    n = int(I())\n    a = [I() for _ in range(n)]\n    d = set(a)\n    z = ['0'] * n\n    for (i, s) in enumerate(a):\n        for j in range(1, len(s)):\n            if s[:j] in d and s[j:] in d:\n                z[i] = '1'\n    print(''.join(z))", "def bleh(s):\n    for j in range(1, len(s)):\n        if s[:j] in mySet and s[j:] in mySet:\n            return '1'\n    return '0'\nfor _ in range(int(input())):\n    arr = []\n    mySet = set()\n    n = int(input())\n    for _ in range(n):\n        arr.append(input())\n        mySet.add(arr[-1])\n    ans = ''\n    for s in arr:\n        ans += bleh(s)\n    print(ans)", "from pickle import FALSE\n\ndef test_case(strings):\n    hash_map = {}\n    for s in strings:\n        if s not in hash_map:\n            hash_map[s] = 1\n    res = ''\n    for s in strings:\n        check = -1\n        for index in range(1, len(s)):\n            if s[:index] in hash_map and s[index:] in hash_map:\n                check = 1\n            elif check != 1:\n                check = 0\n        if check == 1:\n            res += '1'\n        else:\n            res += '0'\n    return res\nnum_case = int(input())\nfor case in range(num_case):\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(str(input()))\n    print(test_case(strings), end='\\n')", "out = []\nfor _ in range(int(input())):\n    n = int(input())\n    st = set()\n    stl = []\n    for i in range(n):\n        s = input()\n        stl.append(s)\n        st.add(s)\n    ans = []\n    for s in stl:\n        for i in range(1, len(s)):\n            if s[:i] in st and s[i:] in st:\n                ans.append('1')\n                break\n        else:\n            ans.append('0')\n    out.append(''.join(ans))\nfor i in out:\n    print(i)", "for _ in range(int(input())):\n    n = int(input())\n    s = [input() for _ in range(n)]\n    u = set(s)\n    ans = []\n    for x in s:\n        for i in range(1, len(x)):\n            if x[:i] in u and x[i:] in u:\n                ans.append('1')\n                break\n        else:\n            ans.append('0')\n    print(''.join(ans))", "for i in range(int(input())):\n    n = int(input())\n    l = []\n    for j in range(n):\n        l.append(input())\n    z = set(l)\n    o = ''\n    for k in l:\n        a = len(k)\n        for b in range(1, a):\n            if k[0:b] in z and k[b:] in z:\n                o += '1'\n                break\n        else:\n            o += '0'\n    print(o)", "for _ in range(int(input())):\n    n = int(input())\n    a = [input() for a in range(n)]\n    s = set(a)\n    ans = ''\n    for si in a:\n        for i in range(len(si)):\n            if si[:i] in s and si[i:] in s:\n                ans += '1'\n                break\n        else:\n            ans += '0'\n    print(ans)", "for i in range(int(input())):\n    num = int(input())\n    lis = [input() for _ in range(num)]\n    new = set(lis)\n    ans = ''\n    for j in lis:\n        for k in range(1, len(j)):\n            if j[:k] in new and j[k:] in new:\n                ans += '1'\n                break\n        else:\n            ans += '0'\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = [input() for i in range(n)]\n    b = set(l)\n    ans = ''\n    for j in l:\n        p = False\n        for i in range(1, len(j)):\n            if j[:i] in b and j[i:] in b:\n                p = True\n                break\n        ans += '1' if p else '0'\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    strings = []\n    for j in range(n):\n        strings.append(input())\n    st = set(strings)\n    ans = ''\n    for i in strings:\n        for j in range(1, len(i)):\n            if i[:j] in st and i[j:] in st:\n                ans += '1'\n                break\n        else:\n            ans += '0'\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    s = set()\n    res = ''\n    for i in range(n):\n        a = input()\n        l.append(a)\n        s.add(a)\n    for i in l:\n        for j in range(1, len(i)):\n            if i[j:] in s and i[:j] in s:\n                res += '1'\n                break\n        else:\n            res += '0'\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    ans = ['0'] * n\n    for i in range(n):\n        l.append(input())\n    s = set(l)\n    for (k, word) in enumerate(l):\n        for i in range(1, 8):\n            if word[:i] in s and word[i:] in s:\n                ans[k] = '1'\n    print(''.join(ans))", "for _ in range(int(input())):\n    leng = int(input())\n    lis = []\n    for i in range(leng):\n        lis.append(input())\n    se = set(lis)\n    ans = ''\n    for i in lis:\n        true = True\n        for x in range(len(i)):\n            if i[x:] in se and i[:x] in se:\n                ans += '1'\n                true = False\n                break\n        if true:\n            ans += '0'\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [input() for a in range(n)]\n    s = set(a)\n    ans = ''\n    for si in a:\n        for i in range(len(si)):\n            if si[:i] in s and si[i:] in s:\n                ans += '1'\n                break\n        else:\n            ans += '0'\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    s = []\n    t = []\n    for j in range(n):\n        s.append(input())\n    q = set(s)\n    for k in s:\n        for m in range(1, len(k)):\n            if k[:m] in q and k[m:] in q:\n                t.append('1')\n                break\n        else:\n            t.append('0')\n    print(''.join(t))", "for _ in range(int(input())):\n    n = int(input())\n    a = ''\n    s = [input() for i in range(n)]\n    d = set(s)\n    for (i, ss) in enumerate(s):\n        tr = False\n        for j in range(1, len(ss)):\n            if ss[:j] in d and ss[j:] in d:\n                tr = True\n                break\n        if tr == True:\n            a += '1'\n        else:\n            a += '0'\n    print(a)", "for _ in range(int(input())):\n    n = int(input())\n    l = [input() for i in range(n)]\n    s = set(l)\n    ans = ''\n    for i in l:\n        for j in range(len(i)):\n            if i[:j] in s and i[j:] in s:\n                if i[:j] in s and i[j:] in s:\n                    ans += '1'\n                    break\n        else:\n            ans += '0'\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [input() for a in range(n)]\n    s = set(a)\n    ans = ''\n    for si in a:\n        for i in range(len(si)):\n            if si[:i] in s and si[i:] in s:\n                ans += '1'\n                break\n        else:\n            ans += '0'\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    s = ''\n    for i in range(n):\n        l.append(input())\n    st = set(l)\n    for i in l:\n        for j in range(1, len(i)):\n            if i[:j] in st and i[j:] in st:\n                s += '1'\n                break\n        else:\n            s += '0'\n    print(s)", "import sys\nt = int(sys.stdin.readline().strip())\nfor _ in range(t):\n    n = int(sys.stdin.readline().strip())\n    wd = set()\n    ws = []\n    r = ''\n    for _ in range(n):\n        w = sys.stdin.readline().strip()\n        wd.add(w)\n        ws.append(w)\n    for w in ws:\n        if len(w) == 1:\n            r += '0'\n            continue\n        f = 0\n        for i in range(len(w)):\n            if w[:i] in wd and w[i:] in wd:\n                f += 1\n                break\n        r += str(f)\n    print(r)", "n = int(input())\nfor _ in range(n):\n    n1 = int(input())\n    x = []\n    for _ in range(n1):\n        x.append(input())\n    y = set(x)\n    answer = ''\n    for i in x:\n        for j in range(1, len(i)):\n            if i[:j] in y and i[j:] in y:\n                answer += '1'\n                break\n        else:\n            answer += '0'\n    print(answer)", "n_test_cases = int(input())\nfor _ in range(n_test_cases):\n    n_str = int(input())\n    str_list = []\n    for i in range(n_str):\n        str_list.append(input())\n    str_set = set(str_list)\n    result = ''\n    for item in str_list:\n        is_exist = False\n        for i in range(1, len(item)):\n            if item[:i] in str_set and item[i:] in str_set:\n                is_exist = True\n        if is_exist:\n            result += '1'\n        else:\n            result += '0'\n    print(result)", "for _ in range(int(input())):\n    n = int(input())\n    a = [input() for x in range(n)]\n    ans = ''\n    s = set(a)\n    for word in a:\n        for i in range(len(word)):\n            if word[:i] in s and word[i:] in s:\n                ans += '1'\n                break\n        else:\n            ans += '0'\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [input() for _ in range(n)]\n    ss = set(arr)\n    ans = ''\n    for s in arr:\n        ok = False\n        for i in range(len(s)):\n            if s[:i] in ss and s[i:] in ss:\n                ok = True\n                break\n        if ok:\n            ans += '1'\n        else:\n            ans += '0'\n    print(ans)", "for _ in range(int(input())):\n    l = []\n    for i in range(int(input())):\n        l.append(input())\n    z = ''\n    s = set(l)\n    for i in l:\n        for j in range(1, len(i)):\n            if i[:j] in s and i[j:] in s:\n                z += '1'\n                break\n        else:\n            z += '0'\n    print(z)", "import sys\nimport collections\nfrom math import ceil, gcd, sqrt, log\nimport bisect\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    A = []\n    ok = set()\n    for i in range(n):\n        s = input()\n        A.append(s)\n        ok.add(s)\n    ans = ''\n    for s in A:\n        flag = 0\n        for i in range(8):\n            one = s[:i]\n            two = s[i:]\n            if one in ok and two in ok:\n                flag = 1\n                break\n        if flag:\n            ans += '1'\n        else:\n            ans += '0'\n    print(ans)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    b = [input() for j in range(n)]\n    s = set(b)\n    ans = ''\n    for elem in b:\n        for j in range(1, len(elem)):\n            if elem[:j] in s and elem[j:] in s:\n                ans += '1'\n                break\n        else:\n            ans += '0'\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = []\n    d = {}\n    res = [0] * n\n    for i in range(n):\n        s = input()\n        if s not in d:\n            d[s] = [i]\n        else:\n            d[s].append(i)\n    for s in d:\n        for i in range(1, len(s)):\n            if s[:i] in d and s[i:] in d:\n                for i in d[s]:\n                    res[i] = 1\n                break\n    print(''.join([str(x) for x in res]))", "for h in range(int(input())):\n    n = int(input())\n    d = {}\n    x = []\n    for i in range(n):\n        s = input()\n        x.append(s)\n        d[s] = 1\n    z = []\n    for i in x:\n        f = '0'\n        for j in range(1, len(i)):\n            if i[:j] in d and i[j:] in d:\n                f = '1'\n                break\n        z.append(f)\n    print(''.join(z))", "from collections import *\nimport sys\nfor _ in range(int(input())):\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    sett = set(strings)\n    ans = ''\n    for i in strings:\n        for ii in range(1, len(i)):\n            if i[:ii] in sett and i[ii:] in sett:\n                ans += '1'\n                break\n        else:\n            ans += '0'\n    print(ans)", "from heapq import heappop, heappush\nimport math\nfrom sys import stdin, stdout\nfrom collections import defaultdict, deque, Counter\nfrom bisect import bisect_left, bisect_right, insort_right\ninf = int(1e+19)\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    ans = ''\n    st = set()\n    l = []\n    for i in range(n):\n        s = input().strip()\n        st.add(s)\n        l.append(s)\n    for i in l:\n        key = 0\n        for j in range(len(i)):\n            if i[:j] in st and i[j:] in st:\n                key = 1\n                break\n        ans += str(key)\n    print(ans)", "nn = int(input())\nfor _ in range(nn):\n    m = int(input())\n    aa = []\n    bb = set()\n    for i in range(m):\n        ss = input()\n        bb.add(ss)\n        aa.append(ss)\n    s = ''\n    for x in aa:\n        dd = len(x)\n        for i in range(1, dd):\n            if x[:i] in bb and x[i:] in bb:\n                s += '1'\n                break\n        else:\n            s += '0'\n    print(s)", "for _ in range(int(input())):\n    n = int(input())\n    s = [input() for i in range(n)]\n    ss = set(s)\n    ans = ''\n    for st in s:\n        for j in range(1, len(st)):\n            if st[:j] in ss and st[j:] in ss:\n                ans += '1'\n                break\n        else:\n            ans += '0'\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    ss = [input() for j in range(n)]\n    s_ = set()\n    res = ''\n    for s in ss:\n        s_.add(s)\n    for i in ss:\n        flag = False\n        for j in range(1, len(i)):\n            if i[:j] in s_ and i[j:] in s_:\n                flag = True\n                break\n        if flag:\n            res += '1'\n        else:\n            res += '0'\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    s = [input() for _ in range(n)]\n    u = set(s)\n    l = []\n    for x in s:\n        for i in range(1, len(x)):\n            if x[:i] in u and x[i:] in u:\n                l.append('1')\n                break\n        else:\n            l.append('0')\n    print(''.join(l))", "from operator import length_hint\nfor _ in range(int(input())):\n    n = int(input())\n    s = [input() for aaa in range(n)]\n    result = ''\n    set_s = set(s)\n    for x in s:\n        flag = '0'\n        for i in range(1, len(x)):\n            if x[:i] in set_s and x[i:] in set_s:\n                flag = '1'\n                break\n        result += flag\n    print(result)", "def res():\n    for x in range(int(input())):\n        n = int(input())\n        l = []\n        m = dict()\n        for i in range(n):\n            a = input()\n            l.append(a)\n            m[a] = 1\n        res = ''\n        for i in l:\n            c = 0\n            for j in range(1, len(i)):\n                s = i[:j]\n                ss = i[j:]\n                if s in m and ss in m:\n                    c = 1\n                    break\n            if c:\n                res += '1'\n            else:\n                res += '0'\n        print(res)\nres()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [input() for _ in range(n)]\n    d = set(a)\n    s = []\n    for i in a:\n        for j in range(1, len(i)):\n            if i[:j] in d and i[j:] in d:\n                s.append('1')\n                break\n        else:\n            s.append('0')\n    print(''.join(s))", "def solve():\n    n = int(input())\n    arr = [input() for i in range(n)]\n    s = set(arr)\n    for w in arr:\n        ans = False\n        for i in range(1, len(w)):\n            if w[:i] in s and w[i:] in s:\n                ans = True\n        if ans:\n            print(1, end='')\n        else:\n            print(0, end='')\n    print()\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    a = [input() for i in range(n)]\n    b = set(a)\n    req = ''\n    for i in a:\n        for j in range(1, len(i)):\n            if i[:j] in b and i[j:] in b:\n                req += '1'\n                break\n        else:\n            req += '0'\n    print(req)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    strings = []\n    for i in range(n):\n        strings.append(input())\n    set_str = set(strings)\n    ans = ''\n    for i in strings:\n        for j in range(1, len(i)):\n            if i[:j] in set_str and i[j:] in set_str:\n                ans += '1'\n                break\n        else:\n            ans += '0'\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = set()\n    l = []\n    for _ in range(n):\n        l.append(input())\n    s = set(l)\n    ans = ''\n    for i in range(n):\n        c = l[i]\n        if len(c) < 2:\n            ans += '0'\n            continue\n        f = False\n        for j in range(1, len(c)):\n            if c[:j] in s and c[j:] in s:\n                f = True\n                ans += '1'\n                break\n        if not f:\n            ans += '0'\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    strings = []\n    for i in range(n):\n        strings.append(input())\n    set_str = set(strings)\n    ans = ''\n    for i in strings:\n        for j in range(1, len(i)):\n            if i[:j] in set_str and i[j:] in set_str:\n                ans += '1'\n                break\n        else:\n            ans += '0'\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    words = [input() for _ in range(n)]\n    set_words = set(words)\n    answer = []\n    for word in words:\n        for i in range(1, len(word)):\n            if word[:i] in set_words and word[i:] in set_words:\n                answer.append('1')\n                break\n        else:\n            answer.append('0')\n    print(''.join(answer))", "for _ in range(int(input())):\n    n = int(input())\n    e = [input() for i in range(n)]\n    s = set(e)\n    otv = ''\n    for i in e:\n        r = i\n        flag = False\n        for j in range(1, len(r)):\n            if r[:j] in s and r[j:] in s:\n                flag = True\n                break\n        otv += f'{int(flag)}'\n    print(otv)", "k = int(input())\nfor _ in range(k):\n    res = ''\n    n = int(input())\n    a = []\n    s = set()\n    for _ in range(n):\n        inpt = input()\n        a.append(inpt)\n        s.add(inpt)\n    for i in a:\n        for j in range(1, len(i)):\n            if i[:j] in s and i[j:] in s:\n                res += '1'\n                break\n        else:\n            res += '0'\n    print(res)", "for w in range(int(input())):\n    n = int(input())\n    v = [input() for i in range(n)]\n    ans = ''\n    dct = {}\n    for i in v:\n        dct[i] = True\n    for x in v:\n        b = False\n        for i in range(len(x)):\n            if x[:i] in dct and x[i:] in dct:\n                b = True\n        ans += ('0', '1')[b]\n    print(ans)", "import functools\n\ndef solve():\n    sz = int(input())\n    s = []\n    mp = {}\n    for i in range(sz):\n        x = input()\n        s.append(x)\n        mp[x] = True\n    ans = ['0' for x in range(sz)]\n    for (idx, k) in zip(range(sz), s):\n        for i in range(len(k)):\n            x = k[:i]\n            y = k[i:]\n            if x in mp and y in mp:\n                ans[idx] = '1'\n    return ans\nn = int(input())\nfor i in range(n):\n    print(''.join(solve()))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    b = set()\n    for i in range(n):\n        s = input()\n        a.append(s)\n        b.add(s)\n    ans = ''\n    for i in a:\n        for j in range(len(i)):\n            if i[:j] in b and i[j:] in b:\n                ans += '1'\n                break\n        else:\n            ans += '0'\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    dic = {}\n    for i in range(n):\n        s = input()\n        l.append(s)\n        dic[s] = True\n    ok = ''\n    for s in l:\n        a = '0'\n        for j in range(1, len(s)):\n            if s[:j] in dic and s[j:] in dic and (dic[s[:j]] == True) and (dic[s[j:]] == True):\n                a = '1'\n                break\n        ok += a\n    print(ok)", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    l = [input() for i in range(n)]\n    s = set(l)\n    ans = ''\n    for k in l:\n        for i in range(len(k)):\n            if k[:i] in s and k[i:] in s:\n                if k[:i] in s and k[i:] in s:\n                    ans += '1'\n                    break\n        else:\n            ans += '0'\n    print(ans)", "def print_hi():\n    s = ''\n    check = False\n    r = input()\n    t = int(r)\n    while t > 0:\n        dic = []\n        b = input()\n        n = int(b)\n        while n > 0:\n            n -= 1\n            g = input()\n            dic.append(g)\n        s = ''\n        st = set(dic)\n        for i in dic:\n            check = False\n            for f in range(0, len(i) - 1):\n                if i[0:f + 1] in st and i[f + 1:len(i)] in st:\n                    s += '1'\n                    check = True\n                    break\n            if not check:\n                s += '0'\n        t -= 1\n        print(s)\nprint_hi()", "for _ in range(int(input())):\n    n = int(input())\n    a = [input() for a in range(n)]\n    s = set(a)\n    ans = ''\n    for si in a:\n        for i in range(len(si)):\n            if si[:i] in s and si[i:] in s:\n                ans += '1'\n                break\n        else:\n            ans += '0'\n    print(ans)", "tests = int(input())\nfor i in range(tests):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(input())\n    sett = set(arr)\n    res = ''\n    for s in arr:\n        added = False\n        for i in range(1, 9):\n            if s[:i] in sett:\n                if s[i:] in sett:\n                    res += '1'\n                    added = True\n                    break\n        if not added:\n            res += '0'\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    c = ''\n    a = []\n    for i in range(n):\n        a += [input()]\n    d = {}\n    for i in a:\n        d[i] = 0\n    for i in a:\n        for j in range(1, 8):\n            if i[:j] in d and i[j:] in d:\n                c += '1'\n                break\n        else:\n            c += '0'\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    ans = []\n    for i in range(n):\n        ans.append(input())\n    strings = set(ans)\n    arr = [0] * n\n    for i in range(n):\n        s = ans[i]\n        for j in range(len(s)):\n            if s[:j] in strings and s[j:] in strings:\n                arr[i] = 1\n                break\n    print(''.join(map(str, arr)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    answers = ['0'] * n\n    a = []\n    for i in range(n):\n        s = input()\n        a.append(s)\n    st = set(a)\n    for (j, string) in enumerate(a):\n        for i in range(len(string)):\n            if string[:i] in st and string[i:] in st:\n                answers[j] = '1'\n                break\n    print(''.join(answers))", "def resolve(N, list_1):\n    result = ''\n    set_1 = set()\n    for index in range(N):\n        set_1.add(list_1[index])\n    for index in range(N):\n        str_1 = list_1[index]\n        length = len(str_1)\n        flag = False\n        for index_2 in range(1, length):\n            before_str = str_1[:index_2]\n            after_str = str_1[index_2:]\n            if before_str in set_1 and after_str in set_1:\n                result += '1'\n                flag = True\n                break\n        if not flag:\n            result += '0'\n    return result\n\ndef read_input():\n    N = int(input())\n    list_1 = []\n    for index in range(N):\n        temp_2 = input()\n        list_1.append(temp_2)\n    return (N, list_1)\ncase_num = int(input())\nif not case_num == 0:\n    for index in range(case_num):\n        (N, list_1) = read_input()\n        res = resolve(N, list_1)\n        print(res)", "for _ in range(int(input())):\n    n = int(input())\n    c = ''\n    a = []\n    for i in range(n):\n        a += [input()]\n    d = {}\n    for i in a:\n        d[i] = 0\n    for i in a:\n        for j in range(1, 8):\n            if i[:j] in d and i[j:] in d:\n                c += '1'\n                break\n        else:\n            c += '0'\n    print(c)", "t = int(input())\n\ndef solve(n, s):\n    d = dict()\n    for i in range(n):\n        if s[i] in d:\n            d[s[i]] += 1\n        else:\n            d[s[i]] = 1\n    ans = ''\n    for i in range(n):\n        ok = False\n        for j in range(len(s[i])):\n            if s[i][:j] in d and s[i][j:] in d:\n                ok = True\n        if ok:\n            ans += '1'\n        else:\n            ans += '0'\n    return ans\nfor i in range(t):\n    n = int(input())\n    s = [input() for i in range(n)]\n    ans = ''\n    print(solve(n, s))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    strs = [input() for _ in range(n)]\n    s = set(strs)\n    ans = ''\n    for string in strs:\n        found = False\n        for i in range(len(string)):\n            if string[:i] in s and string[i:] in s:\n                found = True\n                break\n        ans += '1' if found else '0'\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [input() for i in range(n)]\n    s = set(a)\n    z = ''\n    for i in range(n):\n        for j in range(1, len(a[i])):\n            if a[i][:j] in s and a[i][j:] in s:\n                z += '1'\n                break\n        else:\n            z += '0'\n    print(z)", "for t in range(int(input())):\n    n = int(input())\n    s = []\n    k = []\n    for i in range(n):\n        s.append(input())\n    s2 = set(s)\n    for i in s:\n        cnt = '0'\n        for j in range(1, len(i)):\n            if i[:j] in s2 and i[j:] in s2:\n                cnt = '1'\n                break\n        k.append(cnt)\n    print(''.join(k))", "t = int(input())\nans = []\nfor i in range(t):\n    n = int(input())\n    s = set()\n    l = []\n    a = ''\n    for j in range(n):\n        i = input()\n        s.add(i)\n        l.append(i)\n    for j in l:\n        l1 = len(j)\n        for k in range(1, l1):\n            if j[0:k] in s and j[k:] in s:\n                a += '1'\n                break\n        else:\n            a += '0'\n    ans.append(a)\nfor j in ans:\n    print(j)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    s = ''\n    for i in range(n):\n        l.append(input())\n    st = set(l)\n    for i in l:\n        for j in range(1, len(i)):\n            if i[:j] in st and i[j:] in st:\n                s += '1'\n                break\n        else:\n            s += '0'\n    print(s)", "for _ in range(int(input())):\n    leng = int(input())\n    lis = []\n    for i in range(leng):\n        lis.append(input())\n    se = set(lis)\n    ans = ''\n    for i in lis:\n        true = True\n        for x in range(len(i)):\n            if i[x:] in se and i[:x] in se:\n                ans += '1'\n                true = False\n                break\n        if true:\n            ans += '0'\n    print(ans)", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = [input() for i in range(n)]\n    s = set(a)\n    z = ''\n    for i in range(n):\n        for j in range(1, len(a[i])):\n            if a[i][:j] in s and a[i][j:] in s:\n                z += '1'\n                break\n        else:\n            z += '0'\n    print(z)", "import sys\nimport math\nfrom itertools import combinations\ninut = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    dat = []\n    for i in range(n):\n        dat.append(input())\n    ans = {}\n    for i in dat:\n        ans[i] = 0\n    o = ''\n    for i in dat:\n        f = 0\n        for j in range(1, len(i)):\n            if i[:j] in ans and i[j:] in ans:\n                o += '1'\n                f = 1\n                break\n        if not f:\n            o += '0'\n    print(o)", "from collections import *\n\ndef solve():\n    n = int(input())\n    s = []\n    for i in range(n):\n        s.append(input().strip())\n    sets = set(s)\n    ans = []\n    for i in s:\n        leni = len(i)\n        if leni > 1:\n            flag = True\n            for j in range(1, leni):\n                if i[:j] in sets and i[j:] in sets:\n                    ans.append('1')\n                    flag = False\n                    break\n            if flag:\n                ans.append('0')\n        else:\n            ans.append('0')\n    return ''.join(ans)\nfor _ in range(int(input())):\n    ans = solve()\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = []\n    dic = {}\n    for j in range(n):\n        arr.append(input())\n        dic[arr[-1]] = None\n    for k in dic:\n        for m in range(len(k) - 1):\n            if k[0:m + 1] in dic and k[m + 1:] in dic:\n                dic[k] = '1'\n                break\n        else:\n            dic[k] = '0'\n    ans = ''\n    for p in range(n):\n        ans += dic[arr[p]]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    si = [input() for _ in range(n)]\n    Si = set(si)\n    ans = ''\n    for i in si:\n        for l in range(len(i) - 1):\n            if i[:l + 1] in Si and i[l + 1:] in Si:\n                ans = ans + '1'\n                break\n        else:\n            ans = ans + '0'\n    print(ans)", "test_case_number = int(input())\nfor _ in range(test_case_number):\n    string_number = int(input())\n    strings = []\n    dic_strings = {}\n    for i in range(string_number):\n        strings.append(input())\n        dic_strings[strings[i]] = True\n    results = ''\n    flag = False\n    for string in strings:\n        flag = False\n        for i in range(1, len(string)):\n            if string[:i] in dic_strings and string[i:] in dic_strings:\n                results = results + '1'\n                flag = True\n                break\n        if not flag:\n            results = results + '0'\n    print(results)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    s = set()\n    for i in range(n):\n        temp = input()\n        l.append(temp[:])\n        s.add(temp[:])\n    ans = ''\n    for i in l:\n        f = False\n        for j in range(1, len(i)):\n            if i[:j] in s and i[j:] in s:\n                f = True\n        if f:\n            ans += '1'\n        else:\n            ans += '0'\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    lst = []\n    st = set({})\n    for i in range(n):\n        lst.append(input())\n        st.add(lst[i])\n    ans = ''\n    for item in lst:\n        flag = False\n        for i in range(len(item)):\n            if item[:i] in st and item[i:] in st:\n                flag = True\n                break\n        ans += '1' if flag else '0'\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    s = []\n    k = ''\n    for i in range(n):\n        s.append(input())\n    s2 = set(s)\n    for i in s:\n        cnt = '0'\n        for j in range(1, len(i)):\n            if i[:j] in s2 and i[j:] in s2:\n                cnt = '1'\n                break\n        k += cnt\n    print(k)", "def solve():\n    n = int(input())\n    (s, t, w) = ([], '', {})\n    for i in range(n):\n        a = input()\n        s.append(a)\n        w[a] = True\n    for i in range(n):\n        ok = False\n        for j in range(1, len(s[i])):\n            pref = s[i][:j]\n            suff = s[i][j:]\n            if pref in w and suff in w:\n                ok = True\n                break\n        t += str(int(ok))\n    return t\nt = int(input())\nans = []\nwhile t:\n    ans.append(str(solve()))\n    t -= 1\nprint('\\n'.join(ans))", "for _ in range(int(input())):\n    n = int(input())\n    mp = set()\n    nums = []\n    for i in range(n):\n        s = input()\n        mp.add(s)\n        nums.append(s)\n    ans = []\n    for i in nums:\n        f = '0'\n        for j in range(len(i)):\n            if i[:j] in mp and i[j:] in mp:\n                f = '1'\n                break\n        ans.append(f)\n    print(''.join(ans))"]