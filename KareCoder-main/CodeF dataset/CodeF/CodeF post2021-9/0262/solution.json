["import sys\ninput = sys.stdin.readline\n\ndef print(x):\n    sys.stdout.write(x)\n    sys.stdout.write('\\n')\n\ndef diff(a, b, c, d):\n    if len(a) + int(b) > len(c) + int(d):\n        return 1\n    if len(a) + int(b) < len(c) + int(d):\n        return -1\n    (a, b, c, d) = (int(a), int(b), int(c), int(d))\n    if abs(b - d) > 10:\n        return b - d\n    if b > d:\n        return a * 10 ** (b - d) - c\n    return -(c * 10 ** (d - b) - a)\n\ndef solve():\n    n = int(input())\n    arr = list(map(lambda x: int(x), input().split(' ')))\n    m = min(arr)\n    t = 0\n    for a in arr:\n        if t >= n // 2:\n            break\n        if a != m:\n            print(f'{a} {m}')\n            t += 1\ncases = int(input())\nfor _ in range(cases):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mini = min(arr)\n    arr.remove(mini)\n    for i in range(n // 2):\n        print(f'{arr[i]} {mini}')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    res = []\n    minn = min(arr)\n    i = 0\n    while len(res) < len(arr) // 2:\n        if arr[i] == minn:\n            i += 1\n            continue\n        res += [str(arr[i]) + ' ' + str(minn)]\n        i += 1\n    print('\\n'.join(res))", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    n = int(inp())\n    a = list(map(int, inp().split()))\n    b = min(a)\n    k = n // 2\n    for i in a:\n        if i != b:\n            print(i, b)\n            k -= 1\n            if k == 0:\n                break\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    t = n // 2\n    x = min(a)\n    i = 0\n    for y in range(t):\n        if a[i] == x:\n            i += 1\n        print('%d %d' % (a[i], x))\n        i += 1", "import math\nfor z in [*open(0)][2::2]:\n    m = min((a := z.split()), key=int)\n    c = math.floor(len(a) / 2)\n    for x in a:\n        if x != m:\n            print(x, m)\n            c -= 1\n        if c == 0:\n            break", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    m = min(arr)\n    arr.remove(m)\n    for j in range(n // 2):\n        print(arr[j], m)", "def main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mn = min(arr)\n    arr.remove(mn)\n    for i in range(n // 2):\n        print(arr[i], mn)\nfor _ in range(int(input())):\n    main()", "def func():\n    n = int(input())\n    l = list(map(int, input().split()))\n    k = min(l)\n    l1 = 0\n    c = 0\n    while l1 != int(n // 2):\n        if l[c] != k:\n            print(l[c], k)\n            c += 1\n            l1 += 1\n        else:\n            c += 1\nt = int(input())\nfor i in range(t):\n    func()", "def real_input_generator():\n    while True:\n        yield input()\n\ndef example_input_generator(example):\n    for line in example.split('\\n'):\n        yield line\nexamples = ['4\\n2\\n1 4\\n4\\n2 8 3 4\\n5\\n3 8 5 9 7\\n6\\n2 7 5 3 4 8', '1\\n2\\n4 2']\n\ndef solve(test_case_num=-1):\n    if test_case_num < 0:\n        ig = real_input_generator()\n    else:\n        print('TESTING NOW')\n        ig = example_input_generator(examples[test_case_num])\n    t = int(next(ig))\n    for idx in range(t):\n        n = int(next(ig))\n        lst = list(map(int, next(ig).split()))\n        for pair in solution(n, lst):\n            print(' '.join(map(str, pair)))\n\ndef solution(n, lst):\n    rst = []\n    mval = min(lst)\n    target = n // 2\n    for k in lst:\n        if mval == k:\n            continue\n            _hy_anon_var_2 = None\n        else:\n            _hy_anon_var_2 = None\n        rst.append([k, mval])\n        if len(rst) == n // 2:\n            break\n            _hy_anon_var_3 = None\n        else:\n            _hy_anon_var_3 = None\n    return rst\nsolve()", "def so():\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    mn = min(arr)\n    k = 0\n    i = 0\n    while k < n // 2 and i < n:\n        if arr[i] != mn:\n            print(arr[i], mn)\n            k += 1\n        i += 1\ntst = int(input())\nfor i in range(tst):\n    so()", "for t in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    m = min(a)\n    a = [i for i in a if i != m]\n    a = a[:n // 2]\n    for i in a:\n        print(i, m)", "def absent(n, L):\n    want = int(n / 2)\n    fix = min(L)\n    L.remove(fix)\n    for i in range(want):\n        print(str(L[i]) + ' ' + str(fix))\ncase = int(input())\nfor j in range(case):\n    n = int(input())\n    L = input().split()\n    for k in range(n):\n        temp = int(L[k])\n        L[k] = temp\n    absent(n, L)", "kl = int(input())\nfor kkl in range(kl):\n    n = int(input())\n    ms = [int(i) for i in input().split()]\n    (a, k) = (min(ms), 0)\n    for i in range(n // 2):\n        if ms[i] == a:\n            k += 1\n        print(ms[i + k], a)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mini = min(a)\n    ind = a.index(mini)\n    temp = a[0]\n    a[0] = mini\n    a[ind] = temp\n    c = n // 2\n    for j in range(1, n):\n        print(a[j], mini)\n        c -= 1\n        if c == 0:\n            break", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    minn = min(arr)\n    arr.remove(minn)\n    for i in range(n // 2):\n        print(arr[i], minn)", "def int_input():\n    a = int(input())\n    return a\n\ndef int_list_input():\n    a = list(map(int, input().split()))\n    return a\n\ndef solve():\n    n = int(input())\n    arr = int_list_input()\n    ans = n // 2\n    i = 0\n    y = min(arr)\n    while ans != 0:\n        x = arr[i]\n        if x != y:\n            print(x, y)\n            ans -= 1\n        i += 1\nfor _ in range(int(input())):\n    solve()", "t = int(input())\n\ndef find_pairs(a, n):\n    pairs = []\n    b = min(a)\n    for i in a:\n        if i == b:\n            continue\n        pairs.append((i, b))\n        if len(pairs) >= n // 2:\n            break\n    return pairs\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = find_pairs(a, n)\n    for i in ans:\n        print(i[0], i[1])", "from bisect import bisect_left\n\ndef printPairs(n, a):\n    a.sort()\n    count = 0\n    breakFlag = False\n    for i in range(n - 1, -1, -1):\n        for j in range(i):\n            index = bisect_left(a, a[i] % a[j])\n            if index != n and a[index] == a[i] % a[j]:\n                continue\n            print(a[i], a[j])\n            count += 1\n            if count >= n // 2:\n                breakFlag = True\n                break\n        if breakFlag:\n            break\n\ndef printPairs1(n, a):\n    minEle = min(a)\n    count = 0\n    for i in range(n):\n        if a[i] != minEle:\n            print(a[i], minEle)\n            count += 1\n            if count >= n // 2:\n                break\n\ndef main():\n    no_of_test_cases = int(input().strip())\n    for i in range(no_of_test_cases):\n        n = int(input().strip())\n        a = list(map(int, input().strip().split()))\n        printPairs1(n, a)\nmain()", "def real_input_generator():\n    while True:\n        yield input()\n\ndef example_input_generator(example):\n    for line in example.split('\\n'):\n        yield line\nexamples = ['4\\n2\\n1 4\\n4\\n2 8 3 4\\n5\\n3 8 5 9 7\\n6\\n2 7 5 3 4 8', '1\\n2\\n4 2']\n\ndef solve(test_case_num=-1):\n    if test_case_num < 0:\n        ig = real_input_generator()\n    else:\n        print('TESTING NOW')\n        ig = example_input_generator(examples[test_case_num])\n    t = int(next(ig))\n    for idx in range(t):\n        n = int(next(ig))\n        lst = list(map(int, next(ig).split()))\n        for pair in solution(n, lst):\n            print(' '.join(map(str, pair)))\n\ndef solution(n, lst):\n    rst = []\n    mval = min(lst)\n    for i in range(min(n, n // 2 + 2)):\n        if mval == lst[i]:\n            continue\n            _hy_anon_var_2 = None\n        else:\n            _hy_anon_var_2 = None\n        rst.append([lst[i], mval])\n    while len(rst) > n // 2:\n        rst.pop()\n    return rst\nsolve()", "def real_input_generator():\n    while True:\n        yield input()\n\ndef example_input_generator(example):\n    for line in example.split('\\n'):\n        yield line\nexamples = ['4\\n2\\n1 4\\n4\\n2 8 3 4\\n5\\n3 8 5 9 7\\n6\\n2 7 5 3 4 8', '1\\n2\\n4 2']\n\ndef solve(test_case_num=-1):\n    if test_case_num < 0:\n        ig = real_input_generator()\n    else:\n        print('TESTING NOW')\n        ig = example_input_generator(examples[test_case_num])\n    t = int(next(ig))\n    for idx in range(t):\n        n = int(next(ig))\n        lst = list(map(int, next(ig).split()))\n        for pair in solution(n, lst):\n            print(' '.join(map(str, pair)))\n\ndef solution(n, lst):\n    rst = []\n    mval = min(lst)\n    for k in lst:\n        if mval == k:\n            continue\n            _hy_anon_var_2 = None\n        else:\n            _hy_anon_var_2 = None\n        rst.append([k, mval])\n        if len(rst) == n // 2:\n            break\n            _hy_anon_var_3 = None\n        else:\n            _hy_anon_var_3 = None\n    return rst\nsolve()", "def solve():\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    mn = min(A)\n    need = n // 2\n    for x in A:\n        if x != mn and need > 0:\n            print(x, mn)\n            need -= 1\nt = int(input())\nfor _ in range(t):\n    solve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    m = min(lst)\n    i = 0\n    inte = False\n    while i < n // 2:\n        if lst[i] == m:\n            i += 1\n            inte = True\n            continue\n        print(lst[i], m)\n        i += 1\n    if inte:\n        print(lst[i], m)", "def solution(nums, n):\n    a = min(nums)\n    counter = len(nums) // 2\n    i = 0\n    for x in nums:\n        if x != a:\n            print(x, a)\n            i += 1\n        if i == counter:\n            break\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = [int(x) for x in input().split()]\n    solution(nums, n)", "for _ in range(int(input())):\n    num = int(input())\n    ans = list(map(int, input().split()))\n    mn = min(ans)\n    ptr = num // 2\n    idx = 0\n    while ptr > 0:\n        if ans[idx] == mn:\n            idx += 1\n            continue\n        else:\n            ptr -= 1\n            print(ans[idx], mn)\n            idx += 1", "def real_input_generator():\n    while True:\n        yield input()\n\ndef example_input_generator(example):\n    for line in example.split('\\n'):\n        yield line\nexamples = ['4\\n2\\n1 4\\n4\\n2 8 3 4\\n5\\n3 8 5 9 7\\n6\\n2 7 5 3 4 8', '1\\n2\\n4 2']\n\ndef solve(test_case_num=-1):\n    if test_case_num < 0:\n        ig = real_input_generator()\n    else:\n        print('TESTING NOW')\n        ig = example_input_generator(examples[test_case_num])\n    t = int(next(ig))\n    for idx in range(t):\n        n = int(next(ig))\n        lst = list(map(int, next(ig).split()))\n        for pair in solution(n, lst):\n            print(' '.join(map(str, pair)))\n\ndef solution(n, lst):\n    rst = []\n    mval = min(lst)\n    for k in lst:\n        if mval == k:\n            continue\n            _hy_anon_var_2 = None\n        else:\n            _hy_anon_var_2 = None\n        rst.append([k, mval])\n        if len(rst) == n // 2:\n            break\n            _hy_anon_var_3 = None\n        else:\n            _hy_anon_var_3 = None\n    return rst\nsolve()", "from math import ceil, log10\nimport bisect\nimport math\nfrom collections import defaultdict\nfrom itertools import groupby\nfrom collections import defaultdict, Counter\nfrom heapq import heappop, heappush\nfrom collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    k = min(arr)\n    c = 0\n    i = 0\n    while c < n // 2:\n        if arr[i] != k:\n            print(arr[i], k)\n            c += 1\n        i += 1", "def main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        arr = [int(num) for num in input().split()]\n        mini = min(arr)\n        arr.remove(mini)\n        for i in range(n // 2):\n            print(arr[i], mini)\nmain()", "a = int(input())\nfor i in range(a):\n    n = int(input())\n    V = list(map(int, input().split()))\n    M = min(V)\n    I = 0\n    for i in V:\n        if I == n // 2:\n            break\n        if i != M:\n            print(i, M)\n            I += 1", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = min(a)\n    t = n // 2\n    i = 0\n    while t > 0:\n        if a[i] == m:\n            i += 1\n            continue\n        else:\n            t -= 1\n            print(a[i], m)\n            i += 1", "n = int(input())\nfor i in range(n):\n    b = int(input())\n    a = list(map(int, input().split()))\n    c = b // 2\n    d = min(a)\n    a.remove(d)\n    for j in range(c):\n        print(a[j], d)", "testNum = int(input())\ni = 0\nansNum = []\nwhile i < testNum:\n    n = int(input())\n    Arr = list(map(int, input().split()))\n    b = min(Arr)\n    Arr.pop(Arr.index(min(Arr)))\n    j = 0\n    while j < n // 2:\n        ansNum.append((Arr[j], b))\n        j += 1\n    i += 1\nfor x in ansNum:\n    (a, b) = x\n    print(a, b)"]