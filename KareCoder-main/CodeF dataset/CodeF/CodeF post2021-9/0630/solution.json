["arraySize = int(input())\n(left, right) = (0, arraySize - 1)\narray = list(map(int, input().split()))\nwhile left + 1 < arraySize and array[left] < array[left + 1]:\n    left += 1\nwhile right > 0 and array[right] < array[right - 1]:\n    right -= 1\nleft += 1\nright = arraySize - right\nif left % 2 or right % 2:\n    print('Alice')\nelse:\n    print('Bob')", "length = int(input())\narr = input().split(' ')\narr = list(map(int, arr))\nleftMax = 1\nrightMax = 1\nfor i in range(length - 1):\n    if arr[i] < arr[i + 1]:\n        leftMax += 1\n    else:\n        break\nfor i in range(length - 1):\n    if arr[-(i + 1)] < arr[-(i + 2)]:\n        rightMax += 1\n    else:\n        break\nif leftMax % 2 != 0 or rightMax % 2 != 0 or length == 1:\n    print('Alice')\nelse:\n    print('Bob')", "n = int(input())\na = list(map(int, input().split()))\n(l, r) = (0, n - 1)\nwhile l + 1 < n and a[l] < a[l + 1]:\n    l += 1\nwhile r >= 0 and a[r] < a[r - 1]:\n    r -= 1\nl = l + 1\nr = n - r\nif l % 2 or r % 2:\n    print('Alice')\nelse:\n    print('Bob')", "q = int(input())\na = list(map(int, input().split()))\n(l, r) = (0, q - 1)\nwhile l + 1 < q and a[l] < a[l + 1]:\n    l += 1\nwhile r >= 0 and a[r] < a[r - 1]:\n    r -= 1\nl = l + 1\nr = q - r\nif l % 2 or r % 2:\n    print('Alice')\nelse:\n    print('Bob')", "n = int(input())\na = list(map(int, input().split()))\n(len, r) = (0, n - 1)\nwhile len + 1 < n and a[len] < a[len + 1]:\n    len += 1\nwhile r >= 0 and a[r] < a[r - 1]:\n    r -= 1\nlen = len + 1\nr = n - r\nif len % 2 or r % 2:\n    print('Alice')\nelse:\n    print('Bob')", "arrayLen = int(input())\nnIntegers = list(map(int, input().split()))\nleft = 0\nright = arrayLen - 1\nwhile left + 1 < arrayLen and nIntegers[left] < nIntegers[left + 1]:\n    left += 1\nwhile right >= 0 and nIntegers[right] < nIntegers[right - 1]:\n    right -= 1\nleft = left + 1\nright = arrayLen - right\nif left % 2 or right % 2:\n    print('Alice')\nelse:\n    print('Bob')", "n = int(input())\nlists = list(map(int, input().split()))\n(left, right) = (0, n - 1)\nwhile left + 1 < n and lists[left] < lists[left + 1]:\n    left += 1\nwhile right >= 1 and lists[right] < lists[right - 1]:\n    right -= 1\nleft += 1\nright = n - right\nif left & 1 or right & 1:\n    print('Alice')\nelse:\n    print('Bob')", "n = int(input())\na = list(map(int, input().split()))\n(l, r) = (0, n - 1)\nwhile l + 1 < n and a[l] < a[l + 1]:\n    l += 1\nwhile r >= 0 and a[r] < a[r - 1]:\n    r -= 1\nl = l + 1\nr = n - r\nif l % 2 or r % 2:\n    print('Alice')\nelse:\n    print('Bob')", "length = int(input())\narr = input().split(' ')\narr = list(map(int, arr))\nleftMax = 1\nrightMax = 1\nfor i in range(length - 1):\n    if arr[i] < arr[i + 1]:\n        leftMax += 1\n    else:\n        break\nfor i in range(length - 1):\n    if arr[-(i + 1)] < arr[-(i + 2)]:\n        rightMax += 1\n    else:\n        break\nif leftMax % 2 != 0 or rightMax % 2 != 0 or length == 1:\n    print('Alice')\nelse:\n    print('Bob')", "n = int(input())\na = list(map(int, input().split()))\n(l, r) = (0, n - 1)\nwhile l + 1 < n and a[l] < a[l + 1]:\n    l += 1\nwhile r >= 0 and a[r] < a[r - 1]:\n    r -= 1\nl = l + 1\nr = n - r\nif l % 2 or r % 2:\n    print('Alice')\nelse:\n    print('Bob')", "n = int(input())\na = list(map(int, input().split()))\n(l, r) = (0, n - 1)\nwhile l + 1 < n and a[l] < a[l + 1]:\n    l += 1\nwhile r >= 0 and a[r] < a[r - 1]:\n    r -= 1\nl = l + 1\nr = n - r\nif l % 2 or r % 2:\n    print('Alice')\nelse:\n    print('Bob')", "n = int(input())\na = list(map(int, input().split()))\nLeft = 0\nRight = n - 1\nwhile Left != n - 1 and a[Left + 1] > a[Left]:\n    Left += 1\nwhile Right != 0 and a[Right - 1] > a[Right]:\n    Right -= 1\nif (Left + 1) % 2 or (n - Right) % 2:\n    print('Alice')\nelse:\n    print('Bob')", "n = int(input())\nx = list(map(int, input().split()))\n(l, r) = (0, n - 1)\nwhile l + 1 < n and x[l] < x[l + 1]:\n    l += 1\nwhile r >= 0 and x[r] < x[r - 1]:\n    r -= 1\nl = l + 1\nr = n - r\nif l % 2 or r % 2:\n    print('Alice')\nelse:\n    print('Bob')", "n = int(input())\nx = list(map(int, input().split()))\n(l, r) = (0, n - 1)\nwhile l + 1 < n and x[l] < x[l + 1]:\n    l += 1\nwhile r >= 0 and x[r] < x[r - 1]:\n    r -= 1\nl = l + 1\nr = n - r\nif l % 2 or r % 2:\n    print('Alice')\nelse:\n    print('Bob')", "n = int(input())\na = list(map(int, input().split()))\n(l, r) = (0, n - 1)\nwhile l + 1 < n and a[l] < a[l + 1]:\n    l += 1\nwhile r >= 0 and a[r] < a[r - 1]:\n    r -= 1\nl = l + 1\nr = n - r\nif l % 2 or r % 2:\n    print('Alice')\nelse:\n    print('Bob')", "n = int(input())\nvetor = list(map(lambda x: int(x), input().split(' ')))\nright = True\nleft = True\nfor i in range(0, n - 1):\n    if vetor[i + 1] <= vetor[i]:\n        break\n    left = not left\nfor j in range(n - 1, -1, -1):\n    if vetor[j - 1] <= vetor[j]:\n        break\n    right = not right\nif right or left:\n    print('Alice')\nelse:\n    print('Bob')", "n = int(input())\na = list(map(int, input().split()))\n(l, r) = (0, n - 1)\nwhile l + 1 < n and a[l] < a[l + 1]:\n    l += 1\nwhile r >= 0 and a[r] < a[r - 1]:\n    r -= 1\nl = l + 1\nr = n - r\nif l % 2 or r % 2:\n    print('Alice')\nelse:\n    print('Bob')", "n = int(input())\nnum = [int(i) for i in input().split()]\n(l, r) = (0, n - 1)\nwhile l + 1 < n and num[l] < num[l + 1]:\n    l += 1\nwhile r >= 0 and num[r] < num[r - 1]:\n    r -= 1\nl = l + 1\nr = n - r\nif l % 2 or r % 2:\n    print('Alice')\nelse:\n    print('Bob')", "from sys import stdin, stdout\nfrom collections import defaultdict\ninput = stdin.readline\nfrom random import randint\nimport math\nimport sys\nsys.setrecursionlimit(10 ** 7)\nn = int(input())\na = list(map(int, input().split()))\nLeft = 0\nRight = n - 1\nwhile Left != n - 1 and a[Left + 1] > a[Left]:\n    Left += 1\nwhile Right != 0 and a[Right - 1] > a[Right]:\n    Right -= 1\nLeft += 1\nRight = n - Right\nif Left % 2 or Right % 2:\n    print('Alice')\nelse:\n    print('Bob')", "n = int(input())\na = list(map(int, input().split()))\n(l, r) = (0, n - 1)\nwhile l + 1 < n and a[l] < a[l + 1]:\n    l += 1\nwhile r >= 0 and a[r] < a[r - 1]:\n    r -= 1\nl = l + 1\nr = n - r\nif l % 2 or r % 2:\n    print('Alice')\nelse:\n    print('Bob')"]