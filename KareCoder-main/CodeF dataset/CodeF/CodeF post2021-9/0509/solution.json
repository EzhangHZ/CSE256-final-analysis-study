["import sys\ninput = sys.stdin.readline\n\ndef solve():\n    s = input().strip()\n    n = len(s)\n    curr = 0\n    prefixCount = [0]\n    for i in range(n):\n        if s[i] == '0':\n            curr += 1\n        prefixCount.append(curr)\n    cnt = [curr, n - curr]\n    ans = float('inf')\n    for i in range(curr + 1):\n        ans = min(ans, prefixCount[i + cnt[1]] - prefixCount[i])\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "def mincost(s):\n    n = len(s)\n    nums1 = s.count('1')\n    n0 = 0\n    for i in range(nums1):\n        if s[i] == '0':\n            n0 += 1\n    res = n0\n    for j in range(nums1, n):\n        if s[j] == '0':\n            n0 += 1\n        if s[j - nums1] == '0':\n            n0 -= 1\n        res = min(res, n0)\n    return res\nt = int(input())\nfor _ in range(t):\n    s = input()\n    res = mincost(s)\n    print(res)", "t = int(input())\nans = []\nfor x in range(t):\n    s = input()\n    n = len(s)\n    zi = 0\n    numz = {}\n    numz[-1] = 0\n    for x in range(n):\n        if s[x] == '0':\n            zi = zi + 1\n        numz[x] = zi\n    winsize = n - zi\n    cost = numz[winsize - 1] - numz[-1]\n    for x in range(-1, n - winsize):\n        cost = min(cost, numz[x + winsize] - numz[x])\n    ans.append(cost)\nfor a in ans:\n    print(a)", "import math\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    zi = 0\n    numz = {}\n    numz[0] = 0\n    for x in range(n):\n        if s[x] == '0':\n            zi = zi + 1\n        numz[x + 1] = zi\n    ones = n - zi\n    cost = math.inf\n    for x in range(zi + 1):\n        cost = min(cost, numz[x + ones] - numz[x])\n    print(cost)", "t = int(input())\nfor i in range(t):\n    s = list(map(int, list(input())))\n    n = len(s)\n    b = 0\n    for i in s:\n        if i == 1:\n            b += 1\n    l = 0\n    r = b\n    if r == 0:\n        print(0)\n        continue\n    cur = 0\n    for i in range(l, r):\n        if s[i] == 0:\n            cur += 1\n    ans = cur\n    while r < n:\n        if r < n and s[r] == 0:\n            cur += 1\n        if s[l] == 0:\n            cur -= 1\n        if cur < ans:\n            ans = cur\n        l += 1\n        r += 1\n    print(ans)", "class Solution:\n\n    def helper(self, s, x):\n        n = len(s)\n        dp = [0] * (x + 1)\n        l = 0\n        for i in s:\n            if i == '1':\n                l += 1\n                dp[l] = dp[l - 1]\n            else:\n                dp[l] += 1\n        return dp\n\n    def solve(self):\n        s = input()\n        n = len(s)\n        x = s.count('0')\n        ans = min(x, n - x)\n        dp_front = self.helper(s, n - x)\n        dp_back = self.helper(s[::-1], n - x)\n        i = 0\n        while i < ans:\n            j = ans - i - 1\n            while j >= 0 and x - (dp_front[i] + dp_back[j]) < ans:\n                ans = max(i + j, x - (dp_front[i] + dp_back[j]))\n                j -= 1\n            i += 1\n        return ans\nfor i in range(int(input())):\n    print(Solution().solve())", "t = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    ones = [0] * (n + 1)\n    for i in range(n):\n        ones[i + 1] = ones[i]\n        if s[i] == '1':\n            ones[i + 1] += 1\n    x = ones[-1]\n    res = 1000000000.0\n    for i in range(x, n + 1):\n        res = min(res, x - ones[i] + ones[i - x])\n    print(res)", "for x in range(int(input())):\n    a = list(input())\n    b = a.count('1')\n    y = [a[0:b].count('0')]\n    m = a[0:b].count('0')\n    for i in range(0, len(a) - b):\n        m += int(a[i]) - int(a[i + b])\n        y.append(m)\n    print(min(y))", "a = int(input())\nfor y in range(a):\n    b = input()\n    q = len(b) - 1\n    c = b.count('1')\n    d = b.count('0')\n    if c == 0 or d == 0:\n        print(0)\n    else:\n        o = b[:d].count('1')\n        z = b[:d].count('0')\n        ans = max(d - z, o)\n        for y in range(d - 1, -1, -1):\n            if b[y] == '1':\n                o -= 1\n            else:\n                z -= 1\n            if b[q] == '1':\n                o += 1\n            else:\n                z += 1\n            q -= 1\n            ans = min(ans, max(d - z, o))\n        print(ans)", "import math\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    zi = 0\n    numz = {}\n    numz[0] = 0\n    for x in range(n):\n        if s[x] == '0':\n            zi = zi + 1\n        numz[x + 1] = zi\n    ones = n - zi\n    cost = math.inf\n    for x in range(n - ones + 1):\n        cost = min(cost, numz[x + ones] - numz[x])\n    print(cost)", "t = int(input())\nfor z in range(t):\n    s = input()\n    n = len(s)\n    arr = [0]\n    for i in range(n):\n        arr.append(arr[-1] + int(s[i]))\n    ans = n - arr[-1]\n    for i in range(n - arr[-1] + 1):\n        j = i + arr[-1]\n        ans = min(ans, arr[-1] - (arr[j] - arr[i]))\n    print(ans)", "for inh in range(int(input())):\n    s = input()\n    n = len(s)\n    zer = s.count('0')\n    k = zer\n    a = [0]\n    for i in s:\n        a.append(a[-1] + int(i))\n    for i in range(zer + 1):\n        dd = i + a[-1]\n        k = min(k, a[-1] - (a[dd] - a[i]))\n    print(k)", "import math\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    zi = 0\n    numz = {}\n    numz[0] = 0\n    for x in range(n):\n        if s[x] == '0':\n            zi = zi + 1\n        numz[x + 1] = zi\n    ones = n - zi\n    cost = math.inf\n    for x in range(zi + 1):\n        cost = min(cost, numz[x + ones] - numz[x])\n    print(cost)", "t = int(input())\nfor z in range(t):\n    s = input()\n    n = len(s)\n    arr = [0]\n    for i in range(n):\n        arr.append(arr[-1] + int(s[i]))\n    ans = n - arr[-1]\n    for i in range(n - arr[-1] + 1):\n        j = i + arr[-1]\n        ans = min(ans, arr[-1] - (arr[j] - arr[i]))\n    print(ans)", "t = int(input())\nfor z in range(t):\n    s = input()\n    n = len(s)\n    arr = [0]\n    for i in range(n):\n        arr.append(arr[-1] + int(s[i]))\n    ans = n - arr[-1]\n    for i in range(n - arr[-1] + 1):\n        j = i + arr[-1]\n        ans = min(ans, arr[-1] - (arr[j] - arr[i]))\n    print(ans)", "t = int(input())\nfor z in range(t):\n    s = input()\n    n = len(s)\n    arr = [0]\n    for i in range(n):\n        arr.append(arr[-1] + int(s[i]))\n    ans = n - arr[-1]\n    for i in range(n - arr[-1] + 1):\n        j = i + arr[-1]\n        ans = min(ans, arr[-1] - (arr[j] - arr[i]))\n    print(ans)", "t = int(input())\nfor z in range(t):\n    s = input()\n    n = len(s)\n    arr = [0]\n    for i in range(n):\n        arr.append(arr[-1] + int(s[i]))\n    ans = n - arr[-1]\n    for i in range(n - arr[-1] + 1):\n        j = i + arr[-1]\n        ans = min(ans, arr[-1] - (arr[j] - arr[i]))\n    print(ans)", "r = int(input())\nfor p in range(r):\n    u = input()\n    n = len(u)\n    k = [0]\n    for i in range(n):\n        k.append(k[-1] + int(u[i]))\n    ans = n - k[-1]\n    for i in range(n - k[-1] + 1):\n        j = i + k[-1]\n        ans = min(ans, k[-1] - (k[j] - k[i]))\n    print(ans)", "t = int(input())\nfor z in range(t):\n    s = input()\n    n = len(s)\n    a = [0]\n    for i in range(n):\n        a.append(a[-1] + int(s[i]))\n    ans = n - a[-1]\n    for i in range(n - a[-1] + 1):\n        j = i + a[-1]\n        ans = min(ans, a[-1] - (a[j] - a[i]))\n    print(ans)", "t = int(input())\nfor z in range(t):\n    s = input()\n    n = len(s)\n    a = [0]\n    for i in range(n):\n        a.append(a[-1] + int(s[i]))\n    ans = n - a[-1]\n    for i in range(n - a[-1] + 1):\n        j = i + a[-1]\n        ans = min(ans, a[-1] - (a[j] - a[i]))\n    print(ans)", "t = int(input())\nfor z in range(t):\n    s = input()\n    n = len(s)\n    arr = [0]\n    for i in range(n):\n        arr.append(arr[-1] + int(s[i]))\n    ans = n - arr[-1]\n    for i in range(n - arr[-1] + 1):\n        j = i + arr[-1]\n        ans = min(ans, arr[-1] - (arr[j] - arr[i]))\n    print(ans)", "x = int(input())\nfor z in range(x):\n    s = input()\n    n = len(s)\n    arr = [0]\n    for i in range(n):\n        arr.append(arr[-1] + int(s[i]))\n    ans = n - arr[-1]\n    for i in range(n - arr[-1] + 1):\n        j = i + arr[-1]\n        ans = min(ans, arr[-1] - (arr[j] - arr[i]))\n    print(ans)", "r = int(input())\nfor p in range(r):\n    u = input()\n    n = len(u)\n    k = [0]\n    for i in range(n):\n        k.append(k[-1] + int(u[i]))\n    ans = n - k[-1]\n    for i in range(n - k[-1] + 1):\n        j = i + k[-1]\n        ans = min(ans, k[-1] - (k[j] - k[i]))\n    print(ans)", "import sys\n\ndef minimise(string):\n    s = 0\n    for i in string:\n        s += 1 if i == '1' else 0\n    (num0, num1) = (0, s)\n    j = 0\n    ans = sys.maxsize\n    for i in range(len(string)):\n        if string[i] == '0':\n            num0 += 1\n        else:\n            num1 -= 1\n        while num1 < num0:\n            if string[j] == '1':\n                num1 += 1\n            else:\n                num0 -= 1\n            j += 1\n            ans = min(ans, max(num0, num1))\n        ans = min(ans, max(num0, num1))\n    return ans\nt = int(input())\nwhile t:\n    s = input()\n    print(minimise(s))\n    t -= 1", "import sys\n\ndef solve():\n    for tc in range(int(input())):\n        s = list(input())\n        n = len(s)\n        num0 = 0\n        for i in s:\n            if i == '0':\n                num0 += 1\n        (pre0, pre0r) = ([], [])\n        (z, zr) = (0, 0)\n        for i in range(n):\n            if s[i] == '0':\n                z += 1\n            if s[n - i - 1] == '0':\n                zr += 1\n            pre0.append(z)\n            pre0r.append(zr)\n        if num0 == 0 or num0 == n:\n            print(0)\n        else:\n            ans = sys.maxsize\n            for i in range(-1, num0):\n                zrem = 0\n                if i != -1:\n                    zrem += pre0[i]\n                if i != num0 - 1:\n                    zrem += pre0r[num0 - i - 2]\n                orem = num0 - zrem\n                ans = min(ans, orem)\n            print(ans)\nsolve()", "t = int(input())\nfor z in range(t):\n    s = input()\n    n = len(s)\n    arr = [0]\n    for i in range(n):\n        arr.append(arr[-1] + int(s[i]))\n    ans = n - arr[-1]\n    for i in range(n - arr[-1] + 1):\n        j = i + arr[-1]\n        ans = min(ans, arr[-1] - (arr[j] - arr[i]))\n    print(ans)", "t = int(input())\nfor z in range(t):\n    s = input()\n    n = len(s)\n    a = [0]\n    for i in range(n):\n        a.append(a[-1] + int(s[i]))\n    ans = n - a[-1]\n    for i in range(n - a[-1] + 1):\n        j = i + a[-1]\n        ans = min(ans, a[-1] - (a[j] - a[i]))\n    print(ans)", "z = int(input())\nfor kvs in range(z):\n    s = input()\n    n = len(s)\n    b = s.count('0')\n    k = b\n    a = [0]\n    for i in s:\n        a.append(a[-1] + int(i))\n    for i in range(b + 1):\n        d = i + a[-1]\n        k = min(k, a[-1] - (a[d] - a[i]))\n    print(k)", "def can(pos, k):\n    c = len(pos)\n    num1 = c - k\n    for i in range(k + 1):\n        x1 = pos[i]\n        x2 = pos[i + num1 - 1]\n        if x2 - x1 + 1 - num1 <= k:\n            return True\n    return False\nT = int(input())\nwhile T:\n    T -= 1\n    s = input().strip('0')\n    pos = []\n    for i in range(len(s)):\n        if s[i] == '1':\n            pos.append(i)\n    l = 0\n    r = len(pos) - 1\n    while l <= r:\n        mid = (r + l) // 2\n        if can(pos, mid):\n            r = mid - 1\n        else:\n            l = mid + 1\n    print(l)", "t = int(input())\nfor z in range(t):\n    s = input()\n    n = len(s)\n    a = [0]\n    for i in range(n):\n        a.append(a[-1] + int(s[i]))\n    ans = n - a[-1]\n    for i in range(n - a[-1] + 1):\n        j = i + a[-1]\n        ans = min(ans, a[-1] - (a[j] - a[i]))\n    print(ans)", "import collections\nfrom math import ceil, gcd, sqrt, log\nINF = float('inf')\nmod = 1000000007\n\ndef isPossible(mid, pref, suff, zeros):\n    for i in range(mid + 1):\n        zeros_left = zeros\n        ones_rem_L = pref[i]\n        ones_rem_R = suff[mid - i]\n        zeros_left -= ones_rem_L + ones_rem_R\n        if zeros_left <= mid:\n            return True\n    return False\n\ndef solve():\n    s = input()\n    zeros = s.count('0')\n    ones = s.count('1')\n    pref = []\n    suff = []\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            count += 1\n        else:\n            pref.append(count)\n    pref.append(count)\n    count = 0\n    for j in range(len(s) - 1, -1, -1):\n        if s[j] == '0':\n            count += 1\n        else:\n            suff.append(count)\n    suff.append(count)\n    low = 0\n    high = ones\n    ans = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if isPossible(mid, pref, suff, zeros):\n            ans = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    print(ans)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "import sys\ninput = sys.stdin.readline\n\ndef check(res, p):\n    L = len(p)\n    remain = L - res\n    for i in range(res + 1):\n        (l, r) = (p[i], p[i + remain - 1])\n        if r - l + 1 - remain <= res:\n            return True\n    return False\nT = int(input())\nfor _ in range(T):\n    s = input()\n    pos = []\n    for i in range(len(s)):\n        if s[i] == '1':\n            pos.append(i)\n    (l, r) = (int(0), len(pos))\n    while r > l:\n        mid = (l + r) // 2\n        if check(mid, pos):\n            r = mid\n        else:\n            l = mid + 1\n    print(l)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def check(w, res):\n    Len = len(w)\n    cnt = Len - res\n    for i in range(res + 1):\n        (l, r) = (w[i], w[i + cnt - 1])\n        if r - l + 1 - cnt <= res:\n            return True\n    return False\nT = int(input())\nfor i in range(T):\n    s = input()\n    w = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            w.append(i)\n    (l, r) = (0, len(w))\n    while r > l:\n        mid = (l + r) // 2\n        if check(w, mid):\n            r = mid\n        else:\n            l = mid + 1\n    if len(w) == 0 or w[-1] - w[0] + 1 == len(w):\n        print(0)\n    else:\n        print(l)", "def main():\n    s = input()\n    (i1, i2) = (0, 1)\n    (m1, m2) = (int(s[0] == '0'), s[1:].count('1'))\n    min_ = 10 ** 9\n    while True:\n        min_ = min(min_, max(m1, m2))\n        if m1 >= m2:\n            i1 += 1\n            if i1 == len(s) + 1:\n                break\n            if s[i1 - 1] == '0':\n                m1 -= 1\n            else:\n                m2 += 1\n        else:\n            i2 += 1\n            if i2 == len(s) + 1:\n                break\n            if s[i2 - 1] == '0':\n                m1 += 1\n            else:\n                m2 -= 1\n    min_ = min(min_, max(m1, m2))\n    print(min_)\nfor i in range(int(input())):\n    main()", "def check(a, m):\n    k = len(a)\n    x = k - m\n    for i in range(m + 1):\n        l = a[i]\n        r = a[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    a = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            a.append(i)\n    l = 0\n    r = len(a)\n    while r - l > 1:\n        mid = (l + r) // 2\n        if check(a, mid):\n            r = mid\n        else:\n            l = mid\n    if len(a) == 0 or a[-1] - a[0] == len(a) - 1:\n        print(0)\n    else:\n        print(r)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def check(pos, k):\n    c = len(pos)\n    x = c - k\n    for i in range(k + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= k:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    left = 0\n    right = len(pos)\n    while right - left > 1:\n        mid = (left + right) // 2\n        if check(pos, mid):\n            right = mid\n        else:\n            left = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(right)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def check(a, m):\n    k = len(a)\n    x = k - m\n    for i in range(m + 1):\n        l = a[i]\n        r = a[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    a = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            a.append(i)\n    l = 0\n    r = len(a)\n    while r - l > 1:\n        mid = (l + r) // 2\n        if check(a, mid):\n            r = mid\n        else:\n            l = mid\n    if len(a) == 0 or a[-1] - a[0] == len(a) - 1:\n        print(0)\n    else:\n        print(r)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def check(value):\n    for onesleft in range(value + 1):\n        zerosdeleted = left[onesleft] + right[value - onesleft]\n        if zeros - zerosdeleted <= value:\n            return True\n    return False\n\ndef guess(mi, ma):\n    if mi + 1 >= ma:\n        if check(mi):\n            return mi\n        else:\n            return mi + 1\n    mid = (ma + mi) // 2\n    if check(mid):\n        return guess(mi, mid)\n    else:\n        return guess(mid, ma)\nT = int(input())\nfor testcase in range(1, T + 1):\n    s = input()\n    zeros = s.count('0')\n    n = len(s)\n    ones = n - zeros\n    if ones == 0:\n        print(0)\n    else:\n        left = []\n        count = 0\n        for i in range(n):\n            if s[i] == '1':\n                left.append(count)\n            else:\n                count += 1\n        right = []\n        count = 0\n        for i in range(n - 1, -1, -1):\n            if s[i] == '1':\n                right.append(count)\n            else:\n                count += 1\n        print(guess(0, min(zeros, ones)))", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "def can(pos, m):\n    k = len(pos)\n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "import math\nfor _ in range(int(input())):\n    bits = str(input())\n    n = len(bits)\n    n1 = 0\n    n0 = 0\n    for i in range(n):\n        if int(bits[i]) == 1:\n            n1 += 1\n        else:\n            n0 += 1\n    (zin, oout) = (0, n1)\n    j = 0\n    ans = n1\n    for i in range(n):\n        while j < n and zin < oout:\n            if int(bits[j]) == 0:\n                zin += 1\n            else:\n                oout -= 1\n            j += 1\n        ans = min(ans, max(zin, oout))\n        if int(bits[i]) == 0:\n            zin -= 1\n        else:\n            oout += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    s = input()\n    zb = [0]\n    ze = [0]\n    ob = [0]\n    oe = [0]\n    c = 0\n    for j in s:\n        if j == '0':\n            c += 1\n        zb.append(c)\n    z = zb[-1]\n    c = 0\n    for j in s:\n        if j == '1':\n            c += 1\n        ob.append(c)\n    o = ob[-1]\n    c = 0\n    for j in range(len(s)):\n        if s[-j - 1] == '0':\n            c += 1\n        ze.append(c)\n    c = 0\n    for j in range(len(s)):\n        if s[-j - 1] == '1':\n            c += 1\n        oe.append(c)\n    ans = 999999999\n    for j in range(len(s)):\n        cost0 = z - zb[j] - ze[z - zb[j]]\n        cost1 = ob[j] + oe[z - zb[j] - ob[j]]\n        ans = min(max(cost0, cost1), ans)\n    print(ans)", "mi = lambda : map(int, input().split())\n\ndef check(pre, mid, pos):\n    rem = len(pos) - mid\n    for i in range(len(pos) + 1 - rem):\n        l = pos[i]\n        r = pos[i + rem - 1]\n        if r - l + 1 - (pre[r + 1] - pre[l]) <= mid:\n            return True\n    return False\nfor t in range(int(input())):\n    s = str(input())\n    if '1' not in s:\n        print(0)\n        continue\n    pre = [0]\n    pos = []\n    for i in range(len(s)):\n        if s[i] == '1':\n            pos.append(i)\n        pre.append(pre[-1] + int(s[i]))\n    l = 0\n    r = s.count('1')\n    while r - l > 1:\n        mid = (r + l) // 2\n        if not check(pre, mid, pos):\n            l = mid\n        else:\n            r = mid\n    if check(pre, l, pos):\n        print(l)\n    else:\n        print(r)", "t = int(input())\nwhile t > 0:\n    s = input()\n    n = len(s)\n    zero = 0\n    one = 0\n    for i in range(n):\n        if s[i] == '0':\n            zero += 1\n        else:\n            one += 1\n    r = -1\n    l = -1\n    r0 = zero\n    r1 = one\n    l0 = 0\n    l1 = 0\n    ans = n + 2\n    while r < n:\n        ans = min(ans, max(zero - (r0 + l0), r1 + l1))\n        r += 1\n        if r < n:\n            if s[r] == '0':\n                r0 -= 1\n            else:\n                r1 -= 1\n        ans = min(ans, max(zero - (r0 + l0), r1 + l1))\n        while l < r and l < n:\n            if zero - (r0 + l0) - (r1 + l1) <= 0:\n                break\n            ans = min(ans, max(zero - (r0 + l0), r1 + l1))\n            l += 1\n            if l < r and l < n:\n                if s[l] == '0':\n                    l0 += 1\n                else:\n                    l1 += 1\n            ans = min(ans, max(zero - (r0 + l0), r1 + l1))\n    ans = min(ans, max(zero - (r0 + l0), r1 + l1))\n    print(ans)\n    t -= 1", "t = int(input())\nfor ts in range(t):\n    s = input()\n    pos = []\n    for i in range(len(s)):\n        if s[i] == '0':\n            pos.append(i)\n    sm = [0]\n    for i in s:\n        sm.append(sm[-1] + (1 if i == '1' else 0))\n    l = -1\n    r = len(pos)\n    while l + 1 != r:\n        mid = (l + r) // 2\n        ok = False\n        for i in range(len(pos) - mid + 1):\n            if i == 0:\n                ll = 0\n            else:\n                ll = pos[i - 1] + 1\n            if i == len(pos) - mid:\n                rr = len(s) - 1\n            else:\n                rr = pos[i + mid] - 1\n            if sm[ll] + sm[-1] - sm[rr + 1] <= mid:\n                ok = True\n                break\n        if ok:\n            r = mid\n        else:\n            l = mid\n    print(r)", "def binsearch(l, r, check):\n    while l + 1 < r:\n        m = (l + r) // 2\n        if check(m):\n            r = m\n        else:\n            l = m\n    return (l, r)\n\ndef work():\n    s = input()\n    sv = [int(c) for c in s]\n    totalonecount = sum(sv)\n    n = len(s)\n\n    def check(cost):\n        start = 0\n        width = 0\n        curcount = [0, 0]\n        while True:\n            if curcount[0] <= cost:\n                if curcount[1] < totalonecount - cost:\n                    if start + width == n:\n                        return False\n                    newhire = sv[start + width]\n                    width += 1\n                    curcount[newhire] += 1\n                else:\n                    return True\n            else:\n                victim = sv[start]\n                start += 1\n                width -= 1\n                curcount[victim] -= 1\n    (l1, r1) = binsearch(-1, n, check)\n    return r1\ntn = int(input())\nfor ti in range(tn):\n    print(work())"]