["from collections import defaultdict\nimport sys, threading\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10 ** 6)\nthreading.stack_size(2 ** 27)\n\ndef main():\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    G = [[] for _ in range(N)]\n    for _ in range(N - 1):\n        (x, y) = [int(x) - 1 for x in input().split()]\n        G[x].append(y)\n        G[y].append(x)\n    B = [0] * N\n    vals = defaultdict(set)\n    res = [0]\n\n    def fill_dfs(v, p):\n        B[v] = A[v]\n        if p != -1:\n            B[v] ^= B[p]\n        for u in G[v]:\n            if u != p:\n                fill_dfs(u, v)\n\n    def calc_dfs(v, p):\n        zero = False\n        vals[v].add(B[v])\n        for u in G[v]:\n            if u != p:\n                calc_dfs(u, v)\n                if len(vals[v]) < len(vals[u]):\n                    (vals[v], vals[u]) = (vals[u], vals[v])\n                for x in vals[u]:\n                    zero |= x ^ A[v] in vals[v]\n                for x in vals[u]:\n                    vals[v].add(x)\n                vals[u].clear()\n        if zero:\n            res[0] += 1\n            vals[v].clear()\n    fill_dfs(0, -1)\n    calc_dfs(0, -1)\n    print(res[0])\nthreading.Thread(target=main).start()"]