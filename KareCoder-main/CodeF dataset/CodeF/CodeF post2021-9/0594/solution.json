["t = int(input(''))\nC = [0] * t\nfor i in range(t):\n    LRX = input('').split(' ')\n    n = int(LRX[0])\n    p = int(LRX[1])\n    A = [int(x) for x in input('').split(' ')]\n    if n == 1:\n        if A[0] == 2:\n            C[i] = p - 2\n        else:\n            C[i] = p - 1\n        continue\n    qq = n - 2\n    while qq >= 0 and A[qq] == p - 1:\n        qq -= 1\n    if qq >= 0:\n        sp = (A[qq] + 1) % p\n    else:\n        sp = 1\n    S = set(A)\n    q = (A[-1] - 1) % p\n    v = False\n    while q in S:\n        q = (q - 1) % p\n        if q == A[-1]:\n            v = True\n            break\n    if v:\n        continue\n    if q == 0:\n        C[i] = p - A[-1]\n    elif q < A[-1] and q == sp:\n        w = False\n        q = (q - 1) % p\n        while q in S:\n            q = (q - 1) % p\n            if q == p - 1:\n                w = True\n                break\n        if w:\n            C[i] = p - A[-1]\n        else:\n            C[i] = p + q - A[-1]\n    elif q < A[-1]:\n        C[i] = p + q - A[-1]\n    else:\n        C[i] = q - A[-1]\nfor j in C:\n    print(j)", "testcase = int(input())\nfor _ in range(testcase):\n    (n, p) = [int(num) for num in input().split()]\n    arr = [int(num) for num in input().split()]\n    arrs = set(arr)\n    arr.insert(0, 0)\n    first = arr[-1]\n    for i in range(n - 1, -1, -1):\n        if arr[i] == p - 1:\n            continue\n        comp = arr[i] + 1\n        break\n    tt = comp in arrs\n    i = (first - 1 + p) % p\n    while i in arrs and i != first:\n        i = (i - 1 + p) % p\n    if i == first:\n        print(0)\n        continue\n    elif i > first or tt:\n        ans = (i - first + p) % p\n    else:\n        arrs.add(comp)\n        i = (first - 1 + p) % p\n        while i in arrs and i != first:\n            i = (i - 1 + p) % p\n        ans = max((p - first) % p, (i - first + p) % p)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, p) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.reverse()\n    i = 1\n    while i < n and a[i] == p - 1:\n        i += 1\n    loopx = a[i] + 1 if i < n else 1\n    free = set(a)\n    fin = p - 1\n    cur = (a[0] - 1) % p\n    while cur in free:\n        fin -= 1\n        if fin == 0:\n            break\n        cur = (cur - 1) % p\n    free.add(loopx)\n    free.add(0)\n    cur2 = (a[0] - 1) % p\n    fin2 = p - 1\n    while cur2 in free:\n        fin2 -= 1\n        if fin2 == 0:\n            break\n        cur2 = (cur2 - 1) % p\n    fin = min(fin, max(fin2, p - a[0]))\n    print(fin)", "for t in range(int(input())):\n    (n, p) = map(int, input().split())\n    A = list(map(int, input().split()))\n    last = A[-1]\n    T = set(A)\n    if len(T) == p:\n        print(0)\n        continue\n    S = list(T)\n    S.sort()\n    if len(S) > last and S[last] == last:\n        cur = p - 1\n        while True:\n            if cur not in T:\n                print(cur - last)\n                break\n            cur -= 1\n    else:\n        for i in range(n - 2, -1, -1):\n            if A[i] != p - 1:\n                T.add(A[i] + 1)\n                break\n        else:\n            T.add(1)\n        if len(T) == p:\n            print(p - last)\n            continue\n        cur = last - 1\n        while True:\n            if cur not in T:\n                print(max(p - last, p - last + cur))\n                break\n            cur -= 1", "from sys import stdin, stdout\nt = int(stdin.readline().strip())\n\ndef addWithCarry(digits, base):\n    carry = 1\n    result = set(digits)\n    result.add(0)\n    for i in range(len(digits) - 2, -1, -1):\n        curr = digits[i] + carry\n        result.add(curr % base)\n        carry = curr // base\n    while carry:\n        result.add(carry % base)\n        carry //= base\n    return result\nfor test in range(t):\n    (n, p) = map(int, stdin.readline().split())\n    digits = list(map(int, stdin.readline().split()))\n    upper_bound = p\n    ss = set(digits)\n    answer = 0\n    while upper_bound - 1 in ss:\n        upper_bound -= 1\n    if upper_bound == 0:\n        print(0)\n        continue\n    if upper_bound > digits[-1]:\n        answer += upper_bound - digits[-1] - 1\n        (upper_bound, digits[-1]) = (digits[-1], upper_bound - 1)\n    while upper_bound - 1 in ss:\n        upper_bound -= 1\n    if upper_bound == 0:\n        print(answer)\n        continue\n    answer += p - digits[-1]\n    ss = addWithCarry(digits, p)\n    while upper_bound - 1 in ss:\n        upper_bound -= 1\n    if upper_bound == 0:\n        print(answer)\n        continue\n    answer += upper_bound - 1\n    print(answer)", "def solve():\n    (n, p) = map(int, input().split())\n    digits = list(map(int, input().split()))\n    digit_set = set(digits)\n    digit_sorted = sorted(list(digit_set))\n    last = digits[-1]\n    lift = False\n    for i in range(len(digit_set)):\n        if i == last:\n            break\n        if i not in digit_set:\n            lift = True\n    else:\n        lift = True\n    if lift:\n        for i in range(n - 2, -1, -1):\n            if digits[i] + 1 != p:\n                digit_set.add(digits[i] + 1)\n                break\n        else:\n            digit_set.add(1)\n        digit_sorted = sorted(list(digit_set))\n        out = p - last\n        for i in range(len(digit_set) + 1):\n            if last - i == 0:\n                break\n            if last - i not in digit_set:\n                out += last - i\n                break\n        return out\n    else:\n        maxp = last\n        for ith in range(1, len(digit_sorted) + 1):\n            i = len(digit_sorted) - ith\n            if digit_sorted[i] != p - ith:\n                maxp = p - ith\n                break\n        return maxp - last\nfor _ in range(int(input())):\n    print(solve())"]