["from collections import Counter\n\ndef main():\n    for test in range(int(input())):\n        s = input().split()\n        k = int(s[1])\n        a = sorted(map(int, input().split()))\n        counter = Counter(a)\n        (l, r, target_l, my_max) = (-1, -1, -1, -1)\n        for val in counter:\n            if counter[val] < k:\n                continue\n            if val == r + 1:\n                r = val\n                if val - l > my_max:\n                    (my_max, target_l) = (val - l, l)\n            else:\n                (l, r) = (val, val)\n                if my_max == -1:\n                    (my_max, target_l) = (0, l)\n        if my_max != -1:\n            print('{} {}'.format(target_l, target_l + my_max))\n        else:\n            print(-1)\nmain()", "def di():\n    return map(int, input().split())\n\ndef ii():\n    return int(input())\n\ndef li():\n    return list(map(int, input().split()))\n\ndef si():\n    return list(map(int, input()))\nimport sys\n\ndef check(nums, k):\n    numbers = nums.split()\n    numbers.sort(key=int)\n    numbersktimes = []\n    counter = 1\n    prev = 'a'\n    for i in numbers:\n        if prev == i:\n            counter += 1\n        else:\n            counter = 1\n        if counter == k:\n            numbersktimes.append(int(i))\n        prev = i\n    if len(numbersktimes) == 0:\n        print(-1)\n    else:\n        longestFirst = numbersktimes[0]\n        longestLast = numbersktimes[0]\n        prev = numbersktimes[0]\n        start = numbersktimes[0]\n        for index in range(1, len(numbersktimes)):\n            elem = numbersktimes[index]\n            if elem == prev + 1:\n                if elem - start > longestLast - longestFirst:\n                    longestLast = elem\n                    longestFirst = start\n            else:\n                start = elem\n            prev = elem\n        print(longestFirst, longestLast)\n\ndef main():\n    numTestcases = int(sys.stdin.readline())\n    for line in range(numTestcases):\n        lengthandtimes = sys.stdin.readline()\n        lt = lengthandtimes.split()\n        check(sys.stdin.readline(), int(lt[1]))\nmain()", "import sys\n\ndef check(nums, k):\n    numbers = nums.split()\n    numbers.sort(key=int)\n    numbersktimes = []\n    counter = 1\n    prev = 'a'\n    for i in numbers:\n        if prev == i:\n            counter += 1\n        else:\n            counter = 1\n        if counter == k:\n            numbersktimes.append(int(i))\n        prev = i\n    if len(numbersktimes) == 0:\n        print(-1)\n    else:\n        longestFirst = numbersktimes[0]\n        longestLast = numbersktimes[0]\n        prev = numbersktimes[0]\n        start = numbersktimes[0]\n        for index in range(1, len(numbersktimes)):\n            elem = numbersktimes[index]\n            if elem == prev + 1:\n                if elem - start > longestLast - longestFirst:\n                    longestLast = elem\n                    longestFirst = start\n            else:\n                start = elem\n            prev = elem\n        print(longestFirst, longestLast)\n\ndef main():\n    numTestcases = int(sys.stdin.readline())\n    for line in range(numTestcases):\n        lengthandtimes = sys.stdin.readline()\n        lt = lengthandtimes.split()\n        check(sys.stdin.readline(), int(lt[1]))\nmain()", "from collections import Counter\nt = int(input())\nfor w in range(t):\n    (n, k) = map(int, input().split())\n    arr = sorted(map(int, input().split()))\n    c = Counter(arr)\n    arr = sorted((z for (z, v) in c.items() if v >= k))\n    if len(arr) == 0:\n        print('-1')\n        continue\n    l = arr[0]\n    r = arr[0]\n    ansL = l\n    ansR = r\n    for val in arr:\n        if val - r == 1:\n            r = val\n        else:\n            if r - l > ansR - ansL:\n                ansL = l\n                ansR = r\n            l = val\n            r = val\n    if r - l > ansR - ansL:\n        ansL = l\n        ansR = r\n    print(ansL, ansR)", "import sys\n\ndef check(nums, k):\n    numbers = [int(x) for x in nums]\n    numbers.sort()\n    numbersktimes = []\n    counter = 1\n    prev = 'a'\n    for i in numbers:\n        if prev == i:\n            counter += 1\n        else:\n            counter = 1\n        if counter == k:\n            numbersktimes.append(int(i))\n        prev = i\n    if len(numbersktimes) == 0:\n        print(-1)\n    else:\n        longestFirst = numbersktimes[0]\n        longestLast = numbersktimes[0]\n        prev = numbersktimes[0]\n        start = numbersktimes[0]\n        for index in range(1, len(numbersktimes)):\n            elem = numbersktimes[index]\n            if elem == prev + 1:\n                if elem - start > longestLast - longestFirst:\n                    longestLast = elem\n                    longestFirst = start\n            else:\n                start = elem\n            prev = elem\n        print(longestFirst, longestLast)\n\ndef main():\n    numTestcases = int(input())\n    for _ in range(numTestcases):\n        (n, k) = [int(x) for x in input().strip().split()]\n        check(input().strip().split(), k)\nmain()", "t = int(input())\nfor nabor in range(t):\n    (n, k) = map(int, input().split())\n    arr = sorted(map(int, input().split()))\n    (f, count, pred) = (-1, 0, -1)\n    a = b = -1\n    maxrazn = 0\n    last = None\n    for (i, el) in enumerate(arr):\n        if f < el:\n            (f, count) = (el, 1)\n        else:\n            count += 1\n        if count == k:\n            if el != pred + 1:\n                a = b = el\n            else:\n                b = el\n            razn = b - a\n            if razn > maxrazn:\n                maxrazn = razn\n            if razn == maxrazn:\n                last = (a, b)\n            pred = el\n    if last is None:\n        print(-1)\n    else:\n        print(last[0], last[1])", "from collections import Counter\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    count = Counter(a)\n    arr = [x for (x, y) in count.items() if y >= k]\n    if len(arr) == 0:\n        print(-1)\n        continue\n    arr.sort()\n    mx = 0\n    lans = arr[0]\n    rans = arr[0]\n    l = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] == 1:\n            if arr[i] - l > mx:\n                lans = l\n                rans = arr[i]\n                mx = arr[i] - l\n        else:\n            l = arr[i]\n    print(lans, rans)", "from collections import Counter\n\ndef findRange(n, k, array):\n    array.sort()\n    cntr = Counter(array)\n    array2 = []\n    for key in cntr:\n        if cntr[key] >= k:\n            array2.append(key)\n    n = len(array2)\n    if n == 0:\n        return (-1, -1)\n    array2.sort()\n    l = array2[0]\n    r = array2[0]\n    lt = array2[0]\n    maxi = 0\n    for i in range(1, n):\n        if array2[i - 1] + 1 == array2[i]:\n            if array2[i] - lt > maxi:\n                l = lt\n                r = array2[i]\n                maxi = r - l\n        else:\n            lt = array2[i]\n    return (l, r)\n\ndef main():\n    tc = int(input())\n    for _ in range(tc):\n        (n, k) = map(int, input().split())\n        array = [int(a) for a in input().split()]\n        (l, r) = findRange(n, k, array)\n        if l == -1:\n            print(l)\n        else:\n            print(l, r)\nmain()", "from collections import Counter\nfor case in range(int(input())):\n    (nn, k) = map(int, input().split())\n    arr = sorted(map(int, input().split()))\n    d = Counter(arr)\n    arr = sorted((n for (n, v) in d.items() if v >= k))\n    left = right = currLeft = currRight = -1\n    for n in arr:\n        if n - 1 == currRight:\n            currRight += 1\n        else:\n            if currRight - currLeft >= right - left:\n                (left, right) = (currLeft, currRight)\n            currLeft = currRight = n\n    if currRight - currLeft >= right - left:\n        (left, right) = (currLeft, currRight)\n    if left == -1:\n        print(-1)\n    else:\n        print(left, right)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    count = Counter(a)\n    arr = [x for (x, y) in count.items() if y >= k]\n    if len(arr) == 0:\n        print(-1)\n        continue\n    arr.sort()\n    mx = 0\n    lans = arr[0]\n    rans = arr[0]\n    l = arr[0]\n    for i in range(len(arr)):\n        if arr[i] - arr[i - 1] == 1:\n            if arr[i] - l > mx:\n                lans = l\n                rans = arr[i]\n                mx = arr[i] - l\n        else:\n            l = arr[i]\n    print(lans, rans)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    cnt = {}\n    for x in a:\n        if x not in cnt:\n            cnt[x] = 1\n        else:\n            cnt[x] += 1\n    a = []\n    for (x, r) in cnt.items():\n        if r >= k:\n            a.append(x)\n    n = len(a)\n    if n == 0:\n        print(-1)\n        return\n    best = 0\n    (a1, a2) = (-1, -1)\n    l = 0\n    succ = 1\n    for i in range(1, n):\n        if a[i - 1] + 1 == a[i]:\n            succ += 1\n        else:\n            if i - l > best:\n                best = i - l\n                (a1, a2) = (l, i - 1)\n            succ = 1\n            l = i\n    if n - l > best:\n        (a1, a2) = (l, n - 1)\n    print(a[a1], a[a2])\ntst = int(input())\nfor tt in range(tst):\n    solve()", "from collections import defaultdict\nfrom typing import Optional, Tuple\n\ndef solve() -> Optional[Tuple[int, int]]:\n    (_, k) = map(int, input().split())\n    count = defaultdict(lambda : 0)\n    keys = []\n    for e in sorted(map(int, input().split())):\n        count[e] += 1\n        if count[e] == k:\n            keys.append(e)\n    if not keys:\n        return\n    rl = rr = start = last = keys[0]\n    for e in keys[1:]:\n        if e == last + 1:\n            if e - start > rr - rl:\n                rl = start\n                rr = e\n        else:\n            start = e\n        last = e\n    return (rl, rr)\nresults = []\nfor _ in range(int(input())):\n    result = solve()\n    if result is None:\n        results.append('-1')\n    else:\n        results.append(f'{result[0]} {result[1]}')\nprint('\\n'.join(results))", "t = int(input())\nfor nabor in range(t):\n    (n, k) = map(int, input().split())\n    arr = sorted(map(int, input().split()))\n    (f, count, pred) = (-1, 0, -1)\n    a = b = -1\n    maxrazn = 0\n    last = None\n    for (i, el) in enumerate(arr):\n        if f < el:\n            (f, count) = (el, 1)\n        else:\n            count += 1\n        if count == k:\n            if el != pred + 1:\n                a = b = el\n            else:\n                b = el\n            razn = b - a\n            if razn > maxrazn:\n                maxrazn = razn\n            if razn == maxrazn:\n                last = (a, b)\n            pred = el\n    if last is None:\n        print(-1)\n    else:\n        print(last[0], last[1])", "import sys\n\ndef check(nums, k):\n    numbers = nums.split()\n    numbers.sort(key=int)\n    numbersktimes = []\n    counter = 1\n    prev = 'a'\n    for i in numbers:\n        if prev == i:\n            counter += 1\n        else:\n            counter = 1\n        if counter == k:\n            numbersktimes.append(int(i))\n        prev = i\n    if len(numbersktimes) == 0:\n        print(-1)\n    else:\n        longestchain = 1\n        currentchain = 1\n        longestFirst = 0\n        longestLast = 0\n        for index in range(len(numbersktimes)):\n            elem = numbersktimes[index]\n            if index + 1 < len(numbersktimes) and numbersktimes[index + 1] == elem + 1:\n                currentchain += 1\n            else:\n                if currentchain >= longestchain:\n                    longestchain = currentchain\n                    longestFirst = elem - (longestchain - 1)\n                    longestLast = elem\n                currentchain = 1\n        assert longestFirst in numbersktimes\n        print(longestFirst, longestLast)\n\ndef main():\n    numTestcases = int(sys.stdin.readline())\n    for line in range(numTestcases):\n        lengthandtimes = sys.stdin.readline()\n        lt = lengthandtimes.split()\n        check(sys.stdin.readline(), int(lt[1]))\nmain()", "from collections import defaultdict\nfrom typing import Optional, Tuple\n\ndef solve() -> Optional[Tuple[int, int]]:\n    (_, k) = map(int, input().split())\n    count = defaultdict(lambda : 0)\n    keys = []\n    for e in sorted((int(i) for i in input().split())):\n        count[e] += 1\n        if count[e] == k:\n            keys.append(e)\n    if not keys:\n        return\n    rl = rr = start = last = keys[0]\n    for e in keys[1:]:\n        if e == last + 1:\n            if e - start > rr - rl:\n                rl = start\n                rr = e\n        else:\n            start = e\n        last = e\n    return (rl, rr)\nresults = []\nfor _ in range(int(input())):\n    result = solve()\n    if result is None:\n        results.append('-1')\n    else:\n        results.append(f'{result[0]} {result[1]}')\nprint('\\n'.join(results))", "from collections import Counter\nkvs = int(input())\nfor case in range(kvs):\n    (nn, harsha) = map(int, input().split())\n    arr = sorted(map(int, input().split()))\n    c = Counter(arr)\n    arr = sorted((z for (z, v) in c.items() if v >= harsha))\n    left = right = currLeft = currRight = -1\n    for z in arr:\n        if z - 1 == currRight:\n            currRight += 1\n        else:\n            if currRight - currLeft >= right - left:\n                (left, right) = (currLeft, currRight)\n            currLeft = currRight = z\n    if currRight - currLeft >= right - left:\n        (left, right) = (currLeft, currRight)\n    if left == -1:\n        print(-1)\n    else:\n        print(left, right)", "from collections import Counter\nt = int(input())\nanswers = []\nfor _ in range(t):\n    (_, k) = map(int, input().split())\n    arr = sorted(map(int, input().split()))\n    mp = Counter(arr)\n    arr = [key for (key, val) in mp.items() if val >= k]\n    if not arr:\n        print('-1')\n        continue\n    arr.sort()\n    (l, r) = (arr[0], arr[0])\n    (ansL, ansR) = (l, r)\n    for val in arr:\n        if val - r == 1:\n            r = val\n        else:\n            if r - l > ansR - ansL:\n                (ansL, ansR) = (l, r)\n            (l, r) = (val, val)\n    if r - l > ansR - ansL:\n        (ansL, ansR) = (l, r)\n    print(ansL, ansR)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = sorted([int(i) for i in input().split()])\n    d = Counter(a)\n    (l, r) = (-1, -1)\n    (res1, res2) = (-1, -1)\n    dif = -99\n    for el in d:\n        if d[el] >= k:\n            if l == -1:\n                l = el\n                r = el\n                continue\n            if el == r + 1:\n                r = el\n                continue\n            if r - l > dif:\n                res1 = l\n                res2 = r\n                dif = r - l\n            l = el\n            r = el\n        elif l != -1:\n            if r - l > dif:\n                dif = r - l\n                res1 = l\n                res2 = r\n                r = -1\n                l = -1\n    if r - l > dif:\n        res1 = l\n        res2 = r\n    if res1 != -1:\n        print(res1, res2)\n    else:\n        print(-1)", "import sys\n\ndef check(nums, k):\n    numbers = [int(x) for x in nums]\n    numbers.sort()\n    numbersktimes = []\n    mp = {}\n    for num in numbers:\n        if num in mp:\n            mp[num] += 1\n        else:\n            mp[num] = 1\n    for num in mp:\n        if mp[num] >= k:\n            numbersktimes.append(num)\n    numbersktimes.sort()\n    if len(numbersktimes) == 0:\n        print(-1)\n    else:\n        longestFirst = numbersktimes[0]\n        longestLast = numbersktimes[0]\n        prev = numbersktimes[0]\n        start = numbersktimes[0]\n        for index in range(1, len(numbersktimes)):\n            elem = numbersktimes[index]\n            if elem == prev + 1:\n                if elem - start > longestLast - longestFirst:\n                    longestLast = elem\n                    longestFirst = start\n            else:\n                start = elem\n            prev = elem\n        print(longestFirst, longestLast)\n\ndef main():\n    numTestcases = int(input())\n    for _ in range(numTestcases):\n        (n, k) = [int(x) for x in input().strip().split()]\n        check(input().strip().split(), k)\nmain()", "from collections import Counter\nimport math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    h = Counter(a)\n    ans = (-math.inf, 0, 0)\n    left = 0\n    for right in range(n):\n        if h[a[right]] < k:\n            left = right + 1\n            continue\n        if right != 0 and a[right] - a[right - 1] > 1 and (right != left):\n            left = right\n            continue\n        if a[right] - a[left] > ans[0]:\n            ans = (a[right] - a[left], a[left], a[right])\n    if ans[1] == ans[2] == 0:\n        print(-1)\n    else:\n        print(str(ans[1]) + ' ' + str(ans[2]))", "from collections import Counter\nimport math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    h = Counter(a)\n    ans = (-math.inf, -1, -1)\n    left = 0\n    for right in range(n):\n        if h[a[right]] < k:\n            left = right + 1\n            continue\n        if right != 0 and a[right] - a[right - 1] > 1 and (right != left):\n            left = right\n            continue\n        if a[right] - a[left] > ans[0]:\n            ans = (a[right] - a[left], left, right)\n    if ans[1] == -1 or ans[2] == -1:\n        print(-1)\n    else:\n        print(f'{a[ans[1]]} {a[ans[2]]}')", "import sys\nimport bisect\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, k) = map(int, inp().split())\n    a = list(map(int, inp().split()))\n    a.sort()\n    d = dict()\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    last = 0\n    s = None\n    p = None\n    ans = (0, -1, -1)\n    for i in a:\n        if i == last:\n            continue\n        last = i\n        if d[i] >= k:\n            if p is not None and p == i - 1:\n                p = i\n                ans = max(ans, (p - s + 1, s, p))\n            else:\n                ans = max(ans, (1, i, i))\n                s = i\n                p = i\n        else:\n            s = None\n            p = None\n    if ans[0] == 0:\n        print(-1)\n    else:\n        print(ans[1], ans[2])\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "def task(n, k, a):\n    a.sort()\n    table = dict()\n    for i in range(n):\n        if not a[i] in table:\n            table[a[i]] = 0\n        table[a[i]] += 1\n    lastkey = -100\n    best = -1\n    bestl = -1\n    bestr = -1\n    l = -1\n    r = -1\n    for key in table.keys():\n        if key - lastkey > 1:\n            l = -1\n            r = -1\n        if table[key] >= k:\n            if l == -1:\n                l = key\n                r = key\n            else:\n                r = key\n            if r - l > best:\n                best = r - l\n                bestl = l\n                bestr = r\n        else:\n            l = -1\n            r = -1\n        lastkey = key\n    if bestl == -1:\n        print(-1)\n        return\n    print(bestl, bestr)\nt = int(input())\nfor i in range(0, t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    task(n, k, a)", "from collections import Counter\nimport math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    h = Counter(a)\n    ans = (-math.inf, -1, -1)\n    left = 0\n    for right in range(n):\n        if h[a[right]] < k:\n            left = right + 1\n            continue\n        if right != 0 and a[right] - a[right - 1] > 1 and (right != left):\n            left = right\n            continue\n        if a[right] - a[left] > ans[0]:\n            ans = (a[right] - a[left], left, right)\n    if ans[1] == -1 or ans[2] == -1:\n        print(-1)\n    else:\n        print(f'{a[ans[1]]} {a[ans[2]]}')", "from collections import Counter\nimport math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    h = Counter(a)\n    ans = (-math.inf, -1, -1)\n    left = 0\n    for right in range(n):\n        if h[a[right]] < k:\n            left = right + 1\n            continue\n        if right != 0 and a[right] - a[right - 1] > 1 and (right != left):\n            left = right\n            continue\n        if a[right] - a[left] > ans[0]:\n            ans = (a[right] - a[left], left, right)\n    if ans[1] == -1 or ans[2] == -1:\n        print(-1)\n    else:\n        print(f'{a[ans[1]]} {a[ans[2]]}')", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = sorted(list(map(int, input().split())))\n    cnt = {}\n    tmp = []\n    for e in arr:\n        cnt[e] = cnt.get(e, 0) + 1\n    for (_, v) in cnt.items():\n        if v >= k:\n            tmp.append(_)\n    if not tmp:\n        print(-1)\n    else:\n        l = r = ll = tmp[0]\n        max_ = 0\n        for i in range(1, len(tmp)):\n            if tmp[i - 1] + 1 == tmp[i]:\n                if tmp[i] - ll + 1 > max_:\n                    r = tmp[i]\n                    l = ll\n                    max_ = r - ll + 1\n            else:\n                ll = tmp[i]\n        print(l, r)", "import collections\nfor _ in range(int(input())):\n    (_, k) = map(int, input().split())\n    c = collections.Counter(sorted(map(int, input().split())))\n    d = collections.Counter()\n    for (i, x) in c.items():\n        if x >= k:\n            d[i] = d[i - 1] + 1\n    if not d:\n        print(-1)\n        continue\n    (r, u) = d.most_common(1)[0]\n    print(r - u + 1, r)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = sorted([int(i) for i in input().split()])\n    dic = Counter(a)\n    (p, l) = ([], [])\n    last_chance = None\n    for el in dic:\n        c = dic[el]\n        if c >= k:\n            last_chance = el\n            if p == []:\n                p = [el]\n                continue\n            if p[-1] == el - 1:\n                p += [el]\n                continue\n            if len(p) >= 2:\n                l += [(p[-1] - p[0], p[0], p[-1])]\n            p = [el]\n        else:\n            if len(p) >= 2:\n                l += [(p[-1] - p[0], p[0], p[-1])]\n            p = []\n    if len(p) >= 2:\n        l += [(p[-1] - p[0], p[0], p[-1])]\n    if l != []:\n        l.sort()\n        print(l[-1][1], l[-1][2])\n    elif last_chance != None:\n        print(last_chance, last_chance)\n    else:\n        print(-1)", "import sys\ninput = sys.stdin.readline\nfrom collections import Counter\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    w = Counter(sorted(map(int, input().split())))\n    w = [i for i in w if w[i] >= k]\n    x = len(w)\n    if x == 0:\n        print(-1)\n    elif x == 1:\n        print(w[0], w[0])\n    else:\n        (c, d, s) = (0, -1, 0)\n        for i in range(len(w) - 1):\n            if w[i + 1] - w[i] == 1:\n                c += 1\n            else:\n                if c > s:\n                    s = c\n                    d = i\n                c = 0\n        if c > s:\n            s = c\n            d = len(w) - 1\n        print(w[d - s], w[d])", "from collections import Counter\nimport math\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    dic = Counter(a)\n    (res_left, res_right, l) = (0, 0, 0)\n    for r in range(n):\n        if dic[a[r]] < k:\n            l = r + 1\n            continue\n        if r != 0 and a[r] - a[r - 1] > 1 and (l != r):\n            l = r\n            continue\n        if a[r] - a[l] >= res_right - res_left:\n            (res_left, res_right) = (a[l], a[r])\n    if res_left == 0 and res_right == 0:\n        print(-1)\n    else:\n        print(f'{res_left} {res_right}')", "from collections import Counter\nimport math\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    a.sort()\n    x = Counter(a)\n    ans = (-math.inf, -1, -1)\n    left = 0\n    for right in range(n):\n        if x[a[right]] < k:\n            left = right + 1\n            continue\n        if right != 0 and a[right] - a[right - 1] > 1 and (right != left):\n            left = right\n            continue\n        if a[right] - a[left] > ans[0]:\n            ans = (a[right] - a[left], a[left], a[right])\n    if ans[0] == -math.inf:\n        print(-1)\n    else:\n        print(ans[1], ans[2])", "from collections import Counter\nimport sys\nraw_input = sys.stdin.readlines\n\ndef solution():\n    (n, k) = list(map(int, input().strip().split()))\n    a = sorted(map(int, input().split()))\n    (cnt, dp) = (Counter(a), Counter())\n    result = 0\n    for i in cnt:\n        if cnt[i] >= k:\n            dp[i] = dp[i - 1] + 1\n        if dp[i] > dp[result]:\n            result = i\n    return '%s %s' % (result - dp[result] + 1, result) if result else -1\nfor case in range(int(input())):\n    print('%s' % solution())", "from collections import Counter\nimport math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    h = Counter(a)\n    ans = (-math.inf, -1, -1)\n    left = 0\n    for right in range(n):\n        if h[a[right]] < k:\n            left = right + 1\n            continue\n        if right != 0 and a[right] - a[right - 1] > 1 and (right != left):\n            left = right\n            continue\n        if a[right] - a[left] > ans[0]:\n            ans = (a[right] - a[left], left, right)\n    if ans[1] == -1 or ans[2] == -1:\n        print(-1)\n    else:\n        print(a[ans[1]], a[ans[2]])", "from collections import Counter\nimport math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    h = Counter(a)\n    ans = (-math.inf, -1, -1)\n    left = 0\n    for right in range(n):\n        if h[a[right]] < k:\n            left = right + 1\n            continue\n        if right != 0 and a[right] - a[right - 1] > 1 and (right != left):\n            left = right\n            continue\n        if a[right] - a[left] > ans[0]:\n            ans = (a[right] - a[left], left, right)\n    if ans[1] == -1 or ans[2] == -1:\n        print(-1)\n    else:\n        print(a[ans[1]], a[ans[2]])", "from collections import Counter\nimport math\nfrom array import array\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = array('Q', sorted(map(int, input().split())))\n    h = Counter(a)\n    ans = (-math.inf, -1, -1)\n    left = 0\n    for right in range(n):\n        if h[a[right]] < k:\n            left = right + 1\n            continue\n        if right != 0 and a[right] - a[right - 1] > 1 and (right != left):\n            left = right\n            continue\n        if a[right] - a[left] > ans[0]:\n            ans = (a[right] - a[left], a[left], a[right])\n    if ans[0] == -math.inf:\n        print(-1)\n    else:\n        print(f'{ans[1]} {ans[2]}')", "import collections\nfor _ in range(int(input())):\n    (_, k) = map(int, input().split())\n    c = collections.Counter(sorted(map(int, input().split())))\n    d = collections.Counter()\n    for (i, x) in c.items():\n        if x >= k:\n            d[i] = d[i - 1] + 1\n    if not d:\n        print(-1)\n        continue\n    (r, u) = d.most_common(1)[0]\n    print(r - u + 1, r)", "import collections\nfor _ in range(int(input())):\n    (_, k) = map(int, input().split())\n    counter = collections.Counter(sorted(map(int, input().split())))\n    strike = collections.Counter()\n    for (a, t) in counter.items():\n        if t >= k:\n            strike[a] = strike[a - 1] + 1\n    if not strike:\n        print(-1)\n        continue\n    (r, d) = strike.most_common(1)[0]\n    print(r - d + 1, r)", "from collections import Counter\nt = int(input())\nfor w in range(t):\n    (n, k) = map(int, input().split())\n    arr = sorted(map(int, input().split()))\n    mp = {}\n    for a in arr:\n        if a not in mp:\n            mp[a] = 0\n        mp[a] += 1\n    arr = []\n    for (_, key) in enumerate(mp):\n        if mp[key] >= k:\n            arr.append(key)\n    arr.sort()\n    if len(arr) == 0:\n        print('-1')\n        continue\n    l = arr[0]\n    r = arr[0]\n    ansL = l\n    ansR = r\n    for val in arr:\n        if val - r == 1:\n            r = val\n        else:\n            if r - l > ansR - ansL:\n                ansL = l\n                ansR = r\n            l = val\n            r = val\n    if r - l > ansR - ansL:\n        ansL = l\n        ansR = r\n    print(ansL, ansR)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = sorted([int(i) for i in input().split()])\n    d = Counter(a)\n    p = [-1, -1]\n    res = [0, 0]\n    dif = 0\n    for el in d:\n        if d[el] >= k:\n            if el == p[1] + 1:\n                p[1] = el\n            else:\n                ndif = p[-1] - p[0]\n                if ndif > dif:\n                    res = p.copy()\n                    dif = ndif\n                p = [el, el]\n        else:\n            ndif = p[-1] - p[0]\n            if ndif > dif:\n                res = p.copy()\n                dif = ndif\n    ndif = p[-1] - p[0]\n    if ndif > dif:\n        res = p.copy()\n    if res[-1] != 0:\n        print(*res, sep=' ')\n    elif p[-1] != -1:\n        print(*p, sep=' ')\n    else:\n        print(-1)", "import sys\ninput = sys.stdin.readline\nfrom collections import Counter\nfrom random import randint\nxx = randint(10 ** 5, 2 * 10 ** 5)\nt = int(input())\nfor tests in range(t):\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    A = [a + xx for a in A]\n    C = Counter(A)\n    X = []\n    for c in C:\n        if C[c] >= k:\n            X.append(c)\n    if len(X) == 0:\n        print(-1)\n        continue\n    X.sort()\n    X.append(1 << 63)\n    start = 1 << 63\n    ANS = 0\n    ANS2 = (-1, -1)\n    for i in range(len(X)):\n        if X[i] == X[i - 1] + 1:\n            score += 1\n        else:\n            if start != 1 << 63:\n                if score > ANS:\n                    ANS = score\n                    ANS2 = (X[i - 1] - score + 1, X[i - 1])\n            start = X[i]\n            score = 1\n    print(*[a - xx for a in ANS2])", "_ = int(input())\nfor __ in range(_):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr_sort = sorted(arr)\n    arr_out = []\n    tmp_arr = arr_sort[0]\n    tmp_arr_count = 1\n    for x in range(1, n):\n        if arr_sort[x] == tmp_arr:\n            tmp_arr_count += 1\n        else:\n            if tmp_arr_count >= k:\n                arr_out.append(arr_sort[x - 1])\n            tmp_arr_count = 1\n            tmp_arr = arr_sort[x]\n    if tmp_arr_count >= k:\n        arr_out.append(arr_sort[-1])\n    if not arr_out:\n        print(-1)\n        continue\n    arr_out = sorted(arr_out)\n    out = 1\n    tmp_out = 1\n    tmp = arr_out[0]\n    beg = arr_out[0]\n    end = arr_out[0]\n    tmp_beg = arr_out[0]\n    tmp_end = arr_out[0]\n    for x in range(1, len(arr_out)):\n        if arr_out[x] == tmp + 1:\n            tmp_out += 1\n            tmp_end = arr_out[x]\n        else:\n            if out < tmp_out:\n                out = tmp_out\n                beg = tmp_beg\n                end = tmp_end\n            tmp_beg = arr_out[x]\n            tmp_end = arr_out[x]\n            tmp_out = 1\n        tmp = arr_out[x]\n    if out < tmp_out:\n        beg = tmp_beg\n        end = tmp_end\n    print(beg, end)", "from collections import Counter as cnt\nfor p in range(int(input())):\n    (n, k) = map(int, input().split())\n    c = cnt(sorted(map(int, input().split())))\n    d = cnt()\n    for (i, x) in c.items():\n        if x >= k:\n            d[i] = d[i - 1] + 1\n    if not d:\n        print(-1)\n        continue\n    (r, u) = d.most_common(1)[0]\n    print(r - u + 1, r)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    a.sort()\n    max_string = -1\n    cur_string = -1\n    lmax = -1\n    rmax = -1\n    counter = 0\n    cur_val = a[0]\n    cur_occurences = 0\n    while counter < n:\n        while counter < n and a[counter] == cur_val:\n            cur_occurences += 1\n            counter += 1\n        if counter >= n:\n            if cur_occurences >= k:\n                cur_string += 1\n            if cur_string > max_string:\n                max_string = cur_string\n                rmax = a[counter - 1]\n                lmax = a[counter - 1] - max_string\n        else:\n            if cur_occurences >= k:\n                cur_string += 1\n                if cur_string > max_string:\n                    max_string = cur_string\n                    rmax = a[counter - 1]\n                    lmax = a[counter - 1] - max_string\n                if a[counter] != cur_val + 1:\n                    cur_string = -1\n            else:\n                if cur_string > max_string:\n                    max_string = cur_string\n                    rmax = a[counter - 1]\n                    lmax = a[counter - 1] - max_string\n                cur_string = -1\n            cur_occurences = 0\n            cur_val = a[counter]\n    if max_string == -1:\n        print(-1)\n    else:\n        print(lmax, rmax)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    a = sorted(a)\n    ct = Counter(a)\n    l = 0\n    r = 0\n    b = []\n    for (key, value) in ct.items():\n        if value >= k:\n            b.append(key)\n    if len(b) > 0:\n        l = 0\n        ans = 0\n        inter = 0\n        li = b[0]\n        for i in range(len(b) - 1):\n            if b[i] + 1 == b[i + 1]:\n                inter += 1\n            else:\n                ans = max(ans, inter)\n                if ans == inter:\n                    l = li\n                inter = 0\n                li = b[i + 1]\n        ans = max(ans, inter)\n        if ans == inter:\n            l = li\n        if ans >= 0:\n            print(l, l + ans)\n        else:\n            print(-1)\n    else:\n        print(-1)", "from collections import Counter\nimport math\nfrom array import array\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = sorted(map(int, input().split()))\n    h = Counter(a)\n    ans = (-math.inf, -1, -1)\n    left = 0\n    for right in range(n):\n        if h[a[right]] < k:\n            left = right + 1\n            continue\n        if right != 0 and a[right] - a[right - 1] > 1 and (right != left):\n            left = right\n            continue\n        if a[right] - a[left] > ans[0]:\n            ans = (a[right] - a[left], a[left], a[right])\n    if ans[0] == -math.inf:\n        print(-1)\n    else:\n        print(f'{ans[1]} {ans[2]}')", "def main():\n    No_tests = int(input())\n    for _ in range(No_tests):\n        (l, r) = map(int, solve_one_test())\n        if l == -1:\n            print('-1')\n        else:\n            print(l, r)\n\ndef solve_one_test():\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    freq_matrix = dict()\n    for x in arr:\n        if x not in freq_matrix:\n            freq_matrix[x] = 0\n        freq_matrix[x] += 1\n    new_arr = list(freq_matrix.keys())\n    l = 0\n    r = len(new_arr) - 1\n    answ = 0\n    curr_atb = 0\n    answ_l = -1\n    answ_r = -1\n    answ_delta = -1\n    while l <= r:\n        x = l\n        curr_atb = 0\n        did_something = False\n        while x <= r and freq_matrix[new_arr[x]] >= k:\n            did_something = True\n            curr_atb += 1\n            if x < r and new_arr[x] + 1 == new_arr[x + 1] and (freq_matrix[new_arr[x + 1]] >= k):\n                x += 1\n            else:\n                break\n        if curr_atb > answ or (did_something and curr_atb == answ and (x - l > answ_delta)):\n            answ = curr_atb\n            answ_l = new_arr[l]\n            answ_r = new_arr[x]\n            answ_delta = x - l\n            curr_atb = 0\n        l = x + 1\n    return (answ_l, answ_r)\nmain()", "from collections import Counter\nimport math\nfrom array import array\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = array('i', sorted(map(int, input().split())))\n    h = Counter(a)\n    ans = (-math.inf, -1, -1)\n    left = 0\n    for right in range(n):\n        if h[a[right]] < k:\n            left = right + 1\n            continue\n        if right != 0 and a[right] - a[right - 1] > 1 and (right != left):\n            left = right\n            continue\n        if a[right] - a[left] > ans[0]:\n            ans = (a[right] - a[left], a[left], a[right])\n    if ans[0] == -math.inf:\n        print(-1)\n    else:\n        print(f'{ans[1]} {ans[2]}')", "import collections\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    d = list(map(int, input().split()))\n    d.sort()\n    p = collections.Counter(d)\n    p1 = collections.Counter()\n    mx = 0\n    for i in p:\n        if p[i] >= k:\n            p1[i] = p1[i - 1] + 1\n        if p1[i] > p1[mx]:\n            mx = i\n    if mx == 0:\n        print(-1)\n    else:\n        print(mx - p1[mx] + 1, mx)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (_, k) = map(int, input().split())\n    arr = sorted(map(int, input().split()))\n    mp = Counter(arr)\n    arr = []\n    for key in mp.keys():\n        if mp[key] >= k:\n            arr.append(key)\n    if not arr:\n        print('-1')\n        continue\n    arr.sort()\n    (l, r) = (arr[0], arr[0])\n    (ansL, ansR) = (l, r)\n    for val in arr:\n        if val - r == 1:\n            r = val\n        else:\n            if r - l > ansR - ansL:\n                (ansL, ansR) = (l, r)\n            (l, r) = (val, val)\n    if r - l > ansR - ansL:\n        (ansL, ansR) = (l, r)\n    print(ansL, ansR)", "from collections import Counter\n\ndef solve():\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    cnt = Counter(arr)\n    ranges = []\n    cur = []\n    for (v, c) in cnt.items():\n        if c >= k:\n            if not cur or v == cur[-1] + 1:\n                cur.append(v)\n            else:\n                ranges.append([*cur])\n                cur = [v]\n        else:\n            if cur:\n                ranges.append([*cur])\n            cur.clear()\n    if cur:\n        ranges.append([*cur])\n    if not ranges:\n        print(-1)\n        return\n    best = max(ranges, key=lambda r: r[-1] - r[0])\n    print(best[0], best[-1])\nfor t in range(int(input())):\n    solve()", "from collections import Counter\nimport math\nfrom array import array\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = array('L', sorted(map(int, input().split())))\n    h = Counter(a)\n    ans = (-math.inf, -1, -1)\n    left = 0\n    for right in range(n):\n        if h[a[right]] < k:\n            left = right + 1\n            continue\n        if right != 0 and a[right] - a[right - 1] > 1 and (right != left):\n            left = right\n            continue\n        if a[right] - a[left] > ans[0]:\n            ans = (a[right] - a[left], a[left], a[right])\n    if ans[0] == -math.inf:\n        print(-1)\n    else:\n        print(f'{ans[1]} {ans[2]}')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = sorted(map(int, input().split()))\n    count = {}\n    for i in range(n):\n        count[a[i]] = count.get(a[i], 0) + 1\n    last = 0\n    l = None\n    r = None\n    ans = (0, -1, -1)\n    for i in a:\n        if i == last:\n            continue\n        last = i\n        if count[i] >= k:\n            if l is not None and r == i - 1:\n                r = i\n                ans = max(ans, (r - l + 1, l, r))\n            else:\n                ans = max(ans, (1, i, i))\n                l = i\n                r = i\n        else:\n            l = None\n            r = None\n    if ans[0] == 0:\n        print(-1)\n    else:\n        print(ans[1], ans[2])", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    lst = []\n    for i in range(0, n):\n        if len(lst) > 0 and lst[len(lst) - 1] == a[i]:\n            continue\n        if i + k - 1 < n and a[i + k - 1] == a[i]:\n            lst.append(a[i])\n    d = 1\n    mx = 1\n    if len(lst) == 0:\n        print(-1)\n        continue\n    lst.sort()\n    l = lst[0]\n    r = l\n    for i in range(1, len(lst)):\n        if lst[i] - lst[i - 1] == 1:\n            d += 1\n        else:\n            if mx < d:\n                mx = d\n                r = lst[i - 1]\n                l = lst[i - d]\n            d = 1\n    if mx < d:\n        mx = d\n        r = lst[len(lst) - 1]\n        l = lst[len(lst) - d]\n    print(l, end=' ')\n    print(r)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ll = list(map(int, input().split()))\n    ll.sort()\n    l = 0\n    c = 0\n    ans = [-1, -1]\n    for i in range(n):\n        if i == 0:\n            l = ll[i]\n            c = 1\n        else:\n            if ll[i] == ll[i - 1]:\n                c += 1\n            if ll[i] >= ll[i - 1] + 1:\n                if c < k or ll[i] > ll[i - 1] + 1:\n                    l = ll[i]\n                c = 1\n        if c >= k:\n            if ans[1] - ans[0] <= ll[i] - l:\n                (ans[1], ans[0]) = (ll[i], l)\n    if ans == [-1, -1]:\n        print(-1)\n    else:\n        print(*ans)", "t = int(input())\nfor w in range(t):\n    (n, k) = map(int, input().split())\n    arr = sorted(map(int, input().split()))\n    mp = {}\n    for a in arr:\n        if a not in mp:\n            mp[a] = 0\n        mp[a] += 1\n    arr = []\n    for (_, key) in enumerate(mp):\n        if mp[key] >= k:\n            arr.append(key)\n    arr.sort()\n    if len(arr) == 0:\n        print('-1')\n        continue\n    l = arr[0]\n    r = arr[0]\n    ansL = l\n    ansR = r\n    for val in arr:\n        if val - r == 1:\n            r = val\n        else:\n            if r - l > ansR - ansL:\n                ansL = l\n                ansR = r\n            l = val\n            r = val\n    if r - l > ansR - ansL:\n        ansL = l\n        ansR = r\n    print(ansL, ansR)", "from collections import Counter\nx = lambda : map(int, input().split())\n(t,) = x()\nfor _ in [1] * t:\n    (n, k) = x()\n    c = Counter(sorted(x()))\n    d = Counter()\n    m = 0\n    for r in c:\n        if c[r] >= k:\n            d[r] = d[r - 1] + 1\n        if d[r] > d[m]:\n            m = r\n    print(*[(m - d[m] + 1, m), (-1,)][m == 0])", "from collections import Counter\nt = int(input())\nanswers = []\nfor _ in range(t):\n    (_, k) = map(int, input().split())\n    arr = sorted(map(int, input().split()))\n    mp = Counter(arr)\n    arr = []\n    for key in mp.keys():\n        if mp[key] >= k:\n            arr.append(key)\n    if not arr:\n        print('-1')\n        continue\n    arr.sort()\n    (l, r) = (arr[0], arr[0])\n    (ansL, ansR) = (l, r)\n    for val in arr:\n        if val - r == 1:\n            r = val\n        else:\n            if r - l > ansR - ansL:\n                (ansL, ansR) = (l, r)\n            (l, r) = (val, val)\n    if r - l > ansR - ansL:\n        (ansL, ansR) = (l, r)\n    print(ansL, ansR)", "from collections import Counter\nfor r in [0] * int(input()):\n    (n, k) = map(int, input().split())\n    a = sorted(map(int, input().split()))\n    c = Counter(a)\n    d = Counter()\n    m = 0\n    for i in c:\n        if c[i] >= k:\n            d[i] = d[i - 1] + 1\n        if d[i] > d[m]:\n            m = i\n    if m == 0:\n        print(-1)\n        continue\n    print(m - d[m] + 1, m)", "from collections import Counter\nfor r in [0] * int(input()):\n    (n, k) = map(int, input().split())\n    a = sorted(map(int, input().split()))\n    c = Counter(a)\n    d = Counter()\n    m = 0\n    for i in c:\n        if c[i] >= k:\n            d[i] = d[i - 1] + 1\n        if d[i] > d[m]:\n            m = i\n    if m == 0:\n        print(-1)\n        continue\n    print(m - d[m] + 1, m)", "import copy\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    d = {}\n    for i in range(n):\n        d[l[i]] = d.get(l[i], 0) + 1\n    nl = []\n    for i in d:\n        if d[i] >= k:\n            nl.append(i)\n    if len(nl) == 0:\n        print(-1)\n        continue\n    cur = [nl[0]]\n    mx = [nl[0]]\n    for i in range(1, len(nl)):\n        if nl[i] == cur[-1] + 1:\n            cur.append(nl[i])\n        else:\n            if len(cur) > len(mx):\n                mx = cur.copy()\n            cur = [nl[i]]\n    if len(cur) > len(mx):\n        mx = cur.copy()\n    print(mx[0], mx[-1])", "from collections import Counter\nfor r in [0] * int(input()):\n    (n, k) = map(int, input().split())\n    a = sorted(map(int, input().split()))\n    c = Counter(a)\n    d = Counter()\n    m = 0\n    for i in c:\n        if c[i] >= k:\n            d[i] = d[i - 1] + 1\n        if d[i] > d[m]:\n            m = i\n    if m == 0:\n        print(-1)\n        continue\n    print(m - d[m] + 1, m)", "from collections import Counter\nfrom random import shuffle\nt = int(input())\nfor _ in range(t):\n    (_, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    shuffle(arr)\n    mp = Counter(arr)\n    arr = []\n    for key in mp.keys():\n        if mp[key] >= k:\n            arr.append(key)\n    if not arr:\n        print('-1')\n        continue\n    arr.sort()\n    (l, r) = (arr[0], arr[0])\n    (ansL, ansR) = (l, r)\n    for val in arr:\n        if val - r == 1:\n            r = val\n        else:\n            if r - l > ansR - ansL:\n                (ansL, ansR) = (l, r)\n            (l, r) = (val, val)\n    if r - l > ansR - ansL:\n        (ansL, ansR) = (l, r)\n    print(ansL, ansR)", "from collections import Counter\nfor r in [0] * int(input()):\n    (n, k) = map(int, input().split())\n    a = sorted(map(int, input().split()))\n    c = Counter(a)\n    d = Counter()\n    m = 0\n    for i in c:\n        if c[i] >= k:\n            d[i] = d[i - 1] + 1\n        if d[i] > d[m]:\n            m = i\n    if m == 0:\n        print(-1)\n        continue\n    print(m - d[m] + 1, m)", "from collections import defaultdict\nimport math\nfor cases in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    d = defaultdict(int)\n    for i in l:\n        d[i] += 1\n    s = l\n    front = s[0]\n    rear = s[0]\n    mx = -1\n    l = -1\n    r = -1\n    for i in range(1, len(s)):\n        if d[front] >= k and d[s[i]] >= k and (s[i] - s[i - 1] == 1 or s[i] - s[i - 1] == 0):\n            rear = s[i]\n        else:\n            if mx < rear - front and d[front] >= k and (d[rear] >= k):\n                mx = rear - front\n                l = front\n                r = rear\n            front = s[i]\n            rear = s[i]\n    if rear - front > mx and d[front] >= k and (d[rear] >= k):\n        l = front\n        r = rear\n    if l == -1:\n        print(-1)\n    else:\n        print(l, r)", "t = int(input())\nanswers = []\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    d = {}\n    for n in a:\n        if n not in d:\n            d[n] = 1\n        else:\n            d[n] += 1\n    invalid = []\n    for key in d:\n        if d[key] < k:\n            invalid.append(key)\n    for num in invalid:\n        d.pop(num)\n    valid = list(d.keys())\n    valid.append(0)\n    pairs = []\n    l = valid[0]\n    r = valid[0]\n    for j in range(1, len(valid)):\n        if abs(valid[j] - valid[j - 1]) > 1:\n            pairs.append([l, r])\n            l = valid[j]\n        else:\n            r = valid[j]\n    max_lr = 0\n    max_pair = -1\n    for pair in pairs:\n        diff = pair[1] - pair[0]\n        if diff > max_lr:\n            max_lr = diff\n            max_pair = pair\n    if max_pair != -1:\n        answers.append([max_pair[0], max_pair[1]])\n    elif len(valid) > 1:\n        answers.append([valid[0], valid[0]])\n    else:\n        answers.append(-1)\nfor ans in answers:\n    if ans == -1:\n        print(ans)\n    else:\n        print(ans[0], ans[1])", "from collections import Counter\nfrom math import inf\nfrom sys import stdin, stdout\n\ndef main():\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        (n, k) = map(int, stdin.readline().split())\n        arr = list(map(int, stdin.readline().split()))\n        arr.sort()\n        counts = []\n        last = arr[0]\n        c = 0\n        for num in arr:\n            if num == last:\n                c += 1\n            else:\n                counts.append((last, c))\n                last = num\n                c = 1\n        counts.append((last, c))\n        (l, r) = (inf, -inf)\n        i = 0\n        j = 0\n        while j < len(counts):\n            while j < len(counts) and counts[j][1] >= k and (i == j or counts[j][0] == counts[j - 1][0] + 1):\n                j += 1\n            if i != j and counts[j - 1][0] - counts[i][0] > r - l:\n                (l, r) = (counts[i][0], counts[j - 1][0])\n            i = j\n            while i < len(counts) and counts[i][1] < k:\n                i += 1\n            j = i\n        if r < l:\n            print(-1)\n        else:\n            print(l, r)\nmain()", "t = int(input())\nfor q in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    nums = dict()\n    for num in arr:\n        if num in nums:\n            nums[num] += 1\n        else:\n            nums[num] = 1\n    ans = 0\n    cur = 0\n    cur_l = 0\n    cur_r = 0\n    l = 0\n    r = 0\n    for num in nums:\n        if nums[num] >= k:\n            if num - 1 in nums and nums[num - 1] >= k:\n                cur += 1\n                cur_r += 1\n            else:\n                cur = 1\n                cur_l = num\n                cur_r = num\n        if cur > ans:\n            ans = cur\n            l = cur_l\n            r = cur_r\n    if ans == 0:\n        print(-1)\n    else:\n        print(l, r)", "import sys\ninput = sys.stdin.readline\nt = int(input())\n\ndef solution():\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    d = {}\n    for n in a:\n        if n not in d:\n            d[n] = 1\n        else:\n            d[n] += 1\n    impossible = []\n    for key in d:\n        if d[key] < k:\n            impossible.append(key)\n    for num in impossible:\n        d.pop(num)\n    works = list(d.keys()) + [0]\n    possible = []\n    (l, r) = (works[0], works[0])\n    for j in range(1, len(works)):\n        if abs(works[j] - works[j - 1]) > 1:\n            possible.append([l, r])\n            l = works[j]\n        else:\n            r = works[j]\n    (max_lr, best_case) = (0, -1)\n    for pair in possible:\n        change = pair[1] - pair[0]\n        if change > max_lr:\n            max_lr = change\n            best_case = pair\n    if best_case != -1:\n        return [best_case[0], best_case[1]]\n    elif len(works) > 1:\n        return [works[0], works[0]]\n    else:\n        return [-1]\nres = []\nfor _ in range(t):\n    tmp = solution()\n    if len(tmp) == 1:\n        print(tmp[0])\n    else:\n        print(tmp[0], tmp[1])", "from math import ceil\nfrom collections import defaultdict\nimport sys\nsys.setrecursionlimit(10 ** 6)\n\ndef mlt():\n    return map(int, input().split())\nmod = int(1000000000.0 + 7)\n\ndef initmap():\n    return defaultdict(lambda : 0)\n\nclass Solution:\n\n    def __init__(self) -> None:\n        (x, y) = mlt()\n        s = sorted([*mlt()])\n        st = set(s)\n        cnt = initmap()\n        for n in s:\n            cnt[n] += 1\n        unix = list(st)\n        isPossible = 0\n        possibility = [0 for n in range(len(unix))]\n        for n in range(len(unix)):\n            if cnt[unix[n]] >= y:\n                isPossible = 1\n                possibility[n] = 1\n        if not isPossible:\n            print(-1)\n            return\n        s = []\n        for n in range(len(unix)):\n            if possibility[n]:\n                s.append(unix[n])\n        s.sort()\n        mx = 1\n        dp = [1 for n in range(len(s))]\n        for n in range(1, len(s)):\n            if s[n] == s[n - 1] + 1:\n                dp[n] += dp[n - 1]\n                mx = max(mx, dp[n])\n        for n in range(len(s)):\n            if dp[n] == mx:\n                print(s[n] - dp[n] + 1, s[n])\n                return\nfor _ in range(int(input())):\n    Solution()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    a = sorted(a)\n    b = [[a[0], 1]]\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            b[-1][1] += 1\n        else:\n            b.append([a[i], 1])\n    l = 0\n    r = 0\n    max_d = 0\n    max_l = 0\n    max_r = 0\n    while r < len(b):\n        r += 1\n        if b[r - 1][1] >= k and (r - l == 1 or b[r - 1][0] - b[r - 2][0] == 1):\n            d = r - l\n            if d > max_d:\n                max_d = d\n                max_l = b[l][0]\n                max_r = b[r - 1][0]\n        elif b[r - 1][1] >= k and r - l > 1:\n            l = r - 1\n        else:\n            l = r\n    if max_d == 0:\n        print(-1)\n    else:\n        print(max_l, max_r)", "from collections import Counter\nx = lambda : map(int, input().split())\n(t,) = x()\nfor _ in [1] * t:\n    (n, k) = x()\n    c = {}\n    for i in sorted(x()):\n        if c.get(i, 0):\n            c[i] += 1\n        else:\n            c[i] = 1\n    d = Counter()\n    m = 0\n    for i in c:\n        if c[i] >= k:\n            d[i] = d[i - 1] + 1\n        if d[i] > d[m]:\n            m = i\n    print(*[(m - d[m] + 1, m), (-1,)][m == 0])", "from bisect import bisect_left\nout = []\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    l = r = None\n    i = j = 0\n    best = 0\n    ans = []\n    while i < n - k + 1 and a[i] != a[i + k - 1]:\n        i += 1\n    if i > n - k:\n        out.append([-1])\n        continue\n    while i < n - k + 1:\n        l = a[i]\n        r = a[i]\n        j = i\n        while j < n - k + 1 and a[j] == a[j + k - 1]:\n            r += 1\n            j = bisect_left(a, r)\n            if j == n or a[j] != r:\n                break\n        r -= 1\n        if r - l + 1 > best:\n            best = r - l + 1\n            ans = [l, r]\n        i = j\n        while i < n - k + 1 and a[i] != a[i + k - 1]:\n            i += 1\n    out.append(ans)\nfor i in out:\n    print(*i)"]