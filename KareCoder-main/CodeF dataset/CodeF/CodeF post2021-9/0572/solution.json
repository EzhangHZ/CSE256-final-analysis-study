["def cal():\n    n = int(input())\n    a = (int(i) for i in input().split())\n    b = (int(i) for i in input().split())\n    dp = 1\n    ans = 0\n    total = 0\n    for (i, j) in zip(a, b):\n        dp = dp << i | dp << j\n        total += i + j\n        ans += i * i + j * j\n    i = total // 2\n    dp >>= i\n    while dp > 0 and i <= total:\n        if dp & 1:\n            return ans * (n - 2) + i * i + (total - i) ** 2\n        dp >>= 1\n        i += 1\nt = int(input())\nfor i in range(t):\n    print(cal())", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    res = 0\n    sum = 0\n    if n >= 1:\n        for i in range(n):\n            res += (n - 2) * (a[i] * a[i] + b[i] * b[i])\n            sum += a[i] + b[i]\n    halfSum = sum / 2\n    curValues = {0}\n    for i in range(n):\n        nextValues = set()\n        for j in curValues:\n            nextValues.add(j + a[i])\n            nextValues.add(j + b[i])\n        curValues = nextValues\n    minValue = 0\n    for i in curValues:\n        if abs(halfSum - i) < abs(halfSum - minValue):\n            minValue = i\n    res += minValue * minValue + (sum - minValue) * (sum - minValue)\n    print(res)", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    a = input().split()\n    b = input().split()\n    for i in range(0, n):\n        a[i] = int(a[i])\n        b[i] = int(b[i])\n    arr = {0}\n    for i in range(n - 1, -1, -1):\n        brr = set()\n        for j in arr:\n            brr.add(a[i] - b[i] + j)\n            brr.add(b[i] - a[i] + j)\n        arr = brr\n    ans = []\n    for i in arr:\n        ans.append(abs(i))\n    x = min(ans)\n    ans = 0\n    for i in a:\n        ans = ans + i * i\n    for i in b:\n        ans = ans + i * i\n    ans = (n - 2) * ans\n    p = sum(a) + sum(b)\n    ans = ans + (p * p + x * x) / 2\n    print(int(ans))", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    a = input().split()\n    b = input().split()\n    for i in range(0, n):\n        a[i] = int(a[i])\n        b[i] = int(b[i])\n    arr = {0}\n    for i in range(n - 1, -1, -1):\n        brr = set()\n        for j in arr:\n            brr.add(a[i] - b[i] + j)\n            brr.add(b[i] - a[i] + j)\n        arr = brr\n    ans = []\n    for i in arr:\n        ans.append(abs(i))\n    x = min(ans)\n    ans = 0\n    for i in a:\n        ans = ans + i * i\n    for i in b:\n        ans = ans + i * i\n    ans = (n - 2) * ans\n    p = sum(a) + sum(b)\n    ans = ans + (p * p + x * x) / 2\n    print(int(ans))", "import sys\nimport io\nimport math\nimport collections\nimport decimal\nimport itertools\nimport bisect\nimport heapq\n\ndef input():\n    return sys.stdin.readline()[:-1]\nINF = 10 ** 10\n\ndef solve(N, A, B):\n    s = sum(A) + sum(B)\n    dp = [False] * (s + 1)\n    dp[0] = True\n    for i in range(N):\n        for n in reversed(range(s + 1)):\n            if dp[n]:\n                if 0 <= n + A[i] <= s:\n                    dp[n + A[i]] |= True\n                if 0 <= n + B[i] <= s:\n                    dp[n + B[i]] |= True\n                dp[n] = False\n    n_good = min(((abs(n - s / 2), n) for n in range(s + 1) if dp[n]))[1]\n    ans = (N - 2) * sum((a ** 2 for a in A + B)) + n_good ** 2 + (s - n_good) ** 2\n    return ans\nT0 = int(input())\nfor _ in range(T0):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    print(solve(N, A, B))", "import sys\nfrom collections import deque\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    if n == 1:\n        return 0\n    S = sum(A) + sum(B)\n    ans = curr = 0\n    ps = [0] * n\n    for i in range(n):\n        ans += A[i] ** 2 + B[i] ** 2\n        curr += A[i] + B[i]\n        ps[i] = curr\n    ans *= n - 2\n    q = deque([(A[0], 0)])\n    vis = {(A[0], 0)}\n    nums = [False] * 10001\n    while q:\n        (val, idx) = q.popleft()\n        if idx == n - 1:\n            nums[val] = True\n            nums[ps[idx] - val] = True\n            continue\n        if (val + A[idx + 1], idx + 1) not in vis:\n            vis.add((val + A[idx + 1], idx + 1))\n            q.append((val + A[idx + 1], idx + 1))\n        if (val + B[idx + 1], idx + 1) not in vis:\n            vis.add((val + B[idx + 1], idx + 1))\n            q.append((val + B[idx + 1], idx + 1))\n    target = S // 2\n    v = 0\n    diff = float('inf')\n    for i in range(10001):\n        if nums[i] and abs(i - target) < diff:\n            diff = abs(i - target)\n            v = i\n    ans += 2 * v * (v - S) + S ** 2\n    return ans\nfor _ in range(int(input())):\n    print(main())", "import sys\ninput = sys.stdin.readline\n\ndef rec(n, a, b, z):\n    dp = [[False for _ in range(z + 1)] for _ in range(n)]\n    dp[0][a[0]] = True\n    dp[0][b[0]] = True\n    for i in range(1, n):\n        for j in range(z + 1):\n            p = j >= a[i] and dp[i - 1][j - a[i]]\n            q = j >= b[i] and dp[i - 1][j - b[i]]\n            dp[i][j] = p or q\n    return dp[n - 1]\n\ndef solve(n, a, b):\n    S = sum([max(a[i], b[i]) for i in range(n)])\n    total = sum(a) + sum(b)\n    check = rec(n, a, b, S)\n    ans = 10 ** 9\n    for j in range(S + 1):\n        if check[j]:\n            ans = min(ans, j * j + (total - j) * (total - j))\n    v = (n - 2) * sum([a[i] * a[i] + b[i] * b[i] for i in range(n)])\n    return v + ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(solve(n, a, b))", "def memoize(function):\n    cache = {}\n\n    def decorated_function(*args):\n        try:\n            return cache[args]\n        except KeyError:\n            val = function(*args)\n            cache[args] = val\n            return val\n    return decorated_function\n\ndef lookup(n, A, B):\n\n    @memoize\n    def go(i, sa):\n        if i == n:\n            return abs(2 * sa - S)\n        return min(go(i + 1, sa + A[i]), go(i + 1, sa + B[i]))\n    if n == 1:\n        return 0\n    S = sum(A) + sum(B)\n    v = go(0, 0)\n    sa = (v + S) // 2\n    m = sa ** 2 + (S - sa) ** 2\n    return (n - 2) * (sum((a ** 2 for a in A)) + sum((b ** 2 for b in B))) + m\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    A = list(map(int, input().split(' ')))\n    B = list(map(int, input().split(' ')))\n    print(lookup(n, A, B))", "def memoize(function):\n    cache = {}\n\n    def decorated_function(*args):\n        try:\n            return cache[args]\n        except KeyError:\n            val = function(*args)\n            cache[args] = val\n            return val\n    return decorated_function\n\ndef lookup(n, A, B):\n\n    @memoize\n    def go(i, sa):\n        if i == n:\n            return abs(2 * sa - S)\n        return min(go(i + 1, sa + A[i]), go(i + 1, sa + B[i]))\n    if n == 1:\n        return 0\n    S = sum(A) + sum(B)\n    v = go(0, 0)\n    sa = (v + S) // 2\n    m = sa ** 2 + (S - sa) ** 2\n    return (n - 2) * (sum((a ** 2 for a in A)) + sum((b ** 2 for b in B))) + m\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    A = list(map(int, input().split(' ')))\n    B = list(map(int, input().split(' ')))\n    print(lookup(n, A, B))", "n = int(input())\nfor e in range(n):\n    t = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    a = 0\n    for i in range(len(l1)):\n        a += (len(l1) - 1) * l1[i] ** 2 + (len(l1) - 1) * l2[i] ** 2\n\n    def dp(s1, s2, h, i):\n        if i == -1:\n            return 0\n        if (s1, s2, i) in h:\n            return h[s1, s2, i]\n        h[s1, s2, i] = min(s1 * l1[i] + s2 * l2[i] + dp(s1 + l1[i], s2 + l2[i], h, i - 1), s1 * l2[i] + s2 * l1[i] + dp(s1 + l2[i], s2 + l1[i], h, i - 1))\n        return h[s1, s2, i]\n    h = {}\n    q = len(l1) - 1\n    s1 = 0\n    s2 = 0\n    a1 = 2 * dp(s1, s2, h, q)\n    ans = a1 + a\n    print(ans)", "import sys\nfrom math import *\nfrom functools import *\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = (n - 2) * sum((a[i] ** 2 + b[i] ** 2 for i in range(n)))\n    temp = sum((a[i] + b[i] for i in range(n)))\n    summ = sum((max(a[i], b[i]) for i in range(n))) + 1\n    dp = [[0 for s in range(summ)] for i in range(n)]\n    for i in range(n):\n        if i == 0:\n            dp[i][a[i]] = 1\n            dp[i][b[i]] = 1\n            continue\n        for s in range(summ):\n            if s >= a[i] and s >= b[i]:\n                dp[i][s] = dp[i - 1][s - a[i]] | dp[i - 1][s - b[i]]\n            elif s >= a[i]:\n                dp[i][s] = dp[i - 1][s - a[i]]\n            elif s >= b[i]:\n                dp[i][s] = dp[i - 1][s - b[i]]\n    minn = 10 ** 9\n    for s in range(summ):\n        minn = min(minn, s * s + (temp - s) ** 2) if dp[n - 1][s] else minn\n    print(ans + minn)"]