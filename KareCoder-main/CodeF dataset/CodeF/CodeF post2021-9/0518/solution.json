["def read_test():\n    nums = input().split(' ')\n    return (int(nums[0]), int(nums[1]))\n\ndef read_input():\n    test_num = int(input())\n    tests = []\n    for _ in range(test_num):\n        tests.append(read_test())\n    return tests\n\ndef solve(test):\n    n = test[0]\n    x = test[1]\n    if n == x:\n        return n\n    n_binary = format(n, 'b')\n    x_binary = format(x, 'b')\n    if len(x_binary) < len(n_binary):\n        x_binary = '0' * (len(n_binary) - len(x_binary)) + x_binary\n    if len(n_binary) < len(x_binary):\n        n_binary = '0' * (len(x_binary) - len(n_binary)) + n_binary\n    diff_idx = 0\n    while n_binary[diff_idx] == x_binary[diff_idx]:\n        diff_idx += 1\n    if x_binary[diff_idx] == '1':\n        return -1\n    if '1' in x_binary[diff_idx:]:\n        return -1\n    if diff_idx == 0:\n        return int('1' + '0' * len(n_binary), 2)\n    if n_binary[diff_idx - 1] != '0':\n        return -1\n    return int(n_binary[:diff_idx - 1] + '1' + '0' * (len(n_binary) - diff_idx), 2)\n\ndef main():\n    tests = read_input()\n    for test in tests:\n        print(solve(test))\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, goal) = map(int, input().split())\n    bin_n = bin(n)\n    length_n = len(bin_n) - 2\n    bin_goal = bin(goal)\n    length_goal = len(bin_goal) - 2\n    if n == goal:\n        print(n)\n    elif goal == 0:\n        print(2 ** length_n)\n    elif n < goal or length_goal != length_n:\n        print(-1)\n    else:\n        bin_goal = bin(goal)\n        length_goal = len(bin_goal) - 2\n        m = 0\n        possible = True\n        is_1 = [0, False]\n        if bin_goal[-1] == '1':\n            print(-1)\n            continue\n        for i in range(2, length_goal + 1):\n            if bin_goal[-i] == '1':\n                index = i\n                break\n        if bin_goal[:-index + 1] != bin_n[:-index + 1]:\n            print(-1)\n            continue\n        m += goal\n        for i in range(1, index):\n            if bin_n[-i] == '1':\n                is_1[1] = True\n            elif is_1[1]:\n                is_1 = [i - 1, False]\n        if not possible or is_1[1]:\n            print(-1)\n        elif is_1[0]:\n            print(m + 2 ** is_1[0])\n        else:\n            print(m)", "t = int(input())\nfor tc in range(t):\n    (n, x) = map(int, input().split())\n    if n == x:\n        print(x)\n        continue\n    sn = bin(n)[2:]\n    ln = len(sn)\n    sx = bin(x)[2:]\n    lx = len(sx)\n    if x == 0:\n        print(1 << ln)\n        continue\n    if ln != lx:\n        print(-1)\n        continue\n    i = 0\n    while sn[i] == sx[i]:\n        i += 1\n    if '1' in sx[i + 1:]:\n        print(-1)\n        continue\n    if sn[i] == '1':\n        if i > 0 and sn[i - 1] == '1':\n            print(-1)\n        else:\n            tmp = sn[:i - 1] + '1' + '0' * (ln - i)\n            print(int(tmp, base=2))\n    else:\n        print(-1)", "t = int(input())\nfor i in range(t):\n    (a, b) = [int(i) for i in input().split()]\n    ab = bin(a)[2:]\n    bb = bin(b)[2:]\n    x = a\n    y = a\n    found = False\n    while x > 0:\n        if x == b:\n            found = True\n            print(y)\n            break\n        y += y & -y\n        x &= y\n    if b == 0:\n        print(y)\n    elif not found:\n        print(-1)", "def get_bigger_pow_2(n):\n    p = 1\n    i = 0\n    while p <= n:\n        p *= 2\n        i += 1\n    return (p, i)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, x) = list(map(int, input().split(' ')))\n        if n | x != n:\n            print(-1)\n            continue\n        xor = n ^ x\n        (p, i) = get_bigger_pow_2(xor)\n        m = n >> i << i\n        if (m & 1 << i + 1) >> i == 1:\n            print(-1)\n            continue\n        if p != 1:\n            m += p\n        if m & n == x:\n            print(m)\n        else:\n            print(-1)\nmain()", "for i in range(int(input())):\n    (n, x) = map(int, input().split())\n    (a, b, p) = (n, n, False)\n    while a > 0:\n        if a == x:\n            p = True\n            print(b)\n            break\n        b += b & -b\n        a &= b\n    if x == 0:\n        print(b)\n    elif p == False:\n        print(-1)", "for i in range(int(input())):\n    (n, x) = map(int, input().split())\n    (a, b, p) = (n, n, False)\n    while a > 0:\n        if a == x:\n            p = True\n            print(b)\n            break\n        b += b & -b\n        a &= b\n    if x == 0:\n        print(b)\n    elif p == False:\n        print(-1)", "for i in range(int(input())):\n    (n, x) = map(int, input().split())\n    (a, b, p) = (n, n, False)\n    while a > 0:\n        if a == x:\n            p = True\n            print(b)\n            break\n        b += b & -b\n        a &= b\n    if x == 0:\n        print(b)\n    elif p == False:\n        print(-1)", "for i in range(int(input())):\n    (n, x) = map(int, input().split())\n    (a, b, p) = (n, n, False)\n    while a > 0:\n        if a == x:\n            p = True\n            print(b)\n            break\n        b += b & -b\n        a &= b\n    if x == 0:\n        print(b)\n    elif p == False:\n        print(-1)", "ta_rF = int(input())\nfor i in range(ta_rF):\n    (fl_Gd, Y_q) = map(int, input().split())\n    (H_mn_P, u_iRp, df_Bn) = (fl_Gd, fl_Gd, False)\n    while H_mn_P > 0:\n        if H_mn_P == Y_q:\n            df_Bn = True\n            print(u_iRp)\n            break\n        u_iRp += u_iRp & -u_iRp\n        H_mn_P &= u_iRp\n    if Y_q == 0:\n        print(u_iRp)\n    elif df_Bn == False:\n        print(-1)", "for i in range(int(input())):\n    (n, x) = map(int, input().split())\n    (a, b, p) = (n, n, False)\n    while a > 0:\n        if a == x:\n            p = True\n            print(b)\n            break\n        b += b & -b\n        a &= b\n    if x == 0:\n        print(b)\n    elif p == False:\n        print(-1)", "for i in range(int(input())):\n    (n, x) = map(int, input().split())\n    (a, b, p) = (n, n, False)\n    while a > 0:\n        if a == x:\n            p = True\n            print(b)\n            break\n        b += b & -b\n        a &= b\n    if x == 0:\n        print(b)\n    elif p == False:\n        print(-1)", "t = int(input(''))\nfor _ in range(t):\n    (n, x) = [int(x) for x in input('').split(' ')]\n    if x > n:\n        print(-1)\n        continue\n    if x & n != x:\n        print(-1)\n        continue\n    if x == n:\n        print(n)\n        continue\n    s1 = bin(n)[2:]\n    s2 = bin(x)[2:]\n    s2 = '0' * (len(s1) - len(s2)) + s2\n    l = len(s1)\n    left10 = -1\n    right11 = l + 1\n    for i in range(l):\n        if s1[i] == '1' and s2[i] == '0':\n            left10 = l - 1 - i\n            break\n    for i in range(l - 1, -1, -1):\n        if s1[i] == '1' and s2[i] == '1':\n            right11 = l - 1 - i\n            break\n    if left10 == -1:\n        print(n)\n        continue\n    if right11 <= left10 + 1:\n        print(-1)\n        continue\n    z = 1 << left10 + 1\n    print((n & -z) + z)", "def solve(n, x):\n    if n < x:\n        print(-1)\n        return\n    if n == x:\n        print(n)\n        return\n    bn = bin(n)[2:][::-1]\n    bx = bin(x)[2:][::-1]\n    bm = bn[:]\n    if x == 0:\n        print(2 ** len(bn))\n        return\n    if len(bx) != len(bn):\n        print(-1)\n        return\n    last1 = -1\n    no_more = False\n    for i in range(len(bn)):\n        if bn[i] == '0' and bx[i] == '1':\n            print(-1)\n            return\n        if bn[i] == '1':\n            if bx[i] == '1':\n                no_more = True\n            else:\n                if no_more:\n                    print(-1)\n                    return\n                last1 = i\n                bm = bm[:i] + '0' + bm[i + 1:]\n    if bx[last1 + 1] == '1':\n        print(-1)\n        return\n    bm = bm[:last1 + 1] + '1' + bm[last1 + 2:]\n    print(int(bm[::-1], 2))\nt = int(input())\nfor i in range(t):\n    s = input()\n    (n, x) = (int(s.split()[0]), int(s.split()[1]))\n    solve(n, x)", "t = int(input())\n\ndef solve():\n    s = input()\n    n = int(s.split(' ')[0])\n    x = int(s.split(' ')[1])\n    if n == x:\n        print(n)\n        return\n    for i in range(70, -1, -1):\n        if n >> i & 1 != x >> i & 1:\n            if n >> i & 1 == 0:\n                print(-1)\n                return\n            else:\n                if n >> i + 1 & 1 == 0 and x & (1 << i + 1) - 1 == 0:\n                    ans = (n >> i + 2 << i + 2) + (1 << i + 1)\n                    if ans > 5000000000000000000:\n                        print(ans)\n                        return\n                    print(ans)\n                    return\n                print(-1)\n                return\nwhile t:\n    t -= 1\n    solve()", "for i in range(int(input())):\n    (a, b) = [int(i) for i in input().split()]\n    ab = bin(a)[2:]\n    bb = bin(b)[2:]\n    x = a\n    y = a\n    found = False\n    while x > 0:\n        if x == b:\n            found = True\n            print(y)\n            break\n        y += y & -y\n        x &= y\n    if b == 0:\n        print(y)\n    elif not found:\n        print(-1)", "for j in range(int(input())):\n    (b, c) = [int(j) for j in input().split()]\n    bc = bin(b)[2:]\n    cc = bin(c)[2:]\n    y = b\n    z = b\n    found = False\n    while y > 0:\n        if y == c:\n            found = True\n            print(z)\n            break\n        z += z & -z\n        y &= z\n    if c == 0:\n        print(z)\n    elif not found:\n        print(-1)", "for _ in range(int(input())):\n    (n, x) = list(map(int, input().split()))\n    a = n\n    b = n\n    f = 1\n    while a > 0:\n        if a == x:\n            f = 0\n            print(b)\n            break\n        b += b & -b\n        a &= b\n    if x == 0:\n        print(b)\n    elif f:\n        print(-1)", "t = int(input())\nfor i in range(t):\n    arr = list(map(int, input().split()))\n    n = arr[0]\n    x = arr[1]\n    t1 = n\n    temp = n\n    fnd = 0\n    while t1 > 0:\n        if t1 == x:\n            fnd = 1\n            break\n        temp = temp + (temp & -temp)\n        t1 = t1 & temp\n    if fnd != 0 or x == 0:\n        print(temp)\n    elif fnd == 0:\n        print('-1')", "def ii(num=False):\n    i = input().split()\n    if num:\n        return int(i[0])\n    try:\n        return list(map(int, i))\n    except Exception:\n        return i\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nfor _ in range(ii(1)):\n    max_bit = 63\n    (n, x) = ii()\n    xor = n ^ x\n    left = 0\n    if xor == 0:\n        print(n)\n        continue\n    while left < 63 and xor >> max_bit - left & 1 == 0:\n        left += 1\n    bit = max_bit - left\n    m = (n >> bit) + 1 << bit\n    if m & n != x:\n        print(-1)\n    else:\n        print(m)", "for i in range(int(input())):\n    (n, x) = map(int, input().split())\n    (a, b, p) = (n, n, False)\n    while a > 0:\n        if a == x:\n            p = True\n            print(b)\n            break\n        b += b & -b\n        a &= b\n    if x == 0:\n        print(b)\n    elif p == False:\n        print(-1)", "for i in range(int(input())):\n    (n, x) = map(int, input().split())\n    (a, b, p) = (n, n, False)\n    while a > 0:\n        if a == x:\n            p = True\n            print(b)\n            break\n        b += b & -b\n        a &= b\n    if x == 0:\n        print(b)\n    elif p == False:\n        print(-1)", "tk_rF = int(input())\nfor i in range(tk_rF):\n    (fl_Gd, Y_q) = map(int, input().split())\n    (H_mn_P, u_iRp, df_Bn) = (fl_Gd, fl_Gd, False)\n    while H_mn_P > 0:\n        if H_mn_P == Y_q:\n            df_Bn = True\n            print(u_iRp)\n            break\n        u_iRp += u_iRp & -u_iRp\n        H_mn_P &= u_iRp\n    if Y_q == 0:\n        print(u_iRp)\n    elif df_Bn == False:\n        print(-1)", "def mapped_read(cast):\n    return map(cast, input().split())\n\ndef read_list(cast):\n    return list(mapped_read(cast))\n\ndef count(a):\n    ans = 0\n    while a > 0:\n        a //= 2\n        ans += 1\n    return ans\n\ndef f(x):\n    cnt = 0\n    while x % 4 == 0:\n        x //= 2\n        cnt += 1\n    return cnt\n\ndef solve():\n    (n, x) = mapped_read(int)\n    if n == x:\n        print(n)\n        return\n    if x == 0:\n        print(2 ** count(n))\n        return\n    cnt = f(x)\n    if (2 ** count(n) - 1 ^ 2 ** cnt - 1) & n != x:\n        print(-1)\n        return\n    print(n + 2 ** count(n & 2 ** cnt - 1) - (n & 2 ** cnt - 1))\n(n,) = mapped_read(int)\nfor _ in range(n):\n    solve()", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    (a, b, p) = (n, n, False)\n    while a > 0:\n        if a == k:\n            p = True\n            print(b)\n            break\n        b += b & -b\n        a &= b\n    if k == 0:\n        print(b)\n    elif p == False:\n        print(-1)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    (nn, xx) = (n, x)\n    flag = 0\n    if n < x:\n        print(-1)\n    elif n == x:\n        print(n)\n    else:\n        cnt = 0\n        (a, b) = (str(bin(n))[2:], str(bin(x))[2:])\n        b = '0' * (len(a) - len(b)) + b\n        cnt = len(a)\n        flag = 0\n        ans = ''\n        for i in range(len(a)):\n            if a[i] == b[i] and flag == 0:\n                ans += a[i]\n            else:\n                flag = 1\n                ans += '1'\n        ans = int(ans, 2) + 1\n        if xx <= ans & ans - 1:\n            print(ans)\n        else:\n            print(-1)", "t = int(input())\nfor i in range(t):\n    (a, b) = [int(i) for i in input().split()]\n    ab = bin(a)[2:]\n    bb = bin(b)[2:]\n    x = a\n    y = a\n    found = False\n    while x > 0:\n        if x == b:\n            found = True\n            print(y)\n            break\n        y += y & -y\n        x &= y\n    if b == 0:\n        print(y)\n    elif not found:\n        print(-1)", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    if len(bin(x)) > len(bin(n)):\n        print(-1)\n        continue\n    bin_n = bin(n)\n    bin_x = bin(x)\n    if len(bin_x) < len(bin_n):\n        if x:\n            print(-1)\n            continue\n        bin_x = '0b' + '0' * (len(bin_n) - len(bin_x)) + bin_x[2:]\n    i = len(bin_x) - 1\n    while i >= 2 and bin_x[i] == '0':\n        i -= 1\n    p = len(bin_x) - i - 1\n    i = 2\n    while i < len(bin_n):\n        if bin_n[i] == '1' and bin_x[i] == '0':\n            if p >= len(bin_n) - i:\n                if i == 2 or bin_x[i - 1] != '1':\n                    s = bin_n[i:]\n                    print(n + 2 ** len(s) - int(s, 2))\n                else:\n                    print(-1)\n            else:\n                print(-1)\n            break\n        elif bin_n[i] == '0' and bin_x[i] == '1':\n            print(-1)\n            break\n        i += 1\n    else:\n        print(n)", "t = int(input())\nfor _ in range(t):\n    (n, x) = [int(i) for i in input().split()]\n    if n == x:\n        print(n)\n        continue\n    if x > n:\n        print(-1)\n    else:\n        x_b = bin(x)[2:]\n        n_b = bin(n)[2:]\n        le = max(len(x_b), len(n_b))\n        x_b = '0' * (le - len(x_b)) + x_b\n        n_b = '0' * (le - len(n_b)) + n_b\n        chislo = ''\n        add = ''\n        f = 0\n        for i in range(le):\n            if f and x_b[i] == '1':\n                print(-1)\n                break\n            elif f:\n                chislo = chislo + '0'\n            elif x_b[i] == n_b[i] == '1':\n                chislo = chislo + '1'\n            elif x_b[i] == '0' and n_b[i] == '1':\n                if chislo and chislo[-1] == '1':\n                    print(-1)\n                    break\n                chislo = chislo[:-1] + '10'\n                f = 1\n            elif x_b[i] == '1' and n_b[i] == '0':\n                print(-1)\n                break\n            else:\n                chislo = chislo + '0'\n        else:\n            print(int(chislo, 2))", "def solve():\n    (n, x) = map(int, input().split())\n    if x > n:\n        print(-1)\n        return\n    n = bin(n)[2:]\n    x = bin(x)[2:]\n    ln = len(n)\n    lx = len(x)\n    ans = []\n    if x == '0':\n        if n == '0':\n            print(0)\n            return\n        myans = '1' + '0' * ln\n        print(int(myans, 2))\n        return\n    if lx < ln:\n        print(-1)\n        return\n    for i in range(lx):\n        ans.append(x[i])\n        if n[i] == '0' and x[i] == '1':\n            print(-1)\n            return\n    la = len(ans)\n    for i in range(la):\n        if n[i] < ans[i]:\n            myans = ''.join(ans)\n            print(int(myans, 2))\n            return\n        elif n[i] > ans[i]:\n            for j in range(i - 1, -1, -1):\n                if ans[j] == '0':\n                    ans[j] = '1'\n                    for k in range(j + 1, la):\n                        if x[k] != '0':\n                            print(-1)\n                            return\n                    myans = ''.join(ans)\n                    print(int(myans, 2))\n                    return\n            print(-1)\n            return\n    myans = ''.join(ans)\n    print(int(myans, 2))\n    return\nfor _ in range(int(input())):\n    solve()", "import math\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    if n & k != k:\n        print(-1)\n        continue\n    if n == k:\n        print(n)\n        continue\n    if k > n:\n        print(-1)\n        continue\n    if k == 0:\n        lenn = int(math.log2(n))\n        print(1 << lenn + 1)\n        continue\n    lenk = int(math.log2(k)) + 1\n    b = lenk\n    for i in range(lenk - 1, -1, -1):\n        if k >> i & 1 == 1:\n            b = i\n    lenn = int(math.log2(n)) + 1\n    if lenn != lenk:\n        print(-1)\n        continue\n    flag = False\n    for i in range(b, lenk + 1):\n        if n >> i & 1 != k >> i & 1:\n            flag = True\n            break\n    if flag:\n        print(-1)\n        continue\n    if n >> b - 1 & 1 == 1:\n        print(-1)\n        continue\n    for i in range(b - 1, -1, -1):\n        if n >> i & 1 == 1:\n            c = i\n            break\n    m = n >> b\n    m = m << b\n    m += 1 << c + 1\n    print(m)", "for _ in range(int(input())):\n    [n, x] = list(map(int, input().split()))\n    (orin, orix) = (n, x)\n    if n == x:\n        print(n)\n        continue\n    if n < x:\n        print(-1)\n        continue\n    maxi = 0\n    power = 0\n    yes = 1\n    while n or x:\n        if x % 2 == 1 and n % 2 == 0:\n            print(-1)\n            yes = 0\n            break\n        if x % 2 == 1 and n % 2 == 1:\n            if n != x:\n                print(-1)\n                yes = 0\n                break\n            elif power == maxi + 1:\n                print(-1)\n                yes = 0\n                break\n            else:\n                print(orix + 2 ** (maxi + 1))\n                yes = 0\n                break\n        if x % 2 == 0 and n % 2 == 1:\n            maxi = power\n        (n, x) = (n // 2, x // 2)\n        power += 1\n    if yes == 1:\n        print(2 ** (maxi + 1))", "def bin_to_dec(x):\n    y = 0\n    for i in x:\n        y *= 2\n        y += int(i)\n    return y\nt = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    a = bin(n)\n    b = bin(x)\n    if n == x:\n        print(n)\n        continue\n    if x == 0:\n        print(1 << len(a) - 2)\n        continue\n    if n < x:\n        print(-1)\n        continue\n    a = a[2:]\n    b = b[2:]\n    if len(a) != len(b):\n        print(-1)\n        continue\n    i = 0\n    while i < len(a):\n        if a[i] != b[i]:\n            break\n        i += 1\n    k = i\n    ans = 1\n    while k < len(b):\n        if b[k] != '0':\n            ans = 0\n        k += 1\n    if not ans:\n        print(-1)\n        continue\n    if a[i - 1] == '1':\n        print(-1)\n        continue\n    else:\n        l = []\n        j = 0\n        while j < i - 1:\n            l.append(a[j])\n            j += 1\n        l.append('1')\n        for w in range(len(a) - i):\n            l.append('0')\n        s = ''\n        for char in l:\n            s = s + char\n        print(bin_to_dec(s))", "for j in range(int(input())):\n    (n, x) = map(int, input().split())\n    if n == x:\n        print(n)\n        continue\n    if x > n:\n        print('-1')\n        continue\n    a = list(bin(n)[2:])\n    b = list(bin(x)[2:])\n    t = len(b)\n    s = len(a) - t\n    b1 = ['0'] * s\n    b = b1 + b\n    f = 0\n    r = len(a)\n    j = r - 1\n    t = 0\n    while True:\n        if j == -1:\n            break\n        if b[j] == '1' and a[j] == '0':\n            t = 1\n            print('-1')\n            break\n        if b[j] == '1' and a[j] == '1':\n            f = 1\n        if a[j] == '1' and b[j] == '0' and (f == 1):\n            print('-1')\n            t = 1\n            break\n        j -= 1\n    if t == 1:\n        continue\n    flg = 0\n    req = 0\n    for j in range(r):\n        if a[j] == '1' and b[j] == '0':\n            req = j\n            break\n    if req != 0:\n        reqs = ''.join(a[0:req - 1])\n    else:\n        reqs = ''\n    reqs = reqs + '1'\n    rem = ''.join(['0'] * (r - req))\n    reqs = reqs + rem\n    if int(reqs, 2) < n:\n        print(-1)\n        continue\n    print(int(reqs, 2))", "def func():\n    (a, b) = map(int, input().split())\n    if b > a:\n        print(-1)\n        return\n    if b == a:\n        print(a)\n        return\n    c = a - b\n    d = a\n    ld = []\n    lc = []\n    cnt = 0\n    while d != 0:\n        if d % 2 != 0:\n            ld.append(cnt)\n        d = d // 2\n        cnt = cnt + 1\n    cnt = 0\n    while c != 0:\n        if c % 2 != 0:\n            lc.append(cnt)\n        c = c // 2\n        cnt = cnt + 1\n    if cnt in ld:\n        print(-1)\n        return\n    ans = a + pow(2, cnt)\n    for i in range(len(lc)):\n        if lc[i] not in ld or lc[i] != ld[i]:\n            print(-1)\n            return\n        ans = ans - pow(2, lc[i])\n    print(ans)\nfor i in range(int(input())):\n    func()", "def func():\n    (a, b) = map(int, input().split())\n    if b > a:\n        print(-1)\n        return\n    if b == a:\n        print(a)\n        return\n    c = a - b\n    d = a\n    ld = []\n    lc = []\n    cnt = 0\n    while d != 0:\n        if d % 2 != 0:\n            ld.append(cnt)\n        d = d // 2\n        cnt = cnt + 1\n    cnt = 0\n    while c != 0:\n        if c % 2 != 0:\n            lc.append(cnt)\n        c = c // 2\n        cnt = cnt + 1\n    if cnt in ld:\n        print(-1)\n        return\n    ans = a + pow(2, cnt)\n    for i in range(len(lc)):\n        if lc[i] not in ld or lc[i] != ld[i]:\n            print(-1)\n            return\n        ans = ans - pow(2, lc[i])\n    print(ans)\nfor i in range(int(input())):\n    func()", "for j in range(int(input())):\n    (n, x) = map(int, input().split())\n    if n == x:\n        print(n)\n        continue\n    if x > n:\n        print('-1')\n        continue\n    a = list(bin(n)[2:])\n    b = list(bin(x)[2:])\n    t = len(b)\n    s = len(a) - t\n    b1 = ['0'] * s\n    b = b1 + b\n    f = 0\n    r = len(a)\n    j = r - 1\n    t = 0\n    while True:\n        if j == -1:\n            break\n        if b[j] == '1' and a[j] == '0':\n            t = 1\n            print('-1')\n            break\n        if b[j] == '1' and a[j] == '1':\n            f = 1\n        if a[j] == '1' and b[j] == '0' and (f == 1):\n            print('-1')\n            t = 1\n            break\n        j -= 1\n    if t == 1:\n        continue\n    flg = 0\n    req = 0\n    for j in range(r):\n        if a[j] == '1' and b[j] == '0':\n            req = j\n            break\n    if req != 0:\n        reqs = ''.join(a[0:req - 1])\n    else:\n        reqs = ''\n    reqs = reqs + '1'\n    rem = ''.join(['0'] * (r - req))\n    reqs = reqs + rem\n    if int(reqs, 2) < n:\n        print(-1)\n        continue\n    print(int(reqs, 2))", "def ii(num=False):\n    i = input().split()\n    if num:\n        return int(i[0])\n    try:\n        return list(map(int, i))\n    except Exception:\n        return i\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nfor _ in range(ii(1)):\n    max_bit = 63\n    (n, x) = ii()\n    if n == x:\n        print(n)\n        continue\n    if n < x:\n        print(-1)\n        continue\n    arr_n = [0] * max_bit\n    arr_x = [0] * max_bit\n    for i in range(max_bit):\n        arr_n[max_bit - i - 1] = n >> i & 1\n        arr_x[max_bit - i - 1] = x >> i & 1\n    left = 0\n    flag = True\n    while left < max_bit:\n        if arr_n[left] == arr_x[left]:\n            left += 1\n        elif arr_n[left] > arr_x[left]:\n            break\n        else:\n            flag = False\n            break\n    if flag:\n        bit = max_bit - left\n        m = (n >> bit) + 1 << bit\n        if m & n != x:\n            flag = False\n        else:\n            print(m)\n    if not flag:\n        print(-1)", "t = int(input())\nfor i in range(t):\n    (n, x) = map(int, input().split())\n    (st, st1) = (bin(n)[2:], bin(x)[2:])\n    if n & x != x:\n        print(-1)\n    elif n == x:\n        print(x)\n    else:\n        while len(st) != 64:\n            st = '0' + st\n        while len(st1) != 64:\n            st1 = '0' + st1\n        vsp = [0] * 64\n        vsp[63] = int(st1[63])\n        for i in range(62, -1, -1):\n            vsp[i] = vsp[i + 1] + int(st1[i])\n        ind = -1\n        i = 0\n        while st[i] == st1[i]:\n            if vsp[i] == 0:\n                ind = i\n            i += 1\n        if ind == -1:\n            print(-1)\n        else:\n            res = st1[:ind] + '1' + '0' * (64 - ind - 1)\n            print(int(res, 2))", "for _ in range(int(input())):\n    (a, b) = input().split()\n    a = int(a)\n    b = int(b)\n    if b > a:\n        print(-1)\n        continue\n    if b == a:\n        print(a)\n        continue\n    n = str(bin(a))[2:]\n    c = str(bin(b))[2:]\n    if b == 0:\n        print(2 ** len(n))\n        continue\n    if len(c) != len(n):\n        print(-1)\n        continue\n    possible = True\n    spot = 0\n    thing2 = False\n    ans = 0\n    for r in range(len(n)):\n        if thing2 and c[r] == '1':\n            possible = False\n            break\n        if n[r] != c[r]:\n            if c[r] != '0' or c[r - 1] != '0':\n                possible = False\n                break\n            elif not thing2:\n                thing2 = True\n                spot = len(n) - r\n                ans += 2 ** spot\n        if not thing2:\n            ans += 2 ** (len(n) - r - 1) * int(n[r])\n    if not possible:\n        print(-1)\n    else:\n        print(ans)", "def find_m(n, x):\n    f = [0] * 60\n    for i in range(60):\n        if ~n >> i & 1:\n            f[i] = n\n        else:\n            f[i] = (n & ~((1 << i) - 1)) + (1 << i)\n    m = n\n    for i in range(60):\n        if ~x >> i & 1:\n            m = max(m, f[i])\n    for i in range(60):\n        if x >> i & 1:\n            if m >= f[i]:\n                return -1\n    return m\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        (n, x) = map(int, input().split())\n        result = find_m(n, x)\n        print(result)\nmain()", "t = int(input())\nfor i in range(t):\n    (n, x) = map(int, input().split(' '))\n    if n < x:\n        print(-1)\n        continue\n    m = n\n    current_bit = 0\n    current_num = n\n    while current_num != x and m < 1e+19:\n        m += 1 << current_bit\n        if (m >> current_bit) % 2 == 0:\n            current_bit += 1\n        current_num &= m\n    if m >= 1e+19:\n        print(-1)\n    else:\n        print(m)", "t = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    N = [0] * 62\n    X = [0] * 62\n    f = True\n    for i in range(62):\n        if n & 1 << i:\n            N[i] += 1\n        if x & 1 << i:\n            X[i] += 1\n        if X[i] and (not N[i]):\n            f = False\n            break\n    if not f:\n        print(-1)\n        continue\n    i = 0\n    a = 0\n    p = 0\n    while i < 62:\n        if N[i] and (not X[i]):\n            a += 2 ** i\n            N[i] = 0\n            if p != 0:\n                a -= 2 ** p\n                p = 0\n            j = i + 1\n            while j < 62:\n                if N[j] and (not X[j]):\n                    N[j] = 0\n                    j += 1\n                elif N[j] and X[j]:\n                    f = False\n                    break\n                else:\n                    break\n            i = j\n            p = j\n        elif N[i] == X[i] == 1:\n            break\n        else:\n            i += 1\n    if not f:\n        print(-1)\n        continue\n    for i in range(62):\n        if N[i] != X[i]:\n            f = False\n            break\n    if not f:\n        print(-1)\n        continue\n    print(a + n)", "T = int(input())\n\ndef b(a, b):\n    return a >> b & 1\nfor t in range(T):\n    (n, x) = map(int, input().split())\n    (low, high) = (n, 10 ** 20)\n    ac = 0\n    for i in range(max(x.bit_length(), n.bit_length())):\n        if not b(n, i) and (not b(x, i)):\n            pass\n        elif not b(n, i) and b(x, i):\n            low = -1\n            break\n        elif b(n, i) and (not b(x, i)):\n            low = n + ac + 1\n        else:\n            high = n + ac\n        if not b(n, i):\n            ac += 2 ** i\n        if low > high:\n            low = -1\n            break\n    print(low)", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    f = 0\n    for i in range(64):\n        if n >> i & 1 and x >> i & 1:\n            f = 1\n        if f == 1 and n >> i & 1 and (x >> i & 1 == 0):\n            f = 2\n            break\n        if n >> i & 1 == 0 and x >> i & 1:\n            f = 2\n            break\n    if f == 2:\n        print(-1)\n        continue\n    ans = 0\n    for i in range(64, -1, -1):\n        if n >> i & 1 and x >> i & 1 == 0:\n            ans = 1 << i + 1\n            r = 0\n            for j in range(i + 1):\n                if n >> j & 1:\n                    r += 1 << j\n            ans -= r\n            break\n    n += ans\n    f = 0\n    for i in range(64):\n        if n >> i & 1 == 0 and x >> i & 1:\n            f = 1\n            break\n    if f:\n        print(-1)\n    else:\n        print(n)", "for _ in range(int(input())):\n    (m, x) = map(int, input().split())\n    dicM = {}\n    dicX = {}\n    ok = True\n    pos = -1\n    A = -1\n    ans = 0\n    for i in range(63):\n        if 1 << i & x != 0:\n            dicX[i] = 1\n        else:\n            dicX[i] = 0\n        if 1 << i & m != 0:\n            dicM[i] = 1\n        else:\n            dicM[i] = 0\n        if dicM[i] != dicX[i]:\n            if dicM[i] == 1:\n                pos = i + 1\n            else:\n                ok = False\n        elif dicX[i] == 1 and dicX[i] == dicM[i]:\n            ans += 1 << i\n            A = i\n        if A != -1 and pos != -1 and (pos >= A):\n            ok = False\n    if pos != -1:\n        ans += 1 << pos\n    print(ans) if ok else print('-1')", "import sys\ninput = sys.stdin.readline\nMAX = int(1e+18)\n\ndef solve():\n    (N, X) = list(map(int, input().split()))\n    if N == X:\n        print(N)\n    elif X == 0:\n        A = 1\n        while A <= N:\n            A <<= 1\n        print(A)\n    else:\n        A = list(bin(N)[2:])\n        N1 = len(A)\n        D = {}\n        for i in range(N1 - 1, 0, -1):\n            if A[i - 1] + A[i] == '01':\n                A[i] = '0'\n                A[i - 1] = '1'\n                t = eval('0b' + ''.join(A))\n                A[i - 1] = '0'\n                x = eval('0b' + ''.join(A))\n                D[x] = min(D.get(x, MAX), t)\n            elif A[i] == '1':\n                A[i] = '0'\n        if X in D:\n            print(D[X])\n        else:\n            print(-1)\nfor _ in range(int(input())):\n    solve()", "def solve():\n    (n, x) = map(int, input().split())\n    if n == x:\n        print(n)\n        return\n    for bitOff in range(70):\n        bit = 1 << bitOff\n        if not n & bit:\n            continue\n        tmpN = n\n        for smallOff in range(bitOff - 1, -1, -1):\n            smallBit = 1 << smallOff\n            if tmpN & smallBit:\n                tmpN ^= smallBit\n        tmpN += bit\n        result = n & tmpN\n        for smallOff in range(bitOff, -1, -1):\n            smallBit = 1 << smallOff\n            if result & smallBit:\n                result ^= smallBit\n        if result == x:\n            print(tmpN)\n            return\n    print(-1)\n\ndef main():\n    cases = int(input())\n    for _ in range(cases):\n        solve()\nmain()"]