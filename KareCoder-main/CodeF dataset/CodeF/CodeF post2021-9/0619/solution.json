["def solve(bits):\n    first_one_encountered = False\n    depth = 0\n    next_zero = set()\n    answer = []\n    for (i, sum) in enumerate(bits):\n        if sum == 0:\n            answer.append(0)\n        elif not first_one_encountered:\n            answer.append(1)\n            first_one_encountered = True\n            depth = sum\n            next_zero.add(depth)\n        elif i in next_zero:\n            answer.append(0)\n            depth = i + sum\n            next_zero.add(depth)\n        else:\n            answer.append(1)\n            depth = sum\n            next_zero.add(depth)\n    return ' '.join(list(map(str, answer)))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    bits = list(map(int, input().split()))\n    print(solve(bits))", "def solve(bits):\n    ones_encountered = 0\n    depth = 0\n    next_zero = set()\n    answer = []\n    for (i, sum) in enumerate(bits):\n        if sum == 0:\n            answer.append(0)\n        elif ones_encountered == 0:\n            answer.append(1)\n            ones_encountered += 1\n            depth = sum\n            next_zero.add(depth)\n        elif i not in next_zero:\n            answer.append(1)\n            ones_encountered += 1\n            depth = sum\n            next_zero.add(depth)\n        else:\n            answer.append(0)\n            depth = i + sum\n            next_zero.add(depth)\n    return ' '.join(list(map(str, answer)))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    bits = list(map(int, input().split()))\n    print(solve(bits))", "def solve(bits):\n    ones_encountered = 0\n    depth = 0\n    next_zero = set()\n    answer = []\n    for (i, sum) in enumerate(bits):\n        if sum == 0:\n            answer.append(0)\n        elif ones_encountered == 0:\n            answer.append(1)\n            ones_encountered += 1\n            depth = sum\n            next_zero.add(depth)\n        elif i not in next_zero:\n            answer.append(1)\n            ones_encountered += 1\n            depth = sum\n            next_zero.add(depth)\n        else:\n            next_zero.remove(i)\n            answer.append(0)\n            depth = i + sum\n            next_zero.add(depth)\n    return ' '.join(list(map(str, answer)))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    bits = list(map(int, input().split()))\n    print(solve(bits))", "def reversesortsum(nums):\n    total = sum(nums)\n    k = total // n\n    ans = [0] * n\n    b = [0] * n\n    lf = n - k\n    for i in range(lf, n):\n        b[i] = n - 1\n    for i in range(n - 1, -1, -1):\n        if lf > i:\n            break\n        cur = nums[i] - (b[i] - i)\n        if cur == i + 1:\n            ans[i] = 1\n        elif cur == 1:\n            ans[i] = 0\n            lf -= 1\n            b[lf] = i - 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = [int(x) for x in input().split()]\n    res = reversesortsum(nums)\n    print(' '.join((str(x) for x in res)))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    it = -1\n    ans = [1] * n\n    for i in range(n):\n        if ans[i] == 0:\n            it = a[i] + i\n        elif a[i] == 0:\n            it = i\n        else:\n            it = a[i]\n        if it == n:\n            break\n        ans[it] = 0\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    it = -1\n    ans = [1] * n\n    for i in range(n):\n        if ans[i] == 0:\n            it = a[i] + i\n        elif a[i] == 0:\n            it = i\n        else:\n            it = a[i]\n        if it == n:\n            break\n        ans[it] = 0\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    it = -1\n    ans = [1] * n\n    for i in range(n):\n        if ans[i] == 0:\n            it = a[i] + i\n        elif a[i] == 0:\n            it = i\n        else:\n            it = a[i]\n        if it == n:\n            break\n        ans[it] = 0\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    it = -1\n    ans = [1] * n\n    for i in range(n):\n        if ans[i] == 0:\n            it = a[i] + i\n        elif a[i] == 0:\n            it = i\n        else:\n            it = a[i]\n        if it == n:\n            break\n        ans[it] = 0\n    print(*ans)", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    C = list(map(int, input().split()))\n    ans = [0] * N\n    k = sum(C) // N\n    i = N - 1\n    while i > -1 and k > 0:\n        if C[i] == N:\n            ans[i] = 1\n            k -= 1\n        else:\n            C[i - k] += N - i\n        i -= 1\n    print(*ans)", "from builtins import map\n\ndef main():\n    for t in range(int(input())):\n        n = int(input())\n        ans = [0 for i in range(n)]\n        a = list(map(lambda ai: int(ai), input().split(' ')))\n        k = sum(a) // n\n        lb = n - k\n        for i in range(1, k + 1):\n            a[n - i] -= i\n        for i in range(n - 1, -1, -1):\n            if a[i] == i and k > 0:\n                k -= 1\n                ans[i] = 1\n            else:\n                ans[i] = 0\n                lb -= 1\n                if lb >= 0:\n                    a[lb] -= k\n        for i in range(n):\n            print(ans[i], end=' ')\n        print(end='\\n')\nmain()", "def solve():\n    n = int(input())\n    c = list(map(int, input().split()))\n    sum = 0\n    for i in range(n):\n        sum += c[i]\n    ones = sum // n\n    ans = [1 for _ in range(n + 1)]\n    first_0 = c[0]\n    ans[first_0] = 0\n    for i in range(n):\n        if ans[i] == 1:\n            if c[i] == 0:\n                ans[i] = 0\n        if ans[i] == 1:\n            next_0 = c[i]\n            ans[next_0] = 0\n        else:\n            next_0 = i + c[i]\n            ans[next_0] = 0\n        print(ans[i], end=' ')\n    print()\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    n = int(input())\n    c = list(map(int, inp().split()))\n    a = ['0'] * n\n    sub = [0] * (n + 1)\n    have = 0\n    j = 0\n    cur = 0\n    for i in range(0, n):\n        sub[i - have + 1] += 1\n        sub[i + 1] -= 1\n        if j >= i - have + 1:\n            cur += 1\n        while j < i - have:\n            j += 1\n            cur += sub[j]\n        while j > i - have:\n            cur -= sub[j]\n            j -= 1\n        if j >= 0 and cur < c[j]:\n            a[i] = '1'\n            sub[i] += i\n            sub[i + 1] -= i\n            if j == i:\n                cur += i\n            have += 1\n            if i - have + 1 < i + 1:\n                sub[i - have + 1] += 1\n                sub[i - have + 2] -= 1\n                if j == i - have + 1:\n                    cur += 1\n    print(' '.join(a))\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "import sys\ninput = sys.stdin.readline\nfrom collections import deque\n\ndef solve():\n    n = int(input())\n    C = list(map(int, input().split()))\n    k = sum(C) // n\n    ans = [0] * n\n    idx = n - 1\n    cnt = 0\n    st = deque([])\n    while idx > 0:\n        fk = 1 if k else 0\n        if not fk:\n            print(*ans)\n            return\n        while st and idx < st[0]:\n            cnt -= 1\n            st.popleft()\n        ak = (C[idx] - cnt - fk) // idx\n        ans[idx] = ak\n        cnt += 1\n        st.append(idx - k + 1)\n        k -= 1 if ak else 0\n        idx -= 1\n    ans[0] = 1 if k else 0\n    print(*ans)\n    return\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = sum(l)\n    ones = s // n\n    rem = [0 for i in range(n)]\n    curr = 0\n    sol = [0 for i in range(n)]\n    for i in range(n - 1, -1, -1):\n        curr -= rem[i]\n        if ones:\n            curr += 1\n            if i - ones >= 0:\n                rem[i - ones] += 1\n        l[i] -= curr\n        if l[i] == i and ones:\n            sol[i] = 1\n            ones -= 1\n    print(*sol)", "for i in range(int(input())):\n    n = int(input())\n    dat = list(map(int, input().split()))\n    s = sum(dat)\n    num = s // n\n    nul = [0 for i in range(n)]\n    c = 0\n    rs = [0 for i in range(n)]\n    for i in range(n - 1, -1, -1):\n        c -= nul[i]\n        if num:\n            c += 1\n            if i - num >= 0:\n                nul[i - num] += 1\n        dat[i] -= c\n        if dat[i] == i and num:\n            rs[i] = 1\n            num -= 1\n    print(*rs)", "import queue\n\ndef solve(bits):\n    ones_encountered = 0\n    depth = 0\n    next_zeros = queue.Queue()\n    answer = []\n    for (pos, sum) in enumerate(bits):\n        if sum == 0:\n            answer.append(0)\n        elif ones_encountered == 0:\n            answer.append(1)\n            ones_encountered += 1\n            depth = sum\n            next_zeros.put(depth)\n            next_zero = next_zeros.get()\n        elif pos < next_zero:\n            answer.append(1)\n            ones_encountered += 1\n            depth = sum\n            next_zeros.put(depth)\n        else:\n            answer.append(0)\n            depth = pos + sum\n            next_zeros.put(depth)\n            next_zero = next_zeros.get()\n    return ' '.join(list(map(str, answer)))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    bits = list(map(int, input().split()))\n    print(solve(bits))"]