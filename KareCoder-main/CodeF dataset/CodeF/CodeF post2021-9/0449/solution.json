["def reversePairs(nums) -> int:\n    ans = 0\n\n    def getReverse(lst):\n        nonlocal ans\n        if len(lst) < 2:\n            return lst\n        half = len(lst) // 2\n        half_ = len(lst) - len(lst) // 2\n        (first_half, second_half) = (getReverse(lst[:half]), getReverse(lst[half:]))\n        lst = []\n        i1 = 0\n        i2 = 0\n        while i1 < half or i2 < half_:\n            if i1 == half:\n                lst += second_half[i2:]\n                break\n            if i2 == half_:\n                lst += first_half[i1:]\n                ans += (half - i1) * i2\n                break\n            if first_half[i1] <= second_half[i2]:\n                lst.append(first_half[i1])\n                i1 += 1\n                ans += i2\n            else:\n                lst.append(second_half[i2])\n                i2 += 1\n        return lst\n    getReverse(nums)\n    return ans\nfrom collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = [int(x) for x in input().split()]\n    tmp_lst = []\n    d = defaultdict(int)\n    for num in nums:\n        d[num] -= 1\n        tmp_lst.append((num, d[num]))\n    print(reversePairs(tmp_lst))", "def getsum(BITTree, i):\n    s = 0\n    i = i + 1\n    while i > 0:\n        s += BITTree[i]\n        i -= i & -i\n    return s\n\ndef updatebit(BITTree, n, i, v):\n    i += 1\n    while i <= n:\n        BITTree[i] += v\n        i += i & -i\n\ndef construct(arr, n):\n    BITTree = [0] * (n + 1)\n    for i in range(n):\n        updatebit(BITTree, n, i, arr[i])\n    return BITTree\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    ar = [0] * (n + 2)\n    tree = construct(ar, n + 1)\n    ans = 0\n    for i in range(n):\n        above = i + 1\n        below = arr[i]\n        ans += i - getsum(tree, below - 1)\n        updatebit(tree, n + 1, below, 1)\n    print(ans)", "from heapq import heappush, heappop\nfrom bisect import bisect, insort\n\ndef getNumOfInversions(A):\n    N = len(A)\n    if N <= 1:\n        return 0\n    sortList = []\n    result = 0\n    for (i, v) in enumerate(A):\n        heappush(sortList, (v, i))\n    x = []\n    while sortList:\n        (v, i) = heappop(sortList)\n        y = bisect(x, i)\n        result += i - y\n        insort(x, i)\n    return result\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = getNumOfInversions(a)\n    fr = {}\n    for i in range(n):\n        if a[i] in fr.keys():\n            fr[a[i]] += 1\n        else:\n            fr[a[i]] = 1\n    for i in fr.keys():\n        ans += fr[i] * (fr[i] - 1) // 2\n    print(ans)", "import sys\nimport bisect\n\ndef solve():\n    inp = sys.stdin.readline\n    n = int(inp())\n    a = list(map(int, inp().split()))\n    F = [0] * n\n    ans = 0\n    for i in range(n):\n        x = n - a[i]\n        while x >= 0:\n            ans += F[x]\n            x = (x + 1 & x) - 1\n        x = n - a[i]\n        while x < n:\n            F[x] += 1\n            x = x | x + 1\n    print(ans)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "def getint():\n    return [int(i) for i in input().split()]\n\ndef get():\n    return int(input())\n\ndef getstr():\n    return [i for i in input().split()]\n\ndef S():\n    for test in range(int(input())):\n        solve()\nimport math\nimport itertools as it\nimport bisect\nimport time\nimport collections as ct\n\ndef lower_bound(a, x):\n    l = -1\n    r = len(a)\n    while l + 1 != r:\n        mid = l + r >> 1\n        if a[mid] < x:\n            l = mid\n        else:\n            r = mid\n    return r\n\ndef upper_bound(a, x):\n    l = -1\n    r = len(a)\n    while l + 1 != r:\n        mid = l + r >> 1\n        if a[mid] <= x:\n            l = mid\n        else:\n            r = mid\n    return r\n\ndef solve():\n    n = get()\n    a = getint()\n\n    def merge_sort(l, r):\n        if l >= r:\n            return 0\n        mid = l + r >> 1\n        res = merge_sort(l, mid) + merge_sort(mid + 1, r)\n        i = l\n        j = mid + 1\n        tmp = []\n        k = 0\n        while i <= mid and j <= r:\n            if a[i] < a[j]:\n                tmp.append(a[i])\n                i += 1\n            else:\n                tmp.append(a[j])\n                res += mid - i + 1\n                j += 1\n        while i <= mid:\n            tmp.append(a[i])\n            i += 1\n        while j <= r:\n            tmp.append(a[j])\n            j += 1\n        j = 0\n        for i in range(l, r + 1):\n            a[i] = tmp[j]\n            j += 1\n        return res\n    print(merge_sort(0, n - 1))\nS()", "import bisect\nfor loop in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    (l, count) = ([], 0)\n    for i in range(n):\n        x = bisect.bisect_left(l, a[i])\n        count += len(l) - x\n        bisect.insort(l, a[i])\n    print(count)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef foo(n, arr):\n    cross = 0\n    if n <= 1:\n        return 0\n    mid = n // 2\n    l = arr[:mid]\n    r = arr[mid:]\n    cross += foo(len(l), l) + foo(len(r), r)\n    i = j = k = 0\n    while i < len(l) and j < len(r):\n        if l[i] < r[j]:\n            arr[k] = l[i]\n            i += 1\n        else:\n            arr[k] = r[j]\n            j += 1\n            cross += len(l) - i\n        k += 1\n    while i < len(l):\n        arr[k] = l[i]\n        i += 1\n        k += 1\n    while j < len(r):\n        arr[k] = r[j]\n        j += 1\n        k += 1\n    return cross\nnum = inp()\nfor i in range(num):\n    line1 = inp()\n    line2 = inlt()\n    print(foo(line1, line2))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 0\n    for (i, j) in enumerate(a):\n        cnt += sum([1 for v in a[i + 1:] if v <= j])\n    print(cnt)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 0\n    for (i, j) in enumerate(a):\n        cnt += sum([1 for v in a[i + 1:] if v <= j])\n    print(cnt)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 0\n    for (i, j) in enumerate(a):\n        cnt += sum([1 for v in a[i + 1:] if v <= j])\n    print(cnt)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 0\n    for (i, j) in enumerate(a):\n        cnt += sum([1 for v in a[i + 1:] if v <= j])\n    print(cnt)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 0\n    for (i, j) in enumerate(a):\n        cnt += sum([1 for v in a[i + 1:] if v <= j])\n    print(cnt)", "t = int(input())\nout = ''\nfor _ in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    passed = []\n    ans = 0\n    for x in arr:\n        i = 0\n        for i in range(len(passed)):\n            if passed[i] >= x:\n                break\n        else:\n            i += 1\n        ans += len(passed) - i\n        if i > len(passed):\n            ans += 1\n            passed.append(x)\n        else:\n            passed.insert(i, x)\n    out += str(ans) + '\\n'\nprint(out)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 0\n    for (i, j) in enumerate(a):\n        cnt += sum([1 for v in a[i + 1:] if v <= j])\n    print(cnt)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans += len(list(filter(lambda x: x >= a[i], a[:i])))\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans += len(list(filter(lambda x: x >= a[i], a[:i])))\n    print(ans)", "import collections\nfrom math import ceil, gcd, sqrt, log\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        to = A[i]\n        for j in range(i):\n            if A[j] >= to:\n                count += 1\n    print(count)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "class Solution:\n\n    def solve(self, a, n):\n        if len(a) == 1:\n            return 0\n        count = 0\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if a[i] >= a[j]:\n                    count += 1\n        return count\nT = int(input())\nwhile T:\n    T -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    result = Solution().solve(a, n)\n    print(result)", "def main():\n    t = int(input())\n    for k in range(t):\n        n = int(input())\n        read = list(map(int, input().strip().split()))[:n]\n        ans = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if read[i] >= read[j]:\n                    ans += 1\n        print(ans)\nmain()", "def solution(content, n):\n    a = list(zip(range(1, n + 1), content))\n    a.sort(key=lambda x: (x[1], -x[0]))\n    result = 0\n    for (i, (source, dest)) in enumerate(a):\n        j = i - 1\n        while j >= 0:\n            (s, d) = a[j]\n            if s > source or d == dest:\n                result += 1\n            j -= 1\n    print(result)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    content = [int(i) for i in input().split()]\n    solution(content, n)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    crossings = 0\n    for (i, item) in enumerate(a):\n        for (j, _item) in enumerate(a[i + 1:]):\n            if _item <= item:\n                crossings += 1\n    print(crossings)", "def solve():\n    terminal_size = int(input())\n    connections = list(map(int, input().split(' ')))\n    rtn = 0\n    for i in range(len(connections)):\n        for j in range(i + 1, len(connections)):\n            if connections[j] <= connections[i]:\n                rtn += 1\n    print(rtn)\nfor _ in range(int(input())):\n    solve()", "import sys, collections\ninput = sys.stdin.readline\n\ndef solve(A):\n    mapping = collections.defaultdict(list)\n    for (i, val) in enumerate(A):\n        mapping[val].append(i)\n    aggregation = sorted(mapping.keys())\n    ans = 0\n    for (i, val) in enumerate(aggregation):\n        ans += (len(mapping[val]) - 1) * len(mapping[val]) // 2\n        for curr in mapping[val]:\n            for j in range(i + 1, len(aggregation)):\n                for x in mapping[aggregation[j]]:\n                    if curr > x:\n                        ans += 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    print(solve(A))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    output = 0\n    for i in range(n - 1):\n        cur = arr[i]\n        for j in range(i + 1, n):\n            if arr[j] <= cur:\n                output += 1\n    print(output)", "t = int(input())\nfor nabor in range(t):\n    n = int(input())\n    arr = tuple(map(int, input().split()))\n    counts = {}\n    count = 0\n    for i in arr:\n        for (k, v) in counts.items():\n            if k >= i:\n                count += v\n        try:\n            counts[i] += 1\n        except KeyError:\n            counts[i] = 1\n    print(count)", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_ls():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        ls = get_ls()\n        ans = 0\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if ls[i] >= ls[j]:\n                    ans += 1\n        print(ans)\nmain()", "_ = int(input())\nfor __ in range(_):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    out = 0\n    for x in range(0, n - 1):\n        a = arr[x]\n        for y in range(x + 1, n):\n            if arr[y] <= a:\n                out += 1\n    print(out)", "for j in range(int(input())):\n    n = int(input())\n    s = [int(i) for i in input().split()]\n    count = 0\n    for i in range(n - 1):\n        x = s[i]\n        for j in range(i + 1, n):\n            if s[j] <= x:\n                count += 1\n    print(count)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = tuple(map(int, input().split()))\n    ans = 0\n    for (i, n) in enumerate(a):\n        for j in range(i + 1, len(a)):\n            if a[j] < n:\n                ans += 1\n    h = Counter(a)\n    for count in h.values():\n        count -= 1\n        ans += count * (count + 1) // 2\n    print(ans)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] <= a[i]:\n                count += 1\n    print(count)", "i = int(input())\nfor u in range(i):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    s = 0\n    for i in range(n - 1):\n        x = arr[i]\n        for j in range(i + 1, n):\n            if arr[j] <= x:\n                s += 1\n    print(s)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        p = 0\n        for j in range(i):\n            if a[j] >= a[i]:\n                p += 1\n        ans += p\n    print(ans)", "from sys import stdin, stdout, setrecursionlimit\nimport collections\nimport math\n\ndef solve():\n    return 0\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        l = list(map(int, input().split()))\n        ans = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if l[i] >= l[j]:\n                    ans += 1\n        print(ans)\n    return\nsetrecursionlimit(10 ** 9)\ninput = stdin.readline\nmain()", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    numbers = [int(num) for num in input().split(' ', n - 1)]\n    sum = 0\n    for i in range(1, len(numbers)):\n        for j in range(i):\n            if numbers[i] <= numbers[j]:\n                sum = sum + 1\n    print(sum)\n    t = t - 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    array = list(map(int, input().split()))\n    count = 0\n    for i in range(len(array)):\n        for x in range(i + 1, len(array)):\n            if array[i] >= array[x]:\n                count += 1\n    print(count)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    for i in range(n - 1):\n        prev = a[i]\n        for j in range(i + 1, n):\n            cur = a[j]\n            if cur <= prev:\n                ans += 1\n    print(ans)", "ta = int(input())\nwhile ta > 0:\n    n = int(input())\n    numbers = [int(num) for num in input().split(' ', n - 1)]\n    sum = 0\n    for i in range(1, len(numbers)):\n        for j in range(i):\n            if numbers[i] <= numbers[j]:\n                sum = sum + 1\n    print(sum)\n    ta = ta - 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for j in range(n - 1):\n        for k in range(j + 1, n):\n            if a[j] >= a[k]:\n                count += 1\n    print(count)", "t = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] >= arr[j]:\n                ans += 1\n    print(ans)\n    t -= 1", "t = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] >= arr[j]:\n                count += 1\n    print(count)\n    t -= 1", "for p in range(int(input())):\n    n = int(input())\n    r = 0\n    a = list(map(int, input().split()))\n    for i in range(len(a)):\n        for j in range(i):\n            if a[j] >= a[i]:\n                r += 1\n    print(r)", "for p in range(int(input())):\n    n = int(input())\n    r = 0\n    a = list(map(int, input().split()))\n    for i in range(len(a)):\n        for j in range(i):\n            if a[j] >= a[i]:\n                r += 1\n    print(r)", "import sys\ninput = sys.stdin.readline\n\ndef print(x):\n    sys.stdout.write(str(x) + '\\n')\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    for j in range(n):\n        for k in range(j + 1, n):\n            if a[j] >= a[k]:\n                s += 1\n    print(s)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = [int(x) for x in input().split()]\n    t = 0\n    for (idx, num) in enumerate(nums):\n        for i in range(idx + 1, n):\n            new_num = nums[i]\n            if new_num <= num:\n                t += 1\n    print(t)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if a[j] <= a[i]:\n                cnt += 1\n    print(cnt)", "import collections, sys\nsys.setrecursionlimit(10 ** 6)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] <= a[i]:\n                ans += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    num = 0\n    for j in range(len(a)):\n        for k in range(j + 1, len(a), 1):\n            if a[j] >= a[k]:\n                num += 1\n    print(num)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    for i in range(n):\n        for j in range(i):\n            if a[j] >= a[i]:\n                ans += 1\n    print(ans)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] <= a[i]:\n                count += 1\n    print(count)", "for p in range(int(input())):\n    n = int(input())\n    r = 0\n    a = list(map(int, input().split()))\n    for i in range(len(a)):\n        for j in range(i):\n            if a[j] >= a[i]:\n                r += 1\n    print(r)", "for p in range(int(input())):\n    n = int(input())\n    r = 0\n    a = list(map(int, input().split()))\n    for i in range(len(a)):\n        for j in range(i):\n            if a[j] >= a[i]:\n                r += 1\n    print(r)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if l[i] >= l[j]:\n                ans += 1\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    wire = list(map(int, input().split()))\n    ans = 0\n    for j in range(n):\n        for k in range(j):\n            if wire[k] >= wire[j]:\n                ans += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    s = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if a[j] <= a[i]:\n                s += 1\n    print(s)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    inv = 0\n    for alpha in range(n):\n        for beta in range(alpha + 1, n):\n            if a[beta] <= a[alpha]:\n                inv += 1\n    print(inv)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    sum = 0\n    for j in range(n):\n        for s in range(j + 1, n):\n            if a[j] >= a[s]:\n                sum += 1\n    print(sum)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i):\n            if a[i] <= a[j]:\n                count += 1\n    print(count)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] <= arr[i]:\n                res += 1\n    print(res)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    num = 0\n    for j in range(len(a)):\n        for k in range(j + 1, len(a), 1):\n            if a[j] >= a[k]:\n                num += 1\n    print(num)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] >= a[j]:\n                ans += 1\n    print(ans)", "from collections import Counter\nfrom re import L\nimport sys\nfor _ in range(int(input())):\n    N = int(input())\n    dest = list(map(int, input().split()))\n    dest_dict = Counter(dest)\n    ans = 0\n    prep = [0 for i in range(N)]\n    for i in dest_dict:\n        ans += dest_dict[i] * (dest_dict[i] - 1) // 2\n    for i in range(N):\n        curr = dest[i]\n        for j in range(i + 1, N):\n            if dest[j] < curr:\n                ans += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = [0] + list(map(int, input().split(' ')))\n    x = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if lst[i] >= lst[j]:\n                x += 1\n    print(x)", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    rj = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] >= a[j]:\n                rj += 1\n    print(rj)", "t = int(input())\nout = ''\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) - 1 for x in input().split()]\n    count = [0] * n\n    ans = 0\n    for x in a:\n        ans += count[x]\n        for i in range(x + 1):\n            count[i] += 1\n    out += str(ans) + '\\n'\nprint(out)", "x = int(input())\nfor i in range(x):\n    n = int(input())\n    a = list(map(int, input().split()))\n    num = 0\n    for j in range(len(a)):\n        for k in range(j + 1, len(a), 1):\n            if a[j] >= a[k]:\n                num += 1\n    print(num)", "t = int(input())\nfor z in range(t):\n    n = int(input())\n    l = [int(i) for i in input().split(' ')]\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if l[i] >= l[j]:\n                count += 1\n    print(count)", "for tc in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i):\n            if arr[i] <= arr[j]:\n                ans += 1\n    print(ans)", "for p in range(int(input())):\n    n = int(input())\n    r = 0\n    a = list(map(int, input().split()))\n    for i in range(len(a)):\n        for j in range(i):\n            if a[j] >= a[i]:\n                r += 1\n    print(r)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] >= a[j]:\n                ans += 1\n    print(ans)", "from collections import defaultdict\nimport math\nfor cases in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if l[i] >= l[j]:\n                ans += 1\n    print(ans)", "import math\nimport os\nimport random\nimport re\nimport sys\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[j] <= arr[i]:\n                count += 1\n    print(count)", "cases = int(input())\nc = []\nfor i in range(cases):\n    n = int(input())\n    c.append(list(map(int, input().strip().split())))\npairs = []\nDict = {}\nfor i in c:\n    for j in range(1, len(i) + 1):\n        Dict[j] = i[j - 1]\n    pairs.append(Dict)\n    Dict = {}\nfor d in pairs:\n    count = 0\n    for i in range(1, len(list(d.keys())) + 1):\n        for j in range(i + 1, len(list(d.keys())) + 1):\n            if d[j] <= d[i]:\n                count += 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    collcount = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if l[j] <= l[i]:\n                collcount += 1\n    print(collcount)", "import sys\nsys.setrecursionlimit(10 ** 6)\n\nclass TreeNode:\n\n    def __init__(self, val, col):\n        self.val = val\n        self.col = col\n        self.ch = []\n\n    def inord(self):\n        print(self.val)\n        for c in self.ch:\n            c.inord()\n\ndef balcnt(root):\n    if root == None:\n        return [0, 0]\n    allw = 0\n    allb = 0\n    for c in root.ch:\n        (w, b) = balcnt(c)\n        allw += w\n        allb += b\n    if root.col == 0:\n        allw += 1\n    else:\n        allb += 1\n    if allw == allb:\n        cnt[0] += 1\n    return [allw, allb]\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[j] <= a[i]:\n                cnt += 1\n    print(cnt)", "for t in range(int(input())):\n    n = int(input())\n    ans = list(map(int, input().split(' ')))\n    result = [0 for _ in range(n)]\n    result[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            if ans[j] >= ans[i]:\n                result[i] += 1\n    print(sum(result))", "def fun(n, l):\n    res = 0\n    j = 0\n    for i in range(1, n):\n        k = i\n        while l[i] <= l[j] and j >= 0:\n            (l[j], l[i]) = (l[i], l[j])\n            (i, j) = (j, j - 1)\n            res += 1\n        j = k\n    return res\nN = int(input())\nfor i in range(N):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(fun(n, l))", "N = int(input())\nfor _ in range(N):\n    n = int(input())\n    a = map(int, input().split())\n    c = list(zip(range(1, n + 1), a))\n    res = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if c[j][1] <= c[i][1]:\n                res += 1\n    print(res)", "cases = int(input())\nwhile cases:\n    count = 0\n    cases -= 1\n    n = int(input())\n    arr = list(map(int, input().split()))\n    i = 0\n    while i < len(arr):\n        j = i + 1\n        while j < len(arr):\n            if arr[i] >= arr[j]:\n                count += 1\n            j += 1\n        i += 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            (f1, t1) = (i + 1, a[i])\n            (f2, t2) = (j + 1, a[j])\n            if f1 > f2:\n                if t1 <= t2:\n                    ans += 1\n            elif t2 <= t1:\n                ans += 1\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                if i <= j and a[i] >= a[j] or (i >= j and a[i] <= a[j]):\n                    count += 1\n    print(count // 2)", "for case in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    res = 0\n    for i in range(n):\n        top = i + 1\n        bot = arr[i]\n        for j in range(n):\n            if i == j:\n                continue\n            tempTop = j + 1\n            tempBot = arr[j]\n            if tempTop <= top and tempBot >= bot:\n                res += 1\n                continue\n            if tempTop >= top and tempBot <= bot:\n                res += 1\n                continue\n    print(res // 2)"]