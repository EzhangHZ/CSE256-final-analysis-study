["lst = []\nfor _ in [*open(0)][1:]:\n    (l, r, a) = map(int, _.split())\n    print(max(r // a + r % a, (r - r % a - 1) // a + (r - r % a - 1) % a if r - r % a - 1 >= l else 0))", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (l, r, a) = map(int, input().split())\n    (ld, lm) = (l // a, l % a)\n    (rd, rm) = (r // a, r % a)\n    if ld < rd:\n        ans = max(rd - 1 + a - 1, rd + rm)\n    else:\n        ans = rd + rm\n    print(ans)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor i in range(t):\n    (l, r, a) = map(int, input().split())\n    ans = r // a + r % a\n    if l <= r // a * a - 1:\n        ans1 = r // a - 1 + a - 1\n        if ans1 > ans:\n            ans = ans1\n    print(ans)", "import sys\nimport bisect\ninp = sys.stdin.readline\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(inp())):\n    (l, r, a) = map(int, inp().split())\n    lm = r // a * a - 1\n    ans = r // a + r % a\n    if lm >= l:\n        ans = max(ans, lm // a + lm % a)\n    print(ans)", "from math import floor\nfrom sys import stdin\ninput = stdin.readline\n\ndef main():\n    for _ in range(int(input())):\n        (l, r, a) = map(int, input().split())\n        rem = r % a\n        if l // a == r // a:\n            print(r // a + r % a)\n        else:\n            print(max(r // a + r % a, r // a + a - 2))\nmain()", "for line in [*open(0)][1:]:\n    (l, r, a) = map(int, line.split())\n    print(max(r // a + r % a, (r - 1 - r % a) // a + (r - 1 - r % a) % a if r - 1 - r % a >= l else 0))", "from math import floor\nfrom sys import stdin\ninput = stdin.readline\n\ndef main():\n    for _ in range(int(input())):\n        (l, r, a) = map(int, input().split())\n        rem = r % a\n        if l // a == r // a:\n            print(r // a + r % a)\n        else:\n            print(max(r // a + r % a, r // a + a - 2))\nmain()", "f = 0\nresults = []\nn = int(input())\nfor i in range(n):\n    (x, y, z) = map(int, input().split())\n    if x // z == y // z:\n        results.append(y // z + y % z)\n    elif y % z < z - 1:\n        f = max(y // z + y % z, y // z + z - 2)\n        results.append(f)\n    else:\n        results.append(y // z + y % z)\nfor i in results:\n    print(i)", "import sys\nt = int(sys.stdin.readline().strip())\nfor _ in range(t):\n    (l, r, a) = list(map(int, sys.stdin.readline().split()))\n    (lz, lm) = (l // a, l % a)\n    (rz, rm) = (r // a, r % a)\n    if lz == rz:\n        print(max(lm, rm) + lz)\n    else:\n        print(max(rz - 1 + a - 1, rz + rm))", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef main():\n    test = inp()\n    for _ in range(test):\n        (left, right, a) = inlt()\n        result = right // a + right % a\n        if right % a < right - left:\n            result = max(result, result - 1 - right % a + a - 1)\n        print(result)\nmain()", "ans = ''\nnum = int(input())\nfor i in range(num):\n    (div_min, div_max, n) = map(int, input().split())\n    if div_min > div_max - div_max % n - 1:\n        ans += f'{div_max // n + div_max % n}\\n'\n    elif div_max // n + div_max % n > (div_max - div_max % n - 1) // n + (div_max - div_max % n - 1) % n:\n        ans += f'{div_max // n + div_max % n}\\n'\n    else:\n        ans += f'{(div_max - div_max % n - 1) // n + (div_max - div_max % n - 1) % n}\\n'\nprint(ans)", "t = int(input())\nil = []\nfor i in range(0, t):\n    (l, r, a) = map(int, input().split())\n    if l <= r - r % a - 1:\n        il.append(max(r // a + r % a, a - 1 + (r - r % a - 1) // a))\n    else:\n        il.append(max(r // a + r % a, l // a + l % a))\nfor x in il:\n    print(x)", "import sys\ncase = int(sys.stdin.readline())\nfor c in range(case):\n    (start, end, num) = map(int, sys.stdin.readline().split())\n    end_quotient = end // num\n    target_num = end_quotient * num\n    target_two_num = (end_quotient + 1) * num - 1\n    if start < target_num and end != target_two_num:\n        print(end // num - 1 + (num - 1))\n    else:\n        print(end // num + end % num)", "def divmod(l, r, a):\n    if l == r:\n        x = r\n        return x / a // 1 + x % a\n    ost = r % a\n    if ost == a - 1:\n        x = r\n        return x / a // 1 + x % a\n    temp = r\n    x = r - ost - 1\n    if x / a // 1 + x % a > temp / a // 1 + temp % a and (x >= l and x <= r):\n        return x / a // 1 + x % a\n    else:\n        return temp / a // 1 + temp % a\nans = []\nn = int(input())\nfor i in range(n):\n    (l, r, a) = map(int, input().split())\n    ans.append(divmod(l, r, a))\nfor i in range(len(ans)):\n    print(int(ans[i]))", "from math import floor\nt = int(input())\nresult = []\nfor i1 in range(t):\n    in1 = input().split()\n    (l, r, a) = (int(in1[0]), int(in1[1]), int(in1[2]))\n    if a == 1:\n        result.append(r)\n    else:\n        req_num = floor((r + 1) / a) * a - 1\n        if req_num >= l:\n            result.append(floor(req_num / a) + req_num % a)\n        else:\n            result.append(floor(r / a) + r % a)\nfor i2 in result:\n    print(i2)", "from sys import stdin\ninput = stdin.readline\n\ndef fa(x, a):\n    return x // a + x % a\nfor _ in range(int(input())):\n    (l, r, a) = map(int, input().split())\n    print(max(fa(r, a), fa(max(r - r % a - 1, l), a)))", "import sys\na = int(sys.stdin.readline())\nfor i in range(a):\n    (p, q, r) = map(int, sys.stdin.readline().strip().split())\n    temp = q // r * r - 1\n    if temp < p:\n        sys.stdout.write(str(q // r + q % r) + '\\n')\n    else:\n        m = temp // r + temp % r\n        m = max(m, q // r + q % r)\n        sys.stdout.write(str(m) + '\\n')", "t = int(input())\nresult = []\nfor case in range(t):\n    (l, r, a) = map(int, input().split())\n    result.append(max(r // a + r % a, (r - r % a - 1) // a + (r - r % a - 1) % a if r - r % a - 1 >= l else 0))\nfor y in result:\n    print(y)", "k = []\nfor i in range(int(input())):\n    (l, r, a) = map(int, input().split())\n    max_value = r // a + r % a\n    if l < r // a * a:\n        prev_max_value = r // a - 1 + (a - 1)\n    else:\n        prev_max_value = max_value\n    s = max(max_value, prev_max_value)\n    k.append(s)\nfor t in k:\n    print(t)", "import sys\nt = int(sys.stdin.readline())\nfor k in range(0, t):\n    [l, r, a] = map(int, sys.stdin.readline().split())\n    if int(l / a) == int(r / a):\n        sys.stdout.write(str(int(r / a) + r % a) + '\\n')\n    else:\n        f1 = int(l / a) + l % a\n        f2 = int(r / a) + r % a\n        f3 = int(r / a) + a - 2\n        sys.stdout.write(str(max([f1, f2, f3])) + '\\n')", "for _ in [*open(0)][1:]:\n    (l, r, a) = map(int, _.split())\n    print(max(r // a + r % a, (r - r % a - 1) // a + (r - r % a - 1) % a if r - r % a - 1 >= l else 0))", "for _ in [*open(0)][1:]:\n    (l, r, a) = map(int, _.split())\n    print(max(r // a + r % a, (r - r % a - 1) // a + (r - r % a - 1) % a if r - r % a - 1 >= l else 0))", "nu = int(input())\nm = [0 for i in range(nu)]\nfor i in range(nu):\n    (l, r, a) = map(int, input().split())\n    if l // a <= r // a - 1:\n        m[i] = max(r // a - 1 + a - 1, r // a + r % a)\n    else:\n        m[i] = r // a + r % a\nfor i in m:\n    print(i)", "R = lambda : map(int, input().split())\nL = lambda line: map(int, line.split())\nfor line in [*open(0)][1:]:\n    (l, r, a) = L(line)\n    x = r - 1 - r % a\n    c2 = x // a + x % a if x >= l else 0\n    print(max(r // a + r % a, c2))", "R = lambda : map(int, input().split())\nL = lambda line: map(int, line.split())\nfor line in [*open(0)][1:]:\n    (l, r, a) = L(line)\n    c2 = (r - 1 - r % a) // a + (r - 1 - r % a) % a if r - 1 - r % a >= l else 0\n    print(max(r // a + r % a, c2))", "for _ in [*open(0)][1:]:\n    (l, r, a) = map(int, _.split())\n    print(max(r // a + r % a, (r - r % a - 1) // a + (r - r % a - 1) % a if r - r % a - 1 >= l else 0))", "for _ in [*open(0)][1:]:\n    (l, r, a) = map(int, _.split())\n    print(max(r // a + r % a, (r - r % a - 1) // a + (r - r % a - 1) % a if r - r % a - 1 >= l else 0))", "for _ in [*open(0)][1:]:\n    (l, r, a) = map(int, _.split())\n    print(max(r // a + r % a, (r - r % a - 1) // a + (r - r % a - 1) % a if r - r % a - 1 >= l else 0))", "for _ in [*open(0)][1:]:\n    (l, r, a) = map(int, _.split())\n    print(max(r // a + r % a, (r - r % a - 1) // a + (r - r % a - 1) % a if r - r % a - 1 >= l else 0))", "import sys\ninput = sys.stdin.readline\n\ndef ii():\n    return int(input())\n\ndef iit():\n    return map(int, input().split())\n\ndef iil():\n    return list(map(int, input().split()))\n\ndef si():\n    return input()[:-1]\n\ndef solve():\n    (l, r, a) = iit()\n    f1 = l // a\n    f2 = r // a\n    ans = f2 + r % a\n    if f1 < f2:\n        ans = max(ans, f2 - 1 + a - 1)\n    print(ans)\nt = ii()\nfor i in range(t):\n    solve()", "for _ in [*open(0)][1:]:\n    (l, r, a) = map(int, _.split())\n    print(max(r // a + r % a, (r - r % a - 1) // a + (r - r % a - 1) % a if r - r % a - 1 >= l else 0))", "for _ in [*open(0)][1:]:\n    (l, r, a) = map(int, _.split())\n    print(max(r // a + r % a, (r - r % a - 1) // a + (r - r % a - 1) % a if r - r % a - 1 >= l else 0))", "import sys\ninput = sys.stdin.readline\noutput = []\n\ndef main():\n    for _ in range(int(input())):\n        (l, r, a) = map(int, input().split())\n        if a == 1 or a > r:\n            f = r\n        elif r % a == 0:\n            x = max(l, r - 1)\n            f = x // a + x % a\n        elif l < a < r:\n            f = max(r // a + r % a, max(r // a - 1, l // a) + a - 1)\n        elif a < l < r:\n            (la, ra) = (l // a, r // a)\n            f = max(ra + r % a, ra + a - 2 if la < ra else 0)\n        else:\n            f = max(map(lambda x: x // a + x % a, range(max(l, r - 1 - r % a), r + 1)))\n        output.append(f)\n    print(*output, sep='\\n')\nmain()", "for _ in [*open(0)][1:]:\n    (l, r, a) = map(int, _.split())\n    print(max(r // a + r % a, (r - r % a - 1) // a + (r - r % a - 1) % a if r - r % a - 1 >= l else 0))", "for _ in [*open(0)][1:]:\n    (l, r, a) = map(int, _.split())\n    print(max(r // a + r % a, (r - r % a - 1) // a + (r - r % a - 1) % a if r - r % a - 1 >= l else 0))", "def fn(i, j, a):\n    f1 = j // a\n    r1 = j % a\n    f2 = 0\n    r2 = 0\n    if f1 * a - 1 >= i:\n        f2 = f1 - 1\n        r2 = a - 1\n    return max(f1 + r1, f2 + r2)\na = int(input())\nk = []\nfor i in range(a):\n    b = input().split()\n    b = [int(o) for o in b]\n    k.append(fn(b[0], b[1], b[2]))\nfor g in k:\n    print(g)", "def f(x, a):\n    res = x // a + x % a\n    return res\n\ndef DIV_MOD(l, r, a):\n    res = f(r, a)\n    if l // a < r // a:\n        if res > r // a - 1 + (a - 1):\n            return res\n        else:\n            res = f(r // a * a - 1, a)\n            return res\n    else:\n        return res\nt = int(input())\nfinal = []\nfor i in range(t):\n    (l, r, a) = input().split()\n    (l, r, a) = (int(l), int(r), int(a))\n    res = DIV_MOD(l, r, a)\n    final.append(res)\nfor i in final:\n    print(i)", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\nn = int(input())\nfor _ in range(n):\n    (l, r, a) = map(int, input().split())\n    if l == r:\n        print(r // a + r % a)\n    elif r % a == 0:\n        print(max(r // a + r % a, (r - 1) // a + (r - 1) % a))\n    else:\n        k = r // a\n        if k * a - 1 >= l:\n            print(max(k - 1 + a - 1, k + r % a))\n        else:\n            print(max(k + r % a, l // a + l % a))", "import sys\nfrom math import sqrt, gcd, factorial\nfrom collections import deque, Counter, OrderedDict\nsys.setrecursionlimit(10 ** 6)\ninput = lambda : sys.stdin.readline()\nI = lambda : int(input())\nS = lambda : input().strip()\nM = lambda : map(int, input().strip().split())\nL = lambda : list(map(int, input().strip().split()))\nmod = 1000000007\nfor _ in range(I()):\n    (l, r, a) = M()\n    if a == 1:\n        print(r)\n    elif l == r:\n        print(r // a + r - r // a * a)\n    elif r % a == a - 1:\n        print(r // a + a - 1)\n    elif r % a:\n        if a * (r // a) - 1 >= l:\n            print(r // a - 1 + a - 1)\n        else:\n            print(r // a + r - r // a * a)\n    else:\n        r -= 1\n        print(r // a + r - r // a * a)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (l, r, a) = map(int, input().split())\n    n = r // a\n    while a * n + (a - 1) <= r:\n        n += 1\n    if a * (n - 1) + (a - 1) > r:\n        x = r\n    elif a * (n - 1) + (a - 1) < l:\n        x = r\n    else:\n        x = a * (n - 1) + (a - 1)\n    print(x // a + x % a)", "import sys\nimport math\n\ndef f(x):\n    return x // a + x % a\nfor _ in range(int(sys.stdin.readline())):\n    (l, r, a) = map(int, sys.stdin.readline().split())\n    if a == 1:\n        print(r)\n    else:\n        e = r % a\n        if e == a - 1:\n            x = r\n            print(f(x))\n        elif r // a > l // a:\n            x = r // a * a - 1\n            print(f(x))\n        else:\n            x = r\n            print(f(x))", "answer = ''\n\ndef func(x, a):\n    return int(x / a) + x % a\n\ndef evalCase(l, r, a):\n    l = int(l)\n    r = int(r)\n    a = int(a)\n    x3 = a * int(r / a) - 1\n    ans3 = func(x3, a)\n    if x3 < l:\n        ans3 = -1\n    ans1 = func(r, a)\n    ans2 = ans1\n    if r - 1 >= l:\n        ans2 = func(r - 1, a)\n    ans = ans1\n    if ans2 > ans:\n        ans = ans2\n    if ans3 > ans:\n        ans = ans3\n    return ans\nnumCases = int(input())\nfor i in range(numCases):\n    answer += str(evalCase(*input().split(' '))) + '\\n'\nprint(answer.strip('\\n'))", "import sys\ninput = sys.stdin.readline\nprint = sys.stdout.write\n\ndef main():\n    g = int(input())\n    for i in range(g):\n        (a, b, c) = map(int, input().split())\n        if b % c == 0:\n            if c != 1:\n                if b - 1 >= a:\n                    print(f'{b // c - 2 + c}\\n')\n                else:\n                    print(f'{b // c}\\n')\n            else:\n                print(f'{b}\\n')\n        elif b // c - 2 + c > b // c + b % c and b // c * c - 1 >= a:\n            print(f'{b // c - 2 + c}\\n')\n        else:\n            print(f'{b // c + b % c}\\n')\nmain()", "import sys\nTC = int(input())\nfor i in range(TC):\n    (a, b, K) = list(map(int, sys.stdin.readline().split(' ')))\n    aDiv = a // K\n    aHold = a % K\n    bDiv = b // K\n    bHold = b % K\n    if aDiv == bDiv:\n        print(bDiv + bHold)\n    else:\n        print(max(bDiv - 1 + K - 1, bDiv + bHold))", "itr = int(input())\nop = [0] * itr\nfor i in range(itr):\n    (l, r, a) = input().split()\n    l = int(l)\n    r = int(r)\n    a = int(a)\n    if int(l / a) == int(r / a):\n        op[i] = int(r / a) + r % a\n    else:\n        op[i] = max(int(r / a) + r % a, int(r / a - 1) + a - 1)\nprint(*op, sep='\\n')", "from re import S\nimport sys\n\ndef div_mod():\n    (l, r, a) = [int(x) for x in sys.stdin.readline().strip().split(' ')]\n    lv = (l // a, l % a)\n    rv = (r // a, r % a)\n    if lv[0] < rv[0]:\n        print(max([rv[0] + rv[1], rv[0] - 1 + a - 1]))\n    else:\n        print(rv[0] + rv[1])\n\ndef test():\n    n = int(sys.stdin.readline().strip())\n    for i in range(n):\n        div_mod()\ntest()", "for _ in [*open(0)][1:]:\n    (l, r, a) = map(int, _.split())\n    print(max(r // a + r % a, (r - r % a - 1) // a + (r - r % a - 1) % a if r - r % a - 1 >= l else 0))", "for _ in [*open(0)][1:]:\n    (l, r, a) = map(int, _.split())\n    print(max(r // a + r % a, (r - r % a - 1) // a + (r - r % a - 1) % a if r - r % a - 1 >= l else 0))", "for _ in [*open(0)][1:]:\n    (l, r, a) = map(int, _.split())\n    print(max(r // a + r % a, (r - r % a - 1) // a + (r - r % a - 1) % a if r - r % a - 1 >= l else 0))", "from sys import stdin\ninput = stdin.readline\nt = int(input())\n\ndef solve():\n    (l, r, a) = map(int, input().split())\n    div = r // a\n    maxs = div * a - 1\n    target = maxs\n    if maxs < l or r == maxs + a:\n        target = r\n    res = target // a + target % a\n    return res\nfor _ in range(t):\n    print(solve())", "from sys import stdin\ninput = stdin.readline\nt = int(input())\n\ndef solve():\n    (l, r, a) = map(int, input().split())\n    div = r // a\n    maxs = div * a - 1\n    target = maxs\n    if maxs < l or r == maxs + a:\n        target = r\n    res = target // a + target % a\n    return res\nfor _ in range(t):\n    print(solve())", "from math import *\nfrom sys import stdin, setrecursionlimit\nfrom itertools import *\nfrom collections import *\nlines = stdin.readlines()\nlines.reverse()\nsetrecursionlimit(10 ** 8)\n\ndef input():\n    return lines.pop().strip('\\n')\nt = int(input())\nwhile t:\n    (l, r, a) = map(int, input().split())\n    ans = r // a + r % a\n    val = r - r % a\n    val -= 1\n    if val >= l and val <= r:\n        ans = max(val // a + val % a, ans)\n    print(ans)\n    t -= 1", "from math import *\nfrom sys import stdin, setrecursionlimit\nfrom itertools import *\nfrom collections import *\nsetrecursionlimit(10 ** 8)\nlines = stdin.readlines()\nlines.reverse()\n\ndef input():\n    return lines.pop().strip('\\n')\nt = int(input())\nwhile t:\n    (l, r, a) = map(int, input().split())\n    res = r // a + r % a\n    val = r - r % a - 1\n    if l <= val <= r:\n        res = max(res, val // a + val % a)\n    print(res)\n    t -= 1", "d = int(input())\nlines = []\nfor x in range(d):\n    line = input().split(' ')\n    lines.append(line)\nfor line in lines:\n    l = int(line[0])\n    u = int(line[1])\n    a = int(line[2])\n    p = [u // a + u % a]\n    if u // a - 1 >= l // a:\n        p.append(u // a - 1 + a - 1)\n    print(max(p))", "from sys import stdin, stdout\nfrom collections import defaultdict\ninput = stdin.readline\nt = int(input().strip())\nfor _ in range(t):\n    (l, r, a) = list(map(int, input().strip().split()))\n    if r % a == a - 1:\n        ans = a - 1 + r // a\n        print(ans)\n        continue\n    rem = r % a\n    x = r\n    x = x - rem - 1\n    if x >= l and x <= r:\n        ans = x // a + x % a\n    else:\n        ans = r // a + r % a\n    print(ans)", "import sys\nlinesPerTest = 1\ntestArguments = []\ni = 0\ntotalLines = 1\nwhile i <= totalLines:\n    line = sys.stdin.readline().rstrip('\\n')\n    if i == 0:\n        totalLines = linesPerTest * int(line)\n    else:\n        testArguments.append(line)\n    i += 1\ntestCases = []\nfor j in range(0, len(testArguments), linesPerTest):\n    testCases.append(testArguments[j:j + linesPerTest])\n\ndef f(testArguments):\n    args = testArguments[0].split()\n    (l, r, a) = (int(args[0]), int(args[1]), int(args[2]))\n    g = lambda x: x // a + x % a\n    if r % a == a - 1:\n        return g(r)\n    x = r - (r % a + 1)\n    if x >= l:\n        return g(x)\n    else:\n        return g(r)\nfor testCase in testCases:\n    print(f(testCase))", "n = int(input(''))\nl1 = []\n\ndef mod(l, r, a):\n    max1 = int(r / a) + r % a\n    s = r // a * a - 1\n    if s >= l:\n        max1 = max(max1, int(s / a) + s % a)\n    return max1\nfor i in range(n):\n    (l, r, a) = input().split()\n    l = int(l)\n    r = int(r)\n    a = int(a)\n    l1 += [mod(l, r, a)]\nfor k in l1:\n    print(k)", "import sys\nfrom math import floor, inf\n\ndef inp():\n    return sys.stdin.readline().strip()\n\ndef iinp():\n    return int(inp())\n\ndef mp():\n    return map(int, inp().split())\n\ndef liinp():\n    return list(mp())\n\ndef solve(l, r, x):\n    ans = r // x + r % x\n    m = r // x * x - 1\n    if m >= l:\n        ans = max(ans, m // x + m % x)\n    return ans\ntc = iinp()\nfor _ in range(tc):\n    (l, r, a) = liinp()\n    print(solve(l, r, a))", "n = int(input())\nresult = []\nfor _ in range(n):\n    (a, b, x) = map(int, input().split())\n    if a // x == b // x:\n        result.append(b // x + b % x)\n    else:\n        result.append(max(b // x + b % x, b // x - 1 + x - 1))\nfor re in result:\n    print(re)", "for _ in [*open(0)][1:]:\n    (l, r, a) = map(int, _.split())\n    print(max(r // a + r % a, (r - r % a - 1) // a + (r - r % a - 1) % a if r - r % a - 1 >= l else 0))", "for _ in [*open(0)][1:]:\n    (l, r, a) = map(int, _.split())\n    print(max(r // a + r % a, (r - r % a - 1) // a + (r - r % a - 1) % a if r - r % a - 1 >= l else 0))", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    (l, r, a) = map(int, inp().split())\n    c = r // a + r % a\n    x = (r // a - 1) * a + a - 1\n    if x >= l and x <= r:\n        c = max(c, x // a + x % a)\n    print(c)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "out = []\nfor _ in range(int(input())):\n    (l, r, a) = map(int, input().split())\n    x = r // a * a - 1\n    if x >= l:\n        out.append(max(x // a + x % a, r // a + r % a))\n    else:\n        out.append(r // a + r % a)\nfor i in out:\n    print(i)", "for _ in [*open(0)][1:]:\n    (l, r, a) = map(int, _.split())\n    print(max(r // a + r % a, (r - r % a - 1) // a + (r - r % a - 1) % a if r - r % a - 1 >= l else 0))", "import sys, math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (l, r, a) = map(int, input().split())\n    s = max(sum(divmod(l, a)), sum(divmod(r, a)))\n    g = (math.ceil(r / a) - 1) * a\n    s = max(s, sum(divmod(g, a)))\n    if g - 1 >= l:\n        s = max(s, sum(divmod(g - 1, a)))\n    if r - 1 >= l:\n        s = max(s, sum(divmod(r - 1, a)))\n    print(s)", "t = int(input())\nans = [0] * t\nfor q in range(t):\n    (l, r, a) = map(int, input().split())\n    f = r // a + r % a\n    x = r - r % a - 1\n    if x >= l:\n        if x // a + x % a > f:\n            f = x // a + x % a\n    ans[q] = f\nfor g in range(t):\n    print(ans[g])", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\ntc = int(input())\nwhile tc:\n    (l, r, a) = map(int, input().split())\n    ans = r // a + r % a\n    m = r // a * a - 1\n    if m >= l and m <= r:\n        ans = max(ans, m // a + m % a)\n    print(ans)\n    tc -= 1", "import math\nimport sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef invr():\n    return map(int, input().split())\nt = inp()\nwhile t > 0:\n    (l, r, a) = invr()\n    x1 = math.floor(r / a) + r % a\n    x2 = 0\n    if r - r % a - 1 >= l:\n        x2 = math.floor((r - r % a - 1) / a) + (r - r % a - 1) % a\n    print(max(x1, x2))\n    t -= 1", "from operator import index\ntest_cases = int(input())\n\ndef checker(left, right, a):\n    highest_input = right - right % a - 1\n    true_first = int(right / a) + right % a\n    if highest_input >= left and highest_input <= right:\n        first = int(highest_input / a) + highest_input % a\n        if highest_input - a >= left and highest_input - a <= right:\n            second = int((highest_input - a) / a) + (highest_input - a) % a\n            return max((first, second, true_first))\n        else:\n            return max((first, true_first))\n    else:\n        return true_first\nanswers = []\nfor test_case in range(test_cases):\n    (left, right, a) = [int(i) for i in input().split()]\n    answers.append(checker(left, right, a))\nfor ans in answers:\n    print(ans)", "import math\nn_test_cases = int(input())\nresults = []\nfor _ in range(n_test_cases):\n    (l, r, a) = tuple([int(x) for x in input().split()])\n    values = []\n    values.append(r % a + math.floor(r / a))\n    if r - 1 >= l:\n        r2 = r - 1\n        values.append(r2 % a + math.floor(r2 / a))\n    if r - r % a - 1 >= l:\n        r3 = r - r % a - 1\n        values.append(r3 % a + math.floor(r3 / a))\n    results.append(max(values))\nfor result in results:\n    print(result)", "for _ in [*open(0)][1:]:\n    (l, r, a) = map(int, _.split())\n    print(max(r // a + r % a, (r - r % a - 1) // a + (r - r % a - 1) % a if r - r % a - 1 >= l else 0))", "for _ in [*open(0)][1:]:\n    (l, r, a) = map(int, _.split())\n    print(max(r // a + r % a, (r - r % a - 1) // a + (r - r % a - 1) % a if r - r % a - 1 >= l else 0))", "for _ in [*open(0)][1:]:\n    (l, r, a) = map(int, _.split())\n    print(max(r // a + r % a, (r - r % a - 1) // a + (r - r % a - 1) % a if r - r % a - 1 >= l else 0))", "for _ in [*open(0)][1:]:\n    (l, r, a) = map(int, _.split())\n    print(max(r // a + r % a, (r - r % a - 1) // a + (r - r % a - 1) % a if r - r % a - 1 >= l else 0))", "import math\ntcase = int(input())\nfinal = []\nfor i in range(0, tcase):\n    (l, r, a) = map(int, input().split())\n    c1 = a * math.ceil(r / a) - 1\n    c2 = a * math.floor(r / a) - 1\n    if a == 1:\n        final.append(r)\n    elif c1 <= r and c1 >= l:\n        final.append(int((c1 + 1) / a - 1 + c1 % a))\n    elif c2 <= r and c2 >= l:\n        final.append(int((c2 + 1) / a - 1 + c2 % a))\n    else:\n        final.append(math.floor(r / a) + r % a)\nfor i in final:\n    print(i)", "import math\ntcase = int(input())\nfinal = []\nfor i in range(0, tcase):\n    (l, r, a) = map(int, input().split())\n    c1 = a * math.ceil(r / a) - 1\n    c2 = a * math.floor(r / a) - 1\n    if a == 1:\n        final.append(r)\n    elif c1 <= r and c1 >= l:\n        final.append(int((c1 + 1) / a - 1 + c1 % a))\n    elif c2 <= r and c2 >= l:\n        final.append(int((c2 + 1) / a - 1 + c2 % a))\n    else:\n        final.append(math.floor(r / a) + r % a)\nfor i in final:\n    print(i)", "from posixpath import split\nm = 0\nt = int(input())\ns = []\nfor i in range(t):\n    s.append(input())\nfor i in range(t):\n    max = 0\n    l = s[i].split(' ')\n    l0 = int(l[0])\n    l1 = int(l[1])\n    l2 = int(l[2])\n    if l2 == 1:\n        print(l1)\n        continue\n    if l1 % l2 == l2 - 1:\n        pass\n    elif l1 // l2 >= 1:\n        m = l1\n        l1 -= l1 % l2 + 1\n        if l1 < l0:\n            l1 = m\n    l1 = l1 // l2 + l1 % l2\n    print(l1)", "import sys\nimport bisect\ninp = sys.stdin.readline\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(inp())):\n    (l, r, a) = map(int, inp().split())\n    lm = r // a * a - 1\n    ans = r // a + r % a\n    if lm >= l:\n        ans = max(ans, r // a - 1 + a - 1)\n    print(ans)", "R = lambda : map(int, input().split())\nL = lambda line: map(int, line.split())\nfor line in [*open(0)][1:]:\n    (l, r, a) = map(int, line.split())\n    print(max(r // a + r % a, (r - 1 - r % a) // a + (r - 1 - r % a) % a if r - 1 - r % a >= l else 0))", "cases = []\nfor i in range(int(input())):\n    cases.append([int(i) for i in input().split()])\nfor case in cases:\n    a = case[2]\n    first = case[1] // a + case[1] % a\n    x = case[1] - case[1] % a - 1\n    if x < case[0]:\n        print(first)\n    else:\n        print(max(x // a + x % a, first))", "for _ in [*open(0)][1:]:\n    (l, r, a) = map(int, _.split())\n    print(max(r // a + r % a, (r - r % a - 1) // a + (r - r % a - 1) % a if r - r % a - 1 >= l else 0))", "import math\nimport sys\nimport itertools\nimport fractions\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\nt = int(wtf[0])\nfor s in wtf[1:]:\n    (l, r, a) = map(int, s.split())\n    ans = r // a + r % a\n    m = r // a * a - 1\n    if m >= l:\n        ans = max(ans, m // a + m % a)\n    print(ans)", "import math\n\ndef f(a, x):\n    return math.floor(x / a) + x % a\nt = int(input())\nli = []\nfor _ in range(t):\n    li += [list(map(int, input().split()))]\nfor i in range(t):\n    l = li[i][0]\n    r = li[i][1]\n    a = li[i][2]\n    if r % a == a - 1:\n        print(f(a, r))\n    elif r - r % a - 1 >= l:\n        print(f(a, r - r % a - 1))\n    else:\n        print(f(a, r))", "import math\nloops = int(input())\nequation = []\nfor i in range(loops):\n    inp = input().split()\n    l = int(inp[0])\n    r = int(inp[1])\n    a = int(inp[2])\n    test = 0\n    if r == a:\n        if r != l:\n            equation.append((a - 1) % a)\n        else:\n            equation.append(int(l / a))\n    elif r == 1 or l == r:\n        equation.append(int(l / a + l % a))\n    elif a == 1:\n        equation.append(int(r / a))\n    else:\n        diff = r - r % a - 1\n        if l <= diff:\n            floor = math.floor(diff / a)\n            floorR = math.floor(r / a)\n            if int(r / a + r % a) > int(diff / a + diff % a):\n                equation.append(floorR + r % a)\n            else:\n                equation.append(floor + diff % a)\n        else:\n            equation.append(int(r / a + r % a))\nfor i in equation:\n    print(i)", "import math\nloops = int(input())\nequation = []\nfor i in range(loops):\n    inp = input().split()\n    l = int(inp[0])\n    r = int(inp[1])\n    a = int(inp[2])\n    test = 0\n    if r == a:\n        if r != l:\n            equation.append((a - 1) % a)\n        else:\n            equation.append(int(l / a))\n    elif r == 1 or l == r:\n        equation.append(int(l / a + l % a))\n    elif a == 1:\n        equation.append(int(r / a))\n    else:\n        diff = r - r % a - 1\n        if l <= diff:\n            floor = math.floor(diff / a)\n            floorR = math.floor(r / a)\n            if int(r / a + r % a) > int(diff / a + diff % a):\n                equation.append(floorR + r % a)\n            else:\n                equation.append(floor + diff % a)\n        else:\n            equation.append(int(r / a + r % a))\nfor i in equation:\n    print(i)", "class Solution:\n\n    def divPlusMod(self, arr):\n        ans = first = secod = 0\n        (l, r, a) = (arr[0], arr[1], arr[2])\n        newa = a if a > l else l + a - (l + a) % a\n        if l == r:\n            return l // a + l % a\n        if a == 1:\n            return r\n        if a >= r:\n            return r % a if a > r else (r - 1) % a\n        elif l < a < r:\n            ans = (a - 1) // a + (a - 1) % a\n        newa = r - r % a\n        c = (newa - 1) // a + (newa - 1) % a\n        if newa - 1 >= l:\n            ans = max(ans, c)\n        temp = r // a + r % a if r % a or r == a else (r - 1) // a + (r - 1) % a\n        ans = max(ans, temp)\n        return ans\nobj = Solution()\nta = []\ntc = int(input())\nfor i in range(tc):\n    arr = list(map(int, input().strip().split()))[:3]\n    ta.append(obj.divPlusMod(arr))\nfor i in ta:\n    print(i)", "class Solution:\n\n    def divPlusMod(self, arr):\n        ans = first = secod = 0\n        (l, r, a) = (arr[0], arr[1], arr[2])\n        newa = a if a > l else l + a - (l + a) % a\n        if l == r:\n            return l // a + l % a\n        if a == 1:\n            return r\n        if a >= r:\n            return r % a if a > r else (r - 1) % a\n        elif l < a < r:\n            ans = (a - 1) // a + (a - 1) % a\n        newa = r - r % a\n        c = (newa - 1) // a + (newa - 1) % a\n        if newa - 1 >= l:\n            ans = max(ans, c)\n        temp = r // a + r % a if r % a or r == a or r == l else (r - 1) // a + (r - 1) % a\n        ans = max(ans, temp)\n        return ans\nobj = Solution()\nta = []\ntc = int(input())\nfor i in range(tc):\n    arr = list(map(int, input().strip().split()))[:3]\n    ta.append(obj.divPlusMod(arr))\nfor i in ta:\n    print(i)", "class Solution:\n\n    def divPlusMod(self, arr):\n        ans = 0\n        (l, r, a) = (arr[0], arr[1], arr[2])\n        newa = a if a > l else l + a - (l + a) % a\n        if l == r:\n            return l // a + l % a\n        if a == 1:\n            return r\n        if a >= r:\n            return r % a if a > r else (r - 1) % a\n        newa = r - r % a\n        c = (newa - 1) // a + (newa - 1) % a\n        if newa - 1 >= l:\n            ans = max(ans, c)\n        temp = r // a + r % a if r % a or r == a or r == l else (r - 1) // a + (r - 1) % a\n        ans = max(ans, temp)\n        return ans\nobj = Solution()\nta = []\ntc = int(input())\nfor i in range(tc):\n    arr = list(map(int, input().strip().split()))[:3]\n    ta.append(obj.divPlusMod(arr))\nfor i in ta:\n    print(i)", "class Solution:\n\n    def divPlusMod(self, arr):\n        ans = 0\n        (l, r, a) = (arr[0], arr[1], arr[2])\n        newa = a if a > l else l + a - (l + a) % a\n        if l == r:\n            return l // a + l % a\n        if l == r == a:\n            return 1\n        if a == 1:\n            return r\n        if a >= r:\n            return r % a if a > r else (r - 1) % a\n        newa = r - r % a\n        c = (newa - 1) // a + (newa - 1) % a\n        if newa - 1 >= l:\n            ans = max(ans, c)\n        temp = r // a + r % a if r % a else (r - 1) // a + (r - 1) % a\n        ans = max(ans, temp)\n        return ans\nobj = Solution()\nta = []\ntc = int(input())\nfor i in range(tc):\n    arr = list(map(int, input().strip().split()))[:3]\n    ta.append(obj.divPlusMod(arr))\nfor i in ta:\n    print(i)", "def find(l, r, a):\n    b = r // a\n    v = a * b - 1\n    if (r + 1) % a == 0:\n        return r // a + r % a\n    elif v >= l:\n        return v // a + v % a\n    else:\n        return r // a + r % a\nt = int(input())\nll = []\nlr = []\nla = []\nfor i in range(t):\n    (l, r, a) = map(int, input().split())\n    ll.append(l)\n    lr.append(r)\n    la.append(a)\nfor i in range(t):\n    print(find(ll[i], lr[i], la[i]))", "def compute(l, r, a):\n    z = r % a\n    k = r - z - 1\n    if k < l or z == a - 1:\n        k = r\n    return k // a + k % a\nt = int(input())\nfor _ in range(t):\n    (l, r, a) = map(int, input().split())\n    print(compute(l, r, a))", "class Solution:\n\n    def divPlusMod(self, arr):\n        ans = first = secod = 0\n        (l, r, a) = (arr[0], arr[1], arr[2])\n        newa = a if a > l else l + a - (l + a) % a\n        if l == r == a:\n            return 1\n        if l == r:\n            return l // a + l % a\n        if a == 1:\n            return r\n        if a >= r:\n            return r % a if a > r else (r - 1) % a\n        elif l < a < r:\n            ans = (a - 1) // a + (a - 1) % a\n        newa = r - r % a\n        c = (newa - 1) // a + (newa - 1) % a\n        if newa - 1 >= l:\n            ans = max(ans, c)\n        temp = r // a + r % a if r % a else (r - 1) // a + (r - 1) % a\n        ans = max(ans, temp)\n        return ans\nobj = Solution()\nta = []\ntc = int(input())\nfor i in range(tc):\n    arr = list(map(int, input().strip().split()))[:3]\n    ta.append(obj.divPlusMod(arr))\nfor i in ta:\n    print(i)", "import math\nt = int(input())\nfor k in range(t):\n    s = input().split()\n    l = int(s[0])\n    r = int(s[1])\n    a = int(s[2])\n    if r % a < a - 2:\n        b = r // a - 1\n        if r - r % a - 1 < l:\n            print(r // a + r % a)\n            continue\n        print(b + a - 1)\n    else:\n        print(r // a + r % a)", "t = int(input())\nfor _ in range(t):\n    (l, r, a) = map(int, input().split())\n    if a == 1:\n        print(r)\n    else:\n        m = r % a\n        if m == a - 1:\n            print(r // a + m)\n        elif r - m - 1 >= l:\n            print((r - m - 1) // a + a - 1)\n        else:\n            print(r // a + m)", "t = int(input())\nfor i in range(t):\n    (l, r, a) = list(map(int, input().split()))\n    print(max((r - (r % a + 1)) // a + (r - (r % a + 1)) % a if r - (r % a + 1) >= l else -1000, r // a + r % a))", "for _ in range(int(input())):\n    (l, r, a) = map(int, input().split())\n    temp = r // a * a\n    if r % a == a - 1:\n        print(r // a + r % a)\n    elif temp - 1 >= l:\n        print(temp // a + a - 2)\n    else:\n        print(r // a + r % a)", "n = int(input())\nfor i in range(n):\n    (l, r, a) = [int(i) for i in input().split()]\n    if r // a * a + (a - 1) == r:\n        print(r // a + (a - 1))\n    elif (r // a - 1) * a + (a - 1) >= l:\n        print(r // a + (a - 1) - 1)\n    else:\n        print(r // a + r % a)", "def solve():\n    (l, r, a) = [int(x) for x in input().split()]\n    ans = r - (r % a + 1) % a\n    if ans < l:\n        ans = r\n    return ans // a + ans % a\nfor tc in range(int(input())):\n    print(solve())"]