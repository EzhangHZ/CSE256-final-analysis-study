["def solve():\n    n = str(input())\n    a = ''\n    b = ''\n    if len(n) == 1:\n        a = int(n)\n        b = 0\n    else:\n        for i in range(len(n)):\n            if i % 2 == 0:\n                a = a + n[i]\n            else:\n                b = b + n[i]\n        a = int(a)\n        b = int(b)\n    result = (a + 1) * (b + 1) - 2\n    print(result)\nt = int(input())\nfor i in range(t):\n    solve()", "t = int(input())\nfor i in range(t):\n    n = input()\n    o = ''\n    e = ''\n    k = 1\n    for j in range(0, len(n)):\n        if k & 1:\n            o = o + n[j]\n        else:\n            e = e + n[j]\n        k += 1\n    if len(o) > 0:\n        o = int(o)\n    else:\n        o = 0\n    if len(e) > 0:\n        e = int(e)\n    else:\n        e = 0\n    if o == 0:\n        print(e - 1)\n    elif e == 0:\n        print(o - 1)\n    else:\n        print((o + 1) * (e + 1) - 2)", "t = int(input())\nfor i in range(t):\n    n = input()\n    o = ''\n    e = ''\n    k = 1\n    for j in range(0, len(n)):\n        if k & 1:\n            o = o + n[j]\n        else:\n            e = e + n[j]\n        k += 1\n    if len(o) > 0:\n        o = int(o)\n    else:\n        o = 0\n    if len(e) > 0:\n        e = int(e)\n    else:\n        e = 0\n    if o == 0:\n        print(e - 1)\n    elif e == 0:\n        print(o - 1)\n    else:\n        print((o + 1) * (e + 1) - 2)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    s = input().strip()\n    n = len(s)\n    dp1 = [0] * n\n    dp2 = [0] * n\n    if int(s) < 10:\n        return int(s) - 1\n    s = s[::-1]\n    (d0, d1) = (int(s[0]), int(s[1]))\n    (dp1[0], dp2[0]) = (d0 + 1, 9 - d0)\n    (dp1[1], dp2[1]) = (d1 + 1, 9 - d1)\n    for i in range(2, n):\n        d = int(s[i])\n        dp1[i] = (d + 1) * dp1[i - 2] + d * dp2[i - 2]\n        dp2[i] = (9 - d) * dp1[i - 2] + (9 - d + 1) * dp2[i - 2]\n    return dp1[-1] * dp1[-2] - 2\nfor _ in range(int(input())):\n    print(solve())", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    s = input().strip()\n    n = len(s)\n    even = [0, 0]\n    odd = [0, 0]\n    if int(s) < 10:\n        return int(s) - 1\n    s = s[::-1]\n    (d0, d1) = (int(s[0]), int(s[1]))\n    dp = [[d0 + 1, 9 - d0], [d1 + 1, 9 - d1]]\n    for i in range(2, n):\n        d = int(s[i])\n        dp[i % 2] = [(d + 1) * dp[i % 2][0] + d * dp[i % 2][1], (9 - d) * dp[i % 2][0] + (9 - d + 1) * dp[i % 2][1]]\n    return dp[0][0] * dp[1][0] - 2\nfor _ in range(int(input())):\n    print(solve())", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    s = '0' + input().strip()\n    a = int(s[0::2])\n    b = int(s[1::2])\n    return (a + 1) * (b + 1) - 2\nfor _ in range(int(input())):\n    print(solve())", "for s in [*open(0)][1:]:\n    print((1 + int(s[::2])) * (1 + int('0' + s[1::2])) - 2)", "for a in [*open(0)][1:]:\n    print((1 + int(a[::2])) * (1 + int('0' + a[1::2])) - 2)", "def solver(num1, num2):\n    num1 = int(num1)\n    num2 = int(num2)\n    total1 = num1 + 1\n    total2 = num2 + 1\n    total = total1 * total2\n    tosub = 0\n    if num1 != 0 and num2 != 0:\n        return total - 2\n    if num1 == 0 and num2 != 0:\n        return total - 2\n    if num1 != 0 and num2 == 0:\n        return total - 2\n    if num1 == 0 and num2 == 0:\n        return 0\n\ndef lastsolver(train):\n    length = len(train)\n    if len(train) == 1:\n        if int(train) > 1:\n            print(int(train) - 1)\n            return int(train) - 1\n        else:\n            print(0)\n            return 0\n    if len(train) % 2 == 0:\n        l1 = length // 2\n        l2 = length // 2\n        num1 = ''\n        num2 = ''\n        for i in range(l1):\n            num1 = num1 + str(train[2 * i])\n        for i in range(l2):\n            num2 = num2 + str(train[2 * i + 1])\n        print(solver(num1, num2))\n        return solver(num1, num2)\n    else:\n        l1 = length // 2\n        l2 = length // 2 + 1\n        num1 = ''\n        num2 = ''\n        for i in range(l1):\n            num1 = num1 + str(train[2 * i + 1])\n        for i in range(l2):\n            num2 = num2 + str(train[2 * i])\n        print(solver(num1, num2))\n        return solver(num1, num2)\nt = int(input())\nfor i in range(t):\n    current = input()\n    lastsolver(current)", "for s in [*open(0)][1:]:\n    print((1 + int(s[::2])) * (1 + int('0' + s[1::2])) - 2)", "n = int(input())\nfor i in range(n):\n    r = input()\n    if len(r) == 1:\n        print(int(r) - 1)\n    else:\n        a = int(r[::2])\n        b = int(r[1::2])\n        print((a + 1) * (b + 1) - 2)", "j = int(input())\nfor k in range(j):\n    t = input()\n    a = ''\n    b = ''\n    for i in range(len(t)):\n        if i % 2:\n            a += t[i]\n        else:\n            b += t[i]\n    if len(a) > 0:\n        c = int(a)\n    else:\n        c = 0\n    if len(b) > 0:\n        d = int(b)\n    else:\n        d = 0\n    print((c + 1) * (d + 1) - 2)", "t = int(input())\nfor _ in range(t):\n    s = input()[::-1]\n    odd = even = ''\n    k = len(s)\n    for i in range(0, k, 2):\n        odd += s[i]\n        if i + 1 < k:\n            even += s[i + 1]\n    odd = odd[::-1]\n    even = even[::-1]\n    if even == '':\n        even = '0'\n    odd = int(odd)\n    even = int(even)\n    ans = (odd + 1) * (even + 1) - 2\n    print(ans)", "def solve(n):\n    a = 0\n    b = 0\n    s = str(n)\n    for i in range(len(s)):\n        if i % 2 == 0:\n            a = a * 10 + int(s[i])\n        else:\n            b = b * 10 + int(s[i])\n    return (a + 1) * (b + 1) - 2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(solve(n))", "for _ in range(int(input())):\n    s = input()\n    a = 0\n    try:\n        a = int(s[1::2])\n    except:\n        a = 0\n    print((int(s[::2]) + 1) * (a + 1) - 2)", "for _ in range(int(input())):\n    n = '0' + input()\n    a = int(n[::2])\n    b = int(n[1::2])\n    print((a + 1) * (b + 1) - 2)", "for _ in range(int(input())):\n    n = '0' + input()\n    a = int(n[0::2])\n    b = int(n[1::2])\n    print((a + 1) * (b + 1) - 2)", "for _ in range(int(input())):\n    s = input()\n    a = ''\n    b = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            a += s[i]\n        else:\n            b += s[i]\n    if len(b) == 0:\n        print(int(a) - 1)\n    else:\n        print((int(a) + 1) * (int(b) + 1) - 2)", "for s in [*open(0)][1:]:\n    print((1 + int(s[::2])) * (1 + int('0' + s[1::2])) - 2)", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = input()\n    even = '0'\n    odd = '0'\n    for i in range(len(n)):\n        if i % 2 == 0:\n            even += n[i]\n        else:\n            odd += n[i]\n    print((int(even) + 1) * (int(odd) + 1) - 2)", "for s in [*open(0)][1:]:\n    print((1 + int(s[::2])) * (1 + int('0' + s[1::2])) - 2)", "import math\nfor _ in range(int(input())):\n    n = input()\n    s1 = ''\n    s2 = ''\n    for i in range(0, len(n), 2):\n        s1 += n[i]\n    for i in range(1, len(n), 2):\n        s2 += n[i]\n    if len(s1) > 0:\n        z1 = int(s1) + 1\n    else:\n        z1 = 1\n    if len(s2) > 0:\n        z2 = int(s2) + 1\n    else:\n        z2 = 1\n    ans = z1 * z2 - 2\n    print(max(0, ans))", "for _ in range(int(input())):\n    n = '0' + input()\n    a = int(n[0::2])\n    b = int(n[1::2])\n    print((a + 1) * (b + 1) - 2)", "import sys\nfrom collections import defaultdict, deque\nfrom bisect import bisect_left\nimport math\ninput = sys.stdin.readline\n\ndef inp():\n    l = list(map(int, input().split()))\n    return l\nfor _ in range(int(input())):\n    n = input()\n    s1 = '0'\n    s2 = '0'\n    for i in range(len(n)):\n        if i % 2 == 0:\n            s1 += n[i]\n        else:\n            s2 += n[i]\n    s1 = int(s1)\n    s2 = int(s2)\n    print((s1 + 1) * (s2 + 1) - 2)", "for _ in range(int(input())):\n    s = input()\n    a = 0\n    b = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            a = a * 10 + int(s[i])\n        else:\n            b = b * 10 + int(s[i])\n    print((a + 1) * (b + 1) - 2)", "t = int(input())\nfor _ in range(t):\n    n = str(input())\n    (a, b) = ('', '')\n    n = n[::-1]\n    odd = False\n    for c in n:\n        if odd:\n            b += c\n        else:\n            a += c\n        odd = not odd\n    a = int('0' + a[::-1])\n    b = int('0' + b[::-1])\n    print((a + 1) * (b + 1) - 2)", "from heapq import heappush, heappop\n\ndef solve(a, b):\n    if a == 0 and b == 0:\n        return 0\n    total = (a + 1) * (b + 1)\n    return total - 2\nt = int(input())\nfor _ in range(t):\n    n = list(input())\n    a = []\n    b = []\n    for i in range(len(n)):\n        if i % 2 == 0:\n            a.append(n[i])\n        else:\n            b.append(n[i])\n    a = ''.join(a)\n    b = ''.join(b)\n    a = int(a) if a != '' else 0\n    b = int(b) if b != '' else 0\n    print(solve(a, b))", "for _ in range(int(input())):\n    n = input()\n    l = len(n)\n    if l == 1:\n        print(int(n) - 1)\n    else:\n        (a, b) = (int(n[::2]), int(n[1::2]))\n        if l & 1 == 0:\n            (a, b) = (b, a)\n        print((a + 1) * (b + 1) - 2)", "for _ in range(int(input())):\n    n = int(input())\n    n1 = 0\n    n2 = 0\n    idx = 0\n    p1 = 0\n    p2 = 0\n    while n != 0:\n        rem = n % 10\n        if idx % 2 == 0:\n            n1 += rem * pow(10, p1)\n            p1 += 1\n        else:\n            n2 += rem * pow(10, p2)\n            p2 += 1\n        n = n // 10\n        idx += 1\n    n1 -= 1\n    n2 -= 1\n    ans = n2 * n1 + n1 * 2 + n2 * 2 + 2\n    print(ans)", "for s in [*open(0)][1:]:\n    print((1 + int(s[::2])) * (1 + int('0' + s[1::2])) - 2)", "def helper(x):\n    l = []\n    while x > 0:\n        l.append(x % 10)\n        x = x // 10\n    l.reverse()\n    xe = 0\n    xo = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            xe = 10 * xe + l[i]\n        else:\n            xo = 10 * xo + l[i]\n    return (xo + 1) * (xe + 1) - 2\nt = int(input())\nfor xx in range(t):\n    n = int(input())\n    print(helper(n))", "def solve():\n    nn = input()\n    n1 = '0'\n    n2 = '0'\n    for i in range(len(nn)):\n        if i % 2 == 0:\n            n1 += nn[i]\n        else:\n            n2 += nn[i]\n    n1 = int(n1)\n    n2 = int(n2)\n    print((n1 + 1) * (n2 + 1) - 2)\nt = int(input())\nfor _ in range(t):\n    solve()", "n = int(input())\n\ndef get_n(n):\n    s = str(n)\n    res_c = ''\n    res_n = ''\n    for j in range(len(str(n))):\n        if j % 2 == 0:\n            res_n += s[j]\n        else:\n            res_c += s[j]\n    res_c = int(res_c) + 1\n    res_n = int(res_n) + 1\n    return (res_c, res_n)\n\ndef get_res(number):\n    if number < 10:\n        return number - 1\n    (n, m) = get_n(number)\n    t = n\n    n = m\n    m = t\n    if n == 1 or m == 1:\n        return n - 2\n    else:\n        return n * (m - 2) + (n - 1) * 2\nres = []\nfor i in range(n):\n    res.append(get_res(int(input())))\nfor elem in res:\n    print(elem)", "def recursion(a, i, prev):\n    if i >= 0:\n        if i - 2 >= 0:\n            if a[i] == 0 and prev == 'carry':\n                x = 9\n                y = d[x]['normal']\n                r1 = recursion(a, i - 2, 'carry')\n                ans = r1 * y\n                return ans\n            else:\n                if prev == 'carry':\n                    x = a[i] - 1\n                else:\n                    x = a[i]\n                y = d[x]['normal']\n                r1 = recursion(a, i - 2, 'normal')\n                ans = r1 * y\n                y = d[x]['carry']\n                r2 = recursion(a, i - 2, 'carry')\n                ans += r2 * y\n                return ans\n        elif prev == 'carry':\n            if a[i] == 0:\n                return 0\n            else:\n                return d[a[i] - 1]['normal']\n        else:\n            return d[a[i]]['normal']\n    else:\n        return 1\nd = {}\nfor i in range(10):\n    d[i] = {'normal': 1 + i, 'carry': 10 - i - 1}\nfor _ in range(int(input())):\n    a = list(map(int, list(input())))\n    n = len(a)\n    ans = recursion(a, n - 1, 'normal')\n    ans *= recursion(a, n - 2, 'normal')\n    print(ans - 2)", "import sys\nimport math\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_list_strings():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef solve(n):\n    if n < 10:\n        sys.stdout.write(str(n - 1) + '\\n')\n        return\n    num1 = ''\n    num2 = ''\n    n = str(n)\n    l = len(n)\n    for i in range(l):\n        if i % 2 == 0:\n            num1 += str(n[i])\n        else:\n            num2 += str(n[i])\n    num1 = int(num1)\n    num2 = int(num2)\n    ans = (num1 + 1) * (num2 + 1) - 2\n    sys.stdout.write(str(ans) + '\\n')\n    return\nT = get_int()\nwhile T:\n    n = get_int()\n    solve(n)\n    T -= 1", "t = int(input())\nfor i in range(t):\n    n = input()\n    if len(n) == 1:\n        print(int(n) - 1)\n    else:\n        ns = [char for char in n]\n        se = ''\n        so = ''\n        for i in range(len(ns)):\n            if i % 2 == 0:\n                se += ns[i]\n            else:\n                so += ns[i]\n        se = int(se) + 1\n        so = int(so) + 1\n        print(se * so - 2)", "for _ in range(int(input())):\n    n = '0' + input()\n    a = int(n[0::2])\n    b = int(n[1::2])\n    print((a + 1) * (b + 1) - 2)", "t = int(input())\nfor _ in range(t):\n    n = input()\n    (l1, l2) = ('', '')\n    for i in range(0, len(n)):\n        if i % 2 == 0:\n            l1 += n[i]\n        else:\n            l2 += n[i]\n    if len(l1) > 0:\n        l1 = int(l1)\n    else:\n        l1 = 0\n    if len(l2) > 0:\n        l2 = int(l2)\n    else:\n        l2 = 0\n    print((l1 + 1) * (l2 + 1) - 2)", "for _ in range(int(input())):\n    n = '0' + input()\n    a = int(n[0::2])\n    b = int(n[1::2])\n    print((a + 1) * (b + 1) - 2)", "n = int(input())\nfor _ in range(n):\n    x = input().zfill(10)\n    x1 = int(x[::2]) + 1\n    x2 = int(x[1::2]) + 1\n    print(x1 * x2 - 2)\nexit()", "for _ in range(int(input())):\n    n = '0' + input()\n    a = int(n[0::2])\n    b = int(n[1::2])\n    print((a + 1) * (b + 1) - 2)", "t = int(input())\nfor _ in range(t):\n    sn = input()\n    s1 = sn[::2]\n    s2 = sn[1::2]\n    c1 = 0\n    for c in s1:\n        c1 = c1 * 10 + ord(c) - ord('0')\n    c2 = 0\n    for c in s2:\n        c2 = c2 * 10 + ord(c) - ord('0')\n    print((c1 + 1) * (c2 + 1) - 2)", "for _ in range(int(input())):\n    n = '0' + input()\n    a = int(n[0::2])\n    b = int(n[1::2])\n    print((a + 1) * (b + 1) - 2)", "for s in [*open(0)][1:]:\n    print((1 + int(s[::2])) * (1 + int('0' + s[1::2])) - 2)", "for s in [*open(0)][1:]:\n    print((1 + int(s[::2])) * (1 + int('0' + s[1::2])) - 2)", "for s in [*open(0)][1:]:\n    print((1 + int(s[::2])) * (1 + int('0' + s[1::2])) - 2)", "test = int(input())\nfor i in range(test):\n    t = input()\n    odd = ''\n    even = ''\n    for i in range(len(t)):\n        if i % 2 == 0:\n            odd += t[i]\n        else:\n            even += t[i]\n    odd = int(odd) + 1\n    if even:\n        even = int(even) + 1\n    else:\n        even = 1\n    print(odd * even - 2)", "for _ in range(int(input())):\n    n = input()\n    a = int('0' + ''.join([n[i] for i in range(len(n)) if i % 2 == 0]))\n    b = int('0' + ''.join([n[i] for i in range(len(n)) if i % 2 != 0]))\n    print((a + 1) * (b + 1) - 2)", "def solve():\n    k = input()\n    if len(k) == 1:\n        print(int(k) - 1)\n        return\n    print((int(k[::2]) + 1) * (int(k[1::2]) + 1) - 2)\nn = int(input())\nfor i in range(n):\n    solve()", "T = int(input())\nfor _ in range(T):\n    n = input()\n    even = 0\n    odd = 0\n    for i in range(len(n)):\n        if i % 2 == 0:\n            even = even * 10 + int(n[i])\n        else:\n            odd = odd * 10 + int(n[i])\n    print((even + 1) * (odd + 1) - 2)", "t = int(input())\nfor q in range(t):\n    a = input()\n    t = '0'\n    s = '0'\n    for i in range(len(a)):\n        if i % 2 == 0:\n            t += a[i]\n        else:\n            s += a[i]\n    print((int(t) + 1) * (int(s) + 1) - 2)", "for _ in range(int(input())):\n    s = input()\n    if len(s) == 1:\n        print(int(s) - 1)\n    else:\n        a = int(s[::2])\n        b = int(s[1::2])\n        print((a + 1) * (b + 1) - 2)", "T = int(input())\nfor _ in range(T):\n    s = '0' + input()\n    (s1, s2) = (int(s[::2]), int(s[1::2]))\n    print((s1 + 1) * (s2 + 1) - 2)", "for _ in range(int(input())):\n    n = int(input())\n    s = str(n)\n    e = ''\n    o = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            e = e + s[i]\n        else:\n            o = o + s[i]\n    if len(e) >= 1 and len(o) >= 1:\n        q = int(e)\n        t = int(o)\n        print((q + 1) * (t + 1) - 2)\n    else:\n        q = int(e)\n        print(q + 1 - 2)", "numOfTestCases = int(input())\nwhile numOfTestCases > 0:\n    numOfTestCases -= 1\n    aliceResult = input()\n    oddnumber = '0'\n    evenNumber = '0'\n    for (i, c) in enumerate(aliceResult):\n        if i % 2 == 0:\n            evenNumber += c\n        else:\n            oddnumber += c\n    oddnumber = int(oddnumber)\n    evenNumber = int(evenNumber)\n    print((oddnumber + 1) * (evenNumber + 1) - 2)", "for _ in range(int(input())):\n    s = input()\n    n1 = s[::2]\n    n2 = s[1::2]\n    s1 = 1\n    if n1 != '':\n        s1 *= int(n1) + 1\n    if n2 != '':\n        s1 *= int(n2) + 1\n    print(s1 - 2)", "def div_num(N):\n    num = str(N)\n    n1 = num[::2]\n    n2 = num[1::2]\n    return (int(n1), int(n2))\nfor i in range(int(input())):\n    n = int(input())\n    if n < 10:\n        ans = n - 1\n    else:\n        (num1, num2) = div_num(n)\n        ans = (num1 + 1) * (num2 + 1) - 2\n    print(ans)", "def solve():\n    s = input()\n    (s1, s2) = ('', '')\n    for i in range(len(s)):\n        if i % 2 == 0:\n            s1 += s[i]\n        else:\n            s2 += s[i]\n    if not s2:\n        print(int(s1) - 1)\n    else:\n        print((int(s1) + 1) * (int(s2) + 1) - 2)\n    return\nt = int(input())\nwhile t > 0:\n    t -= 1\n    solve()", "t = int(input())\nfor q in range(t):\n    a = input()\n    t = '0'\n    s = '0'\n    for i in range(len(a)):\n        if i % 2 == 0:\n            t += a[i]\n        else:\n            s += a[i]\n    print((int(t) + 1) * (int(s) + 1) - 2)", "def cal():\n    s = list(input())\n    first = int(''.join(s[0::2])) + 1\n    second = int(''.join(s[1::2])) + 1 if len(s) > 1 else 1\n    print(first * second - 2)\n\ndef main():\n    t = int(input())\n    while t:\n        cal()\n        t -= 1\nmain()", "test = int(input())\nfor i in range(test):\n    t = input()\n    odd = ''\n    even = ''\n    for i in range(len(t)):\n        if i % 2 == 0:\n            odd += t[i]\n        else:\n            even += t[i]\n    odd = int(odd) + 1\n    if even:\n        even = int(even) + 1\n    else:\n        even = 1\n    print(odd * even - 2)", "t = int(input())\nfor _ in range(t):\n    n = input()\n    j = 0\n    odd = ''\n    eve = ''\n    for i in reversed(range(len(n))):\n        if j % 2 == 0:\n            odd = n[i] + odd\n        else:\n            eve = n[i] + eve\n        j += 1\n    if len(eve) == 0:\n        eve = '0'\n    if len(odd) == 0:\n        odd = '0'\n    print((int(odd) + 1) * (int(eve) + 1) - 2)", "n = int(input())\nfor _ in range(n):\n    num1 = 0\n    num2 = 0\n    num = input()\n    for i in range(len(num)):\n        if i % 2 == 0:\n            num1 = num1 * 10 + int(num[i])\n        else:\n            num2 = num2 * 10 + int(num[i])\n    result = (num1 + 1) * (num2 + 1) - 2\n    print(result)", "def func():\n    n = input()\n    n1 = ''\n    n2 = ''\n    l = len(n)\n    for i in range(l):\n        if i % 2 == 0:\n            n1 += n[i]\n        else:\n            n2 += n[i]\n    if len(n2) == 0:\n        print(int(n1) - 1)\n        return\n    n1 = int(n1)\n    n2 = int(n2)\n    print((n1 + 1) * (n2 + 1) - 2)\nt = int(input())\nfor i in range(t):\n    func()", "for _ in range(int(input())):\n    n = input()\n    flag = True\n    i = 0\n    a = ''\n    b = ''\n    while i < len(n):\n        if flag == True:\n            a += n[i]\n            i += 1\n            flag = False\n        else:\n            b += n[i]\n            i += 1\n            flag = True\n    a = int(a) if a != '' else 0\n    b = int(b) if b != '' else 0\n    print((a + 1) * (b + 1) - 2)", "def solve(n):\n    a = b = 0\n    place = 1\n    while n:\n        a += n % 10 * place\n        n //= 10\n        b += n % 10 * place\n        n //= 10\n        place *= 10\n    return (a + 1) * (b + 1) - 2\nfor t in range(int(input())):\n    n = int(input())\n    print(solve(n))", "for s in [*open(0)][1:]:\n    print((1 + int(s[::2])) * (1 + int('0' + s[1::2])) - 2)", "def int_input():\n    a = int(input())\n    return a\n\ndef int_list_input():\n    a = list(map(int, input().split()))\n    return a\n\ndef solve():\n    n = input()\n    a = ''\n    b = ''\n    for i in range(0, len(n), 2):\n        a += n[i]\n    for i in range(1, len(n), 2):\n        b += n[i]\n    ans = int(a) + 1\n    if b != '':\n        ans = ans * (int(b) + 1)\n    print(ans - 2)\nfor _ in range(int(input())):\n    solve()", "T = int(input())\nfor i in range(T):\n    k = input()\n    t = len(k)\n    s = ''\n    r = ''\n    for i in range(t - 1, -1, -1):\n        if i % 2 == 0:\n            s = k[i] + s\n        else:\n            r = k[i] + r\n    s = '0' + s\n    r = '0' + r\n    print((int(s) + 1) * (int(r) + 1) - 2)", "t = int(input())\nfor i in range(t):\n    n = input()\n    (a, b) = ('', '')\n    for i in range(0, len(n), 2):\n        a += n[i]\n    for i in range(1, len(n), 2):\n        b += n[i]\n    if a:\n        a = int(a)\n    if b:\n        b = int(b)\n    if not b:\n        b = 0\n    if not a:\n        a = 0\n    print((a + 1) * (b + 1) - 2)", "T = int(input())\nfor t in range(T):\n    N = input()\n    num1 = ''\n    for i in range(0, len(N), 2):\n        num1 = num1 + N[i]\n    num1 = int(num1)\n    num2 = ''\n    for i in range(1, len(N), 2):\n        num2 = num2 + N[i]\n    if num2 == '':\n        print(num1 - 1)\n    else:\n        num2 = int(num2)\n        print((num1 + 1) * (num2 + 1) - 2)", "t = int(input())\nfor i in range(t):\n    n = input()\n    a = 0\n    b = 0\n    i = 0\n    state = False\n    for x in range(1, len(n) + 1):\n        digit = int(n[-1 * x])\n        if state:\n            b += 10 ** i * digit\n        else:\n            a += 10 ** i * digit\n        if state:\n            i += 1\n        state = not state\n    ans = (a + 1) * (b + 1) - 2\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    n = input()\n    s1 = ''\n    s2 = ''\n    for i in range(len(n)):\n        if i % 2 == 0:\n            s1 += str(n[i])\n        else:\n            s2 += str(n[i])\n    i = j = 0\n    while i < len(s1) and s1[i] == '0':\n        i += 1\n    while j < len(s2) and s2[j] == '0':\n        j += 1\n    s1 = s1[i:]\n    s2 = s2[j:]\n    if len(s1) == 0:\n        s1 = 0\n    else:\n        s1 = int(s1)\n    if len(s2) == 0:\n        s2 = 0\n    else:\n        s2 = int(s2)\n    print((int(s1) + 1) * (int(s2) + 1) - 2)", "t = int(input())\nfor i in range(t):\n    s = input()\n    s1 = 0\n    s2 = 0\n    for j in range(len(s)):\n        if j % 2 == 0:\n            s1 = s1 * 10 + int(s[j])\n        else:\n            s2 = s2 * 10 + int(s[j])\n    print((s1 + 1) * (s2 + 1) - 2)", "t = int(input())\nfor tt in range(t):\n    s = list(input())\n    s1 = ''\n    s2 = ''\n    n = len(s)\n    for i in range(0, n, 2):\n        s1 += s[i]\n    for i in range(1, n, 2):\n        s2 += s[i]\n    if s1:\n        s1 = int(s1)\n    else:\n        s1 = 0\n    if s2:\n        s2 = int(s2)\n    else:\n        s2 = 0\n    print((s1 + 1) * (s2 + 1) - 2)", "from collections import deque\nimport heapq\n\nclass Solution:\n\n    @staticmethod\n    def solve():\n        t = int(input())\n        while t:\n            t -= 1\n            n = input()\n            a = b = '0'\n            for i in range(len(n)):\n                if i % 2 == 0:\n                    a += n[i]\n                else:\n                    b += n[i]\n            ans = (int(a) + 1) * (int(b) + 1) - 2\n            print(ans)\nSolution.solve()", "for i in range(int(input())):\n    st = input()\n    a = ''\n    b = ''\n    for k in range(0, len(st)):\n        if k % 2 == 0:\n            a += st[k]\n        else:\n            b += st[k]\n    if a == '':\n        a = 0\n    if b == '':\n        b = 0\n    n = (int(a) + 1) * (int(b) + 1) - 2\n    print(n)", "n = int(input())\nfor _ in range(n):\n    s = input()\n    a = '0'\n    b = '0'\n    for g in range(len(s)):\n        if g % 2 == 0:\n            a += s[g]\n        else:\n            b += s[g]\n    p = 1 + int(a)\n    q = 1 + int(b)\n    print(p * q - 2)", "def answer():\n    n = list(input())\n    s1 = ''\n    s2 = ''\n    for i in range(len(n)):\n        if i % 2 == 0:\n            s1 += n[i]\n        else:\n            s2 += n[i]\n    if s2 == '':\n        print(int(n[0]) - 1)\n        return\n    ans = 0\n    x1 = int(s1)\n    x2 = int(s2)\n    if x2 == 0:\n        ans = x1 - 1\n    else:\n        ans = (x1 - 1) * (x2 + 1)\n        ans += 2 * x2\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    answer()", "for _ in range(int(input())):\n    n = int(input())\n    i = 1\n    (a, b) = (0, 0)\n    while n:\n        a += n % 10 * i\n        n //= 10\n        b += n % 10 * i\n        n //= 10\n        i *= 10\n    if a == 0 or b == 0:\n        print(max(a - 1, b - 1))\n    else:\n        print((a + 1) * (b + 1) - 2)", "t = int(input())\nfor _ in range(t):\n    n = input()\n    (l1, l2) = ('', '')\n    for i in range(0, len(n)):\n        if i % 2 == 0:\n            l1 += n[i]\n        else:\n            l2 += n[i]\n    if l2 == '':\n        l2 = '0'\n    print((int(l1) + 1) * (int(l2) + 1) - 2)", "def read_line():\n    return [int(x) for x in input().split()]\n\ndef read_int():\n    return int(input())\n\ndef solve():\n    n = read_int()\n    s = str(n)\n    a = ''\n    b = ''\n    for i in range(0, len(s)):\n        if i & 1:\n            a += s[i]\n        else:\n            b += s[i]\n    if a:\n        a = int(a)\n    else:\n        a = 0\n    if b:\n        b = int(b)\n    else:\n        b = 0\n    print((a + 1) * (b + 1) - 2)\nt = read_int()\nwhile t > 0:\n    solve()\n    t -= 1", "for s in [*open(0)][1:]:\n    print((int(s[::2]) + 1) * (int('0' + s[1::2]) + 1) - 2)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    s = input().strip()\n    (a, b) = ('', '')\n    for i in range(len(s)):\n        if i % 2 == 0:\n            a += s[i]\n        else:\n            b += s[i]\n    if b == '':\n        b = 0\n    else:\n        b = int(b)\n    a = int(a)\n    print((a + 1) * (b + 1) - 2)", "t = int(input())\nfor i in range(t):\n    s = input()\n    n = len(s)\n    s1 = ''\n    s2 = ''\n    for i in range(0, n, 2):\n        s1 += s[i]\n    for i in range(1, n, 2):\n        s2 += s[i]\n    k1 = int(s1)\n    k2 = 0 if s2 == '' else int(s2)\n    print((k1 + 1) * (k2 + 1) - 2)", "import sys\nimport os\nfrom math import *\nLOCAL = not __debug__\n\ndef conv(x):\n    try:\n        return int(x) + 1\n    except:\n        return 1\n\ndef main():\n    n = input()\n    l = len(n)\n    (a, b) = ('', '')\n    for i in range(0, len(n), 2):\n        a += n[i]\n    for i in range(1, len(n), 2):\n        b += n[i]\n    ans = conv(a) * conv(b) - 2\n    print(ans)\nif LOCAL:\n    sys.stdin = open('hack.txt', 'r')\n    sys.stdout = open('hack.out', 'w')\nt = int(input())\nfor i in range(t):\n    main()", "def conv(x):\n    if x == '':\n        return 1\n    return int(x) + 1\n\ndef main():\n    n = input()\n    l = len(n)\n    (a, b) = ('', '')\n    for i in range(0, len(n), 2):\n        a += n[i]\n    for i in range(1, len(n), 2):\n        b += n[i]\n    print(conv(a) * conv(b) - 2)\nt = int(input())\nfor i in range(t):\n    main()", "t = int(input())\nfor aslkdjaskdj in range(t):\n    n = input()\n    flag = 0\n    j = '0'\n    o = '0'\n    for i in n:\n        if flag == 0:\n            o += i\n        else:\n            j += i\n        flag = 1 - flag\n    j = int(j)\n    o = int(o)\n    print((j + 1) * (o + 1) - 2)", "t = int(input())\nwhile t:\n    a = ''\n    b = ''\n    n = str(input())\n    for i in range(1, len(n), 2):\n        b += n[i]\n    for i in range(0, len(n), 2):\n        a += n[i]\n    if a == '':\n        a = 0\n    if b == '':\n        b = 0\n    print((int(a) + 1) * (int(b) + 1) - 2)\n    t -= 1", "def solve(x):\n    (o, e) = ('', '')\n    for i in range(len(x)):\n        if i % 2 == 0:\n            e += x[i]\n        else:\n            o += x[i]\n    if o == '':\n        o = 0\n    if e == '':\n        e = 0\n    print((int(e) + 1) * (int(o) + 1) - 2)\nfor _ in range(int(input())):\n    x = input()\n    solve(x)", "import math\nimport heapq\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nH = 1000000000 + 7\nfor _ in range(I()):\n    n = I()\n    s = str(n)\n    (s1, s2) = ('0', '0')\n    for i in range(len(s)):\n        if i % 2 == 0:\n            s1 += s[i]\n        else:\n            s2 += s[i]\n    print((int(s1) + 1) * (int(s2) + 1) - 2)", "from math import *\nimport os\nimport random\nimport re\nimport sys\nfrom itertools import *\nm = pow(10, 9) + 7\nfor t in range(int(input())):\n    S = str(int(input()))[::-1]\n    if len(S) == 1:\n        print(int(S) - 1)\n        continue\n    s1 = ''\n    s2 = ''\n    for i in range(len(S)):\n        if i % 2 == 0:\n            s1 += S[i]\n        else:\n            s2 += S[i]\n    print((int(s1[::-1]) + 1) * (int(s2[::-1]) + 1) - 2)", "from math import *\nfrom collections import *\nfrom functools import *\nfrom bisect import *\nfrom itertools import *\nfrom heapq import *\nfrom statistics import *\ninf = float('inf')\nninf = -float('inf')\nip = input\nalphal = 'abcdefghijklmnopqrstuvwxyz'\nalphau = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef ipl():\n    return list(map(int, ip().split()))\n\ndef ipn():\n    return int(ip())\n\ndef ipf():\n    return float(ip())\n\ndef solve():\n    n = ip()\n    print(((int(n[0::2]) if n[0::2] else 0) + 1) * ((int(n[1::2]) if n[1::2] else 0) + 1) - 2)\nt = ipn()\nfor _ in range(t):\n    solve()", "ll = lambda : map(int, input().split())\nt = lambda : int(input())\nss = lambda : input()\nlx = lambda x: map(int, input().split(x))\nyy = lambda : print('YES')\nnn = lambda : print('NO')\nfrom math import log10, log2, ceil, factorial as fac, gcd, inf, sqrt, log\nfrom bisect import bisect_right as br, bisect_left as bl\nfrom collections import Counter\nmod = 10 ** 9 + 7\ndp = [0]\nfor i in range(1, 3 * 10 ** 5 + 1):\n    dp.append(dp[i - 1] ^ i)\nfor _ in range(t()):\n    s = ss()\n    (p, q) = (0, 0)\n    for i in range(len(s)):\n        if i % 2 == 0:\n            p = p * 10 + int(s[i])\n        else:\n            q = q * 10 + int(s[i])\n    if q == 0:\n        print(p - 1)\n    else:\n        print((p + 1) * (q + 1) - 2)", "def f(p, n, carries, acc):\n    if p == -1:\n        return acc\n    ret = 0\n    for carry in range(2):\n        if p < 2 and carry == 1:\n            continue\n        target = n[p] - carry + carries[p + 2] * 10\n        if target < 0:\n            continue\n        if target >= 10:\n            curr = 19 - target\n        else:\n            curr = target + 1\n        if curr > 0:\n            carries[p] = carry\n            ret += f(p - 1, n, carries, acc * curr)\n    return ret\nT = int(input())\nfor _ in range(T):\n    n = tuple(map(int, reversed(input())))\n    carries = [0] * 12\n    answer = f(len(n) - 1, n, carries, 1) - 2\n    print(answer)", "import bisect\nimport collections\nimport copy\nimport functools\nimport heapq\nimport itertools\nimport math\nimport sys\nimport string\nimport random\nfrom typing import List\nsys.setrecursionlimit(99999)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d1 = collections.defaultdict(int)\n    d2 = collections.defaultdict(int)\n    d1[0] = 1\n    d2[0] = 1\n    while n:\n        c = n % 10\n        n //= 10\n        nd = collections.defaultdict(int)\n        for dt in d1:\n            for a in range(10):\n                for b in range(10):\n                    cur = dt + a + b\n                    if cur % 10 == c:\n                        nd[cur // 10] += d1[dt]\n        d1 = d2\n        d2 = nd\n    print(d1[0] * d2[0] - 2)", "def read_int():\n    return int(input())\n\ndef read_ints():\n    return map(int, input().split(' '))\n\ndef calc(num):\n    return max(0, 10 - abs(num - 9))\nt = read_int()\nfor case_num in range(t):\n    n = read_int()\n    digits = [int(ch) for ch in str(n)][::-1]\n    m = len(digits)\n    ans = 0\n    for state in range(1 << max(0, m - 2)):\n        i = state << 2\n        carry = [0] * m\n        s = list(digits)\n        for j in range(m):\n            if i & 1 << j:\n                carry[j] = 1\n                s[j - 2] += 10\n        choice = 1\n        for j in range(m):\n            num = s[j] - carry[j]\n            choice *= calc(num)\n            if choice == 0:\n                break\n        ans += choice\n    print(ans - 2)", "a = {-1: 0, 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10, 10: 9, 11: 8, 12: 7, 13: 6, 14: 5, 15: 4, 16: 3, 17: 2, 18: 1, 19: 0}\n\ndef f(n, s):\n    r = 1\n    for i in range(len(s) - 1, -1, -1):\n        (n, c) = divmod(n, 10)\n        if s[i] == 1:\n            c -= 1\n        if i > 1:\n            if s[i - 2] == 1:\n                c += 10\n        r *= a[c]\n    return r\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    if len(str(n)) < 3:\n        ans = f(n, '0' * len(str(n)))\n    else:\n        for mask in range(2 ** (len(str(n)) - 2)):\n            m = list(map(int, bin(mask)[2:].zfill(len(str(n)) - 2)))\n            while len(m) < len(str(n)):\n                m.append(0)\n            ans += f(n, m)\n    print(ans - 2)"]