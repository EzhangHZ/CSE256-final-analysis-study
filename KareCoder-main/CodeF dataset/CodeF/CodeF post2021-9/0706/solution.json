["from bisect import bisect_left, bisect_right\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    alst = sorted(list(map(int, input().split())))\n    lr = []\n    for _ in range(m):\n        (l, r) = map(int, input().split())\n        if bisect_left(alst, l) == bisect_right(alst, r):\n            lr.append((l, r))\n    alst = [-10 ** 20] + alst + [10 ** 20]\n    inf = 10 ** 20\n    dp = [[inf, inf] for _ in range(n + 2)]\n    dp[0] = [0, 0]\n    p = 0\n    lr.sort()\n    l = len(lr)\n    for (i, a) in enumerate(alst[1:], 1):\n        lst = []\n        while p < l and lr[p][0] < a:\n            lst.append(lr[p])\n            p += 1\n        if not lst:\n            dp[i][0] = min(dp[i - 1])\n            dp[i][1] = min(dp[i - 1])\n            continue\n        min_ = [alst[i]]\n        for (_, r) in lst[::-1]:\n            min_.append(min(min_[-1], r))\n        min_ = min_[::-1]\n        l_s = [alst[i - 1]] + [ll for (ll, _) in lst]\n        a0 = alst[i - 1]\n        a1 = alst[i]\n        for (ll, m) in zip(l_s, min_):\n            dp[i][0] = min(dp[i][0], dp[i - 1][0] + ll - a0 + (a1 - m) * 2, dp[i - 1][1] + (ll - a0) * 2 + (a1 - m) * 2)\n            dp[i][1] = min(dp[i][1], dp[i - 1][0] + ll - a0 + a1 - m, dp[i - 1][1] + (ll - a0) * 2 + a1 - m)\n    print(min(dp[-1]))"]