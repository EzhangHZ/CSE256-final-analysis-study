["def solve():\n    input()\n    (n, k) = map(int, input().split())\n    f = list(enumerate(list(map(lambda x: int(x) - 1, input().split()))))\n    g = {i: [] for i in range(n)}\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        a -= 1\n        b -= 1\n        g[a].append(b)\n        g[b].append(a)\n    needed = {}\n    vlad = [0]\n    visited = [False] * n\n    friends = [-1] * n\n    while len(vlad):\n        nf = []\n        for (i, f1) in f:\n            if friends[f1] != -1:\n                continue\n            friends[f1] = i\n            for e in g[f1]:\n                nf.append((i, e))\n        f = nf\n        new_vlad = []\n        for v in vlad:\n            if friends[v] != -1:\n                needed[friends[v]] = True\n                continue\n            if visited[v] == True:\n                continue\n            visited[v] = True\n            if len(g[v]) == 1 and v != 0:\n                return -1\n            for e in g[v]:\n                new_vlad.append(e)\n        vlad = new_vlad\n    return len(needed)\nn = int(input())\nfor i in range(n):\n    print(solve())", "t = int(input())\nfor i in range(t):\n    a = input()\n    (n, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    for i in range(k):\n        x[i] -= 1\n    M = [list() for i in range(n)]\n    for i in range(n - 1):\n        (p, q) = map(int, input().split())\n        M[p - 1].append(q - 1)\n        M[q - 1].append(p - 1)\n    F = [-1] * n\n    (S, d) = (set(x), 0)\n    while len(S) > 0:\n        T = set()\n        for j in S:\n            F[j] = d\n        for j in S:\n            for q in M[j]:\n                if F[q] == -1:\n                    T.add(q)\n        S = T | set()\n        d += 1\n    V = [-1] * n\n    (S, d, ret) = (set([0]), 0, 0)\n    while len(S) > 0:\n        T = set()\n        for j in S:\n            V[j] = d\n        for j in S:\n            for q in M[j]:\n                if V[q] == -1:\n                    if F[q] > d + 1:\n                        T.add(q)\n                    else:\n                        ret += 1\n        S = T | set()\n        d += 1\n    M1 = []\n    for i in range(1, n):\n        if len(M[i]) == 1:\n            M1.append(i)\n    bol = False\n    for i in M1:\n        if F[i] > V[i] and V[i] != -1:\n            bol = True\n            break\n    if bol:\n        print(-1)\n    else:\n        print(ret)", "def solve():\n    input()\n    (n, k) = map(int, input().split())\n    f = list(enumerate(list(map(lambda x: int(x) - 1, input().split()))))\n    g = {i: [] for i in range(n)}\n    for i in range(n - 1):\n        (a, b) = map(int, input().split())\n        a -= 1\n        b -= 1\n        g[a].append(b)\n        g[b].append(a)\n    needed = {}\n    vlad = [0]\n    visited = [False] * n\n    friends = [-1] * n\n    while len(vlad):\n        nf = []\n        for (i, f1) in f:\n            if friends[f1] != -1:\n                continue\n            friends[f1] = i\n            nf += [(i, e) for e in g[f1]]\n        f = nf\n        new_vlad = []\n        for v in vlad:\n            if friends[v] != -1:\n                needed[friends[v]] = True\n                continue\n            if visited[v]:\n                continue\n            visited[v] = True\n            if len(g[v]) == 1 and v:\n                return -1\n            new_vlad += [e for e in g[v]]\n        vlad = new_vlad\n    return len(needed)\nfor i in range(int(input())):\n    print(solve())"]