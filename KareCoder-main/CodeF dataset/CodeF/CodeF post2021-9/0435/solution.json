["def moze(v, r, n):\n    s = 0\n    for i in range(n):\n        if r[i] - v < 0:\n            s += (-r[i] + v) // 2\n        else:\n            s -= r[i] - v\n    if s >= 0:\n        return True\n    return False\n\ndef nadji(r, n, m):\n    l = (m - 1) // n + 1\n    right = 2 * l\n    iz = -1\n    while l <= right:\n        sredina = (l + right) // 2\n        if moze(sredina, r, n):\n            right = sredina - 1\n            iz = sredina\n            continue\n        else:\n            l = sredina + 1\n    return iz\n\ndef resi():\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    r = [0] * n\n    for i in range(m):\n        r[a[i] - 1] += 1\n    print(nadji(r, n, m))\nfor _ in range(int(input())):\n    resi()", "tc = int(input())\nwhile tc > 0:\n    A = [int(i) for i in input().split(' ')]\n    B = [int(i) for i in input().split(' ')]\n    n = A[0]\n    m = A[1]\n    w = [0 for i in range(n)]\n    for i in B:\n        w[i - 1] += 1\n    ans = 0\n    while m != 0:\n        w.sort(reverse=True)\n        for i in range(n):\n            if m > 0 and w[i] > 0:\n                w[i] = w[i] - 1\n                m = m - 1\n            elif m > 0:\n                if type(w[i]) == int:\n                    m = m - 1\n                    w[i] = w[i] - 1.0\n                else:\n                    w[i] = int(w[i])\n            else:\n                w[i] = int(w[i])\n        ans += 1\n    if type(sum(w)) == int:\n        print(ans)\n    else:\n        print(ans + 1)\n    tc = tc - 1", "tc = int(input())\nwhile tc > 0:\n    A = [int(i) for i in input().split(' ')]\n    B = [int(i) for i in input().split(' ')]\n    n = A[0]\n    m = A[1]\n    w = [0 for i in range(n)]\n    for i in B:\n        w[i - 1] += 1\n    ans = 0\n    while m != 0:\n        w.sort(reverse=True)\n        for i in range(n):\n            if m > 0 and w[i] > 0:\n                w[i] = w[i] - 1\n                m = m - 1\n            elif m > 0:\n                if type(w[i]) == int:\n                    m = m - 1\n                    w[i] = w[i] - 1.0\n                else:\n                    w[i] = int(w[i])\n            else:\n                w[i] = int(w[i])\n        ans += 1\n    if type(sum(w)) == int:\n        print(ans)\n    else:\n        print(ans + 1)\n    tc = tc - 1", "def solve(n, m, pros):\n    prof = [0 for i in range(n)]\n    for _pro in pros:\n        prof[_pro - 1] += 1\n    for t in range(0, m * 2 + 1):\n        capacity = 0\n        for w in range(n):\n            prof_completed = min(t, prof[w])\n            non_prof_completed = 0\n            if prof_completed < t:\n                non_prof_completed = (t - prof_completed) // 2\n            capacity += non_prof_completed + prof_completed\n        if capacity >= m:\n            return t\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split(' '))\n    print(solve(n, m, map(int, input().split(' '))))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [0] * n\n    for i in list(map(int, input().split())):\n        l[i - 1] += 1\n    cur = 0\n    time = 0\n    while m > 0:\n        time += 1\n        num = 0\n        for i in range(n):\n            if l[i] != 0 and num < m:\n                l[i] -= 1\n                num += 1\n        m -= num\n        x = n - num - cur\n        cur = min(m, x)\n        m -= cur\n    if cur != 0:\n        time += 1\n    print(time)", "from heapq import *\nfrom collections import Counter, defaultdict\n\ndef isPos(cnt, x):\n    rem = 0\n    for i in range(len(cnt)):\n        if cnt[i] > x:\n            rem += (cnt[i] - x) * 2\n        elif x - cnt[i] >= 2:\n            rem -= (x - cnt[i]) // 2 * 2\n            if rem <= 0:\n                return True\n    return rem == 0\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    cnt = [0 for i in range(n)]\n    for i in a:\n        cnt[i - 1] += 1\n    cnt.sort(reverse=True)\n    (low, high) = (cnt[-1], cnt[0])\n    while low < high:\n        mid = (low + high) // 2\n        if not isPos(cnt, mid):\n            low = mid + 1\n        else:\n            high = mid\n    print(high)", "T = int(input())\nwhile T:\n    T -= 1\n    (n, m) = map(int, input().split())\n    freq = [0] * n\n    arr = list(map(int, input().split()))\n    for ele in arr:\n        freq[ele - 1] += 1\n    count = [0] * (m + 1)\n    for fre in freq:\n        count[fre] += 1\n    for i in range(1, m + 1):\n        count[i] += count[i - 1]\n    done = 0\n    prev = 0\n    for hr in range(1, m + 1):\n        done = done + prev + (n - count[hr - 1])\n        if done >= m:\n            break\n        prev = count[hr - 1] - prev\n    print(hr)", "def solve(n: int, m: int, arr):\n    counter = [0 for _ in range(n + 1)]\n    for val in arr:\n        counter[val] += 1\n    minimal_time = 0\n    maximal_time = len(arr) // n * 2 + 5\n    while maximal_time - minimal_time > 1:\n        time = (maximal_time + minimal_time) // 2\n        amount_of_task_solved = 0\n        for i in range(1, n + 1):\n            solved = min(time, counter[i])\n            if solved < time:\n                solved += (time - solved) // 2\n            amount_of_task_solved += solved\n        if amount_of_task_solved >= m:\n            maximal_time = time\n        else:\n            minimal_time = time\n    return maximal_time\nT = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(solve(n, m, arr))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dela = [0] * n\n    for x in a:\n        dela[x - 1] += 1\n    dela.sort()\n    skol = [0] * (dela[-1] + 1)\n    s = 0\n    kol = n\n    for x in range(len(dela)):\n        if dela[x] != s:\n            skol[s] = kol\n            kol = n - x\n            for y in range(s + 1, dela[x] + 1):\n                skol[y] = kol\n            s = dela[x]\n    skol[-1] = kol\n    S = m\n    ph = [None] * len(skol)\n    ph[0] = 0\n    for x in range(1, len(skol)):\n        ph[x] = n - ph[x - 1] - skol[x]\n    for x in range(len(skol) - 1, -1, -1):\n        S += skol[x]\n        if n * (x - 1) - ph[x - 1] < S:\n            print(x)\n            break", "def check(time):\n    total = 0\n    for i in range(1, n + 1):\n        if workers[i] >= time:\n            total -= workers[i] - time\n        else:\n            total += (time - workers[i]) // 2\n    if total >= 0:\n        return True\n    else:\n        return False\n\ndef search(left, right):\n    while left <= right:\n        mid = (left + right) // 2\n        if check(mid) and (not check(mid - 1)):\n            return mid\n        elif check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\nT = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    good = list(map(int, input().split()))\n    workers = dict()\n    for i in range(1, n + 1):\n        workers[i] = 0\n    for person in good:\n        workers[person] += 1\n    print(search(1, 4 * m // n))", "import heapq\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    st = [0 for _ in range(n)]\n    for v in a:\n        st[v - 1] += 1\n    mv = max(st)\n    z = [0 for _ in range(mv + 1)]\n    for v in st:\n        z[v] += 1\n    l = 0\n    r = mv\n    while r - l > 2:\n        if z[l] == 0:\n            l += 1\n        elif z[r] == 0:\n            r -= 1\n        else:\n            z[r] -= 1\n            z[r - 1] += 1\n            z[l] -= 1\n            z[l + 2] += 1\n    for r in range(mv, -1, -1):\n        if z[r] > 0:\n            print(r)\n            break", "from heapq import heappop, heappush, heapify\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (minheap, maxheap) = ([0] * n, [0] * n)\n    for i in a:\n        minheap[i - 1] += 1\n        maxheap[i - 1] -= 1\n    heapify(minheap)\n    heapify(maxheap)\n    if minheap[0] == -maxheap[0]:\n        print(minheap[0])\n        continue\n    while -maxheap[0] - minheap[0] > 2:\n        (maxe, mine) = (heappop(maxheap), heappop(minheap))\n        heappush(maxheap, maxe + 1)\n        heappush(minheap, mine + 2)\n    print(-maxheap[0])", "def get_sum_strength(tasks, hours):\n    s_sum = 0\n    for task in tasks:\n        s_sum += min(task, hours) + int(0.5 * max(hours - task, 0))\n    return s_sum\nfor _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    a = list(map(lambda x: int(x) - 1, input().split()))\n    tasks = [0] * n\n    for task in a:\n        tasks[task] += 1\n    (l, r) = (1, int(2 * m / n) + 1)\n    hours = (l + r) // 2\n    s_sum = get_sum_strength(tasks, hours)\n    while not l == r:\n        if s_sum < m:\n            l = hours + 1\n        else:\n            r = hours\n        hours = (l + r) // 2\n        s_sum = get_sum_strength(tasks, hours)\n    print(hours)", "def solve(d):\n    total = sum((d if x > d else x + (d - x) // 2 for x in c))\n    return total >= m\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    c = [0] * n\n    for x in map(int, input().split()):\n        c[x - 1] += 1\n    low = 0\n    high = max(c)\n    while high - low > 1:\n        mid = (high + low) // 2\n        if solve(mid):\n            high = mid\n        else:\n            low = mid\n    print(high)", "def solve(d):\n    total = sum((d if x > d else x + (d - x) // 2 for x in c))\n    return total >= m\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    c = [0] * n\n    for x in map(int, input().split()):\n        c[x - 1] += 1\n    low = 0\n    high = max(c)\n    while high - low > 1:\n        mid = (high + low) // 2\n        if solve(mid):\n            high = mid\n        else:\n            low = mid\n    print(high)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    c = [0] * n\n    nums = map(int, input().split())\n    for i in nums:\n        c[i - 1] += 1\n    low = 0\n    high = max(c)\n    while high - low > 1:\n        mid = (high + low) // 2\n        if sum((mid if x >= mid else x + (mid - x) // 2 for x in c)) >= m:\n            high = mid\n        else:\n            low = mid\n    print(high)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    arr = [0] * n\n    for x in a:\n        arr[x - 1] += 1\n    l = 1\n    r = max(arr)\n\n    def can(time):\n        remain = 0\n        for x in arr:\n            if x >= time:\n                remain += x - time\n            else:\n                remain -= (time - x) // 2\n        if remain <= 0:\n            return True\n        else:\n            return False\n    while l <= r:\n        mid = (l + r) // 2\n        if can(mid):\n            r = mid - 1\n        else:\n            l = mid + 1\n    print(l)", "def b(t):\n    bal = 0\n    for i in f:\n        if i >= t:\n            bal += i - t\n        else:\n            bal -= (t - i) // 2\n    return bal <= 0\nout = []\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    f = [0] * n\n    for i in a:\n        f[i - 1] += 1\n    l = 0\n    r = 2 * m\n    while r - l > 1:\n        mid = (r + l) // 2\n        if not b(mid):\n            l = mid\n        else:\n            r = mid\n    out.append(r)\nfor i in out:\n    print(i)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    c = [0] * n\n    for x in map(int, input().split()):\n        c[x - 1] += 1\n    low = 0\n    high = max(c)\n    while high - low > 1:\n        d = (high + low) // 2\n        if sum((d if x > d else x + (d - x) // 2 for x in c)) >= m:\n            high = d\n        else:\n            low = d\n    print(high)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    c = [0] * n\n    nums = map(int, input().split())\n    for i in nums:\n        c[i - 1] += 1\n    low = 0\n    high = max(c)\n    while high - low > 1:\n        mid = (high + low) // 2\n        if sum((mid if x >= mid else x + (mid - x) // 2 for x in c)) >= m:\n            high = mid\n        else:\n            low = mid\n    print(high)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [0 for i in range(1, n + 1, 1)]\n    for i in range(m):\n        b[a[i] - 1] += 1\n    t = max(b)\n    l = 0\n    while t - l > 1:\n        mid = (l + t) // 2\n        if sum((mid if x > mid else x + (mid - x) // 2 for x in b)) >= m:\n            t = mid\n        else:\n            l = mid\n    print(t)", "for h in range(int(input())):\n    (n, m) = map(int, input().split())\n    x = list(map(int, input().split()))\n    vec = [0] * n\n    for i in x:\n        vec[i - 1] += 1\n    vec.sort(reverse=True)\n    (l, r) = (0, m * 2)\n    v = m * 2\n    while l <= r:\n        m = (l + r) // 2\n        ct = 0\n        for i in vec:\n            if i > m:\n                ct += i - m\n            elif ct > 0 and i < m:\n                ct = max(ct - (m - i) // 2, 0)\n        if ct == 0:\n            r = m - 1\n            v = min(v, m)\n        else:\n            l = l + 1\n    print(v)", "MOD = 10 ** 9 + 7\nfac_mem = [1]\n\ndef fac(n):\n    while len(fac_mem) < n + 1:\n        fac_mem.append(fac_mem[-1] * len(fac_mem) % MOD)\n    return fac_mem[n]\n\ndef perm(n, k):\n    return fac(n) * pow(fac(k), MOD - 2, MOD) % MOD\n\ndef comb(n, k):\n    return fac(n) * pow(fac(k) * fac(n - k) % MOD, MOD - 2, MOD) % MOD\n\nclass Tree:\n\n    def __init__(self, id):\n        self.id = id\n        self.parent = None\n        self.children = []\n\n    def __repr__(self):\n        if self.children:\n            return f'{self.id} -> [' + ', '.join((str(c) for c in self.children)) + ']'\n        else:\n            return str(self.id)\nfor case in range(int(input())):\n    (n, m) = [int(j) for j in input().split()]\n    a = [int(j) for j in input().split()]\n    l = [0] * n\n    for i in a:\n        l[i - 1] += 1\n    l = sorted(l)\n    a = 0\n    b = m\n    while a != b:\n        mid = (a + b) // 2\n        ones = 0\n        twos = 0\n        for i in l:\n            if i > mid:\n                ones += i - mid\n            else:\n                twos += (mid - i) // 2\n        if twos < ones:\n            a = mid + 1\n        else:\n            b = mid\n    print(a)", "for h in range(int(input())):\n    (n, m) = map(int, input().split())\n    x = list(map(int, input().split()))\n    z = [0] * n\n    for i in x:\n        z[i - 1] += 1\n    z.sort(reverse=True)\n    (l, r) = (0, m * 2)\n    v = m * 2\n    while l <= r:\n        m = (l + r) // 2\n        c = 0\n        for i in z:\n            if i > m:\n                c += i - m\n            elif i < m and c > 0:\n                c = max(0, c - (m - i) // 2)\n        if c == 0:\n            v = min(v, m)\n            r = m - 1\n        else:\n            l = l + 1\n    print(v)", "def helper(p, t, n):\n    rem = 0\n    for i in range(n):\n        if p[i] > t:\n            rem = rem + (p[i] - t)\n        else:\n            v = (t - p[i]) // 2\n            rem = rem - v\n    return rem <= 0\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    p = [0] * m\n    for i in range(m):\n        p[arr[i] - 1] += 1\n    l = 0\n    r = m * 2\n    while l < r:\n        mid = (l + r) // 2\n        if helper(p, mid, n):\n            r = mid\n        else:\n            l = mid + 1\n    print(l)", "from collections import defaultdict\nfrom sys import stdin\ninput = stdin.readline\n\ndef ch(x):\n    ans = 0\n    res = 0\n    for i in range(n):\n        if x >= d[i]:\n            ans += (x - d[i]) // 2\n        else:\n            res += d[i] - x\n    return ans >= res\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = [0] * n\n    f = list(map(int, input().split()))\n    for i in f:\n        d[i - 1] += 1\n    l = 0\n    r = 2 * m\n    while l < r:\n        mid = l + r >> 1\n        if ch(mid):\n            r = mid\n        else:\n            l = mid + 1\n    print(l)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    cnt = [0] * n\n    for i in list(map(int, input().split())):\n        cnt[i - 1] += 1\n    (lo, hi) = (0, max(cnt))\n    while lo < hi:\n        mid = lo + hi >> 1\n        s = 0\n        for i in cnt:\n            if i > mid:\n                s += mid\n            else:\n                s += i + (mid - i) // 2\n        if s >= m:\n            hi = mid\n        else:\n            lo = mid + 1\n    print(hi)", "import heapq\nt = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().strip().split(' ')))\n    p = list(map(int, input().strip().split(' ')))\n    hours = [0 for _ in range(n)]\n    for item in p:\n        hours[item - 1] += 1\n    min_heap = []\n    max_heap = []\n    for (i, item) in enumerate(hours):\n        heapq.heappush(min_heap, (item, i + 1))\n        heapq.heappush(max_heap, (-item, i + 1))\n    (min_hour, min_worker) = heapq.heappop(min_heap)\n    (max_hour, max_worker) = heapq.heappop(max_heap)\n    max_hour = abs(max_hour)\n    while max_hour - 1 >= min_hour + 2:\n        max_hour -= 1\n        min_hour += 2\n        heapq.heappush(max_heap, (-max_hour, max_worker))\n        heapq.heappush(min_heap, (min_hour, min_worker))\n        (min_hour, min_worker) = heapq.heappop(min_heap)\n        (max_hour, max_worker) = heapq.heappop(max_heap)\n        max_hour = abs(max_hour)\n    print(max_hour)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = [0] * n\n    for i in l:\n        d[i - 1] += 1\n    t = sorted(d)\n    ans = max(t)\n    i = 0\n    j = t[-1]\n    while i <= j:\n        md = (i + j) // 2\n        a = 0\n        b = 0\n        for x in t:\n            if x > md:\n                a += x - md\n            elif x < md:\n                b += (md - x) // 2\n        if a <= b:\n            ans = min(ans, md)\n            j = md - 1\n        else:\n            i = md + 1\n    print(ans)", "class ScheduleManagement:\n\n    def __init__(self, n, m, a):\n        self.n = n\n        self.m = m\n        self.a = a\n        self.cnt = [0] * self.n\n        for i in self.a:\n            self.cnt[i - 1] += 1\n\n    def isPossible(self, t):\n        work2hr = 0\n        work1hr = 0\n        for i in range(self.n):\n            if t > self.cnt[i]:\n                work2hr += (t - self.cnt[i]) // 2\n            else:\n                work1hr += self.cnt[i] - t\n        if work2hr >= work1hr:\n            return True\n        return False\n\n    def solve(self):\n        l = 0\n        r = 2 * self.m\n        result = 2 * self.m\n        while l <= r:\n            m = (l + r) // 2\n            if self.isPossible(m):\n                result = m\n                r = m - 1\n            else:\n                l = m + 1\n        print(result)\n        return\nT = int(input())\nwhile T:\n    T -= 1\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ScheduleManagement(n, m, a).solve()", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    worker = [0] * n\n    for x in a:\n        worker[x - 1] += 1\n    high = max(worker)\n    low = 0\n    while low <= high:\n        mid = low + (high - low) // 2\n        tasks = 0\n        for x in worker:\n            if x >= mid:\n                tasks += mid\n            else:\n                tasks += x + (mid - x) // 2\n        if tasks >= m:\n            high = mid - 1\n        else:\n            low = mid + 1\n    print(low)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    tmp = [0] * n\n    for num in nums:\n        tmp[num - 1] += 1\n    (l, r) = (1, m * 2)\n    while l <= r:\n        m = (l + r) // 2\n        unperformed_nonproficient_work = 0\n        res_time = 0\n        for x in tmp:\n            if x > m:\n                unperformed_nonproficient_work += x - m\n            else:\n                y = m - x\n                res_time += y // 2\n        if res_time >= unperformed_nonproficient_work:\n            r = m - 1\n        else:\n            l = m + 1\n    print(l)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    cnt = [0] * n\n    for i in list(map(int, input().split())):\n        cnt[i - 1] += 1\n    (lo, hi) = (0, max(cnt))\n    while lo < hi:\n        mid = lo + hi >> 1\n        s = 0\n        for i in cnt:\n            if i > mid:\n                s += mid\n            else:\n                s += i + (mid - i) // 2\n        if s >= m:\n            hi = mid\n        else:\n            lo = mid + 1\n    print(hi)", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    p = [0] * n\n    for i in arr:\n        p[i - 1] += 1\n    l = 0\n    r = 2 * m\n    while l < r:\n        x = (l + r) // 2\n        done = 0\n        for i in p:\n            if i <= x:\n                done += i + (x - i) // 2\n            else:\n                done += x\n        if done >= m:\n            r = x\n        else:\n            l = x + 1\n    print(l)", "t = int(input())\nwhile t:\n    s = input().split()\n    (n, m) = map(int, s)\n    s = input().split()\n    a = list(map(lambda x: int(x) - 1, s))\n    cnt = {i: 0 for i in range(n)}\n    for i in a:\n        cnt[i] += 1\n\n    def isvalid(x):\n        extra = 0\n        helpn = 0\n        for i in range(n):\n            if x > cnt[i]:\n                extra += (x - cnt[i]) // 2\n            else:\n                helpn += cnt[i] - x\n        if extra >= helpn:\n            return True\n        else:\n            return False\n    (low, high) = (1, 2 * m)\n    while low < high:\n        mid = (low + high) // 2\n        if isvalid(mid):\n            high = mid\n            ans = mid\n        else:\n            low = mid + 1\n            ans = low\n    print(ans)\n    t -= 1", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    cnt = [0] * n\n    for i in list(map(int, input().split())):\n        cnt[i - 1] += 1\n    (lo, hi) = (0, max(cnt))\n    while lo < hi:\n        mid = lo + hi >> 1\n        s = 0\n        for i in cnt:\n            if i > mid:\n                s += mid\n            else:\n                s += i + (mid - i) // 2\n        if s >= m:\n            hi = mid\n        else:\n            lo = mid + 1\n    print(hi)", "from turtle import left\nt = int(input())\n\ndef validate(n, m, a, q):\n    workers = [0 for _ in range(n)]\n    left_over = 0\n    for i in range(m):\n        wi = a[i] - 1\n        if workers[wi] < q:\n            workers[wi] += 1\n        else:\n            left_over += 1\n    for i in range(n):\n        left_over -= (q - workers[i]) // 2\n        if left_over <= 0:\n            break\n    if left_over <= 0:\n        return True\n    else:\n        return False\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    low = 1\n    high = 4 * 10 ** 5\n    while low <= high:\n        mid = (high + low) // 2\n        if validate(n, m, a, mid):\n            high = mid - 1\n        else:\n            low = mid + 1\n    print(low)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    p = [0] * n\n    for i in arr:\n        p[i - 1] += 1\n    l = 0\n    r = 2 * m\n    while l < r:\n        x = (l + r) // 2\n        done = 0\n        for i in p:\n            if i <= x:\n                done += i + (x - i) // 2\n            else:\n                done += x\n        if done >= m:\n            r = x\n        else:\n            l = x + 1\n    print(l)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mp = {i: 0 for i in range(1, n + 1)}\n    a = list(map(int, input().split()))\n    for v in a:\n        mp[v] += 1\n\n    def check(time):\n        t_c = 0\n        for k in mp:\n            if mp[k] > time:\n                t_c += time\n            else:\n                t_c += mp[k] + (time - mp[k]) // 2\n        return t_c >= m\n    (low, high) = (1, m * 2)\n    while low <= high:\n        mid = (low + high) // 2\n        if check(mid):\n            high = mid - 1\n        else:\n            low = mid + 1\n    print(high + 1)", "test = int(input())\nfor t in range(test):\n    (n, m) = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    counter = [0] * n\n    for num in nums:\n        counter[num - 1] += 1\n    minimum = 1\n    maximum = 2 * m\n    ans = maximum\n    while minimum <= maximum:\n        mid = (minimum + maximum) // 2\n        left = 0\n        help = 0\n        for i in range(n):\n            if mid > counter[i]:\n                help += (mid - counter[i]) // 2\n            else:\n                left += counter[i] - mid\n        flag = help >= left\n        if flag:\n            ans = mid\n            maximum = mid - 1\n        else:\n            minimum = mid + 1\n    print(ans)", "a = []\n(n, m) = (0, 0)\n\ndef bis(lef, rig):\n    if rig - lef == 1:\n        return rig\n    time = [0] * n\n    mid = lef + (rig - lef) // 2\n    surp = 0\n    for i in a:\n        if time[i - 1] < mid:\n            time[i - 1] += 1\n        else:\n            surp += 1\n    for i in time:\n        surp -= (mid - i) // 2\n    if surp <= 0:\n        return bis(lef, mid)\n    else:\n        return bis(mid, rig)\nt = int(input())\nfor i in range(t):\n    [n, m] = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    print(int(bis(0, m * 2)))", "from cmath import *\nfrom decimal import *\nfrom re import I\nimport sys\ninput_ = sys.stdin.readline\n\ndef _input():\n    return map(int, input().split())\n\ndef _list():\n    return list(map(int, input().split()))\n\ndef solves():\n    (n, m) = _input()\n    a = _list()\n    cnt = [0] * n\n    for i in a:\n        cnt[i - 1] += 1\n    (ng, ok) = (0, max(cnt))\n    while ok - ng > 1:\n        m = (ng + ok) // 2\n        b = 0\n        for i in cnt:\n            b += max(0, i - m)\n        for i in cnt:\n            if i < m:\n                b -= (m - i) // 2\n        if b > 0:\n            ng = m\n        else:\n            ok = m\n    print(ok)\nt = 1\nt = int(input())\nfor _ in range(0, t):\n    solves()", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom collections import deque\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    (p, n) = int_arr()\n    arr = int_arr()\n    task = [0 for i in range(p)]\n    for i in arr:\n        task[i - 1] += 1\n    k = 1\n    j = 200001\n    ans = float('inf')\n    while k <= j:\n        mid = (k + j) // 2\n        extra = 0\n        need = 0\n        for i in range(p):\n            if mid - task[i] >= 0:\n                extra += (mid - task[i]) // 2\n            else:\n                need += mid - task[i]\n        if extra + need >= 0:\n            ans = min(ans, mid)\n            j = mid - 1\n        else:\n            k = mid + 1\n    print(ans)", "T = int(input())\nfor t in range(0, T):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    hm = [0 for i in range(0, n)]\n    for item in a:\n        hm[item - 1] += 1\n    l = 0\n    r = m\n    while l <= r:\n        need_help = 0\n        give_help = 0\n        mid = (l + r) // 2\n        for i in range(0, n):\n            if hm[i] - mid > 0:\n                need_help += hm[i] - mid\n            else:\n                give_help = give_help + (mid - hm[i]) // 2\n        if give_help >= need_help:\n            ans = mid\n            r = mid - 1\n        else:\n            l = mid + 1\n    print(ans)", "t = int(input())\nwhile t:\n    (n, m) = list(map(int, input().split()))\n    lst = list(map(int, input().split()))\n    a = [0 for i in range(n + 1)]\n    for k in lst:\n        a[k] += 1\n    up = 2 * m\n    low = 0\n    ans = 2 * m\n    while low <= up:\n        mid = low + (up - low) // 2\n        work = 0\n        time = 0\n        for i in range(1, n + 1):\n            if mid >= a[i]:\n                time += (mid - a[i]) // 2\n            else:\n                work += a[i] - mid\n        if time >= work:\n            up = mid - 1\n            ans = min(ans, mid)\n        else:\n            low = mid + 1\n    print(ans)\n    t -= 1", "def max_tasks_in_time(t):\n    can_complete = 0\n    for w in range(n):\n        tasks_as_profi = min(prof[w], t)\n        can_complete += tasks_as_profi + (t - tasks_as_profi) // 2\n    return can_complete\ntests = int(input())\nans = []\nfor _ in range(tests):\n    (n, m) = map(int, input().split(' '))\n    task_profi = input().split(' ')\n    prof = [0] * n\n    for (i, el) in enumerate(task_profi):\n        p = int(el)\n        prof[p - 1] += 1\n    l = 1\n    r = 2 * m\n    time = 10 ** 9\n    while l <= r:\n        t = (l + r) // 2\n        max_tasks = max_tasks_in_time(t)\n        if max_tasks >= m:\n            time = min(t, time)\n            r = t - 1\n        else:\n            l = t + 1\n    ans.append(time)\nfor i in ans:\n    print(i)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    d = dict([(i, 0) for i in range(1, n + 1)])\n    for i in arr:\n        d[i] += 1\n    (l, r) = (0, m)\n    while l < r:\n        x = (l + r) // 2\n        (t, w) = (0, 0)\n        for i in range(1, n + 1):\n            if d[i] <= x:\n                t += (x - d[i]) // 2\n            else:\n                w += d[i] - x\n        if t >= w:\n            r = x\n        else:\n            l = x + 1\n    print(l)", "test = int(input())\nwhile test:\n    (n, m) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    low = 1\n    high = 2 * m\n    work = [0] * (n + 1)\n    for i in a:\n        work[i] += 1\n    ans = 0\n    while low <= high:\n        mid = (low + high) // 2\n        left_task = 0\n        for i in range(1, n + 1):\n            if work[i] <= mid:\n                left_task -= (mid - work[i]) // 2\n            else:\n                left_task += work[i] - mid\n        if left_task <= 0:\n            ans = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    print(ans)\n    test -= 1", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m) = list(map(int, input().split()))\n    proficiency = list(map(int, input().split()))\n    lower = 1\n    upper = 2 * m\n    frequency = {}\n    for i in range(1, n + 1):\n        frequency[i] = 0\n    for x in proficiency:\n        frequency[x] += 1\n    ans = 0\n    while lower <= upper:\n        mid = (lower + upper) // 2\n        left = 0\n        helpOther = 0\n        for i in range(1, n + 1):\n            if mid > frequency[i]:\n                helpOther += (mid - frequency[i]) // 2\n            else:\n                left += frequency[i] - mid\n        if left <= helpOther:\n            upper = mid - 1\n            ans = mid\n        else:\n            lower = mid + 1\n    print(ans)", "q = int(input())\nfor _ in range(q):\n    (n, m) = map(int, input().split())\n    a = list(map(lambda x: int(x) - 1, input().split()))\n    b = [0] * n\n    for i in range(m):\n        b[a[i]] += 1\n    l = 0\n    r = 1000000\n    while r - l > 1:\n        m = (l + r) // 2\n        cnt = 0\n        for i in range(n):\n            if m > b[i]:\n                cnt += (m - b[i]) // 2\n            else:\n                cnt -= b[i] - m\n        if cnt >= 0:\n            r = m\n        else:\n            l = m\n    print(r)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = dict()\n    l = list(map(int, input().split()))\n    for i in range(1, n + 1):\n        d[i] = 0\n    for i in l:\n        d[i] += 1\n    mxt = m\n    lo = 1\n    hi = mxt\n    while lo < hi:\n        mid = (lo + hi) // 2\n        z = mid * 1\n        extra = 0\n        rem = 0\n        for k in d:\n            if z >= d[k]:\n                dif = z - d[k]\n                y = dif // 2\n                extra += y\n            else:\n                dif = d[k] - z\n                rem += dif\n        if extra >= rem:\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    (low, high) = (-1, m + 1)\n    while low < high - 1:\n        mid = (high + low) // 2\n        freq = [0] * n\n        for x in arr:\n            freq[x - 1] += 1\n        count = 0\n        for x in freq:\n            if mid <= x:\n                count += mid\n            else:\n                count += (mid + x) // 2\n        if count >= m:\n            high = mid\n        else:\n            low = mid\n    print(high)"]