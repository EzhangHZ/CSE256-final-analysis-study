["import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    (n, m) = map(int, sys.stdin.readline().split())\n    L = []\n    for i in range(n):\n        L.append(list(map(int, sys.stdin.readline().split())))\n    (i1, j1) = (0, 0)\n    for i in range(n):\n        for j in range(m):\n            if L[i][j] > L[i1][j1]:\n                (i1, j1) = (i, j)\n    print(max(i1 + 1, n - i1) * max(j1 + 1, m - j1))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    (mn, argmn) = (-10 ** 10, None)\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] > mn:\n                mn = a[i][j]\n                argmn = (i, j)\n    (r, c) = argmn\n    lr = max(c, m - c - 1)\n    tb = max(r, n - r - 1)\n    print((lr + 1) * (tb + 1))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m) = map(int, input().split())\n    arr = [list(map(int, input().split())) for _ in range(n)]\n    v = -float('inf')\n    point = [0, 0]\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] > v:\n                v = arr[i][j]\n                point = [i, j]\n    return max(point[0] + 1, n - point[0]) * max(point[1] + 1, m - point[1])\nfor _ in range(int(input())):\n    print(solve())", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    bo = []\n    for i in range(n):\n        bo.append(list(map(int, input().split())))\n    maxi = (-99 ** 99, (-1, -1))\n    for i in range(n):\n        maxi = max(maxi, (max(bo[i]), (i, bo[i].index(max(bo[i])))))\n    (r, c) = maxi[1]\n    print(max(r + 1, n - r) * max(c + 1, m - c))", "from os import error\nimport sys\ninput = sys.stdin.readline\nDEBUG = False\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef solve():\n    (n, m) = inlt()\n    (max_, pi, pj) = (-10 ** 9 - 3, 0, 0)\n    for i in range(n):\n        row = inlt()\n        for j in range(m):\n            if max_ < row[j]:\n                (max_, pi, pj) = (row[j], i, j)\n    pi += 1\n    pj += 1\n    sq1 = pi * pj\n    sq2 = pi * (m - pj + 1)\n    sq3 = (n - pi + 1) * pj\n    sq4 = (n - pi + 1) * (m - pj + 1)\n    return max([sq1, sq2, sq3, sq4])\nq = inp()\nfor t in range(q):\n    ans = solve()\n    print(ans)", "def num():\n    c = int(input())\n    return c\n\ndef stri():\n    c = str(input())\n    return c\n\ndef vector():\n    c = list(map(int, input().split()))\n    return c\n\ndef strvector():\n    c = list(map(str, input().split()))\n    return c\nimport math\n\ndef isprime(num):\n    a = 2\n    while a <= math.sqrt(num):\n        if num % a < 1:\n            return False\n        a = a + 1\n    return num > 1\nt = num()\nwhile t > 0:\n    t -= 1\n    (n, m) = vector()\n    arr = []\n    for i in range(n):\n        c = vector()\n        arr.append(c)\n    (x, y) = (0, 0)\n    maxi = float('-inf')\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] > maxi:\n                maxi = arr[i][j]\n                (x, y) = (i + 1, j + 1)\n    a = max(m - y + 1, y)\n    b = max(n - x + 1, x)\n    print(a * b)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nout = []\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    arr = []\n    max_ = -float('inf')\n    coords = []\n    for y in range(n):\n        arr.append([int(x) for x in input().split()])\n        for x in range(m):\n            if arr[y][x] > max_:\n                max_ = arr[y][x]\n                coords = [y, x]\n    out.append(str(max(coords[0] + 1, n - coords[0]) * max(coords[1] + 1, m - coords[1])) + '\\n')\nprint(''.join(out))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n    ma = a[0][0]\n    (x, y) = (0, 0)\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] > ma:\n                ma = a[i][j]\n                (x, y) = (i, j)\n    print(max(x + 1, n - x) * max(y + 1, m - y))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        b = list(map(int, input().split()))\n        a += [b]\n    c = []\n    for i in range(n):\n        c += [max(a[i])]\n    x = c.index(max(c))\n    y = a[x].index(max(c))\n    h = max(x + 1, n - x)\n    w = max(y + 1, m - y)\n    print(h * w)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = (0, 0)\n    maxc = (-10 ** 10, 0, 0)\n    for i in range(n):\n        x = list(map(int, input().split()))\n        for j in range(m):\n            if maxc[0] < x[j]:\n                maxc = [x[j], i + 1, j + 1]\n    h = max(maxc[1], n - maxc[1] + 1)\n    w = max(maxc[2], m - maxc[2] + 1)\n    print(h * w)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    ma = -1000000002\n    for j in range(n):\n        a.append(list(map(int, input().split())))\n    for j in range(n):\n        for k in range(m):\n            if a[j][k] > ma:\n                ma = a[j][k]\n                r = j\n                c = k\n    h = max(r + 1, n - r)\n    w = max(c + 1, m - c)\n    print(h * w)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mm = -1000000001\n    (x, y) = (0, 0)\n    for i in range(n):\n        a = [int(i) for i in input().split()]\n        aa = max(enumerate(a), key=lambda x: x[1])\n        if aa[1] > mm:\n            y = i + 1\n            x = aa[0] + 1\n            mm = aa[1]\n    print(max(x, m + 1 - x) * max(y, n + 1 - y))", "t = int(input())\nfor _ in range(t):\n    mx = -10 ** 9 - 1\n    mxi = 0\n    mxj = 0\n    (n, m) = map(int, input().split())\n    for i in range(n):\n        a = [int(i) for i in input().split()]\n        if max(a) > mx:\n            mx = max(a)\n            mxi = i\n            mxj = a.index(max(a))\n    l = max(m - 1 - mxj, mxj) + 1\n    s = max(n - 1 - mxi, mxi) + 1\n    print(s * l)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    z = []\n    for i in range(n):\n        z.append(list(map(int, input().split())))\n    mx = float('-inf')\n    for i in range(n):\n        for j in range(m):\n            if z[i][j] > mx:\n                mx = z[i][j]\n                ix = i\n                iy = j\n    x = max(ix + 1, n - ix)\n    b = max(iy + 1, m - iy)\n    print(x * b)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    max_idx = [0, 0]\n    x = None\n    for i in range(n):\n        itr = list(map(int, input().split()))\n        for j in range(m):\n            if x == None:\n                x = itr[j]\n            if itr[j] > x:\n                max_idx = [i, j]\n                x = itr[j]\n    print(max(max_idx[1] + 1, m - max_idx[1]) * max(max_idx[0] + 1, n - max_idx[0]))", "def area(A, n, m):\n    rw = 0\n    cl = 0\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] >= A[rw][cl]:\n                rw = i\n                cl = j\n    rw += 1\n    cl += 1\n    ans = max(rw * cl, rw * (m - cl + 1), (n - rw + 1) * (m - cl + 1), (n - rw + 1) * cl)\n    return ans\ntests = int(input())\nfor _ in range(tests):\n    (n, m) = map(int, input().split())\n    A = []\n    for i in range(n):\n        A.append(list(map(int, input().split())))\n    print(area(A, n, m))", "t = int(input())\nfor tt in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for mm in range(n)]\n    m1 = a[0][0]\n    k = [0, 0]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] > m1:\n                m1 = a[i][j]\n                k = [i, j]\n    print(max(k[0] + 1, n - k[0]) * max(k[1] + 1, m - k[1]))", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, input().split())))\n    curmax = -10 ** 9\n    indx = (0, 0)\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] > curmax:\n                curmax = matrix[i][j]\n                indx = (i, j)\n    (i, j) = (indx[0], indx[1])\n    print(max(i + 1, n - i) * max(j + 1, m - j))", "MAX = 10 ** 9 + 1\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    mat = []\n    mx = -MAX\n    mxIdx = (0, 0)\n    for i in range(n):\n        mat.append(list(map(int, input().split())))\n        for j in range(m):\n            if mat[i][j] > mx:\n                mxIdx = (i + 1, j + 1)\n                mx = mat[i][j]\n    if n == m == 1:\n        print(1)\n    else:\n        r = max(mxIdx[0], n - mxIdx[0] + 1)\n        c = max(mxIdx[1], m - mxIdx[1] + 1)\n        print(r * c)", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n    maxx = -999999999999\n    for i in arr:\n        for k in i:\n            maxx = max(maxx, k)\n    (indx, indy) = ([], [])\n    for i in range(len(arr)):\n        for k in range(len(arr[i])):\n            if arr[i][k] == maxx:\n                indx.append(i + 1)\n                indy.append(k + 1)\n    ans = 99999999999\n    for i in range(len(indx)):\n        ans = min(ans, max(indx[i], n - indx[i] + 1) * max(m - indy[i] + 1, indy[i]))\n    print(ans)", "t = int(input())\nanss = []\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    maxi = 0\n    maxi_loc = None\n    for i in range(n):\n        row = list(map(int, input().split()))\n        for j in range(len(row)):\n            if maxi_loc is None or row[j] > maxi:\n                maxi = row[j]\n                maxi_loc = (i, j)\n    anss.append(max(maxi_loc[0] + 1, n - maxi_loc[0]) * max(maxi_loc[1] + 1, m - maxi_loc[1]))\n[print(ans) for ans in anss]", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        row = list(map(int, input().split()))\n        matrix.append(row)\n    cm = []\n    M = float('-inf')\n    for i in range(n):\n        for j in range(m):\n            if M < matrix[i][j]:\n                cm = [i, j]\n                M = matrix[i][j]\n    mr = max(cm[0] + 1, n - cm[0])\n    mc = max(cm[1] + 1, m - cm[1])\n    ans = mr * mc\n    print(ans)\n    t = t - 1", "n = int(input())\nfor _ in range(n):\n    (a, b) = map(int, input().split())\n    q = [''] * a\n    c = -100000000000.0\n    (xx, yy) = (0, 0)\n    for i in range(a):\n        w = list(map(int, input().split()))\n        q[i] = w[:]\n        c = max(c, max(w))\n        if c == max(w):\n            xx = i\n            yy = w.index(c)\n    dx = max(xx, a - 1 - xx) + 1\n    dy = max(yy, b - 1 - yy) + 1\n    print(dx * dy)", "for q in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    arr = []\n    mx = -float('inf')\n    for i in range(n):\n        temp = [int(x) for x in input().split()]\n        arr.append(temp)\n        mx = max(mx, max(temp))\n    (x, y) = (-1, -1)\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] == mx:\n                (x, y) = (i + 1, j + 1)\n                break\n    x = max(x, n - x + 1)\n    y = max(y, m - y + 1)\n    print(x * y)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    l = []\n    for i in range(a):\n        l.append(list(map(int, input().split())))\n    maxi = -1000000000.0 - 1\n    (x, y) = (0, 0)\n    for i in range(a):\n        for j in range(b):\n            if l[i][j] > maxi:\n                maxi = l[i][j]\n                (x, y) = (i, j)\n    print(max(a - x, x + 1) * max(b - y, y + 1))", "import math\n\ndef readArr():\n    return list(map(int, input().split()))\n\ndef readInt():\n    return int(input())\n\ndef solve():\n    (n, m) = readArr()\n    maxi = -10 ** 9\n    (x, y) = (-1, -1)\n    for i in range(n):\n        cur = readArr()\n        for j in range(m):\n            if cur[j] >= maxi:\n                (x, y) = (i, j)\n                maxi = cur[j]\n    print(max(x + 1, n - x) * max(y + 1, m - y))\nt = readInt()\nfor i in range(t):\n    solve()", "t = int(input())\nfor TC in range(t):\n    (n, m) = map(int, input().split())\n    board = []\n    for i in range(n):\n        board.append([int(x) for x in input().split()])\n    mx = (0, 0)\n    for r in range(len(board)):\n        for c in range(len(board[r])):\n            if board[r][c] > board[mx[0]][mx[1]]:\n                mx = (r, c)\n    print(max(m - mx[1], mx[1] + 1) * max(n - mx[0], mx[0] + 1))", "import math\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    maxi = -math.inf\n    i1 = 0\n    j1 = 0\n    for i in range(n):\n        l1 = list(map(int, input().split()))\n        for j in range(m):\n            if l1[j] >= maxi:\n                maxi = l1[j]\n                i1 = i\n                j1 = j\n    i1 += 1\n    j1 += 1\n    newi = max(i1, n - i1 + 1)\n    newj = max(j1, m - j1 + 1)\n    print(newi * newj)", "def solve():\n    (n, m) = map(int, input().split())\n    mat = []\n    for i in range(n):\n        mat.append(list(map(int, input().split())))\n    maxx = -100000000000\n    for i in range(n):\n        for j in range(m):\n            if maxx < mat[i][j]:\n                maxx = mat[i][j]\n                maxi = i\n                maxj = j\n    h = max(maxi + 1, n - maxi)\n    w = max(maxj + 1, m - maxj)\n    print(h * w)\nt = int(input())\nfor i in range(t):\n    solve()", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    a = []\n    for _ in range(n):\n        a += [int(x) for x in input().split()]\n    idx = a.index(max(a))\n    (i, j) = (idx // m, idx % m)\n    b = max(j + 1, m - j)\n    h = max(i + 1, n - i)\n    print(b * h)", "import math\nt = int(input())\nwhile t:\n    t -= 1\n    (h, i) = input().split()\n    a = int(h)\n    b = int(i)\n    tab = []\n    for i in range(0, a):\n        lis = input().split()\n        tab.append([int(x) for x in lis])\n    ma = max(max(tab, key=max))\n    for ind in range(0, a):\n        if ma in tab[ind]:\n            col = tab[ind].index(ma) + 1\n            row = ind + 1\n            break\n    print(max(row, a - row + 1) * max(col, b - col + 1))", "T = int(input())\nq = []\nfor i in range(T):\n    x = input().split()\n    (a, b) = (int(x[0]), int(x[1]))\n    data = []\n    for i in range(a):\n        temp = [int(i) for i in input().split()]\n        data.append(temp)\n    q.append((a, b, data))\n\ndef solve(a, b, data):\n    i_max = 0\n    j_max = 0\n    maxx = -1000000000.0\n    for i in range(a):\n        for j in range(b):\n            if maxx < data[i][j]:\n                maxx = data[i][j]\n                i_max = i\n                j_max = j\n    i_max += 1\n    j_max += 1\n    if i_max > a / 2:\n        h = i_max\n    else:\n        h = a - i_max + 1\n    if j_max > b / 2:\n        w = j_max\n    else:\n        w = b - j_max + 1\n    print(w * h)\nfor (a, b, data) in q:\n    solve(a, b, data)", "def solve(mat):\n    mx = max(map(max, mat))\n    (x, y) = (-1, -1)\n    for i in range(len(mat)):\n        for j in range(len(mat[0])):\n            if mat[i][j] == mx:\n                x = i\n                y = j\n    w = max(x + 1, len(mat) - x)\n    h = max(y + 1, len(mat[0]) - y)\n    return w * h\nt = int(input())\nfor i in range(t):\n    (n, m) = list(map(int, input().split()))\n    mat = []\n    for i in range(n):\n        mat.append(list(map(int, input().split())))\n    print(solve(mat))", "import math\n\ndef solve(n, m, arr):\n    if n == 1 and m == 1:\n        return 1\n    else:\n        p = getMax(n, m, arr)\n        return max(p[1] + 1, n - p[1]) * max(p[2] + 1, m - p[2])\n\ndef getMax(n, m, arr):\n    a = -999999999\n    (x, y) = (0, 0)\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] > a:\n                a = arr[i][j]\n                (x, y) = (i, j)\n    return (a, x, y)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        a = list(map(int, input().split()))\n        arr += [a]\n    print(solve(n, m, arr))", "t = int(input())\nfor i in range(t):\n    a = []\n    b = []\n    (i1, i2) = (0, 0)\n    low = -10 ** 9\n    (n, m) = [int(x) for x in input().split()]\n    for j in range(n):\n        b = list(map(int, input().split()))\n        a.append(b)\n        for k in range(m):\n            if low <= b[k]:\n                low = b[k]\n                (i1, i2) = (j, k)\n        del b\n    a1 = max(m - i2, i2 + 1)\n    b1 = max(n - i1, i1 + 1)\n    print(a1 * b1)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        arr.append(l)\n    (mi, mj) = (0, 0)\n    mele = arr[0][0]\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] > mele:\n                mi = i\n                mj = j\n                mele = arr[i][j]\n    mi += 1\n    mj += 1\n    rmi = n - mi + 1\n    rmj = m - mj + 1\n    print(max(mi * mj, rmi * rmj, mi * rmj, mj * rmi))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    lst = [list(map(int, input().split())) for x in range(n)]\n    (xi, yi) = (0, 0)\n    mx = float('-inf')\n    for x in range(n):\n        for y in range(m):\n            if mx < lst[x][y]:\n                mx = lst[x][y]\n                xi = x\n                yi = y\n    xi += 1\n    yi += 1\n    v1 = xi * yi\n    v2 = xi * m - xi * (yi - 1)\n    v3 = yi * n - (xi - 1) * yi\n    v4 = (m - yi + 1) * (n - xi + 1)\n    print(max(v1, v2, v3, v4))", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    arr = []\n    for i in range(n):\n        s = list(map(int, input().split()))\n        arr.append(s)\n    my_max = arr[0][0]\n    my_max_ij = (0, 0)\n    for i in range(n):\n        if max(arr[i]) > my_max:\n            my_max = max(arr[i])\n            my_max_ij = (i, arr[i].index(max(arr[i])))\n    result = max(n - my_max_ij[0], my_max_ij[0] + 1) * max(m - my_max_ij[1], my_max_ij[1] + 1)\n    print(result)", "n = int(input())\nfor i in range(n):\n    (ROWS, COLS) = map(int, input().split())\n    matrix = []\n    for i in range(ROWS):\n        matrix.append([int(num) for num in input().split()])\n    matrixMax = float('-inf')\n    matrixMaxCoord = (0, 0)\n    for row in range(ROWS):\n        for col in range(COLS):\n            if matrix[row][col] > matrixMax:\n                matrixMax = matrix[row][col]\n                matrixMaxCoord = (row, col)\n    (maxRow, maxCol) = (matrixMaxCoord[0], matrixMaxCoord[1])\n    maxDistanceX = max(maxRow + 1, ROWS - maxRow)\n    maxDistanceY = max(maxCol + 1, COLS - maxCol)\n    print(maxDistanceX * maxDistanceY)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    lst = []\n    for i in range(n):\n        lst1 = list(map(int, input().split()))\n        lst.append(lst1)\n\n    def myfunc(mylist):\n        x = mylist.index(max(mylist, key=lambda x: max(x)))\n        y = mylist[x].index(max(mylist[x]))\n        return (x + 1, y + 1)\n    (x, y) = myfunc(lst)\n    print(max(x, n - x + 1) * max(y, m - y + 1))", "def solve():\n    (n, m) = map(int, input().split())\n    mat = list()\n    for i in range(n):\n        mat.append(list(map(int, input().split())))\n    Max = -2 ** 63\n    (row, col) = (-1, -1)\n    for i in range(n):\n        for j in range(m):\n            if mat[i][j] > Max:\n                (row, col) = (i, j)\n                Max = mat[i][j]\n    col += 1\n    row += 1\n    row = max(row, n - row + 1)\n    col = max(col, m - col + 1)\n    print(row * col)\nfor _ in range(int(input())):\n    solve()", "tests = int(input())\nfor i in range(tests):\n    (rows, cols) = list(map(int, input().split()))\n    values = []\n    for _ in range(rows):\n        values.extend(list(map(int, input().split())))\n    max_idx = 0\n    for (idx, value) in enumerate(values):\n        if values[idx] > values[max_idx]:\n            max_idx = idx\n    max_idx_coords = [max_idx // cols + 1, max_idx % cols + 1]\n    m_rows = [max_idx_coords[0], rows - max_idx_coords[0] + 1]\n    m_cols = [max_idx_coords[1], cols - max_idx_coords[1] + 1]\n    print(max(m_rows) * max(m_cols))", "t = int(input())\nfor _ in range(t):\n    (m, n) = list(map(int, input().split(' ')))\n    board = []\n    for _ in range(m):\n        row = list(map(int, input().split(' ')))\n        board.append(row)\n    maxVal = None\n    rowIdx = None\n    colIdx = None\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if maxVal is None or board[i][j] > maxVal:\n                maxVal = board[i][j]\n                rowIdx = i\n                colIdx = j\n    print(max(colIdx + 1, n - colIdx) * max(rowIdx + 1, m - rowIdx))", "t = int(input())\nfor i in range(t):\n    l = [int(i) for i in input().split(' ')]\n    n = l[0]\n    m = l[1]\n    a = []\n    max_ = float('-inf')\n    maxi = 0\n    maxj = 0\n    for d in range(n):\n        a.append([int(i) for i in input().split(' ')])\n        if max(a[d]) > max_:\n            max_ = max(a[d])\n            maxi = d + 1\n            maxj = a[d].index(max(a[d])) + 1\n    ans = []\n    ans.append(maxi * maxj)\n    ans.append(maxi * (m - maxj + 1))\n    ans.append((n - maxi + 1) * maxj)\n    ans.append((n - maxi + 1) * (m - maxj + 1))\n    print(max(ans))", "t = int(input())\nfor i in range(t):\n    (n, m) = input().split()\n    matrix = []\n    for row in range(int(n)):\n        temp = list(map(int, input().split()))\n        matrix.append(temp)\n    max_n = 0\n    max_m = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            temp = matrix[i][j]\n            max_val = matrix[max_n][max_m]\n            max_n = max_n if max_val > temp else i\n            max_m = max_m if max_val > temp else j\n    ans_n = max(int(n) - max_n, max_n + 1)\n    ans_m = max(int(m) - max_m, max_m + 1)\n    print(ans_n * ans_m)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [[int(s) for s in input().split()] for i in range(n)]\n    imax = 0\n    jmax = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] > a[imax][jmax]:\n                imax = i\n                jmax = j\n    print(max(imax + 1, n - imax) * max(jmax + 1, m - jmax))", "import sys\ninput = sys.stdin.readline\nprint = sys.stdout.write\nfor _ in range(int(input())):\n    (h, w) = map(int, sys.stdin.readline().split())\n    check = True\n    biggestHeight = 0\n    biggestWidth = 0\n    for _ in range(h):\n        lst = list(map(int, input().split()))\n        if check == True:\n            check = False\n            biggest = lst[0]\n        if max(lst) >= biggest:\n            biggest = max(lst)\n            biggestHeight = _ + 1\n            biggestWidth = lst.index(biggest) + 1\n    if h - biggestHeight + 1 > biggestHeight:\n        biggestHeight = h - biggestHeight + 1\n    if w - biggestWidth + 1 > biggestWidth:\n        biggestWidth = w - biggestWidth + 1\n    print(str(biggestHeight * biggestWidth) + '\\n')", "p = int(input())\nwhile p:\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        a = list(map(int, input().split()))\n        l.append(a)\n        if i == 0:\n            x = max(a)\n            y = i\n            z = a.index(x)\n        elif x < max(a):\n            x = max(a)\n            y = i\n            z = a.index(x)\n    h = min(y, n - y - 1)\n    w = min(z, m - z - 1)\n    (n, m) = (n - h, m - w)\n    print(n * m)\n    p -= 1", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    tmp = -1000000005\n    pos = 0\n    ind = 0\n    for i in range(1, n + 1):\n        lst = list(map(int, input().split()))\n        if max(lst) > tmp:\n            pos = i\n            tmp = max(lst)\n            ind = lst.index(tmp) + 1\n    print(max(pos, n - pos + 1) * max(ind, m - ind + 1))", "import math\nt = int(input())\nfor _ in range(t):\n    (n, m) = [int(i) for i in input().split()]\n    arr = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n):\n        arr[i] = list(map(int, input().split()))\n    idx = [0, 0]\n    mx = -math.inf\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] > mx:\n                mx = arr[i][j]\n                idx = [i, j]\n    (i, j) = idx\n    a = max(j + 1, m - j)\n    b = max(i + 1, n - i)\n    print(a * b)", "import math\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    maxi = -math.inf\n    (a, b) = (0, 0)\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        if maxi < max(temp):\n            maxi = max(temp)\n            a = i\n            b = temp.index(maxi)\n    print(max(a + 1, n - a) * max(b + 1, m - b))", "n_tc = input()\nfor i in range(int(n_tc)):\n    (x, y) = list(map(int, input().split()))\n    a = []\n    for i in range(x):\n        alp = list(map(int, input().split()))\n        a.append(alp)\n    m = float('-inf')\n    for i in range(x):\n        for j in range(y):\n            if m < a[i][j]:\n                m = a[i][j]\n                x_ind = i\n                y_ind = j\n    h = max(x_ind + 1, x - x_ind)\n    m = max(y_ind + 1, y - y_ind)\n    print(h * m)", "def main():\n    tee = int(input())\n    for _ in range(1, tee + 1):\n        (row, col) = list(map(int, input().split()))\n        lss = []\n        for __ in range(row):\n            temp = list(map(int, input().split()))\n            lss.append(temp)\n        maxi = float('-inf')\n        maxa = -1\n        maxb = -1\n        for a in range(row):\n            for b in range(col):\n                if maxi <= lss[a][b]:\n                    maxi = lss[a][b]\n                    maxa = a + 1\n                    maxb = b + 1\n        print(max(maxa, row - maxa + 1) * max(maxb, col - maxb + 1))\nmain()", "t = int(input())\nfor i in range(t):\n    (n, m) = input().split(' ')\n    (n, m) = (int(n), int(m))\n    grid = []\n    for i in range(n):\n        arr = input().split(' ')\n        arr = list(map(int, arr))\n        grid.append(arr)\n    mac = -1000000000.0\n    for p in grid:\n        if max(p) > mac:\n            mac = max(p)\n            i = grid.index(p)\n    j = grid[i].index(max(grid[i]))\n    (h, w) = (max(i + 1, n - i), max(j + 1, m - j))\n    print(h * w)", "def find_rmax_cmax(grid):\n    mx = -10 ** 9 - 1\n    (r, c) = (0, 0)\n    for (i, row) in enumerate(grid):\n        for (j, x) in enumerate(row):\n            if x > mx:\n                (r, c) = (i, j)\n                mx = x\n    return (r, c)\n\ndef gen_max_sub(n, m, r, c, grid):\n    for (nr, nc) in [(r, c), (r, m - 1 - c), (n - 1 - r, c), (n - 1 - r, m - 1 - c)]:\n        if (nr + 1) * 2 > n and (nc + 1) * 2 > m:\n            return (nr + 1, nc + 1)\n    return (0, 0)\n\ndef gen_sol(n, m, grid):\n    (rmax, cmax) = find_rmax_cmax(grid)\n    (r, c) = gen_max_sub(n, m, rmax, cmax, grid)\n    return r * c\nt = int(input())\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    grid = []\n    for _ in range(n):\n        line = [int(x) for x in input().split()]\n        grid.append(line)\n    print(gen_sol(n, m, grid))", "import sys\n\ndef solve():\n    (height, width) = list(map(int, input().split(' ')))\n    (max_row, max_col) = (0, 0)\n    _max = -sys.maxsize\n    for i in range(height):\n        row = list(map(int, input().split(' ')))\n        for j in range(width):\n            if row[j] > _max:\n                (max_row, max_col) = (i, j)\n                _max = row[j]\n    print(max(height - max_row, max_row + 1) * max(width - max_col, max_col + 1))\nnum_inputs = int(input())\nfor ____ in range(num_inputs):\n    solve()", "import sys\nT = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    lst = []\n    high = -1 * 10 ** 9 - 1\n    loc = [0, 0]\n    for i in range(n):\n        inp = input().split()\n        tmp = []\n        for (j, jj) in enumerate(inp):\n            jj = int(jj)\n            if jj > high:\n                high = jj\n                loc = [i, j]\n    h = max(loc[0], n - 1 - loc[0]) + 1\n    w = max(loc[1], m - 1 - loc[1]) + 1\n    print(h * w)", "for _ in range(int(input())):\n    (n, m) = [int(a) for a in input().split()]\n    grid = []\n    for i in range(n):\n        grid.append([int(b) for b in input().split()])\n    best = [grid[0][0], 0, 0]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] > best[0]:\n                best = [grid[i][j], i, j]\n    print(max((best[1] + 1) * (best[2] + 1), (best[1] + 1) * (m - best[2]), (n - best[1]) * (best[2] + 1), (n - best[1]) * (m - best[2])))", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    (n, m) = [int(i) for i in input().split()]\n    max_ele = -10 ** 10\n    for i in range(n):\n        l = [int(ii) for ii in input().split()]\n        for j in range(m):\n            if l[j] > max_ele:\n                max_ele = l[j]\n                miny = i\n                minx = j\n    miny += 1\n    minx += 1\n    ansx = max([minx, m - minx + 1])\n    ansy = max([miny, n - miny + 1])\n    print(ansx * ansy)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mx = -10 ** 9 - 7\n    li = []\n    for _ in range(n):\n        li2 = list(map(int, input().split()))\n        mx = max(mx, max(li2))\n        li.append(li2)\n    for i in range(n):\n        for j in range(m):\n            if li[i][j] == mx:\n                x = max(i + 1, n - i)\n                y = max(j + 1, m - j)\n                print(x * y)\n                break", "for _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    l = []\n    for i in range(n):\n        l.append([int(x) for x in input().split()])\n    maxi = -10 ** 9\n    for i in range(n):\n        for j in range(m):\n            if maxi <= l[i][j]:\n                temp = (i, j)\n                maxi = l[i][j]\n    print(max(temp[0] + 1, n - temp[0]) * max(temp[1] + 1, m - temp[1]))", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    li = []\n    maxi = -10 ** 10\n    for i in range(n):\n        li.append(list(map(int, input().split())))\n        maxi = max(maxi, max(li[-1]))\n    (l, r) = (-1, -1)\n    for i in range(n):\n        for j in range(m):\n            if li[i][j] == maxi:\n                l = i\n                r = j\n                break\n    print(max(l + 1, n - l) * max(r + 1, m - r))", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    l = []\n    fir = 0\n    coin = 0\n    ind = 0\n    for j in range(n):\n        lst = list(map(int, input().split()))\n        if j == 0:\n            fir = max(lst)\n            coin = 0\n            ind = lst.index(fir)\n        elif max(lst) > fir:\n            fir = max(lst)\n            coin = j\n            ind = lst.index(fir)\n        l.append(lst)\n    row_dist = max(coin + 1, n - coin)\n    col_dist = max(ind + 1, q - ind)\n    print(row_dist * col_dist)", "for _ in range(int(input())):\n    a = list(map(int, input().split()))\n    l = []\n    for i in range(a[0]):\n        ad = list(map(int, input().split()))\n        l.append(ad)\n    m = max(l[0])\n    ind = 0\n    for i in range(1, a[0]):\n        num = max(l[i])\n        if num > m:\n            m = num\n            ind = i\n    row = ind + 1\n    column = l[ind].index(m) + 1\n    ansrow = 0\n    anscol = 0\n    if row > a[0] / 2:\n        ansrow = row\n    else:\n        ansrow = a[0] - row + 1\n    if column > a[1] / 2:\n        anscol = column\n    else:\n        anscol = a[1] - column + 1\n    print(anscol * ansrow)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    x = 0\n    y = 0\n    maxi = -10 ** 10\n    for i in range(n):\n        ai = list(map(int, input().split()))\n        for j in range(m):\n            if ai[j] >= maxi:\n                y = i\n                x = j\n                maxi = ai[j]\n    print(min(max(x + 1, m - x), m) * min(max(y + 1, n - y), n))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mat = []\n    min = -10 ** 9 - 1\n    row = 0\n    col = 0\n    for _ in range(n):\n        mat.append(list(map(int, input().split())))\n    for i in range(n):\n        for j in range(m):\n            if mat[i][j] > min:\n                min = mat[i][j]\n                row = i\n                col = j\n    print(max(row + 1, n - row) * max(col + 1, m - col))", "import math\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    max = -math.inf\n    col = 0\n    row = 0\n    for j in range(n):\n        a = list(map(int, input().split()))\n        for x in range(m):\n            if a[x] > max:\n                max = a[x]\n                if m - x - 1 > x:\n                    col = m - x\n                else:\n                    col = x + 1\n                if n - j - 1 > j:\n                    row = n - j\n                else:\n                    row = j + 1\n    print(col * row)", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    A = []\n    (mx, ii, jj) = (-1000000000000.0, -1, -1)\n    for i in range(n):\n        B = list(map(int, input().split()))\n        for j in range(m):\n            if mx < B[j]:\n                mx = B[j]\n                (ii, jj) = (i, j)\n    print(max(ii + 1, n - ii) * max(jj + 1, m - jj))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mx = -float('inf')\n    (l, r) = (-1, -1)\n    for i in range(n):\n        a = list(map(int, input().split()))\n        if max(a) > mx:\n            mx = max(a)\n            j = a.index(mx)\n            (l, r) = (i, j)\n    print(max(l + 1, n - l) * max(m - r, r + 1))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    grid = []\n    Max = float('-inf')\n    for i in range(n):\n        grid.append(list(map(int, input().split())))\n        a = max(grid[i])\n        if a > Max:\n            Max = a\n            row = i\n            col = grid[i].index(a)\n    result = 1\n    if row == n - 1 or row == 0:\n        result *= n\n    else:\n        result *= max(n - row, row + 1)\n    if col == m - 1 or col == 0:\n        result *= m\n    else:\n        result *= max(m - col, col + 1)\n    print(result)", "for _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    ans = [float('-inf'), 0, 0]\n    for i in range(m):\n        a = [*map(int, input().split())]\n        for j in range(n):\n            if a[j] > ans[0]:\n                (ans[0], ans[1], ans[2]) = (a[j], i, j)\n    h = max(ans[1] + 1, m - ans[1])\n    w = max(ans[2] + 1, n - ans[2])\n    print(h * w)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    maxi = -10 ** 9\n    x_max_index = 0\n    y_max_index = 0\n    for i in range(n):\n        a = list(map(int, input().split()))\n        b = max(a)\n        if b > maxi:\n            maxi = b\n            x_max_index = i + 1\n            y_max_index = a.index(max(a)) + 1\n    if x_max_index != 0 and x_max_index > n // 2:\n        x_max_index = n - x_max_index + 1\n    if y_max_index != 0 and y_max_index > m // 2:\n        y_max_index = m - y_max_index + 1\n    if n == 1 and m == 1:\n        print(1)\n    else:\n        print((n - x_max_index + 1) * (m - y_max_index + 1))", "for t in range(int(input())):\n    (m, n) = map(int, input().split())\n    arr = [[int(x) for x in input().split()] for i in range(m)]\n    mx = -float('inf')\n    (r, c) = (0, 0)\n    for i in range(m):\n        for j in range(n):\n            if arr[i][j] > mx:\n                (r, c) = (i, j)\n                mx = arr[i][j]\n    row = max(r + 1, m - r)\n    col = max(c + 1, n - c)\n    print(row * col)", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    l = []\n    M = -100000000000\n    (p, q, a) = (0, 0, 0)\n    for i in range(n):\n        x = list(map(int, input().split()))\n        for j in x:\n            a += 1\n            if j > M:\n                M = j\n                q = a\n                p = i\n        a = 0\n        l.append(x)\n    q -= 1\n    (a, b) = (0, 0)\n    p += 1\n    q += 1\n    if n <= 2:\n        a = n\n    elif p <= n // 2:\n        a = n - p + 1\n    else:\n        a = p\n    if m <= 2:\n        b = m\n    elif q <= m // 2:\n        b = m - q + 1\n    else:\n        b = q\n    print(a * b)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (row, column) = map(int, input().split())\n    arr = []\n    for _ in range(row):\n        num = list(map(int, input().split()))\n        arr.append(num)\n    maximum = arr[0][0]\n    i = 0\n    j = 0\n    inum = 1\n    jnum = 1\n    for p in arr:\n        for q in p:\n            if maximum <= q:\n                maximum = q\n                i = inum\n                j = jnum\n            jnum += 1\n        inum += 1\n        jnum = 1\n    standardRow = (row + 1) / 2\n    standardCol = (column + 1) / 2\n    h = abs(standardRow - i) + standardRow\n    w = abs(standardCol - j) + standardCol\n    print(int(h * w))", "for i in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    p = -10 ** 9 - 2\n    a = []\n    for j in range(n):\n        k = list(map(int, input().split()))\n        a.append(k)\n    for f in range(n):\n        for u in range(m):\n            if a[f][u] > p:\n                p = a[f][u]\n                x = f + 1\n                y = u + 1\n    print(max(x, n + 1 - x) * max(y, m + 1 - y))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    (row, col) = (0, 0)\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] > a[row][col]:\n                (row, col) = (i, j)\n    (row, col) = (max(row + 1, n - row), max(col + 1, m - col))\n    print(row * col)", "for _ in [0] * int(input()):\n    (n, m) = map(int, input().split())\n    a = [[*map(int, input().split())] for _ in [0] * n]\n    maxi = [a[0][0], 0, 0]\n    for i in range(n):\n        for j in range(m):\n            if maxi[0] < a[i][j]:\n                (maxi[0], maxi[1], maxi[2]) = (a[i][j], i, j)\n    print(max(maxi[1] + 1, n - maxi[1]) * max(maxi[2] + 1, m - maxi[2]))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [[-1 for i in range(m)] for j in range(n)]\n    mx = -10000000000\n    for i in range(n):\n        a[i] = list(map(int, input().split()))\n        mx = max(mx, max(a[i]))\n    [x, y] = [-1, -1]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == mx:\n                x = i\n                y = j\n    res = max(n - x, x + 1) * max(m - y, y + 1)\n    print(res)", "x = int(input())\nfor i in range(x):\n    A = input().split()\n    n = int(A[0])\n    m = int(A[1])\n    C = [0] * m\n    B = C * n\n    maxm = 0\n    maxn = 0\n    p = 0\n    k = 0\n    for j in range(n):\n        B[j] = input().split()\n    maxi = int(B[0][0])\n    for a in range(m):\n        for b in range(n):\n            if int(B[b][a]) > maxi:\n                maxi = int(B[b][a])\n                maxm = a\n                maxn = b\n    p = max(maxm + 1, m - maxm)\n    k = max(maxn + 1, n - maxn)\n    print(p * k)", "for _ in range(int(input())):\n    (h, w) = [int(i) for i in input().split()]\n    m = [int(i) for j in range(h) for i in input().split()]\n    a = m.index(max(m))\n    (r, c) = (a // w, a % w)\n    print(max((h - r) * (c + 1), (c + 1) * (r + 1), (r + 1) * (w - c), (h - r) * (w - c)))", "def solve():\n    (n, m) = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n    mx = -2 ** 31\n    for i in range(n):\n        for j in range(m):\n            if mx < a[i][j]:\n                mx = a[i][j]\n                (x, y) = (i, j)\n    print(max(x + 1, n - x) * max(y + 1, m - y))\nfor _ in range(int(input())):\n    solve()", "num_of_case = int(input())\nfor _ in range(num_of_case):\n    (row, col) = [int(x) for x in input().split(' ')]\n    max_pos = (-1, -1)\n    max_num = float('-inf')\n    for row_idx in range(row):\n        r = [int(x) for x in input().split(' ')]\n        for col_idx in range(col):\n            if r[col_idx] > max_num:\n                max_num = r[col_idx]\n                max_pos = (row_idx, col_idx)\n    if max_pos[0] >= row // 2:\n        if max_pos[1] >= col // 2:\n            print((max_pos[0] + 1) * (max_pos[1] + 1))\n        else:\n            print((max_pos[0] + 1) * (col - max_pos[1]))\n    elif max_pos[1] >= col // 2:\n        print((row - max_pos[0]) * (max_pos[1] + 1))\n    else:\n        print((row - max_pos[0]) * (col - max_pos[1]))", "count = int(input())\nar = [[] for i in range(count)]\nfor i in range(count):\n    (n, m) = [int(c) for c in input().split()]\n    for j in range(n):\n        ar[i] += [[int(o) for o in input().split()]]\nfor i in range(count):\n    m = max([max(j) for j in ar[i]])\n    for j in range(len(ar[i])):\n        if m in ar[i][j]:\n            indexOfMax = (j, ar[i][j].index(m))\n    print(max(len(ar[i]) - indexOfMax[0], indexOfMax[0] + 1) * max(len(ar[i][0]) - indexOfMax[1], indexOfMax[1] + 1))", "t = int(input())\nwhile t > 0:\n    n = [int(i) for i in input().split()]\n    m = n[1]\n    n = n[0]\n    mi = 0\n    mj = 0\n    mx = -99999999999\n    for i in range(1, n + 1):\n        l = [0] + [int(j) for j in input().split()]\n        for j in range(1, m + 1):\n            if l[j] > mx:\n                mx = l[j]\n                mi = i\n                mj = j\n    print(max(m - mj + 1, mj) * max(n - mi + 1, mi))\n    t -= 1", "t = int(input())\nfor i_ in range(t):\n    sizes = list(map(int, input().split()))\n    high = sizes[0]\n    width = sizes[1]\n    matrix = []\n    top_number = -10 ** 9\n    coord_top_number = 1\n    for j_ in range(high):\n        line = list(map(int, input().split()))\n        matrix.extend(line)\n    for o_ in range(len(matrix)):\n        if top_number < matrix[o_]:\n            top_number = matrix[o_]\n            coord_top_number = o_ + 1\n    if coord_top_number % width > 0:\n        coord_high = coord_top_number // width + 1\n    else:\n        coord_high = coord_top_number // width\n    if coord_top_number % width > 0:\n        coord_width = coord_top_number % width\n    else:\n        coord_width = width\n    if coord_high > high / 2:\n        high_kef = coord_high\n    else:\n        high_kef = high - coord_high + 1\n    if coord_width > width / 2:\n        width_kef = coord_width\n    else:\n        width_kef = width - coord_width + 1\n    print(width_kef * high_kef)", "import math\nimport sys\nimport threading\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nfrom collections import deque\n\ndef helper(nd):\n    vis[nd] = 1\n    here = 1\n    for ng in gr[nd]:\n        if vis[ng] == 0:\n            here += helper(ng)\n    tot[nd] = here\n    return here\n\ndef helper1(nd, par):\n    ch = []\n    for ng in gr[nd]:\n        if ng != par:\n            ch.append(ng)\n    if len(ch) == 0:\n        return 0\n    if len(ch) == 1:\n        return tot[nd] - 2\n    return max(tot[ch[1]] - 1 + helper1(ch[0], nd), tot[ch[0]] - 1 + helper1(ch[1], nd))\n\ndef shouvik():\n    T = int(input())\n    for _ in range(T):\n        (n, m) = map(int, input().split())\n        mat = []\n        for _ in range(n):\n            mat.append(list(map(int, input().split())))\n        mx = -sys.maxsize\n        (x, y) = (-1, -1)\n        for i in range(n):\n            for j in range(m):\n                if mat[i][j] > mx:\n                    mx = mat[i][j]\n                    (x, y) = (i, j)\n        w = max(y + 1, m - y)\n        h = max(x + 1, n - x)\n        print(w * h)\nshouvik()", "import sys\n\ndef main(a, n, m):\n    max_ = float('-inf')\n    res = None\n    for i in range(n):\n        for j in range(m):\n            if max_ < a[i][j]:\n                max_ = a[i][j]\n                res = (i, j)\n    nm = [n, m]\n    res = [max(nm[i] - res[i], res[i] + 1) for i in range(2)]\n    mul = 1\n    for i in res:\n        mul *= i\n    return mul\nres = []\nnum = int(sys.stdin.readline())\nfor i in range(num):\n    (n, m) = [int(i) for i in sys.stdin.readline().split(' ')]\n    a = []\n    for i in range(n):\n        a.append([int(i) for i in sys.stdin.readline().split(' ')])\n    res.append(main(a, n, m))\nprint(*res, sep='\\n')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [int(i) for _ in range(n) for i in input().split()]\n    max_a = a.index(max(a))\n    (i_max, j_max) = (max_a // m, max_a % m)\n    h = max(n - i_max, i_max + 1)\n    l = max(m - j_max, j_max + 1)\n    print(l * h)", "t = int(input(''))\nfor z in range(t):\n    (n, m) = map(int, input().split())\n    ma = -10000000000\n    for i in range(n):\n        a = list(map(int, input('').split()))[:m]\n        if max(a) > ma:\n            ma = max(a)\n            p = i + 1\n            q = a.index(max(a)) + 1\n    b = n // 2 + 1\n    c = m // 2 + 1\n    if p < b:\n        p = n - p + 1\n    if q < c:\n        q = m - q + 1\n    print(p * q)", "T = int(input())\nfor test in range(T):\n    (n, m) = [int(a) for a in input().split()]\n    max_val = float('-inf')\n    index_r = 0\n    index_c = 0\n    for i in range(n):\n        a = list(map(int, input().split()))\n        max_i = max(a)\n        if max_i > max_val:\n            index_c = a.index(max_i) + 1\n            index_r = i + 1\n            max_val = max_i\n    print(max(index_r, n - index_r + 1) * max(index_c, m - index_c + 1))", "def main():\n    (n, m) = map(int, input().split())\n    ma = -10 ** 9 - 1\n    for i in range(n):\n        a = list(map(int, input().split()))\n        v = max(a)\n        if v > ma:\n            ma = v\n            mi = i\n            mj = a.index(v)\n    print(max(mi + 1, n - mi) * max(mj + 1, m - mj))\nfor _ in range(int(input())):\n    main()", "for i in range(int(input())):\n    (h, w) = [int(i) for i in input().split()]\n    m = [int(i) for j in range(h) for i in input().split()]\n    a = m.index(max(m))\n    (r, c) = (a // w, a % w)\n    print(max((h - r) * (c + 1), (c + 1) * (r + 1), (r + 1) * (w - c), (h - r) * (w - c)))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        k = list(map(int, input().split()))\n        l.append(k)\n    mx = -10 ** 9 - 2\n    x = 0\n    y = 0\n    for r in range(n):\n        for c in range(m):\n            if mx < l[r][c]:\n                mx = l[r][c]\n                x = r\n                y = c\n    print(max(n - x, x + 1) * max(m - y, y + 1))", "t = int(input())\nwhile t:\n    t -= 1\n    (n, m) = [int(x) for x in input().split()]\n    arr = [[] for _ in range(n)]\n    for i in range(n):\n        arr[i] = [int(x) for x in input().split()]\n    tmp = -float('inf')\n    index = (0, 0)\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] > tmp:\n                tmp = arr[i][j]\n                index = (i, j)\n    x = max(index[0] + 1, n - index[0])\n    y = max(index[1] + 1, m - index[1])\n    print(x * y)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n    ma = float('-inf')\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] > ma:\n                ma = arr[i][j]\n                mi = i + 1\n                mj = j + 1\n    print(max(mi, n - mi + 1) * max(mj, m - mj + 1))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mass = [list(map(int, input().split())) for r in range(n)]\n    mx = max([j for i in mass for j in i])\n    r = [i for i in mass if mx in i][0]\n    (a, b) = (mass.index(r) + 1, r.index(mx) + 1)\n    print(max(a, n - a + 1) * max(b, m - b + 1))"]