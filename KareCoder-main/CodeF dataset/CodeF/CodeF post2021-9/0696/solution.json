["mod = 998244353\n\ndef egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        (g, y, x) = egcd(b % a, a)\n        return (g, x - b // a * y, y)\n\ndef modinv(a, m):\n    (g, x, y) = egcd(a, m)\n    return x % m\n\ndef choose(n, k, p):\n    if k == 0:\n        return 1\n    x = n\n    d = 1\n    for y in range(n - 1, n - k, -1):\n        x = x * y % p\n    for i in range(2, k + 1):\n        d = d * i % p\n    return x * modinv(d, p) % p\n\ndef solve():\n    n = int(input())\n    wb_poss = n > 1\n    bw_poss = n > 1\n    w = 0\n    b = 0\n    q = 0\n    free = 0\n    any_bad_poss = n > 1\n    for _ in range(n):\n        s = input().strip()\n        if s[0] == 'B':\n            b += 1\n            wb_poss = False\n        elif s[0] == 'W':\n            w += 1\n            bw_poss = False\n        elif s[0] == '?':\n            q += 1\n        if s[1] == 'B':\n            b += 1\n            bw_poss = False\n        elif s[1] == 'W':\n            w += 1\n            wb_poss = False\n        elif s[1] == '?':\n            q += 1\n        if s == '??':\n            free += 1\n        elif s[0] == s[1]:\n            any_bad_poss = False\n    w_needed = n - w\n    if w_needed > q or w_needed < 0:\n        print(0)\n        return\n    num_bad_poss = pow(2, free, mod) - (int(bw_poss) + int(wb_poss)) if any_bad_poss else 0\n    print((choose(q, w_needed, mod) - num_bad_poss + mod) % mod)\nsolve()"]