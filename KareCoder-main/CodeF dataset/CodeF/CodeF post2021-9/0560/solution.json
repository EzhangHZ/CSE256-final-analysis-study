["def solve():\n    (n, m) = map(int, input().split())\n    g = [[1 if i == '*' else 0 for i in input()] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]:\n                t = 0\n                for (a, b) in [(0, -1), (0, 1), (1, 0), (-1, 0)]:\n                    if 0 <= i + a < n and 0 <= j + b < m and g[i + a][j + b]:\n                        t += 1\n                for (a, b) in [(1, 1), (-1, 1), (-1, -1), (1, -1)]:\n                    if 0 <= i + a < n and 0 <= j + b < m and g[i + a][j + b]:\n                        t += 1\n                        if not g[i + a][j] and (not g[i][j + b]):\n                            return 'NO'\n                if t != 2:\n                    return 'NO'\n    return 'YES'\nfor _ in range(int(input())):\n    print(solve())", "def solve():\n    (n, m) = map(lambda x: int(x), input().split())\n    centers = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    edges = [(-1, -1), (-1, 1), (1, -1), (1, 1)]\n    mat = []\n    for _ in range(n):\n        mat.append(list(input()))\n    for i in range(n):\n        for j in range(m):\n            if mat[i][j] == '*':\n                t = 0\n                for (a, b) in centers:\n                    if 0 <= i + a < n and 0 <= j + b < m and (mat[i + a][j + b] == '*'):\n                        t += 1\n                for (a, b) in edges:\n                    if 0 <= i + a < n and 0 <= j + b < m and (mat[i + a][j + b] == '*'):\n                        t += 1\n                        if mat[i][j + b] != '*' and mat[i + a][j] != '*':\n                            return 'NO'\n                if t != 2:\n                    return 'NO'\n    return 'YES'\nt = int(input())\nfor _ in range(t):\n    print(solve())", "def solve():\n    (n, m) = map(lambda x: int(x), input().split())\n    centers = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    edges = [(-1, -1), (-1, 1), (1, -1), (1, 1)]\n    mat = []\n    for _ in range(n):\n        mat.append(list(input()))\n    for i in range(n):\n        for j in range(m):\n            if mat[i][j] == '*':\n                t = 0\n                for (a, b) in centers:\n                    if 0 <= i + a < n and 0 <= j + b < m and (mat[i + a][j + b] == '*'):\n                        t += 1\n                for (a, b) in edges:\n                    if 0 <= i + a < n and 0 <= j + b < m and (mat[i + a][j + b] == '*'):\n                        t += 1\n                        if mat[i][j + b] != '*' and mat[i + a][j] != '*':\n                            return 'NO'\n                if t != 2:\n                    return 'NO'\n    return 'YES'\nt = int(input())\nfor _ in range(t):\n    print(solve())", "def p(points):\n    if len(points) == 0:\n        return False\n    rs = set([r for (r, c) in points])\n    cs = set([c for (r, c) in points])\n    return len(rs) == 2 and len(cs) == 2\n\ndef is_l_shape(board, r, c):\n    rows = len(board)\n    cols = len(board[0])\n    values = [(r, c)]\n    points = []\n    while len(values) > 0 and len(points) <= 3:\n        (r2, c2) = values.pop()\n        points.append((r2, c2))\n        board[r2][c2] = '.'\n        new_values = [(r2 + x, c2 + y) for x in range(-1, 2) for y in range(-1, 2)]\n        filtered_values = [t for t in new_values if 0 <= t[0] < rows and 0 <= t[1] < cols and (board[t[0]][t[1]] == '*') and (t not in values)]\n        for v in filtered_values:\n            values.append(v)\n    return len(points) == 3 and p(points)\n\ndef f(board):\n    rows = len(board)\n    cols = len(board[0])\n    if rows == 1:\n        return all([board[0][c] == '.' for c in range(cols)])\n    if cols == 1:\n        return all([board[r][0] == '.' for r in range(rows)])\n    for r in range(rows):\n        for c in range(cols):\n            if board[r][c] == '*' and (not is_l_shape(board, r, c)):\n                return False\n    return True\nt = int(input())\nfor i in range(t):\n    (n, m) = [int(el) for el in input().split(' ')]\n    board = []\n    for r in range(n):\n        row = list(input())\n        board.append(row)\n    if f(board):\n        print('YES')\n    else:\n        print('NO')"]