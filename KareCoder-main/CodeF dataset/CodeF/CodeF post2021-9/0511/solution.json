["def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    vs = []\n    prefs = [0] * (n + 1)\n    for i in range(n):\n        prefs[i + 1] = prefs[i] + a[i]\n    ans = sum(a) - k * n\n    for i in range(n - 1, -1, -1):\n        vs = [x >> 1 for x in vs if x > 1]\n        vs.append(a[i] >> 1)\n        nv = prefs[i] + sum(vs) - k * i\n        if nv > ans:\n            ans = nv\n    print(ans)\n    return\n\ndef main():\n    for _ in range(int(input())):\n        solve()\n    return\nmain()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    vs = []\n    prefs = [0] * (n + 1)\n    for i in range(n):\n        prefs[i + 1] = prefs[i] + a[i]\n    ans = sum(a) - k * n\n    for i in range(n - 1, -1, -1):\n        vs = [x >> 1 for x in vs if x > 1]\n        vs.append(a[i] >> 1)\n        nv = prefs[i] + sum(vs) - k * i\n        if nv > ans:\n            ans = nv\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    vs = []\n    prefs = [0] * (n + 1)\n    for i in range(n):\n        prefs[i + 1] = prefs[i] + a[i]\n    ans = sum(a) - k * n\n    for i in range(n - 1, -1, -1):\n        vs = [x >> 1 for x in vs if x > 1]\n        vs.append(a[i] >> 1)\n        nv = prefs[i] + sum(vs) - k * i\n        if nv > ans:\n            ans = nv\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [*map(int, input().split())]\n    S = sum(a)\n    profit = S - m * n\n    cur = []\n    for i in range(n - 1, -1, -1):\n        cur += (a[i],)\n        cur = [x // 2 for x in cur if x // 2]\n        S -= a[i]\n        profit = max(profit, S + sum(cur) - i * m)\n    print(profit)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [*map(int, input().split())]\n    S = sum(a)\n    profit = S - n * m\n    cur = []\n    for i in range(n - 1, -1, -1):\n        cur += (a[i],)\n        cur = [x // 2 for x in cur if x // 2]\n        S -= a[i]\n        profit = max(profit, S + sum(cur) - i * m)\n    print(profit)", "x = int(input())\n\ndef cal(n, c, arr):\n    t = [0] * n\n    for i in range(n):\n        t[i] = t[i - 1] + arr[i] - c\n    p = []\n    for i in range(n):\n        re = 0\n        k = 1\n        for j in range(i, n):\n            org = arr[j] >> k\n            re += org\n            k += 1\n            if k >= 30:\n                break\n        p.append(re)\n    res = max(p[0], t[-1])\n    for i in range(n - 1):\n        res = max(res, t[i] + p[i + 1])\n    return res\nfor jj in range(x):\n    (n, c) = [int(i) for i in input().split(' ')]\n    arr = [int(i) for i in input().split(' ')]\n    print(cal(n, c, arr))", "from itertools import accumulate as ac\nr = lambda : map(int, input().split())\n(t,) = r()\nf = lambda i: p[i] - k * i + sum((a[i + j] >> j + 1 for j in range(min(n - i, 30))))\nwhile t:\n    t -= 1\n    (n, k) = r()\n    a = [*r()]\n    p = [0] + list(ac(a))\n    print(max((f(i) for i in range(n + 1))))", "def solve():\n    (n, k) = map(int, input().split())\n    chests = list(map(int, input().split()))\n    (ans, total) = (0, 0)\n    for i in range(-1, n):\n        now = total\n        for j in range(i + 1, min(n, i + 32)):\n            copy = chests[j]\n            copy >>= j - i\n            now += copy\n        ans = max(ans, now)\n        if i + 1 != n:\n            total += chests[i + 1] - k\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import itertools\nMAX = 29\nPOW = [2 ** (i + 1) for i in range(MAX)]\n\ndef calc(g):\n    return -k * g + s[g] + sum((a[g + i] // POW[i] for i in range(min(n - g, MAX))))\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = list(itertools.accumulate(a, initial=0))\n    print(max((calc(g) for g in range(0, n + 1))))", "from bisect import insort\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    s = sum(arr) - n * k\n    right = []\n    ans = s\n    for i in range(n - 1, -1, -1):\n        s += k - arr[i]\n        insort(right, -arr[i])\n        for j in range(len(right)):\n            right[j] = -(-right[j] // 2)\n        while right and right[-1] == 0:\n            right.pop()\n        ans = max(ans, s - sum(right))\n    print(ans)", "from itertools import accumulate\n\ndef miis():\n    return map(int, input().split())\nfor _ in range(int(input())):\n    (n, k) = miis()\n    a = list(miis())\n    a.reverse()\n    acc = [0] + list(accumulate(a))\n    b = []\n    ans = 0\n    for i in range(n + 1):\n        ans = max(ans, acc[-1] - acc[i] - (n - i) * k + sum(b))\n        if i != n:\n            b.append(a[i])\n            for i in range(len(b)):\n                b[i] //= 2\n            b = list(filter(lambda x: x, b))\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    (*a,) = map(int, input().split())\n    dp = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        bin_number = format(a[i], 'b')\n        for (j, index) in zip(range(i - 1, max(-1, i - len(bin_number)), -1), range(-2, -len(bin_number) - 1, -1)):\n            if bin_number[index] == '1':\n                dp[j] -= 1\n        dp[i] = dp[i] + dp[i + 1] + a[i] >> 1\n    running_sum = 0\n    for i in range(1, n + 1):\n        running_sum += a[i - 1] - k\n        dp[i] += running_sum\n    print(max(dp))", "def calc_postf(a, i):\n    mul = 2\n    res = 0\n    for j in range(i, i + 32):\n        res += a[j] // mul\n        mul *= 2\n    return res\n\ndef calc(a, k, idx, n, cursum, multiplier):\n    global max_val\n    if idx > n - 1:\n        if cursum > max_val:\n            max_val = cursum\n        return\n    if cursum < max_val:\n        return\n    calc(a, k, idx + 1, n, cursum + a[idx] // multiplier - k, multiplier)\n    calc(a, k, idx + 1, n, cursum + a[idx] // (multiplier * 2), multiplier * 2)\n\ndef main():\n    global max_val\n    _i = int(input())\n    for _ in range(_i):\n        max_val = -1000000000\n        (n, k) = [int(x) for x in input().strip('\\r\\n').split()]\n        a = [int(x) for x in input().strip('\\r\\n').split()]\n        a += [0] * 33\n        sum_pref = 0\n        res = calc_postf(a, 0)\n        for i in range(n):\n            sum_pref += a[i] - k\n            sum_postf = calc_postf(a, i + 1)\n            res = max(res, sum_pref + sum_postf)\n        print(res)\nmain()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mx = max(0, sum(a) - n * k)\n    s = 0\n    for i in range(n):\n        c = 0\n        for j in range(i, min(n, 30 + i)):\n            c += a[j] >> j - i + 1\n        mx = max(mx, s + c)\n        s += a[i] - k\n    print(mx)", "from itertools import accumulate\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    acc = [0] + list(accumulate(arr))\n    ans = 0\n    for i in range(n + 1):\n        cur = acc[i] - k * i\n        for j in range(i, min(n, i + 30)):\n            cur += arr[j] >> j - i + 1\n        ans = max(ans, cur)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mx = max(0, sum(a) - n * k)\n    s = 0\n    for i in range(n):\n        c = 0\n        for j in range(i, min(n, 30 + i)):\n            c += a[j] >> j - i + 1\n        mx = max(mx, s + c)\n        s += a[i] - k\n    print(mx)", "for q in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    pre = [arr[0]]\n    suff = [arr[-1] // 2]\n    for i in range(1, n):\n        pre.append(pre[-1] + arr[i])\n    ans = pre[-1] - k * n\n    for i in range(n):\n        temp = pre[i] - k * (i + 1)\n        for j in range(i + 1, min(n, i + 33)):\n            temp += arr[j] >> j - i\n        ans = max(ans, temp)\n    cur = 0\n    for i in range(n):\n        cur += arr[i] >> i + 1\n    ans = max(ans, cur)\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    summ = 0\n    ans = 0\n    for i in range(min(n, 35)):\n        ans += a[i] >> i + 1\n    for i in range(n):\n        summ += a[i] - k\n        temp = 0\n        for j in range(i + 1, min(n, i + 35)):\n            temp += a[j] >> j - i\n        ans = max(ans, summ + temp)\n    print(ans)", "import math\nimport os\nimport collections\nimport sys\nT = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    A = list(map(int, input().split()))\n    (ans, val) = (0, 0)\n    for i in range(-1, N):\n        cnt = val\n        for j in range(i + 1, min(N, i + 32)):\n            B = A[j]\n            B >>= j - i\n            cnt += B\n        ans = max(ans, cnt)\n        if i != N - 1:\n            val += A[i + 1] - M\n    print(ans)", "def soln():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    prefix = [0] * n\n    prefix[0] = a[0] - k\n    for i in range(1, n):\n        prefix[i] = prefix[i - 1] + (a[i] - k)\n    tw = [0] * n\n    for i in range(n):\n        s = 2\n        val = 0\n        for j in range(i, n):\n            if s > int(1000000000.0):\n                break\n            else:\n                val += a[j] // s\n                s *= 2\n        tw[i] = val\n    ans = -1\n    for i in range(n - 1):\n        ans = max(ans, prefix[i] + tw[i + 1])\n    print(max(ans, tw[0], prefix[-1]))\nfor _ in range(int(input())):\n    soln()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mx = max(0, sum(a) - n * k)\n    s = 0\n    for i in range(n):\n        c = 0\n        for j in range(i, min(n, 30 + i)):\n            c += a[j] >> j - i + 1\n        mx = max(mx, s + c)\n        s += a[i] - k\n    print(mx)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [0] + list(map(int, input().split()))\n    s = 0\n    ans = 0\n    for i in range(n + 1):\n        s += a[i]\n        p = 1\n        ost = 0\n        for j in range(1, min(30, n - i + 1)):\n            p *= 2\n            ost += a[i + j] // p\n        ans = max(ans, s - i * k + ost)\n    print(ans)", "z = lambda : map(int, input().split())\n(t,) = z()\nfor t_ in [0] * t:\n    (n, k) = z()\n    l = [0] + [*z()]\n    m = -20000000000.0\n    ar = [0]\n    for i in range(1, n + 1):\n        ar.append(ar[i - 1] + l[i] - k)\n        c = 0\n        e = 2\n        for j in range(i, min(n + 1, i + 30)):\n            c += l[j] // e\n            e = 2 * e\n        c += ar[i - 1]\n        m = max(m, c)\n    print(max(m, ar[-1]))", "a = int(input())\nfor x in range(a):\n    (b, c) = map(int, input().split())\n    d = list(map(int, input().split()))\n    f = 0\n    j = []\n    for y in range(b):\n        k = 2\n        s = f\n        for z in range(y, min(y + 32, b)):\n            s += d[z] // k\n            k *= 2\n        j.append(s)\n        f += d[y] - c\n    j.append(f)\n    print(max(j))", "z = lambda : map(int, input().split())\n(t,) = z()\nfor t_ in [0] * t:\n    (n, k) = z()\n    l = [0] + [*z()]\n    m = -20000000000.0\n    ar = 0\n    for i in range(1, n + 1):\n        d = ar\n        ar = d + l[i] - k\n        c = 0\n        e = 2\n        for j in range(i, min(n + 1, i + 30)):\n            c += l[j] // e\n            e = 2 * e\n        c += d\n        m = max(m, c)\n    print(max(m, ar))", "import math\nimport os\nimport collections\nimport sys\nT = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    A = list(map(int, input().split()))\n    (ans, val) = (0, 0)\n    for i in range(-1, N):\n        cnt = val\n        for j in range(i + 1, min(N, i + 32)):\n            B = A[j]\n            B >>= j - i\n            cnt += B\n        ans = max(ans, cnt)\n        if i != N - 1:\n            val += A[i + 1] - M\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    chests = list(map(int, input().split()))\n    res = 0\n    sum = 0\n    for i in range(n + 1):\n        cur = sum\n        cuts = 1\n        for j in range(i, min(i + 32, n)):\n            cuts *= 2\n            cur += chests[j] // cuts\n        res = max(res, cur)\n        if i < n:\n            sum += chests[i] - k\n    res = max(res, sum)\n    print(res)", "import itertools\n\ndef calc(g):\n    return -k * g + s[g] + sum((a[g + i] // 2 ** (i + 1) for i in range(min(n - g, 30))))\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = list(itertools.accumulate(a, initial=0))\n    print(max((calc(g) for g in range(0, n + 1))))", "t = int(input())\nwhile t:\n    (p, q) = map(int, input().split())\n    l = list(map(int, input().split()))\n    check = 0\n    ans = 0\n    for i in range(-1, p):\n        res = check\n        for j in range(i + 1, min(p, i + 32)):\n            u = l[j]\n            u >>= j - i\n            res += u\n        ans = max(ans, res)\n        if i + 1 != p:\n            check += l[i + 1] - q\n    print(ans)\n    t -= 1", "for _ in range(int(input())):\n    (n, y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    good = 0\n    ans = 0\n    for i in range(n):\n        bad = 0\n        fac = 1\n        for j in range(i, min(i + 30, n)):\n            bad += a[j] // (1 << fac)\n            fac += 1\n        ans = max(ans, good + bad)\n        good += a[i] - y\n    ans = max(good, ans)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ai = list(map(int, input().split()))\n    ans = 0\n    cur = 0\n    for i in range(n):\n        val = 0\n        p = 2\n        for ii in range(i, min(len(ai), i + 32)):\n            val += ai[ii] // p\n            p *= 2\n        ans = max(ans, val + cur)\n        cur += ai[i] - k\n    ans = max(ans, cur)\n    print(ans)", "import itertools\n\ndef calc(g):\n    return -k * g + s[g] + sum((a[g + i] // 2 ** (i + 1) for i in range(min(n - g, 30))))\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = list(itertools.accumulate(a, initial=0))\n    print(max((calc(g) for g in range(0, n + 1))))", "out = []\n\ndef f(m):\n    ans = pre[m]\n    c = 1\n    for i in range(m, min(n, m + 30)):\n        ans += a[i] // 2 ** c\n        c += 1\n    return ans\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    pre = [0] * (n + 1)\n    for i in range(n):\n        pre[i + 1] = pre[i] + a[i] - k\n    ans = 0\n    for i in range(n + 1):\n        ans = max(ans, f(i))\n    out.append(ans)\nfor i in out:\n    print(i)", "z = lambda : map(int, input().split())\n(t,) = z()\nfor t_ in [0] * t:\n    (n, k) = z()\n    l = [0] + [*z()]\n    m = -20000000000.0\n    ar = 0\n    for i in range(1, n + 1):\n        d = ar\n        ar = d + l[i] - k\n        c = 0\n        e = 2\n        for j in range(i, min(n + 1, i + 34)):\n            c += l[j] // e\n            e = 2 * e\n        c += d\n        m = max(m, c)\n    print(max(m, ar))", "import sys\nimport math\nfor _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    gk = [0]\n    for i in range(n):\n        gk.append(gk[-1] + arr[i] - k)\n    ans = 0\n    for i in range(n + 1):\n        sum = gk[i]\n        p = 2\n        for j in range(i, min(n, i + 32)):\n            sum += arr[j] // p\n            p *= 2\n        ans = max(ans, sum)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    ans = 0\n    prefix = 0\n    for i in range(-1, n):\n        now = prefix\n        for j in range(i + 1, min(n, i + 1 + 32)):\n            num = arr[j]\n            num >>= j - i\n            now += num\n        ans = max(ans, now)\n        if i + 1 < n:\n            prefix += arr[i + 1] - k\n    print(ans)", "from itertools import accumulate\nthr = int(1000000000.0)\nt = int(input())\nwhile t:\n    t -= 1\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    prefix = list(accumulate(a))\n    arr = [0] * n\n    for i in range(n):\n        cur = 0\n        tmp = 2\n        for j in range(i, n):\n            cur += a[j] // tmp\n            tmp *= 2\n            if tmp > thr:\n                break\n        arr[i] = cur\n    ans = -n * k + prefix[-1]\n    for i in range(n - 1, 0, -1):\n        ans = max(ans, -i * k + prefix[i - 1] + arr[i])\n    ans = max(ans, arr[0])\n    print(ans)", "for nothing in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    pref = [0] * n\n    pref[0] = a[0]\n    for i in range(1, n):\n        pref[i] = pref[i - 1] + a[i]\n    ans = 0\n    d = 0\n    for i in range(n):\n        d += 1\n        ans += a[i] // (1 << d)\n        if d > 30:\n            break\n    for good_end in range(n):\n        s = pref[good_end] - k * (good_end + 1)\n        d = 0\n        for i in range(good_end + 1, n):\n            d += 1\n            s += a[i] // (1 << d)\n            if d > 30:\n                break\n        ans = max(ans, s)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    bit = [0] * (n + 32)\n    for i in range(n):\n        x = bin(l[i])[2:]\n        x = x[::-1]\n        for j in range(len(x)):\n            bit[n - i + j - 1] += int(x[j])\n    sumlist = [l[-1]]\n    for i in range(n - 2, -2, -1):\n        x = sumlist[-1] - bit[n - 2 - i]\n        x //= 2\n        x += l[i]\n        sumlist.append(x)\n    ans = sum(l) - n * k\n    best = ans\n    for i in range(n - 1, -1, -1):\n        x = sumlist[n - 1 - i] - sumlist[n - i] + l[i - 1]\n        ans += k - x\n        best = max(best, ans)\n    print(best)", "import sys\ninput = sys.stdin.readline\n\ndef int_num():\n    return int(input())\n\ndef int_list():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef solve():\n    (n, k) = int_list()\n    arr = int_list()\n    MAX_BAD = 32\n    dp = [0] * MAX_BAD\n    for i in range(n - 1, -1, -1):\n        coin = arr[i]\n        for j in range(MAX_BAD - 1):\n            good = coin - k + dp[j]\n            bad = coin // 2 + dp[j + 1]\n            dp[j] = max(good, bad)\n            coin = coin // 2\n    ans = max(dp)\n    print(ans)\n\ndef main():\n    t = int_num()\n    while t:\n        solve()\n        t -= 1\n    return\nmain()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    s = 0\n    for i in range(-1, n):\n        left = 0\n        if i >= 0:\n            s += a[i] - k\n        bad = 2\n        for j in range(i + 1, min(n, i + 38)):\n            left += a[j] // bad\n            bad = 2 * bad\n        ans = max(ans, s + left)\n    print(ans)", "import sys\nT = int(sys.stdin.readline())\nfor t in range(T):\n    (n, k) = map(int, sys.stdin.readline().split())\n    chests = list(map(int, sys.stdin.readline().split()))\n    gk = sum(chests) - n * k\n    answer = gk\n    bk_list = []\n    for i in range(n - 1, -1, -1):\n        bk_list.append(chests[i])\n        gk = gk + k - chests[i]\n        bk = 0\n        j = max(0, len(bk_list) - 30)\n        while j < len(bk_list):\n            bk_list[j] //= 2\n            bk += bk_list[j]\n            j += 1\n        answer = max(answer, bk + gk)\n    print(answer)", "I = lambda : map(int, input().split())\n(t,) = I()\nwhile t:\n    t -= 1\n    (_, k) = I()\n    l = [0] * 31\n    for a in I():\n        l = [max([l[i] - k * (i < 30), l[i - 1]][:i + 1]) + (a >> i) for i in range(31)]\n    print(max(l))", "I = lambda : map(int, input().split())\n(t,) = I()\nwhile t:\n    t -= 1\n    (_, k) = I()\n    l = [0] * 31\n    for a in I():\n        l = [max([l[i] - k * (i < 30), l[i - 1]][:i + 1]) + (a >> i) for i in range(31)]\n    print(max(l))", "from itertools import accumulate\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    acc = [0] + list(accumulate(a))\n    wins = []\n    for x in range(n + 1):\n        win = acc[x] - k * x\n        for i in range(x, x + 30):\n            if i >= n:\n                break\n            win += a[i] // 2 ** (i - x + 1)\n        wins.append(win)\n    print(max(wins))", "I = lambda : map(int, input().split())\n(t,) = I()\nwhile t:\n    t -= 1\n    (_, k) = I()\n    l = [0] * 31\n    for a in I():\n        l = [max([l[i] - k * (i < 30), l[i - 1]][:i + 1]) + (a >> i) for i in range(31)]\n    print(max(l))", "I = lambda : map(int, input().split())\n(t,) = I()\nwhile t:\n    t -= 1\n    (_, k) = I()\n    l = [0] * 31\n    for a in I():\n        l = [max([l[i] - k * (i < 30), l[i - 1]][:i + 1]) + (a >> i) for i in range(31)]\n    print(max(l))", "I = lambda : map(int, input().split())\n(t,) = I()\nwhile t:\n    t -= 1\n    (_, k) = I()\n    l = [0] * 31\n    for a in I():\n        l = [max([l[i] - k * (i < 30), l[i - 1]][:i + 1]) + (a >> i) for i in range(31)]\n    print(max(l))", "I = lambda : map(int, input().split())\n(t,) = I()\nwhile t:\n    t -= 1\n    (_, k) = I()\n    l = [0] * 31\n    for a in I():\n        l = [max([l[i] - k * (i < 30), l[i - 1]][:i + 1]) + (a >> i) for i in range(31)]\n    print(max(l))", "I = lambda : map(int, input().split())\n(t,) = I()\nwhile t:\n    t -= 1\n    (_, k) = I()\n    l = [0] * 31\n    for a in I():\n        l = [max([l[i] - k * (i < 30), l[i - 1]][:i + 1]) + (a >> i) for i in range(31)]\n    print(max(l))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    l = arr\n    s = 0\n    for i in range(n):\n        p = l[i]\n        arr[i] = p\n        s += p - k\n    ans = s\n    for i in range(n - 1, -1, -1):\n        s -= arr[i] - k\n        tot = 0\n        for j in range(i, min(i + 31, n - 1) + 1):\n            tot += arr[j] // 2 ** (j - i + 1)\n        ans = max(ans, s + tot)\n    print(int(ans))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split(' ')]\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    ma = max(0, sum - n * k)\n    sum = 0\n    for i in range(n):\n        res = 0\n        tmp = 2\n        j = i\n        while j < n and j < 30 + i:\n            res += a[j] // tmp\n            tmp *= 2\n            j += 1\n        ma = max(ma, sum + res)\n        sum += a[i] - k\n    print(ma)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ma = max(0, sum(a) - n * k)\n    sum1 = 0\n    for i in range(n):\n        res = 0\n        j = i\n        while j < n and j < 32 + i:\n            res += a[j] >> j - i + 1\n            j += 1\n        ma = max(ma, sum1 + res)\n        sum1 += a[i] - k\n    print(ma)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    ma = max(0, sum - n * k)\n    sum1 = 0\n    for i in range(n):\n        res = 0\n        tmp = 2\n        j = i\n        while j < n and j < 32 + i:\n            res += a[j] // tmp\n            tmp *= 2\n            j += 1\n        ma = max(ma, sum1 + res)\n        sum1 += a[i] - k\n    print(ma)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mx = max(0, sum(a) - n * k)\n    cur = 0\n    for i in range(n):\n        loc = 0\n        for j in range(i, min(n, 70 + i)):\n            loc += a[j] >> j - i + 1\n        mx = max(mx, cur + loc)\n        cur += a[i] - k\n    print(mx)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mx = max(0, sum(a) - n * k)\n    cur = 0\n    for i in range(n):\n        loc = 0\n        for j in range(i, min(n, 70 + i)):\n            loc += a[j] >> j - i + 1\n        mx = max(mx, cur + loc)\n        cur += a[i] - k\n    print(mx)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mx = max(0, sum(a) - n * k)\n    cur = 0\n    for i in range(n):\n        loc = 0\n        for j in range(i, min(n, 70 + i)):\n            loc += a[j] >> j - i + 1\n        mx = max(mx, cur + loc)\n        cur += a[i] - k\n    print(mx)", "import sys\ninput = sys.stdin.readline\n\ndef construir_matriz(a, n):\n    m = [[0] * n for _ in range(32)]\n    m[0] = a\n    d = [0] * n\n    for i in range(1, 32):\n        for j in range(n):\n            m[i][j] = m[i - 1][j] // 2\n            if j - i + 1 >= 0 and j - i + 1 < n:\n                d[j - i + 1] = d[j - i + 1] + m[i][j]\n    return (m, d)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    (m, d) = construir_matriz(a, n)\n    s = [0] * n\n    v = [0] * (n + 1)\n    v[0] = d[0]\n    s[0] = a[0]\n    for i in range(1, n):\n        s[i] = s[i - 1] + a[i]\n        v[i] = d[i] - i * k + s[i - 1]\n    v[n] = s[n - 1] - n * k\n    print(max(v))", "tests = int(input())\nfor _ in range(tests):\n    (n, cost) = list(map(int, input().split()))\n    array = list(map(int, input().split()))\n    q = 30\n    dp = [0] * q\n    for k in range(q):\n        dp[k] = max((array[-1] >> k) - cost, array[-1] >> k + 1)\n    for i in range(1, n):\n        newdp = [0] * q\n        for k in range(q - 1):\n            x = array[n - 1 - i] >> k\n            newdp[k] = max(x - cost + dp[k], (x >> 1) + dp[k + 1])\n        dp = newdp\n    m = max(dp)\n    print(m)"]