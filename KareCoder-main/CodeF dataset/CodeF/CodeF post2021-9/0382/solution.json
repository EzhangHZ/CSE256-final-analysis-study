["t = int(input())\nresult = []\nfor i in range(t):\n    (n, m) = list(map(int, input().split(' ')))\n    ai = list(map(int, input().split(' ')))\n    ai.sort()\n    nbrBetweenElements = [ai[k + 1] - ai[k] - 1 for k in range(m - 1)]\n    nbrBetweenElements.append(n + ai[0] - ai[-1] - 1)\n    nbrBetweenElements.sort()\n    nbrBetweenElements.reverse()\n    ind = 0\n    nbrProtectedH = 0\n    for ind in range(m):\n        if nbrBetweenElements[ind] - 4 * ind == 1:\n            nbrProtectedH += 1\n            break\n        elif nbrBetweenElements[ind] - 4 * ind > 1:\n            nbrProtectedH += nbrBetweenElements[ind] - 4 * ind - 1\n        else:\n            break\n    result.append(n - nbrProtectedH)\nfor i in result:\n    print(i)", "import sys\nt = int(sys.stdin.readline())\nfor i in range(t):\n    (n, m) = map(int, sys.stdin.readline().split())\n    lst = list(map(int, sys.stdin.readline().split()))\n    lst.sort()\n    lst1 = []\n    for j in range(m - 1):\n        gap = lst[j + 1] - lst[j] - 1\n        lst1.append(gap)\n    a = n - lst[-1]\n    b = lst[0] - 1\n    lst1.append(a + b)\n    lst1.sort(reverse=True)\n    c = 0\n    ans = 0\n    for j in lst1:\n        ele = j - c * 4\n        c += 1\n        if ele <= 0:\n            break\n        elif ele == 1:\n            ans += 1\n        else:\n            ans += ele - 1\n    print(n - ans)", "import sys\ninput = sys.stdin.readline\n\ndef solve(n, m, a):\n    a = sorted(a)\n    a_diff = [a[i] - a[i - 1] - 1 for i in range(1, m)]\n    a_diff.append(n - a[-1] + a[0] - 1)\n    a_diff.sort(reverse=True)\n    tm = 0\n    non_infected = 0\n    for a_i in a_diff:\n        saved = 0\n        if a_i - 2 * tm > 0:\n            saved = max(1, a_i - 2 * tm - 1)\n            non_infected += saved\n        tm += 2\n    return n - non_infected\nt = int(input())\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    print(solve(n, m, a))", "import sys\n\ndef sol(n, m, a):\n    a = sorted(a)\n    rng = []\n    for i in range(m):\n        rng.append(n - (a[i - 1] - a[i]) % n - 1)\n    rng = sorted(rng)\n    saved = 0\n    timer = 0\n    for i in range(m):\n        if rng[-i - 1] - timer > 0:\n            saved += 1 + max(0, rng[-i - 1] - timer - 2)\n            timer += 4\n        else:\n            break\n    return n - saved\n\ndef main():\n    f = sys.stdin\n    t = int(f.readline())\n    for _ in range(t):\n        (n, m) = map(int, f.readline().split())\n        a = list(map(int, f.readline().split()))\n        ans = sol(n, m, a)\n        print(ans)\nmain()", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, m) = map(int, inp().split())\n    a = list(map(int, inp().split()))\n    a.sort()\n    d = [None] * m\n    for i in range(1, m):\n        d[i] = a[i] - a[i - 1]\n    d[0] = a[0] + n - a[-1]\n    d.sort(reverse=True)\n    x = 1\n    r = m\n    for i in range(m):\n        if d[i] <= x:\n            r += d[i] - 1\n        elif d[i] == x + 1:\n            r += x - 1\n        else:\n            r += x\n        x += 4\n    print(r)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "def solve():\n    (a, b) = map(int, input().split())\n    (a, b) = (b, a)\n    ret = 0\n    cnt = 0\n    lsa = list(map(int, input().split()))\n    lsa.sort()\n    lsb = []\n    for i in range(a - 1):\n        lsb.append(lsa[i + 1] - 1 - lsa[i])\n    lsb.append(b - lsa[-1] - 1 + lsa[0])\n    lsb.sort(reverse=True)\n    for i in range(a):\n        if lsb[i] <= cnt:\n            break\n        if cnt + 1 == lsb[i]:\n            ret += 1\n        else:\n            ret += lsb[i] - cnt - 1\n        cnt += 4\n    print(b - ret)\nt = int(input())\nfor i in range(t):\n    solve()", "x = int(input())\n\ndef cal(n, m, arr):\n    if m == 1:\n        return 2\n    if m == n:\n        return m\n    arr.sort()\n    p = [arr[0] + n - arr[-1] - 1]\n    for i in range(1, m):\n        p.append(arr[i] - arr[i - 1] - 1)\n    p.sort(reverse=True)\n    t = 0\n    sd = 0\n    i = 0\n    while i < len(p):\n        gd = p[i] - t * 2\n        if gd <= 0:\n            break\n        if gd <= 2:\n            t += 1\n            sd += 1\n        else:\n            t += 2\n            sd += gd - 1\n        i += 1\n    return n - sd\nfor jj in range(x):\n    (n, m) = [int(i) for i in input().split(' ')]\n    arr = [int(i) for i in input().split(' ')]\n    print(cal(n, m, arr))", "t = int(input())\nans = []\nfor _ in range(t):\n    data = list(map(int, input().split()))\n    (n, m) = (data[0], data[1])\n    cntg = sorted(list(map(int, input().split())))\n    rng = []\n    for i in range(m):\n        rng.append(n - (cntg[i - 1] - cntg[i]) % n - 1)\n    rng.sort()\n    saved = 0\n    timer = 0\n    for i in range(m):\n        if rng[-i - 1] - timer > 0:\n            saved += 1 + max(0, rng[-i - 1] - timer - 2)\n            timer += 4\n        else:\n            break\n    ans.append(n - saved)\nfor i in range(t):\n    print(ans[i])", "import sys\nR = lambda : map(int, next(sys.stdin).split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, m) = R()\n    (*a,) = R()\n    a.sort()\n    distance = []\n    for i in range(m - 1):\n        distance.append(a[i + 1] - a[i] - 1)\n    distance.append(n - a[-1] + a[0] - 1)\n    distance.sort(reverse=True)\n    day = 0\n    cnt = 0\n    for x in distance:\n        if x > 2 * day:\n            x -= 2 * day\n            cnt += 1\n            day += 1\n            if x - 2 > 0:\n                cnt += x - 2\n                day += 1\n        else:\n            break\n    print(n - cnt)", "def main():\n    for t in range(int(input())):\n        (n, m) = map(int, input().split())\n        a = sorted(list(map(int, input().split())))\n        x = []\n        for i in range(m - 1):\n            x.append(a[i + 1] - a[i] - 1)\n        x.append(n - a[m - 1] + a[0] - 1)\n        x.sort(reverse=True)\n        (cnt, d) = (0, 0)\n        for i in range(len(x)):\n            x[i] -= d * 2\n            if x[i] <= 0:\n                break\n            if x[i] > 2:\n                cnt += x[i] - 1\n                d += 2\n            else:\n                cnt += 1\n                d += 1\n        print(n - cnt)\nmain()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if m == 1:\n        print(2)\n    else:\n        a.sort()\n        b = [a[i] - a[i - 1] - 1 for i in range(1, m)]\n        b.append(a[0] + n - a[-1] - 1)\n        b.sort(reverse=True)\n        s = 0\n        for i in range(m):\n            b[i] -= 4 * i\n            if b[i] > 0:\n                if b[i] == 1:\n                    s += 1\n                else:\n                    s += b[i] - 1\n            else:\n                break\n        print(n - s)", "from sys import stdin\nfor _ in range(int(stdin.readline().strip())):\n    (houses, infected) = list(map(int, stdin.readline().strip().split()))\n    virus = list(map(int, stdin.readline().strip().split()))\n    virus.sort()\n    distancias = [houses - virus[-1] + virus[0] - 1]\n    for i in range(len(virus) - 1):\n        distancias.append(virus[i + 1] - virus[i] - 1)\n    distancias.sort(reverse=True)\n    total = 0\n    for i in range(len(distancias)):\n        distancias[i] = distancias[i] - 4 * i - 1\n        if distancias[i] == 0:\n            distancias[i] = 1\n        if distancias[i] < 0:\n            break\n        total += distancias[i]\n    print(houses - total)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    lg = [a[i + 1] - a[i] - 1 for i in range(m - 1)]\n    lg.append(n - (a[-1] - a[0] + 1))\n    lg.sort(reverse=True)\n    ct = 1\n    ans = 0\n    for x in lg:\n        if x - ct <= 0:\n            ans += x - ct == 0\n            break\n        else:\n            ans += x - ct\n            ct += 4\n    print(n - ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = sorted(map(int, input().split()))\n    seps = []\n    for i in range(1, m):\n        seps.append(a[i] - a[i - 1] - 1)\n    seps.append(a[0] - 1 + n - a[-1])\n    seps.sort()\n    inf = 0\n    protected = 0\n    while seps and seps[-1] > inf:\n        protected += max(1, seps.pop() - 1 - inf)\n        inf += 4\n    print(n - protected)", "import sys\ninput = sys.stdin.readline\nun = lambda : [*map(int, input().split())]\nfor _ in range(*un()):\n    (n, m) = un()\n    a = un()\n    a.sort()\n    b = []\n    for i in range(m - 1):\n        b.append(a[i + 1] - a[i] - 1)\n    b.append(n - a[-1] + a[0] - 1)\n    b.sort(reverse=True)\n    gg = 0\n    ans = 0\n    for i in range(m):\n        if b[i] - gg - 1 <= 0:\n            if b[i] - gg - 1 == 0:\n                ans += 1\n            break\n        ans += b[i] - gg - 1\n        gg += 4\n    print(n - ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [0] + sorted(list(map(int, input().split())))\n    b = []\n    for i in range(1, len(a)):\n        b.append(a[i] - a[i - 1] - 1)\n    b[0] = b[0] + n - a[-1]\n    b = sorted(b, reverse=True)\n    days = 0\n    count = 0\n    for i in range(len(b)):\n        z = b[i] - 2 * days\n        if z == 1:\n            count += 1\n            days += 2\n        elif z > 1:\n            count += z - 1\n            days += 2\n        else:\n            break\n    print(n - count)", "def solve(x, A):\n    dp = []\n    A = sorted(A)\n    prev = -1\n    for i in A:\n        if prev == -1:\n            prev = i\n            continue\n        if i - prev - 1 > 0:\n            dp.append(i - prev - 1)\n        prev = i\n    if x - prev + A[0] - 1 > 0:\n        dp.append(x - prev + A[0] - 1)\n    Q = sorted(dp, reverse=True)\n    ans = len(A)\n    cur = 0\n    for (i, v) in enumerate(Q):\n        if v - cur == 1:\n            ans += v - 1\n        elif v > cur:\n            ans += 1 + cur\n        else:\n            ans += v\n        cur += 4\n    return ans\n\ndef read():\n    s = input().strip('\\n').split(' ')\n    (n, x) = (int(s[0]), int(s[1]))\n    s = input().strip('\\n').split(' ')\n    A = [int(x) for x in s]\n    return (n, A)\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        (x, A) = read()\n        res = solve(x, A)\n        print(res)\n        pass\n    pass\nmain()", "n = int(input())\nfor e in range(n):\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    l2.sort()\n    a = []\n    for i in range(len(l2) - 1):\n        a.append(l2[i + 1] - l2[i] - 1)\n    a.append(l1[0] - l2[-1] + l2[0] - 1)\n    a.sort(reverse=True)\n    p = 0\n    c = 0\n    for i in range(len(a)):\n        q = a[i] - 2 * p\n        if q == 1:\n            c += 1\n            break\n        elif q <= 0:\n            break\n        else:\n            c += q - 1\n            p += 2\n    print(l1[0] - c)", "t = int(input())\nfor x in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    gaps = [a[i + 1] - a[i] - 1 for i in range(m - 1)]\n    gap = n - (a[-1] - a[0] + 1)\n    gaps.append(gap)\n    gaps.sort(reverse=True)\n    (prot, inf) = (0, 0)\n    for gap in gaps:\n        gap -= inf\n        if gap <= 0:\n            break\n        if gap <= 2:\n            prot += 1\n            inf += 2\n        else:\n            prot += gap - 1\n            inf += 4\n    print(n - prot)", "import math\n\ndef slove():\n    (a, b) = map(int, input().split())\n    c = list(map(int, input().split()))\n    c.sort()\n    opop = []\n    for i in range(len(c) - 1):\n        opop.append(c[i + 1] - c[i] - 1)\n    opop.append(a - c[-1] + c[0] - 1)\n    opop.sort(reverse=True)\n    y = 0\n    ans = 0\n    for i in range(len(opop)):\n        if opop[i] - 2 * y <= 0:\n            break\n        elif opop[i] - y * 2 <= 2:\n            ans += 1\n            y += 1\n        else:\n            ans += opop[i] - 2 * y - 1\n            y += 2\n    print(a - ans)\nfor i in range(int(input())):\n    slove()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = sorted(map(int, input().split()))\n    seps = []\n    for i in range(1, m):\n        seps.append(a[i] - a[i - 1] - 1)\n    seps.append(a[0] - 1 + n - a[-1])\n    seps.sort()\n    inf = 0\n    protected = 0\n    while seps and seps[-1] > inf:\n        protected += max(1, seps.pop() - 1 - inf)\n        inf += 4\n    print(n - protected)", "def main():\n    t = int(input())\n    while t:\n        t -= 1\n        (n, m) = list(map(int, input().split()))\n        a = list(map(int, input().split()))\n        a = sorted(a)\n        distance = []\n        for i in range(len(a) - 1):\n            distance.append(a[i + 1] - a[i] - 1)\n        distance.append(a[0] - a[m - 1] + n - 1)\n        distance = sorted(distance)\n        r = 0\n        ans = 0\n        while distance:\n            top = distance.pop()\n            if top - r * 2 > 0:\n                ans += max(1, top - r * 2 - 1)\n            r += 2\n        print(n - ans)\nmain()", "def main():\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        tab = list(map(int, input().split()))\n        tab.sort(reverse=1)\n        kraw = [0] * (m + 1)\n        odj = 1\n        for i in range(m - 1):\n            kraw[i] = tab[i] - tab[i + 1] - 1\n        kraw[m - 1] = n - tab[0] + (tab[-1] - 1)\n        kraw.sort(reverse=1)\n        i = 0\n        while odj < kraw[i]:\n            n -= kraw[i] - odj\n            odj += 4\n            i += 1\n        if odj == kraw[i]:\n            n -= 1\n        print(n)\nmain()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = sorted([int(i) for i in input().split()])\n    if m == 1:\n        print(2)\n        continue\n    b = []\n    for i in range(1, m):\n        b.append(abs(a[i] - a[i - 1]) - 1)\n    b.append(n - a[-1] + a[0] - 1)\n    b.sort(reverse=1)\n    (inf, d) = (0, 0)\n    for k in b:\n        dd = d * 2\n        if dd >= k:\n            inf += k\n            continue\n        inf += dd\n        if k - dd >= 2:\n            inf += 1\n            d += 2\n        else:\n            d += 1\n    print(inf + m)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    b = []\n    for i in range(m - 1):\n        b.append(a[i + 1] - a[i] - 1)\n    b.append(n - a[-1] + a[0] - 1)\n    b.sort(reverse=True)\n    i = 1\n    if b[0] == 1:\n        ans = 1\n    elif b[0] == 0:\n        ans = 0\n    else:\n        ans = b[0] - 1\n        while i < m and b[i] - 4 * i - 1 > 0:\n            ans += b[i] - 4 * i - 1\n            i += 1\n        if i < m and b[i] > 4 * i:\n            ans += 1\n    print(n - ans)", "case = int(input())\nfor i in range(case):\n    (n, m) = (int(v) for v in input().split())\n    a = [int(v) for v in input().split()]\n    a.sort()\n    b = []\n    move = 0\n    safe = 0\n    for j in range(m - 1):\n        b.append(a[j + 1] - a[j] - 1)\n    b.append(a[0] + n - a[m - 1] - 1)\n    b.sort(reverse=True)\n    for k in range(m):\n        x = b[k] - 2 * move\n        if x >= 3:\n            move += 2\n            safe += x - 1\n        elif x >= 1:\n            move += 1\n            safe += 1\n        else:\n            pass\n    print(n - safe)", "from typing import List\nfrom collections import defaultdict\nimport heapq\n\nclass Solution:\n\n    def solve(self, n, m, a):\n        hp = []\n        a.sort()\n        for i in range(1, m):\n            hp.append(-(a[i] - a[i - 1] - 1))\n        left = 0 if a[0] == 1 else a[0] - 1\n        right = 0 if a[-1] == n else n - a[-1]\n        if left + right:\n            hp.append(-(left + right))\n        heapq.heapify(hp)\n        ans = 0\n        timer = 0\n        while hp:\n            val = -heapq.heappop(hp) - 2 * timer\n            if val <= 0:\n                break\n            if val == 1:\n                ans += 1\n                break\n            ans += val - 1\n            timer += 2\n        return n - ans\nobj = Solution()\nT = int(input())\nfor _ in range(T):\n    (n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    ans = obj.solve(n, m, a)\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    lg = [a[i + 1] - a[i] - 1 for i in range(m - 1)]\n    lg.append(n - (a[-1] - a[0] + 1))\n    lg.sort(reverse=True)\n    ct = 1\n    ans = 0\n    for x in lg:\n        if x - ct <= 0:\n            ans += x - ct == 0\n            break\n        else:\n            ans += x - ct\n            ct += 4\n    print(n - ans)", "def cal(a, n, m):\n    k = []\n    i = 0\n    a.sort()\n    for j in a:\n        dif = j - i - 1\n        k.append(dif)\n        i = j\n    dif = n - i\n    k[0] = k[0] + dif\n    k.sort(reverse=True)\n    opt = 0\n    f = 0\n    ans = 0\n    while len(k) != 0 and f == 0:\n        c = k.pop(0)\n        c -= 2 * opt\n        if c > 0:\n            if c == 1:\n                ans += c\n            else:\n                ans += c - 1\n            opt += 2\n        else:\n            f = 1\n    return n - ans\nT = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(cal(a, n, m))", "import sys, os\nif os.getlogin() == 'arun':\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nfrom collections import defaultdict\nfrom math import comb\nimport math\nt = int(input())\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    lt = list(map(int, input().split()))\n    lt.sort()\n    l2 = []\n    if m > 1:\n        for i in range(m - 1):\n            k = lt[i + 1] - lt[i] - 1\n            if k > 0:\n                l2.append(k)\n        l2.append(lt[0] - 1 + n - lt[-1])\n    else:\n        l2 = [n - 1]\n    l2.sort(reverse=True)\n    count = 0\n    ans = 0\n    for x in l2:\n        if x - 2 * count >= 3:\n            ans += x - 2 * count - 1\n            count += 2\n        elif x - 2 * count >= 1:\n            count += 1\n            ans += 1\n        else:\n            break\n    print(n - ans)", "def ss(n, l):\n    l = sorted(l)\n    l.insert(0, 0)\n    t = []\n    for i in range(len(l) - 1):\n        t.append(l[i + 1] - l[i] - 1)\n    t[0] += n - l[-1]\n    t = sorted(t)[::-1]\n    x = 0\n    ans = 0\n    for i in t:\n        y = i - 2 * x\n        if y <= 0:\n            break\n        if y == 1:\n            ans += 1\n            x += 2\n        else:\n            ans += y - 1\n            x += 2\n    return n - ans\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    print(ss(n, l))", "t = int(input())\nwhile t:\n    t -= 1\n    (n, m) = map(int, input().split(' '))\n    arr = [0] * m\n    (*pos,) = map(int, input().split(' '))\n    pos.sort(reverse=True)\n    areas = list()\n    for h in range(len(pos) - 1):\n        areas.append(pos[h] - pos[h + 1] - 1)\n    areas.append(n - pos[0] + pos[-1] - 1)\n    areas.sort()\n    day = 0\n    count = 0\n    for i in range(len(areas)):\n        val = areas.pop() - 2 * day - 1\n        if val == 0:\n            val = 1\n        if val > 0:\n            count += val\n            day += 2\n            continue\n        break\n    print(n - count)", "t = int(input())\narr = []\nfor j in range(0, t):\n    (n, m) = list(map(int, input().split()))\n    arr = sorted(list(map(int, input().split())))\n    arr2 = []\n    arr2.append(arr[0] + n - 1 - arr[m - 1])\n    for i in range(1, m):\n        arr2.append(arr[i] - arr[i - 1] - 1)\n    arr2 = sorted(arr2, reverse=True)\n    k = 0\n    l = 0\n    for s in range(0, len(arr2)):\n        if arr2[s] - l > 3:\n            k += arr2[s] - l - 1\n            l += 4\n        elif arr2[s] - l == 3:\n            k += 2\n            break\n        elif 0 < arr2[s] - l < 3:\n            k += 1\n            break\n        else:\n            break\n    print(sum(arr2) - k + m)", "testcases = int(input())\nfor _ in range(testcases):\n    (n1, x1) = input().split()\n    n = int(n1)\n    x = int(x1)\n    a1 = input().split()\n    a = [int(i) for i in a1]\n    a.sort()\n    l = []\n    for i in range(0, x - 1):\n        l.append(a[i + 1] - a[i] - 1)\n    l.append(n - a[x - 1] + a[0] - 1)\n    l.sort(reverse=True)\n    ans = 0\n    for i in range(len(l)):\n        c = l[i] - i * 4 - 1\n        if c < 0:\n            break\n        if c == 0:\n            ans += 1\n            break\n        ans += c\n    print(n - ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    b = []\n    a.sort()\n    for i in range(1, m):\n        b.append(a[i] - a[i - 1] - 1)\n    b.append(n - a[-1] + a[0] - 1)\n    b.sort()\n    days = 0\n    save = 0\n    for i in range(len(b) - 1, -1, -1):\n        if b[i] - days * 2 - 1 < 0:\n            break\n        elif b[i] - days * 2 - 1 == 0:\n            save += 1\n            break\n        save += b[i] - days * 2 - 1\n        days += 2\n    print(n - save)", "t = int(input())\nsol = []\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a.sort()\n    diff = [-1 for _ in range(m)]\n    for i in range(m - 1):\n        diff[i] = a[i + 1] - a[i] - 1\n    diff[m - 1] = (n + a[0] - a[-1] - 1) % n\n    diff.sort(reverse=True)\n    infected = m\n    for i in range(m):\n        pre_inf = 4 * i\n        if pre_inf >= diff[i]:\n            infected += diff[i]\n        elif pre_inf <= diff[i] - 2:\n            infected += pre_inf + 1\n        else:\n            infected += pre_inf\n    sol.append(infected)\nfor s in sol:\n    print(s)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = sorted(map(int, input().split()))\n    seps = []\n    for i in range(1, m):\n        seps.append(a[i] - a[i - 1] - 1)\n    seps.append(a[0] - 1 + n - a[-1])\n    seps.sort()\n    inf = 0\n    protected = 0\n    while seps and seps[-1] > inf:\n        protected += max(1, seps.pop() - 1 - inf)\n        inf += 4\n    print(n - protected)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    lg = [a[i + 1] - a[i] - 1 for i in range(m - 1)]\n    lg.append(n - (a[-1] - a[0] + 1))\n    lg.sort(reverse=True)\n    ct = 1\n    ans = 0\n    for x in lg:\n        if x - ct <= 0:\n            ans += x - ct == 0\n            break\n        else:\n            ans += x - ct\n            ct += 4\n    print(n - ans)", "def get_holes(m, infected):\n    g = []\n    infected.sort()\n    for i in range(len(infected) - 1):\n        g.append(infected[i + 1] - infected[i] - 1)\n    g.append(m - infected[-1] + infected[0] - 1)\n    return g\n\ndef solve(n, m, infected):\n    h = get_holes(m, infected)\n    h.sort(reverse=True)\n    k = 0\n    protected = 0\n    inf = 0\n    for k in range(len(h)):\n        r = h[k] - inf\n        protected += r - 1 if r > 1 else 1 if r == 1 else 0\n        inf += 4\n    return n - protected\nt = int(input())\nfor i in range(t):\n    sizes = input().split()\n    n = int(sizes[0])\n    m = int(sizes[0])\n    infected = [int(e) for e in input().split()]\n    print(solve(n, m, infected))", "import math\nfrom collections import *\n\ndef solve():\n    (n, m) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    t = []\n    a.sort()\n    for i in range(m - 1):\n        t.append(a[i + 1] - a[i] - 1)\n    t.append(a[0] - 1 + n - a[-1])\n    t.sort(reverse=True)\n    ans = 0\n    l = -1\n    for i in range(len(t)):\n        if t[i] + l >= 0:\n            if t[i] + l == 0:\n                ans += 1\n            ans += t[i] + l\n        else:\n            break\n        l = l - 4\n    print(n - ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "def num():\n    c = int(input())\n    return c\n\ndef stri():\n    c = str(input())\n    return c\n\ndef vector():\n    c = list(map(int, input().split()))\n    return c\n\ndef strvector():\n    c = list(map(str, input().split()))\n    return c\nfrom heapq import heappop, heappush\nimport math\n\ndef isprime(num):\n    a = 2\n    while a <= math.sqrt(num):\n        if num % a < 1:\n            return False\n        a = a + 1\n    return num > 1\nt = num()\nwhile t > 0:\n    t -= 1\n    (n, m) = vector()\n    arr = vector()\n    arr.sort()\n    if m == 1:\n        print(2 if n >= 2 else 1)\n        continue\n    if n == m:\n        print(m)\n        continue\n    h = []\n    for i in range(1, m):\n        heappush(h, -arr[i] + arr[i - 1] + 1)\n    heappush(h, -(arr[0] + n - arr[-1] - 1))\n    cnt = 0\n    saved = 0\n    while h:\n        x = -heappop(h)\n        if x - cnt <= 0:\n            continue\n        elif x - cnt > 2:\n            saved += x - cnt - 1\n            cnt += 4\n        else:\n            saved += 1\n            cnt += 2\n    print(n - saved)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    b = [n - a[-1] + a[0] - 1]\n    for i in range(m - 1):\n        b += [a[i + 1] - a[i] - 1]\n    b.sort(reverse=True)\n    (t, o) = (0, 0)\n    for i in b:\n        if i - t >= 3:\n            o += i - t - 1\n            t += 4\n        elif i - t >= 1:\n            o += 1\n            t += 2\n    print(n - o)", "import heapq\nfor _ in range(int(input())):\n    (n, m) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    gaps = [0] * m\n    arr.sort()\n    for i in range(len(arr) - 1):\n        gaps[i] = arr[i + 1] - arr[i] - 1\n    gaps[-1] = n + arr[0] - arr[-1] - 1\n    gaps.sort(reverse=True)\n    ans = 0\n    d = 0\n    for i in range(m):\n        gaps[i] = gaps[i] - 2 * d\n        if gaps[i] < 1:\n            break\n        if gaps[i] <= 2:\n            ans += 1\n            d += 1\n        else:\n            d += 2\n            ans += gaps[i] - 1\n    print(n - ans)", "t = int(input())\n\ndef noOfInfected(n, m, l):\n    l.sort()\n    (diff, infected, uninfected, index) = ([], 0, 0, -1)\n    for i in range(len(l)):\n        if i > 0:\n            diff.append(l[i] - l[i - 1] - 1)\n        else:\n            diff.append(l[i] - 1)\n    diff[0] += n - l[-1]\n    diff.sort(reverse=True)\n    for i in range(len(diff)):\n        if infected >= diff[i] or diff[i] == 0:\n            break\n        diff[i] -= infected\n        if diff[i] > 1:\n            diff[i] -= 1\n        infected += 4\n        uninfected += diff[i]\n        index += 1\n    if index > -1:\n        return n - sum(diff[0:index + 1])\n    return n\nwhile t:\n    (n, m) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    print(noOfInfected(n, m, l))\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    arr1 = []\n    for i in range(0, m - 1):\n        arr1.append(arr[i + 1] - arr[i] - 1)\n    arr1.append(n - arr[m - 1] + arr[0] - 1)\n    arr1.sort(reverse=True)\n    ans = 0\n    flag = True\n    time = 0\n    i = 0\n    while flag and i < m:\n        ele = arr1[i] - time * 2\n        if ele <= 0:\n            flag = False\n        elif ele == 1:\n            ans += 1\n            flag = False\n        else:\n            ans += ele - 1\n            i += 1\n            time += 2\n    print(n - ans)", "for i in range(int(input())):\n    (a, b) = input().split(' ')\n    num_h = int(a)\n    num_f = int(b)\n    infected = [int(x) for x in input().split(' ')]\n    infected.sort()\n    if num_h == num_f:\n        print(num_h)\n    else:\n        list_u = []\n        for i in range(num_f - 1):\n            list_u.append(infected[i + 1] - infected[i] - 1)\n        list_u.append(infected[0] + (num_h - infected[-1]) - 1)\n        list_u.sort()\n        protected = 0\n        protect = 1\n        days = 0\n        while protect <= len(list_u) and list_u[-protect] - days * 2 > 0:\n            if list_u[-protect] - days * 2 == 1 or list_u[-protect] - days * 2 == 2:\n                protected += 1\n                days += 1\n            else:\n                protected += list_u[-protect] - days * 2 - 1\n                days += 2\n            protect += 1\n        num_infect = num_h - protected\n        print(num_infect)", "t = int(input())\n\ndef solve():\n    (n, m) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    lst.sort()\n    arr = []\n    for i in range(1, m):\n        arr += [lst[i] - lst[i - 1] - 1]\n    arr += [lst[0] + n - lst[-1] - 1]\n    arr.sort(reverse=True)\n    t = 0\n    saved = 0\n    for i in range(m):\n        arr[i] = arr[i] - 2 * t\n        if arr[i] > 2:\n            saved += arr[i] - 1\n            t += 2\n        elif arr[i] == 1:\n            saved += 1\n            t += 1\n        elif arr[i] == 2:\n            saved += 1\n            t += 1\n    print(n - saved)\nwhile t:\n    solve()\n    t -= 1", "import math\nimport collections\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    ans = []\n    for i in range(1, m):\n        ans.append(l[i] - l[i - 1] - 1)\n    ans.append(l[0] + n - l[-1] - 1)\n    ans.sort(reverse=True)\n    days = 0\n    save = 0\n    for i in ans:\n        temp = i - 2 * days\n        if temp <= 0:\n            continue\n        elif temp == 1:\n            days += 1\n            save += 1\n        else:\n            temp -= 1\n            days += 2\n            save += temp\n    print(n - save)", "n = int(input())\nfor i in range(n):\n    (n_, m) = list(map(int, input().split()))\n    arr = sorted(list(map(int, input().split())))\n    arr_ = []\n    arr_.append(n_ - arr[-1] + arr[0] - 1)\n    for j in range(m - 1):\n        arr_.append(arr[j + 1] - arr[j] - 1)\n    arr_.sort(reverse=True)\n    s = 0\n    co = 0\n    for j in arr_:\n        if j >= 4 * co + 1:\n            if j == 4 * co + 1:\n                s += 1\n            else:\n                s += j - (4 * co + 1)\n        else:\n            break\n        co += 1\n    print(n_ - s)", "for tcase in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    d = [a[i] - a[i - 1] for i in range(m)]\n    d[0] += n\n    d.sort(reverse=True)\n    ans = 0\n    i = 0\n    loop = True\n    while i < m and loop and (d[i] - 2 - 4 * i >= 0):\n        ans += max(d[i] - 2 - 4 * i, 1)\n        loop = d[i] - 2 - 4 * i > 0\n        i += 1\n    print(n - ans)", "t = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a = sorted(a)\n    b = []\n    for j in range(m - 1):\n        b.append(abs(a[j] - a[j + 1]) - 1)\n    c = abs(a[0] - 1) + abs(a[-1] - n)\n    b.append(c)\n    b = sorted(b, reverse=True)\n    d = 0\n    e = len(b)\n    f = 0\n    for k in range(e):\n        g = b[k] - 2 * f\n        if g == 1:\n            d = d + g\n            break\n        elif g <= 0:\n            break\n        else:\n            g = g - 1\n            d = d + g\n            f += 2\n    print(n - d)", "def solve():\n    (n, m) = map(int, input().split())\n    inf = [int(i) for i in input().split()]\n    inf.sort()\n    arr = [inf[0] - 1 + n - inf[-1]]\n    for i in range(1, len(inf)):\n        arr.append(inf[i] - inf[i - 1] - 1)\n    arr.sort()\n    ans = 0\n    val = 0\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] + val == 1:\n            ans += 1\n        else:\n            ans += max(0, arr[i] + val - 1)\n        val += -4\n    print(n - ans)\nt = int(input())\nwhile t:\n    t -= 1\n    solve()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = sorted(map(int, input().split()))\n    seps = []\n    for i in range(1, m):\n        seps.append(a[i] - a[i - 1] - 1)\n    seps.append(a[0] - 1 + n - a[-1])\n    seps.sort()\n    inf = 0\n    protected = 0\n    while seps and seps[-1] > inf:\n        protected += max(1, seps.pop() - 1 - inf)\n        inf += 4\n    print(n - protected)", "x = lambda : map(int, input().split())\n(t,) = x()\nfor _ in '1' * t:\n    (n, m) = x()\n    a = sorted(x())\n    d = []\n    for i in range(m - 1):\n        d.append(a[i + 1] - a[i] - 1)\n    d.append(n - a[m - 1] + a[0] - 1)\n    d.sort(reverse=True)\n    cnt = 0\n    dy = 0\n    for y in d:\n        if y > dy * 2:\n            y -= dy * 2\n            cnt += 1\n            dy += 1\n            if y - 2 > 0:\n                cnt += y - 2\n                dy += 1\n        else:\n            break\n    print(n - cnt)", "T = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    ran = []\n    for i in range(m - 1):\n        ran.append(l[i + 1] - l[i] - 1)\n    ran.append(n - l[-1] + (l[0] - 1))\n    ran.sort()\n    ran = ran[::-1]\n    count = 0\n    for i in range(len(ran)):\n        x = ran[i] - i * 4\n        if x > 0:\n            if x == 1 or x == 2:\n                count += 1\n            else:\n                count += x - 1\n    print(n - count)", "n = int(input())\nfor _ in range(n):\n    h = input().split(' ')\n    n = int(h[0])\n    m = int(h[1])\n    inf = [int(i) for i in input().split(' ')]\n    inf.sort()\n    spaces = [n - inf[-1] - 1 + inf[0]] + [inf[i] - inf[i - 1] - 1 for i in range(1, m)]\n    spaces.sort(reverse=True)\n    infected = m\n    r = 0\n    for x in spaces:\n        q = x - 2 * r\n        if q <= 0:\n            infected += x\n        elif q == 2:\n            infected += 1 + 2 * r\n        elif q == 1:\n            infected += 2 * r\n        else:\n            infected += 1 + 2 * r\n            r += 1\n        r += 1\n    print(infected)", "def get_holes(m, infected):\n    g = []\n    infected.sort()\n    for i in range(len(infected) - 1):\n        g.append(infected[i + 1] - infected[i] - 1)\n    g.append(m - infected[-1] + infected[0] - 1)\n    return g\n\ndef solve(n, m, infected):\n    h = get_holes(m, infected)\n    h.sort(reverse=True)\n    k = 0\n    protected = 0\n    inf = 0\n    for k in range(len(h)):\n        r = h[k] - inf\n        protected += r - 1 if r > 1 else 1 if r == 1 else 0\n        inf += 4\n    return n - protected\nt = int(input())\nfor i in range(t):\n    sizes = input().split()\n    n = int(sizes[0])\n    m = int(sizes[0])\n    infected = [int(e) for e in input().split()]\n    print(solve(n, m, infected))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = sorted([int(i) for i in input().split()])\n    if m == 1:\n        print(2)\n        continue\n    b = []\n    for i in range(1, m):\n        b.append(abs(a[i] - a[i - 1]) - 1)\n    b.append(n - a[-1] + a[0] - 1)\n    b.sort(reverse=1)\n    (inf, d) = (0, 0)\n    for k in b:\n        dd = d * 2\n        if dd >= k:\n            inf += k\n            continue\n        inf += dd\n        if k - dd >= 2:\n            inf += 1\n            d += 2\n        else:\n            d += 1\n    print(inf + m)", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort()\n    distances = []\n    for i in range(1, m):\n        distances.append(a[i] - a[i - 1] - 1)\n    distances.append(n - a[-1] + (a[0] - 1))\n    distances.sort(reverse=True)\n    non_infected_houses = 0\n    for i in range(0, len(distances)):\n        if distances[i] - 4 * i - 1 < 0:\n            break\n        elif distances[i] - 4 * i - 1 == 0:\n            non_infected_houses += 1\n        non_infected_houses += distances[i] - 4 * i - 1\n    print(n - non_infected_houses)", "import math\nfrom collections import defaultdict\n\ndef resolve(house_num, affect_house):\n    section_num_list = []\n    affect_house = sorted(affect_house)\n    affect_len = len(affect_house)\n    for index in range(affect_len - 1):\n        a_section = affect_house[affect_len - 1 - index] - affect_house[affect_len - 1 - index - 1] - 1\n        if a_section >= 1:\n            section_num_list.append(a_section)\n    section_last = affect_house[0] - 1 + house_num - affect_house[affect_len - 1]\n    section_num_list.append(section_last)\n    sorted_list = sorted(section_num_list, reverse=True)\n    temp_max_index = 0\n    save_num = 0\n    day = 0\n    while not sorted_list[temp_max_index] - day * 4 <= 0:\n        sorted_list[temp_max_index] -= day * 4\n        if sorted_list[temp_max_index] == 1:\n            save_num += 1\n        else:\n            save_num += sorted_list[temp_max_index] - 1\n        if temp_max_index == len(sorted_list) - 1:\n            break\n        else:\n            temp_max_index += 1\n            day += 1\n    return house_num - save_num\n\ndef read_input():\n    ints = input().split(' ')\n    house_num = int(ints[0])\n    affect_house = []\n    lines_2 = input().split(' ')\n    for item in lines_2:\n        affect_house.append(int(item))\n    return (house_num, affect_house)\ncase_num = int(input())\nif not case_num == 0:\n    for index in range(case_num):\n        (house_num, affect_house) = read_input()\n        res = resolve(house_num, affect_house)\n        print(res)", "t = int(input())\nfor ii in range(t):\n    (n, m) = map(int, input().split())\n    s = list(map(int, input().split()))\n    s.sort()\n    ll = []\n    for i in range(1, m):\n        ll.append(s[i] - s[i - 1] - 1)\n    ll.append(s[0] + n - s[m - 1] - 1)\n    ll.sort()\n    ll = ll[::-1]\n    i = 0\n    x = 0\n    ans = 0\n    while i < len(ll):\n        if ll[i] - x >= 1:\n            if ll[i] - x <= 2:\n                ans = ans + 1\n            else:\n                x = x + 2\n                ans = ans + (ll[i] - x + 1)\n            x = x + 2\n        i = i + 1\n    print(n - ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    a.sort()\n    p = []\n    for i in range(m - 1):\n        p.append(abs(a[i + 1] - a[i]) - 1)\n    if n - a[-1] + a[0] - 1 > 0:\n        p.append(n - a[-1] + a[0] - 1)\n    p.sort(reverse=True)\n    infected = 0\n    saved = 0\n    for i in range(len(p)):\n        p[i] -= infected\n        if p[i] <= 0:\n            continue\n        if p[i] == 1 or p[i] == 2:\n            saved += 1\n            infected += 2\n            continue\n        saved += p[i] - 1\n        infected += 4\n    print(n - saved)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    L = list(map(int, input().split()))\n    L.sort()\n    M = []\n    for i in range(1, m):\n        a = L[i] - L[i - 1] - 1\n        if a > 0:\n            M.append(a)\n    a = n - L[-1] + L[0] - 1\n    if a > 0:\n        M.append(a)\n    M.sort(reverse=True)\n    i = 0\n    j = 0\n    k = len(M)\n    ans = 0\n    while i < k:\n        a = M[i]\n        if a - 4 * j == 1:\n            ans += 1\n            i += 1\n            j += 1\n        elif a - 4 * j >= 1:\n            ans += a - 4 * j - 1\n            i += 1\n            j += 1\n        else:\n            break\n    print(n - ans)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    L = []\n    L.append(n - a[-1] + a[0] - 1)\n    for i in range(m - 1):\n        L.append(a[i + 1] - a[i] - 1)\n    L.sort()\n    left = 0\n    sum = m\n    for k in range(m):\n        if L[k] <= 4 * (m - k - 1):\n            sum += L[k]\n        elif L[k] == 4 * (m - k - 1) + 1:\n            sum += 4 * (m - k - 1)\n        elif L[k] > 4 * (m - k - 1) + 1:\n            sum += 4 * (m - k - 1) + 1\n    print(sum)", "from math import ceil\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    b = [n - a[-1] + a[0] - 1]\n    for i in range(m - 1):\n        b += [a[i + 1] - a[i] - 1]\n    b.sort(reverse=True)\n    x = 0\n    for i in range(m):\n        b[i] = max(b[i] - 2 * x, 0)\n        if b[i] == 0:\n            continue\n        elif b[i] == 1:\n            x += 1\n        elif b[i] == 2:\n            b[i] -= 1\n            x += 1\n        else:\n            b[i] -= 1\n            x += 2\n    else:\n        print(n - sum(b))", "for pratyush in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    (d, f, a) = ([0] * (m + 1), 0, [0] + a)\n    a = [0] + sorted(a[1:])\n    for i in range(2, m + 1):\n        d[i] = a[i] - a[i - 1] - 1\n    d[1] = a[1] - 1 + (n - a[m])\n    d = [0] + sorted(d[1:], reverse=True)\n    for i in range(1, m + 1):\n        x = 2 * (i - 1)\n        y = x * 2\n        z = d[i] - y\n        if z > 0:\n            if z == 1 or z == 2:\n                f += 1\n            if z >= 3:\n                f += d[i] - y - 1\n    print(n - f)", "import sys\ninput = sys.stdin.readline\nresult = []\nt = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    array = list(map(int, input().split()))\n\n    def solve():\n        array.sort()\n        borderHouses = array[0] - 1 + (n - array[-1])\n        newArr = [borderHouses]\n        for i in range(len(array) - 1):\n            (firstNum, secondNum) = (array[i], array[i + 1])\n            newArr.append(secondNum - firstNum - 1)\n        newArr.sort(reverse=True)\n        count = 0\n        (newCnt, halfCnt) = (0, 0)\n        for num in newArr:\n            newNum = max(num - newCnt * 4 - halfCnt * 2, 0)\n            if newNum == 1:\n                count += max(newNum, 0)\n                halfCnt += 1\n            else:\n                count += max(newNum - 1, 0)\n                newCnt += 1\n        return n - count\n    res = solve()\n    print(res)", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    a = sorted(map(int, input().split()))\n    b = []\n    for i in range(1, m):\n        if a[i] != a[i - 1] + 1:\n            b += [a[i] - a[i - 1] - 1]\n    if a[0] - 1 + n - a[-1] > 0:\n        b += [a[0] - 1 + n - a[-1]]\n    b = sorted(b)\n    ans = 0\n    for i in range(1, len(b) + 1):\n        if b[-i] <= (i - 1) * 4:\n            break\n        if b[-i] <= (i - 1) * 4 + 2:\n            ans += 1\n            break\n        ans += b[-i] - (i - 1) * 4 - 1\n    print(n - ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    x = arr[0]\n    for i in range(m - 1):\n        arr[i] = arr[i + 1] - arr[i] - 1\n    arr[m - 1] = n + x - arr[m - 1] - 1\n    x = 0\n    count = 0\n    arr.sort(reverse=True)\n    for i in range(m):\n        if arr[i] - 2 * x > 2:\n            count += arr[i] - 2 * x - 1\n            x += 2\n            arr[i] = 0\n        elif arr[i] - 2 * x > 0:\n            count += 1\n            x += 1\n            arr[i] = 0\n    print(n - count)", "T = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    infe = list(map(int, input().split()))\n    infe.sort()\n    ran = []\n    for i in range(m - 1):\n        ran.append(infe[i + 1] - infe[i] - 1)\n    ran.append(n - infe[-1] + (infe[0] - 1))\n    ran.sort()\n    ran = ran[::-1]\n    count = 0\n    for i in range(len(ran)):\n        if ran[i] - i * 4 > 0:\n            if ran[i] - i * 4 == 1 or ran[i] - i * 4 == 2:\n                count += 1\n            else:\n                count += ran[i] - i * 4 - 1\n    print(n - count)", "for _ in range(int(input())):\n    (n, x) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort()\n    d = []\n    for i in range(len(a)):\n        if i != len(a) - 1:\n            d.append(a[i + 1] - (1 + a[i]))\n        else:\n            d.append(n + a[0] - (a[i] + 1))\n    d.sort(reverse=True)\n    r = sum(d)\n    p = 0\n    for i in range(len(d)):\n        if d[i] - i * 4 > 1:\n            p += d[i] - (1 + i * 4)\n        elif d[i] - i * 4 == 1:\n            p += 1\n            break\n        else:\n            break\n    print(n - p)", "for _ in range(int(input())):\n    [m, n] = list(map(int, input().split()))\n    a = list(map(int, input().split(' ')))\n    a.sort()\n    arr = []\n    for i in range(len(a) - 1):\n        arr.append(a[i + 1] - a[i] - 1)\n    arr.append(m + a[0] - a[-1] - 1)\n    arr.sort(reverse=True)\n    ans = 0\n    minus = 0\n    while arr and arr[0] - minus > 0:\n        ans += max(1, arr[0] - minus - 1)\n        minus += 4 if arr[0] - minus > 2 else 2\n        arr.pop(0)\n    print(m - ans)", "from math import ceil\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    b = [n - a[-1] + a[0] - 1]\n    for i in range(m - 1):\n        b += [a[i + 1] - a[i] - 1]\n    b.sort(reverse=True)\n    x = 0\n    for i in range(m):\n        b[i] = max(b[i] - 2 * x, 0)\n        if b[i] == 0:\n            continue\n        elif b[i] == 1:\n            x += 1\n        elif b[i] == 2:\n            b[i] -= 1\n            x += 1\n        else:\n            b[i] -= 1\n            x += 2\n    else:\n        print(n - sum(b))", "a = int(input())\nfor i in range(a):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    gap = [0] * m\n    for j in range(m - 1):\n        gap[j] = arr[j + 1] - arr[j] - 1\n    gap[m - 1] = n - arr[m - 1] + arr[0] - 1\n    gap.sort(reverse=True)\n    for k in range(len(gap)):\n        gap[k] -= 4 * k + 1\n    for l in range(len(gap)):\n        if gap[l] < 0:\n            gap[l] = 0\n        elif gap[l] == 0:\n            gap[l] = 1\n    print(n - sum(gap))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    uninfected = []\n    for i in range(m - 1):\n        if arr[i + 1] - arr[i] - 1:\n            uninfected.append(arr[i + 1] - arr[i] - 1)\n    if arr[0] + n - arr[-1] - 1:\n        uninfected.append(arr[0] + n - arr[-1] - 1)\n    uninfected.sort(reverse=True)\n    offset = ans = 0\n    k = len(uninfected)\n    for i in range(k):\n        if uninfected[i] - offset == 1 or uninfected[i] - offset == 2:\n            ans += 1\n            offset += 2\n        else:\n            ans += max(uninfected[i] - 1 - offset, 0)\n            offset += 4\n    return n - ans\nfor _ in range(int(input())):\n    print(solve())", "import collections\nimport math\nimport sys\nfrom queue import PriorityQueue\n\ndef main(testnumber):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    spaces = []\n    space = a[0] - 1 + n - a[-1]\n    if space > 0:\n        spaces.append(space)\n    for i in range(len(a) - 1):\n        if a[i + 1] - a[i] - 1 > 0:\n            spaces.append(a[i + 1] - a[i] - 1)\n    spaces = sorted(spaces, reverse=True)\n    saved = 0\n    minus = 0\n    for i in spaces:\n        s = 0\n        if i - minus * 2 > 0:\n            s = 1\n        s = max(s, i - minus * 2 - 1)\n        if s > 0:\n            saved += s\n            minus += 1\n        minus += 1\n    print(n - saved)\nt = int(input())\ncnt = 1\nwhile t > 0:\n    main(cnt)\n    cnt += 1\n    t -= 1", "import copy\nt = int(input())\nfor tt in range(t):\n    (n, m) = map(int, input().split())\n    a = sorted([int(i) for i in input().split()])\n    lens = []\n    ans = copy.deepcopy(n)\n    if m == 1:\n        if n < 3:\n            print(n)\n        elif n == 3:\n            print(1)\n        else:\n            print(2)\n        continue\n    for i in range(1, m):\n        if a[i] - a[i - 1] > 1:\n            lens.append(a[i] - a[i - 1] - 1)\n    if n - a[-1] + a[0] - 1 > 0:\n        lens.append(n - a[-1] + a[0] - 1)\n    lens.sort(reverse=True)\n    days = 0\n    for val in lens:\n        if val - days * 2 > 0:\n            if val - days * 2 == 1:\n                ans -= 1\n                break\n            if val - days * 2 == 2:\n                ans -= 1\n                days += 1\n            else:\n                ans -= val - days * 2 - 1\n                days += 2\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    diff = []\n    for i in range(m):\n        if i == m - 1:\n            diff.append(n - arr[i] + arr[0] - 1)\n        else:\n            diff.append(arr[i + 1] - arr[i] - 1)\n    diff.sort(reverse=True)\n    ans = 0\n    for i in range(len(diff)):\n        if i == 0:\n            if diff[i] == 1:\n                ans += 1\n            elif diff[i] > 1:\n                ans += diff[i] - 1\n        elif diff[i] - 4 * i > 0:\n            if diff[i] - 4 * i > 1:\n                ans += diff[i] - 4 * i - 1\n            else:\n                ans += 1\n    print(n - ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    dif = []\n    for i in range(m):\n        if i == m - 1:\n            dif.append(n - a[i] + a[0] - 1)\n            continue\n        dif.append(a[i + 1] - a[i] - 1)\n    dif.sort(reverse=True)\n    res = 0\n    inc = 0\n    j = m - 1\n    for i in range(m):\n        if dif[i] - 4 * inc == 1:\n            dif[i] = 1\n            j = i\n            break\n        dif[i] = max(0, dif[i] - 4 * inc - 1)\n        inc += 1\n    for i in range(j + 1, m):\n        dif[i] = 0\n    print(n - sum(dif))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    a = []\n    for i in range(m - 1):\n        a.append(l[i + 1] - l[i] - 1)\n    a.append(l[0] - 1 + n - l[-1])\n    a.sort(reverse=True)\n    ans = 0\n    x = 0\n    for i in range(len(a)):\n        if a[i] - x - 1 == 0:\n            ans += 1\n            break\n        else:\n            ans += max(a[i] - x - 1, 0)\n            x += 4\n    print(n - ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    h = [a[0] - 1 + n - a[-1]]\n    for i in range(1, m):\n        h.append(a[i] - a[i - 1] - 1)\n    h.sort(reverse=True)\n    non = 0\n    for i in range(m):\n        non += max(0, h[i] - 4 * i - 1)\n        if h[i] - 4 * i == 1:\n            non += 1\n    print(n - non)", "import math\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = sorted(map(int, input().split()))\n    intervals = [(a[i], a[i + 1]) for i in range(m - 1)]\n    intervals.append((a[m - 1], n + a[0]))\n    intervals.sort(key=lambda x: x[1] - x[0], reverse=True)\n    days = 0\n    count = m\n    for (x, y) in intervals:\n        nums = y - x - 1\n        if nums == 0:\n            continue\n        if nums <= days << 1:\n            count += nums\n            continue\n        left = nums - (days << 1)\n        count += (days << 1) + (1 if left > 1 else 0)\n        days += 2\n    print(count)", "t = int(input())\nwhile t > 0:\n    (n, m) = list(map(int, input().split(' ')))\n    infected = list(map(int, input().split(' ')))\n    infected.sort(key=lambda x: -x)\n    ranges = []\n    for i in range(1, m + 1):\n        if i == m:\n            ranges.append(infected[m - 1] + n - infected[0] - 1)\n        else:\n            ranges.append(infected[i - 1] - infected[i] - 1)\n    ranges.sort(key=lambda x: -x)\n    protect = 0\n    count = 0\n    for i in range(len(ranges)):\n        current = ranges[i]\n        if current - 2 * count > 0:\n            temp = max(1, current - 2 * count - 1)\n            protect += temp\n        count += 2\n    print(n - protect)\n    t -= 1", "t = int(input())\nwhile t > 0:\n    (n, m) = list(map(int, input().split(' ')))\n    infected = list(map(int, input().split(' ')))\n    infected.sort(key=lambda x: -x)\n    ranges = []\n    for i in range(1, m + 1):\n        if i == m:\n            ranges.append(infected[m - 1] + n - infected[0] - 1)\n        else:\n            ranges.append(infected[i - 1] - infected[i] - 1)\n    ranges.sort(key=lambda x: -x)\n    protect = 0\n    count = 0\n    for i in range(len(ranges)):\n        current_range = ranges[i]\n        if current_range - 2 * count > 0:\n            temp = max(1, current_range - 2 * count - 1)\n            protect += temp\n        count += 2\n    print(n - protect)\n    t -= 1", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    res = []\n    a.sort()\n    for i in range(1, m):\n        res.append(a[i] - a[i - 1] - 1)\n    res.append(n - a[-1] + a[0] - 1)\n    res.sort(reverse=True)\n    k = 0\n    for i in range(len(res)):\n        res[i] -= k\n        if res[i] == 1:\n            k += 2\n        else:\n            k += 4\n            res[i] -= 1\n        res[i] = max(0, res[i])\n    print(n - sum(res))", "x = lambda : map(int, input().split())\n(t,) = x()\nfor _ in '1' * t:\n    (n, m) = x()\n    a = sorted(x())\n    d = []\n    for i in range(m - 1):\n        d.append([a[i + 1] - a[i] - 1, a[i], a[i + 1]])\n    d.append([n - a[m - 1] + a[0] - 1, a[0], a[m - 1]])\n    d.sort(key=lambda x: x[0])\n    d = d[::-1]\n    cnt = 0\n    dy = 0\n    for y in d:\n        if y[0] > dy * 2:\n            y[0] -= dy * 2\n            cnt += 1\n            dy += 1\n            if y[0] - 2 > 0:\n                cnt += y[0] - 2\n                dy += 1\n        else:\n            break\n    print(n - cnt)", "for _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    di = []\n    a.sort()\n    for i in range(1, m):\n        di.append([a[i] - a[i - 1] - 1, 0])\n    if n > 1:\n        di.append([n - a[-1] + a[0] - 1, 0])\n    di.sort()\n    di.reverse()\n    ans = 0\n    c = 0\n    if 4545555 == 'fhrgyughugtrhghr':\n        print('Tanmay')\n    aa = 0\n    while di:\n        if di[0][0] - c + aa > 0 and di[0][1] < 2:\n            di[0][1] += 1\n            if aa == 0:\n                aa = 1\n            else:\n                aa = 0\n            c += 2\n            if di[0][1] == 2:\n                ans += di[0][0] - c + 2\n                del di[0]\n            else:\n                ans += 1\n        else:\n            break\n    for i in di:\n        ans += max(0, i[0] - c + aa)\n    print(n - ans)", "tests = int(input())\n\ndef get_pair_potential(a, b, n_houses):\n    return (b - a) % n_houses - 1\nfor i in range(tests):\n    (houses, infected) = map(int, input().split())\n    infected_ids = sorted(list(map(int, input().split())))\n    if infected == houses:\n        print(infected)\n        continue\n    elif len(infected_ids) == 1:\n        if houses == 2:\n            print(1)\n        elif houses > 2:\n            print(2)\n        continue\n    pairs = []\n    for (first, last) in zip(infected_ids, infected_ids[1:] + infected_ids[:1]):\n        p_size = get_pair_potential(first, last, houses)\n        pairs.append([p_size, [first, last]])\n    pairs.sort(reverse=True)\n    saved_houses = 0\n    steps = 0\n    for pair in pairs:\n        (p_size, boundaries) = pair\n        (first, last) = boundaries\n        remaining_size = p_size - 2 * steps\n        if remaining_size <= 0:\n            break\n        elif remaining_size <= 2:\n            saved_houses += 1\n            steps += 1\n            continue\n        else:\n            saved_houses += remaining_size - 1\n            steps += 2\n            continue\n    print(houses - saved_houses)", "import heapq\n\nclass Node:\n\n    def __init__(self, length):\n        self.length = length\n\n    def __lt__(self, other):\n        return self.length > other.length\n\n    def __repr__(self):\n        return str(self.length)\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    infected = list(map(int, input().split()))\n    if m == 1:\n        if n <= 2:\n            print(1)\n        else:\n            print(2)\n        continue\n    infected.sort()\n    seq = []\n    for i in range(len(infected) - 1):\n        heapq.heappush(seq, Node(infected[i + 1] - infected[i] - 1))\n    if len(infected) > 1:\n        heapq.heappush(seq, Node(n - (infected[-1] - infected[0] + 1)))\n    passed = 0\n    protected = 0\n    while seq:\n        node = heapq.heappop(seq)\n        if node.length - 2 * passed > 0:\n            protected += max(1, node.length - 2 * passed - 1)\n            passed += 2\n    print(n - protected)"]