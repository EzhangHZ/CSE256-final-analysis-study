["import sys\ninpu = sys.stdin.readline\nprin = sys.stdout.write\n(n, m) = map(int, inpu().split())\nmatrica = []\nlosekolone = [0 for i in range(m + 1)]\nfor i in range(0, n):\n    matrica.append(inpu())\nif n != 1 and m != 1:\n    for j in range(0, m - 1):\n        for i in range(1, n):\n            if matrica[i][j] == 'X' and matrica[i - 1][j + 1] == 'X':\n                losekolone[j + 1] += 1\n                break\n        losekolone[j + 1] += losekolone[j]\nq = int(inpu())\nfor i in range(0, q):\n    (xj, xd) = map(int, inpu().split())\n    if losekolone[xj - 1] == losekolone[xd - 1]:\n        prin('YES\\n')\n    else:\n        prin('NO\\n')", "import sys\nimport bisect\ninput = sys.stdin.readline\n\ndef SieveOfEratosthenes(n):\n    arr = []\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p ** 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0] = False\n    prime[1] = False\n    for p in range(n + 1):\n        if prime[p]:\n            arr.append(p)\n    return arr\n\ndef solve():\n    (n, m) = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(input())\n    v = []\n    for j in range(1, m):\n        for i in range(1, n):\n            if a[i][j - 1] == 'X' and a[i - 1][j] == 'X':\n                v.append(j)\n                break\n    v.append(m)\n    q = int(input())\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        lower_bound = bisect.bisect_left(v, x, 0, len(v))\n        if v[lower_bound] < y:\n            print('NO')\n        else:\n            print('YES')\nt = 1\nfor _ in range(t):\n    k = solve()", "import sys\ninpu = sys.stdin.readline\nprin = sys.stdout.write\n(n, m) = map(int, inpu().split())\nstrs = []\nfor i in range(n):\n    strs.append(inpu())\nbycol = [0] * m\nfor i in range(1, n):\n    for j in range(1, m):\n        if strs[i - 1][j] == 'X' and strs[i][j - 1] == 'X':\n            bycol[j] += 1\nsums = [bycol[0]]\nfor i in range(1, m):\n    sums.append(sums[-1] + bycol[i])\nq = int(inpu())\nfor i in range(q):\n    (a, b) = map(int, inpu().split())\n    if a == m:\n        prin('YES\\n')\n    elif sums[b - 1] - sums[a - 1] == 0:\n        prin('YES\\n')\n    else:\n        prin('NO\\n')", "import sys\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\nstrs = [input() for i in range(n)]\nbycol = [0] * m\nfor i in range(1, n):\n    for j in range(1, m):\n        if strs[i - 1][j] == 'X' and strs[i][j - 1] == 'X':\n            bycol[j] += 1\nsums = [bycol[0]]\nfor i in range(1, m):\n    sums.append(sums[-1] + bycol[i])\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    if a == m:\n        print('YES')\n    else:\n        print('YES') if sums[b - 1] - sums[a - 1] == 0 else print('NO')", "from sys import stdin\ninput = stdin.readline\n(n, m) = map(int, input().split())\ns = [input() for i in range(n)]\nq = int(input())\npre = [0] * m\nfor i in range(1, n):\n    for j in range(1, m):\n        if s[i - 1][j] == 'X' and s[i][j - 1] == 'X':\n            pre[j] = 1\nfor i in range(1, m):\n    pre[i] += pre[i - 1]\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    if pre[r - 1] > pre[l - 1]:\n        print('NO')\n    else:\n        print('YES')", "import sys\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\ns = [input() for i in range(n)]\nf = [0, 0]\nacc = 0\nfor j in range(1, m):\n    for i in range(n - 1):\n        if s[i][j] == 'X' and s[i + 1][j - 1] == 'X':\n            acc += 1\n            break\n    f.append(acc)\nk = int(input())\nfor i in range(k):\n    (a, b) = map(int, input().split())\n    print('YES' if f[b] - f[a] == 0 else 'NO')", "from sys import stdin\ninput = stdin.readline\n(n, m) = map(int, input().split())\ns = [input() for i in range(n)]\nq = int(input())\npre = [0] * m\nfor i in range(1, n):\n    for j in range(1, m):\n        if s[i - 1][j] == 'X' and s[i][j - 1] == 'X':\n            pre[j] = 1\nfor i in range(1, m):\n    pre[i] += pre[i - 1]\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    if pre[r - 1] > pre[l - 1]:\n        print('NO')\n    else:\n        print('YES')", "import sys\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\ngrid = []\nfor _ in range(n):\n    grid.append(input())\ncumsum_issue_list = [0] * m\nfor i in range(1, n):\n    for j in range(1, m):\n        if grid[i][j - 1] == 'X' and grid[i - 1][j] == 'X':\n            cumsum_issue_list[j] += 1\nfor i in range(1, m):\n    cumsum_issue_list[i] += cumsum_issue_list[i - 1]\nq = int(input())\nfor _ in range(q):\n    (x1, x2) = map(int, input().split())\n    if cumsum_issue_list[x2 - 1] - cumsum_issue_list[x1 - 1] == 0:\n        print('YES')\n    else:\n        print('NO')", "import math\nfrom heapq import heappush, heappop, heapify\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nH = 1000000000 + 7\n(n, m) = M()\nl = []\nfor i in range(n):\n    l.append(S())\ndp = [0] * (m + 1)\nfor i in range(1, n):\n    for j in range(m - 1):\n        if l[i][j] == 'X' and l[i - 1][j + 1] == 'X':\n            dp[j + 1] = 1\nfor i in range(1, m + 1):\n    dp[i] += dp[i - 1]\nfor i in range(I()):\n    (l, r) = M()\n    if dp[r - 1] - dp[l - 1]:\n        print('NO')\n    else:\n        print('YES')", "from sys import stdin\nread = stdin.readline\n(n, m) = map(int, read().split())\ngrid = []\nfor i in range(n):\n    grid.append(read())\nundet = [0 for i in range(m + 1)]\nfor i in range(n):\n    for j in range(m):\n        if (i + 1 < n and j + 1 < m) and grid[i + 1][j] == 'X' and (grid[i][j + 1] == 'X'):\n            undet[j + 2] = 1\nfor i in range(1, m + 1):\n    undet[i] += undet[i - 1]\nfor _ in range(int(read())):\n    (l, r) = map(int, read().split())\n    if l == r:\n        print('YES')\n        continue\n    if undet[r] - undet[l] == 0:\n        print('YES')\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\n(n, m) = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\ncanMove = [1] * m\nfor i in range(1, m):\n    for j in range(1, n):\n        if grid[j - 1][i] == 'X' and grid[j][i - 1] == 'X':\n            canMove[i] = 0\ncanMovePrefix = [0] * m\ncanMovePrefix[0] = canMove[0]\nfor i in range(1, m):\n    canMovePrefix[i] = canMovePrefix[i - 1] + canMove[i]\nqueries = int(input())\nfor i in range(queries):\n    (a, b) = map(int, input().split())\n    if canMovePrefix[b - 1] - canMovePrefix[a - 1] != b - a:\n        print('NO')\n    else:\n        print('YES')", "from sys import stdin\nimport math\ninput = stdin.readline\n(n, m) = map(int, input().split())\ninputs = []\nfor _ in range(n):\n    inputs.append(input().strip())\ndp = [[-1] * m for _ in range(n)]\nfor i in range(m):\n    dp[0][i] = i if inputs[0][i] == 'X' else -1\nfor i in range(n):\n    dp[i][0] = 0 if inputs[i][0] == 'X' else -1\narr = [-1] * m\nfor i in range(1, n):\n    for j in range(1, m):\n        dp[i][j] = min(dp[i - 1][j], dp[i][j - 1])\n        if dp[i][j] != -1:\n            arr[j] = max(arr[j], dp[i][j])\n        if inputs[i][j] == 'X':\n            dp[i][j] = j\nfor i in range(1, m):\n    arr[i] = max(arr[i], arr[i - 1])\nfor _ in range(int(input())):\n    (c1, c2) = map(int, input().split())\n    if arr[c2 - 1] < c1 - 1:\n        print('YES')\n    else:\n        print('NO')"]