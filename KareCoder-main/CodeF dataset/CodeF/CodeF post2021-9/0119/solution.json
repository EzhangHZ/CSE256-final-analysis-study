["for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // (n // 2 + 1))", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // (n // 2 + 1))", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // (n // 2 + 1))", "import sys\ninput = lambda : sys.stdin.readline()[:-1]\nfor _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    sys.stdout.write(f'{s // (n // 2 + 1)}\\n')", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // (n // 2 + 1))", "for i in [*open(0)][1:]:\n    (n, m) = map(int, i.split())\n    print(m // (n // 2 + 1))", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // (n // 2 + 1))", "from sys import stdin, stdout\nt = int(stdin.readline())\nwhile t > 0:\n    (n, s) = map(int, stdin.readline().split())\n    ls = s\n    res = ls // (n - (n - 1) // 2)\n    print(res)\n    t = t - 1", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // (n // 2 + 1))", "t = int(input())\nans = []\nfor _ in range(t):\n    (n, s) = [int(x) for x in input().split()]\n    if n & 1:\n        ans.append(str(s // (n + 1 >> 1)))\n    else:\n        ans.append(str(s // ((n >> 1) + 1)))\nprint('\\n'.join(ans))", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // (n // 2 + 1))", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // (n // 2 + 1))", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // (n // 2 + 1))", "num_test = int(input())\nresults = []\nfor i in range(num_test):\n    (n, s) = map(int, input().split())\n    if n % 2 == 0:\n        mid = n // 2\n    else:\n        mid = n // 2 + 1\n    x = s / (n - mid + 1)\n    x = int(x)\n    results.append(x)\nfor x in results:\n    print(x)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    count = n // 2 + 1\n    print(k // count)", "def median(n, s):\n    m = n // 2 + 1\n    return int(s // m)\nn = int(input())\nli1 = []\nli2 = []\nfor i in range(0, n):\n    a = input()\n    b = a.split(' ')\n    li1.append(int(b[0]))\n    li2.append(int(b[1]))\nfor i in range(0, n):\n    print(median(li1[i], li2[i]))", "import sys\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef get_int():\n    return int(sys.stdin.readline())\n\ndef get_string():\n    return sys.stdin.readline().strip()\nn = get_int()\nfinal_result = []\nfor i in range(n):\n    word = get_string()\n    final_result.append(word)\nxx = []\nfor i in range(n):\n    xx.append(list(map(int, final_result[i].split())))\n\ndef f(n, s):\n    if n == 1:\n        return s\n    else:\n        if n % 2 == 0:\n            y = n // 2\n        else:\n            y = n // 2 + 1\n        z = n - (y - 1)\n        return s // z\nfor i in range(len(xx)):\n    print(f(xx[i][0], xx[i][1]))", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // (n + 2 >> 1))", "import math\nimport sys\nimport fractions\nimport itertools\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\nfor t in wtf[1:]:\n    (n, s) = map(int, t.split())\n    m = n // 2 + 1\n    print(s // m)", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // (n // 2 + 1))", "import sys\nimport math\ninput = sys.stdin.read()\ninput = input.strip().split('\\n')\nfor line in input[1:]:\n    test = line.split(' ')\n    length = int(test[0])\n    totalsum = int(test[1])\n    med_index = math.ceil(length / 2)\n    zeros = med_index - 1\n    median = totalsum // (length - zeros)\n    print(median)", "for _ in [*open(0)][1:]:\n    (n, s) = map(int, _.split())\n    print(s // (n - (n - 1 >> 1)))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, s) = map(int, input().split())\n    m = (n + 1) // 2 - 1\n    print(s // (n - m))\nfor i in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, s) = map(int, input().split())\n    if n % 2:\n        print(s // ((n + 1) // 2))\n    else:\n        print(s // (n // 2 + 1))", "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nfrom itertools import combinations\nt = int(input())\nfor i in range(t):\n    (n, s) = list(map(int, input().split()))\n    if n == 1:\n        print(s)\n    else:\n        if n % 2 == 0:\n            m = n // 2 - 1\n        else:\n            m = n // 2\n        print(s // (n - m))", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef input_list():\n    return list(map(int, input().split()))\n\ndef input_string():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef input_int_gen():\n    return map(int, input().split())\ntests = inp()\nfor _ in range(tests):\n    (s, n) = input_int_gen()\n    m = s // 2 + 1\n    k = n % m\n    print(n // m)", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // (n // 2 + 1))", "mod = 1000000007\nfrom math import factorial, ceil, pow, sqrt, floor\nfrom sys import stdin, stdout\nfrom collections import defaultdict, Counter, deque\nfor _ in range(int(stdin.readline())):\n    (n, s) = map(int, stdin.readline().split())\n    if n == 1:\n        print(s)\n    else:\n        r = n - (n - 1) // 2\n        print(s // r)", "from math import ceil\nt = int(input())\nout = ''\nwhile t > 0:\n    (n, s) = map(int, input().split())\n    out += str(s // ceil((n + 1) / 2)) + '\\n'\n    t -= 1\nprint(out[:-1])", "from collections import deque, Counter\nfrom collections import defaultdict as dfd\nfrom bisect import bisect, bisect_left\nfrom math import sqrt, gcd, ceil, factorial, log2\nfrom heapq import heapify, heappush, heappop\nMOD = 10 ** 9 + 7\ninf = float('inf')\nans_ = []\n\ndef nin():\n    return int(input())\n\ndef ninf():\n    return int(file.readline())\n\ndef st():\n    return input().strip()\n\ndef stf():\n    return file.readline().strip()\n\ndef read():\n    return list(map(int, input().strip().split()))\n\ndef readf():\n    return list(map(int, file.readline().strip().split()))\n\ndef readfl():\n    return list(map(float, input().strip().split()))\n\ndef readffl():\n    return list(map(float, file.readline().strip().split()))\n\ndef solve():\n    for _ in range(nin()):\n        (n, s) = read()\n        if n == 1:\n            ans_.append(s)\n        elif n == 2:\n            ans_.append(s // 2)\n        else:\n            t = ceil(n / 2) + [1, 0][n % 2]\n            ans_.append(s // t)\nsolve()\nfor i in ans_:\n    print(i)", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // (n + 2 >> 1))", "t = int(input())\nans = []\nfor i in range(t):\n    (n, s) = map(int, input().split())\n    if n % 2 == 0:\n        k = n // 2 - 1\n    else:\n        k = n // 2\n    ans.append(s // (n - k))\nfor i in ans:\n    print(i)", "import sys\nimport math\nt = int(sys.stdin.readline())\nfor line in sys.stdin:\n    (n, s) = [int(x) for x in line.split(' ')]\n    n = int(n // 2 + 1)\n    print(int(math.floor(s / n)))", "import sys\nimport math\ncount = int(sys.stdin.readline())\nwhile count > 0:\n    count = count - 1\n    arr = list(sys.stdin.readline().split(' '))\n    n = int(arr[0])\n    s = int(arr[1])\n    p = int((n - n % 2) / 2) + n % 2 - 1\n    hvost = n - p\n    if hvost == 0:\n        print(s)\n    else:\n        ostNaPoslednee = s % hvost\n        print(math.floor(s / hvost))", "from math import ceil\nfor (n, s) in [map(int, input().split()) for _ in range(int(input()))]:\n    print(s // (n - (ceil(n / 2) - 1)))", "number = int(input())\nb = list()\nfor i in range(number):\n    a = input().split()\n    a = [int(j) for j in a]\n    indice_medio = a[0] // 2\n    if a[0] % 2 == 0:\n        indice_range = a[0] - indice_medio + 1\n    elif a[0] % 2 == 1:\n        indice_range = a[0] - indice_medio\n    mediana = a[1] // indice_range\n    b.append(mediana)\nfor k in b:\n    print(k)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    x = n // 2 + 1\n    print(m // x)\n    t -= 1", "from sys import stdin, setrecursionlimit, maxsize\nfrom collections import deque\nfrom heapq import *\nfrom math import sqrt, gcd, ceil\ninput = stdin.readline\nsetrecursionlimit(10 ** 5)\n\ndef solution(n, s):\n    if n == 1:\n        return s\n    n2 = n // 2 + 1\n    return s // n2\nfor _ in range(int(input())):\n    (p, q) = map(int, input().split())\n    print(solution(p, q))", "import math\n\ndef median(list):\n    n = list[0]\n    summation = list[1]\n    if n % 2 == 0:\n        med = summation / (n / 2 + 1)\n    elif n % 2 != 0:\n        med = summation / ((n + 1) / 2)\n    med = int(med)\n    return med\nt = int(input())\nint_list_2D = []\nfor i in range(t):\n    int_list = []\n    (n, summation) = input().split()\n    n = int(n)\n    summation = int(summation)\n    int_list.append(n)\n    int_list.append(summation)\n    int_list_2D.append(int_list)\nfor x in int_list_2D:\n    y = median(x)\n    print(y)", "import sys\nfrom sys import stdin\nt = int(stdin.readline())\nfor i in range(t):\n    (n, s) = map(int, stdin.readline().split())\n    ans = s // (n - (n - 1) // 2)\n    print(ans)", "from sys import stdin\nfrom collections import defaultdict\nfrom bisect import insort, bisect_left\nfrom math import ceil\nfrom itertools import permutations\nfor _ in range(int(stdin.readline())):\n    (n, s) = map(int, stdin.readline().split())\n    ans = 0\n    x = n // 2 + 1\n    print(max(0, s // x))", "from math import ceil\nt = int(input())\nlengths = [None] * t\nsums = [None] * t\nfor i in range(t):\n    (lengths[i], sums[i]) = map(int, input().split())\nfor i in range(t):\n    print(sums[i] // (lengths[i] - ceil(lengths[i] / 2) + 1))", "import math\nnum_values = input('')\nnum_values = int(num_values)\ntot_values = []\nfor value in range(num_values):\n    n_s = input('')\n    values_split = n_s.split(' ')\n    tot_values.append([int(y) for y in values_split])\nfor (i, value_list) in enumerate(tot_values):\n    if value_list[0] % 2 == 0:\n        middle_number = value_list[0] / 2\n        tot_num_consider = middle_number + 1\n    else:\n        middle_number = (value_list[0] + 1) / 2\n        tot_num_consider = middle_number\n    median_val = math.floor(value_list[1] / tot_num_consider)\n    print(median_val)", "l = []\ntest_case = int(input())\nfor i in range(test_case):\n    l1 = [int(x) for x in input().split()]\n    x = int(l1[0] / 2) + 1\n    y = int(l1[1] / x)\n    l.append(y)\nfor i in l:\n    print(i)", "k = []\nfor _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    k.append(s // (n // 2 + 1))\nfor i in k:\n    print(i)", "from math import *\nn = int(input())\nt = [list(map(int, input().split())) for i in range(n)]\n\ndef median(x, y):\n    n = floor(x / 2) + 1\n    return floor(y / n)\nfor i in range(n):\n    print(median(t[i][0], t[i][1]))", "def f(n, s):\n    if n % 2 == 1:\n        k = n - n // 2\n        return s // k\n    else:\n        k = n // 2 + 1\n        return s // k\nm = []\nx = int(input())\nfor i in range(x):\n    y = input()\n    y1 = y.split(' ')\n    y2 = [int(t) for t in y1]\n    m.append(y2)\nfor j in range(x):\n    print(f(m[j][0], m[j][1]))", "import math\n\ndef GetInpOfTest():\n    (n, s) = map(int, input().split())\n    return (n, s)\n\ndef SolOfTest(n, s):\n    mid_ind = int(math.ceil(n / 2)) - 1\n    num_els_gr_or_eq_mid = n - mid_ind\n    mid = s // num_els_gr_or_eq_mid\n    return mid\nnum_tests = int(input())\nanswers = []\nfor test_ind in range(num_tests):\n    (n, s) = GetInpOfTest()\n    mid = SolOfTest(n, s)\n    answers.append(mid)\nfor answ in answers:\n    print(answ)", "t = eval(input())\nn = []\ns = []\nfor i in range(t):\n    (a, b) = map(int, input().split(' '))\n    n.append(a)\n    s.append(b)\nfor i in range(t):\n    if n[i] == 1:\n        print(s[i])\n    elif n[i] % 2 == 0:\n        print(s[i] // (n[i] - n[i] // 2 + 1))\n    elif n[i] % 2 == 1:\n        print(s[i] // (n[i] - n[i] // 2))", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // (n // 2 + 1))", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // (n // 2 + 1))", "import sys\nimport math as mt\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\nxor = [0]\nfor tc in range(int(input())):\n    (n, s) = I()\n    mid = (n + 1) // 2\n    print(s // (n - mid + 1))", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\ninp_vars_int = lambda : map(int, input().split())\ninp_list_int = lambda : list(map(int, input().split()))\nt = int(input())\nfor _ in range(t):\n    (n, s) = inp_vars_int()\n    n_medover = n // 2 + 1\n    res = s // n_medover\n    print(res)", "from math import ceil\nT = int(input())\nA = [[*map(int, input().split())] for i in range(T)]\nfor i in range(T):\n    print(A[i][1] // (A[i][0] - ceil(A[i][0] / 2) + 1))", "num = int(input())\narr = [[int(i) for i in input().split()] for j in range(num)]\nfor line in arr:\n    if line[0] == 1:\n        print(line[1])\n    elif line[0] > line[1] and line[1] == 1:\n        print(0)\n    else:\n        a = line[0] // 2 + 1\n        print(line[1] // a)", "t = int(input())\nresult_holder = list()\nfor test in range(t):\n    (n, s) = map(int, input().split())\n    m = n // 2 + 1\n    result_holder.append(s // m)\nfor num in result_holder:\n    print(num)", "t = int(input())\nq = []\nprintff = []\nfor i in range(t):\n    (n, s) = map(int, input().split())\n    if int(n / 2) == n / 2:\n        m = n / 2\n    else:\n        m = (n + 1) / 2\n    mod = int(s / (n - m + 1))\n    printff.append(mod)\nfor i in range(len(printff)):\n    print(printff[i])", "from math import ceil, floor\nT = int(input())\nTestCases = []\nfor i in range(T):\n    (n, s) = map(int, input().split(' '))\n    TestCases.append((n, s))\nfor i in range(T):\n    (n, s) = TestCases[i]\n    if n == 1:\n        print(s)\n        continue\n    if s == 1:\n        print(0)\n        continue\n    mid = n - ceil(n / 2) + 1\n    print(floor(s / mid))", "import math\n\ndef median_maximizer(n, s):\n    max_median = math.floor(s / (n - math.ceil(n / 2) + 1))\n    return max_median\nnumber_of_test_cases = int(input())\ntests = []\nfor i in range(number_of_test_cases):\n    (n, s) = [int(x) for x in input().split()]\n    tests.append({'input': {'n': n, 's': s}})\nfor test in tests:\n    print(median_maximizer(**test['input']))", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\n\ndef get_print_int_same(x):\n    sys.stdout.write(str(x) + ' ')\n\ndef get_print_same(x):\n    sys.stdout.write(x + ' ')\nfrom sys import maxsize\nfrom math import floor\n\ndef solve():\n    for _ in range(get_int()):\n        (n, s) = get_ints()\n        get_print_int(s // (n // 2 + 1))\nsolve()", "import math\nw = int(input())\nl = []\nfor i in range(w):\n    t = list(map(int, input().split()))\n    l.append(t)\nfor i in l:\n    r = math.ceil(i[0] / 2)\n    k = i[0] - r + 1\n    if k == 0:\n        print(0)\n    else:\n        print(math.floor(i[1] / k))", "for _ in range(int(input())):\n    (n, s) = [int(i) for i in input().split()]\n    print(s // (n // 2 + 1))", "t = int(input())\nfor i in range(t):\n    (n, s) = map(int, input().split(' '))\n    x = int(s / (n // 2 + 1))\n    print(x)", "for i in range(int(input())):\n    (n, s) = map(int, input().split())\n    p = n // 2 + 1\n    print(s // p)", "import math\nt = int(input())\ncases = []\nfor i in range(t):\n    cases.append(list(map(int, input().split())))\n\ndef answer(n, a):\n    if n == 1:\n        return a\n    else:\n        k = math.ceil(n / 2)\n        if n % 2 == 1:\n            return a // k\n        else:\n            return a // (k + 1)\nfor i in cases:\n    print(answer(i[0], i[1]))", "import math\nimport sys\nimport collections\nimport bisect\nimport time\nimport random\nimport itertools\nimport string\nfrom collections import Counter, defaultdict\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\nfor t in range(int(input())):\n    (n, s) = get_ints()\n    if n == 1:\n        print(s)\n        continue\n    elif n == 2:\n        print(s // 2)\n        continue\n    ele_included = math.ceil(n / 2)\n    if n % 2 == 0:\n        ele_included += 1\n    print(s // ele_included)", "from collections import defaultdict\nimport math\nNO = 'NO'\nYES = 'YES'\nMOD = 1000000007\nALPH = 'abcdefghijklmnopqrstuvwxyz'\n\ndef input_int():\n    return int(input())\n\ndef input_list():\n    return input().split(' ')\n\ndef input_list_int():\n    return list(map(int, input_list()))\n\ndef list_int_to_str(a, sep=' '):\n    return sep.join((str(x) for x in a))\nglobal_ans = []\n\ndef pr(a):\n    global_ans.append(a)\n\ndef z_func(s):\n    n = len(s)\n    z = [0] * n\n    l = r = 0\n    for i in range(1, n):\n        if r >= i:\n            z[i] = min(z[i - l], r - i + 1)\n        while z[i] + i < n and s[z[i]] == s[z[i] + i]:\n            z[i] += 1\n        if i + z[i] - 1 > r:\n            l = i\n            r = i + z[i] - 1\n    return z\n\ndef is_prime(n):\n    d = 2\n    while n % d != 0:\n        d += 1\n    return d == n\n\ndef solve():\n    (n, s) = input_list_int()\n    t = math.ceil(n / 2) - 1\n    ans = s // (n - t)\n    pr(max(0, ans))\nquery_count = 1\nquery_count = input_int()\nwhile query_count:\n    query_count -= 1\n    solve()\nfor global_ans_line in global_ans:\n    print(global_ans_line)", "import math\nt = int(input())\ndatos = []\ni = 0\nwhile i < t:\n    aux = input()\n    datos.append(aux)\n    i = i + 1\nres = []\ni = 0\nwhile i < t:\n    (n, s) = datos[i].split(' ')\n    s = int(s)\n    n = int(n)\n    pos = math.ceil(n / 2)\n    if n % 2 == 0:\n        pos += 1\n    aux = int(s / pos)\n    res.append(str(aux))\n    i = i + 1\ni = 0\nwhile i < t:\n    print(res[i])\n    i = i + 1", "a = int(input())\nfor i in range(a):\n    (m, s) = input().split()\n    m = int(m)\n    s = int(s)\n    print(int(s / (m // 2 + 1)))", "def solve(n, s):\n    half = (n + 1) // 2 - 1\n    return s // (n - half)\ntests = int(input())\nfor _ in range(tests):\n    (n, s) = map(int, input().split())\n    print(solve(n, s))", "for __ in range(int(input())):\n    (N, S) = map(int, input().split())\n    print(S // (N // 2 + 1))", "for __ in range(int(input())):\n    (N, S) = map(int, input().split())\n    print(S // (N // 2 + 1))", "t = int(input())\nfor _ in range(t):\n    (n, s) = map(int, input().split())\n    m = n // 2 + 1\n    ans = s // m\n    print(ans)", "n = int(input())\nfor i in range(n):\n    (a, b) = map(int, input().split())\n    print(b // (a // 2 + 1))", "import math\nt = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    a = a // 2 + 1\n    print(b // a)", "A = int(input())\nfor i in range(A):\n    (n, s) = input().split()\n    print(int(s) // (int(n) // 2 + 1))", "A = int(input())\nfor i in range(A):\n    (n, s) = input().split()\n    print(int(s) // (int(n) // 2 + 1))", "for j in range(int(input())):\n    d = input().split(' ')\n    print(int(d[1]) // (int(d[0]) // 2 + 1))", "t = int(input())\nfor i in range(t):\n    s = input()\n    n = int(s[:s.find(' ')])\n    sum = int(s[s.find(' ') + 1:])\n    print(sum // (n // 2 + 1))", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    print(s // (n // 2 + 1))", "t = int(input())\nfor i in range(0, t):\n    (n, s) = map(int, input().split())\n    if n % 2 == 0:\n        a = n / 2 - 1\n    if n % 2 != 0:\n        a = (n + 1) / 2 - 1\n    b = n - a\n    c = int(s / b)\n    print(c)", "from math import ceil, floor\nR = lambda : map(int, input().split())\n(t,) = R()\nfor i in range(t):\n    (n, s) = R()\n    print(s // (n + 2 >> 1))", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    print(c // ((n >> 1) + 1))", "t = int(input())\nfor i in range(t):\n    (n, s) = map(int, input().split())\n    if n == 1:\n        ans = s\n    if n == 2:\n        ans = s // 2\n    if n > 2:\n        a = n // 2\n        ans = s // (a + 1)\n    print(ans)", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    if n % 2 != 0:\n        a = int(n / 2) + 1\n    else:\n        a = int(n / 2)\n    a = int(s / (n - a + 1))\n    print(a)", "from math import ceil\nfor _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    remove = ceil(n / 2) - 1\n    n = n - remove\n    print(s // n)", "n = int(input())\nfor i in range(n):\n    (n, s) = map(int, input().split())\n    print(int(s / int(n / 2 + 1)))", "t = int(input())\nfor test in range(t):\n    (n, s) = map(int, input().split())\n    m = n // 2 + 1\n    print(s // m)", "for p in range(int(input())):\n    (n, s) = map(int, input().split())\n    print(s // (n // 2 + 1))", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    print(s // (n // 2 + 1))", "import sys\nfor _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    sys.stdout.write(f'{s // (n // 2 + 1)}\\n')", "all = eval(input())\nfor i in range(all):\n    (n, s) = map(int, input().split())\n    n = n - n // 2 + 1 if n % 2 == 0 else n - n // 2\n    print(s // n)", "import math\nt = int(input(''))\nfor i in range(t):\n    (n, s) = map(int, input('').split())\n    m = math.ceil(n / 2) - 1\n    n -= m\n    print(s // n)", "from collections import Counter\nfrom itertools import accumulate, product, groupby\nimport operator\nimport math\nfrom functools import reduce\n\ndef solve():\n    (n, total) = [int(char) for char in input().split()]\n    half_pos = math.ceil(n / 2) - 1\n    slots_left = n - half_pos\n    return math.floor(total / slots_left)\nfor _ in range(int(input())):\n    print(solve())", "t = int(input())\nfor i in range(0, t):\n    (n, s) = map(int, input().split())\n    c = 0\n    c = s / (n - int((n - 1) / 2))\n    print(int(c))", "t = int(input())\nfor i in range(0, t):\n    (n, s) = map(int, input().split())\n    c = 0\n    c = s / (n - int((n - 1) / 2))\n    print(int(c))"]