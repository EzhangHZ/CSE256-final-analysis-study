["t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input().split()\n    if n == 1:\n        print(-1)\n        continue\n    exists = True\n    flag = 0\n    prev = s[0]\n    perms = []\n    for j in range(1, n):\n        if s[j] == prev:\n            perms.append(str(j + 1))\n            continue\n        if flag == j - 1:\n            exists = False\n            break\n        perms.append(str(flag + 1))\n        prev = s[j]\n        flag = j\n    if flag == n - 1:\n        exists = False\n    perms.append(str(flag + 1))\n    if not exists:\n        print(-1)\n    else:\n        print(' '.join(perms))", "def solve():\n    if n == 1:\n        return -1\n    ans = []\n    first = 0\n    for i in range(1, n):\n        if arr[i] == arr[first]:\n            ans.append(i + 1)\n        else:\n            if i == first + 1:\n                return -1\n            ans.append(first + 1)\n            first = i\n    ans.append(first + 1)\n    if first + 1 == n:\n        return -1\n    else:\n        ans = ' '.join(map(str, ans))\n        return ans\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = solve()\n    print(ans)", "def get():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = [str(i + 1) for i in range(n)]\n    i = n - 1\n    while i >= 0:\n        c = 0\n        j = i - 1\n        while j >= 0 and arr[i] == arr[j]:\n            c += 1\n            (ans[j + 1], ans[j]) = (ans[j], ans[j + 1])\n            j -= 1\n        if c == 0:\n            return -1\n        i = j\n    return ' '.join(ans)\nfor _ in range(int(input())):\n    print(get())", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    if n == 1:\n        print(-1)\n        continue\n    current_size = s[0]\n    batch = [1]\n    solution = []\n    for i in range(1, n):\n        if s[i] == current_size:\n            batch.append(i + 1)\n        else:\n            if len(batch) < 2:\n                break\n            solution.append(batch[-1])\n            solution.extend(batch[:-1])\n            batch = [i + 1]\n            current_size = s[i]\n    if len(batch) > 1:\n        solution.append(batch[-1])\n        solution.extend(batch[:-1])\n    else:\n        print(-1)\n        continue\n    print(' '.join(map(str, solution)))", "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    if n == 1:\n        print(-1)\n        continue\n    prev = s[0]\n    perms = []\n    found = True\n    curr = 0\n    for i in range(1, n):\n        if s[i] == prev:\n            perms.append(str(i + 1))\n            continue\n        if i - 1 == curr:\n            found = False\n            break\n        perms.append(str(curr + 1))\n        prev = s[i]\n        curr = i\n    if curr == n - 1:\n        found = False\n    perms.append(str(curr + 1))\n    if not found:\n        print(-1)\n    else:\n        print(' '.join(perms))", "def solve(arr):\n    ans = []\n    arr.append(-1)\n    (prev, cnt) = (arr[0], 0)\n    for (i, num) in enumerate(arr):\n        if num == prev:\n            cnt += 1\n        else:\n            if cnt == 1:\n                return -1\n            ans.append(i)\n            for j in range(i - cnt + 1, i):\n                ans.append(j)\n            prev = num\n            cnt = 1\n    return ' '.join(list(map(str, ans)))\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        print(solve(list(map(int, input().split()))))\nmain()", "def ss(n, l):\n    if n == 1:\n        return -1\n    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    ans = []\n    x = 1\n    for i in d:\n        if d[i] == 1:\n            return -1\n        for k in range(x + 1, d[i] + x):\n            ans.append(k)\n        ans.append(x)\n        x = ans[-2] + 1\n    for i in range(len(ans)):\n        ans[i] = str(ans[i])\n    return ' '.join(ans)\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(ss(n, l))", "def task(n, a):\n    cache = dict()\n    for i in a:\n        if i in cache:\n            cache[i] += 1\n        else:\n            cache[i] = 1\n    results = []\n    current = 0\n    for (key, value) in cache.items():\n        if value == 1:\n            print(-1)\n            return\n        else:\n            results.append(current + value)\n            for i in range(current + 1, current + value):\n                results.append(i)\n            current += value\n    print(' '.join((str(result) for result in results)))\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    task(n, a)", "from collections import Counter\nfrom itertools import groupby\nfor _ in range(int(input())):\n    n = int(input())\n    o = 0\n    e = 0\n    s = input().split()\n    c = Counter(s)\n    if min(c.values()) < 2:\n        print(-1)\n        continue\n    cs = 0\n    x = list(range(1, len(s) + 1))\n    ans = []\n    for (k, g) in groupby(s):\n        cl = len(list(g))\n        ce = cs + cl\n        ans.append(x[ce - 1])\n        ans.extend(x[cs:ce - 1])\n        cs = ce\n    print(' '.join(map(str, ans)))", "t = int(input())\nfor testcase in range(t):\n    n = int(input())\n    s = [int(x) for x in input().split()]\n    result = []\n    if n == 1:\n        print(-1)\n    else:\n        valid = True\n        i = 0\n        while i < n:\n            j = i + 1\n            while j < n and s[j] == s[i]:\n                result.append(j + 1)\n                j += 1\n            if j - i == 1:\n                valid = False\n                break\n            result.append(i + 1)\n            i = j\n        if valid:\n            result = [str(x) for x in result]\n            print(' '.join(result))\n        else:\n            print(-1)", "t = int(input())\nfor testcase in range(t):\n    n = int(input())\n    s = [int(x) for x in input().split()]\n    result = []\n    if n == 1:\n        print(-1)\n    else:\n        valid = True\n        i = 0\n        while i < n:\n            j = i + 1\n            while j < n and s[j] == s[i]:\n                result.append(j + 1)\n                j += 1\n            if j - i == 1:\n                valid = False\n                break\n            result.append(i + 1)\n            i = j\n        if valid:\n            result = [str(x) for x in result]\n            print(' '.join(result))\n        else:\n            print(-1)", "def f(n, arr):\n    ans = []\n    i = 0\n    while i < n:\n        cur = i + 1\n        I = i\n        while i < n and arr[I] == arr[i]:\n            i += 1\n        filler = list(range(i, I, -1))\n        m = len(filler)\n        if m == 1:\n            return [-1]\n        mid = m // 2\n        if m % 2 == 1:\n            (filler[mid], filler[mid - 1]) = (filler[mid - 1], filler[mid])\n        ans += filler\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(' '.join(map(str, f(n, arr))))", "for _ in range(int(input())):\n    n = int(input())\n    x = input().split()\n    if len(set(x)) == n:\n        print(-1)\n        continue\n    y = list(map(str, range(1, n + 1)))\n    p = x[0]\n    q = 1\n    s = ''\n    for (i, a) in enumerate(x[1:]):\n        if p == a:\n            q += 1\n        else:\n            if q == 1:\n                print(-1)\n                break\n            s += str(i + 1) + ' ' + ' '.join(y[i - q + 1:i]) + ' '\n            p = a\n            q = 1\n    else:\n        i += 1\n        if q > 1:\n            s += str(i + 1) + ' ' + ' '.join(y[i - q + 1:i])\n        elif q == 1:\n            print(-1)\n            continue\n        print(s)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\ntests = inp()\nfor j in range(0, tests):\n    n = inp()\n    x = inlt()\n    y = [*range(0, n)]\n    val = 0\n    idx_last = 0\n    idx_zero = 0\n    count = 0\n    if n == 1:\n        print(-1)\n    else:\n        for i in range(0, n):\n            if val != x[i]:\n                val = x[i]\n                idx_last = i\n                y[idx_zero] = y[idx_last]\n                idx_zero = i\n                if count == 1:\n                    y = -1\n                    break\n                count = 1\n            elif val == x[i]:\n                count += 1\n            if val == x[i] and i + 1 == n:\n                y[idx_zero] = n\n        if count == 1:\n            y = -1\n        if isinstance(y, list):\n            print(' '.join(map(str, y)))\n        else:\n            print(y)", "t = int(input())\nans = list()\nfor i in range(0, t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    if len(arr) == 1 or arr[-1] != arr[-2]:\n        ans.append(-1)\n        continue\n    v = arr[0]\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == v:\n            count += 1\n        elif count < 2:\n            ans.append(-1)\n            break\n        else:\n            count = 1\n            v = arr[i]\n    else:\n        s = ''\n        v = arr[0]\n        j = 1\n        for i in range(1, len(arr)):\n            if arr[i] != v:\n                s += f'{j} '\n                v = arr[i]\n                j = i + 1\n            else:\n                s += f'{i + 1} '\n        s += f'{j} '\n        ans.append(s)\nfor s in ans:\n    print(s)", "def solve(n, nums):\n    (i, last) = (0, 0)\n    sol = []\n    while i < n:\n        last = nums[i]\n        j = i + 1\n        while j < n and nums[j] == last:\n            j += 1\n        if j - i == 1:\n            return [-1]\n        else:\n            for k in range(i + 1, j):\n                sol.append(k + 1)\n            sol.append(i + 1)\n        i = j\n    return sol\nt = int(input())\nfor c in range(t):\n    n = int(input())\n    nums = [int(x) for x in input().split()]\n    sol = solve(n, nums)\n    print(' '.join([str(s) for s in sol]))", "def perm(size):\n    count = {}\n    for i in size:\n        count[i] = count.get(i, 0) + 1\n    if 1 in count.values():\n        ans = '-1'\n    else:\n        ans = ''\n        curr = 0\n        for i in range(1, len(size)):\n            if size[i] == size[curr]:\n                ans += str(i + 1) + ' '\n                continue\n            else:\n                ans += str(curr + 1) + ' '\n                curr = i\n        ans += str(curr + 1)\n    return ans\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    size = list(map(int, input().split()))\n    print(perm(size))", "def get():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = [str(i + 1) for i in range(n)]\n    i = n - 1\n    while i >= 0:\n        c = 0\n        j = i - 1\n        while j >= 0 and arr[i] == arr[j]:\n            c += 1\n            (ans[j + 1], ans[j]) = (ans[j], ans[j + 1])\n            j -= 1\n        if c == 0:\n            return -1\n        i = j\n    return ' '.join(ans)\nfor _ in range(int(input())):\n    print(get())", "def f(n, a):\n    q = ''\n    w = a[0]\n    e = 1\n    for i in range(1, n):\n        if a[i] == w:\n            e += 1\n        elif e > 1:\n            p = str(i) + ' ' + ' '.join(map(str, list(range(i - e + 1, i))))\n            q += p + ' '\n            w = a[i]\n            e = 1\n        else:\n            return -1\n    if e > 1:\n        p = str(i + 1) + ' ' + ' '.join(map(str, list(range(i - e + 2, i + 1))))\n        q += p + ' '\n        return q\n    else:\n        return -1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(f(n, a))", "from collections import defaultdict\n\ndef shoe_shuffling(ar):\n    n = len(ar)\n    d = defaultdict(list)\n    for (ix, v) in enumerate(ar):\n        d[v].append(str(ix + 1))\n    ar_shuffled = []\n    for (v, ixs) in d.items():\n        if len(ixs) == 1:\n            print(-1)\n            return\n        else:\n            ar_shuffled.extend(ixs[-1:] + ixs[:-1])\n    print(' '.join(ar_shuffled))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ar = list(map(int, input().split(' ')))\n    shoe_shuffling(ar)", "for _ in range(int(input())):\n    input()\n    nums = list(map(int, input().split()))\n    answer = []\n    s = []\n    val = -1\n    minus_flg = False\n    if len(nums) < 2:\n        print(-1)\n        continue\n    for (i, num) in enumerate(nums):\n        if num == val:\n            s.append(i + 1)\n        else:\n            if len(s) == 1:\n                print(-1)\n                minus_flg = True\n                break\n            if len(s) > 0:\n                answer.append(s[-1])\n            for j in range(len(s) - 1):\n                answer.append(s[j])\n            val = num\n            s.clear()\n            s.append(i + 1)\n    if minus_flg:\n        continue\n    if len(s) == 1:\n        print(-1)\n        continue\n    answer.append(s[-1])\n    for i in range(len(s) - 1):\n        answer.append(s[i])\n    print(' '.join(list(map(str, answer))))", "def solution(n, shoes):\n    dicto = {}\n    for (i, s) in enumerate(shoes):\n        if s in dicto:\n            dicto[s].append(i)\n        else:\n            dicto[s] = [i]\n    for s in dicto.keys():\n        if len(dicto[s]) == 1:\n            print('-1')\n            return\n    res = [-1] * n\n    for s in dicto.keys():\n        dicto[s] = dicto[s][1:] + dicto[s][:1]\n    for (i, s) in enumerate(shoes):\n        res[i] = dicto[s].pop(0)\n    print(' '.join([str(k + 1) for k in res]))\nfor _ in range(int(input())):\n    n = int(input())\n    shoes = list(map(int, input().split()))\n    solution(n, shoes)", "for _ in range(int(input())):\n    a = int(input())\n    b = list(map(int, input().split()))\n    x = list((i + 1 for i in range(a)))\n    for j in range(a - 1):\n        if b[j] == b[j + 1]:\n            (x[j], x[j + 1]) = (x[j + 1], x[j])\n    for k in range(len(x)):\n        if k + 1 == x[k]:\n            print(-1)\n            break\n    else:\n        print(' '.join(map(str, x)))", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    s = [0] + list(map(int, input().split()))\n    if n == 1:\n        print(-1)\n    else:\n        result = True\n        ans = []\n        marker = [1]\n        start = 1\n        end = 1\n        for i in range(2, n + 1):\n            if s[i] == s[i - 1] and i < n:\n                marker.append(i)\n                end = i\n            elif s[i] == s[i - 1] and i == n:\n                marker.append(i)\n                q = marker.pop()\n                ans += [q] + marker\n            elif s[i] > s[i - 1] and i == n:\n                result = False\n                break\n            elif len(marker) == 1:\n                result = False\n                break\n            else:\n                start = i\n                end = i\n                q = marker.pop()\n                ans += [q] + marker\n                marker = [i]\n        if not result:\n            print(-1)\n        else:\n            print(' '.join(map(str, ans)))", "for i in range(int(input())):\n    n = int(input())\n    sizes = list(map(int, input().split()))\n    count = 1\n    count_arr = []\n    str = ''\n    works = True\n    for i in range(0, len(sizes) - 1):\n        if sizes[i] == sizes[i + 1]:\n            count += 1\n        elif count == 1:\n            works = False\n            break\n        else:\n            count_arr.append(count)\n            count = 1\n    if count > 1:\n        count_arr.append(count)\n    else:\n        works = False\n    if len(count_arr) < 1:\n        works = False\n    if not works:\n        print(-1)\n        continue\n    index = 1\n    swap = 0\n    for i in count_arr:\n        swap = index\n        for j in range(1, i):\n            str += f'{index + j} '\n        str += f'{swap} '\n        index += i\n    print(str)", "for i in range(int(input())):\n    n = int(input())\n    sizes = list(map(int, input().split()))\n    count = 1\n    count_arr = []\n    str = ''\n    works = True\n    for i in range(0, len(sizes) - 1):\n        if sizes[i] == sizes[i + 1]:\n            count += 1\n        elif count == 1:\n            works = False\n            break\n        else:\n            count_arr.append(count)\n            count = 1\n    if count > 1:\n        count_arr.append(count)\n    else:\n        works = False\n    if len(count_arr) < 1:\n        works = False\n    if not works:\n        print(-1)\n        continue\n    index = 1\n    swap = 0\n    for i in count_arr:\n        swap = index\n        for j in range(1, i):\n            str += f'{index + j} '\n        str += f'{swap} '\n        index += i\n    print(str)", "cnt = int(input())\nfor i in range(cnt):\n    input()\n    nums = list(map(int, input().split()))\n    dic = {}\n    for (idx, num) in enumerate(nums):\n        if num in dic:\n            dic[num].append(idx)\n        else:\n            dic[num] = [idx]\n    shuffle = ['0'] * len(nums)\n    valid = True\n    for idxs in dic.values():\n        if len(idxs) == 1:\n            print(-1)\n            valid = False\n            break\n        for i in range(len(idxs)):\n            shuffle[idxs[i]] = str(idxs[i - 1] + 1)\n    if valid:\n        print(' '.join(shuffle))", "num_cases = int(input())\nfor _ in range(num_cases):\n    num_students = int(input())\n    sizes = input().split()\n    result = []\n    ind = 0\n    ok = False\n    end = False\n    while True:\n        actual_size = int(sizes[ind])\n        start_ind = ind + 1\n        end_ind = start_ind\n        while True:\n            ind += 1\n            if ind == num_students:\n                end = True\n                break\n            if actual_size == int(sizes[ind]):\n                end_ind += 1\n            else:\n                break\n        if end_ind > start_ind:\n            result.append(end_ind)\n            for i in range(start_ind, end_ind):\n                result.append(i)\n            if end:\n                ok = True\n                break\n        else:\n            break\n    if not ok:\n        print(-1)\n    else:\n        result = [str(n) for n in result]\n        print(' '.join(result))", "from itertools import groupby\nT = int(input())\nfor case in range(T):\n    n = int(input())\n    x = map(int, input().split())\n    s = []\n    for (k, g) in groupby(x):\n        l = sum((1 for i in g))\n        if l == 1:\n            print(-1)\n            break\n        t = len(s)\n        s.append(t + l)\n        for i in range(1, l):\n            s.append(t + i)\n    else:\n        print(' '.join((str(y) for y in s)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    size_old = 0\n    student = 1\n    not_single = False\n    permutation = []\n    remember_student = 1\n    for number in input().split(' '):\n        if student == 1:\n            size_old = int(number)\n            student += 1\n            continue\n        size_new = int(number)\n        if not_single is False:\n            if size_new == size_old:\n                not_single = True\n                permutation.append(student)\n            else:\n                break\n        elif size_new == size_old:\n            permutation.append(student)\n        else:\n            not_single = False\n            permutation.append(remember_student)\n            remember_student = student\n        size_old = size_new\n        student += 1\n    if not_single is True:\n        permutation.append(remember_student)\n        result = ''\n        for number in permutation:\n            result += str(number) + ' '\n        result = result[:-1]\n        print(result)\n    else:\n        print('-1')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    sizes = list(map(int, input().split()))\n    res = [i for i in range(n)]\n    isPossible = True\n    for i in range(1, n):\n        if sizes[i] == sizes[i - 1]:\n            (res[i], res[i - 1]) = (res[i - 1], res[i])\n    for i in range(n):\n        if res[i] == i:\n            isPossible = False\n            break\n        res[i] += 1\n    if isPossible:\n        print(' '.join(map(str, res)))\n    else:\n        print(-1)", "t = int(input())\nfrom collections import Counter, deque\n\ndef permute(shoes):\n    shoes.append(shoes.popleft())\n    return shoes\nfor _ in range(t):\n    n = input()\n    sizes = [int(s) for s in input().split()]\n    count = Counter(sizes)\n    if 1 in count.values():\n        print(-1)\n    else:\n        StartIndex = dict()\n        x = 1\n        for s in count:\n            StartIndex[s] = x\n            x += count[s]\n        output = []\n        for s in count:\n            new = deque([*range(StartIndex[s], StartIndex[s] + count[s])])\n            output += list(permute(new))\n        print(' '.join((str(o) for o in output)))", "import collections\n\ndef solution(sizes):\n    counter = collections.Counter(sizes)\n    pairings = collections.defaultdict(list)\n    for (i, size) in enumerate(sizes):\n        pairings[size].append(i)\n    p = [0 for _ in range(len(sizes))]\n    for (size, idxs) in pairings.items():\n        if len(idxs) == 1:\n            return -1\n        elif len(idxs) % 2 == 0:\n            for i in range(0, len(idxs), 2):\n                p[idxs[i + 1]] = idxs[i]\n                p[idxs[i]] = idxs[i + 1]\n        else:\n            for i in range(len(idxs)):\n                p[idxs[i]] = idxs[(i + 1) % len(idxs)]\n    return ' '.join([str(i + 1) for i in p])\nT = int(input())\nresults = []\nfor n in range(T):\n    _ = int(input())\n    sizes = list(map(int, input().split(' ')))\n    results.append(solution(sizes))\nfor r in results:\n    print(r)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split(' ')]\n    ans = ''\n    start = 0\n    flag = True\n    while start < n:\n        end = start\n        for i in range(start + 1, n):\n            if a[i] != a[start]:\n                break\n            else:\n                end += 1\n        if end == start:\n            print('-1')\n            flag = False\n            break\n        ans += str(end + 1) + ' '\n        for idx in range(start, end):\n            ans += str(idx + 1) + ' '\n        start = end + 1\n    if flag:\n        print(ans)", "trails = int(input())\nanswer_list = []\nfor x in range(trails):\n    s = int(input())\n    d = input().split(' ')\n    dic = {}\n    ans = ''\n    for a in d:\n        dic[a] = 0\n    for p in d:\n        dic[p] += 1\n    count = 0\n    for b in dic:\n        ele = dic[b]\n        if ele == 1:\n            ans = '-1'\n            break\n        for k in range(2 + count, ele + 1 + count):\n            ans += str(k)\n            ans += ' '\n        ans += str(1 + count)\n        ans += ' '\n        count += ele\n    answer_list.append(ans)\nfor g in answer_list:\n    print(g)", "import sys\ninput = lambda : sys.stdin.readline().strip()\nfor Homu in range(int(input())):\n    n = int(input())\n    sizes = [int(i) for i in input().split()]\n    jumps = [-1]\n    for i in range(n - 1):\n        if sizes[i] != sizes[i + 1]:\n            jumps.append(i)\n    jumps.append(n - 1)\n    possible = True\n    for i in range(len(jumps) - 1):\n        if jumps[i + 1] - jumps[i] == 1:\n            possible = False\n            break\n    if possible:\n        ans = [0 for i in range(n)]\n        for i in range(len(jumps) - 1):\n            L = jumps[i] + 1\n            R = jumps[i + 1]\n            ans[R] = L + 1\n            for i in range(L, R):\n                ans[i] = i + 2\n        ans = [str(i) for i in ans]\n        print(' '.join(ans))\n    else:\n        print(-1)", "for s in [*open(0)][2::2]:\n    (*r,) = range(1, len((a := (s.split() + [0]))))\n    i = j = 0\n    p = a[0]\n    for x in a:\n        if x != p:\n            if j - i < 2:\n                r = (-1,)\n                break\n            r[i:j] = r[i + 1:j] + [r[i]]\n            i = j\n            p = a[i]\n        j += 1\n    print(*r)", "for s in [*open(0)][2::2]:\n    (*r,) = range(1, len((a := (s.split() + [0]))))\n    i = j = 0\n    p = a[0]\n    for x in a:\n        if x != p:\n            if j - i < 2:\n                r = (-1,)\n                break\n            r[i:j] = r[i + 1:j] + [r[i]]\n            i = j\n            p = x\n        j += 1\n    print(*r)", "total = int(input())\nfor i in range(total):\n    n = int(input())\n    l = [int(j) for j in input().split()]\n    res = []\n    (x, y) = (0, 0)\n    fl = 1\n    while y < n:\n        if l[x] == l[y]:\n            y += 1\n            if y == n:\n                if y - x < 2:\n                    print(-1)\n                    fl = 0\n                    break\n                else:\n                    p = [o for o in range(x + 1, y + 1)]\n                    res += p[1:] + p[:1]\n        elif y - x < 2:\n            print(-1)\n            fl = 0\n            break\n        else:\n            p = [o for o in range(x + 1, y + 1)]\n            res += p[1:] + p[:1]\n            x = y\n    if fl == 1:\n        print(' '.join((str(m) for m in res)))", "for s in [*open(0)][2::2]:\n    (*r,) = range(1, len((a := (s.split() + [0]))))\n    i = j = f = 0\n    p = a[0]\n    for x in a:\n        if x != p:\n            f |= j - i < 2\n            r[i:j] = r[i + 1:j] + [r[i]]\n            i = j\n            p = x\n        j += 1\n    print(*(r, [-1])[f])", "for _ in range(int(input())):\n    n = int(input())\n    l = [i for i in input().split(' ')]\n    if n == 1:\n        print(-1)\n        continue\n    nl = []\n    (a, b) = (l[0], 1)\n    m = 1\n    res = True\n    for i in l[1:]:\n        m += 1\n        if i == a:\n            b += 1\n            nl.append(m)\n        elif b == 1:\n            res = False\n            break\n        else:\n            nl.append(m - b)\n            a = i\n            b = 1\n    if b == 1:\n        res = False\n    else:\n        nl.append(m - b + 1)\n    if res:\n        print(*nl)\n    else:\n        print(-1)", "from collections import defaultdict as dd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dd(list)\n    for x in range(n):\n        d[a[x]].append(x + 1)\n    ans = [0] * n\n    flag = True\n    for x in d.values():\n        if len(x) == 1:\n            flag = False\n            break\n        for y in range(len(x) - 1):\n            ans[x[y] - 1] = x[y + 1]\n        ans[x[len(x) - 1] - 1] = x[0]\n    if flag:\n        print(' '.join(list(map(str, ans))))\n    else:\n        print(-1)", "num_of_cases = int(input())\nfor _ in range(num_of_cases):\n    N = int(input())\n    arr = [int(x) for x in input().split(' ')]\n    if N == 1:\n        print(-1)\n    else:\n        res = []\n        cur = arr[0]\n        straight = 1\n        idx = 1\n        not_ok = False\n        while idx < N:\n            if arr[idx] == cur:\n                straight += 1\n                idx += 1\n            elif straight == 1:\n                print(-1)\n                not_ok = True\n                break\n            else:\n                start = len(res) + 1\n                end = idx\n                tmp = [x for x in range(start + 1, end + 1)] + [start]\n                res.extend(tmp)\n                cur = arr[idx]\n                idx += 1\n                straight = 1\n        if not not_ok:\n            if straight == 1:\n                print(-1)\n                not_ok = True\n            else:\n                start = len(res) + 1\n                tmp = [x for x in range(start + 1, N + 1)] + [start]\n                res.extend(tmp)\n                print(' '.join([str(x) for x in res]))", "def op(s, p):\n    A = ''\n    for se in s:\n        A += str(se) + p\n    return A[:-1]\n\ndef fu():\n    return list(map(int, input().split(' ')))\n\ndef a():\n    return int(input())\n\ndef kil_(n, a):\n    m = dict()\n    m[a[0]] = 1\n    a1 = a[0]\n    for i in range(1, n):\n        if a[i] == a1:\n            m[a1] += 1\n        else:\n            a1 = a[i]\n            m[a1] = 1\n    for (x, y) in m.items():\n        if not y > 1:\n            return '-1'\n    j = 0\n    d = []\n    while j < len(a):\n        ok = a[j]\n        kj = m[ok] + j\n        for i in range(m[ok]):\n            d.append(kj)\n            kj = i + j + 1\n        j = kj\n    return op(d, ' ')\n\ndef kil(a):\n    t = int(input())\n    A = ''\n    for i in range(t):\n        A += kil_(a(), fu()) + '\\n'\n    print(A[:-1])\nkil(a)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    d = Counter(A)\n    s1 = []\n    s = 0\n    for k in d:\n        s1.append(k)\n        if d[k] == 1:\n            s = -1\n            break\n    ans = []\n    l1 = 0\n    l2 = 0\n    if s == 0:\n        for j in range(len(d)):\n            ans.append(l1 + d[s1[j]])\n            l1 += d[s1[j]]\n            for i in range(l2 + 1, l1):\n                ans.append(i)\n            l2 += d[s1[j]]\n        s2 = ''\n        for ele in ans:\n            s2 += str(ele) + ' '\n        print(s2)\n    else:\n        print(-1)", "def solve(n, a):\n    p = True\n    k = [i for i in range(1, n + 1)]\n    if n == 1:\n        return [-1]\n    for i in range(1, n):\n        if a[i - 1] == a[i]:\n            (k[i - 1], k[i]) = (k[i], k[i - 1])\n            p = False\n        else:\n            if p or i == n - 1:\n                return ['-1']\n            p = True\n    return k\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(*solve(n, a))", "from collections import defaultdict, deque\ntest_cases = int(input())\n\ndef handle():\n    input()\n    values = input().split(' ')\n    values_by_index = defaultdict(lambda : deque())\n    for (index, value) in enumerate(values):\n        values_by_index[value].append(index)\n    result = []\n    for (index, value) in enumerate(values):\n        if value not in values_by_index or (len(values_by_index[value]) == 1 and values_by_index[value][0] == index):\n            return -1\n        if index == values_by_index[value][-1]:\n            result.append(str(values_by_index[value].popleft() + 1))\n        else:\n            result.append(str(values_by_index[value].pop() + 1))\n        if len(values_by_index[value]) == 0:\n            del values_by_index[value]\n    return ' '.join(result)\nfor _ in range(test_cases):\n    print(handle())", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    m = {}\n    for s_i in map(int, input().split()):\n        m[s_i] = m.get(s_i, 0) + 1\n    if any((v == 1 for v in m.values())):\n        print(-1)\n    else:\n        p = ''\n        c = 0\n        for k in sorted(m.keys()):\n            v = m[k]\n            c += v\n            p += f'{c} ' + ' '.join((str(x) for x in range(c - v + 1, c))) + ' '\n        print(p)", "import collections\nfrom math import ceil, gcd, sqrt, log\nimport bisect\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    if n == 1:\n        print(-1)\n        return\n    k = 0\n    prev = A[0]\n    c = 1\n    a = []\n    for i in range(1, n):\n        if A[i] == prev:\n            c += 1\n            a.append(i + 1)\n        elif c == 1:\n            print(-1)\n            c = 1\n            return\n        else:\n            a.append(k + 1)\n            c = 1\n            k = i\n            prev = A[k]\n    if c == 1:\n        print(-1)\n        return\n    a.append(k + 1)\n    print(*a)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "n = int(input())\nfor i in range(n):\n    k = int(input())\n    arr = list(map(int, input().split()))\n    brr = set(arr)\n    if len(brr) == len(arr):\n        print('-1')\n        continue\n    if arr[-1] != arr[-2]:\n        print('-1')\n        continue\n    crr = []\n    crr.append(1)\n    for j in range(k - 1):\n        crr.append(j + 2)\n        if arr[j] == arr[j + 1]:\n            temp = crr[j]\n            crr[j] = crr[j + 1]\n            crr[j + 1] = temp\n    for j in range(k):\n        if crr[j] == j + 1:\n            print(-1)\n            break\n    else:\n        print(' '.join(map(str, crr)))", "for s in [*open(0)][2::2]:\n    (*r,) = range(1, len((a := (s.split() + [0]))))\n    i = j = 0\n    p = a[0]\n    for x in a:\n        if x != p:\n            if j - i < 2:\n                r = (-1,)\n                break\n            r[i:j] = r[i + 1:j] + r[i:i + 1]\n            i = j\n            p = a[i]\n        j += 1\n    print(*r)", "for s in [*open(0)][2::2]:\n    (*r,) = range(1, len((a := (s.split() + [0]))))\n    i = j = 0\n    p = a[0]\n    for x in a:\n        if x != p:\n            r = ([-1], r)[j - i > 1]\n            r[i:j] = r[i + 1:j] + r[i:i + 1]\n            i = j\n            p = x\n        j += 1\n    print(*r)", "for s in [*open(0)][2::2]:\n    (*r,) = range(1, len((a := (s.split() + [0]))))\n    i = j = 0\n    p = a[0]\n    for x in a:\n        if x != p:\n            r = ([-1], r)[j - i > 1]\n            r[i:j] = r[i + 1:j] + r[i:i + 1]\n            i = j\n            p = x\n        j += 1\n    print(*r)", "for s in [*open(0)][2::2]:\n    (*r,) = range(1, len((a := (s.split() + [0]))))\n    i = j = 0\n    p = a[0]\n    for x in a:\n        if x != p:\n            r = ([-1], r)[j - i > 1]\n            r[i:j] = r[i + 1:j] + r[i:i + 1]\n            i = j\n            p = x\n        j += 1\n    print(*r)", "for s in [*open(0)][2::2]:\n    (*r,) = range(1, len((a := (s.split() + [0]))))\n    i = j = 0\n    p = a[0]\n    for x in a:\n        if x != p:\n            r = ([-1], r)[j - i > 1]\n            r[i:j] = r[i + 1:j] + r[i:i + 1]\n            i = j\n            p = x\n        j += 1\n    print(*r)", "for s in [*open(0)][2::2]:\n    (*r,) = range(1, len((a := (s.split() + [0]))))\n    i = j = 0\n    p = a[0]\n    for x in a:\n        if x != p:\n            r = ([-1], r)[j - i > 1]\n            r[i:j] = r[i + 1:j] + r[i:i + 1]\n            i = j\n            p = x\n        j += 1\n    print(*r)", "for s in [*open(0)][2::2]:\n    (*r,) = range(1, len((a := (s.split() + [0]))))\n    i = j = f = 0\n    p = a[0]\n    for x in a:\n        if x != p:\n            f |= j - i < 2\n            r[i:j] = r[i + 1:j] + [r[i]]\n            i = j\n            p = x\n        j += 1\n    print(*(r, [-1])[f])", "for _ in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    d = dict()\n    for i in range(len(ls)):\n        if ls[i] in d:\n            d[ls[i]].append(i + 1)\n        else:\n            d[ls[i]] = [i + 1]\n    res = [0] * n\n    isPossible = True\n    for (k, v) in d.items():\n        if len(v) > 1:\n            for i in range(len(v) - 1):\n                res[v[i] - 1] = v[i + 1]\n            res[v[-1] - 1] = v[0]\n        else:\n            isPossible = False\n            break\n    if isPossible:\n        print(' '.join(map(str, res)))\n    else:\n        print(str(-1))", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    counts = Counter(nums)\n    f = False\n    for i in counts.keys():\n        if counts[i] == 1:\n            f = True\n            print(-1)\n            break\n    if not f:\n        l = [0]\n        for i in range(1, n):\n            if nums[i] != nums[i - 1]:\n                l.append(i)\n        l.append(n)\n        ans = []\n        i = 0\n        while i < len(l) - 1:\n            ans.append(l[i + 1] - 1)\n            for j in range(l[i], l[i + 1] - 1):\n                ans.append(j)\n            i += 1\n        for i in range(len(ans)):\n            ans[i] += 1\n        print(' '.join(map(str, ans)))", "for s in [*open(0)][2::2]:\n    (*r,) = range(1, len((a := (s.split() + [0]))))\n    i = j = 0\n    p = a[0]\n    for x in a:\n        if x != p:\n            if j - i < 2:\n                r = (-1,)\n                break\n            r[i:j] = r[i + 1:j] + [r[i]]\n            i = j\n            p = x\n        j += 1\n    print(*r)", "from collections import defaultdict\n\ndef shoe_shuffle(n, arr):\n    my_data = defaultdict(list)\n    for (idx, ele) in enumerate(arr, start=1):\n        my_data[ele].append(idx)\n    ans = []\n    for each in my_data:\n        if len(my_data[each]) < 2:\n            return [-1]\n        ele = my_data[each].pop()\n        my_data[each].insert(0, ele)\n        ans.extend(my_data[each])\n    return ans\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    print(*shoe_shuffle(n, arr))", "for s in [*open(0)][2::2]:\n    (*r,) = range(1, len((a := (s.split() + [0]))))\n    i = j = 0\n    p = a[0]\n    for x in a:\n        if x != p:\n            if j - i < 2:\n                r = (-1,)\n                break\n            r[i:j] = r[i + 1:j] + [r[i]]\n            i = j\n            p = x\n        j += 1\n    print(*r)", "for s in [*open(0)][2::2]:\n    (*r,) = range(1, len((a := (s.split() + [0]))))\n    i = j = 0\n    p = a[0]\n    for x in a:\n        if x != p:\n            if j - i < 2:\n                r = (-1,)\n                break\n            r[i:j] = r[i + 1:j] + [r[i]]\n            i = j\n            p = x\n        j += 1\n    print(*r)", "for s in [*open(0)][2::2]:\n    (*r,) = range(1, len((a := (s.split() + [0]))))\n    i = j = 0\n    p = a[0]\n    for x in a:\n        if x != p:\n            if j - i < 2:\n                r = (-1,)\n                break\n            r[i:j] = r[i + 1:j] + [r[i]]\n            i = j\n            p = x\n        j += 1\n    print(*r)", "for s in [*open(0)][2::2]:\n    (*r,) = range(1, len((a := (s.split() + [0]))))\n    i = j = 0\n    p = a[0]\n    for x in a:\n        if x != p:\n            if j - i < 2:\n                r = (-1,)\n                break\n            r[i:j] = r[i + 1:j] + [r[i]]\n            i = j\n            p = x\n        j += 1\n    print(*r)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    brr = [0] * n\n    i = n - 1\n    r = n\n    while i > 0:\n        if arr[i] == arr[i - 1]:\n            brr[i] = i - 1 + 1\n            brr[i - 1] = r\n        else:\n            r = i\n        i -= 1\n    if sum(brr) == n * (n + 1) // 2:\n        print(*brr)\n    else:\n        print(-1)", "for s in [*open(0)][2::2]:\n    (*r,) = range(1, len((a := (s.split() + [0]))))\n    i = j = 0\n    p = a[0]\n    for x in a:\n        if x != p:\n            if j - i < 2:\n                r = (-1,)\n                break\n            r[i:j] = r[i + 1:j] + [r[i]]\n            i = j\n            p = x\n        j += 1\n    print(*r)", "for s in [*open(0)][2::2]:\n    (*r,) = range(1, len((a := (s.split() + [0]))))\n    i = j = 0\n    p = a[0]\n    for x in a:\n        if x != p:\n            r = ([-1], r)[j - i > 1]\n            r[i:j] = r[i + 1:j] + r[i:i + 1]\n            i = j\n            p = x\n        j += 1\n    print(*r)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = Counter(l)\n    if any((x == 1 for x in c.values())):\n        print(-1)\n        continue\n    print(*[i if i != 0 and l[i] == l[i - 1] else i + c[l[i]] for i in range(n)])", "for s in [*open(0)][2::2]:\n    (*r,) = range(1, len((a := (s.split() + [0]))))\n    i = j = 0\n    p = a[0]\n    for x in a:\n        if x != p:\n            r = ([-1], r)[j - i > 1]\n            r[i:j] = r[i + 1:j] + r[i:i + 1]\n            i = j\n            p = x\n        j += 1\n    print(*r)", "for s in [*open(0)][2::2]:\n    (*r,) = range(1, len((a := (s.split() + [0]))))\n    i = j = 0\n    p = a[0]\n    for x in a:\n        if x != p:\n            r = ([-1], r)[j - i > 1]\n            r[i:j] = r[i + 1:j] + r[i:i + 1]\n            i = j\n            p = x\n        j += 1\n    print(*r)", "def resi():\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = []\n    d = 1\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            d += 1\n            p.append(i + 1)\n        else:\n            if d == 1:\n                print('-1')\n                return\n            p.append(i + 1 - d)\n            d = 1\n    if d == 1:\n        print('-1')\n        return\n    if d > 1:\n        p.append(n + 1 - d)\n    for i in range(n):\n        print(p[i], end=' ')\n    print()\n    return\nfor _ in range(int(input())):\n    resi()", "def resi():\n    j = int(input())\n    m = list(map(int, input().split()))\n    s = []\n    r = 1\n    for i in range(1, j):\n        if m[i] == m[i - 1]:\n            r += 1\n            s.append(i + 1)\n        else:\n            if r == 1:\n                print('-1')\n                return\n            s.append(i + 1 - r)\n            r = 1\n    if r == 1:\n        print('-1')\n        return\n    if r > 1:\n        s.append(j + 1 - r)\n    for i in range(j):\n        print(s[i], end=' ')\n    print()\n    return\nfor _ in range(int(input())):\n    resi()", "def resi():\n    j = int(input())\n    m = list(map(int, input().split()))\n    s = []\n    r = 1\n    for i in range(1, j):\n        if m[i] == m[i - 1]:\n            r += 1\n            s.append(i + 1)\n        else:\n            if r == 1:\n                print('-1')\n                return\n            s.append(i + 1 - r)\n            r = 1\n    if r == 1:\n        print('-1')\n        return\n    if r > 1:\n        s.append(j + 1 - r)\n    for i in range(j):\n        print(s[i], end=' ')\n    print()\n    return\nfor _ in range(int(input())):\n    resi()", "xx = int(input())\n\ndef cal(n, arr):\n    if n == 1:\n        return [-1]\n    s = 0\n    ans = []\n    a = arr[0]\n    for i in range(1, n):\n        if arr[i] != a:\n            if i == s + 1:\n                return [-1]\n            else:\n                ans += [i] + list(range(s + 1, i))\n                s = i\n                a = arr[i]\n        elif i == n - 1:\n            ans += [i + 1] + list(range(s + 1, i + 1))\n    if len(ans) < n:\n        return [-1]\n    return ans\nfor jj in range(xx):\n    n = int(input())\n    arr = [int(i) for i in input().split(' ')]\n    print(*cal(n, arr))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = 0\n    x = a[0]\n    p = 0\n    z = []\n    v = 1\n    for i in range(1, n):\n        if a[i] != x:\n            if c == 0:\n                v = 0\n                break\n            else:\n                z.append(p + 1)\n                p = i\n                c = 0\n                x = a[i]\n        else:\n            z.append(i + 1)\n            c += 1\n    if v == 1 and c > 0:\n        z.append(p + 1)\n        print(*z)\n    else:\n        print(-1)", "for s in [*open(0)][2::2]:\n    (*r,) = range(1, len((a := (s.split() + [0]))))\n    i = j = 0\n    p = a[0]\n    for x in a:\n        if x != p:\n            r = ([-1], r)[j - i > 1]\n            r[i:j] = r[i + 1:j] + r[i:i + 1]\n            i = j\n            p = x\n        j += 1\n    print(*r)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    w = [0] * n\n    j = n - 1\n    k = n\n    while j > 0:\n        if l[j] == l[j - 1]:\n            w[j] = j\n            w[j - 1] = k\n        else:\n            k = j\n        j -= 1\n    if sum(w) == n * (n + 1) // 2:\n        print(*w)\n    else:\n        print(-1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.append(-1)\n    ans = []\n    a = 2\n    s = 1\n    k = 0\n    ch = ''\n    test = True\n    for j in range(n):\n        if l[j] == l[j + 1]:\n            s = s + 1\n            ans.append(a)\n            a = a + 1\n        else:\n            ans.append(k + 1)\n            if s == 1:\n                print(-1)\n                test = False\n                break\n            else:\n                k = j + 1\n                s = 1\n                a = k + 2\n    if test == True:\n        print(*ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.append(-1)\n    a = 2\n    s = 1\n    k = 0\n    test = True\n    ans = []\n    for j in range(n):\n        if l[j] == l[j + 1]:\n            s = s + 1\n            ans.append(a)\n            a = a + 1\n        else:\n            ans.append(k + 1)\n            if s == 1:\n                print(-1)\n                test = False\n                break\n            else:\n                k = j + 1\n                s = 1\n                a = k + 2\n    if test == True:\n        print(*ans)", "for s in [*open(0)][2::2]:\n    (*r,) = range(1, len((a := (s.split() + [0]))))\n    i = j = 0\n    p = a[0]\n    for x in a:\n        if x != p:\n            r = ([-1], r)[j - i > 1]\n            r[i:j] = r[i + 1:j] + r[i:i + 1]\n            i = j\n            p = x\n        j += 1\n    print(*r)", "for s in [*open(0)][2::2]:\n    (*r,) = range(1, len((a := (s.split() + [0]))))\n    i = j = 0\n    p = a[0]\n    for x in a:\n        if x != p:\n            r = ([-1], r)[j - i > 1]\n            r[i:j] = r[i + 1:j] + r[i:i + 1]\n            i = j\n            p = x\n        j += 1\n    print(*r)", "for _ in range(int(input())):\n    n = int(input())\n    ms = list(map(int, input().split())) + [-1]\n    l = 0\n    out = []\n    for i in range(1, n + 1):\n        if ms[i] != ms[i - 1]:\n            if l + 1 == i:\n                out = [-1]\n                break\n            out += [i] + list(range(l + 1, i))\n            l = i\n    print(*out)", "t = int(input())\nans = []\nfor i in range(t):\n    n = int(input())\n    shoes = list(map(int, input().split(' ')))\n    tailles = {}\n    for (i, shoe) in enumerate(shoes):\n        if shoe not in tailles:\n            tailles[shoe] = [i]\n        else:\n            tailles[shoe].append(i)\n    permut = []\n    for taille in tailles.values():\n        if len(taille) == 1:\n            permut = -1\n    if permut != -1:\n        for shoe in shoes:\n            nb = len(tailles[shoe])\n            if nb > 1:\n                permut.append(1 + tailles[shoe].pop(1))\n            else:\n                permut.append(1 + tailles[shoe].pop(0))\n    ans.append(permut)\nfor i in ans:\n    if i == -1:\n        print(i)\n    else:\n        print(' '.join(map(str, i)))", "from itertools import count\nfrom typing import List, Optional\nimport collections as co\nimport copy\n\nclass Solution:\n\n    def cambiar(self, m):\n        m[0] += 1\n        m[1] += 1\n        ret = ''\n        for x in range(m[0] + 1, m[1] + 1):\n            ret += str(x) + ' '\n        ret += str(m[0]) + ' '\n        return ret\n\n    def buscar(self, v, pos):\n        valor = v[pos]\n        while pos >= 0 and valor == v[pos]:\n            pos -= 1\n        return pos\n\n    def solve(self, v):\n        m = []\n        pos = len(v) - 1\n        while pos != -1:\n            nuevapos = self.buscar(v, pos)\n            dif = pos - nuevapos\n            if dif == 1:\n                return -1\n            m.append([nuevapos + 1, pos])\n            pos = nuevapos\n        tam = len(m) - 1\n        res = ''\n        for i in range(tam, -1, -1):\n            seg = m[i]\n            ret = self.cambiar(seg)\n            res += ret\n        return res.strip()\nsol = Solution()\nfor _ in range(int(input())):\n    n = int(input())\n    v = list(map(int, input().split()))\n    print(sol.solve(v))", "import sys\nfrom collections import defaultdict\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\ntc = inp()\nwhile tc:\n    n = inp()\n    seq = list(invr())\n    chunks = []\n    prevChunkStart = 0\n    prevElem = -1\n    for (i, elem) in enumerate(seq):\n        if elem != prevElem and prevElem != -1:\n            chunks.append([prevChunkStart, i - 1])\n            prevChunkStart = i\n        if i == len(seq) - 1:\n            chunks.append([prevChunkStart, i])\n        prevElem = elem\n    ans = []\n    for chunk in chunks:\n        (si, ei) = chunk\n        if si == ei:\n            ans = [-1]\n            break\n        else:\n            ans += [i + 1 for i in range(si + 1, ei + 1)]\n            ans += [si + 1]\n    print(' '.join(map(str, ans)))\n    tc -= 1", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    list1 = [int(num) for num in input().split()]\n    if n == 1:\n        print(-1)\n    else:\n        flag = 0\n        if list1[0] != list1[1]:\n            flag = 1\n        else:\n            for i in range(1, n - 1, 1):\n                if list1[i] == list1[i + 1] or list1[i] == list1[i - 1]:\n                    flag = 0\n                else:\n                    flag = 1\n                    break\n            if list1[n - 2] != list1[n - 1]:\n                flag = 1\n        if flag == 1:\n            print(-1)\n        else:\n            s = ''\n            i = 0\n            while i < n - 1:\n                j = i\n                while i < n - 1 and list1[i] == list1[i + 1]:\n                    s += str(i + 1 + 1) + ' '\n                    i += 1\n                s += str(j + 1) + ' '\n                i += 1\n            print(s)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = {}\n    s = []\n    f = 0\n    for i in set(a):\n        b[i] = []\n    for i in range(n):\n        b[a[i]] += [i]\n        s.append(0)\n    for i in b.values():\n        if len(i) == 1:\n            f = -1\n            break\n        else:\n            k = i[-1:] + i[:-1]\n            for j in range(len(i)):\n                s[i[j]] = str(k[j] + 1)\n    if f == -1:\n        print(f)\n    else:\n        print(' '.join(s))", "class ShoeShuffling:\n\n    def solve(self, n, s):\n        if n == 1:\n            print(-1)\n            return\n        shuffle = []\n        start = 0\n        for i in range(1, n):\n            if s[i] == s[start]:\n                shuffle.append(i)\n            elif i == start + 1:\n                print(-1)\n                return\n            else:\n                shuffle.append(start)\n                start = i\n        if start == n - 1:\n            print(-1)\n            return\n        shuffle.append(start)\n        for j in shuffle:\n            print(j + 1, end=' ')\n        print()\n        return\nT = int(input())\nwhile T:\n    T -= 1\n    n = int(input())\n    s = list(map(int, input().split()))\n    ShoeShuffling().solve(n, s)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    c = Counter(s)\n    f = 0\n    for i in c.keys():\n        if c[i] < 2:\n            f = 1\n            break\n    if f:\n        print(-1)\n    else:\n        ans = []\n        cur = s[0]\n        j = 0\n        for i in range(1, n):\n            if s[i] == cur:\n                ans.append(i + 1)\n            else:\n                ans.append(j + 1)\n                j = i\n                cur = s[i]\n        ans.append(j + 1)\n        print(*ans)", "for s in [*open(0)][2::2]:\n    (*r,) = range(1, len((a := (s.split() + [0]))))\n    i = j = 0\n    p = a[0]\n    f = 0\n    for x in a:\n        if x != p:\n            f |= j - i < 2\n            r[i:j] = r[i + 1:j] + [r[i]]\n            i = j\n            p = x\n        j += 1\n    print(*(r, [-1])[f])", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.append(0)\n    ans = [0] * n\n    s = -1\n    for i in range(n):\n        if a[i] == a[i + 1]:\n            ans[i] = i + 2\n            if i == 0 or a[i - 1] != a[i]:\n                s = i + 1\n        else:\n            if s == -1:\n                print(-1)\n                break\n            ans[i] = s\n            s = -1\n    else:\n        print(*ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(map(int, input().split(' ')))\n    if n == 1:\n        print(-1)\n        continue\n    if s[0] != s[1]:\n        print(-1)\n        continue\n    l = [i for i in range(1, n + 1)]\n    k = 1\n    flag = True\n    for i in range(n - 1, 0, -1):\n        if s[i] == s[i - 1]:\n            k += 1\n            (l[i], l[i - 1]) = (l[i - 1], l[i])\n        elif s[i] != s[i - 1] and k == 1:\n            print(-1)\n            flag = False\n            break\n        else:\n            k = 1\n    if flag == True:\n        print(*l)"]