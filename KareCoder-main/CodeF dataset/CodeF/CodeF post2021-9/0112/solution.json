["t = int(input())\nfor _ in range(t):\n    (n, c) = map(int, input().split())\n    arr = [int(j) for j in input().split()]\n    freq = [0] * 101\n    for x in arr:\n        freq[x] += 1\n    ans = 0\n    for x in freq:\n        ans += min(x, c)\n    print(ans)", "import sys, math\ninput = sys.stdin.readline\nINF = int(1000000000.0) + 7\n\ndef solve():\n    (n, m) = map(int, input().split())\n    cnt = [0] * 111\n    data = list(map(int, input().split()))\n    for i in data:\n        cnt[i] += 1\n    ans = 0\n    for i in range(101):\n        ans += min(m, cnt[i])\n    print(ans)\nt = 1\nt = int(input())\nfor i in range(1, t + 1):\n    solve()", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    lis = list(map(int, input().split()))\n    ans = 0\n    di = dict()\n    for i in lis:\n        di[i] = di.get(i, 0) + 1\n    for i in di:\n        val = di[i]\n        val = min(val, c)\n        ans += val\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, c) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    d = defaultdict(int)\n    for x in l:\n        d[x] += 1\n    ans = 0\n    for x in d.values():\n        if x > c:\n            ans += c\n        else:\n            ans += x\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    x = Counter(arr)\n    ans = 0\n    for i in x:\n        if x[i] >= c:\n            ans += c\n        else:\n            ans += x[i]\n    print(ans)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    p = [0] * 101\n    for i in range(n):\n        p[arr[i]] += 1\n    ans = 0\n    for i in range(1, 101):\n        ans += min(p[i], c)\n    print(ans)", "t = int(input())\nfor ttt in range(t):\n    (n, c) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    cnt = [0] * 101\n    for i in a:\n        cnt[i] += 1\n    ans = 0\n    for cc in cnt:\n        if cc > c:\n            ans += c\n        else:\n            ans += cc\n    print(ans)", "t = int(input())\nfor ncase in range(1, t + 1):\n    (n, c) = [int(s) for s in input().split(' ')]\n    a = [int(s) for s in input().split(' ')]\n    d = {}\n    for i in a:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    ans = 0\n    for orbi in d:\n        if d[orbi] >= c:\n            ans += c\n        else:\n            ans += d[orbi]\n    print(ans)", "from collections import defaultdict, Counter\n\ndef solve():\n    (n, m) = map(int, input().split())\n    A = list(map(int, input().split()))\n    ans = 0\n    for (x, y) in Counter(A).items():\n        ans += min(m, y)\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "for bla in range(int(input())):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    arr = [0] * 105\n    for i in a:\n        arr[i] += 1\n    cost = 0\n    for i in arr:\n        if i > c:\n            cost += c\n        else:\n            cost += i\n    print(cost)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    d = {}\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    cnt = 0\n    for i in d:\n        if d[i] < c:\n            cnt += d[i]\n        else:\n            cnt += c\n    print(cnt)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    total = 0\n    count = 1\n    for i in range(1, n):\n        if arr[i] != arr[i - 1]:\n            total += min(count, c)\n            count = 1\n        else:\n            count += 1\n    total += min(count, c)\n    print(total)", "t = int(input())\nfor _ in range(t):\n    (n, c) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    k = 1\n    cost = 0\n    if len(a) == 1:\n        print(1)\n    else:\n        for i in range(1, len(a)):\n            if a[i - 1] == a[i]:\n                k += 1\n            else:\n                if k > c:\n                    cost += c\n                else:\n                    cost += k\n                k = 1\n        if k > c:\n            cost += c\n        else:\n            cost += k\n        print(cost)", "t = int(input())\nfor i in range(t):\n    (n, c) = map(int, input().split(' '))\n    arr = [int(j) for j in input().split()]\n    d = {}\n    res = 0\n    for i in arr:\n        if i not in d:\n            d[i] = 0\n        d[i] += 1\n    for i in d.keys():\n        if d[i] >= c:\n            res += c\n        else:\n            res += d[i]\n    print(res)", "t = int(input())\nwhile t != 0:\n    (n, c) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    dic = {}\n    ans = 0\n    for num in arr:\n        if num not in dic.keys():\n            dic[num] = 0\n        dic[num] += 1\n    for value in dic.values():\n        if value <= c:\n            ans += value\n        else:\n            ans += c\n    print(ans)\n    t -= 1", "def one():\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = [0] * 101\n    for e in a:\n        d[e] += 1\n    s = 0\n    for i in range(len(d)):\n        s += min(d[i], c)\n    print(s)\nt = int(input())\nfor i in range(t):\n    one()", "from collections import Counter\nfor _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    l = list(map(int, input().split()))\n    f = Counter(l)\n    print(sum((min(v, c) for v in f.values())))", "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\ndef values():\n    return tuple(map(int, sys.stdin.readline().split()))\n\ndef inlsts():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef instr():\n    return sys.stdin.readline().strip()\n\ndef words():\n    return [i for i in sys.stdin.readline().strip().split()]\n\ndef chars():\n    return [i for i in sys.stdin.readline().strip()]\n\ndef solve():\n    (n, c) = values()\n    l = values()\n    tot = 0\n    cnt = collections.Counter(l)\n    for i in cnt:\n        tot += min(cnt[i], c)\n    print(tot)\nfor i in range(inp()):\n    solve()", "t = int(input())\nfor _ in range(0, t):\n    inputs = [int(num) for num in input().split()]\n    n = inputs[0]\n    c = inputs[1]\n    list2 = [int(num) for num in input().split()]\n    dict1 = {}\n    for i in range(0, n):\n        if list2[i] not in dict1:\n            dict1[list2[i]] = 0\n        dict1[list2[i]] += 1\n    cost = 0\n    for key in dict1:\n        if dict1[key] <= c:\n            cost += dict1[key]\n        else:\n            cost += c\n    print(cost)", "t = int(input())\nfor _ in range(t):\n    (n, c) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    d = {}\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    cost = 0\n    for i in d:\n        if d[i] < c:\n            cost += d[i]\n        else:\n            cost += c\n    print(cost)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    l = list(map(int, input().split()))\n    di = {}\n    for x in l:\n        if x in di:\n            di[x] = di[x] + 1\n        else:\n            di[x] = 1\n    z = 0\n    for x in di:\n        z += min(di[x], c)\n    print(z)", "for _ in range(int(input())):\n    (n, p) = map(int, input().split())\n    a = list(map(int, input().split()))\n    z = [0] * 101\n    for i in a:\n        z[i] += 1\n    b = [p if i > p else i for i in z]\n    s = sum(b)\n    print(s)", "import collections\n\ndef inp_arr():\n    return list(map(int, input().strip().split(' ')))\n\ndef inp_int():\n    return int(input())\n\ndef inp_str():\n    return input()\n\ndef solve():\n    (n, c) = inp_arr()\n    a = inp_arr()\n    mp = collections.defaultdict(int)\n    for x in a:\n        mp[x] += 1\n    cost = 0\n    for x in mp:\n        cost += min(c, mp[x])\n    print(cost)\ntt = inp_int()\nfor t in range(tt):\n    solve()", "t = int(input())\nfor i in range(t):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [0] * 101\n    s = n\n    for x in a:\n        b[x - 1] += 1\n    for x in b:\n        if x > c:\n            s -= x - c\n    print(s)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = Counter(l)\n    ans = 0\n    for i in d.values():\n        ans += min(i, c)\n    print(ans)", "import sys\nfrom collections import Counter\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef solve():\n    (n, c) = inlt()\n    a = sorted(inlt())\n    cntr = Counter(a)\n    ans = 0\n    for (k, v) in cntr.items():\n        opt_1 = v\n        opt_2 = c\n        ans += min(opt_1, opt_2)\n    return ans\nt = inp()\nfor i in range(t):\n    ans = solve()\n    print(ans)", "import sys\nimport math\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_ls():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef yesno(ok):\n    print('YES' if ok else 'NO')\n\ndef main():\n    for _ in range(int(input())):\n        (n, c) = get_ints()\n        ls = get_ls()\n        ans = 0\n        d = {}\n        for i in ls:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        for i in d.values():\n            if i == 1:\n                ans += 1\n            else:\n                ans += min(i, c)\n        print(ans)\nmain()", "from sys import stdin, stdout\n\ndef main():\n    t = int(stdin.readline())\n    for i in range(t):\n        (n, c) = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        dic = {}\n        for num in a:\n            if num in dic:\n                dic[num] += 1\n            else:\n                dic[num] = 1\n        cost = 0\n        for key in dic:\n            if dic[key] > c:\n                cost += c\n            else:\n                cost += dic[key]\n        print(cost)\nmain()", "import sys\nimport collections\nfrom math import ceil, gcd, sqrt, log\nimport bisect\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    (n, c) = map(int, input().split())\n    A = list(map(int, input().split()))\n    net = collections.Counter(A)\n    ans = 0\n    for a in net:\n        k = net[a]\n        ans += min(k, c)\n    print(ans)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dic = {}\n    z = set(a)\n    cost = 0\n    for i in a:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    for i in z:\n        if c > dic[i]:\n            cost += dic[i]\n        else:\n            cost += c\n    print(cost)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    planets = defaultdict(int)\n    count = 0\n    (n, c) = map(int, input().split())\n    p = list(map(int, input().split()))\n    for i in p:\n        planets[i] += 1\n    for (o, ps) in planets.items():\n        if ps >= c:\n            count += c\n        else:\n            count += ps\n    print(count)", "def main():\n    n_tests = int(input())\n    for _ in range(n_tests):\n        (n, c) = list(map(int, input().split(' ')))\n        elems = list(map(int, input().split(' ')))\n        counter = {}\n        for x in elems:\n            if x not in counter:\n                counter[x] = 0\n            counter[x] += 1\n        cost = 0\n        for (orbit, cnt) in reversed(sorted(counter.items(), key=lambda x: x[1])):\n            cost += min(cnt, c)\n        print(cost)\nmain()", "t = eval(input())\nfor i in range(t):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    k = {}\n    sum = 0\n    for i in a:\n        if i not in k:\n            k[i] = 1\n        else:\n            k[i] += 1\n    for i in k:\n        if k[i] > c:\n            sum += c\n        else:\n            sum += k[i]\n    print(sum)", "for _ in range(int(input())):\n    (n, c) = [int(x) for x in input().split(' ')]\n    arr = [int(x) for x in input().split(' ')]\n    mp = [0 for i in range(101)]\n    for val in arr:\n        mp[val] += 1\n    ans = 0\n    for i in range(101):\n        if mp[i] > c:\n            ans += c\n        else:\n            ans += mp[i]\n    print(ans)", "k = int(input())\nfor i in range(k):\n    summa = 0\n    (n, c) = map(int, input().split())\n    a = input().split()\n    d = {}\n    for i in a:\n        if not d.get(i):\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in d.values():\n        if i < c:\n            summa += i\n        else:\n            summa += c\n    print(summa)", "cases = int(input())\nfor i in range(cases):\n    (n, c) = input().split()\n    n = int(n)\n    c = int(c)\n    orb = {}\n    temp = input().split()\n    for j in temp:\n        j = int(j)\n        orb[j] = orb.get(j, 0) + 1\n    total = 0\n    for (k, v) in orb.items():\n        total += min(v, c)\n    print(total)", "t = int(input())\nfor i in range(t):\n    (n, c) = map(int, input().split())\n    lis = list(map(int, input().split()))\n    setlis = set(lis)\n    setlis = list(setlis)\n    countlis = []\n    for j in setlis:\n        countlis.append(lis.count(j))\n    cost = 0\n    for j in countlis:\n        one = j\n        if one < c:\n            cost += one\n        else:\n            cost += c\n    print(cost)", "for i in range(int(input())):\n    (n, c) = map(int, input().split())\n    orbits = [x for x in input().split()]\n    count_dict = dict()\n    ans = 0\n    for orbit in orbits:\n        if orbit in count_dict:\n            count_dict[orbit] += 1\n        else:\n            count_dict[orbit] = 1\n    for vals in count_dict.values():\n        if vals > c:\n            ans += c\n        else:\n            ans += vals\n    print(ans)", "t = int(input())\nwhile t:\n    (n, c) = map(int, input().split())\n    orb = list(map(int, input().split()))\n    ans = 0\n    d = {}\n    for ele in orb:\n        if ele not in d:\n            d[ele] = 1\n        else:\n            d[ele] += 1\n    for k in d:\n        ans += min(d[k] * 1, c)\n    print(ans)\n    t -= 1", "def solve():\n    [n, c] = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    d = {}\n    for p in a:\n        if p in d:\n            d[p] += 1\n        else:\n            d[p] = 1\n    cost = 0\n    for k in d:\n        cost += min(c, d[k])\n    print(cost)\nfor _ in range(int(input())):\n    solve()", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, c) = list(map(int, input().split()))\n    cnt = defaultdict(int)\n    res = 0\n    arr = list(map(int, input().split()))\n    for v in arr:\n        cnt[v] += 1\n    for (i, v) in cnt.items():\n        if v >= c:\n            res += c\n        else:\n            res += v\n    print(res)", "for _ in range(int(input())):\n    (n, c) = input().split(' ')\n    n = int(n)\n    c = int(c)\n    d = {}\n    a = input().split(' ')\n    ans = 0\n    for i in a:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for (key, val) in d.items():\n        if val > c:\n            ans += c\n        else:\n            ans += val\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, c) = map(int, input().split())\n    a = [i for i in list(input().split())]\n    b = set(a)\n    res = 0\n    for x in b:\n        k = a.count(x)\n        if k > c:\n            res += c\n        else:\n            res += k\n    print(res)", "from sys import stdin, stdout\n\ndef solve():\n    (n, c) = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    freq = {}\n    for o in a:\n        freq[o] = 1 + freq.get(o, 0)\n    cost = 0\n    for n in freq.values():\n        cost += min(c, n)\n    print(cost)\n\ndef main():\n    t = int(stdin.readline())\n    for i in range(t):\n        solve()\nmain()", "ntestcases = int(input())\nfor t in range(ntestcases):\n    (nPlanets, machineCost) = map(int, input().split(' '))\n    minCost = nPlanets\n    planetsPerOrbit = {}\n    orbits = list(map(int, input().split(' ')))\n    for orbit in orbits:\n        if orbit not in planetsPerOrbit:\n            planetsPerOrbit[orbit] = 0\n        planetsPerOrbit[orbit] += 1\n        if planetsPerOrbit[orbit] > machineCost:\n            minCost -= 1\n    print(minCost)", "t = int(input())\nwhile t != 0:\n    t -= 1\n    (n, c) = input().split()\n    n = int(n)\n    c = int(c)\n    arr = input().split()\n    dict = {}\n    for i in range(len(arr)):\n        arr[i] = int(arr[i])\n        if arr[i] in dict.keys():\n            dict[arr[i]] += 1\n        else:\n            dict[arr[i]] = 1\n    ans = 0\n    for i in dict.keys():\n        if dict[i] > c:\n            ans += c\n        else:\n            ans += dict[i]\n    print(ans)", "t = int(input())\nans = []\nfor _ in range(t):\n    (n, c) = map(int, input().split())\n    plan = list(map(int, input().split()))\n    dick = {}\n    now = 0\n    for e in plan:\n        dick[e] = dick.get(e, 0) + 1\n    for e in dick.keys():\n        if dick[e] > c:\n            now += c\n        else:\n            now += dick[e]\n    ans.append(str(now))\nprint('\\n'.join(ans))", "numCases = int(input())\noutputArray = []\nfor i in range(numCases):\n    arrayN = list(map(int, input().split(' ')))\n    c = arrayN[1]\n    dict = {}\n    sum = 0\n    arrayPlanet = list(map(int, input().split(' ')))\n    for j in arrayPlanet:\n        dict[j] = 1 + dict.get(j, 0)\n    for j in dict:\n        if dict[j] > 1:\n            if dict[j] > c:\n                sum += c\n            else:\n                sum += dict[j]\n        else:\n            sum += 1\n    outputArray.append(sum)\nfor i in outputArray:\n    print(i)", "for _ in range(int(input())):\n    [n, c] = list(map(int, input().split()))\n    a = input().split()\n    di = dict()\n    for i in a:\n        if i in di:\n            di[i] += 1\n        else:\n            di[i] = 1\n    val = 0\n    for i in di.values():\n        if i > c:\n            val += c\n        else:\n            val += i\n    print(val)", "ad = int(input())\nfor i in range(ad):\n    (n, c) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[l[i]] = 0\n    for i in range(n):\n        d[l[i]] += 1\n    r = 0\n    for i in d:\n        if d[i] > c:\n            r += c\n        else:\n            r += d[i]\n    print(r)", "for _ in range(int(input())):\n    (n, p) = map(int, input().split())\n    q = 0\n    a = list(map(int, input().split()[:n]))\n    c = {}\n    for i in a:\n        if i in c:\n            c[i] += 1\n        else:\n            c[i] = 1\n    m = list(c.values())\n    for i in m:\n        if i < p:\n            q += i\n        else:\n            q += p\n    print(q)", "for x in range(int(input())):\n    (n, c) = map(int, input().split())\n    fa = [0] * 200\n    res = 0\n    arr = list(map(int, input().split()))\n    s = []\n    for i in arr:\n        fa[i] += 1\n        if i not in s:\n            s.append(i)\n    for i in s:\n        res += min(fa[i], c)\n    print(res)", "t = int(input())\nfor i in range(t):\n    l0 = input().split()\n    n = int(l0[0])\n    c = int(l0[1])\n    l = input().split()\n    dct = {}\n    cost = 0\n    rem = n\n    for j in l:\n        a = int(j)\n        if j in dct:\n            dct[j] += 1\n        else:\n            dct[j] = 1\n    for k in dct:\n        if dct[k] >= c:\n            cost += c\n            rem = rem - dct[k]\n    for m in range(rem):\n        cost += 1\n    print(cost)", "def func():\n    (N, C) = list(map(int, input().split()))\n    Planets = list(map(int, input().split()))\n    vals_dics = {}\n    for p in Planets:\n        if p not in vals_dics:\n            vals_dics[p] = 0\n        vals_dics[p] += 1\n    ret = 0\n    for p in vals_dics:\n        if vals_dics[p] > C:\n            ret += C\n        else:\n            ret += vals_dics[p]\n    print(ret)\nn_tests = int(input())\nfor i in range(n_tests):\n    func()", "t = int(input())\nfor i in range(t):\n    (n, c) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    d = {}\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] in d:\n            d[arr[i]] += 1\n        else:\n            d[arr[i]] = 1\n    for (k, v) in d.items():\n        ans = min(v, c)\n        count += ans\n    print(count)", "for i in range(int(input())):\n    nc = [int(x) for x in input().split()]\n    n = nc[0]\n    c = nc[1]\n    a = [int(x) for x in input().split()]\n    d = {}\n    for num in a:\n        try:\n            d[num] += 1\n        except:\n            d[num] = 1\n    total = 0\n    for (ring, planets) in d.items():\n        if c < planets:\n            total += c\n        else:\n            total += planets\n    print(total)", "import sys\nfrom collections import Counter\n\ndef run():\n    (n, c) = tuple(map(int, sys.stdin.readline().split()))\n    planets = Counter(map(int, sys.stdin.readline().split()))\n    cost = 0\n    for a in planets.values():\n        cost += min(a, c)\n    print(cost)\nt = int(input())\nfor _ in range(t):\n    run()", "n = int(input())\nfirst_gun_cost = 1\nfor i in range(n):\n    price = 0\n    orbits = dict()\n    (planets_num, second_gun_cost) = [int(i) for i in input().split()]\n    planets = input().split()\n    for planet in planets:\n        if planet not in orbits:\n            orbits[planet] = 1\n        else:\n            orbits[planet] += 1\n    for key in orbits:\n        if orbits[key] >= second_gun_cost:\n            price += second_gun_cost\n        else:\n            price += orbits[key]\n    print(price)", "n = int(input())\nfor i in range(n):\n    (x, y) = map(int, input().split())\n    v = list(map(int, input().split()))\n    v1 = [0] * 101\n    for j in range(x):\n        v1[v[j]] += 1\n    r = 0\n    for j in range(101):\n        if v1[j] < y:\n            r += v1[j]\n        else:\n            r += y\n    print(r)", "m = int(input())\nfinal = []\nfor i in range(m):\n    nc = input()\n    n = int(nc.split()[0])\n    c = int(nc.split()[1])\n    a = list(map(int, input().split()))\n    a.sort()\n    dict1 = {}\n    cost = 0\n    for i in a:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    for i in dict1:\n        if dict1[i] >= c:\n            cost += c\n        else:\n            cost += dict1[i]\n    final.append(cost)\nfor i in final:\n    print(i)", "t = int(input())\nresult = []\nfor i in range(t):\n    (n, c) = list(map(int, input().split(' ')))\n    countt = [0 for i in range(101)]\n    orbit = input().split(' ')\n    sum = 0\n    for j in orbit:\n        countt[int(j)] = countt[int(j)] + 1\n    for j in countt:\n        sum += min(j, c)\n    result.append(sum)\nfor i in result:\n    print(i)", "t = int(input())\nfor i in range(t):\n    (n, c) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    mapa = {}\n    for k in range(n):\n        mapa[a[k]] = 0\n    for j in range(n):\n        mapa[a[j]] = mapa[a[j]] + 1\n    ans = 0\n    for (items, value) in mapa.items():\n        ans = ans + min(value, c)\n    print(ans)", "import sys\n\ndef solution():\n    line_num = 0\n    line1 = []\n    line2 = []\n    for line in sys.stdin:\n        if line_num == 0:\n            line_num += 1\n            continue\n        if line_num % 2 == 1:\n            line1 = [int(x) for x in line.strip().split()]\n            if line1[0] == 0:\n                print(0)\n                return\n        else:\n            line2 = [int(x) for x in line.strip().split()]\n            cost = line1[1]\n            num = line1[0]\n            dic = {}\n            for elem in line2:\n                if elem in dic:\n                    dic[elem] += 1\n                else:\n                    dic[elem] = 1\n            res = 0\n            for i in dic.values():\n                res += min(cost, i)\n            print(res)\n        line_num += 1\nsolution()", "from collections import Counter\n\ndef f(n, c, a):\n    o_and_p = Counter(a)\n    if c == 1:\n        res = len(o_and_p)\n    else:\n        res = 0\n        for i in o_and_p.values():\n            if i >= c:\n                res += c\n            else:\n                res += i\n    print(res)\nt = int(input())\nwhile t:\n    t -= 1\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    f(n, c, a)", "import sys\nm = int(sys.stdin.readline())\nfor i in range(m):\n    w = sys.stdin.readline().replace('\\n', '').split(' ')\n    a = sys.stdin.readline().replace('\\n', '').split(' ')\n    c = int(w[1])\n    ans = 0\n    r = set()\n    for q in range(int(w[0])):\n        r.add(int(a[q]))\n    u = max(r) + 1\n    s = [0] * u\n    for q in range(int(w[0])):\n        s[int(a[q])] += 1\n    for q in range(u):\n        ans += min(s[q], c)\n    print(ans)", "import sys\nt = int(input())\nfor i in range(t):\n    (n, c) = list(map(int, input().strip().split()))\n    a = list(map(int, input().strip().split()))\n    count = {}\n    for orbit in a:\n        if orbit in count:\n            count[orbit] += 1\n        else:\n            count[orbit] = 1\n    cost = 0\n    for orbit in count:\n        planets = count[orbit]\n        if c < planets:\n            cost += c\n        else:\n            cost += planets\n    print(cost)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    hashmap = {}\n    for i in range(n):\n        if a[i] not in hashmap:\n            hashmap[a[i]] = 0\n        hashmap[a[i]] += 1\n    ans = 0\n    for elem in hashmap.values():\n        if elem > c:\n            ans += c\n        else:\n            ans += elem\n    print(ans)", "t = int(input())\n\ndef main():\n    for q in range(t):\n        DICTIONARY = {}\n        (NUMS, GUESS) = map(int, input().split())\n        ARRAY = list(map(int, input().split()))\n        for ITER in ARRAY:\n            if not ITER in DICTIONARY:\n                DICTIONARY[ITER] = 0\n            DICTIONARY[ITER] = DICTIONARY[ITER] + 1\n        RES = 0\n        for i in DICTIONARY.keys():\n            if DICTIONARY[i] >= GUESS:\n                RES = RES + GUESS\n            else:\n                RES = RES + DICTIONARY[i]\n        print(RES)\nmain()", "from collections import Counter\nans = []\nt = int(input())\nfor _ in range(t):\n    (n, c) = map(int, input().split())\n    count = Counter(list(map(int, input().split()[:n])))\n    cost = 0\n    for (key, item) in count.items():\n        cost += min(c, item)\n    ans.append(cost)\nfor a in ans:\n    print(a)", "t = int(input())\nfor i in range(t):\n    summ = 0\n    counter = 1\n    nc = input()\n    ai = input()\n    b = nc.split()\n    f = ai.split()\n    n = int(b[0])\n    c = int(b[1])\n    if n == 1:\n        print(1)\n        continue\n    f.sort()\n    for j in range(n - 1):\n        if f[j] == f[j + 1]:\n            counter = counter + 1\n        elif counter > c:\n            summ = summ + c\n            counter = 1\n        else:\n            summ = summ + counter\n            counter = 1\n    if counter != 1:\n        if counter > c:\n            summ = summ + c\n            counter = 1\n        else:\n            summ = summ + counter\n            counter = 1\n    else:\n        summ = summ + 1\n    print(summ)", "def get_cost(n, c, A):\n    dict_all = {}\n    for i in range(n):\n        if A[i] not in dict_all.keys():\n            dict_all[A[i]] = 1\n        else:\n            dict_all[A[i]] += 1\n    cost = 0\n    for key in dict_all.keys():\n        if dict_all[key] < c:\n            cost += dict_all[key]\n        else:\n            cost += c\n    return cost\nn = int(input())\ntotal_input = []\nfor _ in range(n):\n    n_c = list(map(int, input().split()))\n    Ai = list(map(int, input().split()))\n    total_input.append([n_c, Ai])\nfor i in range(n):\n    print(get_cost(total_input[i][0][0], total_input[i][0][1], total_input[i][1]))", "for tests in range(int(input())):\n    (n, c) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in l:\n        try:\n            d[i] += 1\n        except:\n            d[i] = 1\n    cost = 0\n    for i in d:\n        if d[i] > c:\n            cost += c\n        else:\n            cost += d[i]\n    print(cost)", "t = int(input())\nres = []\nfor _ in range(t):\n    (n, c) = map(int, input().split())\n    l = list(map(int, input().split()))\n    s = set(l)\n    cost = 0\n    for k in s:\n        cc = l.count(k)\n        if cc >= c:\n            cost += c\n        else:\n            cost += cc\n    res.append(str(cost))\nprint('\\n'.join(res))", "t = int(input())\nfor _ in range(t):\n    (n, c) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    ans = 0\n    for i in d:\n        if d[i] == 1:\n            ans += 1\n        else:\n            ans += min(d[i], c)\n    print(ans)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (n, c) = [int(x) for x in input().split()]\n    a = list(map(int, input().split()))\n    if c == 1:\n        print(len(list(set(a))))\n    else:\n        cost = 0\n        _dict = dict(Counter(a))\n        for key in _dict:\n            if _dict[key] > c:\n                cost += c\n            else:\n                cost += _dict[key]\n        print(cost)", "tests = int(input())\nfor cases in range(tests):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    dict1 = {}\n    sum = 0\n    for ele in arr:\n        if ele not in dict1:\n            dict1[ele] = 1\n        else:\n            dict1[ele] = dict1[ele] + 1\n    for ele in dict1:\n        if dict1[ele] > k:\n            sum = sum + k\n        else:\n            sum = sum + dict1[ele]\n    print(sum)", "t = int(input())\nfor i in range(t):\n    (n, c) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = dict()\n    t = 0\n    for j in l:\n        if j in d:\n            d[j] += 1\n        else:\n            d[j] = 1\n    for j in d.values():\n        if j > c:\n            t += c\n        else:\n            t += j\n    print(t)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    orbit = list(map(int, input().split()))\n    orbit.sort()\n    orbit.append(0)\n    b = []\n    count = 0\n    cost = 0\n    for i in range(n):\n        if orbit[i] == orbit[i + 1]:\n            count += 1\n        else:\n            b.append(count + 1)\n            count = 0\n    for i in b:\n        if i < c:\n            cost += i\n        else:\n            cost += c\n    print(cost)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = dict()\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    tot = 0\n    for i in d:\n        if d[i] > c:\n            tot += c\n        else:\n            tot += d[i]\n    print(tot)", "t = int(input())\nfor _ in range(t):\n    (n, c) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    cos = 0\n    res = 1\n    f = l[0]\n    for i in range(1, n):\n        if l[i] == f:\n            res = res + 1\n        else:\n            cos = cos + min(res, c)\n            res = 1\n            f = l[i]\n    cos = cos + min(res, c)\n    print(cos)", "def get_min_cost(n, c, planets):\n    orbit_count = {}\n    for i in range(n):\n        orbit_count[planets[i]] = orbit_count.get(planets[i], 0) + 1\n    result = 0\n    for (orbit, count) in orbit_count.items():\n        if count <= c:\n            result += count\n        if count > c:\n            result += c\n    return result\nt = int(input())\nfor _ in range(t):\n    (n, c) = map(int, input().split())\n    planets = list(map(int, input().split()))\n    print(get_min_cost(n, c, planets))", "t = int(input())\nwhile t > 0:\n    infoList = list(map(int, input().split()))\n    planetList = list(map(int, input().split()))\n    n = infoList[0]\n    c = infoList[1]\n    planetList.sort()\n    cost = 0\n    cnt = 1\n    for i in range(0, len(planetList)):\n        if i == 0:\n            continue\n        if planetList[i - 1] != planetList[i]:\n            if c >= 1 * cnt:\n                cost += cnt\n            else:\n                cost += c\n            cnt = 1\n            continue\n        cnt += 1\n    if c >= 1 * cnt:\n        cost += cnt\n    else:\n        cost += c\n    if len(list(set(planetList))) == 1:\n        if c >= 1 * len(planetList):\n            cost = len(planetList)\n        else:\n            cost = c\n    print(cost)\n    t -= 1", "def destroy_planets():\n    t = int(input())\n    for _ in range(t):\n        (n, cost) = map(int, input().split())\n        dupes = list(map(int, input().split()))[:n]\n        dict = {}\n        for i in range(len(dupes)):\n            if dupes[i] not in dict:\n                dict[dupes[i]] = 0\n            dict[dupes[i]] += 1\n        total_cost = 0\n        for (key, value) in dict.items():\n            initial_cost = min(value * 1, cost)\n            total_cost += initial_cost\n        print(total_cost)\ndestroy_planets()", "from array import *\nt = int(input())\nans = 0\nnum = [0 for x in range(101)]\nfor i in range(t):\n    ans = 0\n    num = [0 for x in range(101)]\n    (n, c) = map(int, input().split())\n    a = input().split()\n    for k in range(len(a)):\n        num[int(a[k])] += 1\n    for k in range(101):\n        if num[k] > c:\n            ans += c\n        elif num[k] > 0:\n            ans += num[k]\n        else:\n            ans = ans + 0\n    print(ans)", "t = int(input())\nfor test in range(t):\n    inp = list(map(int, input().split()))\n    n = inp[0]\n    c = inp[1]\n    a = list(map(int, input().split()))\n    num_list = [0] * 101\n    for i in a:\n        num_list[i] += 1\n    score = 0\n    for i in num_list:\n        if i > c:\n            score += c\n        else:\n            score += i\n    print(score)", "n = int(input())\nfor _ in range(n):\n    (n_planets, x) = map(int, input().split(' '))\n    Data = list(map(int, input().split(' ')))\n    Data.sort()\n    cost1 = 1\n    cost = 0\n    orbit = Data[0]\n    for i in range(1, len(Data)):\n        if Data[i] == orbit:\n            cost1 += 1\n        else:\n            if cost1 < x:\n                cost += cost1\n            else:\n                cost += x\n            cost1 = 1\n            orbit = Data[i]\n    if cost1 < x:\n        cost += cost1\n    else:\n        cost += x\n    print(cost)", "def ans():\n    t = int(input())\n    for i in range(t):\n        (n, c) = input().split()\n        n = int(n)\n        c = int(c)\n        arrNums = list(map(int, input().split()))\n        s = {}\n        for i in arrNums:\n            if i in s:\n                s[i] += 1\n            else:\n                s[i] = 1\n        solution = 0\n        for (k, v) in s.items():\n            solution += min(c, v)\n        print(solution)\nans()", "t = int(input())\nfor i in range(t):\n    (n, c) = map(int, input().split())\n    A = [int(x) for x in input().split()]\n    B = {}\n    Sum = 0\n    for i in A:\n        if i in B:\n            B[i] += 1\n        else:\n            B[i] = 1\n    for i in B.values():\n        if i < c:\n            Sum += i\n        else:\n            Sum += c\n    print(Sum)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    lst = [int(i) for i in input().split()]\n    d = {}\n    for i in lst:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    c = 0\n    for i in d.keys():\n        c += min(d[i], k)\n    print(c)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, c) = map(int, input().split())\n    li = list(map(int, input().split()))\n    d = {}\n    for i in li:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    ans = 0\n    for (i, j) in d.items():\n        if j > c:\n            ans += c\n        else:\n            ans += j\n    print(ans)", "n = int(input())\nwhile n:\n    (a, b) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    count = 0\n    for value in d.values():\n        if value == 1:\n            count += 1\n        elif value >= b:\n            count += b\n        else:\n            count += value\n    print(count)\n    n -= 1", "t = int(input())\nfor i in range(t):\n    (n, c) = input().split()\n    c = int(c)\n    l = list()\n    l = input().split()\n    s = set(l)\n    cost = 0\n    for j in s:\n        cost = cost + min(l.count(j), c)\n    print(cost)", "for _ in range(int(input())):\n    (len1, c) = map(int, input().split())\n    list1 = list(map(int, input().rstrip().split()))\n    dict1 = {}\n    count = 0\n    for i in range(len1):\n        if list1[i] not in dict1:\n            dict1[list1[i]] = 1\n        else:\n            dict1[list1[i]] += 1\n    for i in dict1:\n        count += min(dict1[i], c)\n    print(count)", "t = int(input())\nfor ind in range(t):\n    (n0, c0) = input().split()\n    n = int(n0)\n    c = int(c0)\n    arr = list(map(int, input().strip().split()))[:n]\n    arr.sort()\n    cost = 1\n    count = 1\n    for i in range(1, n):\n        if arr[i] == arr[i - 1] and count < c:\n            cost += 1\n            count += 1\n        elif arr[i] == arr[i - 1] and count >= c:\n            continue\n        else:\n            count = 1\n            cost += 1\n    print(cost)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = [0] * 101\n    for i in range(n):\n        s[a[i]] += 1\n    ans = 0\n    for i in range(len(s)):\n        ans += min(s[i], c)\n    print(ans)", "def inp():\n    return int(input())\n\ndef strng():\n    return input().strip()\n\ndef jn(x, l):\n    return x.join(map(str, l))\n\ndef strl():\n    return list(input().strip())\n\ndef mul():\n    return map(int, input().strip().split())\n\ndef mulf():\n    return map(float, input().strip().split())\n\ndef seq():\n    return list(map(int, input().strip().split()))\n\ndef ceil(x):\n    return int(x) if x == int(x) else int(x) + 1\n\ndef ceildiv(x, d):\n    return x // d if x % d == 0 else x // d + 1\nfor i in range(inp()):\n    (a, b) = mul()\n    lst = seq()\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    cnt = 0\n    for j in d:\n        if d[j] < b:\n            cnt += d[j]\n        else:\n            cnt += b\n    print(cnt)", "t = int(input())\nfor i in range(t):\n    (planet, c) = [int(value) for value in input().split()]\n    orbit = [int(value) for value in input().split()]\n    D = {}\n    cost = 0\n    for i in orbit:\n        if i in D.keys():\n            D[i] += 1\n        else:\n            D[i] = 1\n    for (o, p) in D.items():\n        if c / p >= 1:\n            cost += p\n        else:\n            cost += c\n    print(cost)"]