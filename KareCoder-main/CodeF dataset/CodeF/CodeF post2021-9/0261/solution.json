["import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, m, sx, sy, d) = map(int, inp().split())\n    a = sx - 1 > d\n    b = n - sx > d\n    c = sy - 1 > d\n    d = m - sy > d\n    if a and d or (b and c):\n        print(n - 1 + m - 1)\n    else:\n        print(-1)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "(test, count) = (int(input()), 0)\nres = []\nwhile count < test:\n    (n, m, sx, sy, d) = [int(i) for i in input().split()]\n    count += 1\n    if 1 >= sx - d and n <= sx + d:\n        res.append('-1')\n        continue\n    elif 1 >= sy - d and m <= sy + d:\n        res.append('-1')\n        continue\n    elif sx + d >= n and sy + d >= m:\n        res.append('-1')\n        continue\n    elif sx - d <= 1 and sy - d <= 1:\n        res.append('-1')\n        continue\n    else:\n        res.append(str(m + n - 2))\nprint('\\n'.join(res))", "import sys\ninput = sys.stdin.readline\n\ndef int_num():\n    return int(input())\n\ndef int_list():\n    return list(map(int, input().split()))\n\ndef str_list():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef instr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef solve():\n    (n, m, x, y, d) = int_list()\n    a = x - d <= 1\n    b = y - d <= 1\n    c = x + d >= n\n    d = y + d >= m\n    if a and b or (c and d) or (b and d) or (a and c):\n        ans = -1\n    else:\n        ans = n + m - 2\n    print(ans)\n\ndef main():\n    t = int_num()\n    while t:\n        solve()\n        t -= 1\n    return\nmain()", "import sys\ninput = sys.stdin.readline\nt = int(input())\n\ndef solve(n, m, sx, sy, d):\n    l = sy - d <= 1\n    r = sy + d >= m\n    u = sx - d <= 1\n    d = sx + d >= n\n    if l == 0 and d == 0 or (u == 0 and r == 0):\n        return n + m - 2\n    else:\n        return -1\nfor _ in range(t):\n    (n, m, sx, sy, d) = [int(x) for x in input().split()]\n    print(solve(n, m, sx, sy, d))", "import sys\nfrom sys import stdin, stdout\nfrom math import ceil, floor, sqrt, log, log2, log10\nfrom collections import Counter\nint_max = float('inf')\nint_min = -float('inf')\nmod = 10 ** 9 + 7\nANS = []\ninput = stdin.readline\n\ndef solve():\n    pass\nt = int(input())\nfor i in range(t):\n    (n, m, sx, sy, d) = map(int, input().split())\n    if sx - 1 > d and m - sy > d or (sy - 1 > d and n - sx > d):\n        print(n - 1 + m - 1)\n    else:\n        print(-1)", "import sys\nimport math\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_ls():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef test_ok(ok):\n    print('YES' if ok else 'NO')\n\ndef main():\n    for _ in range(int(input())):\n        (n, m, sx, sy, d) = get_ints()\n        if min(sx - 1, m - sy) <= d and min(n - sx, sy - 1) <= d:\n            print(-1)\n        else:\n            print(n + m - 2)\nmain()", "for s in [*open(0)][1:]:\n    (n, m, x, y, d) = map(int, s.split())\n    print((-1, n + m - 2)[max(min(x - 1, m - y), min(y - 1, n - x)) > d])", "for s in [*open(0)][1:]:\n    (n, m, x, y, d) = map(int, s.split())\n    print((-1, n + m - 2)[max(min(x - 1, m - y), min(y - 1, n - x)) > d])", "import sys\nt = int(input())\nwhile t > 0:\n    (a, b, c, d, e) = map(int, sys.stdin.readline().split())\n    if c - e <= 1 and d - e <= 1:\n        print(-1)\n    elif c + e >= a and d + e >= b:\n        print(-1)\n    elif c + e >= a and c - e <= 1:\n        print(-1)\n    elif d + e >= b and d - e <= 1:\n        print(-1)\n    else:\n        print(a + b - 2)\n    t -= 1", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nfor _ in range(inp()):\n    (n, m, x, y, d) = invr()\n    Y = False\n    X = False\n    if y - d > 1 and x + d < n or (y + d < m and x - d > 1):\n        print(n - 1 + (m - 1))\n    else:\n        print(-1)", "import sys\ninp = sys.stdin.readline\nout = sys.stdout.write\nfor _ in range(int(inp())):\n    (x, y, x1, y1, r) = map(int, inp().split())\n    right = x - x1 > r\n    top = y1 - 1 > r\n    left = x1 - 1 > r\n    bottom = y - y1 > r\n    if right and top or (left and bottom):\n        out(f'{x + y - 2}\\n')\n    else:\n        out('-1\\n')", "for s in [*open(0)][1:]:\n    (n, m, x, y, d) = map(int, s.split())\n    print((-1, n + m - 2)[max(min(x - 1, m - y), min(y - 1, n - x)) > d])", "import sys\nreadline = sys.stdin.readline\nN = int(readline())\nfor _ in range(N):\n    (H, W, X, Y, D) = map(int, readline().split())\n    if X + D >= H and Y + D >= W:\n        print(-1)\n    elif X - D <= 1 and Y - D <= 1:\n        print(-1)\n    elif X - D <= 1 and X + D >= H:\n        print(-1)\n    elif Y - D <= 1 and Y + D >= W:\n        print(-1)\n    else:\n        print(H + W - 2)", "for s in [*open(0)][1:]:\n    (n, m, x, y, d) = map(int, s.split())\n    print((-1, n + m - 2)[max(min(x - 1, m - y), min(y - 1, n - x)) > d])", "for s in [*open(0)][1:]:\n    (n, m, x, y, d) = map(int, s.split())\n    print((-1, n + m - 2)[max(min(x - 1, m - y), min(y - 1, n - x)) > d])", "for s in [*open(0)][1:]:\n    (n, m, x, y, d) = map(int, s.split())\n    print((-1, n + m - 2)[max(min(x - 1, m - y), min(y - 1, n - x)) > d])", "for s in [*open(0)][1:]:\n    (n, m, x, y, d) = map(int, s.split())\n    print((-1, n + m - 2)[max(min(x - 1, m - y), min(y - 1, n - x)) > d])", "t = int(input())\ng = []\nfor x in range(t):\n    h = input()\n    h = [int(a) for a in h.split()]\n    n = h[0]\n    m = h[1]\n    sx = h[2]\n    sy = h[3]\n    d = h[4]\n    if sx + d >= n and sx - d <= 1 or (sy + d >= m and sy - d <= 1) or (sx + d >= n and sy + d >= m) or (sx - d <= 1 and sy - d <= 1):\n        g.append(-1)\n    else:\n        g.append(n + m - 2)\nfor i in g:\n    print(i)", "res = []\nfor _ in range(int(input())):\n    (n, m, sx, sy, d) = map(int, input().split())\n    r = n - 1 + (m - 1)\n    if n - sx <= d and sx - 1 <= d:\n        r = -1\n    if m - sy <= d and sy - 1 <= d:\n        r = -1\n    if n - sx <= d and m - sy <= d:\n        r = -1\n    if sx - 1 <= d and sy - 1 <= d:\n        r = -1\n    res.append(r)\nprint(*res, sep='\\n')", "import sys\ninput = sys.stdin.readline\nimport math\nimport copy\nimport heapq\nimport itertools\nn = int(input())\nfor i in range(n):\n    arr = list(map(int, input().split()))\n    top = True\n    bottom = True\n    left = True\n    right = True\n    if arr[2] + arr[4] >= arr[0]:\n        bottom = False\n    if arr[2] - arr[4] <= 1:\n        top = False\n    if arr[3] + arr[4] >= arr[1]:\n        right = False\n    if arr[3] - arr[4] <= 1:\n        left = False\n    if not right and (not bottom) or (not top and (not left)) or (not right and (not left)) or (not top and (not bottom)):\n        print(-1)\n    else:\n        print(arr[0] + arr[1] - 2)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m, sx, sy, d) = map(int, input().split())\n    if sx - d > 1 and sy + d < m:\n        return n - 1 + (m - 1)\n    if sx + d < n and sy - d > 1:\n        return n - 1 + (m - 1)\n    return -1\nfor _ in range(int(input())):\n    print(solve())", "for s in [*open(0)][1:]:\n    (n, m, x, y, d) = map(int, s.split())\n    print((-1, n + m - 2)[max(min(x - 1, m - y), min(y - 1, n - x)) > d])", "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nt = int(input())\nfor i in range(t):\n    (n, m, x, y, d) = map(int, input().split())\n    v = 1\n    if x + d >= n and x - d <= 1:\n        v = 0\n    if x + d >= n and y + d >= m:\n        v = 0\n    if y + d >= m and y - d <= 1:\n        v = 0\n    if x - d <= 1 and y - d <= 1:\n        v = 0\n    if abs(n - x) + abs(m - y) <= d:\n        v = 0\n    if abs(1 - x) + abs(1 - y) <= d:\n        v = 0\n    if v:\n        print(n + m - 2)\n    else:\n        print(-1)", "import sys\ninput = sys.stdin.readline\n\ndef print(*args, end='\\n', sep=' ') -> None:\n    sys.stdout.write(sep.join(map(str, args)) + end)\n\ndef Solve():\n    for t in range(int(input())):\n        (n, m, x, y, d) = map(int, input().split())\n        if x - d <= 1 and y - d <= 1 or (x + d >= n and y + d >= m) or (x - d <= 1 and x + d >= n) or (y - d <= 1 and y + d >= m):\n            print(-1)\n        else:\n            print(n + m - 2)\nSolve()", "def fun(n, m, sx, sy, d):\n    con1 = abs(sx - n) <= d\n    con2 = abs(sy - m) <= d\n    con3 = abs(sx - 1) <= d\n    con4 = abs(sy - 1) <= d\n    count = 0\n    if con1:\n        count += 1\n    if con2:\n        count += 1\n    if con3:\n        count += 1\n    if con4:\n        count += 1\n    if sx == n and sy == m:\n        return -1\n    elif sx == 1 and sy == 1:\n        return -1\n    elif sx == n:\n        if con3 or con2:\n            return -1\n    elif sy == m:\n        if con1 or con4:\n            return -1\n    elif sx == 1:\n        if con1 or con4:\n            return -1\n    elif sy == 1:\n        if con3 or con2:\n            return -1\n    elif count == 2 and con3 and con2:\n        return n + m - 2\n    elif count == 2 and con4 and con1:\n        return n + m - 2\n    elif count >= 2:\n        return -1\n    else:\n        return n + m - 2\n    return n + m - 2\nans = []\nt = int(input())\nfor i in range(t):\n    l = input()\n    li = l.split()\n    ans.append(fun(int(li[0]), int(li[1]), int(li[2]), int(li[3]), int(li[4])))\nfor i in ans:\n    print(i)", "import sys\nimport queue\n\nclass Maze:\n\n    def __init__(self, q):\n        self.n = int(q[0])\n        self.m = int(q[1])\n        self.s_x = int(q[2])\n        self.s_y = int(q[3])\n        self.d = int(q[4])\n        self.laser_blocks_up = False\n        self.laser_blocks_down = False\n        self.laser_blocks_left = False\n        self.laser_blocks_right = False\n        if self.s_x - self.d <= 1:\n            self.laser_blocks_left = True\n        if self.s_x + self.d >= self.n:\n            self.laser_blocks_right = True\n        if self.s_y - self.d <= 1:\n            self.laser_blocks_up = True\n        if self.s_y + self.d >= self.m:\n            self.laser_blocks_down = True\n\n    def x_y_to_idx(self, x, y):\n        return x - 1 + (y - 1) * self.n\n\n    def get_num_of_moves_to_exit(self):\n        if self.laser_blocks_right and self.laser_blocks_left:\n            return -1\n        if self.laser_blocks_up and self.laser_blocks_down:\n            return -1\n        if self.laser_blocks_down and self.laser_blocks_right:\n            return -1\n        if self.laser_blocks_up and self.laser_blocks_left:\n            return -1\n        return self.m - 1 + (self.n - 1)\nn = int(sys.stdin.readline().strip())\nfor i in range(n):\n    q = sys.stdin.readline().strip().split()\n    maze = Maze(q)\n    print(maze.get_num_of_moves_to_exit())", "import sys\nn = int(sys.stdin.readline())\nfor _ in range(n):\n    [n, m, sx, sy, d] = list(map(int, sys.stdin.readline().strip().split()))\n    u = sx - d <= 1\n    b = sx + d >= n\n    l = sy - d <= 1\n    r = sy + d >= m\n    if (l or b) and (r or u):\n        print(-1)\n    else:\n        print(m + n - 2)", "def ans(n, m, x, y, d):\n    c = min(abs(x - 1), abs(y - m))\n    c2 = min(abs(y - 1), abs(x - n))\n    if c <= d and c2 <= d:\n        return -1\n    else:\n        return n + m - 2\nn = int(input())\nsol = []\nfor i in range(n):\n    (n, m, x, y, d) = map(int, input().split())\n    sol.append(ans(n, m, x, y, d))\nfor i in sol:\n    print(i)", "t = int(input())\nfinal_list = []\nfor i in range(t):\n    (n, m, sx, sy, d) = map(int, input().split())\n    if sx + d < n and sy - d > 1:\n        final_list += [n - 1 + (m - 1)]\n    elif sx - d > 1 and sy + d < m:\n        final_list += [n - 1 + (m - 1)]\n    else:\n        final_list += [-1]\nfor i in final_list:\n    print(i)", "p = int(input())\na = [0] * p\nfor i in range(p):\n    (n, m, sx, sy, d) = map(int, input().split())\n    r = -1\n    if sy + d < m and sx - d > 1 or (sx + d < n and sy - d > 1):\n        r = m + n - 2\n    if abs(sx - n) + abs(sy - m) <= d:\n        r = -1\n    a[i] = r\nfor i in range(p):\n    print(a[i])", "a = int(input())\nlist_of_outputs = []\nfor i in range(a):\n    steps = -1\n    arr = [int(x) for x in input().split()]\n    n = arr[0]\n    m = arr[1]\n    sr = arr[2]\n    sc = arr[3]\n    d = arr[4]\n    if sr - d > 1 and sc + d < m or (sc - d > 1 and sr + d < n):\n        steps = n + m - 2\n    list_of_outputs.append(steps)\nfor otveti in list_of_outputs:\n    print(otveti)", "nums = int(input())\nresults = []\n\ndef calc(n, m, s_x, s_y, d):\n    left = s_x - d > 1\n    top = s_y + d < m\n    right = s_x + d < n\n    bottom = s_y - d > 1\n    if left and top or (right and bottom):\n        return n + m - 2\n    return -1\nfor row in range(nums):\n    [n, m, s_x, s_y, d] = [int(n) for n in input().split()]\n    result = calc(n, m, s_x, s_y, d)\n    results.append(result)\nfor result in results:\n    print(result)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    a = list(map(int, input().split()))\n    (n, m) = (a[0], a[1])\n    (x, y) = (a[2], a[3])\n    d = a[4]\n    count = []\n    if d + x >= n:\n        count.append('d')\n    if d + y >= m:\n        count.append('r')\n    if x - d <= 1:\n        count.append('u')\n    if y - d <= 1:\n        count.append('l')\n    check = False\n    if len(count) == 2:\n        check = True\n        if 'r' in count and 'u' in count:\n            check = False\n        elif 'd' in count and 'l' in count:\n            check = False\n    if abs(n - x) + abs(m - y) <= d or abs(1 - x) + abs(1 - y) <= d or len(count) > 2 or check:\n        print('-1')\n        continue\n    else:\n        print(abs(n - 1) + abs(m - 1))", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef solve():\n    (n, m, x, y, d) = inlt()\n    min_x = max(1, x - d)\n    max_x = min(n, x + d)\n    min_y = max(1, y - d)\n    max_y = min(m, y + d)\n    if min_x == 1 and max_x == n:\n        return -1\n    if min_y == 1 and max_y == m:\n        return -1\n    if min_x == 1 and min_y == 1:\n        return -1\n    if max_x == n and max_y == m:\n        return -1\n    return m + n - 2\nfor _ in range(inp()):\n    print(solve())", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\ntestCasesNum = inp()\nfor _ in range(testCasesNum):\n    arr = list(map(int, input().split()))\n    (m, n) = (arr[0], arr[1])\n    (a, b) = (arr[2] - 1, arr[3] - 1)\n    l = m + n - 2\n    x = [a, m - 1]\n    y = [0, b]\n    flag = 1\n    for (i, j) in zip(x, y):\n        if abs(i - arr[2] + 1) + abs(j - arr[3] + 1) <= arr[4]:\n            flag = 0\n    if flag:\n        print(l)\n        continue\n    else:\n        flag = 1\n    x = [0, a]\n    y = [b, n - 1]\n    for (i, j) in zip(x, y):\n        if abs(i - arr[2] + 1) + abs(j - arr[3] + 1) <= arr[4]:\n            flag = 0\n    if flag:\n        print(l)\n    else:\n        print(-1)", "from tabnanny import check\nt = int(input())\nresult = []\n\ndef dist(a, b):\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])\nfor i in range(t):\n    (n, m, x, y, d) = list(map(int, input().split()))\n    if (dist((x, 1), (x, y)) <= d or dist((n, y), (x, y)) <= d) and (dist((x, m), (x, y)) <= d or dist((1, y), (x, y)) <= d):\n        result.append(-1)\n        continue\n    result.append(m - 1 + n - 1)\nlist(map(print, result))", "import sys\nfrom collections import *\nimport bisect\nimport math\nfrom functools import lru_cache\nfor _ in range(int(input())):\n    (n, m, x, y, d) = map(int, sys.stdin.readline().split())\n    if (x, y) == (1, 1) or (x, y) == (n, m):\n        print(-1)\n    else:\n        flag1 = True\n        x1 = 1\n        y1 = y\n        x2 = x\n        y2 = m\n        if abs(x - x1) + abs(y - y1) <= d or abs(x - x2) + abs(y - y2) <= d:\n            flag1 = False\n        flag2 = True\n        x1 = x\n        y1 = 1\n        x2 = n\n        y2 = y\n        if abs(x - x1) + abs(y - y1) <= d or abs(x - x2) + abs(y - y2) <= d:\n            flag2 = False\n        if flag1 or flag2:\n            print(n + m - 2)\n        else:\n            print(-1)", "t = int(input())\nl = []\nfor i in range(0, t):\n    p = [int(x) for x in input().split()]\n    l.append(p)\nfor j in range(0, t):\n    n = l[j][0]\n    m = l[j][1]\n    sx = l[j][2]\n    sy = l[j][3]\n    d = l[j][4]\n    if n - sy + (m - sx) <= d:\n        print(-1)\n    elif sy - 1 <= d and m - sy <= d:\n        print(-1)\n    elif sx - 1 <= d and n - sx <= d:\n        print(-1)\n    elif sy - 1 <= d and sx - 1 <= d:\n        print(-1)\n    elif m - sy <= d and n - sx <= d:\n        print(-1)\n    else:\n        print(n - 1 + (m - 1))", "n1 = int(input())\nl = []\nfor i in range(0, n1):\n    s = [int(x) for x in input().split()]\n    l.append(s)\nfor j in range(0, n1):\n    n = l[j][0]\n    m = l[j][1]\n    sx = l[j][2]\n    sy = l[j][3]\n    d = l[j][4]\n    if abs(sx - n) + abs(sy - m) <= d:\n        print(-1)\n    elif abs(sy - m) <= d and abs(sy - 1) <= d:\n        print(-1)\n    elif abs(sx - 1) <= d and abs(sx - n) <= d:\n        print(-1)\n    elif abs(sy - 1) <= d and abs(sx - 1) <= d:\n        print(-1)\n    elif abs(sy - m) <= d and abs(sx - n) <= d:\n        print(-1)\n    else:\n        print(abs(n - 1) + abs(m - 1))", "import sys\nls = []\nfor l in sys.stdin:\n    lst = l.rstrip('\\n')\n    if len(lst) > 0:\n        ls.append(lst)\nfor l in ls:\n    sys.stderr.write(l + '\\n')\nsys.stderr.write('-- output --\\n')\n\ndef ins(u, mn, mx):\n    return u[0] >= mn[0] and u[1] >= mn[1] and (u[0] <= mx[0]) and (u[1] <= mx[1])\n\ndef clmp(x, n):\n    if x < 0:\n        return 0\n    if x >= n:\n        return n - 1\n    return x\n\ndef clp(u, n, m):\n    return (clmp(u[0], n), clmp(u[1], m))\n\ndef d(a, b):\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\ndef solve(n, m, sx, sy, d):\n    if d == 0:\n        return n + m - 2\n    smin = clp((sx - d, sy - d), n, m)\n    smax = clp((sx + d, sy + d), n, m)\n    if abs(smax[0] - smin[0]) >= n - 1 or abs(smax[1] - smin[1]) >= m - 1:\n        return -1\n    if ins((0, 0), smin, smax) or ins((n - 1, m - 1), smin, smax):\n        return -1\n    return n + m - 2\nfor l in ls[1:]:\n    (n, m, sx, sy, d) = [int(x) for x in l.split(' ')]\n    print(solve(n, m, sx - 1, sy - 1, d))", "for _ in range(int(input())):\n    (n, m, x, y, d) = map(int, input().split())\n    ans = n + m - 2\n    if x + d >= n and x - d <= 1 or (y + d >= m and y - d <= 1) or (x + d >= n and y + d >= m) or (x - d <= 1 and y - d <= 1):\n        print(-1)\n    else:\n        print(ans)", "for i in range(int(input())):\n    (n, m, sx, sy, d) = map(int, input().split())\n    if abs(sx - 1) > d and abs(sy - m) > d or (abs(sy - 1) > d and abs(sx - n) > d):\n        print(abs(n - 1) + abs(m - 1))\n    else:\n        print(-1)", "def solution(n, m, x, y, d):\n    v1 = x + d >= n or y - d <= 1\n    v2 = x - d <= 1 or y + d >= m\n    if v1 and v2:\n        return -1\n    else:\n        return m + n - 2\nt = int(input())\nfor i in range(t):\n    [n, m, x, y, d] = [int(x) for x in input().split()]\n    print(solution(n, m, x, y, d))", "def check1(n, m, sx, sy, d):\n    if sx - d <= 1:\n        return True\n    if sy + d >= m:\n        return True\n\ndef check2(n, m, sx, sy, d):\n    if sx + d >= n:\n        return True\n    if sy - d <= 1:\n        return True\n\ndef work():\n    (n, m, sx, sy, d) = [int(i) for i in input().split()]\n    if check1(n, m, sx, sy, d) and check2(n, m, sx, sy, d):\n        print(-1)\n    else:\n        print(n + m - 2)\nTC = int(input())\nfor i in range(TC):\n    work()", "standard_input = '3\\n2 3 1 3 0\\n2 3 1 3 1\\n5 5 3 4 1\\n'\n\ndef solve(r, c, sx, sy, d):\n    poss = False\n    if r - sy > d and sx - 1 > d:\n        poss = True\n    if c - sx > d and sy - 1 > d:\n        poss = True\n    return r + c - 2 if poss else -1\nfor _ in range(int(input())):\n    (r, c, sx, sy, d) = map(int, input().split())\n    print(solve(c, r, sx, sy, d))", "def too_wide(n, m, sx, sy, d):\n    return sy - d <= 1 and sy + d >= m\n\ndef too_height(n, m, sx, sy, d):\n    return sx - d <= 1 and sx + d >= n\n\ndef left_corner(n, m, sx, sy, d):\n    return sx - d <= 1 and sy - d <= 1\n\ndef right_corner(n, m, sx, sy, d):\n    return sx + d >= n and sy + d >= m\n\ndef solve():\n    (n, m, sx, sy, d) = map(int, input().split(' '))\n    possible = not too_wide(n, m, sx, sy, d) and (not too_height(n, m, sx, sy, d)) and (not left_corner(n, m, sx, sy, d)) and (not right_corner(n, m, sx, sy, d))\n    return n - 1 + (m - 1) if possible else -1\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        res = solve()\n        print(res)\nmain()", "for _ in range(int(input())):\n    (n, m, lx, ly, d) = map(int, input().split())\n    if ly - d > 1 and lx + d < n or (lx - d > 1 and ly + d < m):\n        print(n + m - 2)\n    else:\n        print(-1)", "t = int(input())\nfor i in range(t):\n    (n, m, x, y, d) = map(int, input().split())\n    if x - d <= 1 and y - d <= 1:\n        print(-1)\n        continue\n    if x + d >= n and y + d >= m:\n        print(-1)\n        continue\n    if x - d <= 1 and x + d >= n:\n        print(-1)\n        continue\n    if y - d <= 1 and y + d >= m:\n        print(-1)\n        continue\n    print(n + m - 2)", "t = int(input())\nfor i in range(t):\n    (n, m, x, y, d) = map(int, input().split())\n    if (x - d <= 1 or y + d >= m) and (y - d <= 1 or x + d >= n):\n        print(-1)\n    else:\n        print(n - 1 + m - 1)", "t = int(input())\nfor _ in range(t):\n    (n, m, sx, sy, d) = map(int, input().split())\n    if not (sy - d <= 1 or sx + d >= n) or not (sy + d >= m or sx - d <= 1):\n        print(n + m - 2)\n    else:\n        print(-1)", "t = eval(input())\nfor k in range(t):\n    (n, m, sx, sy, d) = list(map(int, input().split()))\n    if sx - 1 > d and m - sy > d or (sy - 1 > d and n - sx > d):\n        print(n + m - 2)\n    else:\n        print(-1)", "def fun():\n    (n, m, a, b, d) = map(int, input().split())\n    a = a - 1\n    b = b - 1\n    x1 = n - a - 1\n    y1 = m - b - 1\n    if a <= d and x1 <= d:\n        print(-1)\n        return\n    if b <= d and y1 <= d:\n        print(-1)\n        return\n    if a <= d and b <= d:\n        print(-1)\n        return\n    if x1 <= d and y1 <= d:\n        print(-1)\n        return\n    print(n + m - 2)\nt = int(input())\nwhile t:\n    fun()\n    t -= 1", "from calendar import month_name\n\ndef distance(x1: int, y1: int, x2: int, y2: int) -> int:\n    return abs(x1 - x2) + abs(y1 - y2)\n\ndef solve(m: int, n: int, s1: int, s2: int, d: int) -> int:\n    if (s1 - d > 1 and s2 + d < n or (s1 + d < m and s2 - d > 1)) and distance(m, n, s1, s2) > d:\n        return m + n - 2\n    else:\n        return -1\nt = int(input())\nans = []\nfor _ in range(t):\n    (m, n, s1, s2, d) = [int(x) for x in input().split()]\n    ans.append(solve(m, n, s1, s2, d))\nfor a in ans:\n    print(a)", "def fun(n, m, sx, sy, d):\n    if m - sy > d and sx - 1 > d or (n - sx > d and sy - 1 > d):\n        print(n + m - 2)\n    else:\n        print(-1)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, m, sx, sy, d) = map(int, input().split())\n        fun(n, m, sx, sy, d)\nmain()", "def solve():\n    (n, m, x, y, d) = map(int, input().split())\n    if (y - d <= 1 or x + d >= n) and (y + d >= m or x - d <= 1):\n        print(-1)\n    else:\n        print(n + m - 2)\nt = int(input())\nfor i in range(t):\n    solve()", "testCases = int(input())\nfor i in range(testCases):\n    line = input()\n    (n, m, sx, sy, d) = map(int, line.split(' '))\n    if (sx - d <= 1 or sy + d >= m) and (sx + d >= n or sy - d <= 1):\n        print(-1)\n        continue\n    print(n + m - 2)", "for _ in range(int(input())):\n    (n, m, x, y, d) = map(int, input().split())\n    if n - x <= d and (m - y <= d or x - 1 <= d) or ((m - y <= d or x - 1 <= d) and y - 1 <= d):\n        print(-1)\n    else:\n        print(n + m - 2)", "t = int(input())\nfor i in range(0, t):\n    (n, m, sx, sy, d) = map(int, input().split())\n    if (sx - 1 <= d or sy + d >= m) and (sy - 1 <= d or sx + d >= n):\n        print(-1)\n    else:\n        print(n + m - 2)", "t = int(input())\nfor i in range(0, t):\n    (n, m, sx, sy, d) = map(int, input().split())\n    if (sx - d <= 1 or sy + d >= m) and (sy - d <= 1 or sx + d >= n):\n        print(-1)\n    else:\n        print(n + m - 2)", "t = int(input())\nfor i in range(t):\n    lis = input().split()\n    (n, m, sx, sy, d) = (int(lis[0]), int(lis[1]), int(lis[2]), int(lis[3]), int(lis[4]))\n    if sx + d >= n and sx - d <= 1:\n        res = -1\n    elif sy + d >= m and sy - d <= 1:\n        res = -1\n    elif sx + d >= n and sy + d >= m:\n        res = -1\n    elif sx - d <= 1 and sy - d <= 1:\n        res = -1\n    else:\n        res = m + n - 2\n    print(res)", "for _ in range(int(input())):\n    (n, m, sx, sy, d) = map(int, input().split())\n    if sx + d < n and sy - d > 1:\n        print(n + m - 2)\n    elif sx - d > 1 and sy + d < m:\n        print(n + m - 2)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, m, sx, sy, d) = map(int, input().split())\n    if n > sx + d and sy - d > 1 or (m > sy + d and sx - d > 1):\n        print(n + m - 2)\n    else:\n        print(-1)", "for i in range(int(input())):\n    (n, m, sx, sy, d) = map(int, input().split())\n    if d == m - 1 or d == n - 1:\n        print(-1)\n    elif n - sx <= d and sx - 1 <= d:\n        print(-1)\n    elif m - sy <= d and n - sx <= d:\n        print(-1)\n    elif sy - 1 <= d and sx - 1 <= d:\n        print(-1)\n    elif sy - 1 <= d and m - sy <= d:\n        print(-1)\n    elif sx == n and m - sy <= d:\n        print(-1)\n    elif sy == m and n - sx <= d:\n        print(-1)\n    else:\n        print(n + m - 2)\n        continue", "t = int(input())\nfor _ in range(t):\n    (row, col, sx, sy, d) = map(int, input().split())\n    res = -1\n    if (sx - 1 <= d or col - sy <= d) and (row - sx <= d or sy - 1 <= d):\n        pass\n    else:\n        res = row + col - 2\n    print(res)", "def main():\n    for t in range(int(input())):\n        (n, m, sx, sy, d) = map(int, input().split())\n        if (sx + d >= n or sy - d <= 1) and (sy + d >= m or sx - d <= 1):\n            print(-1)\n        else:\n            print(n + m - 2)\nmain()", "for _ in range(int(input())):\n    (n, m, sx, sy, d) = map(int, input().split(' '))\n    if sx - d > 1 and sy + d < m:\n        print(n + m - 2)\n    elif sx + d < n and sy - d > 1:\n        print(n + m - 2)\n    else:\n        print('-1')", "for pythonic__Python in range(int(input())):\n    (n, m, s1, s2, d) = map(int, input().split())\n    if s1 + d >= n and s2 + d >= m or (s1 - d <= 1 and s2 - d <= 1) or (s1 + d >= n and s1 - d <= 1) or (s2 + d >= m and s2 - d <= 1):\n        print(-1)\n    else:\n        print(n + m - 2)", "for _ in range(int(input())):\n    (m, n, a, b, d) = map(int, input().split())\n    if d < b - 1 and d < m - a or (d < a - 1 and d < n - b):\n        print(m + n - 2)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, m, s, e, d) = map(int, input().split())\n    if s - d > 1 and e + d < m or (e - d > 1 and s + d < n):\n        print(n + m - 2)\n    else:\n        print(-1)", "for i in range(int(input())):\n    (m, n, sx, sy, d) = map(int, input().split())\n    if d < sy - 1 and d < m - sx or (d < sx - 1 and d < n - sy):\n        print(m + n - 2)\n    else:\n        print(-1)", "for i in range(int(input())):\n    (m, n, sx, sy, d) = map(int, input().split())\n    if d < sy - 1 and d < m - sx or (d < sx - 1 and d < n - sy):\n        print(m + n - 2)\n    else:\n        print(-1)", "def solve():\n    (n, m, s, t, d) = map(int, input().split())\n    ans = -1\n    if min(s - 1, m - t) <= d and min(n - s, t - 1) <= d:\n        ans = -1\n    else:\n        ans = m + n - 2\n    print(ans)\nmulti = True\ntt = 1\nif multi:\n    tt = int(input())\nfor i in range(tt):\n    solve()", "for _ in range(int(input())):\n    (n, m, sx, sy, d) = map(int, input().split())\n    if sx + d >= n and sy + d >= m:\n        print(-1)\n        continue\n    if sx - d <= 1 and sy - d <= 1:\n        print(-1)\n        continue\n    if d + sx >= n and sx - d <= 1:\n        print(-1)\n        continue\n    if d + sy >= m and sy - d <= 1:\n        print(-1)\n        continue\n    print(n + m - 2)", "for _ in range(int(input())):\n    (n, m, sx, sy, d) = map(int, input().split())\n    if min(sx - 1, m - sy) <= d and min(n - sx, sy - 1) <= d:\n        print(-1)\n    else:\n        print(n + m - 2)", "for _ in range(int(input())):\n    (n, m, sx, sy, d) = map(int, input().split())\n    answer = n + m - 2\n    if sx - d > 1 and sy + d < m or (sy - d > 1 and sx + d < n):\n        print(answer)\n    else:\n        print(-1)", "t = int(input())\nwhile t:\n    (n, m, sx, sy, d) = map(int, input().split())\n    ans = -1\n    if sx + d < n and sy - d > 1 or (sx - d > 1 and sy + d < m):\n        ans = n + m - 2\n    print(ans)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    (n, m, sx, sy, d) = map(int, input().split(' '))\n    if sx - d <= 1 and sy - d <= 1 or (sx + d >= n and sy + d >= m) or (sx - d <= 1 and sx + d >= n) or (sy - d <= 1 and sy + d >= m):\n        print(-1)\n    else:\n        print(n + m - 2)", "n = int(input())\ninputData = []\nfor i in range(n):\n    (Nx, Ny, Sx, Sy, Dd) = map(int, input().split())\n    if Sy + Dd >= Ny and Sx + Dd >= Nx or (Sy - Dd <= 1 and Sx - Dd <= 1) or (Sy + Dd >= Ny and Sy - Dd <= 1) or (Sx + Dd >= Nx and Sx - Dd <= 1):\n        print('-1')\n    else:\n        print(abs(1 - Nx) + abs(1 - Ny))", "for _ in range(int(input())):\n    (n, m, si, sj, d) = map(int, input().split())\n    met_walls = 0\n    if si - d <= 1 or sj + d >= m:\n        met_walls += 1\n    if si + d >= n or sj - d <= 1:\n        met_walls += 1\n    if met_walls < 2:\n        print(m + n - 2)\n    else:\n        print(-1)", "for i in range(int(input())):\n    (n, m, sx, sy, d) = map(int, input().split())\n    if d >= sx - 1 and d >= n - sx or (d >= sy - 1 and d >= m - sy) or (d >= sx - 1 and d >= sy - 1) or (d >= n - sx and d >= m - sy):\n        print('-1')\n    else:\n        print(str(n + m - 2))", "for _ in range(int(input())):\n    (n, m, sx, sy, d) = map(int, input().split())\n    if min(sx - 1, m - sy) <= d and min(n - sx, sy - 1) <= d:\n        print(-1)\n    else:\n        print(n + m - 2)", "t = int(input())\nfor i in range(t):\n    (n, m, sx, sy, d) = map(int, input().split())\n    if min(sx - 1, m - sy) <= d and min(n - sx, sy - 1) <= d:\n        print(-1)\n    else:\n        print(n + m - 2)", "for _ in range(int(input())):\n    (n, m, sx, sy, d) = map(int, input().split())\n    if min(sx - 1, m - sy) <= d and min(n - sx, sy - 1) <= d:\n        print(-1)\n    else:\n        print(n + m - 2)", "for _ in range(int(input())):\n    (n, m, sx, sy, d) = map(int, input().split())\n    if min(sx - 1, m - sy) <= d and min(n - sx, sy - 1) <= d:\n        print(-1)\n    else:\n        print(n + m - 2)", "for _ in range(int(input())):\n    (n, m, sx, sy, d) = map(int, input().split())\n    if min(sx - 1, m - sy) <= d and min(n - sx, sy - 1) <= d:\n        print(-1)\n    else:\n        print(n + m - 2)", "test = int(input())\nfor t in range(test):\n    variables = list(map(int, input().split()))\n    length = variables[0]\n    width = variables[1]\n    lasor_X = variables[2]\n    lasor_Y = variables[3]\n    distance = variables[4]\n    if lasor_X + distance < length and lasor_Y - distance > 1 or (lasor_X - distance > 1 and lasor_Y + distance < width):\n        print(length + width - 2)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, m, sx, sy, d) = map(int, input().split())\n    if sx - 1 > d and m - sy > d or (sy - 1 > d and n - sx > d):\n        print(m + n - 2)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, m, x, y, d) = map(int, input().split())\n    if (x + d >= n or y - d <= 1) and (y + d >= m or x - d <= 1):\n        print(-1)\n    else:\n        print(n + m - 2)", "def solve():\n    (n, m, x, y, d) = map(int, input().split())\n    if (y - d <= 1 or x + d >= n) and (y + d >= m or x - d <= 1):\n        print(-1)\n    else:\n        print(n + m - 2)\nt = int(input())\nfor i in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, m, sx, sy, d) = map(int, input().split())\n    if min(sx - 1, m - sy) <= d and min(n - sx, sy - 1) <= d:\n        print(-1)\n    else:\n        print(n + m - 2)", "testCase = int(input())\nfor index in range(testCase):\n    (n, m, s_x, s_y, d) = map(int, input().split())\n    if (min(s_y - 1, n - s_x) <= d) & (min(m - s_y, s_x - 1) <= d):\n        print(int(-1))\n    else:\n        print(n + m - 2)", "sets = int(input())\nfor i in range(sets):\n    a = list(map(int, input().split()))\n    (n, m, sx, sy, d) = (a[0], a[1], a[2], a[3], a[4])\n    if sx - d > 1 and sy + d < m or (sy - d > 1 and sx + d < n):\n        print(n + m - 2)\n    else:\n        print(-1)", "def solve(n, m, x, y, d):\n    touch_right_border = x + d >= n\n    touch_bottom_border = y + d >= m\n    touch_left_border = x - d <= 1\n    touch_top_border = y - d <= 1\n    if touch_right_border and touch_bottom_border or (touch_right_border and touch_left_border) or (touch_top_border and touch_bottom_border) or (touch_top_border and touch_left_border):\n        return -1\n    return n + m - 2\nt = int(input())\nfor _ in range(t):\n    (n, m, x, y, d) = [int(e) for e in input().split()]\n    print(solve(n, m, x, y, d))", "t = int(input())\nfor i in range(t):\n    (n, m, Sx, Sy, d) = map(int, input().split())\n    if Sx - d <= 1 and Sx + d >= n or (Sy - d <= 1 and Sy + d >= m) or (Sx - d <= 1 and Sy - d <= 1) or (Sx + d >= n and Sy + d >= m):\n        print('-1')\n    else:\n        k = n + m - 2\n        print(k)", "t = int(input())\nfor i in range(t):\n    (n, m, sx, sy, d) = map(int, input().split())\n    if sx - d <= 1 and sy - d <= 1:\n        print(-1)\n    elif sx + d >= n and sy + d >= m:\n        print(-1)\n    elif sx + d >= n and sx - d <= 1:\n        print(-1)\n    elif sy + d >= m and sy - d <= 1:\n        print(-1)\n    else:\n        print(n + m - 2)", "for _ in range(int(input())):\n    (n, m, x, y, d) = map(int, input().split())\n    if n - x + (m - y) > d:\n        if n - x > d and y - 1 > d or (x - 1 > d and m - y > d):\n            print(n + m - 2)\n        else:\n            print(-1)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, m, sx, sy, d) = map(int, input().split())\n    if sx - 1 > d and m - sy > d:\n        print(n + m - 2)\n    elif sy - 1 > d and n - sx > d:\n        print(n + m - 2)\n    else:\n        print(-1)"]