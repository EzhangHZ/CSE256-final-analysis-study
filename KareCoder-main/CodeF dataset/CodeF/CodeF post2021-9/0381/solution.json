["def tests(t):\n    for i in range(t):\n        n = input()\n        a = input()\n        b = [int(i) for i in a.split()]\n        b.sort()\n        n_actual = b[0]\n        cant_matro = 1\n        cant_actual = 1\n        cant_ant = 0\n        for i in range(1, len(b)):\n            if b[i] == n_actual:\n                cant_actual = cant_actual + 1\n                if cant_ant > 0:\n                    cant_ant = cant_ant - 1\n                else:\n                    cant_matro = cant_matro + 1\n            elif b[i] == n_actual + 1:\n                n_actual = b[i]\n                cant_ant = cant_actual - 1\n                cant_actual = 1\n            else:\n                n_actual = b[i]\n                cant_matro = cant_matro + 1\n                cant_actual = 1\n                cant_ant = 0\n        print(cant_matro)\nt = int(input())\ntests(t)", "n = int(input())\nfor i in range(n):\n    nn = int(input())\n    lista = [int(i) for i in input().split()]\n    contador = 0\n    lista = sorted(lista)\n    ultimo_n = lista[0]\n    tope = 0\n    cuantos_n = 0\n    for i in lista:\n        if i == ultimo_n:\n            cuantos_n += 1\n            if cuantos_n > tope:\n                contador += 1\n        elif i == ultimo_n + 1:\n            tope = cuantos_n\n            cuantos_n = 1\n            ultimo_n = i\n        else:\n            tope = 0\n            cuantos_n = 1\n            ultimo_n = i\n            contador += 1\n    print(contador)", "for s in [*open(0)][2::2]:\n    r = p = l = 0\n    for x in sorted(map(int, s.split())):\n        if x > p:\n            m = l * (x - p < 2)\n            l = 0\n        l += 1\n        r += l > m\n        p = x\n    print(r)", "for s in [*open(0)][2::2]:\n    r = p = l = 0\n    for x in sorted(map(int, s.split())):\n        if x > p:\n            m = l * (x - p < 2)\n            l = 0\n        l += 1\n        r += l > m\n        p = x\n    print(r)", "for s in [*open(0)][2::2]:\n    r = p = l = 0\n    for x in sorted(map(int, s.split())):\n        if x > p:\n            m = l * (x - p < 2)\n            l = 0\n        l += 1\n        r += l > m\n        p = x\n    print(r)", "import sys\nfrom math import *\nfrom collections import defaultdict, deque\ninput = sys.stdin.readline\nmod = 10 ** 9 + 7\nINF = 1061109567\nN = int(2 * 10 ** 5 + 5)\nLINF = 4557430888798830399\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    (ans, idxl) = (0, 0)\n    (cnt1, cnt2) = (0, 0)\n    num1 = a[0] - 2\n    for i in range(n):\n        if a[i] == a[idxl]:\n            cnt2 += 1\n        else:\n            if num1 == a[i - 1] - 1:\n                if cnt2 > cnt1:\n                    ans += cnt2 - cnt1\n            else:\n                ans += cnt2\n            cnt1 = cnt2\n            cnt2 = 1\n            idxl = i\n            num1 = a[i - 1]\n    if num1 == a[idxl] - 1:\n        if cnt2 > cnt1:\n            ans += cnt2 - cnt1\n    else:\n        ans += cnt2\n    print(ans)\nT = int(input())\nfor t in range(T):\n    solve()", "from heapq import heappop, heappush, heapify\nimport sys\ninput = lambda : sys.stdin.readline().strip()\n\ndef solve():\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    l = sorted(l)\n    h = []\n    tot = 0\n    for i in l:\n        while h and h[0] + 1 < i:\n            heappop(h)\n            tot += 1\n        if h and h[0] == i:\n            heappush(h, i)\n        elif h and h[0] + 1 == i:\n            heappop(h)\n            heappush(h, i)\n        else:\n            heappush(h, i)\n    print(len(h) + tot)\nfor i in range(int(input())):\n    solve()", "for s in [*open(0)][2::2]:\n    r = p = l = 0\n    for x in sorted(map(int, s.split())):\n        if x > p:\n            m = l * (x - p < 2)\n            l = 0\n        l += 1\n        r += l > m\n        p = x\n    print(r)", "for s in [*open(0)][2::2]:\n    r = p = l = 0\n    for x in sorted(map(int, s.split())):\n        if x > p:\n            m = l * (x - p < 2)\n            l = 0\n        l += 1\n        r += l > m\n        p = x\n    print(r)", "for s in [*open(0)][2::2]:\n    r = p = l = 0\n    for x in sorted(map(int, s.split())):\n        if x > p:\n            m = l * (x - p < 2)\n            l = 0\n        l += 1\n        r += l > m\n        p = x\n    print(r)", "for s in [*open(0)][2::2]:\n    r = p = l = 0\n    for x in sorted(map(int, s.split())):\n        if x > p:\n            m = l * (x - p < 2)\n            l = 0\n        l += 1\n        r += l > m\n        p = x\n    print(r)", "from heapq import heappop, heappush, heapify\nimport sys\ninput = lambda : sys.stdin.readline().strip()\n\ndef solve():\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    l = sorted(l)\n    h = []\n    tot = 0\n    for i in l:\n        while h and h[0] + 1 < i:\n            heappop(h)\n            tot += 1\n        if h and h[0] == i:\n            heappush(h, i)\n        elif h and h[0] + 1 == i:\n            heappop(h)\n            heappush(h, i)\n        elif h:\n            heappop(h)\n            heappush(h, i)\n            tot += 1\n        else:\n            heappush(h, i)\n    print(len(h) + tot)\nfor i in range(int(input())):\n    solve()", "from math import gcd\nfrom sys import setrecursionlimit\nsetrecursionlimit(10 ** 6)\n\ndef ye():\n    print('Yes')\n\ndef no():\n    print('NO')\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    su = 0\n    now = 0\n    fl = 0\n    now2 = 0\n    for i in range(1, n):\n        if a[i] == a[i - 1] + 1:\n            if now2 > now:\n                su += now2 - now\n            now2 = now\n            now = 0\n        elif a[i] == a[i - 1]:\n            now += 1\n        else:\n            su += max(now2, now) + 1\n            now = 0\n            fl = 0\n            now2 = 0\n    su += max(now, now2) + 1\n    print(su)\n    return\nTT_T = int(input())\nwhile TT_T:\n    solve()\n    TT_T -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    arr.sort()\n    p = 0\n    temp = -2\n    ans = 0\n    c = 0\n    for x in range(n):\n        if arr[x] != temp + 1:\n            if arr[x] == temp:\n                c += 1\n            else:\n                if c - p > 0:\n                    ans += c - p\n                c = 0\n                p = 0\n                ans += 1\n        else:\n            if c - p > 0:\n                ans += c - p\n            p = c\n            c = 0\n        temp = arr[x]\n    if c - p > 0:\n        ans += c - p\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    (*a,) = map(int, input().split())\n    a.sort()\n    a += [-1]\n    last = -1\n    tek = a[0]\n    kol_tek = 0\n    kol_Last = 0\n    ans = 0\n    for i in a:\n        if i == tek:\n            kol_tek += 1\n        elif tek == last + 1:\n            ans += max(0, kol_tek - kol_Last)\n            last = tek\n            tek = i\n            kol_Last = kol_tek\n            kol_tek = 1\n        else:\n            ans += kol_tek\n            last = tek\n            tek = i\n            kol_Last = kol_tek\n            kol_tek = 1\n    print(ans)", "for s in [*open(0)][2::2]:\n    r = p = l = 0\n    for x in sorted(map(int, s.split())):\n        if x > p:\n            d = -l * (x - p < 2)\n            l = 0\n        l += 1\n        d += 1\n        r += d > 0\n        p = x\n    print(r)", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    a = sorted(map(int, input().split()))\n    count = 0\n    sets = deque()\n    for ai in a:\n        while len(sets) > 0:\n            p = sets.popleft()\n            if p == ai - 1:\n                break\n            if p == ai:\n                sets.appendleft(p)\n                break\n            count += 1\n        sets.append(ai)\n    count += len(sets)\n    print(count)", "def ghg(a: list):\n    a.sort()\n    d = dict()\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    v = 0\n    p = 0\n    p2 = 0\n    for i in d.items():\n        if p:\n            if p + 1 != i[0]:\n                p2 = 0\n        if i[1] > p2:\n            v += i[1] - p2\n        p = i[0]\n        p2 = i[1]\n    return v\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(ghg(a))", "from heapq import heappop, heappush, heapify\nimport sys\ninput = lambda : sys.stdin.readline().strip()\n\ndef lst():\n    return [int(i) for i in input().split()]\nmm = int(input())\nfor i in range(mm):\n    nn = int(input())\n    ll = lst()\n    ll = sorted(ll)\n    hh = []\n    tot = 0\n    for i in ll:\n        while hh and hh[0] + 1 < i:\n            heappop(hh)\n            tot += 1\n        if hh and hh[0] == i:\n            heappush(hh, i)\n        elif hh and hh[0] + 1 == i:\n            heappop(hh)\n            heappush(hh, i)\n        elif hh:\n            heappop(hh)\n            heappush(hh, i)\n            tot += 1\n        else:\n            heappush(hh, i)\n    print(str(len(hh) + tot))", "from collections import defaultdict as dd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dd(int)\n    ans = 0\n    a.sort()\n    for num in a:\n        if d[num - 1]:\n            d[num - 1] -= 1\n        d[num] += 1\n    print(sum(d.values()))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    res = sorted(list(map(int, input().split())))\n    d = dict()\n    for j in res:\n        if j not in d:\n            d[j] = 0\n        d[j] += 1\n        if j - 1 in d and d[j - 1] != 0:\n            d[j - 1] -= 1\n    print(sum(d.values()))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    d = {}\n    for i in arr:\n        if i not in d:\n            d[i] = 0\n        if i - 1 in d:\n            if d[i - 1] == 1:\n                del d[i - 1]\n            else:\n                d[i - 1] -= 1\n            d[i] += 1\n        else:\n            d[i] += 1\n    ans = 0\n    for i in d.keys():\n        ans += d[i]\n    print(ans)", "from collections import Counter as cs\nfor _ in range(int(input())):\n    n = int(input())\n    l1 = [int(a) for a in input().split()]\n    l1.sort()\n    d1 = dict(cs(l1))\n    fq = 0\n    ans = 0\n    ls = l1[0] - 1\n    for i in d1:\n        if i != ls + 1:\n            ans += fq\n        elif fq > d1[i]:\n            ans += max(0, fq - d1[i])\n        fq = d1[i]\n        ls = i\n    print(ans + fq)", "from heapq import heappop, heappush, heapify\nimport sys\ninput = lambda : sys.stdin.readline().strip()\n\ndef lst():\n    return [int(i) for i in input().split()]\nmm = int(input())\nfor i in range(mm):\n    nn = int(input())\n    ll = lst()\n    ll = sorted(ll)\n    hh = []\n    tot = 0\n    for i in ll:\n        while hh and hh[0] + 1 < i:\n            heappop(hh)\n            tot += 1\n        if hh and hh[0] == i:\n            heappush(hh, i)\n        elif hh and hh[0] + 1 == i:\n            heappop(hh)\n            heappush(hh, i)\n        else:\n            heappush(hh, i)\n    print(str(len(hh) + tot))", "for a in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    ar.sort()\n    (count, curCount, prevCount) = (0, 1, 0)\n    ar.append(ar[-1] + 1)\n    for b in range(1, n + 1):\n        if ar[b - 1] != ar[b]:\n            if curCount > prevCount:\n                count += curCount - prevCount\n            (prevCount, curCount) = (curCount, 1) if ar[b - 1] + 1 == ar[b] else (0, 1)\n        else:\n            curCount += 1\n    print(count)", "import sys\ninput = sys.stdin.readline\n\ndef solve_d():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    answ = 0\n    my_dict = {}\n    for i in range(n):\n        if arr[i] not in my_dict:\n            my_dict[arr[i]] = 1\n        else:\n            my_dict[arr[i]] += 1\n    chains = list(my_dict.keys())\n    chains.sort()\n    ln = len(chains)\n    i = 0\n    while i < ln:\n        j = i + 1\n        key1 = chains[i]\n        if j < ln and key1 + 1 == chains[j]:\n            key2 = key1 + 1\n            val1 = my_dict[key1]\n            val2 = my_dict[key2]\n            if val1 < val2:\n                i += 1\n                continue\n            else:\n                answ += val1 - val2\n        else:\n            answ += my_dict[key1]\n        i += 1\n    return answ\n\ndef main():\n    for _ in range(int(input())):\n        answ = solve_d()\n        print(answ)\nmain()", "for s in [*open(0)][2::2]:\n    d = {}\n    r = 0\n    for x in sorted(map(int, s.split())):\n        if d.get(x - 1):\n            d[x - 1] -= 1\n        else:\n            r += 1\n        d[x] = d.get(x, 0) + 1\n    print(r)", "from itertools import *\nfor s in [*open(0)][2::2]:\n    a = [(k, len([*g])) for (k, g) in groupby(sorted(map(int, s.split())))]\n    print(sum((max(0, y - (v - u < 2) * x) for ((u, x), (v, y)) in zip([(0, 0)] + a, a))))", "def solve(a):\n    seq = []\n    curseq = []\n    a.sort()\n    last = -1\n    seqidx = 0\n    for v in a:\n        if v == last:\n            seqidx += 1\n            if seqidx == len(curseq):\n                curseq.append(len(seq))\n                seq.append([v])\n            else:\n                seq[curseq[seqidx]].append(v)\n        elif v == last + 1:\n            if seqidx + 1 < len(curseq):\n                curseq[seqidx + 1:] = []\n            seqidx = 0\n            seq[curseq[seqidx]].append(v)\n        else:\n            curseq = []\n            curseq.append(len(seq))\n            seq.append([v])\n            seqidx = 0\n        last = v\n    return len(seq)\nt = int(input())\nans = []\nfor ti in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans.append(solve(a))\nfor a in ans:\n    print(a)", "from itertools import *\nfor s in [*open(0)][2::2]:\n    a = [(k, len([*g])) for (k, g) in groupby(sorted(map(int, s.split())))]\n    print(sum((max(0, y - (v - u < 2) * x) for ((u, x), (v, y)) in zip([(0, 0)] + a, a))))", "from heapq import heappop, heappush, heapify\nimport sys\ninput = lambda : sys.stdin.readline().strip()\n\ndef lst():\n    return [int(i) for i in input().split()]\nmm = int(input())\nfor i in range(mm):\n    nn = int(input())\n    ll = lst()\n    ll = sorted(ll)\n    hh = []\n    tot = 0\n    for i in ll:\n        while hh and hh[0] + 1 < i:\n            heappop(hh)\n            tot += 1\n        if hh and hh[0] == i:\n            heappush(hh, i)\n        elif hh and hh[0] + 1 == i:\n            heappop(hh)\n            heappush(hh, i)\n        elif hh:\n            heappop(hh)\n            heappush(hh, i)\n            tot += 1\n        else:\n            heappush(hh, i)\n    print(str(len(hh) + tot))", "cases = int(input())\nfor case in range(cases):\n    n = int(input())\n    dolls = sorted(map(int, input().split()))\n    c = 0\n    v = -1\n    while dolls:\n        if dolls[-1] != v - 1:\n            prev = 0\n        v = dolls[-1]\n        current = 0\n        while dolls and dolls[-1] == v:\n            dolls.pop()\n            current += 1\n            if prev:\n                prev -= 1\n            else:\n                c += 1\n        prev = current\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    arr = sorted(map(int, input().split()))\n    counts = {}\n    for i in arr:\n        if i - 1 not in counts or counts[i - 1] == 0:\n            counts[i] = counts.get(i, 0) + 1\n        else:\n            counts[i - 1] -= 1\n            counts[i] = counts.get(i, 0) + 1\n    print(sum(counts.values()))", "for j in range(int(input())):\n    t = int(input())\n    g = list(map(int, input().split()))\n    k = {}\n    g.sort()\n    for j in g:\n        if j in k:\n            k[j] += 1\n        else:\n            k[j] = 1\n    m = [*k]\n    v = [*k.values()]\n    c = v[0]\n    if len(m) == 1:\n        print(v[0])\n    else:\n        for i in range(1, len(m)):\n            if m[i] - m[i - 1] == 1:\n                if v[i] - v[i - 1] > 0:\n                    c += v[i] - v[i - 1]\n            else:\n                c += v[i]\n        print(c)", "from itertools import groupby\nfor _ in range(int(input())):\n    input()\n    sets = []\n    for (key, group) in groupby(sorted(map(int, input().split()))):\n        for (i, j) in enumerate(group):\n            if i + 1 > len(sets):\n                break\n            if sets[-i - 1] == key - 1:\n                sets[-i - 1] += 1\n            else:\n                break\n        else:\n            continue\n        sets.extend(group)\n        sets.append(key)\n    print(len(sets))", "from collections import defaultdict as dd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dd(int)\n    ans = 0\n    a.sort()\n    s = set(a)\n    for num in a:\n        if d[num - 1]:\n            d[num - 1] -= 1\n        d[num] += 1\n    print(sum(d.values()))", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    l2 = []\n    d = Counter(l)\n    k = list(d.keys())\n    v = list(d.values())\n    c = v[0]\n    for i in range(1, len(k)):\n        if k[i] == k[i - 1] + 1:\n            c += max(0, v[i] - v[i - 1])\n        else:\n            c += v[i]\n    print(c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    w = list(map(int, input().split()))\n    w.sort()\n    i = 0\n    last = 0\n    ans = 0\n    lastl = 0\n    while i < n:\n        j = i\n        while j + 1 < n and w[j + 1] == w[j]:\n            j += 1\n        length = j - i + 1\n        if w[j] - 1 == lastl:\n            if length > last:\n                ans += length - last\n            last = length\n            lastl = w[j]\n        else:\n            ans += length\n            lastl = w[j]\n            last = length\n        i = j + 1\n    print(ans)", "import collections\nT = int(input())\nwhile T > 0:\n    n = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    dic = collections.defaultdict(int)\n    ret = 0\n    for i in A:\n        if dic[i - 1] == 0:\n            ret += 1\n        else:\n            dic[i - 1] -= 1\n        dic[i] += 1\n    print(ret)\n    T -= 1", "from itertools import groupby\nfor _ in range(int(input())):\n    input()\n    sets = []\n    for (key, group) in groupby(sorted(map(int, input().split()))):\n        for (i, j) in enumerate(group):\n            if i + 1 > len(sets):\n                break\n            if sets[-i - 1] == key - 1:\n                sets[-i - 1] += 1\n            else:\n                break\n        else:\n            continue\n        sets.extend(group)\n        sets.append(key)\n    print(len(sets))", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = defaultdict(int)\n    cnt = 0\n    arr.sort()\n    for i in range(n):\n        d[arr[i]] += 1\n        if d[arr[i] - 1] > 0:\n            d[arr[i] - 1] -= 1\n        else:\n            cnt += 1\n    print(cnt)", "from math import gcd\nt = int(input())\nfor p in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    i = 0\n    ans = 0\n    maxim = 0\n    while i != n:\n        cnt = 1\n        while i + 1 < n and a[i + 1] == a[i]:\n            i += 1\n            cnt += 1\n        if cnt < maxim:\n            ans += maxim - cnt\n            maxim = cnt\n        else:\n            maxim = cnt\n        if i + 1 < n and a[i + 1] == a[i] + 1:\n            i += 1\n        else:\n            i += 1\n            ans += maxim\n            maxim = 0\n    print(ans)", "t = int(input())\nfor t1 in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    i = 0\n    while i < n and a[i] == a[0]:\n        i += 1\n    cnt = i\n    ans = cnt\n    while i < n:\n        if a[i] > a[i - 1] + 1:\n            cnt = 0\n        tmp = 0\n        x = a[i]\n        while i < n and a[i] == x:\n            tmp += 1\n            i += 1\n        if tmp > cnt:\n            ans += tmp - cnt\n        cnt = tmp\n    print(ans)", "for tcase in range(int(input())):\n    n = int(input())\n    a = sorted(map(int, input().split()))\n    (x, y) = ([a[0]], [1])\n    for ai in a[1:]:\n        if ai == x[-1]:\n            y[-1] += 1\n        else:\n            x.append(ai)\n            y.append(1)\n    ans = y[0]\n    for i in range(1, len(x)):\n        if x[i] - x[i - 1] == 1:\n            ans += max(0, y[i] - y[i - 1])\n        else:\n            ans += max(0, y[i])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(el) for el in input().split()]\n    arr.sort()\n    (ans, cur_ans, i) = (0, 1, 1)\n    while i < n:\n        j = i - 1\n        while i < n and arr[i] == arr[j]:\n            i += 1\n        if i >= n:\n            cur_ans = max(cur_ans, i - j)\n            break\n        if cur_ans > i - j:\n            ans += cur_ans - i + j\n        cur_ans = i - j\n        if arr[i] - arr[j] > 1:\n            ans += cur_ans\n            cur_ans = 1\n        i += 1\n    ans += cur_ans\n    print(ans)", "from collections import Counter\nfrom math import *\n\ndef lstStrRd():\n    return list(input())\n\ndef intRd():\n    return int(input())\n\ndef lstRd():\n    return list(map(int, input().split()))\nfor _ in range(intRd()):\n    n = intRd()\n    a = sorted(lstRd())\n    cnt = Counter(a)\n    temp = cnt[a[0]]\n    last = a[0]\n    res = 0\n    for i in sorted(set(a))[1:]:\n        if i - 1 != last:\n            res += temp\n            temp = cnt[i]\n        elif cnt[i] >= temp:\n            temp = cnt[i]\n        else:\n            res += temp - cnt[i]\n            temp = cnt[i]\n        last = i\n    print(res + temp)", "from collections import defaultdict\n\ndef minimum_dolls(n, arr):\n    arr.sort()\n    dict = defaultdict(lambda : 0)\n    for i in range(n):\n        dict[arr[i]] += 1\n    count = 0\n    temp = list(dict.keys())\n    for i in range(len(temp)):\n        if dict[temp[i]] - dict[temp[i] - 1] > 0:\n            count += dict[temp[i]] - dict[temp[i] - 1]\n    print(count)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        minimum_dolls(n, arr)\nmain()", "def solution(n, arr):\n    arr.sort()\n    visit = {}\n    res = [0]\n    k = 0\n    for i in range(n):\n        if i > 0 and arr[i] > arr[i - 1] + 1:\n            res.append(0)\n            k += 1\n        if arr[i] not in visit:\n            visit[arr[i]] = 1\n            j = i + 1\n            while j < n and arr[j] == arr[i]:\n                visit[arr[i]] += 1\n                j += 1\n            if res[k] != 0 and arr[i - 1] in visit and (visit[arr[i]] > visit[arr[i - 1]]):\n                res[k] += visit[arr[i]] - visit[arr[i - 1]]\n            elif res[k] == 0:\n                res[k] += visit[arr[i]]\n    print(sum(res))\n    return\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    solution(n, arr)", "for _ in range(int(input())):\n    N = int(input())\n    M = sorted(list(map(int, input().split())))\n    quantity = {}\n    sizes = []\n    last = -1\n    for m in M:\n        if last != m:\n            sizes.append(m)\n            quantity[m] = 1\n        else:\n            quantity[m] += 1\n        last = m\n    ans = quantity[sizes[0]]\n    for i in range(1, len(sizes)):\n        if sizes[i - 1] == sizes[i] - 1:\n            ans += max(0, quantity[sizes[i]] - quantity[sizes[i - 1]])\n        else:\n            ans += quantity[sizes[i]]\n    print(ans)", "for s in [*open(0)][2::2]:\n    r = p = l = 0\n    for x in sorted(map(int, s.split())):\n        if x > p:\n            m = l * (x - p < 2)\n            l = 0\n        l += 1\n        r += l > m\n        p = x\n    print(r)", "for s in [*open(0)][2::2]:\n    r = p = l = 0\n    for x in sorted(map(int, s.split())):\n        if x > p:\n            m = l * (x - p < 2)\n            l = 0\n        l += 1\n        r += l > m\n        p = x\n    print(r)", "from collections import Counter\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    st = set(arr)\n    st = list(st)\n    st.sort()\n    freq = Counter(arr)\n    ans = 0\n    curr = freq[st[0]]\n    for i in range(1, len(st)):\n        if st[i] == st[i - 1] + 1:\n            if freq[st[i]] >= curr:\n                curr = freq[st[i]]\n                continue\n            ans += curr - freq[st[i]]\n            curr = freq[st[i]]\n        else:\n            ans += curr\n            curr = freq[st[i]]\n    ans += curr\n    print(ans)\n    return\nfor _ in range(int(input())):\n    main()", "import sys\nimport math\nimport heapq\nimport bisect\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    l.sort()\n    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    ans = 1\n    check = l[0]\n    i = 1\n    while i < n:\n        if l[i] == check + 1:\n            temp = l[i]\n            while d[check] > 0 and l[i] == temp:\n                d[check] -= 1\n                i += 1\n                if i == n:\n                    break\n            else:\n                check = temp\n        elif l[i] == check:\n            ans += 1\n            i += 1\n        else:\n            check = l[i]\n            ans += 1\n            i += 1\n    print(ans)", "n = int(input())\nfor _ in range(n):\n    m = int(input())\n    vals = sorted(map(int, input().split()))\n    occ = {}\n    for x in vals:\n        occ[x] = occ.get(x, 0) + 1\n    keys = sorted(occ.keys())\n    res = occ[keys[0]]\n    to_suppr = occ[keys[0]]\n    j = 1\n    while j < len(keys):\n        i = keys[j]\n        if i != keys[j - 1] + 1:\n            to_suppr = 0\n        if occ[i] > to_suppr:\n            res += occ[i] - to_suppr\n            to_suppr += occ[i] - to_suppr\n        else:\n            to_suppr = occ[i]\n        j += 1\n    print(res)", "from collections import defaultdict\n\ndef N():\n    return int(input())\n\ndef A():\n    return [int(x) for x in input().split()]\n\ndef S():\n    return input()\nfor _ in range(N()):\n    n = N()\n    d = {}\n    if 'codeforces' == 28226329:\n        print('Tanmay')\n    c = 0\n    a = A()\n    a.sort()\n    for i in a:\n        if i - 1 in d.keys():\n            if d[i - 1] - 1 < 0:\n                del d[i - 1]\n            else:\n                d[i - 1] = d[i - 1] - 1\n        d[i] = d.get(i, 0) + 1\n    for i in d.keys():\n        c += d[i]\n    print(c)", "def func():\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    ans = 0\n    d = 0\n    v = []\n    for i in range(0, n):\n        d += 1\n        if i == n - 1 or l[i + 1] != l[i]:\n            v.append([l[i], d])\n            d = 0\n    ans = v[0][1]\n    d = v[0][1]\n    for i in range(1, len(v)):\n        if v[i][0] > v[i - 1][0] + 1:\n            ans += v[i][1]\n            d = v[i][1]\n            continue\n        if v[i][1] > d:\n            ans += v[i][1] - d\n        d = v[i][1]\n    print(ans)\nfor i in range(int(input())):\n    func()", "tests = int(input())\ncount = 0\nfor _ in range(tests):\n    total = int(input())\n    sizes = list(map(int, input().split()))\n    sizes.sort()\n    frequencies = [[sizes[0], 1]]\n    for x in sizes[1:]:\n        if frequencies[-1][0] == x:\n            frequencies[-1][1] += 1\n        else:\n            frequencies.append([x, 1])\n    result = 0\n    (size, height) = (frequencies[0][0], frequencies[0][1])\n    for x in frequencies[1:]:\n        if x[0] == size + 1:\n            if x[1] < height:\n                result += height - x[1]\n            height = x[1]\n            size += 1\n        else:\n            result += height\n            (size, height) = (x[0], x[1])\n    result += height\n    print(result)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = sorted(map(int, input().split()))\n    total = 0\n    i = 0\n    prev = 0\n    while i < len(a):\n        j = i + 1\n        while j < len(a) and a[i] == a[j]:\n            j += 1\n        total += max(0, j - i - prev)\n        prev = j - i if j < len(a) and a[i] == a[j] - 1 else 0\n        i = j\n    print(total)", "t = int(input())\nfrom collections import Counter\nwhile t:\n    n = int(input())\n    li = list(map(int, input().strip().split()))\n    li.sort()\n    di = Counter(li)\n    li = sorted(set(li))\n    li = li[::-1]\n    ans = di[li[0]]\n    for i in range(1, len(li)):\n        v = di[li[i]]\n        if li[i - 1] - li[i] <= 1:\n            v1 = di[li[i - 1]]\n            v2 = di[li[i]]\n            if v1 < v2:\n                ans += v2 - v1\n        else:\n            ans += v\n    print(ans)\n    t -= 1", "import math\nT = int(input(''))\nfor i in range(T):\n    n = int(input())\n    str1 = input()\n    l1 = [int(c) for c in str1.split()]\n    l1.sort()\n    hashDict = {}\n    for element in l1:\n        if element not in hashDict:\n            hashDict[element] = 1\n        else:\n            hashDict[element] += 1\n    l1 = list(set(l1))\n    l1.sort()\n    dollCount = hashDict[l1[0]]\n    for j in range(1, len(l1)):\n        if l1[j] - l1[j - 1] > 1:\n            dollCount += hashDict[l1[j]]\n        else:\n            x = hashDict[l1[j]] - hashDict[l1[j] - 1]\n            if x > 0:\n                dollCount += x\n    print(dollCount)", "def mini_dolls(n, l):\n    l.sort()\n    d = []\n    last = l[0]\n    c = 1\n    ans = 0\n    for i in range(1, n):\n        if l[i] == last:\n            c += 1\n        else:\n            d.append([last, c])\n            c = 1\n            last = l[i]\n    d.append([last, c])\n    while True:\n        prev = d[0][0]\n        d[0][1] -= 1\n        i = 1\n        if i == len(d):\n            ans += 1\n        d2 = []\n        if d[0][1] != 0:\n            d2.append(d[0])\n        while i < len(d):\n            if d[i][0] == prev + 1:\n                d[i][1] -= 1\n                prev = d[i][0]\n                if d[i][1] != 0:\n                    d2.append(d[i])\n                i += 1\n                if i == len(d):\n                    ans += 1\n            else:\n                ans += 1\n                prev = d[i][0]\n                d[i][1] -= 1\n                if d[i][1] != 0:\n                    d2.append(d[i])\n                i += 1\n                if i == len(d):\n                    ans += 1\n        d = d2\n        if len(d2) == 0:\n            break\n    return ans\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(mini_dolls(n, l))", "input = __import__('sys').stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    arr = sorted([*map(int, input().split())])\n    sorted_val = []\n    val = [arr[0], 1]\n    for i in range(1, n):\n        if val[0] == arr[i]:\n            val[1] += 1\n        else:\n            sorted_val.append(val)\n            val = [arr[i], 1]\n    sorted_val.append(val)\n    ans = 0\n    value = -1\n    prev_length = 0\n    for (x, c) in sorted_val:\n        if x == value + 1:\n            value = x\n            if prev_length > c:\n                ans += prev_length - c\n            prev_length = c\n        else:\n            value = x\n            ans += prev_length\n            prev_length = c\n    else:\n        ans += prev_length\n    print(ans)", "from math import gcd\nfrom sys import setrecursionlimit\nsetrecursionlimit(10 ** 6)\nfrom operator import itemgetter\n\ndef ye():\n    print('Yes')\n\ndef no():\n    print('NO')\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    indexs = [index for (index, value) in sorted(enumerate(a), key=itemgetter(1))]\n    a.sort()\n    su = 0\n    now = 0\n    fl = 0\n    now2 = 0\n    for i in range(1, n):\n        if a[i] == a[i - 1] + 1:\n            if now2 > now:\n                su += now2 - now\n            now2 = now\n            now = 0\n        elif a[i] == a[i - 1]:\n            now += 1\n        else:\n            su += max(now2, now) + 1\n            now = 0\n            fl = 0\n            now2 = 0\n    su += max(now, now2) + 1\n    print(su)\n    return\nTT_T = int(input())\nwhile TT_T:\n    solve()\n    TT_T -= 1", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    l.sort()\n    mp = {}\n    arr = []\n    for i in l:\n        if i in mp:\n            mp[i] += 1\n        else:\n            mp[i] = 1\n            arr.append(i)\n    if len(arr) == 1:\n        print(mp[l[0]])\n    else:\n        ans = mp[arr[0]]\n        for i in range(1, len(arr)):\n            if arr[i] - 1 in mp:\n                if mp[arr[i] - 1] < mp[arr[i]]:\n                    ans = ans + mp[arr[i]] - mp[arr[i] - 1]\n            else:\n                ans = ans + mp[arr[i]]\n        print(ans)", "from collections import Counter\n\ndef solve():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    cnt = Counter(a)\n    res = 0\n    for (v, c) in cnt.items():\n        j = v\n        if c > 0:\n            res += c\n            while cnt[j] > 0:\n                t = cnt[j]\n                cnt[j] -= c\n                c = min(t, c)\n                j += 1\n    print(res)\n    return\nt = int(input())\nfor _ in range(t):\n    solve()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = input().split()\n    for j in range(n):\n        a[j] = int(a[j])\n    a.sort()\n    mem = [[1]]\n    count = 0\n    for j in range(1, n):\n        if a[j] == a[j - 1]:\n            mem[-1][-1] += 1\n        elif a[j] == a[j - 1] + 1:\n            mem[-1].append(1)\n        else:\n            mem.append([1])\n    for j in range(len(mem)):\n        count += mem[j][0]\n        for k in range(1, len(mem[j])):\n            if mem[j][k] > mem[j][k - 1]:\n                count += mem[j][k] - mem[j][k - 1]\n    print(count)", "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    check = defaultdict(lambda : 0)\n    for num in a:\n        check[num] += 1\n    dic = []\n    for num in check:\n        dic.append((num, check[num]))\n    res = dic[0][1]\n    for i in range(1, len(dic)):\n        if dic[i][0] == dic[i - 1][0] + 1:\n            res += max(0, dic[i][1] - dic[i - 1][1])\n        else:\n            res += dic[i][1]\n    print(res)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    check = defaultdict(lambda : 0)\n    for num in a:\n        check[num] += 1\n    dic = []\n    for num in check:\n        dic.append((num, check[num]))\n    res = dic[0][1]\n    for i in range(1, len(dic)):\n        if dic[i][0] == dic[i - 1][0] + 1:\n            res += max(0, dic[i][1] - dic[i - 1][1])\n        else:\n            res += dic[i][1]\n    print(res)", "from collections import defaultdict\nt = int(input())\nfor _ in range(int(t)):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    check = defaultdict(lambda : 0)\n    for num in a:\n        check[num] += 1\n    data = []\n    for num in check:\n        data.append((num, check[num]))\n    res = data[0][1]\n    for i in range(1, len(data)):\n        if data[i][0] == data[i - 1][0] + 1:\n            res += max(0, data[i][1] - data[i - 1][1])\n        else:\n            res += data[i][1]\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    arr2 = sorted(list(map(int, input().split())))\n    if n == 1:\n        print(1)\n        continue\n    p = arr2[0]\n    count = 1\n    arr1 = []\n    for x in range(1, n):\n        if arr2[x] == p:\n            count += 1\n            if x == n - 1:\n                arr1.append([arr2[x], count])\n        else:\n            arr1.append([arr2[x - 1], count])\n            count = 1\n            p = arr2[x]\n            if x == n - 1:\n                arr1.append([arr2[x], count])\n    arr = sorted(arr1, key=lambda xx: (xx[0], xx[1]), reverse=True)\n    if len(arr) == 1:\n        print(arr[0][1])\n        continue\n    tmp_max = arr[0][1]\n    prev_size = arr[0][0]\n    out = arr[0][1]\n    for x in range(1, len(arr)):\n        if prev_size - arr[x][0] == 1:\n            if arr[x][1] > tmp_max:\n                out += arr[x][1] - tmp_max\n                tmp_max = arr[x][1]\n            elif arr[x][1] < tmp_max:\n                tmp_max = arr[x][1]\n            prev_size = arr[x][0]\n        else:\n            out += arr[x][1]\n            tmp_max = arr[x][1]\n            prev_size = arr[x][0]\n    print(out)", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    k = 0\n    p = 1\n    t = 1\n    for i in range(1, len(a)):\n        if a[i] == a[i - 1]:\n            t += 1\n        elif a[i] - a[i - 1] == 1:\n            if t > p:\n                p = t\n            if t < p:\n                k += p - t\n                p = t\n            t = 1\n        else:\n            if t >= p:\n                p = t\n            k += p\n            p = 1\n            t = 1\n    if t > p:\n        p = t\n    k += p\n    print(k)", "t = int(input())\nfor i in range(t):\n    cnt = {}\n    n = int(input())\n    lst = list(map(int, input().split()))\n    for i in lst:\n        if str(i) not in cnt.keys():\n            cnt[str(i)] = 1\n        else:\n            cnt[str(i)] += 1\n    lst2 = list(set(lst))\n    lst2.sort()\n    res = cnt[str(lst2[0])]\n    cur_flow = res\n    for i in range(1, len(lst2)):\n        if lst2[i - 1] != lst2[i] - 1:\n            cur_flow = cnt[str(lst2[i])]\n            res += cur_flow\n        else:\n            tmp = cnt[str(lst2[i])]\n            res += max(tmp - cur_flow, 0)\n            cur_flow = tmp\n    print(res)", "t = int(input())\nfor i in range(t):\n    cnt = {}\n    n = int(input())\n    lst = list(map(int, input().split()))\n    for i in lst:\n        if str(i) not in cnt.keys():\n            cnt[str(i)] = 1\n        else:\n            cnt[str(i)] += 1\n    lst.sort()\n    lst2 = list(set(lst))\n    lst2.sort()\n    res = cnt[str(lst2[0])]\n    cur_flow = res\n    for i in range(1, len(lst2)):\n        if lst2[i - 1] != lst2[i] - 1:\n            cur_flow = cnt[str(lst2[i])]\n            res += cur_flow\n        else:\n            tmp = cnt[str(lst2[i])]\n            res += max(tmp - cur_flow, 0)\n            cur_flow = tmp\n    print(res)", "t = int(input())\nfor i in range(0, t):\n    m = int(input())\n    n = list(map(int, input().split()))\n    n.sort()\n    l = []\n    ll = []\n    for j in range(0, m):\n        l.append([])\n        ll.append([])\n    l[0].append(n[0])\n    ll[0].append(1)\n    seq = 0\n    pos = 0\n    for j in range(1, m):\n        if n[j] == n[j - 1]:\n            ll[seq][pos] = ll[seq][pos] + 1\n        elif n[j] == n[j - 1] + 1:\n            pos = pos + 1\n            l[seq].append(n[j])\n            ll[seq].append(1)\n        else:\n            seq = seq + 1\n            pos = 0\n            l[seq].append(n[j])\n            ll[seq].append(1)\n    ans = seq + 1\n    xx = 0\n    xprev = 1\n    for z in range(0, ans):\n        for q in range(0, len(ll[z])):\n            xx = ll[z][q]\n            if xx > xprev:\n                ans = ans + xx - xprev\n                xprev = xx\n            elif xx < xprev:\n                xprev = xx\n        xx = 0\n        xprev = 1\n    print(ans)", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    cnt = [[0, 0]] * (n + 5)\n    d = {}\n    a = list(map(int, input().split()))\n    a.sort()\n    gg = max(a)\n    last = -1\n    next = 0\n    for i in range(n):\n        if a[i] == last:\n            cnt[d[a[i]]][1] += 1\n        else:\n            d[a[i]] = next\n            next += 1\n            cnt[d[a[i]]] = [a[i], 1]\n        last = a[i]\n    otv = n\n    cur = 0\n    q = 0\n    while q < n:\n        x = d[a[q]]\n        if cnt[x][1] != 0:\n            for i in range(x, n):\n                if cnt[i][1] > 0:\n                    cur += 1\n                    cnt[i][1] -= 1\n                    if cnt[i + 1][0] - cnt[i][0] != 1:\n                        break\n                else:\n                    break\n            otv -= cur - 1\n            cur = 0\n        q += 1\n    print(otv)", "import sys\nfrom collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    c = Counter(a)\n    ans = 0\n    B = sorted(set(a))\n    for b in B:\n        if c[b] > c[b - 1]:\n            ans += c[b] - c[b - 1]\n    print(ans)", "answer = []\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    hm = {}\n    for i in arr:\n        hm[i] = 0\n    for i in arr:\n        if i - 1 in hm and hm[i - 1] > 0:\n            hm[i - 1] -= 1\n        hm[i] += 1\n    ans = 0\n    for i in hm:\n        ans += hm[i]\n    answer.append(ans)\nfor i in answer:\n    print(i)", "for i in range(int(input())):\n    input()\n    lst = [int(x) for x in input().split()]\n    lst.sort()\n    d = {x: 0 for x in lst}\n    kits = 0\n    for n in lst:\n        if n - 1 not in d or not d[n - 1]:\n            kits += 1\n        else:\n            d[n - 1] -= 1\n        d[n] += 1\n    print(kits)", "t = int(input())\nfor i in range(0, t):\n    m = int(input())\n    n = list(map(int, input().split()))\n    n.sort()\n    l = []\n    ll = []\n    j = 0\n    while j < m:\n        l.append([])\n        ll.append([])\n        j = j + 1\n    l[0].append(n[0])\n    ll[0].append(1)\n    seq = 1\n    pos = 0\n    j = 1\n    while j < m:\n        if n[j] == n[j - 1] + 1:\n            pos = pos + 1\n            l[seq - 1].append(n[j])\n            ll[seq - 1].append(1)\n        elif n[j] == n[j - 1]:\n            ll[seq - 1][pos] = ll[seq - 1][pos] + 1\n        else:\n            seq = seq + 1\n            pos = 0\n            l[seq - 1].append(n[j])\n            ll[seq - 1].append(1)\n        j = j + 1\n    ans = seq\n    xx = 0\n    xprev = 1\n    z = 0\n    while z < ans:\n        q = 0\n        while q < len(ll[z]):\n            xx = ll[z][q]\n            if xx < xprev:\n                xprev = xx\n            elif xx > xprev:\n                ans = ans + xx - xprev\n                xprev = xx\n            q = q + 1\n        xx = 0\n        xprev = 1\n        z = z + 1\n    print(ans)", "op = []\nfor i in range(int(input())):\n    input()\n    lst = [int(j) for j in input().split()]\n    lst.sort()\n    nums = {j: 0 for j in lst}\n    threads = 0\n    for j in lst:\n        if j - 1 not in nums or not nums[j - 1]:\n            threads += 1\n        else:\n            nums[j - 1] -= 1\n        nums[j] += 1\n    op.append(str(threads))\nprint('\\n'.join(op))", "import math\nfrom random import randint\nRANDOM = randint(1, 10 ** 9)\n\nclass Wrapper(int):\n\n    def __init__(self, x):\n        int.__init__(x)\n\n    def __hash__(self):\n        return super(Wrapper, self).__hash__() ^ RANDOM\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        res = alg()\n        print(res)\n\ndef alg():\n    n = int(input())\n    aDict = dict()\n    res = 0\n    for i in input().split():\n        i = Wrapper(int(i))\n        if not i in aDict:\n            aDict[i] = 0\n        aDict[i] += 1\n    for k in aDict:\n        k = Wrapper(k)\n        kprev = Wrapper(k - 1)\n        if kprev in aDict:\n            res += max(0, aDict[k] - aDict[kprev])\n        else:\n            res += aDict[k]\n    return res\nmain()", "from random import randint\nRANDOM = randint(1, 10 ** 9)\n\nclass Wrapper(int):\n\n    def __init__(self, x):\n        int.__init__(x)\n\n    def __hash__(self):\n        return super(Wrapper, self).__hash__() ^ RANDOM\n\ndef solve(vals):\n    counter = {}\n    for item in vals:\n        cur = Wrapper(item)\n        if cur in counter:\n            counter[cur] += 1\n        else:\n            counter[cur] = 1\n    all_options = [(cost, num) for (cost, num) in sorted(counter.items())]\n    num_of_sets = all_options[0][1]\n    for i in range(1, len(all_options)):\n        if all_options[i][0] - all_options[i - 1][0] != 1:\n            num_of_sets += all_options[i][1]\n        else:\n            diff = all_options[i][1] - all_options[i - 1][1]\n            if diff > 0:\n                num_of_sets += diff\n    return num_of_sets\nn = int(input())\nfor j in range(n):\n    length = int(input())\n    vals = [int(_) for _ in input().split()]\n    print(solve(vals))", "import math\nfrom random import randint\nRANDOM = randint(1, 10 ** 9)\n\nclass Wrapper(int):\n\n    def __init__(self, x):\n        int.__init__(x)\n\n    def __hash__(self):\n        return super(Wrapper, self).__hash__() ^ RANDOM\nt = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    list1 = [int(num) for num in input().split()]\n    dict1 = {}\n    for num in list1:\n        num = Wrapper(num)\n        if num not in dict1:\n            dict1[num] = 0\n        dict1[num] += 1\n    c = 0\n    for key in dict1:\n        key = Wrapper(key)\n        kless = Wrapper(key - 1)\n        if kless not in dict1:\n            c += dict1[key]\n        elif dict1[kless] <= dict1[key]:\n            c += dict1[key] - dict1[kless]\n    print(c)"]