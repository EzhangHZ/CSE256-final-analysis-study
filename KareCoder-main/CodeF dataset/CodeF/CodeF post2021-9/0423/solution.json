["import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    Cnt = {}\n    K = []\n    for __ in range(n):\n        K.append(list(map(int, input().split()))[1:])\n        for c in K[-1]:\n            if c in Cnt:\n                Cnt[c] += 1\n            else:\n                Cnt[c] = 1\n    flag = 0\n    for k in K:\n        for c in k:\n            if Cnt[c] == 1:\n                flag += 1\n                break\n    if flag == n:\n        print('No')\n    else:\n        print('Yes')", "import sys\nfrom collections import defaultdict\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    check = defaultdict(int)\n    ps = []\n    for i in range(n):\n        (k, *p) = map(int, input().split())\n        ps += [p]\n    for p in ps:\n        for e in p:\n            check[e] += 1\n    for p in ps:\n        all2 = True\n        for e in p:\n            all2 &= check[e] >= 2\n        if all2:\n            print('Yes')\n            break\n    else:\n        print('No')", "from itertools import chain\n\ndef read_bits():\n    return list(set(list(map(int, input().split(' ')))[1:]))\n\ndef read_test():\n    test_size = int(input())\n    nums = []\n    for _ in range(test_size):\n        nums.append(read_bits())\n    return nums\n\ndef read_input():\n    test_num = int(input())\n    tests = []\n    for _ in range(test_num):\n        tests.append(read_test())\n    return tests\n\ndef solve(test):\n    bit_counts = {}\n    for num in test:\n        for bit in num:\n            if bit not in bit_counts:\n                bit_counts[bit] = 1\n            else:\n                bit_counts[bit] = bit_counts[bit] + 1\n    for num in test:\n        has_unique = False\n        for bit in num:\n            if bit_counts[bit] == 1:\n                has_unique = True\n        if not has_unique:\n            return 'Yes'\n    return 'No'\n\ndef main():\n    tests = read_input()\n    for test in tests:\n        print(solve(test))\nmain()", "t = int(input())\nres = []\nfor _ in range(t):\n    n = int(input())\n    freq = {}\n    store = []\n    for i in range(n):\n        a = list(map(int, input().split()[1:]))\n        store.append(a)\n        for i in a:\n            if i not in freq:\n                freq[i] = 0\n            freq[i] += 1\n    ans_p = 'No'\n    for i in range(n):\n        k = len(store[i])\n        ans = True\n        for j in range(k):\n            if freq[store[i][j]] == 1:\n                ans = False\n                break\n        if ans == True:\n            ans_p = 'Yes'\n            break\n    res.append(ans_p)\nfor i in res:\n    print(i)", "for _ in range(int(input())):\n    dic = {}\n    n = int(input())\n    lis = []\n    for i in range(n):\n        l = [int(i) for i in input().split()]\n        lis.append(l[1:])\n        for j in l[1:]:\n            if dic.get(j) == None:\n                dic[j] = 1\n            else:\n                dic[j] += 1\n    ok = False\n    for i in lis:\n        fl = 1\n        for j in i:\n            if dic[j] == 1:\n                fl = 0\n                break\n        if fl == 1:\n            ok = True\n    print('Yes') if ok else print('No')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    d = {}\n    for _ in range(n):\n        k = list(map(int, input().split()))\n        del k[0]\n        arr.append(k)\n        for i in k:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n    for i in arr:\n        ans = True\n        for j in i:\n            if d[j] <= 1:\n                ans = False\n        if ans:\n            print('Yes')\n            break\n    if not ans:\n        print('No')", "from collections import defaultdict\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        counts = defaultdict(lambda : 0)\n        vv = list()\n        for i in range(n):\n            k_list = list(map(int, input().split(' ')[1:]))\n            vv.append(k_list)\n            for k in k_list:\n                counts[k] += 1\n        for v in vv:\n            all = True\n            for i in v:\n                if counts[i] == 1:\n                    all = False\n            if all:\n                print('Yes')\n                break\n        if not all:\n            print('No')\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    f = []\n    new = []\n    for i in range(n):\n        a = list(map(int, input().split()))\n        if len(a) >= 2:\n            for j in range(1, len(a)):\n                new.append([a[j], i + 1])\n        else:\n            new.append([a[-1], i + 1])\n    new.sort()\n    if n == 1:\n        print('No')\n    else:\n        for i in range(1, len(new) - 1):\n            if new[i][0] != new[i + 1][0] and new[i][0] != new[i - 1][0]:\n                f.append(new[i][1])\n        if new[0][0] != new[1][0]:\n            f.append(new[0][1])\n        if new[-1][0] != new[-2][0]:\n            f.append(new[-1][1])\n        f = list(set(f))\n        ans = 0\n        for i in range(len(f)):\n            if f[i] == i + 1:\n                ans += 1\n        if ans == n:\n            print('No')\n        else:\n            print('Yes')", "for _ in range(int(input())):\n    n = int(input())\n    v = []\n    dic = {}\n    for i in range(n):\n        v.append(list(input().split())[1:])\n    for i in v:\n        for j in i:\n            if j not in dic:\n                dic[j] = 0\n            dic[j] += 1\n    flag = True\n    for i in v:\n        m = float('+inf')\n        for j in i:\n            m = min(m, dic[j])\n        if m > 1:\n            flag = False\n            break\n    if flag:\n        print('No')\n    else:\n        print('Yes')", "for _ in ' ' * int(input()):\n    e = {}\n    d = int(input())\n    c = [[] for _ in ' ' * d]\n    for i in range(d):\n        for b in map(int, input().split()[1:]):\n            c[i].append(b)\n            e[b] = e.get(b, 0) + 1\n    for j in range(d):\n        f = False\n        for a in c[j]:\n            if e[a] == 1:\n                f = True\n                break\n        if not f:\n            print('Yes')\n            break\n    else:\n        print('No')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = []\n    cnt = {}\n    for _ in range(n):\n        line = input().strip().split()\n        nums.append([int(v) for v in line[1:]])\n        for v in nums[-1]:\n            cnt[v] = cnt.get(v, 0) + 1\n    yes = False\n    for cand in nums:\n        if all((cnt[v] > 1 for v in cand)):\n            yes = True\n            break\n    print('Yes' if yes else 'No')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = []\n    cnt = {}\n    for _ in range(n):\n        line = input().strip().split()\n        nums.append([int(v) for v in line[1:]])\n        for v in nums[-1]:\n            cnt[v] = cnt.get(v, 0) + 1\n    yes = False\n    for cand in nums:\n        if all((cnt[v] > 1 for v in cand)):\n            yes = True\n            break\n    print('Yes' if yes else 'No')", "def inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\ntests = inp()\nfor i in range(tests):\n    length = inp()\n    arr = []\n    freq_hashmap = {}\n    for _ in range(length):\n        temp = inlt()[1:]\n        arr.append(temp)\n        for j in temp:\n            if j in freq_hashmap:\n                freq_hashmap[j] += 1\n            else:\n                freq_hashmap[j] = 1\n    ans = 'No'\n    for element in arr:\n        min_freq = 10 ** 9\n        for bit in element:\n            min_freq = min(min_freq, freq_hashmap[bit])\n        if min_freq > 1:\n            ans = 'Yes'\n            break\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (bitsdict, bitslist) = ({}, [])\n    k = int(input())\n    for _ in range(k):\n        bitset = [int(x) for x in input().split(' ')][1:]\n        bitslist.append(bitset)\n        for bit in bitset:\n            if bitsdict.get(bit, False):\n                bitsdict[bit] += 1\n            else:\n                bitsdict[bit] = 1\n    flag = False\n    for bitset in bitslist:\n        if any((bitsdict[bit] == 1 for bit in bitset)):\n            continue\n        else:\n            flag = True\n            break\n    if flag:\n        print('Yes')\n    else:\n        print('No')", "import sys, os\nif os.getlogin() == 'arun':\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nfrom collections import defaultdict\nimport math\nimport heapq\nfor _ in range(int(input())):\n    n = int(input())\n    values = []\n    d = defaultdict(lambda : 0)\n    for i in range(n):\n        lt = list(map(int, input().split()))\n        for x in lt[1:]:\n            d[x] += 1\n        values.append(lt[1:])\n    fin = True\n    for x in values:\n        bo = True\n        for y in x:\n            if d[y] == 1:\n                bo = False\n                break\n        if bo:\n            fin = False\n            print('Yes')\n            break\n    if fin:\n        print('No')", "from collections import defaultdict\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    c = []\n    for i in range(n):\n        p = list(map(int, input().split()))\n        c.append(p[1:])\n    dic = defaultdict(int)\n    for li in c:\n        for val in li:\n            dic[val] = dic[val] + 1\n    cnt = 0\n    for li in c:\n        fnd = 0\n        for val in li:\n            if dic[val] == 1:\n                cnt = cnt + 1\n                fnd = 1\n                break\n    if cnt == len(c):\n        print('No')\n    else:\n        print('Yes')", "from collections import defaultdict\nT = int(input())\nD = defaultdict(int)\nfor t in range(T):\n    N = int(input())\n    A = [list(map(int, input().split())) for _ in range(N)]\n    for a in A:\n        for k in a[1:]:\n            D[k] += 1\n    ok = False\n    for a in A:\n        flag = True\n        for k in a[1:]:\n            if D[k] < 2:\n                flag = False\n                break\n        if flag:\n            ok = True\n            break\n    if ok:\n        print('Yes')\n    else:\n        print('No')\n    D.clear()", "def solution() -> None:\n    n = int(input())\n    arr = [[] for _ in range(n)]\n    count = {}\n    for i in range(n):\n        arr[i] = list(map(int, input().split()[1:]))\n        for j in range(len(arr[i])):\n            count[arr[i][j]] = count.get(arr[i][j], 0) + 1\n    for i in range(n):\n        for j in range(len(arr[i])):\n            if count[arr[i][j]] == 1:\n                break\n        else:\n            print('Yes')\n            return\n    print('No')\nfor _ in range(int(input())):\n    solution()", "from collections import defaultdict\ntests = int(input())\nfor test in range(tests):\n    arr_len = int(input())\n    all_cnt = defaultdict(lambda : 0)\n    all_set = set()\n    for i in range(arr_len):\n        a = list(map(int, input().split()))\n        b = a[1:]\n        for j in b:\n            if all_cnt[j] == 0:\n                all_cnt[j] = (1, i + 1)\n            else:\n                all_cnt[j] = 2\n    for i in all_cnt.values():\n        if i != 2:\n            all_set.add(i)\n    if len(all_set) == arr_len:\n        print('No')\n    else:\n        print('Yes')", "def makichut():\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            if d[l[i][j]] < 2:\n                break\n        else:\n            return 'Yes'\n    return 'No'\nfor i in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        a = list(map(int, input().split()))\n        l.append(a[1:])\n    d = {}\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            d[l[i][j]] = 0\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            d[l[i][j]] += 1\n    print(makichut())", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    ll = []\n    a = defaultdict(lambda : [0 for i in range(2)])\n    for i in range(n):\n        ll.append(list(map(int, input().split()))[1:])\n        for j in range(len(ll[i])):\n            a[ll[i][j]][0] += 1\n            if a[ll[i][j]][0] == 1:\n                a[ll[i][j]][1] = i\n    s = set()\n    for item in a:\n        if a[item][0] == 1:\n            s.add(a[item][1])\n    if len(s) == n:\n        print('No')\n    else:\n        print('Yes')", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    ll = []\n    a = defaultdict(lambda : [0 for i in range(2)])\n    for i in range(n):\n        ll.append(list(map(int, input().split()))[1:])\n        for j in range(len(ll[i])):\n            a[ll[i][j]][0] += 1\n            if a[ll[i][j]][0] == 1:\n                a[ll[i][j]][1] = i\n    s = set()\n    for item in a:\n        if a[item][0] == 1:\n            s.add(a[item][1])\n    if len(s) == n:\n        print('No')\n    else:\n        print('Yes')", "from collections import *\nT = lambda : [*map(int, input().split())]\nfor _ in [0] * T()[0]:\n    b = []\n    d = Counter()\n    for _ in [0] * T()[0]:\n        b += (T()[1:],)\n        d.update(b[-1])\n    print('YNeos'[all((any((d[y] < 2 for y in z)) for z in b))::2])", "from collections import *\nR = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    a = []\n    c = Counter()\n    for _ in [0] * R()[0]:\n        a += (R()[1:],)\n        c.update(a[-1])\n    print('YNeos'[all((any((c[x] < 2 for x in y)) for y in a))::2])", "from collections import *\nR = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    a = []\n    c = Counter()\n    for _ in [0] * R()[0]:\n        a += (R()[1:],)\n        c.update(a[-1])\n    print('YNeos'[all((any((c[x] < 2 for x in y)) for y in a))::2])", "from collections import Counter\n\ndef solve():\n    n = int(input())\n    c = [list(map(int, input().split())) for i in range(n)]\n    c = [x[1:] for x in c]\n    cnt = Counter([i for sub in c for i in sub])\n    for i in range(n):\n        ok = 1\n        for x in c[i]:\n            if cnt[x] == 1:\n                ok = 0\n                break\n        if ok:\n            return 'Yes'\n    return 'No'\nt = int(input())\nfor _ in range(t):\n    print(solve())", "from collections import *\nf_gcK = lambda : [*map(int, input().split())]\nfor _ in [0] * f_gcK()[0]:\n    f_H_gd = []\n    j_kDf = Counter()\n    for _ in [0] * f_gcK()[0]:\n        f_H_gd += (f_gcK()[1:],)\n        j_kDf.update(f_H_gd[-1])\n    print('YNeos'[all((any((j_kDf[x] < 2 for x in y)) for y in f_H_gd))::2])", "from collections import *\nK = lambda : [*map(int, input().split())]\nfor _ in [0] * K()[0]:\n    a = []\n    c = Counter()\n    for _ in [0] * K()[0]:\n        a += (K()[1:],)\n        c.update(a[-1])\n    print('YNeos'[all((any((c[x] < 2 for x in y)) for y in a))::2])", "from collections import *\nR = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    a = []\n    c = Counter()\n    for _ in [0] * R()[0]:\n        a += (R()[1:],)\n        c.update(a[-1])\n    print('YNeos'[all((any((c[x] < 2 for x in y)) for y in a))::2])", "from itertools import *\nfrom collections import *\nR = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    a = [R()[1:] for _ in [0] * R()[0]]\n    c = Counter(chain(*a))\n    print('YNeos'[all((any((c[x] < 2 for x in y)) for y in a))::2])", "from collections import *\nR = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    a = []\n    c = Counter()\n    for _ in [0] * R()[0]:\n        a += (R()[1:],)\n        c.update(a[-1])\n    print('YNeos'[all((any((c[x] < 2 for x in y)) for y in a))::2])", "import itertools\nfrom collections import Counter\n\ndef solve(sets):\n    all_ctr = Counter(itertools.chain(*sets))\n    for set in sets:\n        ctr = Counter(set)\n        if all((ctr[v] < all_ctr[v] for v in ctr.keys())):\n            return True\n    return False\n\ndef run():\n    n = int(input())\n    sets = []\n    for _ in range(n):\n        sets.append([int(x) for x in input().split()][1:])\n    ans = solve(sets)\n    if ans:\n        print('Yes')\n    else:\n        print('No')\ntests_nr = int(input())\nfor _ in range(tests_nr):\n    run()"]