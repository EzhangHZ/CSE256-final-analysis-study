["import sys, math, itertools\nfrom collections import Counter, deque, defaultdict\nfrom bisect import bisect_left, bisect_right\nfrom heapq import heappop, heappush, heapify\nmod = 998244353\nINF = float('inf')\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef inpl():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef inpl_1():\n    return list(map(lambda x: int(x) - 1, sys.stdin.readline().split()))\n\ndef inplm():\n    return map(int, sys.stdin.readline().split())\n\ndef inpl_1m():\n    return map(lambda x: int(x) - 1, sys.stdin.readline().split())\n\ndef inps():\n    tmp = sys.stdin.readline()\n    return list(tmp[:len(tmp) - 1])\n\ndef inpsl(x):\n    tmp = sys.stdin.readline()\n    return list(tmp[:x])\n\ndef err(x):\n    print(x)\n    exit()\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(inp()):\n    (n, h) = inplm()\n    a = inpl()\n    a.sort()\n\n    def dfs(i, g, b, h):\n        while i < n:\n            ast = a[i]\n            if h > ast:\n                h += ast // 2\n                i += 1\n                continue\n            else:\n                break\n        if i == n:\n            return n\n        mx = i\n        if g:\n            mx = max(mx, dfs(i, g - 1, b, h * 2))\n        if b:\n            mx = max(mx, dfs(i, g, b - 1, h * 3))\n        return mx\n    print(dfs(0, 2, 1, h))", "import sys\nfrom collections import *\nsys.setrecursionlimit(10 ** 5)\nitr = (line for line in sys.stdin.read().strip().split('\\n'))\nINP = lambda : next(itr)\n\ndef ni():\n    return int(INP())\n\ndef nl():\n    return [int(_) for _ in INP().split()]\n\ndef solve(n, p, arr):\n    arr.sort()\n\n    def rec(dob, tri, i, cur, cnt):\n        while i < len(arr):\n            if cur > arr[i]:\n                cur += arr[i] // 2\n                cnt += 1\n                i += 1\n            else:\n                o = False\n                o2 = False\n                if dob < 2:\n                    one = rec(dob + 1, tri, i, cur * 2, cnt)\n                    o = True\n                if tri < 1:\n                    o2 = True\n                    two = rec(dob, tri + 1, i, cur * 3, cnt)\n                if o and o2:\n                    return max(one, two)\n                if o:\n                    return one\n                if o2:\n                    return two\n                return cnt\n        return cnt\n    print(rec(0, 0, 0, p, 0))\nt = ni()\nfor _ in range(t):\n    (n, p) = nl()\n    arr = nl()\n    solve(n, p, arr)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n\n    def F(a, b):\n        res = m\n        cnt = 0\n        i = 0\n        for x in a:\n            while res <= x:\n                if cnt < 3:\n                    res *= b[cnt]\n                else:\n                    return i\n                cnt += 1\n            res += x // 2\n            i += 1\n        return i\n    print(max(F(a, [2, 2, 3]), F(a, [2, 3, 2]), F(a, [3, 2, 2])))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n\n    def F(a, b):\n        res = m\n        cnt = 0\n        i = 0\n        for x in a:\n            while res <= x:\n                if cnt < 3:\n                    res *= b[cnt]\n                else:\n                    return i\n                cnt += 1\n            res += x // 2\n            i += 1\n        return i\n    print(max(F(a, [2, 2, 3]), F(a, [2, 3, 2]), F(a, [3, 2, 2])))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n\n    def F(a, b):\n        res = m\n        cnt = 0\n        i = 0\n        for x in a:\n            while res <= x:\n                if cnt < 3:\n                    res *= b[cnt]\n                else:\n                    return i\n                cnt += 1\n            res += x // 2\n            i += 1\n        return i\n    print(max(F(a, [2, 2, 3]), F(a, [2, 3, 2]), F(a, [3, 2, 2])))", "def cal(he, a, t, th, n, arr):\n    for i in range(a, n):\n        if he > arr[i]:\n            he += arr[i] // 2\n        elif t == 0 and th == 0:\n            return i\n        elif t == 0:\n            return cal(he * 3, i, 0, 0, n, arr)\n        elif th == 0:\n            return cal(he * 2, i, t - 1, 0, n, arr)\n        else:\n            return max(cal(he * 3, i, t, 0, n, arr), cal(he * 2, i, t - 1, th, n, arr))\n    return n\nfor jj in range(int(input())):\n    (m, h) = [int(i) for i in input().split()]\n    al = [int(i) for i in input().split()]\n    al.sort()\n    print(cal(h, 0, 2, 1, m, al))", "def solve():\n    [n, h1] = [int(n) for n in input().split()]\n    a = [int(n) for n in input().split()]\n    numA = []\n    a.sort()\n    PO = [[2, 2, 3], [2, 3, 2], [3, 2, 2]]\n    for p in PO:\n        num = 0\n        h = h1\n        for i in a:\n            while h <= i:\n                if p:\n                    h *= p.pop()\n                    continue\n                else:\n                    break\n            if h <= i:\n                continue\n            h += i // 2\n            num += 1\n        numA.append(num)\n    print(max(numA))\nfor _ in range(int(input())):\n    solve()", "def main():\n    t = int(input())\n    while t > 0:\n        ret = 0\n        (n, h) = map(int, input().split())\n        pa = list(map(int, input().split()))\n        pa.sort()\n\n        def s_seq(ss):\n            ph = h\n            indx = 0\n            while indx < n:\n                if ph > pa[indx]:\n                    ph = ph + pa[indx] // 2\n                    indx += 1\n                elif ss:\n                    ph = ph * ss.pop(0)\n                else:\n                    break\n            return indx\n        print(max(s_seq([2, 2, 3]), s_seq([2, 3, 2]), s_seq([3, 2, 2])))\n        t -= 1\nmain()", "def main():\n    t = int(input())\n    ans = ''\n    while t > 0:\n        ret = 0\n        (n, h) = map(int, input().split())\n        pa = list(map(int, input().split()))\n        pa.sort()\n\n        def s_seq(ss):\n            ph = h\n            indx = 0\n            while indx < n:\n                if ph > pa[indx]:\n                    ph = ph + pa[indx] // 2\n                    indx += 1\n                elif ss:\n                    ph = ph * ss.pop(0)\n                else:\n                    break\n            return indx\n        ans = ans + str(max(s_seq([2, 2, 3]), s_seq([2, 3, 2]), s_seq([3, 2, 2]))) + '\\n'\n        t -= 1\n    print(ans)\nmain()", "def calc():\n    (n, h) = [int(el) for el in input().split()]\n    arr = [int(el) for el in input().split()]\n    arr.sort()\n    ans = 0\n    tmp = [[2, 2, 3, 1], [2, 3, 2, 1], [3, 2, 2, 1]]\n    for j in range(3):\n        xx = tmp[j]\n        (cur, i) = (h, 0)\n        for el in xx:\n            while i < n and cur > arr[i]:\n                cur += arr[i] // 2\n                i += 1\n            cur *= el\n        ans = max(ans, i)\n    print(ans)\nfor _ in range(int(input())):\n    calc()", "T = int(input())\n\ndef best(h, astro, serum_order):\n    absorbed = 0\n    serum_index = 0\n    for p in astro:\n        while p >= h:\n            if serum_index == 3:\n                return absorbed\n            h *= serum_order[serum_index]\n            serum_index += 1\n        absorbed += 1\n        h += p // 2\n    return absorbed\nfor _ in range(T):\n    (n, h) = map(int, input().split())\n    astro = list(map(int, input().split()))\n    astro.sort()\n    print(max(best(h, astro, (3, 2, 2)), best(h, astro, (2, 3, 2)), best(h, astro, (2, 2, 3))))", "def solve():\n    (n, h) = map(int, input().split())\n    asts = list(map(int, input().split()))\n    asts.sort()\n    return max(strat(h, asts, [2, 2, 3]), strat(h, asts, [2, 3, 2]), strat(h, asts, [3, 2, 2]))\n\ndef strat(h, asts, serums):\n    i = 0\n    out = 0\n    n = len(asts)\n    while i < n:\n        a = asts[i]\n        if a < h:\n            h += a // 2\n            out += 1\n            i += 1\n        elif serums:\n            h *= serums.pop()\n        else:\n            break\n    return out\nfor _ in range(int(input())):\n    print(solve())", "def solve(numDouble, numTriple, h, powers, k):\n    (optimal, optimal2, optimal3) = (0, 0, 0)\n    for i in range(k, len(powers)):\n        p = powers[i]\n        if h > p:\n            h += p // 2\n            optimal += 1\n        elif numDouble <= 0 and numTriple <= 0:\n            return optimal\n        else:\n            optimal2 = 0\n            optimal3 = 0\n            if numDouble > 0:\n                optimal2 = solve(numDouble - 1, numTriple, h * 2, powers, i)\n            if numTriple > 0:\n                optimal3 = solve(numDouble, numTriple - 1, h * 3, powers, i)\n            optimal += max(optimal2, optimal3)\n            break\n    return optimal\nt = int(input())\nfor i in range(t):\n    (n, h) = (int(i) for i in input().split(' '))\n    powers = [int(i) for i in input().split(' ')]\n    assert len(powers) == n\n    powers = sorted(powers)\n    print(solve(2, 1, h, powers, 0))", "g1 = [2, 2, 3]\ng2 = [2, 3, 2]\ng3 = [3, 2, 2]\n\ndef find_1(ls, n, h):\n    j = i = 0\n    while j <= 3 and i < n:\n        while i < n and ls[i] < h:\n            h += ls[i] // 2\n            i += 1\n        if j < 3 and i < n:\n            h *= g1[j]\n            j += 1\n        else:\n            break\n    return i\n\ndef find_2(ls, n, h):\n    j = i = 0\n    while j <= 3 and i < n:\n        while i < n and ls[i] < h:\n            h += ls[i] // 2\n            i += 1\n        if i == n:\n            break\n        if j < 3:\n            h *= g2[j]\n            j += 1\n        else:\n            break\n    return i\n\ndef find_3(ls, n, h):\n    j = i = 0\n    while j <= 3 and i < n:\n        while i < n and ls[i] < h:\n            h += ls[i] // 2\n            i += 1\n        if i == n:\n            break\n        if j < 3:\n            h *= g3[j]\n            j += 1\n        else:\n            break\n    return i\nt = int(input())\nfor i in range(t):\n    (n, h) = map(int, input().split())\n    ls = list(map(int, input().split()))\n    ls.sort()\n    print(max(find_1(ls, n, h), find_2(ls, n, h), find_3(ls, n, h)))", "import math\n\ndef mxeat(arr, n, h, ng, nb, ind):\n    if ind >= n:\n        return 0\n    ans = 0\n    while ind < n and arr[ind] < h:\n        h += math.floor(arr[ind] / 2)\n        ans += 1\n        ind += 1\n    a1 = 0\n    a2 = 0\n    if ind < n:\n        if ng > 0:\n            a1 = mxeat(arr, n, h * 2, ng - 1, nb, ind)\n        if nb > 0:\n            a2 = mxeat(arr, n, h * 3, ng, nb - 1, ind)\n    ans += max(a1, a2)\n    return ans\ntem = int(input())\nfor i in range(tem):\n    l1 = input().split()\n    l2 = input().split()\n    arr = []\n    n = int(l1[0])\n    h = int(l1[1])\n    for i in range(n):\n        arr.append(int(l2[i]))\n    arr.sort()\n    print(mxeat(arr, n, h, 2, 1, 0))", "def func(f, s, t, n, h, a):\n    ans = 0\n    i = 0\n    while i < n:\n        if h > a[i]:\n            ans += 1\n            h += a[i] // 2\n        elif f != 0:\n            h = h * f\n            f = 0\n            i -= 1\n        elif s != 0:\n            h = h * s\n            s = 0\n            i -= 1\n        elif t != 0:\n            h = h * t\n            t = 0\n            i -= 1\n        i += 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, h) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    print(max(func(3, 2, 2, n, h, a), func(2, 2, 3, n, h, a), func(2, 3, 2, n, h, a)))", "from functools import lru_cache\nimport sys\nsys.setrecursionlimit(10000)\n\ndef read_int():\n    return [int(x) for x in input().split()]\n\ndef solve(n, h, a):\n    res = -1\n    for strat in [[2, 2, 3], [2, 3, 2], [3, 2, 2]]:\n        ss = 0\n        power = h\n        eaten = 0\n        for ii in range(n):\n            if power <= a[ii]:\n                while ss < len(strat):\n                    power *= strat[ss]\n                    ss += 1\n                    if power > a[ii]:\n                        break\n            if power > a[ii]:\n                power += a[ii] // 2\n                eaten += 1\n            else:\n                break\n        res = max(res, eaten)\n    return res\nT = read_int()[0]\nfor _ in range(T):\n    (n, h) = read_int()\n    a = read_int()\n    a = sorted(a)\n    print(solve(n, h, a))", "def hunt(power, score):\n    astro = astronauts[:len(astronauts) - score]\n    while astro:\n        prey = astro.pop()\n        if power > prey:\n            score += 1\n            power += prey // 2\n        else:\n            break\n    return (power, score)\nnum_of_cases = int(input())\nblue = lambda loc: (dplist[loc[0] - 1][loc[1]][0] * 3, dplist[loc[0] - 1][loc[1]][1])\ngreen = lambda loc: (dplist[loc[0]][loc[1] - 1][0] * 2, dplist[loc[0]][loc[1] - 1][1])\ndecide = lambda loc: sorted([hunt(*blue(loc)), hunt(*green(loc))], key=lambda t: (t[1], t[0]))[1]\nfor case in range(num_of_cases):\n    h = int(input().split()[1])\n    astronauts = list(map(int, input().split()))\n    astronauts.sort(reverse=True)\n    dplist = [[(0, 0) for j in range(4)] for i in range(3)]\n    dplist[1][1] = hunt(h, 0)\n    for i in range(1, 3):\n        for j in range(1, 4):\n            if i > 1 or j > 1:\n                dplist[i][j] = decide((i, j))\n    print(dplist[-1][-1][1])", "t = int(input())\n\ndef solve():\n    (n, h) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    x = h\n    score1 = 0\n    score2 = 0\n    score3 = 0\n    k = 0\n    i = 0\n    while i < n:\n        if arr[i] < h:\n            h += arr[i] // 2\n            score1 += 1\n            i += 1\n        elif k == 0:\n            h *= 2\n            k += 1\n        elif k == 1:\n            h *= 2\n            k += 1\n        elif k == 2:\n            h *= 3\n            k += 1\n        else:\n            break\n    i = 0\n    k = 0\n    h = x\n    while i < n:\n        if arr[i] < h:\n            h += arr[i] // 2\n            score2 += 1\n            i += 1\n        elif k == 0:\n            h *= 3\n            k += 1\n        elif k == 1:\n            h *= 2\n            k += 1\n        elif k == 2:\n            h *= 2\n            k += 1\n        else:\n            break\n    i = 0\n    k = 0\n    h = x\n    while i < n:\n        if arr[i] < h:\n            h += arr[i] // 2\n            score3 += 1\n            i += 1\n        elif k == 0:\n            h *= 2\n            k += 1\n        elif k == 1:\n            h *= 3\n            k += 1\n        elif k == 2:\n            h *= 2\n            k += 1\n        else:\n            break\n    print(max(score1, score2, score3))\nwhile t:\n    solve()\n    t -= 1", "def solve(n, h, arr, serium):\n    arr.sort()\n    green = 2\n    blue = 1\n    count = 0\n    i = 0\n    while i < n:\n        if h <= arr[i]:\n            if serium:\n                h *= serium.pop()\n            else:\n                break\n        else:\n            h = h + arr[i] // 2\n            i += 1\n            count += 1\n    return count\nfor _ in range(int(input())):\n    (n, h) = map(int, input().split())\n    li = list(map(int, input().split()))\n    print(max(solve(n, h, li, [2, 2, 3]), solve(n, h, li, [2, 3, 2]), solve(n, h, li, [3, 2, 2])))\npass", "T = int(input())\nposs = ((2, 2, 3), (2, 3, 2), (3, 2, 2))\nfor _ in range(T):\n    (n, rawh) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    m = []\n    for s in poss:\n        hum = 0\n        ct = 0\n        h = rawh\n        for p in a:\n            while h <= p and ct <= 2:\n                h *= s[ct]\n                ct += 1\n            if h <= p and ct == 3:\n                break\n            h += p // 2\n            hum += 1\n        m.append(hum)\n    print(max(m))", "list1 = ((2, 2, 3), (2, 3, 2), (3, 2, 2))\nfor i in range(int(input())):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    m = []\n    for s in list1:\n        hum = 0\n        ct = 0\n        h = r\n        for p in a:\n            while h <= p and ct <= 2:\n                h *= s[ct]\n                ct += 1\n            if h <= p and ct == 3:\n                break\n            h += p // 2\n            hum += 1\n        m.append(hum)\n    print(max(m))", "import os\nimport math\nimport collections\nimport bisect\nimport functools\nimport itertools\nimport heapq\nfrom collections import deque\n\ndef solve(a, n, h):\n    a.sort()\n\n    def f(i, h, s):\n        while i < n:\n            if h > a[i]:\n                h += a[i] // 2\n                i += 1\n                continue\n            if s:\n                h *= s.pop()\n            else:\n                break\n        return i\n    return max(f(0, h, [3, 2, 2]), f(0, h, [2, 3, 2]), f(0, h, [2, 2, 3]))\nt = int(input())\nfor _ in range(t):\n    (n, h) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(a, n, h))", "test = int(input())\nwhile test:\n    test -= 1\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    ls = [[0, 1, 1], [1, 0, 1], [1, 1, 0]]\n    mx = 0\n    for x in ls:\n        s = 0\n        l = 0\n        temp = m\n        for i in a:\n            while i >= temp:\n                if l < 3:\n                    if x[l] == 1:\n                        temp *= 2\n                    else:\n                        temp *= 3\n                    l += 1\n                if l == 3:\n                    break\n            if i < temp:\n                s += 1\n                temp += i // 2\n        mx = max(mx, s)\n    print(mx)", "t = int(input(''))\nC = [0] * t\nfor i in range(t):\n    LRX = input('').split(' ')\n    n = int(LRX[0])\n    h0 = int(LRX[1])\n    A = sorted([int(x) for x in input('').split(' ')])\n    s = 0\n    for j in range(3):\n        h = h0\n        k = 0\n        for z in range(4):\n            while k < n and h > A[k]:\n                h += A[k] // 2\n                k += 1\n            if z == j:\n                h *= 3\n            else:\n                h *= 2\n        s = max(s, k)\n    C[i] = s\nfor j in C:\n    print(j)", "t = int(input())\nfor _ in range(t):\n    (n, h0) = map(int, input().split())\n    L = list(map(int, input().split()))\n    L.sort()\n    res = 0\n    for ks in [[2, 2, 3], [2, 3, 2], [3, 2, 2]]:\n        i = 0\n        h = h0\n        x = 0\n        while i != n:\n            if L[i] < h:\n                h += L[i] // 2\n                i += 1\n            else:\n                if x == 3:\n                    break\n                h *= ks[x]\n                x += 1\n        res = max(res, i)\n    print(res)", "import math\nimport sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nfor _ in range(int(input())):\n    (n, h) = invr()\n    oarr = inlt()\n    arr = [x for x in oarr if x != 1]\n    checks = [[2, 2, 3, 0, h, 0, True], [2, 3, 2, 0, h, 0, True], [3, 2, 2, 0, h, 0, True]]\n    arr.sort()\n    for human in arr:\n        for check in checks:\n            if check[6]:\n                if human >= check[4]:\n                    while human >= check[4]:\n                        if check[3] == 3:\n                            check[6] = False\n                            break\n                        check[4] *= check[check[3]]\n                        check[3] += 1\n                    if human < check[4]:\n                        check[5] += 1\n                        check[4] += human // 2\n                else:\n                    check[5] += 1\n                    check[4] += human // 2\n    i = 0\n    for j in checks:\n        i = max(i, j[5])\n    print(i + oarr.count(1))", "t = int(input())\nfor _ in range(t):\n    (n, h) = map(int, input().split())\n    nums = [int(x) for x in input().split()]\n    nums.sort()\n    h_start = h\n    possible = [['g', 'g', 'b'], ['g', 'b', 'g'], ['b', 'g', 'g']]\n    found = -1\n    for order in possible:\n        h = h_start\n        serum = 0\n        i = 0\n        while i < n:\n            if nums[i] < h:\n                h += nums[i] // 2\n                i += 1\n            else:\n                if serum == 3:\n                    break\n                if order[serum] == 'g':\n                    h *= 2\n                else:\n                    h *= 3\n                serum += 1\n        found = max(found, i)\n    print(found)", "tests = int(input())\nfor test in range(tests):\n    pot = [[3, 2, 2], [2, 3, 2], [2, 2, 3]]\n    (rangersCount, energy0) = map(int, input().split())\n    rangers0 = list(map(int, input().split()))\n    rangers0.sort()\n    ans = [0, 0, 0]\n    for i in pot:\n        rangers = rangers0\n        energy = energy0\n        potions = i\n        potion = 0\n        rangerIndex = 0\n        while rangerIndex < rangersCount:\n            ranger = rangers[rangerIndex]\n            if energy > ranger:\n                energy += int(ranger / 2)\n                rangerIndex += 1\n            else:\n                if potion == 3:\n                    break\n                energy *= potions[potion]\n                potion += 1\n        ans.append(rangerIndex)\n    print(max(ans))", "t = int(input(''))\nC = [0] * t\nfor i in range(t):\n    lrx = input('').split(' ')\n    n = int(lrx[0])\n    h0 = int(lrx[1])\n    A = sorted([int(x) for x in input('').split(' ')])\n    s = 0\n    for j in range(3):\n        h = h0\n        k = 0\n        for z in range(4):\n            while k < n and h > A[k]:\n                h += A[k] // 2\n                k += 1\n            if z == j:\n                h *= 3\n            else:\n                h *= 2\n        s = max(s, k)\n    C[i] = s\nfor j in C:\n    print(j)", "for t in range(int(input())):\n    (n, h) = map(int, input().split())\n    lives = sorted(list(map(int, input().split())))\n    powers = [2, 2, 3]\n    ans1 = i = 0\n    h1 = h\n    while i < n:\n        if lives[i] < h1:\n            ans1 += 1\n            h1 += lives[i] // 2\n            i += 1\n        elif powers:\n            if powers.pop() == 3:\n                h1 *= 3\n            else:\n                h1 *= 2\n        else:\n            break\n    powers = [2, 3, 2]\n    ans2 = i = 0\n    h2 = h\n    while i < n:\n        if lives[i] < h2:\n            ans2 += 1\n            h2 += lives[i] // 2\n            i += 1\n        elif powers:\n            if powers.pop() == 3:\n                h2 *= 3\n            else:\n                h2 *= 2\n        else:\n            break\n    powers = [3, 2, 2]\n    ans3 = i = 0\n    h3 = h\n    while i < n:\n        if lives[i] < h3:\n            ans3 += 1\n            h3 += lives[i] // 2\n            i += 1\n        elif powers:\n            if powers.pop() == 3:\n                h3 *= 3\n            else:\n                h3 *= 2\n        else:\n            break\n    print(max(ans1, ans2, ans3))", "t = int(input())\nfor i in range(t):\n    (n, h) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    kill1 = 0\n    kill2 = 0\n    kill3 = 0\n    j = 0\n    s = [2, 2, 3]\n    s2 = [2, 3, 2]\n    si = 0\n    xh = h\n    while j < n:\n        if h <= a[j]:\n            if si < 3:\n                h = h * s[si]\n                si += 1\n                if h > a[j]:\n                    h = h + a[j] // 2\n                    kill1 += 1\n                    j += 1\n            else:\n                break\n        else:\n            h = h + a[j] // 2\n            kill1 += 1\n            j += 1\n    h = xh\n    j = 0\n    si = 2\n    while j < n:\n        if h <= a[j]:\n            if si > -1:\n                h = h * s[si]\n                si -= 1\n                if h > a[j]:\n                    h = h + a[j] // 2\n                    kill2 += 1\n                    j += 1\n            else:\n                break\n        else:\n            h = h + a[j] // 2\n            kill2 += 1\n            j += 1\n    h = xh\n    j = 0\n    si = 0\n    while j < n:\n        if h <= a[j]:\n            if si < 3:\n                h = h * s2[si]\n                si += 1\n                if h > a[j]:\n                    h = h + a[j] // 2\n                    kill3 += 1\n                    j += 1\n            else:\n                break\n        else:\n            h = h + a[j] // 2\n            kill3 += 1\n            j += 1\n    print(max(kill1, kill2, kill3))", "t = int(input())\nwhile t > 0:\n    (n, h) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a.sort()\n    order = [3, 2, 2]\n    case1 = h\n    ans1 = 0\n    for i in range(n):\n        while case1 <= a[i] and len(order) > 0:\n            case1 = case1 * order.pop()\n        if case1 > a[i]:\n            case1 = case1 + a[i] // 2\n            ans1 += 1\n        else:\n            break\n    order = [2, 3, 2]\n    case2 = h\n    ans2 = 0\n    for i in range(n):\n        while case2 <= a[i] and len(order) > 0:\n            case2 = case2 * order.pop()\n        if case2 > a[i]:\n            case2 = case2 + a[i] // 2\n            ans2 += 1\n        else:\n            break\n    order = [2, 2, 3]\n    case3 = h\n    ans3 = 0\n    for i in range(n):\n        while case3 <= a[i] and len(order) > 0:\n            case3 = case3 * order.pop()\n        if case3 > a[i]:\n            case3 = case3 + a[i] // 2\n            ans3 += 1\n        else:\n            break\n    print(max(max(ans1, ans2), ans3))\n    t -= 1", "T = int(input())\nfor _ in range(T):\n    (N, H) = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n    serum = [[2, 2, 3], [2, 3, 2], [3, 2, 2]]\n    ans = 0\n    for s in serum:\n        h = H\n        lans = 0\n        si = 0\n        ai = 0\n        while True:\n            a = A[ai]\n            if a < h:\n                h += a // 2\n                lans += 1\n                if lans == N:\n                    break\n                ai += 1\n            else:\n                if si == 3:\n                    break\n                h *= s[si]\n                si += 1\n        ans = max(ans, lans)\n    print(ans)", "from functools import lru_cache\nimport sys\nimport threading\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, h) = map(int, input().split())\n        health = list(map(int, input().split()))\n        health.sort()\n\n        @lru_cache\n        def dp(idx, h, g, b):\n            if idx == n:\n                return 0\n            if h > health[idx]:\n                return dp(idx + 1, h + health[idx] // 2, g, b) + 1\n            res = 0\n            if g:\n                res = max(res, dp(idx, h * 2, g - 1, b))\n            if b:\n                res = max(res, dp(idx, h * 3, g, b - 1))\n            return res\n        print(dp(0, h, 2, 1))\nsys.setrecursionlimit(1 << 30)\nthreading.stack_size(1 << 27)\nmain_thread = threading.Thread(target=main)\nmain_thread.start()\nmain_thread.join()", "t = int(input())\nfor _ in range(t):\n    (n, h) = map(int, input().split())\n    L0 = list(map(int, input().split()))\n    L = sorted(L0)\n    count = 0\n    for l in range(3):\n        H = h\n        ct = 0\n        i0 = 0\n        for p in range(4):\n            while i0 < n and L[i0] < H:\n                H += L[i0] // 2\n                ct += 1\n                i0 += 1\n            if p == l:\n                H *= 3\n            else:\n                H *= 2\n        count = max(count, ct)\n    print(count)", "for i in range(int(input())):\n    (n, h) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    q = [[2, 2, 3], [2, 3, 2], [3, 2, 2]]\n    maxAns = 0\n    for j in range(3):\n        index = 0\n        tempH = h\n        ans = 0\n        k = 0\n        while k < n:\n            if a[k] < tempH:\n                tempH += a[k] // 2\n                ans += 1\n                k += 1\n            else:\n                if index == 3:\n                    break\n                tempH *= q[j][index]\n                index += 1\n        maxAns = max(ans, maxAns)\n    print(maxAns)", "t = int(input())\nfor i in range(t):\n    (n, h) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    number = 0\n    for i in range(3):\n        h0 = 0\n        num = 0\n        serum = 3\n        h1 = h\n        while h0 < n and serum >= 0:\n            if a[h0] < h1:\n                num += 1\n                h1 += int(a[h0]) // 2\n                h0 += 1\n                continue\n            if a[h0] >= h1:\n                if serum == i + 1:\n                    h1 = 3 * h1\n                    serum -= 1\n                    continue\n                else:\n                    h1 = 2 * h1\n                    serum -= 1\n                    continue\n        number = max(num, number)\n    print(number)", "import sys\nsys.setrecursionlimit(10 ** 7)\nfrom heapq import heappop, heappush\nfrom collections import deque, defaultdict, Counter\nfrom bisect import bisect_left, bisect_right\nfrom itertools import product, combinations, permutations\nfrom math import sin, cos\nipt = sys.stdin.readline\niin = lambda : int(ipt())\nlmin = lambda : list(map(int, ipt().split()))\nfor _ in range(iin()):\n    (N, H) = lmin()\n    A = lmin()\n    A.sort()\n    ma = 0\n    for p in permutations((2, 2, 3), 3):\n        q = list(p)\n        h = H\n        ans = 0\n        for i in range(N):\n            if h > A[i]:\n                h += A[i] // 2\n            else:\n                while q and h <= A[i]:\n                    h *= q.pop()\n                if not q and h <= A[i]:\n                    ans = i\n                    break\n                h += A[i] // 2\n        else:\n            ans = N\n        ma = max(ma, ans)\n    print(ma)", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(200000)\nfor _ in range(int(input())):\n    (N, H) = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n    v = [(0, 2, 1, H, 0)]\n    ans = 0\n    while v:\n        (idx, green, blue, power, cnt) = v.pop()\n        ans = max(ans, cnt)\n        if idx >= N:\n            continue\n        if power > A[idx]:\n            v.append((idx + 1, green, blue, power + A[idx] // 2, cnt + 1))\n        else:\n            if green > 0 and power * 2 > A[idx]:\n                v.append((idx + 1, green - 1, blue, power * 2 + A[idx] // 2, cnt + 1))\n            if green > 1 and power * 4 > A[idx]:\n                v.append((idx + 1, green - 2, blue, power * 4 + A[idx] // 2, cnt + 1))\n            if blue > 0 and power * 3 > A[idx]:\n                v.append((idx + 1, green, 0, power * 3 + A[idx] // 2, cnt + 1))\n            if green and blue and (power * 6 > A[idx]):\n                v.append((idx + 1, green - 1, 0, power * 6 + A[idx] // 2, cnt + 1))\n            if green == 2 and blue and (power * 12 > A[idx]):\n                v.append((idx + 1, 0, 0, power * 12 + A[idx] // 2, cnt + 1))\n    print(ans)"]