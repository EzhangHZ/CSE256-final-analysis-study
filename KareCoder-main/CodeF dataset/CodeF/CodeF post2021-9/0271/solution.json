["def foo(s):\n    hm = {}\n    for ele in s:\n        if ele not in hm:\n            hm[ele] = 1\n        else:\n            hm[ele] += 1\n    hm_l = {}\n    hm_r = {}\n    maxCount = 0\n    count = 0\n    for (i, ele) in enumerate(s):\n        if count >= maxCount:\n            maxCount = count\n        if ele not in hm_l:\n            hm_l[ele] = 1\n            hm[ele] -= 1\n            if hm[ele] == 0:\n                hm.pop(ele)\n        else:\n            hm_l[ele] += 1\n            hm[ele] -= 1\n            if hm[ele] == 0:\n                hm.pop(ele)\n        count = len(hm_l) + len(hm)\n    print(maxCount)\nn = int(input())\nls = []\nfor _ in range(n):\n    x = int(input())\n    ls.append(input())\nfor ele in ls:\n    foo(ele)", "def solve():\n    n = int(input())\n    s = input()\n    pref = [0] * n\n    d = set()\n    for i in range(n):\n        d.add(s[i])\n        pref[i] = len(d)\n    d = set()\n    ans = 0\n    for i in range(n - 1, 0, -1):\n        d.add(s[i])\n        ans = max(ans, len(d) + pref[i - 1])\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys, math, cmath, time\nfrom bisect import bisect_left\nstart_time = time.time()\n\ndef solve():\n    n = inp()\n    s = input().strip()\n    d = {}\n    ans = -1\n    for i in s:\n        d[i] = d.get(i, 0) + 1\n    d1 = {}\n    for (k, i) in enumerate(s):\n        d[i] -= 1\n        d1[i] = d1.get(i, 0) + 1\n        if d[i] == 0:\n            del d[i]\n        ans = max(ans, len(d1) + len(d))\n    print(ans)\n\ndef main():\n    testcases = 1\n    testcases = inp()\n    for each_testcase in range(testcases):\n        solve()\n\ndef inp():\n    return int(input())\n\ndef inps():\n    return input().split()\nONLINE_JUDGE = __debug__\nif ONLINE_JUDGE:\n    input = sys.stdin.readline\nmain()", "import sys\n\ndef answer():\n    pass\n\ndef solution():\n    n = int(input())\n    s = input()\n    d = dict()\n    for i in s:\n        d[i] = d.get(i, 0) + 1\n    ans = len(d.items())\n    tmp = ans\n    t = dict()\n    for i in s:\n        t[i] = t.get(i, 0) + 1\n        d[i] -= 1\n        if t[i] == 1:\n            tmp += 1\n        if d[i] == 0:\n            tmp -= 1\n        if ans < tmp:\n            ans = tmp\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solution()", "def solve():\n    t = int(input())\n    while t != 0:\n        s = ''\n        n = int(input())\n        s = str(input())\n        mx = 0\n        d = {}\n        d_rev = {}\n        st = set()\n        st.clear()\n        for i in range(n):\n            st.add(s[i])\n            d[i] = len(st)\n        st.clear()\n        for i in reversed(range(n)):\n            st.add(s[i])\n            d_rev[i] = len(st)\n        for i in range(n - 1):\n            ans = d[i] + d_rev[i + 1]\n            if ans > mx:\n                mx = ans\n        print(mx)\n        t -= 1\nsolve()", "def max_score(n, s):\n    right = [0] + [0] * n\n    cur_set = set()\n    for i in reversed(range(n)):\n        cur_set.add(s[i])\n        right[i] = len(cur_set)\n    cur_set = set()\n    ans = 0\n    for i in range(n):\n        cur_set.add(s[i])\n        ans = max(ans, len(cur_set) + right[i + 1])\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    print(max_score(n, s))", "def func(n, s):\n    m = 0\n    firstDict = {}\n    otherDict = {}\n    firstLen = 0\n    secLen = 0\n    for i in s:\n        if i in firstDict:\n            firstDict[i] += 1\n        else:\n            firstDict[i] = 1\n            firstLen += 1\n    for i in s:\n        if i in otherDict:\n            otherDict[i] += 1\n        else:\n            otherDict[i] = 1\n            secLen += 1\n        if firstDict[i] == 1:\n            firstLen -= 1\n        if firstDict[i] > 0:\n            firstDict[i] -= 1\n        m = max(firstLen + secLen, m)\n    print(m)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    func(n, s)", "def func(n, s):\n    m = 0\n    firstDict = {}\n    otherDict = {}\n    firstLen = 0\n    secLen = 0\n    for i in s:\n        if i in firstDict:\n            firstDict[i] += 1\n        else:\n            firstDict[i] = 1\n            firstLen += 1\n    for i in s:\n        if i in otherDict:\n            otherDict[i] += 1\n        else:\n            otherDict[i] = 1\n            secLen += 1\n        if firstDict[i] == 1:\n            firstLen -= 1\n        if firstDict[i] > 0:\n            firstDict[i] -= 1\n        m = max(firstLen + secLen, m)\n    print(m)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    func(n, s)", "import sys\ninput = sys.stdin.readline\nf = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    N = int(input())\n    X = input().strip()\n    S = set()\n    (A, B, C) = ([], [], [])\n    for c in X:\n        S.add(c)\n        A.append(len(S))\n    S = set()\n    for c in X[::-1]:\n        S.add(c)\n        B.append(len(S))\n    B = B[::-1]\n    for i in range(N - 1):\n        C.append(A[i] + B[i + 1])\n    print(max(C))", "import sys\nsys_input = sys.stdin.readline\nsys_print = sys.stdout.write\n\ndef ctoi(c):\n    return ord(c) - 97\n\ndef single_case():\n    n = int(sys_input())\n    s = sys_input().strip()\n    pre = [0 for _ in range(26)]\n    suf = [0 for _ in range(26)]\n    n_pre = 0\n    n_suf = 0\n    pre[ctoi(s[0])] += 1\n    n_pre += 1\n    for c in s[1:]:\n        i = ctoi(c)\n        if suf[i] == 0:\n            n_suf += 1\n        suf[i] += 1\n    mx = n_pre + n_suf\n    for c in s[1:-1]:\n        i = ctoi(c)\n        if pre[i] == 0:\n            n_pre += 1\n        pre[i] += 1\n        suf[i] -= 1\n        if suf[i] == 0:\n            n_suf -= 1\n        mx = max(mx, n_pre + n_suf)\n    sys_print(f'{mx}\\n')\nt = int(sys_input())\nfor _ in range(t):\n    single_case()", "import sys\ninput = sys.stdin.readline\n\ndef dist_num(a):\n    lett_nm = ord('a')\n    answ = 0\n    for i in range(26):\n        if chr(lett_nm + i) in a:\n            answ += 1\n    return answ\n\ndef solve_d():\n    answ = 0\n    n = int(input())\n    s = input().strip()\n    answ = dist_num(s[:1]) + dist_num(s[1:])\n    my_dict = {}\n    for c in s:\n        if c not in my_dict:\n            my_dict[c] = 1\n        else:\n            my_dict[c] += 1\n    dict_2 = {}\n    for i in range(n - 1):\n        c = s[i]\n        if c not in dict_2:\n            dict_2[c] = 1\n        else:\n            dict_2[c] += 1\n        if c in my_dict:\n            if my_dict[c] == 1:\n                del my_dict[c]\n            else:\n                my_dict[c] -= 1\n        curr_answ = len(dict_2) + len(my_dict)\n        answ = max(answ, curr_answ)\n    return answ\n\ndef main():\n    for _ in range(int(input())):\n        answ = solve_d()\n        print(answ)\nmain()", "def sol(n, s):\n    right_start = 1\n    left = set(s[:right_start])\n    right = dict()\n    for c in s[right_start:]:\n        if c in right:\n            right[c] += 1\n        else:\n            right[c] = 1\n    res = len(left) + len(right)\n    for c in s[1:n - 1]:\n        left.add(c)\n        if right[c] < 2:\n            del right[c]\n        else:\n            right[c] -= 1\n        res = max(res, len(left) + len(right))\n    return res\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    print(sol(n, s))", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    p = n * [0]\n    s = input().strip()\n    a = set()\n    for (i, x) in enumerate(s):\n        a.add(x)\n        p[i] = len(a)\n    a.clear()\n    ans = 0\n    for i in range(n - 1, 0, -1):\n        a.add(s[i])\n        ans = max(ans, len(a) + p[i - 1])\n    print(ans)", "def solve(s):\n    n = len(s)\n    pref = [0] * n\n    suf = [0] * n\n    left = set()\n    right = set()\n    for i in range(n):\n        left.add(s[i])\n        pref[i] = len(left)\n    for i in range(n - 1, -1, -1):\n        right.add(s[i])\n        suf[i] = len(right)\n    ans = 0\n    for i in range(n - 1):\n        ans = max(ans, pref[i] + suf[i + 1])\n    return ans\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    s = input().strip()\n    print(solve(s))", "t = int(input())\n\ndef solve():\n    L = int(input())\n    s = input().strip('\\n')\n    (first, second) = (dict(), dict())\n    ans = 0\n    for i in range(L):\n        if s[i] not in second:\n            second[s[i]] = 1\n        else:\n            second[s[i]] += 1\n    for i in range(L):\n        letter = s[i]\n        if letter not in first:\n            first[letter] = 1\n        else:\n            first[letter] += 1\n        if second[letter] == 1:\n            del second[letter]\n        else:\n            second[letter] -= 1\n        if len(first) + len(second) > ans:\n            ans = len(first) + len(second)\n    print(ans)\nfor i in range(t):\n    solve()", "import sys\nsys.setrecursionlimit(10 ** 9)\n\ndef ds(S):\n    ans = len(set(S))\n    l1 = []\n    l2 = []\n    for j in set(S):\n        if S.count(j) != 1:\n            l1 += [S.find(j)]\n            l2 += [n - S[::-1].find(j) - 1]\n    if l1 != []:\n        l = l1 + l2\n        c = ans\n        L = list(set(l).intersection(range(max(l1) + 1)))\n        L.sort()\n        for k in L:\n            if k in l1:\n                c += 1\n                if c > ans:\n                    ans = c\n            else:\n                c -= 1\n    return ans\nfor i in range(int(input())):\n    n = int(input())\n    s = input()\n    print(ds(s))", "def func(s):\n    d = {}\n    firstCount = 0\n    secCount = 0\n    for i in s:\n        if i not in d:\n            secCount += 1\n            d[i] = [1, False]\n        else:\n            d[i][0] += 1\n    maxm = 0\n    for j in range(len(s) - 1):\n        i = s[j]\n        d[i][0] -= 1\n        if d[i][1] == False:\n            firstCount += 1\n            d[i][1] = True\n        if d[i][0] == 0:\n            secCount -= 1\n        if maxm < firstCount + secCount:\n            maxm = firstCount + secCount\n    print(maxm)\n    return\nfor _ in range(int(input())):\n    n = int(input())\n    func(input())", "def solve(n, s):\n    freqs = {}\n    for i in s:\n        freqs[i] = freqs.get(i, 0) + 1\n    currmax = len(freqs)\n    st = set()\n    for i in s:\n        st.add(i)\n        freqs[i] -= 1\n        if freqs[i] == 0:\n            del freqs[i]\n        currmax = max(currmax, len(freqs) + len(st))\n    return currmax\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    print(solve(n, s))", "def forward(n, s):\n    (match, k) = ('', 0)\n    l = [0]\n    for char in s:\n        if char not in match:\n            match = match + char\n            k += 1\n        l.append(k)\n    return l\n\ndef backward(n, s):\n    return forward(n, s[::-1])[::-1]\n\ndef add(l1, l2, n):\n    result = []\n    for i in range(n):\n        result.append(l1[i] + l2[i])\n    return result\n\ndef max_sum(n, s):\n    return max(add(forward(n, s), backward(n, s), n + 1)[1:-1])\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    print(max_sum(n, s))", "ri = lambda : int(input())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input()\n\ndef solve():\n    n = ri()\n    s = rs()\n    sf = [0] * n\n    pf = [0] * (n + 1)\n    _set = set()\n    for i in range(n):\n        _set.add(s[i])\n        sf[i] = len(_set)\n    _set = set()\n    for i in range(n - 1, -1, -1):\n        _set.add(s[i])\n        pf[i] = len(_set)\n    ans = 0\n    for i in range(n):\n        ans = max(ans, sf[i] + pf[i + 1])\n    return ans\n\ndef main():\n    for _ in range(ri()):\n        print(solve())\nmain()", "def solve():\n    n = int(input().strip())\n    str = input().strip()\n    prefix = [0] * n\n    suffix = [0] * n\n    se = set()\n    for i in range(n):\n        se.add(str[i])\n        prefix[i] = len(se)\n    se = set()\n    for i in range(n - 1, -1, -1):\n        se.add(str[i])\n        suffix[i] = len(se)\n    ans = 0\n    maxo = 0\n    for i in range(n - 1):\n        ans = prefix[i] + suffix[i + 1]\n        maxo = max(maxo, ans)\n    print(maxo)\n    return 0\ntest_cases = int(input().strip())\nfor _ in range(test_cases):\n    solve()", "class func:\n\n    def solve(self, string: str) -> int:\n        start = 1\n        length = len(string) - 1\n        stacks = []\n        while start <= length:\n            first = len(set(string[:start]))\n            second = len(set(string[start:]))\n            total = first + second\n            stacks.append(total)\n            start += 1\n        return max(stacks)\n\n    def solve_op(self, string: str) -> int:\n        sets = set()\n        prefix = [0] * len(string)\n        suffix = [0] * len(string)\n        ans = 0\n        for i in range(0, len(string)):\n            sets.add(string[i])\n            prefix[i] = len(sets)\n        sets.clear()\n        for i in range(len(string) - 1, -1, -1):\n            sets.add(string[i])\n            suffix[i] = len(sets)\n        for i in range(0, len(string) - 1):\n            ans = max(prefix[i] + suffix[i + 1], ans)\n        return ans\nobj = func()\ntcs = int(input())\nfor i in range(tcs):\n    length = int(input())\n    string = input()\n    print(obj.solve_op(string))", "def solve():\n    n = int(input().strip())\n    str = input().strip()\n    prefix = [0] * n\n    suffix = [0] * n\n    se = set()\n    for i in range(n):\n        se.add(str[i])\n        prefix[i] = len(se)\n    se.clear()\n    for i in range(n - 1, -1, -1):\n        se.add(str[i])\n        suffix[i] = len(se)\n    ans = 0\n    maxo = 0\n    for i in range(n - 1):\n        ans = prefix[i] + suffix[i + 1]\n        maxo = max(maxo, ans)\n    print(maxo)\n    return 0\ntest_case = int(input().strip())\nfor _ in range(test_case):\n    solve()", "from typing import *\nfrom collections import *\nfrom math import *\nfrom functools import *\nINF = 1061109567\n\ndef RI():\n    return int(input())\n\ndef RAI():\n    return [int(i) for i in input().split()]\n\ndef RAI_1():\n    return [INF] + RAI()\n\ndef slove():\n    n = RI()\n    s = ' ' + input()\n    f = [0] * (n + 2)\n    g = [0] * (n + 2)\n    cnt = set()\n    for i in range(1, n + 1):\n        cnt.add(s[i])\n        f[i] = len(cnt)\n    cnt = set()\n    for i in range(n, 0, -1):\n        cnt.add(s[i])\n        g[i] = len(cnt)\n    res = 0\n    for i in range(1, n + 1):\n        res = max(res, f[i] + g[i + 1])\n    print(res)\n\ndef main():\n    t = 1\n    t = RI()\n    for _ in range(t):\n        slove()\nmain()", "import os\nimport math\nimport collections\nimport bisect\nimport functools\nimport itertools\nimport heapq\n\ndef solve(a, n):\n    pre = [0] * n\n    suf = [0] * n\n    s = set()\n    for i in range(n):\n        s.add(a[i])\n        pre[i] = len(s)\n    s = set()\n    ans = 0\n    for i in range(n - 1, 0, -1):\n        s.add(a[i])\n        suf[i] = len(s)\n        ans = max(ans, suf[i] + pre[i - 1])\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input().strip()\n    print(solve(a, n))", "def dist(s, n):\n    dp = {}\n    for i in range(n - 1):\n        if s[i] in dp:\n            dp[s[i]] += 1\n        else:\n            dp[s[i]] = 1\n    ans = 1 + len(dp)\n    dp2 = {}\n    dp2[s[n - 1]] = 1\n    for j in range(n - 2, 0, -1):\n        dp[s[j]] -= 1\n        if dp[s[j]] == 0:\n            del dp[s[j]]\n        if s[j] in dp2:\n            dp2[s[j]] += 1\n        else:\n            dp2[s[j]] = 1\n        if len(dp) + len(dp2) > ans:\n            ans = len(dp) + len(dp2)\n    return ans\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    print(dist(s, n))", "def solve():\n    n = int(input())\n    s = input()\n    l_to_r_set = set(s[0])\n    l_to_r = [1]\n    for i in range(1, n):\n        l_to_r_set.add(s[i])\n        l_to_r.append(len(l_to_r_set))\n    r_to_l_set = set(s[-1])\n    r_to_l = [1]\n    for i in range(n - 2, -1, -1):\n        r_to_l_set.add(s[i])\n        r_to_l.append(len(r_to_l_set))\n    r_to_l.reverse()\n    ans = 0\n    for i in range(n - 1):\n        ans = max(ans, l_to_r[i] + r_to_l[i + 1])\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\nfrom math import *\nfrom collections import defaultdict, deque\ninput = sys.stdin.readline\nmod = 10 ** 9 + 7\nINF = 1061109567\nN = int(2 * 10 ** 5 + 5)\nLINF = 4557430888798830399\n\ndef solve():\n    n = int(input())\n    s = input()\n    cnt2 = [0] * 26\n    num2 = 0\n    for i in range(n):\n        idx = ord(s[i]) - ord('a')\n        cnt2[idx] += 1\n        if cnt2[idx] == 1:\n            num2 += 1\n    (num1, ans) = (0, 0)\n    cnt1 = [0] * 26\n    for i in range(n - 1):\n        idx = ord(s[i]) - ord('a')\n        cnt1[idx] += 1\n        if cnt1[idx] == 1:\n            num1 += 1\n        cnt2[idx] -= 1\n        if cnt2[idx] == 0:\n            num2 -= 1\n        ans = max(ans, num1 + num2)\n    print(ans)\nT = int(input())\nfor t in range(T):\n    solve()", "from collections import defaultdict\n\ndef ss():\n    c = int(input())\n    ans = 0\n    s = input()\n    a = set()\n    b = set()\n    cc = [0] * c\n    for i in reversed(range(c)):\n        b.add(s[i])\n        cc[i] = len(b)\n    for i in range(c - 1):\n        a.add(s[i])\n        ans = max(ans, len(a) + cc[i + 1])\n    print(ans)\nn = int(input())\nfor i in range(n):\n    ss()", "def split_string(s):\n    freq = {}\n    for c in s:\n        freq[c] = freq.get(c, 0) + 1\n    left_freq = {}\n    left_count = 0\n    right_freq = freq.copy()\n    right_count = len(freq)\n    max_sum = 0\n    for i in range(1, len(s)):\n        c = s[i - 1]\n        left_freq[c] = left_freq.get(c, 0) + 1\n        left_count += left_freq[c] == 1\n        right_freq[c] -= 1\n        right_count -= right_freq[c] == 0\n        max_sum = max(max_sum, left_count + right_count)\n    return max_sum\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input().strip()\n    print(split_string(s))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    p = [0] * n\n    st = set()\n    for i in range(n - 1, -1, -1):\n        st.add(s[i])\n        p[i] = len(st)\n    st = set()\n    ans = []\n    for i in range(n - 1):\n        st.add(s[i])\n        ans += (len(st) + p[i + 1],)\n    print(max(ans))", "class Solution:\n\n    def distinct(self, n, s):\n        (left_pre, right_pre) = ([1], [1])\n        (left_set, right_set) = (set(s[0]), set(s[-1]))\n        for i in range(1, n):\n            left_set.add(s[i])\n            right_set.add(s[n - i - 1])\n            left_pre.append(len(left_set))\n            right_pre.append(len(right_set))\n        right_pre = right_pre[::-1]\n        ans = 0\n        for i in range(1, n):\n            ans = max(ans, left_pre[i - 1] + right_pre[i])\n        return ans\nsol = Solution()\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    print(sol.distinct(n, s))", "from collections import defaultdict\n\ndef answer(string):\n    (visitedleft, visitedright) = (set(), set())\n    (prefixleft, prefixright) = ([0], [0])\n    for i in range(len(string)):\n        visitedleft.add(string[i])\n        prefixleft.append(len(visitedleft))\n    for i in range(len(string) - 1, -1, -1):\n        visitedright.add(string[i])\n        prefixright.append(len(visitedright))\n    prefixright.reverse()\n    result = 0\n    for i in range(len(prefixleft)):\n        result = max(result, prefixleft[i] + prefixright[i])\n    return result\ntest = int(input())\nfor i in range(test):\n    length = int(input())\n    string = input()\n    print(answer(string))", "for _ in range(int(input())):\n    a = int(input())\n    b = input()\n    fo = set()\n    ba = set()\n    lf = []\n    lb = []\n    for x in range(a - 1):\n        fo.add(b[x])\n        lf += [len(fo)]\n    ba.add(b[a - 1])\n    c = 1\n    for x in range(a - 2, -1, -1):\n        e = len(ba) + lf[x]\n        if e > c:\n            c = e\n        ba.add(b[x])\n    print(c)", "def solve(string):\n    has = set()\n    left = [0] * len(string)\n    for i in range(len(string)):\n        if string[i] not in has:\n            has.add(string[i])\n        left[i] = len(has)\n    right = [0] * len(string)\n    has.clear()\n    for i in range(len(string) - 1, -1, -1):\n        if string[i] not in has:\n            has.add(string[i])\n        right[i] = len(has)\n    ans = 0\n    for i in range(len(string) - 1):\n        ans = max(ans, left[i] + right[i + 1])\n    return ans\n\ndef main():\n    for _ in range(int(input())):\n        input()\n        string = input()\n        print(solve(string))\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list()\n    s = input()\n    q = set()\n    v = set()\n    for i in range(n):\n        q.add(s[i])\n        a.append(len(q))\n    mx = a[-1]\n    for i in range(n - 1, -1, -1):\n        v.add(s[i])\n        if i > 0:\n            d = len(v) + a[i - 1]\n        else:\n            d = len(v)\n        if d > mx:\n            mx = d\n    print(mx)", "import sys\ninput = sys.stdin.readline\nT = int(input())\nresult = []\nfor _ in range(T):\n    N = int(input())\n    dic = {chr(i): 0 for i in range(97, 123)}\n    arr = list(input().rstrip())\n    for i in range(N):\n        dic[arr[i]] += 1\n    L = set()\n    R = set(arr)\n    res = 0\n    for i in arr:\n        L.add(i)\n        dic[i] -= 1\n        if dic[i] == 0:\n            R.remove(i)\n        res = max(res, len(L) + len(R))\n    result.append(res)\nprint('\\n'.join(map(str, result)))", "import sys, os\nTC = True\n\ndef solve():\n    n = int(input())\n    s = input()\n    mp1 = {}\n    mp2 = {}\n    arr1 = [0] * n\n    arr2 = [0] * n\n    arr1[0] = 1\n    mp1[s[0]] = 1\n    for i in range(1, n):\n        if s[i] in mp1:\n            arr1[i] = arr1[i - 1]\n        else:\n            arr1[i] = arr1[i - 1] + 1\n            mp1[s[i]] = 1\n    arr2[n - 1] = 1\n    mp2[s[n - 1]] = 1\n    for i in range(n - 2, -1, -1):\n        if s[i] in mp2:\n            arr2[i] = arr2[i + 1]\n        else:\n            arr2[i] = arr2[i + 1] + 1\n            mp2[s[i]] = 1\n    ans = 0\n    for i in range(n - 1):\n        ans = max(ans, arr1[i] + arr2[i + 1])\n    print(ans)\nif os.path.exists('input.txt'):\n    debug = True\n    sys.stdin = open('input.txt', 'r')\nif TC:\n    for _ in range(int(input())):\n        solve()\nelse:\n    solve()", "from collections import Counter\n\ndef main():\n    cases = int(input())\n    while cases > 0:\n        n = int(input())\n        a = list(input())\n        (c, ans) = (1, 0)\n        count1 = []\n        count2 = []\n        (l, r) = (set(), set())\n        for i in range(n):\n            l.add(a[i])\n            r.add(a[n - 1 - i])\n            count1.append(len(l))\n            count2.append(len(r))\n        for i in range(n - 1):\n            ans = max(ans, count1[i] + count2[n - i - 2])\n        print(ans)\n        cases -= 1\n    return 0\nmain()", "def solve(s):\n    prefix = []\n    suffix = []\n    visited1 = set()\n    visited2 = set()\n    for i in range(len(s)):\n        visited1.add(s[i])\n        visited2.add(s[-i - 1])\n        prefix.append(len(visited1))\n        suffix.append(len(visited2))\n    suffix.reverse()\n    ans = 0\n    for i in range(len(s) - 1):\n        ans = max(prefix[i] + suffix[i + 1], ans)\n    return ans\nfor _ in range(int(input())):\n    (_, s) = (input(), input())\n    print(solve(s))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    p = [0] * n\n    st = set()\n    for i in range(n - 1, -1, -1):\n        st.add(s[i])\n        p[i] = len(st)\n    st = set()\n    ans = []\n    for i in range(n - 1):\n        st.add(s[i])\n        ans += (len(st) + p[i + 1],)\n    print(max(ans))", "def sol(a, b):\n    set1 = set()\n    set2 = set()\n    prefix = []\n    suffix = []\n    for i in range(a):\n        set1.add(b[i])\n        set2.add(b[n - i - 1])\n        prefix.append(len(set1))\n        suffix.append(len(set2))\n    res = 0\n    for i in range(a - 1):\n        res = max(res, prefix[i] + suffix[a - i - 2])\n    return res\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    print(sol(n, s))", "def uniqalc(s, n):\n    d1 = set()\n    d2 = set()\n    max_ = 0\n    z1 = [0] * n\n    z2 = [0] * n\n    for i in range(n):\n        d1.add(s[i])\n        d2.add(s[n - 1 - i])\n        z1[i] = len(d1)\n        z2[n - 1 - i] = len(d2)\n    for i in range(n - 1):\n        max_ = max(max_, z1[i] + z2[i + 1])\n    return max_\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    print(uniqalc(s, n))", "def f(x, s):\n    D = {}\n    L = [0] * x\n    L[0] = 1\n    D[s[0]] = 1\n    for i in range(1, x):\n        if s[i] not in D:\n            D[s[i]] = 1\n            L[i] = L[i - 1] + 1\n        else:\n            L[i] = L[i - 1]\n    L2 = [0] * x\n    L2[-1] = 1\n    D2 = {s[-1]: 1}\n    for i in range(x - 2, -1, -1):\n        if s[i] not in D2:\n            D2[s[i]] = 1\n            L2[i] = L2[i + 1] + 1\n        else:\n            L2[i] = L2[i + 1]\n    ans = 0\n    for i in range(x - 1):\n        curr = L[i] + L2[i + 1]\n        ans = max(ans, curr)\n    return ans\nt = int(input())\nfor i in range(t):\n    x = int(input())\n    L = input()\n    print(f(x, L))", "def sol(n, s):\n    (suf, pref) = ([0] * n, [0] * n)\n    st = set()\n    for i in range(n):\n        st.add(s[i])\n        pref[i] = len(st)\n    st = set()\n    for i in range(n - 1, -1, -1):\n        st.add(s[i])\n        suf[i] = len(st)\n    Max = 0\n    for i in range(n - 1):\n        a = pref[i] + suf[i + 1]\n        Max = max(a, Max)\n    return Max\nt = int(input())\nwhile t:\n    n = int(input())\n    s = input()\n    print(sol(n, s))\n    t -= 1", "t = int(input())\n\ndef zrataj(s):\n    pismenka = set()\n    res = [0 for _ in range(len(s) + 1)]\n    for i in range(len(s)):\n        pismenka.add(s[i])\n        res[i + 1] = len(pismenka)\n    return res\n\ndef solve():\n    n = int(input())\n    s = input()\n    spredu = zrataj(s)\n    zozadu = zrataj(s[::-1])\n    zozadu = zozadu[::-1]\n    best = 0\n    for i in range(n + 1):\n        best = max(best, spredu[i] + zozadu[i])\n    print(best)\nfor _ in range(t):\n    solve()", "n = int(input())\nfor i in range(n):\n    m = int(input())\n    s = input()\n    a = set()\n    b = set()\n    la = [0]\n    ans = 0\n    for j in range(m - 1):\n        a.add(s[j])\n        la.append(len(a))\n    for j in range(m - 1, 0, -1):\n        b.add(s[j])\n        ans = max(ans, la[j] + len(b))\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    l = int(input())\n    s = input()\n    prefix = [0]\n    chars = set()\n    for i in range(l):\n        if s[i] not in chars:\n            chars.add(s[i])\n            prefix.append(prefix[i] + 1)\n        else:\n            prefix.append(prefix[i])\n    res = 0\n    postfix = 0\n    chars = set()\n    for i in range(l - 1, -1, -1):\n        if s[i] not in chars:\n            chars.add(s[i])\n            postfix += 1\n        if prefix[i] + postfix > res:\n            res = prefix[i] + postfix\n    print(res)", "import sys\nlines = list(map(str.strip, sys.stdin.readlines()))\nfor s in lines[2::2]:\n    counts = {}\n    for c in s:\n        counts[c] = counts.get(c, 0) + 1\n    othercounts = {}\n    result = 0\n    for c in s:\n        othercounts[c] = othercounts.get(c, 0) + 1\n        counts[c] -= 1\n        if counts[c] == 0:\n            del counts[c]\n        result = max(result, len(counts) + len(othercounts))\n    print(result)", "t = int(input())\nfor _ in range(t):\n    _ = input()\n    s = input()\n    left = []\n    curset = set()\n    for c in s:\n        curset.add(c)\n        left.append(len(curset))\n    curset = set()\n    right = []\n    for c in s[::-1]:\n        curset.add(c)\n        right.append(len(curset))\n    right = right[::-1]\n    maxi = 0\n    for i in range(len(s) - 1):\n        t = left[i] + right[i + 1]\n        if t > maxi:\n            maxi = t\n    print(maxi)", "import sys\nimport collections\nfrom math import ceil, gcd, sqrt, log\nimport bisect\nimport heapq\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    s = input()\n    suff = [0] * n\n    pref = [0] * n\n    net = {s[0]}\n    pref[0] = 1\n    for i in range(1, n):\n        c = s[i]\n        if c in net:\n            pref[i] = pref[i - 1]\n        else:\n            pref[i] = 1 + pref[i - 1]\n            net.add(c)\n    net = {s[-1]}\n    suff[-1] = 1\n    for j in range(n - 2, -1, -1):\n        c = s[j]\n        if c in net:\n            suff[j] = suff[j + 1]\n        else:\n            suff[j] = 1 + suff[j + 1]\n            net.add(c)\n    maxi = 0\n    for i in range(1, n):\n        one = pref[i - 1]\n        two = suff[i]\n        maxi = max(maxi, one + two)\n    print(maxi)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(input())\n    left_dictionary = {}\n    right_dictionary = set()\n    for letter in s:\n        if letter in left_dictionary:\n            left_dictionary[letter] += 1\n        else:\n            left_dictionary[letter] = 1\n    ans = len(left_dictionary)\n    for letter in s:\n        current = len(left_dictionary) + len(right_dictionary)\n        if left_dictionary[letter] == 1:\n            left_dictionary.pop(letter)\n            if letter not in right_dictionary:\n                right_dictionary.add(letter)\n            else:\n                ans = max(ans, current - 1)\n        else:\n            left_dictionary[letter] -= 1\n            if letter not in right_dictionary:\n                right_dictionary.add(letter)\n                ans = max(ans, current + 1)\n    print(ans)", "cases = int(input())\nfor _ in range(cases):\n    N = int(input())\n    s = input()\n    counts = [0 for x in range(N - 1)]\n    l = set()\n    r = set()\n    for (i, x) in enumerate(s[:-1]):\n        l.add(x)\n        counts[i] += len(l)\n    for (i, x) in enumerate(reversed(s[1:])):\n        r.add(x)\n        counts[N - 2 - i] += len(r)\n    print(max(counts))", "tc = int(input())\nres = []\nfor i in range(tc):\n    n = int(input())\n    st = input()\n    mp1 = set()\n    ltr = []\n    x = 0\n    y = 0\n    for i in st:\n        if i not in mp1:\n            x += 1\n            mp1.add(i)\n            ltr.append(x)\n        else:\n            ltr.append(x)\n    x = 0\n    mp1.clear()\n    rtl = []\n    for i in st[::-1]:\n        if i not in mp1:\n            x += 1\n            mp1.add(i)\n            rtl.append(x)\n        else:\n            rtl.append(x)\n    rtl = rtl[::-1]\n    i = 0\n    maxval = 0\n    while i < len(rtl) - 1:\n        maxval = max(maxval, ltr[i] + rtl[i + 1])\n        i += 1\n    res.append(maxval)\nfor i in res:\n    print(i)", "from collections import Counter\n\ndef func(s):\n    dc1 = Counter(s)\n    dc2 = {}\n    (n1, n2, ans) = (len(dc1), 0, 0)\n    for i in s:\n        if i not in dc2:\n            dc2[i] = 1\n            n2 += 1\n        else:\n            dc2[i] += 1\n        dc1[i] -= 1\n        if dc1[i] == 0:\n            n1 -= 1\n        ans = max(ans, n1 + n2)\n    return ans\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        s = input()\n        print(func(s))\nmain()", "n = int(input())\na = 0\ns = 0\nf = []\nh = set()\nk = []\nd = set()\nfor i in range(n):\n    m = int(input())\n    t = input()\n    for j in t:\n        h.add(j)\n        f.append(len(h))\n    t = t[::-1]\n    for l in t:\n        d.add(l)\n        k.append(len(d))\n    k = k[::-1]\n    for q in range(m - 1):\n        a = f[q] + k[q + 1]\n        if a > s:\n            s = a\n    print(s)\n    a = 0\n    s = 0\n    f = []\n    h = set()\n    k = []\n    d = set()", "import sys\ninput = lambda : sys.stdin.readline().strip()\nt = int(input())\nfor _ in range(t):\n    (n, s, d) = (int(input()), input(), dict())\n    for c in s:\n        if c not in d:\n            d[c] = 0\n        d[c] += 1\n    (b, al, ret) = (set(), len(d), len(d))\n    for i in range(n):\n        b.add(s[i])\n        d[s[i]] -= 1\n        if d[s[i]] == 0:\n            al -= 1\n        ret = max(len(b) + al, ret)\n    print(ret)", "import sys\nn = int(next(sys.stdin))\nfor _ in range(n):\n    l = int(next(sys.stdin))\n    s = next(sys.stdin).strip()\n    l_f = set()\n    forward = [26] * len(s)\n    c_f = 0\n    l_b = set()\n    backward = [26] * len(s)\n    c_b = 0\n    for i in range(l):\n        if c_f < 26:\n            if not s[i] in l_f:\n                l_f.add(s[i])\n                c_f += 1\n            forward[i] = c_f\n        if c_b < 26:\n            b = l - 1 - i\n            if not s[b] in l_b:\n                l_b.add(s[b])\n                c_b += 1\n            backward[b] = c_b\n    m = backward[0]\n    for i in range(l - 1):\n        x = backward[i + 1] + forward[i]\n        if x > m:\n            m = x\n        if m == 52:\n            break\n    print(m)", "n = int(input())\nfor i in range(n):\n    m = int(input())\n    s = input()\n    a = set()\n    b = set()\n    la = [0]\n    ans = 0\n    for j in range(m - 1):\n        a.add(s[j])\n        la.append(len(a))\n    for j in range(m - 1, 0, -1):\n        b.add(s[j])\n        ans = max(ans, la[j] + len(b))\n    print(ans)", "from collections import Counter\n\ndef main():\n    cases = int(input())\n    while cases > 0:\n        n = int(input())\n        a = list(input())\n        (c, ans) = (1, 0)\n        count1 = []\n        count2 = []\n        (l, r) = (set(), set())\n        for i in range(n):\n            l.add(a[i])\n            r.add(a[n - 1 - i])\n            count1.append(len(l))\n            count2.append(len(r))\n        for i in range(n - 1):\n            ans = max(ans, count1[i] + count2[-i - 2])\n        print(ans)\n        cases -= 1\n    return 0\nmain()", "import sys, math, bisect, collections, itertools, heapq\nfrom collections import defaultdict, deque\nsys.setrecursionlimit(50000)\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    l = list(sys.stdin.readline().strip())\n    mySet1 = set()\n    res = len(set(l))\n    for (i, vl) in enumerate(l):\n        if vl not in mySet1:\n            mySet1.add(vl)\n            res = max(len(mySet1) + len(set(l[i + 1:])), res)\n    print(res)", "n = int(input())\nwords = []\nfor i in range(n):\n    s = int(input())\n    st = str(input())\n    words.append(st)\nfor word in words:\n    all = {}\n    cur = {}\n    for c in word:\n        if c in all:\n            all[c] += 1\n        else:\n            all[c] = 1\n    ans = 0\n    for c in word:\n        if c in cur:\n            cur[c] += 1\n        else:\n            cur[c] = 1\n        all[c] -= 1\n        if all[c] == 0:\n            all.pop(c)\n        ans = max(ans, len(all) + len(cur))\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    S = input()\n    set1 = set()\n    set2 = set()\n    izq = []\n    der = []\n    for i in S:\n        set1.add(i)\n        izq.append(len(set1))\n    for i in range(n - 1, -1, -1):\n        set2.add(S[i])\n        der.append(len(set2))\n    mayor = 2\n    f = n - 2\n    for i in range(0, n - 1):\n        if izq[i] + der[f - i] > mayor:\n            mayor = izq[i] + der[f - i]\n    print(mayor)", "for z in range(int(input())):\n    n = int(input())\n    s = input()\n    a = []\n    b = []\n    s1 = set()\n    for i in range(0, n - 1):\n        s1.add(s[i])\n        a.append(len(s1))\n    s1.clear()\n    for j in range(n - 1, 0, -1):\n        s1.add(s[j])\n        b.append(len(s1))\n    b = b[::-1]\n    ma = -1\n    for i in range(n - 1):\n        if a[i] + b[i] > ma:\n            ma = a[i] + b[i]\n    print(ma)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    ori = {}\n    for m in s:\n        if m not in ori:\n            ori[m] = 1\n        else:\n            ori[m] += 1\n    f1 = {}\n    maxi = len(ori)\n    c = 0\n    ans = 0\n    for m in s:\n        ori[m] -= 1\n        if ori[m] == 0:\n            maxi -= 1\n        if m not in f1:\n            c += 1\n            f1[m] = 1\n        ans = max(ans, c + maxi)\n    print(ans)", "for _ in range(int(input())):\n    a = int(input())\n    s = input()\n    dic = {}\n    left = []\n    right = [0] * a\n    c = 0\n    for i in s:\n        if i not in dic:\n            c += 1\n            dic[i] = 1\n        left.append(c)\n    c = 0\n    dic = {}\n    for i in range(a - 1, -1, -1):\n        left[i] += c\n        if s[i] in dic:\n            continue\n        else:\n            dic[s[i]] = 1\n            c += 1\n    print(max(left))", "for t in range(int(input())):\n    n = int(input())\n    s = input()\n    lst = []\n    st = set()\n    for i in range(n):\n        st.add(s[i])\n        lst.append(len(st))\n    st = set()\n    flc = -1\n    for j in range(n - 1, 0, -1):\n        st.add(s[j])\n        flc = max(flc, len(st) + lst[j - 1])\n    print(flc)", "from collections import Counter\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, list(input())))\n\ndef insr():\n    s = input()\n    return s\nt = inp()\nfor _ in range(t):\n    n = inp()\n    s = insr()\n    pre = []\n    found = set()\n    for char in s:\n        found.add(char)\n        pre.append(len(found))\n    sfound = set()\n    ans = 0\n    for i in range(n - 1, 0, -1):\n        sfound.add(s[i])\n        ans = max(ans, pre[i - 1] + len(sfound))\n    print(ans)", "n = int(input())\nfor i in range(n):\n    l = int(input())\n    s = input()\n    fs = [-1000 for i in range(l + 1)]\n    d = {}\n    for i in range(l):\n        d[s[i]] = 0\n        fs[i + 1] = len(d)\n    d = {}\n    fe = [-1000 for i in range(l + 1)]\n    for i in range(l - 1, 0, -1):\n        d[s[i]] = 0\n        fe[i] = len(d)\n    b = 1\n    for i in range(l):\n        if fs[i] + fe[i] > b:\n            b = fs[i] + fe[i]\n    print(b)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    input()\n    s = input()[:-1]\n    sa = {s[0]: 1}\n    sb = {}\n    for i in range(1, len(s)):\n        sb[s[i]] = sb.get(s[i], 0) + 1\n    a = 1\n    b = len(sb)\n    m = a + b\n    for i in range(1, len(s)):\n        sa[s[i]] = sa.get(s[i], 0) + 1\n        if sb[s[i]] != 1:\n            sb[s[i]] -= 1\n        else:\n            sb.pop(s[i])\n        m = max(m, len(sa) + len(sb))\n    print(m)", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    d1 = {}\n    res = len(d)\n    for i in s:\n        d[i] -= 1\n        d1[i] = 1\n        if d[i] == 0:\n            del d[i]\n        res = max(res, len(d) + len(d1))\n    print(res)", "times = int(input())\nfor _ in range(times):\n    length = int(input())\n    st = input()\n    graph = {}\n    for i in range(len(st)):\n        if st[i] in graph:\n            graph[st[i]][1] = i\n        else:\n            graph.update({st[i]: [i, i]})\n    s = [0] * len(st)\n    for i in graph:\n        s[graph[i][0]] += 1\n        s[graph[i][1]] -= 1\n    mymax = len(graph)\n    addition = len(graph)\n    for i in s:\n        addition += i\n        if mymax < addition:\n            mymax = addition\n    print(mymax)", "from collections import Counter\n\ndef main():\n    cases = int(input())\n    while cases > 0:\n        n = int(input())\n        a = list(input())\n        (c, ans) = (1, 0)\n        count1 = []\n        count2 = []\n        (l, r) = (set(), set())\n        for i in range(n):\n            l.add(a[i])\n            r.add(a[n - 1 - i])\n            count1.append(len(l))\n            count2.append(len(r))\n        count2.reverse()\n        for i in range(n - 1):\n            ans = max(ans, count1[i] + count2[i + 1])\n        print(ans)\n        cases -= 1\n    return 0\nmain()", "from collections import defaultdict\n\ndef solve():\n    n = int(input())\n    s = input().strip()\n    cnt1 = defaultdict(int)\n    cnt2 = defaultdict(int)\n    res = 0\n    for c in s:\n        res += not cnt2[c]\n        cnt2[c] += 1\n    ans = res\n    for c in s:\n        res -= cnt2[c] == 1\n        cnt2[c] -= 1\n        res += not cnt1[c]\n        cnt1[c] += 1\n        ans = max(ans, res)\n    print(ans)\nT = int(input())\nfor _ in range(T):\n    solve()", "t = int(input())\nwhile t:\n    n = int(input())\n    s = input()\n    d = dict()\n    d1 = dict()\n    for i in range(1, n):\n        d[s[i]] = d.get(s[i], 0) + 1\n    d1[s[0]] = 1\n    ans = 1 + len(d)\n    c = 0\n    for i in range(1, n):\n        if s[i] not in d1:\n            d1[s[i]] = 1\n        if d[s[i]] == 1:\n            del d[s[i]]\n        else:\n            d[s[i]] -= 1\n        c = len(d) + len(d1)\n        if ans < c:\n            ans = c\n    print(ans)\n    t = t - 1", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    hmap = {}\n    for c in s:\n        if c not in hmap:\n            hmap[c] = 0\n        hmap[c] += 1\n    res = 0\n    dis = set()\n    for c in s:\n        dis.add(c)\n        hmap[c] -= 1\n        if hmap[c] == 0:\n            del hmap[c]\n        res = max(res, len(dis) + len(hmap))\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    dica = dict()\n    dicb = dict()\n    ans = -1\n    suma = 0\n    sumb = 0\n    for i in s:\n        if i in dicb.keys():\n            dicb[i] += 1\n        else:\n            dicb[i] = 1\n            sumb += 1\n    for i in s:\n        if ans < suma + sumb:\n            ans = suma + sumb\n        if i in dica.keys():\n            if dicb[i] > 1:\n                dicb[i] -= 1\n            elif dicb[i] == 1:\n                del dicb[i]\n                sumb -= 1\n            continue\n        else:\n            dica[i] = 1\n            suma += 1\n            if dicb[i] > 1:\n                dicb[i] -= 1\n            elif dicb[i] == 1:\n                del dicb[i]\n                sumb -= 1\n    print(ans)", "for _ in range(int(input())):\n    lth = int(input())\n    s = input()\n    bDict = {}\n    aSet = set()\n    maxx = 0\n    for ch in s:\n        if ch in bDict:\n            bDict[ch] += 1\n        else:\n            bDict[ch] = 1\n    for ch in s:\n        aSet.add(ch)\n        bDict[ch] -= 1\n        if bDict[ch] == 0:\n            del bDict[ch]\n        maxx = max(maxx, len(aSet) + len(bDict))\n    print(maxx)", "def solve(s):\n    dp1 = [1 for _ in range(len(s))]\n    dp2 = [1 for _ in range(len(s))]\n    all_chars = set()\n    all_chars.add(s[0])\n    for i in range(1, len(s)):\n        if s[i] in all_chars:\n            dp1[i] = dp1[i - 1]\n        else:\n            all_chars.add(s[i])\n            dp1[i] = dp1[i - 1] + 1\n    all_chars = set()\n    all_chars.add(s[-1])\n    for j in range(len(s) - 2, -1, -1):\n        if s[j] in all_chars:\n            dp2[j] = dp2[j + 1]\n        else:\n            all_chars.add(s[j])\n            dp2[j] = dp2[j + 1] + 1\n    val = 0\n    for i in range(len(s) - 1):\n        val = max(val, dp1[i] + dp2[i + 1])\n    print(val)\nn = int(input())\nfor _ in range(n):\n    q = int(input())\n    s = input()\n    solve(s)", "t = int(input())\nfrom collections import Counter\nfrom time import time\n\ndef solution(path: str):\n    ans = -1\n    aDict = dict()\n    aCounter = 0\n    pathDict = Counter(path)\n    bCounter = len(pathDict.keys())\n    for i in path:\n        iInA = aDict.get(i, None)\n        if iInA is None:\n            aCounter += 1\n            aDict[i] = 1\n        iInB = pathDict.get(i, 0)\n        if iInB > 0:\n            if iInB == 1:\n                bCounter -= 1\n            pathDict[i] -= 1\n        ans = max(ans, aCounter + bCounter)\n    return ans\nwhile t > 0:\n    n = int(input())\n    print(solution(input()))\n    t -= 1", "queries = int(input())\nfor i in range(queries):\n    n = int(input())\n    s = input()\n    D = {}\n    for j in range(n):\n        if s[j] not in D:\n            D[s[j]] = 1\n        else:\n            D[s[j]] += 1\n    f1 = 0\n    f2 = len(D.keys())\n    D2 = {}\n    maxval = 0\n    for j in range(n):\n        D[s[j]] -= 1\n        if D[s[j]] == 0:\n            f2 -= 1\n        if s[j] not in D2:\n            D2[s[j]] = 1\n            f1 += 1\n        else:\n            D2[s[j]] += 1\n        current = f1 + f2\n        if current > maxval:\n            maxval = current\n    print(maxval)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n\n    def getPrefix(st):\n        chars = set()\n        prefixCount = [0] * n\n        prefixCount[0] = 1\n        chars.add(st[0])\n        for i in range(1, n):\n            if st[i] in chars:\n                prefixCount[i] = prefixCount[i - 1]\n            else:\n                prefixCount[i] = prefixCount[i - 1] + 1\n                chars.add(st[i])\n        return prefixCount\n    prefixArr = getPrefix(s)\n    suffixArr = getPrefix(s[::-1])\n    ans = -1\n    for i in range(0, n - 1):\n        ans = max(ans, prefixArr[i] + suffixArr[n - (i + 1) - 1])\n    print(ans)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    s = input()\n    m = {}\n    for i in s:\n        if m.get(i) == None:\n            m[i] = 1\n        else:\n            m[i] += 1\n    a = 0\n    b = len(m.keys())\n    ma = {}\n    res = 0\n    for i in s:\n        if ma.get(i) == None:\n            a += 1\n            ma[i] = 1\n        if m.get(i) == 1:\n            b -= 1\n        m[i] -= 1\n        res = max(res, a + b)\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    distinct_start = 0\n    distinct_end = 0\n    chars_start = {}\n    chars_end = {}\n    for c in s:\n        if c in chars_end:\n            chars_end[c] += 1\n        else:\n            chars_end[c] = 1\n            distinct_end += 1\n    maximum_sum = 0\n    for c in s:\n        if c in chars_start:\n            chars_start[c] += 1\n        else:\n            chars_start[c] = 1\n            distinct_start += 1\n        chars_end[c] -= 1\n        if chars_end[c] == 0:\n            distinct_end -= 1\n        maximum_sum = max(maximum_sum, distinct_start + distinct_end)\n    print(maximum_sum)", "def solve():\n    n = int(input())\n    s = str(input())\n    d1 = {}\n    d2 = {}\n    d1[s[0]] = 1\n    for i in range(1, n):\n        d2.setdefault(s[i], 0)\n        d2[s[i]] += 1\n    max_val = len(d1) + len(d2)\n    for i in range(1, n):\n        d2[s[i]] -= 1\n        d1.setdefault(s[i], 0)\n        d1[s[i]] += 1\n        if d2.get(s[i]) == 0:\n            d2.pop(s[i])\n        max_val = max(max_val, len(d1) + len(d2))\n    print(max_val)\nt = int(input())\nfor _ in range(t):\n    solve()", "from collections import Counter\nfrom collections import defaultdict\n\ndef maxSplit(nums):\n    count = Counter(nums)\n    dic = defaultdict(int)\n    res = 0\n    for num in nums:\n        dic[num] += 1\n        count[num] -= 1\n        if count[num] == 0:\n            count.pop(num)\n        res = max(res, len(count) + len(dic))\n    return res\ncase = int(input())\nfor i in range(case):\n    length = input()\n    pos = input()\n    print(maxSplit(pos))", "from collections import deque\n\ndef solve():\n    n = int(input())\n    s = input()\n    a = set()\n    b = dict()\n    B = 0\n    for i in range(n):\n        if b.get(s[i], -1) == -1:\n            b[s[i]] = deque()\n            B += 1\n        b[s[i]].append(i)\n    res = -1\n    for i in range(1, n):\n        a.add(s[i - 1])\n        b[s[i - 1]].popleft()\n        if len(b[s[i - 1]]) == 0:\n            B -= 1\n        res = max(res, len(a) + B)\n    print(res)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\nN = int(200000.0 + 5)\nsys.setrecursionlimit(N)\n\ndef charming():\n    n = int(input())\n    s = '#' + input()\n    pre = [0] * (n + 5)\n    suf = [0] * (n + 5)\n    vis1 = set()\n    vis2 = set()\n    for i in range(1, n + 1):\n        pre[i] = pre[i - 1]\n        if s[i] not in vis1:\n            pre[i] += 1\n            vis1.add(s[i])\n    for i in range(n, 0, -1):\n        suf[i] = suf[i + 1]\n        if s[i] not in vis2:\n            suf[i] += 1\n            vis2.add(s[i])\n    res = 1\n    for i in range(1, n):\n        res = max(res, pre[i] + suf[i + 1])\n    print(res)\nfor t in range(int(input())):\n    charming()", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    word = list(input())\n    dic = defaultdict(int)\n    a = set()\n    ans = 0\n    for w in word:\n        dic[w] += 1\n    for w in word:\n        a.add(w)\n        dic[w] -= 1\n        if dic[w] == 0:\n            del dic[w]\n        ans = max(ans, len(a) + len(dic))\n    print(ans)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    prefix = []\n    suffix = []\n    temp = set()\n    for char in s:\n        temp.add(char)\n        prefix.append(len(temp))\n    temp = set()\n    for char in s[-1::-1]:\n        suffix.append(len(temp))\n        temp.add(char)\n    res = 0\n    suffix = suffix[-1::-1]\n    for idx in range(n):\n        res = max(res, prefix[idx] + suffix[idx])\n    print(res)", "def cuddle():\n    n = int(input().strip())\n    s = input().strip()\n    mia = {}\n    mpia = {}\n    vector1 = []\n    vector2 = []\n    for i in range(n):\n        if s[i] in mia:\n            mia[s[i]] += 1\n        else:\n            mia[s[i]] = 1\n        vector1.append(len(mia))\n    for i in range(n - 1, -1, -1):\n        if s[i] in mpia:\n            mpia[s[i]] += 1\n        else:\n            mpia[s[i]] = 1\n        vector2.append(len(mpia))\n    maxima = 0\n    for i in range(n - 1):\n        maxima = max(maxima, vector1[i] + vector2[n - i - 2])\n    print(maxima)\nfor _ in range(int(input())):\n    cuddle()", "t = int(input())\nfrom collections import Counter\n\ndef solution(path: str):\n    ans = -1\n    aDict = dict()\n    aCounter = 0\n    pathDict = Counter(path)\n    bCounter = len(pathDict.keys())\n    for i in path:\n        iInA = aDict.get(i, None)\n        if iInA is None:\n            aCounter += 1\n            aDict[i] = 1\n        iInB = pathDict.get(i, 0)\n        if iInB > 0:\n            if iInB == 1:\n                bCounter -= 1\n            pathDict[i] -= 1\n        ans = max(ans, aCounter + bCounter)\n    return ans\nwhile t > 0:\n    n = int(input())\n    print(solution(input()))\n    t -= 1", "testcases = int(input())\nfor _ in range(testcases):\n    n = int(input())\n    s = input()\n    left = [0] * n\n    right = [0] * n\n    l = set()\n    r = set()\n    for i in range(n):\n        l.add(s[i])\n        left[i] = len(l)\n    for i in range(n - 1, -1, -1):\n        r.add(s[i])\n        right[i] = len(r)\n    result = -1000000000.0\n    for i in range(n - 1):\n        result = max(result, left[i] + right[i + 1])\n    print(result)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    v = 0\n    a_list = [0] * 26\n    a_total = 0\n    b_list = [0] * 26\n    b_total = 0\n    for x in s:\n        a_list[ord(x) - 97] += 1\n    for x in a_list:\n        if x != 0:\n            a_total += 1\n    v = a_total\n    for x in s:\n        p = ord(x) - 97\n        a_list[p] -= 1\n        b_list[p] += 1\n        if a_list[p] == 0:\n            a_total -= 1\n        if b_list[p] == 1:\n            b_total += 1\n            if v < a_total + b_total:\n                v = a_total + b_total\n                if v == 52:\n                    break\n    print(v)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    setn = set()\n    setm = set()\n    s1 = [0] * n\n    s2 = [0] * n\n    maxn = 0\n    for i in range(n):\n        setn.add(s[i])\n        s1[i] = len(setn)\n    for j in range(n - 1, -1, -1):\n        if j == 0:\n            if s2[j] > maxn:\n                maxn = s2[j]\n        else:\n            setm.add(s[j])\n            s2[j] = len(setm)\n            if s1[j - 1] + s2[j] > maxn:\n                maxn = s1[j - 1] + s2[j]\n    print(maxn)", "for t in range(int(input())):\n    n = int(input())\n    s = input()\n    d = {}\n    for i in s:\n        d[i] = d.get(i, 0) + 1\n    z = len(d)\n    ans = 0\n    l = set()\n    for i in range(n):\n        l.add(s[i])\n        d[s[i]] -= 1\n        z -= 1 if d[s[i]] == 0 else 0\n        ans = max(ans, z + len(l))\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    s = input()\n    d = {}\n    for i in s:\n        d[i] = d.get(i, 0) + 1\n    z = len(d)\n    ans = 0\n    l = set()\n    for i in range(n):\n        l.add(s[i])\n        d[s[i]] -= 1\n        z -= 1 if d[s[i]] == 0 else 0\n        ans = max(ans, z + len(l))\n    print(ans)", "for i in range(int(input())):\n    len1 = int(input())\n    str1 = input()\n    (sum1, sum2, total) = (1, 0, 0)\n    (dict1, dict2) = ({str1[0]: 1}, {})\n    for i in range(1, len1):\n        if str1[i] in dict2:\n            dict2[str1[i]] += 1\n        else:\n            dict2[str1[i]] = 1\n            sum2 += 1\n    total = sum1 + sum2\n    for i in range(1, len1 - 1):\n        if str1[i] not in dict1:\n            sum1 += 1\n            dict1[str1[i]] = 1\n        dict2[str1[i]] -= 1\n        if dict2[str1[i]] == 0:\n            sum2 -= 1\n        total = max(total, sum1 + sum2)\n    print(total)"]