["for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = input()\n    if b == 0 or s == s[::-1]:\n        print(1)\n    else:\n        print(2)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if s == s[::-1] or k == 0:\n        print(1)\n    else:\n        print(2)", "t = int(input())\nfor _ in range(t):\n    l = list(map(int, input().split()))\n    (n, k) = (l[0], l[1])\n    s = input()\n    o = 1\n    if k == 0:\n        print(o)\n    elif s[::-1] == s:\n        print(o)\n    else:\n        print(2)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    if k == 0:\n        ans = 1\n    elif s == s[::-1]:\n        ans = 1\n    else:\n        ans = 2\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    str = input()\n    if str == str[::-1] or n == 1 or k == 0:\n        print(1)\n    else:\n        print(2)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    if k == 0:\n        print(1)\n        continue\n    if s == s[::-1]:\n        print(1)\n    else:\n        print(2)", "t = int(input())\nmylist = []\nfor x in range(0, t):\n    (n, k) = input().split()\n    s = input()\n    n = int(n)\n    k = int(k)\n    if k == 0:\n        mylist.append(1)\n    elif s == s[::-1]:\n        mylist.append(1)\n    else:\n        mylist.append(2)\nfor ans in mylist:\n    print(ans)", "t = int(input())\nfor times in range(t):\n    (n, k) = input().split()\n    s = input()\n    revs = s[::-1]\n    if s == revs or int(k) == 0:\n        print('1')\n    else:\n        print('2')", "t = int(input())\nwhile t > 0:\n    input_string = input()\n    a = input_string.split()\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    s = input()\n    count = 0\n    if a[1] == 0:\n        count = 1\n    elif a[1] >= 1:\n        revs = s[::-1]\n        if revs == s:\n            count = 1\n        else:\n            count = 2\n    print(count)\n    t = t - 1", "t = int(input())\nfor i in range(t):\n    (n, k) = [int(_) for _ in input().split()]\n    s = input()\n    if s == s[::-1] or k == 0:\n        print(1)\n    else:\n        print(2)", "t = int(input())\nwhile t:\n    (n, k) = map(int, input().split(' '))\n    s = input()\n    if k == 0:\n        print('1')\n    elif s == s[::-1]:\n        print('1')\n    else:\n        print('2')\n    t = t - 1", "def fun(n, k, s):\n    if k == 0:\n        return 1\n    (i, j) = (0, n - 1)\n    while i < j:\n        if s[i] != s[j]:\n            return 2\n        i += 1\n        j -= 1\n    return 1\ntest = int(input())\nfor t in range(test):\n    (n, k) = map(int, input().strip().split())\n    s = input()\n    print(fun(n, k, s))", "T = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    s = input()\n    if k == 0 or s[::-1] == s:\n        print(1)\n    else:\n        print(2)", "t = int(input())\n\ndef isPal(s):\n    j = len(s) - 1\n    for i in range(0, int(len(s) / 2 + 1)):\n        if s[i] != s[j]:\n            return False\n        j -= 1\n    return True\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    pal = isPal(s)\n    if k < 1:\n        print(1)\n    elif pal:\n        print(1)\n    else:\n        print(2)", "def solve(s, k):\n    res = 0\n    n = len(s)\n    check = True\n    for i in range(0, int(n / 2) + 1):\n        if s[i] != s[n - 1 - i]:\n            check = False\n            break\n    if check:\n        res = 1\n    else:\n        res = 1 if k < 1 else 2\n    return res\ntest = int(input())\nfor t in range(0, test):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    print(solve(s, k))", "for i in range(int(input())):\n    (n, K) = map(int, input().split())\n    s = input()\n    d = []\n    if K == 0:\n        print(1)\n    elif s == s[::-1]:\n        print(1)\n    else:\n        print(2)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if k == 0:\n        print(1)\n        continue\n    if s[::-1] == s:\n        print(1)\n    else:\n        print(2)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if s == s[::-1]:\n        print(1)\n    elif k == 0:\n        print(1)\n    else:\n        print(2)", "def pal(s):\n    n = len(s)\n    i = 0\n    j = n - 1\n    while i < j:\n        if s[i] != s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    if k == 0:\n        print(1)\n    elif pal(s):\n        print(1)\n    else:\n        print(2)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    if k == 0:\n        print(1)\n    elif s == s[::-1]:\n        print(1)\n    else:\n        print(2)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    if k == 0:\n        print(1)\n    elif s == s[::-1]:\n        print(1)\n    else:\n        print(2)", "def main():\n    (n, k) = map(int, input().split())\n    s = input()\n    print(1 if s == s[::-1] or k == 0 else 2)\nt = int(input())\nfor i in range(t):\n    main()", "from collections import defaultdict\nimport sys, math\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if s == s[::-1]:\n        print(1)\n    elif k == 0:\n        print(1)\n    else:\n        print(2)", "a = int(input())\nfor i in range(a):\n    (b, c) = list(map(int, input().split()))\n    d = input()\n    if c == 0:\n        print(1)\n    elif d == d[::-1]:\n        print(1)\n    else:\n        print(2)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split(' '))\n    s = input()\n    t = ''\n    for i in range(1, a + 1):\n        t += s[-i]\n    s_1 = s + t * b\n    s_2 = t * b + s\n    if s_1 == s_2:\n        print(1)\n    else:\n        print(2)", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    s = input()\n    if s != s[::-1] and k >= 1:\n        print(2)\n    else:\n        print(1)", "t = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    if s == s[::-1]:\n        print(1)\n    elif k == 0:\n        print(1)\n    else:\n        print(2)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if s == s[::-1]:\n        print(1)\n    elif k == 0:\n        print(1)\n    else:\n        print(2)", "from sys import stdin, exit, setrecursionlimit\nfrom math import ceil\ninput = stdin.readline\nlmi = lambda : list(map(int, input().split()))\nmi = lambda : map(int, input().split())\nsi = lambda : input().strip('\\n')\nssi = lambda : input().strip('\\n').split()\nfor _ in range(int(input())):\n    (n, k) = mi()\n    s = si()\n    if s == s[::-1]:\n        print(1)\n    elif k >= 1:\n        print(2)\n    else:\n        print(1)", "import sys\ninput = sys.stdin.readline\n\ndef is_pal(s):\n    for i in range(len(s) // 2):\n        if s[i] != s[len(s) - 1 - i]:\n            return 0\n    return 1\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input().strip()\n    if is_pal(s):\n        print(1)\n    elif k >= 1:\n        print(2)\n    else:\n        print(1)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if k == 0:\n        print(1)\n    elif s == s[::-1]:\n        print(1)\n    else:\n        print(2)", "for z in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    s = input()\n    pal = 1\n    for i in range(0, n // 2):\n        if s[i] != s[n - i - 1]:\n            pal = 0\n    if k == 0 or n == 1:\n        print(1)\n    elif pal == 0:\n        print(2)\n    else:\n        print(1)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    s1 = s[::-1]\n    if k == 0:\n        print(1)\n    elif s == s1:\n        print(1)\n    else:\n        print(2)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if k == 0:\n        print(1)\n        continue\n    flag = False\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            flag = True\n            break\n    if flag:\n        print(2)\n    else:\n        print(1)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 1\n    while k and s != s[::-1]:\n        s += s[::-1]\n        ans += 1\n        k -= 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if s == s[::-1] or k == 0:\n        print(1)\n    else:\n        print(2)", "import sys\ninput = sys.stdin.readline\n\ndef solution():\n    is_palindrome = True\n    for i in range(n // 2):\n        if s[i] != s[-(i + 1)]:\n            is_palindrome = False\n            break\n    if is_palindrome:\n        print(1)\n    elif k == 0:\n        print(1)\n    else:\n        print(2)\nt = int(input())\nfor tc in range(t):\n    (n, k) = map(int, input().split())\n    s = input().rstrip()\n    solution()", "def main():\n    (n, k) = map(int, input().split())\n    s = input()\n    cur = {s}\n    k = min(k, 3)\n    for _ in range(k):\n        news = set()\n        for s in cur:\n            news.add(s + s[::-1])\n            news.add(s[::-1] + s)\n        cur = news\n    print(len(cur))\nfor _ in range(int(input())):\n    main()", "for i in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = input()\n    if s != s[::-1] and b > 0:\n        print(2)\n    else:\n        print(1)", "n = int(input())\nfor i in range(n):\n    (m, n) = map(int, input().split())\n    s = input()\n    f = True\n    if n == 0:\n        print(1)\n    else:\n        for j in range(int(m / 2)):\n            if s[j] != s[m - 1 - j]:\n                f = False\n        if f == True:\n            print(1)\n        else:\n            print(2)", "def isPalindrome(n):\n    return n == n[::-1]\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if k == 0:\n        print(1)\n    elif isPalindrome(s):\n        print(1)\n    else:\n        print(2)", "for _ in range(int(input())):\n    (a, k) = list(map(int, input().split()))\n    s = input()\n    if k == 0:\n        print(1)\n    elif s == s[::-1]:\n        print(1)\n    else:\n        print(2)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = list(input())\n    if k > 0:\n        if x == list(reversed(x)):\n            print(1)\n        else:\n            print(2)\n    else:\n        print(1)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = input()\n    if s == s[::-1] or b == 0:\n        print(1)\n    else:\n        print(2)", "def solve(n, k, s):\n    if k == 0:\n        return 1\n    if s[::-1] == s:\n        return 1\n    return 2\nt = int(input())\nfor _ in range(t):\n    (n, k) = (int(component) for component in input().split(' '))\n    s = input()\n    print(solve(n, k, s))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if s == s[::-1] or k == 0:\n        print(1)\n        continue\n    else:\n        print(2)", "n = int(input().strip())\nfor j in range(n):\n    (s, k) = input().strip().split()\n    k = int(k)\n    s = input().strip()\n    flag = True\n    for i in range(len(s) // 2):\n        if s[i] != s[len(s) - 1 - i]:\n            flag = False\n    if flag or k == 0:\n        print(1)\n    else:\n        print(2)", "t = int(input())\n\ndef solve(s, k):\n    if k == 0:\n        return 1\n    if s == s[::-1]:\n        return 1\n    return 2\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(solve(s, k))", "def pal(s):\n    a = s[::-1]\n    if s != a:\n        return 1\n    return 0\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 1\n    c = pal(s)\n    if k != 0:\n        print(c + ans)\n    else:\n        print(ans)", "n = int(input())\n\ndef checkp(s):\n    return s == s[::-1]\nfor i in range(n):\n    x = input().split()\n    a = int(x[0])\n    b = int(x[1])\n    s = input()\n    if checkp(s):\n        print('1')\n        continue\n    if b == 0:\n        print('1')\n        continue\n    else:\n        print('2')\n        continue", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if s == s[::-1]:\n        print(1)\n    elif k == 0:\n        print(1)\n    else:\n        print(2)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    if k > 0:\n        if s == s[::-1]:\n            print(1)\n        else:\n            print(2)\n    else:\n        print(1)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    if k == 0:\n        print(1)\n        continue\n    is_pal = True\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            is_pal = False\n    if is_pal:\n        print(1)\n    else:\n        print(2)", "def concatRev(s, k):\n    r = s[::-1]\n    count = 1\n    if s == r:\n        return count\n    else:\n        return count + 1 if k >= 1 else count\nt = int(input())\nfor i in range(t):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    print(concatRev(s, k))", "def isPalindrome(s):\n    return s == s[::-1]\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if k == 0:\n        print('1')\n    elif isPalindrome(s):\n        print('1')\n    else:\n        print('2')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if k == 0:\n        print(1)\n    elif s == s[::-1]:\n        print(1)\n    else:\n        print(2)", "def function(n, k, s):\n    res = 1\n    if s != s[::-1]:\n        res += 1\n    if k == 0:\n        return 1\n    return res\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(function(n, k, s))", "t = int(input())\n\ndef rev(s: str) -> str:\n    s1 = ''\n    for i in range(len(s)):\n        s1 += s[len(s) - 1 - i]\n    return s1\nfor _ in range(t):\n    x = str(input()).split()\n    n = int(x[0])\n    k = int(x[1])\n    string = str(input())\n    string1 = rev(string)\n    if k == 0:\n        print(1)\n        continue\n    elif k > 0:\n        if string == string1:\n            print(1)\n            continue\n        else:\n            print(2)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    rev = ''\n    for x in s:\n        rev = x + rev\n    if k == 0:\n        print(1)\n    elif rev == s:\n        print(1)\n    else:\n        print(2)", "t = int(input())\nans = []\nfor x in range(t):\n    m = list(map(int, input().split()))\n    n = m[0]\n    k = m[1]\n    s = list(input())\n    s2 = s[:]\n    s2.reverse()\n    if s == s2 or k == 0:\n        ans.append(1)\n    else:\n        ans.append(2)\nfor a in ans:\n    print(a)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = [i for i in input()]\n    rev = s[::-1]\n    if k >= 1:\n        s1 = s + rev\n        s2 = rev + s\n        if s1 == s2:\n            print(1)\n        else:\n            print(2)\n    else:\n        print(1)", "def rev(s1, k, l, h):\n    if s1 == s1[::-1]:\n        return 1\n    if k == l:\n        return 1\n    if s1 in h:\n        return h[s1]\n    s = s1 + s1[::-1]\n    s2 = s1[::-1] + s1\n    h[s1] = rev(s, k + 1, l, h) + rev(s2, k + 1, l, h)\n    return h[s1]\nn = int(input())\nfor i in range(n):\n    a = list(map(int, input().split()))\n    l = a[1]\n    s = input()\n    h = {}\n    print(rev(s, 0, l, h))", "t = int(input())\nwhile t:\n    (a, b) = map(int, input().split())\n    s = input()\n    if b == 0:\n        print(1)\n    elif s == s[::-1]:\n        print(1)\n    else:\n        print(2)\n    t -= 1", "tests_no = int(input())\nfor i in range(tests_no):\n    user_input = input().split(' ')\n    length_str = int(user_input[0])\n    operate = int(user_input[1])\n    inp_str = str(input())\n    if inp_str == inp_str[::-1] or operate < 1:\n        print(1)\n    else:\n        print(2)", "def isPalindrome(s):\n    return s == s[::-1]\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    st = input()\n    ans = isPalindrome(st)\n    if k == 0:\n        print('1')\n    elif ans:\n        print('1')\n    else:\n        print('2')", "def rev(S):\n    return S[::-1]\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split(' ')))\n    s = input()\n    if k == 0 or rev(s) == s:\n        print(1)\n    else:\n        print(2)", "n = int(input())\nfor i in range(n):\n    kt_list = list(map(int, input().split()))\n    s1 = input()\n    if kt_list[1] == 0:\n        print('1')\n    else:\n        count = 0\n        s2 = s1[::-1]\n        if s1 == s2:\n            print('1')\n        else:\n            print('2')", "def main():\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        s = input()\n        i = 0\n        while i < k:\n            if s == s[::-1]:\n                break\n            s += s[::-1]\n            i += 1\n        print(i + 1)\nmain()", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = True\n    if k == 0:\n        print(1)\n    else:\n        for w in range(n // 2):\n            if s[w] != s[n - w - 1]:\n                ans = False\n                break\n        if ans:\n            print(1)\n        else:\n            print(2)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    if s == s[::-1] or k == 0:\n        print(1)\n    else:\n        print(2)", "for _ in range(0, int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    print([2, 1][s == s[::-1] or k == 0])", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if k == 0:\n        print(1)\n    elif s == s[::-1]:\n        print(1)\n    else:\n        print(2)", "from audioop import reverse\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    s = input()\n    revs = s[::-1]\n    if s == revs or k == 0:\n        print('1')\n    else:\n        print('2')", "def isPalin(s):\n    k = s[::-1]\n    if s == k:\n        return True\n    return False\nt = int(input())\nwhile t != 0:\n    (n, k) = map(int, input().split())\n    s = input()\n    if isPalin(s):\n        print(1)\n        t -= 1\n        continue\n    if k == 0:\n        print(1)\n    else:\n        print(2)\n    t -= 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = input()\n    if k < 1:\n        print('1')\n    else:\n        b = a[::-1]\n        if a == b:\n            print('1')\n        else:\n            print('2')", "def solve(s, n, k):\n    rev = s[::-1]\n    if s == rev or k == 0:\n        return 1\n    else:\n        return 2\nt = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    s = input()\n    print(solve(s, n, k))\n    t -= 1", "t = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    s = input()\n    if s + s[::-1] != s[::-1] + s and k > 0:\n        print(2)\n    else:\n        print(1)", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    (n, k) = map(int, sys.stdin.readline().split())\n    s = sys.stdin.readline().strip()\n    if k == 0 or s == s[::-1]:\n        print(1)\n    else:\n        print(2)", "tc = range(int(input()))\nfunc = lambda : [int(q) for q in input().split()]\n\ndef ChkRev(str):\n    if str == str[::-1]:\n        return True\n    else:\n        return False\nans = []\nfor _ in tc:\n    (n, k) = func()\n    str = input().strip()\n    if k == 0:\n        ans.append(1)\n        continue\n    elif ChkRev(str):\n        ans.append(1)\n        continue\n    else:\n        ans.append(2)\n        continue\nfor q in ans:\n    print(q)", "def isPalindrome(s: str):\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ntest_cases = int(input())\nfor _ in range(test_cases):\n    (strLen, operations) = map(int, input().split())\n    string = input()\n    if isPalindrome(string) or operations == 0:\n        print(1)\n    else:\n        print(2)", "testcases = int(input())\nfor _ in range(testcases):\n    args = list(map(int, input().split()))\n    (n, k) = (args[0], args[1])\n    s = input()\n    if k == 0:\n        print('1')\n    else:\n        isPalin = True\n        for i in range(len(s) // 2):\n            if s[i] != s[n - i - 1]:\n                isPalin = False\n                break\n        if isPalin:\n            print(1)\n        else:\n            print(2)", "t = int(input())\nfor i in range(t):\n    z = input()\n    a = int(z.split()[0])\n    b = int(z.split()[1])\n    s = input()\n    if s == s[::-1] or b < 1:\n        print(1)\n    else:\n        print(2)", "t = int(input())\nfor i in range(t):\n    a = 0\n    (n, k) = map(int, input().split())\n    s = input()\n    if k == 0:\n        print(1)\n    elif s + s[::-1] == s[::-1] + s:\n        print(1)\n    else:\n        print(2)", "def main():\n    import sys\n    inp = sys.stdin.readline\n    test = int(input())\n    while test:\n        (n, m) = map(int, inp().split())\n        s = inp().strip()\n        if s == s[::-1] or m == 0:\n            print(1)\n        else:\n            print(2)\n        test -= 1\nmain()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if s == s[::-1] or k == 0:\n        print(1)\n    else:\n        print(2)", "n = int(input())\nfor i in range(n):\n    aa = input().split()\n    k = int(aa[1])\n    a = input()\n    if k == 0:\n        print(1)\n    elif a == a[::-1]:\n        print(1)\n    else:\n        print(2)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    s1 = s[::-1]\n    if s1 + s == s + s1:\n        print(1)\n        continue\n    if k == 0:\n        print(1)\n        continue\n    print(2)", "l = int(input())\nfor i in range(l):\n    c = 0\n    (n, k) = map(int, input().split())\n    s = input()\n    t = s[::-1]\n    f = (s + t) * k\n    p = (t + s) * k\n    if f != p:\n        c += 2\n    else:\n        c += 1\n    print(c)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    if k == 0:\n        print(1)\n    elif k == 1 and s == ''.join(list(reversed(s))):\n        print(1)\n    elif s == ''.join(list(reversed(s))):\n        print(1)\n    else:\n        print(2)", "test = int(input())\n\ndef reverse(s):\n    str = ''\n    for i in s:\n        str = i + str\n    return str\nwhile test > 0:\n    (x, y) = input().split()\n    y = int(y)\n    string = str(input())\n    string1 = reverse(string)\n    if y == 0:\n        print('1')\n    elif string1 == string:\n        print('1')\n    else:\n        print('2')\n    test = test - 1", "for _ in [0] * int(input()):\n    (n, k) = list(map(int, input().split()))\n    s = list(input())\n    if s == s[::-1] or k == 0:\n        print(1)\n    else:\n        print(2)", "def pallindrome(s: str):\n    i = 0\n    j = len(s) - 1\n    while i <= j:\n        if s[i] != s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\nT = input()\nfor t in range(int(T)):\n    l1 = input()\n    n = int(l1.split()[0])\n    k = int(l1.split()[1])\n    s = input()\n    if k == 0:\n        print(1)\n        continue\n    if pallindrome(s):\n        print(1)\n    else:\n        print(2)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    string = str(input())\n    if string == string[::-1] or k == 0:\n        print(1)\n    elif k >= 1:\n        print(2)", "for j in range(int(input())):\n    alf = set()\n    (n, k) = [int(i) for i in input().split()]\n    inp = input()\n    if k == 0:\n        print(1)\n        continue\n    flag = True\n    for i in range(len(inp) // 2):\n        if inp[i] != inp[-1 - i]:\n            flag = False\n            break\n    if flag:\n        print(1)\n    else:\n        print(2)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if k == 0 or s == s[::-1]:\n        print(1)\n        continue\n    print(2)", "t = int(input())\nl = []\nfor i in range(t):\n    (n1, k1) = input().split()\n    n = int(n1)\n    k = int(k1)\n    q = input()\n    if k == 0:\n        l.append(1)\n    elif q == q[::-1] and k >= 1:\n        l.append(1)\n    elif q != q[::-1] and k >= 1:\n        l.append(2)\nfor j in l:\n    print(j)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    if k == 0:\n        print(1)\n    elif s == s[::-1]:\n        print(1)\n    else:\n        print(2)", "t = int(input())\nfor _ in range(t):\n    comb = set()\n    nk = str.split(input(), ' ')\n    n = int(nk[0])\n    k = int(nk[1])\n    inp = input()\n    if k == 0:\n        print(1)\n        continue\n    if n % 2 == 1:\n        upper = inp[len(inp) // 2 + 1:]\n        lower = inp[0:len(inp) // 2]\n        if upper[::-1] == lower:\n            print(1)\n        else:\n            print(2)\n    else:\n        upper = inp[len(inp) // 2:]\n        lower = inp[0:len(inp) // 2]\n        if upper[::-1] == lower:\n            print(1)\n        else:\n            print(2)", "t = int(input())\nwhile t != 0:\n    t = t - 1\n    (n, k) = map(int, input().split())\n    str1 = input()\n    if k == 0:\n        print('1')\n        continue\n    if str1 == str1[::-1]:\n        print('1')\n    else:\n        print('2')"]