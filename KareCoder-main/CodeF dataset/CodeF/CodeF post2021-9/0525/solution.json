["for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    k = [*map(int, input().split())]\n    (fx, fy) = (0, 0)\n    (px, py) = (k[0], k[0])\n    for i in k[1:n - 1]:\n        [x, y] = [0, i] if s > i else [i - s, s]\n        (fx, fy) = (min(fx + py * x, fy + px * x), min(fx + py * y, fy + px * y))\n        (px, py) = (x, y)\n    print(min(fx + y * k[-1], fy + x * k[-1]))", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    a = [*map(int, input().split())]\n    (fx, fy) = (0, 0)\n    (px, py) = (a[0], a[0])\n    for i in a[1:n - 1]:\n        [x, y] = [0, i] if s > i else [i - s, s]\n        (fx, fy) = (min(fx + py * x, fy + px * x), min(fx + py * y, fy + px * y))\n        (px, py) = (x, y)\n    print(min(fx + y * a[-1], fy + x * a[-1]))", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    a = [*map(int, input().split())]\n    (fx, fy) = (0, 0)\n    (px, py) = (a[0], a[0])\n    for i in a[1:n - 1]:\n        [x, y] = [0, i] if s > i else [i - s, s]\n        (fx, fy) = (min(fx + py * x, fy + px * x), min(fx + py * y, fy + px * y))\n        (px, py) = (x, y)\n    print(min(fx + y * a[-1], fy + x * a[-1]))", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    a = [*map(int, input().split())]\n    (fx, fy) = (0, 0)\n    (px, py) = (a[0], a[0])\n    for i in a[1:n - 1]:\n        [x, y] = [0, i] if s > i else [i - s, s]\n        (fx, fy) = (min(fx + py * x, fy + px * x), min(fx + py * y, fy + px * y))\n        (px, py) = (x, y)\n    print(min(fx + y * a[-1], fy + x * a[-1]))", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    a = [*map(int, input().split())]\n    (fx, fy) = (0, 0)\n    (px, py) = (a[0], a[0])\n    for i in a[1:n - 1]:\n        [x, y] = [0, i] if s > i else [i - s, s]\n        (fx, fy) = (min(fx + py * x, fy + px * x), min(fx + py * y, fy + px * y))\n        (px, py) = (x, y)\n    print(min(fx + y * a[-1], fy + x * a[-1]))", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    a = [*map(int, input().split())]\n    (fx, fy) = (0, 0)\n    (px, py) = (a[0], a[0])\n    for i in a[1:n - 1]:\n        [x, y] = [0, i] if s > i else [i - s, s]\n        (fx, fy) = (min(fx + py * x, fy + px * x), min(fx + py * y, fy + px * y))\n        (px, py) = (x, y)\n    print(min(fx + y * a[-1], fy + x * a[-1]))", "def solve(n, s, a):\n    f = lambda u, v, x: min(u[0] + u[1] * x, v[0] + v[1] * x)\n    (lo, hi) = ((0, a[0]), (0, a[0]))\n    for i in range(1, n - 1):\n        (x1, x2) = (min(a[i], s), max(0, a[i] - s))\n        (lo, hi) = ((f(lo, hi, x1), x2), (f(lo, hi, x2), x1))\n    print(f(lo, hi, a[-1]))\nt = int(input())\nfor test in range(t):\n    (n, s) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    solve(n, s, a)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, s) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    (x, y) = ([0] * n, [0] * n)\n    for i in range(1, n - 1):\n        a = s\n        b = arr[i] - s\n        if b <= 0:\n            a += b\n            b = 0\n        x[i] = a\n        y[i] = b\n    dp = [[0, 0] for _ in range(n)]\n    dp[1][0] = arr[0] * x[1]\n    dp[1][1] = arr[0] * y[1]\n    for i in range(2, n - 1):\n        dp[i][0] = min(dp[i - 1][0] + x[i] * y[i - 1], dp[i - 1][1] + x[i] * x[i - 1])\n        dp[i][1] = min(dp[i - 1][0] + y[i] * y[i - 1], dp[i - 1][1] + y[i] * x[i - 1])\n    ans = min(dp[n - 2][0] + y[n - 2] * arr[n - 1], dp[n - 2][1] + x[n - 2] * arr[n - 1])\n    print(ans)\nt = int(input().strip())\nfor _ in range(t):\n    solve()", "def solve():\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    x = [0] * (n + 1)\n    y = [0] * (n + 1)\n    for i in range(n):\n        if s >= a[i]:\n            x[i] = 0\n            y[i] = a[i]\n        else:\n            x[i] = s\n            y[i] = a[i] - s\n    x[n - 1] = y[n - 1] = a[n - 1]\n    x[0] = y[0] = a[0]\n    dp = [[0 for _ in range(2)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = min(dp[i - 1][0] + x[i - 1] * y[i], dp[i - 1][1] + y[i - 1] * y[i])\n        dp[i][1] = min(dp[i - 1][0] + x[i - 1] * x[i], dp[i - 1][1] + y[i - 1] * x[i])\n    print(dp[n - 1][0])\nT = int(input().strip())\nfor _ in range(T):\n    solve()", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    l1 = [int(a) for a in input().split()]\n    m1 = [0, l1[0]]\n    m2 = [0, l1[0] + 1]\n    for i in range(1, n - 1):\n        if s <= l1[i]:\n            l3 = [s, l1[i] - s]\n        else:\n            l3 = [0, l1[i]]\n        n1 = m1[0] + m1[1] * l3[0]\n        n2 = m2[0] + m2[1] * l3[0]\n        if n1 < n2:\n            k1 = [n1, l3[1]]\n        else:\n            k1 = [n2, l3[1]]\n        l3.reverse()\n        n1 = m1[0] + m1[1] * l3[0]\n        n2 = m2[0] + m2[1] * l3[0]\n        if n1 < n2:\n            k2 = [n1, l3[1]]\n        else:\n            k2 = [n2, l3[1]]\n        m1 = [int(a) for a in k1]\n        m2 = [int(a) for a in k2]\n    x1 = m1[0] + m1[1] * l1[-1]\n    x2 = m2[0] + m2[1] * l1[-1]\n    print(min(x1, x2))", "for _ in range(int(input())):\n    (n, s) = map(int, input().split(' '))\n    nums = list(map(int, input().split(' ')))\n    helpofx = [0] * n\n    helpofy = [0] * n\n    for i in range(1, n - 1):\n        claci1 = s\n        calci2 = nums[i] - s\n        if calci2 <= 0:\n            claci1 += calci2\n            calci2 = 0\n        (helpofx[i], helpofy[i]) = (claci1, calci2)\n    precomputation = [[0] * 2 for _ in range(n)]\n    (precomputation[1][0], precomputation[1][1]) = (nums[0] * helpofx[1], nums[0] * helpofy[1])\n    for i in range(2, n - 1):\n        precomputation[i][0] = min(precomputation[i - 1][0] + helpofx[i] * helpofy[i - 1], precomputation[i - 1][1] + helpofx[i] * helpofx[i - 1])\n        precomputation[i][1] = min(precomputation[i - 1][0] + helpofy[i] * helpofy[i - 1], precomputation[i - 1][1] + helpofy[i] * helpofx[i - 1])\n    print(min(precomputation[n - 2][0] + helpofy[n - 2] * nums[n - 1], precomputation[n - 2][1] + helpofx[n - 2] * nums[n - 1]))", "from collections import defaultdict as dfd\n\ndef solve(N, S, nums):\n    book = {nums[0]: 0}\n    for i in range(1, N - 1):\n        new = dfd(lambda : float('inf'))\n        if nums[i] <= S:\n            (a, b) = (0, nums[i])\n        else:\n            (a, b) = (S, nums[i] - S)\n        for (n, s0) in book.items():\n            s1 = s0 + n * a\n            new[b] = min(new[b], s1)\n            s1 = s0 + n * b\n            new[a] = min(new[a], s1)\n        book = new\n    ans = float('inf')\n    for (n, s0) in book.items():\n        ans = min(ans, s0 + n * nums[-1])\n    return ans\nT = int(input())\nfor _ in range(T):\n    (N, S) = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    print(solve(N, S, nums))", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    x = [0] * (n + 1)\n    y = [0] * (n + 1)\n    for i in range(n):\n        if s >= a[i]:\n            x[i] = 0\n            y[i] = a[i]\n        else:\n            x[i] = s\n            y[i] = a[i] - s\n    x[n - 1] = y[n - 1] = a[n - 1]\n    x[0] = y[0] = a[0]\n    dp = [[0 for _ in range(2)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = min(dp[i - 1][0] + x[i - 1] * y[i], dp[i - 1][1] + y[i - 1] * y[i])\n        dp[i][1] = min(dp[i - 1][0] + x[i - 1] * x[i], dp[i - 1][1] + y[i - 1] * x[i])\n    print(dp[n - 1][0])"]