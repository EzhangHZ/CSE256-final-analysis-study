["from math import gcd\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = 0\n    b = min(a)\n    for i in range(n):\n        k = gcd(k, a[i] - b)\n    print(-1) if len(set(a)) == 1 else print(k)", "from math import gcd\n\ndef abs(x):\n    if x < 0:\n        return -x\n    return x\n\ndef gcd_list(b, n):\n    while n != 1:\n        c = gcd(b[-1], b[-2])\n        b.pop()\n        b.pop()\n        b.append(c)\n        n -= 1\n    return b[0]\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [abs(a[0] - a[i]) for i in range(1, n)]\n    c = gcd_list(b, n - 1)\n    if c == 0:\n        print(-1)\n    else:\n        print(c)", "n = int(input())\n\ndef computeGCD(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor i in range(n):\n    size = int(input())\n    tab = [int(i) for i in input().split()]\n    if tab.count(tab[0]) == len(tab):\n        print(-1)\n    else:\n        k = 10000000000000000\n        mini = min(tab)\n        allValues = []\n        for val in tab:\n            allValues.append(val - mini)\n        num1 = allValues[0]\n        num2 = allValues[1]\n        gcd = computeGCD(num1, num2)\n        for i in range(2, len(allValues)):\n            gcd = computeGCD(gcd, allValues[i])\n        print(gcd)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mn = min(a)\n    if a.count(mn) == len(a):\n        print(-1)\n    else:\n        k = 0\n        for i in a:\n            k = math.gcd(k, i - mn)\n        print(k)", "def gcd(a, b):\n    if a < b:\n        (a, b) = (b, a)\n    if b == 0:\n        return a\n    while a % b != 0:\n        (a, b) = (b, a % b)\n    return b\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(list(set(a))) == 1:\n        print(-1)\n        continue\n    d = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            d.append(abs(a[i] - a[j]))\n    e = gcd(d[0], d[1])\n    for i in range(2, len(d)):\n        e = gcd(e, d[i])\n    print(e)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    for i in range(n):\n        for j in range(i):\n            if a[i] != a[j]:\n                ans = math.gcd(ans, abs(a[i] - a[j]))\n    print(ans if ans else -1)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    ans = 0\n    for i in range(n - 1):\n        d = l[i + 1] - l[i]\n        if ans == 0:\n            ans = d\n        else:\n            ans = gcd(ans, d)\n    if ans == 0:\n        ans = -1\n    print(ans)", "from math import gcd\nfrom functools import reduce\n\ndef find_gcd(list):\n    x = reduce(gcd, list)\n    return x\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    array = list(map(int, input().split(' ')))\n    m = min(array)\n    scaled = [x - m for x in array]\n    res = find_gcd(scaled)\n    if not res:\n        print(-1)\n    else:\n        print(res)", "import math\n\ndef read_nums():\n    return [int(x) for x in input().split()]\n\ndef gcd(nums):\n    if len(nums) == 1:\n        return nums[0]\n    res = math.gcd(nums[0], nums[1])\n    for i in range(2, len(nums)):\n        res = math.gcd(res, nums[i])\n    return res\n\ndef solve():\n    (n,) = read_nums()\n    nums = set(read_nums())\n    if len(nums) == 1:\n        print(-1)\n        return\n    target = min(nums)\n    print(gcd([x - target for x in nums if x != target]))\n\ndef main():\n    (t,) = read_nums()\n    for _ in range(t):\n        solve()\nmain()", "import math\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sorted(list(set(a)))\n    if len(s) == 1:\n        print(-1)\n    else:\n        b = []\n        for i in range(1, len(s)):\n            b.append(s[i] - s[i - 1])\n        m = min(b)\n        for i in b:\n            m = math.gcd(m, i)\n        print(m)", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    temp = max(arr)\n    arr.sort()\n    l = []\n    for i in range(len(arr) - 1):\n        l.append(temp - arr[i])\n    gcd = find_gcd(l[0], l[1])\n    for i in range(2, len(l)):\n        gcd = find_gcd(gcd, l[i])\n    if arr[0] == arr[n - 1]:\n        print(-1)\n    else:\n        print(gcd)", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    temp = -100000000000000\n    for i in arr:\n        if i > temp:\n            temp = i\n    l = []\n    for i in range(len(arr) - 1):\n        l.append(temp - arr[i])\n    ans = gcd(l[0], l[1])\n    for i in range(2, len(l)):\n        ans = gcd(ans, l[i])\n    print(ans if arr[0] != arr[n - 1] else '-1')", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    if len(set(lst)) == 1:\n        print(-1)\n        continue\n    m = min(lst)\n    l = []\n    for i in lst:\n        l.append(i - m)\n    num1 = l[0]\n    num2 = l[1]\n    gcd = find_gcd(num1, num2)\n    for i in range(2, len(l)):\n        gcd = find_gcd(gcd, l[i])\n    print(gcd)", "def getNod(a, b):\n    while a != 0 and b != 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a + b\nfor t in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    m = min(lst)\n    r = [0] * n\n    for i in range(n):\n        if lst[i] != m:\n            r[i] = lst[i] - m\n    nod = r[0]\n    for i in range(1, n):\n        nod = getNod(nod, r[i])\n    if len(set(lst)) == 1:\n        print(-1)\n    else:\n        print(nod)", "from sys import stdin\nimport bisect\ninput = stdin.readline\nip = lambda : input().rstrip('\\n')\nIP = lambda : list(map(int, ip().split()))\n\ndef gcd(a, b):\n    while b:\n        tmp = a % b\n        a = b\n        b = tmp\n    return a\nfor i in range(int(ip())):\n    n = int(ip())\n    lst = sorted(IP())\n    dif = set()\n    for i in range(1, n):\n        dif.add(lst[i] - lst[0])\n    if all([i == 0 for i in dif]):\n        print(-1)\n    else:\n        for i in dif:\n            if i != 0:\n                ret = i\n                break\n        for i in dif:\n            if i != 0:\n                ret = gcd(ret, i)\n        print(ret)", "from sys import stdin\ninput = stdin.readline\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    s = set(a)\n    if len(s) == 1:\n        print(-1)\n    else:\n        mini = min(a)\n        s.remove(mini)\n        dif = []\n        diff = 10000000\n        for i in a:\n            dif.append(i - mini)\n        num1 = dif[0]\n        num2 = dif[1]\n        vgcd = gcd(num1, num2)\n        for i in range(2, len(dif)):\n            vgcd = gcd(vgcd, dif[i])\n        print(vgcd)", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef solve():\n    input()\n    a = set(map(int, input().split()))\n    if len(a) == 1:\n        print(-1)\n    else:\n        b = sorted(a)\n        c = [y - x for (x, y) in zip(b, b[1:])]\n        ans = c[0]\n        for x in c[1:]:\n            ans = math.gcd(ans, x)\n        print(ans)\nfor _ in range(int(input())):\n    solve()", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nimport math\ninp_vars_int = lambda : map(int, input().split())\ninp_list_int = lambda : list(map(int, input().split()))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = sorted(inp_list_int())\n    if len(set(a)) == 1:\n        print(-1)\n        continue\n    d = [a[i] - a[i - 1] for i in range(1, n)]\n    res = d[0]\n    for d2 in d[1:]:\n        res = math.gcd(res, d2)\n        if res == 1:\n            break\n    print(res)", "def nod(a, b):\n    if a != b and b != 0:\n        return nod(b, a % b)\n    else:\n        return a\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    w = min(a)\n    no = max(a) - w\n    if no == 0:\n        print(-1)\n    else:\n        for j in a:\n            if j != w:\n                no = nod(no, j - w)\n        print(no)", "res = []\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    tmp = []\n    for j in range(1, n):\n        tmp.append(abs(a[j - 1] - a[j]))\n    tmp.sort()\n    d = tmp[-1]\n    dels = set()\n    for j in range(1, int(d ** 0.5) + 1):\n        if d % j == 0:\n            dels.add(j)\n            dels.add(d // j)\n    all_dels = []\n    for j in dels:\n        flag = True\n        for k in tmp:\n            if k % j != 0:\n                flag = False\n                break\n        if flag:\n            all_dels.append(j)\n    if len(all_dels) == 0:\n        res.append(-1)\n    else:\n        res.append(max(all_dels))\nprint(*res, sep='\\n')", "import sys\nfrom math import *\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    lst = list(map(int, sys.stdin.readline().split()))\n    d = abs(lst[1] - lst[0])\n    for i in range(1, n - 1):\n        recent = abs(lst[i + 1] - lst[i])\n        d = gcd(d, recent)\n    if d == 0:\n        print(-1)\n    else:\n        print(d)", "from sys import setrecursionlimit\nsetrecursionlimit(1000000)\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mi = min(a)\n    ans = 0\n    for i in range(n):\n        a[i] = a[i] - mi\n        ans = gcd(ans, a[i])\n    if ans == 0:\n        print(-1)\n    else:\n        print(int(ans))", "def gcd(a, b):\n    while a != 0 and b != 0:\n        if a < b:\n            b = b % a\n        else:\n            a = a % b\n    return a if a else b\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(n) for n in input().split()]\n    m = min(a)\n    ans = 0\n    for j in a:\n        ans = gcd(ans, j - m)\n    print(ans or -1)", "from math import gcd\n\ndef solve(n, ls):\n    m = min(ls)\n    g = []\n    for ai in ls:\n        if ai == m:\n            continue\n        g.append(ai - m)\n    if not g:\n        return -1\n    gc = g[0]\n    for gi in g[1:]:\n        gc = gcd(gi, gc)\n    return gc\nt = int(input().strip())\ninputs = []\nfor _ in range(t):\n    n = int(input().strip())\n    ls = list(map(int, input().strip().split()))\n    inputs.append((n, ls))\nfor (n, ls) in inputs:\n    print(solve(n, ls))", "t = int(input())\n\ndef gcd(a, b):\n    if not a * b:\n        return a + b\n    if a > b:\n        return gcd(a % b, b)\n    else:\n        return gcd(a, b % a)\nfor _ in range(t):\n    n = int(input())\n    L = [*map(int, input().split())]\n    mn = min(L)\n    ans = -1000000000.0\n    for el in L:\n        if el != mn:\n            if ans == -1000000000.0:\n                ans = el - mn\n            else:\n                ans = gcd(ans, el - mn)\n    if ans == -1000000000.0:\n        print(-1)\n    else:\n        print(ans)", "import math\n\ndef main() -> None:\n    for t in range(int(input())):\n        n = int(input())\n        a = list(set([int(x) for x in input().split()]))\n        a.sort()\n        n = len(a)\n        if n == 1:\n            print(-1)\n        else:\n            ans = a[1] - a[0]\n            for i in range(n - 1):\n                ans = math.gcd(ans, a[i + 1] - a[i])\n            print(ans)\nmain()", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    A = list(map(int, input().split()))\n    D = set(A)\n    B = []\n    for i in D:\n        B.append(i)\n    B.sort()\n    ans = 9999999999\n    if len(B) == 2:\n        print(abs(B[0] - B[1]))\n        continue\n    if len(B) == 1:\n        print(-1)\n        continue\n    C = []\n\n    def gcd(x, y):\n        while y:\n            (x, y) = (y, x % y)\n        return x\n    for i in range(1, len(B)):\n        t = abs(B[0] - B[i])\n        C.append(t)\n    a = C[0]\n    b = C[1]\n    ans = gcd(a, b)\n    for i in range(2, len(C)):\n        ans = gcd(ans, C[i])\n    print(ans)", "from math import gcd\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        a.sort()\n        ans = -1\n        for i in range(1, n):\n            diff = a[i] - a[i - 1]\n            if diff == 0:\n                continue\n            if ans == -1:\n                ans = diff\n            else:\n                ans = gcd(ans, diff)\n        print(ans)\nmain()", "from math import gcd\nfor s in range(int(input())):\n    n = int(input())\n    flag = 0\n    li = [int(i) for i in input().split()]\n    (g, k) = (0, li[0])\n    for i in range(1, n):\n        if li[i] != li[0]:\n            flag = 1\n            break\n    if flag == 0:\n        print(-1)\n    else:\n        for i in range(1, n):\n            g = gcd(g, k - li[i])\n        print(g)", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = set(map(int, input().split()))\n    if len(arr) == 1:\n        print(-1)\n        continue\n    arr = sorted(arr)\n    res = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        res = gcd(res, arr[i] - arr[i - 1])\n    print(res)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    mn = l[0]\n    m = list(map(lambda x: x - mn, l))\n    x = -1\n    c = 0\n    f = 1\n    while f == 1:\n        f = 0\n        for i in range(n):\n            if m[i] != 0 and c == 0:\n                x = m[i]\n                c = 1\n            elif m[i] != 0:\n                if m[i] % x == 0:\n                    continue\n                else:\n                    x = m[i] % x\n                    f = 1\n                    break\n    print(x)", "import math\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    res = 0\n    for i in range(1, n):\n        res = math.gcd(res, arr[i] - arr[i - 1])\n    if res == 0:\n        print(-1)\n    else:\n        print(res)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mn = min(a)\n    g = 0\n    for i in a:\n        g = math.gcd(g, i - mn)\n    if g == 0:\n        print(-1)\n    else:\n        print(g)", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef func():\n    n = int(input())\n    l = sorted(list(map(int, input().split())))\n    if l[0] == l[-1]:\n        print(-1)\n        return\n    g = 0\n    for i in range(1, len(l)):\n        x = l[i] - l[0]\n        g = gcd(g, x)\n    print(g)\nt = int(input())\nfor i in range(t):\n    func()", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(a) == 1:\n        print(-1)\n        continue\n    a = sorted(a)\n    ans = a[1] - a[0]\n    for i in range(2, len(a)):\n        ans = gcd(ans, a[i] - a[i - 1])\n    if ans == 0:\n        print(-1)\n        continue\n    print(ans)", "from math import gcd\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    diff = []\n    p = min(arr)\n    for o in range(n):\n        if arr[o] == p:\n            continue\n        diff.append(arr[o] - p)\n    g = 0\n    for i in range(len(diff)):\n        g = gcd(g, diff[i])\n    if g == 0:\n        print(-1)\n    else:\n        print(g)", "from math import gcd\nfrom collections import Counter\nfrom sys import stdin as read, stdout as out\nfrom bisect import bisect_left as bl, bisect_right as br\n\ndef get_int():\n    return int(read.readline())\n\ndef get_int_more():\n    return map(int, read.readline().split())\n\ndef get_list():\n    return list(map(int, read.readline().strip().split()))\n\ndef get_strl():\n    return list(read.readline()[:-1])\n\ndef get_str():\n    return read.readline()\n\ndef write(result):\n    out.write(str(result))\n\ndef write_list(lst):\n    out.write(' '.join(map(str, lst)))\n    out.write('\\n')\n\ndef solve():\n    n = get_int()\n    k = 0\n    lst = get_list()\n    for i in range(1, n):\n        k = gcd(k, lst[i] - lst[i - 1])\n    if k == 0:\n        print(-1)\n    else:\n        print(k)\n\ndef main():\n    t = get_int()\n    while t:\n        solve()\n        t -= 1\nmain()", "def fun(a, b):\n    mn = min(a, b)\n    mx = max(a, b)\n    if mn == mx or mn == 0:\n        return max(1, mx)\n    ds = int(mx / mn)\n    return fun(mn, mx - ds * mn)\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    mn = min(a)\n    v = []\n    val = -1\n    for i in a:\n        dif = i - mn\n        if dif:\n            v.append(dif)\n        if dif == 0:\n            continue\n        if val < 0:\n            val = dif\n        else:\n            val = fun(val, dif)\n    if len(str(val)) < 1e+18:\n        print(int(val))\n    else:\n        print(-1)\nt = int(input())\nfor t1 in range(t):\n    solve()", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a.count(a[0]) == n:\n        print(-1)\n    else:\n        a.sort()\n        g = 0\n        x = 1\n        maxi = 1\n        for i in range(n - 2, -1, -1):\n            g = gcd(g, a[i + 1] - a[i])\n        print(max(g, 1))", "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 6)\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = set(list(map(int, input().split())))\n    sl = list(s)\n    sl.sort()\n    t = sl[0]\n    for i in range(len(sl)):\n        sl[i] -= t\n    if len(sl) == 1:\n        ans = -1\n    elif len(sl) == 2:\n        ans = sl[1]\n    else:\n        ans = sl[1]\n        for i in range(2, len(sl)):\n            ans = gcd(ans, sl[i])\n    print(ans)", "import math\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = min(a)\n    res = []\n    for i in range(n):\n        if a[i] != m:\n            res.append(a[i] - m)\n    if not res:\n        print(-1)\n        continue\n    gcd = res[0]\n    for i in range(1, len(res)):\n        gcd = math.gcd(res[i], gcd)\n    print(gcd)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    li.sort()\n    ans = []\n    for i in range(1, n):\n        if li[i] - li[i - 1] != 0:\n            ans.append(li[i] - li[i - 1])\n    if len(ans) == 0:\n        print(-1)\n        continue\n    if ans.count(ans[0]) == len(ans):\n        print(min(ans))\n    else:\n        gc = ans[0]\n        for i in range(1, len(ans)):\n            gc = gcd(ans[i], gc)\n        print(gc)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = set(map(int, input().split()))\n    mn = min(a)\n    li = []\n    cnt = -1\n    for i in a:\n        cnt += 1\n        if i != mn:\n            li.append(i - mn)\n    if cnt == 1:\n        print(li[0])\n        continue\n    elif cnt == 0:\n        print(-1)\n        continue\n    num1 = li[0]\n    num2 = li[1]\n    gc = gcd(num1, num2)\n    for i in range(2, cnt):\n        gc = gcd(gc, li[i])\n    print(gc)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if len(set(arr)) == 1:\n        print(-1)\n        continue\n    mini = min(arr)\n    GCD = None\n    for val in arr:\n        if val != mini:\n            if GCD is None:\n                GCD = val - mini\n            else:\n                GCD = gcd(GCD, val - mini)\n    print(GCD)", "from math import gcd\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = 0\n    b = min(a)\n    for i in range(n):\n        k = gcd(k, a[i] - b)\n    print(-1) if len(set(a)) == 1 else print(k)", "from sys import stdin\ninput = stdin.readline\ntest = int(input())\n\ndef gcd(a, b):\n    if a % b == 0:\n        return b\n    return gcd(b, a % b)\nfor _ in range(test):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (val, i, g) = (min(arr), 0, 0)\n    while i < n and arr[i] == val:\n        i += 1\n    if i == n:\n        print(-1)\n    else:\n        g = arr[i] - val\n        for j in range(i + 1, n):\n            if arr[j] != val:\n                g = gcd(arr[j] - val, g)\n        print(g)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    spic = list(map(int, input().split()))\n    fl = False\n    ans = 0\n    k = min(spic)\n    for i in range(n):\n        if spic[i] != spic[i - 1]:\n            fl = True\n        ans = gcd(ans, spic[i] - k)\n    if ans != 0:\n        print(ans)\n    else:\n        print(-1)", "from math import gcd\nfor i in range(int(input())):\n    N = int(input())\n    lst = list(map(int, input().split()))\n    p = []\n    t = min(lst)\n    if len(list(set(lst))) == 1:\n        print(-1)\n    else:\n        for h in lst:\n            if h != t:\n                p.append(h - t)\n        m = p[0]\n        for h in p[1:]:\n            m = gcd(m, h)\n        print(m)", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    temp = -1000000000000\n    for i in a:\n        if i > temp:\n            temp = i\n    l = []\n    for i in range(len(a) - 1):\n        l.append(temp - a[i])\n    _gcd = gcd(l[0], l[1])\n    for i in range(2, len(l)):\n        _gcd = gcd(_gcd, l[i])\n    print(_gcd if a[0] != a[n - 1] else '-1')", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = 0\n    b = min(a)\n    for i in range(n):\n        k = gcd(k, a[i] - b)\n    if len(set(a)) == 1:\n        print('-1')\n    else:\n        print(k)", "from math import *\n\ndef readInt():\n    return int(input())\n\ndef readInts():\n    return [int(i) for i in input().split(' ')]\n\ndef readString():\n    return input()\n\ndef readStrings():\n    return input().split(' ')\nT = readInt()\nfor tc in range(T):\n    n = readInt()\n    a = readInts()\n    diffs = [abs(a[i + 1] - a[i]) for i in range(len(a) - 1)]\n    res = diffs[0]\n    for d in diffs:\n        res = gcd(res, d)\n    if res == 0:\n        print(-1)\n    else:\n        print(res)", "from math import *\nfrom functools import *\n\ndef readInt():\n    return int(input())\n\ndef readInts():\n    return [int(i) for i in input().split(' ')]\n\ndef readString():\n    return input()\n\ndef readStrings():\n    return input().split(' ')\nT = readInt()\nfor tc in range(T):\n    (n, a) = (readInt(), readInts())\n    diffs = [abs(a[i + 1] - a[i]) for i in range(len(a) - 1)]\n    res = reduce(gcd, diffs, diffs[0])\n    print(res if res else -1)", "from math import *\nfrom functools import *\n\ndef readInt():\n    return int(input())\n\ndef readInts():\n    return [int(i) for i in input().split(' ')]\nfor _ in range(readInt()):\n    (n, a) = (readInt(), readInts())\n    diffs = [abs(a[i + 1] - a[i]) for i in range(len(a) - 1)]\n    res = reduce(gcd, diffs, diffs[0])\n    print(res if res else -1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    a = min(arr)\n    if arr.count(a) == n:\n        print(-1)\n        continue\n    for i in range(n):\n        arr[i] = arr[i] - a\n    gcd = arr[0]\n    for i in arr:\n        gcd = math.gcd(gcd, i)\n    print(gcd)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    a = min(arr)\n    gcd = arr[0] - a\n    if arr.count(a) == n:\n        print(-1)\n        continue\n    for i in range(n):\n        gcd = math.gcd(gcd, arr[i] - a)\n    print(gcd)", "def gsd(a, b):\n    while a % b != 0:\n        a %= b\n        (a, b) = (b, a)\n    return b\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(s) for s in input().split()]\n    m = min(a)\n    for i in range(n):\n        a[i] -= m\n    d = 0\n    for el in a:\n        if el != 0:\n            d = el\n            break\n    if d == 0:\n        print(-1)\n    else:\n        for el in a:\n            d = gsd(el, d)\n            if d == 1:\n                break\n        print(d)", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    n = input()\n    a = list(map(int, input().split()))\n    minimal = min(a)\n    current_gcd = 0\n    for elem in a:\n        if elem != minimal:\n            current_gcd = gcd(current_gcd, abs(minimal - elem))\n    if current_gcd == 0:\n        print(-1)\n    else:\n        print(current_gcd)", "from math import gcd\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = 0\n    b = min(a)\n    for i in range(n):\n        k = gcd(k, a[i] - b)\n    print(-1) if len(set(a)) == 1 else print(k)", "from math import gcd\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = 0\n    b = min(a)\n    for i in range(n):\n        k = gcd(k, a[i] - b)\n    print(-1) if len(set(a)) == 1 else print(k)", "from collections import Counter, deque, defaultdict\nfrom math import *\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    l = set(map(int, input().split()))\n    if len(l) == 1 and n != 1:\n        print(-1)\n        return\n    l1 = []\n    m = min(l)\n    for i in l:\n        l1.append(i - m)\n    ans = 0\n    for i in l1:\n        ans = gcd(ans, i)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if all((a[0] == i for i in a)):\n        print(-1)\n        continue\n    smallest = min(a)\n    for i in range(n):\n        a[i] = smallest - a[i]\n    best_gcd = math.gcd(a[0], a[1])\n    for i in range(2, n):\n        best_gcd = math.gcd(best_gcd, a[i])\n    print(best_gcd)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n\n    def gcd(x, y):\n        while y:\n            (x, y) = (y, x % y)\n        return x\n    a = set()\n    mini = min(l)\n    for i in range(n):\n        if l[i] != mini:\n            a.add(l[i] - mini)\n    if len(a) == 0:\n        print(-1)\n    elif len(a) == 1:\n        for i in a:\n            print(i)\n    else:\n        s = list(a)\n        g = gcd(s[0], s[1])\n        for i in range(2, len(s)):\n            g = gcd(g, s[i])\n        print(g)", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    input()\n    arr = list(map(int, input().split()))\n    tmp = arr[0]\n    ok = True\n    for i in arr:\n        if i != tmp:\n            ok = False\n    if ok:\n        print(-1)\n        continue\n    gcdd = 0\n    for i in range(0, len(arr)):\n        for j in range(0, len(arr)):\n            if i == j:\n                continue\n            gcdd = gcd(gcdd, arr[i] - arr[j])\n    print(gcdd)", "from math import gcd as g\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    a = list(map(int, input().split()))[:n]\n    if len(set(a)) == 1:\n        print(-1)\n        t -= 1\n        continue\n    mini = min(a)\n    net = []\n    for i in a:\n        if i != mini:\n            net.append(abs(mini - i))\n    ans = net[0]\n    for j in net:\n        ans = g(ans, j)\n    print(ans)\n    t -= 1", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(int(input())):\n    n = int(input())\n    arr = []\n    b = [int(x) for x in input().split()]\n    d = sorted(b)\n    for i in range(len(d) - 1):\n        if d[i] == d[i + 1]:\n            pass\n        else:\n            diff = d[i + 1] - d[i]\n            arr.append(diff)\n    if len(arr) < 1:\n        print(-1)\n    elif len(arr) == 1:\n        print(arr[0])\n    elif len(arr) == 2:\n        print(find_gcd(arr[0], arr[1]))\n    elif len(arr) > 2:\n        gcd = find_gcd(arr[0], arr[1])\n        for i in range(2, len(arr)):\n            gcd = find_gcd(gcd, arr[i])\n        print(gcd)", "T = int(input())\n\ndef gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    while b > 0:\n        t = a\n        a = b\n        b = t % b\n    return a\nfor t in range(T):\n    ans = 0\n    N = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    if A[0] == A[N - 1]:\n        print(-1)\n        continue\n    B = [A[i] - A[0] for i in range(1, N)]\n    k = B[0]\n    for i in range(1, N - 1):\n        k = gcd(k, B[i])\n    print(k)", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor i in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    l1 = [0] * (n - 1)\n    for i in range(1, len(l)):\n        l1[i - 1] = l[i] - l[0]\n    l1.sort()\n    ans = 0\n    bo = True\n    for i in range(len(l1)):\n        ans = gcd(ans, l1[i])\n    if ans == 0:\n        bo = False\n    if bo:\n        print(abs(ans))\n    else:\n        print(-1)", "def pgcd(a, b):\n    if b == 0:\n        return a\n    else:\n        r = a % b\n        return pgcd(b, r)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    result = list(map(int, input().split()))\n    res = []\n    for j in range(len(result) - 1):\n        res.append(abs(result[j] - result[j - 1]))\n    a = res[0]\n    p = a\n    for j in range(len(res)):\n        a = res[j]\n        p = pgcd(p, a)\n    if p == 0:\n        p = -1\n    print(p)", "import sys\nt = int(input())\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    d = [m - a[i] for i in range(n) if m - a[i] != 0]\n    if len(d) == 0:\n        print(-1)\n    elif len(d) == 1:\n        print(d[0])\n    else:\n        minn = min(d)\n        s = 0\n        while True:\n            if d[s] != 0:\n                fir = d[s]\n                s += 1\n                break\n            s += 1\n        while True:\n            if d[s] != 0:\n                sec = d[s]\n                s += 1\n                break\n            s += 1\n        g = gcd(fir, sec)\n        for i in range(s, len(d)):\n            g = gcd(g, d[i])\n        print(g)", "import math\nfor k in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    for i in range(1, n):\n        b.append(a[i] - a[i - 1])\n    g = 0\n    for i in range(n - 1):\n        g = math.gcd(g, b[i])\n    if len(set(a)) == 1:\n        print(-1)\n    else:\n        print(g)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(set(a)) == 1:\n        print(-1)\n        continue\n    k = min(a)\n    m = max(a)\n    for i in range(n):\n        if a[i] == k:\n            a[i] = m - k\n        else:\n            a[i] -= k\n    res = a[0]\n    for c in a[1:]:\n        res = gcd(res, c)\n    print(1 if res == 0 else res)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(list(set(a))) == 1:\n        print(-1)\n        continue\n    arr = []\n    for i in range(n):\n        for j in range(n):\n            arr.append(abs(a[i] - a[j]))\n    m = arr[0]\n    for i in range(1, len(arr)):\n        m = math.gcd(m, arr[i])\n    print(m)", "from math import gcd\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = 0\n    b = min(a)\n    for i in range(n):\n        k = gcd(k, a[i] - b)\n    print(-1) if len(set(a)) == 1 else print(k)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    karr = [int(x) for x in input().split()]\n    karr = set(karr)\n    karr = [x for x in karr]\n    karr.sort()\n    if len(karr) == 1:\n        print(-1)\n        continue\n    mindiff = 0\n    for i in range(1, len(karr)):\n        mindiff = gcd(karr[i] - karr[i - 1], mindiff)\n    print(mindiff)", "def gcd(a, b):\n    while True:\n        c = a % b\n        if c == 0:\n            break\n        a = b\n        b = c\n    return b\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    result = []\n    for j in range(1, n):\n        if l[j] != l[j - 1]:\n            result.append(l[j] - l[j - 1])\n    if len(result) == 0:\n        print(-1)\n        continue\n    if len(result) == 1:\n        print(result[0])\n        continue\n    k = gcd(result[0], result[1])\n    for j in range(2, len(result)):\n        k = gcd(k, result[j])\n    print(k)", "import math\ntest = int(input())\nfor i in range(test):\n    n = int(input())\n    ar = input().split()\n    ar = [int(ele) for ele in ar]\n    arr = []\n    for ele in ar:\n        if ele not in arr:\n            arr.append(ele)\n    if len(arr) == 1:\n        print(-1)\n        continue\n    arr.sort()\n    ar = []\n    for j in range(1, len(arr)):\n        ar.append(arr[j] - arr[j - 1])\n    if len(ar) > 1:\n        gd = math.gcd(ar[0], ar[1])\n        for j in range(2, len(ar)):\n            if gd > math.gcd(ar[j], ar[j - 1]):\n                gd = math.gcd(ar[j], ar[j - 1])\n        print(gd)\n    else:\n        print(ar[0])", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, str(input()).split()))\n    a.sort()\n    pre = a[0]\n    ans = 0\n    for i in range(1, n):\n        if a[i] == pre:\n            continue\n        b = a[i] - pre\n        ans = gcd(ans, b)\n        if ans == 1:\n            break\n    if ans == 0:\n        ans = -1\n    print(ans)", "t = int(input())\n\ndef hcf(x, y):\n    if x < y:\n        tem = y\n        y = x\n        x = tem\n    if x % y == 0:\n        return y\n    return hcf(y, x % y)\nwhile t:\n    n = int(input())\n    s = list(map(int, input().split()))\n    s = list(set(s))\n    minn = min(s)\n    if len(s) == 1:\n        print(-1)\n        t -= 1\n        continue\n    s.remove(minn)\n    s = [i - minn for i in s]\n    a = s[0]\n    for i in range(1, len(s)):\n        a = hcf(a, s[i])\n    print(a)\n    t -= 1", "def gcd(a, b):\n    while a != 0:\n        (a, b) = (b % a, a)\n    return b\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = min(a)\n    for k in range(n):\n        a[k] -= m\n    ans = gcd(a[0], a[1])\n    for j in range(n - 2):\n        ans = gcd(ans, a[j + 2])\n    if ans == 0:\n        ans = -1\n    print(ans)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    b = min(A)\n    i = 0\n    k = A[i] - b\n    while i < n:\n        if A[i] != b:\n            y = math.gcd(k, A[i] - b)\n            k = y\n        i += 1\n    if k >= 1:\n        print(k)\n    else:\n        print('-1')", "def all_are_same(nums):\n    nums = list(set(nums))\n    if len(nums) == 1:\n        return -1\n    nums.sort()\n    diff = set()\n\n    def find_gcd(x, y):\n        if x == 0:\n            return y\n        return find_gcd(y % x, x)\n    for i in range(len(nums) - 1):\n        diff.add(nums[i + 1] - nums[i])\n    diff = list(diff)\n    result = diff[0]\n    for i in range(1, len(diff)):\n        result = find_gcd(result, diff[i])\n    return result\nN = int(input())\nfor _ in range(N):\n    n = int(input())\n    nums = [int(x) for x in input().split()]\n    print(all_are_same(nums))", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    m = int(input())\n    list1 = list(map(int, input().split()))\n    list1.sort()\n    if list1[0] == list1[-1]:\n        print(-1)\n    else:\n        gcds = 0\n        for i in range(1, len(list1)):\n            gcds = gcd(gcds, list1[i] - list1[i - 1])\n        print(gcds)", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    data = [int(i) for i in str(input()).split()]\n    minsim = min(data)\n    prev = minsim\n    is_equal = True\n    for num in data:\n        if num != minsim:\n            is_equal = False\n    if is_equal:\n        print('-1')\n    else:\n        ans = 0\n        data = sorted(data)\n        for i in range(n):\n            ans = gcd(ans, data[i] - minsim)\n        print(ans)", "def gcd(x, y):\n    if x % y == 0:\n        return y\n    return gcd(y, x % y)\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(set((int(x) for x in input().split())))\n    length = len(arr)\n    if length == 1:\n        print(-1)\n        continue\n    diff = []\n    for j in range(length - 1):\n        diff.append(abs(arr[j] - arr[j + 1]))\n    if len(diff) == 1:\n        print(diff[0])\n        continue\n    gcdd = gcd(diff[0], diff[1])\n    for j in range(length - 1):\n        gcdd = gcd(gcdd, diff[j])\n    print(gcdd)", "from math import gcd\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = min(a)\n    l = []\n    for j in range(n):\n        l.append(a[j] - m)\n    x = l[0]\n    for k in l:\n        x = gcd(x, k)\n    if x == 0:\n        print(-1)\n    else:\n        print(x)", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().strip().split()))[:n]\n    a.sort()\n    d = []\n    for x in range(n):\n        for y in range(n):\n            if a[x] < a[y]:\n                d.append(a[y] - a[x])\n                break\n    if sum(a) / n == a[0]:\n        d.append(0)\n        d.append(0)\n    d.sort()\n    if len(d) == 1:\n        d.append(d[0])\n    gcd = find_gcd(d[0], d[1])\n    for i in range(2, len(d)):\n        gcd = find_gcd(gcd, d[i])\n    if gcd == 0:\n        print(-1)\n    else:\n        print(gcd)", "from math import gcd\nin1 = int(input())\nfor i in range(in1):\n    in2 = int(input())\n    in3 = input().split()\n    in3 = list(map(int, in3))\n    mi = min(in3)\n    in3 = list([x - mi for x in in3])\n    g = 0\n    a = set(in3)\n    if len(a) != 1:\n        for j in in3:\n            if j != 0:\n                if g == 0:\n                    g = j\n                g = gcd(g, j)\n        print(g)\n    else:\n        print(-1)", "import math\ncases = int(input())\nfor case in range(cases):\n    n = int(input())\n    nums = list(map(lambda x: int(x), input().split(' ')))\n    lcmSet = set()\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] != nums[j]:\n                lcmSet.add(abs(nums[j] - nums[i]))\n    lcmList = list(lcmSet)\n    computed = 0\n    if len(lcmList) == 0:\n        print(-1)\n        computed = 1\n    elif len(lcmList) == 1:\n        print(lcmList[0])\n        computed = 1\n    if not computed:\n        res = math.gcd(lcmList[0], lcmList[1])\n        for i in range(2, len(lcmList)):\n            res = math.gcd(res, lcmList[i])\n        print(res)", "from math import gcd\nfrom functools import reduce\nx = int(input(''))\nfor i in range(x):\n    x1 = input('')\n    a = list(map(int, input().split(' ')))\n    a.sort()\n    list1 = []\n    lcm = 1\n    same = True\n    for i in range(len(a)):\n        if a[i] - a[0] > 0:\n            same = False\n            list1.append(a[i] - a[0])\n    if same == True:\n        print(-1)\n    else:\n        lcm = reduce(gcd, list1)\n        print(lcm)", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(int(input())):\n    n = int(input())\n    arr = sorted(list(map(int, input().split())))\n    m = arr[0]\n    for i in range(n):\n        arr[i] = arr[i] - m\n    gcd = find_gcd(arr[0], arr[1])\n    for i in range(2, n):\n        gcd = find_gcd(gcd, arr[i])\n    print(gcd if gcd > 0 else -1)", "def hcf(a, b):\n    if b == 0:\n        return a\n    return hcf(b, a % b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    list1 = list(map(int, input().strip().split()))\n    list1.sort()\n    if list1[0] == list1[n - 1]:\n        print(-1)\n        continue\n    ans = list1[1] - list1[0]\n    for i in range(2, n):\n        ans = hcf(ans, list1[i] - list1[i - 1])\n    print(ans)", "def gcd(a, b):\n    if b == 0:\n        return a\n    if b > a:\n        return gcd(b, a)\n    return gcd(b, a % b)\n\ndef gcdList(n, l):\n    i = 0\n    gcdi = l[i]\n    while i < n - 1:\n        if gcdi == 1:\n            return gcdi\n        else:\n            gcdi = gcd(gcdi, l[i + 1])\n        i += 1\n    return gcdi\nt = int(input())\nfinal = []\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    differences = []\n    for x in range(n):\n        for y in range(x + 1, n):\n            differences.append(abs(l[x] - l[y]))\n    ans = gcdList(n, differences)\n    if ans == 0:\n        final.append(-1)\n    else:\n        final.append(ans)\nfor _ in range(t):\n    print(final[_])", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    if a[0] == a[n - 1]:\n        print(-1)\n    else:\n        dif = 0\n        for i in range(1, len(a)):\n            dif = math.gcd(dif, a[i] - a[i - 1])\n        print(dif)", "from math import gcd\n\ndef mgc(n, arr):\n    mini = min(arr)\n    temp = []\n    for i in arr:\n        if i != mini:\n            temp.append(i - mini)\n    if len(temp) == 0:\n        return -1\n    ans = temp[0]\n    for i in temp[1:]:\n        ans = gcd(ans, i)\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(mgc(n, arr))", "def gcd(a, b):\n    if a == b:\n        return a\n    elif a > b:\n        (a, b) = (b, a)\n    while a > 0:\n        (a, b) = (b % a, a)\n    return b\nfor _ in range(int(input())):\n    n = int(input())\n    temp = list(map(int, input().split()))\n    xd = min(temp)\n    x = []\n    for i in range(n):\n        if temp[i] > xd:\n            x += [temp[i] - xd]\n    if len(x) == 1:\n        print(x[0])\n    elif len(x) == 0:\n        print(-1)\n    else:\n        g = gcd(x[0], x[1])\n        for i in range(2, len(x)):\n            g = gcd(g, x[i])\n            if g == 1:\n                break\n        print(g)", "def nod(a, b):\n    while b != 0:\n        c = a % b\n        a = b\n        b = c\n    return a\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = []\n    aa = [int(x) for x in input().split()]\n    aa.sort()\n    tmp = aa[0]\n    for i in aa:\n        if i != aa[0]:\n            a.append(i - aa[0])\n    if len(a) == 0:\n        print('-1')\n    else:\n        res = a[0]\n        for i in a:\n            res = nod(res, i)\n        print(res)", "import math\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mn = min(a)\n    gc = 0\n    for x in a:\n        gc = math.gcd(gc, x - mn)\n    if gc == 0:\n        gc = -1\n    print(gc)"]