["import sys\ninput = sys.stdin.readline\nnum_test_cases = int(input())\nfor test_case_ittr in range(num_test_cases):\n    (num_rows, num_cols, row, col) = [int(x) for x in input().split()]\n    i_row = row - 1\n    j_col = col - 1\n    grid = [input().strip() for i in range(num_rows)]\n    if grid[i_row][j_col] == 'B':\n        print(0)\n        continue\n    found_answer = False\n    for i in range(num_rows):\n        if grid[i][j_col] == 'B':\n            print(1)\n            found_answer = True\n            break\n    if found_answer:\n        continue\n    for j in range(num_cols):\n        if grid[i_row][j] == 'B':\n            print(1)\n            found_answer = True\n            break\n    if found_answer:\n        continue\n    grid_has_a_black_square = False\n    for i in range(num_rows):\n        for j in range(num_cols):\n            if grid[i][j] == 'B':\n                grid_has_a_black_square = True\n                break\n        if grid_has_a_black_square:\n            break\n    print(2 if grid_has_a_black_square else -1)", "for _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    l = []\n    for i in range(n):\n        s = input()\n        l.append(s)\n    li = list(zip(*l))\n    if l[r - 1][c - 1] == 'B':\n        print(0)\n        continue\n    if 'B' in l[r - 1] or 'B' in li[c - 1]:\n        print(1)\n        continue\n    c = 0\n    for i in range(n):\n        c += l[i].count('B')\n    if c:\n        print(2)\n    else:\n        print(-1)", "t = int(input())\nfor _ in range(t):\n    (n, m, r, c) = map(int, input().split())\n    r -= 1\n    c -= 1\n    arr = []\n    for i in range(n):\n        arr.append(input())\n    if arr[r][c] == 'B':\n        print(0)\n        continue\n    flag = True\n    for row in arr:\n        if 'B' in row:\n            flag = False\n            break\n    if flag:\n        print(-1)\n        continue\n    if 'B' in arr[r]:\n        print(1)\n        continue\n    res = 2\n    for i in range(n):\n        if arr[i][c] == 'B':\n            res = 1\n            break\n    print(res)", "def stolb(length, Arr, elem, index):\n    for k in range(length):\n        if Arr[k][index] == elem:\n            return True\n    return False\n\ndef stroka(length, Arr, elem='B'):\n    for k in range(length):\n        if elem in Arr[k]:\n            return True\n    return False\nfor i in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    A = [input() for j in range(n)]\n    if stroka(n, A):\n        if A[r - 1][c - 1] == 'B':\n            print(0)\n        elif 'B' in A[r - 1]:\n            print(1)\n        elif stolb(n, A, 'B', c - 1):\n            print(1)\n        else:\n            print(2)\n    else:\n        print(-1)", "n = int(input())\nfor i in range(n):\n    (a, b, c, d) = map(int, input().split())\n    l = list((input() for i in range(a)))\n    if l[c - 1][d - 1] == 'B':\n        print(0)\n    elif 'B' in l[c - 1] or 'B' in (l[i][d - 1] for i in range(a)):\n        print(1)\n    elif 'B' in ''.join(l):\n        print(2)\n    else:\n        print(-1)", "def int_input():\n    a = int(input())\n    return a\n\ndef int_list_input():\n    a = list(map(int, input().split()))\n    return a\n\ndef solve():\n    (n, m, r, c) = int_list_input()\n    arr = []\n    for _ in range(n):\n        arr.append(input())\n    if arr[r - 1][c - 1] == 'B':\n        print(0)\n        return\n    if arr[r - 1].count('B') >= 1:\n        print(1)\n        return\n    for i in range(n):\n        if arr[i][c - 1] == 'B':\n            print(1)\n            return\n    for i in range(n):\n        if arr[i].count('B') >= 1:\n            print(2)\n            return\n    print(-1)\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    g = []\n    f = True\n    for i in range(n):\n        x = input()\n        g.append(x)\n        if 'B' in x:\n            f = False\n    if f:\n        print(-1)\n    elif g[r - 1][c - 1] == 'B':\n        print(0)\n    elif 'B' in g[r - 1] or 'B' in [g[i][c - 1] for i in range(n)]:\n        print(1)\n    else:\n        print(2)", "for _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    arr = [list(input()) for i in range(n)]\n    f = False\n    if arr[r - 1][c - 1] == 'B':\n        print(0)\n        continue\n    for i in range(n):\n        if arr[i].count('B') == 0:\n            f = False\n        else:\n            f = True\n            break\n    if not f:\n        print(-1)\n        continue\n    if arr[r - 1].count('B') > 0:\n        print(1)\n        continue\n    f = False\n    for i in range(n):\n        if arr[i][c - 1] == 'B':\n            f = True\n    if f:\n        print(1)\n    else:\n        print(2)", "for iii in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    r -= 1\n    c -= 1\n    q = []\n    for i in range(n):\n        q.append(input())\n    if q[r][c] == 'B':\n        print(0)\n        continue\n    if q[r].count('B') > 0:\n        print(1)\n        continue\n    flag = False\n    for i in range(n):\n        if q[i][c] == 'B':\n            flag = True\n            break\n    if flag:\n        print(1)\n        continue\n    for i in range(n):\n        if q[i].count('B') > 0:\n            flag = True\n            break\n    if flag:\n        print(2)\n        continue\n    print(-1)", "n = int(input())\nfor i in range(n):\n    (m, n, r, c) = map(int, input().split())\n    r -= 1\n    c -= 1\n    my_map = []\n    have_black = False\n    for j in range(m):\n        row = list(input())\n        if 'B' in row:\n            have_black = True\n        my_map.append(row)\n    find = False\n    if not have_black:\n        print(-1)\n        find = True\n    elif my_map[r][c] == 'B' and (not find):\n        print(0)\n        find = True\n    if not find:\n        for k in range(m):\n            if my_map[k][c] == 'B':\n                print(1)\n                find = True\n                break\n    if not find:\n        for k in range(n):\n            if my_map[r][k] == 'B':\n                print(1)\n                find = True\n                break\n    if not find:\n        print(2)", "num = int(input())\nfor i in range(num):\n    (n, m, r, c) = map(int, input().split())\n    my_list = []\n    for y in range(n):\n        stri = input()\n        my_list.append(stri)\n    have_black = False\n    my_string = ''.join(my_list)\n    if 'B' in my_string:\n        have_black = True\n    if not have_black:\n        print(-1)\n        continue\n    elif my_list[r - 1][c - 1] == 'B':\n        print(0)\n        continue\n    elif 'B' in my_list[r - 1]:\n        print(1)\n        continue\n    else:\n        column_have_black = False\n        for x in range(n):\n            if my_list[x][c - 1] == 'B':\n                column_have_black = True\n                break\n        if column_have_black:\n            print(1)\n        else:\n            print(2)", "n = int(input())\nfor i in range(n):\n    (a, b, c, d) = map(int, input().split())\n    l = list((input() for i in range(a)))\n    if l[c - 1][d - 1] == 'B':\n        print('0')\n    elif 'B' in l[c - 1]:\n        print('1')\n    elif 'B' in (l[i][d - 1] for i in range(a)):\n        print('1')\n    elif 'B' in ''.join(l):\n        print('2')\n    else:\n        print('-1')", "def eachcase():\n    (n, m, r, c) = list(map(int, input().split()))\n    b = []\n    impossible = True\n    for i in range(n):\n        b.append(input())\n        if 'B' in b[i]:\n            impossible = False\n    if impossible:\n        print(-1)\n        return\n    if b[r - 1][c - 1] == 'B':\n        print(0)\n        return\n    if 'B' in b[r - 1]:\n        print(1)\n        return\n    for i in range(n):\n        if b[i][c - 1] == 'B':\n            print(1)\n            return\n    print(2)\n\ndef main():\n    tcs = int(input())\n    for tc in range(tcs):\n        eachcase()\nmain()", "for i in range(int(input())):\n    (n, m, r, c) = list(map(int, input().split()))\n    a = []\n    sum = 0\n    count = 0\n    for i in range(n):\n        a.append(list(input()))\n        if 'B' not in a[i]:\n            count += 1\n        if a[i][c - 1] == 'B':\n            sum += 1\n    if count == n:\n        print('-1')\n    elif a[r - 1][c - 1] == 'B':\n        print(0)\n    elif sum > 0 or 'B' in a[r - 1]:\n        print(1)\n    else:\n        print(2)", "N = int(input())\nfor _ in range(N):\n    a = []\n    (n, m, r, c) = map(int, input().split())\n    r -= 1\n    c -= 1\n    for x in range(n):\n        a.append(input())\n    result = -1\n    if a[r][c] == 'B':\n        print(0)\n    else:\n        for y in range(n):\n            if a[y][c] == 'B':\n                result = 1\n                break\n        if result == -1:\n            for x in range(m):\n                if a[r][x] == 'B':\n                    result = 1\n                    break\n        if result == -1:\n            for y in range(n):\n                for x in range(m):\n                    if a[y][x] == 'B':\n                        result = 2\n                        break\n        print(result)", "import sys\ninput = sys.stdin.readline\nt = int(input().strip())\n\ndef solve():\n    ret = -1\n    for i in range(n):\n        for j in range(m):\n            if bd[i][j] == 'B':\n                if i == r or j == c:\n                    return 1\n                else:\n                    ret = 2\n    return ret\nfor _ in range(t):\n    bd = []\n    (n, m, r, c) = map(int, input().split())\n    for _ in range(n):\n        bd.append(input().strip())\n    r -= 1\n    c -= 1\n    if bd[r][c] == 'B':\n        print(0)\n        continue\n    print(solve())", "t = int(input())\nfor _ in range(t):\n    (n, m, r, c) = list(map(int, input().split()))\n    (r, c) = (r - 1, c - 1)\n    matrix = [[z for z in input()] for _ in range(n)]\n    res = -1\n    if matrix[r][c] == 'B':\n        res = 0\n    elif 'B' in matrix[r] or 'B' in [matrix[i][c] for i in range(n)]:\n        res = 1\n    else:\n        for row in matrix:\n            if 'B' in row:\n                res = 2\n    print(res)", "n = int(input())\nfor i in range(n):\n    steps = 0\n    allwhite = 1\n    ip = 0\n    l = list(map(int, input().split()))\n    (n, m, r, c) = (l[0], l[1], l[2], l[3])\n    matrix = []\n    for i in range(n):\n        line = list(input())\n        matrix.append(line)\n    r = r - 1\n    c = c - 1\n    for i in matrix:\n        if 'B' in i:\n            allwhite = 0\n    if allwhite == 1:\n        steps = -1\n    for i in matrix[r]:\n        if i == 'B':\n            steps = 1\n            ip = 1\n    for i in matrix:\n        if i[c] == 'B':\n            steps = 1\n            ip = 1\n    if allwhite == 0 and ip == 0:\n        steps = 2\n    if matrix[r][c] == 'B':\n        steps = 0\n    print(steps)", "n = int(input())\nfor i in range(n):\n    (a, b, c, d) = [int(i) for i in input().split()]\n    tabs = []\n    for j in range(a):\n        tabs.append(input())\n    tmp = ''.join(tabs)\n    if 'B' not in tmp:\n        print(-1)\n        continue\n    if tabs[c - 1][d - 1] == 'B':\n        print(0)\n        continue\n    found = False\n    for j in range(a):\n        if tabs[j][d - 1] == 'B':\n            found = True\n            break\n    for j in range(b):\n        if tabs[c - 1][j] == 'B':\n            found = True\n            break\n    if found:\n        print(1)\n    else:\n        print(2)", "t = int(input())\n\ndef isB(s):\n    return s == 'B'\nfor _ in range(t):\n    nmrc = [int(x) for x in input().split()]\n    n = int(nmrc[0])\n    m = int(nmrc[1])\n    r = int(nmrc[2]) - 1\n    c = int(nmrc[3]) - 1\n    arr = []\n    hasB = False\n    for i in range(n):\n        arr.append(input())\n        if not hasB and arr[i].find('B') != -1:\n            hasB = True\n    if not hasB:\n        print(-1)\n    elif isB(arr[r][c]):\n        print(0)\n    else:\n        isDirectColumOrRow = False\n        for num in range(m):\n            if isB(arr[r][num]):\n                isDirectColumOrRow = True\n                break\n        if not isDirectColumOrRow:\n            for num in range(n):\n                if isB(arr[num][c]):\n                    isDirectColumOrRow = True\n                    break\n        if isDirectColumOrRow:\n            print(1)\n        else:\n            print(2)", "t = int(input())\nwhile t > 0:\n    (n, m, r, c) = map(int, input().split())\n    mat = list((input() for i in range(n)))\n    if mat[r - 1][c - 1] == 'B':\n        print('0')\n    elif 'B' in mat[r - 1] or 'B' in (mat[i][c - 1] for i in range(n)):\n        print('1')\n    elif 'B' in ''.join(mat):\n        print('2')\n    else:\n        print('-1')\n    t -= 1", "a = int(input())\n\ndef fun1(n, m, r, c, l):\n    if l[r - 1][c - 1] == 'B':\n        return 0\n    b = False\n    for i in range(n):\n        if l[i][c - 1] == 'B':\n            return 1\n    for i in range(m):\n        if l[r - 1][i] == 'B':\n            return 1\n    for i in range(n):\n        for j in range(m):\n            if l[i][j] == 'B':\n                return 2\n    return -1\nwhile a:\n    (n, m, r, c) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l += [input()]\n    print(fun1(n, m, r, c, l))\n    a -= 1", "for i in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    a = list((input() for i in range(n)))\n    if a[r - 1][c - 1] == 'B':\n        print(0)\n    elif 'B' in a[r - 1] or 'B' in (a[i][c - 1] for i in range(n)):\n        print(1)\n    elif 'B' in ''.join(a):\n        print(2)\n    else:\n        print(-1)", "for i in range(int(input())):\n    mf = 0\n    (n, m, r, c) = map(int, input().split())\n    a = list((input() for i in range(n)))\n    if a[r - 1][c - 1] == 'B':\n        print(0)\n    elif 'B' in a[r - 1] or 'B' in (a[i][c - 1] for i in range(n)):\n        print(1)\n    elif 'B' not in str(a):\n        print(-1)\n    else:\n        print(2)", "t = int(input())\nfor i in range(t):\n    (n, m, r, c) = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        a = input()\n        grid.append(a)\n    if 'B' == grid[r - 1][c - 1]:\n        print(0)\n    elif 'B' in grid[r - 1]:\n        print(1)\n    else:\n        p = 0\n        for x in range(n):\n            if grid[x][c - 1] == 'B':\n                print(1)\n                p = 1\n                break\n        if p == 1:\n            continue\n        for row in range(n):\n            for col in range(m):\n                if 'B' == grid[row][col]:\n                    print(2)\n                    p = 1\n                    break\n            if p == 1:\n                break\n        if p == 0:\n            print(-1)", "for _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    l = [input() for _ in range(n)]\n    r -= 1\n    c -= 1\n    if l[r][c] == 'B':\n        print(0)\n    elif 'B' in l[r] or 'B' in (l[z][c] for z in range(n)):\n        print(1)\n    elif 'B' in str(l):\n        print(2)\n    else:\n        print(-1)", "def splits(word):\n    return [char for char in word]\nT = int(input())\nfor i in range(T):\n    (n, m, r, c) = [int(x) for x in input().split()]\n    n -= 1\n    m -= 1\n    r -= 1\n    c -= 1\n    row = []\n    have_black = False\n    for j in range(n + 1):\n        k = splits(input())\n        if 'B' in k:\n            have_black = True\n        row.append(k)\n    if row[r][c] == 'B':\n        print(0)\n    else:\n        true = True\n        for j in range(n + 1):\n            if row[j][c] == 'B':\n                print(1)\n                true = False\n                break\n        if true == True:\n            for j in range(m + 1):\n                if row[r][j] == 'B':\n                    print(1)\n                    true = False\n                    break\n        if true == True:\n            if have_black == True:\n                print(2)\n            else:\n                print(-1)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m, r, c) = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        b = input()\n        a.append(b)\n    ans = 0\n    g = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 'B':\n                g = 1\n                break\n        if g == 1:\n            break\n    if g == 0:\n        print('-1')\n    elif a[r - 1][c - 1] == 'B':\n        print('0')\n    else:\n        ga = 0\n        for j in range(m):\n            if a[r - 1][j] == 'B':\n                ga = 1\n                break\n        for i in range(n):\n            if a[i][c - 1] == 'B':\n                ga = 1\n                break\n            if ga == 1:\n                break\n        if ga == 1:\n            print('1')\n        else:\n            print('2')", "t = int(input())\nfor i in range(t):\n    (h, w, r, c) = map(int, input().split())\n    m = []\n    bl = []\n    bc = 0\n    for i in range(h):\n        row = input()\n        if 'B' in row:\n            bl += [i]\n            bc += 1\n        m += [row]\n    if bc == 0:\n        print(-1)\n    elif m[r - 1][c - 1] == 'B':\n        print(0)\n    elif 'B' in m[r - 1] or 'B' in list((i[c - 1] for i in m)):\n        print(1)\n    else:\n        print(2)", "for i in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    a = list((input() for i in range(n)))\n    if a[r - 1][c - 1] == 'B':\n        print(0)\n    elif 'B' in a[r - 1] or 'B' in (a[i][c - 1] for i in range(n)):\n        print(1)\n    elif 'B' in ''.join(a):\n        print(2)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    g = []\n    r = r - 1\n    c = c - 1\n    h = 0\n    d = 0\n    for i in range(n):\n        g.append(str(input()))\n    for i in range(n):\n        if 'B' in g[i]:\n            d = 1\n            break\n    if d == 0:\n        print(-1)\n    elif g[r][c] == 'B' and d == 1:\n        print(0)\n    elif 'B' in g[r]:\n        print(1)\n    else:\n        for i in range(n):\n            if g[i][c] == 'B':\n                h = 1\n                break\n        if h == 1:\n            print(1)\n        else:\n            print(2)", "t = int(input())\nwhile t:\n    (a, b, c, d) = map(int, input().split())\n    w = []\n    q = 1\n    e = 2\n    while a:\n        s = input()\n        w += [s]\n        if 'B' in s:\n            q = 0\n        if s[d - 1] == 'B':\n            e = 1\n        a -= 1\n    if q:\n        print(-1)\n    elif w[c - 1][d - 1] == 'B':\n        print(0)\n    elif 'B' in w[c - 1]:\n        print(1)\n    else:\n        print(e)\n    t -= 1", "import sys, bisect, math\nfrom collections import deque, Counter\ninput = lambda : sys.stdin.readline().strip()\nceil = lambda x: math.ceil(x)\nmod = 10 ** 9 + 7\n\ndef solve():\n    (n, m, r, c) = map(int, input().split())\n    a = [input() for i in range(n)]\n    w = 0\n    for i in a:\n        w += i.count('W')\n    if w == n * m:\n        return -1\n    if a[r - 1][c - 1] == 'B':\n        return 0\n    b = 0\n    for i in range(n):\n        if a[i][c - 1] == 'B':\n            b += 1\n    for i in range(m):\n        if a[r - 1][i] == 'B':\n            b += 1\n    if b > 0:\n        return 1\n    return 2\nt = 1\nt = int(input())\nfor _ in range(t):\n    print(solve())", "nt = int(input())\nfor t in range(nt):\n    l = input().split()\n    gr = []\n    for i in range(int(l[0])):\n        gr.append(input())\n    if sum(['B' in j for j in gr]) == 0:\n        ans = -1\n    elif gr[int(l[2]) - 1][int(l[3]) - 1] == 'B':\n        ans = 0\n    elif 'B' in gr[int(l[2]) - 1] or 'B' in [kk[int(l[3]) - 1] for kk in gr]:\n        ans = 1\n    else:\n        ans = 2\n    print(ans)", "TT = int(input())\nfor i in range(TT):\n    (n, m, a, b) = map(int, input().split())\n    foo = 0\n    lst = []\n    for i in range(n):\n        lst.append(input())\n        if 'B' in lst[i]:\n            foo = 1\n    if foo:\n        if lst[a - 1][b - 1] == 'B':\n            print('0')\n        else:\n            f = 0\n            for i in range(n):\n                if lst[i][b - 1] == 'B':\n                    f = 1\n            for i in range(m):\n                if lst[a - 1][i] == 'B':\n                    f = 1\n            if f == 1:\n                print('1')\n            else:\n                print('2')\n    else:\n        print('-1')", "from itertools import permutations\nimport sys, math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    A = []\n    for i in range(n):\n        s = input()\n        A.append(s)\n    if A[r - 1][c - 1] == 'B':\n        print(0)\n        continue\n    ok = False\n    for i in A:\n        for j in i:\n            if j == 'B':\n                ok = True\n    if not ok:\n        print(-1)\n    else:\n        f = False\n        for i in range(m):\n            if A[r - 1][i] == 'B':\n                f = True\n        for i in range(n):\n            if A[i][c - 1] == 'B':\n                f = True\n        if f:\n            print(1)\n        else:\n            print(2)", "for i in range(int(input())):\n    (n, m, x, y) = list(map(int, input().split()))\n    grid = []\n    b = -1\n    for i in range(n):\n        st = input()\n        if 'B' in st:\n            b = 1\n        arr = list(st)\n        grid.append(arr)\n    if b != 1:\n        print(-1)\n    else:\n        x -= 1\n        y -= 1\n        ways = 0\n        if grid[x][y] == 'B':\n            ways = 0\n        else:\n            done = 2\n            if 'B' in grid[x]:\n                done = 1\n            for i in range(n):\n                if grid[i][y] == 'B':\n                    done = 1\n            ways = done\n        print(ways)", "t = int(input())\nans = []\nfor _ in range(t):\n    (n, m, r, c) = map(int, input().split())\n    a = []\n    imp = True\n    for i in range(n):\n        s = input()\n        if s.count('B') > 0:\n            imp = False\n        a.append(s)\n    if imp:\n        ans.append(-1)\n        continue\n    r -= 1\n    c -= 1\n    if a[r][c] == 'B':\n        ans.append(0)\n        continue\n    if a[r].count('B') > 0:\n        ans.append(1)\n        continue\n    for i in range(n):\n        if a[i][c] == 'B':\n            ans.append(1)\n            break\n    else:\n        ans.append(2)\nfor i in ans:\n    print(i)", "from sys import stdin\n\ndef solve():\n    for _ in range(int(stdin.readline().strip())):\n        (n, m, r, c) = map(int, stdin.readline().rstrip().split())\n        grid = []\n        f = 0\n        notfound = 1\n        for _ in range(n):\n            l = stdin.readline().rstrip()\n            if l[c - 1] == 'B':\n                f = 1\n            if l.find('B') != -1:\n                notfound = 0\n            grid.append(l)\n        if grid[r - 1][c - 1] == 'B':\n            print(0)\n            continue\n        if notfound:\n            print(-1)\n            continue\n        if grid[r - 1].find('B') != -1 or f:\n            print(1)\n            continue\n        print(2)\nsolve()", "t = int(input())\nfor i in range(t):\n    grid = []\n    black = False\n    one = False\n    (n, m, r, c) = [int(i) for i in input().split()]\n    for j in range(n):\n        row = list(input())\n        if 'B' in row:\n            black = True\n        grid.append(row)\n    if black:\n        if grid[r - 1][c - 1] == 'B':\n            print(0)\n        elif 'B' in grid[r - 1]:\n            print(1)\n        else:\n            for j in grid:\n                if j[c - 1] == 'B':\n                    one = True\n            if one:\n                print(1)\n            else:\n                print(2)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a1 = list(str(input()))\n        a.append(a1)\n    if a[r - 1][c - 1] == 'B':\n        print(0)\n    else:\n        flag = 0\n        for i in range(n):\n            if a[i][c - 1] == 'B':\n                flag = 1\n                break\n        for j in range(m):\n            if a[r - 1][j] == 'B':\n                flag = 1\n                break\n        if flag == 1:\n            print(1)\n        else:\n            flag = 0\n            for i in range(n):\n                for j in range(m):\n                    if a[i][j] == 'B':\n                        flag = 1\n                        break\n                if flag == 1:\n                    break\n            if flag == 1:\n                print(2)\n            else:\n                print(-1)", "for _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    r -= 1\n    c -= 1\n    a = [input() for i in range(n)]\n    if a[r][c] == 'B':\n        print(0)\n    elif 'B' in a[r]:\n        print(1)\n    else:\n        ans = -1\n        for i in range(n):\n            if a[i][c] == 'B':\n                ans = 1\n                break\n        if ans == -1:\n            for i in range(n):\n                if 'B' in a[i]:\n                    ans = 2\n                    break\n        print(ans)", "t = int(input())\nfor i in range(0, t):\n    (a, b, c, d) = map(int, input().split())\n    lis = []\n    flag = False\n    for j in range(0, a):\n        k = input()\n        lis.append(k)\n        if 'B' in k:\n            flag = True\n    if flag == False:\n        print(-1)\n    else:\n        k = ''\n        for z in lis:\n            k = k + z[d - 1]\n        if lis[c - 1][d - 1] == 'B':\n            print(0)\n        elif 'B' in lis[c - 1]:\n            print(1)\n        elif 'B' in k:\n            print(1)\n        else:\n            print(2)", "for _ in range(int(input())):\n    (n, m, r, c) = [int(x) for x in input().split()]\n    mat = []\n    bl = True\n    for i in range(n):\n        mat.append(input())\n        if 'B' in mat[i]:\n            bl = False\n    if bl:\n        print(-1)\n    elif mat[r - 1][c - 1] == 'B':\n        print(0)\n    else:\n        for i in range(n):\n            if mat[i][c - 1] == 'B':\n                bl = True\n                break\n        for j in range(m):\n            if mat[r - 1][j] == 'B':\n                bl = True\n                break\n        if bl:\n            print(1)\n        else:\n            print(2)", "def solve(n, m, r, c, grid):\n    if not any(('B' in row for row in grid)):\n        return -1\n    if grid[r - 1][c - 1] == 'B':\n        return 0\n    for i in range(n):\n        if grid[i][c - 1] == 'B':\n            return 1\n    for j in range(m):\n        if grid[r - 1][j] == 'B':\n            return 1\n    return 2\nT = int(input())\nfor _ in range(T):\n    (n, m, r, c) = [int(x) for x in input().split()]\n    grid = []\n    for i in range(n):\n        grid.append(input())\n    result = solve(n, m, r, c, grid)\n    print(result)", "def solution():\n    (n, m, r, c) = map(int, input().split())\n    G = []\n    for i in range(n):\n        G.append(input())\n    if G[r - 1][c - 1] == 'B':\n        print(0)\n        return\n    flag = False\n    for i in G:\n        if 'B' in i:\n            flag = True\n    if not flag:\n        print(-1)\n        return\n    if 'B' in G[r - 1] or 'B' in [x[c - 1] for x in G]:\n        print(1)\n    else:\n        print(2)\ntry:\n    import sys\n    import os\n    if os.path.exists('.cpl_files/1.in.txt'):\n        sys.stdin = open('.cpl_files/1.in.txt', 'r')\n        sys.stdout = open('.cpl_files/1.out.txt', 'w')\nexcept:\n    pass\nt = int(input())\nwhile t:\n    solution()\n    t -= 1", "for _ in range(int(input())):\n    (n, m, r, c) = (int(x) for x in input().split())\n    field = [input() for _ in range(n)]\n    if field[r - 1][c - 1] == 'B':\n        print(0)\n        continue\n    if any((x == 'B' for x in field[r - 1])):\n        print(1)\n        continue\n    if any((field[x][c - 1] == 'B' for x in range(n))):\n        print(1)\n        continue\n    if any(('B' in row for row in field)):\n        print(2)\n        continue\n    print(-1)", "def ii():\n    return int(input())\n\ndef mi():\n    return map(int, input().split())\n\ndef li():\n    return list(map(int, input().split()))\nfor _ in range(ii()):\n    (n, m, r, c) = mi()\n    a = []\n    for i in range(n):\n        a.append(input())\n    for i in range(n):\n        if 'B' in a[i]:\n            break\n    else:\n        print(-1)\n        continue\n    if a[r - 1][c - 1] == 'B':\n        print(0)\n    elif any((a[i][c - 1] == 'B' for i in range(n))) or any((a[r - 1][j] == 'B' for j in range(m))):\n        print(1)\n    else:\n        print(2)", "for t in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    S = [input() for j in range(n)]\n    if S[r - 1][c - 1] == 'B':\n        print(0)\n    else:\n        flag = 0\n        for i in range(n):\n            if S[i][c - 1] == 'B':\n                flag = 1\n                break\n        for i in range(m):\n            if S[r - 1][i] == 'B':\n                flag = 1\n                break\n        if flag:\n            print(1)\n        else:\n            flag = 0\n            for i in range(n):\n                for j in range(m):\n                    if S[i][j] == 'B':\n                        flag = 1\n                        break\n            if flag:\n                print(2)\n            else:\n                print(-1)", "for _ in range(int(input())):\n    (n, m, r, c) = list(map(int, input().split()))\n    mat = []\n    hasBlack = False\n    for i in range(n):\n        z = str(input())\n        if 'B' in z:\n            hasBlack = True\n        mat.append(z)\n    r -= 1\n    c -= 1\n    found = False\n    if not hasBlack:\n        print(-1)\n    elif mat[r][c] == 'B':\n        print(0)\n    elif 'B' in mat[r]:\n        print(1)\n    else:\n        for i in range(n):\n            if mat[i][c] == 'B':\n                found = True\n        if found:\n            print(1)\n        else:\n            print(2)", "t = int(input())\nfor i in range(t):\n    (n, m, r, c) = map(int, input().split())\n    li = []\n    y = 0\n    for i in range(n):\n        st = input()\n        for i in st:\n            if i == 'B':\n                y = 1\n                break\n        nli = [char for char in st]\n        li.append(nli)\n    if y == 0:\n        print(-1)\n    elif li[r - 1][c - 1] == 'B':\n        print(0)\n    else:\n        y = 0\n        nli = li[r - 1]\n        for i in range(m):\n            if nli[i] == 'B':\n                y = 1\n        for i in range(n):\n            if li[i - 1][c - 1] == 'B':\n                y = 1\n        if y == 1:\n            print(1)\n        else:\n            print(2)", "import collections\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    (n, m, r, c) = [int(x) for x in input().split()]\n    r -= 1\n    c -= 1\n    a = []\n    for i in range(n):\n        a.append(input())\n    if a[r][c] == 'B':\n        print(0)\n        continue\n    if 'B' in a[r]:\n        print(1)\n    elif 'B' in [a[j][c] for j in range(n)]:\n        print(1)\n    elif len([x for x in a if 'B' in x]) > 0:\n        print(2)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (N, M, R, C) = map(int, input().split())\n    L = []\n    ctr = 0\n    for __ in range(N):\n        S = input()\n        L.append(S)\n        if ctr == 0:\n            if S[C - 1] == 'B':\n                ctr = 1\n    if L[R - 1][C - 1] == 'B':\n        print(0)\n    elif ctr == 1:\n        print(1)\n    elif 'B' in L[R - 1]:\n        print(1)\n    else:\n        for i in L:\n            if 'B' in i:\n                print(2)\n                break\n        else:\n            print(-1)", "a = int(input())\nfor i in range(a):\n    (n, m, r, c) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        arr.append(input())\n    if arr[r - 1][c - 1] == 'B':\n        print(0)\n    else:\n        black = False\n        if arr[r - 1].count('B') >= 1:\n            black = True\n        else:\n            for i in range(n):\n                if arr[i][c - 1] == 'B':\n                    black = True\n        if black:\n            print(1)\n        else:\n            black = False\n            for i in range(n):\n                if arr[i].count('B') >= 1:\n                    black = True\n            if black:\n                print(2)\n            else:\n                print(-1)", "def main():\n    k = int(input())\n    for _ in range(k):\n        (n, m, r, c) = map(int, input().split())\n        r -= 1\n        c -= 1\n        arr = [input() for _ in range(n)]\n        foo = False\n        if arr[r][c] == 'B':\n            print(0)\n            continue\n        for i in range(n):\n            if arr[i][c] == 'B':\n                print(1)\n                foo = True\n                break\n        if foo:\n            continue\n        for j in range(m):\n            if arr[r][j] == 'B':\n                print(1)\n                foo = True\n                break\n        if foo:\n            continue\n        for i in range(n):\n            for j in range(m):\n                if arr[i][j] == 'B':\n                    print(2)\n                    foo = True\n                    break\n            if foo:\n                break\n        if foo:\n            continue\n        print(-1)\nmain()", "for _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(input())\n    r -= 1\n    c -= 1\n    if l[r][c] == 'B':\n        print(0)\n        continue\n    if l == ['W' * m] * n:\n        print(-1)\n        continue\n    ans = -1\n    for i in range(n):\n        if l[i][c] == 'B':\n            ans = 1\n            break\n    for i in range(m):\n        if l[r][i] == 'B':\n            ans = 1\n            break\n    if ans == 1:\n        print(1)\n    else:\n        print(2)", "import math\n\ndef run(function):\n\n    def wrapper(*args, **kwargs):\n        testcases = int(input())\n        for _ in range(testcases):\n            function(*args, **kwargs)\n    return wrapper\n\ndef map_input(datatype=int) -> map:\n    return map(datatype, input().split())\n\ndef list_input(datatype=int) -> list:\n    return list(map(datatype, input().split()))\n\n@run\ndef solve() -> None:\n    (n, m, r, c) = map_input()\n    mtx = []\n    for i in range(n):\n        arr = input()\n        mtx.append(arr)\n    if mtx[r - 1][c - 1] == 'B':\n        print(0)\n    else:\n        flag = False\n        for i in range(n):\n            if 'B' in mtx[i][c - 1]:\n                flag = True\n                break\n        if flag == True or 'B' in mtx[r - 1]:\n            print(1)\n        else:\n            _flag = False\n            for i in range(n):\n                if mtx[i].count('B') != 0:\n                    _flag = True\n                    break\n            if _flag is True:\n                print(2)\n            else:\n                print(-1)\nsolve()", "def res():\n    (n, m, r, c) = map(int, input().split())\n    r = r - 1\n    c = c - 1\n    field = []\n    isB = False\n    isNear = False\n    for i in range(n):\n        l = []\n        st = input()\n        for j in range(m):\n            if st[j] == 'W':\n                l.append(0)\n            else:\n                isB = True\n                if i == r or j == c:\n                    isNear = True\n                l.append(1)\n        field.append(l)\n    if not isB:\n        return -1\n    if field[r][c]:\n        return 0\n    if not isNear:\n        return 2\n    return 1\nt = int(input())\nfor _ in range(t):\n    r = res()\n    print(r)", "T = int(input())\n\ndef solve():\n    if grid[r][c] == 'B':\n        return 0\n    for i in range(m):\n        if grid[r][i] == 'B':\n            return 1\n    for i in range(n):\n        if grid[i][c] == 'B':\n            return 1\n    return 2\nfor t in range(T):\n    (n, m, r, c) = map(int, input().split())\n    r -= 1\n    c -= 1\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    black = 0\n    for row in grid:\n        black += row.count('B')\n    if black == 0:\n        print(-1)\n    else:\n        print(solve())", "__author__ = 'corlet'\n\ndef check_col(mat, row, col):\n    for i_row in range(len(mat)):\n        if mat[i_row][col] == 'B':\n            return True\n    return False\n\ndef check_row(mat):\n    for i_row in mat:\n        if 'B' in i_row:\n            return True\n    return False\n\ndef main():\n    t = int(input())\n    while t:\n        (n, m, r, c) = map(int, input().split())\n        mat = [input() for i in range(n)]\n        r -= 1\n        c -= 1\n        if mat[r][c] == 'B':\n            print(0)\n        elif 'B' in mat[r] or check_col(mat, r, c):\n            print(1)\n        elif check_row(mat):\n            print(2)\n        else:\n            print(-1)\n        t -= 1\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, m, r, c) = [int(i) for i in input().split()]\n    store = []\n    for i in range(n):\n        rowI = input()\n        store.append(rowI)\n    if store[r - 1][c - 1] == 'B':\n        print(0)\n    else:\n        isPresent = False\n        for i in range(n):\n            for j in range(m):\n                if store[i][j] == 'B':\n                    isPresent = True\n                    break\n            if isPresent:\n                break\n        if not isPresent:\n            print(-1)\n        else:\n            flag = False\n            for i in range(n):\n                if store[i][c - 1] == 'B':\n                    flag = True\n                    break\n            if not flag:\n                for i in range(m):\n                    if store[r - 1][i] == 'B':\n                        flag = True\n                        break\n            if flag:\n                print(1)\n            else:\n                print(2)", "def function(m, n, r, c, mat):\n    black_found = False\n    for i in range(m):\n        if 'B' in mat[i]:\n            black_found = True\n            break\n    if not black_found:\n        return -1\n    r -= 1\n    c -= 1\n    if mat[r][c] == 'B':\n        return 0\n    if 'B' in mat[r] or 'B' in [mat[i][c] for i in range(m)]:\n        return 1\n    return 2\nt = int(input())\nfor _ in range(t):\n    vals = list(map(int, input().split()))\n    mat = []\n    for i in range(vals[0]):\n        s = input()\n        mat.append(list(s))\n    print(function(vals[0], vals[1], vals[2], vals[3], mat))", "t = int(input())\nfor i in range(t):\n    (n, m, nn, nm) = map(int, input().split())\n    nn -= 1\n    nm -= 1\n    a = []\n    z = 0\n    for i in range(n):\n        a1 = input()\n        a.append(a1)\n        z += a1.count('B')\n    if z == 0:\n        print(-1)\n    elif a[nn][nm] == 'B':\n        print(0)\n    else:\n        t = 0\n        z = 0\n        for i in range(n):\n            if a[i][nm] == 'B':\n                print(1)\n                t = 1\n                break\n        if t == 0:\n            for i in range(m):\n                if a[nn][i] == 'B':\n                    print(1)\n                    t = 1\n                    break\n        if t == 0:\n            print(2)", "def solve():\n    (n, m, r, c) = list(map(int, list(input().split())))\n    li = []\n    for i in range(n):\n        li.append(input())\n    r -= 1\n    c -= 1\n    cnt = 0\n    for element in li:\n        if 'B' in element:\n            cnt += 1\n    if cnt == 0:\n        print(-1)\n        return\n    if li[r][c] == 'B':\n        print(0)\n        return\n    for element in li[r]:\n        if element == 'B':\n            print(1)\n            return\n    for i in range(n):\n        if li[i][c] == 'B':\n            print(1)\n            return\n    print(2)\nq = int(input())\nfor i in range(q):\n    solve()", "n = int(input())\nfor i in range(n):\n    (r, c, x, y) = map(int, input().split())\n    matrix = []\n    for j in range(r):\n        matrix.append(input())\n    x = x - 1\n    y = y - 1\n    if matrix[x][y] == 'B':\n        print(0)\n        continue\n    elif 'B' in matrix[x]:\n        print(1)\n        continue\n    flag = 0\n    for j in range(r):\n        if matrix[j][y] == 'B':\n            flag = 1\n            break\n    if flag == 1:\n        print(1)\n        continue\n    flag1 = 0\n    for j in range(r):\n        if 'B' in matrix[j]:\n            flag1 = 1\n            break\n    if flag1 == 1:\n        print(2)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    board = [input() for _ in range(n)]\n    ans = -1\n    for s in board:\n        if 'B' in s:\n            ans = 2\n    if 'B' in board[r - 1]:\n        ans = 1\n    for i in range(n):\n        if 'B' == board[i][c - 1]:\n            ans = 1\n    if 'B' == board[r - 1][c - 1]:\n        ans = 0\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m, r, c) = map(int, input().split())\n    l = []\n    for i in range(n):\n        help = input()\n        l.append(help)\n    test = False\n    test2 = l[r - 1]\n    if test2[c - 1] == 'B':\n        print(0)\n    else:\n        for i in l:\n            if 'B' in i:\n                test = True\n                break\n        if test == True:\n            if 'B' in l[r - 1]:\n                print('1')\n            else:\n                test1 = False\n                for i in l:\n                    if i[c - 1] == 'B':\n                        test1 = True\n                        break\n                if test1 == True:\n                    print(1)\n                else:\n                    print(2)\n        else:\n            print(-1)", "for _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    s = []\n    for i in range(n):\n        s.append(input())\n    if s[r - 1][c - 1] == 'B':\n        print(0)\n    elif s[r - 1].count('B') != 0:\n        print(1)\n    else:\n        temp = -1\n        for i in range(n):\n            if s[i][c - 1] == 'B':\n                temp = 1\n                break\n        if temp != 1:\n            for i in range(n):\n                for j in range(m):\n                    if s[i][j] == 'B':\n                        temp = 2\n                        break\n        print(temp)", "t = int(input())\nfor _ in range(t):\n    (n, m, r, c) = map(int, input().split())\n    a = []\n    k = False\n    bc = False\n    for i in range(n):\n        a.append(input())\n        if a[i][c - 1] == 'B':\n            k = True\n        if a[i].count('B') > 0:\n            bc = True\n    if a[r - 1][c - 1] == 'B':\n        print(0)\n        continue\n    if a[r - 1].count('B') >= 1 or k:\n        print(1)\n        continue\n    if bc:\n        print(2)\n        continue\n    print(-1)", "for _ in range(int(input())):\n    (n, m, r, c) = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        l.append(list(input()))\n    r = r - 1\n    c = c - 1\n    if l[r][c] == 'B':\n        print(0)\n        continue\n    key = 0\n    for i in range(0, m):\n        if l[r][i] == 'B':\n            print(1)\n            key = 1\n            break\n    if key == 0:\n        for i in range(0, n):\n            if l[i][c] == 'B':\n                print(1)\n                key = 1\n                break\n    if key == 0:\n        for i in range(0, n):\n            if l[i].count('B') > 0:\n                print(2)\n                key = 1\n                break\n    if key == 0:\n        print(-1)", "def fun(a, x):\n    for i in a:\n        if i[x] == 'B':\n            return True\n    return False\n\ndef Fun(a):\n    for i in a:\n        if 'B' in i:\n            return False\n    return True\nt = int(input())\nfor _ in range(t):\n    (n, m, r, c) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(input())\n    if Fun(a):\n        print(-1)\n    elif a[r - 1][c - 1] == 'B':\n        print(0)\n    elif 'B' in a[r - 1] or fun(a, c - 1):\n        print(1)\n    else:\n        print(2)", "t = int(input())\nfor _ in range(t):\n    (n, m, r, c) = list(map(int, input().split()))\n    arr = []\n    for i in range(n):\n        x = list(input())\n        arr.append(x)\n    f = 0\n    for i in range(n):\n        if 'B' in arr[i]:\n            f = 1\n            break\n    if f:\n        if arr[r - 1][c - 1] == 'B':\n            print(0)\n            continue\n        elif 'B' in arr[r - 1]:\n            print(1)\n            continue\n        else:\n            flag = 0\n            for j in range(n):\n                if arr[j][c - 1] == 'B':\n                    print(1)\n                    flag = 1\n                    break\n            if flag == 0:\n                print(2)\n                continue\n    else:\n        print(-1)", "nt = int(input())\nans = []\n\ndef soln(mat, r, c):\n    if mat[r][c] == 'B':\n        return 0\n    for x in range(m):\n        if mat[r][x] == 'B':\n            return 1\n    for x in range(n):\n        if mat[x][c] == 'B':\n            return 1\n    for x in range(n):\n        for y in range(m):\n            if mat[x][y] == 'B':\n                return 2\n    return -1\nfor x in range(nt):\n    inp = list(map(int, input().split()))\n    (n, m, r, c) = (inp[0], inp[1], inp[2], inp[3])\n    mat = []\n    for x in range(n):\n        t = list(input())\n        mat.append(t)\n    ans.append(soln(mat, r - 1, c - 1))\nfor a in ans:\n    print(a)", "for _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    l = []\n    for i in range(n):\n        s = input()\n        l.append(s)\n    if l[r - 1][c - 1] == 'B':\n        print(0)\n        continue\n    f = 0\n    ans = 4\n    if 'B' in l[r - 1]:\n        print(1)\n        continue\n    for i in l:\n        if i[c - 1] == 'B':\n            ans = min(ans, 1)\n            f = 1\n            break\n        if 'B' in i:\n            ans = min(ans, 2)\n            f = 1\n    if f == 0:\n        print(-1)\n    else:\n        print(ans)", "for _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    arr_r = []\n    flag = 0\n    for i in range(n):\n        row = input()\n        if 'B' in row:\n            flag = 1\n        arr_r.append(row)\n    if arr_r[r - 1][c - 1] == 'B':\n        print(0)\n    elif flag == 0:\n        print(-1)\n    elif 'B' in arr_r[r - 1]:\n        print(1)\n    else:\n        for i in arr_r:\n            if i[c - 1] == 'B':\n                print(1)\n                break\n        else:\n            print(2)", "from operator import truediv\nt = int(input())\nfor _ in range(t):\n    (n, m, r, c) = map(int, input().split(' '))\n    a = []\n    for i in range(n):\n        a.append(input())\n    flag1 = False\n    flag = False\n    if a[r - 1][c - 1] == 'B':\n        print(0)\n    else:\n        for i in range(n):\n            if a[i][c - 1] == 'B':\n                print(1)\n                flag = True\n                break\n        if not flag:\n            for i in range(m):\n                if a[r - 1][i] == 'B':\n                    print(1)\n                    flag = True\n                    break\n        if not flag:\n            for i in a:\n                for j in i:\n                    if j == 'B':\n                        print(2)\n                        flag1 = True\n                        break\n                if flag1:\n                    break\n        if not flag and (not flag1):\n            print(-1)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nR = []\nfor _ in range(t):\n    (n, m, r, c) = map(int, input()[:-1].split())\n    r -= 1\n    c -= 1\n    is_black_exist = False\n    row_exist = False\n    col_exist = False\n    g = []\n    for i in range(n):\n        g.append(input()[:-1])\n        if not is_black_exist:\n            if 'B' in g[-1]:\n                is_black_exist = True\n        if i == r:\n            if 'B' in g[-1]:\n                row_exist = True\n        if g[i][c] == 'B':\n            col_exist = True\n    if not is_black_exist:\n        R.append('-1')\n    elif g[r][c] == 'B':\n        R.append('0')\n    elif row_exist or col_exist:\n        R.append('1')\n    else:\n        R.append('2')\nprint('\\n'.join(R))", "t = int(input())\nfor _ in range(t):\n    (n, m, r, c) = [int(x) for x in input().split()]\n    r -= 1\n    c -= 1\n    mat = []\n    cb = False\n    for _ in range(n):\n        stringa = input()\n        mat.append(stringa)\n        if 'B' in stringa and (not cb):\n            cb = True\n    if mat[r][c] == 'B':\n        print(0)\n    elif not cb:\n        print(-1)\n    elif 'B' in mat[r] or 'B' in [row[c] for row in mat]:\n        print(1)\n    else:\n        print(2)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, m, r, c) = map(int, input().split())\n    li = []\n    f = 0\n    for i in range(0, n):\n        s = input()\n        if s.count('B') >= 1:\n            f = 1\n        li.append(s)\n    if li[r - 1][c - 1] == 'B':\n        print('0')\n    else:\n        k = 0\n        for i in range(0, m):\n            if li[r - 1][i] == 'B':\n                k = 1\n        for i in range(0, n):\n            if li[i][c - 1] == 'B':\n                k = 1\n        if k == 1:\n            print('1')\n        elif f == 1:\n            print('2')\n        else:\n            print('-1')", "t = int(input())\nfor _ in range(t):\n    (n, m, r, c) = map(int, input().split())\n    board = []\n    for i in range(n):\n        board.append([i for i in input()])\n    flag = False\n    for i in board:\n        if 'B' in i:\n            flag = True\n            break\n    if not flag:\n        print(-1)\n    else:\n        (r, c) = (r - 1, c - 1)\n        if board[r][c] == 'B':\n            print(0)\n        else:\n            ansFound = False\n            for i in board[r]:\n                if i == 'B':\n                    print(1)\n                    ansFound = True\n                    break\n            if not ansFound:\n                for i in range(n):\n                    if board[i][c] == 'B':\n                        print(1)\n                        ansFound = True\n                        break\n                if not ansFound:\n                    print(2)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    s = s.split()\n    for i in range(4):\n        s[i] = int(s[i])\n    col = []\n    for j in range(s[0]):\n        temp = input()\n        col.append(temp)\n    if col[s[2] - 1][s[3] - 1] == 'B':\n        print(0)\n        continue\n    black = 0\n    flag = 0\n    white = 1\n    for i in range(s[0]):\n        if 'B' in col[i]:\n            white = 0\n        if i == s[2] - 1:\n            if 'B' in col[i]:\n                flag = 1\n                break\n        if col[i][s[3] - 1] == 'B':\n            flag = 1\n            break\n    if flag == 1 and white == 0:\n        print(1)\n    elif flag == 0 and white == 0:\n        print(2)\n    else:\n        print(-1)", "t = int(input())\n\ndef col(li, c):\n    for r in li:\n        if 'B' == r[c]:\n            return True\n    return False\nfor u in range(t):\n    i = input()\n    i = i.split()\n    n = int(i[0])\n    m = int(i[1])\n    r = int(i[2])\n    c = int(i[3])\n    li = []\n    flag = 0\n    for j in range(n):\n        k = input()\n        li.append(k)\n        if 'B' in k:\n            flag = 1\n    if flag == 0:\n        print(-1)\n        continue\n    if r - 1 >= n or c - 1 >= m:\n        print(-1)\n        continue\n    if li[r - 1][c - 1] == 'B':\n        print(0)\n    elif li[r - 1][c - 1] == 'W' and ('B' in li[r - 1] or col(li, c - 1) == True):\n        print(1)\n    else:\n        print(2)", "for _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    arr = []\n    count = 0\n    for i in range(n):\n        arr.append(input().strip())\n        count += arr[-1].count('B')\n    if arr[r - 1][c - 1] == 'B':\n        print(0)\n    elif count == 0:\n        print(-1)\n    elif 'B' in arr[r - 1]:\n        print(1)\n    else:\n        cnt = 0\n        for i in range(n):\n            if arr[i][c - 1] == 'B':\n                cnt += 1\n                break\n        print([2, 1][cnt])", "t = int(input())\nfor i in range(t):\n    (n, m, r, c) = input().split()\n    r = int(r) - 1\n    c = int(c) - 1\n    (black, row_col, this) = (0, 0, 0)\n    for j in range(int(n)):\n        rows = input()\n        if 'B' in rows:\n            black += 1\n            if r == j and rows[c] == 'B':\n                this = 1\n            if r == j or rows[c] == 'B':\n                row_col += 1\n    if this == 1:\n        print(0)\n    elif row_col > 0:\n        print(1)\n    elif black > 0:\n        print(2)\n    else:\n        print(-1)", "t = int(input())\nfor i in range(t):\n    (n, m, r, c) = map(int, input().split())\n    a = []\n    for i in range(n):\n        s = input()\n        a.append(s)\n    if a[r - 1][c - 1] == 'B':\n        print(0)\n        continue\n    else:\n        ans = None\n        for i in range(n):\n            if a[i][c - 1] == 'B':\n                ans = 1\n                break\n        for j in range(m):\n            if a[r - 1][j] == 'B':\n                ans = 1\n                break\n        if ans != None:\n            print(ans)\n            continue\n        ans = -1\n        for i in range(n):\n            for j in range(m):\n                if a[i][j] == 'B':\n                    ans = 2\n                    break\n        print(ans)", "for t in range(int(input())):\n    (n, m, r, c) = list(map(int, input().split()))\n    f = False\n    ans = 2\n    for i in range(n):\n        s = input()\n        if i == r - 1 and s[c - 1] == 'B':\n            ans = 0\n        elif i == r - 1 and 'B' in s:\n            ans = min(1, ans)\n        elif s[c - 1] == 'B':\n            ans = min(1, ans)\n        if not f and 'B' in s:\n            f = True\n    if f:\n        print(ans)\n    else:\n        print(-1)", "t = int(input())\nfor i in range(t):\n    (n, m, r, c) = map(int, input().split())\n    ls = []\n    b = 0\n    for j in range(n):\n        s = input()\n        if b == 0:\n            d = s.count('B')\n            b = b + d\n        ls.append(s)\n    aa = 0\n    for j in ls:\n        if j[c - 1] == 'B':\n            aa = aa + 1\n            break\n    d = ls[r - 1]\n    for j in d:\n        if j == 'B':\n            aa = aa + 1\n            break\n    ss = d[c - 1]\n    if b == 0:\n        print(-1)\n    elif ss == 'B':\n        print(0)\n    elif aa > 0:\n        print(1)\n    else:\n        print(2)", "def main():\n    t = int(input())\n    for i in range(t):\n        datos = list(map(int, input().split()))\n        matriz = []\n        posible = False\n        for j in range(datos[0]):\n            fila = input()\n            if posible == False:\n                if 'B' in fila:\n                    posible = True\n            matriz.append(fila)\n        if posible == False:\n            print(-1)\n        elif matriz[datos[2] - 1][datos[3] - 1] == 'B':\n            print(0)\n        elif 'B' in matriz[datos[2] - 1]:\n            print(1)\n        else:\n            res = False\n            m = 0\n            while m < datos[0]:\n                if 'B' == matriz[m][datos[3] - 1]:\n                    print(1)\n                    res = True\n                    break\n                m += 1\n            if res == False:\n                print(2)\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, m, r, c) = map(int, input().split())\n    arr = []\n    flag = 1\n    for i in range(n):\n        temp = str(input())\n        if flag:\n            if 'B' in temp:\n                flag = 0\n        arr.append(temp)\n    if arr[r - 1][c - 1] == 'B':\n        print(0)\n        continue\n    if flag == 1:\n        print(-1)\n        continue\n    row = arr[r - 1]\n    cr_black = 0\n    for i in range(m):\n        if row[i] == 'B':\n            cr_black = 1\n            break\n    cc_black = 0\n    for i in range(n):\n        if arr[i][c - 1] == 'B':\n            cc_black = 1\n            break\n    if cc_black + cr_black == 0:\n        print(2)\n    else:\n        print(1)", "t = int(input())\nfor _ in range(t):\n    (n, m, r, c) = map(int, input().split())\n    g = [[1 * (x == 'B') for x in input()] for i in range(n)]\n    sumrow = sum(g[r - 1])\n    sumcol = sum([g[i][c - 1] for i in range(n)])\n    if g[r - 1][c - 1] == 1:\n        print(0)\n    elif sumrow > 0 or sumcol > 0:\n        print(1)\n    elif sum([sum(g[x]) for x in range(n)]) > 0:\n        print(2)\n    else:\n        print(-1)", "for i in range(int(input())):\n    (s, b, n, m) = list(map(int, input().split()))\n    a = []\n    t = set()\n    flag = 0\n    ans = 1\n    for i in range(s):\n        x = list(input())\n        if i == n - 1:\n            if 'B' in x:\n                flag = 1\n            if x[m - 1] == 'B':\n                flag = 2\n                ans = 2\n        if x[m - 1] == 'B':\n            flag = 1\n        t.update(set(x))\n        a.append(x)\n    if 'B' in t:\n        if ans == 2:\n            print(0)\n        elif flag == 1:\n            print(1)\n        else:\n            print(2)\n    else:\n        print(-1)", "def colCheck(arr, col):\n    for i in arr:\n        if i[col] == 'B':\n            return True\nfor _ in range(int(input())):\n    (n, m, r, c) = map(int, input().split())\n    flag = False\n    arr = []\n    for i in range(n):\n        s = input()\n        if 'B' in s:\n            flag = True\n        arr.append(s[::1])\n    if flag == False:\n        print(-1)\n        continue\n    row = r - 1\n    col = c - 1\n    if arr[row][col] == 'B':\n        print(0)\n    elif 'B' in arr[row]:\n        print(1)\n    elif colCheck(arr, col):\n        print(1)\n    else:\n        print(2)", "T = int(input())\n\ndef main(x, y, l):\n    flag = False\n    if l[x][y] == 'B':\n        return 0\n    for line in l:\n        if line.find('B') != -1:\n            flag = True\n            break\n    if not flag:\n        return -1\n    if l[x].find('B') != -1:\n        return 1\n    else:\n        for i in range(len(l)):\n            if i == x:\n                continue\n            flag = False\n            if l[i][y] == 'B':\n                flag = True\n                break\n        if flag:\n            return 1\n        else:\n            return 2\n\nclass case:\n\n    def __init__(self, Line):\n        temp = Line.split()\n        self.rows = int(temp[0])\n        self.x = int(temp[2]) - 1\n        self.y = int(temp[3]) - 1\n        self.Lines = []\ncases = []\nfor i in range(T):\n    line = input()\n    cases.append(case(line))\n    for _ in range(cases[i].rows):\n        cases[i].Lines.append(input())\nfor i in range(T):\n    print(main(cases[i].x, cases[i].y, cases[i].Lines))", "t = int(input())\nfor i in range(t):\n    (h, w, r, c) = map(int, input().split())\n    m = []\n    bl = []\n    bc = 0\n    for i in range(h):\n        row = input()\n        if 'B' in row:\n            bl += [i]\n            bc += 1\n        m += [row]\n    if bc == 0:\n        print(-1)\n    elif m[r - 1][c - 1] == 'B':\n        print(0)\n    elif 'B' in m[r - 1] or 'B' in list((i[c - 1] for i in m)):\n        print(1)\n    else:\n        print(2)", "t = int(input())\nfor _ in range(t):\n    (n, m, r, c) = map(int, input().split())\n    arr = []\n    flag = 0\n    for i in range(n):\n        arr.append(input())\n        if flag == 0 and 'B' in arr[i]:\n            flag = 1\n    if flag == 0:\n        print(-1)\n    else:\n        (c1, c2) = (0, 0)\n        for i in range(m):\n            if arr[r - 1][i] == 'B':\n                c1 += 1\n        for i in range(n):\n            if arr[i][c - 1] == 'B':\n                c2 += 1\n        if arr[r - 1][c - 1] == 'B':\n            print(0)\n        elif c1 >= 1 or c2 >= 1:\n            print(1)\n        else:\n            print(2)", "for _ in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    blank = 0\n    k = []\n    yy = False\n    for i in range(a):\n        temp = input()\n        if temp.count('B') != 0:\n            blank = +1\n        k.append(temp)\n    if blank == 0:\n        print(-1)\n    elif k[c - 1][d - 1] == 'B':\n        print(0)\n    else:\n        for i2 in range(a):\n            if k[i2][d - 1] == 'B':\n                yy = True\n        if k[c - 1].count('B') != 0 or yy == True:\n            print(1)\n        else:\n            print(2)", "t = int(input())\nfor _ in range(t):\n    (n, m, r, c) = map(int, input().split())\n    l = []\n    for _ in range(n):\n        l.append(input())\n    if l[r - 1][c - 1] == 'B':\n        print(0)\n    elif 'B' in l[r - 1]:\n        print(1)\n    else:\n        for i in l:\n            if i[c - 1] == 'B':\n                print(1)\n                break\n        else:\n            var = False\n            for i in l:\n                if 'B' in i:\n                    var = True\n            if var:\n                print(2)\n            else:\n                print(-1)", "def solve(matrix, x, y):\n    if matrix[x][y] == 'B':\n        return 0\n    for i in range(len(matrix)):\n        if matrix[i][y] == 'B':\n            return 1\n    for j in range(len(matrix[0])):\n        if matrix[x][j] == 'B':\n            return 1\n    for i in matrix:\n        for j in i:\n            if j == 'B':\n                return 2\n    return -1\nt = int(input())\nfor i in range(t):\n    (n, m, r, c) = input().split()\n    (n, m, r, c) = (int(n), int(m), int(r), int(c))\n    matrix = n * [None]\n    for j in range(n):\n        matrix[j] = list(input())\n    print(solve(matrix, r - 1, c - 1))"]