["import sys\ninput = sys.stdin.readline\nMODULA = 1000000000 + 7\n\ndef process(N, K):\n    r = 1\n    ans = 0\n    i = 0\n    while K > 0:\n        if i > 0:\n            r = r * N % MODULA\n        if K & 1 == 1:\n            ans = (ans + r) % MODULA\n        i += 1\n        K = K >> 1\n    return ans\nR = []\nfor _ in range(int(input())):\n    (n, k) = map(int, input()[:-1].split())\n    R.append(process(n, k))\nfor r in R:\n    print(r)", "for s in [*open(0)][1:]:\n    (n, k) = map(int, s.split())\n    r = 0\n    for x in f'{k:b}':\n        r = r * n + (x > '0')\n    print(r % (10 ** 9 + 7))", "for s in [*open(0)][1:]:\n    (n, k) = map(int, s.split())\n    r = 0\n    for x in f'{k:b}':\n        r = r * n + int(x)\n    print(r % (10 ** 9 + 7))", "for s in [*open(0)][1:]:\n    (n, k) = map(int, s.split())\n    r = 0\n    for x in f'{k:b}':\n        r = r * n + int(x)\n    print(r % (10 ** 9 + 7))", "ESP = 1000000007\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    tec = 0\n    for i in bin(k)[2:]:\n        tec *= n\n        if i == '1':\n            tec += 1\n        tec %= ESP\n    print(tec)", "for s in [*open(0)][1:]:\n    (n, k) = map(int, s.split())\n    r = 0\n    for x in f'{k:b}':\n        r = r * n + int(x)\n    print(r % (10 ** 9 + 7))", "for s in [*open(0)][1:]:\n    (n, k) = map(int, s.split())\n    r = 0\n    for x in f'{k:b}':\n        r = r * n + int(x)\n    print(r % (10 ** 9 + 7))", "for s in [*open(0)][1:]:\n    (n, k) = map(int, s.split())\n    r = 0\n    for x in f'{k:b}':\n        r = r * n + int(x)\n    print(r % (10 ** 9 + 7))", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    result = 0\n    acc = 1\n    while k > 0:\n        if k & 1 == 1:\n            result = (result + acc) % (10 ** 9 + 7)\n        k >>= 1\n        acc = acc * n % (10 ** 9 + 7)\n    print(result)", "for s in [*open(0)][1:]:\n    (n, k) = map(int, s.split())\n    r = 0\n    for x in f'{k:b}':\n        r = r * n + int(x)\n    print(r % (10 ** 9 + 7))", "mod = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    bk = bin(k)[2:]\n    ans = 0\n    for i in bk:\n        ans *= n\n        ans %= mod\n        if i == '1':\n            ans += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    w = str(bin(k))\n    z = 1\n    summ = 0\n    for i in range(len(w)):\n        if w[-1 - i] == '1':\n            summ += z\n        z *= n\n    print(summ % (10 ** 9 + 7))", "import math\n\ndef base_encode(number, base):\n    number = str(number).lower()\n    base = int(base)\n    known_digits = '0123456789abcdefghijklmnopqrstuvwxyz'\n    value = {ch: val for (val, ch) in enumerate(known_digits) if val < base}\n    if number[0] == '-':\n        sign = -1\n        number = number[1:]\n    else:\n        sign = 1\n    total = 0\n    for d in number:\n        try:\n            total = total * base + value[d]\n        except KeyError:\n            if d in known_digits:\n                raise ValueError(\"invalid digit '{0}' in base {1}\".format(d, base))\n            else:\n                raise ValueError('value of digit {0} is unknown'.format(d))\n    return sign * total\n\ndef fun(n, k):\n    a = int('{0:b}'.format(k))\n    return base_encode(int(a), n) % 1000000007\ntt = 0\nt = int(input())\nwhile tt < t:\n    (n, k) = input().split()\n    print(fun(int(n), int(k)))\n    tt = tt + 1", "import math\nMOD = 1000000007\nt = int(input())\nwhile t:\n    (n, k) = map(int, input().strip().split())\n    special_num = 0\n    temp = 1\n    while k > 0:\n        if k & 1 == 1:\n            special_num = (special_num + temp) % MOD\n        k = k >> 1\n        temp = temp * n % MOD\n    print(special_num)\n    t -= 1", "t = int(input())\nMOD = int(1000000000.0) + 7\nfor _ in range(t):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    p = 1\n    ans = 0\n    for i in range(0, 32):\n        if k & 1 << i:\n            ans += p\n        p *= n\n    print(ans % MOD)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ans = 0\n    cnter = 1\n    while k > 0:\n        if k % 2 == 1:\n            ans += cnter\n        cnter *= n\n        k //= 2\n    print(ans % mod)", "M = 1000000007\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    c = ans = 0\n    x = 1\n    while k:\n        if k & 1:\n            ans = (ans + x) % M\n        c += 1\n        k >>= 1\n        x = x * n % M\n    print(ans)", "t = int(input())\nfor b in range(t):\n    (n, k) = map(int, input().split())\n    ans = 0\n    cnter = 1\n    while k > 0:\n        if k % 2 == 1:\n            ans += cnter\n        cnter *= n\n        k //= 2\n    print(ans % 1000000007)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    ans = 0\n    b = 1\n    while k > 0:\n        if k % 2 == 1:\n            ans += b\n        k //= 2\n        b *= n\n        b %= 1000000007\n    ans %= 1000000007\n    print(ans)", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\ninp_vars_int = lambda : map(int, input().split())\ninp_list_int = lambda : list(map(int, input().split()))\nt = int(input())\nfor _ in range(t):\n    (n, k) = inp_vars_int()\n    res = 0\n    bin_k = bin(k)\n    for (i, b) in enumerate(bin_k[:1:-1]):\n        if b == '1':\n            res += n ** i\n    print(res % (10 ** 9 + 7))", "from sys import stdin\nfrom bisect import bisect_left\n\ndef solve():\n    results = []\n    MOD = 10 ** 9 + 7\n    pow_of_2 = []\n    x = 1\n    while x < 10 ** 9:\n        pow_of_2.append(x)\n        x *= 2\n    for _ in range(int(stdin.readline().strip())):\n        (n, k) = map(int, stdin.readline().strip().split())\n        ans = 0\n        while k:\n            pos = bisect_left(pow_of_2, k)\n            if pos == len(pow_of_2):\n                pos -= 1\n            if pow_of_2[pos] > k:\n                pos -= 1\n            ans += pow(n, pos, MOD)\n            k -= pow_of_2[pos]\n        results.append(ans % MOD)\n    print('\\n'.join(map(str, results)))\nsolve()", "import sys\n\ndef hp(n):\n    while n % 2 == 0:\n        n = n // 2\n    if n == 1:\n        return True\n    else:\n        return False\ntry:\n    m = 10 ** 9 + 7\n\n    def main():\n        (n, k) = map(int, input().split())\n        ans = 0\n        x = bin(k)[2:][::-1]\n        p = 1\n        ans = 0\n        for si in x:\n            ans += p * int(si)\n            p = p * n\n        print(int(ans % m))\nexcept:\n    pass\nfor _ in range(int(input())):\n    main()", "mod = int(1000000000.0 + 7)\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    p = 1\n    ans = 0\n    for i in range(30):\n        if k & 1 << i:\n            ans = (ans + p) % mod\n        p *= n\n        p %= mod\n    print(ans)", "import sys\ninp = sys.stdin.readline\nMOD = int(1000000000.0 + 7)\nfor i in range(int(inp())):\n    (n, k) = map(int, inp().split())\n    r = 0\n    for j in range(30):\n        if k >> j & 1:\n            r = (r + pow(n, j, MOD)) % MOD\n    print(r)", "a = int(input())\nl = []\nfor i in range(a):\n    (k, n) = map(int, input().split())\n    sk = 1\n    ans = 0\n    while n > 0:\n        ans += n % 2 * sk\n        n //= 2\n        sk *= k\n    print(ans % (10 ** 9 + 7))", "for i in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    a = bin(k)[2:]\n    z = 0\n    for i in range(len(a)):\n        z = (z * n + int(a[i])) % 1000000007\n    print(z)", "for i in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    a = bin(k)[2:]\n    z = 0\n    for i in range(len(a)):\n        z = (z * n + int(a[i])) % 1000000007\n    print(z)", "m = pow(10, 9) + 7\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = 1\n    res = 0\n    for i in range(0, 32):\n        if 1 << i > k:\n            break\n        if k & 1 << i:\n            res = (res + p) % m\n        p *= n\n        p %= m\n    print(res)", "def getlistint():\n    return list(map(int, stdin.readline().split()))\n\ndef getmapint():\n    return map(int, stdin.readline().split())\n\ndef getliststr():\n    return list(stdin.readline().split())\n\ndef getint():\n    return int(stdin.readline().strip())\n\ndef getstr():\n    return stdin.readline().strip()\n\ndef pr(s):\n    stdout.write(str(s) + '\\n')\n\ndef prlist(l):\n    stdout.write(' '.join(list(map(str, l))) + '\\n')\nfrom sys import stdin, stdout\nfor _ in range(getint()):\n    (n, k) = getmapint()\n    b = bin(k)[2:]\n    s = 0\n    for i in range(len(b)):\n        if b[i] == '1':\n            s += n ** (len(b) - 1 - i)\n    pr(s % (10 ** 9 + 7))", "import sys\ninp = sys.stdin.readline()\ntest = int(inp.strip('\\n'))\nresult = ''\nfor i in range(test):\n    inp = sys.stdin.readline()\n    (n, k) = list(map(int, inp.strip('\\n').split()))\n    val = bin(k).lstrip('0b')\n    size = len(val)\n    num = 0\n    for i in range(size):\n        if val[i] == '1':\n            num = num + n ** (size - 1 - i)\n    num %= 1000000000 + 7\n    sys.stdout.write(str(num) + '\\n')", "from sys import stdin\ninput = stdin.readline\ntest = int(input())\nfor _ in range(test):\n    (n, k) = map(int, input().split())\n    (arr, total, mod) = ([], 0, 1000000007)\n    while k != 0:\n        arr.append(k % 2)\n        k = k // 2\n    prev = 1\n    for v in arr:\n        total = (total + prev * v) % mod\n        prev = prev * n % mod\n    print(total)", "from sys import stdin\n\ndef read_input():\n    (n, k) = map(int, stdin.readline().split())\n    return (n, k)\n\ndef convert_to_binary(k):\n    binary = []\n    while k > 0:\n        binary.append(k % 2)\n        k //= 2\n    return binary\n\ndef calc_answer(n, binary):\n    answer = 0\n    for (i, b) in enumerate(binary):\n        if b == 1:\n            answer = (answer + pow(n, i, 1000000007)) % 1000000007\n    return answer\n\ndef solve(n, k):\n    binary = convert_to_binary(k)\n    answer = calc_answer(n, binary)\n    return answer\n\ndef main():\n    t = int(stdin.readline())\n    for _ in range(t):\n        input = read_input()\n        answer = solve(*input)\n        print(answer)\nmain()", "import sys\ninput = sys.stdin.readline\nrep = int(input())\npo = []\nfor i in range(31):\n    po.append((2 ** i, i))\npo.reverse()\nresult = []\nfor _ in range(rep):\n    (a, b) = map(int, input().split())\n    result = []\n    for i in po:\n        if b < i[0]:\n            continue\n        b -= i[0]\n        result.append(a ** i[1])\n    print(sum(result) % (int(1000000000.0) + 7))", "for _ in range(int(input())):\n    (num, index) = map(int, input().split())\n    temp = 1\n    res = 0\n    while index > 0:\n        lol = index % 2\n        index = index // 2\n        if lol == 1:\n            res += temp\n        temp *= num\n    print(res % 1000000007)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    v = 0\n    s = 0\n    for i in bin(k)[:1:-1]:\n        if i == '1':\n            v += pow(n, s, 10 ** 9 + 7)\n        s += 1\n    print(v % (10 ** 9 + 7))", "t = int(input())\ni = 0\nwhile i < t:\n    arr = list(map(int, input().strip().split()))\n    n = arr[0]\n    k = arr[1]\n    a = bin(k)\n    b = a[2:]\n    d = b[::-1]\n    const = 10 ** 9 + 7\n    c = len(d)\n    ans = 0\n    j = 0\n    n1 = n\n    while j < c:\n        if d[j] == '1':\n            ans += n ** j\n        j += 1\n    answer = ans % const\n    print(answer)\n    i += 1", "import sys\nimport math\n__ = int(sys.stdin.readline())\nfor _ in range(__):\n    (n, k) = map(int, sys.stdin.readline().split())\n    b = bin(k)\n    s = b[2:]\n    ans = 0\n    x = len(s)\n    for i in range(x):\n        if s[i] == '1':\n            ans = ans + n ** (x - 1 - i)\n    print(ans % 1000000007)", "t = int(input())\ni = 0\nwhile i < t:\n    (n, k) = map(int, input().split())\n    st = bin(k)[2:]\n    st = st[::-1]\n    ans = 0\n    for j in range(len(st)):\n        if st[j] == '1':\n            ans += n ** j\n    print(ans % (10 ** 9 + 7))\n    i += 1", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    z = k.bit_length() - 1\n    ans = list('1' + '0' * z)\n    if z:\n        k -= pow(2, z)\n        bk = bin(k)[2:]\n        for i in range(len(bk)):\n            ans[-(i + 1)] = bk[-(i + 1)]\n    an = 0\n    p = 1\n    for i in range(len(ans) - 1, -1, -1):\n        if ans[i] == '1':\n            an = (an + p) % mod\n        p = p * n % mod\n    print(an)", "from collections import Counter, deque\nimport math\nfrom random import randint\nfrom bisect import bisect\nimport sys\nimport re\nimport copy\nMOD = 1000000007\nMAX = sys.maxsize\nMIN = -sys.maxsize\n\nclass get:\n\n    def int():\n        return list(map(int, input().split()))\n\n    def str():\n        return input().split()\n\n    def float():\n        return list(map(float, input().split()))\n\n    def map():\n        return map(int, input().split())\n\ndef sqrt(x):\n    return int(math.sqrt(x)) + 1\n\ndef gcd(*args):\n    result = args[0]\n    for item in args:\n        result = math.gcd(result, item)\n    return result\n\ndef LCM(a, b):\n    return a * b // math.gcd(a, b)\n\ndef solve():\n    (n, k) = get.map()\n    bi = bin(k).replace('0b', '')\n    sum_ = 0\n    for i in range(len(bi) - 1, -1, -1):\n        if bi[i] == '1':\n            sum_ += pow(n, len(bi) - 1 - i, MOD)\n            sum_ = sum_ % MOD\n    print(sum_)\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor i in range(t):\n    (n, k) = tuple(map(int, input().split()))\n    val = 0\n    adder = 1\n    while k > 0:\n        temp = k % 2 * adder\n        val = temp + val\n        k //= 2\n        adder *= n\n    print(val % 1000000007)", "def read_nums():\n    return [int(x) for x in input().split()]\n\ndef solve():\n    (n, k) = read_nums()\n    k_bin = bin(k)[2:]\n    res = 0\n    p = 1\n    for ch in reversed(k_bin):\n        res += int(ch) * p\n        p *= n\n        res = res % (1000000000 + 7)\n    print(res)\n\ndef main():\n    (t,) = read_nums()\n    for _ in range(t):\n        solve()\nmain()", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = bin(k).replace('0b', '')\n    t = len(a)\n    ans = 0\n    for j in range(t):\n        if a[j] == '1':\n            ans = ans + n ** (t - j - 1)\n    print(ans % 1000000007)", "times = input()\nfor i in range(int(times)):\n    ans = 0\n    data = input()\n    (n, k) = data.split()\n    n = int(n)\n    k = list(bin(int(k)))\n    k = k[2:]\n    tmp = len(k)\n    for i in range(tmp):\n        if k[i] == '1':\n            ans = ans + n ** (tmp - i - 1)\n    print(ans % 1000000007)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    mod = 1000000007\n    ans = 0\n    for i in range(30):\n        if k & 1 << i:\n            ans += pow(n, i)\n    print(ans % mod)", "t = int(input())\nmod = 1000000007\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    radix2 = []\n    while True:\n        if k == 1:\n            radix2.append(1)\n            break\n        temp = k % 2\n        radix2.append(temp)\n        k = k // 2\n    l = len(radix2)\n    pown = [1]\n    ans = 0\n    for i in range(1, l):\n        pown.append(pown[i - 1] * n % mod)\n        if radix2[i]:\n            ans += pown[i]\n    if radix2[0]:\n        ans += 1\n    print(ans % mod)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    total = 0\n    mod = 1000000007\n    num = bin(k)[2:][::-1]\n    for i in range(len(num)):\n        if num[i] == '1':\n            total += n ** i\n    print(total % mod)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    print(sum([pow(n, i) for i in range(30) if k & 1 << i]) % (10 ** 9 + 7))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    result = int()\n    bin_k = bin(k)[2:][::-1]\n    for index_of_bin_k in range(len(bin_k)):\n        if bin_k[index_of_bin_k] == '1':\n            result += n ** index_of_bin_k\n    print(result % (10 ** 9 + 7))", "t = int(input())\nn = [0] * t\nk = [0] * t\nmod = 1000000007\nfor i in range(t):\n    (n[i], k[i]) = map(int, input().split())\nfor i in range(t):\n    ans = 0\n    for j in reversed(range(33)):\n        if k[i] >> j & 1:\n            ans += pow(n[i], j, mod)\n            ans %= mod\n    print(ans)", "t = int(input())\nfor _ in range(0, t):\n    inputs = [int(num) for num in input().split()]\n    n = inputs[0]\n    k = inputs[1]\n    bin1 = bin(k)\n    if bin1[len(bin1) - 1] == '0':\n        num = 0\n    else:\n        num = 1\n    pro = n\n    for i in range(len(bin1) - 2, 1, -1):\n        num += int(bin1[i]) * pro\n        pro = pro * n\n    print(num % 1000000007)", "import sys\ninput = sys.stdin.readline\nmod = 1000000007\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = bin(k)[2:][::-1]\n    c = len(x)\n    s = 0\n    for i in range(c):\n        if x[i] == '1':\n            s += n ** i % mod\n    print(s % mod)", "inp1 = int(input())\nfor i in range(inp1):\n    (n, k) = map(int, input().split())\n    sum = 0\n    c = bin(k)\n    x = [int(b) for b in str(c)[2:]]\n    y = x[::-1]\n    z = 1\n    for a in y:\n        if a == 1:\n            sum += z ** a\n        z *= n\n    print(sum % (10 ** 9 + 7))", "t = int(input())\nn = [0] * t\nk = [0] * t\nmod = 1000000007\nfor i in range(t):\n    (n[i], k[i]) = map(int, input().split())\nfor i in range(t):\n    ans = 0\n    p = 1\n    for j in range(33):\n        if k[i] >> j & 1:\n            ans += p\n            ans %= mod\n        p *= n[i]\n    print(ans)", "from collections import Counter, deque\nimport math\nfrom random import randint\nfrom bisect import bisect\nimport sys\nimport re\nimport copy\nMOD = 1000000007\nMAX = sys.maxsize\nMIN = -sys.maxsize\n\nclass get:\n\n    def int():\n        return list(map(int, input().split()))\n\n    def str():\n        return input().split()\n\n    def float():\n        return list(map(float, input().split()))\n\n    def map():\n        return map(int, input().split())\n\ndef sqrt(x):\n    return int(math.sqrt(x)) + 1\n\ndef gcd(*args):\n    result = args[0]\n    for item in args:\n        result = math.gcd(result, item)\n    return result\n\ndef LCM(a, b):\n    return a * b // math.gcd(a, b)\n\ndef solve():\n    (n, k) = get.map()\n    bi = bin(k).replace('0b', '')\n    sum_ = 0\n    for i in range(len(bi) - 1, -1, -1):\n        if bi[i] == '1':\n            sum_ += pow(n, len(bi) - 1 - i, MOD)\n            sum_ = sum_ % MOD\n    print(sum_)\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    b = bin(k).replace('0b', '')\n    ans = 0\n    mod = 1000000007\n    count = 0\n    for i in range(len(b) - 1, -1, -1):\n        if b[i] == '1':\n            ans += pow(n, count, mod) % mod\n        count += 1\n    print(ans % mod)", "mod = 1000000007\n\ndef solve_case():\n    (n, k) = map(int, input().split())\n    ans = 0\n    for i in range(32):\n        i_bit = 1 << i\n        if k & i_bit != 0:\n            ans += pow(n, i, mod)\n    print(ans % mod)\nT = int(input())\nfor t in range(T):\n    solve_case()", "modd = 1000000007\n\ndef solve():\n    (n, k) = list(map(int, input().split()))\n    bi = bin(k)[2:]\n    return sum((pow(n, len(bi) - i - 1, modd) for i in range(len(bi)) if bi[i] == '1')) % modd\nt = int(input())\nwhile t:\n    t -= 1\n    print(solve())", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    bi = bin(k)\n    bi = bi[2:]\n    li = [char for char in bi]\n    li.reverse()\n    num = 0\n    for i in range(len(li)):\n        if li[i] == '1':\n            num += n ** i\n    print(num % (10 ** 9 + 7))", "(1, 2, 4, 8, 16)\n(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n(1, 3, 9, 27)\n(1, 3, 4, 9, 10, 12, 13, 27)\n\ndef log2(k):\n    return k.bit_length() - 1\n\ndef calc(n, k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 1\n    start = log2(k)\n    return calc(n, k - 2 ** start) + n ** start\nT = int(input())\nfor t in range(T):\n    (n, k) = map(int, input().split(' '))\n    print(calc(n, k) % (10 ** 9 + 7))", "mod = 10 ** 9 + 7\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    b = bin(k)[2:]\n    ans = 0\n    p = 0\n    for j in b[::-1]:\n        if j == '1':\n            ans = (ans + pow(n, p, mod)) % mod\n        p += 1\n    print(ans)", "def decimalToBinary(n):\n    return bin(n).replace('0b', '')\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    binary = decimalToBinary(k)\n    result = 0\n    binary = binary[::-1]\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            result += n ** i\n    print(result % 1000000007)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    st = bin(k)[2:]\n    cnt = 1\n    ans = 0\n    for j in range(len(st) - 1, -1, -1):\n        ans += int(st[j]) * cnt\n        cnt *= int(n)\n    print(ans % 1000000007)", "import math\n\ndef solve(n, c):\n    a = 0\n    j = 1\n    while c > 0:\n        if c % 2 == 1:\n            a = (a + j) % (10 ** 9 + 7)\n        j = j * n\n        c = c // 2\n    print(a)\nt = int(input(''))\nfor i in range(t):\n    (a, c) = list(input('').strip().split())[:2]\n    solve(int(a), int(c))", "t = int(input())\nmod = 10 ** 9 + 7\nfor i in range(t):\n    (n, k) = tuple(input().split())\n    solve = 0\n    bits = reversed(bin(int(k))[2:])\n    for (k, v) in enumerate(bits):\n        if v == '1':\n            solve += int(n) ** k\n    print(solve % mod)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    mod = 1000000007\n    ans = 0\n    for i in range(30):\n        if k & 1 << i:\n            ans += pow(n, i)\n    print(ans % mod)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    k = str(bin(k)[2:])[::-1]\n    ans = 0\n    power = 0\n    for i in k:\n        if i == '1':\n            ans += pow(n, power)\n        power += 1\n    print(ans % 1000000007)", "def solve():\n    mod = 10 ** 9 + 7\n    (n, k) = list(map(int, input().split()))\n    ans = 0\n    idx = 0\n    while k:\n        if k & 1:\n            ans += n ** idx\n        k = k >> 1\n        idx += 1\n    print(ans % mod)\nfor _ in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\nmod = 1000000007\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = bin(k)[2:][::-1]\n    c = len(x)\n    s = 0\n    for i in range(c):\n        if x[i] == '1':\n            s += n ** i % mod\n    print(s % mod)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    power = 0\n    result = 0\n    while k > 0:\n        if k % 2 == 1:\n            result += n ** power\n        k = k // 2\n        power += 1\n    print(result % (10 ** 9 + 7))", "MOD = 10 ** 9 + 7\n\ndef kth_special_number(k, n):\n    ans = 0\n    base = 1\n    for i in range(32):\n        ans = (ans % MOD + (k & 1 << i != 0) * base % MOD) % MOD\n        base *= n\n    return ans % MOD\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    print(kth_special_number(k, n))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    mod = 10 ** 9 + 7\n    temp = bin(k).replace('0b', '')[::-1]\n    ans = 0\n    for i in range(len(temp)):\n        if temp[i] == '1':\n            ans += pow(n, i, mod)\n            ans %= mod\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    mod = 1000000007\n    ans = 0\n    for i in range(30):\n        if k & 1 << i:\n            ans += pow(n, i)\n    print(ans % mod)", "t = int(input())\nmod = 10 ** 9 + 7\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    base = 1\n    ans = 0\n    for i in range(32):\n        if k & 1 << i:\n            ans += base\n            ans %= mod\n        base *= n\n        base %= mod\n    print(ans)", "t = int(input())\nmod = 10 ** 9 + 7\nfor i in range(t):\n    (n, k) = tuple([int(x) for x in input().split()])\n    solve = 0\n    bits = reversed(bin(k)[2:])\n    for (k, v) in enumerate(bits):\n        if v == '1':\n            solve += n ** k\n    print(solve % mod)", "counter = int(input())\nfor i in range(counter):\n    (a, n) = map(int, input().split())\n    k = bin(n)\n    k = str(k)\n    lis = list(k)\n    del lis[0]\n    del lis[0]\n    leng = len(lis)\n    op = 0\n    for i in range(leng):\n        if lis[leng - i - 1] == '1':\n            op += a ** i\n    print(int(op % int(1000000000.0 + 7)))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    b = str(bin(k))[2:]\n    p = 0\n    ans = 0\n    for i in b[::-1]:\n        if i == '1':\n            ans += n ** p\n        p += 1\n    print(ans % (7 + 10 ** 9))", "t = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    ans = 0\n    x = 0\n    while k:\n        if k & 1:\n            ans = ans + n ** x\n            x += 1\n            k = k >> 1\n        else:\n            x += 1\n            k = k >> 1\n    print(ans % 1000000007)", "import math\nfor i in range(int(input())):\n    (n, K) = map(int, input().split())\n    k = bin(K)[2:]\n    a = 0\n    for q in range(len(k) - 1, -1, -1):\n        if k[q] == '1':\n            a += n ** (len(k) - q - 1)\n    z = 10 ** 9 + 7\n    print(a % z)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    if k == 1:\n        print(k)\n        continue\n    mod = 10 ** 9 + 7\n    s = bin(k)[2:]\n    l = len(s)\n    ans = 0\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == '1':\n            ans += pow(n, l - 1 - i, mod)\n    print(ans % mod)", "def main(k):\n    b = bin(k)\n    b = list(b)\n    b = b[::-1]\n    return b\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    b = main(k)\n    ans = 0\n    for i in range(len(b) - 2):\n        if b[i] == '1':\n            ans += n ** i\n    print(ans % 1000000007)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    k = bin(k)[2:]\n    ans = 0\n    for i in range(len(k)):\n        if k[len(k) - 1 - i] == '1':\n            ans += n ** i\n    print(ans % 1000000007)", "t = int(input())\nwhile t:\n    arr = [int(a) for a in input().split()]\n    (n, k) = arr\n    bi = '{0:b}'.format(k)\n    j = len(bi) - 1\n    ans = 0\n    for i in range(len(bi)):\n        if bi[i] == '1':\n            ans += pow(n, j, 1000000007)\n        j -= 1\n    print(ans % 1000000007)\n    t -= 1", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    (n, k) = input().split()\n    b = bin(int(k))\n    b = str(bin(int(k)))[2:]\n    ans = 0\n    num = len(b) - 1\n    for i in range(len(b)):\n        if b[i] == '1':\n            ans = ans + pow(int(n), num, 1000000007)\n        num = num - 1\n    print(ans % 1000000007)", "MOD = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    r = 0\n    s = 0\n    count = 0\n    while k:\n        if k & 1:\n            s += n ** count\n        count += 1\n        k >>= 1\n    print(s % MOD)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    k = bin(k)[2:]\n    k = k[::-1]\n    m = 1000000007\n    count = 0\n    for i in range(len(k)):\n        if k[i] == '1':\n            x = pow(n, i, m)\n            count += x\n            count = count % m\n    print(count)", "t = int(input())\nfor t1 in range(t):\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(31, -1, -1):\n        if l[1] & 1 << i != 0:\n            ans += l[0] ** i\n    ans = ans % (10 ** 9 + 7)\n    print(ans)", "from sys import stdin\ninput = lambda : stdin.readline().strip()\nlin = lambda : list(map(int, input().split()))\niin = lambda : int(input())\nmain = lambda : map(int, input().split())\nfrom math import ceil, sqrt, factorial, log\nfrom collections import deque\nfrom bisect import bisect_left\nmod = 1000000007\n\ndef solve(we):\n    (n, k) = main()\n    z = bin(k)[2:]\n    f = len(z) - 1\n    ans = 0\n    for i in range(len(z)):\n        if z[i] == '1':\n            ans = (ans + pow(n, f)) % mod\n        f -= 1\n    print(ans)\nqwe = 1\nqwe = iin()\nfor _ in range(qwe):\n    solve(_ + 1)", "import sys\ninput = sys.stdin.readline\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = bin(k)[2:]\n    ans = 0\n    for i in range(len(s)):\n        if int(s[::-1][i]):\n            ans += pow(n, i, mod)\n            ans %= mod\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = []\n    while k > 0:\n        arr.append(k % 2)\n        k //= 2\n    res = 0\n    s = 1\n    for i in arr:\n        if i:\n            res += s\n            res %= 1000000007\n        s *= n\n    print(res)", "t = int(input())\nMOD = 10 ** 9 + 7\nfor _ in range(t):\n    (n, c) = map(int, input().split())\n    s = 0\n    count = 0\n    while c:\n        if c & 1:\n            s += n ** count\n        count += 1\n        c >>= 1\n    print(s % MOD)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    st = bin(k)[2:]\n    sm = 0\n    for i in range(len(st) - 1, -1, -1):\n        if st[i] == '1':\n            sm += n ** (len(st) - 1 - i)\n    print(sm % (10 ** 9 + 7))", "import math\nt = int(input())\n\ndef calcul(n, k):\n    s = 0\n    while k > 0:\n        x = math.log2(k)\n        p = int(x)\n        c = pow(2, p)\n        i = int(c * (x - p))\n        s += pow(n, p)\n        k -= c\n        p = i\n    return s % 1000000007\nresults = []\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    results.append(calcul(n, k))\nfor j in results:\n    print(j)", "import collections as cc\nI = lambda : list(map(int, input().split()))\nmod = 10 ** 9 + 7\nfor tc in range(int(input())):\n    (n, k) = I()\n    ans = 0\n    num = 1\n    for i in range(0, 31):\n        if k & 1 << i:\n            ans = ans + pow(n, i, mod)\n    print(ans % mod)", "t = int(input())\nwhile t > 0:\n    (n, k) = [int(i) for i in input().split()]\n    result = 0\n    power = 1\n    while k > 0:\n        if k % 2 == 1:\n            result += power\n            result %= 1000000007\n        power *= n\n        k = k // 2\n    print(result)\n    t = t - 1"]