["from ast import Index\nfor _ in range(int(input())):\n    alpha = list(input())\n    s = list(input())\n    t = 0\n    for i in range(0, len(s) - 1):\n        t = t + abs(alpha.index(s[i]) - alpha.index(s[i + 1]))\n    print(t)", "def solve():\n    s = input()\n    t = input()\n    D = dict()\n    for i in range(26):\n        D[s[i]] = i\n    ans = 0\n    for i in range(1, len(t)):\n        ans += abs(D[t[i]] - D[t[i - 1]])\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "def solve(keyboard, word):\n    c = 0\n    dct = {}\n    for symb in keyboard:\n        dct[symb] = c\n        c += 1\n    weight = 0\n    for i in range(1, len(word)):\n        weight += abs(dct[word[i]] - dct[word[i - 1]])\n    print(weight)\nt = int(input())\nfor _ in range(t):\n    solve(input(), input())", "def findMinDistance(string, word_seq):\n    counter = 0\n    word_freq = {}\n    for c in word_seq:\n        word_freq[c] = counter\n        counter += 1\n    a = word_freq[string[0]]\n    b = None\n    mindist = 0\n    for i in range(1, len(string)):\n        b = word_freq[string[i]]\n        mindist += abs(a - b)\n        a = b\n    return mindist\nN = int(input())\nfor _ in range(N):\n    word_seq = input()\n    string = input()\n    print(findMinDistance(string, word_seq))", "def calc_time(kb, word):\n    alphabet = list(kb)\n    word_nums = list()\n    ans = 0\n    for letter in word:\n        word_nums.append(alphabet.index(letter) + 1)\n    if len(word_nums) >= 2:\n        for i in range(1, len(word_nums)):\n            ans += abs(word_nums[i] - word_nums[i - 1])\n    return ans\nt = int(input())\nfor _ in range(t):\n    kb = input().strip()\n    word = input().strip()\n    print(calc_time(kb, word))", "from time import time\n_START_TIME_ = time()\n_DEBUGGING_ = False\n\ndef read_line() -> str:\n    if _DEBUGGING_:\n        return _fr_.readline()\n    else:\n        return input()\n\ndef write(*args, _sep=' ', _end='\\n'):\n    if _DEBUGGING_:\n        _fw_.write(f'{_sep.join((str(elem) for elem in args))}{_end}')\n    else:\n        print(*args, sep=_sep, end=_end)\n\ndef log(*args, _sep=' ', _end='\\n'):\n    if _DEBUGGING_:\n        print(*args, sep=_sep, end=_end)\n\ndef solve(kb, s):\n    kb = {val: ind for (ind, val) in enumerate(kb)}\n    pos = kb[s[0]]\n    tim = 0\n    for c in s:\n        tim += abs(pos - kb[c])\n        pos = kb[c]\n    write(tim)\nif _DEBUGGING_:\n    _fr_ = open('input.txt')\n    _fw_ = open('output.txt', 'w')\n_t_ = int(read_line().strip())\nfor _ in range(_t_):\n    _kb_ = read_line().strip()\n    _s_ = read_line().strip()\n    solve(_kb_, _s_)\nif _DEBUGGING_:\n    _fr_.close()\n    _fw_.close()\nif _DEBUGGING_:\n    print('\\nElapsed time: {:.2f}s'.format(time() - _START_TIME_), end='')", "N = int(input())\nfor x in range(N):\n    abcd = input()\n    word = input()\n    previous = word[0]\n    score = 0\n    for x in word:\n        score += abs(abcd.index(previous) - abcd.index(x))\n        previous = x\n    print(score)", "def keyBoard(alp, s):\n    sm = 0\n    for i in range(1, len(s)):\n        a = alp.index(s[i]) + 1\n        b = alp.index(s[i - 1]) + 1\n        sm += abs(a - b)\n    return sm\nt = int(input())\nfor i in range(t):\n    alp = input()[:26]\n    s = input()\n    print(keyBoard(alp, s))", "import sys\ninput = sys.stdin.readline\n\ndef print(*args, end='\\n', sep=' ') -> None:\n    sys.stdout.write(sep.join(map(str, args)) + end)\n\ndef solve() -> None:\n    keyboard = input().strip()\n    d = {}\n    for (i, key) in enumerate(keyboard):\n        d[key] = i\n    word = input().strip()\n    res = 0\n    for i in range(len(word) - 1):\n        res += abs(d[word[i + 1]] - d[word[i]])\n    print(res)\n\ndef main() -> None:\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "def cal_str(dic_str, task_str):\n    size_t = len(task_str)\n    index0 = dic_str.find(task_str[0])\n    index1 = 0\n    totalsum = 0\n    for i in range(1, size_t):\n        index1 = dic_str.find(task_str[i])\n        totalsum = totalsum + abs(index1 - index0)\n        index0 = index1\n    return totalsum\nt = int(input())\ndic1 = []\ntasks = []\nfor i in range(2 * t):\n    if i % 2 == 0:\n        dic1.append(input())\n    else:\n        tasks.append(input())\nfor i in range(0, t):\n    print(cal_str(dic1[i], tasks[i]))", "def distance(alpha, word):\n    d = {}\n    for i in range(len(alpha)):\n        d[alpha[i]] = i\n    ret = 0\n    for i in range(1, len(word)):\n        ret += abs(d[word[i]] - d[word[i - 1]])\n    print(ret)\nt = int(input())\nfor i in range(t):\n    distance(input(), input())", "def distance(alpha, word):\n    d = {}\n    for i in range(len(alpha)):\n        d[alpha[i]] = i\n    ret = 0\n    for i in range(1, len(word)):\n        ret += abs(d[word[i]] - d[word[i - 1]])\n    print(ret)\nt = int(input())\nfor i in range(t):\n    distance(input(), input())", "def solve():\n    keyboard = str(input())\n    word = str(input())\n    result = 0\n    temp = keyboard.index(word[0])\n    for i in range(1, len(word)):\n        t = keyboard.index(word[i])\n        result += abs(temp - t)\n        temp = t\n    print(result)\nt = int(input())\nfor i in range(t):\n    solve()", "for _ in range(int(input())):\n    s = input()\n    r = input()\n    d = {}\n    for x in range(len(s)):\n        d[s[x]] = x\n    l = []\n    for x in r:\n        l.append(d[x])\n    ans = 0\n    for x in range(1, len(l)):\n        ans += abs(l[x] - l[x - 1])\n    print(ans)", "def timeTaken(board, ws):\n    time = 0\n    dct = {board[i]: i for i in range(26)}\n    curr = ws[0]\n    for c in ws[1:]:\n        time += abs(dct[curr] - dct[c])\n        curr = c\n    return time\nt = int(input())\nfor _ in range(t):\n    keys = input()\n    word = input()\n    print(timeTaken(keys, word))", "def sol(alpha, s):\n    aa = dict()\n    for i in range(len(alpha)):\n        aa[alpha[i]] = i + 1\n    dis = 0\n    for i in range(1, len(s)):\n        dis += abs(aa[s[i]] - aa[s[i - 1]])\n    print(dis)\nt = int(input())\nfor test in range(t):\n    alpha = input()\n    s = input()\n    sol(alpha, s)", "import sys\ninput = sys.stdin.readline\noutput = sys.stdout.write\n\ndef main():\n    tests = int(input().rstrip())\n    for i in range(tests):\n        keyboard = input().rstrip()\n        dic_ = {keyboard[j]: j + 1 for j in range(26)}\n        dist_ = 0\n        word_ = input().rstrip()\n        last_ = dic_[word_[0]]\n        for t in word_[1:]:\n            y = dic_[t]\n            dist_ += abs(y - last_)\n            last_ = y\n        output(str(dist_))\n        output('\\n')\nmain()", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\ninp_vars_int = lambda : map(int, input().split())\ninp_list_int = lambda : list(map(int, input().split()))\nt = int(input())\nfor _ in range(t):\n    k = {let: i for (i, let) in enumerate(input())}\n    s = input()\n    res = 0\n    for i in range(1, len(s)):\n        res += abs(k[s[i]] - k[s[i - 1]])\n    print(res)", "t = int(input())\nfor _ in range(t):\n    alp = input()\n    s = input()\n    ans = 0\n    for i in range(1, len(s)):\n        ans += abs(alp.find(s[i]) - alp.find(s[i - 1]))\n    print(ans)", "import sys\n\ndef rall():\n    return sys.stdin.readlines()\n\ndef rl():\n    return sys.stdin.readline().strip()\n\ndef rl_types(types):\n    str_list = [x for x in sys.stdin.readline().strip().split(' ')]\n    return [types[i](str_list[i]) for i in range(len(str_list))]\n\ndef pr(something=''):\n    sys.stdout.write(str(something) + '\\n')\n\ndef pra(array):\n    sys.stdout.write(' '.join([str(x) for x in array]) + '\\n')\n\ndef solve(array):\n    return array\nNT = int(rl())\nfor ti in range(NT):\n    kb = rl()\n    loc = {}\n    for (i, c) in enumerate(kb):\n        loc[c] = i\n    s = rl()\n    dist = 0\n    last = loc[s[0]]\n    for c in s[1:]:\n        dist += abs(last - loc[c])\n        last = loc[c]\n    pr(dist)", "from collections import Counter, deque, defaultdict\nfrom math import *\nmod = 1000000007\n\ndef solve():\n    s = input()\n    d = {}\n    s1 = input()\n    for i in range(26):\n        d[s[i]] = i\n    n1 = len(s1)\n    prev = d[s1[0]]\n    ans = 0\n    for i in range(1, n1):\n        ans += abs(prev - d[s1[i]])\n        prev = d[s1[i]]\n    print(ans)\ntestcase = int(input())\nfor num in range(testcase):\n    solve()", "n = int(input())\nfor i in range(n):\n    alph = input()\n    s = input()\n    l = len(s)\n    summa = 0\n    for i in range(1, l):\n        summa += abs(alph.find(s[i]) - alph.find(s[i - 1]))\n    print(summa)", "def fun(s, t):\n    n = len(t)\n    if n == 1:\n        return 0\n    ans = 0\n    d = {}\n    for (i, ch) in enumerate(s):\n        d[ch] = i\n    for i in range(1, len(t)):\n        ans += abs(d[t[i]] - d[t[i - 1]])\n    return ans\nt = int(input())\nfor i in range(t):\n    s = input()\n    t = input()\n    ans = fun(s, t)\n    print(ans)", "def main():\n    t = int(input())\n    for count in range(t):\n        s = input()\n        word = input()\n        ans = 0\n        keyboard = dict()\n        for i in range(len(s)):\n            keyboard[s[i]] = i\n        pos_1 = keyboard[word[0]]\n        for i in range(len(word)):\n            ans += abs(pos_1 - keyboard[word[i]])\n            pos_1 = keyboard[word[i]]\n        print(ans)\nmain()", "t = int(input())\nfor i in range(t):\n    kbd = input()\n    s = input()\n    ans = 0\n    for j in range(len(s) - 1):\n        ans += abs(kbd.index(s[j]) - kbd.index(s[j + 1]))\n    print(ans)", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\nt = int(input())\nfor _ in range(t):\n    dic = dict()\n    g = input()\n    for idx in range(len(g)):\n        dic[g[idx]] = idx\n    s = input()\n    sol = 0\n    for idx in range(len(s) - 1):\n        sol += abs(dic[s[idx]] - dic[s[idx + 1]])\n    print(sol)", "for _ in range(int(input())):\n    keyboard = {k: i for (i, k) in enumerate(input())}\n    string = input()\n    _sum = 0\n    for i in range(len(string) - 1):\n        _sum += abs(keyboard[string[i]] - keyboard[string[i + 1]])\n    print(_sum)", "def f():\n    a = input()\n    d = dict()\n    for i in range(26):\n        d[a[i]] = i\n    s = input()\n    ans = 0\n    p = s[0]\n    for i in s[1:]:\n        ans += abs(d[p] - d[i])\n        p = i\n    return ans\nfor _ in range(int(input())):\n    print(f())", "import math as m\n\ndef L():\n    return list(map(int, input().split()))\n\ndef I():\n    return int(input())\n\ndef M():\n    return map(int, input().split())\n\ndef solve():\n    k = input()\n    dictt = {}\n    for x in k:\n        dictt[x] = k.index(x)\n    s = input()\n    ans = 0\n    for i in range(len(s) - 1):\n        ans += abs(dictt[s[i]] - dictt[s[i + 1]])\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    k = input().strip()\n    ks = {c: i for (i, c) in enumerate(k)}\n    s = input().strip()\n    ans = 0\n    prev = ks[s[0]]\n    for c in s[1:]:\n        curr = ks[c]\n        d = curr - prev\n        ans += abs(d)\n        prev = curr\n    print(ans)", "import sys\n\ndef solve():\n    mp = {c: i for (i, c) in enumerate(input())}\n    p = [mp[i] for i in input()]\n    print(sum((abs(i - j) for (i, j) in zip(p, p[1:]))))\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    alph = input()\n    s = input()\n    print(sum([abs(alph.index(s[i]) - alph.index(s[i - 1])) for i in range(1, len(s))]))", "def II():\n    return map(int, input().split())\n\ndef Ii():\n    return int(input())\n\ndef infi():\n    return float('Inf')\n\ndef mino():\n    return -1\nd = {}\nfor ____ in range(Ii()):\n    s = input().strip()\n    c = input().strip()\n    ans = 0\n    for i in range(len(s)):\n        d[s[i]] = i\n    for i in range(1, len(c)):\n        ans += abs(d[c[i]] - d[c[i - 1]])\n    print(ans)", "t = int(input())\nfor i in range(t):\n    a = input()\n    b = input()\n    answ = 0\n    pos = a.find(b[0])\n    for j in b[1:]:\n        answ += abs(a.find(j) - pos)\n        pos = a.find(j)\n    print(answ)", "for _ in range(int(input())):\n    s = input()\n    inp = input()\n    d = {}\n    ans = 0\n    for i in range(len(s)):\n        d[s[i]] = i + 1\n    for i in range(len(inp) - 1):\n        ans += abs(d[inp[i]] - d[inp[i + 1]])\n    print(ans)", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    temp = input().rstrip()\n    s = input().rstrip()\n    keyboard = dict()\n    for (i, t) in enumerate(temp):\n        keyboard[t] = i\n    answer = 0\n    for i in range(1, len(s)):\n        answer += abs(keyboard[s[i]] - keyboard[s[i - 1]])\n    print(answer)", "t = int(input())\nfor i in range(t):\n    k = input()\n    s = input()\n    l = len(s)\n    tot = 0\n    for j in range(l - 1):\n        p = k.find(s[j])\n        q = k.find(s[j + 1])\n        tot = tot + abs(q - p)\n    print(tot)", "N = int(input())\nfor _ in range(N):\n    abc = input()\n    d = dict()\n    for (i, c) in enumerate(abc):\n        d[c] = i\n    s = input()\n    ans = 0\n    for i in range(1, len(s)):\n        ans += abs(d[s[i]] - d[s[i - 1]])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    s2 = input()\n    x = 0\n    count = 0\n    for i in s2:\n        count += abs(s.index(i) - x)\n        x = s.index(i)\n    print(count - s.index(s2[0]))", "for i in range(int(input())):\n    base = input()\n    dic = {base[i]: i for i in range(len(base))}\n    st = input()\n    ans = 0\n    now = dic[st[0]]\n    for i in range(1, len(st)):\n        ans += abs(now - dic[st[i]])\n        now = dic[st[i]]\n    print(ans)", "for _ in range(int(input())):\n    let = input()\n    d = {}\n    for i in range(26):\n        d[let[i]] = i\n    word = input()\n    curr = d[word[0]]\n    res = 0\n    for i in range(1, len(word)):\n        res += abs(curr - d[word[i]])\n        curr = d[word[i]]\n    print(res)", "t = int(input())\nwhile t:\n    t -= 1\n    abc = input()\n    s = input()\n    dict = {}\n    i = 0\n    for a in abc:\n        dict[a] = i\n        i += 1\n    result = 0\n    for (x, y) in zip(s, s[1:]):\n        result += abs(dict[x] - dict[y])\n    print(result)", "testcase = int(input())\nfor i in range(testcase):\n    alphabet = input()\n    s = input()\n    time = 0\n    for j in range(len(s) - 1):\n        time += abs(alphabet.index(s[j]) - alphabet.index(s[j + 1]))\n    print(time)", "import math\nimport bisect\n\ndef mapIn():\n    return map(int, input().split())\n\ndef listIn():\n    return list(map(int, input().split()))\n\ndef intIn():\n    return int(input())\nintMax = float('inf')\nintMin = float('-inf')\nd4x = [1, -1, 0, 0]\nd4y = [0, 0, 1, -1]\nd8x = [1, -1, 0, 0, -1, -1, 1, 1]\nd8y = [0, 0, 1, -1, -1, 1, -1, 1]\n\ndef checkBit(n, i):\n    return n >> i & 1\nmod = int(1000000000.0 + 7)\n\ndef solve():\n    a = input()\n    h = {}\n    c = 1\n    for i in a:\n        h[i] = c\n        c += 1\n    ans = 0\n    b = input()\n    if len(b) == 1:\n        print(0)\n        return\n    for i in range(1, len(b)):\n        ans += abs(h[b[i]] - h[b[i - 1]])\n    print(ans)\nt = int(input())\nfor tc in range(t):\n    solve()", "for _ in range(int(input())):\n    a = input()\n    b = input()\n    dp = {}\n    cnt = 0\n    for i in range(26):\n        dp[a[i]] = i\n    for i in range(len(b) - 1):\n        cnt += abs(dp[b[i + 1]] - dp[b[i]])\n    print(cnt)", "t = int(input())\nfor i in range(t):\n    al = str(input())\n    w = str(input())\n    d = 0\n    for j in range(len(w) - 1):\n        c = abs(al.index(w[j]) - al.index(w[j + 1]))\n        d += c\n    print(d)", "for _ in range(int(input())):\n    keyboard = input()\n    word = input()\n    steps = 0\n    for i in range(1, len(word)):\n        steps += abs(keyboard.find(word[i]) - keyboard.find(word[i - 1]))\n    print(steps)", "for _ in range(int(input())):\n    a = input()\n    s = input()\n    ans = 0\n    for i in range(len(s) - 1):\n        ans += abs(a.index(s[i]) - a.index(s[i + 1]))\n    print(ans)", "num_cases = int(input())\nfor i in range(num_cases):\n    keyboard = input()\n    s = input()\n    time = 0\n    position = keyboard.index(s[0])\n    for j in range(1, len(s)):\n        next_position = keyboard.index(s[j])\n        time += abs(next_position - position)\n        position = next_position\n    print(time)", "def linear_keyboard(keyboard, word):\n    position_by_letter = {}\n    for i in range(len(keyboard)):\n        position_by_letter[keyboard[i]] = i\n    total = 0\n    for j in range(1, len(word)):\n        total += abs(position_by_letter[word[j]] - position_by_letter[word[j - 1]])\n    return total\nfor _ in range(int(input())):\n    keyboard = input()\n    word = input()\n    print(linear_keyboard(keyboard, word))", "n = int(input())\nfor i in range(n):\n    result = 0\n    alpha = str(input())\n    s = str(input())\n    a = alpha.index(s[0]) + 1\n    for i in range(1, len(s)):\n        b = alpha.index(s[i]) + 1\n        result += abs(a - b)\n        a = b\n    print(result)", "t = int(input())\n\ndef prob(tec, s):\n    total = 0\n    l = len(s)\n    a = s[0]\n    for b in s[1:]:\n        d = abs(tec.index(a) - tec.index(b))\n        total = total + d\n        a = b\n    print(total)\nfor i in range(t):\n    tec = str(input())\n    s = str(input())\n    prob(tec, s)", "for _ in range(int(input())):\n    a = input()\n    b = input()\n    if len(b) == 1:\n        print(0)\n    else:\n        s = 0\n        for i in range(1, len(b)):\n            s += abs(a.index(b[i - 1]) - a.index(b[i]))\n        print(s)", "t = int(input())\nfor i in range(t):\n    dic = input()\n    s = input()\n    l = []\n    for i in s:\n        l.append(dic.index(i) + 1)\n    res = 0\n    for i in range(1, len(l)):\n        res = res + abs(l[i] - l[i - 1])\n    print(res)", "for k in range(int(input())):\n    a = list(input())\n    b = input()\n    s = 0\n    for i in range(len(b) - 1):\n        s += abs(a.index(b[i]) - a.index(b[i + 1]))\n    print(s)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    b = input()\n    p = 0\n    i = 0\n    while i < len(b) - 1:\n        x = s.index(b[i])\n        y = s.index(b[i + 1])\n        p += abs(y - x)\n        i += 1\n    print(p)", "n = int(input())\nfor i in range(n):\n    kb = input()\n    wd = input()\n    sum = 0\n    for j in range(len(wd) - 1):\n        sum += abs(kb.find(wd[j]) - kb.find(wd[j + 1]))\n    print(sum)", "def collecting_input():\n    n = int(input())\n    cases = []\n    for _ in range(n):\n        (key, string) = [input(), input()]\n        cases.append([key, string])\n    return cases\n\ndef solution():\n    cases = collecting_input()\n    for i in cases:\n        dictionary = {}\n        time = 0\n        for (j, x) in enumerate(i[0]):\n            dictionary[x] = j + 1\n        for l in range(1, len(i[1])):\n            time += abs(dictionary[i[1][l]] - dictionary[i[1][l - 1]])\n        print(time)\nsolution()", "t = int(input())\nfor _ in range(t):\n    keyboard = input().strip()\n    text = input().strip()\n    dicti = {}\n    for i in range(len(keyboard)):\n        dicti[keyboard[i]] = i + 1\n    prev = dicti[text[0]]\n    res = 0\n    for i in range(1, len(text)):\n        res += abs(prev - dicti[text[i]])\n        prev = dicti[text[i]]\n    print(res)", "def timeTaken(keyboard, word):\n    keyMap = dict()\n    for (i, letter) in enumerate(keyboard):\n        keyMap[letter] = i\n    totalTime = 0\n    for i in range(1, len(word)):\n        totalTime += abs(keyMap[word[i]] - keyMap[word[i - 1]])\n    return totalTime\nno_of_lines = int(input())\nfor i in range(no_of_lines):\n    keyboard = input()\n    word = input()\n    print(timeTaken(keyboard, word))", "k = int(input())\nfor i in range(k):\n    alpha = input().strip(' ')\n    dic = {}\n    j = 1\n    for i in alpha:\n        dic[i] = j\n        j += 1\n    word = input().strip(' ')\n    l = len(word)\n    length = 0\n    for i in range(l - 1):\n        length += abs(dic[word[i]] - dic[word[i + 1]])\n    print(length)", "keymap = [0] * 256\nfor _ in range(int(input())):\n    (k, w) = (input(), input())\n    for (i, c) in enumerate(k):\n        keymap[ord(c)] = i\n    print(sum((abs(keymap[ord(p)] - keymap[ord(n)]) for (p, n) in zip(w, w[1:]))))", "n = int(input())\nfor i in range(n):\n    s = input()\n    p = str(input())\n    ans = 0\n    for i in range(1, len(p)):\n        ans += abs(s.find(p[i]) - s.find(p[i - 1]))\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    lett = input()\n    inp = input()\n    (prev, ind, ans) = (-1, -1, 0)\n    for i in inp:\n        ind = lett.index(i)\n        if prev != -1:\n            ans += abs(prev - ind)\n        prev = ind\n    print(ans)", "import sys\nlines = []\nfor Line in sys.stdin:\n    lines.append(Line.rstrip('\\n'))\n\ndef abs_cumulative(arr):\n    return [abs(arr[i] - arr[i - 1]) for i in range(1, len(arr))]\n\ndef count_time(keys, word):\n    t = []\n    for c in word:\n        t += [keys.index(c) + 1]\n    return sum(abs_cumulative(t))\nn = int(lines[0])\ndel lines[0]\nfor i in range(n):\n    keys = lines[0]\n    word = lines[1]\n    del lines[0]\n    del lines[0]\n    print(count_time(keys, word))", "x = int(input())\nz = 1\nt = []\nc = []\nwhile z <= x:\n    kl = str(input())\n    w = str(input())\n    t.append(kl)\n    c.append(w)\n    z += 1\n\ndef sol(k_l, w):\n    dic = {}\n    i = 1\n    for letters in k_l:\n        dic[str(letters)] = i\n        i += 1\n    j = 0\n    k = 1\n    temp = 0\n    while k < len(w):\n        temp = temp + abs(dic[w[k]] - dic[w[j]])\n        k += 1\n        j += 1\n    return temp\nindex = 0\nwhile index < len(t):\n    print(sol(t[index], c[index]))\n    index += 1", "def findp(x, y):\n    t = []\n    sum = 0\n    for i in y:\n        if i in x:\n            t.append(x.index(i))\n    if len(t) == 1:\n        sum = 0\n    else:\n        for j in range(1, len(t)):\n            sum = sum + abs(t[j - 1] - t[j])\n    print(sum)\nn = int(input())\nfor i in range(n):\n    x = input()\n    y = input()\n    findp(x, y)", "t = int(input())\nfor _ in range(t):\n    k = input()\n    s = input()\n    res = 0\n    for i in range(1, len(s)):\n        res += abs(k.index(s[i]) - k.index(s[i - 1]))\n    print(res)", "def solve(s, ch):\n    s = list(s)\n    arr = []\n    ans = 0\n    for i in ch:\n        if i in s:\n            b = s.index(i) + 1\n            arr.append(b)\n    for i in range(len(arr) - 1):\n        ans += abs(arr[i + 1] - arr[i])\n    return ans\nfor i in range(int(input())):\n    s = input()\n    ch = input()\n    print(solve(s, ch))", "for _ in range(int(input())):\n    f = input()\n    s = input()\n    ans = 0\n    t = f.index(s[0])\n    for i in range(1, len(s)):\n        p = f.index(s[i])\n        ans += abs(t - p)\n        t = p\n    print(ans)", "for _ in range(int(input())):\n    s = input()\n    wrd = input()\n    count = 0\n    for i in range(len(wrd)):\n        try:\n            count += abs(s.index(wrd[i]) - s.index(wrd[i + 1]))\n        except:\n            print(count)\n            break", "n = int(input())\nfor _ in range(n):\n    dic = {}\n    time = 0\n    keyboard = input()\n    for i in range(len(keyboard)):\n        dic[keyboard[i]] = i + 1\n    word = input()\n    for j in range(1, len(word)):\n        time += abs(dic[word[j]] - dic[word[j - 1]])\n    print(time)", "output = []\n\ndef find_time(keys, s):\n    time = 0\n    left = 0\n    right = 1\n    while right < len(s):\n        time += abs(int(keys.find(s[right])) - int(keys.find(s[left])))\n        left += 1\n        right += 1\n    return time\nn = int(input())\nfor _ in range(n):\n    keys = input()\n    s = input()\n    output.append(find_time(keys, s))\nprint(*output, sep='\\n')", "import math\nt = int(input(''))\nfor x in range(0, t):\n    al = input('')\n    s = input('')\n    d = {}\n    if len(s) == 0:\n        print(0)\n    else:\n        soma = 0\n        for y in range(0, 26):\n            d[al[y]] = y\n        for i in range(1, len(s)):\n            soma = soma + abs(d[s[i]] - d[s[i - 1]])\n        print(soma)", "def function(words, keyboards):\n    time = []\n    for i in range(len(words)):\n        w = words[i]\n        b = keyboards[i]\n        c_time = 0\n        if len(w) != 1:\n            c_l = w[0]\n            for l in w[1:]:\n                c_time += abs(b[c_l] - b[l])\n                c_l = l\n        time.append(str(c_time))\n    return '\\n'.join(time)\nt = int(input())\nkeyboards = []\nwords = []\nfor i in range(t):\n    board = input()\n    words.append(input())\n    board_dict = {}\n    i = 1\n    for key in board:\n        board_dict[key] = i\n        i += 1\n    keyboards.append(board_dict)\nans = function(words, keyboards)\nprint(ans)", "t = int(input())\nwhile t != 0:\n    a = input()\n    s = input()\n    net = {}\n    for i in range(26):\n        net[a[i]] = i + 1\n    ans = 0\n    for i in range(1, len(s)):\n        ans += abs(net[s[i]] - net[s[i - 1]])\n    print(ans)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    k = input()\n    s = input()\n    c = 0\n    p = k.index(s[0])\n    for ch in s:\n        pos = k.index(ch)\n        c += abs(pos - p)\n        p = pos\n    print(c)", "test = int(input())\nfor i in range(test):\n    n = input()\n    t = input()\n    res = []\n    sum = 0\n    for i in t:\n        res.append(n.find(i))\n    for i in range(0, len(res) - 1):\n        sum = sum + abs(res[i + 1] - res[i])\n    print(sum)", "for t in range(int(input())):\n    s = input()\n    s1 = input()\n    a = 0\n    for i in range(len(s1) - 1):\n        a = a + abs(s.index(s1[i]) - s.index(s1[i + 1]))\n    print(str(a))", "from sys import stdin\n\ndef _calc_score(alphabet, word):\n    dct = {value: index for (index, value) in enumerate(alphabet)}\n    score = 0\n    for (index, value) in enumerate(word[1:], 1):\n        score += abs(dct[value] - dct[word[index - 1]])\n    return score\nfor i in range(int(stdin.readline())):\n    alphabet = stdin.readline().strip()\n    word = stdin.readline().strip()\n    print(_calc_score(alphabet, word))", "t = int(input())\nres = []\nfor i in range(t):\n    cnt = 0\n    time = 0\n    dictA = {}\n    pos = []\n    key = input()\n    s = input()\n    for j in key:\n        cnt += 1\n        dictA[j] = cnt\n    for j in s:\n        pos.append(dictA[j])\n    for i in range(len(pos)):\n        try:\n            time += abs(pos[i + 1] - pos[i])\n        except:\n            break\n    res.append(time)\nfor i in res:\n    print(i)", "import sys\n\ndef distance(alpha, word):\n    d = dict()\n    for i in range(len(alpha)):\n        d[alpha[i]] = i\n    res = 0\n    for i in range(len(word) - 1):\n        res += abs(d[word[i]] - d[word[i + 1]])\n    return res\nt = input()\nfor i in range(int(t)):\n    alpha = input()\n    word = input()\n    print(distance(alpha, word))", "def distance(alphabet, word):\n    res = 0\n    last_char = word[0]\n    last_index = alphabet.index(last_char)\n    for char in word[1:]:\n        cur_index = alphabet.index(char)\n        res += abs(cur_index - last_index)\n        last_index = cur_index\n    return res\n\ndef std_input():\n    times = input()\n    for i in range(int(times)):\n        alpha = input()\n        word = input()\n        print(distance(alpha, word))\nstd_input()", "import sys\n\ndef distance(alpha, word):\n    d = dict()\n    c = 0\n    for i in alpha:\n        d[i] = c\n        c += 1\n    res = 0\n    for i in range(len(word) - 1):\n        res += abs(d[word[i]] - d[word[i + 1]])\n    return res\nt = input()\nfor i in range(int(t)):\n    alpha = input()\n    word = input()\n    print(distance(alpha, word))", "import sys\n\ndef distance(alpha, word):\n    d = {}\n    c = 0\n    for i in alpha:\n        d[i] = c\n        c += 1\n    res = 0\n    for i in range(len(word) - 1):\n        res += abs(d[word[i]] - d[word[i + 1]])\n    return res\nt = input()\nfor i in range(int(t)):\n    alpha = input()\n    word = input()\n    print(distance(alpha, word))", "def distance(alpha, word):\n    d = {}\n    c = 0\n    for i in alpha:\n        d[i] = c\n        c += 1\n    res = 0\n    for i in range(1, len(word)):\n        res += abs(d[word[i]] - d[word[i - 1]])\n    return res\nt = input()\nfor i in range(int(t)):\n    alpha = input()\n    word = input()\n    print(distance(alpha, word))", "def distance(alpha, word):\n    d = {}\n    c = 0\n    for i in alpha:\n        d[i] = c\n        c += 1\n    res = 0\n    for i in range(1, len(word)):\n        res += abs(d[word[i]] - d[word[i - 1]])\n    print(res)\nt = input()\nfor i in range(int(t)):\n    distance(input(), input())", "def distance(alpha, word):\n    c = 0\n    d = {}\n    for i in alpha:\n        d[i] = c\n        c += 1\n    res = 0\n    for i in range(1, len(word)):\n        res += abs(d[word[i]] - d[word[i - 1]])\n    print(res)\nt = int(input())\nfor i in range(t):\n    distance(input(), input())", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\n\ndef get_print_int_same(x):\n    sys.stdout.write(str(x) + ' ')\n\ndef get_print_same(x):\n    sys.stdout.write(x + ' ')\nfrom sys import maxsize\n\ndef solve():\n    for _ in range(get_int()):\n        key = get_string()\n        s = get_string()\n        n = len(s)\n        count = 0\n        d = dict()\n        for i in range(26):\n            d[key[i]] = count\n            count += 1\n        ans = 0\n        for i in range(n - 1):\n            ans += abs(d[s[i]] - d[s[i + 1]])\n        get_print_int(ans)\nsolve()", "a = int(input())\nfor i in range(a):\n    s = input()\n    w = input()\n    c = 0\n    for j in range(len(w) - 1):\n        c += abs(s.find(w[j]) - s.find(w[j + 1]))\n    print(c)", "t = int(input())\nfor _ in range(t):\n    k = input()\n    s = input()\n    l = len(s)\n    if l == 1:\n        print(0)\n        continue\n    res = 0\n    c_i = k.index(s[0]) + 1\n    for c in range(1, l):\n        i = k.index(s[c]) + 1\n        res += abs(i - c_i)\n        c_i = i\n    print(res)", "n = int(input())\nfor j in range(0, n):\n    a = input()\n    b = input()\n    s = 0\n    for i in range(1, len(b)):\n        s += abs(a.index(b[i]) - a.index(b[i - 1]))\n    print(s)", "import sys\nline = sys.stdin.readline().strip()\nnums = int(line)\nfor _ in range(nums):\n    count = 0\n    keyboard = sys.stdin.readline().strip()\n    case = sys.stdin.readline().strip()\n    last_offset = -1\n    for (idx, s) in enumerate(case):\n        offset = keyboard.find(s)\n        if idx != 0:\n            count += abs(offset - last_offset)\n        last_offset = offset\n    print(count)", "def tinh_vi_tri(keyboard: str, key: str):\n    return keyboard.index(key) + 1\n\ndef giai_quyet_van_de():\n    keyboard = input()\n    key = input()\n    t = 0\n    for i in range(2, len(key) + 1):\n        a = tinh_vi_tri(keyboard, key[i - 1])\n        b = tinh_vi_tri(keyboard, key[i - 2])\n        t += abs(a - b)\n    print(t)\nt = int(input())\nfor i in range(t):\n    giai_quyet_van_de()", "Test = int(input())\nfor T in range(Test):\n    ABC = '1'\n    Cad = input()\n    ABC = ABC + Cad\n    Palabra = input()\n    Suma = 0\n    PosI = ABC.index(Palabra[0])\n    for K in range(1, len(Palabra)):\n        PosF = ABC.index(Palabra[K])\n        X = abs(PosI - PosF)\n        Suma = Suma + X\n        PosI = PosF\n    print(Suma)"]