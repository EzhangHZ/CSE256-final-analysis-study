["import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (N, M) = list(map(int, input().split()))\n    X = []\n    for i in range(M):\n        X.append([])\n    for i in range(N):\n        K = list(map(int, input().split()))\n        for j in range(M):\n            X[j].append(K[j])\n    flag = 0\n    ans = set()\n    Y = X.copy()\n    for i in range(N):\n        if flag:\n            break\n        for j in range(1, M):\n            if X[j - 1][i] > X[j][i]:\n                X.sort(key=lambda x: x[i])\n                for l in range(M):\n                    if X[l][i] != Y[l][i]:\n                        ans.add(l + 1)\n                continue\n    for i in range(N):\n        for j in range(1, M):\n            if X[j - 1][i] > X[j][i]:\n                print(-1)\n                return\n    if len(ans) == 0:\n        print(1, 1)\n    elif len(ans) >= 3:\n        print(-1)\n    else:\n        print(*ans)\nfor _ in range(int(input())):\n    solve()", "T = int(input())\nfor case in range(T):\n    (n, m) = map(int, input().split())\n    g = [tuple(map(int, input().split())) for r in range(n)]\n    g = tuple(zip(*g))\n    r = tuple(sorted(g))\n    for i in range(1, m):\n        for j in range(n):\n            if r[i][j] < r[i - 1][j]:\n                break\n        else:\n            continue\n        print(-1)\n        break\n    else:\n        d = []\n        for i in range(m):\n            if g[i] != r[i]:\n                d.append(i)\n        if len(d) == 0:\n            print(1, 1)\n        elif len(d) == 2:\n            print(d[0] + 1, d[1] + 1)\n        else:\n            print(-1)", "T = int(input())\nfor case in range(T):\n    (n, m) = map(int, input().split())\n    g = [tuple(map(int, input().split())) for r in range(n)]\n    g = tuple(zip(*g))\n    r = tuple(sorted(g))\n    for i in range(1, m):\n        for j in range(n):\n            if r[i][j] < r[i - 1][j]:\n                break\n        else:\n            continue\n        print(-1)\n        break\n    else:\n        d = []\n        for i in range(m):\n            if g[i] != r[i]:\n                d.append(i)\n        if len(d) == 0:\n            print(1, 1)\n        elif len(d) == 2:\n            print(d[0] + 1, d[1] + 1)\n        else:\n            print(-1)", "for case in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = [list(map(int, input().split())) for _ in range(n)]\n    if m == 1:\n        print(1, 1)\n    else:\n        swap = set()\n        not_possible = False\n        for i in range(n):\n            temp = sorted(arr[i])\n            for j in range(m):\n                if temp[j] != arr[i][j]:\n                    swap.add(j)\n            if not_possible:\n                break\n        swap = list(swap)\n        if swap:\n            for row in arr:\n                temp_row = row\n                (temp_row[swap[0]], temp_row[swap[1]]) = (temp_row[swap[1]], temp_row[swap[0]])\n                if temp_row != sorted(row):\n                    not_possible = True\n                    break\n        for i in range(n):\n            for j in range(1, m):\n                if arr[i][j - 1] > arr[i][j]:\n                    not_possible = True\n                    break\n            if not_possible:\n                break\n        if not_possible:\n            print(-1)\n        else:\n            print(' '.join((str(n + 1) for n in swap)) if swap else '1 1')", "for case in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = [list(map(int, input().split())) for _ in range(n)]\n    if m == 1:\n        print(1, 1)\n    else:\n        swap = set()\n        not_possible = False\n        for i in range(n):\n            temp = sorted(arr[i])\n            for j in range(m):\n                if temp[j] != arr[i][j]:\n                    swap.add(j)\n            if not_possible:\n                break\n        swap = list(swap)\n        if swap:\n            for row in arr:\n                temp_row = row\n                (temp_row[swap[0]], temp_row[swap[1]]) = (temp_row[swap[1]], temp_row[swap[0]])\n                if temp_row != sorted(row):\n                    not_possible = True\n                    break\n        if not_possible:\n            print(-1)\n        else:\n            print(' '.join((str(n + 1) for n in swap)) if swap else '1 1')", "import sys\ninput = sys.stdin.readline\nints = lambda : list(map(int, input().split()))\nt = ints()[-1]\nfor _ in range(t):\n    (n, m) = ints()\n    grid = [ints() for _ in range(n)]\n    problem = set()\n    for row in grid:\n        temp = row[:]\n        temp.sort()\n        for i in range(m):\n            if temp[i] != row[i]:\n                problem.add(i)\n    problem = list(problem)\n    if len(problem) == 0:\n        print(1, 1)\n    elif len(problem) > 2:\n        print(-1)\n    else:\n        is_possible = True\n        for i in range(n):\n            (grid[i][problem[0]], grid[i][problem[1]]) = (grid[i][problem[1]], grid[i][problem[0]])\n            for j in range(1, m):\n                if grid[i][j] < grid[i][j - 1]:\n                    is_possible = False\n        if not is_possible:\n            print(-1)\n        else:\n            print(problem[0] + 1, problem[1] + 1)", "def main():\n    tc = int(input())\n    for _ in range(tc):\n        (n, m) = map(int, input().split())\n        grid = [tuple(map(int, input().split())) for i in range(n)]\n        grid = tuple(zip(*grid))\n        new_grid = tuple(sorted(grid))\n        for i in range(1, m):\n            for j in range(n):\n                if new_grid[i][j] < new_grid[i - 1][j]:\n                    break\n            else:\n                continue\n            print(-1)\n            break\n        else:\n            bad = []\n            for i in range(m):\n                if grid[i] != new_grid[i]:\n                    bad.append(i)\n            k = len(bad)\n            if k == 0:\n                print(1, 1)\n            elif k == 2:\n                print(bad[0] + 1, bad[1] + 1)\n            else:\n                print(-1)\nmain()", "iT = int(input())\nfor _ in range(iT):\n    answer = ''\n    (iN, iM) = map(int, input().split())\n    lst_temp = [[] for _ in range(iN)]\n    for idx in range(iN):\n        lst_temp[idx] = list(map(int, input().split()))\n    row = 0\n    idx1 = -1\n    for j in range(1, iM):\n        for i in range(iN):\n            if lst_temp[i][j] < lst_temp[i][j - 1] and idx1 == -1:\n                idx1 = j\n                row = i\n                break\n    if idx1 == -1:\n        answer = '1 1'\n    else:\n        lst_temp_sot = sorted(lst_temp[row])\n        idx2 = -1\n        val = 0\n        for i in range(iM):\n            if lst_temp_sot[i] != lst_temp[row][i]:\n                idx2 = i\n                val = lst_temp_sot[i]\n                break\n        for i in range(iM):\n            if lst_temp[row][i] == val:\n                idx1 = i\n        for idx in range(iN):\n            temp = lst_temp[idx][idx2]\n            lst_temp[idx][idx2] = lst_temp[idx][idx1]\n            lst_temp[idx][idx1] = temp\n        T_F = True\n        for j in range(1, iM):\n            for i in range(iN):\n                if lst_temp[i][j] < lst_temp[i][j - 1]:\n                    T_F = False\n                    break\n        if T_F:\n            answer = f'{idx2 + 1} {idx1 + 1}'\n        else:\n            answer = '-1'\n    print(answer)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append([int(x) for x in input().split()])\n\n    def solve(grid):\n        (x, y) = (-2, -2)\n        for i in range(n):\n            k = 0\n            for j in range(1, m):\n                if grid[i][j] < grid[i][k]:\n                    if x == -2:\n                        x = k\n                    y = j\n                if grid[i][j] > grid[i][j - 1]:\n                    k = j\n        return [x, y]\n    curr = solve(grid)\n    (a, b) = (curr[0], curr[1])\n\n    def exec(a, b, grid):\n        if a == -1 and b == -1:\n            return [-1]\n        if a == -2 and b == -2:\n            return [1, 1]\n        for i in range(n):\n            (grid[i][a], grid[i][b]) = (grid[i][b], grid[i][a])\n            for j in range(1, m):\n                if grid[i][j] < grid[i][j - 1]:\n                    return [-1]\n        return [min(a, b) + 1, max(a, b) + 1]\n    print(*exec(a, b, grid))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    arr = []\n    for i in range(n):\n        a = list(map(int, input().split()))\n        arr.append(a)\n    a = []\n    for i in range(n):\n        b = sorted(arr[i])\n        for j in range(m):\n            if arr[i][j] != b[j]:\n                a.append(j)\n        if a:\n            break\n    if len(a) > 2:\n        print(-1)\n    elif len(a) == 0:\n        print(1, 1)\n    else:\n        for i in range(n):\n            (arr[i][a[0]], arr[i][a[1]]) = (arr[i][a[1]], arr[i][a[0]])\n        found = False\n        for i in range(n):\n            for j in range(1, m):\n                if arr[i][j] < arr[i][j - 1]:\n                    print(-1)\n                    found = True\n                    break\n            if found:\n                break\n        else:\n            a = [a[0] + 1, a[1] + 1]\n            print(*a, sep=' ')", "T = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    matrix = [None] * n\n    for i in range(n):\n        matrix[i] = list(map(int, input().split()))\n    swap1 = -1\n    swap2 = -1\n    found = False\n    for i in range(n):\n        for j in range(m - 1):\n            if matrix[i][j] > matrix[i][j + 1]:\n                swap1 = j\n                cur = int(matrix[i][j])\n                while swap1 >= 0 and matrix[i][swap1] == cur:\n                    swap1 -= 1\n                swap1 += 1\n                for k in range(j + 1, m - 1):\n                    if matrix[i][k] > matrix[i][k + 1]:\n                        swap2 = k + 1\n                        break\n                if swap2 == -1:\n                    for k in range(j + 1, m - 1):\n                        if matrix[i][k] < matrix[i][k + 1]:\n                            swap2 = k\n                            break\n                if swap2 == -1:\n                    swap2 = m - 1\n                found = True\n                break\n        if found:\n            break\n    if not found:\n        print('1 1')\n    else:\n        ans = True\n        for i in range(n):\n            temp = matrix[i][swap1]\n            matrix[i][swap1] = matrix[i][swap2]\n            matrix[i][swap2] = temp\n        for i in range(n):\n            for j in range(m - 1):\n                if matrix[i][j] > matrix[i][j + 1]:\n                    ans = False\n                    break\n            if not ans:\n                break\n        if not ans:\n            print(-1)\n        else:\n            print(str(swap1 + 1) + ' ' + str(swap2 + 1))", "test_cases = int(input())\n\ndef in_order(row):\n    for i in range(1, len(row)):\n        if row[i] < row[i - 1]:\n            return False\n    return True\n\ndef diff_indices(a, b):\n    indices = []\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            indices.append(i)\n    return indices\nfor test in range(test_cases):\n    nums = [int(num) for num in input().strip().split()]\n    (rows, cols) = nums\n    grid = []\n    for row in range(rows):\n        line = [int(num) for num in input().strip().split()]\n        grid.append(line)\n    row_out_order = -1\n    for (r, row) in enumerate(grid):\n        if not in_order(row):\n            row_out_order = r\n            break\n    if row_out_order == -1:\n        print(1, 1)\n    else:\n        sorted_row_out_order = sorted(grid[row_out_order])\n        diff_cols = diff_indices(grid[row_out_order], sorted_row_out_order)\n        if len(diff_cols) != 2:\n            print(-1)\n        else:\n            (col1, col2) = diff_cols\n            all_in_order = True\n            for row in grid:\n                (row[col1], row[col2]) = (row[col2], row[col1])\n                if not in_order(row):\n                    all_in_order = False\n                    break\n            if all_in_order:\n                print(col1 + 1, col2 + 1)\n            else:\n                print(-1)", "import math\nimport random\nimport sys\n\ndef test():\n    (n, m) = [int(x) for x in input().split()]\n    a = [list(map(int, input().split())) for i in range(n)]\n    swap = []\n    for i in range(n):\n        b = sorted(a[i])\n        for j in range(m):\n            if a[i][j] != b[j]:\n                swap.append(j)\n        if len(swap) > 0:\n            break\n    if len(swap) == 0:\n        print(1, 1)\n        return\n    if len(swap) > 2:\n        print(-1)\n        return\n    for i in range(n):\n        tem = a[i][swap[0]]\n        a[i][swap[0]] = a[i][swap[1]]\n        a[i][swap[1]] = tem\n        if sorted(a[i]) != a[i]:\n            print('-1')\n            return\n    print(swap[0] + 1, swap[1] + 1)\nt = int(input())\nfor i in range(t):\n    test()", "def check(grid, u, v):\n    for irow in grid:\n        sirow = list(irow)\n        (sirow[u], sirow[v]) = (sirow[v], sirow[u])\n        for jc in range(1, len(sirow)):\n            if sirow[jc - 1] > sirow[jc]:\n                return False\n    return True\n\ndef solve():\n    (n, m) = map(int, input().split())\n    grid = []\n    for i in range(n):\n        row = list(map(int, input().split()))\n        grid.append(row)\n    (u, v) = (-1, -1)\n    for row in grid:\n        sorted_row = sorted(row)\n        for j in range(m):\n            if row[j] == sorted_row[j]:\n                continue\n            if v == -1:\n                v = j\n            elif u == -1:\n                u = j\n            else:\n                v = u = -2\n        if v == -2:\n            print('-1')\n            return\n        if v == -1:\n            continue\n        if check(grid, u, v):\n            print(v + 1, u + 1)\n            return\n        print('-1')\n        return\n    print('1 1')\nt = int(input())\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append([int(i) for i in input().split()])\n    ans = []\n    f = 0\n    for i in l:\n        if i != sorted(i):\n            ans.append(i)\n            if len(ans) == 2:\n                break\n    ind = []\n    for i in range(len(ans)):\n        one = ans[i]\n        two = sorted(one)\n        ind = []\n        for i in range(len(one)):\n            if one[i] != two[i]:\n                ind.append(i)\n    if len(ind) == 2:\n        for i in range(len(l)):\n            (l[i][ind[0]], l[i][ind[1]]) = (l[i][ind[1]], l[i][ind[0]])\n    for i in l:\n        if i != sorted(i):\n            f = 1\n    if f == 1:\n        print('-1')\n    else:\n        try:\n            print(ind[0] + 1, 1 + ind[1])\n        except:\n            print(1, 1)", "for case in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = [list(map(int, input().split())) for _ in range(n)]\n    arr_s = [sorted(r) for r in arr]\n    if m == 1:\n        print(1, 1)\n    else:\n        swap = set()\n        not_possible = False\n        for i in range(n):\n            for j in range(m):\n                if arr_s[i][j] != arr[i][j]:\n                    swap.add(j)\n        swap = list(swap)\n        if swap:\n            for i in range(n):\n                (arr[i][swap[0]], arr[i][swap[1]]) = (arr[i][swap[1]], arr[i][swap[0]])\n                if arr[i] != arr_s[i]:\n                    not_possible = True\n                    break\n        if not_possible:\n            print(-1)\n        else:\n            print(' '.join((str(n + 1) for n in swap)) if swap else '1 1')", "def check(list):\n    ans = True\n    for i in range(len(list) - 1):\n        if list[i] > list[i + 1]:\n            ans = False\n            break\n    return ans\n\ndef index(list):\n    temp = sorted(list)\n    val = []\n    for i in range(len(list)):\n        if list[i] != temp[i]:\n            val.append(i)\n    return val\nt = int(input())\nfor q in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    grid = []\n    for c in range(n):\n        row = [int(x) for x in input().split()]\n        grid.append(row)\n    (nature, corr) = (True, -1)\n    for d in range(n):\n        if not check(grid[d]):\n            nature = False\n            corr = d\n            break\n    if nature:\n        print(1, 1)\n    elif len(index(grid[corr])) != 2:\n        print(-1)\n    else:\n        o = index(grid[corr])[0]\n        p = index(grid[corr])[1]\n        ultimate = True\n        for j in range(n):\n            (grid[j][o], grid[j][p]) = (grid[j][p], grid[j][o])\n            if not check(grid[j]):\n                ultimate = False\n                break\n        if ultimate:\n            print(o + 1, p + 1)\n        else:\n            print(-1)", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    l = []\n    flag = 1\n    key = -1\n    for i in range(n):\n        ll = list(map(int, input().split()))\n        l.append(ll)\n    for i in range(n):\n        lo = sorted(l[i])\n        if lo != l[i]:\n            key = i\n            break\n    c = 0\n    lt = sorted(l[key])\n    li = []\n    for i in range(m):\n        if l[key][i] != lt[i]:\n            c += 1\n            li.append(i)\n        if c > 2:\n            flag = 0\n            break\n    if key == -1:\n        li.append(0)\n        li.append(0)\n    elif flag:\n        for i in range(n):\n            (l[i][li[0]], l[i][li[-1]]) = (l[i][li[-1]], l[i][li[0]])\n            lp = sorted(l[i])\n            if lp != l[i]:\n                flag = 0\n                break\n    if flag:\n        print(li[0] + 1, li[-1] + 1)\n    else:\n        print(-1)\n    t -= 1", "class Solve:\n\n    def __init__(self):\n        (self.n, self.m) = map(int, input().strip().split())\n        self.table = [list(map(int, input().strip().split())) for _ in range(self.n)]\n\n    def check_table(self):\n        for i in range(self.n):\n            for j in range(1, self.m):\n                if self.table[i][j] < self.table[i][j - 1]:\n                    return i\n        return None\n\n    def solve(self):\n        row = self.check_table()\n        si = None\n        sj = None\n        if row is not None:\n            sorted_row = sorted(self.table[row])\n            for i in range(self.m):\n                if sorted_row[i] != self.table[row][i]:\n                    if si is None:\n                        si = i\n                    else:\n                        sj = i\n        if si is None:\n            si = sj = 0\n        for i in range(self.n):\n            (self.table[i][si], self.table[i][sj]) = (self.table[i][sj], self.table[i][si])\n        if self.check_table() is not None:\n            print(-1)\n        else:\n            print(si + 1, sj + 1)\n\ndef main():\n    t = int(input().strip())\n    for i in range(t):\n        Solve().solve()\nmain()", "T = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    A = [[int(c) for c in input().split()] for _ in range(N)]\n    swappos = []\n    for i in range(N):\n        B = sorted(A[i])\n        for j in range(M):\n            if B[j] != A[i][j]:\n                swappos.append(j)\n        if len(swappos) > 0:\n            break\n    if len(swappos) == 0:\n        print('1 1')\n        continue\n    if len(swappos) > 2:\n        print(-1)\n        continue\n    good = True\n    for i in range(N):\n        (A[i][swappos[0]], A[i][swappos[1]]) = (A[i][swappos[1]], A[i][swappos[0]])\n        for j in range(M - 1):\n            if A[i][j] > A[i][j + 1]:\n                good = False\n                break\n        if not good:\n            break\n    if good:\n        print(f'{swappos[0] + 1} {swappos[1] + 1}')\n    else:\n        print(-1)", "t = int(input())\nfor i in range(t):\n    (n, m) = input().split(' ')\n    (n, m) = (int(n), int(m))\n    a = [[] * m] * n\n    for j in range(n):\n        a[j] = input().split(' ')\n        for k in range(m):\n            a[j][k] = int(a[j][k])\n    x = 0\n    y = 0\n    for j in range(n):\n        if a[j] == sorted(a[j]):\n            x += 1\n        else:\n            y = j\n    if x == n:\n        print('1 1')\n        continue\n    b = sorted(a[y])\n    c = []\n    for j in range(m):\n        if a[y][j] != b[j]:\n            c.append(j)\n    if len(c) > 2:\n        print('-1')\n        continue\n    f = 0\n    for j in range(n):\n        aux = a[j][c[0]]\n        a[j][c[0]] = a[j][c[1]]\n        a[j][c[1]] = aux\n        if a[j] != sorted(a[j]):\n            print('-1')\n            f = 1\n            break\n    if f == 0:\n        print(c[0] + 1, c[1] + 1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    w = 0\n    (p, o) = (-1, -1)\n    for i in range(n):\n        t = list(map(int, input().split()))\n        u = t.copy()\n        u.sort()\n        if t == u:\n            w += 1\n        l.append(t)\n    if w == n:\n        print(1, 1)\n    else:\n        for i in range(len(l)):\n            k = l[i]\n            u = k.copy()\n            u.sort()\n            for i in range(len(k)):\n                if u[i] != k[i]:\n                    if p == -1:\n                        p = i\n                    elif o == -1:\n                        o = i\n                else:\n                    continue\n        t = 0\n        for i in range(len(l)):\n            k = l[i]\n            u = k.copy()\n            k.sort()\n            (u[p], u[o]) = (u[o], u[p])\n            if u == k:\n                continue\n            else:\n                t += 1\n                break\n        if t > 0:\n            print(-1)\n        else:\n            print(p + 1, o + 1)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor tests in range(t):\n    (n, m) = map(int, input().split())\n    A = [list(map(int, input().split())) for i in range(n)]\n    flag = 1\n    ANS = []\n    for i in range(n):\n        if flag == 0 or len(ANS) > 0:\n            break\n        B = list(A[i])\n        C = list(A[i])\n        for j in range(1, m):\n            C[j] = max(C[j - 1], C[j])\n        for j in range(m - 1, -1, -1):\n            if B[j] < C[j]:\n                for k in range(m):\n                    if B[k] > B[j]:\n                        A1 = [k, j]\n                        break\n                (x, y) = A1\n                (B[x], B[y]) = (B[y], B[x])\n                if sorted(B) == B:\n                    ANS.append((x, y))\n                else:\n                    flag = 0\n                break\n    if flag == 0:\n        print(-1)\n        continue\n    if len(ANS) == 0:\n        print(1, 1)\n        continue\n    (x, y) = ANS[0]\n    for i in range(n):\n        B = A[i]\n        (B[x], B[y]) = (B[y], B[x])\n        if sorted(B) == B:\n            True\n        else:\n            flag = 0\n            break\n    if flag == 1:\n        print(x + 1, y + 1)\n    else:\n        print(-1)", "t = int(input())\nfor i in range(t):\n    (n, m) = input().split(' ')\n    (n, m) = (int(n), int(m))\n    a = [[] * m] * n\n    for j in range(n):\n        a[j] = input().split(' ')\n        for k in range(m):\n            a[j][k] = int(a[j][k])\n    x = 0\n    y = 0\n    for j in range(n):\n        if a[j] == sorted(a[j]):\n            x += 1\n        else:\n            y = j\n    if x == n:\n        print('1 1')\n        continue\n    b = sorted(a[y])\n    c = []\n    for j in range(m):\n        if a[y][j] != b[j]:\n            c.append(j)\n    if len(c) > 2:\n        print('-1')\n        continue\n    z = 0\n    for j in range(n):\n        aux = a[j][c[0]]\n        a[j][c[0]] = a[j][c[1]]\n        a[j][c[1]] = aux\n        if a[j] != sorted(a[j]):\n            print('-1')\n            z = 1\n            break\n    if z == 0:\n        print(c[0] + 1, c[1] + 1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mat = [[int(x) for x in input().split()] for i in range(n)]\n    res = set()\n    for i in range(n):\n        b = sorted(mat[i])\n        t = []\n        for j in range(m):\n            if b[j] != mat[i][j]:\n                t.append(j + 1)\n        if t:\n            res.add(tuple(t))\n    if len(res) > 1:\n        print(-1)\n    elif not res:\n        print(1, 1)\n    else:\n        t = res.pop()\n        if len(t) == 2:\n            (l, r) = t\n            for i in range(n):\n                (mat[i][l - 1], mat[i][r - 1]) = (mat[i][r - 1], mat[i][l - 1])\n            flag = True\n            for i in range(n):\n                if not flag:\n                    break\n                for j in range(1, m):\n                    if mat[i][j] < mat[i][j - 1]:\n                        flag = False\n                        break\n            if flag:\n                print(l, r)\n                continue\n        print(-1)", "for case in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = [list(map(int, input().split())) for _ in range(n)]\n    arr_s = [sorted(r) for r in arr]\n    if m == 1:\n        print(1, 1)\n    else:\n        swap = set()\n        not_possible = False\n        for i in range(n):\n            for j in range(m):\n                if arr_s[i][j] != arr[i][j]:\n                    swap.add(j)\n        swap = list(swap)\n        if swap:\n            for i in range(n):\n                (arr[i][swap[0]], arr[i][swap[1]]) = (arr[i][swap[1]], arr[i][swap[0]])\n                if arr[i] != arr_s[i]:\n                    not_possible = True\n                    break\n        if not_possible:\n            print(-1)\n        else:\n            print(' '.join((str(n + 1) for n in swap)) if swap else '1 1')", "def dif_col(l):\n    new = l[:]\n    new.sort()\n    distinct = set()\n    for i in range(len(l)):\n        if l[i] != new[i]:\n            distinct.add(i)\n    return distinct\n\ndef check_changed(l, swap):\n    (a, b) = (swap[0], swap[1])\n    (l[a], l[b]) = (l[b], l[a])\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\ncase = int(input())\nfor _ in range(case):\n    q = input().split()\n    n = int(q[0])\n    m = int(q[1])\n    board = []\n    for row in range(n):\n        new = input().split()\n        board.append([int(elem) for elem in new])\n    found = None\n    for row in board:\n        if found:\n            break\n        else:\n            to_change = dif_col(row)\n            if len(to_change) == 0:\n                continue\n            elif len(to_change) >= 3:\n                found = (1, 1)\n                break\n            else:\n                found = tuple(to_change)\n    if found:\n        wrong = False\n        for i in range(n):\n            if not check_changed(board[i], found):\n                print(-1)\n                wrong = True\n                break\n        if not wrong:\n            print(found[0] + 1, found[1] + 1)\n    else:\n        print(1, 1)", "t = int(input())\nfor i in range(t):\n    (a, b) = input().split()\n    (n, m) = (int(a), int(b))\n    c = [[] * m] * n\n    e = []\n    flag = 0\n    ans = 0\n    tot = 0\n    for j in range(n):\n        c[j] = input().split()\n        for k in range(m):\n            c[j][k] = int(c[j][k])\n    for j in range(n):\n        if c[j] == sorted(c[j]):\n            ans += 1\n        else:\n            tot = j\n    if ans == n:\n        print('1 1')\n        continue\n    d = sorted(c[tot])\n    for j in range(m):\n        if c[tot][j] != d[j]:\n            e.append(j)\n    if len(e) > 2:\n        print('-1')\n        continue\n    for j in range(n):\n        temp = c[j][e[0]]\n        c[j][e[0]] = c[j][e[1]]\n        c[j][e[1]] = temp\n        if c[j] != sorted(c[j]):\n            print('-1')\n            flag = 1\n            break\n    if flag == 0:\n        print(e[0] + 1, e[1] + 1)", "for _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    s = []\n    for i in range(m):\n        s.append(list(map(int, input().split())))\n    h = set()\n    flag = False\n    for i in range(m):\n        row = sorted(s[i])\n        for j in range(n):\n            if row[j] != s[i][j]:\n                h.add(j + 1)\n                if len(h) > 2:\n                    flag = True\n                    break\n        if flag:\n            break\n    if flag:\n        print('-1')\n    elif len(h) == 0:\n        print('1 1')\n    else:\n        (x, y) = (min(h) - 1, max(h) - 1)\n        for i in range(m):\n            if s[i][x] < s[i][y]:\n                print(-1)\n                break\n        else:\n            print(x + 1, y + 1)", "T = int(input())\nwhile T:\n    T -= 1\n    (n, m) = map(int, input().split())\n    ex = []\n    a = [[0]] * n\n    for i in range(n):\n        a[i] = list(map(int, input().split()))\n    for row in a:\n        rc = row.copy()\n        rc.sort()\n        for i in range(m):\n            if row[i] != rc[i]:\n                ex.append(i)\n        if len(ex):\n            break\n    if len(ex) == 0:\n        print(1, 1)\n    elif len(ex) == 2:\n        (c1, c2) = ex\n        flag = True\n        for row in a:\n            (row[c1], row[c2]) = (row[c2], row[c1])\n            for i in range(1, m):\n                if row[i] < row[i - 1]:\n                    flag = False\n                    break\n            if not flag:\n                break\n        if flag:\n            print(c1 + 1, c2 + 1)\n        else:\n            print(-1)\n    else:\n        print(-1)", "import collections\nfrom math import ceil, gcd, sqrt, log\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    (n, m) = map(int, input().split())\n    mat = []\n    for i in range(n):\n        a = list(map(int, input().split()))[:m]\n        mat.append(a)\n    k = 0\n    (one, two) = (0, 0)\n    for row in range(n):\n        A = mat[row]\n        if len(set(A)) == 1:\n            continue\n        b = sorted(A)\n        flag = 0\n        (one, two) = (0, 0)\n        for i in range(m):\n            if b[i] != A[i]:\n                flag += 1\n                if flag == 1:\n                    one = i\n                elif flag == 2:\n                    two = i\n                else:\n                    print(-1)\n                    return\n        if flag != 0:\n            break\n        k = row\n    check = mat[k]\n    if check[one] < check[two]:\n        print(-1)\n        return\n    for i in range(k + 1, n):\n        ok = mat[i]\n        if ok[one] < ok[two]:\n            print(-1)\n            return\n        g = sorted(ok)\n        (ok[one], ok[two]) = (ok[two], ok[one])\n        if g != ok:\n            print(-1)\n            return\n    print(one + 1, two + 1)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        arr.append(l)\n    flag = True\n    indexs = []\n    for i in range(n):\n        ol = arr[i].copy()\n        sl = arr[i].copy()\n        sl.sort()\n        ti = []\n        li = 0\n        for j in range(m):\n            if ol[j] != sl[j]:\n                ti.append(j)\n                li += 1\n        if li == 0:\n            continue\n        elif li == 2:\n            indexs.append(tuple(ti))\n        else:\n            flag = False\n            break\n    if flag:\n        li = len(indexs)\n        if li == 0:\n            print('1 1')\n        else:\n            s = set(indexs)\n            ls = len(s)\n            if ls == 1:\n                l = s.pop()\n                (p1, p2) = (l[0], l[1])\n                flag1 = True\n                for i in range(n):\n                    if arr[i][p1] < arr[i][p2]:\n                        flag1 = False\n                        break\n                if flag1:\n                    print(p1 + 1, p2 + 1)\n                else:\n                    print(-1)\n            else:\n                print(-1)\n    else:\n        print(-1)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = []\n    for j in range(n):\n        A = [int(k) for k in input().split()]\n        d.append(A)\n    flag = 0\n    ans = []\n    for j in d:\n        b = j.copy()\n        b.sort()\n        a = []\n        for h in range(m):\n            if b[h] != j[h]:\n                a.append(h)\n        if len(a) > 2:\n            flag = 1\n            break\n        elif len(a) == 2:\n            ans.append((a[0], a[1]))\n            break\n    if flag == 1:\n        print(-1)\n    else:\n        f = -1\n        for r in ans:\n            if r != (-1, -1):\n                f = r\n                break\n        if f == -1:\n            print(1, 1)\n        else:\n            l = f[0]\n            r = f[1]\n            a = 0\n            for j in range(n):\n                (d[j][l], d[j][r]) = (d[j][r], d[j][l])\n            for j in range(n):\n                for k in range(1, m):\n                    if d[j][k] < d[j][k - 1]:\n                        a = 1\n                        break\n                if a == 1:\n                    break\n            if a == 1:\n                print(-1)\n            else:\n                print(l + 1, r + 1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    lst = []\n    for i in range(n):\n        lst.append([int(x) for x in input().split()])\n    idx = []\n    for i in range(n):\n        b = lst[i]\n        d = sorted(lst[i])\n        for j in range(m):\n            if b[j] != d[j]:\n                idx.append(j)\n        if len(idx) != 0:\n            break\n    if len(idx) == 0:\n        print(1, 1)\n    elif len(idx) == 2:\n        for i in range(n):\n            (lst[i][idx[0]], lst[i][idx[1]]) = (lst[i][idx[1]], lst[i][idx[0]])\n        flag = True\n        for i in range(n):\n            b = lst[i]\n            d = sorted(b)\n            if b != d:\n                print(-1)\n                flag = False\n                break\n        if flag:\n            print(idx[0] + 1, idx[1] + 1)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    grid = []\n    for i in range(m):\n        grid.append(list(map(int, input().split())))\n    a = set()\n    f = False\n    for i in range(m):\n        arr = sorted(grid[i])\n        for j in range(n):\n            if arr[j] != grid[i][j]:\n                a.add(j)\n                if len(a) > 2:\n                    f = True\n                    break\n        if f:\n            break\n    if f:\n        print(-1)\n    else:\n        if not a:\n            print(1, 1)\n            continue\n        (p, q) = (min(a), max(a))\n        for i in range(m):\n            if grid[i][p] < grid[i][q]:\n                f = True\n                break\n        if f:\n            print(-1)\n        else:\n            print(p + 1, q + 1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = [list(map(int, input().split())) for i in range(n)]\n    swap = set()\n    for row in arr:\n        for (i, a, b) in zip(list(range(m)), row, sorted(row)):\n            if a != b:\n                swap.add(i + 1)\n    if len(swap) > 2:\n        print(-1)\n    elif len(swap) == 2:\n        swap = list(swap)\n        y = 1\n        for i in range(n):\n            (arr[i][swap[0] - 1], arr[i][swap[1] - 1]) = (arr[i][swap[1] - 1], arr[i][swap[0] - 1])\n            if sorted(arr[i]) != arr[i]:\n                y = 0\n        if y:\n            print(*swap)\n        else:\n            print(-1)\n    else:\n        print(1, 1)", "n = int(input())\n\ndef swap(arr, i, j):\n    tmp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = tmp\nfor i in range(n):\n    (r, c) = map(int, input().split())\n    matrix = []\n    result = 0\n    for j in range(r):\n        row = list(map(int, input().split()))\n        matrix.append(row)\n    swap_i = -1\n    swap_j = -1\n    for k in range(r):\n        row = matrix[k]\n        sorted_row = row.copy()\n        sorted_row.sort()\n        for m in range(c):\n            if row[m] != sorted_row[m]:\n                if swap_i == -1:\n                    swap_i = m\n                else:\n                    swap_j = m\n                    break\n        if swap_i != -1:\n            break\n    if swap_i == -1:\n        print(1, 1)\n        continue\n    for k in range(r):\n        row = matrix[k]\n        swap(row, swap_i, swap_j)\n        sorted_row = row.copy()\n        sorted_row.sort()\n        for m in range(c):\n            if row[m] != sorted_row[m]:\n                result = -1\n                break\n        if result == -1:\n            break\n    if result == -1:\n        print(-1)\n    else:\n        print(swap_i + 1, swap_j + 1)", "def solve(arr):\n    bad = []\n    for i in range(len(arr)):\n        b = list(arr[i])\n        b.sort()\n        for j in range(len(b)):\n            if arr[i][j] != b[j]:\n                bad.append(j)\n        if len(bad) > 0:\n            break\n    if len(bad) == 0:\n        print(1, 1)\n    elif len(bad) > 2:\n        print(-1)\n    else:\n        for i in range(n):\n            (arr[i][bad[0]], arr[i][bad[1]]) = (arr[i][bad[1]], arr[i][bad[0]])\n        check = False\n        for i in range(n):\n            if arr[i] != sorted(arr[i]):\n                check = True\n                break\n        if check:\n            print(-1)\n        else:\n            print(bad[0] + 1, bad[1] + 1)\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    lis = []\n    for i in range(n):\n        lis.append(list(map(int, input().split())))\n    solve(lis)", "import collections\nimport math\nimport sys\nfrom queue import PriorityQueue\nfrom random import randint\nRANDOM = randint(1, 10 ** 9)\n\ndef main(testnumber):\n    (n, m) = map(int, input().split())\n    need_to_check = []\n    swapp = set()\n    rows = []\n    notOk = False\n    for i in range(n):\n        row = list(map(int, input().split()))\n        rows.append(row)\n        row_s = row[:]\n        row_s = sorted(row_s)\n        c = 0\n        swp = []\n        for j in range(m):\n            if row_s[j] != row[j]:\n                c += 1\n                swp.append(j)\n            if c > 2:\n                break\n        if c > 2:\n            notOk = True\n        if c == 2:\n            swapp.add((swp[0], swp[1]))\n        if c == 0:\n            need_to_check.append(i)\n    if notOk:\n        print(-1)\n        return\n    if len(swapp) == 0:\n        print(1, 1)\n        return\n    if len(swapp) == 1:\n        e = swapp.pop()\n        l = e[0]\n        r = e[1]\n        ok = True\n        for i in need_to_check:\n            row = rows[i]\n            tmp = row[l]\n            row[l] = row[r]\n            row[r] = tmp\n            if not all((row[j] <= row[j + 1] for j in range(m - 1))):\n                ok = False\n                break\n        if ok:\n            print(l + 1, r + 1)\n            return\n    print(-1)\nt = int(input())\ncnt = 1\nwhile t > 0:\n    main(cnt)\n    cnt += 1\n    t -= 1", "t = int(input())\nwhile t != 0:\n    (r, c) = list(map(int, input().split(' ')))\n    arr = []\n    for i in range(r):\n        r1 = list(map(int, input().split(' ')))\n        arr.append(r1)\n    bad = []\n    for i in range(0, r):\n        if bad:\n            break\n        k = arr[i].copy()\n        k.sort()\n        for j in range(0, c):\n            if arr[i][j] != k[j]:\n                bad.append(j)\n    flag = False\n    if len(bad) == 0:\n        print(1, 1)\n        t -= 1\n        continue\n    elif len(bad) > 2:\n        print(-1)\n        t -= 1\n        continue\n    else:\n        for i in range(0, r):\n            (arr[i][bad[0]], arr[i][bad[1]]) = (arr[i][bad[1]], arr[i][bad[0]])\n        for i in range(0, r):\n            for j in range(0, c - 1):\n                if arr[i][j] > arr[i][j + 1]:\n                    print(-1)\n                    flag = True\n                    break\n            if flag:\n                break\n    if not flag:\n        print(bad[0] + 1, bad[1] + 1)\n    t -= 1", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    lst = []\n    ans = True\n    for i in range(n):\n        a = list(map(int, input().split()))\n        lst.append(a)\n    idx = []\n    for i in range(n):\n        b = lst[i]\n        d = sorted(b)\n        for j in range(m):\n            if b[j] != d[j]:\n                idx.append(j)\n        if len(idx) > 0:\n            break\n    if len(idx) == 0:\n        print(1, 1)\n    elif len(idx) == 2:\n        for i in range(n):\n            (lst[i][idx[0]], lst[i][idx[1]]) = (lst[i][idx[1]], lst[i][idx[0]])\n        for i in range(n):\n            b = lst[i]\n            d = sorted(b)\n            if b != d:\n                ans = False\n                break\n        if ans == False:\n            print(-1)\n        else:\n            print(idx[0] + 1, idx[1] + 1)\n    else:\n        print(-1)", "cases = int(input())\nfor i in range(cases):\n    good = True\n    (r, c) = map(int, input().split())\n    gaps = []\n    mat = []\n    for j in range(r):\n        row = list(map(int, input().split()))\n        mat.append(row)\n    for j in range(r):\n        gaps = []\n        row = mat[j]\n        sortedRow = sorted(row)\n        for k in range(c):\n            if row[k] != sortedRow[k]:\n                gaps.append(k)\n        if gaps:\n            break\n    if gaps:\n        if len(gaps) != 2:\n            print(-1)\n        else:\n            (a, b) = gaps\n            for j in range(r):\n                (mat[j][a], mat[j][b]) = (mat[j][b], mat[j][a])\n                for k in range(c - 1):\n                    if mat[j][k] > mat[j][k + 1]:\n                        good = False\n            if good:\n                print(a + 1, b + 1)\n            else:\n                print(-1)\n    else:\n        print(1, 1)", "def solve(arr):\n    bad = []\n    for i in range(len(arr)):\n        b = list(arr[i])\n        b.sort()\n        for j in range(len(b)):\n            if arr[i][j] != b[j]:\n                bad.append(j)\n        if len(bad) > 0:\n            break\n    if len(bad) == 0:\n        print(1, 1)\n    elif len(bad) > 2:\n        print(-1)\n    else:\n        for i in range(n):\n            (arr[i][bad[0]], arr[i][bad[1]]) = (arr[i][bad[1]], arr[i][bad[0]])\n        check = False\n        for i in range(n):\n            if arr[i] != sorted(arr[i]):\n                check = True\n                break\n        if check:\n            print(-1)\n        else:\n            print(bad[0] + 1, bad[1] + 1)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n    solve(arr)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    lst = []\n    ans = True\n    for i in range(n):\n        a = list(map(int, input().split()))\n        lst.append(a)\n    idx = []\n    for i in range(n):\n        b = lst[i]\n        d = sorted(b)\n        for j in range(m):\n            if b[j] != d[j]:\n                idx.append(j)\n        if len(idx) > 0:\n            break\n    if len(idx) == 0:\n        print(1, 1)\n    elif len(idx) == 2:\n        for i in range(n):\n            (lst[i][idx[0]], lst[i][idx[1]]) = (lst[i][idx[1]], lst[i][idx[0]])\n        for i in range(n):\n            b = lst[i]\n            d = sorted(b)\n            if b != d:\n                ans = False\n                break\n        if ans == False:\n            print(-1)\n        else:\n            print(idx[0] + 1, idx[1] + 1)\n    else:\n        print(-1)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    lst = []\n    for j in range(n):\n        lst1 = list(map(int, input().split()))\n        lst.append(lst1)\n    lst1 = []\n    e = 0\n    ind = []\n    v = len(lst[0])\n    for j in lst:\n        lst3 = j.copy()\n        lst3.sort()\n        a = []\n        for h in range(v):\n            if lst3[h] != j[h]:\n                a.append(h)\n        if len(a) > 2:\n            e += 1\n            break\n        elif len(a) == 2:\n            ind.append((a[0], a[1]))\n            break\n    if e > 0:\n        print(-1)\n    else:\n        f = -1\n        for r in ind:\n            if r != (-1, -1):\n                f = r\n                break\n        if f == -1:\n            print(1, 1)\n        else:\n            l = f[0]\n            r = f[1]\n            for q in lst:\n                (q[l], q[r]) = (q[r], q[l])\n            a = 0\n            for q in lst:\n                for w in range(1, v):\n                    if q[w] < q[w - 1]:\n                        a += 1\n                        break\n                if a > 0:\n                    break\n            if a == 0:\n                print(l + 1, r + 1)\n            else:\n                print(-1)", "import math\n\ndef findSwaps(row, length):\n    sr = sorted(row)\n    badCols = []\n    for i in range(length):\n        if row[i] != sr[i]:\n            badCols.append(i)\n    if len(badCols) < 2:\n        return (None, None)\n    return (badCols[0], badCols[1])\nt = int(input())\nfor _ in range(t):\n    l = input().split()\n    (m, n) = (int(l[0]), int(l[1]))\n    grid = []\n    for _ in range(m):\n        l = input().split()\n        grid.append([int(x) for x in l])\n    swaps = None\n    for i in range(m):\n        (l, r) = findSwaps(grid[i], n)\n        if not l and (not r):\n            continue\n        swaps = (l, r)\n        break\n    if not swaps:\n        print('1 1')\n        continue\n    flag = False\n    for i in range(m):\n        (grid[i][l], grid[i][r]) = (grid[i][r], grid[i][l])\n        for j in range(1, n):\n            if grid[i][j] < grid[i][j - 1]:\n                flag = True\n                break\n        if flag:\n            break\n    print(l + 1, r + 1) if not flag else print('-1')", "for u in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    l = []\n    for i in range(n):\n        l.append([int(x) for x in input().split()])\n    temp = []\n    for i in range(n):\n        temp.append(sorted(l[i]))\n    for i in range(n):\n        if l[i] != temp[i]:\n            break\n    q = []\n    for y in range(m):\n        if l[i][y] != temp[i][y]:\n            q.append(y)\n    if len(q) > 2:\n        print(-1)\n    elif len(q) == 0:\n        print(1, 1)\n    else:\n        for i in range(n):\n            (l[i][q[0]], l[i][q[1]]) = (l[i][q[1]], l[i][q[0]])\n        flag = 0\n        for i in range(n):\n            if l[i] != temp[i]:\n                flag = 1\n                break\n        if flag == 1:\n            print(-1)\n        else:\n            print(q[0] + 1, q[1] + 1)", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().strip().split()))\n    swap_pos = None\n    impossible = False\n    arr = []\n    for _ in range(n):\n        row = list(map(int, input().strip().split()))\n        sort_row = sorted(row)\n        arr.append(row)\n        pos = []\n        for i in range(m):\n            if row[i] != sort_row[i]:\n                pos.append(i)\n        if len(pos) > 2:\n            impossible = True\n        elif len(pos) == 2:\n            swap_pos = pos\n    if impossible:\n        print(-1)\n    elif swap_pos is None:\n        print('1 1')\n    else:\n        flag = False\n        for i in range(n):\n            (arr[i][swap_pos[0]], arr[i][swap_pos[1]]) = (arr[i][swap_pos[1]], arr[i][swap_pos[0]])\n            for j in range(m - 1):\n                if arr[i][j] > arr[i][j + 1]:\n                    flag = True\n                    print(-1)\n                    break\n            if flag:\n                break\n        if not flag:\n            print(f'{swap_pos[0] + 1} {swap_pos[1] + 1}')", "def solve(arr):\n    bad = []\n    for i in range(len(arr)):\n        b = list(arr[i])\n        b.sort()\n        for j in range(len(b)):\n            if arr[i][j] != b[j]:\n                bad.append(j)\n        if len(bad) > 0:\n            break\n    if len(bad) == 0:\n        print(1, 1)\n    elif len(bad) > 2:\n        print(-1)\n    else:\n        for i in range(n):\n            (arr[i][bad[0]], arr[i][bad[1]]) = (arr[i][bad[1]], arr[i][bad[0]])\n        check = False\n        for i in range(n):\n            if arr[i] != sorted(arr[i]):\n                check = True\n                break\n        if check:\n            print(-1)\n        else:\n            print(bad[0] + 1, bad[1] + 1)\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    lis = []\n    for i in range(n):\n        lis.append(list(map(int, input().split())))\n    solve(lis)", "import math\nfor _ in range(int(input())):\n    (row, column) = map(int, input().split())\n    matrix = []\n    for i in range(row):\n        matrix.append(list(map(int, input().split())))\n    x = True\n    y = [1, 1]\n    j = 0\n    asd = True\n    while x is True and j < row:\n        a = matrix[j]\n        b = sorted(a)\n        t = []\n        for i in range(column):\n            if a[i] != b[i]:\n                t.append(i)\n        if len(t) > 2:\n            x = False\n            y = [-1]\n            asd = False\n        elif len(t) == 2:\n            (s1, s2) = t\n            y = [s1 + 1, s2 + 1]\n            x = False\n        else:\n            j += 1\n            continue\n    if x is True or asd is False:\n        print(*y)\n    else:\n        zz = 0\n        while zz < row:\n            a = matrix[zz]\n            (a[s1], a[s2]) = (a[s2], a[s1])\n            b = sorted(a)\n            for i in range(column):\n                if a[i] != b[i]:\n                    y = [-1]\n                    zz = row + 1\n                    break\n            zz += 1\n        print(*y)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        l = list(map(int, input().strip().split()))\n        a.append(l)\n    idx = []\n    for i in range(n):\n        b = a[i]\n        d = sorted(b)\n        for j in range(m):\n            if b[j] != d[j]:\n                idx.append(j)\n        if len(idx) > 0:\n            break\n    if len(idx) == 0:\n        print(1, 1)\n    elif len(idx) == 2:\n        for i in range(n):\n            (a[i][idx[0]], a[i][idx[1]]) = (a[i][idx[1]], a[i][idx[0]])\n        f = 0\n        for i in range(n):\n            b1 = a[i]\n            d1 = sorted(b1)\n            if b1 != d1:\n                f = 1\n                break\n        if f == 0:\n            print(idx[0] + 1, idx[1] + 1)\n        else:\n            print(-1)\n    else:\n        print(-1)", "def solve(arr):\n    bad = []\n    for i in range(len(arr)):\n        b = list(arr[i])\n        b.sort()\n        for j in range(len(b)):\n            if arr[i][j] != b[j]:\n                bad.append(j)\n        if len(bad) > 0:\n            break\n    if len(bad) == 0:\n        print(1, 1)\n    elif len(bad) > 2:\n        print(-1)\n    else:\n        for i in range(n):\n            (arr[i][bad[0]], arr[i][bad[1]]) = (arr[i][bad[1]], arr[i][bad[0]])\n        check = False\n        for i in range(n):\n            if arr[i] != sorted(arr[i]):\n                check = True\n                break\n        if check:\n            print(-1)\n        else:\n            print(bad[0] + 1, bad[1] + 1)\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    lis = []\n    for i in range(n):\n        lis.append(list(map(int, input().split())))\n    solve(lis)", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    a = list()\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    x = list()\n    i = 0\n    while i < n and (not len(x)):\n        k = list(a[i])\n        k.sort()\n        for j in range(m):\n            if a[i][j] != k[j]:\n                x.append(j)\n        i += 1\n    if not len(x):\n        print('1 1')\n        t -= 1\n        continue\n    elif len(x) != 2:\n        print(-1)\n        t -= 1\n        continue\n    for i in a:\n        (i[x[0]], i[x[1]]) = (i[x[1]], i[x[0]])\n    ok = True\n    for i in a:\n        j = 0\n        while j < m - 1:\n            if i[j] > i[j + 1]:\n                ok = False\n                break\n            j += 1\n        if not ok:\n            break\n    if ok:\n        print(x[0] + 1, x[1] + 1)\n    else:\n        print(-1)\n    t -= 1", "def solve(arr):\n    n = len(arr)\n    m = len(arr[0])\n    sorted_arr = []\n    for row in arr:\n        sorted_arr.append(sorted(row))\n    badIdx = []\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] != sorted_arr[i][j]:\n                badIdx.append(j)\n        if len(badIdx) >= 2:\n            break\n    if len(badIdx) == 0:\n        print(1, 1)\n        return\n    if len(badIdx) != 2:\n        print(-1)\n        return\n    for i in range(n):\n        (arr[i][badIdx[0]], arr[i][badIdx[1]]) = (arr[i][badIdx[1]], arr[i][badIdx[0]])\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] != sorted_arr[i][j]:\n                print(-1)\n                return\n    print(badIdx[0] + 1, badIdx[1] + 1)\n\ndef get_input():\n    matrix_size = input()\n    n = int(matrix_size.split()[0])\n    m = int(matrix_size.split()[1])\n    arr = []\n    for i in range(n):\n        row = input()\n        arr.append(list(map(int, row.split())))\n    return arr\nt = int(input())\nfor i in range(t):\n    arr = get_input()\n    solve(arr)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    rows = [list(map(int, input().split())) for i in range(n)]\n    guess = None\n    for r in range(n):\n        row = rows[r]\n        fixed = sorted(row)\n        indexes = [i for i in range(m) if fixed[i] != row[i]]\n        if len(indexes) > 2:\n            break\n        if len(indexes) == 2:\n            if guess is None:\n                guess = indexes\n            elif guess != indexes:\n                break\n    else:\n        if guess is None:\n            print('1 1')\n            continue\n        else:\n            for r in range(n):\n                row = rows[r]\n                if row[guess[0]] < row[guess[1]]:\n                    break\n            else:\n                print(guess[0] + 1, guess[1] + 1)\n                continue\n    print(-1)", "def ss(g, m, n):\n    l = [[0, 0] for _ in range(m)]\n    for i in range(m):\n        t = sorted(g[i])\n        c = 0\n        for j in range(n):\n            if t[j] != g[i][j]:\n                if c == 2:\n                    return -1\n                elif c == 0:\n                    c += 1\n                    l[i][0] = j\n                else:\n                    c += 1\n                    l[i][1] = j\n    t = [0, 0]\n    for i in l:\n        if i != [0, 0]:\n            t = i\n            break\n    if t == [0, 0]:\n        return t\n    for i in range(m):\n        (g[i][t[0]], g[i][t[1]]) = (g[i][t[1]], g[i][t[0]])\n        for j in range(1, n):\n            if g[i][j] < g[i][j - 1]:\n                return -1\n    return t\nfor _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    g = []\n    for i in range(m):\n        g.append(list(map(int, input().split())))\n    ans = ss(g, m, n)\n    if ans == -1:\n        print(-1)\n    else:\n        print(ans[0] + 1, ans[1] + 1)", "import math, sys\ninput = sys.stdin.readline\ninf = 1e+18\nmod = 10 ** 9 + 7\npi = math.pi\ne = math.e\nmodinv = lambda x, m: pow(x, m - 2, m)\nimport bisect\nimport heapq\nmod9 = 998244353\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    pos = True\n    inv = []\n    a = []\n    for p in range(n):\n        arr = list(map(int, input().split()))\n        sor = sorted(arr)\n        my = []\n        for i in range(m):\n            if arr[i] != sor[i]:\n                my.append(i + 1)\n        if len(my) > 2:\n            pos = False\n        elif len(my) == 0:\n            my = [1, 1]\n        a.append(arr)\n        inv.append(my)\n    if not pos:\n        print(-1)\n        continue\n    v = [1, 1]\n    for i in inv:\n        if i != [1, 1]:\n            if v != [1, 1] and v != i:\n                pos = False\n                break\n            v = i\n    if not pos:\n        print(-1)\n        continue\n    elif v == [1, 1]:\n        print(*v)\n        continue\n    for i in range(n):\n        if a[i][v[0] - 1] < a[i][v[1] - 1]:\n            pos = False\n            break\n    if not pos:\n        print(-1)\n    else:\n        print(*v)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n    sorteda = []\n    for i in a:\n        sorteda.append(sorted(i))\n    unsortindex = set()\n    ls = []\n    for i in range(n):\n        l = 0\n        for j in range(m):\n            if a[i][j] != sorteda[i][j]:\n                unsortindex.add(j)\n                l += 1\n        ls.append(l)\n    unsortindex = list(unsortindex)\n    if len(unsortindex) == 0:\n        print(1, 1)\n        continue\n    elif len(unsortindex) > 2:\n        print(-1)\n        continue\n    else:\n        f = 0\n        for i in range(n):\n            if ls[i] != 2 and a[i][unsortindex[0]] != a[i][unsortindex[1]]:\n                print(-1)\n                f = -1\n                break\n        if f == 0:\n            print(unsortindex[0] + 1, unsortindex[1] + 1)", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = [R() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for (r, q) in zip(a, b):\n        if (c := [i for (i, x, y) in zip(range(m), r, q) if x != y]):\n            (i, j) = c[:2]\n    if i < j:\n        for r in a:\n            (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = [R() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for (r, q) in zip(a, b):\n        if (c := [i for (i, x, y) in zip(range(m), r, q) if x ^ y]):\n            (i, j) = c[:2]\n    if i < j:\n        for r in a:\n            (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = [R() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for (r, q) in zip(a, b):\n        c = [i for (i, x, y) in zip(range(m), r, q) if x != y]\n        if c:\n            (i, j) = c[:2]\n            break\n    if i < j:\n        for r in a:\n            (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, m) = R()\n    a = [[*R()] for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for (r, q) in zip(a, b):\n        c = [i for (i, x, y) in zip(range(m), r, q) if x != y]\n        if c:\n            (i, j) = c[:2]\n            break\n    if i < j:\n        for r in a:\n            (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "def is_sorted(l):\n    return all((l[i] <= l[i + 1] for i in range(len(l) - 1)))\nt = int(input())\nfor c in range(t):\n    (n, m) = input().split()\n    (n, m) = (int(n), int(m))\n    mat = []\n    for i in range(n):\n        mat.append([int(x) for x in input().split()])\n    (first, last) = (0, 0)\n    for k in range(n):\n        for i in range(m - 1):\n            if mat[k][i] > mat[k][i + 1]:\n                first = i\n                while first > 0 and mat[k][first] == mat[k][first - 1]:\n                    first -= 1\n                break\n        for i in range(m - 1, 0, -1):\n            if mat[k][i] < mat[k][i - 1]:\n                last = i\n                while last < m - 1 and mat[k][last] == mat[k][last + 1]:\n                    last += 1\n                break\n        if first != last:\n            break\n    fail = False\n    for i in range(n):\n        (mat[i][first], mat[i][last]) = (mat[i][last], mat[i][first])\n        if not is_sorted(mat[i]):\n            fail = True\n            break\n    print(-1 if fail else '%d %d' % (first + 1, last + 1))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    sorted_matrix = []\n    for row in matrix:\n        sorted_matrix.append(sorted(row))\n    total_incorrect = 0\n    wrongs = []\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != sorted_matrix[i][j]:\n                wrongs.append(j)\n    wrongs = list(set(wrongs))\n    if len(wrongs) > 2:\n        print(-1)\n        continue\n    if wrongs == []:\n        print(1, 1)\n    else:\n        can = True\n        for (i, item) in enumerate(matrix):\n            (item[wrongs[0]], item[wrongs[1]]) = (item[wrongs[1]], item[wrongs[0]])\n        for (i, item) in enumerate(matrix):\n            if item != sorted(item):\n                can = False\n        if can:\n            print(wrongs[0] + 1, wrongs[1] + 1)\n        else:\n            print(-1)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m) = map(int, input().split())\n    a = []\n    b = []\n    swap = [0] * m\n    for i in range(n):\n        a += [list(map(int, input().split()))]\n        b += [sorted(a[i])]\n    idx = -1\n    jdx = -1\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != b[i][j]:\n                if swap[j] != 1:\n                    k += 1\n                    swap[j] = 1\n    if k == 0:\n        print(1, 1)\n    elif k == 2:\n        idx = 0\n        while swap[idx] != 1:\n            idx += 1\n        jdx = m - 1\n        while swap[jdx] != 1:\n            jdx -= 1\n        ans = 0\n        for i in range(n):\n            if a[i][idx] != b[i][jdx]:\n                ans = -1\n        if ans == -1:\n            print(ans)\n        else:\n            print(*sorted([idx + 1, jdx + 1]))\n    else:\n        print(-1)", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = [R() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for (r, q) in zip(a, b):\n        if (c := [i for (i, x, y) in zip(range(m), r, q) if x ^ y]):\n            (i, j) = c[:2]\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "for inh in range(int(input())):\n    (n, m) = map(int, input().split())\n    (a, hehe) = ([], [])\n    for i in range(n):\n        k = list(map(int, input().split()))\n        a.append(k)\n        b = k.copy()\n        b.sort()\n        hehe.append(b)\n    for i in range(n):\n        k = 0\n        (x, y) = (-1, -1)\n        for j in range(m):\n            if a[i][j] != hehe[i][j]:\n                k += 1\n                if x == -1:\n                    x = j\n                else:\n                    y = j\n        if k > 0:\n            break\n    if x == -1:\n        print(1, 1)\n    elif k > 2:\n        print(-1)\n    else:\n        for i in range(n):\n            (a[i][x], a[i][y]) = (a[i][y], a[i][x])\n        ans = True\n        for i in range(n):\n            for j in range(m):\n                if a[i][j] != hehe[i][j]:\n                    ans = False\n                    break\n            if not ans:\n                break\n        if ans:\n            print(x + 1, y + 1)\n        else:\n            print(-1)", "def sortcheck(ar):\n    for i in range(0, len(ar) - 1):\n        if ar[i] > ar[i + 1]:\n            return False\n    return True\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    for _ in range(n):\n        tl = list(map(int, input().split()))\n        l.append(tl)\n    (u, v, issorted) = (-1, -1, 1)\n    possible = 1\n    for i in range(0, n):\n        tl = list(l[i])\n        tl.sort()\n        inv = []\n        for p in range(0, m):\n            if tl[p] != l[i][p]:\n                inv.append(p)\n        if len(inv) == 0:\n            continue\n        issorted = 0\n        if len(inv) > 2:\n            possible = 0\n            break\n        (u, v) = (inv[0], inv[1])\n        for k in range(0, n):\n            (l[k][u], l[k][v]) = (l[k][v], l[k][u])\n        break\n    fin = possible\n    for x in l:\n        fin &= sortcheck(x)\n    if issorted:\n        print(1, 1)\n    elif fin:\n        print(u + 1, v + 1)\n    else:\n        print(-1)", "R = lambda : [*map(int, input().split())]\n(t,) = R()\nfor _ in range(t):\n    (n, m) = R()\n    a = [R() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for (r1, r2) in zip(a, b):\n        d = [i for (i, x, y) in zip(range(m), r1, r2) if x != y]\n        if d:\n            (i, j) = d[:2]\n            break\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "t = int(input())\nresult = []\nwhile t > 0:\n    t -= 1\n    (n, m) = map(int, input().split())\n    a = []\n    b = []\n    for i in range(n):\n        col1 = list(map(int, input().split()))\n        col2 = col1.copy()\n        col2.sort()\n        a.append(col1)\n        b.append(col2)\n    s = set()\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != b[i][j]:\n                s.add(j)\n    if len(s) > 2:\n        print(-1)\n    elif len(s) == 0:\n        print(1, 1)\n    else:\n        x = 0\n        y = 0\n        for e in s:\n            x = e\n            s.remove(e)\n            break\n        for e in s:\n            y = e\n            s.remove(e)\n            break\n        for i in range(n):\n            temp = a[i][y]\n            a[i][y] = a[i][x]\n            a[i][x] = temp\n        flag = True\n        for i in range(n):\n            for j in range(m):\n                if a[i][j] != b[i][j]:\n                    flag = False\n        if flag:\n            print(x + 1, y + 1)\n        else:\n            print(-1)", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = [R() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for t in zip(a, b):\n        (i, j, *_) = [i for (i, x, y) in zip(range(m), *t) if x ^ y] or (i, j)\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        s = list(map(int, input().split()))\n        a.append(s)\n    res = []\n    for i in a:\n        res.append(sorted(i))\n    (x, y) = (-1, -1)\n    ok = True\n    for i in range(n):\n        for j in range(m):\n            if res[i][j] != a[i][j]:\n                if x == -1:\n                    x = j\n                elif y == -1:\n                    y = j\n                if x >= 0 and y >= 0:\n                    break\n        if x >= 0 and y >= 0:\n            break\n    for i in range(n):\n        for j in range(m):\n            if j == y and res[i][j] == a[i][j] and (a[i][x] != a[i][y]):\n                ok = False\n            if a[i][j] != res[i][j] and j not in [x, y]:\n                ok = False\n    if not ok:\n        print(-1)\n    elif [x, y] == [-1, -1]:\n        print(1, 1)\n    else:\n        print(x + 1, 1 + y)", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = [R() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for (r, q) in zip(a, b):\n        (i, j, *_) = [i for (i, x, y) in zip(range(m), r, q) if x ^ y] or (i, j)\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "kvs = lambda : [*map(int, input().split())]\nfor _ in [0] * kvs()[0]:\n    (n, m) = kvs()\n    a = [kvs() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for t in zip(a, b):\n        (i, j, *_) = [i for (i, x, y) in zip(range(m), *t) if x ^ y] or (i, j)\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "for i in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    a = [0] * n\n    b = [0] * n\n    x = 0\n    y = 0\n    count = 0\n    for i in range(n):\n        a[i] = list(map(int, input().split()))\n        b[i] = a[i]\n        b[i] = sorted(b[i])\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != b[i][j]:\n                count += 1\n                if count == 1:\n                    x = j\n                elif count == 2:\n                    y = j\n        if count >= 2:\n            break\n    if count == 0:\n        print(1, 1)\n    else:\n        for i in range(n):\n            temp = a[i][x]\n            a[i][x] = a[i][y]\n            a[i][y] = temp\n        if a == b:\n            print(x + 1, y + 1)\n        else:\n            print(-1)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    arr = []\n    arr_sorted = []\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n        arr_sorted.append(sorted(arr[i]))\n    for i in range(n):\n        ind = 0\n        cnt = 0\n        flag = 0\n        for j in range(m):\n            if arr[i][j] != arr_sorted[i][j]:\n                if cnt == 0:\n                    start = j\n                else:\n                    end = j\n                cnt += 1\n            if cnt == 2:\n                flag = 1\n                break\n        if flag != 0:\n            break\n    if flag == 0:\n        print(1, 1)\n    else:\n        for i in range(n):\n            (arr[i][start], arr[i][end]) = (arr[i][end], arr[i][start])\n        for i in range(n):\n            for j in range(m):\n                if arr[i][j] != arr_sorted[i][j]:\n                    flag = 2\n                    break\n            if flag != 1:\n                break\n        if flag == 1:\n            print(start + 1, end + 1)\n        else:\n            print(-1)", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = [R() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for t in zip(a, b):\n        (i, j, *_) = [i for (i, x, y) in zip(range(m), *t) if x ^ y] or (i, j)\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mat = []\n    arr = []\n    for i in range(n):\n        temp = [int(x) for x in input().split()]\n        mat.append(temp)\n        arr.append(sorted(temp))\n    diff = []\n    same = True\n    for i in range(n):\n        count = 0\n        cols = []\n        for j in range(m):\n            if mat[i][j] != arr[i][j]:\n                count += 1\n                cols.append(j)\n        if count > 2:\n            same = False\n            break\n        elif cols:\n            diff.append(tuple(cols))\n    if same:\n        st = set(diff)\n        if len(st) == 0:\n            print(1, 1)\n        elif len(st) == 1:\n            (a, b) = (diff[0][0], diff[0][1])\n            hehe = False\n            for i in range(n):\n                if mat[i][b] > mat[i][a]:\n                    hehe = True\n                    break\n            if hehe:\n                print(-1)\n            else:\n                print(a + 1, b + 1)\n        else:\n            print(-1)\n    else:\n        print(-1)", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = [R() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for (r, q) in zip(a, b):\n        (i, j) = [i for (i, x, y) in zip(range(m), r, q) if x ^ y][:2] or (i, j)\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = [R() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for t in zip(a, b):\n        (i, j, *_) = [i for (i, x, y) in zip(range(m), *t) if x ^ y] or (i, j)\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = [R() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for t in zip(a, b):\n        (i, j, *_) = [i for (i, x, y) in zip(range(m), *t) if x ^ y] or (i, j)\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = [R() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for t in zip(a, b):\n        (i, j, *_) = [i for (i, x, y) in zip(range(m), *t) if x ^ y] or (i, j)\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = [R() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for t in zip(a, b):\n        (i, j, *_) = [i for (i, x, y) in zip(range(m), *t) if x ^ y] or (i, j)\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = [R() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for t in zip(a, b):\n        (i, j, *_) = [i for (i, x, y) in zip(range(m), *t) if x ^ y] or (i, j)\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = [R() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for t in zip(a, b):\n        (i, j, *_) = [i for (i, x, y) in zip(range(m), *t) if x ^ y] or (i, j)\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    (L, R) = (0, 0)\n    b = 0\n    ll = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        ll.append(l.copy())\n        if b:\n            continue\n        sl = sorted(l)\n        (l[L], l[R]) = (l[R], l[L])\n        for j in range(m):\n            if l[j] != sl[j]:\n                if L != R:\n                    b = 1\n                R = m - l[::-1].index(sl[j]) - 1\n                L = j\n                (l[L], l[R]) = (l[R], l[L])\n    for i in range(n):\n        l = ll[i]\n        if b:\n            continue\n        sl = sorted(l)\n        (l[L], l[R]) = (l[R], l[L])\n        for j in range(m):\n            if l[j] != sl[j]:\n                if L != R:\n                    b = 1\n    if b:\n        print(-1)\n    else:\n        print(L + 1, R + 1)", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = [R() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for t in zip(a, b):\n        (i, j, *_) = [i for (i, x, y) in zip(range(m), *t) if x ^ y] or (i, j)\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "kvs = lambda : [*map(int, input().split())]\nfor _ in [0] * kvs()[0]:\n    (n, m) = kvs()\n    a = [kvs() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for t in zip(a, b):\n        (i, j, *_) = [i for (i, x, y) in zip(range(m), *t) if x ^ y] or (i, j)\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "kvs = lambda : [*map(int, input().split())]\nfor _ in [0] * kvs()[0]:\n    (n, m) = kvs()\n    a = [kvs() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for t in zip(a, b):\n        (i, j, *_) = [i for (i, x, y) in zip(range(m), *t) if x ^ y] or (i, j)\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "kvs = lambda : [*map(int, input().split())]\nfor _ in [0] * kvs()[0]:\n    (n, m) = kvs()\n    a = [kvs() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for t in zip(a, b):\n        (i, j, *_) = [i for (i, x, y) in zip(range(m), *t) if x ^ y] or (i, j)\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "kvs = lambda : [*map(int, input().split())]\nfor _ in [0] * kvs()[0]:\n    (n, m) = kvs()\n    a = [kvs() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for t in zip(a, b):\n        (i, j, *_) = [i for (i, x, y) in zip(range(m), *t) if x ^ y] or (i, j)\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = [R() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for t in zip(a, b):\n        (i, j, *_) = [i for (i, x, y) in zip(range(m), *t) if x ^ y] or (i, j)\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = [R() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for t in zip(a, b):\n        (i, j, *_) = [i for (i, x, y) in zip(range(m), *t) if x ^ y] or (i, j)\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = [R() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for t in zip(a, b):\n        (i, j, *_) = [i for (i, x, y) in zip(range(m), *t) if x ^ y] or (i, j)\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = [R() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for t in zip(a, b):\n        (i, j, *_) = [i for (i, x, y) in zip(range(m), *t) if x ^ y] or (i, j)\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = [R() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for t in zip(a, b):\n        (i, j, *_) = [i for (i, x, y) in zip(range(m), *t) if x ^ y] or (i, j)\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = [R() for _ in [0] * n]\n    (*b,) = map(sorted, a)\n    i = j = 0\n    for t in zip(a, b):\n        (i, j, *_) = [i for (i, x, y) in zip(range(m), *t) if x ^ y] or (i, j)\n    for r in a:\n        (r[i], r[j]) = (r[j], r[i])\n    print(*((i + 1, j + 1), [-1])[a > b])"]