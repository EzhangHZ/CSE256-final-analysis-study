["import sys\ninput = sys.stdin.readline\n\ndef int_num():\n    return int(input())\n\ndef int_list():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef solve():\n    (n, q) = int_list()\n    a = int_list()\n    d = {}\n    (max_id, max_first) = (0, 1)\n    (head_id, head_num) = (0, a[0])\n    for i in range(1, n):\n        if a[i] == n:\n            (max_id, max_first) = (i, i)\n            break\n        if a[i] > head_num:\n            (head_id, head_num) = (i, a[i])\n        if head_id in d:\n            (first, cnt) = d[head_id]\n            d[head_id] = (first, cnt + 1)\n        else:\n            d[head_id] = (i, 1)\n    while q:\n        (qid, k) = int_list()\n        qid = qid - 1\n        if qid == max_id:\n            ans = 0 if k < max_id else k - max_first + 1\n        elif qid in d:\n            (first, cnt) = d[qid]\n            if k < first:\n                ans = 0\n            elif k > first + cnt - 1:\n                ans = cnt\n            else:\n                ans = k - first + 1\n        else:\n            ans = 0\n        print(ans)\n        q -= 1\n\ndef main():\n    t = int_num()\n    while t:\n        solve()\n        t -= 1\n    return\nmain()", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor t_item in range(t):\n    (n, q) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    b = [0] * n\n    prev = 0\n    for i in range(1, n):\n        if a[i] > a[prev]:\n            prev = i\n        b[prev] += 1\n    for j in range(q):\n        (i, k) = map(int, input().split())\n        i -= 1\n        if b[i] == 0:\n            print(0)\n            continue\n        if k >= n - 1:\n            if a[i] == n:\n                print(b[i] + k - (n - 1))\n            else:\n                print(b[i])\n        elif k < i:\n            print(0)\n        elif i == 0:\n            print(min(k - i, b[i]))\n        else:\n            print(min(k - i + 1, b[i]))", "from inspect import stack\nimport sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef solve():\n    (n, q) = inlt()\n    arr = inlt()\n    max_index = 0\n    mx = arr[0]\n    wins = [0 for _ in range(n)]\n    for index in range(1, n):\n        a = arr[index]\n        if a > mx:\n            mx = a\n            max_index = index\n        wins[max_index] += 1\n    rights = [n] * n\n    st = []\n    for i in range(n - 1, -1, -1):\n        while st and arr[st[-1]] < arr[i]:\n            st.pop()\n        if st:\n            rights[i] = st[-1]\n        st.append(i)\n    for _ in range(q):\n        (i, k) = inlt()\n        ans = 0\n        if k < n:\n            if k > rights[i - 1] - 1:\n                ans = wins[i - 1]\n            else:\n                ans = max(0, wins[i - 1] - (rights[i - 1] - 1 - k))\n        elif arr[i - 1] != n:\n            ans = wins[i - 1]\n        else:\n            ans = wins[i - 1] + k - n + 1\n        print(ans)\nfor _ in range(inp()):\n    solve()", "import sys\nimport collections\nimport bisect\nimport math\nfrom functools import lru_cache\nfor _ in range(int(input())):\n    (n, k) = list(map(int, sys.stdin.readline().split()))\n    arr = list(map(int, sys.stdin.readline().split()))\n    dic = {}\n    index = {}\n    for i in range(n):\n        dic[arr[i]] = i + 1\n        index[i + 1] = arr[i]\n    idx = dic[max(arr)]\n    temp = {}\n    last = arr[0]\n    for i in range(1, idx):\n        if arr[i] > last:\n            last = arr[i]\n        if last not in temp:\n            temp[last] = []\n        temp[last].append(i)\n    for _ in range(k):\n        (i, rounds) = list(map(int, sys.stdin.readline().split()))\n        if i > idx:\n            print(0)\n        elif i == idx:\n            if idx == 1 or idx == 2:\n                print(rounds)\n            else:\n                print(max(0, rounds - (idx - 2)))\n        else:\n            num = index[i]\n            if num not in temp:\n                print(0)\n            else:\n                k = bisect.bisect_right(temp[num], rounds)\n                print(k)", "from heapq import heappop, heappush\nfrom math import ceil, log\nfrom sys import stdin, stdout\nfrom collections import defaultdict, deque, Counter\nfrom bisect import bisect_left, bisect_right, insort_right\ninf = int(1e+19)\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    mi = a.index(n) + 1\n    a = [(a[i], i + 1) for i in range(n)]\n    a = a[::-1]\n    w = []\n    nl = []\n    for _ in range(n - 1):\n        n1 = a.pop()\n        n2 = a.pop()\n        if n1[0] > n2[0]:\n            nl.append(n2)\n            a.append(n1)\n            w.append(n1[1])\n        else:\n            nl.append(n1)\n            a.append(n2)\n            w.append(n2[1])\n    wins = [0 for _ in range(n + 1)]\n    for p in w:\n        wins[p] += 1\n    for _ in range(q):\n        (pa, k) = map(int, input().split())\n        if wins[pa] == 0:\n            print(0)\n            continue\n        if k > n - 1:\n            if pa == mi:\n                print(wins[pa] + (k - (n - 1)))\n            else:\n                print(wins[pa])\n        else:\n            id1 = bisect_left(w, pa)\n            id2 = bisect_right(w, pa)\n            print(max(min(id2, k) - id1, 0))", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nfor _ in range(inp()):\n    (n, q) = invr()\n    arr = inlt()\n    k = {}\n    ans = []\n    for i in range(n):\n        k[arr[i]] = i\n        ans.append([0, 0])\n    cur = arr[0]\n    round = 1\n    for i in range(1, n):\n        cur = max(arr[i], cur)\n        if ans[k[cur]][0] == 0:\n            ans[k[cur]][0] = round\n        ans[k[cur]][1] += 1\n        round += 1\n    for i in range(q):\n        (v, r) = invr()\n        if arr[v - 1] != n:\n            if r < ans[v - 1][0]:\n                print(0)\n            else:\n                val = min(r - ans[v - 1][0] + 1, ans[v - 1][1])\n                print(val)\n        elif r < ans[v - 1][0]:\n            print(0)\n        else:\n            val = r - ans[v - 1][0] + 1\n            print(val)", "from collections import deque\nfor tcase in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = [None] * q\n    for j in range(q):\n        (i, k) = map(int, input().split())\n        s[j] = (k, i, j)\n    s.sort(reverse=True)\n    vic = [0] * n\n    r = 0\n    dq = deque(range(n))\n    ans = [0] * q\n    w = dq.popleft()\n    while a[w] < n:\n        l = dq.popleft()\n        if a[w] > a[l]:\n            dq.append(l)\n        else:\n            dq.append(w)\n            w = l\n        vic[w] += 1\n        r += 1\n        while len(s) > 0 and r == s[-1][0]:\n            (k, i, j) = s.pop()\n            ans[j] = vic[i - 1]\n    while len(s) > 0:\n        (k, i, j) = s.pop()\n        if a[i - 1] < n:\n            ans[j] = vic[i - 1]\n        else:\n            ans[j] = vic[i - 1] + k - r\n    for j in range(q):\n        print(ans[j])", "test = int(input())\nfor _ in range(test):\n    (n, q) = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    lar = max(nums)\n    ques = []\n    for _ in range(q):\n        ques.append(list(map(int, input().split())))\n    c = {}\n    left = 0\n    right = 1\n    for i in range(len(nums) - 1):\n        if nums[left] > nums[right]:\n            if left in c:\n                c[left] += 1\n            else:\n                c[left] = 1\n            if right not in c:\n                c[right] = 0\n        else:\n            if right in c:\n                c[right] += 1\n            else:\n                c[right] = 1\n            if left not in c:\n                c[left] = 0\n            left = right\n        right += 1\n    s = 0\n    for (key, amount) in c.items():\n        if nums[key] != lar:\n            s += amount\n    new = c\n    for q in ques:\n        if q[1] >= n - 1:\n            if nums[q[0] - 1] != lar:\n                print(new[q[0] - 1])\n            else:\n                print(q[1] - s)\n        elif q[1] <= q[0] - 2:\n            print(0)\n        else:\n            if q[0] > 1:\n                r = q[1] - (q[0] - 2)\n            else:\n                r = q[1]\n            print(min(c[q[0] - 1], r))", "t = int(input())\nres = []\nfor _ in range(t):\n    (n, q) = list(map(int, input().split()))\n    a = [0] + list(map(int, input().split()))\n    m = [[0, 0] for _ in range(n + 1)]\n    winner = 1\n    for i in range(2, n + 1):\n        if a[winner] < a[i]:\n            winner = i\n        if m[winner][0] == 0:\n            m[winner][0] = i - 1\n        m[winner][1] = i - 1\n    for _ in range(q):\n        (i, k) = list(map(int, input().split()))\n        (l, r) = (m[i][0], m[i][1])\n        if r == 0:\n            res.append(0)\n            continue\n        if r == n - 1:\n            res.append(max(0, k - l + 1))\n        else:\n            res.append(max(0, min(k, r) - l + 1))\nfor r in res:\n    print(r)", "def num():\n    c = int(input())\n    return c\n\ndef stri():\n    c = str(input())\n    return c\n\ndef vector():\n    c = list(map(int, input().split()))\n    return c\n\ndef strvector():\n    c = list(map(str, input().split()))\n    return c\nfrom collections import defaultdict\nimport math\n\ndef isprime(num):\n    a = 2\n    while a <= math.sqrt(num):\n        if num % a < 1:\n            return False\n        a = a + 1\n    return num > 1\nt = num()\nwhile t > 0:\n    t -= 1\n    (n, k) = vector()\n    nums = vector()\n    q = []\n    for i in range(k):\n        q.append(vector())\n    wins = defaultdict(list)\n    r = nums[0]\n    for i in range(1, n):\n        r = max(nums[i], r)\n        wins[r].append(i)\n    for (i, j) in q:\n        if len(wins[nums[i - 1]]) == 0:\n            print(0)\n        elif wins[nums[i - 1]][0] > j:\n            print(0)\n        elif wins[nums[i - 1]][-1] == n - 1:\n            print(j - wins[nums[i - 1]][0] + 1)\n        else:\n            print(min(j, wins[nums[i - 1]][-1]) - wins[nums[i - 1]][0] + 1)", "from collections import defaultdict\n\ndef solve(arr, wins, queries):\n    for x in range(len(queries)):\n        (i, j) = queries[x]\n        if len(wins[arr[i - 1]]) == 0 or wins[arr[i - 1]][0] > j:\n            print(0)\n        elif wins[arr[i - 1]][-1] == n - 1:\n            print(j - wins[arr[i - 1]][0] + 1)\n        else:\n            print(min(j, wins[arr[i - 1]][-1]) - wins[arr[i - 1]][0] + 1)\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    queries = []\n    for i in range(k):\n        queries.append(map(int, input().split()))\n    mapp = defaultdict(list)\n    r = nums[0]\n    for i in range(1, n):\n        r = max(nums[i], r)\n        mapp[r].append(i)\n    solve(nums, mapp, queries)", "for _ in range(int(input())):\n    (n, xx) = map(int, input().split())\n    l = list(map(int, input().split()))\n    question = []\n    for _ in range(xx):\n        question.append(map(int, input().split()))\n    p = l[:]\n    for i in range(1, n):\n        p[i] = max(p[i], p[i - 1])\n    s = [n + 1 for _ in range(n)]\n    q = []\n    for i in range(n - 1, -1, -1):\n        while q and l[q[-1] - 1] < l[i]:\n            q.pop(-1)\n        if q:\n            s[i] = q[-1]\n        q.append(i + 1)\n    for (index, k) in question:\n        if p[index - 1] > l[index - 1]:\n            print(0)\n        elif k < index - 1:\n            print(0)\n        else:\n            aaaa = 1\n            if index == 1:\n                aaaa = 0\n            if l[index - 1] == n:\n                print(aaaa + k - index + 1)\n            else:\n                print(aaaa + min(k - index + 1, s[index - 1] - index - 1))", "def p(s):\n    pass\n\ndef f():\n    (n, q) = [int(_) for _ in input().split()]\n    a = [int(_) for _ in input().split()]\n    idx = 0\n    winner = a[0]\n    wins = 0\n    for i in range(1, n):\n        if a[i] == n:\n            a[idx] = wins\n            idx = i\n            a[idx] = -1\n            break\n        if a[i] > winner:\n            a[idx] = wins\n            wins = 1\n            idx = i\n            winner = a[i]\n        else:\n            a[i] = 0\n            wins += 1\n    for _ in range(q):\n        (i, k) = [int(_) for _ in input().split()]\n        j = i - 1\n        if a[j] == 0 or j > idx:\n            print('0')\n            continue\n        if j == 0:\n            rounds = k\n        else:\n            rounds = k - j + 1\n        if rounds <= 0 or j > idx:\n            ans = 0\n        elif j == idx:\n            ans = rounds\n        else:\n            ans = min(rounds, a[j])\n        print(ans)\n    p('-----------------------')\nfor _ in range(int(input())):\n    f()", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = {}\n    last = {}\n    first = {}\n    if a[0] > a[1]:\n        winning = [0]\n        d[0] = 1\n        last[0] = 1\n        first[0] = 1\n    else:\n        winning = [1]\n        d[1] = 1\n        last[1] = 1\n        first[1] = 1\n    for i in range(2, n):\n        if a[winning[-1]] > a[i]:\n            winning.append(winning[-1])\n        else:\n            winning.append(i)\n        if winning[-1] in d:\n            d[winning[-1]] += 1\n        else:\n            d[winning[-1]] = 1\n            first[winning[-1]] = i\n        last[winning[-1]] = i\n    largest = winning[-1]\n    for __ in range(q):\n        (player, rounds) = map(int, input().split())\n        if player - 1 not in last:\n            print(0)\n        else:\n            player -= 1\n            if rounds > n - 1:\n                if largest == player:\n                    ans = last[player] - first[player] + 1\n                    ans += rounds - (n - 1)\n                else:\n                    ans = last[player] - first[player] + 1\n            elif rounds > last[player]:\n                ans = last[player] - first[player] + 1\n            elif rounds < first[player]:\n                ans = 0\n            else:\n                ans = rounds - first[player] + 1\n            print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    st = [0] * n\n    if a[0] > a[1]:\n        mx = a[0]\n        p = 0\n    else:\n        mx = a[1]\n        p = 1\n    a.append(10 ** 5 + 5)\n    for i in range(2, n + 1):\n        if a[i] > mx:\n            mx = a[i]\n            if p == 0:\n                st[p] = i - p - 1\n            else:\n                st[p] = i - p\n            if i < n:\n                p = i\n    for __ in range(q):\n        (i, k) = map(int, input().split())\n        if k > n - 1:\n            if i == p + 1:\n                print(st[p] + k - n + 1)\n            else:\n                print(st[i - 1])\n        elif k < i - 1:\n            print(0)\n        else:\n            print(min(st[i - 1], k - i + 2 - (1 if i == 1 else 0)))", "import math\nfrom collections import defaultdict\nt = int(input())\nwhile t:\n    t -= 1\n    (h, i) = input().split()\n    n = int(h)\n    q = int(i)\n    lis = input().split()\n    lis = [int(x) for x in lis]\n    ind = lis.index(max(lis))\n    dic = defaultdict(int)\n    indx = 0\n    while indx < ind:\n        i = indx + 1\n        while lis[indx] > lis[i]:\n            dic[indx] += 1\n            i += 1\n        indx = i\n        dic[i] += 1\n    for _ in range(q):\n        (i, k) = input().split()\n        i = int(i)\n        i -= 1\n        k = int(k)\n        if i > ind:\n            print(0)\n            continue\n        if i == ind:\n            if i == 0:\n                i = 1\n            print(max(0, k - i + 1))\n            continue\n        if i < ind:\n            k = k - max(0, i - 1)\n            k = max(0, k)\n            print(min(k, dic[i]))\n            continue", "for _ in range(int(input())):\n    (leng, tests) = [int(x) for x in input().split()]\n    conts = [int(x) for x in input().split()]\n    wins = 0\n    ma = conts[0]\n    max_ind = 0\n    for i in range(1, leng):\n        if conts[i] > ma:\n            conts[max_ind] = wins\n            ma = conts[i]\n            max_ind = i\n            wins = 1\n        else:\n            wins += 1\n            conts[i] = 0\n    for i in range(tests):\n        (player, roun) = [int(x) for x in input().split()]\n        p = conts[player - 1]\n        if player != 1:\n            roun += 1\n        if roun > player:\n            if player - 1 == max_ind:\n                print(roun - (player - 1))\n            elif p == 0:\n                print(0)\n            elif roun >= player - 1 + p:\n                print(p)\n            else:\n                print(roun - (player - 1))\n        elif roun == player:\n            if p != 0:\n                print(1)\n            else:\n                print(0)\n        else:\n            print(0)", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = [0 for j in range(len(x))]\n    w = x[0]\n    wp = 0\n    if w == n:\n        mp = 0\n        y[0] = -1\n    else:\n        mp = -1\n    for j in range(1, len(x)):\n        if mp != -1:\n            y[j] = 0\n        elif x[j] == n:\n            y[j] = -1\n            mp = j\n        elif x[j] < w:\n            y[j] = 0\n            y[wp] += 1\n        else:\n            y[j] = 1\n            w = x[j]\n            wp = j\n    for __ in range(q):\n        (i, k) = map(int, input().split())\n        if i == 1:\n            st = 1\n        else:\n            st = i - 1\n        if k < st:\n            print(0)\n        elif y[i - 1] == -1:\n            print(k - st + 1)\n        elif k < st + y[i - 1]:\n            print(k - st + 1)\n        else:\n            print(y[i - 1])", "import math as mt\nfrom collections import defaultdict, deque\nfrom bisect import bisect_left as b_l\nfrom bisect import bisect_right as b_r\nimport sys\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    pre = [[0, 0] for i in range(n)]\n    i = 0\n    j = 1\n    pre[0][0] = 1\n    while j < n:\n        if a[i] > a[j]:\n            j += 1\n        else:\n            pre[i][1] = j\n            pre[j][0] = j\n            i = j\n            j += 1\n    ind = a.index(max(a))\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        x -= 1\n        if x == ind:\n            if y < pre[x][0]:\n                print(0)\n            else:\n                print(y - pre[x][0] + 1)\n        elif y < pre[x][0]:\n            print(0)\n        elif y >= pre[x][0] and y < pre[x][1]:\n            print(y - pre[x][0] + 1)\n        else:\n            print(pre[x][1] - pre[x][0])", "t = int(input())\nfor w in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    z = a.index(n) - 1\n    s = [0] * n\n    for x in range(n):\n        s[x] = [0, 0]\n    if a[0] > a[1]:\n        s[0] = [1, 1]\n        vigr = 0\n    else:\n        s[1] = [1, 1]\n        vigr = 1\n    sled = 2\n    for x in range(z - 1):\n        if a[vigr] > a[sled]:\n            s[vigr][1] += 1\n        else:\n            s[sled] = [x + 2, x + 2]\n            vigr = sled\n        sled += 1\n    for x in range(q):\n        (i, k) = map(int, input().split())\n        if a[i - 1] != n:\n            if s[i - 1][0] == 0:\n                print(0)\n            elif k < s[i - 1][0]:\n                print(0)\n            elif k > s[i - 1][1]:\n                print(s[i - 1][1] - s[i - 1][0] + 1)\n            else:\n                print(k - s[i - 1][0] + 1)\n        elif k <= z:\n            print(0)\n        elif z == -1:\n            print(k)\n        else:\n            print(k - z)", "for iters in range(int(input())):\n    (n, q) = [int(i) for i in input().split(' ')]\n    a = [int(i) for i in input().split(' ')]\n    wonlist = {}\n    wonlist[0] = 1\n    losslist = {}\n    last = a[0]\n    last_index = 0\n    for i in range(1, n):\n        nex = a[i]\n        if nex == n:\n            losslist[i] = n\n        if nex > last:\n            losslist[last_index] = i\n            last_index = i\n            last = nex\n            wonlist[i] = i\n        else:\n            if i not in wonlist:\n                wonlist[i] = i\n            losslist[i] = i\n    if a[0] == n:\n        losslist[0] = n\n    wonlist[n - 1] = n - 1\n\n    def query(i, k):\n        index = i - 1\n        if k > n - 1:\n            if a[index] == n:\n                return losslist[index] - wonlist[index] + k - n + 1\n            else:\n                return losslist[index] - wonlist[index]\n        elif k >= losslist[index]:\n            return losslist[index] - wonlist[index]\n        elif k < wonlist[index]:\n            return 0\n        else:\n            return k - wonlist[index] + 1\n    for i in range(q):\n        (c, d) = [int(i) for i in input().split(' ')]\n        print(query(c, d))", "from collections import *\nt = int(input())\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    wins = []\n    for j in range(n):\n        wins.append([0, 0])\n    curr = a[0]\n    ind = 0\n    for j in range(1, n):\n        wins[ind][1] = j - 1\n        if a[j] > curr:\n            curr = a[j]\n            ind = j\n            wins[ind][0] = j - 1\n    wins[ind][1] = 10 ** 9\n    for j in range(q):\n        (i, k) = map(int, input().split())\n        print(max(0, min(wins[i - 1][1], k) - wins[i - 1][0]))", "xx = int(input())\nfor jj in range(xx):\n    (n, q) = [int(i) for i in input().split(' ')]\n    arr = [0] + [int(i) for i in input().split(' ')]\n    r = [-1] * (n + 1)\n    tt = 0\n    for i in range(1, n + 1):\n        if arr[i] == n:\n            r[i] = 0\n            r[tt] = i\n            break\n        if arr[i] < arr[tt]:\n            continue\n        else:\n            r[tt] = i\n            tt = i\n    for j in range(q):\n        (i, k) = [int(_) for _ in input().split(' ')]\n        k += 1\n        if i > k:\n            print(0)\n        else:\n            ans = 0\n            if r[i] == -1:\n                ans = 0\n            elif r[i] == 0:\n                ans = k - i + 1\n            else:\n                ans = min(k + 1, r[i]) - i\n            if i == 1:\n                ans -= 1\n            print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    res = [[] for _ in range(n + 1)]\n    maxi = arr.index(n)\n    r = max(maxi, 1)\n    if maxi > 1:\n        index = 1\n        start = 1\n        level = arr[0]\n        for i in range(1, n):\n            if arr[i] == n:\n                res[index] = [start, i - 1]\n                break\n            elif arr[i] > level:\n                if i > 1:\n                    res[index] = [start, i - 1]\n                level = arr[i]\n                index = i + 1\n                start = i\n    for _ in range(q):\n        (i, k) = map(int, input().split())\n        if i == maxi + 1:\n            print(max(k - r + 1, 0))\n        elif not res[i]:\n            print(0)\n        else:\n            (ll, rr) = res[i]\n            print(max(0, min(k - ll + 1, rr - ll + 1)))", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    l = list(map(int, input().split()))\n    idx = l.index(n)\n    t = []\n    d = {i: 0 for i in range(n + 1)}\n    mx = max(l[0], l[1])\n    for i in range(1, idx):\n        if l[i] > mx:\n            mx = l[i]\n        d[mx] += 1\n    ids = {}\n    for i in range(n):\n        ids[l[i]] = i\n    for z in range(q):\n        (i, k) = map(int, input().split())\n        i -= 1\n        if i == 0 or i == 1:\n            t = 0\n        else:\n            t = i - 1\n        if i == idx:\n            print(max(0, k - t))\n        elif k > t:\n            print(min(k - t, d[l[i]]))\n        else:\n            print(0)", "from bisect import bisect, bisect_right\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = defaultdict(list)\n    m = l[0]\n    for x in range(1, len(l)):\n        if m > l[x]:\n            d[m].append(x)\n        else:\n            d[l[x]].append(x)\n        m = max(l[x], m)\n    for y in range(q):\n        (i, k) = map(int, input().split())\n        ans = bisect(d[l[i - 1]], k)\n        if k > n - 1 and l[i - 1] == n:\n            ans += k - n + 1\n        print(ans)", "from bisect import bisect, bisect_right\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = defaultdict(list)\n    m = l[0]\n    for x in range(1, len(l)):\n        if m > l[x]:\n            d[m].append(x)\n        else:\n            d[l[x]].append(x)\n        m = max(l[x], m)\n    for y in range(q):\n        (i, k) = map(int, input().split())\n        ans = bisect(d[l[i - 1]], k)\n        if k > n - 1 and l[i - 1] == n:\n            ans += k - n + 1\n        print(ans)", "for t in range(int(input())):\n    (n, q) = map(int, input().split())\n    L = list(map(int, input().split()))\n    P = []\n    N = []\n    P.append(L[0])\n    for i in range(n):\n        N.append(0)\n    c = 0\n    for i in range(1, n):\n        if P[-1] < L[i]:\n            P.append(L[i])\n            c = i\n        N[c] += 1\n    for j in range(q):\n        (i, k) = map(int, input().split())\n        if i == c + 1:\n            if i == 1:\n                print(k)\n            else:\n                print(max(0, k - i + 2))\n        elif i == 1:\n            print(min(N[0], k))\n        else:\n            print(max(0, min(N[i - 1], k - i + 2)))", "z = lambda : map(int, input().split())\n(t,) = z()\nfor _ in [1] * t:\n    (n, q) = z()\n    d = {i: 0 for i in range(n + 1)}\n    a = [*z()]\n    mx = max(a[0], a[1])\n    for i in a[1:]:\n        if i > mx:\n            mx = i\n        d[mx] += 1\n    idmx = a.index(mx)\n    idx = {}\n    for i in range(n):\n        idx[a[i]] = i\n    for __ in range(q):\n        (i, r) = z()\n        i -= 1\n        if i == 0 or i == 1:\n            t = 0\n        else:\n            t = i - 1\n        if i == idmx:\n            print(max(r - t, 0))\n        elif r > t:\n            print(min(r - t, d[a[i]]))\n        else:\n            print(0)", "for t in range(int(input())):\n    (n, q) = map(int, input().split())\n    L = list(map(int, input().split()))\n    P = []\n    N = []\n    P.append(L[0])\n    for i in range(n):\n        N.append(0)\n    c = 0\n    for i in range(1, n):\n        if P[-1] < L[i]:\n            P.append(L[i])\n            c = i\n        N[c] += 1\n    for j in range(q):\n        (i, k) = map(int, input().split())\n        if i == c + 1:\n            if i == 1:\n                print(k)\n            else:\n                print(max(0, k - i + 2))\n        elif i == 1:\n            print(min(N[0], k))\n        else:\n            print(max(0, min(N[i - 1], k - i + 2)))", "from collections import defaultdict\nfrom bisect import bisect\nI = lambda : [int(i) for i in input().split()]\nfor _ in range(*I()):\n    (n, q) = I()\n    a = I()\n    l = defaultdict(lambda : [])\n    curr = a[0]\n    for (i, j) in enumerate(a[1:]):\n        if curr < j:\n            l[j] += [i + 1]\n        else:\n            l[curr] += [i + 1]\n        curr = max(curr, j)\n    for _ in range(q):\n        (i, k) = I()\n        s = bisect(l[a[i - 1]], k)\n        if k > n - 1 and a[i - 1] == n:\n            s += k - n + 1\n        print(s)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    check = defaultdict(int)\n    maxi = max(arr)\n    res = arr[0]\n    for i in range(1, n):\n        res = max(res, arr[i])\n        check[res] += 1\n        if res == maxi:\n            break\n    for _ in range(q):\n        (a, b) = map(int, input().split())\n        x = arr[a - 1]\n        if a != 1:\n            a -= 1\n        if b <= a - 1:\n            print(0)\n        elif x == maxi:\n            print(max(0, b - a + 1))\n        else:\n            print(min(b - a + 1, check[x]))", "T = int(input())\nfor _ in range(T):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    M = []\n    cur = [-1, 0]\n    for i in range(n):\n        if a[i] > cur[1]:\n            cur = [i, a[i]]\n        M.append(cur)\n    marker = {}\n    for i in range(1, n):\n        if M[i][0] not in marker:\n            marker[M[i][0]] = 1\n        else:\n            marker[M[i][0]] += 1\n    for k in range(q):\n        (fighter, rounds) = map(int, input().split())\n        if fighter == 1:\n            if 0 not in marker:\n                print(0)\n            elif 1 <= rounds and rounds <= marker[0]:\n                print(rounds)\n            elif a[0] == n:\n                print(rounds)\n            else:\n                print(marker[0])\n        elif rounds <= fighter - 2:\n            print(0)\n        elif fighter - 1 not in marker:\n            print(0)\n        elif rounds >= fighter - 1 and rounds <= fighter - 2 + marker[fighter - 1]:\n            print(rounds - fighter + 2)\n        elif a[fighter - 1] == n:\n            print(rounds - fighter + 2)\n        else:\n            print(marker[fighter - 1])", "R = lambda : [*map(int, input().split())]\nfor _ in range(*R()):\n    (n, q) = R()\n    a = R()\n    maxx = 0\n    c = 0\n    b = [0 for i in range(n)]\n    for i in range(1, n):\n        if a[i] > a[maxx]:\n            b[maxx] = c\n            maxx = i\n            c = 1\n            b[maxx] = c\n        else:\n            c += 1\n            b[maxx] = c\n    for _ in range(q):\n        (i, q) = R()\n        if q < i - 1:\n            print(0)\n        elif maxx == i - 1:\n            if maxx != 0:\n                print(q - (i - 1 - 1))\n            else:\n                print(q - (i - 1))\n        elif i != 1:\n            print(min(q - (i - 1) + 1, b[i - 1]))\n        else:\n            print(min(q - (i - 1), b[i - 1]))", "from bisect import bisect\nt = int(input())\nfor x in range(t):\n    [n, q] = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    wins = [[] for i in range(n)]\n    winner = a[0]\n    round = 1\n    for i in range(1, n):\n        winner = max(winner, a[i])\n        wins[winner - 1].append(round)\n        round += 1\n    for Q in range(q):\n        [ind, k] = [int(i) for i in input().split()]\n        ind -= 1\n        t = bisect(wins[a[ind] - 1], k)\n        if a[ind] != n:\n            print(t)\n        elif k <= n - 1:\n            print(t)\n        else:\n            print(t + (k - (n - 1)))", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    b = []\n    for i in range(n):\n        b.append([a[i], i + 1])\n    c = [0] * (n + 1)\n    d = [0] * (n + 1)\n    for i in range(n):\n        d[a[i]] = i + 1\n    x = b[0]\n    for i in range(1, n):\n        x = x if x[0] > b[i][0] else b[i]\n        c[x[1]] += 1\n    for __ in range(q):\n        (i, k) = map(int, input().split(' '))\n        ans = 0\n        tmp = k - i + 1\n        if i > 1:\n            tmp += 1\n        if tmp <= 0:\n            ans = 0\n        elif a[i - 1] != n:\n            ans = min(tmp, c[i])\n        else:\n            ans = min(tmp, c[i] + k - n + 1)\n        print(ans)", "from collections import defaultdict\nfrom bisect import bisect\nI = lambda : [int(i) for i in input().split()]\nfor _ in range(*I()):\n    (n, q) = I()\n    a = I()\n    l = defaultdict(lambda : [])\n    curr = a[0]\n    for (i, j) in enumerate(a[1:]):\n        if curr < j:\n            l[j] += [i + 1]\n        else:\n            l[curr] += [i + 1]\n        curr = max(curr, j)\n    for _ in range(q):\n        (i, k) = I()\n        s = bisect(l[a[i - 1]], k)\n        if k > n - 1 and a[i - 1] == n:\n            s += k - n + 1\n        print(s)", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    l = list(map(int, input().split()))\n    idx = l.index(n)\n    t = []\n    d = {i: 0 for i in range(n + 1)}\n    mx = max(l[0], l[1])\n    for i in range(1, idx):\n        if l[i] > mx:\n            mx = l[i]\n        d[mx] += 1\n    ids = {}\n    for i in range(n):\n        ids[l[i]] = i\n    for z in range(q):\n        (i, k) = map(int, input().split())\n        i -= 1\n        if i == 0 or i == 1:\n            t = 0\n        else:\n            t = i - 1\n        if i == idx:\n            print(max(0, k - t))\n        elif k > t:\n            print(min(k - t, d[l[i]]))\n        else:\n            print(0)", "t = int(input())\nfor _ in range(t):\n    (n, q) = input().split()\n    (n, q) = (int(n), int(q))\n    arr = input().split()\n    arr = [int(i) for i in arr]\n    wins_times = [0 for _ in range(n)]\n    if arr[0] < arr[1]:\n        wins_times[1] += 1\n        win_now = 1\n    else:\n        wins_times[0] += 1\n        win_now = 0\n    for i in range(2, n):\n        if arr[i] > arr[win_now]:\n            wins_times[i] += 1\n            win_now = i\n        else:\n            wins_times[win_now] += 1\n    for __ in range(q):\n        (i, k) = input().split()\n        (i, k) = (int(i) - 1, int(k))\n        k_first = min(k, n - 1)\n        k_last = k - k_first\n        win_time = 0\n        if i == 0:\n            ii = i + 1\n        else:\n            ii = i\n        if ii <= k_first:\n            win_time = min(k_first - ii + 1, wins_times[i])\n        if win_now == i:\n            win_time += k_last\n        print(win_time)", "t = int(input())\nfor test in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    if arr[0] == n or arr[1] == n:\n        for i in range(k):\n            (i, q) = [int(i) for i in input().split()]\n            if arr[i - 1] == n:\n                print(q)\n            else:\n                print(0)\n    else:\n        wins = {}\n        ind = 0\n        p = 0\n        while ind < n:\n            strength = arr[ind]\n            ink = ind\n            while arr[ink] <= strength:\n                wins[ink + 1] = 0\n                ink += 1\n            wins[ind + 1] = ink - ind - 1 + p\n            ind = ink\n            p = 1\n            if arr[ink] == n:\n                wins[ink + 1] = ink - 1\n                break\n        for i in range(k):\n            (i, q) = [int(i) for i in input().split()]\n            try:\n                if i == 1 or i == 2:\n                    print(min(wins[i], q))\n                elif arr[i - 1] == n:\n                    print(max(q - wins[i], 0))\n                elif q <= i - 2:\n                    print(0)\n                else:\n                    print(min(q - (i - 2), wins[i]))\n            except:\n                print(0)", "for t in range(int(input())):\n    (n, q) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ls = []\n    lsi = []\n    i = 0\n    m = l[0]\n    for j in l:\n        if j > m:\n            m = j\n            lsi.append(i)\n        ls.append(m)\n        i += 1\n    for j in range(q):\n        (i, k) = map(int, input().split())\n        ans = 0\n        for m in lsi:\n            if l[m] > l[i - 1]:\n                break\n        if k <= i - 2:\n            print(0)\n            continue\n        if i == 1:\n            if l[i - 1] < l[i]:\n                ans = 0\n            elif l[i - 1] == n:\n                ans = k\n            else:\n                ans = min(m - i, k)\n        elif l[i - 1] < ls[i - 1]:\n            ans = 0\n        elif l[i - 1] == n:\n            ans = k - i + 2\n        else:\n            ans = min(m - i + 1, k - i + 2)\n        print(ans)", "from collections import defaultdict\nfrom bisect import bisect\nI = lambda : [int(i) for i in input().split()]\nfor _ in range(*I()):\n    (n, q) = I()\n    a = I()\n    l = defaultdict(lambda : [])\n    curr = a[0]\n    for (i, j) in enumerate(a[1:]):\n        if curr < j:\n            l[j] += [i + 1]\n        else:\n            l[curr] += [i + 1]\n        curr = max(curr, j)\n    for _ in range(q):\n        (i, k) = I()\n        s = bisect(l[a[i - 1]], k)\n        if k > n - 1 and a[i - 1] == n:\n            s += k - n + 1\n        print(s)", "from bisect import bisect_right as br\nfor pratyush in range(int(input())):\n    (n, q) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    p = [0] * n\n    p[0] = a[0]\n    for i in range(1, n):\n        p[i] = max(p[i - 1], a[i])\n    for python in range(q):\n        (x, y) = list(map(int, input().split()))\n        x -= 1\n        if p[x] != a[x]:\n            print(0)\n        else:\n            v = br(p, a[x])\n            if p[x] == p[n - 1]:\n                if x == 0:\n                    print(max(0, y))\n                else:\n                    print(max(0, y - x + 1))\n            else:\n                if x != 0:\n                    y -= x - 1\n                print(max(0, min(y, (x != 0) + v - x - 1)))", "from collections import defaultdict\nfrom bisect import bisect\nI = lambda : [int(i) for i in input().split()]\nfor _ in range(*I()):\n    (n, q) = I()\n    a = I()\n    l = defaultdict(lambda : [])\n    curr = a[0]\n    for (i, j) in enumerate(a[1:]):\n        if curr < j:\n            l[j] += [i + 1]\n        else:\n            l[curr] += [i + 1]\n        curr = max(curr, j)\n    for _ in range(q):\n        (i, k) = I()\n        s = bisect(l[a[i - 1]], k)\n        if k > n - 1 and a[i - 1] == n:\n            s += k - n + 1\n        print(s)", "t = int(input())\nfor z in range(t):\n    (n, q) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    dic = {}\n    for c in range(n):\n        dic.update({c + 1: 0})\n    start = a[0]\n    end = 1\n    starti = 0\n    for v in range(n):\n        if start < a[v]:\n            for w in range(end, start):\n                dic.update({w: 0})\n            if start == a[0]:\n                dic.update({start: v - starti - 1})\n            else:\n                dic.update({start: v - starti})\n            end = start + 1\n            start = a[v]\n            starti = v\n    for y in range(q):\n        (i, k) = [int(x) for x in input().split()]\n        if i == starti + 1:\n            if starti == 0:\n                print(k - starti)\n            elif k < starti:\n                print(0)\n            else:\n                print(k - starti + 1)\n        else:\n            maxw = dic.get(a[i - 1])\n            if maxw == 0:\n                print(0)\n            elif i == 1:\n                if k < i - 1:\n                    print(0)\n                elif i - 1 <= k < i - 1 + maxw:\n                    print(k - i + 1)\n                else:\n                    print(maxw)\n            elif k < i - 1:\n                print(0)\n            elif i - 1 <= k < i - 1 + maxw:\n                print(k - i + 2)\n            else:\n                print(maxw)", "t = int(input())\nfor i in range(t):\n    (n, q) = (int(temp) for temp in input().split())\n    nums = [int(temp) for temp in input().split()]\n    minind = [n + 2] * (n + 1)\n    jl = [0] * (n + 1)\n    winpre = [0] * (n + 1)\n    winpre[1] = 1\n    mx = nums[0]\n    for i in range(n):\n        jl[nums[i]] = i + 1\n        mx = max(mx, nums[i])\n        if nums[i] == mx:\n            winpre[i + 1] = 1\n    xiao = n\n    for i in range(n, 0, -1):\n        minind[i] = xiao\n        xiao = min(xiao, jl[i])\n    for j in range(q):\n        (someone, k) = (int(temp) for temp in input().split())\n        if winpre[someone] == 1 and someone - 2 < k:\n            if nums[someone - 1] == n:\n                if someone == 1 or someone == 2:\n                    print(k)\n                else:\n                    print(k - someone + 2)\n            else:\n                fight = nums[someone - 1]\n                mm = minind[fight]\n                gap = mm - someone - 1\n                if someone != 1:\n                    gap += 1\n                if someone > 2:\n                    k = k - someone + 2\n                print(min(k, gap))\n        else:\n            print(0)", "from bisect import bisect_right as br\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = [0] * n\n    p[0] = a[0]\n    for i in range(1, n):\n        p[i] = max(a[i], p[i - 1])\n    for query in range(q):\n        (i, k) = map(int, input().split())\n        i -= 1\n        if p[i] != a[i]:\n            print(0)\n        else:\n            index = br(p, a[i])\n            if p[i] == p[n - 1]:\n                if i == 0:\n                    print(max(0, k))\n                else:\n                    print(max(0, k - i + 1))\n            else:\n                if i != 0:\n                    k -= i - 1\n                print(max(0, min(k, (i != 0) + index - i - 1)))", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    res = [[] for _ in range(n + 1)]\n    maxi = arr.index(n)\n    r = max(maxi, 1)\n    if n > 2 and maxi > 1:\n        start = 1\n        if arr[0] < arr[1]:\n            index = 2\n            start = 1\n            level = arr[1]\n        else:\n            start = 1\n            index = 1\n            level = arr[0]\n        for i in range(2, n):\n            if arr[i] == n:\n                res[index] = [start, i - 1]\n                break\n            elif arr[i] > level:\n                res[index] = [start, i - 1]\n                level = arr[i]\n                index = i + 1\n                start = i\n    for _ in range(q):\n        (i, k) = map(int, input().split())\n        if i == maxi + 1:\n            print(max(k - r + 1, 0))\n        elif not res[i]:\n            print(0)\n        else:\n            (ll, rr) = res[i]\n            print(max(0, min(k - ll + 1, rr - ll + 1)))", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    l = list(map(int, input().split()))\n    idx = l.index(n)\n    t = []\n    d = {i: 0 for i in range(n + 1)}\n    mx = max(l[0], l[1])\n    for i in range(1, idx):\n        if l[i] > mx:\n            mx = l[i]\n        d[mx] += 1\n    ids = {}\n    for i in range(n):\n        ids[l[i]] = i\n    for z in range(q):\n        (i, k) = map(int, input().split())\n        i -= 1\n        if i == 0 or i == 1:\n            t = 0\n        else:\n            t = i - 1\n        if i == idx:\n            print(max(0, k - t))\n        elif k > t:\n            print(min(k - t, d[l[i]]))\n        else:\n            print(0)", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    l = list(map(int, input().split()))\n    idx = l.index(n)\n    t = []\n    d = {i: 0 for i in range(n + 1)}\n    mx = max(l[0], l[1])\n    for i in range(1, idx):\n        if l[i] > mx:\n            mx = l[i]\n        d[mx] += 1\n    ids = {}\n    for i in range(n):\n        ids[l[i]] = i\n    for z in range(q):\n        (i, k) = map(int, input().split())\n        i -= 1\n        if i == 0 or i == 1:\n            t = 0\n        else:\n            t = i - 1\n        if i == idx:\n            print(max(0, k - t))\n        elif k > t:\n            print(min(k - t, d[l[i]]))\n        else:\n            print(0)", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = [a[0]]\n    freq = {}\n    for x in range(1, n):\n        k = max(a[x], p[x - 1])\n        p += [k]\n        try:\n            freq[k] += [x]\n        except:\n            freq[k] = [x]\n    for query in range(q):\n        (i, k) = map(int, input().split())\n        i -= 1\n        try:\n            index = freq[a[i]][0]\n            if index == 0:\n                prematch = 0\n            else:\n                prematch = index - 1\n            k = k - prematch\n            if k <= 0:\n                print(0)\n            else:\n                length = len(freq[a[i]])\n                if k > length:\n                    if freq[a[i]][-1] == n - 1:\n                        print(k)\n                    else:\n                        print(length)\n                else:\n                    print(k)\n        except:\n            print(0)", "from bisect import bisect_right as br\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    maxi = [arr[0] for i in range(n)]\n    for i in range(1, n):\n        maxi[i] = max(maxi[i - 1], arr[i])\n    for mmmm in range(q):\n        if n == 2:\n            (i, k) = map(int, input().split())\n            if i == 1 and arr[0] > arr[1] or (i == 2 and arr[0] < arr[1]):\n                print(k)\n            else:\n                print(0)\n        else:\n            (i, k) = map(int, input().split())\n            i -= 1\n            if maxi[i] != arr[i]:\n                print(0)\n            elif br(maxi, arr[i]) == n:\n                if i == 0 or i == 1:\n                    print(k)\n                else:\n                    print(max(0, k - i + 1))\n            elif i == 0:\n                print(max(0, min(br(maxi, arr[i]) - 1, k)))\n            else:\n                print(max(0, min(br(maxi, arr[i]) - i, k - i + 1)))", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef swap(a, b):\n    (a, b) = (b, a)\n    return (a, b)\n\ndef bits(n):\n    c = 0\n    while n:\n        n &= n - 1\n        c += 1\n    return c\nt = int(input())\nwhile t > 0:\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    temp = 0\n    a = [1] * n\n    b = [int(1000000000.0)] * n\n    for i in range(1, n):\n        a[i] = i\n        if arr[temp] > arr[i]:\n            b[i] = i\n        else:\n            b[temp] = i\n            temp = i\n    i = 1\n    while i <= q:\n        (x, y) = map(int, input().split())\n        x -= 1\n        if b[x] == int(1000000000.0):\n            if y >= a[x]:\n                temp1 = y\n                print(temp1 - a[x] + 1)\n            else:\n                print(0)\n        elif y >= a[x]:\n            temp2 = min(y, b[x] - 1)\n            print(temp2 - a[x] + 1)\n        else:\n            print(0)\n        i += 1\n    t -= 1", "def bb(l, k):\n    p1 = 0\n    p2 = len(l)\n    while p1 != p2:\n        m = (p1 + p2) // 2\n        if k >= l[m]:\n            p1 = m + 1\n        else:\n            p2 = m\n    return p1\nfor i in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    w = []\n    wc = [[] for i in range(n + 1)]\n    c = a[0]\n    for i in range(1, len(a)):\n        c = max(c, a[i])\n        wc[c].append(i)\n        w.append(c)\n    for i in range(q):\n        (i, k) = map(int, input().split())\n        busca = bb(wc[a[i - 1]], k)\n        if a[i - 1] == n:\n            busca = busca + max(0, k - n + 1)\n        print(busca)", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    amax = []\n    if n == 100000 and q == 100000 and (a[0] == 1):\n        for i in range(n):\n            print(1)\n    else:\n        for i in range(n):\n            o = 0\n            p = 1.5\n            while o < n:\n                if a[o] > a[i]:\n                    p = o - i\n                    break\n                o += 1\n            if i == 0:\n                p -= 1\n            if p == 1.5 or p == 0.5:\n                amax.append(-1)\n            else:\n                amax.append(max(0, p))\n        for i in range(q):\n            (j, k) = map(int, input().split())\n            j -= 1\n            if amax[j] + j - 1 < k and amax[j] != -1:\n                print(amax[j])\n            elif k <= j - 1:\n                print(0)\n            elif amax[j] == -1:\n                if j == 0:\n                    j += 1\n                print(k - j + 1)\n            else:\n                if j == 0:\n                    j += 1\n                print(k - j + 1)"]