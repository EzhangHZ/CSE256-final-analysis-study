["t = int(input())\n\ndef solve():\n    n = int(input())\n    res = [[] for _ in range(n)]\n    for i in range(n):\n        s = input()\n        res[i].append(i + 1)\n        for (j, c) in enumerate(s):\n            if c == '1':\n                res[j].append(i + 1)\n    for x in res:\n        print(len(x), end=' ')\n        print(' '.join(map(str, x)))\nfor i in range(t):\n    solve()", "def construct_sets(M, n):\n    set_L = []\n    for i in range(1, n + 1):\n        set_L.append([str(i)])\n    for i in range(n):\n        for j in range(n):\n            if M[i][j] == 1:\n                set_L[j].append(str(i + 1))\n    return set_L\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        M = []\n        for j in range(n):\n            A = list(input())\n            M.append([int(A[i]) for i in range(n)])\n        set_L = construct_sets(M, n)\n        for i in range(n):\n            print(str(len(set_L[i])) + ' ' + ' '.join(set_L[i]))\nmain()", "def solution():\n    n = int(input())\n    graph = [set([i]) for i in range(n + 1)]\n    i = 1\n    while i <= n:\n        row = [int(j) for j in list(input())]\n        for (j, val) in enumerate(row):\n            if val:\n                graph[j + 1].add(i)\n        i += 1\n    for i in range(1, n + 1):\n        ans = str(len(graph[i]))\n        for ele in graph[i]:\n            ans += ' ' + str(ele)\n        print(ans)\nnum = int(input())\nwhile num:\n    solution()\n    num -= 1", "I = input\nfor _ in [0] * int(I()):\n    r = range(int(I()))\n    i = 0\n    for x in zip(*(I() for i in r)):\n        i += 1\n        x = (i, *(j + 1 for j in r if '0' < x[j]))\n        print(len(x), *x)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    r = [[i + 1] for i in range(n)]\n    for i in range(n):\n        s = str(input())\n        for j in range(n):\n            if s[j] == '1':\n                r[j].append(i + 1)\n    for i in range(n):\n        print(len(r[i]), *r[i])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    r = [[i + 1] for i in range(n)]\n    for i in range(n):\n        s = str(input())\n        for j in range(n):\n            if s[j] == '1':\n                r[j].append(i + 1)\n    for i in range(n):\n        print(len(r[i]), *r[i])", "import sys\nfrom collections import *\nsys.setrecursionlimit(10 ** 5)\nitr = (line for line in sys.stdin.read().strip().split('\\n'))\nINP = lambda : next(itr)\n\ndef ni():\n    return int(INP())\n\ndef nl():\n    return [int(_) for _ in INP().split()]\n\ndef solve():\n    n = ni()\n    mat = []\n    for l in range(n):\n        mat.append(list(map(int, list(INP()))))\n    out = [[] for _ in range(n)]\n    for i in range(n):\n        out[i].append(i + 1)\n        for j in range(n):\n            if mat[i][j] == 1 and i != j:\n                out[j].append(i + 1)\n    for l in out:\n        print(len(l), ' '.join(map(str, l)))\nt = ni()\nfor case in range(t):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    mat = [[i + 1] for i in range(n)]\n    for i in range(n):\n        a = input()\n        for j in range(n):\n            if a[j] == '1':\n                mat[j].append(i + 1)\n    for i in range(n):\n        print(len(mat[i]), *mat[i])", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    n = int(inp())\n    a = [list(inp()) for i in range(n)]\n    ans = [None] * n\n\n    def getans(i):\n        if ans[i]:\n            return ans[i]\n        v = {i + 1}\n        for j in range(n):\n            if a[j][i] == '1':\n                v |= getans(j)\n        ans[i] = v\n        return v\n    for i in range(n):\n        v = getans(i)\n        print(len(v), ' '.join(map(str, v)))\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "import math\nimport collections\nimport bisect\nimport heapq\nfrom collections import deque\nfrom math import sqrt, ceil, floor\n\ndef inp_arr():\n    return list(map(int, input().strip().split(' ')))\n\ndef inp_str_arr():\n    return list(input().strip().split(' '))\n\ndef inp_str():\n    return input()\n\ndef solve():\n    (n,) = inp_arr()\n    a = []\n    for i in range(n):\n        s = inp_str()\n        a.append(s)\n    ans = [[i + 1] for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == '1':\n                ans[j].append(i + 1)\n    for x in ans:\n        print(len(x), end=' ')\n        x.sort()\n        for y in x:\n            print(y, end=' ')\n        print('')\n(tt,) = inp_arr()\nfor t in range(tt):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    a = [[] for __ in range(n + 1)]\n    for i in range(1, n + 1):\n        a[i].append(i)\n        for (j, c) in zip(list(range(1, n + 1)), list(input())):\n            if c == '1':\n                a[j].append(i)\n    for i in range(1, n + 1):\n        print(len(a[i]), *a[i])", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        sets = [{i} for i in range(1, n + 1)]\n        for i in range(n):\n            a = list(map(int, input()))\n            for j in range(n):\n                if a[j] == 1:\n                    sets[j].update(sets[i])\n        for i in range(n):\n            print(len(sets[i]), *sets[i])\nmain()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    s = [''] * n\n    for i in range(n):\n        s[i] = input()\n    ans = [set() for i in range(n)]\n    for i in range(n):\n        ans[i].add(i + 1)\n        for j in range(n):\n            if s[i][j] == '1':\n                ans[j].add(i + 1)\n    for i in range(n):\n        print(len(ans[i]), *ans[i])", "t = int(input())\nwhile t:\n    n = int(input())\n    s = []\n    for i in range(n):\n        s.append(input())\n    a = [set() for i in range(n)]\n    for i in range(n):\n        a[i].add(i + 1)\n        for j in range(n):\n            if s[i][j] == '1':\n                a[j].add(i + 1)\n    for i in a:\n        print(len(i), end=' ')\n        print(*i, end=' ')\n        print()\n    t -= 1", "I = lambda : int(input())\nIs = lambda : map(int, input().split())\nLi = lambda : list(map(int, input().split()))\n\ndef solve():\n    n = I()\n    ans = []\n    for x in range(1, n + 1):\n        ans.append({x})\n    for i in range(n):\n        a = input()\n        for j in range(n):\n            if a[j] == '1':\n                ans[j].add(i + 1)\n    for i in ans:\n        print(len(i), *i)\n    return 1\nt = I()\nwhile t:\n    solve()\n    t -= 1", "I = input\nfor _ in [0] * int(I()):\n    r = range(int(I()))\n    i = 0\n    for x in zip(*(I() for i in r)):\n        i += 1\n        x = (i, *(j + 1 for j in r if '0' < x[j]))\n        print(len(x), *x)", "I = input\nfor _ in [0] * int(I()):\n    r = range(int(I()))\n    i = 0\n    for x in zip(*(I() for i in r)):\n        i += 1\n        x = (i, *(j + 1 for j in r if '0' < x[j]))\n        print(len(x), *x)", "import sys\ninput = sys.stdin.readline\nfrom random import randint\nRANDOM = randint(1, 10 ** 9)\n\nclass myHash(int):\n\n    def __init__(self, x):\n        int.__init__(x)\n\n    def __hash__(self):\n        return super(myHash, self).__hash__() ^ RANDOM\n\ndef readList():\n    return list(map(int, input().split()))\n\ndef readInt():\n    return int(input())\n\ndef readInts():\n    return map(int, input().split())\n\ndef readStr():\n    return input().strip()\n\ndef solve():\n    n = readInt()\n    ans = [[True] * n for _ in range(n)]\n    for i in range(n):\n        s = readStr()\n        for j in range(n):\n            if i != j and s[j] == '0':\n                ans[j][i] = False\n    for each in ans:\n        tmp = []\n        for i in range(n):\n            if each[i]:\n                tmp.append(i + 1)\n        print(*[len(tmp)] + tmp)\n    return\nfor _ in range(int(input())):\n    solve()", "I = input\nfor _ in [0] * int(I()):\n    r = range(int(I()))\n    i = 0\n    for x in zip(*(I() for i in r)):\n        i += 1\n        x = (i, *(j + 1 for j in r if '0' < x[j]))\n        print(len(x), *x)", "for _ in range(int(input())):\n    n = int(input())\n    for i in range(n):\n        M = [[i + 1] for i in range(n)]\n    for j in range(n):\n        s = input()\n        for k in range(n):\n            if s[k] == '1':\n                M[k].append(j + 1)\n    for b in M:\n        print(len(b), *b)", "I = input\nfor _ in [0] * int(I()):\n    r = range(int(I()))\n    i = 0\n    for x in zip(*(I() for i in r)):\n        i += 1\n        x = (i, *(j + 1 for j in r if '0' < x[j]))\n        print(len(x), *x)", "I = input\nfor _ in [0] * int(I()):\n    r = range(int(I()))\n    i = 0\n    for x in zip(*(I() for i in r)):\n        i += 1\n        x = (i, *(j + 1 for j in r if '0' < x[j]))\n        print(len(x), *x)", "K = input\nfor _ in [0] * int(K()):\n    r = range(int(K()))\n    i = 0\n    for x in zip(*(K() for i in r)):\n        i += 1\n        x = (i, *(j + 1 for j in r if '0' < x[j]))\n        print(len(x), *x)", "for t in range(int(input())):\n    n = int(input())\n    num_list = []\n    for i in range(n):\n        s = input()\n        num_list.append(s)\n    ans = [set() for i in range(n)]\n    for i in range(n):\n        ans[i].add(i + 1)\n        for j in range(n):\n            if num_list[i][j] == '1':\n                ans[j].add(i + 1)\n    for i in ans:\n        print(len(i), *i)", "for t in range(int(input())):\n    n = int(input())\n    num_list = []\n    for i in range(n):\n        s = input()\n        num_list.append(s)\n    ans = [set() for i in range(n)]\n    for i in range(n):\n        ans[i].add(i + 1)\n        for j in range(n):\n            if num_list[i][j] == '1':\n                ans[j].add(i + 1)\n    for i in ans:\n        print(len(i), *i)", "import math\nimport re\nimport collections\nimport itertools\n\ndef solve():\n    n = int(input())\n    g = [[] for i in range(n)]\n    for i in range(n):\n        s = input()\n        for j in range(len(s)):\n            if s[j] == '1':\n                g[j].append(i)\n    for j in range(n):\n        print(len(g[j]) + 1, end=' ')\n        for c in g[j]:\n            print(c + 1, end=' ')\n        print(j + 1)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        solve()\nmain()", "test = int(input())\nfrom collections import defaultdict\nwhile test:\n    n = int(input())\n    a = []\n    ans = []\n    ans.append([])\n    for i in range(n):\n        a.append(input())\n        ans.append([])\n    for i in range(1, n + 1):\n        ans[i].append(i)\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if a[i - 1][j - 1] == '1':\n                ans[j].append(i)\n    for i in range(1, n + 1):\n        print(len(ans[i]), end=' ')\n        for j in ans[i]:\n            print(j, end=' ')\n        print()\n    test -= 1", "import sys\nFILE = False\nif FILE:\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef get_int():\n    return int(sys.stdin.readline())\n\ndef get_string():\n    return sys.stdin.readline().strip()\ntest_cases = get_int()\nfor test in range(test_cases):\n    n = get_int()\n    matrix = [''] * (n + 1)\n    sets = [set() for i in range(n + 1)]\n    for i in range(1, n + 1):\n        input = get_string()\n        matrix[i] = ' ' + input\n        for j in range(1, n + 1):\n            if matrix[i][j] == '0' and i != j:\n                continue\n            sets[j].add(i)\n    for i in range(1, n + 1):\n        print(len(sets[i]), *sets[i])", "for _ in range(int(input())):\n    n = int(input())\n    for i in range(n):\n        M = [[i + 1] for i in range(n)]\n    for i in range(n):\n        s = input()\n        for j in range(n):\n            if s[j] == '1':\n                M[j].append(i + 1)\n    for b in M:\n        print(len(b), *b)", "import sys\nT = int(sys.stdin.readline().strip())\nfor t in range(0, T):\n    n = int(sys.stdin.readline().strip())\n    A = [[] for i in range(0, n)]\n    for i in range(0, n):\n        b = sys.stdin.readline().strip()\n        A[i].append(i + 1)\n        for j in range(0, n):\n            if b[j] == '1':\n                A[j].append(i + 1)\n    for i in range(0, n):\n        print(len(A[i]), *A[i])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    sol = [[] for i in range(n)]\n    for i in range(n):\n        line = input()\n        for (j, c) in enumerate(line):\n            if c == '1':\n                sol[j].append(i + 1)\n    for (i, s) in enumerate(sol):\n        print(len(s) + 1, *s, i + 1)", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    ju = [sys.stdin.readline().strip() for _ in range(n)]\n    s = [set() for _ in range(n + 1)]\n    for i in range(1, 1 + n):\n        for j in range(1, n + 1):\n            if ju[i - 1][j - 1] == '0' and i != j:\n                continue\n            s[j].add(i)\n    for i in range(1, 1 + n):\n        print(len(s[i]), end=' ')\n        for j in s[i]:\n            print(j, end=' ')\n        print()", "def f(u):\n    a[u] = {u + 1}\n    for v in r:\n        if '0' < b[v][u]:\n            if a[v] == 0:\n                f(v)\n            a[u] |= a[v]\nI = input\nfor _ in [0] * int(I()):\n    r = range((n := int(I())))\n    a = [0] * n\n    b = [I() for _ in [0] * n]\n    for u in r:\n        if a[u] == 0:\n            f(u)\n    for x in a:\n        print(len(x), *x)", "t = int(input())\nwhile t:\n    n = int(input())\n    s = []\n    for i in range(n):\n        s.append(input())\n    a = [set() for i in range(n)]\n    for i in range(n):\n        a[i].add(i + 1)\n        for j in range(n):\n            if s[i][j] == '1':\n                a[j].add(i + 1)\n    for i in a:\n        print(len(i), end=' ')\n        print(*i, end=' ')\n        print()\n    t -= 1", "for _ in range(int(input())):\n    a = int(input())\n    tr = list()\n    for i in range(a):\n        g = input()\n        tr.append(g)\n    li = list()\n    for i in range(a):\n        li.append({i + 1})\n    for i in range(a):\n        for j in range(len(tr[i])):\n            if tr[i][j] == '1':\n                li[j] = li[j].union(li[i])\n    for i in range(len(li)):\n        print(len(li[i]), end=' ')\n        print(' '.join((str(e) for e in li[i])))", "for _ in range(int(input())):\n    n = int(input())\n    for i in range(n):\n        M = [[i + 1] for i in range(n)]\n    for j in range(n):\n        s = input()\n        for k in range(n):\n            if s[k] == '1':\n                M[k].append(j + 1)\n    for b in M:\n        print(len(b), *b)", "def main(x, n):\n    res = [2 ** i for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if x[i][j] == '1':\n                res[j] = res[i] | res[j]\n    for r in res:\n        r = '{0:b}'.format(r)[::-1]\n        print(r.count('1'), end=' ')\n        for i in range(len(r)):\n            if r[i] == '1':\n                print(i + 1, end=' ')\n        print()\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    m = []\n    for j in range(n):\n        m.append(input())\n    main(m, n)", "t = int(input())\nwhile t:\n    n = int(input())\n    s = []\n    for i in range(n):\n        s.append(input())\n    a = [set() for i in range(n)]\n    for i in range(n):\n        a[i].add(i + 1)\n        for j in range(n):\n            if s[i][j] == '1':\n                a[j].add(i + 1)\n    for i in a:\n        print(len(i), end=' ')\n        print(*i, end=' ')\n        print()\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    children = [set() for _ in range(n)]\n    for i in range(n):\n        line = input()\n        for j in range(n):\n            if line[j] == '1':\n                children[i].add(j)\n    sets = [set() for _ in range(n)]\n    for i in range(n):\n        queue = {i}\n        while queue:\n            cur = queue.pop()\n            sets[cur].add(i + 1)\n            queue.update(children[cur])\n    for s in sets:\n        print(len(s), *s)", "for _ in range(int(input())):\n    n = int(input())\n    children = [set() for _ in range(n)]\n    for i in range(n):\n        line = input()\n        for j in range(n):\n            if line[j] == '1':\n                children[i].add(j)\n    sets = [set() for _ in range(n)]\n    for i in range(n):\n        queue = {i}\n        while queue:\n            cur = queue.pop()\n            sets[cur].add(i + 1)\n            queue.update(children[cur])\n    for s in sets:\n        print(len(s), *s)", "I = input\nfor _ in [0] * int(I()):\n    r = range(int(I()))\n    a = [[i + 1] for i in r]\n    for i in r:\n        j = 0\n        for x in I():\n            a[j] += ([], [i + 1])[x > '0']\n            j += 1\n    for x in a:\n        print(len(x), *x)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    for i in range(n):\n        arr = input()\n        a.append(arr)\n    dic = {}\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == '1':\n                if j not in dic:\n                    dic[j] = []\n                dic[j].append(i + 1)\n    ans = []\n    for i in range(n):\n        ans.append([i + 1])\n    for i in dic:\n        for j in dic[i]:\n            ans[i].append(j)\n    for i in range(n):\n        print(len(ans[i]), end=' ')\n        for j in range(len(ans[i])):\n            print(ans[i][j], end=' ')\n        print()", "for _ in range(int(input())):\n    n = int(input())\n    g = [set() for i in range(n)]\n    ans = [{i + 1} for i in range(n)]\n    d = [0] * n\n    for i in range(n):\n        s = input().strip()\n        for j in range(n):\n            if s[j] == '1':\n                g[i].add(j)\n                d[j] += 1\n    l = [i for i in range(n) if d[i] == 0]\n    while l:\n        t = []\n        for i in l:\n            for j in g[i]:\n                ans[j] |= ans[i]\n                d[j] -= 1\n                if not d[j]:\n                    t.append(j)\n        l = t\n    for i in range(n):\n        print(len(ans[i]), *ans[i])", "def dfs(node):\n    global graph, visited, result, cnt\n    if visited[node]:\n        return\n    visited[node] = 1\n    for next in graph[node]:\n        dfs(next)\n        for l in result[next]:\n            if l not in result[node]:\n                result[node].append(l)\n    cnt += 1\n    result[node].append(cnt)\n\ndef main():\n    global graph, visited, result, cnt\n    T = int(input())\n    while T:\n        T -= 1\n        n = int(input())\n        graph = [[] for _ in range(n)]\n        visited = [0 for _ in range(n)]\n        result = [[] for _ in range(n)]\n        cnt = 0\n        for i in range(n):\n            t = input()\n            for j in range(n):\n                if t[j] == '1':\n                    graph[j].append(i)\n        for node in range(n):\n            dfs(node)\n        for r in result:\n            t = ' '.join(map(str, r))\n            print(len(r), t)\nmain()"]