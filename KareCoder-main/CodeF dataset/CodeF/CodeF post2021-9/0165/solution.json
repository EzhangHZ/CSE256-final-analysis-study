["import sys\ninput = sys.stdin.readline\nT = int(input())\nfor testcase in range(1, T + 1):\n    (n, m) = list(map(int, input().split()))\n    up = -1\n    left = m + 1\n    linenumber = 0\n    for i in range(n):\n        line = input()\n        first = line.find('R')\n        if first != -1:\n            if up == -1:\n                up = linenumber\n                upcol = first\n            if first < left:\n                left = first\n                leftrow = linenumber\n        linenumber += 1\n    if up == -1:\n        print('NO')\n    elif upcol == left or leftrow == up:\n        print('YES')\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\nn = int(input())\nfor _ in range(n):\n    board = []\n    (rows, columns) = [int(i) for i in input().split()]\n    for y in range(rows):\n        board.append([i for i in input().replace('\\n', '')])\n    x_top = 0\n    y_top = 0\n    for y in range(rows):\n        if not 'R' in board[y]:\n            y_top = y + 1\n        else:\n            break\n    for x in range(columns):\n        column = [line[x] for line in board]\n        if not 'R' in column:\n            x_top = x + 1\n        else:\n            break\n    if board[y_top][x_top] == 'R':\n        print('YES')\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\n\ndef solution(content, rows, columns):\n    row_min = rows\n    column_min = columns\n    for i in range(rows):\n        for j in range(columns):\n            if j >= column_min:\n                continue\n            if content[i][j] == 'E':\n                continue\n            row_min = min(row_min, i)\n            column_min = min(column_min, j)\n    if content[row_min][column_min] == 'R':\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nfor _ in range(t):\n    (rows, columns) = map(int, input().split())\n    content = []\n    for _ in range(rows):\n        content.append(input())\n    solution(content, rows, columns)", "line_contains = int(input())\nli = []\nfor contains in range(line_contains):\n    lis = []\n    (rows, columns) = input().split()\n    rows = int(rows)\n    l = 'No'\n    for n_rows in range(rows):\n        x = input()\n        lis.append(x)\n    if len(lis) == 1:\n        li.append('YES')\n    elif True:\n        for i in lis:\n            if 'R' in i:\n                c = i.find('R')\n                break\n        for i in lis:\n            if 'R' in i:\n                if i.find('R') < c:\n                    li.append('NO')\n                    break\n        else:\n            li.append('YES')\nfor i in li:\n    print(i)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for z in range(n):\n        s = input().strip()\n        a.append(s)\n    flag = False\n    b = False\n    x = [0, 0]\n    for i in range(n):\n        if b:\n            break\n        for j in range(m):\n            if a[i][j] == 'R':\n                if j == 0:\n                    flag = True\n                else:\n                    x = [i, j]\n                b = True\n                break\n    if flag:\n        print('YES')\n        continue\n    b = False\n    for j in range(m):\n        if b:\n            break\n        for i in range(n):\n            if a[i][j] == 'R':\n                if [i, j] == x:\n                    flag = True\n                b = True\n                break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "I = input\nfor _ in [0] * int(I()):\n    n = int(I().split()[0]) - 1\n    while (j := I().find('R')) < 0:\n        n -= 1\n    print('YNEOS'[any(['R' in I()[:j] for _ in [0] * n])::2])", "lines = []\nwhile True:\n    try:\n        a = input()\n        lines.append(a)\n    except:\n        break\nnotest = int(lines[0])\ni = 1\nwhile i < len(lines):\n    (norows, nocols) = (int(lines[i].split()[0]), int(lines[i].split()[1]))\n    possible = True\n    found = False\n    for j in range(i + 1, i + 1 + norows):\n        if 'R' in lines[j]:\n            if found:\n                if lines[j].index('R') >= n:\n                    continue\n                else:\n                    possible = False\n            else:\n                (m, n) = (j, lines[j].index('R'))\n                found = True\n    if possible:\n        print('YES')\n    else:\n        print('NO')\n    i += norows + 1", "t = int(input())\nfor k in range(t):\n    s = input().split(' ')\n    (n, m) = (int(s[0]), int(s[1]))\n    for r in range(n):\n        s = input()\n        if 'R' in s:\n            i = s.index('R')\n            break\n    val = 'YES'\n    for rr in range(r + 1, n):\n        s = input()\n        if 'R' in s:\n            if s.index('R') < i:\n                val = 'NO'\n    print(val)", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, m) = map(int, inp().split())\n    a = [None] * n\n    r = n + 1\n    c = m + 1\n    for i in range(n):\n        a[i] = inp()\n        for j in range(m):\n            if a[i][j] == 'R':\n                r = min(r, i)\n                c = min(c, j)\n    if r < n and c < m and (a[r][c] == 'R'):\n        print('YES')\n    else:\n        print('NO')\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "n = int(input())\nl2 = []\nfor i in range(n):\n    (n, m) = [int(x) for x in input().split()]\n    l = []\n    for i in range(n):\n        a = input()\n        l.append(a)\n    l2.append(l)\nfor i in l2:\n    s = 0\n    l = []\n    for j in i:\n        if 'R' in j:\n            l.append(j.index('R'))\n    else:\n        if l[0] == sorted(l)[0]:\n            print('YES')\n        else:\n            print('NO')", "I = input\nfor _ in [0] * int(I()):\n    n = int(I().split()[0]) - 1\n    while (j := I().find('R')) < 0:\n        n -= 1\n    print('YNEOS'['R' in ''.join((I()[:j] for _ in [0] * n))::2])", "I = input\nfor _ in [0] * int(I()):\n    a = (*filter(None, (I().find('R') + 1 for _ in [0] * int(I().split()[0]))),)\n    print('YNEOS'[a[0] > min(a)::2])", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    idx = None\n    found = False\n    for j in range(n):\n        line = input()\n        if 'R' in line and (not found):\n            if idx is None:\n                idx = line.index('R')\n            elif line.index('R') < idx:\n                found = True\n    if found:\n        print('NO')\n    else:\n        print('YES')", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m) = map(int, input().split())\n    mat = [input().strip() for _ in range(n)]\n    leftmost = m - 1\n    top = n - 1\n    for i in range(n):\n        for j in range(m):\n            if mat[i][j] == 'R':\n                leftmost = min(leftmost, j)\n                top = min(top, i)\n    for i in range(n):\n        for j in range(m):\n            if mat[i][j] == 'R':\n                if leftmost - j >= 0 and top - i >= 0:\n                    return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    print(solve())", "for i in range(int(input())):\n    (r, c) = [int(i) for i in input().split(' ')]\n    l1 = [input().find('R') for k in range(r)]\n    l1 = [l for l in l1 if l >= 0]\n    if l1[0] <= min(l1):\n        print('YES')\n    else:\n        print('NO')", "I = input\nfor _ in [0] * int(I()):\n    a = (*filter(None, (~I().find('R') for _ in [0] * int(I().split()[0]))),)\n    print('YNEOS'[a[0] < max(a)::2])", "I = input\nfor _ in [0] * int(I()):\n    a = (*filter(None, (~I().find('R') for _ in [0] * int(I().split()[0]))),)\n    print('YNEOS'[a[0] < max(a)::2])", "I = input\nfor _ in [0] * int(I()):\n    a = (*filter(None, (~I().find('R') for _ in [0] * int(I().split()[0]))),)\n    print('YNEOS'[a[0] < max(a)::2])", "def ri():\n    return [int(i) for i in input().split()]\n\ndef robots(mapa: list) -> bool:\n    if len(mapa) == 1 and 'R' in mapa[0] or 'R' == mapa[0][0]:\n        return True\n    if len(set(mapa[0])) == 1:\n        return robots(mapa[1:])\n    newmap = []\n    for l in mapa:\n        if l[0] == 'R':\n            return False\n        newmap.append(l[1:])\n    else:\n        return robots(newmap)\nfor _ in range(int(input())):\n    mapa1 = []\n    for i in range(ri()[0]):\n        mapa1.append(input())\n    if robots(mapa1):\n        print('YES')\n    else:\n        print('NO')", "f = input\nfor l in [0] * int(f()):\n    a = (*filter(None, (~f().find('R') for p in [0] * int(f().split()[0]))),)\n    print('YNEOS'[a[0] < max(a)::2])", "kvs = input\nfor _ in [0] * int(kvs()):\n    a = (*filter(None, (~kvs().find('R') for _ in [0] * int(kvs().split()[0]))),)\n    print('YNEOS'[a[0] < max(a)::2])", "I = input\nfor _ in [0] * int(I()):\n    a = (*filter(None, (~I().find('R') for _ in [0] * int(I().split()[0]))),)\n    print('YNEOS'[a[0] < max(a)::2])", "I = input\nfor _ in [0] * int(I()):\n    a = (*filter(None, (~I().find('R') for _ in [0] * int(I().split()[0]))),)\n    print('YNEOS'[a[0] < max(a)::2])", "I = input\nfor _ in [0] * int(I()):\n    a = (*filter(None, (~I().find('R') for _ in [0] * int(I().split()[0]))),)\n    print('YNEOS'[a[0] < max(a)::2])", "for _ in range(int(input())):\n    (row, col) = map(int, input().split())\n    r_found = False\n    possible = True\n    firstIndex = 0\n    for i in range(row):\n        current = input()\n        if not r_found and 'R' in current:\n            r_found = True\n            firstIndex = current.index('R')\n        elif r_found and 'R' in current and (current.index('R') < firstIndex):\n            possible = False\n    print('YES' if possible else 'NO')", "n = int(input())\n\ndef is_robot_above(grid, row_index):\n    for r in range(row_index):\n        for c in grid[r]:\n            if c == 'R':\n                return True\n    return False\n\ndef find_left_most(grid):\n    for col in range(len(grid[0])):\n        for row in range(len(grid)):\n            if grid[row][col] == 'R':\n                return (row, col)\nfor test_case in range(n):\n    (rows, cols) = [int(val) for val in input().split()]\n    grid = []\n    for row in range(rows):\n        grid.append(input().strip())\n    (row, col) = find_left_most(grid)\n    if is_robot_above(grid, row):\n        print('NO')\n    else:\n        print('YES')", "I = input\nfor _ in ' ' * int(I()):\n    (r, c) = map(int, I().split())\n    l = [-1, -1]\n    t = [-1, -1]\n    f = False\n    for i in range(r):\n        a = I()\n        if t[0] < 0:\n            if 'R' in a:\n                t = [i, a.find('R')]\n                l = [i, a.find('R')]\n        elif 'R' in a:\n            if a.find('R') < l[1]:\n                f = True\n    print('YNEOS'[f::2])", "a = int(input())\nfor i in range(a):\n    (b, c) = map(int, input().split())\n    e = []\n    count = 0\n    for i in range(b):\n        d = input()\n        e += [d]\n    f = []\n    for i in range(len(e)):\n        if 'R' in e[i]:\n            f += [e[i].index('R')]\n    if f[0] == min(f):\n        print('YES')\n    else:\n        print('NO')", "num = int(input())\nfor i in range(num):\n    (n, m) = map(int, input().split())\n    values = []\n    k = 0\n    while k < n:\n        val = input()\n        if 'R' in val:\n            values.append(val.index('R'))\n        k += 1\n    if values.__len__() == 1:\n        print('YES')\n    elif min(values[1:]) - values[0] >= 0:\n        print('YES')\n    else:\n        print('NO')", "I = input\nfor _ in [0] * int(I()):\n    a = [I() for _ in [0] * int(I().split()[0])]\n    (b, c) = (['01'['R' in s] for s in l] for l in (a, [*zip(*a)]))\n    print('YNEOS'[a[b.index('1')][c.index('1')] < 'R'::2])", "t = int(input())\nwhile t > 0:\n    t -= 1\n    [n, m] = [int(x) for x in input().split(' ')]\n    ln = -1\n    lm = -1\n    inp_grid = []\n    i = 0\n    while i < n:\n        row = input()\n        inp_grid.append(row)\n        if 'R' in row:\n            if ln != -1:\n                ln = min(i, ln)\n            else:\n                ln = i\n            if lm != -1:\n                lm = min(row.index('R'), lm)\n            else:\n                lm = row.index('R')\n        i += 1\n    if ln == -1 or lm == -1:\n        print('NO')\n    elif inp_grid[ln][lm] == 'R':\n        print('YES')\n    else:\n        print('NO')", "def process_case():\n    (n, m) = list(map(int, input().split()))\n    highest_robot_column = -1\n    left_most_robot_column = m\n    for _ in range(n):\n        row_entry = input()\n        if 'R' in row_entry:\n            robot_position = row_entry.index('R')\n            if robot_position < left_most_robot_column:\n                left_most_robot_column = robot_position\n            if highest_robot_column == -1:\n                highest_robot_column = robot_position\n    print('NO') if left_most_robot_column < highest_robot_column else print('YES')\nnum_of_tests = int(input())\nfor _ in range(num_of_tests):\n    process_case()", "I = input\nI = input\nfor _ in [0] * int(I()):\n    n = int(I().split()[0]) - 1\n    while (j := I().find('R')) < 0:\n        n -= 1\n    print('YNEOS'['R' in ''.join((I()[:j] for _ in [0] * n))::2])", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    lefts = [input().find('R') for _ in range(n)]\n    lefts = [l for l in lefts if l >= 0]\n    if lefts[0] <= min(lefts):\n        print('YES')\n    else:\n        print('NO')", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_ls():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef main():\n    for _ in range(int(input())):\n        (n, m) = get_ints()\n        ls = []\n        ok = True\n        for i in range(n):\n            x = input()\n            ls.append(x)\n        (a, b) = (0, 0)\n        found = False\n        for i in range(n):\n            for j in range(m):\n                if ls[i][j] == 'R':\n                    a = i\n                    b = j\n                    found = True\n                    break\n            if found:\n                break\n        for i in range(a + 1, n):\n            for j in range(b):\n                if ls[i][j] == 'R':\n                    ok = False\n                    break\n        print('YES' if ok else 'NO')\nmain()", "for _ in range(int(input())):\n    lst = []\n    (n, m) = map(int, input().split())\n    for i in range(n):\n        line = input()\n        if 'R' in line:\n            lst.append(line.index('R'))\n        else:\n            continue\n    if min(lst) == lst[0]:\n        print('YES')\n    else:\n        print('NO')", "tst = int(input())\nfor i in range(tst):\n    gg = []\n    (n, m) = map(int, input().split())\n    for j in range(n):\n        s = input()\n        if 'R' in s:\n            gg.append(s.index('R'))\n        else:\n            continue\n    if min(gg) == gg[0]:\n        print('YES')\n    else:\n        print('NO')", "I = input\nfor _ in [0] * int(I()):\n    a = (*filter(None, (~I().find('R') for _ in [0] * int(I().split()[0]))),)\n    print('YNEOS'[a[0] < max(a)::2])", "N = int(input())\nfor i in range(N):\n    (sc, rc) = map(int, input().split())\n    ur = rc\n    upfound = 0\n    lr = 0\n    stop = 0\n    for s in range(sc):\n        a = str(input())\n        if s == 0 and a.find('R') == 0:\n            ur = lr\n            stop = 1\n        elif stop == 0:\n            if a.find('R') >= 0:\n                if upfound == 0:\n                    ur = a.find('R')\n                    lr = ur\n                    upfound = 1\n                elif a.find('R') < lr:\n                    lr = a.find('R')\n    if ur == lr:\n        print('YES')\n    else:\n        print('NO')", "def solve():\n    (n, m) = map(int, input().split())\n    mm = []\n    for i in range(n):\n        mm.append(input())\n    p = -1\n    for i in range(n):\n        if p == -1:\n            for j in range(m):\n                if mm[i][j] == 'R':\n                    p = j\n                    break\n        else:\n            for j in range(0, p):\n                if mm[i][j] == 'R':\n                    print('NO')\n                    return\n    print('YES')\nt = int(input())\nwhile t > 0:\n    t -= 1\n    solve()", "T = input\nfor _ in [0] * int(T()):\n    a = (*filter(None, (~T().find('R') for _ in [0] * int(T().split()[0]))),)\n    print('YNEOS'[a[0] < max(a)::2])", "I = input\nfor _ in [0] * int(I()):\n    a = (*filter(None, (I().find('R') + 1 for _ in [0] * int(I().split()[0]))),)\n    print('YNEOS'[a[0] > min(a)::2])", "I = input\nfor _ in [0] * int(I()):\n    a = (*filter(None, (I().find('R') + 1 for _ in [0] * int(I().split()[0]))),)\n    print('YNEOS'[a[0] > min(a)::2])", "I = input\nfor _ in [0] * int(I()):\n    a = (*filter(None, (~I().find('R') for _ in [0] * int(I().split()[0]))),)\n    print('YNEOS'[a[0] < max(a)::2])", "I = input\nfor _ in [0] * int(I()):\n    a = (*filter(None, (~I().find('R') for _ in [0] * int(I().split()[0]))),)\n    print('YNEOS'[a[0] < max(a)::2])", "T = input\nfor _ in [0] * int(T()):\n    a = (*filter(None, (~T().find('R') for _ in [0] * int(T().split()[0]))),)\n    print('YNEOS'[a[0] < max(a)::2])", "I = input\nfor _ in [0] * int(I()):\n    a = (*filter(None, (~I().find('R') for _ in [0] * int(I().split()[0]))),)\n    print('YNEOS'[a[0] < max(a)::2])", "t = int(input())\nfor _ in range(t):\n    (row, col) = map(int, input().split())\n    k = 0\n    o = 0\n    ans = 'YES'\n    for i in range(row):\n        x = input()\n        if 'R' in x:\n            k = x.index('R')\n            o = i + 1\n            break\n    for i in range(o, row):\n        x = input()\n        if 'R' in x:\n            if x.index('R') < k:\n                ans = 'NO'\n    print(ans)", "a = int(input())\nfor x in range(a):\n    (b, c) = map(int, input().split())\n    f = 0\n    for x in range(b):\n        d = input()\n        if 'R' in d and f == 0:\n            l = d.index('R')\n            v = x\n            f = 1\n        elif 'R' in d and f == 1:\n            if d.index('R') - l >= 0 and x - v >= 0:\n                continue\n            else:\n                f = 2\n    if f == 2:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (y, x) = map(int, input().split(' '))\n    found = False\n    least = None\n    possible = True\n    for _ in range(y):\n        r = input()\n        if 'R' not in r:\n            continue\n        if found:\n            if r.index('R') < least:\n                possible = False\n        else:\n            least = r.index('R')\n            found = True\n    print('YES' if possible else 'NO')", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    l = []\n    for j in range(a):\n        s = input()\n        if 'R' in s:\n            l.append(s.index('R'))\n    if min(l) != l[0]:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    a = []\n    for i in range(r):\n        s = input()\n        a.append(s)\n    (x, y) = (-1, -1)\n    ok = False\n    for i in range(r):\n        for j in range(c):\n            if a[i][j] == 'R':\n                (x, y) = (i, j)\n                ok = True\n                break\n        if ok:\n            break\n    find = 'YES'\n    for i in range(x + 1, r):\n        for j in range(y):\n            if a[i][j] == 'R':\n                find = 'NO'\n                break\n        if find == 'NO':\n            break\n    print(find)", "def up(l, n, m):\n    ans = 0\n    while ans < n:\n        for i in range(m):\n            if l[ans][i] == 'R':\n                return ans\n        ans += 1\n    return -1\n\ndef left(l, n, m):\n    ans = 0\n    while ans < m:\n        for i in range(n):\n            if l[i][ans] == 'R':\n                return ans\n        ans += 1\n    return -1\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    d = []\n    for i in range(n):\n        d.append(input())\n    if d[0][0] == 'R':\n        print('YES')\n    else:\n        u = up(d, n, m)\n        l = left(d, n, m)\n        if d[u][l] == 'R':\n            print('YES')\n        else:\n            print('NO')", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m) = map(int, input().split())\n    g = [input().rstrip() for __ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if g[i][j] == 'R':\n                f = 0\n                for a in range(0, i):\n                    for b in range(m):\n                        if g[a][b] == 'R':\n                            f = 1\n                            break\n                    if f:\n                        break\n                for a in range(0, j):\n                    for b in range(n):\n                        if g[b][a] == 'R':\n                            f = 1\n                            break\n                    if f:\n                        break\n                if not f:\n                    return 1\n    return 0\nfor __ in range(int(input())):\n    print('YES' if solve() else 'NO')", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    v = list()\n    p_ans = -1\n    mina = 600\n    for i in range(n):\n        v.append(list(input()))\n        if 'R' in v[-1]:\n            if p_ans < 0:\n                p_ans = v[-1].index('R')\n            mina = min(mina, v[-1].index('R'))\n    if p_ans == mina:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    e = 0\n    for i in range(n):\n        a.append(input())\n    i = 0\n    while i < n and e == 0:\n        for j in range(m):\n            if a[i][j] == 'R':\n                c = i\n                d = j\n                e = 1\n                break\n        i += 1\n    i = c + 1\n    e = 0\n    while i < n and e == 0:\n        for j in range(d):\n            if a[i][j] == 'R':\n                p = i\n                q = j\n                e = 1\n                break\n        i += 1\n    if e == 1:\n        print('NO')\n    else:\n        print('YES')", "qq = int(input())\nfor fe in range(qq):\n    (n, m) = [int(i) for i in input().split()]\n    a = [input() for i in range(n)]\n    d = {}\n    for i in range(n):\n        if 'R' in a[i]:\n            d[i] = a[i].find('R') % m\n    if d[min(d.keys())] != min(d.values()):\n        print('NO')\n    else:\n        print('YES')", "def ToUp(a):\n    s = a[:indx]\n    f = a[indx:]\n    return f + s\n\ndef ToRight(a):\n    s = a[0].index('R')\n    for i in a:\n        try:\n            if i.index('R') < s:\n                return 'NO'\n        except ValueError:\n            continue\n    return 'YES'\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [list(input()) for i in range(n)]\n    indx = 0\n    if n == 1 and m == 1:\n        print('YES')\n        continue\n    for i in range(n):\n        if 'R' in a[i]:\n            indx = i\n            break\n    a = ToUp(a)\n    print(ToRight(a))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    (ab, lt, ab_a, lt_a) = (10, 10, 10, 10)\n    for i in range(n):\n        s = input()\n        for j in range(m):\n            if s[j] == 'R':\n                if j < lt:\n                    lt = j\n                    lt_a = i\n                if i < ab:\n                    ab = i\n                    ab_a = j\n    if ab == lt_a or ab_a == lt:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(input())\n    cord = 0\n    f = True\n    for i in range(m):\n        for j in range(n):\n            if l[j][i] == 'R':\n                cord = j\n                f = False\n                break\n        if not f:\n            break\n    ans = True\n    for k in range(cord):\n        if 'R' in l[k]:\n            ans = False\n            break\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "N = int(input())\nfor _ in range(N):\n    (n, m) = input().split()\n    idx1 = -1\n    idx2 = -1\n    for _ in range(int(n)):\n        in_str = input()\n        for i in range(len(in_str)):\n            if in_str[i] == 'R':\n                if idx1 == -1:\n                    idx1 = i\n                elif idx2 == -1 and i < idx1:\n                    idx2 = i\n                else:\n                    pass\n                break\n    if idx1 <= idx2 or idx2 == -1:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        try:\n            a.append(input().index('R'))\n        except:\n            pass\n    x = len(a)\n    y = a[0]\n    for i in range(1, x):\n        if a[i] < a[0]:\n            print('NO')\n            break\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(input()))\n    flag = True\n    first_robort_position = -1\n    second_robort_position = -1\n    for row in matrix:\n        if 'R' in row and first_robort_position == -1:\n            first_robort_position = row.index('R')\n        elif 'R' in row and first_robort_position != -1:\n            second_robort_position = row.index('R')\n            if first_robort_position > second_robort_position:\n                flag = False\n                break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "def ss(g):\n    n = len(g)\n    m = len(g[0])\n    for i in range(m):\n        for j in range(n):\n            if g[j][i] == 'R':\n                return [j, i]\n\ndef ss1(g):\n    n = len(g)\n    m = len(g[0])\n    for i in range(n):\n        for j in range(m):\n            if g[i][j] == 'R':\n                return [i, j]\n    return [-1, -1]\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    g = []\n    for _ in range(n):\n        s = str(input())\n        g.append(s)\n    if g[0][0] == 'R':\n        print('YES')\n    else:\n        t1 = ss1(g)\n        if t1 == [-1, -1]:\n            print('NO')\n        else:\n            first_column = ss(g)\n            if t1 == first_column:\n                print('YES')\n            else:\n                print('NO')", "import math\n\ndef Solve():\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        b = input()\n        a.append(b)\n    if a[0][0] == 'R':\n        print('YES')\n        return\n    c = []\n    d = []\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 'R':\n                c.append(i)\n                d.append(j)\n    minc = min(c)\n    mind = min(d)\n    for i in range(len(c)):\n        c[i] = c[i] - minc\n        d[i] = d[i] - mind\n    res = False\n    for i in range(len(c)):\n        if c[i] == d[i] and c[i] == 0:\n            res = True\n    if res == True:\n        print('YES')\n    else:\n        print('NO')\nq = int(input())\nwhile q > 0:\n    Solve()\n    q = q - 1", "for i in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = -1\n    z = [0] * n\n    for i in range(n):\n        s = input()\n        z[i] = s.find('R')\n        if z[i] > -1:\n            if a == -1:\n                a = i\n        else:\n            z[i] = q + 6\n    if min(z) < z[a]:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (m, n) = [int(x) for x in input().split()]\n    a = [input() for i in range(m)]\n    ok = 1\n    tempCol = n\n    for i in range(m):\n        for j in range(n):\n            if a[i][j] == 'R':\n                ok = 0\n                tempCol = j\n                break\n        if not ok:\n            break\n    ok = 1\n    for i in range(m):\n        for j in range(tempCol):\n            if a[i][j] == 'R':\n                ok = 0\n                break\n        if not ok:\n            break\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "I = input\nfor _ in [0] * int(I()):\n    a = [I() for _ in [0] * int(I().split()[0])]\n    (i, j) = (['R' in s for s in l].index(1) for l in (a, [*zip(*a)]))\n    print('YNEOS'[a[i][j] < 'R'::2])", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        s = input()\n        a.append(s)\n    c = -1\n    flag = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 'R':\n                c = j\n                break\n        if c != -1:\n            break\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 'R' and j < c:\n                flag = 1\n                print('NO')\n                break\n        if flag == 1:\n            break\n    if flag == 0:\n        print('YES')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    num = []\n    for i in range(n):\n        s = input()\n        num.append(s)\n    f = 1\n    for i in range(n):\n        if num[i].find('R') != -1:\n            x = num[i].index('R')\n            break\n    for j in range(i + 1, n):\n        if num[j].find('R') != -1:\n            y = num[j].index('R')\n            if y >= x:\n                f = 1\n            else:\n                f = 0\n                break\n    if f:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    a = []\n    flag = False\n    for i in range(n):\n        a.append(input())\n    i = 0\n    while i < n:\n        for j in range(m):\n            if a[i][j] == 'R':\n                c = i\n                d = j\n                flag = True\n                break\n        if flag:\n            break\n        i += 1\n    c = i + 1\n    while c < n:\n        for j in range(d):\n            if a[c][j] == 'R':\n                flag = False\n                break\n        if flag == False:\n            break\n        c += 1\n    if flag:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "I = input\nfor _ in [0] * int(I()):\n    a = (*filter(None, (~I().find('R') for _ in [0] * int(I().split()[0]))),)\n    print('YNEOS'[a[0] < max(a)::2])", "import sys\n\ndef solve(x, y, grid):\n    rs = []\n    for i in range(x):\n        for j in range(y):\n            if grid[i][j] == 'R':\n                rs.append((i, j))\n    rsx = sorted(rs, key=lambda x: x[0])\n    sx = rsx[0]\n    for (i, j) in rsx:\n        if j < sx[1]:\n            return 'NO'\n    rsy = sorted(rs, key=lambda x: x[1])\n    sy = rsy[0]\n    for (i, j) in rsy:\n        if i < sy[0]:\n            return 'NO'\n    return 'YES'\nn = int(sys.stdin.readline())\nfor _ in range(n):\n    [x, y] = [int(n) for n in sys.stdin.readline().strip().split()]\n    grid = []\n    for _ in range(x):\n        grid.append(sys.stdin.readline().strip())\n    print(solve(x, y, grid))", "def solve():\n    (n, m) = map(int, input().split())\n    mat = []\n    for i in range(n):\n        mat.append(input())\n\n    def find_upper():\n        for i in range(n):\n            for j in range(m):\n                if mat[i][j] == 'R':\n                    return (i, j)\n\n    def find_left():\n        for j in range(m):\n            for i in range(n):\n                if mat[i][j] == 'R':\n                    return (i, j)\n    upper_most = find_upper()\n    left_most = find_left()\n    if upper_most == left_most:\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_ls():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef main():\n    for _ in range(int(input())):\n        (n, m) = get_ints()\n        ls = []\n        ok = True\n        for i in range(n):\n            x = input()\n            ls.append(x)\n        (a, b) = (0, 0)\n        found = False\n        for i in range(n):\n            for j in range(m):\n                if ls[i][j] == 'R':\n                    a = i\n                    b = j\n                    found = True\n                    break\n            if found:\n                break\n        for i in range(a + 1, n):\n            for j in range(b):\n                if ls[i][j] == 'R':\n                    ok = False\n                    break\n        print('YES' if ok else 'NO')\nmain()", "def solve():\n    (n, m) = map(int, input().split())\n    mat = []\n    for i in range(n):\n        mat.append(input())\n\n    def find_upper():\n        for (i, s) in enumerate(mat):\n            for (j, c) in enumerate(s):\n                if c == 'R':\n                    return (i, j)\n\n    def find_left():\n        for (j, col) in enumerate(zip(*mat)):\n            for (i, c) in enumerate(col):\n                if c == 'R':\n                    return (i, j)\n    upper_most = find_upper()\n    left_most = find_left()\n    if upper_most == left_most:\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nfor _ in range(t):\n    solve()", "def is_reachable(n, m):\n    most_left_robot_row = -1\n    most_left_robot_col = m - 1\n    first_robot_row = -1\n    for row_id in range(n):\n        line = input().strip()\n        for col_id in range(len(line)):\n            if line[col_id] == 'R' and most_left_robot_col > col_id:\n                most_left_robot_row = row_id\n                most_left_robot_col = col_id\n            if line[col_id] == 'R' and first_robot_row == -1:\n                first_robot_row = row_id\n    return 'YES' if first_robot_row >= most_left_robot_row else 'NO'\nt = int(input())\nfor _ in range(t):\n    (n, m) = [int(v) for v in input().strip().split(' ')]\n    print(is_reachable(n, m))", "import math, re\n\ndef fastlist():\n    return list(map(int, input().split()))\n\ndef fastint():\n    return int(input())\n\ndef solve():\n    (n, m) = fastlist()\n    x = 1000000\n    b = True\n    for i in range(n):\n        dop = list(input())\n        if 'R' in dop:\n            if x == 1000000:\n                dopp = 0\n                while True:\n                    if dop[dopp] == 'R':\n                        break\n                    else:\n                        dopp += 1\n                x = dopp\n            else:\n                dopp = 0\n                while True:\n                    if dop[dopp] == 'R':\n                        break\n                    else:\n                        dopp += 1\n                if dopp < x:\n                    b = False\n    if b:\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nfor _ in range(t):\n    solve()", "t = int(input())\nfor qwer in range(t):\n    (n, m) = map(int, input().split())\n    sp = []\n    v = 0\n    g = 1000000\n    ui = True\n    for i in range(n):\n        el = list(input())\n        sp.append(el)\n        if 'R' in el:\n            ui = False\n            ind = el.index('R')\n            g = min(ind, g)\n        elif ui:\n            v += 1\n    fl = False\n    for el in range(v + 1):\n        if 'R' in sp[el][:g + 1]:\n            print('YES')\n            fl = True\n            break\n    if not fl:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = []\n    for _ in range(n):\n        s += [input()]\n    minx = miny = 0\n    flag = 0\n    for i in range(n):\n        for j in range(m):\n            if s[i][j] == 'R':\n                minx = i\n                miny = j\n                flag = 1\n                break\n        if flag:\n            break\n    flag = 0\n    for i in range(minx + 1, n):\n        for j in range(0, miny):\n            if s[i][j] == 'R':\n                flag = 1\n                break\n    if flag == 0:\n        print('YES')\n    else:\n        print('NO')", "tst = int(input())\nfor i in range(tst):\n    gg = []\n    (n, m) = map(int, input().split())\n    for j in range(n):\n        s = input()\n        if 'R' in s:\n            gg.append(s.index('R'))\n        else:\n            continue\n    if min(gg) == gg[0]:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (bl, tr) = (-1, -1)\n    (h, w) = map(int, input().split())\n    m = []\n    for i in range(h):\n        m.append(list(input()))\n    while (h > 0 or w > 0) and (bl == -1 or tr == -1):\n        if tr == -1 and h >= 0 and ('R' in m[len(m) - h]):\n            tr = len(m) - h\n        w1 = len(m[0]) - w\n        if bl == -1 and w >= 0 and ('R' in [i[w1] for i in m]):\n            bl = w1\n        w -= 1\n        h -= 1\n    print('YES' if m[tr][bl] == 'R' else 'NO')", "def solve(n, m, array):\n    leftMost = ''\n    for i in range(m):\n        for j in range(n):\n            if array[j][i] == 'R':\n                leftMost = [j, i]\n                break\n        if leftMost:\n            break\n    topMost = ''\n    for i in range(n):\n        for j in range(m):\n            if array[i][j] == 'R':\n                topMost = [i, j]\n                break\n        if topMost:\n            break\n    if leftMost[0] <= topMost[0]:\n        return 'YES'\n    else:\n        return 'NO'\nt = int(input())\nfor T in range(t):\n    array = []\n    (n, m) = list(map(int, input().split(' ')))\n    for i in range(n):\n        array.append(input())\n    print(solve(n, m, array))", "def checkValidity(col_row):\n    messageChecker = False\n    message = 'YES'\n    row = col_row[0]\n    col = col_row[1]\n    flag = False\n    ref_row = 0\n    ref_col = 0\n    for i in range(row):\n        tempInput = input()\n        if messageChecker is False:\n            for index in range(len(tempInput)):\n                if flag is False and tempInput[index] == 'R':\n                    ref_row = i\n                    ref_col = index\n                    flag = True\n                elif tempInput[index] == 'R':\n                    if i - ref_row < 0 or index - ref_col < 0:\n                        message = 'NO'\n                        messageChecker = True\n    return message\nn = int(input())\nfor index in range(n):\n    col_row = [int(i) for i in input().split()]\n    print(checkValidity(col_row))", "t = int(input())\nfor z in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    l = []\n    for y in range(n):\n        l.append(input())\n    for i in range(n):\n        for j in range(m):\n            if l[i][j] == 'R':\n                break\n        if l[i][j] == 'R':\n            break\n    check = True\n    u = i + 1\n    while u < n and check:\n        v = 0\n        while v < j and check:\n            if l[u][v] == 'R':\n                check = False\n            else:\n                v += 1\n        u += 1\n    if check == True:\n        print('YES')\n    else:\n        print('NO')", "t = input()\nend_result = ''\nfor i in range(int(t)):\n    (m, n) = input().split()\n    map = []\n    for j in range(int(m)):\n        map.append(input())\n    found = False\n    result = 'YES'\n    row = 0\n    while row < int(m):\n        if not found:\n            column = 0\n        while not found and column < int(n):\n            if map[row][column] == 'R':\n                found = True\n                break\n            column += 1\n        if found and 'R' in map[row][:column]:\n            result = 'NO'\n            break\n        row += 1\n    end_result += result + '\\n'\nprint(end_result[:-1])", "t = int(input())\nfor caso in range(t):\n    (f, c) = map(int, input().split(' '))\n    datos = []\n    ans = 'YES'\n    for fila in range(f):\n        datos.append(input())\n    rs = []\n    for (i, fila) in enumerate(datos):\n        for (j, letra) in enumerate(fila):\n            if letra == 'R':\n                rs.append([i, j])\n                break\n    primero = rs[0]\n    for i in range(1, len(rs)):\n        if rs[i][0] - primero[0] < 0 or rs[i][1] - primero[1] < 0:\n            ans = 'NO'\n    print(ans)", "N = int(input())\nfor i in range(N):\n    (sc, rc) = map(int, input().split())\n    ur = rc\n    upfound = 0\n    lr = 0\n    for s in range(sc):\n        a = str(input())\n        if a.find('R') >= 0:\n            if upfound == 0:\n                ur = a.find('R')\n                lr = ur\n                upfound = 1\n            elif a.find('R') < lr:\n                lr = a.find('R')\n    if ur == lr:\n        print('YES')\n    else:\n        print('NO')", "I = input\nfor _ in [0] * int(I()):\n    a = (*filter(None, (~I().find('R') for _ in [0] * int(I().split()[0]))),)\n    print('YNEOS'[a[0] < max(a)::2])"]