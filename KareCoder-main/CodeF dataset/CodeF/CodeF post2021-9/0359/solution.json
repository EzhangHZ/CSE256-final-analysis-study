["import sys\ninput = sys.stdin.readline\n\ndef solve(n, s):\n    idx = 0\n    ops = 0\n    while idx < n:\n        if idx == n - 1:\n            print(ops, 1)\n            return\n        if s[idx] == '(':\n            idx += 2\n            ops += 1\n        elif s[idx + 1] == ')':\n            ops += 1\n            idx += 2\n        else:\n            idx2 = idx + 1\n            while idx2 < n and s[idx2] == '(':\n                idx2 += 1\n            if idx2 == n:\n                print(ops, n - idx)\n                return\n            else:\n                ops += 1\n                idx = idx2 + 1\n    print(ops, n - idx)\n    return\nfor _ in range(int(input())):\n    n = int(input())\n    s = input().strip()\n    solve(n, s)", "for s in [*open(0)][2::2]:\n    n = len(s)\n    s += ')'\n    i = c = 0\n    while i < n:\n        c += 1\n        j = i\n        if ')' > s[i]:\n            i += 2\n        else:\n            i = s.find(')', i + 1) + 1\n    print(c - 1, n - j - 1)", "for s in [*open(0)][2::2]:\n    n = len(s)\n    i = c = 0\n    while i < n:\n        c += 1\n        j = i\n        if ')' > s[i]:\n            i += 2\n        else:\n            i = s.find(')', i + 1) % n + 1\n    print(c - 1, n - j - 1)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    c = 0\n    i = 0\n    while True:\n        if i >= n - 1:\n            print(c, max(n - i, 0))\n            break\n        if s[i] == '(':\n            i += 2\n            c += 1\n        else:\n            try:\n                i = s.index(')', i + 1) + 1\n                c += 1\n            except:\n                print(c, n - i)\n                break", "for s in [*open(0)][2::2]:\n    n = len(s)\n    i = c = 1\n    while i <= n:\n        c += 1\n        j = i\n        i = i + 2 if ')' > s[i - 1] else s.find(')', i) % n + 2\n    print(c - 2, n - j)", "for s in [*open(0)][2::2]:\n    n = len(s)\n    i = c = 1\n    while i <= n:\n        c += 1\n        j = i\n        i = i + 2 if ')' > s[i - 1] else s.find(')', i) % n + 2\n    print(c - 2, n - j)", "for s in [*open(0)][2::2]:\n    n = len(s)\n    i = c = 1\n    while i <= n:\n        c += 1\n        j = i\n        i = i + 2 if ')' > s[i - 1] else s.find(')', i) % n + 2\n    print(c - 2, n - j)", "for s in [*open(0)][2::2]:\n    n = len(s)\n    i = c = 1\n    while i <= n:\n        c += 1\n        j = i\n        i = i + 2 if ')' > s[i - 1] else s.find(')', i) % n + 2\n    print(c - 2, n - j)", "import math\n\ndef nado(n, s):\n    (i, j) = (0, 1)\n    ans = 0\n    while i < n and j < n:\n        if s[i] == '(':\n            ans += 1\n            i += 2\n            j = i + 1\n        else:\n            while j < n and s[j] != ')':\n                j += 1\n            if j >= n:\n                break\n            ans += 1\n            i = j + 1\n            j = i + 1\n    if i == n:\n        return [ans, 0]\n    return [ans, n - i]\nfor t in range(int(input())):\n    n = int(input())\n    s = input()\n    print(*nado(n, s))", "def solve():\n    n = int(input())\n    seq = input()\n    solved = 0\n    ops = 0\n    prev = None\n    tmp = 0\n    for c in seq:\n        if prev == None:\n            prev = c\n        elif prev == '(':\n            solved += 2\n            prev = None\n            ops += 1\n        elif c == '(':\n            tmp += 1\n        else:\n            solved += 2 + tmp\n            tmp = 0\n            prev = None\n            ops += 1\n    print(ops, n - solved)\nfor tc in range(int(input())):\n    solve()", "def solve():\n    n = int(input())\n    s = input()\n    if n == 1:\n        print(0, 1)\n        return\n    steps = 0\n    done = -1\n    i = 0\n    while i < n:\n        if i == n - 1:\n            break\n        if s[i] == '(':\n            steps += 1\n            i += 2\n            done = i - 1\n        else:\n            i += 1\n            while i < n and s[i] == '(':\n                i += 1\n            if i == n:\n                break\n            steps += 1\n            done = i\n            i += 1\n    print(steps, n - done - 1)\nfor _ in range(int(input())):\n    solve()", "from sys import stdin\ninput = stdin.readline\nfor test in range(int(input())):\n    n = int(input())\n    s = input()\n    (c, i) = (0, 0)\n    while i + 1 < n:\n        if s[i] == '(':\n            i += 2\n            c += 1\n        else:\n            j = i + 1\n            while j < n and s[j] != ')':\n                j += 1\n            if j < n:\n                c += 1\n                i = j + 1\n            else:\n                break\n    print(c, n - i)", "import math\nimport sys\nimport statistics\nfrom statistics import mode\ninput = sys.stdin.readline\n\ndef inp_int():\n    return int(input())\n\ndef inp_list():\n    return list(map(int, input().split()))\n\ndef inp_string():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef inp_reverse():\n    return map(int, input().split())\n\ndef lst_to_str(lst):\n    return ' '.join((str(e) for e in lst))\n\ndef is_square(i: int) -> bool:\n    return i == int(math.sqrt(i)) ** 2\n\ndef solve():\n    n = inp_int()\n    my_str = inp_string()\n    ops = 0\n    state = 0\n    valid = True\n    first = True\n    last_idx = -1\n    for (i, c) in enumerate(my_str):\n        if first:\n            first = False\n            token = c\n        elif c == token:\n            ops += 1\n            valid = True\n            first = True\n            state = 0\n            last_idx = i\n            continue\n        state = state + 1 if c == '(' else state - 1\n        if state < 0:\n            valid = False\n        if valid and state == 0:\n            ops += 1\n            valid = True\n            first = True\n            state = 0\n            last_idx = i\n            continue\n    print(ops, n - last_idx - 1)\nnumber_cases = inp_int()\nfor x in range(number_cases):\n    solve()", "def main():\n    length = int(input())\n    lst = []\n    for _ in range(length):\n        n = int(input())\n        (res, left) = solver(input())\n        lst.append((res, left))\n    for (res, left) in lst:\n        print(str(res) + ' ' + str(left))\n\ndef solver(string):\n    base = ''\n    res = 0\n    left = 0\n    n = len(string)\n    for i in range(n):\n        if base == '':\n            base = string[i]\n            left = 1\n        elif base == '(':\n            base = ''\n            left = 0\n            res += 1\n        elif string[i] == ')':\n            left = 0\n            res += 1\n            base = ''\n        else:\n            left += 1\n    return (res, left)\nmain()", "for s in [*open(0)][2::2]:\n    n = len(s)\n    i = c = 1\n    while i <= n:\n        c += 1\n        j = i\n        i = i + 2 if ')' > s[i - 1] else s.find(')', i) % n + 2\n    print(c - 2, n - j)", "def fun(n, s):\n    op = 0\n    i = 0\n    while i < n:\n        if i == n - 1:\n            return (op, 1)\n        if s[i] == '(':\n            op += 1\n            i += 2\n        else:\n            temp = i + 1\n            while temp < n and s[temp] != ')':\n                temp += 1\n            if temp >= n:\n                return (op, n - i)\n            i = temp + 1\n            op += 1\n    return (op, 0)\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    result = fun(n, s)\n    print(result[0], result[1])", "import math\n\ndef intlist():\n    return [int(i) for i in input().split(' ')]\n\ndef stringlist():\n    return input().split(' ')\n\ndef yes(t):\n    if t:\n        return 'YES'\n    return 'NO'\n\ndef printjoin(l, str=False):\n    if str:\n        l = [str(i) for i in l]\n    return ' '.join(l)\n\ndef power_of_two(n):\n    b = bin(n)[2:]\n    return int(b) == 10 ** (len(b) - 1)\n\ndef bit_count(n):\n    return bin(n).count('1')\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef lcm(x, y):\n    lcm = x * y // gcd(x, y)\n    return lcm\n\ndef isint(str):\n    try:\n        int(str)\n        return True\n    except ValueError:\n        return False\n\ndef solve():\n    n = int(input())\n    ml = n\n    s = input()\n    ans = n * [0]\n    nn = -1\n    for i in range(n - 1, -1, -1):\n        if s[i] == ')':\n            ans[i] = nn\n            nn = i\n    op = i = 0\n    while i < ml - 1:\n        if ans[i] == 0:\n            i += 2\n            op += 1\n            n -= 2\n        elif ans[i] == -1:\n            break\n        else:\n            op += 1\n            n = n - ans[i] - 1\n            i = ans[i] + 1\n    return '{} {}'.format(op, ml - i)\nt = input()\nfor tt in range(int(t)):\n    print(solve())", "def solve():\n    n = int(input())\n    s = input()\n    i = 0\n    ans = 0\n    while i < n - 1:\n        if s[i] == '(':\n            ans += 1\n            i += 2\n        else:\n            j = i + 1\n            while j < n and s[j] == '(':\n                j += 1\n            if j == n:\n                break\n            i = j + 1\n            ans += 1\n    print(ans, n - i)\ntst = int(input())\nfor i in range(tst):\n    solve()", "def solve(t):\n    n = int(input())\n    s = input().strip()\n    cnt = 0\n    i = 0\n    while i + 2 <= n:\n        if s[i] == '(':\n            cnt += 1\n            i += 2\n        else:\n            j = i\n            i += 1\n            while i < n and s[i] == '(':\n                i += 1\n            if i == n:\n                i = j\n                break\n            i += 1\n            cnt += 1\n    print(cnt, n - i)\nfor t in range(int(input())):\n    solve(t)", "for s in [*open(0)][2::2]:\n    n = len(s)\n    i = c = 0\n    while i < n:\n        c += 1\n        j = i\n        i = i + 2 if ')' > s[i] else s.find(')', i + 1) % n + 1\n    print(c - 1, n - j - 1)", "n = int(input())\nfor _ in range(n):\n    n = int(input())\n    s = input()\n    ans = 0\n    index = 0\n    while index + 1 < n:\n        if s[index] == '(':\n            index += 2\n            ans += 1\n        else:\n            index_r = s.find(')', index + 1)\n            if index_r == -1:\n                break\n            else:\n                index = index_r + 1\n                ans += 1\n    print(ans, n - index)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    c = 0\n    i = 0\n    while True:\n        if i >= n - 1:\n            print(c, max(n - i, 0))\n            break\n        if s[i] == '(':\n            i += 2\n            c += 1\n        else:\n            try:\n                i = s.index(')', i + 1) + 1\n                c += 1\n            except:\n                print(c, n - i)\n                break", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    op = 0\n    i = 0\n    while True:\n        if i >= n - 1:\n            print(op, max(n - i, 0))\n            break\n        if s[i] == '(':\n            op += 1\n            i += 2\n        else:\n            try:\n                i = s.index(')', i + 1) + 1\n                op += 1\n            except:\n                print(op, n - i)\n                break", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nimport heapq\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nmod = 998244353\n\ndef func():\n    n = inp()\n    s = strng()\n    l = 0\n    cnt = 0\n    while l < n - 1:\n        if s[l] == '(':\n            l += 2\n        elif s[l + 1] == ')':\n            l += 2\n        else:\n            r = l + 1\n            while r < n and s[r] != ')':\n                r += 1\n            if r == n:\n                break\n            l = r + 1\n        cnt += 1\n    return [cnt, n - l]\nt = inp()\nfor i in range(t):\n    print(*func())", "def pharaoh():\n    n = int(input())\n    s = input()\n    l = 0\n    cnt = 0\n    while l + 1 < n:\n        if s[l] == '(' or (s[l] == ')' and s[l + 1] == ')'):\n            l += 2\n        else:\n            r = l + 1\n            while r < n and s[r] != ')':\n                r += 1\n            if r == n:\n                break\n            l = r + 1\n        cnt += 1\n    print(cnt, n - l)\nfor i in range(int(input())):\n    pharaoh()", "for s in [*open(0)][2::2]:\n    n = len(s)\n    i = c = 1\n    while i < n + 1:\n        c += 1\n        j = i\n        i = i + 2 if s[i - 1] != ')' else s.find(')', i) % n + 2\n    print(c - 2, n - j)", "def main():\n    for _ in range(int(input())):\n        (n, s) = (int(input()), input())\n        (l, c) = (0, 0)\n        while l + 1 < n:\n            if s[l] == '(' or (s[l] == ')' and s[l + 1] == ')'):\n                l += 2\n            else:\n                r = l + 1\n                while r < n and s[r] != ')':\n                    r += 1\n                if r == n:\n                    break\n                l = r + 1\n            c += 1\n        print(str(c) + ' ' + str(n - l))\nmain()", "import sys\ngetline = sys.stdin.readline\n\ndef read_int():\n    return int(getline())\n\ndef read_ints():\n    return list(map(int, getline().split()))\n\ndef read_s():\n    return str(getline().strip())\n\ndef read_ss():\n    return list(map(str, getline().strip().split()))\nresult = []\nt = read_int()\nfor _ in range(t):\n    n = read_int()\n    s = read_s()\n    good = 0\n    (l, r) = (0, 1)\n    while r < n:\n        if s[l] == ')':\n            if s[r] == '(':\n                r += 1\n            else:\n                good += 1\n                l = r + 1\n                r = l + 1\n        else:\n            good += 1\n            l = r + 1\n            r = l + 1\n    rem = n - l\n    result.append((good, rem))\nfor r in result:\n    print(*r)", "def main():\n    n = int(input())\n    s = list(input())\n    curr = 0\n    c = 0\n    i = 0\n    while n - i > 1:\n        if s[i] == s[i + 1]:\n            i += 2\n            c += 1\n        else:\n            break\n    while n - i > 1:\n        if s[i] == '(' and s[i + 1] == ')':\n            i += 2\n            c += 1\n        elif s[i] == s[i + 1]:\n            i += 2\n            c += 1\n        else:\n            if n - i < 3:\n                break\n            flag = True\n            for j in range(i + 2, n):\n                if s[j] == ')':\n                    c += 1\n                    i = j + 1\n                    flag = False\n                    break\n            if flag:\n                break\n    print(c, n - i)\n    return\nfor _ in range(int(input())):\n    main()", "import collections\nimport math\n\ndef main():\n    n = int(input())\n    s = str(input())\n    balance = 0\n    ans = 0\n    last = 0\n    i = 0\n    while i < n:\n        if balance == 1:\n            if s[i] == ')':\n                ans += 1\n                balance = 0\n                last = i + 1\n        elif s[i] == '(' and i + 1 < n:\n            ans += 1\n            i += 1\n            last = i + 1\n        else:\n            balance = 1\n        i += 1\n    print(ans, n - last)\nt = int(input())\nwhile t > 0:\n    main()\n    t -= 1", "import sys\nimport math\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    s = input()\n    (l, cnt) = (0, 0)\n    while l + 1 < n:\n        if s[l] == '(' or (s[l] == ')' and s[l + 1] == ')'):\n            l += 2\n        else:\n            r = l + 1\n            while r < n and s[r] != ')':\n                r += 1\n            if r == n:\n                break\n            l = r + 1\n        cnt += 1\n    print('{} {}'.format(cnt, n - l))", "t = int(input())\nwhile t:\n    n = int(input())\n    s = input()\n    cur = 0\n    op = 0\n    while True:\n        if cur >= n - 1:\n            print(op, max(n - cur, 0))\n            break\n        if s[cur] == '(':\n            op += 1\n            cur += 2\n        else:\n            try:\n                cur = s.index(')', cur + 1) + 1\n                op += 1\n            except:\n                print(op, n - cur)\n                break\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    count = 0\n    i = 0\n    while i + 1 < n:\n        if s[i] == '(' or (s[i] == ')' and s[i + 1] == ')'):\n            i = i + 2\n        else:\n            r = i + 1\n            while r < n and s[r] != ')':\n                r += 1\n            if r == n:\n                break\n            i = r + 1\n        count += 1\n    print(count, n - i)", "n = int(input())\nfor _ in range(n):\n    n = int(input())\n    s = input()\n    ans = 0\n    index = 0\n    while index + 1 < n:\n        if s[index] == '(' or (s[index] == ')' and s[index + 1] == ')'):\n            index += 2\n            ans += 1\n        else:\n            index_r = s.find(')', index + 1)\n            if index_r == -1:\n                break\n            else:\n                index = index_r + 1\n                ans += 1\n    print(ans, n - index)", "import sys\nimport math\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    s = input()\n    (l, cnt) = (0, 0)\n    while l + 1 < n:\n        if s[l] == '(' or (s[l] == ')' and s[l + 1] == ')'):\n            l += 2\n        else:\n            r = l + 1\n            while r < n and s[r] != ')':\n                r += 1\n            if r == n:\n                break\n            l = r + 1\n        cnt += 1\n    print('{} {}'.format(cnt, n - l))", "t = int(input())\n\ndef find_answer(s):\n    i = 0\n    j = 0\n    ops = 0\n    while i < len(s):\n        if s[i] == '(':\n            if i < len(s) - 1:\n                i += 2\n                j += 2\n                ops += 1\n            else:\n                i += 2\n        else:\n            i += 1\n            while i < len(s) and s[i] != ')':\n                i += 1\n            if i < len(s):\n                i += 1\n                j = i\n                ops += 1\n    return '%s %s' % (ops, len(s) - j)\nfor i in range(t):\n    n = int(input())\n    s = input()\n    print(find_answer(s))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    c = 0\n    i = 0\n    palion = 0\n    lasti = 0\n    while i < n:\n        if s[i] == ')':\n            if palion == 1:\n                c += 1\n                lasti = i + 1\n                i += 1\n                palion = 0\n            elif i + 1 < n and s[i + 1] == ')':\n                c += 1\n                lasti = i + 2\n                i += 2\n            else:\n                palion = 1\n                i += 1\n        elif palion == 1:\n            i += 1\n        elif i + 1 < n:\n            c += 1\n            i += 2\n            lasti = i\n        else:\n            i += 1\n    print(c, n - lasti)", "import sys\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\nsys.setrecursionlimit(10000)\n\ndef solve(N, S):\n    (l, r) = (0, 0)\n    (l_cnt, r_cnt) = (0, 0)\n    for i in range(N):\n        if S[i] == '(':\n            if l_cnt:\n                if r_cnt == 0:\n                    l_cnt -= 1\n                    l += 1\n                else:\n                    l_cnt += 1\n            else:\n                l_cnt += 1\n        elif r_cnt:\n            l_cnt = 0\n            r_cnt = 0\n            l += 1\n        elif l_cnt == 1:\n            l_cnt = 0\n            r_cnt = 0\n            l += 1\n        else:\n            r_cnt += 1\n    return (l, l_cnt + r_cnt)\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    S = input()\n    (l, r) = solve(N, S)\n    print(l, r)", "from queue import Queue\n\ndef main():\n    t = int(input())\n    for tt in range(t):\n        n = int(input())\n        scopes = input()\n        count = 0\n        i = 0\n        ans = False\n        while i + 1 < n and (not ans):\n            if scopes[i] + scopes[i + 1] in {'((', '))', '()'}:\n                i += 2\n                count += 1\n            else:\n                j = i + 1\n                while j < n:\n                    if scopes[j] == '(':\n                        j += 1\n                    else:\n                        break\n                if j == n:\n                    print(count, n - i)\n                    ans = True\n                    break\n                count += 1\n                if j + 1 < n:\n                    i = j + 1\n                else:\n                    print(count, 0)\n                    ans = True\n                    break\n        if not ans:\n            print(count, n - i)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    s = list(input())\n    ans = 0\n    i = 0\n    flag = 0\n    while i < n:\n        if s[i] == '(':\n            if i == n - 1:\n                flag = 1\n                break\n            i += 2\n        else:\n            if i == n - 1:\n                flag = 1\n                break\n            j = i + 1\n            while j < n and s[j] != ')':\n                j += 1\n            if j == n:\n                flag = n - i\n                break\n            i = j + 1\n        ans += 1\n    print(ans, flag)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    i = 0\n    ans = 0\n    while i + 1 < n:\n        if s[i] == '(':\n            i += 2\n            ans += 1\n        else:\n            j = i + 1\n            while j < n and s[j] == '(':\n                j += 1\n            if j == n:\n                break\n            else:\n                ans += 1\n                i = j + 1\n    print(ans, n - i)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    i = 0\n    rem = n\n    ops = 0\n    while i < n:\n        if s[i] == '(':\n            i += 1\n            if i < n:\n                ops += 1\n                i += 1\n                rem -= 2\n        else:\n            j = i\n            i += 1\n            while i < n and s[i] != ')':\n                i += 1\n            if i < n:\n                rem -= i - j + 1\n                i += 1\n                ops += 1\n    print(ops, rem)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    z = input()\n    x = ''\n    b = n\n    o = 0\n    for i in range(n):\n        if x == '':\n            x = z[i]\n        elif x == '(':\n            b -= 2\n            x = ''\n            o += 1\n        elif z[i] == x:\n            b = n - (i + 1)\n            o += 1\n            x = ''\n    print(o, b)", "for _ in range(int(input())):\n    n = int(input())\n    s = list(input())\n    i = 0\n    cnt = 0\n    while i + 1 < n:\n        if s[i] == '(':\n            i += 2\n            cnt += 1\n        else:\n            j = i + 1\n            while j < n and s[j] != ')':\n                j += 1\n            if j == n:\n                break\n            cnt += 1\n            i = j + 1\n    print(cnt, n - i)", "for t in range(int(input())):\n    n = int(input())\n    l = input()\n    c = 0\n    i = 0\n    while i + 1 < len(l):\n        if l[i] == '(' or (l[i] == ')' and l[i + 1] == ')'):\n            i += 2\n        else:\n            r = i + 1\n            while r < n and l[r] != ')':\n                r += 1\n            if r == n:\n                break\n            i = r + 1\n        c += 1\n    print(c, len(l) - i)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = list(input())\n    l = 0\n    ans = 0\n    while l + 1 < n:\n        if s[l] == '(' or (s[l] == ')' and s[l + 1] == ')'):\n            l += 2\n        else:\n            k = l + 1\n            while k < n and s[k] != ')':\n                k += 1\n            if k == n:\n                break\n            l = k + 1\n        ans += 1\n    print(ans, n - l)", "def main():\n    n = int(input())\n    s = list(input())\n    curr = 0\n    c = 0\n    i = 0\n    while n - i > 1:\n        if s[i] == '(' and s[i + 1] == ')':\n            i += 2\n            c += 1\n        elif s[i] == s[i + 1]:\n            i += 2\n            c += 1\n        else:\n            if n - i < 3:\n                break\n            flag = True\n            for j in range(i + 2, n):\n                if s[j] == ')':\n                    c += 1\n                    i = j + 1\n                    flag = False\n                    break\n            if flag:\n                break\n    print(c, n - i)\n    return\nfor _ in range(int(input())):\n    main()", "tc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    s = input()\n    i = 0\n    x = 0\n    while i < n:\n        if s[i] == '(' and n - i > 1:\n            i += 2\n            x += 1\n        elif s[i] == ')':\n            temp = i + 1\n            while temp < n and s[temp] != ')':\n                temp += 1\n            if temp < n and s[temp] == ')':\n                i = temp + 1\n                x += 1\n            else:\n                break\n        else:\n            break\n    print(x, n - i)", "t = int(input())\nfor z in range(0, t):\n    n = int(input())\n    s1 = input()\n    if n == 1:\n        print(0, 1)\n        continue\n    pp = 0\n    lit = -1\n    i = 0\n    while i < n:\n        if i == n - 1:\n            break\n        if s1[i] == '(':\n            pp += 1\n            i += 2\n            lit = i - 1\n        else:\n            i += 1\n            while i < n and s1[i] == '(':\n                i += 1\n            if i == n:\n                break\n            pp += 1\n            lit = i\n            i += 1\n    print(pp, n - lit - 1)", "for q in range(int(input())):\n    n = int(input())\n    s = input()\n    j = 0\n    i = 0\n    res = 0\n    while i < n:\n        if s[i] == '(':\n            if i < n - 1:\n                i += 2\n                j = i\n                res += 1\n            else:\n                i += 1\n        else:\n            i += 1\n            while i < n and s[i] != ')':\n                i += 1\n            if i < n:\n                res += 1\n                i += 1\n                j = i\n    print(res, n - j)", "for _ in range(int(input())):\n    a = int(input())\n    b = input()\n    operations = 0\n    i = 0\n    bl = True\n    while i < a - 1:\n        if b[i] == '(' or (b[i] == ')' and b[i + 1] == ')'):\n            operations += 1\n            i += 2\n        else:\n            temp = i\n            i += 1\n            while b[i] == '(' and i < a - 1:\n                i += 1\n            if b[i] == ')':\n                operations += 1\n                i += 1\n            else:\n                bl = False\n    if not bl:\n        print(operations, a - temp)\n    else:\n        print(operations, a - i)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    i = 0\n    op = 0\n    while i < n:\n        if n - i <= 1:\n            break\n        elif s[i:i + 2] in ['((', '))', '()']:\n            i += 2\n            op += 1\n        else:\n            for j in range(i + 1, n):\n                if s[j] == ')':\n                    i = j + 1\n                    op += 1\n                    break\n            else:\n                break\n    print(op, n - i)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    S = input()\n    j = 0\n    prev = 0\n    count = 0\n    while j < N - 1:\n        if S[j] == '(':\n            count = count + 1\n            j = j + 2\n            prev = j\n        else:\n            k = j + 1\n            while k < N:\n                if S[k] == ')':\n                    count = count + 1\n                    j = k + 1\n                    prev = j\n                    break\n                k = k + 1\n                j = k\n    print(count, N - prev)", "for k in range(int(input())):\n    n = int(input())\n    s = input()\n    op = 0\n    i = 0\n    j = 1\n    while j < n:\n        temp = ''\n        temp += s[i]\n        temp += s[j]\n        if temp == '()' or temp == '))' or temp == '((':\n            op += 1\n            i += 2\n            j += 2\n        else:\n            while j < n and s[j] != ')':\n                j += 1\n            if j < n:\n                op += 1\n                i = j + 1\n                j = i + 1\n    if n == 1:\n        print(0, 1)\n    elif i >= n:\n        print(op, 0)\n    else:\n        print(op, n - i)", "import math\nn = int(input())\nfor i in range(n):\n    x = int(input())\n    s = input()\n    something = 1\n    k = 0\n    op = 0\n    flag = 1\n    while something:\n        if k >= x:\n            something = 0\n        elif s[k] == '(':\n            if k + 1 == len(s):\n                flag = 0\n                c = len(s) - 1\n                break\n            k += 2\n            op += 1\n        else:\n            flag = 0\n            c = k\n            k += 1\n            while k < x:\n                if s[k] == ')':\n                    flag = 1\n                    op += 1\n                    k += 1\n                    break\n                k += 1\n    print(op, end=' ')\n    if flag:\n        print(len(s) - k)\n    else:\n        print(len(s) - c)", "for T in range(int(input())):\n    n = int(input())\n    s = input()\n    p1 = 0\n    c = 0\n    while p1 + 1 < n:\n        if s[p1] == '(' or (s[p1] == ')' and s[p1 + 1] == ')'):\n            p1 += 2\n        else:\n            p2 = p1 + 1\n            while p2 < n and s[p2] != ')':\n                p2 += 1\n            if p2 == n:\n                break\n            p1 = p2 + 1\n        c += 1\n    print(c, n - p1)", "for _ in range(int(input())):\n    n = int(input())\n    s = str(input())\n    count = 0\n    i = 0\n    while i + 1 < n:\n        if s[i] == '(':\n            i += 2\n            count += 1\n        else:\n            j = i + 1\n            while j < n and s[j] != ')':\n                j += 1\n            if j < n:\n                count += 1\n                i = j + 1\n            else:\n                break\n    print(count, n - i)", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    c = 0\n    r = 0\n    if n == 1:\n        print(0, 1)\n        continue\n    b = 0\n    for i in range(0, n):\n        if i == b:\n            f = s[i]\n            continue\n        if f == ')':\n            if s[i] == f:\n                c += 1\n                b = i + 1\n        else:\n            c += 1\n            b = i + 1\n    print(c, n - b)", "for t in range(int(input())):\n    n = int(input())\n    s = input()\n    l = 0\n    count = 0\n    while l + 1 < n:\n        if s[l] == '(' or (s[l] == ')' and s[l + 1] == ')'):\n            l += 2\n        else:\n            r = l + 1\n            while r < n and s[r] != ')':\n                r += 1\n            if r == n:\n                break\n            l = r + 1\n        count += 1\n    print(count, n - l)", "def read_input():\n    n = int(input())\n    for _ in range(n):\n        input()\n        seq = input()\n        print(check_brackets(seq))\n\ndef test():\n    assert is_palindrome('))')\n    assert is_palindrome('((')\n    assert is_palindrome(')(()')\n    assert not is_palindrome('()')\n    assert not is_palindrome(')(')\n    assert not is_palindrome('))(')\n    assert is_regular('(())()')\n    assert is_regular('()')\n    assert is_regular('(()(()))')\n    assert not is_regular(')(')\n    assert not is_regular('(()')\n    assert not is_regular('(()))(')\n\ndef is_palindrome(seq):\n    return seq == seq[::-1]\n\ndef is_regular(seq):\n    depth = 0\n    for c in seq:\n        if c == '(':\n            depth += 1\n        elif depth <= 0:\n            return False\n        else:\n            depth -= 1\n    return depth == 0\n\ndef check_brackets(seq):\n    moves = 0\n    start = 0\n    current = 2\n    seq_len = len(seq)\n    while current <= seq_len:\n        if current - start == 2 and seq[start:current] != ')(':\n            moves += 1\n            start = current\n            current += 2\n        elif seq[start] == seq[current - 1] and is_palindrome(seq[start:current]):\n            moves += 1\n            start = current\n            current += 2\n        else:\n            current += 1\n    return f'{moves} {seq_len - start}'\ntest()\nread_input()", "from math import sqrt\n\ndef lstRd():\n    return list(map(int, input().split()))\n\ndef intRd():\n    return int(input())\n\ndef lstStrRd():\n    return list(input())\nfor _ in range(intRd()):\n    n = int(input())\n    s = input()\n    cnt = 0\n    l = 0\n    while l + 1 < n:\n        if s[l] == '(' or (s[l] == ')' and s[l + 1] == ')'):\n            l += 2\n        else:\n            r = l + 1\n            while r < n and s[r] != ')':\n                r += 1\n            if r == n:\n                break\n            l = r + 1\n        cnt += 1\n    print(cnt, n - l)", "import math, sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000007\nmod2 = 998244353\nfor _ in range(I()):\n    n = I()\n    s = S()\n    if n == 1:\n        print(0, 1)\n        continue\n    i = 0\n    cnt = 0\n    turn = 0\n    while i < len(s):\n        if s[i] == '(' and i + 1 < n:\n            cnt += 2\n            turn += 1\n            i += 2\n        elif s[i] == ')':\n            t = i\n            i += 1\n            while i < n and s[i] != ')':\n                i += 1\n            if i == n:\n                break\n            turn += 1\n            i += 1\n            cnt += i - t\n        else:\n            i += 1\n    print(turn, n - cnt)", "from collections import defaultdict, deque\nimport math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = list(input())\n    if n == 1:\n        print(0, 1)\n        continue\n    c = 0\n    i = 0\n    x = 0\n    while i < n:\n        if s[i] == '(' and i != n - 1:\n            c += 1\n            i += 2\n            x += 2\n        else:\n            if i == n - 1:\n                break\n            i += 1\n            while i < n:\n                if s[i] == ')':\n                    c += 1\n                    x = i\n                    x += 1\n                    break\n                i += 1\n            i += 1\n    if x > n - 1:\n        print(c, 0)\n    else:\n        print(c, n - x)", "t = int(input())\nwhile t:\n    n = int(input())\n    expr = input()\n    i = 0\n    op = 0\n    r = 0\n    while i < n:\n        if expr[i] == '(':\n            if i == n - 1:\n                r += 1\n                i += 1\n            else:\n                op += 1\n                i += 2\n        else:\n            f = 0\n            j = i + 1\n            while j < n:\n                if expr[j] == ')':\n                    f = 1\n                    op += 1\n                    i = j + 1\n                    break\n                j += 1\n            if f == 0:\n                r = n - i\n                break\n    print(op, r)\n    t -= 1", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    s = input()\n    c = 0\n    r = 0\n    i = 0\n    p = -1\n    while i < n:\n        if i + 1 == n:\n            break\n        if s[i] == '(':\n            c += 1\n            i = i + 2\n            p = i - 1\n        elif s[i] == ')':\n            if s[i + 1] == ')':\n                c += 1\n                i = i + 2\n                p = i - 1\n            else:\n                p = i - 1\n                i = i + 1\n                while i < n and s[i] != ')':\n                    i += 1\n                if i == n:\n                    break\n                p = i\n                i += 1\n                c += 1\n        else:\n            break\n    print(c, n - p - 1)", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    s = input()\n    i = 0\n    st = 0\n    op = 0\n    while i < n - 1:\n        if s[i] == '(' and s[i + 1] == '(':\n            op += 1\n            i += 2\n            st = i\n        elif s[i] == '(' and s[i + 1] == ')':\n            op += 1\n            i += 2\n            st = i\n        elif s[i] == ')' and s[i + 1] == ')':\n            op += 1\n            i += 2\n            st = i\n        else:\n            i += 2\n            while i < n and s[i] == '(':\n                i += 1\n            if i < n:\n                op += 1\n                st = i + 1\n                i += 1\n    print(op, n - st)\n    t -= 1", "T = int(input())\nwhile T:\n    T -= 1\n    N = int(input())\n    s = input()\n    op = 0\n    i = 0\n    while i < len(s) - 1:\n        if s[i] == s[i + 1]:\n            op += 1\n            i += 2\n            continue\n        if s[i] == '(' and s[i + 1] == ')':\n            op += 1\n            i += 2\n            continue\n        idx = None\n        for j in range(i + 1, N):\n            if s[j] == ')':\n                op += 1\n                idx = j\n                break\n        if idx is None:\n            break\n        i = idx + 1\n    print(op, N - i) if i < N else print(op, 0)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    seq = input()\n    p = 0\n    op = 0\n    lastGoodI = 0\n    while p < n:\n        fc = seq[p]\n        if fc == '(' and p + 1 < n:\n            op += 1\n            p += 2\n            continue\n        i = p + 1\n        while i < n and seq[i] == '(':\n            i += 1\n        if i < n and seq[i] == ')':\n            p = i + 1\n            op += 1\n        else:\n            break\n    print(op, n - p)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    i = 0\n    t = n\n    cnt = 0\n    while 1:\n        if i >= n - 1:\n            break\n        if s[i] == '(':\n            cnt += 1\n            i += 2\n            t -= 2\n        elif s[i + 1] == ')':\n            cnt += 1\n            i += 2\n            t -= 2\n        else:\n            j = i + 1\n            while j < n and s[j] == '(':\n                j += 1\n            if j == n:\n                break\n            elif s[j] == ')':\n                cnt += 1\n                t -= j + 1 - i\n                i = j + 1\n    print(cnt, t)", "def countpalindromes(ss):\n    s = '$#' + '#'.join(ss) + '#'\n    n = len(s)\n    p = [0] * n\n    l = 0\n    r = -1\n    for i in range(n):\n        k = 1 if i > r else min(p[l + r - i], r - i + 1)\n        while i + k < n and i - k >= 0 and (s[i + k] == s[i - k]):\n            k += 1\n        p[i] = k\n        if i + k - 1 > r:\n            l = i - k + 1\n            r = i + k - 1\n    return [x // 2 for x in p][2::2]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    l = 0\n    op_amount = 0\n    while True:\n        if l >= len(s) - 1:\n            print(op_amount, len(s) - l)\n            break\n        if s[l] == '(' and s[l + 1] == ')':\n            l += 2\n            op_amount += 1\n            continue\n        if s[l] == '(' and s[l + 1] == '(':\n            l += 2\n            op_amount += 1\n            continue\n        if s[l] == ')' and s[l + 1] == ')':\n            l += 2\n            op_amount += 1\n            continue\n        x = l + 2\n        if x == len(s):\n            print(op_amount, len(s) - l)\n            break\n        ended = False\n        while s[x] == '(':\n            x += 1\n            if x == len(s):\n                print(op_amount, len(s) - l)\n                ended = True\n                break\n        if ended:\n            break\n        l = x + 1\n        op_amount += 1", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(input())\n    ans = 0\n    ele = n\n    i = 0\n    while i < n - 1:\n        if s[i] == ')' and s[i + 1] == '(':\n            j = i + 1\n            while j < n:\n                if s[j] == ')':\n                    ans += 1\n                    ele -= j - i + 1\n                    break\n                j += 1\n            i = j + 1\n        else:\n            i += 2\n            ans += 1\n            ele -= 2\n    print(ans, ele)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(input())\n    i = 0\n    ret = 0\n    while i < n - 1:\n        if s[i] == s[i + 1]:\n            ret += 1\n            i += 2\n            continue\n        if s[i] == '(' and s[i + 1] == ')':\n            ret += 1\n            i += 2\n            continue\n        idx = -1\n        for k in range(i + 1, n):\n            if s[k] == ')':\n                ret += 1\n                idx = k\n                break\n        if idx == -1:\n            break\n        i = idx + 1\n    r = 0\n    if i < n:\n        r = n - i\n    print(f'{ret} {r}')", "def ispalin(s):\n    if len(s) == 1:\n        return False\n    if s == s[::-1]:\n        return True\n    return False\n\ndef isregular(exp):\n    flag = True\n    count = 0\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            flag = False\n            break\n    if count != 0:\n        flag = False\n    return flag\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cs = s[0]\n    ans = 0\n    r = len(s)\n    f = 0\n    sf = 0\n    i = 0\n    while i < n:\n        if i == n - 1:\n            break\n        if cs == '(':\n            ans += 1\n            r = r - 2\n            i = i + 2\n            if i >= n:\n                break\n            cs = s[i]\n        elif cs == ')':\n            j = i\n            i = i + 1\n            while i < n and s[i] != ')':\n                i = i + 1\n            if i == n:\n                break\n            ans += 1\n            r = r - (i - j + 1)\n            i = i + 1\n            if i < n:\n                cs = s[i]\n            else:\n                break\n        else:\n            i = i + 1\n    print(ans, r)", "import math\nna = int(input())\nfor i in range(na):\n    x = int(input())\n    s = input()\n    something = 1\n    k = 0\n    op = 0\n    flag = 1\n    while something:\n        if k >= x:\n            something = 0\n        elif s[k] == '(':\n            if k + 1 == len(s):\n                flag = 0\n                c = len(s) - 1\n                break\n            k += 2\n            op += 1\n        else:\n            flag = 0\n            c = k\n            k += 1\n            while k < x:\n                if s[k] == ')':\n                    flag = 1\n                    op += 1\n                    k += 1\n                    break\n                k += 1\n    print(op, end=' ')\n    if flag:\n        print(len(s) - k)\n    else:\n        print(len(s) - c)", "import math\nfor k in range(int(input())):\n    n = int(input())\n    s = input()\n    i = 0\n    c = 0\n    p = -1\n    d = -1\n    r = 0\n    l = 0\n    while i < n - 1:\n        if s[i] == '(' and (s[i + 1] == '(' or s[i + 1] == ')'):\n            i += 2\n            c += 1\n            continue\n        elif s[i] == ')' and s[i + 1] == ')':\n            i += 2\n            c += 1\n            continue\n        else:\n            a = i + 1\n            m = -1\n            for z in range(a, n):\n                if s[z] == ')':\n                    c += 1\n                    i = z + 1\n                    m = 0\n                    break\n            if m == -1:\n                p = 1\n                break\n    if i < n:\n        print(c, n - i)\n    else:\n        print(c, 0)", "test = int(input())\nfor i in range(test):\n    n = int(input())\n    s = input()\n    c = 0\n    r = 0\n    i = 0\n    while i < n:\n        if i == n - 1 and s[i] == '(':\n            r += 1\n            break\n        if s[i] == '(':\n            c += 1\n            i += 2\n            continue\n        if s[i] == ')' and i == n - 1:\n            r += 1\n            break\n        if s[i] == ')':\n            i += 1\n            r += 1\n            while i < n:\n                if s[i] == ')':\n                    c += 1\n                    r = 0\n                    i += 1\n                    break\n                else:\n                    i += 1\n                    r += 1\n    print(c, r)", "a = int(input())\nfor x in range(a):\n    b = int(input())\n    c = input()\n    if b == 1:\n        print(0, 1)\n    elif b == 2:\n        if c == '()':\n            print(1, 0)\n        elif c == '((' or c == '))':\n            print(1, 0)\n        else:\n            print(0, 2)\n    else:\n        n = 0\n        s = 0\n        while n < b:\n            if c[n] == '(' and n <= b - 2:\n                n += 2\n                s += 1\n            elif c[n] == ')':\n                p = n + 1\n                h = 0\n                while True:\n                    if p > b - 1:\n                        h = -1\n                        break\n                    elif c[p] == ')':\n                        break\n                    else:\n                        p += 1\n                if h == -1:\n                    break\n                else:\n                    n = p + 1\n                    s += 1\n            else:\n                break\n        print(s, b - n)", "import sys\ninput = sys.stdin.readline\nfor _ in [0] * int(input()):\n    n = int(input())\n    s = input()\n    i = op = 0\n    j = 1\n    while j < n:\n        if s[i] == s[j] or (s[i] + s[j] == '()' and j == i + 1):\n            op = op + 1\n            i = j + 1\n            j = i + 1\n        else:\n            j = j + 1\n    print(op, n - i)", "import math\nfor inh in range(int(input())):\n    n = int(input())\n    s = input()\n    (i, c, p, d, r, l) = (0, 0, -1, -1, 0, 0)\n    while i < n - 1:\n        if s[i] == '(' and (s[i + 1] == '(' or s[i + 1] == ')'):\n            i += 2\n            c += 1\n            continue\n        elif s[i] == ')' and s[i + 1] == ')':\n            i += 2\n            c += 1\n            continue\n        else:\n            a = i + 1\n            m = -1\n            for z in range(a, n):\n                if s[z] == ')':\n                    c += 1\n                    (i, m) = (z + 1, 0)\n                    break\n            if m == -1:\n                p = 1\n                break\n    if i < n:\n        print(c, n - i)\n    else:\n        print(c, 0)", "import sys\nfrom collections import Counter\nn = int(input())\nfor t in range(n):\n    len_s = int(input())\n    s = input().strip()\n    len_s = len(s)\n    opers = 0\n    position = 0\n    while True:\n        if len_s - position <= 1:\n            break\n        if s[position:position + 2] in ('((', '))', '()'):\n            opers += 1\n            position += 2\n        else:\n            first_closed = -1\n            for i in range(position + 1, len(s)):\n                if s[i] == ')':\n                    first_closed = i\n                    break\n            if first_closed != -1:\n                opers += 1\n                position = first_closed + 1\n            else:\n                break\n    print(opers, len(s) - position)", "for q in range(int(input())):\n    n = int(input())\n    s = input()\n    count = 0\n    i = 0\n    while i < n:\n        if s[i] == '(' and i < n - 1:\n            count += 1\n            i += 2\n        elif s[i] == ')':\n            flag = 0\n            for j in range(i + 1, n):\n                if s[j] == ')':\n                    flag = 1\n                    i = j + 1\n                    break\n            if flag:\n                count += 1\n            else:\n                break\n        else:\n            break\n    print(count, n - i)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    test_case = input()\n    i = 0\n    c = 0\n    r = 0\n    while i < n:\n        if test_case[i] == '(':\n            if i == n - 1:\n                i += 1\n                r += 1\n            else:\n                c += 1\n                i += 2\n        else:\n            f = 0\n            for j in range(i + 1, n):\n                if test_case[j] == ')':\n                    c += 1\n                    f += 1\n                    i = j + 1\n                    break\n            if f == 0:\n                r = n - i\n                break\n    print(c, r)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    br = input()\n    i = 0\n    j = 1\n    ans = 0\n    res = 0\n    while i < len(br):\n        if br[i] == ')':\n            j = i + 1\n            while j < len(br) and br[j] != ')':\n                j += 1\n            if j == len(br):\n                res = len(br) - i\n                break\n            else:\n                ans += 1\n                i = j + 1\n        else:\n            if i < len(br) - 1:\n                ans += 1\n            else:\n                res = 1\n                break\n            i = i + 2\n    print(ans, res)", "def findCR(exp):\n    (c, r) = (0, len(exp))\n    stack = []\n    start = 0\n    for (i, char) in enumerate(exp):\n        if i == start:\n            stack.append(0) if char == '(' else stack.append(1)\n            continue\n        elif exp[start] == char:\n            c += 1\n            r -= i - start + 1\n            start = i + 1\n            while stack:\n                stack.pop()\n            continue\n        elif char == ')' and stack[-1] == 0:\n            stack.pop()\n        else:\n            stack.append(0) if char == '(' else stack.append(1)\n        if not stack:\n            c += 1\n            r -= i - start + 1\n            start = i + 1\n    print(c, r)\nt = int(input())\nwhile t > 0:\n    l = int(input())\n    seq = input()\n    findCR(seq)\n    t -= 1", "from tabnanny import check\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    c = 0\n    i = 0\n    while i < n - 1:\n        temp = s[i:i + 2]\n        if temp == '()' or temp == '((' or temp == '))':\n            i += 2\n            c += 1\n        else:\n            j = i\n            i += 2\n            while i < n and s[i] != ')':\n                i += 1\n            if i == n:\n                i = j\n                break\n            else:\n                i += 1\n                c += 1\n    print(c, n - i)", "case = int(input())\nfor i in range(case):\n    count = int(input())\n    bracs = input()\n    num_o_op = 0\n    current_i = 0\n    opts = 0\n    while current_i < count:\n        first_two = ''\n        if current_i + 1 < count:\n            first_two = bracs[current_i:current_i + 2]\n        if first_two == '()' or first_two == '((' or first_two == '))':\n            num_o_op += 1\n            current_i += 2\n            opts += 2\n        else:\n            inc_flag = True\n            while current_i + 1 < count:\n                if bracs[current_i + 1] == ')':\n                    num_o_op += 1\n                    current_i += 2\n                    opts = current_i\n                    inc_flag = False\n                    break\n                else:\n                    current_i += 1\n            if inc_flag:\n                current_i += 1\n    print(str(num_o_op) + ' ' + str(count - opts))", "from itertools import count\np = lambda a: print(a)\niip = lambda : int(input())\nsip = lambda : input()\nmip = lambda : map(int, input().strip().split())\nlip = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nflr = lambda x: int(x)\ntstcs = lambda : range(int(input()))\nfor t in tstcs():\n    n = iip()\n    s = sip()\n    if n == 1:\n        print('0 1')\n    else:\n        c = 0\n        op = 0\n        i = 0\n        while i < n:\n            if s[i] == '(' and i != n - 1:\n                op += 1\n                c = 0\n                i += 1\n            elif s[i] == '(' and i == n - 1:\n                c = 1\n                i += 1\n            else:\n                c += 1\n                while i + 1 < n and s[i + 1] != ')':\n                    i += 1\n                    c += 1\n                if i + 1 < n and s[i + 1] == ')':\n                    op += 1\n                    i += 1\n                    c = 0\n            i += 1\n        print(op, c)", "from math import sqrt\nfrom sys import stdin, stdout\nfor t in ' ' * int(input()):\n    n = int(input())\n    myStr = input()\n    c = 0\n    r = 0\n    i = 0\n    while i < n:\n        if i == n - 1:\n            r += 1\n            break\n        if myStr[i] == myStr[i + 1]:\n            c += 1\n            i += 2\n        elif myStr[i] == '(' and myStr[i + 1] == ')':\n            c += 1\n            i += 2\n        else:\n            id = myStr.find(myStr[i], i + 2)\n            if id > 0:\n                newS = myStr[i:id + 1]\n                if len(newS) == 3:\n                    c += 1\n                    i = i + 3\n                else:\n                    for j in range(len(newS) // 2):\n                        if newS[j] != newS[(j + 1) * -1]:\n                            r = n - i\n                            i = -1\n                            break\n                    if i == -1:\n                        break\n                    c += 1\n                    i = id + 1\n            else:\n                r = n - i\n                break\n    print(c, r)", "for _ in range(int(input())):\n    n = int(input())\n    s = str(input())\n    prev = None\n    ans = 0\n    for i in range(n):\n        if prev is None:\n            prev = i\n        elif s[i] == s[prev]:\n            ans += 1\n            prev = None\n        elif i - prev == 1 and s[i] == ')' and (s[prev] == '('):\n            ans += 1\n            prev = None\n    if prev is None:\n        prev = n\n    print(ans, n - prev)", "import sys\ninput = sys.stdin.readline\nfor _ in [0] * int(input()):\n    n = int(input())\n    s = input()\n    i = op = 0\n    j = 1\n    while j < n:\n        if s[i] == s[j] or (s[i] + s[j] == '()' and j == i + 1):\n            op = op + 1\n            i = j + 1\n            j = i + 1\n        else:\n            j = j + 1\n    print(op, n - i)", "def is_p(s):\n    if str(s[0:int((len(s) + 1) / 2)]) == str(''.join(list(reversed(s[int(len(s) / 2):])))):\n        return True\n    return False\n\ndef is_r(s):\n    if s[0] == '(' and s[len(s) - 1] == ')':\n        t = 0\n        for i in range(len(s)):\n            if s[i] == '(':\n                t += 1\n            else:\n                t -= 1\n            if t < 0:\n                return False\n        if t == 0:\n            return True\n        else:\n            return False\n    return False\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    start = 0\n    end = 1\n    op = 0\n    f = 0\n    while end < len(s):\n        if s[start] == '(':\n            op += 1\n            start += 2\n            end = start + 1\n        else:\n            f = 1\n        if f == 1:\n            if s[end] == '(':\n                end += 1\n            else:\n                op += 1\n                start = end + 1\n                end = start + 1\n                f = 0\n    print(op, len(s) - start)", "def solver():\n    n = int(input())\n    for _ in range(n):\n        l = int(input())\n        word = input()\n        c = 1\n        furthest = 0\n        operation = 0\n        while c < l:\n            current_word = word[c]\n            if c - furthest > 0 and word[furthest] == current_word or word[furthest] + current_word == '()':\n                furthest = c + 1\n                operation += 1\n            c += 1\n        print(operation, l - furthest)\nsolver()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input().rstrip()\n    c = i = 0\n    j = 1\n    while i < n and j < n:\n        if s[i] == s[j]:\n            c += 1\n            i = j + 1\n            j = i + 1\n        elif s[i] == '(' and s[j] == ')':\n            c += 1\n            i += 2\n            j += 2\n        else:\n            j += 1\n    if i >= n:\n        left = 0\n    else:\n        left = n - i\n    print(c, left)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = [str for str in input()]\n    (B, D) = (0, 0)\n    C = A[::-1]\n    i = 0\n    while i < len(A) - 1:\n        if A[i] == A[i + 1]:\n            B += 1\n            i += 2\n            continue\n        if A[i] == '(' and A[i + 1] == ')':\n            B += 1\n            i += 2\n            continue\n        j = -1\n        for k in range(i + 1, N):\n            if A[k] == ')':\n                B += 1\n                j = k\n                break\n        if j == -1:\n            break\n        i = j + 1\n    if i < N:\n        D = N - i\n    print(B, D)", "def balanced(str, n):\n    _sum = 0\n    maxi = 0\n    for i in range(n):\n        if str[i] == '(':\n            _sum += 1\n        else:\n            _sum -= 1\n        if _sum < 0:\n            break\n        if _sum == 0:\n            maxi = i + 1\n    return maxi\ntt = int(input())\nfor i in range(tt):\n    n = int(input())\n    s = input()\n    j = 0\n    k = 1\n    c = 0\n    while j < n and k < n:\n        if s[j] == ')' and s[k] == '(':\n            k += 1\n        else:\n            j = k + 1\n            k += 2\n            c += 1\n    print(c, n - j)", "t = int(input())\nfor tt in range(0, t):\n    n = int(input())\n    s = input()\n    ans = n\n    res = 0\n    posi = 0\n    for i in range(0, n - 1):\n        if posi >= n - 1:\n            break\n        i = posi\n        if s[i] == '(':\n            if s[i + 1] == ')':\n                posi += 2\n                ans -= 2\n                res += 1\n                continue\n            if s[i + 1] == '(':\n                posi += 2\n                ans -= 2\n                res += 1\n                continue\n        elif s[i + 1] == ')':\n            posi += 2\n            ans -= 2\n            res += 1\n            continue\n        else:\n            pos = 0\n            for j in range(i + 1, n):\n                if s[j] == ')':\n                    pos = j\n                    break\n            if pos > i:\n                ans -= pos - i + 1\n                posi = pos + 1\n                res += 1\n                continue\n            else:\n                break\n    print(res, ans)", "def regular(x, s):\n    if s[x - 1] == '(' and s[x] == ')':\n        return True\n    else:\n        False\n\ndef palidrome(x, y, s):\n    while x <= y and s[x] == s[y]:\n        x += 1\n        y -= 1\n    if x >= y:\n        return True\n    else:\n        return False\n\ndef ans():\n    t = int(input())\n    for i in range(0, t):\n        tm = int(input())\n        x = input()\n        op = 0\n        prev = 0\n        j = 1\n        while j < tm:\n            if j - prev == 1 and regular(j, x):\n                prev = j + 1\n                op += 1\n                j += 2\n            elif palidrome(prev, j, x):\n                op += 1\n                prev = j + 1\n                j += 2\n            else:\n                j += 1\n        print(op, tm - prev)\nans()"]