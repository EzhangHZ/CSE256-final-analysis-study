["import collections\nimport heapq\nimport sys\nimport math\nimport bisect\nimport os\nfrom io import BytesIO, IOBase\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    dp = [0] * n\n    dp[0] = l[0]\n    d = collections.defaultdict(int)\n    tot = 0\n    for i in range(1, n):\n        dp[i] = dp[i - 1] + l[i]\n    for j in reversed(range(n)):\n        d[dp[j]] += 1\n        if l[j] == 0:\n            tot += max(d.values())\n            d.clear()\n    tot += d[0]\n    print(tot)\nfor i in range(int(input())):\n    solve()", "import collections\nimport sys\nsys.setrecursionlimit(25000)\ncin = sys.stdin\nread = cin.readline\ncout = sys.stdout\nwrite = cout.write\nir = lambda : int(read())\nrir = lambda : range(int(read()))\nmir = lambda : map(int, read().split())\nlmir = lambda : list(map(int, read().split()))\niin = lambda : int(input())\nriin = lambda : range(int(input()))\nmiin = lambda : map(int, input().split())\nlmiin = lambda : list(map(int, input().split()))\nfor _ in rir():\n    n = ir()\n    a = lmir()\n    sumpref = 0\n    res = 0\n    zero_seen = 0\n    count = collections.defaultdict(int)\n    for i in range(n):\n        sumpref += a[i]\n        if zero_seen == 0:\n            if a[i] == 0:\n                zero_seen = 1\n                count[sumpref] += 1\n            elif sumpref == 0:\n                res += 1\n        else:\n            if a[i] == 0:\n                if count:\n                    res += max(count.values())\n                count = collections.defaultdict(int)\n            sumpref += a[i]\n            count[sumpref] += 1\n    if a[n - 1] != 0:\n        if count:\n            res += max(count.values())\n    else:\n        res += 1\n    print(res)", "import sys\nfrom itertools import accumulate\ninput = sys.stdin.readline\nfrom collections import defaultdict\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    preSum = list(accumulate(a))\n    ans = 0\n    d = defaultdict(int)\n    maxn = 0\n    for i in range(n - 1, -1, -1):\n        d[preSum[i]] += 1\n        maxn = max(maxn, d[preSum[i]])\n        if a[i] == 0:\n            ans += maxn\n            d = defaultdict(int)\n            maxn = 0\n    ans += d[0]\n    return print(ans)\nfor _ in range(int(input())):\n    solve()", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom collections import deque\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    arr = int_arr()\n    prev = 0\n    pref = []\n    for i in range(n):\n        pref.append(prev + arr[i])\n        prev += arr[i]\n    d = {}\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        d[pref[i]] = d.get(pref[i], 0) + 1\n        if arr[i] == 0:\n            ans += max(d.values())\n            d.clear()\n    ans += d.get(0, 0)\n    print(ans)", "from itertools import groupby\n\ndef Most_Common(lst):\n    lst.sort()\n    m = 0\n    for (k, g) in groupby(lst):\n        tmp = len(list(g))\n        if tmp > m:\n            m = tmp\n    return m\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pr_sum = []\n    zero_ind = []\n    S = 0\n    for i in range(n):\n        x = a[i]\n        S += x\n        pr_sum.append(S)\n        if x == 0:\n            zero_ind.append(i)\n    zero_ind.append(n)\n    answer = 0\n    answer += pr_sum[:zero_ind[0]].count(0)\n    N = len(zero_ind)\n    for k in range(N - 1):\n        i = zero_ind[k + 1]\n        j = zero_ind[k]\n        answer += Most_Common(pr_sum[j:i])\n    print(answer)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    ls = [int(x) for x in input().split()]\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + ls[i - 1]\n    s = 0\n    d = {}\n    for i in reversed(range(n)):\n        d[dp[i + 1]] = d.get(dp[i + 1], 0) + 1\n        if ls[i] == 0:\n            s += max(d.values())\n            d.clear()\n    s += d.get(0, 0)\n    print(s)", "import sys\nfrom itertools import accumulate\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    preSum = list(accumulate(a))\n    ans = 0\n    d = defaultdict(int)\n    maxn = 0\n    for i in range(n - 1, -1, -1):\n        d[preSum[i]] += 1\n        maxn = max(maxn, d[preSum[i]])\n        if a[i] == 0:\n            ans += maxn\n            d = defaultdict(int)\n            maxn = 0\n    ans += d[0]\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pref = [0] * (n + 1)\n    for i in range(1, n + 1):\n        pref[i] = pref[i - 1] + a[i - 1]\n    ans = 0\n    d = {}\n    for j in reversed(range(n)):\n        d[pref[j + 1]] = d.get(pref[j + 1], 0) + 1\n        if a[j] == 0:\n            ans += max(d.values())\n            d.clear()\n    ans += d.get(0, 0)\n    print(ans)", "t = int(input())\nwhile t > 0:\n    a = int(input())\n    b = list(map(int, input().split()))\n    ans = 0\n    sum = 0\n    d = {}\n    maxCount = 0\n    for i in range(len(b) - 1, -1, -1):\n        if b[i] == 0:\n            zeroCount = 0\n            if 0 in d:\n                zeroCount = d[0]\n            ans += max(maxCount, 1 + zeroCount)\n            sum = 0\n            d = {}\n            maxCount = 0\n        else:\n            sum += b[i]\n            if sum in d:\n                d[sum] += 1\n            else:\n                d[sum] = 1\n            if d[sum] > maxCount:\n                maxCount = d[sum]\n    if len(d) != 0:\n        ans += d[sum] - 1\n        if sum == 0:\n            ans += 1\n    print(ans)\n    t -= 1", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    chk = 0\n    d = {}\n    s = 0\n    ans = 0\n    for i in range(n):\n        s = s + a[i]\n        if a[i] == 0:\n            if chk == 1:\n                c = 0\n                for x in d:\n                    c = max(c, d[x])\n                d = {}\n                ans += c\n                d[str(s)] = 1\n            else:\n                chk = 1\n                if str(0) in d:\n                    ans += d[str(0)]\n                d = {}\n                d[str(s)] = 1\n        elif str(s) in d:\n            d[str(s)] += 1\n        else:\n            d[str(s)] = 1\n    c = 0\n    if chk == 1:\n        for x in d:\n            if c < d[x]:\n                c = d[x]\n    elif str(0) in d:\n        c = d[str(0)]\n    ans += c\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    Z = []\n    if not A[0]:\n        Z.append(0)\n    C = [A[0]]\n    for i in range(1, n):\n        C.append(C[-1] + A[i])\n        if not A[i]:\n            Z.append(i)\n    z = len(Z)\n    Z.append(n)\n    total = C[:Z[0]].count(0)\n    sum_zeros = 0\n    for i in range(z):\n        if i < z - 1:\n            next_zi = Z[i + 1]\n        else:\n            next_zi = n\n        if next_zi - Z[i] == 1:\n            total += 1\n            continue\n        counter = {val: 0 for val in set(C[Z[i]:next_zi])}\n        max_app = 0\n        for j in range(Z[i], next_zi):\n            counter[C[j]] += 1\n            max_app = max(max_app, counter[C[j]])\n        total += max_app\n    print(total)", "def max_beauty(arr):\n    cumsum = [0 for i in range(len(arr) + 1)]\n    not_first = False\n    first_beauty = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            not_first = True\n        cumsum[i + 1] = cumsum[i] + arr[i]\n        if cumsum[i + 1] == 0 and (not not_first):\n            first_beauty += 1\n    beauty = 0\n    cnt = dict()\n    for i in range(len(arr) - 1, -1, -1):\n        if cumsum[i + 1] in cnt:\n            cnt[cumsum[i + 1]] += 1\n        else:\n            cnt[cumsum[i + 1]] = 1\n        if arr[i] == 0 and cnt:\n            max_v = 0\n            for (k, v) in cnt.items():\n                if v > max_v:\n                    max_v = v\n                    max_k = k\n            if max_v:\n                beauty += max_v\n                cnt.clear()\n    if cnt:\n        beauty += first_beauty\n    return beauty\nfor i in range(int(input())):\n    n = input()\n    arr = [int(i) for i in input().split()]\n    print(max_beauty(arr))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + a[i - 1]\n    s = 0\n    d = {}\n    for i in range(n - 1, -1, -1):\n        d[dp[i + 1]] = d.get(dp[i + 1], 0) + 1\n        if a[i] == 0:\n            s += max(d.values())\n            d.clear()\n    s += d.get(0, 0)\n    print(s)", "for _ in range(int(input())):\n    n = int(input())\n    ls = [int(x) for x in input().split()]\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + ls[i - 1]\n    s = 0\n    d = {}\n    for i in reversed(range(n)):\n        d[dp[i + 1]] = d.get(dp[i + 1], 0) + 1\n        if ls[i] == 0:\n            s += max(d.values())\n            d.clear()\n    s += d.get(0, 0)\n    print(s)", "for _ in range(int(input())):\n    n = int(input())\n    ls = [int(x) for x in input().split()]\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + ls[i - 1]\n    s = 0\n    d = {}\n    for i in reversed(range(n)):\n        d[dp[i + 1]] = d.get(dp[i + 1], 0) + 1\n        if ls[i] == 0:\n            s += max(d.values())\n            d.clear()\n    s += d.get(0, 0)\n    print(s)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().strip().split()]\n    s = []\n    curr = 0\n    for i in range(n):\n        curr += a[i]\n        s.append(curr)\n    ans = 0\n    l = []\n    for i in range(n):\n        if a[i] == 0:\n            l.append(i)\n        a[i] = ans\n        if s[i] == 0:\n            ans += 1\n    already = 0\n    d = {}\n    maxf = 0\n    if l:\n        j = len(l) - 1\n        for i in range(n - 1, -1, -1):\n            d[s[i]] = d.get(s[i], 0) + 1\n            maxf = max(maxf, d[s[i]])\n            if i == l[j]:\n                j -= 1\n                d = {}\n                already += maxf\n                maxf = 0\n        print(max(ans, a[l[0]] + already))\n    else:\n        print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    first_zero = False\n    s = 0\n    poss = []\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            if first_zero == True:\n                count = {}\n                for e in poss:\n                    count[e] = count.get(e, 0) + 1\n                best_val = max(count, key=lambda x: count[x])\n                res += count[best_val]\n                s += best_val\n                poss = []\n            elif first_zero == False:\n                first_zero = True\n        s += arr[i]\n        if first_zero == False and s == 0:\n            res += 1\n        if first_zero:\n            poss.append(-s)\n    if len(poss) > 0:\n        count = {}\n        for e in poss:\n            count[e] = count.get(e, 0) + 1\n        best_val = max(count, key=lambda x: count[x])\n        res += count[best_val]\n        s += best_val\n    print(res)", "from collections import Counter\n\ndef solve(lst):\n    prefix = [0] * len(lst)\n    total = 0\n    for (i, x) in enumerate(lst):\n        total += x\n        prefix[i] = total\n\n    def find(st, ed):\n        elements = prefix[st:ed]\n        elements.sort()\n        elements.append(None)\n        largest = 0\n        largest_e = None\n        curr = 0\n        curr_e = None\n        for (i, ele) in enumerate(elements):\n            if curr_e == ele:\n                curr += 1\n            else:\n                if curr > largest:\n                    largest = curr\n                    largest_e = curr_e\n                curr_e = ele\n                curr = 1\n        return (largest_e, largest)\n    zeros = [i for (i, x) in enumerate(lst) if x == 0]\n    added = 0\n    res = 0\n    if zeros:\n        for i in range(zeros[0]):\n            if prefix[i] == 0:\n                res += 1\n    else:\n        for i in range(len(prefix)):\n            if prefix[i] == 0:\n                res += 1\n    zeros.append(len(lst))\n    for i in range(len(zeros) - 1):\n        nextZero = zeros[i + 1]\n        (val, maxCount) = find(zeros[i], nextZero)\n        prefval = prefix[i]\n        added += val - (prefval + added)\n        res += maxCount\n    return res\nfor _ in range(int(input())):\n    input()\n    lst = list(map(int, input().split()))\n    print(solve(lst))", "import math\nfor i in range(int(input())):\n    input()\n    b = [int(x) for x in input().split()]\n    prefix = []\n    su = 0\n    zero_Count = 0\n    ans = 0\n    for i in range(len(b)):\n        su += b[i]\n        if b[i] == 0:\n            zero_Count += 1\n        if zero_Count == 0 and su == 0:\n            ans += 1\n            continue\n        if zero_Count == 0:\n            continue\n        prefix.append([su, zero_Count])\n    prefix = sorted(prefix, key=lambda x: x[0])\n    v = {}\n    count = 1\n    for j in range(len(prefix)):\n        if j != 0 and prefix[j] == prefix[j - 1]:\n            count += 1\n        else:\n            count = 1\n        if prefix[j][1] not in v:\n            v[prefix[j][1]] = count\n        else:\n            v[prefix[j][1]] = max(count, v[prefix[j][1]])\n    for k in v.keys():\n        ans += v[k]\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfrom random import getrandbits\n\nclass Wrp(int):\n    RANDOM = getrandbits(32)\n\n    def __init__(self, x):\n        int.__init__(x)\n\n    def __hash__(self):\n        return super(Wrp, self).__hash__() ^ self.RANDOM\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    chk = 0\n    d = {}\n    s = 0\n    ans = 0\n    for i in range(n):\n        s = s + a[i]\n        if a[i] == 0:\n            if chk == 1:\n                c = 0\n                for x in d:\n                    c = max(c, d[x])\n                d = {}\n                ans += c\n                d[Wrp(s)] = 1\n            else:\n                chk = 1\n                if Wrp(0) in d:\n                    ans += d[Wrp(0)]\n                d = {}\n                d[Wrp(s)] = 1\n        elif Wrp(s) in d:\n            d[Wrp(s)] += 1\n        else:\n            d[Wrp(s)] = 1\n    c = 0\n    if chk == 1:\n        for x in d:\n            if c < d[x]:\n                c = d[x]\n    elif Wrp(0) in d:\n        c = d[Wrp(0)]\n    ans += c\n    print(ans)", "import sys\nfrom collections import OrderedDict\ninput = sys.stdin.readline\nfrom random import getrandbits\n\nclass Wrp(int):\n    RANDOM = getrandbits(32)\n\n    def __init__(self, x):\n        int.__init__(x)\n\n    def __hash__(self):\n        return super(Wrp, self).__hash__() ^ self.RANDOM\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    chk = 0\n    d = {}\n    s = 0\n    ans = 0\n    for i in range(n):\n        s = s + a[i]\n        if a[i] == 0:\n            if chk == 1:\n                c = 0\n                for x in d:\n                    c = max(c, d[x])\n                d.clear()\n                ans += c\n                d[Wrp(s)] = 1\n            else:\n                chk = 1\n                if Wrp(0) in d:\n                    ans += d[Wrp(0)]\n                d.clear()\n                d[Wrp(s)] = 1\n        elif Wrp(s) in d:\n            d[Wrp(s)] += 1\n        else:\n            d[Wrp(s)] = 1\n    c = 0\n    if chk == 1:\n        for x in d:\n            if c < d[x]:\n                c = d[x]\n    elif Wrp(0) in d:\n        c = d[Wrp(0)]\n    ans += c\n    print(ans)"]