["f = [1]\nmod = 998244353\nfor i in range(1, 1001):\n    f.append(f[i - 1] * i % mod)\n\ndef solve():\n    n = int(input())\n    if n % 2 == 1:\n        return 0\n    return f[n // 2] * f[n // 2] % mod\nnum_test = int(input())\nfor t in range(num_test):\n    print(solve())", "M = 998244353\na = [1]\nfor i in range(1, 501):\n    a += (a[-1] * i % M,)\nfor n in [*map(int, open(0))][1:]:\n    print(~n % 2 * a[n // 2] ** 2 % M)", "mod = 998244353\nfact = [1 for i in range(1001)]\nfor i in range(2, 1000 + 1):\n    fact[i] = i * fact[i - 1] % mod\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n == 2:\n        print(1)\n    elif not n & 1:\n        print(fact[n // 2] ** 2 % mod)\n    else:\n        print(0)", "factorials = [1]\nfor i in range(1, 501):\n    factorials.append(factorials[-1] * i % 998244353)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        print(factorials[n // 2] ** 2 % 998244353)", "a = int(input())\nk = [1]\nfor i in range(1, 1000):\n    k.append(k[-1] * i * i % 998244353)\nfor i in range(a):\n    x = int(input())\n    print(0 if x % 2 == 1 else k[x // 2])", "import sys\ninput = lambda : sys.stdin.readline().strip()\nsys.setrecursionlimit(10 ** 9)\nmod = 998244353\nfact = [1, 1]\nfinv = [1, 1]\ninv = [0, 1]\nfor i in range(2, 10 ** 3 + 1):\n    fact.append(fact[-1] * i % mod)\n    inv.append(inv[mod % i] * (mod - mod // i) % mod)\n    finv.append(finv[-1] * inv[-1] % mod)\nt = int(input())\nfor _ in [0] * t:\n    n = int(input())\n    if n % 2:\n        print(0)\n    else:\n        print(fact[n // 2] * fact[n // 2] % mod)", "import sys\nMOD = 998244353\nstep = [1, 1, 2]\nfor i in range(1005):\n    step.append(step[-1] * len(step) % MOD)\nT = int(sys.stdin.readline().strip())\nfor t in range(T):\n    n = int(sys.stdin.readline().strip())\n    if n % 2 == 1:\n        print(0)\n    else:\n        p = n // 2\n        ans = step[p] ** 2 % MOD\n        print(ans)", "mod = 998244353\nfac = [1]\nfor i in range(1, 1010):\n    fac.append(fac[-1] * i % mod)\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        print(pow(fac[n // 2], 2, mod))", "import math\nt = int(input())\nfact = [0 for i in range(1001)]\nfact[0] = 1\nfor i in range(1, 1001):\n    fact[i] = i * fact[i - 1] % 998244353\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(fact[n // 2] * fact[n // 2] % 998244353)\n    else:\n        print(0)", "t = int(input())\npre = [0] * 1010\npre[2] = 1\nstep = 2\nMOD = 998244353\nfor i in range(4, 1009, 2):\n    pre[i] = pre[i - 2] * step % MOD * step % MOD\n    step += 1\nfor _ in range(t):\n    n = int(input())\n    print(pre[n] % MOD)", "a = [1] * 1003\na[1] = 1\nx = 998244353\nfor i in range(2, 1000):\n    a[i] = a[i - 1] * i % x\nfor t in range(int(input())):\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        print(a[n // 2] ** 2 % x)", "l = [0, 0, 1, 0, 4]\nfor i in range(5, 1002):\n    if i % 2 == 1:\n        l.append(0)\n    else:\n        l.append(l[-2] % 998244353 * (i / 2) * (i / 2) % 998244353)\nfor _ in range(int(input())):\n    n = int(input())\n    print(int(l[n]))", "def fac_iter():\n    n = 1\n    yield n\n    for p in range(1, 1001):\n        n = n * p % 998244353\n        yield n\nfac = [v for v in fac_iter()]\nfor _ in range(int(input())):\n    n = int(input())\n    if n & 1:\n        print(0)\n    else:\n        n >>= 1\n        print(fac[n] * fac[n] % 998244353)", "l = list(map(lambda a: a, [0] * 1001))\nl[0] = 1\nfor i in range(1, 1001):\n    l[i] = l[i - 1] * i % 998244353\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        ans = l[int(n / 2)] ** 2 % 998244353\n        print(ans)", "MOD = 998244353\nfact = [0] * 1010\nfact[0] = 1\nfor i in range(1, 1010):\n    fact[i] = fact[i - 1] * i % MOD\nfor _ in range(int(input())):\n    n = int(input())\n    if n & 1:\n        print(0)\n    else:\n        print(fact[n // 2] * fact[n // 2] % MOD)", "def main():\n    f: list = [1]\n    for i in range(1, 501):\n        f.append(f[-1] * i % 998244353)\n    res = []\n    t = int(input())\n    for _ in range(t):\n        i = int(input())\n        if i % 2 == 1:\n            res.append(0)\n        else:\n            res.append(f[i // 2] ** 2 % 998244353)\n    print('\\n'.join(map(str, res)))\nmain()", "mod = 998244353\nmap = [0] * 1001\nmap[0] = 1\nfor i in range(1, 1001):\n    map[i] = map[i - 1] * i % mod\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(map[n // 2] ** 2 % mod)\n    else:\n        print(0)", "m = 998244353\nfactorials = [1]\nfact = 1\nfor i in range(1, 501):\n    fact = fact * i % m\n    factorials.append(fact)\n\ndef f(n):\n    if n % 2 == 1:\n        return 0\n    answer = factorials[n // 2] * factorials[n // 2] % m\n    return answer\nfor i in range(int(input())):\n    n = int(input())\n    print(f(n))", "import sys\nimport math\nfrom sys import stdin, stdout\n\ndef get_ints_in_variables():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_int():\n    return int(input())\n\ndef get_ints_in_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_of_list(n):\n    return [list(map(int, sys.stdin.readline().strip().split())) for _ in range(n)]\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef main():\n    mod = 998244353\n    fact = [1]\n    ml = 1\n    for i in range(1, 1001):\n        ml = ml % mod * i % mod % mod\n        fact.append(ml)\n    for t in range(get_int()):\n        n = int(input())\n        if n % 2:\n            print(0)\n            continue\n        tp = n // 2\n        res = fact[tp] * fact[tp] % mod\n        print(res)\nmain()", "t = int(input())\nmod = 998244353\nf = []\nf.append(1)\nfor i in range(1, 1000 + 1):\n    val = f[i - 1] * i % mod\n    f.append(int(val))\nfor _ in range(t):\n    n = int(input())\n    ans = 0\n    if n % 2 == 1:\n        ans = 0\n    else:\n        n = int(n / 2)\n        ans = f[n] * f[n] % mod\n    print(ans)", "from itertools import permutations\nN = int(1000.0)\nMOD = 998244353\nfact = [1]\nfor i in range(1, N + 1):\n    fact.append(i * fact[-1] % MOD)\nT = int(input())\nfor tc in range(1, 1 + T):\n    n = int(input())\n    count = 0 if n % 2 else fact[n // 2] * fact[n // 2 - 1] * n // 2 % MOD\n    print(count)", "from functools import lru_cache\nMOD = 998244353\n\n@lru_cache(maxsize=None)\ndef fact(n):\n    if n == 0:\n        return 1\n    return n % MOD * fact(n - 1) % MOD\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2:\n        print(0)\n    else:\n        print(fact(n // 2) * fact(n // 2) % MOD)", "facts = [1]\np = 998244353\nfor i in range(1, 1001):\n    facts.append(i * facts[i - 1] % p)\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2:\n        print(0)\n        continue\n    print(facts[n // 2] ** 2 % p)", "from collections import Counter, defaultdict, deque, namedtuple\nfrom functools import lru_cache\nfrom typing import List, Dict\nimport bisect as b\nimport heapq as h\nimport math as m\nMOD = 998244353\n\ndef inti():\n    return int(input())\n\ndef ints():\n    return [int(x) for x in input().split()]\n\ndef main_tc(factorial):\n    n = inti()\n    if n % 2 == 1:\n        print(0)\n        return\n    answer = factorial[n // 2] * factorial[n // 2]\n    answer %= MOD\n    print(answer)\n\ndef main():\n    factorial = [None] * 1001\n    factorial[0] = 1\n    for i in range(1, 1001):\n        factorial[i] = factorial[i - 1] * i\n        factorial[i] %= MOD\n    tc = inti()\n    for _ in range(tc):\n        main_tc(factorial)\nmain()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 != 0:\n        print(0)\n        continue\n    ans = math.factorial(n // 2) % 998244353\n    print(ans * ans % 998244353)", "def main():\n    t = int(input())\n    res = []\n    factorial = [1]\n    for i in range(2, 1001):\n        factorial.append(factorial[-1] * i)\n    for i in range(1, 1001):\n        if i % 2 == 1:\n            res.append(0)\n        else:\n            res.append(factorial[i // 2 - 1] ** 2 % 998244353)\n    for p in range(t):\n        n = int(input())\n        print(res[n - 1])\nmain()", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        mod = 998244353\n        k = math.factorial(n // 2) % mod\n        print(k * k % mod)", "t = int(input())\nfactorials = [1]\nfor i in range(1, 1001):\n    factorials.append(factorials[-1] * i % 998244353)\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        print(factorials[n // 2] ** 2 % 998244353)", "mod = 998244353\nfac = [1]\nfor i in range(1000):\n    fac.append(fac[i] * (i + 1) % mod)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 != 0:\n        print(0)\n    else:\n        print(fac[n // 2] ** 2 % mod)", "import functools\n\nclass F:\n\n    def __init__(self, max_n):\n        self.cache = [1] * (max_n + 1)\n        for i in range(1, max_n + 1):\n            self.cache[i] = self.cache[i - 1] * i\n\n    def __call__(self, n):\n        return self.cache[n]\nf = F(1000)\n\ndef main():\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        print(pow(f(n // 2), 2, 998244353))\nt = int(input())\nfor _ in range(t):\n    main()", "mod = 998244353\ndp = [1] * 501\nfor i in range(1, 501):\n    dp[i] = i * dp[i - 1] % mod\nfor _ in range(int(input())):\n    n = int(input())\n    if n & 1:\n        print(0)\n    else:\n        ans = dp[n // 2] * dp[n // 2] % mod\n        print(ans)", "l = [1]\nsas = 1\nfor s in range(1, 501):\n    sas *= s\n    l.append(sas)\nt = int(input())\nfor i in range(t):\n    a = int(input())\n    if a % 2 == 1:\n        print('0')\n    else:\n        print(l[a // 2] ** 2 % 998244353)", "from math import factorial\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2:\n        print(0)\n        continue\n    print(pow(factorial(n // 2), 2, 998244353))", "import math\n\ndef factorial(n):\n    return math.factorial(n)\nfor _ in range(int(input())):\n    n = int(input())\n    if n & 1:\n        print(0)\n        continue\n    else:\n        ans = pow(math.factorial(n // 2), 2, 998244353)\n        print(ans)", "from math import factorial\nt = int(input())\nfacts = [1]\nfor i in range(1, 1010):\n    facts.append(facts[-1] * i % 998244353)\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(facts[n // 2] ** 2 % 998244353)\n    else:\n        print(0)", "import math\n\ndef res(n):\n    odd = int((n + 1) / 2)\n    even = n - odd\n    ans = 0\n    if odd > even:\n        return ans\n    else:\n        ans = (math.factorial(odd) % 998244353) ** 2 % 998244353\n        return ans\nt = int(input().strip('\\n'))\nfor i in range(t):\n    n = int(input().strip('\\n'))\n    print(res(n))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2:\n        print(0)\n    else:\n        mod = 998244353\n        x = n // 2\n        t = math.factorial(x)\n        ans = pow(t, 2, mod)\n        print(ans)", "t = int(input())\ngt = [1]\nfor i in range(1, 1001):\n    gt.append(gt[i - 1] * i)\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        x = gt[n // 2]\n        print(x * x % 998244353)", "from math import factorial\nfor jj in range(int(input())):\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        print(pow(factorial(n // 2), 2, 998244353))", "import math\nt = int(input())\nm = 998244353\nwhile t:\n    t -= 1\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        a = math.factorial(n // 2) % m\n        print(a * a % m)", "import sys\nimport math\nimport itertools\nmod = 998244353\n\ndef ri():\n    return int(input())\n\ndef rl():\n    return list(map(int, input().split()))\n\ndef rls():\n    return list(map(str, input().split()))\n\ndef rm():\n    return map(int, input().split())\n\ndef isPowerOfTwo(x):\n    return x and (not x & x - 1)\n\ndef decimalToBinary(n):\n    return bin(n).replace('0b', '')\n\ndef nextPowerOf2(n):\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n\n\ndef highestPowerof2(x):\n    x |= x >> 1\n    x |= x >> 2\n    x |= x >> 4\n    x |= x >> 8\n    x |= x >> 16\n    return x ^ x >> 1\nfor _ in range(ri()):\n    n = ri()\n    if n % 2 == 1:\n        print(0)\n    else:\n        ans = math.factorial(n // 2)\n        ans = ans % mod * ans % mod % mod\n        print(ans)", "a = [1]\nfor i in range(1, 501):\n    a += (a[-1] * i,)\nfor n in [*map(int, open(0))][1:]:\n    print(~n % 2 * a[n // 2] ** 2 % 998244353)", "import math\nimport sys\nimport itertools\nimport fractions\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\nans = [0, 1]\nj = 2\np = 1\nfor i in range(3, 1001):\n    if i % 2 == 0:\n        ans.append(p * j ** 2)\n        p = ans[-1]\n        j += 1\n    else:\n        ans.append(0)\nfor t in wtf[1:]:\n    n = int(t)\n    print(ans[n - 1] % 998244353)", "import math\nT = int(input())\nfor t in range(T):\n    n = float(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        x = math.factorial(n / 2) % 998244353\n        print(x ** 2 % 998244353)", "import sys, math\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    if n % 2 == 1:\n        print(0)\n    else:\n        x = n // 2\n        y = math.factorial(x)\n        print(y * y % 998244353)", "a = [1] * 1005\nfor i in range(1, 1000):\n    a[i] = i * a[i - 1]\ntotal = int(input())\ncnt = 1\nwhile cnt <= total:\n    ans = 0\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        print(a[int(n / 2)] * a[int(n / 2)] % 998244353)\n    cnt += 1", "from calendar import c\nimport sys\nimport math\nT = int(input())\nM = 998244353\nfor _ in range(T):\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        a = math.factorial(n // 2) % M\n        b = a * a % M\n        print(b)", "import sys\nfrom collections import defaultdict\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef factorial(n, facts):\n    for i in range(1, n):\n        facts[i] = i * facts[i - 1]\ntc = inp()\nfacts = [1] * (10 ** 3 + 1)\nfactorial(10 ** 3, facts)\nwhile tc:\n    n = inp()\n    if n % 2 == 1:\n        print(0)\n    else:\n        permutations = facts[n // 2] ** 2 % 998244353\n        print(permutations)\n    tc -= 1", "import math\nfor i in range(int(input())):\n    a = int(input())\n    if a % 2 == 1:\n        print(0)\n    else:\n        print(math.factorial(a // 2) ** 2 % 998244353)", "iter = int(input())\nl = [0] * 501\nl[0] = 1\nl[1] = 1\n\ndef fac(x):\n    if l[x] != 0:\n        return l[x]\n    else:\n        p = 1\n        for i in range(x - 1, -1, -1):\n            if l[i] != 0:\n                p = i\n                break\n        for i in range(p + 1, x + 1):\n            l[i] = l[i - 1] * i\n        return l[x]\nfor j in range(iter):\n    n = int(input())\n    if n % 2 != 0:\n        ans = 0\n    else:\n        ans = fac(n // 2)\n        ans = ans * ans\n    print(ans % 998244353)", "num = [1] * 1005\nfor i in range(1, 1000):\n    num[i] = i * num[i - 1]\ntot = int(input())\ncont = 1\nwhile cont <= tot:\n    aux = 0\n    num2 = int(input())\n    if num2 % 2 == 1:\n        print(0)\n    else:\n        print(num[int(num2 / 2)] * num[int(num2 / 2)] % 998244353)\n    cont += 1", "factorials = [1]\nfor i in range(1, 501):\n    factorials.append(factorials[-1] * i)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        print(factorials[n // 2] ** 2 % 998244353)", "import math\na = int(input())\nfor i in range(a):\n    b = int(input())\n    if b % 2 == 0:\n        l = int(math.factorial(b / 2)) ** 2 % 998244353\n        print(l)\n    else:\n        print(0)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2:\n        print(0)\n    else:\n        print(math.factorial(n // 2) ** 2 % 998244353)", "import math\ncase = int(input())\nfor i in range(case):\n    n = int(input())\n    if n % 2 == 0:\n        print(math.factorial(int(n / 2)) ** 2 % 998244353)\n    else:\n        print(0)", "import math\nfor n in [*map(int, open(0))][1:]:\n    print(~n % 2 * math.factorial(n // 2) ** 2 % 998244353)", "from math import factorial\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        print(factorial(n // 2) ** 2 % 998244353)", "import math\nf = math.factorial\nfor _ in range(int(input())):\n    x = int(input())\n    if x % 2 != 0:\n        print(0)\n    else:\n        print(f(x // 2) ** 2 % 998244353)", "import math\nn = int(input())\nfor i in range(n):\n    s = int(input())\n    if s % 2 == 1:\n        print(0)\n    else:\n        print(math.factorial(s // 2) ** 2 % 998244353)", "import math\nfor u in range(int(input())):\n    n = int(input())\n    if n % 2 != 0:\n        print(0)\n    else:\n        print(math.factorial(n // 2) ** 2 % 998244353)", "from math import factorial\ncas = int(input())\nf = []\nfor j in range(cas):\n    n = int(input())\n    if n % 2 != 0:\n        c = 0\n    else:\n        c = pow(factorial(n // 2), 2) % 998244353\n    f.append(c)\nfor i in range(cas):\n    print(f[i])", "c = int(input())\nimport math\nfor z in range(0, c):\n    n = int(input())\n    if n % 2 == 0:\n        x = math.factorial(n // 2 - 1) ** 2 * (n // 2) * (n // 2)\n        print(x % 998244353)\n    else:\n        print(0)", "import math\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        print(math.factorial(n // 2) ** 2 % 998244353)", "from math import factorial as f\nimport sys\ninput = lambda : sys.stdin.readline().strip()\nm = 998244353\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 != 0:\n        print(0)\n    else:\n        print(f(n // 2) ** 2 % m)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        ans = math.factorial(n // 2) ** 2\n        print(ans % 998244353)", "import math\nn = int(input())\nfor i in range(n):\n    k = int(input())\n    if k % 2 != 0:\n        print(0)\n    else:\n        b = math.factorial(k // 2)\n        print(int(b * b % 998244353))", "import math\nfor n in [*map(int, open(0))][1:]:\n    print(~n % 2 * math.factorial(n // 2) ** 2 % 998244353)", "from math import factorial\nt = int(input())\nwhile t:\n    n = int(input())\n    if n % 2:\n        ans = 0\n    else:\n        ans = factorial(n // 2) ** 2\n    print(ans % 998244353)\n    t -= 1", "from math import factorial\nt = int(input())\nfor _ in range(t):\n    ans = 0\n    n = int(input())\n    if n % 2 == 1:\n        ans = 0\n    else:\n        ans_ = factorial(n // 2)\n        ans += ans_ ** 2\n    ans = ans % 998244353\n    print(ans)", "from math import factorial\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        m = factorial(n // 2) ** 2\n        print(m % 998244353)\n    else:\n        print(0)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 != 0:\n        print(0)\n    else:\n        print(math.factorial(n // 2) ** 2 % 998244353)", "from math import factorial\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 != 0:\n        print(0)\n    else:\n        print(factorial(n // 2) ** 2 % 998244353)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        x = math.factorial(n // 2)\n        print(x ** 2 % 998244353)", "import math\ntc = int(input())\nfor i in range(tc):\n    x = int(input())\n    if x % 2 == 1:\n        print(0)\n    else:\n        f = math.factorial(x // 2)\n        print(f ** 2 % 998244353)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        ans = math.factorial(n // 2) ** 2\n        print(ans % 998244353)", "import math\nk = int(input())\nfor i in range(k):\n    n = int(input())\n    if n % 2 == 1:\n        print('0')\n        continue\n    z = math.factorial(int(n / 2)) ** 2 % 998244353\n    print(str(z))", "from math import factorial\n\ndef solve():\n    n = int(input())\n    if n % 2 == 0:\n        print(factorial(n // 2) ** 2 % 998244353)\n    else:\n        print(0)\nt = int(input())\nfor i in range(1, t + 1):\n    solve()", "import math\nfor i in range(int(input())):\n    ab = int(input())\n    if ab % 2 != 0:\n        print(0)\n    else:\n        print(math.factorial(ab // 2) ** 2 % 998244353)", "from math import factorial\nfrom sys import stdin\ninput = stdin.readline\n\ndef get_string():\n    return stdin.readline().strip()\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        if n % 2 != 0:\n            print(0)\n        else:\n            print(factorial(n // 2) ** 2 % 998244353)\nmain()", "from math import factorial\ncas = int(input())\nlf = []\nfor i in range(cas):\n    n = int(input())\n    if n % 2 == 0:\n        lf.append(pow(factorial(n // 2), 2) % 998244353)\n    else:\n        lf.append(0)\nfor k in range(len(lf)):\n    print(lf[k])", "import math\nt = int(input())\nwhile t:\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        print(math.factorial(int(n / 2)) ** 2 % 998244353)\n    t -= 1", "import sys\nimport math\ndata = sys.stdin.readlines()\nnumCases = int(data[0])\ncases = []\nfor each in range(1, numCases + 1):\n    input_ = data[each].replace('\\n', '')\n    cases.append(int(input_))\nfor n in cases:\n    if n % 2 == 1:\n        print('0')\n    else:\n        temp = math.factorial(n / 2)\n        res = temp * temp % 998244353\n        print(res)", "import math\nfor n in [*map(int, open(0))][1:]:\n    print(~n % 2 * math.factorial(n // 2) ** 2 % 998244353)", "import math\nfor n in [*map(int, open(0))][1:]:\n    print(~n % 2 * math.factorial(n // 2) ** 2 % 998244353)", "from math import factorial\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n        continue\n    print(factorial(n // 2) ** 2 % 998244353)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(math.factorial(n // 2) ** 2 % 998244353)\n    else:\n        print(0)", "import math as m\n\ndef ab(n):\n    if n % 2 == 1:\n        return 0\n    x = n // 2\n    xx = m.factorial(x)\n    return xx * xx % 998244353\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(ab(n))", "from math import factorial as f\nimport sys\ninput = lambda : sys.stdin.readline().strip()\nm = 998244353\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 != 0:\n        print(0)\n    else:\n        print(f(n // 2) ** 2 % m)", "import math\nt = int(input())\nwhile t:\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        print(math.factorial(int(n / 2)) ** 2 % 998244353)\n    t -= 1", "mod = 998244353\n\ndef find(n):\n    ans = 1\n    for i in range(1, n + 1):\n        ans = ans * i % mod\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        f = find(n // 2)\n        ans = f * f % mod\n        print(ans)", "from math import factorial\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        print(factorial(n // 2) ** 2 % 998244353)", "from math import factorial\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2:\n        print(0)\n    else:\n        ans = factorial(n // 2) ** 2\n        print(ans % 998244353)", "mod = 998244353\nfrom sys import stdin, stdout\n\ndef fact(n):\n    f = 1\n    for i in range(1, n + 1):\n        f = f * i % mod\n    return f\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    if n & 1:\n        print(0)\n        continue\n    f = fact(n // 2)\n    print(f * f % mod)", "from math import factorial\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        print(factorial(n // 2) ** 2 % 998244353)", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    n = int(inp())\n    if n % 2 == 1:\n        print(0)\n    else:\n        MOD = 998244353\n        r = 1\n        for i in range(2, n // 2 + 1):\n            r = r * i % MOD\n        print(r * r % MOD)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "import math\nt = int(input())\nfor _ in range(t):\n    ans = 0\n    n = int(input())\n    if n & 1 == 1:\n        print(0)\n        continue\n    h = n // 2\n    ans = math.factorial(h) ** 2\n    ans %= 998244353\n    print(ans)"]