["import sys\ninput = sys.stdin.readline\nR = lambda : map(int, input().split())\nI = lambda : int(input())\nS = lambda : input().rstrip('\\n')\nL = lambda : list(R())\n\ndef solve() -> str:\n    n = I()\n    s = [S() for _ in range(n)]\n    st = set()\n    st2 = set()\n    if any((x[0] == x[-1] for x in s)):\n        return 'YES'\n    else:\n        for x in s:\n            if len(x) == 2 and x[::-1] in st:\n                return 'YES'\n            if len(x) == 3 and (x[::-1][:2] in st2 or x[::-1] in st2):\n                return 'YES'\n            st.add(x[:2])\n            st2.add(x)\n        return 'NO'\nfor _ in range(I()):\n    print(solve())", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    n = int(inp())\n    s = set()\n    e = set()\n    ans = False\n    for i in range(n):\n        x = inp().strip()\n        y = x[::-1]\n        if x == y:\n            ans = True\n        elif y in s or y in e:\n            ans = True\n        elif len(y) > 1 and y[:-1] in s:\n            ans = True\n        s.add(x)\n        if len(x) > 1:\n            e.add(x[:-1])\n    print(['NO', 'YES'][ans])\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "import sys\ninput = sys.stdin.readline\nnum_test_cases = int(input())\nfor test_case_ittr in range(num_test_cases):\n    n = int(input())\n    scenes = [input().strip() for i in range(n)]\n    seen_twos = set()\n    seen_threes = set()\n    seen_prefixes = set()\n    can_make_palindrome = 'NO'\n    for x in scenes:\n        reverse = x[::-1]\n        if x == reverse:\n            can_make_palindrome = 'YES'\n            break\n        if len(x) == 2:\n            if reverse in seen_twos or reverse in seen_prefixes:\n                can_make_palindrome = 'YES'\n                break\n            seen_twos.add(x)\n        elif len(x) == 3:\n            if reverse in seen_threes or reverse[:-1] in seen_twos:\n                can_make_palindrome = 'YES'\n                break\n            seen_threes.add(x)\n            seen_prefixes.add(x[:-1])\n    print(can_make_palindrome)", "def solve():\n    n = int(input())\n    s = set()\n    s2 = set()\n    flg = 0\n    for i in range(n):\n        x = input()\n        if flg == 1:\n            continue\n        n = len(x)\n        xr = x[::-1]\n        if x == xr or xr in s or n == 1:\n            flg = 1\n        if n == 2:\n            if xr in s2:\n                flg = 1\n        if n == 3:\n            if xr[:2] in s:\n                flg = 1\n            s2.add(x[:2])\n        s.add(x)\n    if flg == 0:\n        print('NO')\n    else:\n        print('YES')\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    arr = [input() for i in range(n)]\n    vis = set()\n    al = set()\n    ans = False\n    for i in arr:\n        al.add(i)\n        if i[::-1] in al:\n            ans = True\n            break\n        if len(i) == 3:\n            if i[:0:-1] in al:\n                ans = True\n                break\n            vis.add(i[1::-1])\n        elif i in vis:\n            ans = True\n            break\n    print('YES' if ans else 'NO')", "for _ in range(int(input())):\n    n = int(input())\n    words = []\n    yes = False\n    for _ in range(n):\n        word = input()\n        words.append(word)\n    d = set()\n    substrings = set()\n    for word in words:\n        r = word[::-1]\n        if r == word:\n            print('YES')\n            yes = True\n            break\n        if r in d or r in substrings:\n            print('YES')\n            yes = True\n            break\n        if len(word) == 3:\n            if r[0:2] in d:\n                print('YES')\n                yes = True\n                break\n            substrings.add(word[0:2])\n        d.add(word)\n    if not yes:\n        print('NO')", "def solve():\n    l = list()\n    s = set()\n    n = int(input())\n    for _ in range(n):\n        l.append(input().strip())\n    for _ in range(n):\n        tmp = l[_]\n        le = len(tmp)\n        if le == 1 or tmp == tmp[::-1]:\n            print('YES')\n            return\n        if le == 2:\n            if tmp[::-1] in s:\n                print('YES')\n                return\n        elif le == 3:\n            if tmp[::-1] in s or tmp[-1:-3:-1] in s:\n                print('YES')\n                return\n        s.add(tmp)\n    s = set()\n    for _ in range(n - 1, -1, -1):\n        tmp = l[_]\n        le = len(tmp)\n        if le == 3:\n            if tmp[-2:-4:-1] in s:\n                print('YES')\n                return\n        s.add(tmp)\n    print('NO')\n_t = int(input())\nfor _c in range(_t):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    ans = 'NO'\n    set1 = set()\n    set2 = set()\n    for i in range(n):\n        s = input()\n        ss = s[::-1]\n        if s == ss or s in set2 or s in set1 or (s[1:] in set1):\n            ans = 'YES'\n        set1.add(ss)\n        if len(ss) == 3:\n            set2.add(ss[1:])\n    print(ans)", "def solve():\n    n = int(input())\n    v = [input().strip() for _ in range(n)]\n    p23 = set()\n    p32 = set()\n    p22 = set()\n    p33 = set()\n    for e in v:\n        if e == e[::-1]:\n            print('YES')\n            return\n        if len(e) == 2:\n            if e[::-1] in p22:\n                print('YES')\n                return\n            if e[::-1] in p32:\n                print('YES')\n                return\n            p22.add(e)\n            p23.add(e)\n        if len(e) == 3:\n            if e[::-1] in p33 or e[::-1][:2] in p23:\n                print('YES')\n                return\n            p33.add(e)\n            p32.add(e[:2])\n    print('NO')\n    return\n_t = 1\n_t = int(input())\nfor _ in range(_t):\n    solve()", "def inp(n):\n    (a, b, c) = (set(), set(), set())\n    ans = False\n    for i in range(n):\n        s = input()\n        if not ans:\n            if len(s) == 1:\n                ans = True\n            elif len(s) == 2:\n                b.add(s)\n                k = s[::-1]\n                if k in b:\n                    ans = True\n                for i in 'abcdefghijklmnopqrstuvwxyz':\n                    if k + i in c:\n                        ans = True\n            else:\n                c.add(s)\n                k = s[::-1]\n                if k in c:\n                    ans = True\n                if s[2] + s[1] in b:\n                    ans = True\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    ans = inp(n)\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    ans = 'NO'\n    set1 = set()\n    set2 = set()\n    for i in range(n):\n        s = input()\n        ss = s[::-1]\n        if s == ss or s in set2 or s in set1 or (s[1:] in set1):\n            ans = 'YES'\n        set1.add(ss)\n        if len(ss) == 3:\n            set2.add(ss[1:])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    ans = 'NO'\n    set1 = set()\n    set2 = set()\n    for i in range(n):\n        s = input()\n        ss = s[::-1]\n        if s == ss or s in set2 or s in set1 or (s[1:] in set1):\n            ans = 'YES'\n        set1.add(ss)\n        if len(ss) == 3:\n            set2.add(ss[1:])\n    print(ans)", "for _it in range(int(input())):\n    n = int(input())\n    ans = 'NO'\n    set1 = set()\n    set2 = set()\n    for i in range(n):\n        s = input()\n        ss = s[::-1]\n        if s == ss or s in set2 or s in set1 or (s[1:] in set1):\n            ans = 'YES'\n        set1.add(ss)\n        if len(ss) == 3:\n            set2.add(ss[1:])\n    print(ans)", "for _it in range(int(input())):\n    n = int(input())\n    ans = 'NO'\n    set1 = set()\n    set2 = set()\n    for i in range(n):\n        s = input()\n        ss = s[::-1]\n        if s == ss or s in set2 or s in set1 or (s[1:] in set1):\n            ans = 'YES'\n        set1.add(ss)\n        if len(ss) == 3:\n            set2.add(ss[1:])\n    print(ans)", "for _it in range(int(input())):\n    n = int(input())\n    ans = 'NO'\n    set1 = set()\n    set2 = set()\n    for i in range(n):\n        s = input()\n        ss = s[::-1]\n        if s == ss or s in set2 or s in set1 or (s[1:] in set1):\n            ans = 'YES'\n        set1.add(ss)\n        if len(ss) == 3:\n            set2.add(ss[1:])\n    print(ans)", "for _it in range(int(input())):\n    n = int(input())\n    ans = 'NO'\n    set1 = set()\n    set2 = set()\n    for i in range(n):\n        s = input()\n        ss = s[::-1]\n        if s == ss or s in set2 or s in set1 or (s[1:] in set1):\n            ans = 'YES'\n        set1.add(ss)\n        if len(ss) == 3:\n            set2.add(ss[1:])\n    print(ans)", "def solve(N, S):\n    seen = {}\n    seen_th = {}\n    for word in S:\n        if word == word[::-1] or word[::-1] in seen:\n            return 'YES'\n        if len(word) == 3 and word[1:][::-1] in seen:\n            return 'YES'\n        if len(word) == 2 and word[::-1] in seen_th:\n            return 'YES'\n        if len(word) == 3:\n            seen_th[word[:2]] = 1\n        seen[word] = 1\n    return 'NO'\nfor _ in range(int(input())):\n    print(solve((N := int(input())), [input() for _ in range(N)]))", "num_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 'NO'\n    set1 = set()\n    set2 = set()\n    for i in range(n):\n        s = input()\n        ss = s[::-1]\n        if s == ss or s in set2 or s in set1 or (s[1:] in set1):\n            ans = 'YES'\n        set1.add(ss)\n        if len(ss) == 3:\n            set2.add(ss[1:])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    ans = 'NO'\n    set1 = set()\n    set2 = set()\n    for i in range(n):\n        s = input()\n        if ans == 'YES':\n            continue\n        ss = s[::-1]\n        if s == ss or s in set2 or s in set1 or (s[1:] in set1):\n            ans = 'YES'\n        set1.add(ss)\n        if len(ss) == 3:\n            set2.add(ss[1:])\n    print(ans)", "import sys\nfrom collections import Counter\ninput = sys.stdin.readline\nMAX = sys.maxsize\nsys.setrecursionlimit(10 ** 9)\n\ndef inp():\n    return int(input())\n\ndef read_str():\n    return input().strip()\n\ndef solve(words):\n    s = set(words)\n    for w in s:\n        if len(w) == 1 or w == w[::-1] or w[::-1] in s:\n            return 'YES'\n    aux_3 = Counter()\n    aux_2 = Counter()\n    for w in words:\n        if len(w) == 3:\n            aux_3[w[1:][::-1]] += 1\n        if len(w) == 2:\n            aux_2[w[::-1]] += 1\n    for w in words:\n        if len(w) == 2:\n            aux_2[w[::-1]] -= 1\n            if w in aux_3 and aux_3[w] > 0:\n                return 'YES'\n        if len(w) == 3:\n            aux_3[w[1:][::-1]] -= 1\n            aux_w = w[:-1]\n            if aux_w in aux_2 and aux_2[aux_w] > 0:\n                return 'YES'\n    return 'NO'\nfor _ in range(inp()):\n    words = []\n    for _ in range(inp()):\n        words.append(read_str())\n    print(solve(words))", "for iii in range(int(input())):\n    n = int(input())\n    q = []\n    for i in range(n):\n        q.append(input())\n    q1 = {}\n    q2 = {}\n    x = False\n    for s in q:\n        if s == s[::-1]:\n            x = True\n        elif s in q1 or s in q2:\n            x = True\n        elif len(s) == 3:\n            q3 = s[1:]\n            q4 = s[:2]\n            if q3 in q1:\n                x = True\n            else:\n                q1[s[::-1]] = 0\n                q2[q4[::-1]] = 0\n        else:\n            q1[s[::-1]] = 0\n            q2[s[::-1]] = 0\n        if x:\n            break\n    if x:\n        print('YES')\n    else:\n        print('NO')", "from audioop import reverse\n\ndef isPalindrome(s):\n    if s[0] == s[-1]:\n        return True\n    else:\n        return False\nfor _ in range(int(input())):\n    n = int(input())\n    flag = False\n    numbers = []\n    ans = 0\n    two_letters = set()\n    three_letters = set()\n    for i in range(n):\n        s = input()\n        if ans:\n            continue\n        if isPalindrome(s):\n            ans = 1\n            continue\n        reverseS = s[::-1]\n        if len(s) == 2:\n            if reverseS in two_letters:\n                ans = 1\n                continue\n            if reverseS in three_letters:\n                ans = 1\n                continue\n            two_letters.add(s)\n        elif len(s) == 3:\n            if reverseS in three_letters:\n                ans = 1\n                continue\n            if reverseS[:2] in two_letters:\n                ans = 1\n                continue\n            three_letters.add(s[:2])\n            three_letters.add(s)\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    ans = 'NO'\n    set1 = set()\n    set2 = set()\n    for i in range(n):\n        s = input()\n        ss = s[::-1]\n        if s == ss or s in set2 or s in set1 or (s[1:] in set1):\n            ans = 'YES'\n        set1.add(ss)\n        if len(ss) == 3:\n            set2.add(ss[1:])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    ans = 'NO'\n    (set1, set2) = (set(), set())\n    for i in range(n):\n        s = input()\n        ss = s[::-1]\n        if s == ss or s in set2 or s in set1 or (s[1:] in set1):\n            ans = 'YES'\n        set1.add(ss)\n        if len(ss) == 3:\n            set2.add(ss[1:])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    ans = 'NO'\n    set1 = set()\n    set2 = set()\n    for i in range(n):\n        s = input()\n        ss = s[::-1]\n        if s == ss or s in set2 or s in set1 or (s[1:] in set1):\n            ans = 'YES'\n        set1.add(ss)\n        if len(ss) == 3:\n            set2.add(ss[1:])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    a = set()\n    arr = []\n    flag = False\n    couples = set()\n    for i in range(k):\n        s = input()\n        arr.append(s)\n    for s in arr:\n        if len(s) == 1:\n            flag = True\n            break\n        elif len(s) == 2:\n            if s[::-1] == s or s in a:\n                flag = True\n                break\n            else:\n                a.add(s[::-1])\n                couples.add(s[::-1])\n        elif s[::-1] == s or (s[1] + s[2] in a and s[1] + s[2] in couples) or s in a:\n            flag = True\n            break\n        else:\n            a.add(s[1] + s[0])\n            a.add(s[::-1])\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "def can_form(scenes):\n    for scene in scenes:\n        if len(scene) == 1:\n            return True\n        elif scene[0] == scene[-1]:\n            return True\n    mem2 = {}\n    mem3 = {}\n    for scene in scenes:\n        if len(scene) == 2:\n            if scene[::-1] in mem2:\n                return True\n            mem2[scene] = ''\n        if len(scene) == 3:\n            if scene[1:][::-1] in mem2 and (mem2[scene[1:][::-1]] == scene[0] or mem2[scene[1:][::-1]] == ''):\n                return True\n            if scene[::-1] in mem3:\n                return True\n            mem2[scene[:-1]] = scene[-1]\n            mem3[scene] = ''\n    return False\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    scenes = []\n    for k in range(n):\n        scenes.append(input())\n    if can_form(scenes):\n        print('YES')\n    else:\n        print('NO')", "def is_palindrom(w):\n    if len(w) == 1:\n        return True\n    if len(w) == 2:\n        return w[0] == w[1]\n    if w[0] != w[-1]:\n        return False\n    return is_palindrom(w[1:-1])\n\ndef has_sub_palindrom(words):\n    for w in words:\n        if is_palindrom(w):\n            return True\n    set_of_words_so_far = set()\n    pair_of_threes = set()\n    for w in words:\n        if is_palindrom(w):\n            return True\n        if w[::-1] in set_of_words_so_far:\n            return True\n        if len(w) == 3:\n            if w[2] + w[1] in set_of_words_so_far:\n                return True\n            pair_of_threes.add(w[0] + w[1])\n        if len(w) == 2:\n            if w[::-1] in pair_of_threes:\n                return True\n        set_of_words_so_far.add(w)\n    return False\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    words = [input() for _ in range(n)]\n    if has_sub_palindrom(words):\n        print('YES')\n    else:\n        print('NO')", "for _it in range(int(input())):\n    n = int(input())\n    ans = 'NO'\n    set1 = set()\n    set2 = set()\n    for i in range(n):\n        s = input()\n        ss = s[::-1]\n        if s == ss or s in set2 or s in set1 or (s[1:] in set1):\n            ans = 'YES'\n        set1.add(ss)\n        if len(ss) == 3:\n            set2.add(ss[1:])\n    print(ans)", "ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    x = dict()\n    q = False\n    for i in range(n):\n        s = input()\n        x[s] = 1\n        if len(s) == 1:\n            q = True\n        if s not in x:\n            x[s] = 1\n        s1 = s[::-1]\n        if s1 in x:\n            q = True\n        if len(s) == 3:\n            s1 = s[1:]\n            s1 = s1[::-1]\n            if s1 in x and x[s1] == 1:\n                q = True\n            s1 = s[:2]\n            x[s1] = 0\n    if q == True:\n        ans.append('YES')\n    else:\n        ans.append('NO')\nprint('\\n'.join([str(i) for i in ans]))", "for _it in range(int(input())):\n    n = int(input())\n    ans = 'NO'\n    set1 = set()\n    set2 = set()\n    for i in range(n):\n        s = input()\n        ss = s[::-1]\n        if s == ss or s in set2 or s in set1 or (s[1:] in set1):\n            ans = 'YES'\n        set1.add(ss)\n        if len(ss) == 3:\n            set2.add(ss[1:])\n    print(ans)", "for _it in range(int(input())):\n    n = int(input())\n    ans = 'NO'\n    set1 = set()\n    set2 = set()\n    for i in range(n):\n        s = input()\n        ss = s[::-1]\n        if s == ss or s in set2 or s in set1 or (s[1:] in set1):\n            ans = 'YES'\n        set1.add(ss)\n        if len(ss) == 3:\n            set2.add(ss[1:])\n    print(ans)", "def evaluate(a):\n    vals = {}\n    for x in a:\n        if len(x) == 1:\n            return True\n        elif len(x) == 2 and x[0] == x[1]:\n            return True\n        elif len(x) == 3 and x[0] == x[2]:\n            return True\n        elif len(x) == 2:\n            if x in vals:\n                return True\n            vals[x[1] + x[0]] = 2\n        elif len(x) == 3:\n            if x in vals:\n                return True\n            if x[1] + x[2] in vals and vals[x[1] + x[2]] == 2:\n                return True\n            vals[x[2] + x[1] + x[0]] = 3\n            vals[x[1] + x[0]] = 3\n    return False\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    for x in range(n):\n        v = input()\n        a.append(v)\n    val = evaluate(a)\n    if val:\n        print('YES')\n    else:\n        print('NO')", "T = int(input())\n\ndef solve():\n    set_strings = set()\n    n = int(input())\n    answer = 'NO'\n    for i in range(n):\n        s = input()\n        set_strings.add((s, len(s)))\n        if len(s) == 3:\n            set_strings.add((s[:2], len(s)))\n        if (s[::-1], len(s)) in set_strings:\n            answer = 'YES'\n        if len(s) == 3 and (s[::-1][:2], 2) in set_strings:\n            answer = 'YES'\n        if len(s) == 2 and (s[::-1][:2], 3) in set_strings:\n            answer = 'YES'\n    return answer\nfor t in range(T):\n    print(solve())", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = []\n    c = 0\n    for i in range(n):\n        s = input()\n        if len(s) == 1:\n            c = 1\n        elif s[0] == s[-1]:\n            c = 1\n        a.append(s)\n    if c == 1:\n        print('YES')\n        continue\n    d = {}\n    for i in a:\n        f = i[:2]\n        b = i[len(i) - 2:len(i)][::-1]\n        if b in d:\n            if len(i) == 2:\n                print('YES')\n                break\n            elif i[0] in d[b] or '#' in d[b]:\n                print('YES')\n                break\n        m = '#'\n        if len(i) == 3:\n            m = i[-1]\n        if f in d:\n            d[f].add(m)\n        else:\n            d[f] = set([m])\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    ans = 'NO'\n    set1 = set()\n    set2 = set()\n    for i in range(n):\n        s = input()\n        ss = s[::-1]\n        if s == ss or s in set2 or s in set1 or (s[1:] in set1):\n            ans = 'YES'\n        set1.add(ss)\n        if len(ss) == 3:\n            set2.add(ss[1:])\n    print(ans)", "import sys\nimport re\nimport math\nfrom math import log2 as lg\nfrom math import gcd\nfrom decimal import *\nfrom collections import deque\nimport random\nimport heapq\nimport itertools\nimport datetime\nconst = 1000000007\nep = 1e-08\n\ndef get():\n    return list(map(int, input().split()))\nn = int(input())\nfor i in range(n):\n    m = int(input())\n    ok = False\n    d = {}\n    d3 = {}\n    for j in range(m):\n        curr = input()\n        if ok:\n            continue\n        if len(curr) == 1:\n            ok = True\n        elif len(curr) == 2 and curr[0] == curr[1]:\n            ok = True\n        elif len(curr) == 3 and curr[0] == curr[1] and (curr[1] == curr[2]):\n            ok = True\n        elif curr == curr[::-1]:\n            ok = True\n        elif len(curr) == 2:\n            temp = curr[::-1]\n            if temp in d or temp in d3:\n                ok = True\n            d[curr] = 0\n        elif len(curr) == 3:\n            lasttwo = curr[2] + curr[1]\n            if lasttwo in d:\n                ok = True\n            elif lasttwo in d3 and curr[0] in d3[lasttwo]:\n                ok = True\n            firsttwo = curr[0] + curr[1]\n            if firsttwo in d3:\n                d3[firsttwo][curr[2]] = 0\n            else:\n                d3[firsttwo] = {}\n                d3[firsttwo][curr[2]] = 0\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    ans = 'NO'\n    set1 = set()\n    set2 = set()\n    for i in range(n):\n        s = input()\n        ss = s[::-1]\n        if s == ss or s in set2 or s in set1 or (s[1:] in set1):\n            ans = 'YES'\n        set1.add(ss)\n        if len(ss) == 3:\n            set2.add(ss[1:])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    a = set()\n    b = set()\n    t = 0\n    for i in range(n):\n        s = input()\n        arr.append(s)\n    for s in arr:\n        if len(s) == 1:\n            t = 1\n            break\n        elif len(s) == 2:\n            if s[::-1] == s or s in a:\n                t = 1\n                break\n            else:\n                a.add(s[::-1])\n                b.add(s[::-1])\n        elif s[::-1] == s or (s[1] + s[2] in a and s[1] + s[2] in b) or s in a:\n            t = 1\n            break\n        else:\n            a.add(s[1] + s[0])\n            a.add(s[::-1])\n    if t == 1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    z = []\n    for i in range(n):\n        z.append(str(input()))\n    f = False\n    for s in z:\n        if s == s[::-1]:\n            print('YES')\n            f = True\n            break\n    if f:\n        continue\n    seen = set()\n    for s in z:\n        if s[::-1] in seen:\n            print('YES')\n            f = True\n            break\n        seen.add(s)\n    if f:\n        continue\n    seen = set()\n    for s in z:\n        if len(s) == 2:\n            seen.add(s)\n        else:\n            trail_2 = s[1:]\n            trail_2 = trail_2[::-1]\n            if trail_2 in seen:\n                print('YES')\n                f = True\n                break\n    if f:\n        continue\n    seen = set()\n    for s in z:\n        if len(s) == 3:\n            seen.add(s[:2])\n        elif s[::-1] in seen:\n            print('YES')\n            f = True\n            break\n    if not f:\n        print('NO')", "t = int(input())\nout = ''\nfor _ in range(t):\n    n = int(input())\n    ans = 'NO\\n'\n    count2 = set()\n    count3 = set()\n    for z in range(n):\n        word = input()\n        if len(word) == 1:\n            ans = 'YES\\n'\n            continue\n        elif len(word) == 3:\n            count3.add(word)\n            count3.add(word[:2])\n            if word[1:][::-1] in count2 or word[::-1] in count3:\n                ans = 'YES\\n'\n                continue\n        else:\n            count2.add(word)\n            if word[::-1] in count2 or word[::-1] in count3:\n                ans = 'YES\\n'\n                continue\n    out += ans\nprint(out)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(input())\n    s = set()\n    f = False\n    for i in range(n):\n        r = l[i][::-1]\n        if len(l[i]) == 1 or r == l[i]:\n            f = True\n            break\n        if r in s or (len(r) == 3 and r[0:2] in s):\n            f = True\n            break\n        if len(l[i]) == 2:\n            for c in 'abcdefghijklmnopqrstuvwxyz':\n                if r + c in s:\n                    f = True\n                    break\n        s.add(l[i])\n    if not f:\n        print('NO')\n    else:\n        print('YES')", "from typing import List, Set\n\ndef solve() -> bool:\n    n = int(input())\n    strings: List[str] = []\n    for _ in range(n):\n        strings.append(input())\n    iterated: Set[str] = set()\n    for string in strings:\n        if string[0] == string[-1]:\n            return True\n        if len(string) == 2:\n            rev = string[1] + string[0]\n            if rev in iterated:\n                return True\n            for i in range(26):\n                _rev = rev + chr(97 + i)\n                if _rev in iterated:\n                    return True\n        elif len(string) == 3:\n            rev = string[2] + string[1]\n            if rev in iterated:\n                return True\n            rev += string[0]\n            if rev in iterated:\n                return True\n        else:\n            raise RuntimeError(f\"Shouldn't reach here: len({string}) = {len(string)}\")\n        iterated.add(string)\n    return False\nresults: List[str] = []\nfor _ in range(int(input())):\n    results.append('YES' if solve() else 'NO')\nprint('\\n'.join(results))", "for _ in range(int(input())):\n    n = int(input())\n    flag = False\n    arr = []\n    (a, b, c) = ({}, {}, {})\n    for i in range(n):\n        x = input()\n        arr.append(x)\n        if len(x) == 1:\n            flag = True\n        elif len(x) == 2:\n            a[x] = i\n        elif len(x) == 3:\n            b[x] = i\n            c[x[1:]] = i\n    if flag:\n        print('YES')\n        continue\n    for (i, x) in enumerate(arr):\n        flag = False\n        if len(x) == 2:\n            flag = a.get(x[::-1], -1) >= i or c.get(x[::-1], -1) >= i\n        elif len(x) == 3:\n            flag = b.get(x[::-1], -1) >= i or a.get(x[1::-1], -1) >= i\n        if flag:\n            print('YES')\n            break\n    else:\n        print('NO')", "def solve_case(n, s):\n    d = set()\n    for i in s:\n        if i == i[::-1]:\n            return 'YES'\n    for i in s:\n        if i[::-1] in d:\n            return 'YES'\n        if len(i) == 2:\n            for j in range(26):\n                if i[::-1] + chr(ord('a') + j) in d:\n                    return 'YES'\n        elif i[-2:][::-1] in d:\n            return 'YES'\n        d.add(i)\n    return 'NO'\n\ndef solve():\n    t = int(input())\n    cases = []\n    for i in range(t):\n        n = int(input())\n        s = [input() for i in range(n)]\n        cases.append([n, s])\n    for case in cases:\n        (n, s) = (case[0], case[1])\n        print(solve_case(n, s))\nsolve()", "import sys\nfrom math import sqrt, gcd\nfrom collections import deque, Counter\nsys.setrecursionlimit(10 ** 8)\nI = lambda : int(input())\nS = lambda : input().strip()\nM = lambda : map(int, input().strip().split())\nL = lambda : list(map(int, input().strip().split()))\nmod = 1000000007\nfor _ in range(I()):\n    n = I()\n    (d, d2) = ({}, {})\n    flag = 0\n    for i in range(n):\n        s = S()\n        if s == s[::-1]:\n            flag = 1\n        elif len(s) == 2 and s[::-1] in d:\n            flag = 1\n        elif len(s) == 3 and (s[::-1] in d or (s[1:3][::-1] in d and s[1:3][::-1] in d2)):\n            flag = 1\n        if len(s) == 2:\n            (d[s], d2[s]) = (1, 1)\n        elif len(s) == 3:\n            d[s[0:2]] = 1\n            d[s] = 1\n    print('YES' if flag else 'NO')", "def evaluate(a):\n    vals = set()\n    v = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for x in a:\n        if len(x) == 1:\n            return True\n        elif len(x) == 2 and x[0] == x[1]:\n            return True\n        elif len(x) == 3 and x[0] == x[2]:\n            return True\n        elif len(x) == 2:\n            if x[1] + x[0] in vals:\n                return True\n            for i in v:\n                j = x[1] + x[0] + i\n                if j in vals:\n                    return True\n            vals.add(x)\n        elif len(x) == 3:\n            if x[2] + x[1] + x[0] in vals:\n                return True\n            if x[2] + x[1] in vals:\n                return True\n            vals.add(x)\n    return False\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    for x in range(n):\n        v = input()\n        a.append(v)\n    val = evaluate(a)\n    if val:\n        print('YES')\n    else:\n        print('NO')", "alphabet_in_lowercase = {chr(i) for i in range(97, 123)}\nfor i in range(int(input())):\n    (lis, out, k) = (set(), 'NO', False)\n    for j in range(int(input())):\n        s = input()\n        if not k:\n            revs = ''.join(reversed(s))\n            if s == revs or revs in lis:\n                out = 'YES'\n                k = True\n            elif lis:\n                d = len(s)\n                if d == 2:\n                    for q in alphabet_in_lowercase:\n                        if revs + q in lis:\n                            out = 'YES'\n                            k = True\n                else:\n                    revkey = ''.join(reversed(s[1:]))\n                    if revkey in lis:\n                        out = 'YES'\n                        k = True\n        lis.add(s)\n    print(out)", "alphabet_in_lowercase = {chr(i) for i in range(97, 123)}\nfor i in range(int(input())):\n    (lis, out, k) = (set(), 'NO', False)\n    for j in range(int(input())):\n        s = input()\n        if not k:\n            revs = ''.join(reversed(s))\n            if s == revs or revs in lis:\n                out = 'YES'\n                k = True\n            elif lis:\n                d = len(s)\n                if d == 2:\n                    for q in alphabet_in_lowercase:\n                        if revs + q in lis:\n                            out = 'YES'\n                            k = True\n                else:\n                    revkey = ''.join(reversed(s[1:]))\n                    if revkey in lis:\n                        out = 'YES'\n                        k = True\n        lis.add(s)\n    print(out)", "alphabet_in_lowercase = {chr(i) for i in range(97, 123)}\nfor i in range(int(input())):\n    (lis, out, k) = (set(), 'NO', False)\n    for j in range(int(input())):\n        s = input()\n        if not k:\n            revs = ''.join(reversed(s))\n            if s == revs or revs in lis:\n                (out, k) = ('YES', True)\n            elif lis:\n                d = len(s)\n                if d == 2:\n                    for q in alphabet_in_lowercase:\n                        if revs + q in lis:\n                            (out, k) = ('YES', True)\n                else:\n                    revkey = ''.join(reversed(s[1:]))\n                    if revkey in lis:\n                        (out, k) = ('YES', True)\n        lis.add(s)\n    print(out)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [input() for _ in range(n)]\n    for e in a:\n        if e == ''.join(reversed(e)):\n            print('YES')\n            break\n    else:\n        s = set()\n        for e in a:\n            if ''.join(reversed(e)) in s:\n                print('YES')\n                break\n            s.add(e)\n        else:\n            s2 = set()\n            s3 = set()\n            for e in a:\n                if len(e) == 2 and ''.join(reversed(e)) in s3:\n                    print('YES')\n                    break\n                if len(e) == 3 and ''.join(reversed(e[1:])) in s2:\n                    print('YES')\n                    break\n                if len(e) == 2:\n                    s2.add(e)\n                if len(e) == 3:\n                    s3.add(e[:2])\n            else:\n                print('NO')", "for _ in range(int(input())):\n    flag = False\n    m = {}\n    mp = {}\n    ss = []\n    for i in range(int(input())):\n        st = input()\n        ss.append(st)\n    for s in ss:\n        if s[0] == s[-1]:\n            flag = True\n            break\n        else:\n            m[s] = len(s)\n            mp[s] = len(s)\n            s_reverse = s\n            s_reverse = ''.join(reversed(s_reverse))\n            if m.get(s_reverse) == len(s):\n                flag = True\n                break\n            if len(s) == 3:\n                s_front = s[0:2]\n                s_later = s[1:3]\n                s_later = ''.join(reversed(s_later))\n                m[s_front] = 2\n                if m.get(s_later) == 2 and mp.get(s_later) == 2:\n                    flag = True\n                    break\n    if flag:\n        print('YES')\n    else:\n        print('NO')\n    m.clear()\n    mp.clear()", "chars = 'abcdefghijklmnopqrstuvwxyz'\nfor _ in range(int(input())):\n    n = int(input())\n    s = set()\n    for i in range(n):\n        t = input()\n        if t == t[::-1]:\n            print('YES')\n            for j in range(i + 1, n):\n                input()\n            break\n        if len(t) == 3 and (t[::-1] in s or t[1:][::-1] in s):\n            print('YES')\n            for j in range(i + 1, n):\n                input()\n            break\n        if len(t) == 2 and t[::-1] in s:\n            print('YES')\n            for j in range(i + 1, n):\n                input()\n            break\n        if len(t) == 2:\n            found = False\n            for c in chars:\n                if t[::-1] + c in s:\n                    print('YES')\n                    for j in range(i + 1, n):\n                        input()\n                    found = True\n                    break\n            if found:\n                break\n        s.add(t)\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    for c in s:\n        if c[0] == c[-1]:\n            print('YES')\n            return\n    for c in s:\n        if len(c) == 2:\n            if freq[ord(c[1]) - ord('a')][ord(c[0]) - ord('a')][26]:\n                print('YES')\n                return\n            freq[ord(c[0]) - ord('a')][ord(c[1]) - ord('a')][26] = 2\n        else:\n            if freq[ord(c[2]) - ord('a')][ord(c[1]) - ord('a')][ord(c[0]) - ord('a')] or freq[ord(c[2]) - ord('a')][ord(c[1]) - ord('a')][26] == 2:\n                print('YES')\n                return\n            freq[ord(c[0]) - ord('a')][ord(c[1]) - ord('a')][26] = max(1, freq[ord(c[0]) - ord('a')][ord(c[1]) - ord('a')][26])\n            freq[ord(c[0]) - ord('a')][ord(c[1]) - ord('a')][ord(c[2]) - ord('a')] = 1\n    print('NO')\nfor _ in range(int(input().strip())):\n    n = int(input().strip())\n    s = []\n    for _ in range(n):\n        s.append(input().strip())\n    freq = [[[0 for _ in range(27)] for _ in range(26)] for _ in range(26)]\n    solve()", "def main():\n    n = int(input())\n    ss = [(list(input()), i) for i in range(n)]\n    ssr = [(s[::-1], i) for (s, i) in ss]\n    ss.sort()\n    ssr.sort()\n    p1 = 0\n    p2 = 0\n    while p1 < n and p2 < n:\n        (s1, i1) = ss[p1]\n        (s2, i2) = ssr[p2]\n        ml = min(len(s1), len(s2))\n        if s1 == s2 or (i1 < i2 and s1[:ml] == s2[:ml]):\n            print('YES')\n            return\n        if s1 < s2:\n            p1 += 1\n        else:\n            p2 += 1\n    print('NO')\nfor _ in range(int(input())):\n    main()", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    A = []\n    d = defaultdict(lambda : 0)\n    for i in range(n):\n        s = input()\n        A.append(s)\n        d[s] += 1\n    ok = False\n    for i in range(n):\n        o = A[i]\n        o = o[::-1]\n        if o == o[::-1] or d[o] > 0:\n            ok = True\n        for j in range(26):\n            l = chr(j + 97) + o\n            if d[l] > 0:\n                ok = True\n        if len(o) == 3:\n            if d[o[1:]] > 0:\n                ok = True\n        d[A[i]] -= 1\n    if ok:\n        print('YES')\n    else:\n        print('NO')"]