["import sys\ninput = sys.stdin.readline\nimport bisect\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    w = list(map(int, input().split()))\n    d = []\n    s = 0\n    for i in w:\n        j = bisect.bisect_left(d, i)\n        d.insert(j, i)\n        s += j\n    print(s)", "import sys\nread = lambda : sys.stdin.readline()\nfrom bisect import bisect_left\nfor _ in range(int(read())):\n    (n, m) = map(int, read().split())\n    a = list(map(int, read().split()))\n    khaali = []\n    ans = 0\n    for num in a:\n        idx = bisect_left(khaali, num)\n        khaali.insert(idx, num)\n        ans += idx\n    print(ans)", "import sys\nread = lambda : sys.stdin.readline()\nfrom bisect import bisect_left\nfor _ in range(int(read())):\n    (n, m) = map(int, read().split())\n    a = list(map(int, read().split()))\n    khaali = []\n    ans = 0\n    for num in a:\n        idx = bisect_left(khaali, num)\n        khaali.insert(idx, num)\n        ans += idx\n    print(ans)", "import bisect\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    h = []\n    s = 0\n    for i in l:\n        j = bisect.bisect_left(h, i)\n        s += j\n        h.insert(j, i)\n    print(s)", "import bisect\n\ndef solve(s):\n    L = sorted(range(len(s)), key=lambda i: (s[i], -i))\n    Seen = []\n    ans = 0\n    for x in L:\n        i = bisect.bisect_left(Seen, x)\n        ans += i\n        Seen.insert(i, x)\n    return ans\nfor _ in range(int(input())):\n    __ = input()\n    sights = list(map(int, input().split()))\n    print(solve(sights))", "from collections import deque, defaultdict, Counter\nfrom itertools import product, groupby, permutations, combinations, accumulate, zip_longest, combinations_with_replacement\nfrom math import gcd, floor, inf, log2, sqrt, log10, factorial\nfrom bisect import bisect_right, bisect_left, insort_left\nfrom statistics import mode\nfrom string import ascii_lowercase, ascii_uppercase\nfrom heapq import heapify, heappop, heappush, heappushpop, heapreplace, nlargest, nsmallest, merge\nfrom copy import deepcopy\ncases = int(input())\nfor _ in range(cases):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    new_arr = []\n    ans = 0\n    for num in arr:\n        ans += bisect_left(new_arr, num)\n        insort_left(new_arr, num)\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    a = sorted(arr)\n    d = {}\n    for i in range(n * m):\n        if a[i] in d:\n            d[a[i]].append(i)\n        else:\n            d[a[i]] = [i]\n    res = [0] * (n * m)\n    incv = 0\n    for i in arr:\n        k = d[i].pop()\n        res[k] = 1\n        incv += sum(res[:k])\n    print(incv)", "TESTS = int(input())\nfor t in range(TESTS):\n    (n, m) = map(int, input().split())\n    people = list(map(int, input().split()))\n    seats = people.copy()\n    seats.sort()\n    lookup = {}\n    for (i, s) in enumerate(seats):\n        if s not in lookup.keys():\n            lookup[s] = [i]\n        else:\n            lookup[s].append(i)\n    inconvenience = 0\n    grid = [0] * m\n    for p in people:\n        index = lookup[p].pop(-1)\n        grid[index] = 1\n        inconvenience += grid[:index].count(1)\n    print(inconvenience)", "def main():\n    from sys import stdin\n    from itertools import islice\n    tkns = map(int, stdin.read().split())\n    t = next(tkns)\n    for _ in range(t):\n        (n, m) = (next(tkns), next(tkns))\n        p = [0] * m\n        a = islice(tkns, m)\n        ans = 0\n        for (s, _) in sorted(enumerate(a), key=lambda t: (t[1], -t[0])):\n            ans += sum(islice(p, s))\n            p[s] = 1\n        print(ans)\nmain()", "def solve(arr):\n    targets = [0] * len(arr)\n    seats = [0] * len(arr)\n    result = sorted([(v, i) for (i, v) in enumerate(arr)], key=lambda t: (t[0], -t[1]))\n    idx = 0\n    x = 0\n    for (place, i) in result:\n        targets[i] = idx\n        idx += 1\n    for (guy, place) in zip(arr, targets):\n        x += sum(seats[:place])\n        seats[place] = 1\n    return x\nfor _ in '_' * int(input()):\n    input()\n    print(solve([*map(int, input().split())]))", "T = int(input())\nwhile T > 0:\n    T -= 1\n    [n, m] = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = a.copy()\n    b.sort()\n    M = {}\n    for i in range(m):\n        M[b[i]] = i + 1\n    ans = 0\n    seats = []\n    for i in range(m + 1):\n        seats.append(0)\n    for i in range(m):\n        seat = M[a[i]]\n        M[a[i]] -= 1\n        ans += sum(seats[:seat])\n        seats[seat] = 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = []\n    mm = list(map(int, input().split()))\n    for i in range(m):\n        a.append([mm[i], i])\n    a = sorted(a, key=lambda x: (x[0], -x[1]))\n    for i in range(m):\n        a[i].append(i)\n    a = sorted(a, key=lambda x: x[1])\n    res = [0 for i in range(m)]\n    rr = 0\n    for el in a:\n        rr += sum(res[0:el[-1]])\n        res[el[-1]] = 1\n    print(rr)", "import sys\ninput = sys.stdin.readline\n\ndef s(a):\n    n = len(a)\n    r = 0\n    for i in range(n):\n        if a[i] == 0:\n            if i > 0 and a[i - 1] == 1 or (i + 1 < n and a[i + 1] == 1):\n                r += 2\n            else:\n                r += 1\n    return r\n\ndef solve():\n    (n, m) = map(int, input().split())\n    i = 0\n    a = [0] * (n * m)\n    for v in map(int, input().split()):\n        a[i] = (v, -i)\n        i += 1\n    a.sort()\n    b = [0] * (n * m)\n    for i in range(n * m):\n        b[-a[i][1]] = i\n    h = [[0] * m for i in range(n)]\n    r = 0\n    for i in range(n * m):\n        j = b[i]\n        (y, x) = divmod(j, m)\n        z = x\n        H = h[y]\n        while z >= 0:\n            r += H[z]\n            z = (z & z + 1) - 1\n        z = x\n        while z < m:\n            H[z] += 1\n            z = z | z + 1\n    print(r)\nfor i in range(int(input())):\n    solve()", "import sys\nimport math as mt\nimport collections as cc\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\nxor = [0]\nfor tc in range(int(input())):\n    (n, m) = I()\n    ar = I()\n    f = cc.defaultdict(int)\n    temp = sorted(ar)\n    ans = 0\n    for i in range(1, m):\n        if temp[i] != temp[i - 1]:\n            f[temp[i - 1]] = i - 1\n    f[temp[-1]] = m - 1\n    visi = [0] * m\n    for i in range(m):\n        cur = f[ar[i]]\n        visi[cur] = 1\n        f[ar[i]] -= 1\n        ans += sum(visi[:cur])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    s = 0\n    a = []\n    for i in range(m):\n        a.append(l[i])\n        a.sort()\n        s = s + a.index(l[i])\n    print(s)", "T = int(input())\nfor t in range(T):\n    (n, m) = map(int, input().split())\n    a = list(enumerate(map(int, input().split())))\n    a.sort(key=lambda x: (x[1], x[0]))\n    first = 0\n    num = a[0][1]\n    for i in range(1, n * m):\n        if a[i][1] != num:\n            a[first:i] = reversed(a[first:i])\n            first = i\n            num = a[i][1]\n        if i % m == m - 1:\n            a[first:i + 1] = reversed(a[first:i + 1])\n            first = i + 1\n    indxs = [None] * (n * m)\n    for i in range(n * m):\n        indxs[a[i][0]] = i\n    cinema = [[0] * m for _ in range(n)]\n    ans = 0\n    for i in range(n * m):\n        row = indxs[i] // m\n        seat = indxs[i] % m\n        ans += sum(cinema[row][:seat])\n        cinema[row][seat] = 1\n    print(ans)", "n = int(input())\ni = 0\nwhile i < n:\n    m2 = input().split()\n    m = int(m2[1])\n    st = input().split()\n    k = 0\n    inc = 0\n    p = []\n    while k < m:\n        s = int(st[k])\n        p.append(s)\n        p.sort()\n        inc = p.index(s) + inc\n        k = k + 1\n    print(inc)\n    i = i + 1", "n = int(input())\nfor i in range(n):\n    sm = 0\n    (a, b) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    while len(arr) != 0:\n        k = arr.index(max(arr))\n        sm += k\n        arr.pop(k)\n    print(sm)", "def CountInconv(arr):\n    inversions = 0\n\n    def CountInconvSort(arr):\n\n        def CountSplit(lArr, rArr):\n            i = 0\n            j = 0\n            k = 0\n            nonlocal inversions\n            mArr = []\n            while i < len(lArr) and j < len(rArr):\n                if lArr[i] >= rArr[j]:\n                    mArr.append(lArr[i])\n                    i += 1\n                else:\n                    mArr.append(rArr[j])\n                    j += 1\n                    inversions += len(lArr) - i\n                k += 1\n            if i < len(lArr):\n                mArr += lArr[i:]\n            if j < len(rArr):\n                mArr += rArr[j:]\n            return mArr\n        if len(arr) <= 1:\n            return arr\n        leftArr = CountInconvSort(arr[:len(arr) // 2])\n        rightArr = CountInconvSort(arr[len(arr) // 2:])\n        sortedArr = CountSplit(leftArr, rightArr)\n        return sortedArr\n    CountInconvSort(arr)\n    return inversions\ncases = int(input())\nfor case in range(cases):\n    (r, c) = [int(x) for x in input().split()]\n    seats = [int(x) for x in input().split()]\n    print(CountInconv(seats))", "from typing import Collection\nfrom collections import Counter\nt = int(input())\nfor q in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    c = Counter(arr)\n    lis = sorted(arr)\n    vec = [0 for i in range(m)]\n    count = 0\n    for i in range(m):\n        ind = lis.index(arr[i])\n        count += vec[:ind].count(1)\n        vec[ind + c[arr[i]] - 1] = 1\n        c[arr[i]] -= 1\n    print(count)", "def merge(arr):\n    if len(arr) <= 1:\n        return (0, arr)\n    n = len(arr)\n    half = n // 2\n    (arr1, arr2) = (arr[:half], arr[half:])\n    (v1, arr1) = merge(arr1)\n    (v2, arr2) = merge(arr2)\n    rt = v1 + v2\n    (i, j, len1, len2) = (0, 0, len(arr1), len(arr2))\n    arr3 = []\n    while i < len1 or j < len2:\n        if i == len1:\n            rt += len1 - i\n            arr3.append(arr2[j])\n            j += 1\n            continue\n        if j == len2 or arr1[i] >= arr2[j]:\n            arr3.append(arr1[i])\n            i += 1\n            continue\n        rt += len1 - i\n        arr3.append(arr2[j])\n        j += 1\n    return (rt, arr3)\nfor t in range(int(input())):\n    (n, m) = input().rstrip().split()\n    (n, m) = (int(n), int(m))\n    arr = input().rstrip().split()\n    arr = [int(x) for x in arr]\n    sort_arr = sorted(arr)\n    idx = {}\n    for (i, v) in enumerate(sort_arr):\n        idx[v] = i\n    place = []\n    for (i, v) in enumerate(arr):\n        place.append(idx[v])\n        idx[v] -= 1\n    copy_place = place[:]\n    ans = merge(copy_place)[0]\n    print(ans)", "import bisect\nimport collections\nimport copy\nimport enum\nimport functools\nimport heapq\nimport itertools\nimport math\nimport random\nimport re\nimport sys\nimport time\nimport string\nfrom typing import List\n\nclass TreeArray:\n\n    def __init__(self, n: int):\n        self.n = n\n        self.arr = [0] * n\n\n    def lowbit(self, x):\n        return x & -x\n\n    def update(self, x, y):\n        i = x\n        while i < self.n:\n            self.arr[i] += y\n            i += self.lowbit(i)\n\n    def sum(self, x):\n        ans = 0\n        i = x\n        while i > 0:\n            ans += self.arr[i]\n            i -= self.lowbit(i)\n        return ans\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    ta = TreeArray(m + 2)\n    ans = 0\n    cs = list(map(int, input().split()))\n    cs2 = [[i, c] for (i, c) in enumerate(cs)]\n    cs2.sort(key=lambda x: x[1])\n    mp = {}\n    for i in range(m):\n        mp.setdefault(cs2[i][1], i + 1)\n    for mc in cs:\n        c = mp[mc]\n        ans += ta.sum(c - 1)\n        ta.update(c, 1)\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    o = sorted(range(m * n), key=lambda i: (a[i], -i))\n    c = 0\n    s = [False] * (m * n)\n    for i in range(m * n):\n        j = o.index(i)\n        s[j] = True\n        c += sum(s[:j])\n    print(c)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    A = list(map(int, input().split()))\n    a = []\n    for i in range(m):\n        a.append([A[i], i])\n    a.sort()\n    b = [0] * m\n    s = 0\n    for i in range(m):\n        b[a[i][1]] = 1\n        s = s + sum(b[0:a[i][1]])\n    A.sort()\n    i = 0\n    while i < m:\n        c = A.count(A[i])\n        s = s - (c * (c - 1) >> 1)\n        i = i + c\n    print(s)", "t = int(input())\nfor case in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    arr = [(a[i], i + 1) for i in range(m)]\n    arr.sort(key=lambda x: [x[0], -x[1]])\n    dp = [0] * (m + 1)\n    count = 0\n    for i in range(m):\n        seat = arr.index((a[i], i + 1))\n        seat += 1\n        dp[seat] = 1\n        count += sum(dp[:seat])\n    print(count)", "def inconv(f, n):\n    c = 0\n    for i in f:\n        if i < n:\n            c += f[i]\n    return c\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    f = dict()\n    c = 0\n    for i in a:\n        c += inconv(f, i)\n        f[i] = f.get(i, 0) + 1\n    print(c)", "from collections import defaultdict\n\ndef calc_badness(aa, n, m):\n    aax = list(enumerate(aa))\n    aax.sort(key=lambda x: (x[1], -x[0]))\n    badness = 0\n    added = set()\n    for (i, a) in aax:\n        for j in range(0, i):\n            if j in added:\n                badness += 1\n        added.add(i)\n    return badness\nn_samples = int(input())\nfor t in range(n_samples):\n    (n, m) = map(int, input().split(' '))\n    aa = list(map(int, input().split(' ')))\n    assert len(aa) == n * m\n    print(calc_badness(aa, n, n))", "def int_input():\n    a = int(input())\n    return a\n\ndef int_list_input():\n    a = list(map(int, input().split()))\n    return a\n\ndef solve():\n    (n, m) = int_list_input()\n    arr = int_list_input()\n    d = {}\n    ans = 0\n    for i in arr:\n        for j in d:\n            if j < i:\n                ans += d[j]\n        d[i] = d.get(i, 0) + 1\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "import math\nfrom collections import Counter, deque\nfrom math import *\nmod = 998244353\n\ndef solve():\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = {}\n    l1 = l.copy()\n    l1.sort()\n    for i in range(m - 1, -1, -1):\n        if l1[i] in d:\n            d[l1[i]].append(i)\n        else:\n            d[l1[i]] = deque()\n            d[l1[i]].append(i)\n    visit = [0] * m\n    count = 0\n    for i in l:\n        x = d[i][0]\n        for j in range(x):\n            if visit[j]:\n                count += 1\n        visit[d[i].popleft()] = 1\n    print(count)\nt = int(input())\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    c = 0\n    for i in range(m):\n        c += len([x for x in a[:i] if a[i] > x])\n    print(c)", "from sys import stdin\n\ndef solve():\n    results = []\n    for _ in range(int(stdin.readline().strip())):\n        (n, m) = map(int, stdin.readline().strip().split())\n        A = list(map(int, stdin.readline().strip().split()))\n        seats = []\n        ans = 0\n        for x in A:\n            seats.append(x)\n            ans += sum((y < x for y in seats))\n        results.append(ans)\n    print('\\n'.join(map(str, results)))\nsolve()", "rows = int(input())\nfor r in range(rows):\n    nm = input().split(' ')\n    n = int(nm[0])\n    m = int(nm[1])\n    _l = input().split(' ')\n    prio_list = [int(i) for i in _l]\n    prio_list_zip = list(zip(prio_list, [-i for i in range(m)]))\n    prio_list_zip.sort()\n    total = 0\n    for i in range(m):\n        my_neg_order = prio_list_zip[i][1]\n        total += sum([j[1] > my_neg_order for j in prio_list_zip[:i]])\n    print(total)", "import sys\nfrom collections import Counter\n\ndef func(n, m, a):\n    visited = [a[0]]\n    c1 = 0\n    for i in range(1, m):\n        c2 = 0\n        for j in range(len(visited)):\n            if a[i] > visited[j]:\n                c2 += 1\n        c1 += c2\n        visited.append(a[i])\n    return c1\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(func(n, m, a))", "def count_smaller_before(lst, idx):\n    c = 0\n    for i in range(idx):\n        if lst[i] < lst[idx]:\n            c += 1\n    return c\ntest_amount = int(input())\nfor _ in range(test_amount):\n    sizes = input()\n    n = int(sizes.split(' ')[0])\n    m = int(sizes.split(' ')[1])\n    input_str = input()\n    input_list = [int(i) for i in input_str.split(' ')]\n    min = 0\n    for i in range(len(input_list)):\n        min += count_smaller_before(input_list, i)\n    print(min)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    c = 0\n    for i in range(1, m * n):\n        sl = l[0:i]\n        ss = l[i]\n        sc = 0\n        for j in sl:\n            if j < ss:\n                c += 1\n    print(c)", "from itertools import permutations, combinations\nimport math\n\ndef solution():\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    st = []\n    st.append(a[0])\n    count = 0\n    for i in range(m):\n        if i == 0:\n            continue\n        k = 0\n        for j in range(len(st)):\n            if st[j] < a[i]:\n                k += 1\n        st.append(a[i])\n        count += k\n    print(count)\nt = int(input())\nfor loop in range(t):\n    solution()", "import sys\ninput = sys.stdin.readline\n\ndef solve(n, a):\n    arr = [[a[i], i] for i in range(n)]\n    arr.sort(key=lambda x: (x[0], -x[1]))\n    places = [i[1] for i in arr]\n    ans = 0\n    for i in range(1, n):\n        for j in range(i):\n            if places[j] < places[i]:\n                ans += 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, b) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(b, a))", "def solve(n, m, a):\n    count = 0\n    for i in range(1, m):\n        for j in range(i - 1, -1, -1):\n            if a[i] > a[j]:\n                count += 1\n    return count\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(solve(n, m, arr))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    a.reverse()\n    for i in range(n * m - 1):\n        ans += sum((x < a[i] for x in a[i + 1:]))\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(len([i for i in range(m) for j in range(i) if a[i] > a[j]]))", "def main():\n    t = int(input())\n    for _ in range(t):\n        (n, m) = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = [(x, i) for (i, x) in enumerate(a)]\n        b.sort(key=lambda x: n * m * x[0] - x[1])\n        s = [0] * m\n        for i in range(m):\n            s[b[i][1]] = i\n        answer = 0\n        for i in range(m):\n            for j in range(i):\n                if s[j] < s[i]:\n                    answer += 1\n        print(answer)\nmain()", "def seatingArrangement(m, array):\n    if m == 1:\n        return 0\n    pos = []\n    ar = sorted(array)\n    ar.sort()\n    for x in range(m):\n        p = len(ar) - 1 - ar[::-1].index(array[x])\n        ar[p] = None\n        pos.append(p)\n    ans = 0\n    for x in range(m):\n        for y in range(0, x):\n            if pos[x] > pos[y]:\n                ans += 1\n    return ans\nt = int(input())\nfinal = []\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    final.append(seatingArrangement(m, l))\nfor _ in range(t):\n    print(final[_])", "numTests = int(input())\nfor t in range(numTests):\n    (n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    total_inconvenience = 0\n    for (i, e) in enumerate(a):\n        inconvenience = 0\n        for j in range(0, i):\n            if a[j] < e:\n                inconvenience += 1\n        total_inconvenience += inconvenience\n    print(total_inconvenience)", "import math\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = [(j, i) for (i, j) in enumerate(map(int, input().split()))]\n    a.sort(key=lambda x: (x[0], -x[1]))\n    ans = 0\n    occ = [0 for _ in range(len(a))]\n    pos = [0 for _ in range(len(a))]\n    j = 0\n    for (x, i) in a:\n        pos[i] = j\n        j += 1\n    for i in pos:\n        inc = 0\n        for j in range(i):\n            inc += occ[j]\n        occ[i] = 1\n        ans += inc\n    print(ans)", "for fghj in range(int(input())):\n    (m, n) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    v = [[a[i], -i] for i in range(n)]\n    v.sort(key=lambda x: (x[0], x[1]))\n    for i in range(n):\n        v[i][1] *= -1\n    final = [-1 for i in range(n)]\n    ans = 0\n    for i in range(n):\n        t = v[i][1]\n        for i in range(t):\n            if final[i] != -1:\n                ans += 1\n        final[t] = 1\n    print(ans)", "def solve(c, a):\n    sol = 0\n    for i in range(1, c):\n        sol += sum((a[j] < a[i] for j in range(i)))\n    return sol\nt = int(input())\nfor _ in range(t):\n    (_, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(c, a))", "import sys\nimport math\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    line = sys.stdin.readline().strip()\n    (n, m) = [int(x) for x in line.split()]\n    a = [int(x) for x in sys.stdin.readline().strip().split()]\n    s = 0\n    d = {}\n    for e in a:\n        v = d.get(e, 0)\n        s_part = 0\n        for k in d.keys():\n            if k < e:\n                s_part += d.get(k)\n        d[e] = v + 1\n        s += s_part\n    print(s)", "from math import *\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    n = m\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    d = {}\n    for i in range(n - 1):\n        if b[i] != b[i + 1]:\n            d[b[i]] = i\n    d[b[-1]] = n - 1\n    filled = [0 for i in range(n)]\n    ans = 0\n    for i in range(n):\n        c = a[i]\n        m = d[a[i]]\n        for j in range(m):\n            if filled[j] == 1:\n                ans += 1\n        filled[d[a[i]]] = 1\n        d[a[i]] -= 1\n    print(ans)", "def result(row, seat_in_rows, eye_sight):\n    seated = [False] * seat_in_rows\n    abc = eye_sight.copy()\n    abc.sort()\n    final_problem = 0\n    for i in eye_sight:\n        for j in range(-1, -(seat_in_rows + 1), -1):\n            if abc[j] == i and seated[j] == False:\n                seated[j] = True\n                qqq = 0\n                for k in range(seat_in_rows + j):\n                    if seated[k] == True:\n                        qqq += 1\n                final_problem += qqq\n                break\n    print(final_problem)\nfor i in range(int(input())):\n    abc = list(map(int, input().split()))\n    abd = list(map(int, input().split()))\n    result(abc[0], abc[1], abd)", "import math\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    w = sorted(enumerate(a), key=lambda x: (x[1], -x[0]))\n    flag = [0 for i in range(m)]\n    total_inconvenience = 0\n    d = {}\n    for i in range(len(w)):\n        d[w[i][0]] = i\n    for i in range(n * m):\n        for j in range(d[i]):\n            total_inconvenience += flag[j]\n        flag[d[i]] = 1\n    print(total_inconvenience)", "def main():\n    in_n = int(input())\n    for _ in range(in_n):\n        (n, m) = input().rstrip().split()\n        m = int(m)\n        sights = input().rstrip().split()\n        sights = [int(s) for s in sights]\n        inc = 0\n        for i in range(m - 1):\n            inc += sum([sights[j] < sights[i + 1] for j in range(i + 1)])\n        print(inc)\nmain()", "def fun(stack, s):\n    x1 = s.pop(0)\n    x2 = stack.pop()\n    ans = 0\n    value = []\n    while x1 > x2:\n        value.append(x2)\n        if len(stack) > 0:\n            x2 = stack.pop()\n        else:\n            break\n    ans += len(value)\n    if x1 > x2:\n        stack.append(x1)\n        for i in range(len(value)):\n            val = value.pop()\n            stack.append(val)\n    else:\n        stack.append(x2)\n        stack.append(x1)\n        for i in range(len(value)):\n            val = value.pop()\n            stack.append(val)\n    return ans\nt = int(input())\nwhile t > 0:\n    t -= 1\n    mn = input().split()\n    n = int(mn[0])\n    m = int(mn[1])\n    s = input().split()\n    s = [int(x) for x in s]\n    stack = []\n    if m == 1:\n        print(0)\n    else:\n        ans = 0\n        temp = s.pop(0)\n        stack.append(temp)\n        length = len(s)\n        for i in range(length):\n            ans += fun(stack, s)\n        print(ans)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    inconv = 0\n    copy = []\n    for i in range(m):\n        copy.append(0)\n    for i in range(m):\n        plist = l[::-1]\n        if l.count(min(l)) > 1:\n            pos = m - 1 - plist.index(min(l))\n        else:\n            pos = l.index(min(l))\n        inconv += copy[:pos].count(1)\n        copy[pos] = 1\n        l[pos] = 99999999999\n    print(inconv)", "import math\nimport sys\nimport collections\nimport bisect\nimport time\nimport random\nimport itertools\nimport string\nfrom collections import Counter, defaultdict\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\nfor t in range(int(input())):\n    (n, m) = get_ints()\n    arr = get_list()\n    pos_arr = collections.defaultdict(list)\n    for (i, j) in enumerate(arr):\n        pos_arr[j].append(i)\n    eye_sights = list(sorted(pos_arr.keys()))\n    for i in eye_sights:\n        pos_arr[i].sort(reverse=True)\n    seated = [10 ** 10] * m\n    pos = 0\n    for i in eye_sights:\n        for j in pos_arr[i]:\n            seated[pos] = j\n            pos += 1\n    ans = 0\n    for i in range(m):\n        value = seated[i]\n        for j in range(i, -1, -1):\n            if seated[j] < value:\n                ans += 1\n    print(ans)", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    (n, m) = list(map(int, stdin.readline().split()))\n    a = list(map(int, stdin.readline().split()))\n    b = sorted(enumerate(a), key=lambda x: (x[1], -x[0]))\n    c = [0] * m\n    for i in range(m):\n        c[b[i][0]] = i\n    res = 0\n    cur = [0] * m\n    for i in range(m):\n        s = c[i]\n        for j in range(s):\n            res += cur[j]\n        cur[s] = 1\n    print(res)", "test = int(input())\nfor i in range(test):\n    (n, m) = map(int, input().split())\n    lol = list(map(int, input().split()))\n    c = 0\n    for x in range(len(lol)):\n        for y in range(x):\n            if lol[x] > lol[y]:\n                c += 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = []\n    for j in range(len(a)):\n        tmp = [a[j], j + 1]\n        b.append(tmp)\n    b.sort(key=lambda p: (p[0], -p[1]))\n    s = 0\n    c = [0] * (m + 1)\n    for j in range(len(a)):\n        for k in range(b[j][1]):\n            s = s + c[k]\n        c[b[j][1]] = 1\n    print(s)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for k in range(len(a)):\n        count = 0\n        for j in range(k):\n            if a[k] > a[j]:\n                count += 1\n        ans += count\n    print(ans)", "t = int(input())\nfor case in range(t):\n    (n, m) = map(int, input().split())\n    audi = list(zip(range(m), map(int, input().split())))\n    audi.sort(key=lambda tup: (tup[1], -tup[0]))\n    inconv = 0\n    for (loc, person) in enumerate(audi):\n        for other in audi[loc + 1:]:\n            if other[0] > person[0]:\n                inconv += 1\n    print(inconv)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = sorted(a)\n    b = []\n    d = {}\n    for i in range(n):\n        b.append([])\n        d[i] = {}\n        for j in range(m):\n            b[i].append(0)\n    j = 0\n    for i in range(len(a)):\n        b[j][i % m] = 0\n        if a[i] in d[j]:\n            d[j][a[i]] += 1\n        else:\n            d[j][a[i]] = 1\n        j += 1\n        if j == len(b):\n            j = 0\n    ans = 0\n    for i in range(len(b)):\n        x = 0\n        for j in range(len(b[i])):\n            seat = c.index(a[j + i * m])\n            if d[i][a[j + i * m]] > 1:\n                seat += d[i][a[j + i * m]] - 1\n                d[i][a[j + i * m]] -= 1\n            b[i][seat] = 1\n            for k in range(0, seat):\n                if b[i][k] == 1:\n                    x += 1\n        ans += x\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    c = 0\n    for i in range(m):\n        for j in range(i - 1, -1, -1):\n            if a[i] > a[j]:\n                c += 1\n    print(c)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = 0\n    for i in range(m):\n        x = 0\n        for j in range(0, i):\n            if a[j] < a[i]:\n                x += 1\n        c += x\n    print(c)", "import bisect\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    asort = a.copy()\n    asort.sort()\n    ocu = [False] * m\n    ans = 0\n    for i in range(m):\n        t = bisect.bisect_right(asort, a[i]) - 1\n        while ocu[t]:\n            t -= 1\n        for j in range(t):\n            if ocu[j]:\n                ans += 1\n        ocu[t] = True\n    print(ans)", "for _ in range(int(input())):\n    [n, m] = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    ans = 0\n    for i in range(m):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                ans += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(m):\n        for j in range(i):\n            if l[j] < l[i]:\n                ans += 1\n    print(ans)", "for i in range(int(input())):\n    ppl = int(input().split()[1])\n    aa = input().split()\n    int_aa = [int(a) for a in aa]\n    su = 0\n    for pp in range(ppl):\n        for j in range(pp):\n            if int_aa[j] < int_aa[pp]:\n                su += 1\n    print(su)", "t = int(input())\nfor tt in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    for i in range(n * m):\n        a[i] = (a[i], i)\n    a.sort(key=lambda element: element[1], reverse=True)\n    a.sort(key=lambda element: element[0])\n    s = [0 for i in range(n * m)]\n    for i in range(n * m):\n        s[a[i][1]] = i\n    po = [[0 for i in range(m)] for j in range(n)]\n    sum = 0\n    for i in range(n * m):\n        for k in range(s[i]):\n            sum += po[0][k]\n        po[0][s[i]] = 1\n    print(sum)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = 0\n    for i in range(m):\n        for j in range(i):\n            if a[i] > a[j]:\n                c += 1\n    print(c)", "try:\n    T = int(input())\n    for i in range(T):\n        (n, m) = map(int, input().split())\n        L = list(map(int, input().split()))\n        cnt = 0\n        for i in range(1, len(L)):\n            for j in range(i - 1, -1, -1):\n                if L[j] < L[i]:\n                    cnt += 1\n        print(cnt)\nexcept:\n    pass", "n = int(input())\no = []\nfor i in range(n):\n    (a, b) = map(int, input().split())\n    l = list(map(int, input().split()))\n    t = 0\n    for p in range(b):\n        for q in range(p):\n            if l[p] > l[q]:\n                t += 1\n    print(t)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    w = list(map(int, input().split()))\n    c = 0\n    for i in range(m):\n        for j in range(i):\n            if w[i] > w[j]:\n                c += 1\n    print(c)", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    cnt = 0\n    for i in range(m):\n        for j in range(i):\n            if x[i] > x[j]:\n                cnt += 1\n    print(cnt)", "n = int(input())\nfor i in range(n):\n    l = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(l[1]):\n        for j in range(i):\n            if a[j] < a[i]:\n                ans += 1\n    print(ans)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    a = [*map(int, input().split())]\n    ans = 0\n    for i in range(m):\n        for j in range(i):\n            if a[i] > a[j]:\n                ans += 1\n    print(ans)\n    t -= 1", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    (n, m) = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    ans = 0\n    for i in range(m):\n        for j in range(0, i):\n            if arr[j] < arr[i]:\n                ans += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    personid_and_a = [[0] * 2 for j in range(m)]\n    for personid in range(m):\n        personid_and_a[personid][0] = personid\n        personid_and_a[personid][1] = a[personid]\n    personid_and_a.reverse()\n    personid_and_a = sorted(personid_and_a, key=lambda x: x[1])\n    ans = 0\n    tmpvalue = 0\n    for j in range(m):\n        tmpvalue = personid_and_a[j][0]\n        for k in range(0, j):\n            if personid_and_a[k][0] < tmpvalue:\n                ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    l = [int(i) for i in input().split()]\n    ct = 0\n    for i in range(len(l)):\n        for j in range(i):\n            if l[j] < l[i]:\n                ct += 1\n    print(ct)", "t = int(input())\nfor i in range(t):\n    [n, m] = map(int, input().split())\n    a = list(map(int, input().split()))\n    st = []\n    st.append(a[0])\n    ans = 0\n    for i in range(m):\n        if i == 0:\n            continue\n        k = 0\n        for j in range(len(st)):\n            if st[j] < a[i]:\n                k += 1\n        st.append(a[i])\n        ans += k\n    print(ans)", "t = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = []\n    for i in range(m - 1, -1, -1):\n        ans = 0\n        for j in range(i):\n            if a[j] < a[i]:\n                ans = ans + 1\n        b.append(ans)\n    print(sum(b))\n    t = t - 1", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = 0\n    for i in range(m):\n        for j in range(i):\n            if a[i] > a[j]:\n                c += 1\n    print(c)", "for __ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(m):\n        for j in range(i + 1, m):\n            if a[j] > a[i]:\n                count += 1\n    print(count)", "import sys, os.path, math\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nfor t in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    num = list(map(int, input().split()))\n    count = 0\n    for i in range(m):\n        for j in range(i):\n            if num[i] > num[j]:\n                count += 1\n    print(count)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = 0\n    for i in range(m):\n        for j in range(i):\n            if l[j] < l[i]:\n                d += 1\n    print(d)", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    (n, m) = [int(x) for x in sys.stdin.readline().split()]\n    a = [int(x) for x in sys.stdin.readline().split()]\n    c = 0\n    for i in range(m):\n        for j in range(i - 1, -1, -1):\n            if a[i] > a[j]:\n                c += 1\n    sys.stdout.write(str(c) + '\\n')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(m - 1):\n        for j in range(i + 1, m):\n            if a[j] > a[i]:\n                ans += 1\n    print(ans)", "from collections import *\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(m):\n        for j in range(i):\n            if a[i] > a[j]:\n                ans += 1\n    print(ans)", "for i in range(int(input())):\n    (n, m) = input().split()\n    a = [int(x) for x in input().split()]\n    ll = list()\n    ll.append(int(a[0]))\n    ans = 0\n    for i in range(int(m)):\n        if i == 0:\n            continue\n        k = 0\n        for j in range(len(ll)):\n            if ll[j] < a[i]:\n                k += 1\n        ll.append(a[i])\n        ans += k\n    print(ans)", "t = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    cnt = 0\n    for i in range(1, n * m):\n        for j in range(0, i):\n            if arr[j] < arr[i]:\n                cnt += 1\n    print(cnt)\n    t = t - 1", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split(' ')))\n    cnt = 0\n    for i in range(m):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                cnt += 1\n    print(cnt)"]