["a = int(input())\nans = []\nfor i in range(a):\n    (q, w) = input().split()\n    z = input().split('g')\n    z.append(z[-1] + z[0])\n    if w == 'g':\n        ans.append(0)\n    else:\n        maqs = 0\n        for k in z:\n            if w in k:\n                maqs = max(len(k) - k.find(w), maqs)\n        ans.append(maqs)\nfor t in ans:\n    print(t)", "a = int(input())\nans = []\nfor i in range(a):\n    (q, w) = input().split()\n    z = input().split('g')\n    z.append(z[-1] + z[0])\n    if w == 'g':\n        ans.append(0)\n    else:\n        maqs = 0\n        for k in z:\n            if w in k:\n                maqs = max(len(k) - k.find(w), maqs)\n        ans.append(maqs)\nfor t in ans:\n    print(t)", "t = int(input())\nout = []\nfor i in range(t):\n    (n, c) = input().split()\n    n = int(n)\n    arr = input() * 2\n    start = False\n    startsec = None\n    wait = 0\n    if c == 'g':\n        out.append(0)\n    else:\n        for k in range(n):\n            if arr[k] == c and start == False:\n                start = True\n                startsec = k\n            elif arr[k] == 'g' and start == True:\n                start = False\n                wait = max(wait, k - startsec)\n        if start == True:\n            wait = max(arr.find('g', n) - startsec, wait)\n        out.append(wait)\nfor i in out:\n    print(i)", "import sys\nfrom collections import *\nsys.setrecursionlimit(10 ** 5)\nitr = (line for line in sys.stdin.read().strip().split('\\n'))\nINP = lambda : next(itr)\n\ndef ni():\n    return int(INP())\n\ndef nl():\n    return [int(_) for _ in INP().split()]\n\ndef solve(n, a, c):\n    a = a + a\n    a = list(a)\n    if c == 'g':\n        print(0)\n        return\n    best = 0\n    cur = 0\n    s = False\n    for i in a:\n        if i == c:\n            s = True\n        if s:\n            if i != 'g':\n                cur += 1\n            else:\n                best = max(cur, best)\n                cur = 0\n                s = False\n    print(best)\nt = ni()\nfor case in range(t):\n    (n, c) = INP().split()\n    a = INP()\n    solve(n, a, c)", "for _ in range(int(input())):\n    (n, c) = input().split()\n    n = int(n)\n    s = input()\n    if c == 'g':\n        print(0)\n        continue\n    first_green = p = None\n    b = True\n    ans = 0\n    for i in range(n):\n        if s[i] == c:\n            b = True\n            if p is None:\n                p = i\n        elif s[i] == 'g':\n            b = False\n            if first_green is None:\n                first_green = i\n            if p is not None:\n                ans = max(ans, i - p)\n                p = None\n    if b:\n        ans = max(ans, n - p + first_green)\n    print(ans)", "def solve(s, symbol):\n    if s == 'g' and 'g' in s:\n        return 0\n    symbol_pos = -1\n    g_pos = -1\n    distance = 0\n    for (i, e) in enumerate(s):\n        if e == symbol:\n            if symbol_pos == -1:\n                symbol_pos = i\n        elif e == 'g':\n            if symbol_pos > -1:\n                distance = max(distance, i - symbol_pos)\n                symbol_pos = -1\n            if g_pos == -1:\n                g_pos = i\n    if g_pos > -1 and symbol_pos > -1:\n        distance = max(distance, g_pos + (len(s) - symbol_pos))\n    return distance\nt = int(input())\nfor _ in range(t):\n    (n, symbol) = input().split()\n    s = input()\n    print(solve(s, symbol))", "class Solution:\n\n    def solve(n: str, state: str, light: str):\n        n = int(n)\n        if state == 'g':\n            return '0'\n        start = -1\n        dis = 0\n        gr_first = -1\n        for i in range(n):\n            if light[i] == state and start == -1:\n                start = i\n            if light[i] == 'g' and start != -1:\n                dis = max(dis, i - start)\n                start = -1\n            if gr_first == -1 and light[i] == 'g':\n                gr_first = i\n        if start != -1:\n            dis = max(dis, n - start + gr_first)\n        return dis\n\n    def trafficLight():\n        for i in range(int(input())):\n            (n, state) = list(input().split())\n            light = input()\n            print(Solution.solve(n, state, light))\nSolution.trafficLight()", "def opr():\n    s = input().split()\n    n = int(s[0])\n    q = s[1]\n    s = input()\n    if q == 'g':\n        print(0)\n        return\n    ans = -1\n    pos = -1\n    state = False\n    firstg = -1\n    for i in range(n):\n        if firstg == -1 and s[i] == 'g':\n            firstg = i\n        if s[i] == q and (not state):\n            pos = i\n            state = True\n        if s[i] == 'g' and state:\n            ans = max(ans, i - pos)\n            state = False\n    if state:\n        ans = max(ans, n + firstg - pos)\n    print(ans)\nT = int(input())\nwhile T > 0:\n    T -= 1\n    opr()", "from collections import defaultdict\nfrom sys import stdin, stdout\nimport string\n\ndef solution(N, s, A):\n    if s == 'g':\n        return '0'\n    min_sign_idx = N + 1\n    min_green_idx = -1\n    distance = -1\n    for (idx, a) in enumerate(A):\n        if a == s:\n            min_sign_idx = min(min_sign_idx, idx)\n        elif a == 'g' and min_green_idx == -1:\n            min_green_idx = idx\n        if a == 'g' and min_sign_idx != -1:\n            distance = max(distance, idx - min_sign_idx)\n            min_sign_idx = N + 1\n    if min_sign_idx != N + 1:\n        distance = max(distance, N - min_sign_idx + min_green_idx)\n    return distance\ntest_cases = int(stdin.readline())\nfor it in range(test_cases):\n    (N, s) = (x for x in stdin.readline().split())\n    A = stdin.readline()\n    print(solution(int(N), s, A))", "t = int(input())\nl = []\nfor i in range(t):\n    x1 = list(input().split())\n    n = int(x1[0])\n    c = str(x1[1])\n    b = list(input())\n    k = []\n    count = 0\n    x = False\n    for i in b:\n        if x == True:\n            count += 1\n        if c == 'g':\n            k.append(0)\n        elif i == c:\n            x = True\n        elif i == 'g':\n            x = False\n            if count == 1:\n                k.append(count)\n            else:\n                k.append(count)\n            count = 0\n    if x == True:\n        k.append(count + b.index('g') + 1)\n    l.append(max(k))\n    k.clear()\nfor i in l:\n    print(i)", "for _ in range(int(input())):\n    (__, c) = input().split()\n    s = input()\n    prevs = -1\n    ans = 0\n    for i in range(len(s)):\n        if prevs == -1 and s[i] == c:\n            prevs = i\n        if s[i] == 'g' and prevs != -1:\n            ans = max(ans, i - prevs)\n            prevs = -1\n    if prevs != -1:\n        ans = max(ans, len(s) - prevs + s.find('g'))\n    print(ans)", "for i in ' ' * int(input()):\n    (n, c) = input().split()\n    n = int(n)\n    s = input() * 2\n    index = 0\n    ozhid = False\n    dist = -1\n    max_d = -1\n    if c == 'g':\n        print(0)\n    else:\n        for i in s:\n            if i == c and (not ozhid):\n                dist = 1\n                ozhid = True\n            elif i == 'g' and ozhid:\n                max_d = max(max_d, dist)\n                ozhid = False\n                dist = -1\n            elif ozhid:\n                dist += 1\n        print(max_d)", "import sys\nreadline = sys.stdin.readline\nT = int(readline())\nfor i in range(T):\n    (N, S) = readline().split()\n    N = int(N)\n    A = list(readline().rstrip()) * 2 + ['g']\n    if S == 'g':\n        print(0)\n    else:\n        cnt = -1\n        MAX = 0\n        for a in A:\n            if a == 'g' and cnt >= 0:\n                MAX = max(MAX, cnt + 1)\n                cnt = -1\n            elif cnt >= 0:\n                cnt += 1\n            elif a == S:\n                cnt = 0\n        print(MAX)", "for _ in range(int(input())):\n    (n, cur_c) = input().split()\n    n = int(n)\n    s = input() * 2\n    ans = 0\n    cur_idx = -1\n    if cur_c == 'g':\n        print(0)\n        continue\n    for (i, c) in enumerate(s):\n        if c == cur_c and cur_idx == -1:\n            cur_idx = i\n        elif c == 'g' and cur_idx != -1:\n            ans = max(ans, i - cur_idx)\n            cur_idx = -1\n    print(ans)", "def timer(str, que, lenth):\n    count = 0\n    counter = 0\n    i = 0\n    k = 0\n    if que == 'g':\n        return 0\n    while i < lenth:\n        if str[i] == que:\n            j = i + 1\n            counter += 1\n            while j < lenth and str[j] != 'g':\n                counter += 1\n                j += 1\n            if j == len(str):\n                j = 0\n                k = 1\n                while str[j] != 'g' and j < lenth:\n                    counter += 1\n                    j += 1\n            i = j + 1\n            if counter > count:\n                count = counter\n            counter = 0\n            if k == 1:\n                break\n        else:\n            i += 1\n    return count\nt = int(input())\nfor i in range(t):\n    inputer = input().split()\n    n = int(inputer[0])\n    query = inputer[1]\n    stringer = str(input())\n    print(timer(stringer, query, n))", "t = int(input())\nfor _ in range(t):\n    (n, c) = input().split()\n    n = int(n)\n    s = str(input())\n    if c == 'g':\n        print(0)\n    else:\n        indl = -1\n        indc = -1\n        ind = 0\n        time = 0\n        for i in range(n - 1, -1, -1):\n            if s[i] == 'g':\n                if indl == -1:\n                    indl = i\n                indc = i\n            elif s[i] == c:\n                if indl != -1:\n                    if indc - i > time:\n                        time = indc - i\n                else:\n                    ind = i\n        if n - ind + indc > time and ind != 0:\n            time = n - ind + indc\n        print(time)", "def inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef inl():\n    return list(input().split())\n\ndef insr():\n    s = input()\n    return list(s)\n\ndef invr():\n    return map(int, input().split())\na = inp()\nfor _ in range(a):\n    dict = {}\n    z = inl()\n    z = z[1]\n    k = insr()\n    (first, z1) = (-1, -1)\n    c = 0\n    if z == 'g':\n        print(0)\n        continue\n    for i in range(len(k)):\n        if k[i] == 'g' and first == -1:\n            first = i\n        if k[i] == z and z1 == -1:\n            z1 = i\n        if k[i] == 'g' and z1 != -1:\n            c = max(c, i - z1)\n            z1 = -1\n    if z1 != -1:\n        c = max(c, len(k) - z1 + first)\n    print(c)", "def solve():\n    (N, s) = input().split()\n    S = input()\n    if s == 'g':\n        return 0\n    answer = 0\n    high = len(S)\n    for (indx, c) in enumerate(S):\n        if c == 'g':\n            first = indx\n            break\n    answer = 0\n    flagChar = False\n    lastSeenG = 0\n    for i in range(high):\n        if S[i] == s and (not flagChar):\n            prev = i\n            flagChar = True\n        if flagChar and S[i] == 'g':\n            answer = max(answer, i - prev)\n            flagChar = False\n        if S[i] == 'g':\n            lastSeenG = i\n    lastSeenS = 0\n    for i in range(high - 1, lastSeenG, -1):\n        if S[i] == s:\n            lastSeenS = i\n    if lastSeenS < lastSeenG:\n        return answer\n    return max(answer, high + first - lastSeenS)\n\ndef solution():\n    t = int(input())\n    for _ in range(t):\n        temp = solve()\n        print(temp)\nsolution()", "t = int(input())\nwhile t:\n    (n, q) = input().split()\n    s = input()\n    n = int(n)\n    if q == 'g':\n        print(0)\n        t -= 1\n        continue\n    x = s.index('g')\n    p1 = 0\n    p2 = 0\n    ma = 0\n    f = 1\n    for i in range(n):\n        if s[i] == 'g' and f == 0:\n            p2 = i\n            f = 1\n            ma = max(ma, abs(p1 - p2))\n        if s[i] == q and f == 1:\n            p1 = i\n            f = 0\n    if f == 0:\n        ma = max(ma, abs(n - p1 + x))\n    print(ma)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (n, c) = input().strip().split()\n    n = int(n)\n    s = input()\n    counter = 0\n    g_count = 0\n    result = 0\n    first = False\n    start = False\n    if c == 'g':\n        result = 0\n    else:\n        for x in s:\n            if not first:\n                g_count += 1\n                if x == 'g':\n                    first = True\n            if not start:\n                if x == c:\n                    counter = 0\n                    start = True\n            else:\n                counter += 1\n                if x == 'g':\n                    result = max(counter, result)\n                    start = False\n        if start:\n            counter += g_count\n            result = max(counter, result)\n    print(result)", "def solve(s, symbol):\n    if s == 'g' and 'g' in s:\n        return 0\n    symbol_pos = -1\n    g_pos = -1\n    distance = 0\n    for (i, e) in enumerate(s):\n        if e == symbol:\n            if symbol_pos == -1:\n                symbol_pos = i\n        elif e == 'g':\n            if symbol_pos > -1:\n                distance = max(distance, i - symbol_pos)\n                symbol_pos = -1\n            if g_pos == -1:\n                g_pos = i\n    if g_pos > -1 and symbol_pos > -1:\n        distance = max(distance, g_pos + (len(s) - symbol_pos))\n    return distance\nt = int(input())\nfor _ in range(t):\n    (n, symbol) = input().split()\n    s = input()\n    print(solve(s, symbol))", "for _ in range(int(input())):\n    (n, c) = input().split()\n    string = input()\n    if c == 'g':\n        print(0)\n        continue\n    spl = string.split('g')\n    if string[0] != 'g' and string[-1] != 'g':\n        spl[-1] += spl[0]\n        spl = spl[1:]\n    maximum = 0\n    for l in spl[0:]:\n        if len(l) > maximum:\n            if c in l:\n                m = len(l) - l.find(c)\n                if m > maximum:\n                    maximum = m\n    print(maximum)", "def helper(s, k):\n    first = -1\n    ans = float('-inf')\n    (l, r) = (-1, -1)\n    if k == 'g':\n        return 0\n    for i in range(len(s)):\n        if s[i] == 'g' and r <= l:\n            r = i\n            if first == -1:\n                first = i\n        if s[i] == k and l <= r:\n            l = i\n        if r != -1 and l != -1:\n            ans = max(ans, r - l)\n    if r <= l:\n        return max(ans, len(s) - l + first)\n    else:\n        return ans\nfor i in range(int(input())):\n    inp = input().split(' ')\n    k = inp[1]\n    s = input()\n    print(helper(s, k))", "t = int(input())\nfor _ in range(t):\n    (n, color) = input().split()\n    n = int(n)\n    m = input()\n    max_x = 0\n    p = m.index('g') + 1\n    if color == 'g':\n        print(0)\n    else:\n        i = 0\n        while i < n:\n            x = 0\n            if m[i] == color:\n                for j in range(i + 1, n):\n                    x += 1\n                    if m[j] == 'g':\n                        break\n                else:\n                    x += p\n                i += x\n                if max_x < x:\n                    max_x = x\n            i += 1\n        print(max_x)", "p = int(input())\nfor _ in range(p):\n    (_, col) = input().split(' ')\n    seq = input()\n    seq += seq\n    if col == 'g':\n        print(0)\n    else:\n        m = 0\n        do = False\n        cnt = 0\n        for c in seq:\n            if c == 'g' and do:\n                do = False\n                if cnt > m:\n                    m = cnt\n                cnt = 0\n            elif do:\n                cnt += 1\n            elif c == col:\n                do = True\n                cnt += 1\n        print(m)", "def main():\n    n = int(input())\n    for k in range(n):\n        (length, ch) = input().rstrip().split()\n        length = int(length)\n        seq = input().rstrip()\n        counts = []\n        i = 0\n        if ch == 'g':\n            print(0)\n        else:\n            while i < length:\n                if seq[i] == ch:\n                    j = i\n                    count = 0\n                    while j < length:\n                        if j == length - 1 and seq[j] != 'g':\n                            j = -1\n                            i = length\n                        elif seq[j] == 'g':\n                            counts.append(count)\n                            break\n                        j = j + 1\n                        count += 1\n                    i = i + count\n                i = i + 1\n            print(max(counts))\nmain()", "def func(letter, sequence):\n    if letter == 'g':\n        return 0\n    maxs = 0\n    count = -1\n    letter_found = False\n    calculate_first_count = False\n    firstc = 0\n    flag = True\n    gfound = False\n    firstg = False\n    flag2 = True\n    g = ''\n    for (index, value) in enumerate(sequence):\n        if value == 'g':\n            gx = index\n            gfound = True\n            first_g = True\n            if first_g and flag2:\n                g = index\n                flag2 = False\n            count += 1\n            if calculate_first_count:\n                firstc = count\n                calculate_first_count = False\n                flag = False\n                x = 0\n            maxs = max(count, maxs)\n            count = -1\n            letter_found = False\n            continue\n        if value == letter:\n            letter_found = True\n        if letter_found:\n            count += 1\n        if letter_found and flag:\n            calculate_first_count = True\n            if not gfound:\n                x = index\n            else:\n                x = g\n    end = 0\n    if sequence[-1] != 'g' and seq.find(l, gx) != -1:\n        end = int(length) - seq.find(l, gx) + seq.find('g')\n    maxs = max(end, maxs)\n    return maxs\ntests = int(input())\nfor i in range(tests):\n    inp = input().split()\n    length = inp[0]\n    l = inp[1]\n    seq = input()\n    print(func(l, seq))", "def func(letter, sequence):\n    if letter == 'g':\n        return 0\n    maxs = 0\n    count = -1\n    letter_found = False\n    flag = True\n    currentl = 0\n    currentg = 0\n    nextpos = True\n    for (index, value) in enumerate(sequence):\n        if value == 'g':\n            nextpos = True\n            currentg = index\n            first_g = True\n            if first_g and flag:\n                g_1 = index\n                flag = False\n            count += 1\n            maxs = max(count, maxs)\n            count = -1\n            letter_found = False\n            continue\n        if value == letter:\n            letter_found = True\n            if nextpos:\n                currentl = index\n                nextpos = False\n        if letter_found:\n            count += 1\n    end = 0\n    if sequence[-1] != 'g' and currentl > currentg:\n        end = int(length) - currentl + g_1\n    maxs = max(end, maxs)\n    return maxs\ntests = int(input())\nfor i in range(tests):\n    inp = input().split()\n    length = inp[0]\n    l = inp[1]\n    seq = input()\n    print(func(l, seq))", "def get_next_index(s, size, index, color):\n    while index < size:\n        if s[index] != color:\n            index += 1\n        else:\n            return index\n    return None\n\ndef solution():\n    test_cases = int(input())\n    for _ in range(test_cases):\n        first_line = input().split()\n        (size, current_color) = (int(first_line[0]), first_line[1])\n        s = input()\n        if current_color == 'g':\n            print(0)\n            continue\n        seconds = 0\n        index = get_next_index(s, size, 0, current_color)\n        curr_seconds = 0\n        flag = False\n        while index != None and index < size:\n            if s[index] != 'g':\n                if index == size - 1:\n                    flag = True\n                index = (index + 1) % size\n                curr_seconds += 1\n            else:\n                seconds = max(seconds, curr_seconds)\n                curr_seconds = 0\n                next_index = get_next_index(s, size, index, current_color)\n                if flag or not next_index:\n                    break\n                else:\n                    index = next_index\n        print(seconds)\nsolution()", "t = int(input())\nfor t1 in range(t):\n    (a, c) = input().split()\n    n = int(a)\n    s = input()\n    max = 0\n    if c == 'g':\n        print(0)\n    else:\n        max = 0\n        i = 0\n        while i < n:\n            while i < n and s[i] != c:\n                i += 1\n            j = i\n            while j < n and s[j] != 'g':\n                j += 1\n                if j == n:\n                    k = 0\n                    while s[k] != 'g':\n                        k += 1\n                    if k - i + n > max:\n                        max = k - i + n\n            if i < n and j < n and (j - i > max):\n                max = j - i\n            i = j\n        print(max)", "for i in range(int(input())):\n    (n, zv) = input().split()\n    n = int(n)\n    z = input()\n    d = {'r': 0, 'y': 0, 'g': 0}\n    if z[-1] == 'g':\n        g = 0\n        for i in range(n - 1, -1, -1):\n            if z[i] == 'g':\n                g = 0\n            else:\n                g += 1\n                if d[z[i]] < g:\n                    d[z[i]] = g\n    else:\n        j = z.find('g')\n        g = 0\n        for i in range(j - 1, -1, -1):\n            if z[i] == 'g':\n                g = 0\n            else:\n                g += 1\n                if d[z[i]] < g:\n                    d[z[i]] = g\n        for i in range(n - 1, j, -1):\n            if z[i] == 'g':\n                g = 0\n            else:\n                g += 1\n                if d[z[i]] < g:\n                    d[z[i]] = g\n    print(d[zv])", "for _ in range(int(input())):\n    (len1, b) = input().split()\n    len1 = int(len1)\n    list1 = list(input())\n    max1 = 0\n    if b == 'g':\n        print(0)\n        continue\n    flag = False\n    for i in range(len1):\n        if not flag and list1[i] == b:\n            flag = True\n            start = i\n        elif list1[i] == 'g' and flag:\n            max1 = max(max1, i - start)\n            flag = False\n    if flag:\n        for i in range(len1, 2 * len1):\n            j = i % len1\n            if list1[j] == 'g':\n                max1 = max(i - start, max1)\n                break\n    print(max1)", "n = int(input())\nfor sjfa in range(n):\n    infor = input().split()\n    length = infor[0]\n    current = infor[1]\n    list = input().split('g')\n    if current == 'g':\n        print(0)\n        continue\n    list[-1] += list[0]\n    largest = 0\n    for x in range(len(list)):\n        if list[x] != '' and current in list[x]:\n            inde = list[x].index(current)\n            new = list[x][inde:]\n            list[x] = new\n            if len(new) > largest:\n                largest = len(new)\n    print(largest)", "def main():\n    n_tests = int(input())\n    for _ in range(n_tests):\n        (n, l) = list(input().split(' '))\n        n = int(n)\n        arr = input()\n        if l == 'g':\n            print(0)\n            continue\n        max_val = 0\n        start_pos = None\n        for i in range(2 * n):\n            pos = i % n\n            if arr[pos] == l and start_pos is None:\n                start_pos = i\n                continue\n            if arr[pos] == 'g' and start_pos is not None:\n                diff = i - start_pos\n                if diff > max_val:\n                    max_val = diff\n                start_pos = None\n        print(max_val)\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, c) = input().split()\n    n = int(n)\n    a = input()\n    if c == 'g':\n        print(0)\n    else:\n        most_left_g = None\n        mlf_found = False\n        cur_c = None\n        this_c_found = None\n        w_case = -1\n        for i in range(n):\n            if a[i] == 'g':\n                if not mlf_found:\n                    mlf_found = True\n                    most_left_g = i\n                if cur_c is not None:\n                    w_case = max(w_case, i - cur_c)\n                    this_c_found = True\n                    cur_c = None\n            elif a[i] == c:\n                if this_c_found or this_c_found is None:\n                    cur_c = i\n                    this_c_found = False\n        if not this_c_found:\n            w_case = max(w_case, n - cur_c + most_left_g)\n        print(w_case)", "tc = int(input())\nfor t in range(tc):\n    (n, c) = [x for x in input().split()]\n    n = int(n)\n    s = input()\n    if c == 'g':\n        print(0)\n        continue\n    s = s[:] + s[:s.find('g') + 1]\n    d = 0\n    md = 0\n    for i in s:\n        if i == 'g':\n            md = max(md, d)\n            d = 0\n        elif i == c and d == 0:\n            d = 1\n            continue\n        if d != 0:\n            d += 1\n    print(md)", "testcases = int(input())\n\ndef find_max_dist(current, pattern):\n    path = pattern + pattern\n    max_dist = -1\n    looking_for_start = True\n    for i in range(len(path)):\n        c = path[i]\n        if c == current and looking_for_start:\n            start = i\n            looking_for_start = False\n        if c == 'g' and (not looking_for_start):\n            dist = i - start\n            if dist > max_dist:\n                max_dist = dist\n            looking_for_start = True\n    return max_dist\nfor testcase in range(testcases):\n    (repeats, current) = input().split()\n    repeats = int(repeats)\n    pattern = input()\n    if current == 'g':\n        print(0)\n        continue\n    print(find_max_dist(current, pattern))", "def helper(s, k):\n    left = -1\n    right = -1\n    front = -1\n    ans = 0\n    if k == 'g':\n        return 0\n    for i in range(len(s)):\n        if s[i] == 'g' and front == -1:\n            front = i\n            right = i\n        elif s[i] == k and (right > left or right + left == -2):\n            left = i\n        elif s[i] == 'g' and (right < left or right + left == -2):\n            right = i\n        if left != -1 and right != -1:\n            ans = max(ans, right - left)\n    if right < left:\n        return max(ans, front + (len(s) - left))\n    return ans\nfor i in range(int(input())):\n    arr = list(input().split())\n    k = arr[1]\n    print(helper(input(), k))", "for _ in range(int(input())):\n    (n, colour) = input().split()\n    s = input()\n    if colour == 'g':\n        print(0)\n        continue\n    s += s\n    ans = 0\n    l = last = s.index(colour)\n    for i in range(l + 1, 2 * int(n)):\n        if last != -1:\n            if s[i] == 'g':\n                ans = max(ans, i - last)\n                last = -1\n        elif s[i] == colour:\n            last = i\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, c) = input().split()\n    s = input()\n    t = 0\n    if c != 'g':\n        n = int(n)\n        length = len(s)\n        i = 0\n        to_continue = True\n        while i < length and to_continue:\n            ct = 1\n            if s[i] == c:\n                j = i + 1\n                if j == length:\n                    i = length\n                    j = 0\n                    to_continue = False\n                while s[j] != 'g':\n                    ct += 1\n                    j = j + 1\n                    if j == length:\n                        i = length\n                        j = 0\n                        to_continue = False\n                if ct > t:\n                    t = ct\n                if to_continue == True:\n                    i = j + 1\n            else:\n                i += 1\n    print(t)", "t = int(input())\nfor i in range(t):\n    (n, c) = input().split()\n    n = int(n)\n    s = input()\n    s += s\n\n    def fun(s):\n        if c == 'g':\n            return 0\n        stack = []\n        answer = 0\n        for i in range(2 * n - 1):\n            if len(stack) == 1 and s[i] == 'g':\n                answer = max(answer, i - stack.pop())\n            if not stack and s[i] == c:\n                stack.append(i)\n        return answer\n    print(fun(s))", "for test in range(int(input())):\n    (n, c) = input().split()\n    n = int(n)\n    lks = input()\n    prev = -1\n    ans = 0\n    for (pos, char) in enumerate(lks):\n        if char == c and prev == -1:\n            prev = pos\n        elif char == 'g' and prev != -1:\n            ans = max(ans, pos - prev)\n            prev = -1\n    if prev != -1:\n        ans = max(ans, n - prev + lks.find('g'))\n    if c == 'g':\n        print(0)\n    else:\n        print(ans)", "for _ in range(int(input())):\n    nt = input().split()\n    lights = input()\n    n = int(nt[0])\n    if nt[1] == 'g':\n        print(0)\n        continue\n    mint = lights.index('g')\n    stack = []\n    ans = 0\n    for i in range(n):\n        if lights[i] == nt[1]:\n            stack.append(i)\n        elif lights[i] == 'g':\n            if stack:\n                ans = max(ans, i - stack[0])\n                stack = []\n    while stack:\n        ans = max(ans, n - stack.pop() + mint)\n    print(ans)", "for _ in range(int(input())):\n    nt = input().split()\n    lights = input()\n    n = int(nt[0])\n    if nt[1] == 'g':\n        print(0)\n        continue\n    mint = lights.index('g')\n    stack = []\n    ans = 0\n    for i in range(n):\n        if lights[i] == nt[1]:\n            stack.append(i)\n        elif lights[i] == 'g':\n            if stack:\n                ans = max(ans, i - stack[0])\n                stack = []\n    while stack:\n        ans = max(ans, n - stack.pop() + mint)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, c) = input().split()\n    n = int(n)\n    s = input()\n    if c == 'g':\n        print(0)\n        continue\n    a = s.count(c)\n    ng = s.count('g')\n    if a < ng:\n        left = 0\n        max = 0\n        rememberw = 0\n        for j in range(a):\n            q = s.find(c, left, n)\n            w = s.find('g', q, n)\n            if w == rememberw:\n                left = q + 1\n                continue\n            if w != -1:\n                if w - q > max:\n                    max = w - q\n            elif n - q + s.find('g') > max:\n                max = n - q + s.find('g')\n            left = q + 1\n            rememberw = w\n        print(max)\n    else:\n        left = 0\n        max = 0\n        for j in range(ng):\n            w = s.find('g', left, n)\n            q = s.find(c, left, w)\n            if q != -1:\n                if w - q > max:\n                    max = w - q\n            left = w + 1\n        q = s.find(c, left, n)\n        if q != -1:\n            if n - q + s.find('g') > max:\n                max = n - q + s.find('g')\n        print(max)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (x, c) = input().split()\n    s = input()\n    (l, r) = (-1, -1)\n    firstG = -1\n    result = 0\n    if c == 'g':\n        print('0')\n        continue\n    for i in range(len(s)):\n        if s[i] == c and l == -1:\n            l = i\n        if s[i] == 'g':\n            if l >= 0:\n                r = i\n            if firstG == -1:\n                firstG = i\n        if l < r and l >= 0 and (r >= 0):\n            result = max(result, r - l)\n            l = -1\n            r = -1\n    if l >= 0 and r == -1:\n        result = max(result, len(s) - l + firstG)\n    print(result)", "for _ in range(int(input())):\n    (n, k) = map(str, input().split())\n    n = int(n)\n    s = str(input())\n    if k == 'g':\n        print(0)\n    else:\n        s = s + s\n        ans = 0\n        i = 0\n        while i < n:\n            if s[i] == k:\n                for j in range(i + 1, 2 * n):\n                    if s[j] == 'g':\n                        ans = max(ans, j - i)\n                        i = j + 1\n                        break\n            else:\n                i += 1\n        print(ans)", "import math\nimport collections\nimport bisect\nimport heapq\nfrom collections import deque\nfrom math import sqrt, ceil, floor\n\ndef inp_arr():\n    return list(map(int, input().strip().split(' ')))\n\ndef inp_str_arr():\n    return list(input().strip().split(' '))\n\ndef inp_str():\n    return input()\n\ndef solve():\n    (n, c) = inp_str_arr()\n    s = inp_str()\n    n = int(n)\n    ind = 0\n    if c == 'g':\n        print(0)\n        return\n    for i in range(n):\n        if s[i] == 'g':\n            ind = i\n            break\n    last_ind = -1\n    i = int((ind + 1) % n)\n    ans = 0\n    flag = 0\n    while flag == 0 or i != ind + 1:\n        flag = 1\n        i = int(i % n)\n        if s[i] == c and last_ind == -1:\n            last_ind = i\n        if s[i] == 'g' and last_ind != -1:\n            diff = i - last_ind\n            if diff < 0:\n                diff += n\n            ans = max(ans, diff)\n            last_ind = -1\n        i += 1\n    print(ans)\n(tt,) = inp_arr()\nfor t in range(tt):\n    solve()", "import os\nimport math\nimport collections\nimport bisect\nimport functools\nimport itertools\nimport heapq\n\ndef solve(s, n, c):\n    if c == 'g':\n        return 0\n    s *= 2\n    ans = 0\n    pre = s.index(c)\n    for i in range(pre, 2 * n):\n        if s[i] == 'g' and pre != -1:\n            ans = max(ans, i - pre)\n            pre = -1\n        elif s[i] == c and pre == -1:\n            pre = i\n    return ans\nt = int(input())\nfor _ in range(t):\n    arr = input().split()\n    n = int(arr[0])\n    c = arr[1]\n    s = input()\n    print(solve(s, n, c))", "import math\nfrom collections import defaultdict\nfor i in range(int(input())):\n    (n, c) = map(str, input().split())\n    n = int(n)\n    s = input()\n    ind = s.find('g')\n    exs = s + s[:ind + 1]\n    ans = 0\n    count = 0\n    if c == 'g':\n        print(0)\n        continue\n    flag = True\n    for j in exs:\n        if j == c:\n            if flag == True:\n                count = 0\n                flag = False\n        if j == 'g' and flag == False:\n            ans = max(ans, count)\n            flag = True\n            count = 0\n        count += 1\n    print(ans)", "t = int(input())\nwhile t != 0:\n    (n, c) = [x for x in input().split()]\n    n = int(n)\n    s = input()\n    prev = 'g'\n    if c == 'g':\n        print(0)\n    else:\n        maxm = -10000000000.0\n        for i in range(n):\n            if s[i] == c and prev != c:\n                c_ind = i\n                prev = c\n            elif s[i] == 'g' and prev == c:\n                g_ind = i\n                maxm = max(maxm, g_ind - c_ind)\n                prev = 'g'\n        if prev == c:\n            g_ind = s.index('g')\n            maxm = max(maxm, n - c_ind + g_ind)\n        print(maxm)\n    t -= 1", "T = int(input())\nwhile T:\n    (n, q) = input().split()\n    s = input()\n    n = int(n)\n    if q == 'g':\n        print(0)\n        T -= 1\n        continue\n    seen = 0\n    first = -1\n    maxsofar = 0\n    d = []\n    for i in range(n):\n        if s[i] == q:\n            d.append(i)\n        if s[i] == 'g':\n            if d != [] and i - d[0] > maxsofar:\n                maxsofar = i - d[0]\n                d.pop(0)\n            if seen == 0:\n                first = i\n                seen = 1\n            d = []\n    if d != []:\n        if n - (d[0] - first) > maxsofar:\n            maxsofar = n - (d[0] - first)\n    print(maxsofar)\n    T -= 1", "from collections import defaultdict\nt = int(input())\n\ndef solve():\n    (n, c) = input().split()\n    n = int(n)\n    s = input()\n    if c == 'g':\n        print(0)\n        return\n    first_occurence = -1\n    for i in range(n):\n        if s[i] == 'g':\n            first_occurence = i\n            break\n    mx = 0\n    if c == 'y':\n        i = 0\n        while i < n:\n            if s[i] == c:\n                k = i\n                i += 1\n                while i < n and s[i] != 'g':\n                    i += 1\n                if i == n:\n                    mx = max(mx, first_occurence + n - k)\n                else:\n                    mx = max(mx, i - k)\n            i += 1\n        print(mx)\n    elif c == 'r':\n        i = 0\n        while i < n:\n            if s[i] == c:\n                k = i\n                i += 1\n                while i < n and s[i] != 'g':\n                    i += 1\n                if i == n:\n                    mx = max(mx, first_occurence + n - k)\n                else:\n                    mx = max(mx, i - k)\n            i += 1\n        print(mx)\nwhile t:\n    solve()\n    t -= 1", "t = int(input())\nwhile t:\n    (n, x) = input().split()\n    n = int(n)\n    s = input()\n    if x == 'g':\n        print(0)\n    else:\n        flag = False\n        arr = []\n        for i in range(n):\n            if not flag and s[i] == x:\n                flag = True\n                idx = i\n            elif flag and s[i] == 'g':\n                arr.append(i - idx)\n                flag = False\n        for i in range(n):\n            if s[i] == 'g':\n                idx = i\n                break\n        for i in range(n):\n            if s[n - i - 1] == x:\n                i2 = n - i - 1\n            elif s[n - i - 1] == 'g':\n                break\n        if flag:\n            arr.append(abs(n - (i2 - idx)))\n        print(max(arr))\n    t -= 1", "t = int(input())\nfor h in range(t):\n    (n, c) = input().split()\n    s = input()\n    n = int(n)\n    flag = 1\n    r = 1\n    m = 0\n    for i in range(n):\n        if s[i] == c:\n            if r:\n                r = 0\n                start = i\n        if s[i] == 'g':\n            if flag:\n                flag = 0\n                store = i\n            if r == 0:\n                r = 1\n                m = max(m, i - start)\n    if r == 0:\n        m = max(m, n - start + store)\n    print(m)", "for _i in range(int(input())):\n    (n, c) = map(str, input().split())\n    n = int(n)\n    s = input()\n    if c == 'g':\n        print(0)\n        continue\n    i = 0\n    m = 0\n    while i < n:\n        if s[i] == c:\n            j = i\n            x = 0\n            while s[j] != 'g':\n                j += 1\n                if j == n:\n                    j = 0\n                x += 1\n            i += x\n            m = max(x, m)\n        else:\n            i += 1\n    print(m)", "t = int(input())\n\ndef solve(n, start, string):\n    green = [0] * n\n    lst = []\n    (initial, distance) = (0, 0)\n    if start == 'g':\n        return 0\n    for i in range(n - 1, -1, -1):\n        if string[i] == 'g':\n            initial = i\n            break\n    for i in range(initial - 1, -1, -1):\n        distance += 1\n        if string[i] == 'g':\n            green[i] = 0\n            distance = 0\n        else:\n            if string[i] == start:\n                lst.append(distance)\n            green[i] = distance\n    for i in range(initial + 1, n):\n        green[i] = n - i + green[0]\n        if string[i] == start:\n            lst.append(green[i])\n    return max(lst)\nfor i in range(t):\n    (n, init) = input().split()\n    n = int(n)\n    string = list(input())\n    print(solve(n, init, string))", "import sys\nimport threading\nfrom functools import lru_cache\nfrom bisect import bisect_left\nfrom collections import defaultdict, deque\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, c) = [i for i in input().split()]\n        n = int(n)\n        s = input()\n        ans = 0\n        stack = []\n        for index in range(n):\n            if s[index] == 'g' and stack:\n                cur = stack.pop()\n                ans = max(ans, index - cur)\n            elif s[index] == c:\n                if not stack:\n                    stack.append(index)\n        if stack:\n            cur = stack.pop()\n            index = s.index('g')\n            ans = max(ans, index + 1 + (n - 1 - cur))\n        if c == 'g':\n            ans = 0\n        print(ans)\nsys.setrecursionlimit(1 << 30)\nthreading.stack_size(1 << 27)\nmain_thread = threading.Thread(target=main)\nmain_thread.start()\nmain_thread.join()", "T = int(input())\nfor i in range(T):\n    (N, color) = input().split()\n    N = int(N)\n    str = input()\n    if color == 'g':\n        print(0)\n        continue\n    counter = 0\n    answer_list = []\n    for j in range(N):\n        if counter == 0:\n            if str[j] == color:\n                counter += 1\n        elif str[j] == 'g':\n            answer_list.append(counter)\n            counter = 0\n        else:\n            counter += 1\n    for j in range(N):\n        if counter == 0:\n            if str[j] == color:\n                counter += 1\n        elif str[j] == 'g':\n            answer_list.append(counter)\n            counter = 0\n        else:\n            counter += 1\n    print(max(answer_list))", "def solve(a, s):\n    m = {}\n    for i in range(len(a)):\n        if a[i] in m.keys():\n            if m[a[i]] != s[i]:\n                return 'NO'\n        else:\n            m[a[i]] = s[i]\n    return 'YES'\nt = int(input())\nwhile t > 0:\n    t -= 1\n    [n, q] = [j for j in input().split()]\n    n = int(n)\n    s = input()\n    ans = -189\n    s = s + s\n    last = -1\n    if q == 'g':\n        print(0)\n        continue\n    for i in range(2 * n):\n        if s[i] == q and last == -1:\n            last = i\n        if s[i] == 'g' and last != -1:\n            ans = max(i - last, ans) if ans != -189 else i - last\n            last = -1\n    print(ans)", "from sys import stdin, stdout\nimport sys\nsys.setrecursionlimit(100000)\n\ndef fxn(n, x, s):\n    max = 0\n    k = 0\n    p = True\n    i = 0\n    if x == 'g':\n        return max\n    while i < n:\n        if s[i] == x:\n            for k in range(i, 2 * n):\n                if s[k % n] == 'g' and k - i > max:\n                    max = k - i\n                    i = k\n                    break\n                elif s[k % n] == 'g':\n                    break\n        i += 1\n    return max\n\ndef main():\n    t = int(input())\n    while t != 0:\n        arr0 = [x for x in input().split()]\n        n = int(arr0[0])\n        x = arr0[1]\n        s = input()\n        print(fxn(n, x, s))\n        t -= 1\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, c) = input().split()\n    n = int(n)\n    s = input()\n    i = 0\n    mx = 0\n    while i < n:\n        if s[i] == c:\n            j = 0\n            while s[(i + j) % n] != 'g':\n                j += 1\n            mx = max(mx, j)\n            i += j + 1\n        else:\n            i += 1\n    print(mx)", "t = int(input())\nfor i in range(t):\n    (n, start) = input().split(' ')\n    s = input()\n    if start == 'g':\n        print(0)\n        continue\n    possibilities = []\n    n = int(n)\n    first = n\n    last = -1\n    for j in range(len(s)):\n        if s[j] == start:\n            if last == -1:\n                last = j\n        elif s[j] == 'g':\n            if j < first:\n                first = j\n            if last != -1:\n                possibilities.append(j - last)\n                last = -1\n    if last != -1:\n        possibilities.append(n - last + first)\n    print(max(possibilities))", "for i in range(int(input())):\n    c = input().split()[1][0]\n    s = input() * 2\n    i1 = -1\n    rango = -1\n    for (indice, j) in enumerate(s):\n        if j == 'g':\n            if i1 != -1:\n                if rango < indice - i1:\n                    rango = indice - i1\n                i1 = -1\n        elif j == c:\n            if i1 == -1:\n                i1 = indice\n    if c == 'g':\n        rango = 0\n    print(rango)", "for _ in range(int(input())):\n    (n, c) = input().split()\n    s = input()\n    add = s.find('g')\n    n = int(n) + add\n    s = s + s[:add]\n    dist = []\n    index = 0\n    if c == 'g':\n        print(0)\n        continue\n    while index < n:\n        while index < n and s[index] != c:\n            index += 1\n        start = index\n        while index < n and s[index] != 'g':\n            index += 1\n        end = index\n        dist.append(end - start)\n    print(max(dist))", "def solve():\n    a = input().split()\n    n = int(a[0])\n    c = a[1]\n    s = input()\n    if c == 'g':\n        print(0)\n    else:\n        i = 0\n        l = []\n        while i < n:\n            if s[i] == 'g':\n                a = i - 1\n                sec = 0\n                while s[a] != 'g':\n                    if a < 0:\n                        a = n - 1\n                    sec += 1\n                    if s[a] == c:\n                        l.append(sec)\n                    a -= 1\n            i += 1\n        print(max(l))\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1", "t = int(input())\nfor i in range(t):\n    d = input().split(' ')\n    n = int(d[0])\n    c = d[1]\n    s = input()\n    dic = []\n    init = -1\n    q = []\n    ans = 0\n    for i in range(n):\n        if s[i] == c:\n            q.append(i)\n        if s[i] == 'g':\n            if init == -1:\n                init = i\n            if q != []:\n                a = q[0]\n                ans = max(ans, i - a)\n            q.clear()\n    if q != []:\n        a = q[0]\n        ans = max(ans, n - a + init)\n    print(ans)", "from heapq import heappush, heappop, heapify\nfrom collections import Counter\n\ndef getIntegerInputs():\n    return map(int, input().split())\n\ndef getListInput():\n    return list(map(int, input().split()))\n\ndef inbound(r, c, n, m):\n    return 0 <= r < n and 0 <= c < m\n\ndef solve():\n    for _ in range(int(input())):\n        (n, s) = map(str, input().split())\n        n = int(n)\n        w = input()\n        dic = {}\n        flag = False\n        r = 0\n        ans = 0\n        for i in range(n - 1, -1, -1):\n            dic[w[i]] = i\n            if w[i] == s and 'g' not in dic:\n                flag = True\n                r = n - i\n            elif w[i] == s:\n                ans = max(ans, dic['g'] - dic[s])\n        if flag:\n            ans = max(ans, dic['g'] + r)\n        print(ans)\nsolve()", "def func():\n    (x, r) = input().split()\n    x = int(x)\n    s = input()\n    w = [0] * x\n    for i in range(x):\n        if s[i] == 'g':\n            ind = i\n            break\n    if s[x - 1] != 'g':\n        w[x - 1] = ind + 1\n    for i in range(x - 2, -1, -1):\n        if s[i] != 'g':\n            w[i] = 1 + w[i + 1]\n    maxi = 0\n    for i in range(x):\n        if s[i] == r and w[i] > maxi:\n            maxi = w[i]\n    return maxi\nt = int(input())\nfor i in range(t):\n    ans = func()\n    print(ans)", "def solution(s, n, c):\n    if c == 'g':\n        return 0\n    dist = []\n    start = s.index(c)\n    s = s + s[:s.index('g') + 1]\n    d = 0\n    target = True\n    for i in range(start, len(s)):\n        if s[i] == 'g' and target == True:\n            dist.append(d)\n            target = False\n        elif s[i] == c and target == False:\n            d = 0\n            target = True\n        d += 1\n    return max(dist)\nresult = []\nt = int(input())\nfor i in range(t):\n    (n, c) = [x for x in input().split(' ')]\n    n = int(n)\n    s = input()\n    result.append(solution(s, n, c))\nfor res in result:\n    print(res)", "n = int(input())\nfor _ in range(n):\n    (_, my_light) = input().split()\n    lights = input() * 2\n    time = -1\n    cur_d = 0\n    in_progress = False\n    if my_light == 'g':\n        print(0)\n        continue\n    for l in lights:\n        cur_d += 1\n        if l == 'g' and in_progress:\n            time = max(cur_d, time)\n            in_progress = False\n        if l == my_light and (not in_progress):\n            cur_d = 0\n            in_progress = True\n    print(time)", "for i in range(int(input())):\n    (n, c) = input().split()\n    n = int(n)\n    s = input()\n    if c == 'g':\n        print(0)\n    else:\n        ans = 0\n        cp = 0\n        c_i = -1\n        for i in range(n):\n            if cp == 0 and s[i] == c:\n                c_i = i\n                cp = 1\n            if s[i] == 'g' and c_i != -1:\n                ans = max(ans, i - c_i)\n                cp = 0\n                c_i = -1\n        if c_i != -1:\n            for i in range(n):\n                if s[i] == 'g':\n                    ans = max(ans, n - c_i + i)\n                    break\n        print(ans)", "t = int(input())\nwhile t > 0:\n    (n, ch) = input().split(' ')\n    n = int(n)\n    x = input()\n    ans = 0\n    idx = 0\n    idxg = 0\n    for i in range(n):\n        if x[i] == 'g':\n            idxg = i\n            break\n    if ch == 'g':\n        print(0)\n    else:\n        i = 0\n        idx = 0\n        while i < n:\n            if x[i] == ch:\n                while idx < n:\n                    if x[idx] == 'g':\n                        ans = max(ans, idx - i)\n                        break\n                    idx += 1\n                if idx == n:\n                    ans = max(ans, n - i + idxg)\n            idx += 1\n            i = idx\n        print(ans)\n    t -= 1", "for i in range(int(input())):\n    (a, b) = input().split()\n    x = input() * 2\n    c = False\n    v = m = 0\n    for j in x:\n        if j == b:\n            c = True\n        if j == 'g':\n            c = False\n            if v > m:\n                m = v\n            v = 0\n        if c:\n            v += 1\n    print(m)", "import sys\nt = int(sys.stdin.readline())\nres = []\nfor i in range(0, t):\n    n_colorC = list(map(str, sys.stdin.readline().split()))\n    n_color = int(n_colorC[0])\n    starting_color = n_colorC[1]\n    string_input = sys.stdin.readline()\n    colors = list(string_input)\n    tmp_duration = 0\n    mx = 0\n    start_i = 0\n    fragment_start = False\n    for i in range(start_i, n_color):\n        if colors[i] == starting_color and tmp_duration == 0:\n            fragment_start = True\n        if fragment_start:\n            tmp_duration += 1\n        if tmp_duration > 0 and colors[i] == 'g':\n            mx = max(mx, tmp_duration - 1)\n            tmp_duration = 0\n            fragment_start = False\n    if tmp_duration > 0 and fragment_start:\n        for i in range(start_i, n_color):\n            tmp_duration += 1\n            if colors[i] == 'g':\n                mx = max(mx, tmp_duration - 1)\n                break\n    res.append(mx)\nfor data in res:\n    print(data)", "t = int(input())\nfor i in range(t):\n    [n, c] = input().split()\n    s = input()\n    s = 2 * s\n    l = []\n    max = 0\n    i = 0\n    while i < int(n):\n        if s[i] == c:\n            count = 0\n            while s[i] != 'g':\n                count += 1\n                i += 1\n            if count > max:\n                max = count\n        i += 1\n    print(max)", "def one():\n    (n, c) = input().split()\n    n = int(n)\n    s = input()\n    q = [None] * n\n    i = s.index('g')\n    for _ in range(n):\n        if s[i] == 'g':\n            q[i] = 0\n        else:\n            q[i] = q[i + 1] + 1\n        i -= 1\n    print(max((q[i] for i in range(n) if s[i] == c)))\nt = int(input())\nfor i in range(t):\n    one()", "def ans(c, s):\n    if c == 'g':\n        return 0\n    first = -1\n    for i in range(len(s)):\n        if s[i] == 'g':\n            first = i\n            break\n    if first == -1:\n        return -1\n    start = -1\n    max_val = 0\n    for i in range(len(s)):\n        if s[i] == c and start == -1:\n            start = i\n        if s[i] == 'g' and start != -1:\n            max_val = max(max_val, i - start)\n            start = -1\n    if start != -1:\n        max_val = max(max_val, len(s) - start + first)\n    return max_val\nfor T in range(int(input())):\n    (n, c) = map(str, input().split())\n    s = input()\n    print(ans(c, s))", "for _ in range(int(input())):\n    (n, c) = input().split()\n    n = int(n)\n    s = input()\n    if c == 'g':\n        print(0)\n    else:\n        d0 = -1\n        rep = 0\n        currD = 0\n        for i in range(n):\n            if s[i] == 'g':\n                if d0 == -1:\n                    d0 = i\n                rep = max(rep, currD)\n                currD = 0\n            elif s[i] == c or currD != 0:\n                currD += 1\n        else:\n            if currD != 0:\n                rep = max(rep, currD + d0)\n        print(rep)", "t = int(input())\nfor i in range(t):\n    nc = input().strip().split()\n    n = int(nc[0])\n    c = nc[1]\n    s = input()\n    if c == 'g':\n        print(0)\n        continue\n    news = s + s[:-1]\n    ans = 0\n    curlen = 0\n    addpa = False\n    for i in news:\n        if addpa:\n            curlen += 1\n        if curlen == 0 and i == c:\n            addpa = True\n        if i == 'g':\n            ans = max(curlen, ans)\n            curlen = 0\n            addpa = False\n    print(ans)", "fl = 'input.txt'\nimport sys\nimport math\nflh = sys.stdin\ntest_cases = int(flh.readline())\nres = []\nfor case in range(test_cases):\n    (n, c) = [x for x in flh.readline().strip().split()]\n    n = int(n)\n    a = flh.readline().strip().split()[0]\n    max_count = -math.inf\n    x = 0\n    g = 0\n    a = a + a\n    while x < len(a):\n        while x < len(a) and a[x] != c:\n            x += 1\n        g = x\n        while g < len(a) and a[g] != 'g':\n            g += 1\n        max_count = max(max_count, g - x)\n        x = g + 1\n    print(max_count)", "t = int(input())\nfor _ in range(t):\n    (n, sym) = input().split()\n    n = int(n)\n    s = input()\n    if sym == 'g':\n        print(0)\n    else:\n        s += s\n        i = 0\n        ans = 0\n        while i < 2 * n:\n            while i < 2 * n and s[i] != sym:\n                i += 1\n            start = i\n            i += 1\n            while i < 2 * n and s[i] != 'g':\n                i += 1\n            end = i\n            i += 1\n            ans = max(ans, end - start)\n        print(ans)", "from re import I\nimport sys\nfor _ in range(int(input())):\n    (n, c) = input().split()\n    s = input()\n    if c == 'g':\n        print(0)\n    else:\n        s2 = s + s\n        f = -1\n        ans = 0\n        for i in range(len(s2)):\n            if f == -1 and s2[i] == c:\n                f = i\n            elif f != -1 and s2[i] == 'g':\n                ans = max(ans, i - f)\n                f = -1\n        print(ans)", "from re import I\nfor _ in range(int(input())):\n    a = [i for i in input().split()]\n    b = input()\n    b += b\n    i = 0\n    n = int(a[0]) * 2\n    cur = a[1]\n    time = 0\n    if a[0] == 1 or cur == 'g':\n        print(0)\n        continue\n    while i < n // 2:\n        if b[i] != cur:\n            i += 1\n        else:\n            (j, co) = (i, 0)\n            while b[j] != 'g' and j < n:\n                j += 1\n                co += 1\n            time = max(time, co)\n            i = j + 1\n    print(time)", "t = int(input(''))\nfor j in range(t):\n    l = input('').split()\n    n = int(l[0])\n    c = l[1]\n    s = input('')\n    s = s * 2\n    a = 0\n    if c == 'g':\n        print(0)\n        continue\n    p = -1\n    for i in range(2 * n):\n        if s[i] == c and p == -1:\n            p = i\n        elif s[i] == 'g' and p != -1:\n            d = i - p\n            p = -1\n            a = max(a, d)\n    print(a)", "test = int(input())\nfor _ in range(test):\n    (n, cur) = map(str, input().split())\n    s = str(input())\n    if cur == 'g':\n        print(0)\n        continue\n    (first, counts, dist, count) = (float('inf'), 0, 0, False)\n    for i in range(len(s)):\n        if s[i] == 'g':\n            first = min(first, i)\n            counts = max(counts, dist)\n            dist = 0\n            count = False\n        if s[i] == cur:\n            count = True\n        if count:\n            dist += 1\n    ans = counts\n    if dist > 0:\n        ans = max(ans, dist + first)\n    print(ans)", "import sys\nimport math\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nfrom functools import lru_cache\nimport heapq\nsys.setrecursionlimit(200000)\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef cust():\n    s = input()\n    return s[:len(s) - 1]\n\ndef solve():\n    tmp = cust().split()\n    n = int(tmp[0])\n    c = tmp[1]\n    s = insr()\n    if c == 'g':\n        print(0)\n        return\n    ans = 0\n    for i in range(n):\n        if s[i] == 'g':\n            curr = (i - 1) % n\n            pathSum = 1\n            while curr != i and s[curr] != 'g':\n                if s[curr] == c:\n                    ans = max(ans, pathSum)\n                pathSum += 1\n                curr = (curr - 1) % n\n    print(ans)\nt = inp()\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, c) = input().split()\n    n = int(n)\n    s = input()\n    s += s\n    s = list(s)\n    if c == 'g':\n        print(0)\n        continue\n    if c == 'r':\n        while s[0] != 'r':\n            s.pop(0)\n        k = 0\n        m = 0\n        for i in range(len(s)):\n            if s[i] == 'r':\n                k += 1\n            elif s[i] == 'y':\n                if k != 0:\n                    k += 1\n            else:\n                if k > m:\n                    m = k\n                k = 0\n        print(m)\n    else:\n        while s[0] != 'y':\n            s.pop(0)\n        k = 0\n        m = 0\n        for i in range(len(s)):\n            if s[i] == 'y':\n                k += 1\n            elif s[i] == 'r':\n                if k != 0:\n                    k += 1\n            else:\n                if k > m:\n                    m = k\n                k = 0\n        print(m)", "for _ in range(int(input())):\n    (a, q) = map(str, input().split())\n    n = int(a)\n    s = input()\n    s1 = s + s\n    f = 0\n    m = 0\n    if q == 'g':\n        print(0)\n    else:\n        for x in s1:\n            if f == 0:\n                if x == q:\n                    f = 1\n                    sc = 0\n            elif x == 'g':\n                m = max(m, sc + 1)\n                f = 0\n            else:\n                sc += 1\n        print(m)", "import heapq\n\nclass solution:\n\n    def solve(self):\n        (n, c) = input().split(' ')\n        n = int(n)\n        s = input()\n        dp = [-1 for _ in range(n)]\n        curr = -1\n        for i in range(n - 1, -1, -1):\n            if s[i] != 'g' and curr == -1:\n                dp[i] = curr\n            elif s[i] != 'g':\n                curr += 1\n                dp[i] = curr\n            else:\n                curr = 0\n                dp[i] = curr\n        i = n - 1\n        while dp[i] == -1:\n            curr += 1\n            dp[i] = curr\n            i -= 1\n        ans = 0\n        for i in range(n):\n            if s[i] == c:\n                if dp[i] > ans:\n                    ans = dp[i]\n        print(ans)\nsol = solution()\nt = int(input())\nfor _ in range(t):\n    sol.solve()", "t = int(input())\n\ndef toint(arr):\n    for i in range(len(arr)):\n        arr[i] = int(arr[i])\n    return arr\nfor _ in range(t):\n    (n, st) = input().split()\n    n = int(n)\n    s = input()\n    ans = 0\n    idx = 0\n    first = -1\n    s = s + s\n    for i in range(n):\n        if s[i] == 'g':\n            first = i\n            break\n    while idx < n:\n        if s[idx] != st:\n            idx += 1\n        else:\n            start = idx\n            temp = idx\n            while s[temp] != 'g':\n                temp += 1\n            ans = max(temp - start, ans)\n            idx = temp + 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, c) = input().split()\n    s = input()\n    x = [i for (i, x) in enumerate(s) if x == c]\n    newS = s + s[:s.index('g') + 1]\n    maxi = 0\n    for i in range(len(x)):\n        newS = newS[newS.index(c):]\n        if len(newS) == 0:\n            break\n        tempS = newS[newS.index(c):newS.index('g')]\n        if len(tempS) > maxi:\n            maxi = len(tempS)\n        if newS.index('g') == len(newS) - 1:\n            break\n        newS = newS[newS.index('g'):]\n        if c not in newS:\n            break\n    print(maxi)", "t = int(input())\nfor i in range(t):\n    (a, c) = input().strip().split()\n    n = int(a)\n    s = input()\n    if c == 'g':\n        print(0)\n    else:\n        max_time = -1\n        i = 0\n        while i < n:\n            time = 1\n            if s[i] == c:\n                j = (i + 1) % n\n                for k in range(n - 1):\n                    if s[j] == 'g':\n                        if time > max_time:\n                            max_time = time\n                        break\n                    time += 1\n                    j = (j + 1) % n\n                if j > i:\n                    i = j + 1\n                else:\n                    break\n            else:\n                i += 1\n        print(max_time)", "a = int(input())\nfor y in range(a):\n    (l, b) = map(str, input().split())\n    c = input()\n    c = c + c\n    s = 0\n    h = -1\n    if b == 'g':\n        print(0)\n    else:\n        for y in range(2 * int(l)):\n            if c[y] == b and h == -1:\n                h = y\n            elif c[y] == 'g':\n                if h != -1:\n                    s = max(s, y - h)\n                    h = -1\n        print(s)", "t = int(input())\nfor tc in range(t):\n    (n, c) = input().split()\n    s = input()\n    answer = -1\n    first_green = -1\n    last_green = -1\n    last_c = -1\n    prev_c = -1\n    if c == 'g':\n        print('0')\n    else:\n        for i in range(len(s)):\n            if s[i] == c and prev_c == -1:\n                prev_c = i\n            if s[i] == 'g':\n                last_green = i\n                if prev_c != -1 and answer < i - prev_c:\n                    answer = i - prev_c\n                prev_c = -1\n            if s[i] == c:\n                last_c = i\n            if s[i] == 'g' and first_green == -1:\n                first_green = i\n        if prev_c == -1:\n            prev_c = last_c\n        if first_green != -1 and min(last_c, prev_c) > last_green:\n            answer = max(answer, int(n) - min(last_c, prev_c) + first_green)\n        print(answer)", "def crossRoad(n, c, s):\n    found = False\n    prev = 0\n    res = 0\n    if c == 'g':\n        return 0\n    for i in range(2 * n):\n        idx = i % n\n        if found:\n            if s[idx] == 'g':\n                res = max(res, i - prev)\n                prev = 0\n                found = False\n        elif c == s[idx]:\n            prev = i\n            found = True\n    return res\nT = int(input())\nfor i in range(T):\n    (n, c) = [i for i in input().split()]\n    n = int(n)\n    s = input()\n    res = crossRoad(n, c, s)\n    print(res)", "t = int(input())\nfor i in range(t):\n    nc = input().split()\n    n = int(nc[0])\n    c = nc[1]\n    s = input()\n    if c == 'g':\n        print(0)\n        continue\n    s = s + s\n    s = [*s]\n    stack = []\n    ret = []\n    fs = 0\n    for i in range(len(s)):\n        if s[i] == c:\n            fs = i\n            break\n    stack.append(fs)\n    for i in range(fs + 1, len(s)):\n        if stack and s[i] == 'g':\n            val = i - stack[0]\n            stack.pop()\n            ret.append(val)\n        elif not stack and s[i] == c:\n            stack.append(i)\n    print(max(ret))", "tc = int(input())\nfor TC in range(tc):\n    (n, c) = input().split()\n    n = int(n)\n    s = input()\n    l = []\n    (fc, fg) = (None, None)\n    ans = 0\n    if c == 'g':\n        print('0')\n        continue\n    for i in s:\n        if i == c or i == 'g':\n            l.append(i)\n        else:\n            l.append(' ')\n    ind = 1\n    for i in l:\n        if fg == None and i == 'g':\n            fg = ind\n        if fc == None and i == c:\n            fc = ind\n        if i == 'g' and fc != None:\n            ans = max(ans, ind - fc)\n            fc = None\n        ind += 1\n    if fc != None:\n        ans = max(ans, n - fc + fg)\n    print(ans)", "N = int(input())\nfor x in range(N):\n    line1 = input()\n    line1 = line1.split()\n    n = int(line1[0])\n    c = line1[1]\n    s = input()\n    s *= 2\n    output = 0\n    if c == 'g':\n        print(output)\n        continue\n    s = s.split('g')\n    for i in s:\n        for j in range(len(i)):\n            if i[j] == c:\n                if len(i) - j > output:\n                    output = len(i) - j\n                break\n    print(output)", "t = int(input())\nfor i in range(t):\n    (n, c) = list(map(str, input().split(sep=' ')))\n    s = input()\n    s = 2 * s\n    n = int(n)\n    j = 0\n    k = 0\n    m = 0\n    if c == 'g':\n        print(0)\n    else:\n        while j < n:\n            if s[j] == c:\n                if s[k] == 'g':\n                    m = max(m, k - j)\n                    j = k + 1\n                k = k + 1\n            else:\n                j = j + 1\n                k = j\n        print(m)"]