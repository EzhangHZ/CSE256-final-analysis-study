["import math\nx = int(input())\n\ndef do(has):\n    n = len(has)\n    dc = {}\n    for (i, v) in enumerate(has):\n        dc[v] = i\n    res = -3\n    if 1 in dc:\n        res = max(res, dc[1] + n - 1)\n        del dc[1]\n    ndc = sorted(([dc[i], i] for i in dc))[::-1]\n    n = len(ndc)\n    for i in range(n):\n        (ai, vi) = ndc[i]\n        if res >= 2 * ai:\n            break\n        for j in range(i + 1, n):\n            (aj, vj) = ndc[j]\n            if math.gcd(vi, vj) == 1:\n                res = max(res, ai + aj)\n                break\n    return res + 2\nfor _ in range(x):\n    a = int(input())\n    lis = list(map(int, input().split()))\n    print(do(lis))", "import math\nx = int(input())\n\ndef do(has):\n    n = len(has)\n    dc = {}\n    for (i, v) in enumerate(has):\n        dc[v] = i\n    res = -3\n    if 1 in dc:\n        res = max(res, dc[1] + n - 1)\n        del dc[1]\n    ndc = sorted(([dc[i], i] for i in dc))[::-1]\n    n = len(ndc)\n    for i in range(n):\n        (ai, vi) = ndc[i]\n        if res >= 2 * ai:\n            break\n        for j in range(i + 1, n):\n            (aj, vj) = ndc[j]\n            if math.gcd(vi, vj) == 1:\n                res = max(res, ai + aj)\n                break\n    return res + 2\nfor _ in range(x):\n    a = int(input())\n    lis = list(map(int, input().split()))\n    print(do(lis))", "import math\nfor jj in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    p = {}\n    for (i, v) in enumerate(arr):\n        p[v] = i\n    ans = -1\n    t = sorted(p.keys(), key=lambda x: p[x])\n    for i in range(len(t)):\n        for j in range(len(t) - 1, i - 1, -1):\n            if math.gcd(t[i], t[j]) == 1:\n                ans = max(ans, p[t[i]] + p[t[j]] + 2)\n                break\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for (k, v) in enumerate(l):\n        d[v] = k\n    m = -1\n    s = sorted(d.keys(), key=lambda x: d[x])\n    for i in range(0, len(s)):\n        for j in range(len(s) - 1, i - 1, -1):\n            if math.gcd(s[i], s[j]) == 1:\n                x = d[s[i]] + d[s[j]] + 2\n                m = max(m, x)\n                break\n    print(m)", "from math import gcd\nfor _ in range(int(input())):\n    a = int(input())\n    b = input().split()\n    d = {}\n    for x in range(a):\n        d[int(b[x])] = x\n    b = []\n    for x in d.items():\n        b += [x]\n    b.sort(key=lambda x: x[1])\n    c = -3\n    for x in range(1, len(b) + 1):\n        for y in range(x, len(b) + 1):\n            if gcd(b[-x][0], b[-y][0]) == 1:\n                if c < b[-x][1] + b[-y][1]:\n                    c = b[-x][1] + b[-y][1]\n                break\n    print(c + 2)", "import math\nfor jj in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    p = {}\n    for (i, v) in enumerate(arr):\n        p[v] = i\n    ans = -1\n    t = sorted(p.keys(), key=lambda x: p[x])\n    tt = len(t)\n    for i in range(tt):\n        for j in range(tt - 1, i - 1, -1):\n            if math.gcd(t[i], t[j]) == 1:\n                ans = max(ans, p[t[i]] + p[t[j]] + 2)\n                break\n    print(ans)", "import math\nt = int(input())\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    hash_map = {}\n    for i in range(n):\n        hash_map[arr[i]] = i\n    t = sorted(hash_map.keys(), key=lambda x: hash_map[x])\n    ans = -1\n    for i in range(len(t)):\n        for j in range(len(t) - 1, -1, -1):\n            if math.gcd(t[i], t[j]) == 1:\n                ans = max(ans, 2 + hash_map[t[i]] + hash_map[t[j]])\n                break\n    print(ans)\nwhile t:\n    solve()\n    t -= 1", "import math\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mx = -1\n    d = {}\n    for i in range(n):\n        d[l[i]] = i\n    lst = []\n    for i in d:\n        lst.append([d[i], i])\n    lst = sorted(lst)\n    l = []\n    for (i, j) in lst:\n        l.append(j)\n    for i in range(len(l) - 1, -1, -1):\n        if 2 * d[l[i]] + 2 <= mx:\n            break\n        for j in range(i, -1, -1):\n            if d[l[i]] + d[l[j]] + 2 <= mx:\n                break\n            if math.gcd(l[i], l[j]) == 1:\n                mx = max(mx, d[l[i]] + d[l[j]] + 2)\n    print(mx)", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return abs(x)\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mx = -1\n    d = {}\n    for i in range(n):\n        d[l[i]] = i\n    lst = []\n    for i in d:\n        lst.append([d[i], i])\n    lst = sorted(lst)\n    l = []\n    for (i, j) in lst:\n        l.append(j)\n    n = len(l)\n    for i in range(n - 1, -1, -1):\n        if 2 * d[l[i]] + 2 <= mx:\n            break\n        for j in range(i, -1, -1):\n            if d[l[i]] + d[l[j]] + 2 <= mx:\n                break\n            if gcd(l[i], l[j]) == 1:\n                mx = max(mx, d[l[i]] + d[l[j]] + 2)\n    print(mx)", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return abs(x)\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mx = -1\n    d = {}\n    for i in range(n):\n        d[l[i]] = i\n    lst = []\n    for i in d:\n        lst.append([d[i], i])\n    lst = sorted(lst)\n    l = []\n    for (i, j) in lst:\n        l.append(j)\n    n = len(l)\n    for i in range(n - 1, -1, -1):\n        if 2 * d[l[i]] + 2 <= mx:\n            break\n        for j in range(i, -1, -1):\n            if d[l[i]] + d[l[j]] + 2 <= mx:\n                break\n            if gcd(l[i], l[j]) == 1:\n                mx = max(mx, d[l[i]] + d[l[j]] + 2)\n    print(mx)", "import math\ncache = {}\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    res = -1\n    nums = list(map(int, input().split()))\n    seen = set()\n    unique = []\n    for i in range(n - 1, -1, -1):\n        if nums[i] not in seen:\n            seen.add(nums[i])\n            unique.append((nums[i], i + 1))\n    m = len(unique)\n    for i in range(m):\n        (val1, in1) = unique[i]\n        if in1 + n <= res:\n            break\n        for j in range(i, m):\n            (val2, in2) = unique[j]\n            if in1 + in2 <= res:\n                break\n            (a, b) = (min(val1, val2), max(val1, val2))\n            if (a, b) not in cache:\n                cache[a, b] = math.gcd(a, b)\n            gcd = cache[a, b]\n            if gcd == 1:\n                res = in1 + in2\n    print(res)", "from math import gcd\n\ndef highest_coprime(n, arr):\n    dict = {}\n    for (i, value) in enumerate(arr):\n        dict[value] = i + 1\n    max = -1\n    for i in dict:\n        for j in dict:\n            if dict[i] + dict[j] > max and gcd(i, j) == 1:\n                max = dict[i] + dict[j]\n    print(max)\n\ndef main():\n    for i in range(int(input())):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        highest_coprime(n, arr)\nmain()", "from math import gcd\n\ndef solve():\n    coprimes = [(0, 0)] + [(i, j) for i in range(1000) for j in range(i) if gcd(i + 1, j + 1) == 1]\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        indexes = [None] * 1000\n        for (i, value) in enumerate(map(int, input().split())):\n            indexes[value - 1] = i\n        best = -1\n        for (i, j) in coprimes:\n            index_1 = indexes[i]\n            index_2 = indexes[j]\n            if index_1 != None != index_2:\n                best = max(best, index_1 + index_2 + 2)\n        print(best)\nsolve()", "def gcd(a: int, b: int):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\narr = []\nfor i in range(1004):\n    arr.append([])\nfor i in range(1, 1001):\n    for j in range(i, 1001):\n        if gcd(j, i) == 1:\n            arr[i].append(j)\nT = int(input())\nwhile T > 0:\n    T -= 1\n    n = int(input())\n    num = [int(x) for x in input().strip().split(' ')]\n    dis = [0] * 1005\n    for i in range(n):\n        if dis[num[i]] < i + 1:\n            dis[num[i]] = i + 1\n    ans = -1\n    for i in range(1001, 0, -1):\n        if dis[i] != 0:\n            for j in arr[i]:\n                if dis[j] != 0:\n                    if ans < dis[i] + dis[j]:\n                        ans = dis[i] + dis[j]\n    print(ans)", "from collections import defaultdict\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef solve(nums, pairs):\n    ans = -1\n    pos = {}\n    for (idx, num) in enumerate(nums):\n        pos[num] = idx + 1\n    for i in pos:\n        for j in pairs[i]:\n            if i in pos and j in pos:\n                ans = max(ans, pos[i] + pos[j])\n    return ans\nt = int(input())\nres = []\npairs = [[] for _ in range(1001)]\nfor i in range(1, 1001):\n    for j in range(i, 1001):\n        if gcd(i, j) == 1:\n            pairs[i].append(j)\nfor _ in range(t):\n    _ = input()\n    nums = list(map(int, input().split()))\n    res.append(solve(nums, pairs))\nfor r in res:\n    print(r)", "from math import gcd\nN = int(input())\nh = []\nfor i in range(N):\n    f = -1\n    k = int(input())\n    b = set()\n    bb = []\n    a = list(map(int, input().split()))\n    for i in range(k - 1, -1, -1):\n        if a[i] not in b:\n            b.add(a[i])\n            bb.append((a[i], i + 1))\n    kk = len(bb)\n    for i in range(kk):\n        for j in range(i, kk):\n            ss = bb[i][1] + bb[j][1]\n            if ss > f:\n                o = bb[i][0]\n                g = bb[j][0]\n                if gcd(o, g) == 1:\n                    f = ss\n                    break\n    h.append(f)\nfor t in h:\n    print(t)", "import math\nt = int(input())\nfor tt in range(t):\n    input()\n    (*a,) = map(int, input().split())\n    s = set()\n    n = len(a)\n    b = []\n    for i in a[::-1]:\n        if not i in s:\n            b += [[i, n]]\n            s.add(i)\n        n -= 1\n    N = len(b)\n    best = -1\n    for (i, i1) in b:\n        for (j, j1) in b:\n            if i1 + j1 > best and math.gcd(i, j) == 1:\n                best = i1 + j1\n    print(best)", "import math\n\ndef solve(nums):\n    result = -1\n    coprimes = {}\n    indices = {n: i for (i, n) in enumerate(nums)}\n    for n in sorted(indices.keys(), reverse=True):\n        i = indices[n]\n        for k in range(1, n + 1):\n            if math.gcd(n, k) == 1:\n                if k not in coprimes:\n                    coprimes[k] = i\n                else:\n                    coprimes[k] = max(coprimes[k], i)\n        if n in coprimes:\n            result = max(result, i + coprimes[n] + 2)\n    return result\nt = int(input())\noutputs = []\nfor _ in range(t):\n    _ = input()\n    outputs.append(solve([int(i) for i in input().split(' ')]))\nfor output in outputs:\n    print(output)", "import math\ngcds = [[math.gcd(i, j) for i in range(1001)] for j in range(1001)]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    vals = {i: n for (n, i) in enumerate(map(int, input().split()))}\n    maxsum = -1\n    for (num, (row, rowind)) in enumerate(vals.items()):\n        for (col, colind) in list(vals.items())[num:]:\n            if gcds[row][col] == 1:\n                if rowind + colind + 2 > maxsum:\n                    maxsum = rowind + colind + 2\n    print(maxsum)", "import math\ngcds = [[math.gcd(i, j) for i in range(1001)] for j in range(1001)]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    vals = {i: n for (n, i) in enumerate(map(int, input().split()))}\n    maxsum = -1\n    for (num, (row, rowind)) in enumerate(vals.items()):\n        for (col, colind) in list(vals.items())[num:]:\n            if gcds[row][col] == 1:\n                if rowind + colind + 2 > maxsum:\n                    maxsum = rowind + colind + 2\n    print(maxsum)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    hash = dict()\n    for i in range(n):\n        hash[a[i]] = i + 1\n    ans = -1\n    for i in hash:\n        for j in hash:\n            if hash[i] + hash[j] > ans and math.gcd(i, j) == 1:\n                ans = max(ans, hash[i] + hash[j])\n    print(ans)", "from math import gcd\nfor test in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    vals = {}\n    res = -1\n    for i in range(n):\n        vals[arr[i]] = i + 1\n    for x in vals:\n        for y in vals:\n            if res < vals[x] + vals[y] and gcd(x, y) == 1:\n                res = vals[x] + vals[y]\n    print(res)", "from math import gcd\nfor _ in range(int(input())):\n    _max = -1\n    n = int(input())\n    d = {}\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        d[arr[i]] = i + 1\n    for i in d:\n        for j in d:\n            if _max < d[i] + d[j] and gcd(i, j) == 1:\n                _max = d[i] + d[j]\n    print(_max)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    index_dic = {}\n    for i in range(n):\n        index_dic[arr[i]] = i + 1\n    ans = -1\n    for i in index_dic:\n        for j in index_dic:\n            if index_dic[i] + index_dic[j] > ans and gcd(i, j) == 1:\n                ans = index_dic[i] + index_dic[j]\n    print(ans)", "from math import gcd\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    h = [-1 for i in range(1001)]\n    for i in range(n):\n        h[arr[i]] = i\n    res = -1\n    for i in range(1, 1001):\n        if h[i] == -1:\n            continue\n        for j in range(i, 1001):\n            if h[j] == -1:\n                continue\n            if gcd(i, j) == 1:\n                res = max(res, h[i] + h[j] + 2)\n    print(res)\nfor i in range(int(input())):\n    solve()", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    d = {}\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        d[arr[i]] = i + 1\n    ans = -1\n    for i in d:\n        for j in d:\n            if d[i] + d[j] > ans and gcd(i, j) == 1:\n                ans = max(ans, d[i] + d[j])\n    print(ans)", "def gcd(a, b):\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a\nn = int(input())\nfor i in range(n):\n    l = int(input())\n    arr = [int(_) for _ in input().split()]\n    vals = {}\n    for (i, item) in enumerate(arr):\n        if item in vals:\n            vals[item] = max(vals[item], i + 1)\n        else:\n            vals[item] = i + 1\n    max_sum = 0\n    for (x, x_value) in vals.items():\n        for (y, y_value) in vals.items():\n            if x_value + y_value <= max_sum:\n                continue\n            if gcd(x, y) == 1:\n                max_sum = max(max_sum, x_value + y_value)\n    if not max_sum:\n        print('-1')\n    else:\n        print(max_sum)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    p = -1\n    d = {}\n    for i in range(n):\n        d[l[i]] = i + 1\n    for i in d:\n        for j in d:\n            if d[i] + d[j] > p and gcd(i, j) == 1:\n                p = d[i] + d[j]\n    print(str(p) + '\\n')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    v = list(map(int, input().split()))\n    dic = {}\n    for i in range(len(v)):\n        dic[v[i]] = i + 1\n    ans = 0\n    for i in dic:\n        for j in dic:\n            if dic[i] + dic[j] > ans and math.gcd(i, j) == 1:\n                ans = max(ans, dic[i] + dic[j])\n    print(ans if ans != 0 else -1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    v = list(map(int, input().split()))\n    dic = {}\n    for i in range(len(v)):\n        dic[v[i]] = i + 1\n    ans = 0\n    for i in dic:\n        for j in dic:\n            if dic[i] + dic[j] > ans and math.gcd(i, j) == 1:\n                ans = max(ans, dic[i] + dic[j])\n    print(ans if ans != 0 else -1)", "from math import gcd as g\n\ndef codeforces(ar):\n    ds = {}\n    ind = 1\n    for i in ar:\n        ds[i] = ind\n        ind += 1\n    s = []\n    for i in ds:\n        s.append(i)\n    ans = -1\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            (a, b) = (s[i], s[j])\n            if g(a, b) == 1:\n                ans = max(ds[a] + ds[b], ans)\n    return ans\nts = int(input())\nfor test in range(ts):\n    n = int(input())\n    ar = [int(i) for i in input().split()]\n    print(codeforces(ar))", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    d = {}\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        d[arr[i]] = i + 1\n    ans = -1\n    for i in d:\n        for j in d:\n            if d[i] + d[j] > ans and gcd(i, j) == 1:\n                ans = max(ans, d[i] + d[j])\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    _max = -1\n    n = int(input())\n    d = {}\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        d[arr[i]] = i + 1\n    for i in d:\n        for j in d:\n            if _max < d[i] + d[j] and gcd(i, j) == 1:\n                _max = max(_max, d[i] + d[j])\n    print(_max)", "import math\nfor n in range(int(input())):\n    s = int(input())\n    l = list(map(int, input().split()))\n    h = dict()\n    for i in range(s):\n        h[l[i]] = i + 1\n    ans = -1\n    for i in h:\n        for j in h:\n            if h[i] + h[j] > ans and math.gcd(i, j) == 1:\n                ans = h[i] + h[j]\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    p = -1\n    d = {}\n    for i in range(n):\n        d[l[i]] = i + 1\n    for i in d:\n        for j in d:\n            if d[i] + d[j] > p and gcd(i, j) == 1:\n                p = d[i] + d[j]\n    print(str(p) + '\\n')", "import math\nimport sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    ans = -1\n    zi = {}\n    for j in range(len(a)):\n        zi[a[j]] = j + 1\n    for i in zi.keys():\n        for j in zi.keys():\n            if zi[i] + zi[j] > ans and math.gcd(i, j) == 1:\n                ans = zi[i] + zi[j]\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    index_dic = {}\n    for i in range(n):\n        index_dic[arr[i]] = i + 1\n    ans = -1\n    for i in index_dic:\n        for j in index_dic:\n            if index_dic[i] + index_dic[j] > ans and gcd(i, j) == 1:\n                ans = index_dic[i] + index_dic[j]\n    print(ans)", "def gcd(m, n):\n    return m if n == 0 else gcd(n, m % n)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    hash = dict()\n    for i in range(n):\n        hash[a[i]] = i + 1\n    ans = -1\n    for i in hash:\n        for j in hash:\n            if hash[i] + hash[j] > ans and gcd(i, j) == 1:\n                ans = max(ans, hash[i] + hash[j])\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    d = {}\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        d[arr[i]] = i + 1\n    ans = -1\n    for i in d:\n        for j in d:\n            if d[i] + d[j] > ans and gcd(i, j) == 1:\n                ans = max(ans, d[i] + d[j])\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    har = int(input())\n    kup = {}\n    arr = list(map(int, input().split()))\n    for i in range(har):\n        kup[arr[i]] = i + 1\n    sol = -1\n    for i in kup:\n        for j in kup:\n            if kup[i] + kup[j] > sol and gcd(i, j) == 1:\n                sol = max(sol, kup[i] + kup[j])\n    print(sol)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    d = {}\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        d[arr[i]] = i + 1\n    ans = -1\n    for i in d:\n        for j in d:\n            if d[i] + d[j] > ans and gcd(i, j) == 1:\n                ans = max(ans, d[i] + d[j])\n    print(ans)", "from math import gcd\n\ndef highest_coprime(n, arr):\n    dict = {}\n    for (i, value) in enumerate(arr):\n        dict[value] = i + 1\n    max = -1\n    for i in dict:\n        for j in dict:\n            if gcd(i, j) == 1 and dict[i] + dict[j] > max:\n                max = dict[i] + dict[j]\n    print(max)\n\ndef main():\n    for i in range(int(input())):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        highest_coprime(n, arr)\nmain()", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    d = {}\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        d[arr[i]] = i + 1\n    ans = -1\n    for i in d:\n        for j in d:\n            if d[i] + d[j] > ans and gcd(i, j) == 1:\n                ans = max(ans, d[i] + d[j])\n    print(ans)", "from math import gcd\nnum_tests = int(input())\nfor _ in range(num_tests):\n    length_list = int(input())\n    data = [int(x) for x in input().split()]\n    dictionary = {}\n    for i in range(length_list):\n        dictionary[data[i]] = i + 1\n    result = -1\n    for i in dictionary.keys():\n        for j in dictionary.keys():\n            if dictionary[i] + dictionary[j] > result and gcd(i, j) == 1:\n                result = dictionary[i] + dictionary[j]\n    print(result)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    d = {}\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        d[arr[i]] = i + 1\n    ans = -1\n    for i in d:\n        for j in d:\n            if d[i] + d[j] > ans and gcd(i, j) == 1:\n                ans = max(ans, d[i] + d[j])\n    print(ans)", "import math\n\ndef main():\n    n = int(input())\n    d = dict()\n    for (i, num) in enumerate(map(int, input().split())):\n        d[num] = i + 1\n    ans = -1\n    for i in range(1, 1001):\n        for j in range(1, 1001):\n            if i not in d or j not in d:\n                continue\n            if d[i] + d[j] < ans:\n                continue\n            if math.gcd(i, j) == 1:\n                ans = d[i] + d[j]\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    main()", "from math import gcd\nfor _ in range(int(input())):\n    x = int(input())\n    l = list(map(int, input().split()))\n    p = -1\n    d = {}\n    for i in range(x):\n        d[l[i]] = i + 1\n    for i in d:\n        for j in d:\n            if d[i] + d[j] > p and gcd(i, j) == 1:\n                p = d[i] + d[j]\n    print(p)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    p = -1\n    d = {}\n    for i in range(n):\n        d[l[i]] = i + 1\n    for i in d:\n        for j in d:\n            if d[i] + d[j] > p and gcd(i, j) == 1:\n                p = d[i] + d[j]\n    print(p)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    d = {}\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        d[arr[i]] = i + 1\n    ans = -1\n    for i in d:\n        for j in d:\n            if d[i] + d[j] > ans and gcd(i, j) == 1:\n                ans = max(ans, d[i] + d[j])\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    d = {}\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        d[arr[i]] = i + 1\n    ans = -1\n    for i in d:\n        for j in d:\n            if d[i] + d[j] > ans and gcd(i, j) == 1:\n                ans = max(ans, d[i] + d[j])\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    x = int(input())\n    l = list(map(int, input().split()))\n    p = -1\n    d = {}\n    for i in range(x):\n        d[l[i]] = i + 1\n    for i in d:\n        for j in d:\n            if d[i] + d[j] > p and gcd(i, j) == 1:\n                p = d[i] + d[j]\n    print(p)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    p = -1\n    d = {}\n    for i in range(n):\n        d[l[i]] = i + 1\n    for i in d:\n        for j in d:\n            if d[i] + d[j] > p and gcd(i, j) == 1:\n                p = d[i] + d[j]\n    print(p)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    d = {}\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        d[arr[i]] = i + 1\n    ans = -1\n    for i in d:\n        for j in d:\n            if d[i] + d[j] > ans and gcd(i, j) == 1:\n                ans = max(ans, d[i] + d[j])\n    print(ans)", "import math\nt = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    list1 = [int(num) for num in input().split()]\n    list2 = [0 for i in range(0, 1001)]\n    ans = -1\n    for i in range(0, n):\n        list2[list1[i]] = i + 1\n    for i in range(1, 1001):\n        if list2[i] != 0:\n            for j in range(i, 1001):\n                if list2[j] != 0:\n                    if math.gcd(i, j) == 1:\n                        if list2[i] + list2[j] > ans:\n                            ans = list2[i] + list2[j]\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    p = -1\n    d = {}\n    for i in range(n):\n        d[l[i]] = i + 1\n    for i in d:\n        for j in d:\n            if d[i] + d[j] > p and gcd(i, j) == 1:\n                p = d[i] + d[j]\n    print(str(p) + '\\n')", "import math\n\ndef main():\n    n = int(input())\n    d = dict()\n    for (i, num) in enumerate(map(int, input().split())):\n        d[num] = i + 1\n    ans = -1\n    for i in range(1, 1001):\n        for j in range(1, 1001):\n            if i not in d or j not in d:\n                continue\n            if d[i] + d[j] < ans:\n                continue\n            if math.gcd(i, j) == 1:\n                ans = d[i] + d[j]\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    main()", "from math import gcd\nfor _ in range(int(input())):\n    x = int(input())\n    l = list(map(int, input().split()))\n    p = -1\n    d = {}\n    for i in range(x):\n        d[l[i]] = i + 1\n    for i in d:\n        for j in d:\n            if d[i] + d[j] > p and gcd(i, j) == 1:\n                p = d[i] + d[j]\n    print(p)", "import sys\ninput = sys.stdin.readline\nfrom math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict()\n    for i in range(n):\n        d[a[i]] = i + 1\n    w = list(d.keys())\n    maxx = -1\n    for i in range(len(w)):\n        for j in range(i, len(w)):\n            if gcd(w[i], w[j]) < 2 and maxx < d[w[i]] + d[w[j]]:\n                maxx = d[w[i]] + d[w[j]]\n    print(maxx)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    sum = -1\n    d = {num: i + 1 for (i, num) in enumerate(l)}\n    l2 = list(d.keys())\n    for i in range(len(d)):\n        for j in range(i, len(d)):\n            if gcd(l2[i], l2[j]) == 1:\n                if d[l2[i]] + d[l2[j]] > sum:\n                    sum = d[l2[i]] + d[l2[j]]\n    print(sum)", "from math import gcd\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dic = {}\n    for i in range(n):\n        dic[arr[i]] = i + 1\n    ans = -1\n    for i in dic:\n        for j in dic:\n            if dic[i] + dic[j] > ans and gcd(i, j) == 1:\n                ans = dic[i] + dic[j]\n    print(ans)\n    t -= 1", "import math\ntst = int(input())\nfor i in range(tst):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dic = {}\n    ans = -1\n    for i in range(n):\n        dic[arr[i]] = i + 1\n    for i in dic:\n        for j in dic:\n            if dic[i] + dic[j] > ans and math.gcd(i, j) == 1:\n                ans = max(ans, dic[i] + dic[j])\n    print(ans)", "import math\nfrom collections import *\n\ndef solve():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    d = {}\n    for i in range(len(a)):\n        d[a[i]] = i\n    ans = 0\n    t = list(set(a))\n    for i in range(len(t) - 1, -1, -1):\n        for j in range(i, -1, -1):\n            if math.gcd(t[i], t[j]) == 1:\n                ans = max(ans, d[t[i]] + d[t[j]] + 2)\n    if ans == 0:\n        print(-1)\n        return\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    even = {}\n    odd = {}\n    c = 0\n    for h in arr:\n        c += 1\n        if h % 2 == 0:\n            even[h] = c\n        else:\n            odd[h] = c\n    maxij = -1\n    for i in odd:\n        for j in odd:\n            if gcd(i, j) == 1 and odd.get(i) + odd.get(j) > maxij:\n                maxij = odd.get(i) + odd.get(j)\n    for i in odd:\n        for j in even:\n            if gcd(i, j) == 1 and even.get(j) + odd.get(i) > maxij:\n                maxij = even.get(j) + odd.get(i)\n    print(maxij)", "import sys\nimport collections\nfrom math import ceil, gcd, sqrt, log\nimport bisect\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    net = [[-1] for i in range(1001)]\n    for i in range(n):\n        x = A[i]\n        net[x].append(i)\n    maxi = -1\n    for i in range(1, 1001):\n        for j in range(i, 1001):\n            if gcd(i, j) == 1:\n                a = net[i][-1] + 1\n                b = net[j][-1] + 1\n                if a != 0 and b != 0:\n                    maxi = max(maxi, a + b)\n    print(maxi)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    d = {}\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        d[arr[i]] = i + 1\n    _max = -1\n    for i in d:\n        for j in d:\n            if _max < d[i] + d[j] and gcd(i, j) == 1:\n                _max = max(_max, d[i] + d[j])\n    print(_max)", "from math import gcd\nfor test in range(int(input())):\n    (n, arr, vals, res) = (int(input()), list(map(int, input().split())), {}, -1)\n    for i in range(n):\n        vals[arr[i]] = i + 1\n    for x in vals:\n        for y in vals:\n            if res < vals[x] + vals[y] and gcd(x, y) == 1:\n                res = vals[x] + vals[y]\n    print(res)", "from math import gcd\n\ndef solution():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = -1\n    d = [0 for i in range(1000)]\n    for i in range(n):\n        d[a[i] - 1] = i\n    for i in range(1000):\n        for j in range(i, 1000):\n            if gcd(a[d[i]], a[d[j]]) == 1:\n                ans = max(ans, d[i] + d[j] + 2)\n    print(ans)\n\ndef main():\n    t = int(input())\n    while t:\n        solution()\n        t -= 1\nmain()", "import sys\nimport collections\nfrom math import ceil, gcd, sqrt, log\nimport bisect\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    net = [[-1] for i in range(1001)]\n    for i in range(n):\n        x = A[i]\n        net[x].append(i)\n    maxi = -1\n    for i in range(1, 1001):\n        for j in range(i, 1001):\n            if gcd(i, j) == 1:\n                a = net[i][-1] + 1\n                b = net[j][-1] + 1\n                if a != 0 and b != 0:\n                    maxi = max(maxi, a + b)\n    print(maxi)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "import os\nimport math\nimport collections\nimport bisect\nimport functools\nimport itertools\nimport heapq\n\ndef solve(a, n):\n    d = {}\n    for (i, x) in enumerate(a):\n        d[x] = i + 1\n    b = list(d.keys())\n    res = -1\n    for i in range(len(b)):\n        for j in range(i, len(b)):\n            if math.gcd(b[i], b[j]) == 1:\n                res = max(res, d[b[i]] + d[b[j]])\n    return res\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(solve(a, n))", "import math\n\ndef solve(A):\n    B = [0] * 1001\n    for (i, e) in enumerate(A):\n        B[e] = max(i + 1, B[e])\n    res = -1\n    for i in range(1001):\n        for j in range(i, 1001):\n            if B[i] != 0 and B[j] != 0 and (math.gcd(i, j) == 1):\n                res = max(res, B[i] + B[j])\n    return res if res != -1 else -1\n\ndef main():\n    for _ in range(int(input())):\n        input()\n        A = [int(e) for e in input().split()]\n        print(solve(A))\nmain()", "import math\n\ndef main():\n    x = int(input())\n    a = []\n    for m in range(x):\n        y = int(input())\n        b = input().split()\n        a.append(b)\n    for i in a:\n        findmax(i)\n\ndef findmax(array):\n    hm = {}\n    max = -1\n    for i in range(1, 1001):\n        hm[i] = -1\n    for j in range(len(array)):\n        hm[int(array[j])] = j + 1\n    for c in range(1, 1001):\n        for v in range(c, 1001):\n            if hm[c] != -1 and hm[v] != -1:\n                if coprime(c, v) and max < hm[c] + hm[v]:\n                    max = hm[c] + hm[v]\n    print(max)\n\ndef coprime(a, b):\n    return math.gcd(a, b) == 1\nmain()", "import math\n\ndef coprime(array):\n    hashMap = {}\n    maxVal = -1\n    for (index, num) in enumerate(array):\n        hashMap[num] = index\n    keys = list(hashMap.keys())\n    for i in range(len(keys)):\n        for j in range(i, len(keys)):\n            if math.gcd(keys[j], keys[i]) == 1:\n                maxVal = max(maxVal, hashMap[keys[i]] + hashMap[keys[j]] + 2)\n    return maxVal\nt = int(input())\nwhile t > 0:\n    length = int(input())\n    array = list(map(int, input().split(' ')))\n    print(coprime(array=array))\n    t -= 1", "import math\n\ndef fun(arr, n):\n    d = {}\n    ans = -1\n    for i in range(n):\n        d[arr[i]] = i\n    for i in range(1, 1001):\n        j = i\n        if i in d:\n            while j <= 1000:\n                if j in d:\n                    if math.gcd(i, j) == 1:\n                        ans = max(d[i] + d[j] + 2, ans)\n                j = j + 1\n    return ans\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(fun(arr, n))", "import sys\ninput = sys.stdin.readline\nfrom math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict()\n    for i in range(n):\n        d[a[i]] = i + 1\n    w = list(d.keys())\n    maxx = -1\n    for i in range(len(w)):\n        for j in range(i, len(w)):\n            if gcd(w[i], w[j]) < 2 and maxx < d[w[i]] + d[w[j]]:\n                maxx = d[w[i]] + d[w[j]]\n    print(maxx)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    d = {}\n    ans = -1\n    for i in range(n):\n        d[a[i]] = i\n    w = list(d.keys())\n    for i in range(len(w) - 1, -1, -1):\n        for j in range(i, -1, -1):\n            if math.gcd(w[i], w[j]) == 1 and ans < d[w[i]] + d[w[j]]:\n                ans = d[w[i]] + d[w[j]]\n    print(ans + 2 if ans != -1 else -1)", "from collections import defaultdict\nimport math\n\ndef takeInput():\n    number_size = int(input())\n    nums = list(map(int, input().split(' ')))\n    dictionary = defaultdict(list)\n    for (ind, ele) in enumerate(nums):\n        dictionary[ele].append(ind + 1)\n    return (number_size, dictionary)\ntestcase = int(input())\nfor _ in range(testcase):\n    (number_size, nums) = takeInput()\n    answer = 0\n    for first in range(1, 1001):\n        if first not in nums:\n            continue\n        for second in range(first, 1001):\n            if second not in nums:\n                continue\n            if math.gcd(first, second) == 1:\n                if nums[first][-1] + nums[second][-1] >= answer:\n                    answer = nums[first][-1] + nums[second][-1]\n    if answer:\n        print(answer)\n    else:\n        print(-1)", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr = {num: p + 1 for (p, num) in enumerate(arr)}\n    result = -1\n    for a in arr.keys():\n        for b in arr.keys():\n            total = arr[a] + arr[b]\n            if total > result and gcd(a, b) == 1:\n                result = max(result, total)\n    print(result)", "from math import gcd\n\ndef solution():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = -1\n    d = [0 for i in range(1000)]\n    for i in range(n):\n        d[a[i] - 1] = i\n    for i in range(1000):\n        for j in range(i, 1000):\n            if gcd(a[d[i]], a[d[j]]) == 1:\n                ans = max(ans, d[i] + d[j] + 2)\n    print(ans)\n\ndef main():\n    t = int(input())\n    while t:\n        solution()\n        t -= 1\nmain()", "t = int(input())\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    res = -1\n    pos = {}\n    for i in range(n):\n        pos[arr[i]] = i\n    for i in pos:\n        for j in pos:\n            if pos[i] + pos[j] + 2 > res and gcd(i, j) == 1:\n                res = max(res, pos[i] + pos[j] + 2)\n    print(res)", "from math import gcd\nt = int(input())\npairs = [0] * 1001\nfor a in range(1, 1001):\n    pairs[a] = list()\n    for b in range(1, 1001):\n        if gcd(a, b) == 1:\n            pairs[a].append(b)\nfor i in range(t):\n    g = int(input())\n    h = list(map(int, input().split()))\n    l = [-1] * 1001\n    for j in range(g):\n        l[h[j]] = j\n    rty = -1\n    for a in range(1, 1001):\n        if l[a] == -1:\n            continue\n        for b in pairs[a]:\n            if l[b] == -1:\n                continue\n            df = l[a] + l[b]\n            if df > rty:\n                rty = df\n    if rty == -1:\n        print(-1)\n    else:\n        print(rty + 2)", "import math\n\nclass T:\n\n    def solve(self):\n        n = int(input())\n        l = list(map(int, input().split()))\n        z = 0\n        d = dict()\n        for i in range(n):\n            d[l[i]] = i + 1\n        a = list()\n        for i in d:\n            a.append([i, d[i]])\n        z = -1\n        a_len = len(a)\n        for i in range(a_len):\n            for j in range(i, a_len):\n                if math.gcd(a[i][0], a[j][0]) == 1:\n                    z = max(z, a[i][1] + a[j][1])\n        return z\nfor t in range(int(input())):\n    obj = T()\n    print(obj.solve())", "import math\n\ndef m_valu(dict):\n    arr = list(dict.keys())\n    max_elem = 0\n    k_true = False\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if math.gcd(arr[i], arr[j]) == 1:\n                k_true = True\n                max_elem = max(max_elem, dict[arr[i]] + dict[arr[j]] + 2)\n    if k_true == True:\n        return max_elem\n    else:\n        return -1\nk = int(input())\nfor i in range(k):\n    n = int(input())\n    arr = [int(j) for j in input().split()]\n    dict = {}\n    for k in range(len(arr)):\n        dict[arr[k]] = k\n    print(m_valu(dict))", "from math import gcd\nfor i in range(int(input())):\n    n = int(input())\n    b = [0] * 1001\n    maxx = 0\n    for (i, a) in enumerate(map(int, input().split())):\n        b[a] = i + 1\n    for j in range(1, 1001):\n        if b[j] > 0:\n            for k in range(j, 1001):\n                if b[k] > 0 and gcd(j, k) == 1:\n                    maxx = max(maxx, b[j] + b[k])\n    if maxx == 0:\n        print(-1)\n    else:\n        print(maxx)", "from math import gcd\nfor i in range(int(input())):\n    int(input())\n    D = {}\n    for (i, x) in enumerate(list(map(int, input().split()))):\n        D[x] = i + 1\n    print(max([D[x] + D[y] for x in D for y in D if gcd(x, y) == 1], default=-1))", "from math import gcd\n\ndef cal(arr, n):\n    d = dict()\n    for i in range(n):\n        d[arr[i]] = i + 1\n    max_cost = -1\n    for a in d.keys():\n        for b in d.keys():\n            if gcd(a, b) == 1:\n                cost = d.get(a) + d.get(b)\n                if cost > max_cost:\n                    max_cost = cost\n    return max_cost\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(cal(a, n))", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    b = [0] * 1001\n    for (i, a) in enumerate(map(int, input().split())):\n        b[a] = i + 1\n    m = 0\n    for i in range(1, 1001):\n        if b[i] != 0:\n            for j in range(i, 1001):\n                if b[j] != 0 and gcd(i, j) == 1:\n                    m = max(b[i] + b[j], m)\n    print(m if m != 0 else -1)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    b = [0] * 1001\n    for (i, a) in enumerate(map(int, input().split())):\n        b[a] = i + 1\n    m = 0\n    for i in range(1, 1001):\n        if b[i] != 0:\n            for j in range(i, 1001):\n                if b[j] != 0 and gcd(i, j) == 1:\n                    m = max(b[i] + b[j], m)\n    print(m if m != 0 else -1)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    array = list(map(int, input().split()))\n    idx = [0] * 1001\n    res = -1\n    for i in range(n):\n        idx[array[i]] = i + 1\n    for i in range(1, 1001):\n        if idx[i] != 0:\n            for j in range(i, 1001):\n                if idx[j] != 0 and gcd(i, j) == 1:\n                    res = max(res, idx[i] + idx[j])\n    print(res)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    b = [0] * 1001\n    for (i, a) in enumerate(map(int, input().split())):\n        b[a] = i + 1\n    m = 0\n    for i in range(1, 1001):\n        if b[i] != 0:\n            for j in range(i, 1001):\n                if b[j] != 0 and gcd(i, j) == 1:\n                    m = max(b[i] + b[j], m)\n    print(m if m != 0 else -1)", "import math\n\ndef algorithm(mass):\n    for alg in mass:\n        list_arg = list(set(alg))\n        sorted(list_arg)\n        res_arr = {}\n        for i in range(len(list_arg)):\n            for j in range(i, len(list_arg)):\n                if math.gcd(list_arg[i], list_arg[j]) == 1:\n                    if list_arg[i] not in res_arr:\n                        res_arr[list_arg[i]] = [list_arg[j]]\n                    else:\n                        res_arr[list_arg[i]].append(list_arg[j])\n        if len(res_arr) == 0:\n            print(-1)\n            continue\n        alg = alg[::-1]\n        sz_alg = len(alg)\n        index_arr = {}\n        for a in list_arg:\n            index = alg.index(a)\n            index = sz_alg - index\n            index_arr[a] = index\n        max_val = -1\n        for (k, val) in res_arr.items():\n            v1 = index_arr[k]\n            for a in val:\n                v2 = index_arr[a]\n                if v1 + v2 > max_val:\n                    max_val = v1 + v2\n        print(max_val)\n\ndef parsing():\n    n = int(input())\n    mass = []\n    while n > 0:\n        k = int(input())\n        st = input().split(' ')\n        res = list(map(int, st))\n        mass.append(res)\n        n -= 1\n    return mass\nms = parsing()\nalgorithm(ms)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    arr = [0] * 1001\n    for i in range(n):\n        arr[a[i]] = i + 1\n    mx = max(a)\n    res = -1\n    for i in range(1000, -1, -1):\n        if arr[i] == 0:\n            continue\n        for j in range(i, -1, -1):\n            if arr[j] != 0:\n                if math.gcd(i, j) == 1:\n                    res = max(res, arr[i] + arr[j])\n    print(res)", "from math import gcd\nGCD = [[gcd(i, j) for j in range(1, 1001)] for i in range(1, 1001)]\nfor test in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    last = {}\n    for i in range(n):\n        last[a[i]] = i + 1\n    unique = list(set(a))\n    ans = -1\n    for i in range(len(unique)):\n        for j in range(i, len(unique)):\n            if GCD[unique[i] - 1][unique[j] - 1] == 1 and last[unique[i]] + last[unique[j]] > ans:\n                ans = last[unique[i]] + last[unique[j]]\n    print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = list(map(int, input().split()))\n    all_elements = [0] * 1001\n    for i in range(n):\n        all_elements[x[i]] = i + 1\n    max_sum = -1\n    for i in range(1, 1001):\n        if all_elements[i] == 0:\n            continue\n        for j in range(i, 1001):\n            if all_elements[j] and math.gcd(i, j) == 1:\n                max_sum = max(max_sum, all_elements[i] + all_elements[j])\n    print(max_sum)", "from math import gcd\nGCD = [[gcd(i, j) for j in range(1, 1001)] for i in range(1, 1001)]\nfor test in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    last = {}\n    for i in range(n):\n        last[a[i]] = i + 1\n    unique = list(set(a))\n    ans = -1\n    for i in range(len(unique)):\n        for j in range(i, len(unique)):\n            if GCD[unique[i] - 1][unique[j] - 1] == 1 and last[unique[i]] + last[unique[j]] > ans:\n                ans = last[unique[i]] + last[unique[j]]\n    print(ans)", "import math\nimport random\nfrom collections import *\nfrom bisect import *\nfrom time import *\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    m = [0 for _ in range(1001)]\n    maxx = 0\n    for i in range(1, n + 1):\n        m[a[i - 1]] = i\n        maxx = max(maxx, a[i - 1])\n    ans = -1\n    for i in range(1, 1001):\n        if m[i] != 0:\n            for j in range(i, 1001):\n                if m[j] != 0:\n                    if math.gcd(i, j) == 1:\n                        ans = max(ans, m[i] + m[j])\n    print(ans)\n    t -= 1", "import math\nfor t in range(int(input())):\n    m = 0\n    n = int(input())\n    l = list(map(int, input().split()))\n    b = 1001 * [0]\n    for (i, a) in enumerate(l):\n        b[a] = i + 1\n    for i in range(1, 1001):\n        if b[i] != 0:\n            for j in range(i, 1001):\n                if b[j] != 0 and math.gcd(i, j) == 1:\n                    m = max(m, b[i] + b[j])\n    print(m if m != 0 else -1)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = [0] * 1001\n    for i in range(1, n + 1):\n        p[a[i - 1]] = i\n    res = -1\n    for i in range(1, 1001):\n        for j in range(i, 1001):\n            if gcd(i, j) == 1 and p[i] != 0 and (p[j] != 0):\n                res = max(res, p[i] + p[j])\n    print(res)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    arr = [0] * 1001\n    for i in range(n):\n        arr[a[i]] = i + 1\n    res = -1\n    for i in range(1, 1001):\n        if arr[i] == 0:\n            continue\n        for j in range(i, 1001):\n            if arr[j] != 0:\n                if math.gcd(i, j) == 1:\n                    res = max(res, arr[i] + arr[j])\n    print(res)"]