["for s in [*open(0)][1:]:\n    (n, k) = map(int, s.split())\n    b = (k - 1).bit_length()\n    print(b - (2 ** b - n) // k)", "for s in [*open(0)][1:]:\n    (n, k) = map(int, s.split())\n    z = (k - 1).bit_length()\n    print(z - (2 ** z - n) // k)", "for s in [*open(0)][1:]:\n    (n, k) = map(int, s.split())\n    m = (k - 1).bit_length()\n    print(m - (2 ** m - n) // k)", "for s in [*open(0)][1:]:\n    (n, k) = map(int, s.split())\n    m = (k - 1).bit_length()\n    print(m - (2 ** m - n) // k)", "for s in [*open(0)][1:]:\n    (n, k) = map(int, s.split())\n    m = (k - 1).bit_length()\n    print(m - -(n - 2 ** m) // k)", "for s in [*open(0)][1:]:\n    (n, k) = map(int, s.split())\n    m = (k - 1).bit_length()\n    print(m - (2 ** m - n) // k)", "for s in [*open(0)][1:]:\n    (n, k) = map(int, s.split())\n    m = (k - 1).bit_length()\n    print(m - (2 ** m - n) // k)", "for s in [*open(0)][1:]:\n    (n, k) = map(int, s.split())\n    m = len(f'{k:b}') - (k & k - 1 < 1)\n    print(m - -(n - 2 ** m) // k)", "for s in [*open(0)][1:]:\n    (n, k) = map(int, s.split())\n    m = len(f'{k:b}') - (k & k - 1 < 1)\n    print(m - -(n - 2 ** m) // k)", "for s in [*open(0)][1:]:\n    (n, k) = map(int, s.split())\n    m = len(f'{k:b}') - (k & k - 1 < 1)\n    print(m - -(n - 2 ** m) // k)", "for s in [*open(0)][1:]:\n    (n, k) = map(int, s.split())\n    m = len(f'{k:b}') - (k & k - 1 < 1)\n    print(m - -max(0, n - 2 ** m) // k)", "for s in [*open(0)][1:]:\n    (n, k) = map(int, s.split())\n    m = len(f'{k:b}')\n    m -= 1 << m - 1 == k\n    print(m - -max(0, n - 2 ** m) // k)", "import sys\ninput = sys.stdin.readline\nfrom math import log2, ceil\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    n -= 1\n    if n == 0:\n        print(0)\n    elif k > (n + 1) // 2:\n        print(len(bin(n)[2:]))\n    else:\n        x = ceil(log2(k))\n        n -= 2 ** x - 1\n        print(x + (n + k - 1) // k)", "import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time, functools, copy, statistics\ninf = float('inf')\nmod = 10 ** 9 + 7\n\ndef LI():\n    return [int(x) for x in sys.stdin.readline().split()]\n\ndef LF():\n    return [float(x) for x in sys.stdin.readline().split()]\n\ndef I():\n    return int(sys.stdin.readline())\n\ndef F():\n    return float(sys.stdin.readline())\n\ndef S():\n    return input()\n\ndef LS():\n    return input().split()\nimport time\nfor _ in range(I()):\n    (n, k) = LI()\n    n -= 1\n    x = k.bit_length()\n    a = 2 ** x - 1\n    ans = 0\n    if a < n:\n        ans += x\n        b = n - a\n        if b % k == 0:\n            ans += b // k\n        else:\n            ans = ans + b // k + 1\n    else:\n        b = n.bit_length()\n        ans += b\n    print(ans)", "from sys import stdin\nimport math\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    if k == 1 or n == 1:\n        print(n - 1)\n        continue\n    val1 = int.bit_length(k) - 1\n    val1 = val1 + (1 if k - pow(2, val1) > 0 else 0)\n    val2 = int.bit_length(n) - 1\n    val2 = val2 + (1 if n - pow(2, val2) > 0 else 0)\n    if n <= k:\n        print(val2)\n    else:\n        time = val1\n        n -= pow(2, time)\n        if n > 0:\n            print(time + n // k + (1 if n % k > 0 else 0))\n        else:\n            print(time)", "import math\n\ndef next_two_degree(x):\n    x -= 1\n    x |= x >> 1\n    x |= x >> 2\n    x |= x >> 4\n    x |= x >> 8\n    x |= x >> 16\n    x |= x >> 32\n    x |= x >> 64\n    return x + 1\nn = int(input())\npair_list = []\nfor _ in range(n):\n    pair_list.append(list(map(int, input().split())))\nfor item in pair_list:\n    n = item[0]\n    k = item[1]\n    z = int(math.log2(next_two_degree(k)))\n    if (n - 2 ** z) % k == 0:\n        print(z + (n - 2 ** z) // k)\n    else:\n        print(z + (n - 2 ** z) // k + 1)", "t = int(input())\nfor i in range(t):\n    read = input().split()\n    h = int(read[0])\n    p = int(read[1])\n    print(p.bit_length() + (h - 2 ** p.bit_length() - 1) // p + 1)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    print(k.bit_length() + (n - 2 ** k.bit_length() - 1) // k + 1)", "for s in range(int(input())):\n    (n, k) = map(int, input().split())\n    m = (k - 1).bit_length()\n    print(m - (2 ** m - n) // k)", "t = int(input())\nfor i in range(t):\n    read = input().split()\n    n = int(read[0])\n    k = int(read[1])\n    print(k.bit_length() + (n - 2 ** k.bit_length() - 1) // k + 1)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(k.bit_length() + (n - 2 ** k.bit_length() - 1) // k + 1)", "t = int(input())\nfor i in range(t):\n    read = input().split()\n    h = int(read[0])\n    p = int(read[1])\n    print(p.bit_length() + (h - 2 ** p.bit_length() - 1) // p + 1)", "import math\nt = int(input())\nfor i in range(t):\n    read = input().split()\n    n = int(read[0])\n    k = int(read[1])\n    exp = k.bit_length()\n    left = (n - 2 ** exp - 1) // k + 1\n    print(exp + left)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    m = (k - 1).bit_length()\n    print(m - (2 ** m - n) // k)", "for s in range(int(input())):\n    (n, k) = map(int, input().split())\n    m = (k - 1).bit_length()\n    print(m - (2 ** m - n) // k)", "for s in range(int(input())):\n    (n, k) = map(int, input().split())\n    m = (k - 1).bit_length()\n    print(m - (2 ** m - n) // k)", "def solve(inp):\n    (n_computer, n_cable) = inp.split()\n    n_cable = int(n_cable)\n    n_computer = int(n_computer)\n    files = 1\n    hours = 0\n    while files < n_cable:\n        files *= 2\n        hours += 1\n    need = n_computer - files\n    if need % n_cable == 0:\n        hours += need // n_cable\n    else:\n        hours += need // n_cable + 1\n    print(hours)\nn = int(input())\ninp = []\nfor i in range(n):\n    inp.append(input())\nfor i in inp:\n    solve(i)", "from sys import stdin\n\ndef solve():\n    results = []\n    for _ in range(int(stdin.readline().strip())):\n        (N, K) = map(int, stdin.readline().strip().split())\n        if K == 1 or N == 1:\n            results.append(N - 1)\n            continue\n        if K == 2:\n            results.append(N // 2 + (1 if N % 2 else 0))\n            continue\n        if N == 2:\n            results.append(1)\n            continue\n        if N < 5:\n            results.append(2)\n            continue\n        tmp = 4\n        cnt = 2\n        while tmp < N:\n            if K <= tmp:\n                cnt += (N - tmp) // K\n                if tmp + K * ((N - tmp) // K) < N:\n                    cnt += 1\n                break\n            tmp *= 2\n            cnt += 1\n        results.append(cnt)\n    print('\\n'.join(map(str, results)))\nsolve()", "import bisect, math\nt = [0 for i in range(64)]\nfor i in range(64):\n    t[i] = 1 << i\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n\n    def fun():\n        if n == 1:\n            return 0\n        if k == 1:\n            return n - 1\n        i = bisect.bisect(t, k)\n        if t[i] != k:\n            i -= 1\n        if t[i] * 2 >= n:\n            j = bisect.bisect(t, n) - 1\n            if t[j] == n:\n                return j\n            return j + 1\n        return i + 1 + (n - t[i] * 2 + k - 1) // k\n    print(fun())", "import math\nt = int(input())\nfor i in range(t):\n    read = input().split()\n    n = int(read[0])\n    k = int(read[1])\n    exp = k.bit_length()\n    left = (n - 2 ** exp - 1) // k + 1\n    print(exp + left)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    if k == 1:\n        print(n - 1)\n    else:\n        l = len('{:0b}'.format(k))\n        x = 2 ** l\n        ans = (n - x) // k if (n - x) % k == 0 else (n - x) // k + 1\n        print(ans + l)", "import bisect as bf\nl = []\nma = 1\nwhile ma <= 1e+18:\n    l.append(ma)\n    ma = ma * 2\nl.append(ma)\nt = int(input())\nfor dalskjd in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    m = bf.bisect_left(l, k)\n    if l[m] != k:\n        m = m - 1\n    std = 2 ** (m + 1)\n    if n < std:\n        count = bf.bisect_left(l, n)\n    else:\n        count = m + 2 + (n - std - 1) // k\n    print(count)", "def fun(n, k):\n    if n == 1 or n == 2:\n        return n - 1\n    power = len(bin(k)[2:])\n    ans = power\n    if n == k and 2 ** (power - 1) == n:\n        return ans - 1\n    diff = max(0, n - 2 ** power)\n    ans += diff // k\n    if diff % k > 0:\n        ans += 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    print(fun(n, k))", "import math\nt = int(input())\nwhile t > 0:\n    (m, k) = map(int, input().split())\n    if m == 1:\n        print(0)\n        t -= 1\n        continue\n    power = k.bit_length() - 1\n    if 2 ** power == m:\n        print(power)\n        t -= 1\n        continue\n    computer = 2 ** (power + 1)\n    hours = power + 1\n    if m > computer:\n        m -= computer\n        if m % k == 0:\n            hours += m // k\n        else:\n            hours += m // k + 1\n    print(hours)\n    t -= 1", "import math\nt = int(input())\nfor i in range(0, t):\n    (n, k) = [int(x) for x in input().split()]\n    count = 1\n    time = 0\n    no_of_data_comp = 1\n    if n >= k:\n        time = len(bin(k)[2:])\n        no_of_data_comp = 2 ** time\n        left = n - no_of_data_comp\n        if left % k == 0:\n            time += left // k\n        else:\n            time += left // k + 1\n        print(time)\n    else:\n        time = len(bin(n)[2:])\n        print(time)", "from math import log\nfor u in range(int(input())):\n    (n, k) = map(int, input().split())\n    if k == 1:\n        print(n - 1)\n    else:\n        b = int(log(k + 1, 2))\n        ans = 2 ** b\n        if ans < k:\n            b += 1\n            ans *= 2\n        if n - ans > 0:\n            b += (n - ans + k - 1) // k\n        print(b)", "import os\nimport sys\nimport time\n\ndef timer(f):\n\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = f(*args, **kwargs)\n        end_time = time.time()\n        if os.environ.get('LOCAL_RUN'):\n            print(f'Procesing time: {end_time - start_time} seconds')\n        return result\n    return wrapper\n\ndef main(fin):\n    n = int(fin.readline())\n    for i in range(n):\n        solve(fin)\n\ndef solve(fin):\n    (a, k) = [int(i) for i in fin.readline().split()]\n    result = 0\n    curr = 1\n    while curr <= k and curr < a:\n        curr *= 2\n        result += 1\n    if curr < a:\n        result += (a - curr + k - 1) // k\n    print(result)\nif os.environ.get('LOCAL_RUN'):\n    fin = open('input.txt')\nelse:\n    fin = sys.stdin\nmain(fin)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    h = 0\n    if k == 1:\n        print(n - 1)\n    else:\n        x = int(math.log(k, 2))\n        if 2 ** x > k:\n            x -= 1\n        n = n - 2 ** (x + 1)\n        h = x + 1 + n // k + (n % k != 0)\n        print(h)", "import math\nt = int(input())\nfor z in range(t):\n    line = input()\n    li = line.split(' ')\n    n = int(li[0])\n    k = int(li[1])\n    max_power = k.bit_length() - 1\n    max_sum = int(2 ** (max_power + 1))\n    if max_sum >= n:\n        power = n.bit_length() - 1\n        if 2 ** power == n:\n            print(power)\n        else:\n            print(power + 1)\n    else:\n        print()\n        rem = n - max_sum\n        if rem % k:\n            print(max_power + 1 + rem // k + 1)\n        else:\n            print(max_power + 1 + rem // k)", "import math\nT = int(input())\nfor ttt in range(T):\n    arr = input().split(' ')\n    n = int(arr[0])\n    k = int(arr[1])\n    t1 = int(math.log(k, 2))\n    if 2 ** t1 > k:\n        t1 -= 1\n    t2 = 2 ** (t1 + 1)\n    t3 = n - t2\n    res = t1 + 1\n    res += t3 // k\n    if t3 % k != 0:\n        res += 1\n    print(res)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = 1\n    hours = 0\n    x = bin(k)[2:]\n    if x.count('1') == 1:\n        a = 2 ** (len(x) - 1)\n        hours += len(x) - 1\n    else:\n        a = 2 ** len(x)\n        hours += len(x)\n    diff = n - a\n    if diff > 0:\n        hours += (diff + (k - 1)) // k\n    print(hours)", "import math\nnumber_tests = int(input(''))\nfor test in range(number_tests):\n    count = 0\n    list_input = input('').split()\n    total_computers = int(list_input[0])\n    total_cables = int(list_input[1])\n    log = len(bin(total_cables)) - 3\n    temp = total_computers - 2 ** log + (total_cables - 2 ** log)\n    end = temp // total_cables + (temp % total_cables > 0)\n    print(log + end)", "import sys, math\ninput = sys.stdin.readline\nINF = int(1000000000.0) + 7\n\ndef solve():\n    (n, k) = map(int, input().split())\n    ans = 0\n    cur = 1\n    while cur <= k:\n        if cur >= n:\n            return ans\n        ans += 1\n        cur *= 2\n    return ans + (n - cur + k - 1) // k\nt = int(input())\nwhile t:\n    t -= 1\n    print(solve())", "import math\nt = int(input())\nfor i in range(0, t):\n    (n, k) = input().split(' ')\n    n = int(n)\n    k = int(k)\n    time = len(bin(k)[2:])\n    if n == 1:\n        print(0)\n    elif k == 1:\n        print(n - 1)\n    elif n == 2 ** (time - 1):\n        print(time - 1)\n    elif n <= 2 ** time:\n        print(time)\n    else:\n        if (n - 2 ** time) % k != 0:\n            print(time + -1 * (n - 2 ** time) // k * -1)\n        else:\n            print(time + -1 * (n - 2 ** time) // k * -1)\n        2", "test_cases = input()\nfor i in range(int(test_cases)):\n    count = list(map(int, input().split(' ')))\n    bits = count[1].bit_length()\n    hours = bits\n    if pow(2, bits - 1) == count[1]:\n        bits = bits - 1\n        hours = bits\n    if count[0] > pow(2, bits):\n        hours = hours + -1 * (count[0] - pow(2, bits)) // count[1] * -1\n    print(hours)", "p = int(input())\nfor _ in range(p):\n    (n, k) = input().split()\n    t = (len(k) - 1) // 3 * 10\n    m = 2 ** t\n    n = int(n)\n    k = int(k)\n    while m <= k and m < n:\n        m *= 2\n        t += 1\n    if n > m:\n        t += (n - m - 1) // k + 1\n    print(t)", "import math\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    complete = 1\n    h = 0\n    if k == 1:\n        print(n - 1)\n    else:\n        x = math.log2(k)\n        if k - 2 ** math.floor(x) > 0:\n            h = math.floor(x) + 1\n        else:\n            h = math.floor(x)\n        t = n - 2 ** h\n        if t > 0:\n            if t % k == 0:\n                h += t // k\n            else:\n                h += t // k + 1\n        print(h)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, k) = map(int, input().split())\n    cnt = 1\n    ans = 0\n    while cnt <= k and cnt < n:\n        cnt *= 2\n        ans += 1\n    if cnt >= n:\n        return ans\n    else:\n        ans += (n - cnt) // k\n        ans += 1 if (n - cnt) % k else 0\n        return ans\nfor _ in range(int(input())):\n    print(solve())", "t = int(input())\nimport math\n\ndef timnhiphan(key):\n    l = 0\n    r = 63\n    kq = 33\n    while l <= r:\n        x = (l + r) // 2\n        if a[x] <= key:\n            kq = x\n            l = x + 1\n        else:\n            r = x - 1\n    return kq\na = []\nfor i in range(64):\n    a.append(2 ** i)\nfor i in range(t):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    h = timnhiphan(k)\n    if n == 1:\n        print(0)\n    elif k == 1:\n        print(n - 1)\n    elif n - 1 >= 2 ** (h + 1) - 1:\n        n = n - 2 ** (h + 1)\n        time = h + 1\n        time = time + n // k\n        if n % k != 0:\n            time += 1\n        print(time)\n    else:\n        h = timnhiphan(n)\n        if n == 2 ** h:\n            print(h)\n        else:\n            print(h + 1)", "import math\nimport time\nbs = [2 ** i for i in range(63)]\ntests = int(input())\nfor _ in range(tests):\n    t1 = time.time()\n    (n, k) = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        ibs = int(math.log(k, 2))\n        res = ibs\n        m = 2 ** ibs\n        while m < n:\n            if m >= k:\n                break\n            else:\n                m = min(bs[ibs + 1], n)\n                ibs += 1\n                res += 1\n        t3 = time.time()\n        if m < n:\n            res += (n - m) // k + (1 if (n - m) % k else 0)\n        print(res)\n    t2 = time.time()", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(x) for x in input().split(' ')]\n    if n == 1:\n        print(0)\n    elif k == 1:\n        print(n - 1)\n    else:\n        k_power = len(bin(k)) - bin(k).find('1') - 1\n        n_power = len(bin(n)) - bin(n).find('1') - 1 if n & n - 1 == 0 else len(bin(n)) - bin(n).find('1')\n        hrs = min(k_power + 1, n_power)\n        rest = n - 2 ** hrs\n        if rest > 0:\n            rest_hrs = rest // k\n            hrs += rest_hrs\n            if rest - rest_hrs * k != 0:\n                hrs += 1\n        print(hrs)", "import math\nimport sys\n\ndef _input():\n    return map(int, input().split())\nfor _ in range(int(input())):\n    (n, k) = _input()\n    n -= 1\n    lg_n = math.log(n + 1, 2) - 1\n    lg_k = math.log(k, 2)\n    if -(2 ** (int(lg_n) + 1) - 1) + n < 0:\n        lg_n -= 1\n    if -2 ** int(lg_k) + k < 0:\n        lg_k -= 1\n    if lg_n <= lg_k:\n        n -= 2 ** (int(lg_n) + 1) - 1\n        if n == 0:\n            print(int(lg_n) + 1)\n        else:\n            print(int(lg_n) + 2)\n    else:\n        n -= 2 ** (int(lg_k) + 1) - 1\n        if n % k == 0:\n            print(n // k + int(lg_k) + 1)\n        else:\n            print(n // k + int(lg_k) + 2)", "from collections import deque\nimport heapq\nfrom math import sqrt\nimport operator\nfrom operator import itemgetter\nimport sys\nimport time\nimport copy\ninf_var = 0\nif inf_var == 1:\n    inf = open('input.txt', 'r')\nelse:\n    inf = sys.stdin\ninput = inf.readline\n\ndef read_one_int():\n    return int(input().rstrip('\\n'))\n\ndef read_one_float():\n    return float(input().rstrip('\\n'))\n\ndef read_list_of_ints():\n    res = [int(val) for val in input().rstrip('\\n').split()]\n    return res\n\ndef read_list_of_ints_zero():\n    return [int(val) - 1 for val in input().rstrip('\\n').split()]\n\ndef read_str():\n    return input().rstrip()\n\ndef main():\n    tests = read_one_int()\n    for _ in range(tests):\n        (n, k) = read_list_of_ints()\n        res = 1\n        used = 1\n        left = False\n        if n == 1:\n            print(0)\n            continue\n        if n == 2:\n            print(1)\n            continue\n        while True:\n            used <<= 1\n            res += 1\n            if k >= used:\n                if used << 1 >= n:\n                    break\n            else:\n                left = True\n                break\n        if left and used < n:\n            res += (n - (used + k)) // k\n            if (n - (used + k)) % k:\n                res += 1\n        print(res)\nmain()", "import math\n\ndef ob(n, k):\n    z = math.ceil(math.log2(k))\n    return int(z + (n - math.pow(2, z) + k - 1) // k)\n\ndef med(nn, kk):\n    t = 0\n    nnn = 1\n    while nnn < kk:\n        nnn += nnn\n        t += 1\n    t += (nn - nnn + k - 1) // k\n    return t\nz = int(input())\nfor i in range(z):\n    (n, k) = map(int, input().split())\n    print(med(n, k))", "from math import ceil\n\ndef solve():\n    (n, k) = map(int, input().split())\n    c = 1\n    ans = 0\n    while c < k:\n        c *= 2\n        ans += 1\n    if c < n:\n        ans += (n - c + k - 1) // k\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "from math import ceil\n\ndef solve():\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        ans = 0\n        cur = 1\n        while cur < k:\n            cur *= 2\n            ans += 1\n        ans += int((n - cur + k - 1) // k)\n        print(ans)\nsolve()", "t = int(input())\ncc = [2 ** x for x in range(63)]\n\ndef cal_r0(x):\n    for i in range(63):\n        if x < cc[i]:\n            return i - 1\nfor i in range(t):\n    (n, k) = map(int, input().split(' '))\n    if k == 1:\n        print(n - 1)\n    else:\n        r0 = cal_r0(k)\n        if 2 ** r0 == k:\n            if n > 2 ** r0:\n                if (n - 2 ** r0) % k == 0:\n                    r1 = int((n - 2 ** r0) // k)\n                else:\n                    r1 = int((n - 2 ** r0) // k) + 1\n                print(r0 + r1)\n            else:\n                print(r0)\n        elif n > 2 ** (r0 + 1):\n            if (n - 2 ** (r0 + 1)) % k == 0:\n                r1 = int((n - 2 ** (r0 + 1)) // k)\n            else:\n                r1 = int((n - 2 ** (r0 + 1)) // k) + 1\n            print(r0 + 1 + r1)\n        else:\n            print(r0 + 1)", "def solution(n, k):\n    cur = 1\n    c = 0\n    while cur < k:\n        c += 1\n        cur *= 2\n    if cur < n:\n        c += (n - cur + k - 1) // k\n    return c\nT = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    out = solution(n, k)\n    print(out)", "import math\nimport sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    answer = 0\n    (n, k) = map(int, input().split())\n    temp = 1\n    while temp < k:\n        temp <<= 1\n        answer += 1\n    if n > temp:\n        n -= temp\n        answer += (n + k - 1) // k\n    print(answer)", "import math\n\ndef updateFile(n, k):\n    p = 1\n    h = 0\n    while p < k:\n        p *= 2\n        h += 1\n    if p < n:\n        h += (n - p + k - 1) // k\n    return h\nt = int(input())\nfor i in range(t):\n    (n, k) = list(map(int, input().split()))\n    print(updateFile(n, k))", "import sys\n\ndef solve(mas):\n    s = [int(i) for i in sys.stdin.readline().split()]\n    (n, k) = (s[0], s[1])\n    count = 1\n    hours = 0\n    while count < n:\n        if mas[hours] < k and hours < 62:\n            count += mas[hours]\n        elif (n - count) % k == 0:\n            hours += (n - count) // k\n            print(hours)\n            return\n        else:\n            hours += (n - count) // k + 1\n            print(hours)\n            return\n        hours += 1\n    print(hours)\nt = int(sys.stdin.readline())\nmas = [2 ** i for i in range(62)]\nwhile t > 0:\n    t -= 1\n    solve(mas)", "import sys\nfrom collections import deque\nimport heapq\nimport bisect\nimport copy\nMOD = 1000000007\nNO = lambda : print('NO')\nYES = lambda : print('YES')\n_1 = lambda : print(-1)\nari = lambda : [int(_) for _ in input().split()]\ncin = lambda : int(input())\ncis = lambda : input()\nshow = lambda x: print(x)\nfast = lambda : sys.stdin.readline()\ntest_case = 1\ntest_case = int(input())\nsys.setrecursionlimit(10 ** 6)\n\ndef ans():\n    (n, k) = ari()\n    ans = 0\n    start = 1\n    while start < k:\n        start *= 2\n        ans += 1\n    n = n - start\n    ans += n // k\n    if n % k != 0:\n        ans += 1\n    print(ans)\nfor _ in range(test_case):\n    ans()", "l = []\nfor j in range(61):\n    l.append(2 ** j)\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    c1 = 0\n    c2 = 1\n    for j in range(61):\n        if l[j] > k:\n            c1 = j\n            c2 = l[c1]\n            break\n    c = 0\n    if (n - c2) % k != 0:\n        c = c + 1\n    ans = c + c1 + (n - c2) // k\n    print(ans)", "import math\nimport sys\n\ndef copy_hours(n, k):\n    a = 0\n    copy_computers = 1\n    n = n - copy_computers\n    while copy_computers <= k and n > 0:\n        a += 1\n        n = n - copy_computers\n        copy_computers = copy_computers * 2\n    if n > 0:\n        a += n // k + (n % k != 0)\n    return a\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nt = int(input())\nfor i in range(t):\n    (n, k) = input().split()\n    (n, k) = (int(n), int(k))\n    print(copy_hours(n, k))", "import math\n\ndef solve(n, k):\n    k = min(n, k)\n    c = 1\n    p = 0\n    while c <= k:\n        c = c * 2\n        p = p + 1\n    p = p + (n - c) // k\n    if (n - c) % k != 0:\n        p = p + 1\n    return p\nt = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    print(solve(n, k))", "l = [2 ** i for i in range(61)]\nfor _ in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    if k == 1:\n        print(n - 1)\n    else:\n        a = 0\n        for i in range(61):\n            if k <= l[i]:\n                a = i\n                break\n        n -= l[a]\n        if n > 0:\n            a += n // k + min(n % k, 1)\n        print(a)", "import math\n\ndef complog(n):\n    (k, count) = (0, 1)\n    while True:\n        if count >= n:\n            return k\n        else:\n            k += 1\n            count = 1 << k\nn = int(input())\nfor i in range(n):\n    (a, b) = [int(i) for i in input().split()]\n    k = complog(b)\n    sum = 1 << k\n    print((a - sum + b - 1) // b + k)", "def log2(x):\n    i = 1\n    k = 0\n    while i < x:\n        i *= 2\n        k += 1\n    return k\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    process = 1\n    add = log2(k)\n    hours = add\n    process = pow(2, add)\n    hours += (n - process) // k\n    if (n - process) % k != 0:\n        hours += 1\n    print(int(hours))", "def solve():\n    (n, k) = map(int, input().split())\n    z = 1\n    time = 0\n    while n > z and z <= k:\n        z *= 2\n        time += 1\n    if z < n:\n        time += (n - z + k - 1) // k\n    print(time)\nfor i in range(int(input())):\n    solve()", "import sys\nimport math\nfor _ in range(int(sys.stdin.readline())):\n    (n, k) = map(int, sys.stdin.readline().split())\n    updated = 1\n    res = 0\n    while updated < k:\n        res += 1\n        updated *= 2\n    if updated < n:\n        res += (n - updated) // k\n        if (n - updated) % k != 0:\n            res += 1\n    print(res)", "def solve(comp, cabl):\n    time = 0\n    now = 1\n    while now < comp and now < cabl:\n        now *= 2\n        time += 1\n    return time + (comp - now + cabl - 1) // cabl\nn = int(input())\nfor _ in range(n):\n    (comp, cabl) = map(int, input().split())\n    print(solve(comp, cabl))", "import sys\nt = int(sys.stdin.readline())\nfor i in range(t):\n    (a, b) = map(int, sys.stdin.readline().split())\n    k = 1\n    c = 0\n    while k <= b and k < a:\n        k *= 2\n        c += 1\n    if k < a:\n        c += (a - k + b - 1) // b\n    sys.stdout.write(str(c))\n    sys.stdout.write('\\n')", "import sys\nreadline = sys.stdin.readline\nN = int(readline())\nfor i in range(N):\n    (n, k) = map(int, readline().split())\n    c = 1\n    ans = 0\n    while c <= k and c < n:\n        ans += 1\n        c *= 2\n    if c <= n:\n        ans += (n - c + k - 1) // k\n    print(ans)", "l = [2 ** i for i in range(61)]\nfor _ in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    if k == 1:\n        print(n - 1)\n    else:\n        a = 0\n        for i in range(61):\n            if k <= l[i]:\n                a = i\n                break\n        n -= l[a]\n        if n > 0:\n            a += n // k + min(n % k, 1)\n        print(a)", "import math\n\ndef solve():\n    (n, k) = list(map(int, input().split()))\n    t = 0\n    done = 1\n    while done < n:\n        if done < k:\n            done += done\n        else:\n            left = n - done\n            if left % k == 0:\n                t += left // k\n            else:\n                t += left // k\n                t += 1\n            return t\n        t += 1\n    return t\nfor i in range(int(input())):\n    print(solve())", "import os\nimport sys\nimport time\n\ndef timer(f):\n\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = f(*args, **kwargs)\n        end_time = time.time()\n        if os.environ.get('LOCAL_RUN'):\n            print(f'Procesing time: {end_time - start_time} seconds')\n        return result\n    return wrapper\n\ndef main(fin):\n    n = int(input())\n    for i in range(n):\n        solve(fin)\n\ndef solve(fin):\n    (a, k) = [int(i) for i in input().split()]\n    result = 0\n    curr = 1\n    while curr <= k and curr < a:\n        curr *= 2\n        result += 1\n    if curr < a:\n        result += (a - curr + k - 1) // k\n    print(result)\nif os.environ.get('LOCAL_RUN'):\n    fin = open('input.txt')\nelse:\n    fin = sys.stdin\nmain(fin)", "import sys\nimport math\nfor _ in range(int(sys.stdin.readline())):\n    (n, k) = map(int, sys.stdin.readline().split())\n    updated = 1\n    res = 0\n    while updated < k:\n        res += 1\n        updated *= 2\n    if updated < n:\n        res += (n - updated + k - 1) // k\n    print(res)", "import sys\nreadline = sys.stdin.readline\nt = int(readline())\nwhile t:\n    (n, k) = map(int, readline().split())\n    i = 1\n    ans = 0\n    while i <= k and i < n:\n        i *= 2\n        ans += 1\n    if i <= n:\n        ans += (n - i - 1) // k + 1\n    print(ans)\n    t -= 1", "nums = [2 ** i for i in range(100)]\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    i = 0\n    a = 1\n    for j in range(100):\n        if nums[j] > k:\n            i = j\n            a = nums[i]\n            break\n    c = 0\n    if (n - a) % k:\n        c += 1\n    ans = c + i + (n - a) // k\n    print(ans)", "import sys\nreadline = sys.stdin.readline\nn = int(readline())\nfor i in range(n):\n    (n, k) = map(int, readline().split())\n    c = 1\n    ans = 0\n    while c <= k and c < n:\n        ans += 1\n        c *= 2\n    if c <= n:\n        ans += (n - c + k - 1) // k\n    print(ans)", "import math\n\ndef solve():\n    (n, k) = [int(i) for i in input().split(' ')]\n    s = 0\n    t = 1\n    while t < n and t < k:\n        t *= 2\n        s += 1\n    print(s + (n - t + k - 1) // k)\nfor _ in range(int(input())):\n    solve()", "from math import log2, floor, ceil\n\ndef findLg(n):\n    tot = 0\n    while n > 0:\n        n = n >> 1\n        tot += 1\n    return tot - 1\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    if k <= 2 ** 32:\n        lg = floor(log2(k)) + 1\n    else:\n        lg = findLg(k) + 1\n    if n <= 2 ** 32:\n        if 2 ** lg >= n:\n            print(ceil(log2(n)))\n        else:\n            n -= 2 ** lg\n            print(int(lg + ceil(n / k)))\n    elif 2 ** lg >= n:\n        llg = findLg(n)\n        print(llg + 1 * (n != 2 ** llg))\n    else:\n        n = n - 2 ** lg\n        print(int(lg + n // k + 1 * (n % k > 0)))", "from math import log2, floor, ceil\n\ndef findLg(n):\n    tot = 0\n    while n > 0:\n        n = n >> 1\n        tot += 1\n    return tot - 1\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    if k <= 2 ** 32:\n        lg = floor(log2(k)) + 1\n    else:\n        lg = findLg(k) + 1\n    if n <= 2 ** 32:\n        if 2 ** lg >= n:\n            print(ceil(log2(n)))\n        else:\n            n -= 2 ** lg\n            print(int(lg + ceil(n / k)))\n    elif 2 ** lg >= n:\n        llg = findLg(n)\n        print(llg + 1 * (n != 2 ** llg))\n    else:\n        n = n - 2 ** lg\n        print(int(lg + n // k + 1 * (n % k > 0)))", "n = int(input())\nret = []\nfor i in range(n):\n    (cp, code) = map(int, input().split())\n    ans = 0\n    updated = 1\n    while updated < cp:\n        if updated > code:\n            break\n        updated *= 2\n        ans += 1\n    ans += max(0, (cp - updated) // code)\n    if max(0, cp - updated) % code != 0:\n        ans += 1\n    ret.append(ans)\nprint(*ret, sep='\\n')", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    (a, b) = map(int, sys.stdin.readline().split())\n    k = 1\n    c = 0\n    while k <= b and k < a:\n        k *= 2\n        c += 1\n    if k < a:\n        c += (a - k + b - 1) // b\n    sys.stdout.write(str(c) + '\\n')", "import sys\nimport re\nntests = int(sys.stdin.readline())\nfor _ in range(ntests):\n    inval = sys.stdin.readline().strip()\n    (ncomps, ncables) = inval.split()\n    ncomps = int(ncomps)\n    ncables = int(ncables)\n    ans = 0\n    txed = 1\n    while txed < ncomps:\n        if txed < ncables:\n            txed += txed\n            ans += 1\n        elif ncomps <= txed + ncables:\n            txed += ncables\n            ans += 1\n        else:\n            steps = (ncomps - txed) // ncables\n            txed += ncables * steps\n            ans += steps\n    print(ans)", "import sys\nfor t in range(int(input())):\n    (n, k) = map(int, sys.stdin.readline().strip().split())\n    ans = 0\n    cur = 1\n    while cur <= k and cur < n:\n        cur *= 2\n        ans += 1\n    if cur <= n:\n        ans += (n - cur + k - 1) // k\n    print(ans)", "final = []\ncases = int(input())\nfor _ in range(cases):\n    (n, k) = map(int, input().split())\n    ans = 0\n    rem = n - 1\n    avail = 1\n    while n > avail:\n        if avail <= k:\n            avail *= 2\n            ans += 1\n        else:\n            undone = n - avail\n            ans += (undone + k - 1) // k\n            break\n    final.append(ans)\nfor a in final:\n    print(a)", "def solve():\n    (n, k) = list(map(int, input().split()))\n    (f, ct) = (1, 0)\n    while f <= k and f < n:\n        f = f * 2\n        ct += 1\n    if f < n:\n        ct += (n - f + k - 1) // k\n    print(ct)\nt = int(input())\nfor i in range(t):\n    solve()", "tc = int(input())\n\ndef log(k):\n    (count, i) = (0, 0)\n    while 1 << i < k:\n        count += 1\n        i += 1\n    return count\nfor i in range(tc):\n    (a, b) = map(int, input().split())\n    x = log(b)\n    ans = x\n    x = 1 << x\n    a -= x\n    ans += (a + b - 1) // b\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    c = 1\n    ans = 0\n    while c <= k and c < n:\n        ans += 1\n        c *= 2\n    if c <= n:\n        ans += (n - c + k - 1) // k\n    print(ans)", "def log(x):\n    c = 0\n    while x != 1:\n        x //= 2\n        c += 1\n    return c\nt = int(input())\nwhile t:\n    (n, k) = [int(i) for i in input().split()]\n    if n == 1:\n        print(0)\n    elif k == 1:\n        print(n - 1)\n    else:\n        ans = log(k)\n        active = pow(2, ans)\n        if active == n:\n            print(ans)\n        else:\n            if active == k:\n                if (n - k) % k != 0:\n                    ans += (n - k) // k + 1\n                else:\n                    ans += (n - k) // k\n            else:\n                ans += 1\n                active *= 2\n                if (n - active) % k != 0:\n                    ans += (n - active) // k + 1\n                else:\n                    ans += (n - active) // k\n            print(ans)\n    t -= 1", "import sys\nimport math\nfrom fractions import Fraction\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    s = [int(x) for x in input().split(' ')]\n    n = s[0]\n    k = s[1]\n    p = k\n    m = 0\n    while p > 0:\n        m += 1\n        p = p >> 1\n    m -= 1\n    sat = 2 ** (m + 1)\n    if n >= sat:\n        ans = m + 1\n        ans += math.ceil(Fraction(n - sat, k))\n    else:\n        p = n\n        ans = 0\n        while p > 0:\n            ans += 1\n            p = p >> 1\n        ans -= 1\n        if n > 2 ** ans:\n            ans += 1\n    print(ans)\n    t -= 1", "from sys import stdin, stdout\ntest_cases = int(stdin.readline())\nfor _ in range(int(test_cases)):\n    (computers, cables) = map(int, stdin.readline().strip().split())\n    comp_done = 1\n    hours = 0\n    while comp_done <= cables:\n        comp_done *= 2\n        hours += 1\n    rest_hours = (computers - comp_done) // cables\n    hours = hours + rest_hours\n    if (computers - comp_done) % cables != 0:\n        hours += 1\n    print(hours)"]