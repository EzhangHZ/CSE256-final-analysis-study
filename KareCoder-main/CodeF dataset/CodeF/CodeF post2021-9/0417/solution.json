["for s in [*open(0)][2::2]:\n    print(len(s) // 2 - s.count(')('))", "for i in [*open(0)][2::2]:\n    x = ')'\n    ans = 1\n    for j in i:\n        if j == '(' and x == '(':\n            ans += 1\n        x = j\n    print(ans)", "import sys\ninput = sys.stdin.readline\ntests = int(input())\nfor test in range(tests):\n    n = int(input())\n    instring = input()\n    levels = []\n    lastchar = '('\n    groups = 1\n    for char in instring[1:-1]:\n        if char == '(':\n            if lastchar == '(':\n                groups += 1\n        lastchar = char\n    print(groups)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    s = input()\n    print(1 + s.count('(') - s.count('()'))\nfor _ in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\nin_il = lambda : list(map(int, input().split()))\nin_sl = lambda : input().split()\nin_i = lambda : int(input())\nMAX_INT = float('inf')\n\ndef solve():\n    n = in_i()\n    s = input()\n    ans = 1\n    for i in range(1, len(s)):\n        if s[i] == '(' and s[i - 1] == '(':\n            ans += 1\n    print(ans)\nfor _ in range(in_i()):\n    solve()", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    a = sys.stdin.readline().strip()\n    ans = n\n    for i in range(n * 2 - 1):\n        if a[i] == ')' and a[i + 1] == '(':\n            ans -= 1\n    print(ans)", "import itertools\nimport sys\nimport math\nfrom bisect import *\nfrom collections import deque\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfrom collections import Counter\nfor k in range(int(input())):\n    n = int(input())\n    s = str(input())\n    j = 2 * n - 1\n    i = 0\n    ans = n + 1\n    while True:\n        if i >= j:\n            break\n        if s[i + 1] == ')' and s[i] == '(':\n            i += 2\n            ans -= 1\n        elif s[j] == ')' and s[j - 1] == '(':\n            j -= 2\n            ans -= 1\n        else:\n            i += 1\n            j -= 1\n    print(ans)", "output = ''\nfor caseno in range(int(input())):\n    n = input()\n    l = input()\n    prev = l[0]\n    answer = 1\n    for i in l[1:]:\n        if i == '(':\n            answer += prev == '('\n        prev = i\n    output += str(answer) + '\\n'\nprint(output)", "import sys\n\ndef read():\n    cases = int(sys.stdin.readline())\n    for k in range(cases):\n        open = int(sys.stdin.readline())\n        parens = sys.stdin.readline()\n        solve(parens, open)\n\ndef solve(parens, open):\n    count = 0\n    stack = [False] * (open + 1)\n    stack_ind = 0\n    for k in range(len(parens)):\n        if parens[k] == '(':\n            if stack[stack_ind] == False:\n                stack[stack_ind] = True\n                count += 1\n            stack_ind += 1\n        else:\n            stack[stack_ind] = False\n            stack_ind -= 1\n    print(count)\nread()", "import sys\ninput = sys.stdin.readline\n\ndef int_num():\n    return int(input())\n\ndef int_list():\n    return list(map(int, input().split()))\n\ndef str_list():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef instr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef solve():\n    n = int_num()\n    s = instr()\n    level = 0\n    a = []\n    for c in s:\n        if c == '(':\n            level += 1\n            a.append(level)\n        else:\n            level -= 1\n    ans = 0\n    b = [a[0]]\n    for i in range(1, len(a)):\n        if a[i] > b[-1]:\n            b.append(a[i])\n        else:\n            while a[i] < b[-1]:\n                ans += 1\n                b.pop()\n    ans += len(b)\n    print(ans)\n\ndef main():\n    t = int_num()\n    while t:\n        solve()\n        t -= 1\n    return\nmain()", "print(*[int(input()) - input().count(')(') for i in range(int(input()))], sep='\\n')", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    S = input().strip()\n    pos = {0: [-1]}\n    v = 0\n    ans = 0\n    for i in range(2 * n):\n        if S[i] == '(':\n            v += 1\n            if v not in pos:\n                pos[v] = []\n            if S[i + 1] == '(':\n                pos[v].append(i)\n        else:\n            while pos[v]:\n                pos[v].pop()\n            v -= 1\n            if v not in pos:\n                pos[v] = []\n            elif len(pos[v]) == 1:\n                ans += 1\n            if i < 2 * n - 1 and S[i + 1] == '(':\n                pos[v].append(i)\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "from sys import stdin, stdout\nimport sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\nt = int(input())\nwhile t:\n    t -= 1\n    n = get_ints()\n    s = get_string()\n    ans = int(1)\n    for i in range(1, len(s)):\n        if s[i - 1] == '(' and s[i] == '(':\n            ans += 1\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input().strip()\n    c = 1\n    t = 0\n    a = []\n    for i in s:\n        if i == '(':\n            a.append('(')\n            t = 0\n        else:\n            a.pop()\n            c += t\n            if len(a) > 0:\n                t = 1\n    print(c)", "import sys\nimport math\nfrom collections import Counter\nfrom collections import defaultdict\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef solve(n, arr):\n    cnt = 0\n    for i in range(len(arr) - 1):\n        if arr[i] == '(' and arr[i + 1] == ')':\n            cnt += 1\n    return n - cnt + 1\nt = int(input())\nfor _ in range(t):\n    n = get_ints()\n    st = get_string()\n    print(solve(n[0], st))", "import sys\ninput = sys.stdin.readline\nprint = sys.stdout.write\nfor _ in range(int(input())):\n    (n, s) = (int(input()), input())\n    st = []\n    end = [0] * (2 * n)\n    a = []\n    for i in range(2 * n):\n        if s[i] == '(':\n            st.append(i)\n            a.append(i)\n        else:\n            end[st.pop()] = i\n    ans = n\n    for i in range(n):\n        s1 = a[i]\n        e1 = end[s1]\n        s2 = e1 + 1\n        if s2 < 2 * n:\n            e2 = end[s2]\n            if e1 < s2 < e2:\n                ans -= 1\n    print(str(ans) + '\\n')", "import threading\nimport sys\nfrom sys import stdin\ninput = stdin.readline\nsys.setrecursionlimit(10 ** 8)\nfrom collections import defaultdict\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        s = input()\n        st = [-1]\n        dit = {}\n        gp = defaultdict(list)\n        for i in range(2 * n):\n            if s[i] == '(':\n                st.append(i)\n            else:\n                a = st.pop()\n                gp[a].append(i)\n                gp[i].append(a)\n                if a - 1 in dit:\n                    gp[i].append(dit[a - 1])\n                    gp[dit[a - 1]].append(i)\n                dit[i] = a\n        ans = 0\n        visit = set()\n\n        def fun(i):\n            if i in visit:\n                return\n            visit.add(i)\n            for e in gp[i]:\n                fun(e)\n        for i in range(2 * n):\n            if i not in visit:\n                ans += 1\n                fun(i)\n        print(ans)\nthreading.stack_size(10 ** 8)\nt = threading.Thread(target=main)\nt.start()\nt.join()", "import threading\nimport sys\nfrom sys import stdin\ninput = stdin.readline\nsys.setrecursionlimit(10 ** 8)\nfrom collections import defaultdict\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        s = input()\n        st = [-1]\n        dit = {}\n        gp = defaultdict(list)\n        for i in range(2 * n):\n            if s[i] == '(':\n                st.append(i)\n            else:\n                a = st.pop()\n                gp[a].append(i)\n                gp[i].append(a)\n                if a - 1 in dit:\n                    gp[i].append(dit[a - 1])\n                    gp[dit[a - 1]].append(i)\n                dit[i] = a\n        ans = 0\n        visit = set()\n\n        def fun(i):\n            if i in visit:\n                return\n            visit.add(i)\n            for e in gp[i]:\n                fun(e)\n        for i in range(2 * n):\n            if i not in visit:\n                ans += 1\n                fun(i)\n        print(ans)\nthreading.stack_size(10 ** 8)\nt = threading.Thread(target=main)\nt.start()\nt.join()", "for pratyush in range(int(input())):\n    n = int(input())\n    s = input()\n    print(n - s.count('()') + 1)", "def solve():\n    n = int(input())\n    s = input()\n    print(n - s.count(')('))\nt = int(input())\nfor _ in range(t):\n    solve()", "def cal(n, s):\n    if n == 1:\n        return 1\n    t = 0\n    ans = 1\n    p = []\n    for i in s:\n        if i == '(':\n            t += 1\n            p.append(t)\n        else:\n            t -= 1\n    for i in range(1, len(p)):\n        if p[i] > p[i - 1]:\n            ans += 1\n    return ans\nfor jj in range(int(input())):\n    n = int(input())\n    s = input()\n    print(cal(n, s))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    print(n - s.count(')('))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    print(n - s.count('()') + 1)", "t = int(input())\nfor _ in range(t):\n    input()\n    s = input()\n    len_s = len(s) // 2\n    print(len_s - s.count(')('))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    print(n - s.count(')('))", "for i in range(int(input())):\n    print(int(input()) - input().count(')('))", "for j in range(int(input())):\n    print(1 + int(input()) - input().count('()'))", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    print(n - a.count(')('))", "for _ in range(int(input())):\n    a = int(input())\n    b = input()\n    print(a - b.count('()') + 1)", "for caseno in range(int(input())):\n    n = input()\n    l = input()\n    prev = l[0]\n    answer = 1\n    for i in l[1:]:\n        if i == '(':\n            answer += prev == '('\n        prev = i\n    print(answer)", "for i in range(int(input())):\n    print(int(input()) - input().count(')('))", "for i in range(int(input())):\n    print(int(input()) - input().count(')('))", "for i in range(int(input())):\n    print(1 + int(input()) - input().count('()'))", "for j in range(int(input())):\n    print(1 + int(input()) - input().count('()'))", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    print(n - a.count(')('))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    print(1 + s.count('(') - s.count('()'))", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    print(n - s.count('()') + 1)", "for pratyush in range(int(input())):\n    n = int(input())\n    s = input()\n    print(n - s.count('()') + 1)", "for _ in range(int(input())):\n    print(int(input()) - str(input()).count(')('))", "for _ in range(int(input())):\n    print(int(input()) - str(input()).count(')('))", "for tc in range(int(input())):\n    n = int(input())\n    seq = input()\n    print(1 + seq.count('(') - seq.count('()'))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    print(1 + s.count('(') - s.count('()'))", "for i in range(int(input())):\n    print(int(input()) - input().count(')('))", "for loop in range(int(input())):\n    n = int(input())\n    s = input()\n    print(1 + s.count('(') - s.count('()'))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    print(1 + s.count('(') - s.count('()'))", "import sys\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    ans = 1\n    for i in range(2 * n - 1):\n        if s[i] == '(' and s[i + 1] == '(':\n            ans += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    print(1 + s.count('(') - s.count('()'))", "for a in range(int(input())):\n    n = int(input())\n    b = input()\n    count = 1 if b else 0\n    prev = 0\n    for c in b:\n        if prev:\n            if c == '(':\n                count += 1\n            else:\n                prev = 0\n        elif c == '(':\n            prev = 1\n    print(count)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    print(1 + s.count('(') - s.count('()'))", "for tc in range(int(input())):\n    N = int(input())\n    S = input()\n    ans = 1\n    for i in range(2 * N - 1):\n        if S[i] == ')' and S[i + 1] == ')':\n            ans += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = 0\n    runner = -1\n    res = n\n    for c in s:\n        if c == '(':\n            cur += 1\n            if cur <= runner:\n                res -= 1\n            runner = cur\n        else:\n            cur -= 1\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = 1\n    for i in range(2 * n - 1):\n        if s[i] == '(' and s[i + 1] == '(':\n            ans += 1\n    print(ans)", "test = int(input())\nfor t in range(test):\n    n = int(input())\n    A = input()\n    for i in range(2 * n - 1):\n        if A[i] == ')' and A[i + 1] == '(':\n            n -= 1\n    print(n)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    st = []\n    empty = 0\n    ans = 1 + s.count('(')\n    minus = s.count('()')\n    print(ans - minus)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = 1\n    for i in range(2 * n - 1):\n        if s[i] == '(' and s[i + 1] == '(':\n            ans += 1\n    print(ans)", "tests = int(input())\nfor _ in range(tests):\n    n = int(input())\n    s = input()\n    ans = 1\n    for i in range(2 * n - 1):\n        if s[i] == ')' and s[i + 1] == ')':\n            ans += 1\n    print(ans)", "for pratyush in range(int(input())):\n    n = int(input())\n    s = input()\n    print(n - s.count('()') + 1)", "for pratyush in range(int(input())):\n    n = int(input())\n    s = input()\n    print(n - s.count('()') + 1)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    s = input()\n    ans = 1\n    for i in range(1, 2 * n):\n        if s[i] == '(' and s[i - 1] == '(':\n            ans += 1\n    print(ans)", "def sol():\n    n = int(input())\n    s = input()\n    cnt = 0\n    for i in range(len(s) - 1):\n        if s[i] == '(' and s[i + 1] == '(':\n            cnt += 1\n    print(cnt + 1)\nt = int(input())\nfor i in range(t):\n    sol()", "for t in range(int(input())):\n    n = int(input())\n    bracket = input()\n    count = 0\n    for i in range(2 * n - 1):\n        if bracket[i] == ')' and bracket[i + 1] == '(':\n            count += 1\n    print(n - count)", "def balanced_brackets(s):\n    new_str = s.replace(')(', '')\n    return sum([ch == '(' for ch in new_str])\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n = int(input())\n    s = input()\n    print(balanced_brackets(s))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = 1\n    for i in range(1, 2 * n):\n        if s[i] == s[i - 1] == '(':\n            ans += 1\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    bracket = input()\n    count = 0\n    for i in range(2 * n - 1):\n        if bracket[i] == ')' and bracket[i + 1] == '(':\n            count += 1\n    print(n - count)", "in_il = lambda : list(map(int, input().split()))\nin_sl = lambda : input().split()\nin_i = lambda : int(input())\nMAX_INT = float('inf')\n\ndef solve():\n    n = in_i()\n    s = input()\n    ans = 1\n    for i in range(1, len(s)):\n        if s[i] == '(' and s[i - 1] == '(':\n            ans += 1\n    print(ans)\nfor _ in range(in_i()):\n    solve()", "def main():\n    for t in range(int(input())):\n        n = int(input())\n        s = input()\n        c = ''\n        ans = 0\n        for i in range(2 * n):\n            if s[i] == '(':\n                if c != ')':\n                    ans += 1\n            c = s[i]\n        print(ans)\nmain()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    stack = []\n    ans = 0\n    for i in range(len(s) - 1):\n        if s[i] == ')' and s[i + 1] == ')':\n            ans += 1\n    print(ans + 1)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = 0\n    for i in range(1, n * 2):\n        if s[i - 1] == s[i] == '(':\n            ans += 1\n    print(ans + 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    print(1 + s.count('(') - s.count('()'))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = 1\n    for i in range(2 * n - 1):\n        if s[i] == '(' and s[i + 1] == '(':\n            ans += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = n\n    for i in range(1, 2 * n):\n        ans -= int(s[i] == ')' and s[i - 1] == '(')\n    print(ans + 1)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    for i in range(2 * n - 1):\n        if s[i] == ')' and s[i + 1] == '(':\n            n -= 1\n    print(n)", "number_of_tests = int(input())\nfor _ in range(number_of_tests):\n    n = int(input())\n    brackets = input()\n    i = 0\n    prev = '('\n    result = 0\n    while n > 0:\n        if prev == '(' and brackets[i] == '(':\n            result += 1\n        if brackets[i] == '(':\n            n -= 1\n        prev = brackets[i]\n        i += 1\n    print(result)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = input()\n    count = 0\n    for j in range(2 * n):\n        if a[j] == '(' and a[j + 1] == ')':\n            count += 1\n    print(n - count + 1)", "for _ in range(int(input())):\n    n = int(input())\n    l = input()\n    lst = []\n    c = 0\n    for i in range(1, 2 * n):\n        if l[i - 1] + l[i] == ')(':\n            c += 1\n    print(n - c)", "tc = int(input())\nfor i in range(tc):\n    n = int(input())\n    lst = input()\n    out = 0\n    for i in range(2 * n - 1):\n        if lst[i] == '(' and lst[i + 1] == ')':\n            out += 1\n    print(n - out + 1)", "n = int(input())\nfor p in range(0, n):\n    m = int(input())\n    a = input()\n    oo = 0\n    for j in range(0, 2 * m - 1):\n        if a[j] == '(':\n            if a[j + 1] == '(':\n                oo = oo + 1\n    print(oo + 1)", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    a = input()\n    ans = 0\n    for j in range(0, len(a) - 1):\n        if a[j] == '(' and a[j + 1] == '(':\n            ans = ans + 1\n    print(ans + 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    c = 0\n    for i in range(0, 2 * n - 1):\n        if s[i] == '(' and s[i + 1] == ')':\n            c += 1\n    print(n - c + 1)", "n = int(input())\nwhile n > 0:\n    N = int(input())\n    s = input()\n    k = 0\n    ans = 1\n    for i in range(2 * N):\n        if s[i] == '(':\n            k = k + 1\n            if k >= 2:\n                ans = ans + 1\n        else:\n            k = 0\n    print(ans)\n    n = n - 1", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cnt = 0\n    for i in range(2 * n - 1):\n        if s[i] == ')' and s[i + 1] == ')':\n            cnt += 1\n    print(cnt + 1)", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    su = 0\n    d = set()\n    cnt = n\n    prev = float('-inf')\n    for k in s:\n        if k == '(':\n            su += 1\n            if su in d and prev >= su:\n                cnt -= 1\n            d.add(su)\n            prev = su\n        else:\n            su -= 1\n    print(cnt)", "def solve(n, bracket):\n    num_components = 2 * n\n    stack = []\n    right_connect = {}\n    for bracket_index in range(2 * n):\n        if bracket[bracket_index] == '(':\n            stack.append(('(', bracket_index))\n        else:\n            num_components -= 1\n            right_connect[bracket_index] = stack.pop()[1]\n    for right in right_connect:\n        if right_connect[right] >= 1 and bracket[right_connect[right] - 1] == ')':\n            num_components -= 1\n    return num_components\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    bracket = input()\n    print(solve(n, bracket))", "import sys\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef fun(arr):\n    c = 0\n    for i in range(len(arr) - 1):\n        if arr[i] == '(' and arr[i + 1] == ')':\n            c += 1\n    return c\nl = int(input())\nfor _ in range(l):\n    n = int(input())\n    arr = get_string()\n    z = fun(arr)\n    print(n - z + 1)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    n *= 2\n    ans = 1\n    for i in range(n):\n        if i < n - 1 and s[i] == ')' and (s[i + 1] == ')'):\n            ans += 1\n    print(ans)", "t = int(input())\nwhile t:\n    n = int(input())\n    s = input()\n    sum = 0\n    for i in range(2 * n - 1):\n        if s[i] == '(' and s[i + 1] == ')':\n            sum += 1\n    print(n - sum + 1)\n    t -= 1", "import sys\nsys.setrecursionlimit(10 ** 7)\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    n *= 2\n    ans = 1\n    for i in range(1, n):\n        ans += s[i] == s[i - 1] == '('\n    print(ans)", "t = int(input())\nwhile t > 0:\n    a = []\n    ans = 1\n    n = int(input())\n    s = input()\n    for x in s:\n        a.append(x)\n    for x in range(0, len(a) - 1):\n        if a[x] == ')' and a[x + 1] == ')':\n            ans += 1\n    print(ans)\n    t -= 1", "n = int(input())\nfor i in range(n):\n    trash = int(input())\n    miew = input()\n    balance = 0\n    groups = 0\n    recently_closed = False\n    for j in range(len(miew)):\n        char = miew[j]\n        if char == '(':\n            balance += 1\n            recently_closed = False\n        else:\n            if balance > 0 and recently_closed:\n                groups += 1\n            if balance > 0:\n                balance -= 1\n                recently_closed = True\n            else:\n                groups += 1\n    groups += balance + 1\n    print(groups)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input().strip()\n    ans = n + 1\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(['(', -1])\n        else:\n            (_, cnt) = stack.pop()\n            if cnt > 0:\n                ans -= cnt\n            if len(stack) == 0:\n                ans -= 1\n            else:\n                stack[-1][1] += 1\n    print(ans)", "t = int(input())\nwhile t:\n    p = int(input())\n    s = input()\n    r = 0\n    check = 0\n    while r < 2 * p - 1:\n        if s[r + 1] == ')' and s[r] == '(':\n            check += 1\n        r += 1\n    print(1 - check + p)\n    t -= 1", "for _ in range(int(input())):\n    (n, s, count) = (int(input()), input(), 0)\n    for i in range(n * 2 - 1):\n        if s[i] == '(' and s[i + 1] == ')':\n            count += 1\n    print(n - count + 1)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    s = input()\n    st = []\n    ans1 = 0\n    flag = 0\n    for i in range(2 * n):\n        if s[i] == '(':\n            if st and flag == 0:\n                ans += 1\n            st.append('(')\n            flag = 0\n        else:\n            st.pop()\n            flag = 1\n    print(ans - ans1 + 1)", "for _ in range(int(input())):\n    n = int(input())\n    s = str(input())\n    ans = 0\n    for x in range(2 * n - 1):\n        if s[x] == '(' and s[x + 1] == ')':\n            ans += 1\n    print(n - ans + 1)", "for testcase in range(int(input())):\n    n = int(input()) * 2\n    s = input()\n    stack = [False] * (n // 2 + 5)\n    depth = 0\n    ans = 0\n    for i in range(n):\n        if s[i] == '(':\n            depth += 1\n        else:\n            stack[depth] = False\n            depth -= 1\n            if not stack[depth]:\n                ans += 1\n                stack[depth] = True\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input().strip()\n    c = {0: 0}\n    d = 0\n    tot = n\n    for p in s:\n        if p == '(':\n            d += 1\n            c[d] = 0\n        else:\n            tot -= max(0, c[d] - 1)\n            d -= 1\n            c[d] += 1\n    print(tot - c[0] + 1)"]