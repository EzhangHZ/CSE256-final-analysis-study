["cases = int(input())\nanswers = []\nfor i in range(cases):\n    l = [int(n) for n in input().split(' ')]\n    if (l[1] - l[0] + l[1]) % l[2] == 0 and (l[1] - l[0] + l[1]) / l[2] > 0:\n        answers.append('YES')\n    elif (l[1] - (l[2] - l[1])) % l[0] == 0 and (l[1] - (l[2] - l[1])) / l[0] > 0:\n        answers.append('YES')\n    elif ((l[2] - l[0]) / 2 + l[0]) % l[1] == 0 and ((l[2] - l[0]) / 2 + l[0]) / l[1] > 0:\n        answers.append('YES')\n    else:\n        answers.append('NO')\nprint('\\n'.join(answers))", "for s in [*open(0)][1:]:\n    (a, b, c) = map(int, s.split())\n    new_a = 2 * b - c\n    if new_a % a == 0 and new_a >= a and (new_a > 0):\n        print('YES')\n        continue\n    new_b = a / 2 + c / 2\n    if new_b % b == 0 and new_b >= b and (new_b > 0):\n        print('YES')\n        continue\n    new_c = 2 * b - a\n    if new_c % c == 0 and new_c >= c and (new_c > 0):\n        print('YES')\n        continue\n    print('NO')", "n = int(input())\ns = ''\nfor i in range(n):\n    f = 0\n    p = input().split()\n    a = int(p[0])\n    b = int(p[1])\n    c = int(p[2])\n    if (b - (c - b)) % a == 0 and (b - (c - b)) / a > 0:\n        f = 1\n    elif (c + a) / 2 % b == 0 and (c + a) / 2 / b > 0:\n        f = 1\n    elif (b + (b - a)) % c == 0 and (b + (b - a)) / c > 0:\n        f = 1\n    if f == 1:\n        s += 'YES\\n'\n    else:\n        s += 'NO\\n'\nprint(s)", "def Mean(x, y):\n    return (x + y) // 2\n\ndef can_make_ap(a, b, c):\n    if a == b and b == c:\n        return True\n    if b <= c and 2 * b - c > 0 and ((2 * b - c) % a == 0):\n        return True\n    if b > c and (2 * b - c) % a == 0:\n        return True\n    if a <= b and (2 * b - a) % c == 0:\n        return True\n    if a > b and 2 * b - a > 0 and ((2 * b - a) % c == 0):\n        return True\n    if a % 2 == c % 2:\n        return Mean(a, c) % b == 0\n    else:\n        return False\nres = []\nn = int(input())\nfor i in range(n):\n    (a, b, c) = input().split(None, 3)\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if can_make_ap(a, b, c):\n        res.append('YES')\n    else:\n        res.append('NO')\nfor i in range(n):\n    print(res[i])", "res = []\nfor _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    b *= 2\n    d = a + c\n    if d % b == 0:\n        res.append('YES')\n        continue\n    if b > d and ((b - c) % a == 0 or (b - a) % c == 0):\n        res.append('YES')\n        continue\n    res.append('NO')\nprint('\\n'.join(res))", "for s in [*open(0)][1:]:\n    (a, b, c) = map(int, s.split())\n    x = a + c\n    b *= 2\n    y = b - a\n    z = b - c\n    print('NYOE S'[y > 0 == y % c or x % b < 1 > x % 2 or z > 0 == z % a::2])", "import math\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (a, b, c) = [int(i) for i in input().split()]\n    d = c - b\n    if b - d > 0 and (b - d) % a == 0:\n        print('YES')\n        continue\n    d = (c - a) / 2\n    if a + d > 0 and (a + d) % b == 0:\n        print('YES')\n        continue\n    d = b - a\n    if b + d > 0 and (b + d) % c == 0:\n        print('YES')\n        continue\n    print('NO')", "for s in [*open(0)][1:]:\n    (a, b, c) = map(int, s.split())\n    f = True\n    if 2 * b > c and (2 * b - c) % a == 0:\n        f = False\n    elif (c + a) / 2 % b == 0:\n        f = False\n    elif 2 * b > a and (2 * b - a) % c == 0:\n        f = False\n    print('YNEOS'[f::2])", "import sys\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    (a, b, c) = map(int, input().split())\n    if b - a == c - b or (a == b and b == c):\n        print('YES')\n    elif (2 * b - c) % a == 0 and 2 * b - c > 0:\n        print('YES')\n    elif (2 * b - a) % c == 0 and 2 * b - a > 0:\n        print('YES')\n    elif (a + c) % (2 * b) == 0:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "for s in [*open(0)][1:]:\n    (a, b, c) = map(int, s.split())\n    f = True\n    if 2 * b > c and (2 * b - c) % a == 0:\n        f = False\n    elif 2 * b > a and (2 * b - a) % c == 0:\n        f = False\n    elif (c + a) / 2 % b == 0:\n        f = False\n    print('YNEOS'[f::2])", "import sys\nt = sys.stdin.readline()\nt = int(t.strip())\nres = []\nwhile t:\n    line = sys.stdin.readline()\n    (a, b, c) = line.strip().split()\n    (a, b, c) = (int(a), int(b), int(c))\n    ans = 'NO'\n    if (a + c) % 2 == 0:\n        x = (a + c) / 2\n        if x % b == 0:\n            ans = 'YES'\n    x = b * 2 - a\n    if x % c == 0 and x > 0:\n        ans = 'YES'\n    x = b * 2 - c\n    if x % a == 0 and x > 0:\n        ans = 'YES'\n    res.append(ans)\n    t = t - 1\nfor r in res:\n    print(r)", "from sys import stdin\n\ndef solve():\n    for _ in range(int(stdin.readline().rstrip())):\n        (a, b, c) = map(int, stdin.readline().rstrip().split())\n        if a - b == b - c:\n            print('YES')\n            continue\n        if a == 1 and c == 1:\n            print('YES')\n            continue\n        if abs(a - c) % 2 == 0:\n            if c - a >= 0 and (a + (c - a) // 2) % b == 0:\n                print('YES')\n                continue\n            elif a - c >= 0 and (a - (a - c) // 2) % b == 0:\n                print('YES')\n                continue\n        if b + (b - a) > 0 and (b + (b - a)) % c == 0:\n            print('YES')\n            continue\n        if b + (b - c) > 0 and (b + (b - c)) % a == 0:\n            print('YES')\n            continue\n        print('NO')\nsolve()", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_ls():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        (a, b, c) = get_ints()\n        x = 2 * b - c\n        y = 2 * b - a\n        z = a + c\n        if x % a == 0 and x > 0 or (y % c == 0 and y > 0) or z % (2 * b) == 0:\n            print('YES')\n        else:\n            print('NO')\nmain()", "for s in [*open(0)][1:]:\n    (a, b, c) = map(int, s.split())\n    x = a + c\n    b *= 2\n    y = b - a\n    z = b - c\n    print('NYOE S'[y > 0 == y % c or x % b < 1 > x % 2 or z > 0 == z % a::2])", "for s in [*open(0)][1:]:\n    (a, b, c) = map(int, s.split())\n    new_a = 2 * b - c\n    if new_a % a == 0 and new_a >= a and (new_a > 0):\n        print('YES')\n        continue\n    new_b = a / 2 + c / 2\n    if new_b % b == 0 and new_b >= b and (new_b > 0):\n        print('YES')\n        continue\n    new_c = 2 * b - a\n    if new_c % c == 0 and new_c >= c and (new_c > 0):\n        print('YES')\n        continue\n    print('NO')", "for s in [*open(0)][1:]:\n    (a, b, c) = map(int, s.split())\n    x = a + c\n    b *= 2\n    y = b - a\n    z = b - c\n    print('NYOE S'[y > 0 == y % c or x % b < 1 > x % 2 or z > 0 == z % a::2])", "import sys\ninput = sys.stdin.readline\nt = int(input())\nR = []\nfor _ in range(t):\n    (a, b, c) = map(int, input()[:-1].split())\n    is_valid = False\n    s = b - (c - b)\n    if a <= s and s % a == 0:\n        is_valid = is_valid or True\n    else:\n        is_valid = is_valid or False\n    s = (a + c) / 2\n    if s % 1 > 0:\n        is_valid = is_valid or False\n    else:\n        s = int(s)\n        if b <= s and s % b == 0:\n            is_valid = is_valid or True\n        else:\n            is_valid = is_valid or False\n    s = b + (b - a)\n    if c <= s and s % c == 0:\n        is_valid = is_valid or True\n    else:\n        is_valid = is_valid or False\n    R.append('YES' if is_valid else 'NO')\nprint('\\n'.join(R))", "for s in [*open(0)][1:]:\n    (a, b, c) = map(int, s.split())\n    x = a + c\n    b *= 2\n    y = b - a\n    z = b - c\n    print('NYOE S'[y > 0 == y % c or x % b < 1 > x % 2 or z > 0 == z % a::2])", "for s in [*open(0)][1:]:\n    (a, b, c) = map(int, s.split())\n    x = a + c\n    b *= 2\n    y = b - a\n    z = b - c\n    print('NYOE S'[y > 0 == y % c or x % b < 1 > x % 2 or z > 0 == z % a::2])", "for s in [*open(0)][1:]:\n    (a, b, c) = map(int, s.split())\n    na = (2 * b - c) / a\n    if na.is_integer() and na > 0:\n        print('YES')\n        continue\n    nb = (c + a) / (2 * b)\n    if nb.is_integer() and nb > 0:\n        print('YES')\n        continue\n    nc = (2 * b - a) / c\n    if nc.is_integer() and nc > 0:\n        print('YES')\n        continue\n    print('NO')", "for s in [*open(0)][1:]:\n    (a, b, c) = map(int, s.split())\n    x = a + c\n    b *= 2\n    y = b - a\n    z = b - c\n    print('NYOE S'[y > 0 == y % c or x % b < 1 > x % 2 or z > 0 == z % a::2])", "from functools import lru_cache as cache\nimport math\nfrom heapq import *\nimport sys\n\ndef get_int():\n    return int(input())\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef main():\n    testcases = get_int()\n    for i in range(testcases):\n        (a, b, c) = get_ints()\n        if solve(a, b, c):\n            print('YES')\n        else:\n            print('NO')\n\ndef solve(a, b, c):\n    if b + (b - a) > 0 and (b + (b - a)) % c == 0:\n        return True\n    if b - (c - b) > 0 and (b - (c - b)) % a == 0:\n        return True\n    if c < a:\n        (a, c) = (c, a)\n    if (c - a) % 2 == 0 and a + (c - a) // 2 > 0 and ((a + (c - a) // 2) % b == 0):\n        return True\n    return False\nmain()", "for s in [*open(0)][1:]:\n    (a, b, c) = map(int, s.split())\n    x = a + c\n    b *= 2\n    y = b - a\n    z = b - c\n    print('NYOE S'[y > 0 == y % c or x % b < 1 > x % 2 or z > 0 == z % a::2])", "for s in [*open(0)][1:]:\n    (a, b, c) = map(int, s.split())\n    x = a + c\n    b *= 2\n    y = b - a\n    z = b - c\n    print('NYOE S'[y > 0 == y % c or x % b < 1 > x % 2 or z > 0 == z % a::2])", "t = int(input())\nl = []\nfor i in range(t):\n    lst = list(map(int, input().split()))\n    l.append(lst)\nfor i in range(t):\n    (a, b, c) = (l[i][0], l[i][1], l[i][2])\n    if (b * 2 - c) % a == 0 and b * 2 - c > 0:\n        print('YES')\n    elif (b * 2 - a) % c == 0 and b * 2 - a > 0:\n        print('YES')\n    elif (a + c) % (2 * b) == 0:\n        print('YES')\n    else:\n        print('NO')", "num = int(input())\nans = ''\nfor i in range(num):\n    (a, b, c) = list(map(int, input().split()))\n    if b - a == c - b:\n        ans += 'YES\\n'\n    elif (2 * b - c) % a == 0 and (2 * b - c) / a > 0:\n        ans += 'YES\\n'\n        z = 2 * b - c\n    elif int(0.5 * (a + c)) % b == 0 and (a + c) % 2 == 0 and (0.5 * (a + c) / b > 0):\n        ans += 'YES\\n'\n        z = 0.5 * (a + c)\n    elif (2 * b - a) % c == 0 and (2 * b - a) / c > 0:\n        ans += 'YES\\n'\n        z = 2 * b - a\n    else:\n        ans += 'NO\\n'\nprint(ans)", "t = int(input())\nanswers = []\nfor i in range(t):\n    (a, b, c) = map(int, input().split())\n    if 2 * b > c and (2 * b - c) % a == 0:\n        answers.append('YES')\n    elif 2 * b > a and (2 * b - a) % c == 0:\n        answers.append('YES')\n    elif (a + c) % (2 * b) == 0:\n        answers.append('YES')\n    else:\n        answers.append('NO')\nfor answer in answers:\n    print(answer)", "for s in [*open(0)][1:]:\n    (a, b, c) = map(int, s.split())\n    x = a + c\n    b *= 2\n    y = b - a\n    z = b - c\n    print('NYOE S'[y > 0 == y % c or x % b < 1 > x % 2 or z > 0 == z % a::2])", "for s in [*open(0)][1:]:\n    (a, b, c) = map(int, s.split())\n    x = a + c\n    b *= 2\n    y = b - a\n    z = b - c\n    print('NYOE S'[y > 0 == y % c or x % b < 1 > x % 2 or z > 0 == z % a::2])", "for s in [*open(0)][1:]:\n    (a, b, c) = map(int, s.split())\n    x = a + c\n    b *= 2\n    y = b - a\n    z = b - c\n    print('NYOE S'[y > 0 == y % c or x % b < 1 > x % 2 or z > 0 == z % a::2])", "def ap(a, b, c):\n    ms = b + b - c\n    if ms > 0 and ms % a == 0:\n        return True\n    ms += c - a\n    if ms > 0 and ms % c == 0:\n        return True\n    if (a + c) % 2:\n        return False\n    ms = (a + c) // 2\n    return ms % b == 0\nt = int(input())\ntests = [False for i in range(t)]\na = b = c = 0\nfor i in range(t):\n    (a, b, c) = map(int, input().split())\n    if ap(a, b, c):\n        tests[i] = True\nfor test in tests:\n    if test:\n        print('YES')\n    else:\n        print('NO')", "import sys, os\nif os.path.exists('input'):\n    sys.stdin = open('input', 'r')\ninput = sys.stdin.readline\n\ndef solve():\n    a = list(map(int, input().split()))\n    left = 2 * a[1] - a[2]\n    middle = (a[0] + a[2]) // 2\n    right = 2 * a[1] - a[0]\n    if left % a[0] == 0 and left > 0:\n        return 'YES'\n    elif (a[0] + a[2]) % 2 == 0 and middle % a[1] == 0:\n        return 'YES'\n    elif right % a[2] == 0 and right > 0:\n        return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    print(solve())", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    r = 'NO'\n    d = (b - (c - b)) / a\n    if d % 1 == 0 and d > 0:\n        r = 'YES'\n    d = (b - (a - b)) / c\n    if d % 1 == 0 and d > 0:\n        r = 'YES'\n    d = (a + c) / 2 / b\n    if d % 1 == 0 and d >= 0:\n        r = 'YES'\n    print(r)", "for s in [*open(0)][1:]:\n    (a, b, c) = map(int, s.split())\n    x = a + c\n    b *= 2\n    y = b - a\n    z = b - c\n    print('NYOE S'[y > 0 == y % c or x % b < 1 > x % 2 or z > 0 == z % a::2])", "n = int(input())\nans = list()\nfor i in range(0, n):\n    [a, b, c] = [int(x) for x in input().split()]\n    e = (a + c) / 2\n    d = 2 * b - c\n    f = 2 * b - a\n    if d > 0 and d % a == 0:\n        ans.append('YES')\n        continue\n    if e > 0 and e % b == 0:\n        ans.append('YES')\n        continue\n    if f > 0 and f % c == 0:\n        ans.append('YES')\n        continue\n    ans.append('NO')\nfor s in ans:\n    print(s)", "for s in [*open(0)][1:]:\n    (a, b, c) = map(int, s.split())\n    x = a + c\n    b *= 2\n    y = b - a\n    z = b - c\n    print('NYOE S'[y > 0 == y % c or x % b < 1 > x % 2 or z > 0 == z % a::2])", "import sys\nfrom sys import stdin, stdout\nfrom math import ceil, floor, sqrt, log, log2, log10\nfrom collections import Counter\nint_max = float('inf')\nint_min = -float('inf')\nmod = 10 ** 9 + 7\nANS = []\ninput = stdin.readline\n\ndef solve():\n    pass\nt = int(input())\nfor i in range(t):\n    (a, b, c) = map(int, input().split())\n    d = c - b\n    if b - d > 0 and (b - d) % a == 0:\n        print('YES')\n        continue\n    d = (c - a) / 2\n    if a + d > 0 and (a + d) % b == 0:\n        print('YES')\n        continue\n    d = b - a\n    if b + d > 0 and (b + d) % c == 0:\n        print('YES')\n        continue\n    print('NO')", "import os\nimport math as mt\nimport sys\nimport itertools as it\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\nfor tc in range(int(input())):\n    (x, y, z) = I()\n    f = lambda n: n % 1 == 0 and n > 0\n    if f((y + (y - x)) / z) or f((y - (z - y)) / x) or f((x + (z - x) / 2) / y):\n        print('YES')\n        continue\n    print('NO')", "def solve(a, b, c):\n    if c - b == b - a:\n        return True\n    if b != 0:\n        m = (c + a) / (2.0 * b)\n        if m > 0 and m == round(m):\n            return True\n    if c != 0:\n        m = (2.0 * b - a) / c\n        if m > 0 and m == round(m):\n            return True\n    if a != 0:\n        m = (2.0 * b - c) / a\n        if m > 0 and m == round(m):\n            return True\n    return False\nout = []\nn = int(input())\nfor i in range(n):\n    s = list(map(int, input().split(' ')))\n    (a, b, c) = (s[0], s[1], s[2])\n    if solve(a, b, c):\n        out.append('YES')\n    else:\n        out.append('NO')\nprint('\\n'.join(out))", "def cop(x):\n    a = x[0]\n    b = x[1]\n    c = x[2]\n    x = float(a + c) / 2\n    cop = 0\n    if x % 1 == 0:\n        cop = 1\n    if b - (c - b) == a:\n        print('YES')\n    elif (b - (c - b)) % a == 0 and a < b - c + b:\n        print('YES')\n    elif cop == 1 and (a + c) / 2 % b == 0 and (b < (a + c) / 2):\n        print('YES')\n    elif (2 * b - a) % c == 0 and b * 2 - a > c:\n        print('YES')\n    else:\n        print('NO')\nt = []\nfor i in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    t.append([a, b, c])\nfor x in t:\n    cop(x)", "import heapq\nimport sys\nimport math\nfrom collections import deque\nfrom bisect import bisect_left, bisect_right\nI = sys.stdin.readline\nII = lambda : int(I())\nIN = lambda x: map(int, x.split())\nFN = lambda x: map(float, x.split())\nL = lambda x: list(IN(x))\nM = 1000000007\nP = print\nT = True\nF = False\ntotal = int(input())\nwhile total > 0:\n    l1 = L(I())\n    total -= 1\n    m1 = (l1[0] + l1[2]) / (2 * l1[1])\n    if m1 > 1:\n        if m1.is_integer():\n            print('YES')\n        else:\n            print('NO')\n        continue\n    else:\n        m2 = (2 * l1[1] - l1[0]) / l1[2]\n        if m2.is_integer():\n            print('YES')\n            continue\n        m3 = (2 * l1[1] - l1[2]) / l1[0]\n        if m3.is_integer():\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\ns = []\nfor i in range(t):\n    (a, b, c) = map(int, input().split())\n    if (2 * b - a) / c == (2 * b - a) // c and (2 * b - a) / c > 0 or ((2 * b - c) / a == (2 * b - c) // a and (2 * b - c) / a > 0) or ((a + c) / (2 * b) == (a + c) // (2 * b) and (a + c) / (2 * b) > 0):\n        s.append('YES')\n    else:\n        s.append('NO')\nfor i in s:\n    print(i)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef solution(a, b, c):\n    fa = 2 * b - c\n    fb = c + a\n    fc = 2 * b - a\n    if fa > 0 and fa % a == 0 or fb % (2 * b) == 0 or (fc > 0 and fc % c == 0):\n        return 'YES'\n    else:\n        return 'NO'\nt = inp()\nresult = []\nwhile t:\n    t -= 1\n    (a, b, c) = inlt()\n    result.append(solution(a, b, c))\nfor r in result:\n    print(r)", "def ap(a, b, c):\n    m1 = (a + c) / (2 * b)\n    if m1 == int(m1) and m1 > 0:\n        return 'YES'\n    m2 = (2 * b - c) / a\n    if m2 == int(m2) and m2 > 0:\n        return 'YES'\n    m3 = (2 * b - a) / c\n    if m3 == int(m3) and m3 > 0:\n        return 'YES'\n    return 'NO'\nt = int(input())\nc = []\nwhile t > 0:\n    a = list(map(int, input().split()))\n    c.append(a)\n    t -= 1\nfor i in c:\n    print(ap(i[0], i[1], i[2]))", "for s in [*open(0)][1:]:\n    (a, b, c) = map(int, s.split())\n    x = a + c\n    y = 2 * b - a\n    z = 2 * b - c\n    print('NYOE S'[y > 0 == y % c or x % 2 == x // 2 % b < 1 or z > 0 == z % a::2])", "from collections import Counter\nfrom math import ceil, floor, log, gcd\nimport bisect as bs\nimport sys\ninput = sys.stdin.readline\ninp_lis = lambda : list(map(int, input().split()))\ninp_multi = lambda : map(int, input().split())\ninp_int = lambda : int(input().strip())\nfor _ in range(int(input().strip())):\n    (a, b, c) = inp_multi()\n    s = a + c\n    if b - a == c - b or (2 * b - a > 0 and (2 * b - a) % c == 0) or (2 * b - c > 0 and (2 * b - c) % a == 0) or (s % (2 * b) == 0):\n        print('YES')\n    else:\n        print('NO')", "def mAP(l):\n    a = l[0]\n    b = l[1]\n    c = l[2]\n    d = b - c\n    an = b + d\n    if (an % a == 0) & (an >= b) & (an >= a):\n        return 'YES'\n    d = c - b\n    an = b - d\n    if (an % a == 0) & (an >= a) & (an <= b):\n        return 'YES'\n    d = b - a\n    cn = b + d\n    if (cn % c == 0) & (cn >= b) & (cn >= c):\n        return 'YES'\n    d = a - b\n    cn = b - d\n    if (cn % c == 0) & (cn >= c) & (cn <= b):\n        return 'YES'\n    if abs(c - a) % 2 == 0:\n        d = (c - a) // 2\n        bn = a + d\n        if (bn % b == 0) & (bn >= b) & (bn <= c):\n            return 'YES'\n        d = (a - c) // 2\n        bn = c + d\n        if (bn % b == 0) & (bn >= b) & (bn <= a):\n            return 'YES'\n    return 'NO'\nt = int(input())\nls = []\nfor x in range(t):\n    s = str(input())\n    ls.append(s)\nla = []\nfor i in range(len(ls)):\n    l = []\n    for s in ls[i].split(' '):\n        l.append(int(s))\n    ans = mAP(l)\n    la.append(ans)\nfor a in la:\n    print(a)", "for s in [*open(0)][1:]:\n    (a, b, c) = map(int, s.split())\n    x = a + c\n    b *= 2\n    y = b - a\n    z = b - c\n    print('NYOE S'[y > 0 == y % c or x % b < 1 > x % 2 or z > 0 == z % a::2])", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef valid_ap(a, b, c):\n    d = b - a\n    new_c = a + 2 * d\n    if new_c % c == 0 and new_c >= c and (new_c != 0):\n        return True\n    d = (c - a) / 2\n    new_b = a + d\n    if new_b % b == 0 and new_b >= b and (new_b != 0):\n        return True\n    new_a = 2 * b - c\n    if new_a % a == 0 and new_a >= a and (new_a != 0):\n        return True\n    return False\n\ndef main():\n    n = inp()\n    for _ in range(n):\n        arr = inlt()\n        (a, b, c) = (arr[0], arr[1], arr[-1])\n        if valid_ap(a, b, c):\n            print('YES')\n        else:\n            print('NO')\n    return 0\nmain()", "import sys\n\ndef read_line():\n    return sys.stdin.readline().strip()\n\ndef read_ints_line():\n    return [int(x) for x in read_line().split()]\nt = int(read_line())\nfor _ in range(t):\n    (a, b, c) = tuple(read_ints_line())\n    p_a = b - (c - b)\n    t_a = p_a // a\n    p_b = (a + c) / 2\n    t_b = p_b // b\n    p_c = b + (b - a)\n    t_c = p_c // c\n    print('YES' if t_a > 0 and t_a * a == p_a or (t_b > 0 and t_b * b == p_b) or (t_c > 0 and t_c * c == p_c) else 'NO')", "y = []\nt = int(input())\nfor i in range(t):\n    x = input()\n    y.append(x.split())\nfor i in y:\n    a = int(i[0])\n    b = int(i[1])\n    c = int(i[2])\n    if (c + a) % (2 * b) == 0:\n        print('YES')\n        continue\n    if (2 * b - c) % a == 0 and 2 * b > c:\n        print('YES')\n        continue\n    if (2 * b - a) % c == 0 and 2 * b > a:\n        print('YES')\n        continue\n    print('NO')", "def getlistint():\n    return list(map(int, stdin.readline().split()))\n\ndef getmapint():\n    return map(int, stdin.readline().split())\n\ndef getliststr():\n    return list(stdin.readline().split())\n\ndef getint():\n    return int(stdin.readline().strip())\n\ndef getstr():\n    return stdin.readline().strip()\n\ndef pr(s):\n    stdout.write(str(s) + '\\n')\n\ndef prlist(l):\n    stdout.write(' '.join(list(map(str, l))) + '\\n')\nfrom sys import stdin, stdout\nfor _ in range(getint()):\n    (a, b, c) = getmapint()\n    (a, c == min(a, c), max(a, c))\n    if c - b == b - a:\n        pr('YES')\n        continue\n    moy = (a + c) // 2\n    if (a + c) / 2 == int((a + c) / 2) and moy % b == 0:\n        pr('YES')\n        continue\n    a1 = 2 * b - c\n    c1 = 2 * b - a\n    if a1 % a == 0 and a1 > 0 and (c - b == b - a1):\n        pr('YES')\n    elif c1 % c == 0 and c1 > 0 and (c1 - b == b - a):\n        pr('YES')\n    else:\n        pr('NO')", "w = int(input())\nl = []\nimport math\nfor i in range(w):\n    k = list(map(int, input().split()))\n    l.append(k)\nfor i in l:\n    a = i[0]\n    b = i[1]\n    c = i[2]\n    if 2 * b <= a + c:\n        if math.ceil((a + c) / (2 * b)) == math.floor((a + c) / (2 * b)):\n            print('YES')\n        else:\n            print('NO')\n    elif math.floor((2 * b - c) / a) == math.ceil((2 * b - c) / a) or math.floor((2 * b - a) / c) == math.ceil((2 * b - a) / c):\n        print('YES')\n    else:\n        print('NO')", "testCase = int(input())\nboolArray = []\ni = 0\nwhile i < testCase:\n    inpArr = input().split()\n    inpArray = list(map(int, inpArr))\n    a = inpArray[0]\n    b = inpArray[1]\n    c = inpArray[2]\n    d = sum(inpArray)\n    p_2 = (a + c) % (2 * b) == 0\n    p_5 = (2 * b - c) % a == 0 and 2 * b > c\n    p_9 = (2 * b - a) % c == 0 and 2 * b > a\n    finBool = p_2 or p_5 or p_9\n    boolArray.append(finBool)\n    i += 1\nfor x in boolArray:\n    if x == True:\n        print('YES')\n    else:\n        print('NO')", "x = int(input(''))\nl = []\nfor i in range(x):\n    y = input()\n    d = y.split()\n    a = int(d[0])\n    b = int(d[1])\n    c = int(d[2])\n    if (a + c) / 2 % b == 0 and (a + c) * b > 0:\n        l.append('YES')\n    elif (2 * b - c) % a == 0 and (2 * b - c) * a > 0:\n        l.append('YES')\n    elif (2 * b - a) % c == 0 and (2 * b - a) * c > 0:\n        l.append('YES')\n    else:\n        l.append('NO')\nfor k in l:\n    print(k)", "t = int(input())\nans = []\nfor i in range(t):\n    ans.append(0)\n    (a, b, c) = input().split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    r = b - (c - b)\n    if r // a == r / a and r / a > 0:\n        ans[i] = 1\n    r = a + (c - a) / 2\n    if r // b == r / b and r / b > 0:\n        ans[i] = 1\n    r = b + (b - a)\n    if r // c == r / c and r / c > 0:\n        ans[i] = 1\nfor i in range(t):\n    if ans[i] == 1:\n        print('YES')\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\n\ndef is_pos_int(x):\n    return x % 1 == 0 and x > 0\n\ndef valid(a, b, c):\n    x1 = (2 * b - c) / a\n    x2 = (c + a) / (2 * b)\n    x3 = (2 * b - a) / c\n    return is_pos_int(x1) or is_pos_int(x2) or is_pos_int(x3)\nn = int(input())\nfor _ in range(n):\n    nums = list(map(int, input().split(' ')))\n    ans = 'YES' if valid(*nums) else 'NO'\n    print(ans)", "t = int(input())\nl = []\nfor i in range(t):\n    x = input()\n    x = x.split()\n    a = int(x[0])\n    b = int(x[1])\n    c = int(x[2])\n    if (2 * b - a) % c == 0 and (2 * b - a) / c > 0 or ((2 * b - c) % a == 0 and (2 * b - c) / a > 0) or ((a + c) % (2 * b) == 0 and (a + c) / (2 * b) > 0):\n        l.append('YES')\n    else:\n        l.append('NO')\nfor i in l:\n    print(i)", "res = []\nn = int(input())\nfor i in range(n):\n    (a, b, c) = input().split(None, 3)\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if b <= c and 2 * b - c > 0 and ((2 * b - c) % a == 0):\n        res.append('YES')\n    elif b > c and (2 * b - c) % a == 0:\n        res.append('YES')\n    elif a <= b and (2 * b - a) % c == 0:\n        res.append('YES')\n    elif a > b and 2 * b - a > 0 and ((2 * b - a) % c == 0):\n        res.append('YES')\n    elif a % 2 == c % 2:\n        if (a + c) // 2 % b == 0:\n            res.append('YES')\n        else:\n            res.append('NO')\n    else:\n        res.append('NO')\nfor i in range(n):\n    print(res[i])", "answers = []\nfor i in range(int(input())):\n    ans = 'NO'\n    (a, b, c) = map(int, input().split())\n    new_a = b - (c - b)\n    if new_a >= a and (not new_a % a) and (new_a != 0):\n        ans = 'YES'\n    new_b = a + (c - a) / 2\n    if new_b >= b and (not new_b % b) and (not (c - a) % 2) and (new_b != 0):\n        ans = 'YES'\n    new_c = a + 2 * (b - a)\n    if new_c >= c and (not new_c % c) and (new_c != 0):\n        ans = 'YES'\n    answers.append(ans)\nfor i in answers:\n    print(i)", "N = int(input())\nA = []\n\ndef solve(a, b, c):\n    new_a = b - (c - b)\n    new_b = a + (c - a) / 2\n    new_c = a + 2 * (b - a)\n    if new_a >= a and new_a % a == 0 and (new_a != 0):\n        A.append('YES')\n        return\n    if new_b >= b and (c - a) % 2 == 0 and (new_b % b == 0) and (new_b != 0):\n        A.append('YES')\n        return\n    if new_c >= c and new_c % c == 0 and (new_c != 0):\n        A.append('YES')\n        return\n    else:\n        A.append('NO')\n        return\nfor i in range(N):\n    (a, b, c) = list(map(int, input().split()))\n    solve(a, b, c)\nfor i in A:\n    print(str(i))", "from collections import defaultdict, deque\nimport sys\ninput = lambda : sys.stdin.readline().strip()\ntest_cases = int(input())\nwhile test_cases > 0:\n    test_cases -= 1\n    (a, b, c) = list(map(int, input().split()))\n    help = 'NO'\n    if (2 * b - c) % a == 0 and 2 * b > c:\n        help += 'YES'\n    elif (a + c) % (2 * b) == 0 and a > -c:\n        help += 'YES'\n    elif (2 * b - a) % c == 0 and 2 * b > a:\n        help += 'YES'\n    print('YES' if 'YES' in help else 'NO')", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    (a, b, c) = map(int, sys.stdin.readline().split())\n    if (2 * b - c) % a == 0 and (2 * b - c) // a > 0:\n        print('YES')\n    elif (2 * b - a) % c == 0 and (2 * b - a) // c > 0:\n        print('YES')\n    elif (a + c) % (2 * b) == 0 and (a + c) // (2 * b) > 0:\n        print('YES')\n    else:\n        print('NO')", "number_of_test_case = int(input())\narr = []\nfor i in range(number_of_test_case):\n    user_input = list(map(int, input().split()))\n    arr.append(user_input)\n\ndef valid(number):\n    if number > 0 and number == float(int(number)):\n        return True\n    return False\nfor ar in arr:\n    a = ar[0]\n    b = ar[1]\n    c = ar[2]\n    if a == b and b == c:\n        print('YES')\n        continue\n    take_a = (2 * b - c) / a\n    take_b = (a + c) / (2 * b)\n    take_c = (2 * b - a) / c\n    if valid(take_a):\n        print('YES')\n        continue\n    if valid(take_b):\n        print('YES')\n        continue\n    if valid(take_c):\n        print('YES')\n        continue\n    print('NO')", "n = input()\np = []\nfor i in range(0, int(n)):\n    l = input()\n    hlt = [int(i) for i in l.split() if i.isdigit()]\n    p.append(hlt)\nfor i in range(0, len(p)):\n    ans = 'NO'\n    if p[i][2] + p[i][0] == 2 * p[i][1]:\n        ans = 'YES'\n    elif p[i][2] + p[i][0] > 2 * p[i][1]:\n        if (p[i][2] + p[i][0]) % (2 * p[i][1]) == 0:\n            ans = 'YES'\n    elif (2 * p[i][1] - p[i][2]) % p[i][0] == 0:\n        ans = 'YES'\n    elif (2 * p[i][1] - p[i][0]) % p[i][2] == 0:\n        ans = 'YES'\n    print(ans)", "n = int(input())\nl1 = []\nfor i in range(n):\n    l1.append(input().split())\n\ndef ans(a, b, c):\n    if 2 * b - c > 0 and (2 * b - c) % a == 0:\n        print('YES')\n    elif (a + c) % 2 == 0 and (a + c) // 2 % b == 0:\n        print('YES')\n    elif 2 * b - a > 0 and (2 * b - a) % c == 0:\n        print('YES')\n    else:\n        print('NO')\nfor i in range(n):\n    x = int(l1[i][0])\n    y = int(l1[i][1])\n    z = int(l1[i][2])\n    ans(x, y, z)", "from collections import Counter\nfrom sys import stdin, stdout\n\ndef get_inputs():\n    return map(int, stdin.readline().strip().split())\n\ndef main():\n    (a, b, c) = list(get_inputs())\n    count = 0\n    for k in range(3):\n        if k == 0:\n            d = b - a\n            if (d + b) % c == 0 and (d + b) // c > 0:\n                count += 1\n        if k == 1:\n            d = c - a\n            if d % 2 == 0:\n                d = d // 2\n                if (d + a) % b == 0 and (d + a) // b > 0:\n                    count += 1\n        else:\n            d = c - b\n            if (b - d) % a == 0 and (b - d) // a > 0:\n                count += 1\n    if count == 0:\n        print('NO')\n    else:\n        print('YES')\nn = int(stdin.readline())\nfor k in range(n):\n    main()", "import sys\nimport math\nfrom fractions import Fraction\nfrom decimal import *\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    inp = input().strip()\n    arr = [int(x) for x in inp.split(' ')]\n    a = arr[0]\n    b = arr[1]\n    c = arr[2]\n    if c - b == b - a:\n        print('YES')\n        t -= 1\n        continue\n    else:\n        na = b - (c - b)\n        m = na // a\n        if na > 0 and a * m == na:\n            print('YES')\n            t -= 1\n            continue\n        na = (a + c) / 2\n        m = na // b\n        if na > 0 and b * m == na:\n            print('YES')\n            t -= 1\n            continue\n        na = b + b - a\n        m = na // c\n        if na > 0 and c * m == na:\n            print('YES')\n            t -= 1\n            continue\n    print('NO')\n    t -= 1", "import sys\nfrom typing import Tuple\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nT = inp()\nfor _ in range(T):\n    (a, b, c) = invr()\n    if b - a == c - b:\n        print('YES')\n    elif (a + c) % (2 * b) == 0:\n        print('YES')\n    elif (2 * b - a) % c == 0 and 2 * b - a > 0:\n        print('YES')\n    elif (2 * b - c) % a == 0 and 2 * b - c > 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nall_results = []\nfor _ in range(t):\n    (a, b, c) = list(map(int, input().split()))\n    fl = False\n    result = 'NO'\n    new_a = b - (c - b)\n    if new_a >= a and new_a % a == 0 and (a != 0):\n        result = 'YES'\n    new_b = a + (c - a) / 2\n    if new_b >= b and new_b % b == 0 and (b != 0):\n        result = 'YES'\n    new_c = b - (a - b)\n    if new_c >= c and new_c % c == 0 and (c != 0):\n        result = 'YES'\n    all_results.append(result)\nfor item in all_results:\n    print(item)", "def divisibility(x, y):\n    if x > 0:\n        if x % y == 0:\n            return 1\n        else:\n            return 0\n    return 0\npossibilities = []\nfor i in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    if divisibility(2 * b - a, c) or divisibility((a + c) / 2, b) or divisibility(2 * b - c, a):\n        possibilities.append('YES')\n    else:\n        possibilities.append('NO')\nfor i in possibilities:\n    print(i)", "t = int(input())\na = [0 for i in range(t)]\nb = [0 for i in range(t)]\nc = [0 for i in range(t)]\nfor i in range(t):\n    (a[i], b[i], c[i]) = input().split()\nfor i in range(t):\n    d = 2 * int(b[i]) - int(c[i])\n    k = int(a[i])\n    f = 2 * int(b[i]) - int(a[i])\n    r = int(c[i])\n    p = int(c[i]) + int(a[i])\n    s = 2 * int(b[i])\n    if p / s % 1 == 0 and p / s > 0 or (d / k % 1 == 0 and d / k > 0) or (f / r % 1 == 0 and f / r > 0):\n        print('YES')\n    else:\n        print('NO')", "N = int(input())\nfor i in range(N):\n    (a, b, c) = map(int, input().split())\n    if (2 * b - c) % a == 0 and 2 * b - c > 0 or (a + c) % (2 * b) == 0 or ((2 * b - a) % c == 0 and 2 * b - a > 0):\n        print('YES')\n    else:\n        print('NO')", "def solve():\n    (a, b, c) = map(int, input().split())\n    d1 = c - b\n    flag = 0\n    if (b - d1) % a == 0 and b - d1 > 0:\n        return 'YES'\n    d2 = c - a\n    if (a + d2 // 2) % b == 0 and d2 % 2 == 0:\n        return 'YES'\n    d3 = b - a\n    if (b + d3) % c == 0 and b + d3 > 0:\n        return 'YES'\n    return 'NO'\nt = int(input())\nfor i in range(t):\n    print(solve())", "z = int(input())\nfor q in range(z):\n    r = 1\n    if 1 + 5 == 6:\n        r = 0\n    (x, y, z) = map(int, input().split())\n    f = z - y\n    o = y - f\n    if o % x == 0 and o >= x:\n        if 1 + 1 == 2:\n            print('YES')\n            continue\n    f = y - x\n    o = y + f\n    if o % z == 0 and o >= z:\n        if 1 + 1 == 2:\n            print('YES')\n            continue\n    f = z - x\n    if f % 2 != 0:\n        if 2 + 3 == 5:\n            print('NO')\n            continue\n    o = z - f // 2\n    t = o // y\n    if o >= y and o % y == 0:\n        if 1 + 1 == 2:\n            print('YES')\n            continue\n    if 2 + 3 == 5:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (a, b, c) = [int(i) for i in input().split()]\n    ans = False\n    if (2 * b - c) % a == 0 and 2 * b > c:\n        ans = True\n    elif (2 * b - a) % c == 0 and 2 * b > a:\n        ans = True\n    elif (a + c) % (2 * b) == 0:\n        ans = True\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "from math import ceil, log10\nimport bisect\nimport math\nfrom collections import defaultdict\nfrom itertools import groupby\nfrom collections import defaultdict, Counter\nfrom heapq import heappop, heappush\nfrom collections import deque\nfor i in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    if (a + c) / 2 % b == 0 or ((2 * b - a) % c == 0 and 2 * b - a > 0) or ((2 * b - c) % a == 0 and 2 * b - c > 0):\n        print('YES')\n    else:\n        print('NO')", "def isanswer(n):\n    if int(n) != n:\n        return False\n    if n <= 0:\n        return False\n    return True\nt = int(input())\nfor _ in range(t):\n    (a, b, c) = list(map(int, input().split()))\n    if isanswer((2 * b - c) / a):\n        print('YES')\n        continue\n    if isanswer((a + c) / 2 / b):\n        print('YES')\n        continue\n    if isanswer((2 * b - a) / c):\n        print('YES')\n        continue\n    print('NO')", "t = int(input())\nfor _ in range(t):\n    (a, b, c) = map(int, input().split(' '))\n    if a + c != 0 and (a + c) % (2 * b) == 0:\n        print('YES')\n    elif 2 * b - c > 0 and (2 * b - c) % a == 0:\n        print('YES')\n    elif 2 * b - a > 0 and (2 * b - a) % c == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    import math as m\n    p = 2 * b - c\n    q = 2 * b - a\n    t = a + c\n    if p > 0 and p % a == 0 or (q > 0 and q % c == 0) or (t > 0 and t % (2 * b) == 0):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (a, b, c) = map(int, input().split())\n    if (b - (c - b)) % a == 0 and b - (c - b) >= a or ((b + (b - a)) % c == 0 and b + (b - a) >= c) or ((a + c) / 2 % b == 0 and (a + c) / 2 >= b):\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    if (a + c) % (2 * b) == 0 or (2 * b > c and (2 * b - c) % a == 0) or (2 * b > a and (2 * b - a) % c == 0):\n        print('YES')\n    else:\n        print('NO')"]