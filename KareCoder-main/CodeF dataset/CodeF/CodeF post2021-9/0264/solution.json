["def solution_e1(l):\n    result = []\n    aux = [l[0]]\n    tmpmin = l[0]\n    for x in l[1:]:\n        if x < tmpmin:\n            tmpmin = x\n            aux.append(x)\n        else:\n            result.append(x)\n    return aux[::-1] + result\nt = int(input())\nfor _ in range(t):\n    try:\n        ln = int(input())\n        l = input()\n        l = [int(x) for x in l.split(' ')]\n        s = solution_e1(l)\n        print(' '.join([str(c) for c in s]))\n    except Exception as e:\n        print(repr(e))", "from sys import stdin\nfrom collections import deque\n\ndef read_input():\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    return (n, p)\n\ndef solve(n, p):\n    answer = deque()\n    for pi in p:\n        if len(answer) == 0 or pi < answer[0]:\n            answer.appendleft(pi)\n        else:\n            answer.append(pi)\n    return ' '.join(map(str, answer))\n\ndef main():\n    t = int(stdin.readline())\n    for _ in range(t):\n        (n, p) = read_input()\n        answer = solve(n, p)\n        print(answer)\nmain()", "from collections import deque\nfor __ in range(int(input())):\n    N = int(input())\n    L = list(map(int, input().split()))\n    Deque = deque([L[0]])\n    L = L[1:]\n    for x in L:\n        if x <= Deque[0]:\n            Deque.appendleft(x)\n        else:\n            Deque.append(x)\n    print(' '.join((str(item) for item in Deque)))", "from collections import deque\n\ndef solve():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        m = [int(s) for s in input().split()]\n        d = deque([m[0]])\n        for j in range(1, n):\n            if m[j] < d[0]:\n                d.appendleft(m[j])\n            else:\n                d.append(m[j])\n        print(' '.join((str(s) for s in d)))\nsolve()", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    final = deque()\n    final.append(lis[0])\n    for ele in lis[1:]:\n        if final[0] > ele:\n            final.appendleft(ele)\n        else:\n            final.append(ele)\n    print(' '.join([str(i) for i in final]))", "from collections import deque\nimport heapq\nfrom math import sqrt\nimport operator\nfrom operator import itemgetter\nimport sys\nimport copy\ninf_var = 0\nif inf_var == 1:\n    inf = open('input.txt', 'r')\nelse:\n    inf = sys.stdin\ninput = inf.readline\n\ndef read_one_int():\n    return int(input().rstrip('\\n'))\n\ndef read_one_float():\n    return float(input().rstrip('\\n'))\n\ndef read_list_of_ints():\n    res = [int(val) for val in input().rstrip('\\n').split()]\n    return res\n\ndef read_list_of_ints_zero():\n    return [int(val) - 1 for val in input().rstrip('\\n').split()]\n\ndef read_str():\n    return input().rstrip()\n\ndef main():\n    tests = read_one_int()\n    for _ in range(tests):\n        n = read_one_int()\n        elements = read_list_of_ints()\n        right = []\n        left = []\n        left.append(elements[0])\n        for i in range(1, n):\n            if elements[i] < left[-1]:\n                left.append(elements[i])\n            else:\n                right.append(elements[i])\n        left.reverse()\n        left.extend(right)\n        print(' '.join(map(str, left)))\nmain()", "import sys\nfrom collections import deque\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_list_strings():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef solve(n, arr):\n    queue = deque()\n    queue.append(arr[0])\n    for i in range(1, n):\n        if arr[i] > queue[0]:\n            queue.append(arr[i])\n        else:\n            queue.appendleft(arr[i])\n    sys.stdout.write(' '.join(map(str, queue)) + '\\n')\nT = get_int()\nwhile T:\n    n = get_int()\n    arr = get_list()\n    solve(n, arr)\n    T -= 1", "from collections import deque\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = deque()\n    for num in a:\n        if not d:\n            d.append(num)\n        elif num < d[0]:\n            d.appendleft(num)\n        else:\n            d.append(num)\n    print(' '.join(map(str, d)))", "t = int(input())\nfrom collections import deque\nfor _ in range(t):\n    (n, line) = (int(input()), [int(x) for x in input().split()])\n    res = deque()\n    res.append(line[0])\n    for el in line[1:]:\n        if el < res[0]:\n            res.appendleft(el)\n        else:\n            res.append(el)\n    res = list(res)\n    res = [str(x) for x in res]\n    print(' '.join(res))", "from collections import deque\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = deque([a[0]])\n    if len(a) == 1:\n        print(a[0])\n        continue\n    for k in range(1, len(a)):\n        if a[k] <= d[0]:\n            d.appendleft(a[k])\n        else:\n            d.append(a[k])\n    e = list(d)\n    print(' '.join([str(r) for r in e]))", "from sys import stdin\nfrom io import StringIO\nfrom collections import deque\ninput = lambda : stdin.readline().strip()\nlinput = lambda : [*map(int, input().split())]\noutput = StringIO()\n\ndef lprint(*x):\n    output.writelines((str(v) + ' ' for v in x))\n    output.write('\\n')\n\ndef main():\n    n = int(input())\n    a = linput()\n    ans = deque()\n    ans.append(a[0])\n    for i in range(1, n):\n        if a[i] < ans[0]:\n            ans.appendleft(a[i])\n        else:\n            ans.append(a[i])\n    lprint(*ans)\nfor _ in ' ' * int(input()):\n    main()\nprint(output.getvalue())", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    sss = input()\n    p = list(map(int, sss.split(' ')))\n    rez = [p[0]] * n\n    left = 1\n    right = 0\n    for pi in p[1:]:\n        if pi < rez[right]:\n            right -= 1\n            rez[right] = pi\n        else:\n            rez[left] = pi\n            left += 1\n    a = rez[left:]\n    b = rez[:left]\n    rrr = a + b\n    print(' '.join(map(str, rrr)))", "from collections import *\nt = int(input())\nfor aslkdjlaskj in range(t):\n    n = int(input())\n    ipt = [int(i) for i in input().split()]\n    dq = deque()\n    dq.append(ipt[0])\n    for i in range(1, n):\n        if ipt[i] <= dq[0]:\n            dq.appendleft(ipt[i])\n        else:\n            dq.append(ipt[i])\n    print(' '.join([str(i) for i in dq]))", "from collections import deque\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = deque([])\n    d.append(a[0])\n    for i in range(1, n):\n        if a[i] <= d[0]:\n            d.appendleft(a[i])\n        else:\n            d.append(a[i])\n    print(' '.join([str(i) for i in d]))\nt = int(input())\nwhile t > 0:\n    t -= 1\n    main()", "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    d = deque()\n    for i in range(n):\n        if i == 0:\n            d.append(p[i])\n        elif p[i] < d[0]:\n            d.appendleft(p[i])\n        else:\n            d.append(p[i])\n    sys.stdout.write(' '.join(map(str, d)) + '\\n')", "import sys\nfrom collections import deque\n\ndef rall():\n    return sys.stdin.readlines()\n\ndef rl():\n    return sys.stdin.readline().strip()\n\ndef rl_types(types):\n    str_list = [x for x in sys.stdin.readline().strip().split(' ')]\n    return [types[i](str_list[i]) for i in range(len(str_list))]\n\ndef pr(something=''):\n    sys.stdout.write(str(something) + '\\n')\n\ndef pra(array):\n    sys.stdout.write(' '.join([str(x) for x in array]) + '\\n')\n\ndef solve(array):\n    return array\nNT = int(rl())\nfor ti in range(NT):\n    rl()\n    array = list(map(int, rl().split(' ')))\n    result = deque([array[0]])\n    for v in array[1:]:\n        if v < result[0]:\n            result.appendleft(v)\n        else:\n            result.append(v)\n    pra(list(result))", "t = int(input())\nfrom collections import deque\nfor xd in range(t):\n    n = int(input())\n    perm = [int(i) for i in input().split(' ')]\n    d = deque()\n    d.append(perm[0])\n    for i in perm[1:]:\n        if i < d[0]:\n            d.appendleft(i)\n        else:\n            d.append(i)\n    print(' '.join([str(i) for i in d]))", "from collections import deque\nx = int(input())\nfor i in range(x):\n    y = int(input())\n    z = input().split(' ')\n    z = list(map(int, z))\n    res = deque()\n    res.append(z[0])\n    for j in range(1, len(z)):\n        if z[j] <= res[0]:\n            res.appendleft(z[j])\n        else:\n            res.append(z[j])\n    print(' '.join((str(obj) for obj in res)))", "from collections import deque\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    perm = list(map(int, input().split()))\n    res = deque([perm[0]])\n    for i in range(1, n):\n        if perm[i] <= res[0]:\n            res.appendleft(perm[i])\n        else:\n            res.append(perm[i])\n    print(' '.join(map(str, res)))", "from collections import deque\n_ = int(input())\nfor __ in range(_):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    h = deque([arr[0]])\n    if len(arr) == 1:\n        print(arr[0])\n        continue\n    for x in range(1, len(arr)):\n        if arr[x] <= h[0]:\n            h.appendleft(arr[x])\n        else:\n            h.append(arr[x])\n    l = list(h)\n    print(' '.join([str(x) for x in l]))", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    de = deque()\n    for i in p:\n        if len(de) == 0:\n            de.append(i)\n        elif i < de[0]:\n            de.appendleft(i)\n        else:\n            de.append(i)\n    print(' '.join(map(str, de)))", "from collections import deque\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    ans = deque()\n    ans.append(p[0])\n    for j in range(1, n):\n        if p[j] < ans[0]:\n            ans.appendleft(p[j])\n        else:\n            ans.append(p[j])\n    print(' '.join((str(j) for j in ans)))", "for x in range(int(input())):\n    input()\n    li = list(map(int, input().split()))\n    l1 = []\n    l2 = [li[0]]\n    for i in range(1, len(li)):\n        if li[i] < l2[-1]:\n            l2.append(li[i])\n        else:\n            l1.append(li[i])\n    l2.reverse()\n    l0 = l2 + l1\n    l0 = list(map(str, l0))\n    print(' '.join(l0))", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    queue = deque()\n    queue.append(arr[0])\n    for i in range(1, n):\n        if arr[i] < queue[0]:\n            queue.appendleft(arr[i])\n        else:\n            queue.append(arr[i])\n    ans = ' '.join((str(i) for i in queue))\n    print(ans)", "t = int(input())\nfor tc in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    tail = [p[0]]\n    head = [p[0]]\n    for i in range(1, n):\n        if p[i] < head[len(head) - 1]:\n            head.append(p[i])\n        else:\n            tail.append(p[i])\n    hsize = len(head)\n    ans = []\n    for i in range(hsize - 1, 0, -1):\n        ans.append(head[i])\n    for x in tail:\n        ans.append(x)\n    print(' '.join(map(str, ans)))", "from collections import deque\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = [int(i) for i in input().split()]\n    res = deque()\n    for i in range(len(nums)):\n        if len(res) == 0:\n            res.append(nums[i])\n        elif nums[i] <= res[0]:\n            res.appendleft(nums[i])\n        else:\n            res.append(nums[i])\n    print(' '.join([str(i) for i in res]))", "from collections import deque\nn = int(input())\nfor i in range(n):\n    l = int(input())\n    a = list(map(int, input().split()))\n    ans = deque([str(a[0])])\n    for j in range(1, l):\n        if a[j] <= int(ans[0]):\n            ans.appendleft(str(a[j]))\n        else:\n            ans.append(str(a[j]))\n    print(' '.join(ans))", "from collections import *\nt = int(input())\nfor aslkdjlaskj in range(t):\n    n = int(input())\n    ipt = [int(i) for i in input().split()]\n    dq = deque()\n    dq.append(ipt[0])\n    for i in range(1, n):\n        if ipt[i] < dq[0]:\n            dq.appendleft(ipt[i])\n        else:\n            dq.append(ipt[i])\n    print(' '.join([str(i) for i in dq]))", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr = deque(arr)\n    ans = deque()\n    while arr:\n        if not ans or (ans and int(ans[0]) < arr[0]):\n            ans.append(str(arr.popleft()))\n        else:\n            ans.appendleft(str(arr.popleft()))\n    print(' '.join(ans))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    (*p,) = map(int, input().split())\n    b = [0] * n\n    bi = -1\n    bv = int(1000000000.0)\n    for i in range(n):\n        if p[i] < bv:\n            bv = p[i]\n            bi = i\n        b[i] = bi\n    c = []\n    i = n - 1\n    while i >= 0:\n        c.append(b[i])\n        i = b[i] - 1\n    c.reverse()\n    j = 0\n    d = []\n    e = []\n    for i in range(n):\n        if j < len(c) and i == c[j]:\n            d.append(str(p[i]))\n            j += 1\n        else:\n            e.append(str(p[i]))\n    d.reverse()\n    print(' '.join(d + e))\nfor i in range(int(input())):\n    solve()", "from collections import deque\n\ndef solve(x):\n    st = deque()\n    for elem in x:\n        if st and st[0] > elem:\n            st.appendleft(elem)\n        else:\n            st.append(elem)\n    return st\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t > 0:\n    t -= 1\n    (n,) = R()\n    x = list(R())\n    print(*solve(x), sep=' ')", "from collections import Counter, deque\nfrom itertools import accumulate, product, groupby\nimport operator\nimport math\nfrom functools import reduce\n\ndef solve():\n    n = int(input())\n    arr = [int(char) for char in input().split()]\n    q = deque([arr[0]])\n    arr.pop(0)\n    for a in arr:\n        if a <= q[0]:\n            q.appendleft(a)\n        else:\n            q.append(a)\n    return list(q)\nfor _ in range(int(input())):\n    print(*solve())", "import sys\ninput = sys.stdin.readline\nimport collections\nfor _ in range(int(input())):\n    n = int(input())\n    p = [int(i) for i in input().split()]\n    if n == 1:\n        print('1')\n        continue\n    front = collections.deque()\n    back = collections.deque()\n    cur_min = 1\n    seen = [False] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        seen[p[i]] = True\n        if p[i] != cur_min:\n            back.append(p[i])\n        else:\n            front.append(p[i])\n            while cur_min <= n and seen[cur_min]:\n                cur_min += 1\n    while back:\n        front.append(back.pop())\n    print(' '.join(map(str, front)))", "from sys import stdin\nfrom collections import deque\n\ndef func(arr):\n    d = deque()\n    for z in t:\n        if not d or z < d[0]:\n            d.appendleft(z)\n        else:\n            d.append(z)\n    return d\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    t = list(map(int, stdin.readline().split()))\n    print(*func(t))", "from collections import deque\nt = int(input())\nfor _ in range(t):\n\n    def solve():\n        n = int(input())\n        lst = list(map(int, input().split()))\n        q = deque()\n        q.append(lst[0])\n        for num in lst[1:]:\n            if num < q[0]:\n                q.appendleft(num)\n            else:\n                q.append(num)\n        print(*q)\n    solve()", "from collections import deque\nt = int(input())\nfor i in range(t):\n    size = int(input().rstrip())\n    numbers = input().rstrip().split(' ')\n    result = deque([numbers[0]])\n    final_result = ''\n    for number in numbers[1:]:\n        if int(number) > int(result[0]):\n            result.append(number)\n        else:\n            result.appendleft(number)\n    for j in result:\n        final_result += f'{j} '\n    print(f'{final_result}')", "from collections import *\n\ndef solve():\n    n = int(input())\n    ll = list(map(int, input().split()))\n    ans = deque()\n    ans.append(ll[0])\n    ll.pop(0)\n    for i in ll:\n        if ans[-1] > i and ans[0] > i:\n            ans.appendleft(i)\n        else:\n            ans.append(i)\n    return ans\nt = int(input())\nwhile t != 0:\n    res = solve()\n    print(*res)\n    t -= 1", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    ans = deque()\n    for i in lis:\n        if ans and ans[0] > i:\n            ans.appendleft(i)\n        else:\n            ans.append(i)\n    print(*ans)", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    ans = deque()\n    for i in lis:\n        if ans and ans[0] > i:\n            ans.appendleft(i)\n        else:\n            ans.append(i)\n    print(*ans)", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    ans = deque()\n    for i in lis:\n        if ans and ans[0] > i:\n            ans.appendleft(i)\n        else:\n            ans.append(i)\n    print(*ans)", "from _collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = deque()\n    b.append(a[0])\n    for i in a[1:]:\n        if i <= b[0]:\n            b.appendleft(i)\n        else:\n            b.append(i)\n    print(*b)", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    ans = deque()\n    for i in lis:\n        if ans and ans[0] > i:\n            ans.appendleft(i)\n        else:\n            ans.append(i)\n    print(*ans)", "from collections import deque\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    d = deque([p[0]])\n    for w in p[1:]:\n        if w < d[0]:\n            d.appendleft(w)\n        else:\n            d.append(w)\n    print(*d)", "import collections\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    deque = collections.deque([])\n    deque.append(arr[0])\n    del arr[0]\n    for i in arr:\n        if i < deque[0]:\n            deque.appendleft(i)\n        else:\n            deque.append(i)\n    print(*deque, sep=' ')\nfor i in range(int(input())):\n    solve()", "from collections import deque\nfor t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    queue = deque([arr[0]])\n    for i in arr[1:]:\n        if i > queue[0]:\n            queue.append(i)\n        else:\n            queue.appendleft(i)\n    print(*queue)", "from collections import Counter, deque\nmod = 998244353\n\ndef solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = deque()\n    curmin = 2000000\n    curmax = -1\n    for i in l:\n        if i < curmin:\n            curmin = i\n            d.appendleft(i)\n        else:\n            d.append(i)\n    print(*d)\nt = int(input())\nfor _ in range(t):\n    solve()", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    final = deque()\n    final.append(lis[0])\n    for ele in lis[1:]:\n        if final[0] > ele:\n            final.appendleft(ele)\n        else:\n            final.append(ele)\n    print(*final)", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    ans = deque()\n    for i in lis:\n        if ans and ans[0] > i:\n            ans.appendleft(i)\n        else:\n            ans.append(i)\n    print(*ans)", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    ans = deque()\n    for i in lis:\n        if ans and ans[0] > i:\n            ans.appendleft(i)\n        else:\n            ans.append(i)\n    print(*ans)", "from collections import deque\n\ndef cf_744E(numbers):\n    nums = deque()\n    nums.append(numbers[0])\n    for num in numbers[1:]:\n        if num > nums[0]:\n            nums.append(num)\n        else:\n            nums.appendleft(num)\n    return list(nums)\nfor _ in range(int(input())):\n    input()\n    print(*cf_744E(list(map(int, input().split()))))", "from collections import deque\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    ans = deque()\n    for i in s:\n        if ans and i > ans[0]:\n            ans.append(i)\n        else:\n            ans.appendleft(i)\n    print(*ans)", "from collections import deque\nt = int(input())\nfor i in range(t):\n    _ = int(input())\n    array = [int(el) for el in input().split()]\n    answer = deque([])\n    answer.append(array[0])\n    for item in array[1:]:\n        if item > answer[0]:\n            answer.append(item)\n        else:\n            answer.appendleft(item)\n    print(*answer, sep=' ')", "from collections import deque\nfor t in range(int(input())):\n    n = input()\n    a = list(map(int, input().split()))\n    q = deque()\n    ans = []\n    for c in a:\n        if not q:\n            q.append(c)\n        elif q[0] > c:\n            q.appendleft(c)\n        else:\n            q.append(c)\n    ans = list(q)\n    print(*ans)", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    ans = deque()\n    for i in lis:\n        if ans and ans[0] > i:\n            ans.appendleft(i)\n        else:\n            ans.append(i)\n    print(*ans)", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    ans = deque()\n    for i in lis:\n        if ans and ans[0] > i:\n            ans.appendleft(i)\n        else:\n            ans.append(i)\n    print(*ans)", "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    d = deque()\n    for i in w:\n        if d and d[0] > i:\n            d.appendleft(i)\n        else:\n            d.append(i)\n    print(*d)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    l = [p[0]]\n    r = []\n    for w in p[1:]:\n        if w < l[-1]:\n            l.append(w)\n        else:\n            r.append(w)\n    print(*l[::-1] + r)", "import sys\nimport collections as cc\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\nfor tc in range(int(input())):\n    (n,) = I()\n    ar = I()\n    temp = cc.deque()\n    for i in ar:\n        if not temp:\n            temp.append(i)\n        elif i < temp[0]:\n            temp.appendleft(i)\n        else:\n            temp.append(i)\n    print(*temp)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = []\n    me = []\n    for i in arr:\n        if s == [] and me == []:\n            me.append(i)\n        elif s == []:\n            if i < me[0]:\n                s.append(i)\n            else:\n                me.append(i)\n        elif i < s[-1]:\n            s.append(i)\n        else:\n            me.append(i)\n    print(*s[::-1] + me)", "from collections import deque\n\ndef get_lexicographically_smallest_arr(arr):\n    min_deque = deque()\n    for number in arr:\n        if len(min_deque) == 0:\n            min_deque.append(number)\n            continue\n        if number < min_deque[0]:\n            min_deque.appendleft(number)\n        else:\n            min_deque.append(number)\n    return min_deque\n\ndef process_tests(test_count):\n    for i in range(test_count):\n        arr_len = int(input())\n        arr = list(map(int, input().split()))\n        print(*get_lexicographically_smallest_arr(arr), sep=' ')\ntest_count = int(input())\nprocess_tests(test_count)", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    q = deque([a[0]])\n    for i in a[1:]:\n        if i < q[0]:\n            q.appendleft(i)\n        else:\n            q.append(i)\n    print(*q)", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = deque()\n    for i in range(n):\n        if not b or a[i] < b[0]:\n            b.appendleft(a[i])\n        else:\n            b.append(a[i])\n    print(*b)", "from collections import *\nfor _ in range(int(input())):\n    n = int(input())\n    data = list(map(int, input().split()))\n    ans = deque([data[0]])\n    for i in range(1, n):\n        if data[i] <= ans[0]:\n            ans.insert(0, data[i])\n        else:\n            ans.append(data[i])\n    print(*ans)", "import collections\nfor _ in range(int(input())):\n    input()\n    p = list(map(int, input().split()))\n    s = collections.deque()\n    for x in p:\n        if s and x < s[0]:\n            s.appendleft(x)\n        else:\n            s.append(x)\n    print(*s)", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    ans = deque()\n    for i in lis:\n        if ans and ans[0] > i:\n            ans.appendleft(i)\n        else:\n            ans.append(i)\n    print(*ans)", "def solve(n, lst):\n    (last, rev) = ([], [])\n    if n == 1 or lst[0] == 1:\n        print(*lst)\n        return\n    rev.append(lst[0])\n    el = 1\n    for i in range(1, n):\n        if lst[i] > rev[el - 1]:\n            last.append(lst[i])\n            continue\n        rev.append(lst[i])\n        el += 1\n    rev = rev[::-1]\n    print(*rev + last)\nfor _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    solve(n, lst)", "from collections import deque\nfor t in range(int(input())):\n    N = int(input())\n    ar = list(map(int, input().split()))\n    D = deque()\n    cm = None\n    for i in ar:\n        if not cm:\n            D.append(i)\n            cm = i\n        elif i < cm:\n            D.appendleft(i)\n            cm = i\n        else:\n            D.append(i)\n    print(*list(D))", "import sys\nimport os\nfrom math import ceil, floor, sqrt, gcd, factorial, log, log2\nfrom io import BytesIO, IOBase\nfrom collections import Counter, deque\nfrom itertools import permutations, combinations\nfrom bisect import bisect\nfrom functools import reduce\ninf = int(10000000000.0)\nBUFSIZE = 8192\ninp = lambda : int(input())\nmp = lambda : map(int, input().split())\nlst = lambda : list(map(int, input().split()))\n\ndef main():\n    for _ in range(inp()):\n        n = inp()\n        p = lst()\n        l = deque()\n        l.append(p[0])\n        for i in range(1, n):\n            if p[i] < l[0]:\n                l.appendleft(p[i])\n            else:\n                l.append(p[i])\n        print(*l)\nmain()", "from collections import deque\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    values = list(map(int, input().split()))\n    q = deque([values[0]])\n    ans = 0\n    for d in values[1:]:\n        if d <= q[0]:\n            q.appendleft(d)\n        elif d >= q[-1]:\n            q.append(d)\n        else:\n            q.append(d)\n    print(*q)", "from collections import deque, defaultdict, Counter\ncases = int(input())\nfor _ in range(cases):\n    num = int(input())\n    arr = list(map(int, input().split()))\n    ans = deque()\n    beg = arr[0]\n    for n in arr:\n        if n <= beg:\n            ans.appendleft(n)\n            beg = n\n        else:\n            ans.append(n)\n    print(*list(ans))", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = deque()\n    l1.append(l[0])\n    for i in range(1, n):\n        if l[i] >= l1[0]:\n            l1.append(l[i])\n        else:\n            l1.appendleft(l[i])\n    print(*l1)", "from collections import deque\nt = int(input())\nfor i in range(t):\n    int(input())\n    p = list(map(int, input().split()))\n    d = deque()\n    d.append(p[0])\n    for i in p[1:]:\n        if d[0] > i:\n            d.appendleft(i)\n        else:\n            d.append(i)\n    print(*d)", "from collections import deque\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    dq = deque()\n    l = list(map(int, input().split()))\n    dq.append(l[0])\n    for i in range(1, n):\n        if l[i] < dq[0]:\n            dq.appendleft(l[i])\n        else:\n            dq.append(l[i])\n    print(*dq)", "from collections import deque\ntest_case = int(input())\nfor i in range(test_case):\n    permutation_size = int(input())\n    elements = list(map(int, input().split()))\n    first_element = deque([elements[0]])\n    for j in elements[1:]:\n        if j <= first_element[0]:\n            first_element.appendleft(j)\n        elif j >= first_element[-1]:\n            first_element.append(j)\n        else:\n            first_element.append(j)\n    print(*first_element)", "from collections import deque\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    arr = deque([l[0]])\n    val = l[0]\n    for i in range(1, n):\n        if l[i] < val:\n            arr.appendleft(l[i])\n            val = l[i]\n        else:\n            arr.append(l[i])\n    print(*arr)", "from collections import deque\n\ndef arrange(arr, n):\n    d = deque()\n    for i in range(n):\n        if not d or arr[i] < d[0]:\n            d.appendleft(arr[i])\n        else:\n            d.append(arr[i])\n    return d\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*arrange(a, n))", "from _collections import deque\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = deque()\n    for i in a:\n        if l and l[0] > i:\n            l.appendleft(i)\n        else:\n            l.append(i)\n    print(*l)", "import collections\nnum_test_cases = int(input())\nfor i in range(num_test_cases):\n    permutation_size = int(input())\n    elements = list(map(int, input().split()))\n    deque = collections.deque([])\n    deque.append(elements[0])\n    del elements[0]\n    for a in elements:\n        if a < deque[0]:\n            deque.insert(0, a)\n        else:\n            deque.append(a)\n    print(*deque, sep=' ')", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    l = deque([a[0]])\n    for i in range(1, n):\n        if a[i] < l[0]:\n            l.appendleft(a[i])\n        else:\n            l.append(a[i])\n    print(*l)", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = deque([arr[0]])\n    for i in range(1, len(arr)):\n        if arr[i] > d[0]:\n            d.append(arr[i])\n        else:\n            d.appendleft(arr[i])\n    print(*d)", "for _ in range(int(input())):\n    n = int(input())\n    a = [0] * (n * 2)\n    (b, e) = (n, n)\n    for x in map(int, input().split()):\n        if b < e and x < a[b]:\n            b -= 1\n            a[b] = x\n        else:\n            a[e] = x\n            e += 1\n    print(*a[b:e])", "from collections import deque\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = deque([l[0]])\n    for i in range(1, n):\n        if l[i] <= ans[0]:\n            ans.appendleft(l[i])\n        else:\n            ans.append(l[i])\n    print(*ans)", "def solve():\n    n = int(input())\n    v = [int(x) for x in input().split()]\n    (le, ri) = ([], [])\n    for el in v:\n        if len(le) == 0 or el < le[-1]:\n            le.append(el)\n        else:\n            ri.append(el)\n    print(*le[::-1], *ri)\nfor _ in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    d = []\n    e = [w[0]]\n    for i in range(1, n):\n        if w[i] > e[-1]:\n            d.append(w[i])\n        else:\n            e.append(w[i])\n    print(*e[::-1] + d)", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    T = deque([l[0]])\n    for i in range(1, n):\n        if l[i] < T[0]:\n            T.appendleft(l[i])\n        else:\n            T.append(l[i])\n    print(*T)", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = deque([])\n    B.append(A[0])\n    for i in range(1, n):\n        if A[i] < B[0]:\n            B.appendleft(A[i])\n        else:\n            B.append(A[i])\n    print(*B)", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = deque([])\n    b.append(a[0])\n    for i in range(1, n):\n        if a[i] < b[0]:\n            b.appendleft(a[i])\n        else:\n            b.append(a[i])\n    print(*b)", "from collections import deque\nfor _ in range(int(input())):\n    x = int(input())\n    z = deque()\n    for i in list(map(int, input().split())):\n        if z and z[0] > i:\n            z.appendleft(i)\n        else:\n            z.append(i)\n    print(*z)", "import sys\nfrom collections import deque\n\ndef input():\n    return sys.stdin.readline().rstrip()\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    s = deque([lst[0]])\n    min_v = lst[0]\n    for num in lst[1:]:\n        if num < min_v:\n            min_v = num\n            s.appendleft(num)\n        else:\n            s.append(num)\n    print(*s, sep=' ')", "import collections\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = 10 ** 9\n    a = list(map(int, input().split()))\n    de = collections.deque([])\n    for i in range(n):\n        if c > a[i]:\n            de.appendleft(a[i])\n            c = a[i]\n        else:\n            de.append(a[i])\n    print(*de)", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = deque()\n    l.append(a[0])\n    for i in range(1, n):\n        if a[i] < l[0]:\n            l.appendleft(a[i])\n        else:\n            l.append(a[i])\n    print(*l)", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = deque()\n    d.append(arr[0])\n    for i in range(1, n):\n        if d[0] < arr[i]:\n            d.append(arr[i])\n        else:\n            d.appendleft(arr[i])\n    print(*d)", "from collections import deque\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    res = deque()\n    res.append(l[0])\n    for j in range(1, n):\n        if l[j] < res[0]:\n            res.appendleft(l[j])\n        else:\n            res.append(l[j])\n    print(*res, sep=' ')"]