["t = int(input())\nfor _ in range(t):\n    x = int(input())\n    if x == 1:\n        print(3)\n    else:\n        y = x & -x\n        if y == x:\n            print(x + 1)\n        else:\n            print(y)", "t = int(input())\nfor _ in range(t):\n    x = int(input())\n    if x == 1:\n        print(3)\n    else:\n        y = x & -x\n        if y == x:\n            print(x + 1)\n        else:\n            print(y)", "def main():\n    x = int(input())\n    if x == 1:\n        return 3\n    b = bin(x)\n    b = b[::-1]\n    for i in range(len(b)):\n        if b[i] == '1':\n            break\n    f = pow(2, i)\n    if f == x:\n        return x + 1\n    return f\nfor _ in range(int(input())):\n    print(main())", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    answer = 0\n    for i in range(31):\n        if n & 1 << i != 0:\n            answer = 1 << i\n            break\n    for i in range(31):\n        if answer & n > 0 and answer ^ n > 0:\n            break\n        else:\n            answer = answer | 1 << i\n    print(answer)", "import sys\n\ndef solve_A(number):\n    number_orig = number\n    result = 1\n    while number % 2 == 0:\n        number = number // 2\n        result *= 2\n    if result ^ number_orig == 0:\n        return 3 if result == 1 else result + 1\n    else:\n        return result\n\ndef task_A():\n    result = []\n    count = next(sys.stdin)\n    count = int(count.strip())\n    for _ in range(count):\n        number = next(sys.stdin)\n        number = int(number.strip())\n        result.append(solve_A(number))\n    for r in result:\n        print(r)\ntask_A()", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    st = bin(n)\n    st = '0' + st[2:]\n    st = st[::-1]\n    i1 = st.find('1')\n    i0 = st.find('0')\n    if st.count('1') == 1:\n        y = 2 ** i1 + 2 ** i0\n    else:\n        y = 2 ** i1\n    print(y)", "import math\n\ndef solve():\n    n = int(input())\n    if n == 1:\n        print('3')\n        return\n    if bin(n).count('1') > 1:\n        print(1 << int(math.log2(n & -n)))\n        return\n    print(n + 1)\n    return\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "for fix in range(int(input())):\n    f = int(input())\n    if f == 1 or f == 2:\n        print(3)\n    elif f % 2 == 1:\n        print(1)\n    elif f & f - 1 == 0:\n        print(f + 1)\n    else:\n        u = 0\n        while True:\n            if f & 1 << u > 0:\n                print(1 << u)\n                break\n            u += 1", "tcs = int(input())\nfor tc in range(tcs):\n    n = int(input())\n    x = list(bin(n)[2:])\n    co = x.count('1')\n    if n < 3:\n        print(3)\n    elif co == 1:\n        print(n + 1)\n    else:\n        for i in range(1, n + 1):\n            if x[-i] == '1':\n                print(pow(2, i - 1))\n                break", "t = int(input())\nfor i in range(t):\n    x = int(input())\n    y = 1 + (x ^ x - 1) >> 1\n    if x & y > 0 and x ^ y > 0:\n        print(y)\n    else:\n        j = 2\n        p = 0\n        while True:\n            num = j ** p + y\n            if x & num > 0 and x ^ num > 0:\n                print(num)\n                break\n            else:\n                p += 1", "t = int(input())\nwhile t > 0:\n    a = int(input())\n    if a % 2 == 0:\n        if not a & a - 1:\n            print(a + 1)\n        else:\n            print(a & ~(a - 1))\n    elif a > 1:\n        print(1)\n    else:\n        print(3)\n    t -= 1", "n = int(input())\nl = []\nfor i in range(n):\n    t = int(input())\n    l.append(t)\nfor i in l:\n    if i == 1:\n        print(3)\n    elif i % 2 != 0:\n        print(1)\n    else:\n        j = int(i)\n        s = 0\n        while j % 2 == 0:\n            s += 1\n            j = j // 2\n        if j == 1:\n            print(i + 1)\n        else:\n            print(2 ** s)", "from math import pow\n\ndef solve():\n    n = int(input())\n    if n % 2 == 1:\n        if n == 1:\n            print(3)\n        else:\n            print(1)\n        return\n    b = bin(n)[2:]\n    if b.count('1') == 1:\n        print(n + 1)\n        return\n    index = 0\n    for i in range(len(b)):\n        if b[i] == '1':\n            index = i\n    index = len(b) - 1 - index\n    z = int(pow(2, index))\n    print(z)\n    return\nfor i in range(int(input())):\n    solve()", "for i in range(int(input())):\n    x = int(input())\n    y = x & -x\n    while True:\n        if x & y > 0 and x ^ y > 0:\n            break\n        else:\n            y += 1\n    print(y)", "for x in [*map(int, open(0))][1:]:\n    b = x & -x\n    print(b | (b == x) + (x < 2))", "t = int(input())\nfor i in range(t):\n    x = int(input())\n    y = x & -x\n    while x == y or x & y == 0:\n        y += 1\n    print(y)", "t = int(input())\ns = set()\nfor i in range(32):\n    s.add(2 ** i)\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(3)\n    elif n in s:\n        print(n + 1)\n    else:\n        for i in range(32):\n            if 1 << i & n:\n                print(1 << i)\n                break", "t = int(input())\nfor i in range(t):\n    x = int(input())\n    y = 1\n    while x & y == 0:\n        y *= 2\n    while x ^ y == 0 or x & y == 0:\n        y += 1\n    print(y)", "for _ in range(int(input())):\n    n = int(input())\n    s = bin(n)[2:]\n    i = s[::-1].index('1')\n    j = len(s) - s.index('1') - 1\n    if i == j:\n        if i == 0:\n            ans = 3\n        else:\n            ans = 2 ** i + 1\n    else:\n        ans = 2 ** i\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    t = bin(n)[2:]\n    i = len(t) - 1\n    ans = ''\n    while i >= 0 and t[i] == '0':\n        ans += t[i]\n        i -= 1\n    ans = '1' + ans\n    if n == 1:\n        print(3)\n    elif i <= 0:\n        print(int(ans, 2) + 1)\n    else:\n        print(int(ans, 2))", "for s in [*open(0)][1:]:\n    n = int(s)\n    if n == 1:\n        print(3)\n        continue\n    a = 1\n    while a & n != a:\n        a <<= 1\n    print(a | (n == a))", "testcases = int(input())\nfor i in range(testcases):\n    n = int(input())\n    lowestBit = 0\n    for i in range(31):\n        if n & 1 << i > 0:\n            lowestBit = i\n            break\n    if n & n - 1 > 0:\n        print(1 << lowestBit)\n    else:\n        ans = 1 << lowestBit\n        if lowestBit == 0:\n            ans = ans | 1 << 1\n        else:\n            ans = ans | 1 << 0\n        print(ans)", "import io, os\n\ndef ri():\n    return int(input().strip())\n\ndef rl():\n    return list(map(int, input().strip().split()))\n\ndef Solve():\n    n = ri()\n    cnt = 0\n    tn = n\n    while tn:\n        cnt += tn & 1\n        tn >>= 1\n    if cnt == 1:\n        (x, y) = (0, 0)\n        while n >> x & 1 == 0:\n            x += 1\n        while n >> y & 1 == 1:\n            y += 1\n        print((1 << x) + (1 << y))\n    else:\n        x = 0\n        while n >> x & 1 == 0:\n            x += 1\n        print(1 << x)\nT = ri()\nwhile T:\n    T -= 1\n    Solve()", "for _ in range(int(input())):\n    n = int(input())\n    b = list(bin(n)[2:])\n    b.reverse()\n    if n < 3:\n        print(3)\n        continue\n    if b.count('1') == 1:\n        print(n + 1)\n        continue\n    print(2 ** b.index('1'))", "for x in [*map(int, open(0))][1:]:\n    b = x & -x\n    print(b | (b == x) + (x < 2))", "for _ in range(int(input())):\n    x = int(input())\n    ans = 0\n    c1 = c2 = False\n    for i in range(32):\n        if not c1 and x & 1 << i > 0:\n            ans += 1 << i\n            c1 = True\n    b = bin(x)[2:]\n    if b.count('1') == 1:\n        if 1 & ans > 0:\n            ans += 2\n        else:\n            ans += 1\n    print(ans)", "def read_nums():\n    return [int(x) for x in input().split()]\n\ndef solve():\n    (x,) = read_nums()\n    bin_x = bin(x)[2:].zfill(32)\n    last_set_bit = len(bin_x) - bin_x.rfind('1') - 1\n    last_zero = len(bin_x) - bin_x.rfind('0') - 1\n    y = 1 << last_set_bit\n    if x ^ y == 0:\n        y += 1 << last_zero\n    return y\n\ndef main():\n    (t,) = read_nums()\n    for _ in range(t):\n        print(solve())\nmain()", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(3)\n    elif n % 2 == 1:\n        print(1)\n    else:\n        x = int(math.log2(n))\n        if 2 ** x == n:\n            print(n + 1)\n        else:\n            while math.log2(n) % 1 != 0:\n                n -= 2 ** int(math.log2(n))\n            print(n)", "from sys import stdin\ninput = stdin.readline\n\ndef ii():\n    return int(input())\n\ndef li():\n    return list(map(int, input().split()))\nimport math\n\ndef Log2(x):\n    if x == 0:\n        return False\n    return math.log10(x) / math.log10(2)\n\ndef isPowerOfTwo(n):\n    return math.ceil(Log2(n)) == math.floor(Log2(n))\nfor _ in range(ii()):\n    n = ii()\n    if n == 1:\n        print(3)\n        continue\n    if isPowerOfTwo(n):\n        print(n + 1)\n        continue\n    if n % 2:\n        print(1)\n    else:\n        b = bin(n)[2:][::-1]\n        for i in range(len(b)):\n            if b[i] == '1':\n                pos = i\n                break\n        print(pow(2, pos))", "for _ in range(int(input())):\n    x = int(input())\n    p = str(bin(x))\n    p = p[::-1]\n    if p.count('1') == 1:\n        k = p.index('1')\n        if k == 0:\n            y = 2 ** k + 2 ** (k + 1)\n        else:\n            y = 1 + 2 ** k\n    else:\n        k = p.index('1')\n        y = 2 ** k\n    print(y)", "import sys\nsys.setrecursionlimit(10 ** 5)\n\ndef pro(n):\n    ans = 0\n    for i in range(32):\n        if n & 1 << i:\n            ans |= 1 << i\n            break\n    if ans ^ n > 0:\n        print(ans)\n        return\n    for i in range(32):\n        if n & 1 << i == 0:\n            ans |= 1 << i\n            break\n    print(ans)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    pro(n)", "def getOnes(num):\n    answer = 0\n    while num:\n        answer += num & 1\n        num >>= 1\n    return answer\n\ndef getRight(num):\n    answer = 1\n    while num & 1 == 0:\n        answer *= 2\n        num >>= 1\n    return answer\nt = int(input())\nwhile t > 0:\n    t -= 1\n    x = int(input())\n    if getOnes(x) == 1:\n        print(max(x + 1, 3))\n    else:\n        print(getRight(x))", "T = int(input())\nfor testcase in range(T):\n    x = int(input())\n    b = '0' + bin(x)[2:]\n    l = len(b)\n    rightmost1 = b.rfind('1')\n    rightmost0 = b.rfind('0')\n    n = 2 ** (l - rightmost1 - 1)\n    if n & x > 0 and n ^ x > 0:\n        print(n)\n    else:\n        n += 2 ** (l - rightmost0 - 1)\n        print(n)", "import sys\ninput = lambda : sys.stdin.readline().strip()\nfor Homu in range(int(input())):\n    x = int(input())\n    if x % 2 == 1:\n        if x ^ 1 > 0:\n            print(1)\n        else:\n            print(3)\n    else:\n        ans = 1\n        x_copy = x\n        while x_copy % 2 == 0:\n            ans *= 2\n            x_copy //= 2\n        if x ^ ans > 0:\n            print(ans)\n        else:\n            print(ans + 1)", "def solve(x):\n    if x == 1:\n        return 3\n    ans = 1\n    while x != 0:\n        val = x & 1\n        if val:\n            if x >> 1 == 0:\n                ans += 1\n            return ans\n        x >>= 1\n        ans <<= 1\nT = int(input())\nfor t in range(T):\n    x = int(input())\n    ans = solve(x)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    x = int(input())\n    if x == 1:\n        print(3)\n    elif x % 2 == 1:\n        print(1)\n    else:\n        temp = x\n        ans = 1\n        while temp:\n            curr = temp % 2\n            if curr == 1:\n                break\n            ans *= 2\n            temp = temp // 2\n        if ans == x:\n            print(ans + 1)\n        else:\n            print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(3)\n    else:\n        h = bin(n)[2:]\n        k = '0' * (len(h) - 1) + '1'\n        f = 0\n        for i in range(len(h)):\n            if h[i] == '1' and h[i] == k[i]:\n                f = 1\n                break\n        if f == 1:\n            print(1)\n        else:\n            idx = -1\n            for i in range(len(h) - 1, -1, -1):\n                if h[i] == '1':\n                    idx = i\n                    break\n            k = k[:i] + '1' + k[i + 1:len(k) - 1] + '0'\n            ans = int(k, 2)\n            if ans == n:\n                ans += 1\n            print(ans)", "t = int(input())\nfor i in range(t):\n    x = int(input())\n    copy = x\n    count = 0\n    while copy % 2 == 0:\n        count += 1\n        copy /= 2\n    if x == 1:\n        print(3)\n    elif x == 2:\n        print(3)\n    elif x ^ pow(2, count) > 0:\n        print(pow(2, count))\n    else:\n        print(pow(2, count) + 1)", "t = int(input())\nfor e in range(t):\n    n = int(input())\n    if n == 1:\n        print(3)\n    elif n & n - 1 == 0 and n != 0:\n        print(n + 1)\n    elif n % 2 == 0:\n        for i in range(32):\n            if n & 1 << i:\n                print(2 ** i)\n                break\n    else:\n        print(1)", "t = int(input())\nfor g in range(t):\n    n = int(input())\n    if n == 1:\n        print(3)\n    else:\n        st = bin(n)[2:]\n        ind = st.rfind('1')\n        if ind == 0:\n            print(n + 1)\n        else:\n            st1 = '1' + '0' * (len(st) - ind - 1)\n            res = int(st1, 2)\n            print(res)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    x = int(input())\n    bits = []\n    for i in range(31):\n        if x >> i & 1 == 1:\n            bits.append(i)\n    y = 1 << bits[0]\n    if len(bits) == 1:\n        for i in range(31):\n            if x >> i & 1 == 0:\n                y += 1 << i\n                break\n    print(y)", "for _ in range(int(input())):\n    x = int(input())\n    if x == 1:\n        print(3)\n        continue\n    sx = bin(x)[::-1]\n    i = sx.find('1')\n    ans = 2 ** i\n    print(ans if x > ans else ans + 1)", "t = int(input())\nans = list()\nfor i in range(0, t):\n    n = int(input())\n    arr = [int(x) for x in bin(n) if x != 'b']\n    ans_num = 0\n    for k in range(1, len(arr) + 1):\n        if arr[-k] == 1:\n            ans_num += pow(2, k - 1)\n            break\n    if ans_num != n:\n        ans.append(ans_num)\n    else:\n        for k in range(1, len(arr) + 1):\n            if arr[-k] == 0:\n                ans_num += pow(2, k - 1)\n                break\n        ans.append(ans_num)\nfor s in ans:\n    print(s)", "def solve():\n    n_decimal = int(input())\n    if n_decimal == 1:\n        return 3\n    counter = 0\n    while n_decimal % 2 == 0:\n        n_decimal = n_decimal / 2\n        counter += 1\n    if n_decimal == 1:\n        return 2 ** counter + 1\n    else:\n        return 2 ** counter\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        print(solve())\nmain()", "x = [2]\nfor i in range(2, 32):\n    x.append(pow(2, i))\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(3)\n    elif n in x:\n        print(n + 1)\n    else:\n        c = 0\n        while n % 2 == 0:\n            c += 1\n            n /= 2\n        print(pow(2, c))", "for _ in range(int(input())):\n    x = int(input())\n    L = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824]\n    if x in L:\n        if x == 1:\n            print(3)\n        else:\n            print(x + 1)\n        continue\n    s = bin(x)\n    s = s[2:]\n    pos = len(s) - s.rfind('1') - 1\n    print(2 ** pos)", "for _ in range(int(input())):\n    n = int(input())\n    s = bin(n).replace('0b', '')\n    ans = ''\n    for i in s[::-1]:\n        ans = i + ans\n        if i == '1':\n            break\n    if len(ans) == len(s):\n        if ans == '1':\n            ans = 3\n        else:\n            ans = int(ans, 2) + 1\n    else:\n        ans = int(ans, 2)\n    print(ans)", "import math\n\ndef solve():\n    n = int(input())\n    bit = int(math.log2(n & -n))\n    if n == 1:\n        print(3)\n    elif 2 ** bit == n:\n        print(n + 1)\n    else:\n        print(2 ** bit)\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1", "for i in range(int(input())):\n    n = int(input())\n    binary_form = '0' + bin(n)[2:]\n    count_ones = 0\n    and_done = 0\n    num = ''\n    for z in range(len(binary_form) - 1, -1, -1):\n        if binary_form[z] == '0' and and_done == 0:\n            num = '0' + num\n        if binary_form[z] == '1' and and_done == 0:\n            and_done = 1\n            num = '1' + num\n            count_ones += 1\n            continue\n        elif binary_form[z] == '1':\n            count_ones += 1\n    if count_ones > 1:\n        print(int(num, 2))\n    else:\n        ind = num.index('1')\n        if ind != len(num) - 1:\n            print(int(num, 2) + 1)\n        else:\n            print(3)", "def decimalToBinary(n):\n    return bin(n).replace('0b', '')\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(3)\n    else:\n        val = decimalToBinary(n)[::-1]\n        one = val.find('1')\n        ans = 2 ** one\n        if val.count('1') > 1:\n            print(ans)\n        else:\n            zero = val.find('0')\n            print(ans + 2 ** zero)", "def binary(num):\n    return int(bin(num).split('0b')[1])\nfor _ in range(int(input())):\n    x = int(input())\n    if x == 1:\n        print(3)\n    elif x % 2 == 1:\n        print(1)\n    else:\n        xb = str(binary(x))\n        xb = xb[::-1]\n        for i in range(len(xb)):\n            if i == len(xb) - 1:\n                print(2 ** i + 1)\n                break\n            elif xb[i] == '1':\n                print(2 ** i)\n                break", "import math\nimport sys\nfor _ in range(int(input())):\n    x = int(input())\n    if x == 1:\n        print(3)\n    elif x % 2 != 0:\n        print(1)\n    elif x & x - 1 == 0:\n        print(x + 1)\n    else:\n        i = 2\n        while True:\n            if x & i > 0 and x ^ i > 0:\n                print(i)\n                break\n            i *= 2", "for t in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(3)\n    elif n & n - 1 == 0:\n        print(n + 1)\n    elif n & 1:\n        print(1)\n    else:\n        print(n & ~(n - 1))", "for t in range(int(input())):\n    x = int(input())\n    if x == 1:\n        print(3)\n    else:\n        x = bin(x)[2:]\n        if x.count('1') > 1:\n            i = len(x) - 1\n            k = 0\n            while x[i] != '1':\n                i -= 1\n                k += 1\n            print(2 ** k)\n        else:\n            print(2 ** (len(x) - 1) + 1)", "import sys\nLI = lambda : list(map(int, sys.stdin.readline().split()))\nMI = lambda : map(int, sys.stdin.readline().split())\nSI = lambda : sys.stdin.readline().strip('\\n')\nII = lambda : int(sys.stdin.readline())\nt = II()\n\ndef decimalToBinary(n):\n    return '{0:b}'.format(int(n))\n\ndef binaryToDecimal(binary):\n    binary1 = binary\n    (decimal, i, n) = (0, 0, 0)\n    while binary != 0:\n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i)\n        binary = binary // 10\n        i += 1\n    return decimal\nfor _ in range(t):\n    x = II()\n    if x == 1:\n        print(3)\n    else:\n        s = decimalToBinary(x)\n        last = s.rindex('1')\n        if last == 0:\n            print(binaryToDecimal(int(s[:-1] + '1')))\n        else:\n            print(binaryToDecimal(int(s[last:])))", "n = int(input())\nans = []\nfor i in range(n):\n    x = int(input())\n    if x % 2 and x > 2:\n        ans.append(1)\n        continue\n    if x == 1:\n        ans.append(3)\n        continue\n    k = 1\n    while not x >> k & 1:\n        k += 1\n    if x > 1 << k + 1:\n        ans.append(1 << k)\n    else:\n        ans.append((1 << k) + 1)\nfor i in ans:\n    print(i)", "t = int(input())\nfor _ in range(0, t):\n    x = int(input())\n    if x % 2 == 1:\n        if x > 1:\n            print(1)\n        else:\n            print(3)\n    else:\n        bin1 = bin(x)[2:]\n        str = ''\n        flag = 0\n        flag2 = 0\n        for i in range(len(bin1) - 1, -1, -1):\n            if flag == 0 and bin1[i] == '1':\n                str = '1' + str\n                flag = 1\n            elif flag == 1 and bin1[i] == '1':\n                flag2 = 1\n                break\n            elif flag != 1 and bin1[i] == '0':\n                str += '0'\n        if flag2 == 1:\n            print(int(str, 2))\n        else:\n            print(int(str, 2) + 1)", "def solve():\n    n = int(input())\n    if n == 1:\n        print(3)\n        return\n    f1 = 0\n    nc = n\n    count = 0\n    while nc > 0:\n        if nc % 2 == 1:\n            break\n        count += 1\n        nc /= 2\n    ans = 2 ** count\n    if nc == 1:\n        print(ans + 1)\n    else:\n        print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "def solve():\n    n = int(input())\n    if n == 1:\n        return 3\n    val = n ^ n - 1\n    ans = val ^ val >> 1\n    if not n & n - 1:\n        ans += 1\n    return ans\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        ans = solve()\n        print(ans)\nmain()", "for _ in range(int(input())):\n    num = bin(int(input()))[2:]\n    if num == '1':\n        print(3)\n        continue\n    i = len(num) - 1\n    answer = []\n    one_flg = False\n    zero_flg = False\n    while i >= 0:\n        if num[i] == '1':\n            answer.append('1')\n            break\n        else:\n            answer.append('0')\n        i -= 1\n    answer.reverse()\n    if len(answer) == len(num):\n        print(int(''.join(answer), 2) + 1)\n    else:\n        print(int(''.join(answer), 2))", "for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(3)\n        continue\n    x = bin(n)[2:]\n    res = 0\n    for i in x[::-1]:\n        res += 1\n        if i == '1':\n            break\n    res = pow(2, res - 1)\n    if x.count('1') == 1:\n        res += 1\n    print(res)", "for _ in range(int(input())):\n    x = int(input())\n    if x == 1:\n        print(3)\n        continue\n    if x % 2:\n        print(1)\n        continue\n    i = 1\n    while i <= 30:\n        if x & 1 << i:\n            break\n        i += 1\n    ans = 2 ** i\n    if ans == x:\n        print(2 ** i + 1)\n    else:\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(3)\n    elif n & 1:\n        print(1)\n    elif n & n - 1 == 0:\n        print(n + 1)\n    else:\n        val = bin(n)[2:][::-1]\n        count = 0\n        for i in range(len(val)):\n            if val[i] == '1':\n                count = i\n                break\n        val = 2 ** count\n        print(val)", "for _ in range(int(input())):\n    y = int(input())\n    y = bin(y)[2:]\n    s = ''\n    (flag, flag1) = (0, 0)\n    e = -1\n    for i in range(len(y) - 1, -1, -1):\n        if flag == 0:\n            if y[i] == '0':\n                e = i\n                flag = 1\n        if y[i] == '0':\n            s = '0' + s\n        else:\n            if i > 0:\n                s = '1' + s\n            elif flag == 1:\n                flag1 = 1\n                s = '1' + s\n            else:\n                s = '11' + s\n            break\n    if flag1 == 1 and flag == 1:\n        s = s[:e] + '1' + s[e + 1:]\n    s = int(s, 2)\n    print(s)", "import sys\nifs = sys.stdin\nofs = sys.stdout\n\ndef solve(n):\n    b = bin(n)\n    b = b[2:]\n    pos1 = b.rfind('1')\n    min1 = b[pos1:]\n    if min1 == '1':\n        if len(b) > 1:\n            a = '1'\n        else:\n            a = '11'\n    elif '1' in b[:pos1]:\n        a = '1' + '0' * (len(b) - pos1 - 1)\n    else:\n        a = '1' + '0' * (len(b) - pos1 - 2) + '1'\n    return int(a, base=2)\nT = int(ifs.readline())\nfor __ in range(T):\n    n = int(ifs.readline())\n    a = solve(n)\n    ofs.write(str(a))\n    ofs.write('\\n')", "t = int(input())\nfor ii in range(t):\n    n = int(input())\n    if n == 1:\n        print(3)\n    elif n % 2 == 1:\n        print(1)\n    else:\n        x = 1\n        while n % 2 == 0:\n            n = n / 2\n            x = x * 2\n        if 1 == n:\n            print(x + 1)\n        else:\n            print(x)", "for _ in range(int(input())):\n    x = int(input())\n    if x == 1:\n        print(3)\n        continue\n    s = bin(x)[2:]\n    ct = 0\n    s = s.split('1')\n    n = s.__len__()\n    if s[-1]:\n        print(int('1' + s[-1], 2) + (1 if n == 2 else 0))\n    else:\n        print(1)", "nn = int(input())\nwhile nn != 0:\n    n = int(input())\n    s = bin(n)\n    if s.find('1') == s.rfind('1'):\n        print((~n & n + 1) + n)\n    else:\n        print(n & ~n + 1)\n    nn -= 1", "t = int(input())\nwhile t:\n    n = int(input())\n    s = bin(n)[2:]\n    s = s[::-1]\n    ind = s.index('1')\n    if n == 1:\n        print(3)\n    elif ind == 0:\n        print(1)\n    elif ind == len(s) - 1:\n        print(2 ** ind + 1)\n    else:\n        print(2 ** ind)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n % 2:\n        if n == 1:\n            print(3)\n        else:\n            print(1)\n    else:\n        a = bin(n)[2:]\n        if n & n - 1 == 0:\n            print(n + 1)\n        else:\n            ind = len(a) - 1\n            a = str(a)\n            for j in range(len(a)):\n                if a[j] == '1':\n                    ans = ind\n                ind -= 1\n            print(2 ** ans)", "def ctz(v):\n    return (v & -v).bit_length() - 1\n\ndef solve():\n    n = int(input())\n    if n == 1 or n == 2:\n        return 3\n    z = ctz(n)\n    b = bin(n)\n    ones = sum((1 for i in b if i == '1'))\n    if ones > 1:\n        return 2 ** z\n    return n + 1\n\ndef main():\n    for _ in range(int(input())):\n        print(solve())\n    return\nmain()", "for t in range(int(input())):\n    N = int(input())\n    if N == 1 or N == 2:\n        print(3)\n    elif not N & N - 1:\n        print(N + 1)\n    else:\n        c = 0\n        while N:\n            if N & 1:\n                break\n            c += 1\n            N >>= 1\n        print(2 ** c)", "for _ in range(int(input())):\n    x = int(input())\n    last = x & -x\n    if last == 1:\n        if x ^ last > 0:\n            print(1)\n        else:\n            print(3)\n    elif x ^ last > 0:\n        print(last)\n    else:\n        print(last | 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        if not n & n - 1:\n            print(n + 1)\n        else:\n            print(n & ~(n - 1))\n    elif n > 1:\n        print(1)\n    else:\n        print(3)", "import math\nt = int(input())\n\ndef decimalToBinary(n):\n    return bin(n).replace('0b', '')\ni = 1\nwhile i <= t:\n    n = int(input())\n    if n == 1 or n == 2:\n        print(3)\n    elif math.ceil(math.log2(n)) == math.log2(n):\n        print(n + 1)\n    else:\n        str = decimalToBinary(n)[::-1]\n        index = 0\n        while True:\n            if str[index] == '1':\n                print(int(math.pow(2, index)))\n                break\n            index = index + 1\n    i = i + 1", "from random import getrandbits\nRANDOM = getrandbits(32)\n\nclass Wrapper(int):\n\n    def __init__(self, x):\n        int.__init__(x)\n\n    def __hash__(self):\n        return super(Wrapper, self).__hash__() ^ RANDOM\nT = int(input())\nq = []\nfor i in range(T):\n    n = int(input())\n    q.append(n)\n\ndef solve(n):\n    bits = []\n    if n == 1:\n        print(3)\n        return\n    while n > 0:\n        bits.append(n % 2)\n        n //= 2\n    lenn = len(bits)\n    j = 0\n    while j < lenn and bits[j] != 1:\n        j += 1\n    ans = 2 ** j\n    if j == lenn - 1:\n        ans += 1\n    print(ans)\nfor n in q:\n    solve(n)", "for tc in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        if n & n - 1 == 0:\n            print(n + 1)\n        else:\n            print(n & ~(n - 1))\n    elif n > 1:\n        print('1')\n    else:\n        print('3')", "for i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(3)\n    elif n & n - 1 == 0:\n        print(n + 1)\n    else:\n        print(n - (n & n - 1))", "t = int(input())\nfor h in range(t):\n    x = int(input())\n    if x == 1:\n        print(3)\n        continue\n    k = 0\n    g = -1\n    l = -1\n    while x > 0:\n        l += 1\n        if x % 2 == 1 and g == -1:\n            g = l\n        if x % 2 == 1:\n            k += 1\n        x //= 2\n    if k > 1:\n        print(2 ** g)\n    else:\n        print(2 ** g + 1)", "t = int(input())\nimport math\nfor _ in range(t):\n    n = int(input())\n    a = 1\n    b = 0\n    if n % 2 == 0:\n        for i in range(1, int(math.log(n, 2)) + 1):\n            if n & 1 << i:\n                if i != int(math.log(n, 2)):\n                    print(1 << i)\n                else:\n                    print((1 << i) + 1)\n                break\n    elif n == 1:\n        print(3)\n    else:\n        print(1)", "num = int(input())\nwhile num:\n    n = int(input())\n    x = bin(n).replace('0b', '')\n    y = x.count('1')\n    if y == 1 and x == '1':\n        print('3')\n    elif y == 1 and x != '1':\n        print(n + 1)\n    elif y != 1:\n        x = x[::-1]\n        t = x.index('1')\n        res = '0' * t + '1' + '0' * (len(x) - (t + 1))\n        res = res[::-1]\n        print(int(res, 2))\n    num -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = bin(n)[2:]\n    if n & 1:\n        if n == 1:\n            print(3)\n        else:\n            print(1)\n    else:\n        S = s.rstrip('0')\n        if S == '1':\n            print(n + 1)\n        else:\n            x = len(s)\n            i = x - 1\n            while s[i] != '1':\n                i -= 1\n            p = x - 1 - i\n            print(2 ** p)", "for i in range(int(input())):\n    x = int(input())\n    if x == 1:\n        print(3)\n        continue\n    b_x = bin(x)[2:][::-1]\n    l = len(b_x)\n    for j in range(l):\n        if b_x[j] == '1':\n            if b_x == '0' * j + '1':\n                print(2 ** j + 1)\n            else:\n                print(2 ** j)\n            break", "n = int(input())\ndatas = []\nfor i in range(n):\n    l = int(input())\n    datas.append(l)\n\ndef solve(n):\n    if n == 1:\n        return 3\n    f = None\n    r = False\n    ss = str(bin(n))[2:][::-1]\n    for (i, l) in enumerate(ss):\n        if l == '0':\n            continue\n        if f is None:\n            f = i\n        elif r is False:\n            r = True\n    ret = 1\n    ret = ret << f\n    if not r:\n        ret += 1\n    return ret\nfor n in datas:\n    print(solve(n))", "for _ in range(int(input())):\n    n = int(input())\n    b = bin(n)[2:]\n    while 1:\n        break\n    if n == 1 or n == 2:\n        print(3)\n        continue\n    if b.count('0') == len(b) - 1:\n        print(n + 1)\n        while 1:\n            break\n    else:\n        c = 0\n        for i in range(len(b) - 1, -1, -1):\n            if b[i] == '1':\n                break\n            else:\n                c += 1\n        print(2 ** c)", "import math\n\ndef last_power(n):\n    l = []\n    while n > 1:\n        t = math.ceil(2 ** int(math.log(n, 2)))\n        n -= t\n        l.append(t)\n    return l\nt = int(input())\nfor _ in range(t):\n    x = int(input())\n    if x % 2 != 0:\n        if x == 1:\n            print(3)\n        else:\n            print(1)\n    else:\n        l = last_power(x)\n        if len(l) == 1:\n            print(x + 1)\n        else:\n            print(l[-1])", "def f(x):\n    for i in range(len(x) - 1, -1, -1):\n        if x[i] == '1':\n            return len(x) - i - 1\n    return -1\nN = int(input())\nfor i in range(N):\n    x = int(input())\n    y = bin(x)[2:]\n    m = f(y)\n    ans = ''\n    for i in range(int(m)):\n        ans = ans + '0'\n    ans = '1' + ans\n    if len(y) == len(ans):\n        ans = int(ans) + 1\n    else:\n        None\n    ans = str(ans)\n    if x == 1:\n        print(3)\n    else:\n        print(int(ans, 2))", "for _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        if not n & n - 1:\n            print(n + 1)\n        else:\n            print(n & ~(n - 1))\n    elif n > 1:\n        print(1)\n    else:\n        print(3)", "for i in range(int(input())):\n    f = int(input())\n    x = f\n    f = str(bin(f))\n    f = f[2:]\n    f = f[::-1]\n    if x == 1:\n        print('3')\n    elif 2 ** f.index('1') == x:\n        print(x + 1)\n    else:\n        print(min(2 ** f.index('1'), x + 1))", "for i in range(int(input())):\n    x = int(input())\n    pos1 = 0\n    while True:\n        if x & 1 == 1:\n            break\n        x = x >> 1\n        pos1 += 1\n    x = x >> 1\n    if x > 0:\n        print(1 << pos1)\n    elif pos1 == 0:\n        print(3)\n    else:\n        print((1 << pos1) + 1)", "import math\nfor T in range(int(input())):\n    a = int(input())\n    if a % 2 == 0:\n        x = a\n        if x and (not x & x - 1) != 0:\n            print(a + 1)\n        else:\n            n = a\n            print(2 ** (int(math.log2(n & -n) + 1) - 1))\n    elif a == 1:\n        print(3)\n    else:\n        print(1)", "for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(3)\n    else:\n        b = bin(n)[2:][::-1]\n        s = ''\n        for i in b:\n            if i == '0':\n                s += i\n            elif i == '1':\n                s = i + s\n                break\n        s = int(s, 2)\n        if s ^ n > 0:\n            print(s)\n        else:\n            print(s + 1)", "def isPowerOfTwo(n):\n    return n and (not n & n - 1)\nfor _ in range(int(input())):\n    x = int(input())\n    bn = bin(x)[2:]\n    l = len(bn)\n    lis = []\n    if isPowerOfTwo(x):\n        req_bn = '1' + '0' * (l - 2) + '1'\n    else:\n        for i in range(l - 1, -1, -1):\n            if bn[i] == '0':\n                lis.append('0')\n            else:\n                lis.append('1')\n                break\n        lis = lis[::-1]\n        req_bn = ''.join(lis)\n    print(int(req_bn, 2))", "import sys\ninput = sys.stdin.readline\n\ndef rightmost_bit(x, d):\n    c = 0\n    while x > 0:\n        if x % 2 == d:\n            return c\n        x = x // 2\n        c += 1\n    if d == 0:\n        return c\n\ndef main():\n    n_t = int(input())\n    for _ in range(n_t):\n        x = int(input())\n        rm1 = rightmost_bit(x, 1)\n        res = 1 << rm1\n        if res == x:\n            rm0 = rightmost_bit(x, 0)\n            res += 1 << rm0\n        print(res)\nmain()", "n = int(input())\nfor i in range(n):\n    x = int(input())\n    y = str(bin(x)[2:])\n    y = '0' + y\n    n0 = y.rfind('0')\n    n1 = y.rfind('1')\n    if n1 > n0:\n        if y == '01':\n            y = '1' + y[n1:]\n        else:\n            y = y[n1:]\n    elif y[:n1].rfind('1') > 0:\n        y = y[n1:]\n    else:\n        y = y[n1:n0] + '1' + y[n0 + 1:]\n    print(int(y, 2))", "n = int(input())\nfor i in range(n):\n    a = int(input())\n    if a == 1:\n        print(3)\n    elif a % 2 == 1:\n        print(1)\n    else:\n        a = str(bin(a))[2:]\n        x = len(a)\n        for j in range(x):\n            if a[-1 - j] == '1':\n                if j + 1 == len(a):\n                    a = '1' + str('0' * (x - 2)) + '1'\n                else:\n                    a = '1' + '0' * j\n                print(int(a, 2))\n                break", "for _ in range(int(input())):\n    x = int(input())\n    if x == 1:\n        print(3)\n    else:\n        b = bin(x)[2:]\n        c1 = b.count('1')\n        if c1 == 1:\n            if b[-1] == '1':\n                print(3)\n            elif b[0] == '1':\n                print(2 ** (len(b) - 1) + 1)\n            else:\n                count = -1\n                for i in range(len(b) - 1, -1, -1):\n                    count += 1\n                    if b[i] == '1':\n                        break\n                print(2 ** count)\n        elif b[-1] == '1':\n            print(1)\n        else:\n            count = -1\n            for i in range(len(b) - 1, -1, -1):\n                count += 1\n                if b[i] == '1':\n                    break\n            print(2 ** count)", "for ir in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(3)\n    elif n % 2 == 1:\n        print(1)\n    else:\n        k = 2\n        while n % k == 0:\n            k = k + k\n        if n == k // 2:\n            print(n + 1)\n        else:\n            print(k // 2)"]