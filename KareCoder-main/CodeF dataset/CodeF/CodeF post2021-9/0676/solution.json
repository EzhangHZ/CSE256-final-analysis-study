["def Bisect_Int(ok, ng, is_ok):\n    while abs(ok - ng) > 1:\n        mid = (ok + ng) // 2\n        if is_ok(mid):\n            ok = mid\n        else:\n            ng = mid\n    return ok\nfor t in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    def is_ok(n):\n        bit = (1 << n + 1) - 1\n        dp = bit\n        for a in A:\n            dp = dp << a | dp >> a\n            dp &= bit\n        return dp != 0\n    print(Bisect_Int(max(A) * 2 + 1, -1, is_ok))", "def Bisect_Int(ok, ng, is_ok):\n    while abs(ok - ng) > 1:\n        mid = (ok + ng) // 2\n        if is_ok(mid):\n            ok = mid\n        else:\n            ng = mid\n    return ok\nfor t in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    def is_ok(n):\n        bit = (1 << n + 1) - 1\n        dp = bit\n        for a in A:\n            dp = dp << a | dp >> a\n            dp &= bit\n        return dp != 0\n    print(Bisect_Int(max(A) * 2 + 1, -1, is_ok))", "def Bisect_Int(ok, ng, is_ok):\n    while abs(ok - ng) > 1:\n        mid = (ok + ng) // 2\n        if is_ok(mid):\n            ok = mid\n        else:\n            ng = mid\n    return ok\nfor t in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    def is_ok(n):\n        bit = (1 << n + 1) - 1\n        dp = bit\n        for a in A:\n            dp = dp << a | dp >> a\n            dp &= bit\n        return dp != 0\n    ans = Bisect_Int(max(A) * 2 + 1, -1, is_ok)\n    print(ans)", "def Bisect_Int(ok, ng, is_ok):\n    while abs(ok - ng) > 1:\n        mid = (ok + ng) // 2\n        if is_ok(mid):\n            ok = mid\n        else:\n            ng = mid\n    return ok\nfor t in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    def is_ok(n):\n        bit = (1 << n + 1) - 1\n        dp = bit\n        for a in A:\n            dp = dp << a | dp >> a\n            dp &= bit\n        return dp != 0\n    print(Bisect_Int(max(A) * 2 + 1, -1, is_ok))", "def Bisect_Int(ok, ng, is_ok):\n    while abs(ok - ng) > 1:\n        mid = (ok + ng) // 2\n        if is_ok(mid):\n            ok = mid\n        else:\n            ng = mid\n    return ok\nfor t in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    def is_ok(n):\n        bit = (1 << n + 1) - 1\n        dp = bit\n        for a in A:\n            dp = dp << a | dp >> a\n            dp &= bit\n        return dp != 0\n    print(Bisect_Int(max(A) * 2 + 1, -1, is_ok))", "import sys\nreadline = sys.stdin.readline\n\ndef Bisect_Int(ok, ng, is_ok):\n    while abs(ok - ng) > 1:\n        mid = (ok + ng) // 2\n        if is_ok(mid):\n            ok = mid\n        else:\n            ng = mid\n    return ok\nT = int(readline())\nfor t in range(T):\n    N = int(readline())\n    A = list(map(int, readline().split()))\n\n    def is_ok(n):\n        bit = (1 << n + 1) - 1\n        dp = bit\n        for a in A:\n            dp = dp << a | dp >> a\n            dp &= bit\n        return dp != 0\n    ans = Bisect_Int(max(A) * 2 + 1, -1, is_ok)\n    print(ans)", "import sys\nreadline = sys.stdin.readline\n\ndef Bisect_Int(ok, ng, is_ok):\n    while abs(ok - ng) > 1:\n        mid = (ok + ng) // 2\n        if is_ok(mid):\n            ok = mid\n        else:\n            ng = mid\n    return ok\nT = int(readline())\nfor t in range(T):\n    N = int(readline())\n    A = list(map(int, readline().split()))\n\n    def is_ok(n):\n        bit = (1 << n + 1) - 1\n        dp = bit\n        for a in A:\n            dp = dp << a | dp >> a\n            dp &= bit\n        return dp != 0\n    ans = Bisect_Int(max(A) * 2 + 1, -1, is_ok)\n    print(ans)", "import sys\nreadline = sys.stdin.readline\n\ndef Bisect_Int(ok, ng, is_ok):\n    while abs(ok - ng) > 1:\n        mid = (ok + ng) // 2\n        if is_ok(mid):\n            ok = mid\n        else:\n            ng = mid\n    return ok\nT = int(readline())\nfor t in range(T):\n    N = int(readline())\n    A = list(map(int, readline().split()))\n\n    def is_ok(n):\n        bit = (1 << n + 1) - 1\n        dp = bit\n        for a in A:\n            dp = dp << a | dp >> a\n            dp &= bit\n        return dp != 0\n    ans = Bisect_Int(max(A) * 2 + 1, -1, is_ok)\n    print(ans)", "def Bisect_Int(ok, ng, is_ok):\n    while abs(ok - ng) > 1:\n        mid = (ok + ng) // 2\n        if is_ok(mid):\n            ok = mid\n        else:\n            ng = mid\n    return ok\nfor t in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    def is_ok(n):\n        bit = (1 << n + 1) - 1\n        dp = bit\n        for a in A:\n            dp = dp << a | dp >> a\n            dp &= bit\n        return dp != 0\n    print(Bisect_Int(max(A) * 2 + 1, -1, is_ok))", "import sys\nreadline = sys.stdin.readline\n\ndef Bisect_Int(ok, ng, is_ok):\n    while abs(ok - ng) > 1:\n        mid = (ok + ng) // 2\n        if is_ok(mid):\n            ok = mid\n        else:\n            ng = mid\n    return ok\nT = int(readline())\nfor t in range(T):\n    N = int(readline())\n    A = list(map(int, readline().split()))\n\n    def is_ok(n):\n        bit = (1 << n + 1) - 1\n        dp = bit\n        for a in A:\n            dp = dp << a | dp >> a\n            dp &= bit\n        return dp != 0\n    ans = Bisect_Int(max(A) * 2 + 1, -1, is_ok)\n    print(ans)", "def Bisect_Int(ok, ng, is_ok):\n    while abs(ok - ng) > 1:\n        mid = (ok + ng) // 2\n        if is_ok(mid):\n            ok = mid\n        else:\n            ng = mid\n    return ok\nfor t in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    def is_ok(n):\n        bit = (1 << n + 1) - 1\n        dp = bit\n        for a in A:\n            dp = dp << a | dp >> a\n            dp &= bit\n        return dp != 0\n    print(Bisect_Int(max(A) * 2 + 1, -1, is_ok))", "def Bisect_Int(ok, ng, is_ok):\n    while abs(ok - ng) > 1:\n        mid = (ok + ng) // 2\n        if is_ok(mid):\n            ok = mid\n        else:\n            ng = mid\n    return ok\nfor t in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    def is_ok(n):\n        bit = (1 << n + 1) - 1\n        dp = bit\n        for a in A:\n            dp = dp << a | dp >> a\n            dp &= bit\n        return dp != 0\n    print(Bisect_Int(max(A) * 2 + 1, -1, is_ok))"]