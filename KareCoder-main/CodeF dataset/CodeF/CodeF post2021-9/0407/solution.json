["import collections\nimport sys\n\nclass Solver(collections.namedtuple('Solver', ('n', 'm', 'penalties', 'degrees', 'edges'))):\n\n    @classmethod\n    def read(cls, fin):\n        (n, m) = map(int, fin.readline().split())\n        penalties = [0]\n        penalties.extend(map(int, fin.readline().split()))\n        degrees = [0] * (n + 1)\n        edges = []\n        for i in range(m):\n            (u, v) = map(int, fin.readline().split())\n            degrees[u] += 1\n            degrees[v] += 1\n            edges.append((u, v))\n        return cls(n, m, penalties, degrees, edges)\n\n    def delete_one(self):\n        min_penalty = 100000\n        for (penalty, degree) in zip(self.penalties, self.degrees):\n            if degree % 2 == 1:\n                min_penalty = min(min_penalty, penalty)\n        return min_penalty\n\n    def delete_two(self):\n        min_penalty = 100000\n        for (u, v) in self.edges:\n            if (self.degrees[u] + self.degrees[v]) % 2 == 0:\n                min_penalty = min(min_penalty, self.penalties[u] + self.penalties[v])\n        return min_penalty\n\n    def solve(self):\n        if self.m % 2 == 0:\n            return 0\n        return min(self.delete_one(), self.delete_two())\n\ndef main():\n    if '--local-run' in sys.argv:\n        fin = open('input.txt', 'r')\n        fout = open('output.txt', 'w')\n    else:\n        fin = sys.stdin\n        fout = sys.stdout\n    num = int(fin.readline())\n    for i in range(num):\n        print(Solver.read(fin).solve(), file=fout)\nmain()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    minn = 100000\n    mina = 100000\n    b = list((0 for i in range(n)))\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        if a[x - 1] + a[y - 1] < mina:\n            mina = a[x - 1] + a[y - 1]\n        b[x - 1] += 1\n        b[y - 1] += 1\n    if m % 2 == 0:\n        print(0)\n    else:\n        for i in range(n):\n            if b[i] % 2 == 1:\n                if a[i] < minn:\n                    minn = a[i]\n        r = min(mina, minn)\n        if r == 100000:\n            print(sum(a))\n        else:\n            print(r)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    (*a,) = map(int, input().split())\n    c = []\n    nc = [0] * n\n    for _ in range(m):\n        (x, y) = map(int, input().split())\n        x -= 1\n        y -= 1\n        c += [(x, y)]\n        nc[x] += 1\n        nc[y] += 1\n    if m & 1:\n        o = []\n        for i in range(n):\n            if nc[i] & 1:\n                o += [a[i]]\n        for (x, y) in c:\n            if nc[x] & 1 | nc[y] & 1 == 0:\n                o += [a[x] + a[y]]\n    else:\n        o = [0]\n    print(min(o))", "import sys\nimport math\nfrom collections import defaultdict, Counter\nfrom itertools import permutations\nfrom collections import deque\nfrom decimal import Decimal\nfrom fractions import Fraction\nfrom heapq import heappush, heappop\nimport bisect\n\ndef sin():\n    return int(sys.stdin.readline())\n\ndef array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef two():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef multiple():\n    return [int(x) for x in sys.stdin.readline().split()]\n\ndef string():\n    return sys.stdin.readline().strip()\n\ndef sqrt(x):\n    (low, high) = (0, x)\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid <= x < (mid + 1) * (mid + 1):\n            return mid\n        elif x < mid * mid:\n            high = mid - 1\n        else:\n            low = mid + 1\nt = sin()\nfor _ in range(t):\n    (n, m) = multiple()\n    arr = array()\n    freq = [0] * (n + 1)\n    pairs = []\n    for _ in range(m):\n        (a, b) = multiple()\n        pairs.append((a, b))\n        freq[a] += 1\n        freq[b] += 1\n    if m % 2:\n        ans = sys.maxsize\n        for i in range(1, n + 1):\n            if freq[i] % 2:\n                ans = min(ans, arr[i - 1])\n        for (x, y) in pairs:\n            if freq[x] % 2 == 0 and freq[y] % 2 == 0:\n                ans = min(ans, arr[x - 1] + arr[y - 1])\n        print(ans)\n    else:\n        print(0)", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = (0, *R())\n    b = [R() for _ in [0] * m]\n    c = [0] + [0] * n\n    for (x, y) in b:\n        c[x] += 1\n        c[y] += 1\n    print(m % 2 and min([x for (x, y) in zip(a, c) if y % 2] + [a[x] + a[y] for (x, y) in b if c[x] | c[y] & 1 ^ 1]))", "def R():\n    return [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = (0, *R())\n    b = [R() for _ in [0] * m]\n    c = [0] + [0] * n\n    for (x, y) in b:\n        c[x] += 1\n        c[y] += 1\n    print(m % 2 and min([x for (x, y) in zip(a, c) if y % 2] + [a[x] + a[y] for (x, y) in b if ~c[x] & ~c[y] & 1]))", "def R():\n    return [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = (0, *R())\n    b = [R() for _ in [0] * m]\n    c = [0] + [0] * n\n    for (x, y) in b:\n        c[x] += 1\n        c[y] += 1\n    print(m % 2 and min([x for (x, y) in zip(a, c) if y % 2] + [a[x] + a[y] for (x, y) in b if ~c[x] & ~c[y] & 1]))", "def solve():\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    pair = []\n    frnd = {}\n    for _ in range(m):\n        (a, b) = map(int, input().split())\n        pair.append((a, b))\n        if a in frnd:\n            frnd[a] += 1\n        else:\n            frnd[a] = 1\n        if b in frnd:\n            frnd[b] += 1\n        else:\n            frnd[b] = 1\n    res = float('inf')\n    if m % 2:\n        for i in frnd:\n            if frnd[i] % 2 == 1:\n                res = min(res, arr[i - 1])\n        for i in pair:\n            (a, b) = i\n            if frnd[a] % 2 == 0 and frnd[b] % 2 == 0:\n                res = min(res, arr[a - 1] + arr[b - 1])\n    else:\n        res = 0\n    return res\nt = int(input())\nwhile t:\n    print(solve())\n    t -= 1", "import sys\ninput = sys.stdin.readline\nt = int(input())\nimport collections\nwhile t:\n    t -= 1\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    deg = [0] * n\n    l = []\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        l.append([x, y])\n        deg[x - 1] += 1\n        deg[y - 1] += 1\n    a1 = 1000000009\n    for i in range(n):\n        if deg[i] % 2 != 0:\n            a1 = min(a1, a[i])\n    for i in range(m):\n        if deg[l[i][0] - 1] % 2 == 0 and deg[l[i][1] - 1] % 2 == 0:\n            a1 = min(a1, a[l[i][0] - 1] + a[l[i][1] - 1])\n    if m % 2 == 0:\n        print(0)\n    else:\n        print(a1)", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = (0, *R())\n    b = [R() for _ in [0] * m]\n    c = [0] + [0] * n\n    for (x, y) in b:\n        c[x] += 1\n        c[y] += 1\n    print(m % 2 and min([x for (x, y) in zip(a, c) if y % 2] + [a[x] + a[y] for (x, y) in b if ~(c[x] + c[y]) & 1]))", "for i in range(int(input())):\n    (friends, pairs) = map(int, input().split())\n    sad_list = list(map(int, input().split()))\n    tract_list = [0] * friends\n    pair_value_list = []\n    array = []\n    for i in range(pairs):\n        (x, y) = map(int, input().split())\n        pair_value_list.append(sad_list[x - 1] + sad_list[y - 1])\n        tract_list[x - 1] += 1\n        tract_list[y - 1] += 1\n    if pairs % 2 != 0:\n        for i in range(friends):\n            if tract_list[i] % 2 != 0:\n                array.append(sad_list[i])\n        sorted_array = sorted(array)\n        sorted_pair_value_list = sorted(pair_value_list)\n        if len(array) > 0:\n            print(min(sorted_array[0], sorted_pair_value_list[0]))\n        else:\n            print(sorted_pair_value_list[0])\n    else:\n        print(0)", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = (0, *R())\n    b = [R() for _ in [0] * m]\n    c = [0] + [0] * n\n    for (x, y) in b:\n        c[x] += 1\n        c[y] += 1\n    print(m % 2 and min([x for (x, y) in zip(a, c) if y % 2] + [a[x] + a[y] for (x, y) in b if ~c[x] & ~c[y] & 1]))", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = (0, *R())\n    b = [R() for _ in [0] * m]\n    c = [0] + [0] * n\n    for (x, y) in b:\n        c[x] += 1\n        c[y] += 1\n    print(m % 2 and min([x for (x, y) in zip(a, c) if y % 2] + [a[x] + a[y] for (x, y) in b if ~c[x] & ~c[y] & 1]))", "def resi():\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    brParova = [0] * n\n    l = []\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        brParova[x - 1] += 1\n        brParova[y - 1] += 1\n        l.append([x - 1, y - 1])\n    if m % 2 == 0:\n        print(0)\n        return\n    min1 = 20001\n    for i in range(n):\n        if brParova[i] % 2 == 1 and min1 > a[i]:\n            min1 = a[i]\n    min2 = 20001\n    for tmp in l:\n        if brParova[tmp[0]] % 2 == 0 and brParova[tmp[1]] % 2 == 0 and (a[tmp[0]] + a[tmp[1]] < min2):\n            min2 = a[tmp[0]] + a[tmp[1]]\n    print(min(min1, min2))\nfor _ in range(int(input())):\n    resi()", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = (0, *R())\n    b = [R() for _ in [0] * m]\n    c = [0] + [0] * n\n    for (x, y) in b:\n        c[x] += 1\n        c[y] += 1\n    print(m % 2 and min([x for (x, y) in zip(a, c) if y % 2] + [a[x] + a[y] for (x, y) in b if ~c[x] & ~c[y] & 1]))", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = (0, *R())\n    b = [R() for _ in [0] * m]\n    c = [0] + [0] * n\n    for (x, y) in b:\n        c[x] += 1\n        c[y] += 1\n    print(m % 2 and min([x for (x, y) in zip(a, c) if y % 2] + [a[x] + a[y] for (x, y) in b if ~c[x] & ~c[y] & 1]))", "import sys\nfrom collections import defaultdict as dd\ninp = sys.stdin.readline\nfor _ in range(int(inp())):\n    (n, m) = map(int, inp().split())\n    a = list(map(int, inp().split()))\n    fre = dd(list)\n    ans = 100000\n    for __ in range(m):\n        (x, y) = map(int, inp().split())\n        fre[x].append(y)\n        fre[y].append(x)\n        ans = min(ans, a[x - 1] + a[y - 1])\n    if m % 2 == 0:\n        print(0)\n        continue\n    for i in range(1, n + 1):\n        if len(fre[i]) % 2 == 1:\n            ans = min(ans, a[i - 1])\n    print(ans)", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = (0, *R())\n    b = [R() for _ in [0] * m]\n    c = [0] + [0] * n\n    for (x, y) in b:\n        c[x] += 1\n        c[y] += 1\n    print(m % 2 and min([x for (x, y) in zip(a, c) if y % 2] + [a[x] + a[y] for (x, y) in b if ~c[x] & ~c[y] & 1]))", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = (0, *R())\n    b = [R() for _ in [0] * m]\n    c = [0] + [0] * n\n    for (x, y) in b:\n        c[x] += 1\n        c[y] += 1\n    print(m % 2 and min([x for (x, y) in zip(a, c) if y % 2] + [a[x] + a[y] for (x, y) in b if ~c[x] & ~c[y] & 1]))", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = (0, *R())\n    b = [R() for _ in [0] * m]\n    c = [0] + [0] * n\n    for (x, y) in b:\n        c[x] += 1\n        c[y] += 1\n    print(m % 2 and min([x for (x, y) in zip(a, c) if y % 2] + [a[x] + a[y] for (x, y) in b if ~c[x] & ~c[y] & 1]))", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = (0, *R())\n    b = [R() for _ in [0] * m]\n    c = [0] + [0] * n\n    for (x, y) in b:\n        c[x] += 1\n        c[y] += 1\n    print(m % 2 and min([x for (x, y) in zip(a, c) if y % 2] + [a[x] + a[y] for (x, y) in b if ~c[x] & ~c[y] & 1]))", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = (0, *R())\n    b = [R() for _ in [0] * m]\n    c = [0] + [0] * n\n    for (x, y) in b:\n        c[x] += 1\n        c[y] += 1\n    print(m % 2 and min([x for (x, y) in zip(a, c) if y % 2] + [a[x] + a[y] for (x, y) in b if c[x] | c[y] & 1 ^ 1]))", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = (0, *R())\n    b = [R() for _ in [0] * m]\n    c = [0] + [0] * n\n    for (x, y) in b:\n        c[x] += 1\n        c[y] += 1\n    print(m % 2 and min([x for (x, y) in zip(a, c) if y % 2] + [a[x] + a[y] for (x, y) in b if ~c[x] & ~c[y] & 1]))", "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nt = int(input())\nwhile t:\n    t -= 1\n    (n, m) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    ct = [0] * (n + 1)\n    l1 = []\n    for x in range(1, m + 1):\n        (a, b) = list(map(int, input().split()))\n        l1.append([a, b])\n        ct[a] += 1\n        ct[b] += 1\n    ans = 1000000001\n    if m % 2 == 0:\n        ans = 0\n    else:\n        for x in range(1, n + 1):\n            if ct[x] % 2 == 1:\n                ans = min(ans, l[x - 1])\n        for x in range(1, m + 1):\n            if ct[l1[x - 1][0]] % 2 == 0 and ct[l1[x - 1][1]] % 2 == 0:\n                ans = min(ans, l[l1[x - 1][0] - 1] + l[l1[x - 1][1] - 1])\n    sys.stdout.write(str(ans) + '\\n')", "case = int(input())\nfor i in range(case):\n    (n, m) = (int(v) for v in input().split())\n    uh = [int(v) for v in input().split()]\n    uhp = 200000\n    list1 = [0] * n\n    for pair in range(m):\n        (a, b) = (int(v) for v in input().split())\n        list1[a - 1] += 1\n        list1[b - 1] += 1\n        if uh[a - 1] + uh[b - 1] < uhp:\n            uhp = uh[a - 1] + uh[b - 1]\n    if m % 2 == 0:\n        print(0)\n    else:\n        evenl = 200000\n        evens = 100000\n        odd = 100000\n        for k in range(n):\n            if list1[k] % 2 == 1:\n                if uh[k] < odd:\n                    odd = uh[k]\n            else:\n                pass\n        print(min(odd, uhp))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    unhappiness = list(map(int, input().split()))\n    deg = [0 for i in range(n + 1)]\n    vts = []\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        deg[u] += 1\n        deg[v] += 1\n        vts.append((u, v))\n    if m % 2 == 0:\n        print(0)\n    else:\n        ans = 10 ** 20\n        for i in range(1, n + 1):\n            if deg[i] % 2 == 1:\n                ans = min(ans, unhappiness[i - 1])\n        for (u, v) in vts:\n            if deg[u] % 2 == 0 and deg[v] % 2 == 0:\n                ans = min(ans, unhappiness[u - 1] + unhappiness[v - 1])\n        print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    S = []\n    C = [0 for i in range(n + 1)]\n    for i in range(m):\n        (x, y) = list(map(int, input().split()))\n        S.append(A[x - 1] + A[y - 1])\n        C[x] += 1\n        C[y] += 1\n    if m % 2 == 0:\n        print(0)\n    else:\n        L = []\n        for i in range(1, n + 1):\n            if C[i] % 2:\n                L.append(A[i - 1])\n        L.sort()\n        S.sort()\n        if L:\n            print(min(L[0], S[0]))\n        else:\n            print(S[0])", "T = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    u = list(map(int, input().split()))\n    if m % 2 == 0:\n        for q in range(m):\n            input()\n        print(0)\n    elif m == 1:\n        (x, y) = map(int, input().split())\n        print(min(u[x - 1], u[y - 1]))\n    else:\n        vertice = [0] * n\n        ans = 100000.0\n        for q in range(m):\n            (a, b) = map(int, input().split())\n            vertice[a - 1] += 1\n            vertice[b - 1] += 1\n            ans = min(u[a - 1] + u[b - 1], ans)\n        other = 100000.0\n        for i in range(n):\n            if vertice[i] % 2 == 1:\n                other = min(other, u[i])\n            else:\n                continue\n        print(min(other, ans))", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [int(s) for s in input().split()]\n    d = [0] * n\n    w2 = sum(a)\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        d[x - 1] += 1\n        d[y - 1] += 1\n        w2 = min(w2, a[x - 1] + a[y - 1])\n    w1 = sum(a)\n    for i in range(n):\n        if d[i] % 2 == 1:\n            w1 = min(w1, a[i])\n    if m % 2 == 1:\n        print(min(w1, w2))\n    else:\n        print(0)", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = (0, *R())\n    b = [R() for _ in [0] * m]\n    c = [0] + [0] * n\n    for (x, y) in b:\n        c[x] += 1\n        c[y] += 1\n    print(m % 2 and min([x for (x, y) in zip(a, c) if y % 2] + [a[x] + a[y] for (x, y) in b if ~c[x] & ~c[y] & 1]))", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = (0, *R())\n    b = [R() for _ in [0] * m]\n    c = [0] + [0] * n\n    for (x, y) in b:\n        c[x] += 1\n        c[y] += 1\n    print(m % 2 and min([x for (x, y) in zip(a, c) if y % 2] + [a[x] + a[y] for (x, y) in b if c[x] | c[y] & 1 ^ 1]))", "t = int(input())\nfor i in range(t):\n    (n, m) = list(map(int, input().split()))\n    lst = list(map(int, input().split()))\n    mt = []\n    C = [0 for i in range(n + 1)]\n    for i in range(m):\n        (x, y) = list(map(int, input().split()))\n        mt.append(lst[x - 1] + lst[y - 1])\n        C[x] += 1\n        C[y] += 1\n    if m % 2 != 0:\n        arr = []\n        for i in range(1, n + 1):\n            if C[i] % 2:\n                arr.append(lst[i - 1])\n        z = sorted(arr)\n        mpt = sorted(mt)\n        if len(arr) > 0:\n            print(min(z[0], mpt[0]))\n        else:\n            print(mpt[0])\n    else:\n        print(0)", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    mp = {}\n    ans = pow(2, 31) - 1\n    for i in range(m):\n        (a, b) = [int(x) for x in input().split()]\n        if a in mp:\n            mp[a] += 1\n        else:\n            mp[a] = 1\n        if b in mp:\n            mp[b] += 1\n        else:\n            mp[b] = 1\n        ans = min(ans, arr[a - 1] + arr[b - 1])\n    if m % 2 == 0:\n        print(0)\n    else:\n        for i in range(1, n + 1):\n            if i in mp and mp[i] % 2 == 1:\n                ans = min(ans, arr[i - 1])\n        print(ans)", "def main():\n    t = int(input())\n    while t:\n        t -= 1\n        (n, m) = list(map(int, input().split()))\n        deg = [0 for _ in range(n + 1)]\n        x = []\n        y = []\n        sad = list(map(int, input().split()))\n        for i in range(m):\n            (a, b) = list(map(int, input().split()))\n            x.append(a)\n            y.append(b)\n            deg[x[-1]] += 1\n            deg[y[-1]] += 1\n        if m % 2 == 0:\n            print('0')\n        else:\n            min_v = sum(sad)\n            for i in range(n):\n                if deg[i + 1] % 2 == 1:\n                    min_v = min(sad[i], min_v)\n            for i in range(m):\n                if deg[x[i]] % 2 == 0 and deg[y[i]] % 2 == 0:\n                    min_v = min(sad[x[i] - 1] + sad[y[i] - 1], min_v)\n            print(min_v)\nmain()", "import math\nfrom collections import defaultdict\n\ndef resolve(n, unhappiness_array, friend_pair):\n    pair_num = len(friend_pair)\n    if pair_num % 2 == 0:\n        return 0\n    in_weight = defaultdict(int)\n    for item in friend_pair:\n        in_weight[item[0]] += 1\n        in_weight[item[1]] += 1\n    temp_palnty = float('inf')\n    for (index, value) in enumerate(unhappiness_array):\n        if in_weight[index + 1] % 2 == 1 and value < temp_palnty:\n            temp_palnty = value\n    for item in friend_pair:\n        temp_2 = unhappiness_array[item[0] - 1] + unhappiness_array[item[1] - 1]\n        if in_weight[item[0]] % 2 == 0 and in_weight[item[1]] % 2 == 0 and (temp_2 < temp_palnty):\n            temp_palnty = temp_2\n    return temp_palnty\n\ndef read_input():\n    ints = input().split(' ')\n    n = int(ints[0])\n    m = int(ints[1])\n    unhappiness_array = []\n    second_line = input().split(' ')\n    for item in second_line:\n        unhappiness_array.append(int(item))\n    friend_pair = []\n    for index in range(m):\n        next_line = input().split(' ')\n        friend_pair.append((int(next_line[0]), int(next_line[1])))\n    return (n, unhappiness_array, friend_pair)\ncase_num = int(input())\nif not case_num == 0:\n    for index in range(case_num):\n        (n, unhappiness_array, friend_pair) = read_input()\n        res = resolve(n, unhappiness_array, friend_pair)\n        print(res)", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n, m) = R()\n    a = R()\n    e = [R() for _ in [0] * m]\n    r = [0] * n\n    b = (c, d) = [[], []]\n    for (x, y) in e:\n        r[x - 1] += 1\n        r[y - 1] += 1\n    for (x, y) in zip(a, r):\n        b[y % 2] += (x,)\n    print(m % 2 and min(d + [a[x - 1] + a[y - 1] for (x, y) in e if r[x - 1] % 2 == r[y - 1] % 2 == 0]))", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    S = []\n    C = [0 for i in range(n + 1)]\n    for i in range(m):\n        (x, y) = list(map(int, input().split()))\n        S.append(A[x - 1] + A[y - 1])\n        C[x] += 1\n        C[y] += 1\n    if m % 2 == 0:\n        print(0)\n    else:\n        L = []\n        for i in range(1, n + 1):\n            if C[i] % 2:\n                L.append(A[i - 1])\n        L.sort()\n        S.sort()\n        if L:\n            print(min(L[0], S[0]))\n        else:\n            print(S[0])", "from cmath import inf\nfor q in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    deg = [0 for i in range(n + 1)]\n    lis = []\n    for i in range(m):\n        (x, y) = [int(x) for x in input().split()]\n        lis.append([x, y])\n        deg[x] += 1\n        deg[y] += 1\n    if m % 2 == 0:\n        print(0)\n        continue\n    ans = inf\n    (e1, e2) = (inf, inf)\n    for i in range(1, n + 1):\n        if deg[i] % 2:\n            ans = min(ans, arr[i - 1])\n    for (x, y) in lis:\n        if deg[x] % 2 == 0 and deg[y] % 2 == 0:\n            ans = min(ans, arr[x - 1] + arr[y - 1])\n    print(ans)", "num_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()\nt = num_inp()\nfor _ in range(t):\n    (n, m) = sp_inp()\n    l = arr_inp()\n    pair = []\n    count = [0 for _ in range(n)]\n    for i in range(m):\n        (x, y) = sp_inp()\n        pair.append((x, y))\n        count[x - 1] += 1\n        count[y - 1] += 1\n    if m % 2 == 0:\n        print(0)\n    else:\n        ans = 2 * max(l)\n        for i in range(n):\n            if count[i] % 2 != 0:\n                ans = min(ans, l[i])\n        for i in pair:\n            if count[i[0] - 1] % 2 == 0 and count[i[1] - 1] % 2 == 0:\n                ans = min(ans, l[i[0] - 1] + l[i[1] - 1])\n        print(ans)", "t = int(input())\nfor tt in range(t):\n    (n, m) = map(int, input().split())\n    if m % 2 == 0:\n        input()\n        for mm in range(m):\n            input()\n        print(0)\n    else:\n        a = list(map(int, input().split()))\n        b = [0 for nn in range(n)]\n        mat = []\n        lofxy = []\n        for mm in range(m):\n            (x, y) = map(int, input().split())\n            lofxy.append((x, y))\n            b[x - 1] += 1\n            b[y - 1] += 1\n        ini = True\n        found = False\n        min0 = None\n        for nn in range(n):\n            if b[nn] % 2 != 0:\n                if ini:\n                    min0 = a[nn]\n                    ini = False\n                else:\n                    min0 = min(min0, a[nn])\n                found = True\n        minp = None\n        ini = True\n        for e in lofxy:\n            if ini and b[e[0] - 1] % 2 == 0 and (b[e[1] - 1] % 2 == 0):\n                minp = a[e[0] - 1] + a[e[1] - 1]\n                ini = False\n            elif b[e[0] - 1] % 2 == 0 and b[e[1] - 1] % 2 == 0:\n                minp = min(minp, a[e[0] - 1] + a[e[1] - 1])\n        if min0 == None:\n            print(minp)\n        elif minp == None:\n            print(min0)\n        else:\n            print(min(min0, minp))", "import math\n\ndef party(unhapp, friends, counter):\n    n = len(unhapp)\n    best = math.inf\n    for i in range(n):\n        if counter[i] % 2 == 1:\n            best = min(best, unhapp[i])\n    for (v, k) in friends:\n        if counter[v] % 2 == 0 and counter[k] % 2 == 0:\n            best = min(best, unhapp[v] + unhapp[k])\n    return best\ntests = int(input())\nfor _ in range(tests):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    edges = []\n    counter = [0 for _ in range(n)]\n    for _ in range(m):\n        (v, k) = [int(x) - 1 for x in input().split()]\n        counter[v] += 1\n        counter[k] += 1\n        edges.append((v, k))\n    print(party(a, edges, counter) if m % 2 == 1 else 0)", "from collections import Counter, defaultdict\nfrom bisect import bisect_left\nimport math\nn = int(input())\nans = []\nfor _ in range(n):\n    res = float('inf')\n    (m, k) = map(int, input().split())\n    mem = list(map(int, input().split()))\n    graph = [[] for _ in range(m)]\n    for _ in range(k):\n        (i, j) = map(int, input().split())\n        i -= 1\n        j -= 1\n        graph[i].append(j)\n        graph[j].append(i)\n        res = min(res, mem[i] + mem[j])\n    if k % 2 == 0:\n        ans.append(0)\n    else:\n        for i in range(m):\n            if len(graph[i]) % 2:\n                res = min(res, mem[i])\n        ans.append(res)\nfor a in ans:\n    print(a)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l1 = [0] * (n + 1)\n    l2 = []\n    ans = 10 ** 4 * 2 + 1\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        l1[x] += 1\n        l1[y] += 1\n        l2.append((x, y))\n    if m % 2 == 0:\n        print(0)\n    else:\n        for (j, i) in enumerate(l1):\n            if i % 2 == 1:\n                ans = min(ans, l[j - 1])\n        for i in l2:\n            if l1[i[0]] % 2 == 0 and l1[i[1]] % 2 == 0:\n                ans = min(ans, l[i[0] - 1] + l[i[1] - 1])\n        print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l1 = [0] * (n + 1)\n    l2 = []\n    ans = 10 ** 4 * 2 + 1\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        l1[x] += 1\n        l1[y] += 1\n        l2.append((x, y))\n    if m % 2 == 0:\n        print(0)\n    else:\n        for (j, i) in enumerate(l1):\n            if i % 2 == 1:\n                ans = min(ans, l[j - 1])\n        for i in l2:\n            if l1[i[0]] % 2 == 0 and l1[i[1]] % 2 == 0:\n                ans = min(ans, l[i[0] - 1] + l[i[1] - 1])\n        print(ans)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [int(s) for s in input().split()]\n    d = [0] * n\n    w2 = sum(a)\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        d[x - 1] += 1\n        d[y - 1] += 1\n        w2 = min(w2, a[x - 1] + a[y - 1])\n    w1 = sum(a)\n    for i in range(n):\n        if d[i] % 2 == 1:\n            w1 = min(w1, a[i])\n    if m % 2 == 1:\n        print(min(w1, w2))\n    else:\n        print(0)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    x = [0] * m\n    y = [0] * m\n    deg = [0] * n\n    for i in range(m):\n        (x[i], y[i]) = map(lambda x: int(x) - 1, input().split())\n        deg[x[i]] += 1\n        deg[y[i]] += 1\n    if m % 2 == 0:\n        print(0)\n        continue\n    ans = 1000000000\n    for i in range(n):\n        if deg[i] % 2 == 1:\n            ans = min(ans, a[i])\n    for i in range(m):\n        if deg[x[i]] % 2 == 0 and deg[y[i]] % 2 == 0:\n            ans = min(ans, a[x[i]] + a[y[i]])\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    unhappiness = list(map(int, input().split(' ')))\n    degree = [0] * n\n    pairs = []\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        a -= 1\n        b -= 1\n        degree[a] += 1\n        degree[b] += 1\n        pairs.append((a, b))\n    if not m % 2:\n        print(0)\n    else:\n        ans = float('inf')\n        for i in range(n):\n            if degree[i] % 2:\n                ans = min(ans, unhappiness[i])\n        for (a, b) in pairs:\n            if not degree[a] % 2 and (not degree[b] % 2):\n                ans = min(ans, unhappiness[a] + unhappiness[b])\n        print(ans)", "test = int(input())\nwhile test:\n    (n, m) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    ind = [0] * n\n    arr1 = [0] * m\n    arr2 = [0] * m\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        (arr1[i], arr2[i]) = (x, y)\n        ind[arr1[i] - 1] += 1\n        ind[arr2[i] - 1] += 1\n    if not m % 2:\n        print(0)\n    else:\n        ans = float('inf')\n        for i in range(n):\n            if ind[i] % 2:\n                ans = min(ans, a[i])\n        for i in range(m):\n            if ind[arr1[i] - 1] % 2 == 0 and ind[arr2[i] - 1] % 2 == 0:\n                ans = min(ans, a[arr1[i] - 1] + a[arr2[i] - 1])\n        print(ans)\n    test -= 1", "def solve():\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    d = {}\n    cnt = [0 for i in range(n)]\n    s = sum(arr)\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        cnt[a - 1] += 1\n        cnt[b - 1] += 1\n        d[a, b] = 1\n    if m % 2 == 0:\n        print(0)\n        return\n    ans = s\n    for x in d:\n        i = x[0]\n        j = x[1]\n        temp = cnt[i - 1] + cnt[j - 1]\n        if (i, j) in d:\n            temp -= 1\n        if (m - temp) % 2 == 0:\n            ans = min(ans, arr[i - 1] + arr[j - 1])\n    for i in range(n):\n        if (m - cnt[i - 1]) % 2 == 0:\n            ans = min(ans, arr[i - 1])\n    print(ans)\n    return\nfor i in range(int(input())):\n    solve()", "for i in range(int(input())):\n    (num_guest, num_pair) = input().split(' ')\n    happiness = [int(x) for x in input().split(' ')]\n    temp_list = happiness.copy()\n    temp_list.sort()\n    friends = []\n    weight = [0] * int(num_guest)\n    for j in range(int(num_pair)):\n        friend = [int(x) for x in input().split(' ')]\n        friends.append(friend)\n        weight[friend[0] - 1] += 1\n        weight[friend[1] - 1] += 1\n    if int(num_pair) % 2 == 0:\n        print(0)\n    else:\n        min_happiness_1 = 1000000000\n        min_happiness_2 = 1000000000\n        int2 = 0\n        while int2 < len(happiness):\n            if weight[int2] % 2 != 0 and happiness[int2] < min_happiness_1:\n                min_happiness_1 = happiness[int2]\n            int2 += 1\n        for elems in friends:\n            if weight[elems[0] - 1] % 2 == 0 and weight[elems[1] - 1] % 2 == 0 and (happiness[elems[0] - 1] + happiness[elems[1] - 1] < min_happiness_2):\n                min_happiness_2 = happiness[elems[0] - 1] + happiness[elems[1] - 1]\n        print(min(min_happiness_1, min_happiness_2))", "from collections import Counter\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [*map(int, input().split())]\n    tm = []\n    r = []\n    cost = []\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        tm.extend([a - 1, b - 1])\n        r.append((a - 1, b - 1))\n    if m % 2:\n        tm = Counter(tm)\n        for i in r:\n            if tm[i[0]] % 2 == 1:\n                cost.append(l[i[0]])\n            if tm[i[1]] % 2 == 1:\n                cost.append(l[i[1]])\n            if tm[i[0]] % 2 == 0 and tm[i[1]] % 2 == 0:\n                cost.append(l[i[0]] + l[i[1]])\n        print(min(cost))\n    else:\n        print(0)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    lis = list(map(int, input().split()))\n    arr = []\n    adj = [[] for i in range(n + 1)]\n    cadj = [0 for i in range(n)]\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n        cadj[a - 1] += 1\n        cadj[b - 1] += 1\n        arr.append(sum([lis[a - 1], lis[b - 1]]))\n    for i in range(len(cadj)):\n        if cadj[i] % 2 == 1:\n            arr.append(lis[i])\n    if m % 2:\n        print(min(arr))\n    else:\n        print(0)", "from collections import defaultdict\n\ndef solve(A, B):\n    if len(B) % 2 == 0:\n        return 0\n    count = defaultdict(int)\n    for pair in B:\n        count[pair[0]] += 1\n        count[pair[1]] += 1\n    idx = -1\n    minV = float('inf')\n    for (i, v) in enumerate(A):\n        id = i + 1\n        if count[id] % 2 == 1 and v < minV:\n            minV = v\n            idx = i\n    for pair in B:\n        v = A[pair[0] - 1] + A[pair[1] - 1]\n        if count[pair[0]] % 2 == 0 and count[pair[1]] % 2 == 0 and (v < minV):\n            minV = v\n    return minV\n\ndef readB(m):\n    ans = []\n    for _ in range(m):\n        s = input().split(' ')\n        ans.append([int(s[0]), int(s[1])])\n    return ans\n\ndef readA():\n    s = input()\n    return [int(x) for x in s.split(' ')]\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        s = input().split(' ')\n        a = int(s[0])\n        b = int(s[1])\n        A = readA()\n        B = readB(b)\n        print(solve(A, B))\n        pass\n    pass\nmain()", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m) = [int(x) for x in input().split(' ')]\n    weights = [int(x) for x in input().split(' ')]\n    degree = dict()\n    edges = []\n    for i in range(m):\n        (a, b) = [int(x) for x in input().split(' ')]\n        edges.append([a, b])\n        degree[a] = degree.get(a, 0) + 1\n        degree[b] = degree.get(b, 0) + 1\n    if m % 2 == 0:\n        print(0)\n        continue\n    odd_degree = [weights[x - 1] for x in range(1, n + 1) if degree.get(x, 0) % 2 == 1]\n    if odd_degree:\n        odd_degree_min = min(odd_degree)\n    else:\n        odd_degree_min = float('inf')\n    pair_min = min([weights[x - 1] + weights[y - 1] for (x, y) in edges])\n    print(min(pair_min, odd_degree_min))", "import math\nfrom collections import Counter\nfrom collections import defaultdict\nimport sys\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef solve(ques, arr, s):\n    if len(ques) % 2 == 0:\n        return 0\n    dd = Counter(s)\n    d = {}\n    for i in range(len(arr)):\n        d[i + 1] = arr[i]\n    minn = float('inf')\n    for (n1, n2) in ques:\n        if dd[n1] % 2 != 0:\n            minn = min(minn, d[n1])\n        if dd[n2] % 2 != 0:\n            minn = min(minn, d[n2])\n    for (n1, n2) in ques:\n        if dd[n1] % 2 == 0 and dd[n2] % 2 == 0:\n            minn = min(minn, d[n1] + d[n2])\n    return minn\nt = int(input())\nfor _ in range(t):\n    (n, m) = get_ints()\n    arr = get_ints()\n    ques = []\n    s = []\n    for i in range(m):\n        (a, b) = get_ints()\n        s.append(a)\n        s.append(b)\n        ques.append((a, b))\n    print(solve(ques, arr, s))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    seq = tuple((int(i) for i in input().split()))\n    ind_friends = {}\n    friends = set()\n    cnt_odd = 10 ** 5\n    for _ in range(m):\n        (x, y) = map(int, input().split())\n        x -= 1\n        y -= 1\n        friends.add((x, y))\n        ind_friends[x] = ind_friends.get(x, 0) + 1\n        ind_friends[y] = ind_friends.get(y, 0) + 1\n    if m % 2:\n        for i in ind_friends:\n            if ind_friends[i] % 2:\n                if seq[i] < cnt_odd:\n                    cnt_odd = seq[i]\n        for i in sorted(friends, key=lambda x: seq[x[0]] + seq[x[1]]):\n            if seq[i[0]] + seq[i[1]] > cnt_odd:\n                print(cnt_odd)\n                break\n            elif (ind_friends[i[0]] + ind_friends[i[1]]) % 2 == 0:\n                if ind_friends[i[0]] % 2:\n                    print(seq[i[0]])\n                    break\n                elif ind_friends[i[1]] % 2:\n                    print(seq[i[1]])\n                    break\n                else:\n                    print(seq[i[0]] + seq[i[1]])\n                    break\n        else:\n            print(sum(seq))\n    else:\n        print(0)", "from collections import defaultdict\nT = int(input())\nwhile T:\n    T -= 1\n    (n, m) = map(int, input().split())\n    unhappy = list(map(int, input().split()))\n    dic = defaultdict(list)\n    if m % 2 == 0:\n        for _ in range(m):\n            (a, b) = map(int, input().split())\n        print(0)\n        continue\n    arr = float('inf')\n    dic = defaultdict(int)\n    for _ in range(m):\n        (a, b) = map(int, input().split())\n        dic[a - 1] += 1\n        dic[b - 1] += 1\n        x = unhappy[a - 1] + unhappy[b - 1]\n        arr = min(x, arr)\n    for i in range(0, n):\n        if dic[i] % 2 == 1:\n            arr = min(arr, unhappy[i])\n    print(arr)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    friends = []\n    degrees = defaultdict(int)\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        friends.append((x, y))\n        degrees[x] += 1\n        degrees[y] += 1\n    ans = 10 ** 5\n    if len(friends) % 2 == 0:\n        print(0)\n    else:\n        for (x, y) in friends:\n            if degrees[x] % 2 == 1:\n                ans = min(ans, a[x - 1])\n            if degrees[y] % 2 == 1:\n                ans = min(ans, a[y - 1])\n            if degrees[x] % 2 == 0 and degrees[y] % 2 == 0:\n                ans = min(ans, a[x - 1] + a[y - 1])\n        print(ans)", "t = int(input())\nfor j in range(t):\n    inn = input().split(' ')\n    (n, m) = (int(inn[0]), int(inn[1]))\n    (deg, pairs) = ([0] * (n + 1), [])\n    a = [int(x) for x in input().split(' ')]\n    a.insert(0, 0)\n    for i in range(m):\n        inn = input().split(' ')\n        (x, y) = (int(inn[0]), int(inn[1]))\n        deg[x] += 1\n        deg[y] += 1\n        pairs.append([x, y])\n    if m % 2 == 0:\n        print(0)\n        continue\n    result = 1 * 10 ** 10\n    for pair in pairs:\n        if deg[pair[0]] % 2 == 1:\n            result = min(result, a[pair[0]])\n        if deg[pair[1]] % 2 == 1:\n            result = min(result, a[pair[1]])\n        if deg[pair[0]] % 2 == 0 and deg[pair[1]] % 2 == 0:\n            result = min(result, a[pair[0]] + a[pair[1]])\n    print(result)\n    t -= 1", "from math import inf\n\ndef solve(n, a, friendships):\n    adj = [[] for _ in range(n)]\n    for (src, dest) in friendships:\n        adj[src - 1].append(dest - 1)\n        adj[dest - 1].append(src - 1)\n    if len(friendships) % 2 == 0:\n        return 0\n    minimum_unhappiness = inf\n    for person in range(n):\n        if len(adj[person]) % 2 == 1:\n            minimum_unhappiness = min(minimum_unhappiness, a[person])\n    for (src, dst) in friendships:\n        if len(adj[src - 1]) % 2 == 0 and len(adj[dst - 1]) % 2 == 0:\n            minimum_unhappiness = min(minimum_unhappiness, a[src - 1] + a[dst - 1])\n    return minimum_unhappiness\nt = int(input())\nfor _ in range(t):\n    (n, m) = [int(component) for component in input().split(' ')]\n    a = [int(component) for component in input().split(' ')]\n    friendships = []\n    for row in range(m):\n        friendships.append([int(component) for component in input().split(' ')])\n    print(solve(n, a, friendships))", "ans = ''\nfor _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    res = float('inf')\n    degree = [0] * n\n    edges = []\n    for i in range(m):\n        (x, y) = list(map(int, input().split()))\n        edges.append([x - 1, y - 1])\n        degree[x - 1] += 1\n        degree[y - 1] += 1\n    if m % 2 == 0 or n == 1:\n        ans += '0\\n'\n        continue\n    for i in range(n):\n        if degree[i] % 2 == 1:\n            res = min(res, arr[i])\n    for (i, j) in edges:\n        if degree[i] % 2 == 0 and degree[j] % 2 == 0:\n            res = min(res, arr[i] + arr[j])\n    ans += str(res) + '\\n'\nprint(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mn = float('inf')\n    lst = []\n    for q in range(m):\n        (l, r) = map(int, input().split())\n        mn = min(a[l - 1] + a[r - 1], mn)\n        lst.append(l)\n        lst.append(r)\n    d = Counter(lst)\n    if m % 2 == 0:\n        print(0)\n    else:\n        for j in d:\n            if d[j] % 2 == 1:\n                mn = min(a[j - 1], mn)\n        print(mn)", "import collections\nx = int(input())\nfor jj in range(x):\n    (n, m) = [int(i) for i in input().split(' ')]\n    arr = [int(i) for i in input().split(' ')]\n    if m == 0:\n        print(0)\n        continue\n    dic = {}\n    for i in range(m):\n        (x, y) = [int(ii) for ii in input().split(' ')]\n        if x not in dic:\n            dic[x] = [y]\n        else:\n            dic[x].append(y)\n        if y not in dic:\n            dic[y] = [x]\n        else:\n            dic[y].append(x)\n    if m % 2 == 0:\n        print(0)\n        continue\n    p = sorted(dic.keys(), key=lambda o: arr[o - 1])\n    ans = sum(arr)\n    tk = -1\n    for i in range(len(p)):\n        if len(dic[p[i]]) % 2 == 1:\n            tk = i\n            ans = arr[p[i] - 1]\n            break\n    if ans == 0:\n        print(0)\n        continue\n    if 0 <= tk < 2:\n        print(ans)\n        continue\n    else:\n        for i in range(len(p)):\n            if arr[p[i] - 1] <= ans // 2:\n                dic[p[i]].sort(key=lambda o: arr[o - 1])\n                ans = min(ans, arr[p[i] - 1] + arr[dic[p[i]][0] - 1])\n            else:\n                break\n        print(ans)\n        continue", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    frs = [0] * n\n    minf = [10 ** 5] * n\n    for _ in range(m):\n        (a, b) = map(int, input().split())\n        frs[a - 1] += 1\n        frs[b - 1] += 1\n        minf[a - 1] = min(minf[a - 1], arr[b - 1])\n        minf[b - 1] = min(minf[b - 1], arr[a - 1])\n    if m % 2 == 0:\n        print(0)\n    else:\n        mn = 10 ** 5\n        for i in range(n):\n            if frs[i] % 2 and arr[i] < mn:\n                mn = arr[i]\n        for i in range(n):\n            if frs[i] and arr[i] + minf[i] < mn:\n                mn = arr[i] + minf[i]\n        print(mn)", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    freq = {}\n    edges = []\n    for _ in range(m):\n        (n1, n2) = map(int, input().split())\n        edges.append([n1, n2])\n        if n1 not in freq:\n            freq[n1] = 0\n        if n2 not in freq:\n            freq[n2] = 0\n        freq[n1] = freq[n1] + 1\n        freq[n2] = freq[n2] + 1\n    odds = []\n    for i in freq:\n        if freq[i] % 2 == 1:\n            odds.append(i)\n    if m % 2 == 0:\n        print(0)\n    else:\n        ans = float('inf')\n        for i in odds:\n            ans = min(ans, a[i - 1])\n        for (n1, n2) in edges:\n            if freq[n1] % 2 == 0 and freq[n2] % 2 == 0:\n                ans = min(ans, a[n1 - 1] + a[n2 - 1])\n        print(ans)\n    t = t - 1", "from collections import Counter, defaultdict\nimport math\n\ndef solve():\n    (n, m) = list(map(int, input().split()))\n    vis = [False] * n\n    unh = list(map(int, input().split()))\n    graph = defaultdict(list)\n    for _ in range(m):\n        (u, v) = list(map(int, input().split()))\n        graph[u].append(v)\n        graph[v].append(u)\n    if m % 2 == 0:\n        print(0)\n        return\n    odd = math.inf\n    even = set()\n    for i in graph:\n        if len(graph[i]) % 2:\n            odd = min(odd, unh[i - 1])\n        else:\n            even.add(i)\n    ev = math.inf\n    for i in even:\n        for j in graph[i]:\n            if j in even:\n                ev = min(ev, unh[i - 1] + unh[j - 1])\n    print(min(ev, odd))\nfor _ in range(int(input())):\n    solve()", "import math\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    g = [[] for _ in range(n)]\n    for _ in range(m):\n        (x, y) = (int(x) - 1 for x in input().split())\n        g[x].append(y)\n        g[y].append(x)\n    if m % 2 == 0:\n        print(0)\n        continue\n    opt = math.inf\n    for (i, x) in enumerate(a):\n        if len(g[i]) % 2 == 1:\n            opt = min(opt, x)\n        else:\n            for j in g[i]:\n                opt = min(opt, x + a[j])\n    print(opt)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    friends = defaultdict(list)\n    ans = 100000000\n    for _ in range(m):\n        (x, y) = map(int, input().split())\n        friends[x].append(y)\n        friends[y].append(x)\n        ans = min(ans, arr[x - 1] + arr[y - 1])\n    if m % 2 == 0:\n        print(0)\n        continue\n    for i in range(1, n + 1):\n        if len(friends[i]) % 2 != 0:\n            ans = min(ans, arr[i - 1])\n    print(ans)", "def minUnhappiness(n, m, unhaparr, friends):\n    friends = list(set((tuple(sorted(fr)) for fr in friends)))\n    numfriends = [0] * n\n    for (x, y) in friends:\n        numfriends[x - 1] += 1\n        numfriends[y - 1] += 1\n    unhappiness_idxs = sorted(list(range(n)), key=lambda x: unhaparr[x])\n    if m % 2 == 0:\n        ans = 0\n    else:\n        ans = float('inf')\n        for idx in unhappiness_idxs:\n            if numfriends[idx] % 2:\n                ans = unhaparr[idx]\n                break\n        for (x, y) in friends:\n            if (numfriends[x - 1] + numfriends[y - 1] + 1) % 2:\n                ans = min(ans, unhaparr[x - 1] + unhaparr[y - 1])\n    return ans\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, m) = map(int, input().split())\n        unhaparr = list(map(int, input().split()))\n        friends = []\n        for k in range(m):\n            friends.append(list(map(int, input().split())))\n        print(minUnhappiness(n, m, unhaparr, friends))\nmain()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    seq = tuple((int(i) for i in input().split()))\n    ind_friends = {}\n    friends = set()\n    cnt_odd = 10 ** 5\n    for _ in range(m):\n        (x, y) = map(int, input().split())\n        x -= 1\n        y -= 1\n        friends.add((x, y))\n        ind_friends[x] = ind_friends.get(x, 0) + 1\n        ind_friends[y] = ind_friends.get(y, 0) + 1\n    if m % 2:\n        for i in ind_friends:\n            if ind_friends[i] % 2:\n                if seq[i] < cnt_odd:\n                    cnt_odd = seq[i]\n        for i in sorted(friends, key=lambda x: seq[x[0]] + seq[x[1]]):\n            if seq[i[0]] + seq[i[1]] > cnt_odd:\n                print(cnt_odd)\n                break\n            elif (ind_friends[i[0]] + ind_friends[i[1]]) % 2 == 0:\n                print(seq[i[0]] + seq[i[1]])\n                break\n        else:\n            print(sum(seq))\n    else:\n        print(0)", "def check(a, b):\n    dinh = str(a) + ' ' + str(b)\n    if dinh in ke_nhau:\n        return True\n    else:\n        return False\nfor _ in range(int(input())):\n    s = input()\n    tmp = s.split()\n    n = int(tmp[0])\n    m = int(tmp[1])\n    s = input()\n    tmp = s.split()\n    a = [0]\n    for i in tmp:\n        a += [int(i)]\n    bac = [0] * (n + 1)\n    (x, y) = ([0], [0])\n    for _ in range(m):\n        s = input()\n        tmp = s.split()\n        bac[int(tmp[0])] += 1\n        bac[int(tmp[1])] += 1\n        x += [int(tmp[0])]\n        y += [int(tmp[1])]\n    if m % 2 == 0:\n        print(0)\n    else:\n        th1 = sum(a)\n        th2 = sum(a)\n        for i in range(1, n + 1):\n            if bac[i] % 2 == 1 and (m - bac[i]) % 2 == 0:\n                th1 = min(th1, a[i])\n        for i in range(1, m + 1):\n            if bac[x[i]] % 2 == 0 and bac[y[i]] % 2 == 0 or (bac[x[i]] % 2 == 1 and bac[y[i]] % 2 == 1):\n                th2 = min(th2, a[x[i]] + a[y[i]])\n        print(min(th1, th2))", "def invite():\n    (n, m) = [int(x) for x in input().split()]\n    Fgraph = {}\n    unhappy = [int(x) for x in input().split()]\n    edges = []\n    for i in range(m):\n        (a, b) = [int(x) for x in input().split()]\n        edges.append((a, b))\n        if a in Fgraph:\n            Fgraph[a] += [b]\n        else:\n            Fgraph[a] = [b]\n        if b in Fgraph:\n            Fgraph[b] += [a]\n        else:\n            Fgraph[b] = [a]\n    if m % 2 == 0:\n        return 0\n    num_Edges = []\n    for i in range(1, n + 1):\n        if i in Fgraph:\n            num_Edges.append(len(Fgraph[i]))\n        else:\n            num_Edges.append(0)\n    ans1 = 9999999\n    for i in range(n):\n        if num_Edges[i] % 2 == 1:\n            ans1 = min(ans1, unhappy[i])\n    ans2 = 9999999\n    for i in range(m):\n        (a, b) = edges[i]\n        ans2 = min(ans2, unhappy[a - 1] + unhappy[b - 1])\n    return min(ans1, ans2)\nfor i in range(int(input())):\n    print(invite())", "from collections import *\n\ndef main():\n    for t in range(int(input())):\n        (n, m) = map(int, input().split())\n        a = list(map(int, input().split()))\n        c = Counter()\n        g = []\n        for i in range(m):\n            (x, y) = map(int, input().split())\n            c[x] += 1\n            c[y] += 1\n            g.append([x, y])\n        if m % 2 == 0:\n            print(0)\n            continue\n        res = 0\n        b = []\n        for i in range(1, n + 1):\n            if c[i] & 1:\n                b.append(a[i - 1])\n        res = 200000\n        for i in range(m):\n            if c[g[i][0]] % 2 == 0 and c[g[i][1]] % 2 == 0:\n                res = min(res, a[g[i][0] - 1] + a[g[i][1] - 1])\n        if len(b):\n            res = min(res, sorted(b)[0])\n        print(res)\nmain()", "for p in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    (f, g, d) = ([], [], {})\n    for i in range(m):\n        (x, y) = list(map(int, input().split()))\n        f.append(x)\n        g.append(y)\n        if d.get(x):\n            d[x] += 1\n        else:\n            d[x] = 1\n        if d.get(y):\n            d[y] += 1\n        else:\n            d[y] = 1\n    if m % 2 == 0:\n        print(0)\n    else:\n        (v, q) = (float('inf'), [])\n        for i in d.keys():\n            if d[i] % 2:\n                q.append(a[i - 1])\n        q.sort()\n        if q:\n            v = min(v, q[0])\n        for i in range(len(f)):\n            if d[f[i]] % 2 == 0 and d[g[i]] % 2 == 0:\n                v = min(v, a[f[i] - 1] + a[g[i] - 1])\n        print(v)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [int(j) for j in input().split()]\n    f = [0] * n\n    g = [[] for j in range(n)]\n    for j in range(m):\n        (x, y) = map(int, input().split())\n        x -= 1\n        y -= 1\n        f[x] += 1\n        f[y] += 1\n        g[x] += [y]\n        g[y] += [x]\n    if m % 2:\n        q = 9 ** 9\n        for j in range(n):\n            if f[j] % 2:\n                q = min(q, a[j])\n            else:\n                for t in g[j]:\n                    if f[t] % 2 < 1:\n                        q = min(q, a[t] + a[j])\n        print(q)\n    else:\n        print(0)", "t = int(input())\nfor _ in range(t):\n    (n, m) = input().split()\n    (n, m) = (int(n), int(m))\n    As = input().split()\n    As = [int(i) for i in As]\n    edges = [[] for _ in range(n)]\n    for __ in range(m):\n        (a, b) = input().split()\n        (a, b) = (int(a), int(b))\n        edges[a - 1].append(b - 1)\n        edges[b - 1].append(a - 1)\n    if m % 2 == 0:\n        print(0)\n    else:\n        As_with_idx = [[a, i] for (i, a) in enumerate(As)]\n        As_with_idx.sort(key=lambda x: x[0])\n        min_cost = 1000000\n        selected_set = set()\n        for (a, idx) in As_with_idx:\n            if a > min_cost:\n                break\n            if len(edges[idx]) % 2 == 1:\n                min_cost = min(min_cost, a)\n                break\n            else:\n                for e in edges[idx]:\n                    if e in selected_set:\n                        min_cost = min(min_cost, As[e] + a)\n            selected_set.add(idx)\n        print(min_cost)", "from collections import Counter, defaultdict\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = defaultdict(int)\n    pair = []\n    for _ in range(m):\n        (x, y) = map(int, input().split())\n        pair.append([x, y])\n        d[x] += 1\n        d[y] += 1\n    if m % 2 == 0:\n        print(0)\n    else:\n        ans = float('inf')\n        for i in d:\n            if d[i] % 2:\n                ans = min(ans, a[i - 1])\n        for (i, j) in pair:\n            if d[i] % 2 == 0 and d[j] % 2 == 0:\n                ans = min(ans, a[i - 1] + a[j - 1])\n        print(ans)", "from collections import Counter\nt = int(input())\nfor x in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    f = []\n    c = Counter()\n    for _ in range(m):\n        (u, v) = map(int, input().split())\n        f.append((u, v))\n        c[u] += 1\n        c[v] += 1\n    if m % 2 == 0:\n        print(0)\n        continue\n    ans = float('inf')\n    for i in c:\n        if c[i] & 1:\n            ans = min(ans, a[i - 1])\n    for (u, v) in f:\n        if a[u - 1] + a[v - 1] < ans:\n            cakes = m - c[u] - c[v] + 1\n            if cakes % 2 == 0:\n                ans = a[u - 1] + a[v - 1]\n    print(ans)", "from collections import Counter\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [*map(int, input().split())]\n    tm = []\n    r = []\n    mi = 10 ** 10\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        tm.extend([a - 1, b - 1])\n        r.append((a - 1, b - 1))\n    if m % 2:\n        tm = Counter(tm)\n        for i in r:\n            if tm[i[0]] % 2 == 1:\n                mi = min(mi, l[i[0]])\n            if tm[i[1]] % 2 == 1:\n                mi = min(mi, l[i[1]])\n            if tm[i[0]] % 2 == 0 and tm[i[1]] % 2 == 0:\n                mi = min(mi, l[i[0]] + l[i[1]])\n        print(mi)\n    else:\n        print(0)", "import math\nt = int(input())\nans = []\nfor i in range(t):\n    inp = list(map(int, input().split()))\n    (n, m) = inp\n    unhappiness = list(map(int, input().split()))\n    friends = []\n    for i in range(m):\n        friends.append(list(map(int, input().split())))\n    adj = [[] for i in range(n + 1)]\n    for f in friends:\n        adj[f[0]].append(f[1])\n        adj[f[1]].append(f[0])\n    if len(friends) % 2 == 0:\n        ans.append(0)\n        continue\n    minunhp = math.inf\n    for i in range(n):\n        if len(adj[i + 1]) % 2 == 1:\n            if unhappiness[i] < minunhp:\n                minunhp = unhappiness[i]\n    for f in friends:\n        if len(adj[f[0]]) % 2 == 0 and len(adj[f[1]]) % 2 == 0:\n            if unhappiness[f[0] - 1] + unhappiness[f[1] - 1] < minunhp:\n                minunhp = unhappiness[f[0] - 1] + unhappiness[f[1] - 1]\n    ans.append(minunhp)\nfor a in ans:\n    print(a)", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    d = [0 for _ in range(n + 1)]\n    x = []\n    y = []\n    for _ in range(m):\n        (r1, r2) = list(map(int, input().split()))\n        d[r1] += 1\n        d[r2] += 1\n        x.append(r1)\n        y.append(r2)\n    ans = 10000000\n    if m % 2 == 0:\n        ans = 0\n    for i in range(1, n + 1):\n        if d[i] % 2 == 1:\n            ans = min(ans, a[i - 1])\n    for i in range(m):\n        if d[x[i]] % 2 == 0 and d[y[i]] % 2 == 0:\n            ans = min(ans, a[x[i] - 1] + a[y[i] - 1])\n    print(ans)", "from posixpath import split\nt = int(input())\nwhile t > 0:\n    x = input().split()\n    (n, m) = (int(x[0]), int(x[1]))\n    a = input().split()\n    b = []\n    count = [0 for i in range(n)]\n    for i in range(n):\n        a[i] = int(a[i])\n    for i in range(m):\n        x = input().split()\n        (c, d) = (int(x[0]), int(x[1]))\n        count[c - 1] += 1\n        count[d - 1] += 1\n        b.append([c - 1, d - 1])\n    if m % 2 == 0:\n        print('0')\n    else:\n        ans = 10 ** 9 + 10\n        for i in range(n):\n            if count[i] % 2:\n                ans = min(ans, a[i])\n        for i in range(m):\n            if count[b[i][0]] % 2 == 0 and count[b[i][1]] % 2 == 0:\n                ans = min(ans, a[b[i][0]] + a[b[i][1]])\n        print(ans)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    pairs = list()\n    neighbours = [list() for i in range(n)]\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        (x, y) = (x - 1, y - 1)\n        pairs.append((x, y))\n        neighbours[x].append(y)\n        neighbours[y].append(x)\n    if m % 2 == 0:\n        print(0)\n        continue\n    minUnhappinessWithOneUninvited = 1000000000.0\n    for i in range(n):\n        if len(neighbours[i]) % 2 == 1:\n            minUnhappinessWithOneUninvited = min(minUnhappinessWithOneUninvited, a[i])\n    minUnhappinessWithTwoUninvited = 1000000000.0\n    for (member1, member2) in pairs:\n        if (len(neighbours[member1]) + len(neighbours[member2])) % 2 == 0:\n            minUnhappinessWithTwoUninvited = min(minUnhappinessWithTwoUninvited, a[member1] + a[member2])\n    print(min(minUnhappinessWithOneUninvited, minUnhappinessWithTwoUninvited))", "T = int(input())\nfor t in range(0, T):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    lst = []\n    for i in range(0, m):\n        (x, y) = map(int, input().split())\n        lst.append([x, y])\n    if m % 2 == 0:\n        print(0)\n    else:\n        ans = 2 * 10000 + 1\n        freq = {}\n        for i in range(0, m):\n            if lst[i][0] not in freq:\n                freq[lst[i][0]] = 1\n            else:\n                freq[lst[i][0]] += 1\n            if lst[i][1] not in freq:\n                freq[lst[i][1]] = 1\n            else:\n                freq[lst[i][1]] += 1\n        for item in lst:\n            if (freq[item[0]] + freq[item[1]]) % 2 == 0:\n                ans = min(ans, a[item[0] - 1] + a[item[1] - 1])\n        for i in range(0, n):\n            if i + 1 in freq:\n                if freq[i + 1] % 2 != 0:\n                    ans = min(ans, a[i])\n        print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = []\n    d = {}\n    ans = 100001\n    for j in range(m):\n        (a, b) = map(int, input().split())\n        y.append([a, b])\n    if m % 2 == 0:\n        print(0)\n    else:\n        for j in range(m):\n            if y[j][0] in d:\n                d[y[j][0]] += 1\n            elif y[j][0] not in d:\n                d[y[j][0]] = 1\n            if y[j][1] in d:\n                d[y[j][1]] += 1\n            elif y[j][1] not in d:\n                d[y[j][1]] = 1\n        for j in range(1, n + 1):\n            if j not in d:\n                continue\n            if d[j] % 2 == 1:\n                ans = min(ans, x[j - 1])\n        for j in range(m):\n            if d[y[j][0]] % 2 == 0 and d[y[j][1]] % 2 == 0:\n                ans = min(ans, x[y[j][0] - 1] + x[y[j][1] - 1])\n        print(ans)", "from collections import defaultdict\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    count = m\n    mini = float('inf')\n    d = defaultdict(lambda : [])\n    b = []\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        d[x].append(y)\n        d[y].append(x)\n        mini = min(mini, a[x - 1] + a[y - 1])\n    if m % 2 == 0:\n        print(0)\n    else:\n        for i in range(1, n + 1):\n            if len(d[i]) % 2 == 1:\n                mini = min(mini, a[i - 1])\n        print(mini)\n    t = t - 1", "from typing import Counter\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = []\n    d = []\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        p.append([u, v])\n        d += [u, v]\n    if m & 1:\n        c = Counter(d)\n        ans = sum(a)\n        for x in c:\n            if not m - c[x] & 1:\n                ans = min(ans, a[x - 1])\n        for x in p:\n            rem = 2 * m - 2 * (c[x[0]] + c[x[1]] - 1)\n            if rem % 2 == 0:\n                ans = min(ans, a[x[0] - 1] + a[x[1] - 1])\n        print(ans)\n    else:\n        print(0)", "import math\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    g = [[] for _ in range(n)]\n    for _ in range(m):\n        (x, y) = (int(x) - 1 for x in input().split())\n        g[x].append(y)\n        g[y].append(x)\n    if m % 2 == 0:\n        print(0)\n        continue\n    opt = math.inf\n    for (i, x) in enumerate(a):\n        if len(g[i]) % 2 == 1:\n            opt = min(opt, x)\n        else:\n            for j in g[i]:\n                opt = min(opt, x + a[j])\n    print(opt)", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split(' ')))\n    arr = list(map(int, input().split(' ')))\n    count = [0] * (n + 1)\n    pairs = []\n    for _ in range(m):\n        (a, b) = list(map(int, input().split(' ')))\n        count[a] += 1\n        count[b] += 1\n        pairs.append((a, b))\n    min_cost = 10 ** 5 + 1\n    if m % 2 == 0:\n        print(0)\n        continue\n    else:\n        for (a, b) in pairs:\n            if count[a] % 2 != 0:\n                min_cost = min(min_cost, arr[a - 1])\n            if count[b] % 2 != 0:\n                min_cost = min(min_cost, arr[b - 1])\n            if (count[b] + count[a]) % 2 == 0:\n                min_cost = min(min_cost, arr[a - 1] + arr[b - 1])\n    print(min_cost)", "import sys, io, os, math\nfrom math import ceil, log, gcd, sqrt\nfrom itertools import permutations\nfrom collections import defaultdict\nimport operator\nmod = 1000000007\nmod2 = 998244353\nintinp = lambda : int(sys.stdin.readline())\nstrinp = lambda : sys.stdin.readline()\narrinp = lambda : list(map(int, sys.stdin.readline().strip().split()))\nmulinp = lambda : map(int, sys.stdin.readline().strip().split())\npower_two = lambda x: 1 << x\nlcm = lambda a, b: a * b // gcd(a, b)\n\ndef solve():\n    (n, m) = mulinp()\n    a = arrinp()\n    l = []\n    d = defaultdict(lambda : 0)\n    s = defaultdict(lambda : set())\n    pairs = m\n    for i in range(m):\n        (x, y) = mulinp()\n        d[x - 1] += 1\n        s[x - 1].add(y - 1)\n        d[y - 1] += 1\n        s[y - 1].add(x - 1)\n    if pairs % 2 == 0:\n        print(0)\n        return\n    ans = sys.maxsize\n    for i in d:\n        if d[i] % 2:\n            ans = min(ans, a[i])\n        else:\n            for j in s[i]:\n                if d[j] % 2 == 0:\n                    ans = min(ans, a[i] + a[j])\n    print(ans)\n\ndef main():\n    tc = intinp()\n    while tc:\n        solve()\n        tc -= 1\nmain()", "test = int(input())\nwhile test:\n    (n, m) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    adj = dict()\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        if x in adj:\n            adj[x][0] += 1\n            adj[x].append(y)\n        else:\n            adj[x] = [1, y]\n        if y in adj:\n            adj[y][0] += 1\n            adj[y].append(x)\n        else:\n            adj[y] = [1, x]\n    if m % 2:\n        ans1 = ans2 = float('inf')\n        for (i, j) in adj.items():\n            if j[0] % 2:\n                ans1 = min(ans1, a[i - 1])\n            else:\n                for k in range(1, len(j)):\n                    if adj[j[k]][0] % 2 == 0:\n                        ans2 = min(ans2, a[i - 1] + a[j[k] - 1])\n        print(min(ans1, ans2))\n    else:\n        print(0)\n    test -= 1", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    e = []\n    for _ in range(m):\n        e.append(list(map(int, input().split())))\n    if m % 2 == 0:\n        print(0)\n    else:\n        ans = float('inf')\n        d = {i: 0 for i in range(n)}\n        for (a, b) in e:\n            d[a - 1] += 1\n            d[b - 1] += 1\n        for i in range(n):\n            if d[i] % 2 == 1:\n                ans = min(ans, l[i])\n        for (a, b) in e:\n            a -= 1\n            b -= 1\n            if (d[a] + d[b]) % 2 == 0:\n                ans = min(ans, l[a] + l[b])\n        if ans < float('inf'):\n            print(ans)\n        else:\n            ans = 0\n            for i in range(n):\n                if d[i] > 0:\n                    ans += l[i]\n            print(ans)", "t = int(input())\nfor i in range(t):\n    [n, m] = [int(i) for i in input().split()]\n    uval = ['faltu']\n    uval += [int(i) for i in input().split()]\n    dict = {}\n    for i in range(1, n + 1):\n        dict[i] = 0\n    arr = []\n    arr2 = []\n    for i in range(m):\n        [x, y] = [int(i) for i in input().split()]\n        arr2.append(uval[x] + uval[y])\n        dict[x] += 1\n        dict[y] += 1\n        arr.append([x, y])\n    arr1 = []\n    if m % 2 == 0:\n        print(0)\n    else:\n        for i in arr:\n            x = i[0]\n            y = i[1]\n            if dict[x] % 2 == 1 and dict[y] % 2 == 1:\n                arr1.append(min(uval[x], uval[y]))\n            elif dict[x] % 2 == 1 and dict[y] % 2 == 0:\n                arr1.append(uval[x])\n            elif dict[x] % 2 == 0 and dict[y] % 2 == 1:\n                arr1.append(uval[y])\n            elif (dict[x] + dict[y] - 1) % 2 == 1:\n                arr1.append(uval[x] + uval[y])\n        if arr1 != []:\n            print(min(arr1))\n        else:\n            print(min(arr2))", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    g = [[] for _ in range(n)]\n    for _ in range(m):\n        (x, y) = [int(x) - 1 for x in input().split()]\n        g[x].append(y)\n        g[y].append(x)\n    if m % 2 == 0:\n        print(0)\n    else:\n        mi = 1000000000.0\n        for i in range(n):\n            cl = len(g[i])\n            if cl % 2 == 1:\n                mi = min(mi, a[i])\n            else:\n                for j in range(cl):\n                    if len(g[g[i][j]]) % 2 == 0:\n                        mi = min(a[i] + a[g[i][j]], mi)\n        if mi == -1:\n            print(sum(a))\n        else:\n            print(mi)", "from collections import defaultdict\nfrom functools import reduce\n\ndef party(n, m, array, adj):\n    if not m % 2:\n        return 0\n    odds = [i for i in range(1, n + 1) if len(adj[i]) % 2]\n    if odds:\n        minodd = array[reduce(lambda x, y: x if array[x] <= array[y] else y, odds)]\n    else:\n        minodd = 10 ** 10\n    mineven = 10 ** 10\n    evens = [i for i in range(1, n + 1) if not len(adj[i]) % 2]\n    for e1 in evens:\n        for e2 in [i for i in adj[e1] if not len(adj[i]) % 2]:\n            mineven = min(mineven, array[e1] + array[e2])\n    return min(minodd, mineven)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split(' '))\n    array = [0] + list(map(int, input().split(' ')))\n    adj = defaultdict(lambda : [])\n    for _ in range(m):\n        (x, y) = map(int, input().split(' '))\n        adj[x].append(y)\n        adj[y].append(x)\n    print(party(n, m, array, adj))", "import functools\n\ndef main():\n    n_tests = int(input())\n    for _ in range(n_tests):\n        (n, m) = list(map(int, input().split(' ')))\n        u = list(map(int, input().split(' ')))\n        friends = {}\n        pairs = set()\n        for _ in range(m):\n            (x, y) = list(map(int, input().split(' ')))\n            if x not in friends:\n                friends[x] = []\n            if y not in friends:\n                friends[y] = []\n            friends[x].append(y)\n            friends[y].append(x)\n            pairs.add(tuple(sorted((x, y))))\n        arr = []\n        for (i, loss) in enumerate(u):\n            cnt = friends.get(i + 1, [])\n            arr.append((loss, len(cnt)))\n        if m % 2 == 0:\n            print('0')\n            continue\n        result = float('inf')\n        for (i, d) in enumerate(arr):\n            (loss, t_cn) = d\n            if t_cn % 2 == 1:\n                result = min(result, loss)\n        for (x, y) in list(pairs):\n            if arr[x - 1][1] % 2 == 0 and arr[y - 1][1] % 2 == 0:\n                result = min(result, u[x - 1] + u[y - 1])\n        print(result)\nmain()", "from collections import defaultdict\n\ndef dfs(node):\n    val = 0\n    for i in friend[node]:\n        if i in sett:\n            val += ai[i - 1]\n    return val\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ai = list(map(int, input().split()))\n    ais = list(sorted(ai))\n    friend = defaultdict(list)\n    for _ in range(m):\n        (x, y) = map(int, input().split())\n        friend[x].append(y)\n        friend[y].append(x)\n    if m % 2 == 0:\n        print(0)\n        continue\n    ans = 1e+18\n    for i in range(1, n + 1):\n        if len(friend[i]) % 2:\n            ans = min(ans, ai[i - 1])\n    for i in range(1, n + 1):\n        for ii in friend[i]:\n            ans = min(ans, ai[i - 1] + ai[ii - 1])\n    print(ans)", "from collections import defaultdict\nfrom sys import maxsize\nfor _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    cc_by_member = [0 for i in range(n)]\n    adj_list = defaultdict(list)\n    cc = 0\n    pairs = []\n    for i in range(m):\n        (a, b) = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        cc += 1\n        cc_by_member[a] += 1\n        cc_by_member[b] += 1\n        adj_list[a].append(b)\n        adj_list[b].append(a)\n        pairs.append((a, b))\n    if cc % 2 == 0:\n        print(0)\n    else:\n        remove_odd_cost = maxsize\n        rm_even_even = maxsize\n        cand = [i for i in range(len(cc_by_member)) if cc_by_member[i] % 2]\n        if cand:\n            remove_odd_cost = arr[min(cand, key=lambda x: arr[x])]\n        p = [pair for pair in pairs if cc_by_member[pair[0]] % 2 == 0 and cc_by_member[pair[1]] % 2 == 0]\n        if p:\n            rm_even_even = min(p, key=lambda z: arr[z[0]] + arr[z[1]])\n            rm_even_even = arr[rm_even_even[0]] + arr[rm_even_even[1]]\n        print(min(remove_odd_cost, rm_even_even))"]