["iter = int(input())\nfor _ in range(iter):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    op = 0\n    for i in range(n - 1):\n        if a[i] & 1 == a[i + 1] & 1:\n            op += 1\n    print(op)", "def n_ops(a):\n    op_count = 0\n    for i in range(1, len(a)):\n        if a[i] % 2 == a[i - 1] % 2:\n            op_count += 1\n    return op_count\n\ndef test_n_ops():\n    assert n_ops([1, 1, 1, 2, 2, 3]) == 3\n    assert n_ops([1]) == 0\n    assert n_ops([1, 2]) == 0\n    assert n_ops([1, 1]) == 1\n    assert n_ops([1, 7, 11, 2, 13]) == 2\n    assert n_ops([1, 2, 3, 4]) == 0\n\ndef main():\n    n_cases = int(input().strip())\n    for _ in range(n_cases):\n        input()\n        a = list(map(int, input().strip().split(' ')))\n        print(n_ops(a))\nmain()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = map(int, input().split(' '))\n    p = -1\n    c = 0\n    for x in a:\n        if x % 2 == p:\n            c += 1\n        p = x % 2\n    print(c)", "import math\nimport sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef print_min(miner):\n    if miner == 9999999999999999:\n        print(-1, end=' ')\n    else:\n        print(miner, end=' ')\nfor _ in range(inp()):\n    n = inp()\n    arr = inlt()\n    prev = arr[0]\n    total = 0\n    for i in range(1, n):\n        if arr[i] % 2 == prev % 2:\n            total += 1\n        prev = arr[i]\n    print(total)", "def main():\n    i = int(input())\n    for _ in range(i):\n        n = int(input().strip('\\r\\n'))\n        a = [int(x) for x in input().strip('\\r\\n').split()]\n        cnt = 0\n        rem = None\n        for v in a:\n            if v % 2 == rem:\n                cnt += 1\n            else:\n                rem = v % 2\n        print(cnt)\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = list(map(int, input().split(' ')))\n    answer = 0\n    for i in range(1, n):\n        if nums[i - 1] % 2 == nums[i] % 2:\n            answer += 1\n    print(answer)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    L = list(map(int, input().split()))\n    ans = 0\n    for i in range(1, n):\n        if L[i] % 2 == L[i - 1] % 2:\n            ans += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        if a[i] % 2 == a[i + 1] % 2:\n            ans += 1\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    ind = 0\n    while ind < n - 1:\n        if a[ind] % 2 == a[ind + 1] % 2:\n            ans += 1\n        ind += 1\n    print(ans)", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        count = 0\n        ans = 0\n        for i in range(1, n):\n            if a[i] % 2 == a[i - 1] % 2:\n                count += 1\n            else:\n                ans += count\n                count = 0\n        ans += count\n        print(ans)\nmain()", "n = int(input())\nfor _ in range(n):\n    x = int(input())\n    l = [int(i) for i in input().split()]\n    count = 0\n    for i in range(len(l) - 1):\n        if l[i + 1] % 2 == 0 and l[i] % 2 == 0:\n            count += 1\n        elif l[i + 1] % 2 != 0 and l[i] % 2 != 0:\n            count += 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    answer = 0\n    bounce = 1\n    arr = [int(x) for x in input().split()]\n    for i in range(1, n):\n        if (arr[i] - arr[i - 1]) % 2 == 0:\n            bounce += 1\n        else:\n            answer += bounce - 1\n            bounce = 1\n    answer += bounce - 1\n    print(answer)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().rstrip().split()))\n    s = 0\n    for i in range(len(lst)):\n        try:\n            if lst[i] % 2 == lst[i + 1] % 2:\n                s += 1\n        except IndexError:\n            break\n    print(s)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = 0\n    for i in range(len(a) - 1):\n        if a[i] % 2 == 0 and a[i + 1] % 2 == 0 or (a[i] % 2 == 1 and a[i + 1] % 2 == 1):\n            c += 1\n    print(c)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    operations = 0\n    for i in range(1, n):\n        if a[i] % 2 == a[i - 1] % 2:\n            operations += 1\n    print(operations)", "for _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    c = 0\n    for i in range(n - 1):\n        if A[i] % 2 == 0 and A[i + 1] % 2 == 0:\n            c += 1\n        if A[i] % 2 == 1 and A[i + 1] % 2 == 1:\n            c += 1\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n        continue\n    else:\n        count = 0\n        r = L[0] % 2\n        for i in range(1, n):\n            if L[i] % 2 == r:\n                count += 1\n            else:\n                r = L[i] % 2\n        print(count)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    z = list(map(int, input().split()))\n    d = []\n    for i in range(n):\n        if z[i] % 2 == 0:\n            d.append(0)\n        else:\n            d.append(1)\n    ans = 0\n    for i in range(1, n):\n        if d[i - 1] == d[i]:\n            ans += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    c = 0\n    arro = arr[:-1]\n    for (i, j) in enumerate(arro):\n        if (arr[i + 1] + j) % 2 == 0:\n            c += 1\n    print(c)", "import math\nimport bisect\nfrom collections import defaultdict, Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    ans = 0\n    e = 0\n    o = 0\n    for i in range(0, n):\n        if a[i] % 2 == 0:\n            e += 1\n            if o > 0:\n                ans += abs(o - 1)\n            o = 0\n        elif a[i] % 2 != 0:\n            if e > 0:\n                ans += abs(e - 1)\n            e = 0\n            o += 1\n    if e > 0:\n        ans += abs(e - 1)\n    if o > 0:\n        ans += abs(o - 1)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split(maxsplit=n)]\n    ans = 0\n    for i in range(0, n - 1):\n        if a[i] % 2 == a[i + 1] % 2:\n            ans += 1\n    print(ans)", "for i in range(int(input())):\n    k = int(input())\n    s = [int(i) for i in input().split()]\n    count = 0\n    if len(s) > 1:\n        if s[0] % 2 == s[1] % 2:\n            count += 1\n        for i in range(1, k - 1):\n            if s[i] % 2 == s[i + 1] % 2:\n                count += 1\n        print(count)\n    else:\n        print(0)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    z = input().split()\n    k = 0\n    for j in range(n - 1):\n        if int(z[j]) % 2 == int(z[j + 1]) % 2:\n            k += 1\n    print(k)", "from itertools import *\nfor s in [*open(0)][2::2]:\n    print(sum((len([*g]) - 1 for (k, g) in groupby((int(x) % 2 for x in s.split())))))", "def GoodArray(array):\n    count = 0\n    for i in range(len(array) - 1):\n        if array[i] % 2 == array[i + 1] % 2:\n            count += 1\n    return count\nt = int(input())\noutput = []\nfor i in range(t):\n    n = int(input())\n    array = list(map(int, input().split()))\n    output.append(GoodArray(array))\nfor answer in output:\n    print(answer)", "def Solve():\n    n = int(input())\n    v = list(map(int, input().split()))\n    r = 0\n    for i in range(len(v) - 1):\n        if v[i] % 2 == 0 and v[i + 1] % 2 == 0 or (v[i] % 2 != 0 and v[i + 1] % 2 != 0):\n            r += 1\n    return r\n\ndef meow():\n    t = int(input())\n    while t != 0:\n        print(Solve())\n        t -= 1\nmeow()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    cnt = 0\n    for i in range(n - 1):\n        if l[i] % 2 == 0 and l[i + 1] % 2 == 0 or (l[i] % 2 == 1 and l[i + 1] % 2 == 1):\n            cnt += 1\n    print(cnt)", "n = int(input())\nfor _ in range(n):\n    l = int(input())\n    tab = list(map(int, input().split()))\n    sub_p = []\n    temp = [tab[0]]\n    for i in range(1, l):\n        if tab[i - 1] % 2 == tab[i] % 2:\n            temp.append(tab[i])\n        else:\n            sub_p.append(temp)\n            temp = [tab[i]]\n    sub_p.append(temp)\n    res = 0\n    for l_p in sub_p:\n        res += len(l_p) - 1\n    print(res)", "def good_array(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        a = test_cases[_][1]\n        count = 0\n        for i in range(n - 1):\n            if a[i] % 2 == a[i + 1] % 2:\n                count += 1\n        print(count)\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    test_cases.append((n, a))\ngood_array(t, test_cases)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    c = 0\n    for i in range(1, n):\n        if arr[i] % 2 != 0 and arr[i - 1] % 2 != 0 or (arr[i] % 2 == 0 and arr[i - 1] % 2 == 0):\n            c += 1\n    print(c)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    numbers = list(map(int, input().split()))\n    count = sum([1 for (a, b) in zip(numbers, numbers[1:]) if a % 2 == b % 2])\n    print(count)", "tc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    coun = 0\n    for i in range(1, n):\n        if lst[i] % 2 == 1 and lst[i - 1] % 2 == 1:\n            coun += 1\n        elif lst[i] % 2 == 0 and lst[i - 1] % 2 == 0:\n            coun += 1\n    print(coun)", "t = int(input())\nA = []\nfor i in range(t):\n    n = int(input())\n    a = [int(p) for p in input().split()]\n    A.append(a)\nfor i in range(t):\n    arr = A[i]\n    c = 0\n    if arr[0] % 2 == 0:\n        switch = True\n        for j in range(1, len(arr)):\n            if switch:\n                if arr[j] % 2 == 0:\n                    c += 1\n                else:\n                    switch = False\n            elif arr[j] % 2 == 1:\n                c += 1\n            else:\n                switch = True\n    else:\n        switch = False\n        for j in range(1, len(arr)):\n            if switch:\n                if arr[j] % 2 == 0:\n                    c += 1\n                else:\n                    switch = False\n            elif arr[j] % 2 == 1:\n                c += 1\n            else:\n                switch = True\n    print(c)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    n = len(a)\n    ce = 0\n    co = 0\n    b = []\n    f = a[0] % 2\n    for i in range(n):\n        if f == 0 and a[i] % 2 == 0:\n            ce += 1\n        elif f == 1 and a[i] % 2 == 0:\n            b.append(co)\n            co = 0\n            ce = 1\n            f = 0\n        elif f == 1 and a[i] % 2 == 1:\n            co += 1\n        elif f == 0 and a[i] % 2 == 1:\n            b.append(ce)\n            ce = 0\n            co = 1\n            f = 1\n    b.append(co)\n    b.append(ce)\n    r = 0\n    for j in b:\n        if j > 1:\n            r += j - 1\n    print(r)", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom collections import Counter\nfrom bisect import bisect_left as bl, bisect_right as br\nimport heapq\nfrom itertools import permutations\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nmod = 1000000007\ntest = int(input())\nfor _ in range(test):\n    n = inp()\n    a = seq()\n    ans = 0\n    for i in range(len(a) - 1):\n        if a[i] % 2 == a[i + 1] % 2:\n            ans += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = 0\n    for i in range(n - 1):\n        if a[i] % 2 == 0 and a[i + 1] % 2 == 0:\n            c += 1\n        elif a[i] % 2 != 0 and a[i + 1] % 2 != 0:\n            c += 1\n    print(c)", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    L = [*map(int, input().split())]\n    result = 0\n    for i in range(len(L) - 1):\n        f = L[i]\n        s = L[i + 1]\n        if (f ^ s) % 2 == 0:\n            result += 1\n    print(result)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = map(int, input().split())\n    (odd, even, ans) = (0, 0, 0)\n    for e in a:\n        if e % 2 == 0:\n            even += 1\n            odd = 0\n        else:\n            odd += 1\n            even = 0\n        if odd == 2:\n            ans += 1\n            odd = 1\n        elif even == 2:\n            ans += 1\n            even = 1\n    print(ans)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    curr_par = arr[0] % 2\n    if n == 1:\n        print(0)\n        continue\n    switches = 0\n    for i in range(1, n):\n        new_par = arr[i] % 2\n        if new_par != curr_par:\n            curr_par = new_par\n            switches += 1\n    print(n - switches - 1)", "t = int(input())\nfor _ in range(t):\n    input()\n    a = [int(x) for x in input().split()]\n    count = 0\n    for i in range(len(a) - 1):\n        if a[i] % 2 == a[i + 1] % 2:\n            count += 1\n    print(count)", "t = int(input())\nfor p in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    op = 0\n    s = 1\n    for i in range(0, n - 1):\n        if a[i] % 2 == a[i + 1] % 2:\n            s += 1\n        else:\n            op += s - 1\n            s = 1\n    op += s - 1\n    print(op)", "def solveA():\n    n = int(input())\n    arr = [int(x) for x in input().split(' ')]\n    consecs = 0\n    currentPar = arr[0] % 2\n    for x in arr[1:]:\n        if x % 2 == currentPar:\n            consecs += 1\n        else:\n            currentPar = x % 2\n    print(consecs)\nt = int(input())\nfor tc in range(t):\n    solveA()", "n = int(input())\nfor _ in range(n):\n    t = int(input())\n    a = list(map(int, input().split(' ')))\n    i = 1\n    res = 0\n    while i < t:\n        if a[i - 1] & 1 == a[i] & 1:\n            res += 1\n        i += 1\n    print(res)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    inp = list(map(int, input().split()))\n    op = 0\n    for i in range(n):\n        if inp[i] % 2 == 0:\n            inp[i] = 0\n        else:\n            inp[i] = -1\n    for i in range(n - 1):\n        if inp[i] == inp[i + 1] == 0 or inp[i] == inp[i + 1] == -1:\n            op += 1\n    print(op)\n    t -= 1", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = 0\n    for j in range(0, n - 1):\n        if (a[j] + a[j + 1]) % 2 == 0:\n            p += 1\n    print(p)", "n = int(input())\nfor i in range(n):\n    c = 0\n    b = int(input())\n    l = [int(i) for i in input().split()]\n    for j in range(len(l) - 1):\n        if l[j] % 2 == 0 and l[j + 1] % 2 == 0 or (l[j] % 2 != 0 and l[j + 1] % 2 != 0):\n            l[j] = l[j] * l[j + 1]\n            c += 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    count = 0\n    for i in range(n - 1):\n        if arr[i] % 2 == arr[i + 1] % 2:\n            count += 1\n    print(count)", "n = int(input())\n\ndef work(l):\n    for i in range(len(l) - 1):\n        if l[i] == l[i + 1]:\n            return False\n    return True\nfor _ in range(n):\n    res = 0\n    m = int(input())\n    vals = list(map(lambda u: int(u) % 2, input().split()))\n    for i in range(m - 1):\n        if vals[i] == vals[i + 1]:\n            res += 1\n    print(res)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = 0\n    for j in range(n - 1):\n        if a[j] % 2 == a[j + 1] % 2:\n            c += 1\n    print(c)", "import math\n\ndef fun(x):\n    ans = 0\n    while x > 1:\n        ans += x // 2\n        x = x // 2 + x % 2\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    ln = 1\n    p = a[0] % 2\n    ans = 0\n    for i in range(1, n):\n        if a[i] % 2 == p:\n            ln += 1\n        else:\n            ans += fun(ln)\n            ln = 1\n            p = a[i] % 2\n    ans += fun(ln)\n    print(ans)", "t = int(input())\nfor f in range(t):\n    gta = int(input())\n    b_b = list(map(int, input().split()))\n    it = 0\n    for i in range(gta - 1):\n        if b_b[i] % 2 == 0 and b_b[i + 1] % 2 == 0 or (b_b[i] % 2 == 1 and b_b[i + 1] % 2 == 1):\n            it = it + 1\n    print(it)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        if a[i] % 2 == 0 and a[i + 1] % 2 == 0 or (a[i] % 2 == 1 and a[i + 1] % 2 == 1):\n            ans += 1\n    print(ans)", "t = int(input())\nfor j in range(t):\n    p = int(input())\n    l = list(map(int, input().split()))\n    count = 0\n    for i in range(len(l) - 1):\n        if l[i] % 2 == 0 and l[i + 1] % 2 == 0 or (l[i] % 2 != 0 and l[i + 1] % 2 != 0):\n            count += 1\n    print(count)", "N = int(input())\n\ndef solve():\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    res = 0\n    for i in range(1, n):\n        if A[i] % 2 == A[i - 1] % 2:\n            res += 1\n    print(res)\nfor i in range(N):\n    solve()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    count = 0\n    for j in range(n - 1):\n        if a[j] % 2 == a[j + 1] % 2:\n            count += 1\n    print(count)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = 0\n    for i in range(n - 1):\n        if a[i] % 2 == a[i + 1] % 2:\n            c += 1\n    print(c)", "n = int(input())\nfor i in range(n):\n    m = int(input())\n    number = input()\n    array = number.split()\n    initial = -1\n    count = 0\n    for j in range(m):\n        parity = int(array[j]) % 2\n        if j == 0:\n            initial = parity\n        elif parity == initial:\n            count += 1\n        else:\n            initial = parity\n    print(count)", "test = int(input().strip())\nfor _ in range(test):\n    n = int(input().strip())\n    ar = list(map(int, input().strip().split()))\n    c = 0\n    for i in range(n - 1):\n        if n <= 0:\n            c = 0\n        if ar[i] % 2 == 0 and ar[i + 1] % 2 == 0 or (ar[i] % 2 == 1 and ar[i + 1] % 2 == 1):\n            c += 1\n    print(c)", "def calc_op(a, n):\n    chpos = []\n    ch = a[0] % 2\n    count_ch = 0\n    for i in range(1, n):\n        ch_new = a[i] % 2\n        if ch_new == ch:\n            count_ch += 1\n        else:\n            chpos.append(count_ch)\n            count_ch = 0\n            ch = ch_new\n    chpos.append(count_ch)\n    return sum(chpos)\nt = int(input())\nfor t in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    res = calc_op(a, n)\n    print(res)", "cases = int(input())\nfor j in range(cases):\n    n = int(input())\n    counter = 0\n    a = [int(x) for x in input().split()]\n    i = 0\n    for i in range(n - 1):\n        if a[i] % 2 ^ a[i + 1] % 2 == 1:\n            counter += 1\n    print(n - counter - 1)", "def good_array(l):\n    n = len(l)\n    operations = 0\n    for i in range(n - 1):\n        if l[i] % 2 and l[i + 1] % 2 or (l[i] % 2 == 0 and l[i + 1] % 2 == 0):\n            operations += 1\n    return operations\nn = int(input())\nfor i in range(n):\n    size = int(input())\n    arr = list(map(int, input().split()))\n    print(good_array(arr))", "t = int(input())\nresult = []\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    curr = 0\n    if n != 1:\n        (i, j) = (0, 1)\n        while j < n:\n            if a[i] % 2 == 0 and a[j] % 2 == 0 or (a[i] % 2 != 0 and a[j] % 2 != 0):\n                curr += 1\n            i += 1\n            j += 1\n    result.append(curr)\nfor num in result:\n    print(num)", "t = int(input(''))\n\ndef test(s):\n    c = 0\n    for k in range(len(s) - 1):\n        if int(s[k]) % 2 == 0 and int(s[k + 1]) % 2 == 0:\n            c += 1\n        elif int(s[k]) % 2 != 0 and int(s[k + 1]) % 2 != 0:\n            c += 1\n    return c\nl = []\nfor i in range(t):\n    n = int(input(''))\n    s = input('').split(' ')\n    l.append(test(s))\nfor j in range(len(l)):\n    print(l[j])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for j in range(n - 1):\n        if a[j] % 2 == a[j + 1] % 2:\n            count += 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 0\n    for i in range(n - 1):\n        if n == 1:\n            print(0)\n            break\n        if l[i] & 1 == l[i + 1] & 1:\n            c += 1\n    print(c)", "def solution(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i < n - 1:\n            if arr[i] % 2 == arr[i + 1] % 2:\n                count += 1\n    print(count)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    solution(arr)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))[:n]\n    c = 0\n    for i in range(n - 1):\n        if a[i] % 2 == a[i + 1] % 2:\n            c += 1\n    print(c)", "def good_array(n, a):\n    count = 0\n    for i in range(n - 1):\n        if a[i] % 2 == a[i + 1] % 2:\n            count += 1\n    return count\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(good_array(n, a))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    tf = l[0] % 2\n    count = 0\n    for i in range(n):\n        if l[i] % 2 == tf:\n            count += 1\n        else:\n            tf = (tf + 1) % 2\n    print(count - 1)", "def solve(n, a):\n    cnt = 0\n    for i in range(1, n):\n        if a[i - 1] % 2 == a[i] % 2:\n            cnt += 1\n    return cnt\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(n, a))", "import heapq\nimport math\neps = 10 ** (-9)\nfrom math import ceil, log\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    res = 0\n    for i in range(n - 1):\n        if a[i] % 2 == a[i + 1] % 2:\n            res += 1\n    print(res)\n    return\nt = int(input())\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = 0\n    for j in range(1, n):\n        if a[j - 1] % 2 == 0 and a[j] % 2 == 0:\n            x += 1\n        elif a[j - 1] % 2 == 1 and a[j] % 2 == 1:\n            x += 1\n    print(x)", "def min_operations(arr):\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == arr[i - 1] % 2:\n            count += 1\n    return count\nt = int(input())\ntests = []\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    tests.append([n, arr])\nfor i in range(t):\n    (n, arr) = tests[i]\n    print(min_operations(arr))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ff = 0\n    x = a[0]\n    c = 0\n    for i in range(1, n):\n        if x % 2 == a[i] % 2:\n            c += 1\n        else:\n            x = a[i]\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        if int(l[i] % 2) and int(l[i + 1] % 2) or (l[i] % 2 == 0 and l[i + 1] % 2 == 0):\n            ans += 1\n    print(ans)", "def process_array(array, number_of_elements):\n    count_of_operations = 0\n    for i in range(number_of_elements - 1):\n        if array[i] % 2 == array[i + 1] % 2:\n            count_of_operations += 1\n    return count_of_operations\n\ndef process_inputs_a():\n    number_of_inputs = int(input())\n    for i in range(number_of_inputs):\n        number_of_elements = int(input())\n        array = [int(x) for x in input().split()]\n        print(process_array(array, number_of_elements))\n\ndef main():\n    process_inputs_a()\nmain()", "import collections\nimport math\nimport itertools\nimport operator\n\ndef ii():\n    return int(input())\n\ndef mi():\n    return map(int, input().split())\n\ndef li():\n    return list(map(int, input().split()))\n\ndef findValue(numbers, low, high, value):\n    rez = -1\n    while low <= high:\n        middle = low + (high - low) // 2\n        if numbers[middle] >= value:\n            rez = middle\n            high = middle - 1\n        else:\n            low = middle + 1\n    return rez\nfor _ in range(ii()):\n    n = ii()\n    a = li()\n    ans = 0\n    for i in range(n - 1):\n        if a[i] & 1 and a[i + 1] & 1 or (a[i] % 2 == 0 and a[i + 1] % 2 == 0):\n            ans += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(1, len(a)):\n        if a[i] % 2 == a[i - 1] % 2:\n            count += 1\n    print(count)", "nope = int(input())\nfor i in range(nope):\n    hehe = int(input())\n    now = list(map(int, input().split()))\n    res = 0\n    for i in range(hehe - 1):\n        if now[i] % 2 == 0 and now[i + 1] % 2 == 0 or (now[i] % 2 == 1 and now[i + 1] % 2 == 1):\n            res += 1\n    print(res)", "for i in range(int(input())):\n    n = int(input())\n    x = [int(i) for i in input().split()]\n    c = 0\n    for i in range(n - 1):\n        if x[i] % 2 != 0 and x[i + 1] % 2 != 0 or (x[i] % 2 == 0 and x[i + 1] % 2 == 0):\n            c += 1\n    print(c)", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    print(sum((1 & ~(x ^ y) for (x, y) in zip(a, a[1:]))))", "def min_operations(a, n):\n    cnt = 0\n    for i in range(n - 1):\n        if a[i] % 2 == a[i + 1] % 2:\n            cnt += 1\n    return cnt\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(min_operations(a, n))", "def print_non_same_partial(n, arr):\n    count = 0\n    for i in range(1, n):\n        if arr[i - 1] % 2 == arr[i] % 2:\n            count += 1\n    print(count)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        arr = [int(num) for num in input().split()]\n        print_non_same_partial(n, arr)\nmain()", "for i in range(int(input())):\n    n = int(input())\n    v = []\n    x = list(map(int, input().split()))\n    b = 0\n    for i in range(n):\n        v.append(x[i] % 2)\n    i = 0\n    while i < n - 1:\n        if v[i] == v[i + 1]:\n            b += 1\n            del v[i]\n            n -= 1\n        else:\n            i += 1\n    print(b)", "def problem_a(nums):\n    total = 0\n    for i in range(len(nums) - 1):\n        if nums[i] % 2 == nums[i + 1] % 2:\n            total += 1\n    return total\nnum_problems = int(input().strip())\nfor i in range(num_problems):\n    num_p = int(input().strip())\n    nums = list(map(int, input().strip().split()))\n    r = problem_a(nums)\n    print(r)", "def min_ops(arr):\n    n = len(arr)\n    ops = 0\n    for i in range(1, n):\n        if arr[i] % 2 == arr[i - 1] % 2:\n            ops += 1\n    return ops\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    print(min_ops(arr))", "def solve(n, l):\n    even_c = 0\n    odd_c = 0\n    res = 0\n    for i in l:\n        if i % 2 == 0:\n            if odd_c != 0:\n                res += odd_c - 1\n                odd_c = 0\n            if odd_c == 0:\n                even_c += 1\n            else:\n                even_c = 0\n        else:\n            if even_c != 0:\n                res += even_c - 1\n                even_c = 0\n            if even_c == 0:\n                odd_c += 1\n            else:\n                odd_c = 0\n    if odd_c != 0:\n        res += odd_c - 1\n    if even_c != 0:\n        res += even_c - 1\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(solve(n, l))", "m = int(input())\nfor k in range(m):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    cnt = ls[0] % 2\n    ans = 0\n    for i in range(1, n):\n        if ls[i] % 2 == cnt:\n            ans += 1\n        cnt = ls[i] % 2\n    print(ans)", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    print(sum((1 & ~(x ^ y) for (x, y) in zip(a, a[1:]))))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    current_parity = a[0] % 2\n    operations = 0\n    for i in range(1, n):\n        if a[i] % 2 == current_parity:\n            operations += 1\n        else:\n            current_parity = a[i] % 2\n    print(operations)", "import sys\nimport os\nname_input_file = 'input.txt'\nname_output_file = 'output.txt'\nif os.path.exists('local.json'):\n    name_input_file = sys.argv[0].split('\\\\')[-1].split('.')[0] + '.txt'\n    name_output_file = sys.argv[0].split('\\\\')[-1].split('.')[0] + '_out.txt'\n\ndef read_data():\n    return sys.stdin.readline().strip()\n\ndef main():\n    c = int(read_data())\n    for _ in range(c):\n        n = int(read_data())\n        res = 0\n        data = []\n        for i in read_data().split(' '):\n            num = int(i)\n            data.append(num)\n        prev = data[0]\n        for i in range(1, n):\n            if data[i] % 2 == prev % 2:\n                res += 1\n            else:\n                prev = data[i]\n        print(res)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    ans = 0\n    for i in range(n - 1):\n        if (a[i] + a[i + 1]) % 2 == 0:\n            ans += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [0 if int(x) % 2 == 0 else 1 for x in input().split(' ')]\n    num = arr[0] ^ 2\n    ans = 0\n    prev = -1\n    for i in arr:\n        if i == prev:\n            ans += 1\n        prev = i\n    print(ans)", "def solve(numbers):\n    res = 0\n    for (left, right) in zip(numbers, numbers[1:]):\n        same_parity = left % 2 == right % 2 == 0 or left % 2 == right % 2 == 1\n        if same_parity:\n            res += 1\n    return res\nn = int(input())\nfor _ in range(n):\n    k = int(input())\n    lst = list(map(int, input().split()))\n    res = solve(lst)\n    print(res)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (ans, e, o) = (0, 0, 0)\n    i = 0\n    while i < n:\n        if l[i] % 2 == 0:\n            while i < n and l[i] % 2 == 0:\n                i += 1\n                e += 1\n            ans += e - 1\n            e = 0\n        else:\n            while i < n and l[i] % 2 == 1:\n                i += 1\n                o += 1\n            ans += o - 1\n            o = 0\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 0\n    for i in range(1, len(a)):\n        if a[i] & 1 == a[i - 1] & 1:\n            cnt += 1\n    print(cnt)", "n = int(input())\na = [0 for i in range(n)]\nfor i in range(n):\n    cnt = 0\n    list_len = int(input())\n    li = list(map(int, input().split()))\n    for k in range(list_len - 1):\n        if (li[k] + li[k + 1]) % 2 == 0:\n            cnt += 1\n    a[i] = cnt\nfor i in range(n):\n    print(a[i])", "import math\nt = int(input())\nfor _ in range(t):\n    su = 0\n    n = int(input())\n    c = 0\n    l = list(map(int, input().split()))\n    for i in range(n - 1):\n        if l[i] % 2 == l[i + 1] % 2:\n            c += 1\n    print(c)", "cases = int(input())\nfor c in range(cases):\n    n = int(input())\n    arr = [int(x) for x in input().split(' ')]\n    ans = 0\n    curr_par = 0\n    for i in range(1, n):\n        if arr[i] % 2 == arr[i - 1] % 2:\n            curr_par += 1\n        else:\n            ans += curr_par\n            curr_par = 0\n    ans += curr_par\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    cnt = 0\n    for i in range(1, n):\n        if l[i] % 2 == l[i - 1] % 2:\n            cnt += 1\n    print(cnt)"]