["import sys\nfrom collections import Counter\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\ndef readline():\n    return map(int, input().split())\nMOD = 10 ** 9 + 7\n\ndef main():\n    (n, p) = readline()\n    a = sorted(readline())\n    values = set()\n    for ai in a:\n        v = ai\n        while v not in values:\n            r = v % 4\n            if r == 2 or v == 0:\n                values.add(ai)\n                break\n            elif r == 0:\n                v //= 4\n            else:\n                v //= 2\n    c = Counter(map(int.bit_length, values))\n    x = y = 0\n    ans = 0\n    for i in range(1, p + 1):\n        z = (c.get(i, 0) + x + y) % MOD\n        ans += z\n        (x, y) = (y, z)\n    print(ans % MOD)\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef solve(n, p, arr):\n    m = 10 ** 9 + 7\n    nums = set()\n    candidate = []\n    arr.sort()\n    for num in arr:\n        val = num\n        while val > 1 and val not in nums:\n            if val % 4 == 0:\n                val //= 4\n            elif val % 2 == 1:\n                val //= 2\n            else:\n                break\n        if val not in nums:\n            candidate.append(num)\n            nums.add(num)\n    dp = [0] * p\n    numCombs = [0] * p\n    dp[-1] = 1\n    numCombs[-1] = 1\n    if p >= 2:\n        dp[-2] = 2\n        numCombs[-2] = 3\n    idx = p - 3\n    while idx > 0:\n        dp[idx] = (dp[idx + 1] + dp[idx + 2]) % m\n        numCombs[idx] = (dp[idx] + numCombs[idx + 1]) % m\n        idx -= 1\n    ans = 0\n    for num in candidate:\n        length = len(bin(num)[2:])\n        if length > p:\n            continue\n        elif length == p:\n            ans += 1\n            ans %= m\n        else:\n            ans += numCombs[length] + 1\n            ans %= m\n    print(ans)\n(n, p) = map(int, input().split())\narr = list(map(int, input().split()))\nsolve(n, p, arr)", "import sys\nfrom bisect import bisect\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\ndef readline():\n    return map(int, input().split())\nMOD = 10 ** 9 + 7\n\ndef main():\n    (n, p) = readline()\n    a = sorted(readline())\n    c = [0] * 32\n    for (i, ai) in enumerate(a):\n        v = ai\n        while True:\n            b = bisect(a, v, lo=0, hi=i)\n            if b > 0 and a[b - 1] == v:\n                break\n            r = v & 3\n            if r == 2 or v < a[0]:\n                c[ai.bit_length()] += 1\n                break\n            elif r == 0:\n                v >>= 2\n            else:\n                v >>= 1\n    x = y = 0\n    ans = 0\n    for i in range(1, p + 1):\n        z = ((c[i] if i < 32 else 0) + x + y) % MOD\n        ans += z\n        (x, y) = (y, z)\n    print(ans % MOD)\nmain()", "import sys\nfrom bisect import bisect\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\ndef readline():\n    return map(int, input().split())\nMOD = 10 ** 9 + 7\n\ndef main():\n    (n, p) = readline()\n    a = sorted(readline())\n    c = [0] * 32\n    for (i, ai) in enumerate(a):\n        v = ai\n        while True:\n            b = bisect(a, v, lo=0, hi=i)\n            if b > 0 and a[b - 1] == v:\n                break\n            r = v % 4\n            if r == 2 or v < a[0]:\n                c[ai.bit_length()] += 1\n                break\n            elif r == 0:\n                v //= 4\n            else:\n                v //= 2\n    x = y = 0\n    ans = 0\n    for i in range(1, p + 1):\n        z = ((c[i] if i < 32 else 0) + x + y) % MOD\n        ans += z\n        (x, y) = (y, z)\n    print(ans % MOD)\nmain()", "(n, p) = map(int, input().split())\nl = input().split()\nl = [int(c) for c in l]\nmod = 1000000007\nFib = [1, 1]\nfor i in range(p):\n    Fib.append((Fib[-1] + Fib[-2]) % mod)\npref = [0]\nfor i in range(len(Fib)):\n    pref.append((pref[-1] + Fib[i]) % mod)\n\ndef infS(k):\n    u = k.bit_length()\n    if u > p:\n        return 0\n    return pref[p - u + 1]\nl.sort()\nlset = set()\nfor v in l:\n    u = v\n    if u in lset:\n        continue\n    while u > 1 and u % 4 != 2:\n        if u % 4 == 0:\n            u //= 4\n        else:\n            u = (u - 1) // 2\n        if u in lset:\n            break\n    else:\n        lset.add(v)\nl = list(lset)\nres = 0\nfor k_ in l:\n    res += infS(k_)\n    res %= mod\nprint(res)", "(n, p) = map(int, input().split())\narr = list(map(int, input().split()))\narr.sort()\nusefulSeeds = {arr[0]}\n\ndef isUseful(n, S):\n    while n:\n        if n in S:\n            return False\n        elif n % 4 == 0:\n            n /= 4\n        elif n % 2 == 1:\n            n -= 1\n            n /= 2\n        else:\n            return True\n    else:\n        return True\nfor i in range(1, n):\n    if isUseful(arr[i], usefulSeeds):\n        usefulSeeds.add(arr[i])\nfrom math import log2, floor\ng = [0 for _ in range(35)]\nfor seed in usefulSeeds:\n    k = floor(log2(seed))\n    if k < p:\n        g[k] += 1\ndp = [0 for _ in range(p)]\nrep = 0\nmod = 10 ** 9 + 7\nfor i in range(p):\n    if i < 35:\n        dp[i] += g[i]\n    if i >= 1:\n        dp[i] += dp[i - 1]\n        dp[i] = dp[i] % mod\n    if i >= 2:\n        dp[i] += dp[i - 2]\n        dp[i] = dp[i] % mod\n    rep += dp[i]\n    rep = rep % mod\nprint(rep)", "import math\n(n, p) = [int(i) for i in input().strip().split()]\na = [int(i) for i in input().strip().split()]\nmod = 1000000007\na.sort()\nuseful = set()\nfor i in range(n):\n    x = a[i]\n    flag = False\n    while x > 0:\n        if x in useful:\n            flag = True\n        if x & 1:\n            x = x >> 1\n        elif x & 3:\n            break\n        else:\n            x = x >> 2\n    if not flag:\n        useful.add(a[i])\ncnt = [0 for i in range(30)]\nfor x in useful:\n    cnt[int(math.log2(x))] += 1\ndp = [0 for i in range(p)]\nans = 0\nfor i in range(p):\n    if i < 30:\n        dp[i] = cnt[i]\n    if i >= 1:\n        dp[i] += dp[i - 1]\n        if dp[i] >= mod:\n            dp[i] -= mod\n    if i >= 2:\n        dp[i] += dp[i - 2]\n        if dp[i] >= mod:\n            dp[i] -= mod\n    ans += dp[i]\n    if ans >= mod:\n        ans -= mod\nprint(ans)", "import math\n(n, p) = [int(i) for i in input().strip().split()]\na = [int(i) for i in input().strip().split()]\nmod = 1000000007\na.sort()\nuseful = set()\nfor i in range(n):\n    x = a[i]\n    flag = False\n    while x > 0:\n        if x in useful:\n            flag = True\n        if x & 1:\n            x = x >> 1\n        elif x & 3:\n            break\n        else:\n            x = x >> 2\n    if not flag:\n        useful.add(a[i])\ncnt = [0 for i in range(30)]\nfor x in useful:\n    cnt[int(math.log2(x))] += 1\ndp = [0 for i in range(p)]\nans = 0\nfor i in range(p):\n    if i < 30:\n        dp[i] = cnt[i]\n    if i >= 1:\n        dp[i] += dp[i - 1]\n        if dp[i] >= mod:\n            dp[i] -= mod\n    if i >= 2:\n        dp[i] += dp[i - 2]\n        if dp[i] >= mod:\n            dp[i] -= mod\n    ans += dp[i]\n    if ans >= mod:\n        ans -= mod\nprint(ans)"]