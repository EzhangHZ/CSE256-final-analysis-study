["import os\nimport sys\nfrom io import BytesIO, IOBase\nfrom collections import Counter, defaultdict\nfrom sys import stdin, stdout\nimport io\nimport math\nimport heapq\nimport bisect\nimport collections\n\ndef ceil(a, b):\n    return (a + b - 1) // b\ninf = float('inf')\n\ndef get():\n    return stdin.readline().rstrip()\nmod = 10 ** 5 + 7\nfor _ in range(int(get())):\n    n = int(get())\n    d1 = defaultdict(int)\n    d2 = defaultdict(int)\n    ans = 0\n    l = []\n    for i in range(n):\n        s = get()\n        d1[s[0]] += 1\n        d2[s[1]] += 1\n        l.append(s)\n    c = Counter(l)\n    for i in c:\n        ans += (d1[i[0]] - c[i]) * c[i]\n        ans += (d2[i[1]] - c[i]) * c[i]\n    print(ans // 2)", "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    prefix = defaultdict(int)\n    suffix = defaultdict(int)\n    entire = defaultdict(int)\n    answer = 0\n    for __ in range(n):\n        temp = input().strip()\n        a = temp[0]\n        b = temp[1]\n        prefix[a] += 1\n        suffix[b] += 1\n        entire[temp] += 1\n    for (k, v) in prefix.items():\n        answer += v * (v - 1) // 2\n    for (k, v) in suffix.items():\n        answer += v * (v - 1) // 2\n    for (k, v) in entire.items():\n        answer -= v * (v - 1)\n    print(answer)", "for _ in range(int(input())):\n    n = int(input())\n    d1 = {}\n    d2 = {}\n    d3 = {}\n    for t in range(n):\n        s = input()\n        if s in d1:\n            d1[s] += 1\n        else:\n            d1[s] = 1\n            if s[0] in d2:\n                d2[s[0]] += [s]\n            else:\n                d2[s[0]] = [s]\n            if s[1] in d3:\n                d3[s[1]] += [s]\n            else:\n                d3[s[1]] = [s]\n    co = 0\n    for i in d2:\n        l = d2[i]\n        l = [d1[j] for j in l]\n        co += (sum(l) ** 2 - sum([j ** 2 for j in l])) // 2\n    for i in d3:\n        l = d3[i]\n        l = [d1[j] for j in l]\n        co += (sum(l) ** 2 - sum([j ** 2 for j in l])) // 2\n    print(co)", "def main():\n    n = int(input())\n    graph = [[0] * 11 for i in range(11)]\n    for i in range(n):\n        s = input()\n        graph[ord(s[0]) - 97][ord(s[1]) - 97] += 1\n    (stroki, stolb) = ([0] * 11, [0] * 11)\n    for i in range(11):\n        for j in range(11):\n            stroki[i] += graph[i][j]\n            stolb[j] += graph[i][j]\n    ans = 0\n    for i in range(11):\n        for j in range(11):\n            ans += graph[i][j] * (stroki[i] - graph[i][j] + stolb[j] - graph[i][j])\n    print(ans // 2)\nfor i in range(int(input())):\n    main()", "import sys\nfrom collections import defaultdict\n\ndef solution(seq):\n    res = 0\n    first = defaultdict(int)\n    second = defaultdict(int)\n    uniq = defaultdict(int)\n    for i in seq:\n        res += first[i[0]] - uniq[i]\n        res += second[i[1]] - uniq[i]\n        first[i[0]] += 1\n        second[i[1]] += 1\n        uniq[i] += 1\n    return res\ninp = [line.strip() for line in sys.stdin]\ni = 1\nwhile i < len(inp):\n    cnt = int(inp[i])\n    print(solution(inp[i + 1:i + cnt + 1]))\n    i = i + cnt + 1", "for _ in range(int(input())):\n    n = int(input())\n    a = [[0 for _ in range(11)] for _ in range(11)]\n    ans = 0\n    for i in range(n):\n        temp = input()\n        a[ord(temp[0]) - 97][ord(temp[1]) - 97] += 1\n    temp = 0\n    for i in range(11):\n        temp = 0\n        for j in range(11):\n            ans -= a[i][j] ** 2\n            temp += a[i][j]\n        ans += temp ** 2\n    for i in range(11):\n        temp = 0\n        for j in range(11):\n            ans -= a[j][i] ** 2\n            temp += a[j][i]\n        ans += temp ** 2\n    print(ans // 2)", "for t in range(int(input())):\n    ans = 0\n    n = int(input())\n    dic = {}\n    for i in range(1, 12):\n        for j in range(1, 12):\n            dic[100 * i + j] = 0\n    for i in range(n):\n        x = input()\n        dic[100 * ord(x[0]) + ord(x[1]) - 96 - 9600] += 1\n    for i in range(1, 12):\n        sum = 0\n        for j in range(1, 12):\n            sum += dic[100 * i + j]\n        ans += sum ** 2\n    for i in range(1, 12):\n        sum = 0\n        for j in range(1, 12):\n            sum += dic[100 * j + i]\n        ans += sum ** 2\n    for (i, j) in dic.items():\n        ans -= 2 * j ** 2\n    print(ans // 2)", "import sys\nfrom string import ascii_lowercase as alp\ninput = sys.stdin.readline\n\ndef count(a):\n    d = {}\n    for c1 in alp:\n        for c2 in alp:\n            d[c1, c2] = 0\n    for s in a:\n        d[s[0], s[1]] += 1\n    res = 0\n    for c1 in alp:\n        total = sum([d[c1, x] for x in alp])\n        for c2 in alp:\n            cur = d[c1, c2]\n            res += cur * (total - cur)\n    return res\n\ndef solve():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(input().replace('\\n', ''))\n    print((count(a) + count([x[::-1] for x in a])) // 2)\ntst = int(input())\nfor tt in range(tst):\n    solve()", "import math\n\ndef solve():\n    n = int(input())\n    d = dict()\n    first = dict()\n    second = dict()\n    arr = []\n    for i in range(n):\n        a = input()\n        if a in d:\n            d[a] += 1\n        else:\n            d[a] = 1\n        if a[0] in first:\n            first[a[0]] += 1\n        else:\n            first[a[0]] = 1\n        if a[1] in second:\n            second[a[1]] += 1\n        else:\n            second[a[1]] = 1\n    ans = 0\n    for x in d:\n        ans += d[x] * (first[x[0]] - d[x])\n        ans += d[x] * (second[x[1]] - d[x])\n        first[x[0]] -= d[x]\n        second[x[1]] -= d[x]\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "def solve():\n    s = {}\n    f = {}\n    mp = {}\n    for _ in range(int(input())):\n        a = input()\n        mp[a] = mp.get(a, 0) + 1\n        s[a[0]] = s.get(a[0], 0) + 1\n        f[a[1]] = f.get(a[1], 0) + 1\n    ans = 0\n    for (a, i) in mp.items():\n        ans += i * (s[a[0]] - i) + i * (f[a[1]] - i)\n    print(ans // 2)\nt = int(input())\nfor i in range(t):\n    solve()", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input().strip())\n    dic = defaultdict(int)\n    for i in range(n):\n        temp = input().strip()\n        dic[temp] += 1\n    brr = []\n    ans = 0\n    for i in range(11):\n        brr.append(chr(97 + i))\n    for ele in brr:\n        hor1 = []\n        for st_e in dic.keys():\n            if st_e[0] == ele:\n                hor1.append(dic[st_e])\n        l1 = len(hor1)\n        for r in range(l1 - 1):\n            for z in range(r + 1, l1):\n                ans += hor1[r] * hor1[z]\n        hor2 = []\n        for st_e in dic.keys():\n            if st_e[1] == ele:\n                hor2.append(dic[st_e])\n        l2 = len(hor2)\n        for r in range(l2 - 1):\n            for z in range(r + 1, l2):\n                ans += hor2[r] * hor2[z]\n    print(ans)", "for tcase in range(int(input())):\n    a = [[0] * 11 for i in range(11)]\n    for _ in range(int(input())):\n        s = input()\n        i = ord(s[0]) - ord('a')\n        j = ord(s[1]) - ord('a')\n        a[i][j] += 1\n    (r, c) = ([0] * 11, [0] * 11)\n    for i in range(11):\n        for j in range(11):\n            r[i] += a[i][j]\n            c[j] += a[i][j]\n    ans = 0\n    for i in range(11):\n        for j in range(11):\n            ans += a[i][j] * (r[i] + c[j] - 2 * a[i][j])\n    print(ans // 2)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ar = []\n    temp = []\n    for x in range(15):\n        temp = []\n        for y in range(15):\n            temp.append(0)\n        ar.append(temp)\n    ans = 0\n    for x in range(n):\n        ch = input()\n        a = ord(ch[0]) - 97\n        b = ord(ch[1]) - 97\n        ar[a][b] += 1\n    for x in range(15):\n        s = 0\n        for y in range(15):\n            if ar[x][y] > 1:\n                ans -= math.comb(ar[x][y], 2)\n            s += ar[x][y]\n        ans += math.comb(s, 2)\n    for x in range(15):\n        s = 0\n        for y in range(15):\n            if ar[y][x] > 1:\n                ans -= math.comb(ar[y][x], 2)\n            s += ar[y][x]\n        ans += math.comb(s, 2)\n    print(ans)", "T = int(input())\nfrom collections import defaultdict, Counter\nfrom math import comb\nfor _ in range(T):\n    l = int(input())\n    (f_dict, s_dict) = (defaultdict(list), defaultdict(list))\n    st = []\n    for _ in range(l):\n        s = input()\n        st.append(s)\n        f_dict[s[0]].append(s)\n        s_dict[s[1]].append(s)\n    cnt = 0\n    for v in f_dict.values():\n        if len(v) >= 2:\n            cnt += comb(len(v), 2)\n    for v in s_dict.values():\n        if len(v) >= 2:\n            cnt += comb(len(v), 2)\n    c = Counter(st)\n    for v in c.values():\n        if v >= 2:\n            cnt -= comb(v, 2) * 2\n    print(cnt)", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    letters = 'abcdefghijk'\n    db = {c: {h: 0 for h in letters} for c in letters}\n    de = {h: {c: 0 for c in letters} for h in letters}\n    ans = 0\n    for p in range(n):\n        s = input()\n        (c, h) = (s[0], s[1])\n        db[c][h] += 1\n        de[h][c] += 1\n    for c in letters:\n        for h in db[c]:\n            ans += db[c][h] * sum([db[c][other] for other in db[c] if other != h])\n            db[c][h] = 0\n    for h in letters:\n        for c in de[h]:\n            if c != h:\n                ans += de[h][c] * sum([de[h][other] for other in de[h] if other != c])\n                de[h][c] = 0\n    print(ans)", "from math import comb\nT = int(input())\n\ndef solve(l):\n    cnt = 0\n    st_d = {}\n    ed_d = {}\n    same_d = {}\n    for c in l:\n        if c[0] in st_d:\n            st_d[c[0]] += 1\n        else:\n            st_d[c[0]] = 1\n        if c[1] in ed_d:\n            ed_d[c[1]] += 1\n        else:\n            ed_d[c[1]] = 1\n        if c in same_d:\n            same_d[c] += 1\n        else:\n            same_d[c] = 1\n    for key in st_d.keys():\n        if st_d[key] == 1:\n            continue\n        else:\n            cnt += comb(st_d[key], 2)\n    for key in ed_d.keys():\n        if ed_d[key] == 1:\n            continue\n        else:\n            cnt += comb(ed_d[key], 2)\n    for key in same_d.keys():\n        if same_d[key] == 1:\n            continue\n        else:\n            cnt -= 2 * comb(same_d[key], 2)\n    return cnt\nfor _ in range(T):\n    N = int(input())\n    l = [input() for _ in range(N)]\n    print(solve(l))", "import fileinput\n\ndef getanswer(strings):\n    counts = {}\n    for string in strings:\n        counts[string] = counts.get(string, 0) + 1\n    matches = 0\n    unique_strings_present = list(counts.keys())\n    for string in unique_strings_present[:-1]:\n        num = counts[string]\n        multiplier = 0\n        for char in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']:\n            multiplier += counts.get(string[0] + char, 0) + counts.get(char + string[1], 0)\n        matches += num * (multiplier - 2 * num)\n        counts[string] = 0\n    return matches\n\ndef solve():\n    ins = []\n    for line in fileinput.input():\n        ins.append(line.strip('\\n'))\n    num_tests = int(ins[0])\n    j = 1\n    for i in range(num_tests):\n        num_strings = int(ins[j])\n        strings = ins[j + 1:j + num_strings + 1]\n        j += num_strings + 1\n        c = getanswer(strings)\n        print(c)\nsolve()", "from random import getrandbits\nRANDOM = getrandbits(32)\n\nclass Wrapper(int):\n\n    def __init__(self, x):\n        int.__init__(x)\n\n    def __hash__(self):\n        return super(Wrapper, self).__hash__() ^ RANDOM\nT = int(input())\nq = []\nfor i in range(T):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(input())\n    q.append((arr, n))\ntarget = 'abcdefghijk'\n\ndef solve(arr, n):\n    dist = dict()\n    for a in target:\n        for b in target:\n            dist[a + b] = 0\n    for a in arr:\n        dist[a] += 1\n    ans = 0\n    for key in dist:\n        if dist[key] > 0:\n            left = ord(key[0]) - ord('a')\n            for i in range(left + 1, 11):\n                ans += dist[target[i] + key[1]] * dist[key]\n            right = ord(key[1]) - ord('a')\n            for i in range(right + 1, 11):\n                ans += dist[key[0] + target[i]] * dist[key]\n    print(ans)\nfor (arr, n) in q:\n    solve(arr, n)", "t = int(input())\nfor i in range(t):\n    lst1 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']\n    lst2 = []\n    for j in lst1:\n        s1 = j\n        lst3 = []\n        for k in lst1:\n            s1 += k\n            lst3.append(s1)\n            s1 = j\n        lst2.append(lst3)\n    for j in lst1:\n        s1 = j\n        lst3 = []\n        for k in lst1:\n            s1 = k + s1\n            lst3.append(s1)\n            s1 = j\n        lst2.append(lst3)\n    dic = {}\n    for j in lst2:\n        for k in j:\n            dic[k] = 0\n    n = int(input())\n    lst = []\n    for j in range(n):\n        s = input()\n        lst.append(s)\n    for j in lst:\n        dic[j] += 1\n    c = 0\n    l = 11\n    for j in lst2:\n        for k in range(11):\n            for f in range(k + 1, 11):\n                a = dic[j[k]]\n                b = dic[j[f]]\n                c += a * b\n    print(c)", "from collections import Counter\n\ndef main():\n    n = int(input())\n    words = []\n    for i in range(n):\n        s = input()\n        words.append(s)\n    freq = Counter(words)\n    f = {}\n    l = {}\n    for z in words:\n        al = z[0]\n        if al not in f:\n            f[al] = 0\n        f[al] += 1\n    for z in words:\n        al = z[1]\n        if al not in l:\n            l[al] = 0\n        l[al] += 1\n    ans = 0\n    for (k, v) in f.items():\n        ans += v * (v - 1) // 2\n    for (k, v) in l.items():\n        ans += v * (v - 1) // 2\n    for (k, v) in freq.items():\n        ans -= v * (v - 1)\n    return ans\nfor _ in range(int(input())):\n    print(main())", "a = 'abcdefghijk'\nl = []\nfor i in range(11):\n    for j in range(11):\n        l.append(a[i] + a[j])\nw = []\nfor i in range(len(l)):\n    p = []\n    for j in range(len(l)):\n        if (l[i][0] == l[j][0]) ^ (l[i][1] == l[j][1]):\n            p.append(j)\n    w.append(tuple(p))\nfor _ in range(int(input())):\n    dic = {}\n    for i in l:\n        dic[i] = 0\n    for i in range(int(input())):\n        dic[input()] += 1\n    ans = 0\n    for i in range(len(w)):\n        for j in w[i]:\n            ans += dic[l[i]] * dic[l[j]]\n    print(ans // 2)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = defaultdict(int)\n    f = defaultdict(int)\n    sec = defaultdict(int)\n    s = set([])\n    for i in range(n):\n        x = input().strip()\n        d[x] += 1\n        f[x[0]] += 1\n        sec[x[1]] += 1\n        s.add(x)\n    ans = 0\n    for i in 'abcdefghijk':\n        ans += f[i] * (f[i] - 1) // 2\n        ans += sec[i] * (sec[i] - 1) // 2\n    for i in s:\n        ans -= d[i] * (d[i] - 1)\n    print(ans)", "def compute(dictionary, first_letter_dict, second_letter_dict):\n    tmp_inc = 0\n    tmp_dec = 0\n    for first in first_letter_dict:\n        tmp_inc += first_letter_dict[first] * (first_letter_dict[first] - 1) / 2\n    for second in second_letter_dict:\n        tmp_inc += second_letter_dict[second] * (second_letter_dict[second] - 1) / 2\n    for vocab in dictionary:\n        tmp_dec += dictionary[vocab] * (dictionary[vocab] - 1)\n    return int(tmp_inc - tmp_dec)\ncount_of_test = int(input())\nfor _ in range(count_of_test):\n    length_of_arr = int(input())\n    dictionary = {}\n    first_letter_dict = {}\n    second_letter_dict = {}\n    for j in range(length_of_arr):\n        item = input()\n        if item not in dictionary:\n            dictionary[item] = 0\n        dictionary[item] += 1\n        first_letter = item[0]\n        second_letter = item[1]\n        if first_letter not in first_letter_dict:\n            first_letter_dict[first_letter] = 0\n        first_letter_dict[first_letter] += 1\n        if second_letter not in second_letter_dict:\n            second_letter_dict[second_letter] = 0\n        second_letter_dict[second_letter] += 1\n    print(compute(dictionary, first_letter_dict, second_letter_dict))", "import sys\ngetline = sys.stdin.readline\n\ndef read_int():\n    return int(getline())\n\ndef read_ints():\n    return list(map(int, getline().split()))\n\ndef read_s():\n    return str(getline().strip())\n\ndef read_ss():\n    return list(map(str, getline().strip().split()))\nfrom collections import defaultdict\nt = read_int()\nfor _ in range(t):\n    n = read_int()\n    starts = defaultdict(int)\n    ends = defaultdict(int)\n    dups = defaultdict(int)\n    ans = 0\n    for line in range(n):\n        s = read_s()\n        p = s[0]\n        q = s[1]\n        ans += starts[p] + ends[q] - dups[s] * 2\n        starts[p] += 1\n        ends[q] += 1\n        dups[s] += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    matrix = []\n    for _ in range(11):\n        matrix.append([0] * 11)\n    n = int(input())\n    my_sum = 0\n    for j in range(n):\n        new_str = str(input())\n        first = ord(new_str[0]) - 97\n        second = ord(new_str[1]) - 97\n        matrix[first][second] += 1\n    for k in range(11):\n        for kk in range(11):\n            if kk != 10:\n                my_sum += matrix[k][kk] * sum(matrix[k][kk + 1:])\n            if k != 10:\n                my_sum += matrix[k][kk] * sum((matrix[num][kk] for num in range(k + 1, 11)))\n    print(my_sum)", "from collections import defaultdict, deque\nimport math\nfrom random import random, shuffle\nfrom sys import setrecursionlimit\nimport os, sys\ncwd = os.getcwd()\nif os.path.exists(cwd + '/test/input.txt'):\n    sys.stdin = open(cwd + '/test/input.txt', 'r')\n    sys.stdout = open(cwd + '/test/output.txt', 'w')\nsetrecursionlimit(10 ** 6)\nmi = lambda : map(int, input().split())\nli = lambda : list(mi())\n(dx, dy) = ([1, 1, -1, -1], [1, -1, 1, -1])\nlowbit = lambda x: x & -x\n\nclass BIT:\n\n    def __init__(self, n):\n        self.bit = [0] * (n + 1)\n\n    def upd(self, idx, val):\n        bit = self.bit\n        while idx <= len(bit):\n            bit[idx] += val\n            idx += lowbit(idx)\n\n    def query(self, idx):\n        res = 0\n        bit = self.bit\n        while idx > 0:\n            res += bit[idx]\n            idx -= lowbit(idx)\n        return res\n\ndef solve():\n    T = int(input())\n    while T:\n        T -= 1\n        n = int(input())\n        (mp1, mp2, mp) = (defaultdict(int), defaultdict(int), defaultdict(int))\n        res = 0\n        for i in range(n):\n            s = input()\n            res += mp1[s[0]] + mp2[s[1]] - mp[s] * 2\n            mp1[s[0]] += 1\n            mp2[s[1]] += 1\n            mp[s] += 1\n        print(res)\nsolve()", "for _ in range(int(input())):\n    d = {}\n    n = int(input())\n    for q in range(n):\n        s = input()\n        if s not in d:\n            d[s] = 0\n        d[s] += 1\n    L = d.keys()\n    L = sorted(L)\n    res = 0\n    for i in L:\n        beg = ord(i[0]) + 1\n        for p in range(beg, 108):\n            st = chr(p) + i[1]\n            if st in d:\n                res += d[i] * d[st]\n        beg = ord(i[1]) + 1\n        for p in range(beg, 108):\n            st = i[0] + chr(p)\n            if st in d:\n                res += d[i] * d[st]\n    print(res)", "from collections import defaultdict, Counter\nfor case in range(int(input())):\n    n = int(input())\n    arr = [input() for _ in range(n)]\n    (left, right) = ('', '')\n    for i in arr:\n        left += i[0]\n        right += i[1]\n    (left_c, right_c) = (Counter(left), Counter(right))\n    arrCounter = Counter(arr)\n    duplicates = sum(((v - 1) * v // 2 for (k, v) in arrCounter.items() if v > 1))\n    res = sum(((v - 1) * v // 2 for (k, v) in left_c.items() if v > 1))\n    res += sum(((v - 1) * v // 2 for (k, v) in right_c.items() if v > 1))\n    res -= duplicates * 2\n    print(res)", "from collections import defaultdict\nfor _ in range(int(input())):\n    d = defaultdict(int)\n    for __ in range(int(input())):\n        d[input()] += 1\n    ans = 0\n    for word in list(d.keys()):\n        (first, second) = (word[0], word[1])\n        for char in 'abcdefghijk':\n            if char != second:\n                ans += d[word] * d[first + char]\n            if char != first:\n                ans += d[word] * d[char + second]\n    print(ans // 2)", "import sys\ninput = sys.stdin.readline\n\ndef insr():\n    s = input()\n    return s[:len(s) - 1]\n\ndef pair_count(d):\n    return sum((i * (i - 1) // 2 for i in d.values()))\n\ndef Difference(array, m):\n    (changed, same) = ({}, {})\n    for s in array:\n        same[s] = same.get(s, 0) + 1\n        for i in range(m):\n            t = s[:i] + '#' + s[i + 1:]\n            changed[t] = changed.get(t, 0) + 1\n    return pair_count(changed) - pair_count(same) * m\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    set_s = []\n    for i in range(n):\n        set_s.append(insr())\n    count = 0\n    print(Difference(set_s, 2))", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = [[0 for _ in range(11)] for __ in range(11)]\n    for _ in range(n):\n        s = input()\n        x = ord(s[0]) - ord('a')\n        y = ord(s[1]) - ord('a')\n        a[x][y] += 1\n    r = 0\n    for i in range(11):\n        d = a[i][0]\n        for j in range(1, 11):\n            r += d * a[i][j]\n            d += a[i][j]\n        d = a[0][i]\n        for j in range(1, 11):\n            r += d * a[j][i]\n            d += a[j][i]\n    print(r)", "for _ in range(int(input())):\n    start = {}\n    end = {}\n    g = {}\n    for j in range(int(input())):\n        a = input()\n        if a in g:\n            g[a] += 1\n        else:\n            g[a] = 1\n        if a[0] in start:\n            start[a[0]] += [a]\n        else:\n            start[a[0]] = [a]\n        if a[1] in end:\n            end[a[1]] += [a]\n        else:\n            end[a[1]] = [a]\n    ans = 0\n    for item in start:\n        a = start[item]\n        b = list(set(a))\n        cc = 0\n        for it in b:\n            cache = len(a)\n            cache -= g[it]\n            cache = cache * g[it]\n            cc += cache\n        ans += cc // 2\n    start = end\n    for item in start:\n        a = start[item]\n        b = list(set(a))\n        cc = 0\n        for it in b:\n            cache = len(a)\n            cache -= g[it]\n            cache = cache * g[it]\n            cc += cache\n        ans += cc // 2\n    print(ans)", "n = input()\nfor _ in range(int(n)):\n    num = int(input())\n    Dict = dict()\n    arr1 = dict()\n    arr2 = dict()\n    ans = 0\n    for i in range(num):\n        str1 = input()\n        if str1 in Dict:\n            Dict[str1] += 1\n        else:\n            Dict[str1] = 1\n        a = str1[0]\n        b = str1[1]\n        if a in arr1:\n            arr1[a] += 1\n        else:\n            arr1[a] = 1\n        if b in arr2:\n            arr2[b] += 1\n        else:\n            arr2[b] = 1\n    for (key, value) in Dict.items():\n        (a, b) = (key[0], key[1])\n        ans += value * (arr1[a] - value)\n        ans += value * (arr2[b] - value)\n    print(int(ans / 2))", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    d1 = defaultdict(int)\n    fr = defaultdict(int)\n    d2 = defaultdict(int)\n    ans = 0\n    for i in range(n):\n        s = input()\n        ans += d1[s[0]] + d2[s[1]] - 2 * fr[s]\n        fr[s] += 1\n        d1[s[0]] += 1\n        d2[s[1]] += 1\n    print(ans)", "def compute(vocab):\n    add = 0\n    dec = 0\n    for k in vocab.keys():\n        if 'first' in k:\n            add += vocab[k] * (vocab[k] - 1) / 2\n        elif 'second' in k:\n            add += vocab[k] * (vocab[k] - 1) / 2\n        else:\n            dec += vocab[k] * (vocab[k] - 1)\n    return int(add - dec)\nn = int(input())\nfor _ in range(n):\n    vocab = {}\n    m = int(input())\n    for i in range(m):\n        item = input()\n        if item not in vocab:\n            vocab[item] = 1\n        else:\n            vocab[item] += 1\n        letter1 = 'first ' + item[0]\n        if letter1 not in vocab:\n            vocab[letter1] = 1\n        else:\n            vocab[letter1] += 1\n        letter2 = 'second ' + item[1]\n        if letter2 not in vocab:\n            vocab[letter2] = 1\n        else:\n            vocab[letter2] += 1\n    print(compute(vocab))", "size = int(input())\nfor i in range(size):\n    testSize = int(input())\n    strings_start = {}\n    strings_end = {}\n    for j in range(testSize):\n        string = input()\n        try:\n            strings_start[string[0]]\n        except:\n            strings_start[string[0]] = {string: 0}\n        try:\n            strings_start[string[0]][string] += 1\n        except:\n            strings_start[string[0]][string] = 1\n        try:\n            strings_end[string[1]]\n        except:\n            strings_end[string[1]] = {string: 0}\n        try:\n            strings_end[string[1]][string] += 1\n        except:\n            strings_end[string[1]][string] = 1\n    sum = 0\n    for ss in strings_start:\n        k = list(strings_start[ss].keys())\n        for i in range(len(k) - 1):\n            for j in range(i + 1, len(k)):\n                sum += strings_start[ss][k[i]] * strings_start[ss][k[j]]\n    for ss in strings_end:\n        k = list(strings_end[ss].keys())\n        for i in range(len(k) - 1):\n            for j in range(i + 1, len(k)):\n                sum += strings_end[ss][k[i]] * strings_end[ss][k[j]]\n    print(sum)", "for _ in range(int(input())):\n    c = [[0] * 11 for _ in range(11)]\n    for _ in range(int(input())):\n        s = input()\n        c[ord(s[0]) - ord('a')][ord(s[1]) - ord('a')] += 1\n    ans = 0\n    for i in range(11):\n        for j in range(11):\n            for k in range(j + 1, 11):\n                ans += c[i][j] * c[i][k]\n                ans += c[j][i] * c[k][i]\n    print(ans)", "a = 'abcdefghijk'\nfor t in range(int(input())):\n    n = int(input())\n    rs = 0\n    ms = [[0] * 11 for i in range(11)]\n    for i in range(n):\n        s = input()\n        ms[ord(s[0]) - 97][ord(s[1]) - 97] += 1\n    for i in range(11):\n        for j in range(11):\n            for k in range(11):\n                if k != j:\n                    rs += ms[i][j] * ms[i][k]\n                if k != i:\n                    rs += ms[i][j] * ms[k][j]\n    print(rs // 2)", "from collections import defaultdict\ntc = int(input())\nfor _ in range(1, tc + 1):\n    n = int(input())\n    (a, b) = ([], [])\n    for i in range(12):\n        a.append([0] * 12)\n        b.append([0] * 12)\n    for i in range(n):\n        s = input()\n        (row, col) = (ord(s[0]) - 96, ord(s[1]) - 96)\n        a[row][col] += 1\n        b[col][row] += 1\n    c = 0\n    for i in range(12):\n        for j in range(12):\n            for k in range(j + 1, 12):\n                c += a[i][j] * a[i][k] + b[i][j] * b[i][k]\n    print(c)", "from collections import defaultdict\nTESTS = int(input())\nfor _ in range(TESTS):\n    l = int(input())\n\n    def init():\n        return 0\n    strings = defaultdict(init)\n    start_strings = defaultdict(init)\n    end_strings = defaultdict(init)\n    counter = 0\n    for _ in range(l):\n        s = input()\n        (a, b) = s\n        counter += start_strings[a] + end_strings[b] - 2 * strings[s]\n        strings[s] += 1\n        start_strings[a] += 1\n        end_strings[b] += 1\n    print(counter)", "for _ in range(int(input())):\n    c = [[0] * 11 for _ in range(11)]\n    for _ in range(int(input())):\n        s = input()\n        c[ord(s[0]) - ord('a')][ord(s[1]) - ord('a')] += 1\n    ans = 0\n    for i in range(11):\n        for j in range(11):\n            for k in range(j + 1, 11):\n                ans += c[i][j] * c[i][k]\n                ans += c[j][i] * c[k][i]\n    print(ans)", "import math as m\ni = int(input())\ninp = []\nfor a in range(i):\n    n = int(input())\n    x = []\n    for i in range(n):\n        x += [input()]\n    inp += [x]\nfor l in inp:\n    ret = 0\n    di = {}\n    for c in 'abcdefghijk':\n        di[c] = {}\n        for d in 'abcdefghijk':\n            di[c][d] = 0\n    for s in l:\n        di[s[0]][s[1]] += 1\n    for z in range(97, 108):\n        c = chr(z)\n        for i in range(97, 108):\n            for j in range(i + 1, 108):\n                ret += di[c][chr(i)] * di[c][chr(j)]\n    di = {}\n    for c in 'abcdefghijk':\n        di[c] = {}\n        for d in 'abcdefghijk':\n            di[c][d] = 0\n    for s in l:\n        di[s[1]][s[0]] += 1\n    for z in range(97, 108):\n        c = chr(z)\n        for i in range(97, 108):\n            for j in range(i + 1, 108):\n                ret += di[c][chr(i)] * di[c][chr(j)]\n    print(ret)", "from collections import defaultdict as dfd\n\ndef solve(array):\n    ans = 0\n    (book_head, cnt_head) = ({}, dfd(int))\n    for i in range(97, 108):\n        book_head[chr(i)] = dfd(int)\n    (book_tail, cnt_tail) = ({}, dfd(int))\n    for i in range(97, 108):\n        book_tail[chr(i)] = dfd(int)\n    for s in array:\n        (h, t) = (s[0], s[1])\n        ans += cnt_head[h] - book_head[h][t]\n        ans += cnt_tail[t] - book_tail[t][h]\n        book_head[h][t] += 1\n        cnt_head[h] += 1\n        book_tail[t][h] += 1\n        cnt_tail[t] += 1\n    return ans\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    array = []\n    for _ in range(N):\n        array.append(str(input()))\n    print(solve(array))", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    (dstart, dend) = (defaultdict(int), defaultdict(int))\n    D = defaultdict(int)\n    ans = 0\n    for i in range(n):\n        s = input()\n        ans += dstart[s[0]] + dend[s[1]]\n        if s in D:\n            ans -= 2 * D[s]\n        D[s] += 1\n        dstart[s[0]] += 1\n        dend[s[1]] += 1\n    print(ans)", "t = int(input())\nout = ''\nalp = 'abcdefghijk'\nfor _ in range(t):\n    count = {}\n    count1 = {}\n    count2 = {}\n    for l in alp:\n        count1[l] = 0\n        count2[l] = 0\n        for l2 in alp:\n            count[l + l2] = 0\n    n = int(input())\n    ans = 0\n    for _ in range(n):\n        string = input()\n        ans += count1[string[0]] - count[string]\n        ans += count2[string[1]] - count[string]\n        count1[string[0]] += 1\n        count2[string[1]] += 1\n        count[string] += 1\n    out += str(ans) + '\\n'\nprint(out)", "for t in range(int(input())):\n    n = int(input())\n    was = {}\n    (beg, end) = ({}, {})\n    ans = 0\n    for i in range(n):\n        s = input()\n        if s not in was:\n            was[s] = 0\n        if s[0] not in beg:\n            beg[s[0]] = 0\n        if s[1] not in end:\n            end[s[1]] = 0\n        ans += beg[s[0]] + end[s[1]] - 2 * was[s]\n        was[s] += 1\n        beg[s[0]] += 1\n        end[s[1]] += 1\n    print(ans)", "T = int(input())\nfor case in range(T):\n    n = int(input())\n    h = {}\n    h1 = {}\n    h2 = {}\n    ans = 0\n    for i in range(n):\n        x = input()\n        (s, t) = tuple(x)\n        h.setdefault(x, 0)\n        h1.setdefault(s, 0)\n        h2.setdefault(t, 0)\n        ans += h1[s] + h2[t] - 2 * h[x]\n        h[x] += 1\n        h1[s] += 1\n        h2[t] += 1\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    d1 = defaultdict(int)\n    fr = defaultdict(int)\n    d2 = defaultdict(int)\n    ans = 0\n    for i in range(n):\n        s = input()\n        ans += d1[s[0]] + d2[s[1]] - 2 * fr[s]\n        fr[s] += 1\n        d1[s[0]] += 1\n        d2[s[1]] += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = []\n    for i in range(n):\n        xyz = input()\n        s.append(xyz)\n    arr = [[0 for i in range(12)] for i in range(12)]\n    for i in range(n):\n        x = s[i][0]\n        y = s[i][1]\n        xi = int(ord(x) - ord('a'))\n        yi = int(ord(y) - ord('a'))\n        arr[xi][yi] += 1\n    rsum = [[0 for i in range(12)] for i in range(12)]\n    csum = [[0 for i in range(12)] for i in range(12)]\n    for i in range(12):\n        cursum = 0\n        for j in range(11, -1, -1):\n            cursum += arr[i][j]\n            rsum[i][j] = cursum\n    for j in range(12):\n        cursum = 0\n        for i in range(11, -1, -1):\n            cursum += arr[i][j]\n            csum[i][j] = cursum\n    ans = 0\n    for i in range(12):\n        for j in range(11):\n            ans += (rsum[i][j] - rsum[i][j + 1]) * rsum[i][j + 1]\n    for i in range(12):\n        for j in range(11):\n            ans += (csum[j][i] - csum[j + 1][i]) * csum[j + 1][i]\n    print(ans)", "from collections import Counter\nfrom itertools import groupby\n\ndef solve():\n    n = int(input())\n    s = [tuple(input()) for _ in range(n)]\n    groups = []\n    for (key, val) in groupby(sorted(s, key=lambda x: x[0]), key=lambda x: x[0]):\n        groups.append(list(map(lambda x: x[1], val)))\n    for (key, val) in groupby(sorted(s, key=lambda x: x[1]), key=lambda x: x[1]):\n        groups.append(list(map(lambda x: x[0], val)))\n    ans = 0\n    for group in groups:\n        m = len(group)\n        ans += m * (m - 1) // 2\n        for k in Counter(group).values():\n            ans -= k * (k - 1) // 2\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nt = inp()\nfor test in range(t):\n    n = inp()\n    (dic, count) = ({}, 0)\n    for i in range(n):\n        s = insr()\n        (c1, c2, v) = (s[0], s[1], 0)\n        if (c1, v) not in dic:\n            dic[c1, v] = 0\n        if (c1, c2) not in dic:\n            dic[c1, c2] = 0\n        if (v, c2) not in dic:\n            dic[v, c2] = 0\n        dic[c1, v] += 1\n        dic[c1, c2] += 1\n        dic[v, c2] += 1\n    for pair in dic:\n        (u, v) = (pair[0], pair[1])\n        if v == 0 or u == 0:\n            count += math.comb(dic[u, v], 2)\n        else:\n            count -= 2 * math.comb(dic[u, v], 2)\n    print(count)", "from collections import defaultdict as dict\nfor _ in ' ' * int(input()):\n    d_f = dict(int)\n    d_s = dict(int)\n    cnt = dict(int)\n    ans = 0\n    for _ in ' ' * int(input()):\n        s = input()\n        cnt[s] += 1\n        ans += d_f[s[0]] + d_s[s[1]] - 2 * cnt[s] + 2\n        d_f[s[0]] += 1\n        d_s[s[1]] += 1\n    print(ans)", "t = int(input())\n\ndef val(a):\n    return ord(a) - ord('a')\nfor i in range(t):\n    l = []\n    n = int(input())\n    freq1 = [0] * 121\n    freq2 = [0] * 121\n    for j in range(n):\n        temp = input()\n        freq1[val(temp[0]) * 11 + val(temp[1])] += 1\n        freq2[val(temp[1]) * 11 + val(temp[0])] += 1\n    ans = 0\n    for j in range(11):\n        total = sum(freq1[j * 11:(j + 1) * 11])\n        prev = 0\n        for k in freq1[j * 11:(j + 1) * 11]:\n            if k != 0:\n                ans += (total - k - prev) * k\n                prev += k\n        total = sum(freq2[j * 11:(j + 1) * 11])\n        prev = 0\n        for k in freq2[j * 11:(j + 1) * 11]:\n            if k != 0:\n                ans += (total - k - prev) * k\n                prev += k\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    result = 0\n    grid = [[0 for _ in range(11)] for _ in range(11)]\n    for _ in range(n):\n        s = input()\n        a = s[0]\n        b = s[1]\n        grid[ord(a) - ord('a')][ord(b) - ord('a')] += 1\n    for i in range(11):\n        for j in range(11):\n            result += grid[i][j] * sum([grid[k][j] for k in range(11) if k != i])\n            result += grid[i][j] * sum([grid[i][k] for k in range(11) if k != j])\n    print(result // 2)", "from collections import *\nI = input\nfor _ in [0] * int(I()):\n    a = Counter((I() for _ in [0] * int(I())))\n    b = (*a,)\n    print(sum((a[u + v] * a[x + y] for (i, (u, v)) in enumerate(b) for (x, y) in b[:i] if (x == u) ^ (v == y))))", "from collections import *\nI = input\nfor _ in [0] * int(I()):\n    a = Counter((I() for _ in [0] * int(I())))\n    b = (*a,)\n    print(sum((a[u + v] * a[x + y] for (i, (u, v)) in enumerate(b) for (x, y) in b[:i] if (x == u) ^ (v == y))))", "from collections import *\nI = input\nfor _ in [0] * int(I()):\n    a = Counter((I() for _ in [0] * int(I())))\n    b = (*a,)\n    print(sum((a[u + v] * a[x + y] for (i, (u, v)) in enumerate(b) for (x, y) in b[:i] if (x == u) ^ (v == y))))", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(input())\n    s = defaultdict(int)\n    e = defaultdict(int)\n    d = defaultdict(int)\n    for i in arr:\n        s[i[0]] += 1\n        e[i[1]] += 1\n        d[i] += 1\n    ans = 0\n    for i in arr:\n        ans += s[i[0]] - 1 + (e[i[1]] - 1) - 2 * (d[i] - 1)\n    print(ans // 2)", "a = []\nfor _ in range(int(input())):\n    k = int(input())\n    c = 0\n    l = {w: 0 for w in 'qwertyuiopasdfghjklzxcvbnm'}\n    l1 = {w: 0 for w in 'qwertyuiopasdfghjklzxcvbnm'}\n    l2 = dict()\n    for i in range(k):\n        s = input()\n        m = 1\n        if s not in l2:\n            l2[s] = 0\n            m = 0\n        c = c + l[s[0]] + l1[s[1]]\n        l[s[0]] += 1\n        l1[s[1]] += 1\n        if m:\n            c -= l2[s] * 2\n        l2[s] += 1\n    a.append(str(c))\nprint('\\n'.join(a))", "from collections import *\nI = input\nfor _ in [0] * int(I()):\n    a = Counter((I() for _ in [0] * int(I())))\n    b = (*a,)\n    print(sum((a[u + v] * a[x + y] for (i, (u, v)) in enumerate(b) for (x, y) in b[:i] if (x == u) ^ (v == y))))", "for _ in range(int(input())):\n    n = int(input())\n    d = {}\n    ans = 0\n    for a in range(n):\n        s = input()\n        try:\n            d[s.upper()] += 1\n        except:\n            d[s.upper()] = 1\n    for i in range(11):\n        s1 = chr(i + 65)\n        for j in range(11):\n            s2 = chr(j + 65)\n            total = s1 + s2\n            if total in d:\n                for k in range(j + 1, 11):\n                    if s1 + chr(k + 65) in d:\n                        ans += d[s1 + chr(k + 65)] * d[total]\n                for k in range(i + 1, 11):\n                    if chr(k + 65) + s2 in d:\n                        ans += d[chr(k + 65) + s2] * d[total]\n    print(ans)", "from collections import *\nI = input\nfor _ in [0] * int(I()):\n    a = Counter((I() for _ in [0] * int(I())))\n    b = (*a,)\n    print(sum((a[u + v] * a[x + y] for (i, (u, v)) in enumerate(b) for (x, y) in b[:i] if (x == u) ^ (v == y))))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    result = 0\n    dic1 = {}\n    dic2 = {}\n    dic3 = {}\n    for i in range(n):\n        S = input()\n        if S[0] in dic1:\n            result += dic1[S[0]]\n            dic1[S[0]] += 1\n        else:\n            dic1[S[0]] = 1\n        if S[1] in dic2:\n            result += dic2[S[1]]\n            dic2[S[1]] += 1\n        else:\n            dic2[S[1]] = 1\n        if S in dic3:\n            result -= dic3[S] * 2\n            dic3[S] += 1\n        else:\n            dic3[S] = 1\n    print(result)", "import math, bisect, heapq, random, sys, itertools\nsys.setrecursionlimit(10 ** 6)\ninput = sys.stdin.readline\n\ndef gprint(t, ans=''):\n    print(f'Case #{t + 1}:', ans)\nints = lambda : list(map(int, input().split()))\nalpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\np2 = [1]\np = 10 ** 9 + 7\nANS = []\nfor t in range(int(input())):\n    n = int(input())\n    a = [input().strip() for i in range(n)]\n    start = [0] * 26\n    end = [0] * 26\n    count = {}\n    ans = 0\n    for i in a:\n        x = start[ord(i[0]) - ord('a')]\n        y = end[ord(i[1]) - ord('a')]\n        z = 0\n        if i in count:\n            z = count[i]\n        ans += x + y - 2 * z\n        if i not in count:\n            count[i] = 0\n        count[i] += 1\n        start[ord(i[0]) - ord('a')] += 1\n        end[ord(i[1]) - ord('a')] += 1\n    print(ans)", "import sys\nfrom collections import defaultdict\nfor t in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        temp = input()\n        a.append(temp)\n    mp1 = defaultdict(lambda : 0)\n    mp2 = defaultdict(lambda : 0)\n    mpchar = defaultdict(lambda : 0)\n    mid = 0\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        mid = mp1[a[i][0]] + mp2[a[i][1]] - 2 * mpchar[a[i]]\n        ans += mid\n        mpchar[a[i]] += 1\n        mp1[a[i][0]] += 1\n        mp2[a[i][1]] += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    first = {chr(x): [0, dict()] for x in range(97, 108)}\n    second = {chr(x): [0, dict()] for x in range(97, 108)}\n    for i in range(n):\n        word = input()\n        first[word[0]][0] += 1\n        first[word[0]][1][word[1]] = first[word[0]][1].get(word[1], 0) + 1\n        second[word[1]][0] += 1\n        second[word[1]][1][word[0]] = second[word[1]][1].get(word[0], 0) + 1\n    ans = 0\n    for i in range(97, 108):\n        for j in range(97, 108):\n            ans += first[chr(i)][1].get(chr(j), 0) * (first[chr(i)][0] - first[chr(i)][1].get(chr(j), 0))\n            ans += second[chr(i)][1].get(chr(j), 0) * (second[chr(i)][0] - second[chr(i)][1].get(chr(j), 0))\n    print(ans // 2)", "for _ in range(int(input())):\n    n = int(input())\n    words = [input() for i in range(n)]\n    (letter1, letter2, duplicates) = ({}, {}, {})\n    for w in words:\n        duplicates[w] = duplicates.get(w, 0) + 1\n        letter1[w[0]] = letter1.get(w[0], 0) + 1\n        letter2[w[1]] = letter2.get(w[1], 0) + 1\n    summ = 0\n    for i in range(n):\n        word1 = words[i]\n        summ += letter1[word1[0]] + letter2[word1[1]] - duplicates[word1] * 2\n    print(summ // 2)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    marker = {}\n    count0 = []\n    count1 = []\n    for i in range(11):\n        count0.append([])\n        count1.append([])\n    for i in range(97, 108):\n        for j in range(97, 108):\n            x = chr(i) + chr(j)\n            marker[x] = 0\n    for i in range(n):\n        s = input()\n        marker[s] += 1\n    for key in marker:\n        first = ord(key[0]) - 97\n        second = ord(key[-1]) - 97\n        count0[first].append(marker[key])\n        count1[second].append(marker[key])\n    ans = 0\n    for item in count0:\n        x = 0\n        for i in range(len(item)):\n            for j in range(len(item)):\n                if i != j:\n                    x += int(item[i]) * int(item[j])\n        ans += x // 2\n    for item in count1:\n        x = 0\n        for i in range(len(item)):\n            for j in range(len(item)):\n                if i != j:\n                    x += int(item[i]) * int(item[j])\n        ans += x // 2\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = [input() for _ in range(n)]\n    a = [0] * 11\n    b = [0] * 11\n    c = [0] * (11 * 11)\n    ans = 0\n    for x in s:\n        p = ord(x[0]) - ord('a')\n        q = ord(x[1]) - ord('a')\n        ans += a[p] + b[q] - c[p * 11 + q] * 2\n        a[p] += 1\n        b[q] += 1\n        c[p * 11 + q] += 1\n    print(ans)", "for t in range(int(input())):\n    number_of_strings = int(input())\n    pairs = [input() for i in range(number_of_strings)]\n    number_of_diff1_pairs = 0\n    first_letters = {}\n    last_letters = {}\n    full_letters = {}\n    for i in range(number_of_strings):\n        number_of_diff1_pairs += first_letters.get(pairs[i][0], 0) + last_letters.get(pairs[i][1], 0) - 2 * full_letters.get(pairs[i], 0)\n        if pairs[i][0] in first_letters:\n            first_letters[pairs[i][0]] += 1\n        else:\n            first_letters[pairs[i][0]] = 1\n        if pairs[i][1] in last_letters:\n            last_letters[pairs[i][1]] += 1\n        else:\n            last_letters[pairs[i][1]] = 1\n        if pairs[i] in full_letters:\n            full_letters[pairs[i]] += 1\n        else:\n            full_letters[pairs[i]] = 1\n    print(number_of_diff1_pairs)", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    d = dict()\n    e = dict()\n    f = dict()\n    s = 0\n    for _ in range(n):\n        i = input()\n        flag = False\n        if i in d:\n            d[i] = d[i] + 1\n            flag = True\n        else:\n            d[i] = 1\n        a = i[0]\n        b = i[1]\n        if a in e:\n            s += e[a]\n            s -= d[i] - 1\n            e[a] = e[a] + 1\n        else:\n            e[a] = 1\n        if b in f:\n            s += f[b]\n            s -= d[i] - 1\n            f[b] = f[b] + 1\n        else:\n            f[b] = 1\n    print(s)", "from collections import defaultdict\ntest_cases = int(input())\n\ndef validstr(inp):\n    a = set()\n    for i in range(97, 108):\n        temp = inp[0] + chr(i)\n        temp2 = chr(i) + inp[1]\n        if temp != inp:\n            a.add(temp)\n        if temp2 != inp:\n            a.add(temp2)\n    return a\nfor _ in range(test_cases):\n    strings = int(input())\n    freq = defaultdict(int)\n    total = 0\n    for i in range(strings):\n        freq[input()] += 1\n    visited = set()\n    for a in list(freq):\n        coms = validstr(a)\n        for i in coms:\n            if i not in visited:\n                total += freq[a] * freq[i]\n        visited.add(a)\n    print(total)", "A = []\nfor _ in range(int(input())):\n    A.clear()\n    N = int(input())\n    for i in range(N):\n        A.append(input())\n    (c, s) = ({}, {})\n    for i in A:\n        s[i] = s.get(i, 0) + 1\n        c['$' + i[1]] = c.get('$' + i[1], 0) + 1\n        c[i[0] + '$'] = c.get(i[0] + '$', 0) + 1\n    ans = 0\n    for i in c.values():\n        ans += i * (i - 1) // 2\n    x = 0\n    for i in s.values():\n        x += i * (i - 1) // 2\n    print(ans - x * 2)", "from collections import *\nI = input\nfor _ in [0] * int(I()):\n    a = Counter((I() for _ in [0] * int(I())))\n    b = (*a,)\n    print(sum((a[x] * a[y] for (i, x) in enumerate(b) for y in b[:i] if (x[0] == y[0]) ^ (x[1] == y[1]))))", "def fun(d):\n    c = 0\n    for x in d:\n        c += d[x] * (d[x] - 1) // 2\n    return c\n\ndef fun2(a, m):\n    (d1, d2) = ({}, {})\n    for s in a:\n        d2[s] = d2.get(s, 0) + 1\n        for i in range(m):\n            t = s[:i] + '#' + s[i + 1:]\n            d1[t] = d1.get(t, 0) + 1\n    return fun(d1) - fun(d2) * m\nm = 2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = []\n    for h in range(n):\n        s = input().rstrip()\n        a.append(s)\n    print(fun2(a, m))", "from collections import *\nI = input\nfor _ in [0] * int(I()):\n    a = Counter((I() for _ in [0] * int(I())))\n    b = (*a,)\n    print(sum((a[u + v] * a[x + y] for (i, (u, v)) in enumerate(b) for (x, y) in b[:i] if (x == u) ^ (v == y))))", "for t in range(int(input())):\n    n = int(input())\n    dit1 = {}\n    dit2 = {}\n    dit = {}\n    ans = 0\n    for i in range(n):\n        s = input()\n        if s[0] in dit1:\n            ans += dit1[s[0]]\n            dit1[s[0]] += 1\n        else:\n            dit1[s[0]] = 1\n        if s[1] in dit2:\n            ans += dit2[s[1]]\n            dit2[s[1]] += 1\n        else:\n            dit2[s[1]] = 1\n        if s in dit:\n            ans -= 2 * dit[s]\n            dit[s] += 1\n        else:\n            dit[s] = 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    dit1 = {}\n    dit2 = {}\n    dit = {}\n    ans = 0\n    for i in range(n):\n        s = input()\n        if s[0] in dit1:\n            ans += dit1[s[0]]\n            dit1[s[0]] += 1\n        else:\n            dit1[s[0]] = 1\n        if s[1] in dit2:\n            ans += dit2[s[1]]\n            dit2[s[1]] += 1\n        else:\n            dit2[s[1]] = 1\n        if s in dit:\n            ans -= 2 * dit[s]\n            dit[s] += 1\n        else:\n            dit[s] = 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = [input() for _ in range(n)]\n    first = {}\n    last = {}\n    s_dict = {}\n    ans = 0\n    for i in range(n):\n        first[s[i][0]] = first.get(s[i][0], 0) + 1\n        last[s[i][1]] = last.get(s[i][1], 0) + 1\n        s_dict[s[i]] = s_dict.get(s[i], 0) + 1\n        ans = ans + (first[s[i][0]] + last[s[i][1]] - 2 * s_dict[s[i]])\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    m0 = [0] * (ord('k') - ord('a') + 1)\n    m1 = [0] * (ord('k') - ord('a') + 1)\n    m = defaultdict(int)\n    c = 0\n    for i in range(n):\n        s = input()\n        ch0 = ord(s[0]) - ord('a')\n        ch1 = ord(s[1]) - ord('a')\n        c += m0[ch0]\n        c += m1[ch1]\n        c -= 2 * m[s]\n        m0[ch0] += 1\n        m1[ch1] += 1\n        m[s] += 1\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    (a1, a2, a3) = ({}, {}, {})\n    for i in range(n):\n        s = input()\n        ans += a1.get(s[0], 0) + a2.get(s[1], 0) - 2 * a3.get(s, 0)\n        if s[0] in a1:\n            a1[s[0]] += 1\n        else:\n            a1[s[0]] = 1\n        if s[1] in a2:\n            a2[s[1]] += 1\n        else:\n            a2[s[1]] = 1\n        if s in a3:\n            a3[s] += 1\n        else:\n            a3[s] = 1\n    print(ans)", "from collections import Counter\nx = int(input())\n\ndef cal(n, dic):\n    ans = 0\n    p = list(dic.keys())\n    if len(p) == 1:\n        return 0\n    for i in range(len(p) - 1):\n        (a, b) = (p[i][0], p[i][1])\n        for j in range(i + 1, len(p)):\n            (c, d) = (p[j][0], p[j][1])\n            if a == c and b != d or (a != c and b == d):\n                ans += dic[p[i]] * dic[p[j]]\n    return ans\nfor jj in range(x):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(input())\n    dic = Counter(arr)\n    print(cal(n, dic))", "test_numbers = int(input())\nresults = []\nfor i in range(test_numbers):\n    string_number = int(input())\n    branches = {}\n    strings_repitition = {}\n    strings = []\n    result = 0\n    for j in range(string_number):\n        strings.append(input())\n    for j in range(string_number):\n        if strings[j][0] + '0' not in branches:\n            branches[strings[j][0] + '0'] = []\n            branches[strings[j][0] + '0'].append(strings[j])\n        else:\n            branches[strings[j][0] + '0'].append(strings[j])\n        if strings[j][1] + '1' not in branches:\n            branches[strings[j][1] + '1'] = []\n            branches[strings[j][1] + '1'].append(strings[j])\n        else:\n            branches[strings[j][1] + '1'].append(strings[j])\n        if strings[j] not in strings_repitition:\n            strings_repitition[strings[j]] = 1\n        else:\n            strings_repitition[strings[j]] += 1\n    for branch in branches:\n        result += len(branches[branch]) * (len(branches[branch]) - 1) / 2\n        new_branch = set(branches[branch])\n        for string in new_branch:\n            result -= strings_repitition[string] * (strings_repitition[string] - 1) / 2\n    results.append(int(result))\nfor result in results:\n    print(result)", "from sys import stdin\nfrom math import log, floor, ceil, gcd\nfrom collections import defaultdict as dd\ninput = stdin.readline\ninp = lambda : int(stdin.readline())\nrs = lambda : stdin.readline().strip()\n\ndef ra(typ):\n    return list(map(typ, stdin.readline().split()))\n\ndef rv(typ):\n    return map(typ, stdin.readline().split())\n\ndef main():\n    for _ in range(inp()):\n        n = inp()\n        (s, e, w) = (dd(int), dd(int), dd(int))\n        f = []\n        ans = 0\n        for _ in range(n):\n            x = rs()\n            s[x[0]] += 1\n            e[x[1]] += 1\n            w[x] += 1\n            f.append(x)\n        ans = 0\n        for i in f:\n            ans += s[i[0]] + e[i[1]] - 2 * w[i]\n            s[i[0]] -= 1\n            e[i[1]] -= 1\n            w[i] -= 1\n        print(ans)\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = [input() for _ in range(n)]\n    first = {}\n    last = {}\n    s_dict = {}\n    ans = 0\n    for i in range(n):\n        first[s[i][0]] = first.get(s[i][0], 0) + 1\n        last[s[i][1]] = last.get(s[i][1], 0) + 1\n        s_dict[s[i]] = s_dict.get(s[i], 0) + 1\n        ans = ans + (first[s[i][0]] + last[s[i][1]] - 2 * s_dict[s[i]])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    words = {}\n    for _ in range(n):\n        word = input()\n        words[word] = words.get(word, 0) + 1\n    answer = 0\n    for word in words:\n        base = word[0]\n        for i in range(11):\n            anotherWord = base + chr(ord('a') + i)\n            if anotherWord == word:\n                continue\n            if anotherWord in words:\n                answer += words[word] * words[anotherWord]\n        base = word[1]\n        for i in range(11):\n            anotherWord = chr(ord('a') + i) + base\n            if anotherWord == word:\n                continue\n            if anotherWord in words:\n                answer += words[word] * words[anotherWord]\n    print(answer // 2)", "test = int(input())\nfor t in range(test):\n    n = int(input())\n    d_f = {}\n    d_s = {}\n    res = 0\n    set_str = {}\n    for i in range(n):\n        s = input()\n        if s in set_str.keys():\n            set_str[s] += 1\n        else:\n            set_str[s] = 1\n        if s[0] in d_f.keys():\n            res += d_f[s[0]] - set_str[s] + 1\n            d_f[s[0]] += 1\n        else:\n            d_f[s[0]] = 1\n        if s[1] in d_s.keys():\n            res += d_s[s[1]] - set_str[s] + 1\n            d_s[s[1]] += 1\n        else:\n            d_s[s[1]] = 1\n    print(res)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    (prev, r1, r2) = ({}, {}, {})\n    res = 0\n    for _ in range(n):\n        s = input()\n        res += r1.get(s[0], 0) - prev.get(s, 0)\n        r1[s[0]] = r1.get(s[0], 0) + 1\n        res += r2.get(s[1], 0) - prev.get(s, 0)\n        r2[s[1]] = r2.get(s[1], 0) + 1\n        prev[s] = prev.get(s, 0) + 1\n    print(res)", "n = int(input())\nfor i in range(n):\n    count = 0\n    m = int(input())\n    lst1 = {}\n    lst2 = {}\n    lst = {}\n    for j in range(m):\n        strng = input()\n        if strng in lst.keys():\n            count -= lst[strng] * 2\n            lst[strng] += 1\n        else:\n            lst[strng] = 1\n        if strng[0] in lst1.keys():\n            lst1[strng[0]] += 1\n            count += lst1[strng[0]] - 1\n        else:\n            lst1[strng[0]] = 1\n        if strng[1] in lst2.keys():\n            lst2[strng[1]] += 1\n            count += lst2[strng[1]] - 1\n        else:\n            lst2[strng[1]] = 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    (a1, a2, a3) = ({}, {}, {})\n    for i in range(n):\n        s = input()\n        ans += a1.get(s[0], 0) + a2.get(s[1], 0) - 2 * a3.get(s, 0)\n        if s[0] in a1:\n            a1[s[0]] += 1\n        else:\n            a1[s[0]] = 1\n        if s[1] in a2:\n            a2[s[1]] += 1\n        else:\n            a2[s[1]] = 1\n        if s in a3:\n            a3[s] += 1\n        else:\n            a3[s] = 1\n    print(ans)", "n = int(input())\nfor _ in range(n):\n    t = int(input())\n    sl = {}\n    sl_b1 = {}\n    sl_b2 = {}\n    res = 0\n    for i in range(t):\n        b = input()\n        if b[0] in sl_b1:\n            res += sl_b1[b[0]]\n        if b in sl:\n            res -= sl[b]\n        if b[1] in sl_b2:\n            res += sl_b2[b[1]]\n        if b in sl:\n            res -= sl[b]\n        if b in sl:\n            sl[b] += 1\n        else:\n            sl[b] = 1\n        if b[0] in sl_b1:\n            sl_b1[b[0]] += 1\n        else:\n            sl_b1[b[0]] = 1\n        if b[1] in sl_b2:\n            sl_b2[b[1]] += 1\n        else:\n            sl_b2[b[1]] = 1\n    print(res)", "n = int(input())\nfor i in range(n):\n    count = 0\n    m = int(input())\n    lst1 = {}\n    lst2 = {}\n    lst = {}\n    for j in range(m):\n        strng = input()\n        if strng in lst.keys():\n            count -= lst[strng] * 2\n            lst[strng] += 1\n        else:\n            lst[strng] = 1\n        if strng[0] in lst1.keys():\n            lst1[strng[0]] += 1\n            count += lst1[strng[0]] - 1\n        else:\n            lst1[strng[0]] = 1\n        if strng[1] in lst2.keys():\n            lst2[strng[1]] += 1\n            count += lst2[strng[1]] - 1\n        else:\n            lst2[strng[1]] = 1\n    print(count)", "from collections import defaultdict\nfrom email.policy import default\ntc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    arr = [input() for _ in range(n)]\n    (s, e) = (defaultdict(lambda : 0), defaultdict(lambda : 0))\n    check = defaultdict(lambda : 0)\n    ans = 0\n    for x in arr:\n        check[x] += 1\n        (a, b) = (x[0], x[1])\n        ans += s[a] + e[b]\n        s[a] += 1\n        e[b] += 1\n    for i in check:\n        if check[i] > 1:\n            ans -= check[i] * (check[i] - 1)\n    print(ans)", "def solve():\n    for N in range(int(input())):\n        n = int(input())\n        dic = {}\n        for j in range(n):\n            c = input()\n            if c in dic:\n                dic[c] += 1\n            else:\n                dic[c] = 1\n        dic2 = {}\n        total = 0\n        ar = list(dic.keys())\n        for j in range(len(ar)):\n            for i in range(j + 1, len(ar)):\n                (word1, word2) = (ar[i], ar[j])\n                if word1[0] == word2[0] or word1[1] == word2[1]:\n                    total += dic[word1] * dic[word2]\n        print(total)\nsolve()", "for t in range(int(input())):\n    number_of_strings = int(input())\n    pairs = [input() for i in range(number_of_strings)]\n    number_of_diff1_pairs = 0\n    first_letters = {}\n    last_letters = {}\n    full_letters = {}\n    for i in range(number_of_strings):\n        number_of_diff1_pairs += first_letters.get(pairs[i][0], 0) + last_letters.get(pairs[i][1], 0) - 2 * full_letters.get(pairs[i], 0)\n        first_letters[pairs[i][0]] = first_letters.get(pairs[i][0], 0) + 1\n        last_letters[pairs[i][1]] = last_letters.get(pairs[i][1], 0) + 1\n        full_letters[pairs[i]] = full_letters.get(pairs[i], 0) + 1\n    print(number_of_diff1_pairs)", "for _ in range(int(input())):\n    n = int(input())\n    l1 = [0] * 11\n    l2 = [0] * 11\n    l12 = []\n    for i in range(11):\n        l12.append([0] * 11)\n    ans = 0\n    for i in range(n):\n        s = input()\n        ans += l1[ord(s[0]) - 97]\n        ans += l2[ord(s[1]) - 97]\n        ans -= 2 * l12[ord(s[0]) - 97][ord(s[1]) - 97]\n        l1[ord(s[0]) - 97] += 1\n        l2[ord(s[1]) - 97] += 1\n        l12[ord(s[0]) - 97][ord(s[1]) - 97] += 1\n    print(ans)"]