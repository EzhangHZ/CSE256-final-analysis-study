["def solve(N, M, arr):\n    arr_sorted = sorted(arr)\n    _sum = 0\n    for (idx, a) in enumerate(arr_sorted + [0]):\n        _sum += a\n        if _sum > M:\n            break\n    if idx == 0:\n        return N + 1\n    elif idx == N:\n        return 1\n    _sum = sum(arr_sorted[:idx])\n    tmp = arr_sorted[idx - 1]\n    if _sum - tmp + arr[idx] <= M:\n        return N - idx\n    else:\n        return N - idx + 1\nT = int(input())\nfor _ in range(T):\n    (N, M) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    ans = solve(N, M, arr)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    l1 = sorted(l)\n    sm = 0\n    for x in range(n):\n        sm += l1[x]\n        if sm > k:\n            if x != 0:\n                sm -= l1[x] + l1[x - 1]\n            sm += l[x]\n            break\n    if sm <= k:\n        print(n - x)\n    else:\n        print(n - x + 1)", "from itertools import accumulate\nimport bisect\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split(' ')))\n    srted = sorted(arr)\n    pref = list(accumulate(srted))\n    ind = bisect.bisect_right(pref, m)\n    if ind == n:\n        print(1)\n    elif ind == 0:\n        print(n + 1)\n    else:\n        higherTime = max(srted[:ind])\n        rem = m - pref[ind - 1]\n        if rem + higherTime >= arr[ind]:\n            print(n - ind)\n        else:\n            print(n - ind + 1)", "testcases = int(input())\nfor _ in range(testcases):\n    (n, m) = map(int, input().split())\n    prep = list(map(int, input().split()))\n    sorted_prep = sorted(prep)\n    sum_prep = 0\n    max_wins = n\n    for i in range(n):\n        sum_prep += sorted_prep[i]\n        if sum_prep > m:\n            max_wins = i\n            break\n    if max_wins == n:\n        print(1)\n    else:\n        min_prep = sum(sorted_prep[:max_wins - 1])\n        if min_prep + prep[max_wins] <= m:\n            print(n - max_wins)\n        else:\n            print(n + 1 - max_wins)", "import time\nimport sys\n\ndef find_place(arr, m):\n    win_count = 0\n    for i in range(len(arr)):\n        if arr[i] > m:\n            break\n        m -= arr[i]\n        win_count += 1\n    return (win_count, m)\n\ndef main(input, print, end_line):\n    t = int(input())\n    for _ in range(t):\n        (n, m) = map(int, input().split())\n        arr = list(map(int, input().split()))\n        arr_sort = list(arr)\n        arr_sort.sort()\n        (place, mm) = find_place(arr_sort, m)\n        if place != 0 and place != n and (mm + arr_sort[place - 1] >= arr[place]):\n            place += 1\n        print(str(n + 1 - place) + end_line)\nmain(sys.stdin.readline, sys.stdout.write, '\\n')", "testcases = int(input())\nfor _ in range(testcases):\n    (n, m) = map(int, input().split())\n    prep = list(map(int, input().split()))\n    sorted_prep = sorted(prep)\n    sum_prep = 0\n    max_wins = None\n    for (i, num) in enumerate(sorted_prep):\n        sum_prep += num\n        if sum_prep > m:\n            max_wins = i\n            break\n    if max_wins == None:\n        print(1)\n    else:\n        min_prep = sum(sorted_prep[:max_wins - 1])\n        if min_prep + prep[max_wins] <= m:\n            print(n - max_wins)\n        else:\n            print(n + 1 - max_wins)", "def main(a, m, n):\n    ordered = a.copy()\n    ordered.sort()\n    (i, remaining) = (0, m)\n    while i < n and ordered[i] <= remaining:\n        remaining -= ordered[i]\n        i += 1\n    if i == 0:\n        print(n + 1)\n        return\n    i -= 1\n    rank = n - i\n    if rank > 1 and a[i + 1] - ordered[i] <= remaining:\n        rank -= 1\n    print(rank)\ntests = int(input())\nfor _ in range(tests):\n    (n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    main(a, m, n)", "testcases = int(input())\nfor _ in range(testcases):\n    (n, m) = map(int, input().split())\n    prep = list(map(int, input().split()))\n    sorted_prep = sorted(prep)\n    sum_prep = 0\n    max_wins = None\n    for (i, num) in enumerate(sorted_prep):\n        sum_prep += num\n        if sum_prep <= m:\n            pass\n        else:\n            max_wins = i\n            break\n    if max_wins == None:\n        print(1)\n    else:\n        min_prep = sum(sorted_prep[:max_wins - 1])\n        if min_prep + prep[max_wins] <= m:\n            print(n - max_wins)\n        else:\n            print(n + 1 - max_wins)", "def solve(a, m, n):\n    v = sorted(a)\n    nwin = 0\n    for ni in range(n):\n        if m < v[ni]:\n            break\n        m -= v[ni]\n        nwin += 1\n    pos = 1 + n - nwin\n    if nwin > 0 and nwin < n:\n        if m + v[nwin - 1] >= a[nwin]:\n            pos -= 1\n    return pos\nt = int(input())\nans = []\nfor ti in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    ans.append(solve(a, m, n))\nfor a in ans:\n    print(a)", "for time in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(j) for j in input().split()]\n    b = sorted(a)\n    num = 0\n    for s in b:\n        if s > k:\n            break\n        k -= s\n        num += 1\n    if len(b) == num:\n        print(1)\n        continue\n    if num == 0:\n        print(n + 1)\n        continue\n    if a[num] <= b[num - 1] + k:\n        num += 1\n    print(n - num + 1)", "def ii(num=False):\n    i = input().split()\n    if num:\n        return int(i[0])\n    try:\n        return list(map(int, i))\n    except Exception:\n        return i\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nfor _ in range(ii(1)):\n    (n, m) = ii()\n    a = ii()\n    b = list(a)\n    b.sort()\n    ans = 0\n    for i in b:\n        if i <= m:\n            ans += 1\n            m -= i\n        else:\n            break\n    if ans != n and ans != 0 and (b[ans - 1] + m >= a[ans]):\n        ans += 1\n    print(n + 1 - ans)", "testcases = int(input())\nfor _ in range(testcases):\n    (n, m) = map(int, input().split())\n    prep = list(map(int, input().split()))\n    sorted_prep = sorted(prep)\n    sum_prep = 0\n    max_wins = 0\n    for num in sorted_prep:\n        sum_prep += num\n        if sum_prep <= m:\n            max_wins += 1\n        else:\n            break\n    if max_wins == n:\n        print(1)\n    else:\n        min_prep = sum(sorted_prep[:max_wins - 1])\n        if min_prep + prep[max_wins] <= m:\n            print(n - max_wins)\n        else:\n            print(n + 1 - max_wins)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    ans = 0\n    for i in range(n):\n        if m >= b[i]:\n            ans += 1\n            m -= b[i]\n    if ans not in [0, n] and b[ans - 1] + m >= a[ans]:\n        ans += 1\n    print(n - ans + 1)", "testcases = int(input())\nfor _ in range(testcases):\n    (n, m) = map(int, input().split())\n    prep = list(map(int, input().split()))\n    sorted_prep = sorted(prep)\n    ps = [0]\n    max_wins = n\n    for (i, num) in enumerate(sorted_prep):\n        ps.append(ps[i] + num)\n        if ps[-1] > m:\n            max_wins = i\n            break\n    if max_wins == n:\n        print(1)\n    else:\n        min_prep = ps[max_wins - 1]\n        if min_prep + prep[max_wins] <= m:\n            print(n - max_wins)\n        else:\n            print(n + 1 - max_wins)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    ans = 0\n    for i in range(n):\n        if m >= b[i]:\n            ans += 1\n            m -= b[i]\n        else:\n            break\n    if ans not in (0, n) and b[ans - 1] + m >= a[ans]:\n        ans += 1\n    print(n - ans + 1)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    ans = 0\n    for i in range(n):\n        if m >= b[i]:\n            ans += 1\n            m -= b[i]\n    if ans not in [0, n] and b[ans - 1] + m >= a[ans]:\n        ans += 1\n    print(n - ans + 1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split(' '))\n    l = list(map(int, input().split(' ')))\n    l2 = l.copy()\n    l.sort()\n    ans = 0\n    for i in range(n):\n        if m < l[i]:\n            break\n        else:\n            m -= l[i]\n            ans += 1\n    if ans != 0 and ans != n and (m + l[ans - 1] >= l2[ans]):\n        ans += 1\n    print(n + 1 - ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    ans = 0\n    for i in range(n):\n        if m >= b[i]:\n            ans += 1\n            m -= b[i]\n    if ans not in [0, n] and b[ans - 1] + m >= a[ans]:\n        ans += 1\n    print(n - ans + 1)", "from bisect import bisect_left, bisect_right\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    cpy = list(arr)\n    arr.sort()\n    for i in range(1, n):\n        arr[i] += arr[i - 1]\n    W = bisect_right(arr, m)\n    ans = n + 1 - W\n    if W > 0 and m >= (arr[W - 2], 0)[W == 1] + cpy[W - int(W == n)]:\n        ans -= 1\n    print(max(1, ans))", "import sys\ninput = sys.stdin.readline\nT = int(input())\nans = [0] * T\nfor t in range(T):\n    (n, m) = map(int, input().split())\n    b = list(map(int, input().split()))\n    a = sorted(b)\n    win = 0\n    while win < n and m >= a[win]:\n        m -= a[win]\n        win += 1\n    if win not in [0, n] and a[win - 1] + m >= b[win]:\n        ans[t] = n - win\n    else:\n        ans[t] = n - win + 1\nprint('\\n'.join(map(str, ans)))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    ans = 0\n    for i in range(n):\n        if m >= b[i]:\n            ans += 1\n            m -= b[i]\n    if ans not in [0, n] and b[ans - 1] + m >= a[ans]:\n        ans += 1\n    print(n - ans + 1)", "tests = int(input())\nfor j in range(tests):\n    (n, m) = list(map(int, input().split()))\n    a1 = list(map(int, input().split()))\n    a = sorted(a1)\n    k = 0\n    for i in range(n):\n        if a[i] <= m:\n            m -= a[i]\n            k += 1\n        else:\n            for Y in range(i):\n                if a1[k] <= a[Y] + m:\n                    k += 1\n                    break\n            break\n    print(n - k + 1)", "from copy import *\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    ans = 0\n    for i in range(n):\n        if m >= b[i]:\n            ans += 1\n            m -= b[i]\n    if ans not in [0, n] and b[ans - 1] + m >= a[ans]:\n        ans += 1\n    print(n - ans + 1)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    ans = 0\n    for i in range(n):\n        if b[i] <= m:\n            m -= b[i]\n            ans += 1\n    if ans != 0 and ans != n and (m + b[ans - 1] >= a[ans]):\n        ans += 1\n    print(n + 1 - ans)", "test = int(input())\nfor j in range(test):\n    (x, m) = list(map(int, input().split()))\n    a1 = list(map(int, input().split()))\n    a = sorted(a1)\n    k = 0\n    for i in range(x):\n        if a[i] <= m:\n            m -= a[i]\n            k += 1\n        else:\n            for j in range(i):\n                if a1[k] <= a[j] + m:\n                    k += 1\n                    break\n            break\n    print(x - k + 1)", "testcases = int(input())\nfor _ in range(testcases):\n    (n, m) = map(int, input().split())\n    prep = list(map(int, input().split()))\n    sorted_prep = sorted(prep)\n    sum_prep = 0\n    max_wins = 0\n    pot_wins = set()\n    for num in sorted_prep:\n        sum_prep += num\n        if sum_prep <= m:\n            max_wins += 1\n            pot_wins.add(num)\n        else:\n            break\n    if max_wins == n:\n        print(1)\n    elif prep[max_wins] in pot_wins:\n        print(n - max_wins)\n    else:\n        min_prep = sum(sorted_prep[:max_wins - 1])\n        if min_prep + prep[max_wins] <= m:\n            print(n - max_wins)\n        else:\n            print(n + 1 - max_wins)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    ans = 0\n    for i in range(n):\n        if m >= b[i]:\n            ans += 1\n            m -= b[i]\n        else:\n            break\n    if ans not in (0, n) and b[ans - 1] + m >= a[ans]:\n        ans += 1\n    print(n - ans + 1)", "from copy import *\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    ans = 0\n    for i in range(n):\n        if m >= b[i]:\n            ans += 1\n            m -= b[i]\n    if ans not in [0, n] and b[ans - 1] + m >= a[ans]:\n        ans += 1\n    print(n - ans + 1)", "from copy import *\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    ans = 0\n    for i in range(n):\n        if m >= b[i]:\n            ans += 1\n            m -= b[i]\n    if ans not in [0, n] and b[ans - 1] + m >= a[ans]:\n        ans += 1\n    print(n - ans + 1)", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom collections import deque\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    (n, k) = int_arr()\n    arr = int_arr()\n    cp = arr.copy()\n    arr.sort()\n    pref = []\n    prev = 0\n    for i in range(n):\n        prev += arr[i]\n        pref.append(prev)\n    i = 0\n    j = n - 1\n    ans = -1\n    while i <= j:\n        mid = (i + j) // 2\n        if mid == -1:\n            break\n        if pref[mid] <= k:\n            ans = max(ans, mid)\n            i = mid + 1\n        else:\n            j = mid - 1\n    if ans == n - 1:\n        print(1)\n    elif ans == -1:\n        print(n + 1)\n    elif pref[ans] - arr[ans] + cp[ans + 1] <= k:\n        print(n - ans - 1)\n    else:\n        print(n - ans)", "t = int(input())\nfor j in range(t):\n    (n, m) = list(map(int, input().split()))\n    a1 = list(map(int, input().split()))\n    a = sorted(a1)\n    k = 0\n    for i in range(n):\n        if a[i] <= m:\n            m -= a[i]\n            k += 1\n        else:\n            for x in range(i):\n                if a1[k] <= a[x] + m:\n                    k += 1\n                    break\n            break\n    print(n - k + 1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = a[:]\n    wins = 0\n    a.sort()\n    l1 = []\n    for i in a:\n        if i <= m:\n            m = m - i\n            wins += 1\n            l1.append(i)\n    j = wins\n    temp_pos = n - j\n    if j > n - 1:\n        print(1)\n    elif l[j] in l1:\n        print(n - j)\n    elif len(l1) > 0 and l[j] <= m + l1[-1]:\n        print(n - j)\n    else:\n        print(n - j + 1)", "from copy import *\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    ans = 0\n    for i in range(n):\n        if m >= b[i]:\n            ans += 1\n            m -= b[i]\n    if ans not in [0, n] and b[ans - 1] + m >= a[ans]:\n        ans += 1\n    print(n - ans + 1)", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    (n, m) = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = sorted(a)\n    win = 0\n    while win < n and m >= b[win]:\n        m -= b[win]\n        win += 1\n    if win in [0, n] or b[win - 1] + m < a[win]:\n        print(n - win + 1)\n    else:\n        print(n - win)", "k = int(input())\nfor _ in range(k):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    ans = 0\n    for i in range(n):\n        if m >= b[i]:\n            ans += 1\n            m -= b[i]\n    if ans not in [0, n] and b[ans - 1] + m >= a[ans]:\n        ans += 1\n    print(n - ans + 1)", "tc = int(input())\nfor _ in range(tc):\n    (n, m) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    arr = lst[:]\n    lst.sort()\n    coun = 0\n    sm = 0\n    while coun < n and sm + lst[coun] <= m:\n        sm += lst[coun]\n        coun += 1\n    if coun > 0 and coun < n and (arr[coun] <= m - sm + lst[coun - 1]):\n        print(n - coun)\n    else:\n        print(n - coun + 1)", "testcases = int(input())\nfor _ in range(testcases):\n    (n, m) = map(int, input().split())\n    prep = list(map(int, input().split()))\n    sorted_prep = sorted(prep)\n    ps = [0] * (n + 1)\n    max_wins = n\n    for (i, num) in enumerate(sorted_prep):\n        new_sum = ps[i] + num\n        ps[i + 1] = new_sum\n        if new_sum > m:\n            max_wins = i\n            break\n    if max_wins == n:\n        print(1)\n    else:\n        min_prep = ps[max_wins - 1]\n        if min_prep + prep[max_wins] <= m:\n            print(n - max_wins)\n        else:\n            print(n + 1 - max_wins)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    ans = 0\n    for i in range(n):\n        if m >= b[i]:\n            ans += 1\n            m -= b[i]\n    if ans not in [0, n] and b[ans - 1] + m >= a[ans]:\n        ans += 1\n    print(n - ans + 1)", "for _ in range(int(input())):\n    (n1, minutes) = input().split()\n    (n1, minutes) = (int(n1), int(minutes))\n    reqm = [int(a) for a in input().split()]\n    origm = reqm.copy()\n    reqm.sort()\n    wins = 0\n    for i in range(len(reqm)):\n        if reqm[i] > minutes:\n            break\n        minutes -= reqm[i]\n        wins += 1\n    if wins != 0 and wins != len(reqm) and (minutes + reqm[wins - 1] >= origm[wins]):\n        wins += 1\n    print(n1 + 1 - wins)", "t = int(input())\nfor p in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = a[:]\n    a.sort()\n    c = 0\n    sum = 0\n    flag = True\n    for i in range(n):\n        if sum + a[i] <= m:\n            sum += a[i]\n            c += 1\n        else:\n            flag = False\n            break\n    if flag:\n        print(1)\n    elif c != 0:\n        count = b[c]\n        for j in range(0, c - 1):\n            count += a[j]\n        if count > m:\n            print(n - c + 1)\n        else:\n            print(n - c)\n    else:\n        print(n + 1)", "t = int(input())\nfor p in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = a[:]\n    a.sort()\n    c = 0\n    sum = 0\n    flag = True\n    for i in range(n):\n        if sum + a[i] <= m:\n            sum += a[i]\n            c += 1\n        else:\n            flag = False\n            break\n    if flag:\n        print(1)\n    elif c != 0:\n        count = b[c]\n        for j in range(0, c - 1):\n            count += a[j]\n        if count > m:\n            print(n - c + 1)\n        else:\n            print(n - c)\n    else:\n        print(n + 1)", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    new_a = a[:]\n    a.sort()\n    ost = m\n    maxwins = 0\n    wins = 0\n    last = 0\n    ind = 0\n    le = 0\n    for i in range(n):\n        if ost - a[i] >= 0:\n            ost -= a[i]\n            maxwins += 1\n        else:\n            last = a[i - 1]\n            ind = i\n            break\n    if 0 < maxwins < n and ost + last - new_a[maxwins] >= 0:\n        maxwins += 1\n    print(n - maxwins + 1)", "def main():\n    t = int(input())\n    for _ in range(t):\n        ans = solve()\n        print(ans)\n\ndef solve():\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    sorta = sorted(a)\n    k = calc(sorta, m)\n    if k == n:\n        return 1\n    if k == 0:\n        return n + 1\n    m2 = m - a[k]\n    if m2 < 0:\n        return n - k + 1\n    a2 = a[:k] + a[k + 1:]\n    sorta2 = sorted(a2)\n    k2 = calc(sorta2, m2)\n    if k2 >= k - 1:\n        return n - k\n    else:\n        return n - k + 1\n\ndef calc(sorta, m):\n    curmins = 0\n    k = 0\n    n = len(sorta)\n    for i in range(n):\n        curmins += sorta[i]\n        if curmins <= m:\n            k += 1\n        else:\n            break\n    return k\nmain()", "from collections import Counter\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\ntests = inp()\nfor i in range(tests):\n    (n, time) = invr()\n    input_arr = inlt()\n    arr = input_arr.copy()\n    arr.sort()\n    ans = 0\n    wins = 0\n    max_spent = 0\n    for j in range(n):\n        if time >= arr[j]:\n            time -= arr[j]\n            max_spent = max(max_spent, arr[j])\n            wins += 1\n        else:\n            ans = n - j\n            break\n    if wins < n and input_arr[wins] <= max_spent + time:\n        ans -= 1\n    print(ans + 1)", "def solve(a, n, m):\n    b = sorted(a)\n    win = 0\n    time = 0\n    max_prepare_time = 0\n    while time <= m and win < n:\n        if time + b[win] > m:\n            break\n        time += b[win]\n        max_prepare_time = max(max_prepare_time, b[win])\n        win += 1\n    if win == n:\n        print(1)\n        return\n    if m - time >= a[win] - max_prepare_time:\n        print(n - win)\n    else:\n        print(n - win + 1)\nt = int(input())\nfor i in range(t):\n    s = input()\n    (n, m) = (int(s.split()[0]), int(s.split()[1]))\n    a = [int(si) for si in input().split()]\n    solve(a, n, m)", "import sys\nT = int(input())\nfor t in range(0, T):\n    (n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    i = 0\n    s = 0\n    for x in b:\n        s += x\n        if s <= m:\n            i += 1\n        else:\n            break\n    if i == 0:\n        print(n + 1)\n        continue\n    elif i == n:\n        print(1)\n        continue\n    j = 1\n    s = a[i]\n    if s > m:\n        j = 0\n    else:\n        v = False\n        for h in range(n):\n            if b[h] == a[i] and v == False:\n                v = True\n                continue\n            x = b[h]\n            s += x\n            if s <= m:\n                j += 1\n            else:\n                break\n    print(min(n - i + 1, n - j))", "import sys\nT = int(sys.stdin.readline().strip())\nfor t in range(0, T):\n    (n, m) = list(map(int, sys.stdin.readline().strip().split()))\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    b = sorted(a)\n    i = 0\n    s = 0\n    for x in b:\n        s += x\n        if s <= m:\n            i += 1\n        else:\n            break\n    if i == 0:\n        print(n + 1)\n        continue\n    elif i == n:\n        print(1)\n        continue\n    j = 1\n    s = a[i]\n    if s > m:\n        j = 0\n    else:\n        v = False\n        for h in range(n):\n            if b[h] == a[i] and v == False:\n                v = True\n                continue\n            x = b[h]\n            s += x\n            if s <= m:\n                j += 1\n            else:\n                break\n    print(min(n - i + 1, n - j))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    sorted_a = sorted(zip(a, [j for j in range(n)]), key=lambda x: x[0])\n    mstar = 0\n    wins = 0\n    biggesta = 0\n    for ai in sorted_a:\n        mstar += ai[0]\n        if mstar > m:\n            mstar -= ai[0]\n            break\n        biggesta = ai[0]\n        wins += 1\n    if wins == n:\n        print(1)\n    elif wins == 0:\n        print(n + 1)\n    elif a[wins] <= m - mstar + biggesta:\n        print(n - wins)\n    else:\n        print(n - wins + 1)", "def main():\n    t = int(input())\n    for i in range(t):\n        (n, m) = map(int, input().split())\n        L = list(map(int, input().split()))\n        M = [L[i] for i in range(n)]\n        M.sort()\n        counter = 0\n        i = 0\n        s = 0\n        while s <= m and i < n:\n            s += M[i]\n            if s <= m:\n                counter += 1\n            i += 1\n        if counter == n:\n            print(1)\n        elif counter == 0:\n            print(n + 1)\n        else:\n            a = L[counter]\n            del L[counter]\n            m -= a\n            M = [L[i] for i in range(n - 1)]\n            M.sort()\n            if m >= 0:\n                counter1 = 1\n            else:\n                counter1 = 0\n            i = 0\n            s = 0\n            while s <= m and i < n:\n                s += M[i]\n                if s <= m:\n                    counter1 += 1\n                i += 1\n            if counter1 == counter:\n                print(n - counter)\n            else:\n                print(n - counter + 1)\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    (*a,) = map(int, input().split())\n    b = []\n    for i in a:\n        b += [i]\n    b.sort()\n    m_tmp = 0\n    i = 0\n    while i < n and m_tmp + b[i] <= m:\n        m_tmp += b[i]\n        i += 1\n    max_pts = i\n    if max_pts == 0:\n        print(n + 1)\n    elif max_pts == n:\n        print(1)\n    else:\n        gar = n - max_pts + 1\n        m_tmp = a[n - gar + 1]\n        if m_tmp <= m:\n            i = 0\n            while m_tmp + b[i] <= m:\n                m_tmp += b[i]\n                i += 1\n            if i >= max_pts - 1:\n                gar -= 1\n        print(gar)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = [(x, i) for (i, x) in enumerate(map(int, input().split()))]\n    arr.sort(key=lambda x: x[0])\n    sm = 0\n    i = 0\n    while i < n and sm <= m:\n        sm += arr[i][0]\n        i += 1\n    if sm > m:\n        sm -= arr[i - 1][0]\n        i -= 1\n    if any((x[1] == i for x in arr[:i])):\n        print(n - i)\n    elif i:\n        p = int(1000000000.0)\n        for x in arr:\n            if x[1] == i:\n                p = x[0]\n                break\n        print(n - i if sm - arr[i - 1][0] + p <= m else n - i + 1)\n    else:\n        print(n + 1)", "import sys\ninput = sys.stdin.readline\n\ndef readList():\n    return list(map(int, input().split()))\n\ndef readInt():\n    return int(input())\n\ndef readInts():\n    return map(int, input().split())\n\ndef readStr():\n    return input().strip()\n\ndef solve():\n    (n, m) = readInts()\n    arr = readList()\n    sa = sorted([(v, i) for (i, v) in enumerate(arr)], key=lambda x: (x[0], -x[1]))\n    cnt = 0\n    cap = m\n    for i in range(n):\n        if m >= sa[i][0]:\n            cnt += 1\n            m -= sa[i][0]\n        else:\n            break\n    if cnt == n:\n        return 1\n    for i in range(n):\n        if sa[i][1] == cnt:\n            if i < cnt:\n                return n - cnt\n            elif cap < sa[i][0]:\n                return n - cnt + 1\n            else:\n                cap -= sa[i][0]\n                ans = 1\n    for i in range(n):\n        if sa[i][1] == cnt:\n            continue\n        if cap >= sa[i][0]:\n            ans += 1\n            cap -= sa[i][0]\n        else:\n            break\n    return min(n - ans, n - cnt + 1)\nfor _ in range(int(input())):\n    print(solve())", "import sys\ninput = sys.stdin.readline\n\ndef readList():\n    return list(map(int, input().split()))\n\ndef readInt():\n    return int(input())\n\ndef readInts():\n    return map(int, input().split())\n\ndef readStr():\n    return input().strip()\n\ndef solve():\n    (n, m) = readInts()\n    arr = readList()\n    sa = sorted([(v, i) for (i, v) in enumerate(arr)], key=lambda x: (x[0], -x[1]))\n    cnt = 0\n    cap = m\n    for i in range(n):\n        if m >= sa[i][0]:\n            cnt += 1\n            m -= sa[i][0]\n        else:\n            break\n    if cnt == n:\n        return 1\n    elif cnt == 0:\n        return n + 1\n    ans = -1\n    for i in range(n):\n        if sa[i][1] == cnt:\n            if i < cnt:\n                return n - cnt\n            elif cap < sa[i][0]:\n                return n - cnt + 1\n            else:\n                cap -= sa[i][0]\n                ans = 1\n    for i in range(n):\n        if sa[i][1] == cnt:\n            continue\n        if cap >= sa[i][0]:\n            ans += 1\n            cap -= sa[i][0]\n        else:\n            break\n    return min(n - ans, n - cnt + 1)\nfor _ in range(int(input())):\n    print(solve())", "t = int(input().strip())\nfor _ in range(t):\n    (n, m) = map(int, input().strip().split())\n    a = list(map(int, input().strip().split()))\n    prep = sorted([(a[i], i) for i in range(n)])\n    tot = 0\n    count = 0\n    last = 0\n    for pair in prep:\n        tot += pair[0]\n        if tot > m:\n            tot -= pair[0]\n            break\n        else:\n            last = pair[0]\n            count += 1\n    if count == 0:\n        print(n + 1)\n    elif count == n:\n        print(1)\n    elif count in [prep[j][1] for j in range(count)]:\n        print(n - count)\n    elif a[count] - last + tot <= m:\n        print(n - count)\n    else:\n        print(n - count + 1)", "def solve(n, m, a):\n    wins = [k for k in range(n)]\n    a = sorted([(prep, index) for (index, prep) in enumerate(a)])\n    time_spent = 0\n    player_wins = 0\n    (defeated_anyone, last_defeated_prep, last_defeated_index) = (False, 0, 0)\n    for (prep, index) in a:\n        if time_spent + prep > m:\n            if defeated_anyone and time_spent - last_defeated_prep + prep <= m and (wins[index] == player_wins):\n                wins[last_defeated_index] += 1\n                time_spent -= last_defeated_prep\n                time_spent += prep\n                (defeated_anyone, last_defeated_prep, last_defeated_index) = (True, prep, index)\n            else:\n                wins[index] += 1\n        else:\n            time_spent += prep\n            player_wins += 1\n            (defeated_anyone, last_defeated_prep, last_defeated_index) = (True, prep, index)\n    return sum((win > player_wins for win in wins)) + 1\nt = int(input())\nfor _ in range(t):\n    (n, m) = [int(component) for component in input().split(' ')]\n    a = [int(component) for component in input().split(' ')]\n    print(solve(n, m, a))", "import sys\nimport heapq\ninput = sys.stdin.readline\n\ndef main():\n    for __ in range(int(input())):\n        (n, m) = [int(xx) for xx in input().split()]\n        a = [int(xx) for xx in input().split()]\n        b = []\n        for i in range(n):\n            b.append((a[i], n - i))\n        b = sorted(b)\n        pr = [0]\n        p = [i for i in range(n)]\n        for i in range(n):\n            pr.append(pr[-1] + b[i][0])\n        for i in range(n + 1):\n            if pr[i] > m:\n                z = i - 1\n                break\n        else:\n            z = n\n        if z == n:\n            print(1)\n            continue\n        if z == 0:\n            print(n + 1)\n            continue\n        h = []\n        s = 0\n        ANS = n - z + 1\n        if pr[z - 1] + a[z] <= m:\n            ANS -= 1\n        print(ANS)\nmain()", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    new_a = []\n    for j in range(len(a)):\n        new_a.append((j, a[j]))\n    old_a = a[:]\n    a = new_a\n    a.sort(key=lambda x: x[1])\n    s = 0\n    players = set()\n    palyers_won = 0\n    for j in range(len(a)):\n        if s + a[j][1] <= m:\n            s += a[j][1]\n            players.add(a[j][0])\n        else:\n            palyers_won = j\n            break\n    else:\n        palyers_won = n\n    place = n - palyers_won\n    if place == 0:\n        print(1)\n        continue\n    elif place == n:\n        print(n + 1)\n        continue\n    if palyers_won not in players:\n        if s - a[palyers_won - 1][1] + old_a[palyers_won] <= m:\n            print(place)\n            continue\n        print(place + 1)\n        continue\n    print(place)", "for _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = a.copy()\n    b.sort()\n    c = [0] * (n + 1)\n    for i in range(n):\n        c[i + 1] = c[i] + b[i]\n    ans = n + 1\n    for x in range(1, n + 1):\n        res = n - x\n        if m >= c[x]:\n            ans = min(n - x + 1, ans)\n        if x < n and m >= c[x] + max(0, a[x] - b[x - 1]):\n            ans = min(ans, max(1, n - x))\n    print(ans)", "import os\nimport math\nimport collections\nimport bisect\nimport functools\nimport itertools\nimport heapq\n\ndef solve(a, n, m):\n    w = list(range(n + 1))\n    b = sorted(([x, -(i + 1)] for (i, x) in enumerate(a)))\n    tmp = m\n    c = 0\n    idx = 0\n    while idx < n:\n        x = b[idx][0]\n        if tmp < x:\n            break\n        c += 1\n        tmp -= x\n        idx += 1\n    if idx == n:\n        return 1\n    remain = tmp\n    if idx > 0:\n        remain += b[idx - 1][0]\n\n    def valid(x):\n        need = n + 1 - x\n        if c >= need:\n            return True\n        if c < need - 1:\n            return False\n        return remain >= a[n - x]\n    (l, r) = (1, n + 1)\n    while l < r:\n        mid = (l + r) // 2\n        if valid(mid):\n            r = mid\n        else:\n            l = mid + 1\n    return l\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(a, n, m))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = [i for i in range(n)]\n    x = [[a[i], i] for i in range(n - 1, -1, -1)]\n    x.sort()\n    c = 0\n    for i in range(n):\n        if m >= x[i][0]:\n            c += 1\n            m -= x[i][0]\n        else:\n            d[x[i][1]] += 1\n    ans = 1\n    if c > 0 and c < n:\n        t = x[c - 1][1] + 1\n        pre = x[c - 1][0]\n        m += pre\n        ch = t - 1\n        for i in range(c, c + 1):\n            if a[i] <= m and d[i] == i + 1 and (d[i] == c + 1):\n                ch = i\n                break\n        d[t - 1] += 1\n        d[ch] -= 1\n    for i in range(n):\n        if d[i] > c:\n            ans += 1\n    print(ans)", "tc = int(input())\nfor _ in range(tc):\n    (n, m) = map(int, input().split())\n    a = [[int(x), i] for (i, x) in enumerate(input().split())]\n    ca = sorted(a)\n    cm = m\n    i = 0\n    while i < n:\n        if cm >= ca[i][0]:\n            cm -= ca[i][0]\n        else:\n            break\n        i += 1\n    if i == n:\n        print(1)\n    else:\n        rank = n - i\n        if m >= a[i][0]:\n            cm = m - a[i][0]\n            (j, k) = (0, 0)\n            while j + k < n:\n                if ca[j + k][1] == i:\n                    k = 1\n                    continue\n                if cm >= ca[j + k][0]:\n                    cm -= ca[j + k][0]\n                else:\n                    break\n                j += 1\n        else:\n            j = -2\n        if j + 1 == i:\n            print(rank)\n        else:\n            print(rank + 1)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = [i for i in range(n)]\n    x = [[a[i], i] for i in range(n)]\n    x.sort()\n    c = 0\n    for i in range(n):\n        if m >= x[i][0]:\n            c += 1\n            m -= x[i][0]\n        else:\n            d[x[i][1]] += 1\n    ans = 1\n    if c > 0 and c < n:\n        m += x[c - 1][0]\n        if a[c] <= m and d[c] == c + 1:\n            d[c] -= 1\n    for i in range(n):\n        if d[i] > c:\n            ans += 1\n    print(ans)"]