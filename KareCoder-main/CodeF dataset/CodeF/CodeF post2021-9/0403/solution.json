["import sys\nimport bisect\nimport math\nfrom collections import deque\ninput = lambda : sys.stdin.readline().strip()\nmod = 10 ** 9 + 7\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    arr = []\n    visited = [False] * (1 + n)\n    for i in a:\n        if i <= n and (not visited[i]):\n            visited[i] = True\n        else:\n            arr.append(i)\n    arr.sort()\n    j = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            if arr[j] < 2 * i + 1:\n                return -1\n            j += 1\n    return j\nt = 1\nt = int(input())\nfor _ in range(t):\n    print(solve())", "def replace_bool(list_a, index, p_list):\n    list_a[p_list[index]] = True\n    return list_a\n\ndef solve():\n    n = int(input())\n    main = [int(x) for x in input().split()]\n    (a, bigger) = ([False] * (n + 1), [])\n    [replace_bool(a, i, main) if main[i] <= n and a[main[i]] is False else bigger.append(main[i]) for i in range(n)]\n    bigger = sorted(bigger)\n    counter = 0\n    for i in range(1, n + 1):\n        if not a[i]:\n            if (bigger[counter] - 1) // 2 >= i:\n                counter += 1\n            else:\n                return -1\n    return counter\ntry:\n    print(*[solve() for _ in range(int(input()))], sep='\\n')\nexcept Exception as error:\n    print(error)", "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    a = []\n    vis = [0] * (1 + n)\n    for i in arr:\n        if i <= n and (not vis[i]):\n            vis[i] = 1\n        else:\n            a.append(i)\n    a.sort()\n    j = 0\n    for i in range(1, n + 1):\n        if not vis[i]:\n            if a[j] < 2 * i + 1:\n                return -1\n            j += 1\n    return j\nt = int(input())\nwhile t:\n    print(solve())\n    t -= 1", "def solve(n, a):\n    c = [0] * n\n    b = []\n    for ai in a:\n        if 1 <= ai <= n and c[ai - 1] == 0:\n            c[ai - 1] = 1\n        else:\n            b.append(ai)\n    b.sort()\n    (idx, b_idx) = (0, 0)\n    count = 0\n    while idx < n:\n        while idx < n and c[idx]:\n            idx += 1\n        if idx == n:\n            break\n        num = b[b_idx]\n        if num % (num - idx - 1) == idx + 1:\n            count += 1\n        else:\n            return -1\n        b_idx += 1\n        idx += 1\n    return count\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        print(solve(n, a))\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    sp = [0] * n\n    s = []\n    for el in a:\n        if el <= n:\n            if sp[el - 1]:\n                s.append(el)\n            else:\n                sp[el - 1] = 1\n        else:\n            s.append(el)\n    s = sorted(s, reverse=True)\n    j = 0\n    for i in range(n - 1, -1, -1):\n        if not sp[i]:\n            if (s[j] - 1) // 2 < i + 1:\n                print(-1)\n                break\n            else:\n                j += 1\n    else:\n        print(len(s))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    need = set(range(n + 1))\n    need.remove(0)\n    remain = []\n    for num in a:\n        if num in need:\n            need.remove(num)\n        else:\n            remain.append(num)\n    remain.sort()\n    need = sorted(list(need))\n    count = 0\n    for (k, l) in zip(remain, need):\n        if l > (k - 1) / 2:\n            print(-1)\n            break\n    else:\n        print(len(need))", "import sys\n\ndef paprika_and_permutation(n, a):\n    total = 0\n    p = set(range(1, n + 1))\n    a_ = []\n    for ai in a:\n        if ai in p:\n            p.remove(ai)\n        else:\n            a_ += [ai]\n    for (pi, ai) in zip(sorted(p), a_):\n        if ai == pi:\n            continue\n        if pi * 2 >= ai:\n            return -1\n        total += 1\n    return total\nfor _ in range(int(input())):\n    n = int(input())\n    a = sorted(map(int, input().split()))\n    sys.stdout.write(f'{paprika_and_permutation(n, a)}\\n')", "def solve(l, n):\n    v = [0] * (n + 1)\n    r = []\n    ans = 0\n    for i in range(n):\n        if l[i] <= n and v[l[i]] == 0:\n            v[l[i]] = l[i]\n        else:\n            r.append(l[i])\n    r.sort(reverse=True)\n    for i in range(1, n + 1):\n        if v[i] == 0:\n            if 2 * i >= r.pop():\n                print(-1)\n                return\n            ans += 1\n    print(ans)\nt = int(input())\nwhile t:\n    n = int(input())\n    l = [int(i) for i in input().split(' ')]\n    solve(l, n)\n    t -= 1", "for i in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    n_set = set(list(range(1, n + 1)))\n    b = []\n    for i in lst:\n        if i in n_set:\n            n_set.remove(i)\n        else:\n            d1 = (i - 1) // 2\n            b.append(d1)\n    b.sort()\n    n_list = sorted(list(n_set))\n    for (k, l) in zip(b, n_list):\n        if l > k:\n            print(-1)\n            break\n    else:\n        print(len(n_set))", "from sys import stdin\ninput = stdin.readline\nrn = lambda : int(input())\nrns = lambda : map(int, input().split())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input().strip()\nYN = lambda x: print('YES') if x else print('NO')\nceil_div = lambda a, b: -(-a // b)\nmod = 10 ** 9 + 7\nfor _ in range(rn()):\n    n = rn()\n    a = rl()\n    s = set(range(1, n + 1))\n    extra = []\n    for i in a:\n        if i in s:\n            s.remove(i)\n        else:\n            extra.append(i)\n    extra.sort()\n    s = sorted(list(s))\n    ans = 0\n    for i in range(len(extra)):\n        if extra[i] / 2 <= s[i]:\n            ans = -1\n            break\n        ans += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    s = set((i for i in range(1, n + 1)))\n    ans = 0\n    dt = []\n    for i in a:\n        if i in s:\n            s.remove(i)\n        else:\n            dt.append(i)\n    dt = sorted(dt)\n    s = sorted(list(s))\n    for i in range(len(s)):\n        if 2 * s[i] + 1 <= dt[i]:\n            ans += 1\n        else:\n            ans = -1\n            break\n    print(ans)", "import sys\n\ndef paprika_and_permutation(n, a):\n    total = 0\n    p = set(range(1, n + 1))\n    a_ = []\n    for ai in a:\n        if ai in p:\n            p.remove(ai)\n        else:\n            a_ += [ai]\n    for (pi, ai) in zip(sorted(p), a_):\n        if ai < pi:\n            return -1\n        if ai == pi:\n            continue\n        if pi * 2 >= ai:\n            return -1\n        total += 1\n    return total\nfor _ in range(int(input())):\n    n = int(input())\n    a = sorted(map(int, input().split()))\n    sys.stdout.write(f'{paprika_and_permutation(n, a)}\\n')", "for _ in range(int(input())):\n    n = int(input())\n    state = {i: False for i in range(1, n + 1)}\n    toform = []\n    for num in (*map(int, input().split()),):\n        if num in state and (not state[num]):\n            state[num] = True\n        else:\n            toform.append(num)\n    if any((y >= x / 2 for (y, x) in zip((i for i in range(1, n + 1) if not state[i]), sorted(toform)))):\n        print(-1)\n    else:\n        print(len(toform))", "def solve(array, n):\n    new_array = [-1 for i in range(n + 1)]\n    temp = []\n    for x in array:\n        if x > n:\n            temp.append(x)\n        elif new_array[x] == 1:\n            temp.append(x)\n        else:\n            new_array[x] = 1\n    temp = sorted(temp)\n    j = 0\n    count = 0\n    for i in range(1, n + 1, 1):\n        if new_array[i] == 1:\n            continue\n        elif temp[j] - i > 0:\n            if temp[j] % (temp[j] - i) == i:\n                new_array[i] = 1\n                count += 1\n                j += 1\n                continue\n            else:\n                return -1\n        else:\n            return -1\n    return count\nt = int(input())\nfor test_case in range(t):\n    n = int(input())\n    array = list(map(int, input().split()))\n    print(solve(array, n))", "def paprika(n, array):\n    ans = 0\n    l = []\n    s = set()\n    for x in range(n):\n        if array[x] not in s and array[x] <= n:\n            s.add(array[x])\n        else:\n            l.append(array[x])\n    l.sort()\n    p = []\n    ans = 0\n    for i in range(1, n + 1):\n        if i not in s:\n            p.append(i)\n    for x in range(len(p)):\n        if l[x] - p[x] > p[x]:\n            ans += 1\n        else:\n            return -1\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(paprika(n, l))", "import math\ntc = int(input())\nwhile tc:\n    tc -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    vis = [False] * n\n    extras = []\n    for x in a:\n        try:\n            if vis[x - 1]:\n                extras.append(x)\n            vis[x - 1] = True\n        except:\n            extras.append(x)\n    missing = []\n    for i in range(n):\n        if not vis[i]:\n            missing.append(i + 1)\n    missing.sort()\n    extras.sort()\n    cond = True\n    for i in range(len(missing)):\n        ex = extras[i]\n        ms = missing[i]\n        if ex < 2 * ms + 1:\n            cond = False\n            break\n    if cond:\n        print(len(missing))\n    else:\n        print(-1)", "import sys\nimport math\nfrom fractions import Fraction\nfrom decimal import *\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    n = int(input().strip())\n    inp = input().strip()\n    arr = [int(x) for x in inp.split(' ')]\n    present = [0] * (n + 1)\n    arr.sort()\n    ans = 0\n    cur = 1\n    for a in arr:\n        if a <= n:\n            if present[a] == 0:\n                present[a] = 1\n            else:\n                while cur <= n and present[cur] == 1:\n                    cur += 1\n                if a >= 2 * cur + 1:\n                    ans += 1\n                    cur += 1\n                else:\n                    ans = -1\n                    break\n        else:\n            while cur <= n and present[cur] == 1:\n                cur += 1\n            if a >= 2 * cur + 1:\n                ans += 1\n                cur += 1\n            else:\n                ans = -1\n                break\n    print(ans)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    state = {i: False for i in range(1, n + 1)}\n    toform = []\n    for num in (*map(int, input().split()),):\n        if num in state and (not state[num]):\n            state[num] = True\n        else:\n            toform.append(num)\n    if any((y >= x / 2 for (y, x) in zip((i for i in range(1, n + 1) if not state[i]), sorted(toform)))):\n        print(-1)\n    else:\n        print(len(toform))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * (n + 1)\n    c = []\n    for i in range(n):\n        if 1 <= a[i] <= n and b[a[i]] == 0:\n            b[a[i]] = a[i]\n        else:\n            c.append(a[i])\n    c.sort(reverse=True)\n    count = 0\n    key = 0\n    for i in range(1, n + 1):\n        if b[i] == 0:\n            if i * 2 >= c.pop():\n                key = 1\n                break\n            else:\n                count = count + 1\n    if key == 0:\n        print(count)\n    else:\n        print(-1)", "import math\nfor s in [*open(0)][2::2]:\n    a = [*map(int, s.split())]\n    op = 0\n    n = len(a)\n    a.sort()\n    undone = [1] * (n + 1)\n    greater = []\n    for x in a:\n        if x <= n and undone[x] == 1:\n            undone[x] = 0\n        else:\n            greater.append(x)\n    undone_collected = []\n    for i in range(1, n + 1):\n        if undone[i] == 1:\n            undone_collected.append(i)\n    for (ud, g) in zip(undone_collected, greater):\n        if ud > math.ceil(g / 2) - 1:\n            print(-1)\n            break\n    else:\n        print(len(greater))", "for _ in range(int(input())):\n    n = int(input())\n    state = {i: False for i in range(1, n + 1)}\n    toform = []\n    for num in (*map(int, input().split()),):\n        if num in state and (not state[num]):\n            state[num] = True\n        else:\n            toform.append(num)\n    if any((y >= x / 2 for (y, x) in zip((i for i in range(1, n + 1) if not state[i]), sorted(toform)))):\n        print(-1)\n    else:\n        print(len(toform))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    Set = set((i for i in range(1, n + 1)))\n    flag = True\n    cnt = 0\n    for i in arr:\n        if Set.__contains__(i):\n            Set.remove(i)\n        else:\n            temp = Set.pop()\n            if temp >= i / 2:\n                flag = False\n                print(-1)\n                break\n            else:\n                cnt += 1\n    if flag:\n        print(cnt)", "T = int(input())\nfor x in range(T):\n    N = int(input())\n    A = [int(d) for d in input().split()]\n    used = [0] * (N + 1)\n    pt = 1\n    A.sort()\n    ans = 0\n    done = False\n    for a in A:\n        while used[pt] == 1:\n            pt += 1\n        if a <= N and used[a] == 0:\n            used[a] = 1\n        elif int((a - 1) / 2) >= pt:\n            used[pt] = 1\n            ans += 1\n        else:\n            print('-1')\n            done = True\n            break\n    if not done:\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    t = set(range(1, n + 1))\n    t_a = set()\n    t_d = []\n    for i in range(n):\n        if a[i] in t and a[i] not in t_a:\n            t_a.add(a[i])\n        else:\n            t_d.append(a[i])\n    dum = list(t - t_a)\n    pr = 0\n    dum.sort()\n    t_d.sort()\n    for i in range(len(t_d)):\n        if (t_d[i] - 1) // 2 < dum[i]:\n            pr = -1\n            break\n    if pr:\n        print(-1)\n    else:\n        print(len(t_d))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    Set = set((i for i in range(1, n + 1)))\n    flag = True\n    cnt = 0\n    for i in arr:\n        if Set.__contains__(i):\n            Set.remove(i)\n        else:\n            temp = Set.pop()\n            if temp >= i / 2:\n                flag = False\n                print(-1)\n                break\n            else:\n                cnt += 1\n    if flag:\n        print(cnt)", "kl = int(input())\nfor kkl in range(kl):\n    n = int(input())\n    sp = [int(i) for i in input().split()]\n    A = {i for i in range(1, n + 1)}\n    Msp = set()\n    rsp = []\n    for i in range(n):\n        if sp[i] in A and sp[i] not in Msp:\n            Msp.add(sp[i])\n        else:\n            rsp.append(sp[i])\n    sp = list(A - Msp)\n    pr = 0\n    rsp.sort()\n    sp.sort()\n    for i in range(len(sp)):\n        if (rsp[i] - 1) // 2 < sp[i]:\n            pr = -1\n            break\n    if pr:\n        print(-1)\n    else:\n        print(n - len(Msp))", "t = int(input())\nfor tc in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    perms = {i for i in range(1, n + 1)}\n    curr = set()\n    rem = []\n    for i in range(n):\n        if arr[i] <= n and arr[i] not in curr:\n            curr.add(arr[i])\n        else:\n            rem.append(arr[i])\n    perms = list(perms - curr)\n    rem.sort()\n    perms.sort()\n    ans = 0\n    for i in range(len(perms)):\n        if (rem[i] - 1) // 2 < perms[i]:\n            ans = -1\n            break\n        else:\n            ans += 1\n    print(ans)", "from collections import defaultdict as dd\nfor _ in range(int(input())):\n    n = int(input())\n    d = dd(int)\n    l = list(map(int, input().split()))\n    for i in range(1, n + 1):\n        d[i] = 0\n    ans = []\n    for i in l:\n        if i <= n and d[i] == 0:\n            d[i] = 1\n        else:\n            ans.append(i)\n    ans.sort(reverse=True)\n    cnt = 0\n    flag = 0\n    for i in range(1, n + 1):\n        if d[i] == 0:\n            if ans[-1] <= 2 * i:\n                print(-1)\n                flag += 1\n                break\n            else:\n                cnt += 1\n                ans.pop()\n    if flag == 0:\n        print(cnt)", "problem_num = int(input())\nfor i in range(problem_num):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    target = set(range(1, n + 1))\n    target_arr = set()\n    target_dup = []\n    for i in range(n):\n        if arr[i] in target and arr[i] not in target_arr:\n            target_arr.add(arr[i])\n        else:\n            target_dup.append(arr[i])\n    dum = list(target - target_arr)\n    pr = 0\n    dum.sort()\n    target_dup.sort()\n    for i in range(len(target_dup)):\n        if (target_dup[i] - 1) // 2 < dum[i]:\n            pr = -1\n            break\n    if pr:\n        print(-1)\n    else:\n        print(len(target_dup))", "t = int(input())\n\ndef maxRem(x):\n    if int(x / 2) == x / 2:\n        return int(x / 2) - 1\n    return int(x / 2)\nfor i in range(t):\n    large = []\n    l = int(input())\n    found = [0] * (l + 1)\n    arr = [*map(int, input().split(' '))]\n    for j in arr:\n        if j <= l and found[j] == 0:\n            found[j] = 1\n        else:\n            large += [j]\n    large = sorted(large)\n    ops = 0\n    poss = True\n    for j in range(1, l + 1):\n        if found[j] == 1:\n            continue\n        if maxRem(large[ops]) >= j:\n            ops += 1\n        else:\n            poss = False\n            break\n    if poss:\n        print(ops)\n    else:\n        print(-1)", "import sys\n\ndef paprika_and_permutation(n, a):\n    total = 0\n    p = set(range(1, n + 1))\n    a_ = []\n    for ai in a:\n        if ai in p:\n            p.remove(ai)\n        else:\n            a_ += [ai]\n    for (pi, ai) in zip(sorted(p), a_):\n        if ai < pi:\n            return -1\n        if ai == pi:\n            continue\n        if pi * 2 >= ai:\n            return -1\n        total += 1\n    return total\nfor _ in range(int(input())):\n    n = int(input())\n    a = sorted(map(int, input().split()))\n    sys.stdout.write(f'{paprika_and_permutation(n, a)}\\n')", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    Set = set((i for i in range(1, n + 1)))\n    flag = True\n    cnt = 0\n    for i in arr:\n        if Set.__contains__(i):\n            Set.remove(i)\n        else:\n            temp = Set.pop()\n            if temp >= i / 2:\n                flag = False\n                print(-1)\n                break\n            else:\n                cnt += 1\n    if flag:\n        print(cnt)", "for _ in range(int(input())):\n    n = int(input())\n    a_min = {}\n    a_max = []\n    awn = n\n    for i in input().split():\n        i = int(i)\n        if i <= n:\n            if a_min.get(i, 0) == 1:\n                a_max.append(i)\n            else:\n                a_min[i] = 1\n                awn -= 1\n        else:\n            a_max.append(i)\n    a_max.sort()\n    i0 = 0\n    for i in range(1, n + 1):\n        if a_min.get(i, 0) == 0:\n            if a_max[i0] <= i * 2:\n                awn = -1\n                break\n            i0 += 1\n    print(awn)", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    dct = dict()\n    for i in range(1, n + 1):\n        dct[i] = 0\n    flag = 1\n    temp = []\n    for i in lst:\n        if i <= n and dct[i] == 0:\n            dct[i] += 1\n        else:\n            temp.append(i)\n    temp.sort()\n    j = 0\n    for i in range(1, n + 1):\n        if dct[i] == 1:\n            continue\n        elif temp[j] > 2 * i:\n            j += 1\n        else:\n            flag = 0\n            break\n    if flag == 0:\n        print(-1)\n    else:\n        print(j)", "import math\nx = int(input())\nfor i in range(x):\n    y = int(input())\n    a = input().split()\n    for k in range(y):\n        a[k] = int(a[k])\n    d = dict()\n    res = []\n    for kk in a:\n        if kk >= 1 and kk <= y:\n            if kk not in d:\n                d[kk] = 1\n            else:\n                res.append(kk)\n        else:\n            res.append(kk)\n    res.sort()\n    m = []\n    for jj in range(1, y + 1):\n        if jj not in d:\n            m.append(jj)\n    m.sort()\n    ans = 0\n    flag = True\n    for ll in range(len(m)):\n        if m[ll] * 2 < res[ll]:\n            ans += 1\n        else:\n            flag = False\n            break\n    if flag:\n        print(ans)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    state = {i: False for i in range(1, n + 1)}\n    toform = []\n    for num in (*map(int, input().split()),):\n        if num in state and (not state[num]):\n            state[num] = True\n        else:\n            toform.append(num)\n    if any((y >= x / 2 for (y, x) in zip((i for i in range(1, n + 1) if not state[i]), sorted(toform)))):\n        print(-1)\n    else:\n        print(len(toform))", "for _ in range(int(input())):\n    n = int(input())\n    state = {i: False for i in range(1, n + 1)}\n    toform = []\n    for num in (*map(int, input().split()),):\n        if num in state and (not state[num]):\n            state[num] = True\n        else:\n            toform.append(num)\n    if any((y >= x / 2 for (y, x) in zip((i for i in range(1, n + 1) if not state[i]), sorted(toform)))):\n        print(-1)\n    else:\n        print(len(toform))", "def solve(a, n):\n    a.sort()\n    check = [False for i in range(0, n + 1)]\n    l = []\n    for c in a:\n        if 0 < c < n + 1 and (not check[c]):\n            check[c] = True\n        else:\n            l.append(c)\n    r = []\n    for i in range(1, n + 1):\n        if not check[i]:\n            r.append(i)\n    ans = len(l)\n    for j in range(0, len(l)):\n        if l[j] - (int(l[j] / 2) + 1) < r[j]:\n            ans = -1\n    print(ans)\n    return ans\ntest = int(input())\nfor te in range(0, test):\n    n = int(input())\n    a = list(map(int, input().split()))\n    solve(a, n)", "for _ in range(int(input())):\n    n = int(input())\n    state = {i: False for i in range(1, n + 1)}\n    toform = []\n    for num in (*map(int, input().split()),):\n        if num in state and (not state[num]):\n            state[num] = True\n        else:\n            toform.append(num)\n    if any((y >= x / 2 for (y, x) in zip((i for i in range(1, n + 1) if not state[i]), sorted(toform)))):\n        print(-1)\n    else:\n        print(len(toform))", "import heapq\nfrom collections import *\nimport math\n\ndef solve():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    d = defaultdict(int)\n    t = []\n    for i in a:\n        d[i] += 1\n        if d[i] > 1 and d[i] <= n:\n            t.append(i)\n        elif i > n:\n            t.append(i)\n    t.sort(reverse=True)\n    k = len(t)\n    for i in range(n):\n        if d.get(i + 1, 0) == 0:\n            y = i + 1\n            l = t.pop()\n            if l % (l - y) == y:\n                continue\n            else:\n                print(-1)\n                return\n    print(k)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nt = inp()\nfor _ in range(t):\n    n = inp()\n    A = inlt()\n    st = set()\n    for i in range(n, 0, -1):\n        st.add(i)\n    B = []\n    for a in A:\n        if a in st:\n            st.remove(a)\n        else:\n            B.append(a)\n    B = sorted(B)\n    C = list(st)\n    res = 0\n    for b in B[::-1]:\n        s = C.pop()\n        if b > s * 2:\n            st.pop()\n            res += 1\n        else:\n            print(-1)\n            break\n    else:\n        print(res)", "for iii in range(int(input())):\n    n = int(input())\n    q = list(map(int, input().split()))\n    q1 = []\n    q2 = [0 for i in range(n + 1)]\n    for i in range(n):\n        if q[i] <= n and q2[q[i]] == 0:\n            q2[q[i]] = 1\n        else:\n            q1.append(q[i])\n    q1.sort()\n    if len(q1) == 0:\n        print(0)\n        continue\n    cou = 0\n    flag = False\n    ind = 0\n    for i in range(1, n + 1, 1):\n        if q2[i] == 0:\n            x = q1[ind] - i\n            if q1[ind] % x != i:\n                flag = True\n            else:\n                cou += 1\n            ind += 1\n        if flag:\n            break\n    if flag:\n        print(-1)\n        continue\n    print(cou)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    t = set(range(1, n + 1))\n    t_s = set()\n    t_l = []\n    for i in range(n):\n        if a[i] in t and a[i] not in t_s:\n            t_s.add(a[i])\n        else:\n            t_l.append(a[i])\n    new = sorted(list(t - t_s))\n    cnt = 0\n    t_l.sort()\n    for i in range(len(t_l)):\n        if (t_l[i] - 1) // 2 < new[i]:\n            cnt = -1\n            break\n    if cnt:\n        print(-1)\n    else:\n        print(len(t_l))", "T = int(input())\nfor x in range(T):\n    N = int(input())\n    A = [int(d) for d in input().split()]\n    used = [0] * (N + 1)\n    pt = 1\n    A.sort()\n    ans = 0\n    done = False\n    for a in A:\n        while used[pt] == 1:\n            pt += 1\n        if a <= N and used[a] == 0:\n            used[a] = 1\n        elif int((a - 1) / 2) >= pt:\n            used[pt] = 1\n            ans += 1\n        else:\n            print('-1')\n            done = True\n            break\n    if not done:\n        print(ans)", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    need = []\n    pre = []\n    s = set(arr)\n    s1 = set()\n    for i in range(1, n + 1):\n        if i not in s:\n            need.append(i)\n    for i in range(len(arr)):\n        if arr[i] > n or arr[i] in s1:\n            pre.append(arr[i])\n        else:\n            s1.add(arr[i])\n    pre.sort()\n    need.sort()\n    move = 0\n    flag = 0\n    for i in range(len(pre)):\n        m = pre[i] // 2\n        maxi = pre[i] % (m + 1)\n        if maxi < need[i]:\n            flag = 1\n            break\n        else:\n            move += 1\n    if flag:\n        print(-1)\n    else:\n        print(move)", "def pp(n, l):\n    lnt = []\n    v = [0] * (n + 1)\n    i = 0\n    while i < len(l):\n        if l[i] <= n:\n            if v[l[i]] == 0:\n                v[l[i]] += 1\n            else:\n                lnt.append(l[i])\n        else:\n            lnt.append(l[i])\n        i = i + 1\n    lnt.sort()\n    lnv = []\n    i = 1\n    while i < len(v):\n        if v[i] == 0:\n            lnv.append(i)\n        i = i + 1\n    count = 0\n    for i in range(len(lnt)):\n        if (lnv[i] < lnt[i] / 2) & (lnv[i] >= 1):\n            count = count + 1\n        else:\n            return -1\n    return count\nt = int(input())\nln = []\nls = []\nfor x in range(t):\n    n = int(input())\n    s = str(input())\n    ln.append(n)\n    ls.append(s)\nlop = []\nfor i in range(len(ln)):\n    n = ln[i]\n    s = ls[i]\n    s1 = s.split(' ')\n    l = []\n    for x in s1:\n        l.append(int(x))\n    ans = pp(n, l)\n    lop.append(ans)\nfor x in lop:\n    print(x)", "kl = int(input())\nfor kkl in range(kl):\n    n = int(input())\n    sp = [int(i) for i in input().split()]\n    A = {i for i in range(1, n + 1)}\n    Msp = set()\n    rsp = []\n    for i in range(n):\n        if sp[i] in A and sp[i] not in Msp:\n            Msp.add(sp[i])\n        else:\n            rsp.append(sp[i])\n    sp = list(A - Msp)\n    pr = 0\n    rsp.sort()\n    sp.sort()\n    for i in range(len(sp)):\n        if (rsp[i] - 1) // 2 < sp[i]:\n            pr = -1\n            break\n    if pr:\n        print(-1)\n    else:\n        print(n - len(Msp))", "nt = int(input())\nans = []\n\ndef soln(arr, n):\n    if n == 1 and arr[0] == 2:\n        return -1\n    p = []\n    q = []\n    count = 0\n    arr.sort()\n    d = {}\n    for x in range(n):\n        d[x + 1] = 0\n    for x in range(n):\n        if arr[x] <= n and arr[x] >= 1:\n            if d[arr[x]] == 0:\n                d[arr[x]] = 1\n            else:\n                p.append(arr[x])\n        else:\n            p.append(arr[x])\n    for x in range(n):\n        if d[x + 1] == 0:\n            q.append(x + 1)\n    t = 0\n    for x in range(len(p)):\n        if p[x] > 2 * q[x]:\n            count = count + 1\n        else:\n            count = -1\n            break\n    return count\nfor x in range(nt):\n    n = int(input())\n    ans.append(soln(list(map(int, input().split())), n))\nfor a in ans:\n    print(a)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    ok = True\n    che = [False] * n\n    v = []\n    for i in A:\n        if i <= n and che[i - 1] == False:\n            che[i - 1] = True\n        else:\n            v.append(i)\n    v = v[::-1]\n    c = 0\n    for i in range(n):\n        if not che[i]:\n            k = v.pop()\n            k = (k - 1) // 2\n            if k < i + 1:\n                ok = False\n            c += 1\n    if ok:\n        print(c)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted([int(i) for i in input().split()])\n    v = [False] * (n + 1)\n    arr = []\n    (i, res) = (0, 0)\n    for k in a:\n        i += 1\n        if k <= n and v[k] == False:\n            v[k] = True\n        else:\n            arr += [k]\n    j = 0\n    for i in range(n):\n        if v[i + 1]:\n            continue\n        if arr[j] >= 2 * (i + 1) + 1:\n            res += 1\n            j += 1\n            continue\n        res = -1\n        break\n    print(res)", "def half(v):\n    h = v // 2\n    if h * 2 == v:\n        h -= 1\n    return h\nt = int(input())\nfor case in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = set(range(1, n + 1))\n    mxs = []\n    for v in a:\n        if v in s:\n            s.remove(v)\n        else:\n            mxs.append(half(v))\n    mxs.sort()\n    ok = True\n    count = 0\n    for i in range(n, 0, -1):\n        if i in s:\n            if mxs[-1] < i:\n                ok = False\n                break\n            mxs.pop()\n            count += 1\n    if ok:\n        print(count)\n    else:\n        print(-1)", "import sys\nfrom collections import deque\nimport heapq\nimport bisect\nimport copy\nMOD = 1000000007\nNO = lambda : print('NO')\nYES = lambda : print('YES')\n_1 = lambda : print(-1)\nari = lambda : [int(_) for _ in input().split()]\ncin = lambda : int(input())\ncis = lambda : input()\nshow = lambda x: print(x)\nfast = lambda : sys.stdin.readline()\ntest_case = 1\ntest_case = int(input())\nsys.setrecursionlimit(10 ** 6)\n\ndef ans():\n    n = cin()\n    arr = ari()\n    arr.sort()\n    count = 0\n    st = set()\n    for i in range(1, n + 1):\n        st.add(i)\n    take = set()\n    for i in range(n):\n        if arr[i] in st:\n            take.add(i)\n            st.remove(arr[i])\n    newarr = []\n    for i in range(n):\n        if i not in take:\n            newarr.append(arr[i])\n    count = 0\n    val = sorted(list(set(st)), reverse=True)\n    for i in newarr:\n        wewant = val.pop()\n        if i < wewant:\n            print(-1)\n            return\n        ok = i - wewant\n        if i % ok != wewant:\n            print(-1)\n            return\n        count += 1\n    print(count)\n    return\nfor _ in range(test_case):\n    ans()", "for _ in range(int(input())):\n    n = int(input())\n    nums = sorted(list(map(int, input().split())))\n    seen = [0] * (n + 1)\n    (count, pos, first_empty) = (0, True, 1)\n    for num in nums:\n        if 1 <= num <= n and seen[num] == 0:\n            seen[num] = 1\n            while first_empty <= n and seen[first_empty] == 1:\n                first_empty += 1\n        elif num / 2 > first_empty:\n            count += 1\n            first_empty += 1\n            while first_empty <= n and seen[first_empty] == 1:\n                first_empty += 1\n        else:\n            pos = False\n            break\n    print(count if pos else -1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    a.sort()\n    had = [0] * n\n    un_know = []\n    for i in range(len(a)):\n        if a[i] <= n and had[a[i] - 1] == 0:\n            had[a[i] - 1] = 1\n        else:\n            un_know.append(a[i])\n    un_know.sort()\n    j = 0\n    for i in range(n):\n        if had[i] == 0:\n            if un_know[j] - un_know[j] // 2 - 1 >= i + 1:\n                j += 1\n            else:\n                j = -1\n                break\n        if j >= len(un_know):\n            break\n    print(j)", "from collections import Counter\n\ndef solve():\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    counts = Counter(A)\n    missing = []\n    for i in range(1, n + 1):\n        if i not in counts:\n            missing.append(i)\n        else:\n            counts[i] -= 1\n    extra = []\n    for (x, c) in counts.items():\n        extra += [x] * c\n    extra.sort()\n    for (m, e) in zip(missing, extra):\n        if m > (e - 1) // 2:\n            return -1\n    return len(missing)\nt = int(input())\nfor _ in range(t):\n    print(solve())", "from itertools import permutations as per\nfrom math import factorial as fact\nfrom difflib import SequenceMatcher\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    ans = [0] * n\n    a.sort()\n    c = 0\n    k = 0\n    for (i, v) in enumerate(a):\n        if v <= n and ans[v - 1] == 0:\n            ans[v - 1] = 1\n        elif ans[k] == 0:\n            if v > (k + 1) * 2:\n                c += 1\n                ans[k] = 1\n                k += 1\n            else:\n                c = -1\n                break\n        elif ans[k] == 1:\n            while ans[k] == 1:\n                k += 1\n            if v > (k + 1) * 2:\n                c += 1\n                ans[k] = 1\n                k += 1\n            else:\n                c = -1\n                break\n    print(c)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    s.sort()\n    s1 = [0] * (n + 1)\n    s2 = []\n    for i in range(len(s)):\n        if s[i] <= len(s) and s1[s[i]] == 0:\n            s1[s[i]] = 1\n        else:\n            s2.append(s[i])\n    s2.sort()\n    j = 0\n    for i in range(1, n + 1):\n        if s1[i] == 0:\n            if s2[j] - s2[j] // 2 - 1 >= i:\n                j += 1\n            else:\n                j = -1\n                break\n        if j >= len(s2):\n            break\n    print(j)", "for _ in range(int(input())):\n    check = {}\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    R = []\n    for i in range(n):\n        if a[i] <= n and (i == 0 or a[i] != a[i - 1]):\n            if not a[i] in check:\n                check[a[i]] = 1\n            pass\n        else:\n            R.append((a[i] - 1) // 2)\n    ans = 0\n    j = len(R) - 1\n    for i in range(n, 0, -1):\n        if not i in check:\n            if j >= 0 and R[j] >= i:\n                ans += 1\n                j -= 1\n            else:\n                ans = -1\n                break\n    print(ans)", "_ = int(input())\nfor __ in range(_):\n    n = int(input())\n    arr = sorted(list(map(int, input().split())))\n    arr_ranges = []\n    arr_done = [-1] * n\n    out = 0\n    for x in range(n):\n        if arr[x] <= n and arr_done[arr[x] - 1] == -1:\n            arr_done[arr[x] - 1] = 1\n            continue\n        tmp = arr[x]\n        if tmp % 2 == 0:\n            tmp -= 1\n        tmp = tmp // 2\n        arr_ranges.append(tmp)\n    pointer = 0\n    for x in range(0, n):\n        if arr_done[x] == -1:\n            if arr_ranges and pointer < len(arr_ranges) and (arr_ranges[pointer] >= x + 1):\n                out += 1\n                pointer += 1\n            else:\n                print(-1)\n                break\n    else:\n        print(out)", "t = int(input())\nfor e in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    h = {}\n    for i in a:\n        if i in h:\n            h[i] += 1\n        else:\n            h[i] = 1\n    al = []\n    for i in range(1, len(a) + 1):\n        if i in h:\n            h[i] -= 1\n            if h[i] == 0:\n                del h[i]\n        else:\n            al.append(i)\n    an = []\n    for i in h:\n        for k in range(h[i]):\n            if i % 2 == 0:\n                an.append(int((i - 1) / 2))\n            else:\n                an.append(int(i / 2))\n    al.sort()\n    an.sort()\n    c = 0\n    for i in range(len(al)):\n        if al[i] <= an[i]:\n            continue\n        else:\n            c = 1\n            print(-1)\n            break\n    if c == 0:\n        print(len(al))", "import sys\nfrom math import *\nfrom math import *\nfrom functools import *\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split())) + [0]\n    b = [-1] * (n + 1)\n    a.sort()\n    for i in a:\n        if i <= n:\n            b[i] += 1\n    c = 0\n    j = 1\n    i = 1\n    while j <= n:\n        if b[j] < 0:\n            if a[i] > n or b[a[i]]:\n                if a[i] <= n:\n                    b[a[i]] -= 1\n                if a[i] > 2 * j:\n                    c += 1\n                    j += 1\n                    i += 1\n                else:\n                    print(-1)\n                    break\n            elif b[a[i]] == 0:\n                i += 1\n        else:\n            j += 1\n    else:\n        print(c)", "def find(n, L):\n    occupy = [0]\n    left = []\n    L.sort()\n    L.reverse()\n    for i in range(n):\n        elem = L[-1]\n        L.pop()\n        if elem <= n and elem > occupy[-1]:\n            occupy.append(elem)\n        else:\n            left.append(elem)\n    occupy.append(n + 1)\n    needed = []\n    for i in range(len(occupy) - 1):\n        for j in range(occupy[i] + 1, occupy[i + 1]):\n            needed.append(j)\n    for i in range(len(needed)):\n        if left[i] > 2 * needed[i]:\n            pass\n        else:\n            return -1\n    return len(needed)\ncases = int(input())\nfor wow in range(cases):\n    n = int(input())\n    line = input().split()\n    L = []\n    for elem in line:\n        L.append(int(elem))\n    print(find(n, L))", "for _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    temp = []\n    x2 = []\n    for i in range(n):\n        if x[i] <= n:\n            temp += [x[i]]\n        else:\n            x2 += [x[i]]\n    if len(temp) > 0:\n        temp = sorted(temp)\n        x1 = [temp[0]]\n        for i in range(1, len(temp)):\n            if temp[i] != x1[-1]:\n                x1 += [temp[i]]\n            else:\n                x2 += [temp[i]]\n    else:\n        x1 = []\n    if len(x1) == n:\n        ans = 0\n    else:\n        x1 = sorted(x1)\n        x2 = sorted(x2)\n        i = 0\n        j = 0\n        temp = 1\n        ans = 0\n        while temp <= n:\n            if len(x1) > i and x1[i] == temp:\n                temp += 1\n                i += 1\n            elif len(x2) > j and x2[j] >= 2 * temp + 1:\n                ans += 1\n                temp += 1\n                j += 1\n            else:\n                ans = -1\n                break\n    print(ans)", "from itertools import permutations as per\nfrom math import factorial as fact\nfrom difflib import SequenceMatcher\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    v = [0] * (n + 1)\n    a.sort()\n    c = 0\n    j = 0\n    for i in range(1, n + 1):\n        while j < n and a[j] <= n and (v[a[j]] == 0):\n            v[a[j]] = 1\n            j += 1\n        if v[i] == 0:\n            if a[j] > 2 * i:\n                j += 1\n                c += 1\n            else:\n                c = -1\n                break\n    print(c)", "inp = int(input())\nfor i in range(inp):\n    n = int(input())\n    true_set = {}\n    for i in range(1, n + 1):\n        true_set[i] = 1\n    false_set = list(map(int, input().split()))\n    false_set.sort()\n    ans = n\n    new_false_set = []\n    for i in range(1, n + 1):\n        if false_set[i - 1] in true_set and true_set[false_set[i - 1]] != 0:\n            true_set[false_set[i - 1]] = 0\n            false_set[i - 1] = 0\n            ans -= 1\n        else:\n            new_false_set.append(false_set[i - 1])\n    new_true_set = []\n    for i in true_set:\n        if true_set[i] != 0:\n            new_true_set.append(i)\n    iter = 0\n    for i in new_true_set:\n        if new_false_set[iter] % 2 == 0:\n            if new_false_set[iter] // 2 - 1 < i:\n                ans = -1\n                break\n        elif new_false_set[iter] // 2 < i:\n            ans = -1\n            break\n        iter += 1\n    print(ans)", "from collections import Counter\nfrom sys import stdin\ninput = stdin.readline\nfor test in range(int(input())):\n    n = int(input())\n    arr = sorted([int(i) for i in input().split()])\n    prev = 1\n    moves = 0\n    bool = True\n    c = Counter()\n    for x in arr:\n        while c[prev] == 1:\n            prev += 1\n        if x <= n and c[x] == 0:\n            c[x] = 1\n        elif (x - 1) // 2 >= prev:\n            c[prev] = 1\n            moves += 1\n        else:\n            bool = False\n            break\n    if bool:\n        print(moves)\n    else:\n        print(-1)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    d = defaultdict(lambda : 0)\n    for i in A:\n        d[i] += 1\n    app = []\n    for i in range(1, n + 1):\n        if d[i] == 0:\n            app.append(i)\n    app.sort()\n    rest = []\n    for i in d.keys():\n        if i > n:\n            rest += [i] * d[i]\n        elif d[i] > 1:\n            rest += [i] * (d[i] - 1)\n    rest.sort()\n    ok = True\n    for i in range(len(app)):\n        if rest[i] - app[i] <= app[i]:\n            ok = False\n    if ok:\n        print(len(rest))\n    else:\n        print(-1)", "inp = int(input())\nfor i in range(inp):\n    n = int(input())\n    true_set = {}\n    for i in range(1, n + 1):\n        true_set[i] = 1\n    false_set = list(map(int, input().split()))\n    false_set.sort()\n    ans = n\n    new_false_set = []\n    for i in range(1, n + 1):\n        if false_set[i - 1] in true_set and true_set[false_set[i - 1]] != 0:\n            true_set[false_set[i - 1]] = 0\n            false_set[i - 1] = 0\n            ans -= 1\n        else:\n            new_false_set.append(false_set[i - 1])\n    new_true_set = []\n    for i in true_set:\n        if true_set[i] != 0:\n            new_true_set.append(i)\n    iter = 0\n    for i in new_true_set:\n        if new_false_set[iter] % 2 == 0:\n            if new_false_set[iter] // 2 - 1 < i:\n                ans = -1\n                break\n        elif new_false_set[iter] // 2 < i:\n            ans = -1\n            break\n        iter += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    lst.sort()\n    lst1 = []\n    for j in lst:\n        if j > n:\n            lst1.append(j)\n    lstf = []\n    se = set()\n    lsta = []\n    for h in range(1, n + 1):\n        se.add(h)\n        lsta.append(h)\n    sa = set(lsta)\n    for g in lst:\n        if g in se:\n            se.remove(g)\n    lstreq = list(se)\n    lsthave = []\n    for b in lst:\n        if b in sa:\n            sa.remove(b)\n        else:\n            lsthave.append(b)\n    c = 0\n    err = 0\n    for v in range(len(lsthave)):\n        if lsthave[v] / 2 > lstreq[v]:\n            c += 1\n        else:\n            err += 1\n            break\n    if err > 0:\n        print(-1)\n    else:\n        print(c)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    A = [int(k) for k in input().split()]\n    d = []\n    l = 0\n    m = 0\n    d = dict()\n    A.sort()\n    m = []\n    b = []\n    for k in range(1, n + 1):\n        d[k] = 0\n    for k in range(n):\n        if A[k] in d:\n            if d[A[k]] == 0:\n                d[A[k]] += 1\n            else:\n                m.append(A[k])\n        else:\n            m.append(A[k])\n    for k in d:\n        if d[k] == 0:\n            b.append(k)\n    m.sort()\n    b.sort()\n    j = 0\n    y = 0\n    c = 0\n    for k in range(len(m)):\n        if m[k] % 2 == 0:\n            m[k] -= 2\n            if b[j] <= m[k] // 2:\n                j += 1\n                c += 1\n            else:\n                break\n        else:\n            m[k] -= 1\n            if b[j] <= m[k] // 2:\n                j += 1\n                c += 1\n            else:\n                break\n    if c == len(m):\n        print(c)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = set([x for x in range(1, n + 1)])\n    boo = [0 for i in range(n)]\n    l.sort()\n    l_new = []\n    f = 0\n    c = 0\n    for i in range(len(l)):\n        if l[i] in s:\n            s.remove(l[i])\n            boo[l[i] - 1] = 1\n        else:\n            x = i\n            l_new.append(l[i])\n    l_new.sort(reverse=True)\n    ans = []\n    for i in range(len(boo)):\n        if boo[i] == 0:\n            ans.append(i + 1)\n    ans.sort(reverse=True)\n    for i in range(len(l_new) - 1, -1, -1):\n        if l_new[i] % 2 == 0:\n            if ans[-1] <= l_new[i] // 2 - 1:\n                z = ans.pop()\n                c += 1\n            else:\n                f = 1\n                break\n        elif ans[-1] <= (l_new[i] - 1) // 2:\n            z = ans.pop()\n            c += 1\n        else:\n            f = 1\n            break\n    if len(ans) == 0 and f == 0:\n        print(c)\n    elif len(ans) != 0 or f == 1:\n        print(-1)", "from sys import stdin\nfrom bisect import bisect\nfrom math import gcd\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    d = [False for i in range(n + 1)]\n    d[0] = True\n    l = []\n    for a in arr:\n        if a <= n and d[a] == False:\n            d[a] = True\n        else:\n            l.append(a)\n    l.sort()\n    ans = 0\n    for i in range(1, n + 1):\n        if d[i] == False:\n            ans += 1\n    i = 1\n    j = 0\n    while i < n + 1:\n        if d[i] == False:\n            x = bisect(l, 2 * i, j, len(l))\n            if x == len(l) or j == len(l):\n                ans = -1\n                break\n            j = x + 1\n        i += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    check = False\n    ck = [False] * n\n    cks = [False] * n\n    for i in range(n):\n        if a[i] <= n and (not ck[a[i] - 1]):\n            ck[a[i] - 1] = True\n            cks[i] = True\n    ind = 0\n    ans = 0\n    for i in range(n):\n        if not ck[i]:\n            for j in range(ind, n):\n                if not cks[j] and a[j] >= 2 * (i + 1) + 1:\n                    ind = j + 1\n                    ck[i] = True\n                    cks[j] = True\n                    ans += 1\n                    break\n    if False in ck:\n        print(-1)\n    else:\n        print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    b = []\n    length_b = 0\n    a.sort()\n    theta = 0\n    while theta < n and a[theta] <= n:\n        if length_b == 0 or b[-1] != a[theta]:\n            b.append(a[theta])\n            a[theta] = -1\n            length_b += 1\n        theta += 1\n    operations = 0\n    a.reverse()\n    b.reverse()\n    delta = n\n    cur_a = 0\n    cur_b = 0\n    while delta > 0:\n        if cur_b < length_b and b[cur_b] == delta:\n            cur_b += 1\n        else:\n            while cur_a < n and a[cur_a] == -1:\n                cur_a += 1\n            if cur_a < n:\n                if a[cur_a] > 2 * delta:\n                    operations += 1\n                else:\n                    operations = -1\n                    break\n            cur_a += 1\n        delta -= 1\n    print(operations)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    done = {}\n    for i in range(n):\n        if a[i] <= n and a[i] >= 1:\n            if done.get(a[i]):\n                done[a[i]] += 1\n            else:\n                done[a[i]] = 1\n    notdone = []\n    req = []\n    for i in a:\n        if done.get(i) == None:\n            notdone.append(i)\n    for i in range(1, n + 1):\n        if done.get(i) == None:\n            req.append(i)\n    for i in done:\n        if done[i] > 1:\n            notdone.extend([i] * (done[i] - 1))\n    notdone.sort()\n    req.sort()\n    valid = True\n    for i in range(len(req)):\n        if notdone[i] - req[i] <= req[i]:\n            valid = False\n            break\n    if valid:\n        print(len(req))\n    else:\n        print(-1)", "import bisect\nfor i in range(int(input())):\n    n = int(input())\n    l = sorted(map(int, input().split()))\n    x = set(l)\n    q = 1\n    w = {}\n    r = set()\n    for i in l:\n        w[i] = w.get(i, 0) + 1\n    for i in range(n):\n        if q in x:\n            w[q] -= 1\n        else:\n            r.add(q)\n        q += 1\n    l = []\n    for i in w:\n        l += [i] * w[i]\n    l.sort()\n    r = sorted(r)\n    t = 1\n    o = 0\n    for i in range(len(r)):\n        if r[i] * 2 + 1 > l[i]:\n            t = 0\n        else:\n            o += 1\n    print(o if t else -1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    d = dict()\n    for i in range(1, n + 1):\n        d[i] = 0\n    li = []\n    for i in range(n):\n        if a[i] in d:\n            if d[a[i]] == 0:\n                d[a[i]] = 1\n            else:\n                li.append(a[i])\n        else:\n            li.append(a[i])\n    rem = []\n    for i in d:\n        if d[i] == 0:\n            rem.append(i)\n    rem.sort()\n    j = 0\n    li.sort()\n    le = len(li)\n    y = 0\n    c = 0\n    for i in range(le):\n        if li[i] % 2 == 0:\n            li[i] -= 2\n            if rem[j] <= li[i] // 2:\n                j += 1\n                c += 1\n            else:\n                y = 1\n                break\n        else:\n            li[i] -= 1\n            if rem[j] <= li[i] // 2:\n                j += 1\n                c += 1\n            else:\n                y = 1\n                break\n    if c == le:\n        print(c)\n    else:\n        print(-1)", "n = int(input())\nfor i in range(n):\n    k = int(input())\n    L = input().split(' ')\n    for j in range(len(L)):\n        L[j] = int(L[j])\n    L.sort()\n    sum = 0\n    OKDic = {}\n    j = 1\n    t = -1\n    rem = -1\n    while t < len(L) - 1:\n        t += 1\n        if L[t] == j:\n            j += 1\n        elif L[t] <= len(L) and L[t] != rem:\n            OKDic[L[t]] = True\n        elif L[t] > 2 * j:\n            sum += 1\n            j += 1\n        else:\n            sum = -1\n            break\n        while j in OKDic and OKDic[j]:\n            OKDic[j] = False\n            j += 1\n        if j > len(L):\n            break\n        if t == len(L) - 1:\n            break\n        rem = L[t]\n    print(sum)", "import math\nm = int(input())\nimport collections\nwhile m > 0:\n    n = int(input())\n    a = input().split()\n    for i in range(n):\n        a[i] = int(a[i])\n    d = collections.defaultdict(int)\n    a.sort()\n    fl = 1\n    v = []\n    for i in range(n):\n        if i + 1 > a[i]:\n            fl = -1\n            break\n        d[a[i]] += 1\n        if a[i] <= n and d[a[i]] > 1:\n            v.append(a[i])\n        if a[i] > n:\n            v.append(a[i])\n    if fl == 1:\n        s = []\n        for i in range(n):\n            if d[i + 1] == 0:\n                s.append(i + 1)\n        for i in range(len(s) - 1, -1, -1):\n            if (v[i] - 1) // 2 < s[i]:\n                fl = -1\n                break\n    if fl == 1:\n        print(len(s))\n    else:\n        print('-1')\n    m -= 1", "from _collections import defaultdict\nfor j in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    cnt = 0\n    ok = 0\n    dic = defaultdict(lambda : 0)\n    for el in arr:\n        dic[el] += 1\n    missed = []\n    for i in range(1, n + 1):\n        if dic[i] == 0:\n            missed.append(i)\n    missed.sort(reverse=True)\n    for i in range(n):\n        now = arr[i] - arr[i] // 2 - 1\n        if arr[i] == i + 1:\n            pass\n        elif arr[i] <= n and dic[arr[i]] > 1:\n            if now < missed[-1]:\n                ok = -1\n                break\n            else:\n                cnt += 1\n                missed.pop()\n                dic[arr[i]] -= 1\n        elif arr[i] <= n and dic[arr[i]] == 1:\n            pass\n        elif now < missed[-1]:\n            ok = -1\n            break\n        else:\n            cnt += 1\n            missed.pop()\n        if len(missed) == 0:\n            break\n    if ok == -1:\n        print(-1)\n    else:\n        print(cnt)", "def f(a):\n    bad = []\n    n = len(a)\n    vis = [-1] * (len(a) + 1)\n    nt = []\n    for i in a:\n        if i > n or vis[i] != -1:\n            bad.append(i)\n        else:\n            vis[i] = 1\n    for i in range(1, n + 1):\n        if vis[i] == -1:\n            nt.append(i)\n    nt.sort(reverse=True)\n    bad.sort(reverse=True)\n    ans = len(bad)\n    for val in bad:\n        id = None\n        for i in range(len(nt)):\n            if val % (val - nt[i]) == nt[i]:\n                id = i\n                break\n        if id == None:\n            return -1\n        nt.pop(id)\n    return ans\nfor _ in range(int(input())):\n    a = input()\n    l = list(map(int, input().strip().split()))\n    print(f(l))", "from collections import Counter\ntc = int(input())\nfor case in range(1, tc + 1):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = Counter(a)\n    check = [False for i in range(n + 1)]\n    for i in range(1, n + 1):\n        if i in c and c[i] > 0:\n            c[i] -= 1\n            check[i] = True\n    ans = 0\n    c = sorted(([k, v] for (k, v) in c.items()))\n    ci = 0\n    for i in range(1, n + 1):\n        if check[i] == False:\n            while ci < len(c) and c[ci][1] == 0:\n                ci += 1\n            if ci < len(c) and i <= (c[ci][0] // 2 - 1 if c[ci][0] % 2 == 0 else c[ci][0] // 2):\n                c[ci][1] -= 1\n                check[i] = True\n                ans += 1\n            else:\n                print(-1)\n                break\n    else:\n        print(ans)", "from math import ceil\nfrom collections import Counter\nfor i in range(int(input())):\n    n = int(input())\n    a = Counter([*map(int, input().split())])\n    us = {}\n    aa = a.copy()\n    for i in aa:\n        a[ceil(i / 2) - 1] += aa[i] - [1, 0][i > n]\n        us[i] = 1\n        a[i] -= aa[i]\n    ss = [*sorted(set(a), reverse=1)] + [0]\n    c = 0\n    k = 0\n    res = 0\n    while ss[k] > n:\n        res += a[ss[k]]\n        k += 1\n    F = 0\n    ss = [int(10000000000.0)] + ss\n    for i in range(n, 0, -1):\n        if i == ss[k + 1]:\n            k += 1\n            res += a[ss[k]]\n        if us.get(i, 0) == 1:\n            pass\n        elif res > 0:\n            c += 1\n            res -= 1\n        else:\n            F = 1\n    if F:\n        print(-1)\n    else:\n        print(c)"]