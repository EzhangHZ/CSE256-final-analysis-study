["import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, d) = map(int, input().split())\n    (*a,) = map(int, input().split())\n    q = []\n    w = [int(1000000000.0)] * n\n    for i in range(n):\n        if a[i] == 0:\n            q.append(i)\n            w[i] = 0\n    i = 0\n    while i < len(q):\n        x = q[i]\n        i += 1\n        y = (x + d) % n\n        if w[y] > n:\n            w[y] = w[x] + 1\n            q.append(y)\n    r = max(w)\n    if r > n:\n        print(-1)\n    else:\n        print(r)\nfor i in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, d) = map(int, input().split())\n    (*a,) = map(int, input().split())\n    q = []\n    w = [int(1000000000.0)] * n\n    for i in range(n):\n        if a[i] == 0:\n            q.append(i)\n            w[i] = 0\n    i = 0\n    while i < len(q):\n        x = q[i]\n        i += 1\n        y = (x + d) % n\n        if w[y] > n:\n            w[y] = w[x] + 1\n            q.append(y)\n    r = max(w)\n    if r > n:\n        print(-1)\n    else:\n        print(r)\nfor i in range(int(input())):\n    solve()", "import sys\nN = int(1000000.0 + 5)\nsys.setrecursionlimit(N)\n\ndef charming():\n    (n, d) = map(int, input().split())\n    a = list(map(int, input().split()))\n    vis = [0] * n\n    res = 0\n    for i in range(n):\n        if vis[i]:\n            continue\n        j = i\n        b = list()\n        ok = False\n        while vis[j] == 0:\n            if a[j] == 0:\n                ok = True\n            b.append(a[j])\n            vis[j] = True\n            j = (j + d) % n\n        if ok == False:\n            print(-1)\n            return\n        p = len(b) - 1\n        while p >= 0 and b[p] == 1:\n            p -= 1\n        cnt = len(b) - p - 1\n        for i in b:\n            if i == 1:\n                cnt += 1\n                res = max(res, cnt)\n            else:\n                cnt = 0\n    print(res)\nfor t in range(int(input())):\n    charming()", "import sys\ninput = sys.stdin.readline\n\ndef check_zero(a, seen, i, n, d):\n    zero = -1\n    while not seen[i]:\n        seen[i] = True\n        if a[i] == 0:\n            zero = i\n        i = (i + d) % n\n    return zero\n\ndef check_run(a, i, n, d):\n    j = (i + d) % n\n    max_run = 0\n    cur_run = 0\n    while j != i:\n        if a[j] == 1:\n            cur_run += 1\n            max_run = max(max_run, cur_run)\n        else:\n            cur_run = 0\n        j = (j + d) % n\n    return max_run\nfor _ in range(int(input())):\n    (n, d) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    seen = [False] * n\n    ok = True\n    max_run = 0\n    for i in range(n):\n        if not seen[i]:\n            zero = check_zero(a, seen, i, n, d)\n            if zero == -1:\n                ok = False\n                break\n            else:\n                max_run = max(max_run, check_run(a, zero, n, d))\n    print(max_run if ok else -1)", "for i in range(int(input())):\n    (n, d) = map(int, input().split())\n    a = list(map(int, input().split()))\n    q = []\n    w = [10 ** 9] * n\n    for i in range(n):\n        if a[i] == 0:\n            q.append(i)\n            w[i] = 0\n    i = 0\n    while i < len(q):\n        x = q[i]\n        i += 1\n        y = (x + d) % n\n        if w[y] > n:\n            w[y] = w[x] + 1\n            q.append(y)\n    r = max(w)\n    print(-1 if r > n else r)", "from collections import deque\nfor _ in range(int(input())):\n    (n, d) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    maxx = [0 if arr[i] == 0 else 10 ** 9 for i in range(n)]\n    queue = deque([i for i in range(n) if arr[i] == 0])\n    while len(queue):\n        node = queue.popleft()\n        zero = (node + d) % n\n        if maxx[zero] > n:\n            maxx[zero] = maxx[node] + 1\n            queue.append(zero)\n    print(-1 if max(maxx) > n else max(maxx))", "for i in range(int(input())):\n    (n, d) = map(int, input().split())\n    a = list(map(int, input().split()))\n    q = []\n    w = [10 ** 9] * n\n    for i in range(n):\n        if a[i] == 0:\n            q.append(i)\n            w[i] = 0\n    i = 0\n    while i < len(q):\n        x = q[i]\n        i += 1\n        y = (x + d) % n\n        if w[y] > n:\n            w[y] = w[x] + 1\n            q.append(y)\n    r = max(w)\n    print(-1 if r > n else r)", "for i in range(int(input())):\n    (n, d) = map(int, input().split())\n    a = list(map(int, input().split()))\n    q = []\n    w = [10 ** 9] * n\n    for i in range(n):\n        if a[i] == 0:\n            q.append(i)\n            w[i] = 0\n    i = 0\n    while i < len(q):\n        x = q[i]\n        i += 1\n        y = (x + d) % n\n        if w[y] > n:\n            w[y] = w[x] + 1\n            q.append(y)\n    r = max(w)\n    print(-1 if r > n else r)", "import sys\ninput = sys.stdin.readline\nfor i in range(int(input())):\n    (n, d) = map(int, input().split())\n    (*a,) = map(int, input().split())\n    q = []\n    w = [int(1000000000.0)] * n\n    for i in range(n):\n        if a[i] == 0:\n            q.append(i)\n            w[i] = 0\n    i = 0\n    while i < len(q):\n        x = q[i]\n        i += 1\n        y = (x + d) % n\n        if w[y] > n:\n            w[y] = w[x] + 1\n            q.append(y)\n    r = max(w)\n    if r > n:\n        print(-1)\n    else:\n        print(r)", "for i in range(int(input())):\n    (n, d) = map(int, input().split())\n    a = list(map(int, input().split()))\n    q = []\n    w = [int(1000000000.0)] * n\n    for i in range(n):\n        if a[i] == 0:\n            q.append(i)\n            w[i] = 0\n    i = 0\n    while i < len(q):\n        x = q[i]\n        i += 1\n        y = (x + d) % n\n        if w[y] > n:\n            w[y] = w[x] + 1\n            q.append(y)\n    r = max(w)\n    if r > n:\n        print(-1)\n    else:\n        print(r)", "for i in range(int(input())):\n    (n, d) = map(int, input().split())\n    a = list(map(int, input().split()))\n    q = []\n    w = [int(1000000000.0)] * n\n    for i in range(n):\n        if a[i] == 0:\n            q.append(i)\n            w[i] = 0\n    i = 0\n    while i < len(q):\n        x = q[i]\n        i += 1\n        y = (x + d) % n\n        if w[y] > n:\n            w[y] = w[x] + 1\n            q.append(y)\n    r = max(w)\n    if r > n:\n        print(-1)\n    else:\n        print(r)", "for i in range(int(input())):\n    (n, d) = map(int, input().split())\n    a = list(map(int, input().split()))\n    q = []\n    w = [10 ** 9] * n\n    for i in range(n):\n        if a[i] == 0:\n            q.append(i)\n            w[i] = 0\n    i = 0\n    while i < len(q):\n        x = q[i]\n        i += 1\n        y = (x + d) % n\n        if w[y] > n:\n            w[y] = w[x] + 1\n            q.append(y)\n    r = max(w)\n    print(-1 if r > n else r)", "for i in range(int(input())):\n    (n, d) = map(int, input().split())\n    a = list(map(int, input().split()))\n    q = []\n    w = [10 ** 9] * n\n    for i in range(n):\n        if a[i] == 0:\n            q.append(i)\n            w[i] = 0\n    i = 0\n    while i < len(q):\n        x = q[i]\n        i += 1\n        y = (x + d) % n\n        if w[y] > n:\n            w[y] = w[x] + 1\n            q.append(y)\n    r = max(w)\n    print(-1 if r > n else r)", "t = int(input())\nfor i in range(t):\n    (n, d) = map(int, input().split())\n    array = [int(entry) for entry in input().split()]\n    visited = [False for j in range(n)]\n    block_size = 0\n    res = 0\n    max_block_size = 0\n    fail = False\n    for idx in range(n):\n        if visited[idx]:\n            continue\n        block_idx = idx\n        block_size = 0\n        max_block_size = 0\n        (pref, iterations) = (0, 0)\n        while True:\n            visited[block_idx] = True\n            if array[block_idx] == 1:\n                block_size += 1\n                if iterations == pref:\n                    pref += 1\n            else:\n                max_block_size = max(max_block_size, block_size)\n                block_size = 0\n            block_idx = (block_idx + d) % n\n            iterations += 1\n            if block_idx == idx:\n                break\n        if iterations != pref:\n            max_block_size = max(max_block_size, pref + block_size)\n        else:\n            fail = True\n            break\n        res = max(res, max_block_size)\n    if fail:\n        print('-1')\n    else:\n        print(res)", "import math\nt = int(input())\nfor _ in range(t):\n    (n, d) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    g = math.gcd(n, d)\n    gg = 2 * n // g\n    ans = 0\n    for i in range(g):\n        j = i\n        k = 0\n        longest_run = 0\n        ones = 0\n        while k < gg:\n            if arr[j] == 1:\n                ones += 1\n            else:\n                ones = 0\n            longest_run = max(ones, longest_run)\n            j = (j + d) % n\n            k += 1\n        ans = max(ans, longest_run)\n    if ans >= n // g:\n        print(-1)\n    else:\n        print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    (n, d) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    g = math.gcd(n, d)\n    gg = 2 * n // g\n    ans = 0\n    for i in range(g):\n        j = i\n        k = 0\n        longest_run = 0\n        ones = 0\n        while k < gg:\n            if arr[j] == 1:\n                ones += 1\n            else:\n                ones = 0\n            longest_run = max(ones, longest_run)\n            j = (j + d) % n\n            k += 1\n        ans = max(ans, longest_run)\n    if ans >= n // g:\n        print(-1)\n    else:\n        print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    (n, d) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    g = math.gcd(n, d)\n    gg = 2 * n // g\n    ans = 0\n    for i in range(g):\n        j = i\n        k = 0\n        longest_run = 0\n        ones = 0\n        while k < gg:\n            if arr[j] == 1:\n                ones += 1\n            else:\n                ones = 0\n            longest_run = max(ones, longest_run)\n            j = (j + d) % n\n            k += 1\n        ans = max(ans, longest_run)\n    if ans >= n // g:\n        print(-1)\n    else:\n        print(ans)"]