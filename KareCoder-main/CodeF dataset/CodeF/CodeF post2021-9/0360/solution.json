["import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, S) = map(int, input().split())\n    A = [int(x) for x in input().split()]\n    if S > sum(A):\n        return -1\n    ans = 0\n    l = t = 0\n    for r in range(n):\n        t += A[r]\n        if t == S:\n            ans = max(ans, r - l + 1)\n        while l < r and t > S:\n            t -= A[l]\n            l += 1\n    return n - max(ans, r - l + 1)\nfor _ in range(int(input())):\n    print(solve())", "import sys\nimport collections\nimport bisect\nimport math\nfrom functools import lru_cache\nsys.setrecursionlimit(10 ** 6)\n\ndef helper(arr, n, k):\n    mydict = dict()\n    sum = 0\n    maxLen = 0\n    for i in range(n):\n        sum += arr[i]\n        if sum == k:\n            maxLen = i + 1\n        elif sum - k in mydict:\n            maxLen = max(maxLen, i - mydict[sum - k])\n        if sum not in mydict:\n            mydict[sum] = i\n    return maxLen\nfor _ in range(int(input())):\n    (n, k) = list(map(int, sys.stdin.readline().split()))\n    arr = list(map(int, sys.stdin.readline().split()))\n    s = sum(arr)\n    if s < k:\n        print(-1)\n    elif s == k:\n        print(0)\n    else:\n        maxLen = helper(arr, n, k)\n        print(n - maxLen)", "numCases = int(input())\nfor case in range(numCases):\n    (longitud, suma) = (int(i) for i in input().split(' '))\n    array = input().split(' ')\n    unosParaEliminar = array.count('1') - suma\n    if unosParaEliminar < 0:\n        print(-1)\n        continue\n    if unosParaEliminar == 0:\n        print(0)\n        continue\n    distsIzq = [0]\n    distsIzq2 = [i + 1 for (i, valor) in enumerate(array) if valor == '1']\n    distsIzq = distsIzq + distsIzq2\n    array.reverse()\n    distsDer = [0]\n    distsDer2 = [i + 1 for (i, valor) in enumerate(array) if valor == '1']\n    distsDer = distsDer + distsDer2\n    print(min([distsIzq[unosParaEliminar - i] + distsDer[i] for i in range(unosParaEliminar + 1)]))", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\nn = inp()\n\ndef find(array, s, n):\n    left = right = 0\n    if sum(array) < s:\n        return -1\n    su_m = 0\n    minSize = n\n    while right < n:\n        su_m += array[right]\n        right += 1\n        while su_m > s:\n            su_m -= array[left]\n            left += 1\n        size = n - (right - left)\n        minSize = min(minSize, size)\n    return minSize if minSize != n else -1\nfor _ in range(n):\n    (n, s) = inlt()\n    array = inlt()\n    print(find(array, s, n))", "import sys\nfrom math import inf\nsys.setrecursionlimit(2 * 10 ** 6)\n\ndef test():\n    pass\n\ndef main():\n    N = int(input())\n    for _ in range(N):\n        (n, s) = map(int, input().split())\n        arr = list(map(int, input().split()))\n        t = sum(arr)\n        if s == t:\n            print(0)\n            continue\n        elif s > t:\n            print(-1)\n            continue\n        i = 0\n        j = 0\n        t = 0\n        while t < s:\n            if arr[j]:\n                t += 1\n            j += 1\n        while j < len(arr) and arr[j] == 0:\n            j += 1\n        ans = n - j\n        while j < len(arr):\n            if arr[j]:\n                while arr[i] != 1:\n                    i += 1\n                i += 1\n            ans = min(ans, n - j + i - 1)\n            j += 1\n        print(ans)\n\ndef init():\n    import sys\n    import os\n    if 'DOCKER_HOST' in os.environ:\n        test()\n        sys.stdin = open('test.txt')\ninit()\nmain()", "strng = lambda : input()\ninp = lambda : int(input())\nmul = lambda : map(int, input().split())\njn = lambda x, l: x.join(map(str, l))\nstrlst = lambda : list(input())\nlst = lambda : list(map(int, input().split()))\ndd = lambda : defaultdict(lambda : 0)\nimport sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfrom math import ceil, log, floor, sqrt, gcd, log10\nfor _ in range(inp()):\n    (n, s) = mul()\n    a = lst()\n    mxs = 0\n    si = 0\n    cursum = 0\n    ts = sum(a)\n    if ts < s:\n        print(-1)\n        continue\n    if ts == s:\n        print(0)\n        continue\n    for i in range(n):\n        cursum += a[i]\n        if cursum > s:\n            cursum -= a[si]\n            si += 1\n        if i - si >= mxs:\n            mxs = i - si\n    print(n - (mxs + 1))", "def solve():\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    temp = [-1]\n    for i in range(n):\n        if arr[i] == 1:\n            temp.append(i)\n    temp.append(n)\n    if len(temp) - 2 < k:\n        print(-1)\n        return\n    ans = n\n    for i in range(len(temp) - k - 1):\n        ans = min(ans, temp[i] + n - temp[i + k + 1] + 1)\n    print(ans)\nfor T in range(int(input())):\n    solve()", "def solve():\n    (n, s) = map(int, input().split())\n    lis = list(map(int, input().split()))\n    ans = -1\n    start = 0\n    sum = 0\n    for i in range(n):\n        sum += lis[i]\n        while sum > s:\n            sum -= lis[start]\n            start += 1\n        if sum == s:\n            ans = max(ans, i - start + 1)\n    print(ans if ans == -1 else n - ans)\nfor _ in range(int(input())):\n    solve()", "def solve():\n    (n, s) = map(int, input().split())\n    lis = list(map(int, input().split()))\n    ans = -1\n    sum = 0\n    start = 0\n    for i in range(n):\n        sum += lis[i]\n        while sum > s:\n            sum -= lis[start]\n            start += 1\n        if sum == s:\n            ans = max(ans, i - start + 1)\n    print(ans if ans == -1 else n - ans)\nfor i in range(int(input())):\n    solve()", "def solve(arr, target):\n    i = 0\n    j = 0\n    sumVal = 0\n    n = len(arr)\n    maxLen = float('-inf')\n    while j < n:\n        sumVal += arr[j]\n        if sumVal <= target:\n            j += 1\n        else:\n            currLen = j - 1 - i + 1\n            maxLen = max(maxLen, currLen)\n            while sumVal > target:\n                sumVal -= arr[i]\n                i += 1\n            j += 1\n    return len(arr) - max(maxLen, j - 1 - i + 1)\nfor _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if sum(arr) < s:\n        print(-1)\n    elif sum(arr) == s:\n        print(0)\n    else:\n        print(solve(arr, s))", "t = int(input())\nimport sys\n\ndef lenOfLongSubarr(A, N, K):\n    (i, j, sum) = (0, 0, 0)\n    maxLen = -sys.maxsize - 1\n    while j < N:\n        sum += A[j]\n        if sum < K:\n            j += 1\n        elif sum == K:\n            maxLen = max(maxLen, j - i + 1)\n            j += 1\n        elif sum > K:\n            while sum > K:\n                sum -= A[i]\n                i += 1\n            if sum == K:\n                maxLen = max(maxLen, j - i + 1)\n            j += 1\n    return maxLen\nfor tt in range(t):\n    (n, s) = map(int, input().split())\n    a1 = list(map(int, input().split()))\n    if s > a1.count(1):\n        print(-1)\n        continue\n    a = lenOfLongSubarr(a1, n, s)\n    print(n - a)", "for i in range(int(input())):\n    (n, u) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    (l, r) = ([0], [])\n    for (i, x) in enumerate(arr):\n        if x:\n            l.append(i + 1)\n            r.append(n - i)\n    r.append(0)\n    s = sum(arr)\n    d = s - u\n    if d < 0:\n        print(-1)\n    elif d == 0:\n        print(0)\n    else:\n        l = l[:d + 1]\n        r = r[-d - 1:]\n        ans = l[-1]\n        for (x, y) in zip(l, r):\n            if x + y < ans:\n                ans = x + y\n        print(ans)", "import sys, math, functools, itertools, collections\ninput = sys.stdin.readline\n\ndef fun(a, n, s):\n    dic = dict()\n    sm = 0\n    mxlen = 0\n    for i in range(n):\n        sm += a[i]\n        if sm == s:\n            mxlen = i + 1\n        elif sm - s in dic:\n            mxlen = max(mxlen, i - dic[sm - s])\n        if sm not in dic:\n            dic[sm] = i\n    return mxlen\n\ndef solve():\n    (n, s) = map(int, input().split())\n    a = [*map(int, input().split())]\n    if sum(a) < s:\n        print('-1')\n        return\n    else:\n        best = fun(a, n, s)\n        print(n - best)\nfor _ in range(int(input())):\n    solve()", "res = []\n\ndef binaryDeque(nums, n, target):\n    sz = float('-inf')\n    l = r = 0\n    temp = 0\n    if sum(nums) < target:\n        res.append(-1)\n        return\n    while True:\n        if r == n:\n            sz = max(sz, r - l)\n            break\n        if temp + nums[r] <= target:\n            temp += nums[r]\n            r += 1\n        else:\n            sz = max(sz, r - l)\n            temp -= nums[l]\n            l += 1\n    res.append(n - sz)\n    return\nt = int(input())\nwhile t:\n    (s, req) = input().split()\n    A = list(map(int, input().split()))\n    binaryDeque(A, int(s), int(req))\n    t -= 1\nfor n in res:\n    print(n)", "def solve():\n    (n, s) = map(int, input().split())\n    lis = list(map(int, input().split()))\n    ans = -1\n    start = 0\n    sum = 0\n    for i in range(n):\n        sum += lis[i]\n        while sum > s:\n            sum -= lis[start]\n            start += 1\n        if sum == s:\n            ans = max(ans, i - start + 1)\n    print(ans if ans == -1 else n - ans)\nfor _ in range(int(input())):\n    solve()", "def solve():\n    (n, s) = map(int, input().split())\n    lis = list(map(int, input().split()))\n    ans = -1\n    sum = 0\n    start = 0\n    for i in range(n):\n        sum += lis[i]\n        while sum > s:\n            sum -= lis[start]\n            start += 1\n        if sum == s:\n            ans = max(ans, i - start + 1)\n    print(ans if ans == -1 else n - ans)\nfor _ in range(int(input())):\n    solve()", "def solve():\n    (n, ss) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    tsum = sum(arr)\n    s = tsum - ss\n    if s < 0:\n        print(-1)\n        return\n    if s == 0:\n        print(0)\n        return\n    left = 0\n    summ = 0\n    while left < n and summ != s:\n        if arr[left] == 1:\n            summ += 1\n        if summ == s:\n            break\n        left += 1\n    right = n - 1\n    ans = left + 1\n    while left >= 0:\n        if arr[left] == 1:\n            left -= 1\n            while left >= 0 and arr[left] == 0:\n                left -= 1\n            while arr[right] == 0:\n                right -= 1\n            right -= 1\n        ans = min(ans, left + 1 + (n - right - 1))\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "strng = lambda : input()\ninp = lambda : int(input())\nmul = lambda : map(int, input().split())\njn = lambda x, l: x.join(map(str, l))\nstrlst = lambda : list(input())\nlst = lambda : list(map(int, input().split()))\ndd = lambda : defaultdict(lambda : 0)\nimport sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfrom math import ceil, log, floor, sqrt, gcd, log10\nfor _ in range(inp()):\n    (n, s) = mul()\n    a = lst()\n    mxs = 0\n    si = 0\n    cursum = 0\n    ts = sum(a)\n    if ts < s:\n        print(-1)\n        continue\n    if ts == s:\n        print(0)\n        continue\n    for i in range(n):\n        cursum += a[i]\n        while cursum > s:\n            cursum -= a[si]\n            si += 1\n        if i - si >= mxs:\n            mxs = i - si\n    print(n - (mxs + 1))", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    x = sum(arr)\n    a = []\n    ans = 0\n    if x == s:\n        ans = 0\n    elif x < s:\n        ans = -1\n    else:\n        for i in range(n):\n            if arr[i] == 1:\n                a.append(i)\n        m = a[s] + 1\n        for i in range(x - s - 1):\n            m = max(m, a[i + s + 1] - a[i])\n        m = max(m, n - a[x - s - 1])\n        ans = n - m + 1\n    print(ans)", "def process(n, s, arr):\n    tot = sum(arr)\n    if tot < s:\n        return -1\n    if tot == s:\n        return 0\n    arr = [i for (i, item) in enumerate(array) if item == 1]\n    arr = [-1] + arr + [n]\n    (p1, p2) = (0, s + 1)\n    maxdist = -1\n    while p2 < len(arr):\n        maxdist = max(maxdist, arr[p2] - arr[p1] - 2)\n        p1 += 1\n        p2 += 1\n    return n - maxdist - 1\nfor _ in range(int(input())):\n    (n, s) = map(int, input().split(' '))\n    array = list(map(int, input().split(' ')))\n    print(process(n, s, array))", "import math\nfrom collections import *\n\ndef solve():\n    (n, s) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    if a.count(1) < s:\n        print(-1)\n        return\n    elif a.count(1) == s:\n        print(0)\n        return\n    else:\n        ans = []\n        for i in range(len(a)):\n            if a[i] == 1:\n                ans.append(i + 1)\n        mini = n - ans[s] + 1\n        for i in range(1, len(ans) - s):\n            mini = min(ans[i - 1] + (n - ans[i + s] + 1), mini)\n        mini = min(ans[len(ans) - s - 1], mini)\n        print(mini)\nt = int(input())\nfor _ in range(t):\n    solve()", "from itertools import accumulate\nfor _ in range(int(input())):\n    (n, s) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if sum(a) < s:\n        print(-1)\n    elif sum(a) == s:\n        print(0)\n    else:\n        kill = sum(a) - s\n        now = 1\n        diff = []\n        for aa in a:\n            if aa != 1:\n                now += 1\n            else:\n                diff.append(now)\n                now = 1\n        diff.append(now)\n        rest = len(diff) - (sum(a) - s)\n        maxn = 0\n        preSum = list(accumulate(diff, initial=0))\n        for i in range(len(diff) - rest + 1):\n            maxn = max(maxn, preSum[i + rest] - preSum[i])\n        print(sum(diff) - maxn)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    total = sum(lst)\n    lst.append(1)\n    if total < k:\n        print(-1)\n        continue\n    if total == k:\n        print(0)\n        continue\n    x = 0\n    y = 0\n    cnt = 0\n    while cnt < k:\n        cnt += lst[y]\n        y += 1\n    mx = 0\n    while y <= n:\n        if lst[y] == 1:\n            cnt += 1\n            mx = max(mx, y - x)\n            while cnt != k:\n                cnt -= lst[x]\n                x += 1\n        y += 1\n    print(n - mx)", "def main(nums, x):\n    target = x\n    (curr_sum, max_len) = (0, 0)\n    start_idx = 0\n    if target == 0:\n        return len(nums)\n    for end_idx in range(len(nums)):\n        curr_sum += nums[end_idx]\n        while start_idx <= end_idx and curr_sum > target:\n            curr_sum -= nums[start_idx]\n            start_idx += 1\n        if curr_sum == target:\n            max_len = max(max_len, end_idx - start_idx + 1)\n    return len(nums) - max_len if max_len else -1\nt = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    print(main(nums, x))", "def func():\n    (n, s) = map(int, input().split())\n    l = list(map(int, input().split()))\n    i = 0\n    j = 0\n    ans = n\n    while j != n:\n        if l[j] == 1:\n            s -= 1\n        if s == -1:\n            break\n        j += 1\n    if s > 0:\n        print(-1)\n        return\n    ans = min(ans, n - j)\n    while j < n:\n        while j < n and l[j] != 1:\n            j += 1\n        ans = min(n - (j - i), ans)\n        while i < n and l[i] != 1:\n            i += 1\n        i += 1\n        j += 1\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    func()", "n = int(input())\nfor i in range(n):\n    l = list(map(int, input().split()))\n    long = l[0]\n    equ = l[1]\n    s = list(map(int, input().split()))\n    tip = [-1]\n    for j in range(long):\n        if s[j]:\n            tip.append(j)\n    tip.append(long)\n    if len(tip) - 2 < equ:\n        print(-1)\n    elif len(tip) - 2 == equ:\n        print(0)\n    else:\n        deep = 0\n        for p in range(1, len(tip) - equ):\n            x = tip[p + equ] - tip[p - 1]\n            if x > deep:\n                deep = x\n        print(long - deep + 1)", "def FindMinNumber(arr, n, k):\n    i = 0\n    j = 0\n    min_num = 10 ** 9\n    found = False\n    Sum = 0\n    while i < n:\n        Sum = Sum + arr[i]\n        if Sum == k:\n            min_num = min(min_num, n - (i + 1) + j)\n            found = True\n        elif Sum > k:\n            while Sum > k:\n                Sum = Sum - arr[j]\n                j += 1\n            if Sum == k:\n                min_num = min(min_num, n - (i + 1) + j)\n                found = True\n        i += 1\n    if found:\n        return min_num\n    return -1\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(FindMinNumber(arr, n, k))", "def sol():\n    (n, s) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    if sum(ar) < s:\n        print(-1)\n    elif sum(ar) == s:\n        print(0)\n    else:\n        left = 0\n        right = 0\n        cs = 0\n        while True:\n            cs += ar[left]\n            if cs == s:\n                break\n            else:\n                left += 1\n        maxx = left + 1\n        while True:\n            left += 1\n            cs += ar[left]\n            while cs > s:\n                cs -= ar[right]\n                right += 1\n            maxx = max(maxx, abs(left - right + 1))\n            if left == n - 1:\n                break\n        print(n - maxx)\nfor t in range(int(input())):\n    sol()", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    ss = sum(a)\n    if ss == s:\n        print(0)\n        continue\n    if ss < s:\n        print(-1)\n        continue\n    ns = 0\n    l = 0\n    max_length = []\n    for i in range(n):\n        ns += a[i]\n        if ns == s:\n            max_length.append(i - l + 1)\n        while ns > s:\n            ns -= a[l]\n            l += 1\n    print(n - max(max_length))", "def read():\n    return list(map(int, input().split()))\n\ndef solve():\n    (n, s) = read()\n    a = read()\n    ones = [0]\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        ones.append(i + 1)\n    if len(ones) - 1 < s:\n        print(-1)\n        return\n    ans = n\n    s = len(ones) - s - 1\n    for i in range(s + 1):\n        left = i\n        right = s - i\n        ans = min(ans, ones[left] + (0 if right == 0 else n - ones[-right] + 1))\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "def minCount(arr, n, k):\n    ans = 0\n    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    sum -= k\n    l = 0\n    r = 0\n    tot = 0\n    while l < n:\n        if tot <= sum:\n            ans = max(ans, r - l)\n            if r == n:\n                break\n            tot += arr[r]\n            r += 1\n        else:\n            tot -= arr[l]\n            l += 1\n    return n - ans\ntests = 1\ntests = int(input())\nfor test in range(tests):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    tot = sum(arr)\n    k = tot - x\n    ans = minCount(arr, n, k)\n    print(ans if tot - x >= 0 else -1)", "def minOperations(nums, x):\n    maxLen = total = windowStart = 0\n    targetSum = sum(nums)\n    if targetSum < x:\n        return -1\n    if targetSum == x:\n        return len(nums)\n    k = targetSum - x\n    for windowEnd in range(len(nums)):\n        total += nums[windowEnd]\n        while total > k:\n            total -= nums[windowStart]\n            windowStart += 1\n        if total == k:\n            maxLen = max(maxLen, windowEnd - windowStart + 1)\n    return len(nums) - maxLen if maxLen != 0 else -1\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    print(minOperations(lst, sum(lst) - x))", "import math\nt = int(input())\nwhile t:\n    t -= 1\n    (h, i) = input().split()\n    a = int(h)\n    b = int(i)\n    lis = input().split()\n    lis = [int(x) for x in lis]\n    if sum(lis) < b:\n        print(-1)\n        continue\n    indlist = [-1]\n    for (ind, i) in enumerate(lis):\n        if i == 1:\n            indlist.append(ind)\n    ma = 0\n    indlist.append(a)\n    for i in range(1, len(indlist) - b):\n        new = indlist[i + b] - indlist[i - 1] - 1\n        ma = max(new, ma)\n    print(a - ma)", "def binaryDeque(arr, k, length):\n    left = right = 0\n    count = 0\n    res = -1\n    while right < length:\n        while left < length and count > k:\n            if arr[left]:\n                count -= 1\n            left += 1\n        if arr[right]:\n            count += 1\n        right += 1\n        if count == k:\n            res = max(res, right - left)\n    if res == -1:\n        return res\n    return length - res\ncase = int(input())\nfor i in range(case):\n    (length, k) = list(map(int, input().split(' ')))\n    arr = list(map(int, input().split(' ')))\n    print(binaryDeque(arr, k, length))", "import collections\nfor _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    summ = sum(a)\n    if summ < s:\n        print(-1)\n    else:\n        i = j = 0\n        cnt = 0\n        ans = 0\n        for k in range(n):\n            cnt += a[k]\n            while cnt > s:\n                cnt -= a[i]\n                i += 1\n            if cnt == s:\n                ans = max(ans, k - i + 1)\n        print(n - ans)", "from collections import deque\nt = int(input())\nfor _ in range(t):\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if sum(a) < s:\n        print(-1)\n    elif sum(a) == s:\n        print(0)\n    else:\n        ind = []\n        for i in range(n):\n            if a[i] == 1:\n                ind.append(i)\n        remnant = sum(a) - s\n        cost = [n - ind[-remnant], ind[remnant - 1] + 1]\n        for i in range(1, remnant):\n            cost.append(ind[i - 1] + 1 + n - ind[-(remnant - i)])\n        print(min(cost))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    ones = []\n    ans = 0\n    for (i, c) in enumerate(a):\n        if c == 1:\n            ones.append(i)\n    (i, j, x, y) = (0,) * 4\n    m = ones.__len__()\n    j = m - 1\n    y = n\n    x = -1\n    if m < s:\n        print(-1)\n    elif m == s:\n        print(0)\n    else:\n        cost = 1000000\n        c = m - s\n        for i in range(1, c):\n            j = c - i\n            cost = min(ones[i - 1] + 1 + n - ones[-j], cost)\n        cost = min(cost, ones[c - 1] + 1)\n        cost = min(cost, n - ones[-c])\n        print(cost)", "t = int(input())\n\ndef lenOfLongSubarr(arr, n, k):\n    mydict = dict()\n    sum = 0\n    maxLen = 0\n    for i in range(n):\n        sum += arr[i]\n        if sum == k:\n            maxLen = i + 1\n        elif sum - k in mydict:\n            maxLen = max(maxLen, i - mydict[sum - k])\n        if sum not in mydict:\n            mydict[sum] = i\n    return maxLen\nwhile t:\n    (n, k) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    s = sum(arr)\n    if k > s:\n        print('-1')\n    else:\n        temp = lenOfLongSubarr(arr, n, k)\n        print(n - temp)\n    t -= 1", "def deq(nums, n, s):\n    A = []\n    for i in range(n):\n        if nums[i] == 1:\n            A.append(i)\n    sm = len(A)\n    min = n\n    for i in range(0, sm - s + 1):\n        start = i\n        end = i + s - 1\n        if start == 0:\n            value = n - A[end + 1]\n        elif end == sm - 1:\n            value = A[start - 1] + 1\n        else:\n            value = A[start - 1] + 1 + n - A[end + 1]\n        if value < min:\n            min = value\n    return min\ntests = int(input())\nfor _ in range(tests):\n    (n, s) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    sm = 0\n    for i in range(n):\n        sm += nums[i]\n    if sm < s:\n        print('-1')\n    elif sm == s:\n        print('0')\n    else:\n        print(deq(nums, n, s))", "def FindMinNumber(arr, n, k):\n    i = 0\n    j = 0\n    min_num = 10 ** 9\n    found = False\n    Sum = 0\n    while i < n:\n        Sum = Sum + arr[i]\n        if Sum == k:\n            min_num = min(min_num, n - (i + 1) + j)\n            found = True\n        elif Sum > k:\n            while Sum > k:\n                Sum = Sum - arr[j]\n                j += 1\n            if Sum == k:\n                min_num = min(min_num, n - (i + 1) + j)\n                found = True\n        i += 1\n    if found:\n        return min_num\n    return -1\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    lis = list(map(int, input().split()))\n    arr = lis\n    n = a\n    k = b\n    print(FindMinNumber(arr, n, k))", "e = lambda : map(int, input().split())\nfor d in range(int(input())):\n    (n, s) = e()\n    a = [*e()]\n    if sum(a) < s:\n        z = -1\n    else:\n        l = s2 = z = 0\n        for r in range(n):\n            s2 += a[r]\n            if s2 == s:\n                z = max(z, r - l + 1)\n            while s2 > s:\n                s2 -= a[l]\n                l += 1\n        z = n - z\n    print(z)", "e = lambda : map(int, input().split())\nfor d in range(int(input())):\n    (n, s) = e()\n    a = [*e()]\n    if sum(a) < s:\n        z = -1\n    else:\n        l = s2 = z = 0\n        for r in range(n):\n            s2 += a[r]\n            if s2 == s:\n                z = max(z, r - l + 1)\n            while s2 > s:\n                s2 -= a[l]\n                l += 1\n        z = n - z\n    print(z)", "from collections import deque\nt = int(input())\nfor _ in range(t):\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if sum(a) < s:\n        print(-1)\n    elif sum(a) == s:\n        print(0)\n    else:\n        ind = []\n        for i in range(n):\n            if a[i] == 1:\n                ind.append(i)\n        remnant = sum(a) - s\n        cost = [n - ind[-remnant], ind[remnant - 1] + 1]\n        for i in range(1, remnant):\n            cost.append(ind[i - 1] + 1 + n - ind[-(remnant - i)])\n        print(min(cost))", "t = int(input())\nfor _ in range(t):\n    (n, s) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    win_sum = 0\n    res = -1\n    left = 0\n    for right in range(len(arr)):\n        win_sum += arr[right]\n        while win_sum > s:\n            win_sum -= arr[left]\n            left += 1\n        if win_sum == s:\n            res = max(res, right - left + 1)\n    if res == -1:\n        print(res)\n    else:\n        print(len(arr) - res)", "def getMaxLn(a):\n    curs = 0\n    i = 0\n    while curs < s:\n        curs += a[i]\n        i += 1\n    i -= 1\n    ln = i\n    maxLn = ln\n    right = i\n    left = 0\n    while True:\n        if right < len(a) - 1:\n            right += 1\n            while a[right] == 0:\n                right += 1\n                if right > n - 1:\n                    right -= 1\n                    break\n            if a[right] == 1:\n                right -= 1\n            ln = right - left + 1\n            if ln > maxLn:\n                maxLn = ln\n        else:\n            return maxLn\n        if a[left] == 1:\n            left += 1\n        else:\n            while a[left] == 0:\n                left += 1\n            left += 1\n        if right + 1 < n and a[right + 1] == 1:\n            right += 1\n        ln = right - left + 1\n        if ln > maxLn:\n            maxLn = ln\nt = int(input())\nfor _ in range(t):\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    suma = sum(a)\n    if suma < s:\n        print(-1)\n    elif suma == s:\n        print(0)\n    else:\n        maxln = getMaxLn(a)\n        print(n - maxln)", "MOD = 10 ** 9 + 7\nfac_mem = [1]\n\ndef fac(n):\n    while len(fac_mem) < n + 1:\n        fac_mem.append(fac_mem[-1] * len(fac_mem) % MOD)\n    return fac_mem[n]\n\ndef perm(n, k):\n    return fac(n) * pow(fac(k), MOD - 2, MOD) % MOD\n\ndef comb(n, k):\n    return fac(n) * pow(fac(k) * fac(n - k) % MOD, MOD - 2, MOD) % MOD\n\nclass Tree:\n\n    def __init__(self, id):\n        self.id = id\n        self.parent = None\n        self.children = []\n\n    def __repr__(self):\n        if self.children:\n            return f'{self.id} -> [' + ', '.join((str(c) for c in self.children)) + ']'\n        else:\n            return str(self.id)\nfor case in range(int(input())):\n    (n, s) = [int(j) for j in input().split()]\n    a = [int(j) for j in input().split()]\n    if sum(a) < s:\n        print(-1)\n    else:\n        ones = [-1]\n        for i in range(n):\n            if a[i] == 1:\n                ones.append(i)\n        ones.append(n)\n        r = 0\n        start = -1\n        for i in range(len(ones) - s - 1):\n            r = max(r, ones[i + s + 1] - ones[i] - 1)\n        print(len(a) - r)", "def f():\n    (n, s) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    acc2idx = {0: -1}\n    acc = 0\n    ans = float('inf')\n    for (i, num) in enumerate(nums):\n        acc += num\n        if acc - s in acc2idx:\n            ans = min(ans, n - (i - acc2idx[acc - s]))\n        if acc not in acc2idx:\n            acc2idx[acc] = i\n    return -1 if ans == float('inf') else ans\nfor _ in range(int(input())):\n    print(f())", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if sum(a) < s:\n        ans = -1\n    else:\n        s2 = l = ans = 0\n        for r in range(n):\n            s2 += a[r]\n            if s2 == s:\n                ans = max(ans, r - l + 1)\n            while s2 > s:\n                s2 -= a[l]\n                l += 1\n        ans = n - ans\n    print(ans)", "a = int(input())\nfor e in range(a):\n    (n, s) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    sm = sum(arr)\n    place = [0]\n    fin = []\n    for i in range(n):\n        if arr[i] == 1:\n            place.append(i + 1)\n    place.append(n + 1)\n    k = len(place)\n    delt = sm - s\n    if sm < s:\n        print(-1)\n    else:\n        for i in range(delt + 1):\n            forw = place[i]\n            backw = n + 1 - place[k - 1 - delt + i]\n            fin.append(forw + backw)\n        print(min(fin))", "import sys\nsys.setrecursionlimit(10 ** 6)\nfrom sys import stdin, stdout\nI = stdin.readline\nO = stdout.write\n\ndef bi(n):\n    return bin(n).replace('0b', '')\n\ndef solve():\n    (n, s) = list(map(int, I().split()))\n    arr = list(map(int, input().split()))\n    if sum(arr) < s:\n        print(-1)\n    else:\n        i = 0\n        st = 0\n        ma = 0\n        cnt = 0\n        while i < n:\n            cnt += arr[i]\n            while st < n and cnt > s:\n                cnt -= arr[st]\n                st += 1\n            ma = max(ma, i - st + 1)\n            i += 1\n        print(n - ma)\nfor tc in range(int(input())):\n    solve()", "def foo(nums, target):\n    if sum(nums) < target:\n        return len(nums) + 1\n    if sum(nums) == target:\n        return len(nums)\n    i = 0\n    ans = []\n    j = 0\n    s = 0\n    while j < len(nums):\n        s += nums[j]\n        if s == target:\n            ans.append(j - i + 1)\n        while s > target:\n            s -= nums[i]\n            i += 1\n        if s == target:\n            ans.append(j - i + 1)\n        j += 1\n    return max(ans)\nn = int(input())\nfor i in range(n):\n    (_, x) = input().split()\n    x = int(x)\n    a = input().split()\n    a = list(map(int, a))\n    print(len(a) - foo(a, x))", "for _ in [0] * int(input()):\n    (n, s) = map(int, input().split())\n    a = [*map(int, input().split())]\n    one = a.count(1)\n    if one <= s:\n        print(-(one < s))\n        continue\n    head = [0]\n    tail = [0]\n    for i in range(n):\n        if a[i]:\n            head += (i + 1,)\n    for i in range(n):\n        if a[~i]:\n            tail += (-~i,)\n    print(min((head[i] + tail[one - s - i] for i in range(one - s + 1))))", "def e():\n    return map(int, input().split())\nfor d in range(int(input())):\n    (n, s) = e()\n    a = [*e()]\n    if sum(a) < s:\n        z = -1\n    else:\n        l = s2 = z = 0\n        for r in range(n):\n            s2 += a[r]\n            if s2 == s:\n                z = max(z, r - l + 1)\n            while s2 > s:\n                s2 -= a[l]\n                l += 1\n        z = n - z\n    print(z)", "for t in range(int(input())):\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if sum(a) < s:\n        print(-1)\n    elif sum(a) == s:\n        print(0)\n    else:\n        (l, r) = (0, 0)\n        (cs, ans) = (0, 0)\n        while r < n:\n            cs += a[r]\n            r += 1\n            while cs > s:\n                cs -= a[l]\n                l += 1\n            if cs == s:\n                ans = max(ans, r - l)\n        print(n - ans)", "T = int(input())\nfor _ in range(T):\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    marker = []\n    for i in range(n):\n        if a[i] == 1:\n            marker.append(i + 1)\n    if len(marker) < s:\n        print(-1)\n    elif len(marker) == s:\n        print(0)\n    else:\n        for i in range(0, len(marker) - s + 1):\n            if i == 0:\n                ans = marker[s] - 1\n            elif i < len(marker) - s:\n                ans = max(ans, marker[i + s] - marker[i - 1] - 1)\n            else:\n                ans = max(ans, n - marker[i - 1])\n        print(n - ans)", "a = int(input())\nfor e in range(a):\n    (n, s) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    sm = sum(arr)\n    place = [0]\n    fin = []\n    for i in range(n):\n        if arr[i] == 1:\n            place.append(i + 1)\n    place.append(n + 1)\n    k = len(place)\n    delt = sm - s\n    if sm < s:\n        print(-1)\n    else:\n        for i in range(delt + 1):\n            forw = place[i]\n            backw = n + 1 - place[k - 1 - delt + i]\n            fin.append(forw + backw)\n        print(min(fin))", "t = int(input())\nfor _ in range(t):\n    (n, s) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if sum(l) < s:\n        print(-1)\n    else:\n        c = 0\n        dist = 0\n        dlst = []\n        for i in range(n):\n            if i == n - 1:\n                if l[i]:\n                    dlst.append(dist)\n                    dlst.append(0)\n                else:\n                    dlst.append(dist + 1)\n                break\n            if l[i] != 1:\n                dist += 1\n            else:\n                dlst.append(dist)\n                dist = 0\n        (cur, mx) = (0, 0)\n        start = 0\n        end = s\n        for i in range(s + 1):\n            cur += dlst[i]\n        mx = max(cur, mx)\n        for i in range(s + 1, len(dlst)):\n            start += 1\n            end += 1\n            cur -= dlst[start - 1]\n            cur += dlst[end]\n            mx = max(mx, cur)\n        print(n - mx - s)", "import collections\nimport math\nimport sys\nfrom queue import PriorityQueue\nfrom random import randint\n\ndef main(testnumber):\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if sum(a) < s:\n        print(-1)\n    else:\n        l = 0\n        r = 0\n        ans = 0\n        sm = 0\n        while l <= r and r < n:\n            while sm < s and r < n:\n                sm += a[r]\n                r += 1\n            while r < n and sm + a[r] == s:\n                sm += a[r]\n                r += 1\n            if sm == s:\n                ans = max(r - l, ans)\n            sm -= a[l]\n            l += 1\n            r = max(r, l)\n        print(n - ans)\nt = int(input())\ncnt = 1\nwhile t > 0:\n    main(cnt)\n    cnt += 1\n    t -= 1", "import math\nimport collections\nimport itertools\nimport functools\n\ndef fun(t):\n\n    def lenOfLongSubarr(arr, n, k):\n        mydict = dict()\n        sum = 0\n        maxLen = 0\n        for i in range(n):\n            sum += arr[i]\n            if sum == k:\n                maxLen = i + 1\n            elif sum - k in mydict:\n                maxLen = max(maxLen, i - mydict[sum - k])\n            if sum not in mydict:\n                mydict[sum] = i\n        return maxLen\n    (n, s) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    tot = sum(arr)\n    if tot < s:\n        print('-1')\n        return\n    print(n - lenOfLongSubarr(arr, n, s))\nfor tc in range(int(input())):\n    fun(tc)", "def fun(nums, target):\n    if sum(nums) < target:\n        return len(nums) + 1\n    if sum(nums) == target:\n        return len(nums)\n    i = 0\n    ans = []\n    j = 0\n    s = 0\n    while j < len(nums):\n        s += nums[j]\n        if s == target:\n            ans.append(j - i + 1)\n        while s > target:\n            s -= nums[i]\n            i += 1\n        if s == target:\n            ans.append(j - i + 1)\n        j += 1\n    return max(ans)\nn = int(input())\nfor i in range(n):\n    (_, x) = input().split()\n    x = int(x)\n    a = input().split()\n    a = list(map(int, a))\n    print(len(a) - fun(a, x))", "t = int(input())\nfor i in range(t):\n    (n, s) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    one = arr.count(1)\n    if s > one:\n        print(-1)\n    elif one == s:\n        print(0)\n    else:\n        ind = []\n        req = one - s\n        ones = []\n        for j in range(n):\n            if arr[j] and len(ind) < req:\n                ind.append(j)\n            if arr[j]:\n                ones.append(j)\n        l = len(ind) - 1\n        ans = ind[-1] + 1\n        r = len(ones) - 1\n        while l >= 0:\n            l -= 1\n            ans = min(ans, ind[l] + 1 + n - ones[r])\n            r -= 1\n        ans = min(ans, n - ones[r + 1])\n        print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    sm = sum(arr)\n    if sm < k:\n        print(-1)\n    else:\n        i = 0\n        sm = 0\n        while i < n and sm < k:\n            sm += arr[i]\n            i += 1\n        while i < n and arr[i] == 0:\n            i += 1\n        j = 0\n        ans = i\n        while i < n:\n            if arr[i] == 0:\n                i += 1\n                ans = max(ans, i - j)\n                continue\n            if 1 == 1:\n                while j < i and arr[j] != 1:\n                    j += 1\n                if j == i:\n                    break\n                else:\n                    j += 1\n                    tm = i - j + 1\n                    ans = max(ans, tm)\n                i += 1\n        print(n - ans)", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\nt = int(input())\nfor _ in range(t):\n    (n, s) = get_ints()\n    arr = get_list()\n    l = 0\n    r = -1\n    res = -1\n    cur = 0\n    while r < n:\n        while cur <= s:\n            r += 1\n            if r == n:\n                break\n            cur += arr[r]\n        if cur >= s:\n            res = max(res, r - l)\n        while cur > s:\n            cur -= arr[l]\n            l += 1\n    if res != -1:\n        print(n - res)\n    else:\n        print(-1)", "t = int(input())\nfor _ in range(t):\n    (n, s) = list(map(int, input().split()))\n    arr = input().split()\n    arr = list(map(int, arr))\n    maxx = -1\n    summ = 0\n    i = 0\n    j = 0\n    while j < len(arr):\n        summ += arr[j]\n        if summ < s:\n            j += 1\n        elif summ == s:\n            maxx = max(maxx, j - i + 1)\n            j += 1\n        else:\n            while summ > s:\n                summ -= arr[i]\n                i += 1\n            if summ == s:\n                maxx = max(maxx, j - i + 1)\n            j += 1\n    if maxx == -1:\n        print(-1)\n    else:\n        print(n - maxx)", "def solve():\n    (n, s) = map(int, input().split())\n    lis = list(map(int, input().split()))\n    ans = -1\n    dp = [0] * n\n    dp[0] = lis[0]\n    for i in range(1, n):\n        dp[i] = dp[i - 1] + lis[i]\n    di = dict()\n    for i in range(n - 1, -1, -1):\n        di[dp[i]] = i\n    for i in range(n):\n        if dp[i] == s:\n            ans = i + 1\n        elif dp[i] > s:\n            left_ptr = dp[i] - s\n            ind = di[left_ptr]\n            ans = max(ans, i - ind)\n    print(n - ans if ans != -1 else ans)\nfor _ in range(int(input())):\n    solve()", "for t in range(int(input())):\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    j = 0\n    res = 0\n    tmp = 0\n    for i in range(n):\n        tmp += a[i]\n        if tmp < s:\n            continue\n        else:\n            while j < i and tmp > s:\n                tmp -= a[j]\n                j += 1\n        if tmp == s:\n            res = max(res, i - j + 1)\n    if res == 0:\n        print(-1)\n    else:\n        print(n - res)", "def calculate(arr, n, s):\n    start = 0\n    end = 0\n    curr_sum = 0\n    min_size = n\n    while end < n and curr_sum < s:\n        curr_sum += arr[end]\n        end += 1\n    min_size = min(min_size, end - start)\n    end -= 2\n    start -= 1\n    while end >= 0:\n        while end >= 0 and arr[end] == 0:\n            end -= 1\n        if end < 0:\n            break\n        start_index = (start + n) % n\n        while arr[start_index] == 0:\n            start -= 1\n            start_index = (start + n) % n\n        min_size = min(min_size, end + 1 + (n - start_index))\n        end -= 1\n        start -= 1\n    curr_sum = 0\n    j = n - 1\n    while j >= 0 and curr_sum < s:\n        curr_sum += arr[j]\n        j -= 1\n    min_size = min(min_size, n - 1 - j)\n    return min_size\nt = int(input())\nfor _ in range(t):\n    (n, target) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    total = sum(arr)\n    if total < target:\n        print(-1)\n    elif total == target:\n        print(0)\n    else:\n        print(calculate(arr, n, total - target))", "from math import inf\n\ndef solve(n, s, a):\n    if sum(a) < s:\n        return -1\n    current_sum = a[0]\n    (left_index, right_index) = (0, 0)\n    best = inf\n    while left_index < n and right_index < n:\n        while right_index < n - 1 and (current_sum < s or (current_sum == s and a[right_index + 1] == 0)):\n            right_index += 1\n            current_sum += a[right_index]\n        if current_sum == s:\n            best = min(best, left_index + (n - 1 - right_index))\n        current_sum -= a[left_index]\n        left_index += 1\n    return best\nt = int(input())\nfor _ in range(t):\n    (n, s) = [int(component) for component in input().split(' ')]\n    a = [int(component) for component in input().split(' ')]\n    print(solve(n, s, a))", "import sys\nt = int(sys.stdin.readline())\nfor i in range(t):\n    (n, s) = map(int, sys.stdin.readline().split())\n    lst = list(map(int, sys.stdin.readline().split()))\n    dic = {}\n    su = 0\n    ma = 0\n    for j in range(n):\n        ele = lst[j]\n        su += ele\n        if su == s:\n            ma = max(ma, j + 1)\n        else:\n            req = su - s\n            if req in dic:\n                q = j - dic[req]\n                ma = max(ma, q)\n        if su not in dic:\n            dic[su] = j\n    if ma == 0:\n        print(-1)\n    else:\n        print(n - ma)", "t = int(input())\nfor i in range(t):\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if sum(a) < s:\n        print(-1)\n    else:\n        b = [-1]\n        for j in range(n):\n            if a[j] == 1:\n                b.append(j)\n        b.append(n)\n        j = s\n        k = 1\n        cur = 0\n        ans = 100000000\n        while j < len(b) - 1:\n            cur = b[k - 1] + 1 + (n - b[j + 1])\n            if ans > cur:\n                ans = cur\n            j += 1\n            k += 1\n        print(ans)", "def solve():\n    (n, s) = map(int, input().split())\n    l = list(map(int, input().split()))\n    m = dict()\n    sum = 0\n    target = s\n    if target == 0:\n        print(0)\n        return\n    sum = 0\n    mx = -1\n    for i in range(n):\n        sum += l[i]\n        if sum == target:\n            mx = max(mx, i + 1)\n        if sum - target in m:\n            mx = max(mx, i - m[sum - target])\n        if sum not in m:\n            m[sum] = i\n    if mx == -1:\n        print(-1)\n    else:\n        print(n - mx)\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1", "t = int(input())\nfor k in range(t):\n    (n, s) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    ss = sum(arr)\n    if s == ss:\n        print(0)\n    elif s > ss:\n        print(-1)\n    else:\n        ma = 0\n        left = 0\n        curSum = 0\n        for right in range(left, n):\n            curSum += arr[right]\n            while curSum > s:\n                curSum -= arr[left]\n                left += 1\n            ma = max(right - left + 1, ma)\n        print(n - ma)", "import sys\n\ndef lenOfLongSubarr(A, N, K):\n    (i, j, sum) = (0, 0, 0)\n    maxLen = -sys.maxsize - 1\n    while j < N:\n        sum += A[j]\n        if sum < K:\n            j += 1\n        elif sum == K:\n            maxLen = max(maxLen, j - i + 1)\n            j += 1\n        elif sum > K:\n            while sum > K:\n                sum -= A[i]\n                i += 1\n            if sum == K:\n                maxLen = max(maxLen, j - i + 1)\n            j += 1\n    return maxLen\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    one = 0\n    for i in range(n):\n        if a[i] == 1:\n            one += 1\n    if one < k:\n        print(-1)\n        continue\n    print(n - lenOfLongSubarr(a, n, k))", "for x in range(int(input())):\n    (a, b) = map(int, input().split())\n    l = list(map(int, input().split()))\n    curr_sum = sum(l)\n    if curr_sum < b:\n        print(-1)\n    elif curr_sum - b == 0:\n        print(0)\n    else:\n        ma = 0\n        left = 0\n        s = 0\n        for x in range(left, a):\n            s += l[x]\n            if s > b:\n                s -= l[left]\n                left += 1\n            ma = max(ma, x - left + 1)\n        print(a - ma)", "for _ in range(int(input())):\n    (n, s) = [int(a) for a in input().split()]\n    arr = [int(b) for b in input().split()]\n    t = sum(arr)\n    if t == s:\n        print(0)\n        continue\n    if t < s:\n        print(-1)\n        continue\n    t -= s\n    table = {0: 0}\n    pre = 0\n    for (i, num) in enumerate(arr):\n        if num:\n            pre += 1\n            table[pre] = i + 1\n    best = table[t]\n    suf = 0\n    for (i, num) in enumerate(arr[::-1]):\n        if num:\n            suf += 1\n            if suf <= t:\n                best = min(best, i + 1 + table[t - suf])\n            else:\n                break\n    print(best)", "t = int(input())\nwhile t != 0:\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    i1 = 0\n    i2 = 0\n    ns = 0\n    ml = 0\n    while i2 < n:\n        ns += a[i2]\n        i2 += 1\n        while ns > s:\n            ns -= a[i1]\n            i1 += 1\n        if ns == s:\n            ml = max(ml, i2 - i1)\n    if ml == 0:\n        print(-1)\n    else:\n        print(n - ml)\n    t -= 1", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    sm = sum(l)\n    p = []\n    s = []\n    if m > sm:\n        print(-1)\n    elif m == sm:\n        print(0)\n    else:\n        for i in range(n):\n            if l[i] == 1:\n                s.append(i)\n        p += s\n        p = p[::-1]\n        temp = sm - m\n        a = -1\n        b = n\n        ans = 200001\n        for i in range(temp + 1):\n            last = temp - i\n            res = 0\n            if i == 0:\n                res = b - s[-last]\n            elif i == temp:\n                res = p[-i] - a\n            else:\n                res = b - s[-last] + p[-i] - a\n            ans = min(ans, res)\n        print(ans)", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\nfor T in range(int(input())):\n    (n, s) = mi()\n    a = li()\n    ones = [-1]\n    for i in range(n):\n        if a[i] == 1:\n            ones.append(i)\n    ones.append(n)\n    ans = 0\n    if s > sum(a):\n        print(-1)\n        continue\n    i = 1\n    j = i + s - 1\n    while j < len(ones) - 1:\n        curr = ones[j + 1] - ones[i - 1] - 1\n        ans = max(ans, curr)\n        i += 1\n        j += 1\n    print(n - ans)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, s) = map(int, input().split())\n    l = [int(i) for i in input().split()]\n    if sum(l) < s:\n        print(-1)\n        continue\n    left = 0\n    smid = 0\n    ans = 0\n    for right in range(n):\n        smid += l[right]\n        while smid > s:\n            smid -= l[left]\n            left += 1\n        if smid == s:\n            ans = max(ans, right - left + 1)\n    print(n - ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    left = []\n    l = 0\n    r = 0\n    sm = 0\n    if sum(arr) < k:\n        print(-1)\n        continue\n    while True:\n        if r == n:\n            left.append(r - l)\n            break\n        if sm + arr[r] <= k:\n            sm += arr[r]\n            r += 1\n        else:\n            left.append(r - l)\n            sm -= arr[l]\n            l += 1\n    print(n - max(left))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    res = -1\n    j = 0\n    c = 0\n    f = False\n    for i in range(n):\n        if l[i] == 1:\n            c += 1\n        if c >= m:\n            f = True\n        while c > m and j < i:\n            if l[j] == 1:\n                c -= 1\n            j += 1\n        res = max(res, i - j + 1)\n    if not f:\n        print(-1)\n    else:\n        print(n - res)", "answers = []\nfor _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    diff = sum(a) - s\n    if s > sum(a):\n        answers.append(-1)\n        continue\n    elif s == sum(a):\n        answers.append(0)\n        continue\n    ta = a.copy()\n    lp = [0]\n    for i in range(n):\n        if ta[i] == 1:\n            lp.append(i + 1)\n    ta.reverse()\n    rp = [0]\n    for i in range(n):\n        if ta[i] == 1:\n            rp.append(i + 1)\n    ans = n\n    for i in range(diff + 1):\n        ans = min(lp[diff - i] + rp[i], ans)\n    answers.append(ans)\nfor ans in answers:\n    print(ans)", "def solve():\n    (n, s) = map(int, input().split())\n    lis = list(map(int, input().split()))\n    ans = -1\n    dp = [0] * n\n    dp[0] = lis[0]\n    for i in range(1, n):\n        dp[i] = dp[i - 1] + lis[i]\n    di = dict()\n    for i in range(n - 1, -1, -1):\n        di[dp[i]] = i\n    for i in range(n):\n        if dp[i] == s:\n            ans = i + 1\n        elif dp[i] > s:\n            left_ptr = dp[i] - s\n            ind = di[left_ptr]\n            ans = max(ans, i - ind)\n    print(n - ans if ans != -1 else ans)\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    (n, s) = [int(i) for i in input().split()]\n    A = [int(i) for i in input().split()]\n    (i, res) = (0, -1)\n    for j in range(n):\n        s -= A[j]\n        while s < 0:\n            s += A[i]\n            i += 1\n            pass\n        if s == 0:\n            res = max(res, j - i + 1)\n        pass\n    if res != -1:\n        res = n - res\n    print(res)", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    x = list(map(int, input().split()))\n    if x.count(1) < s:\n        print(-1)\n        continue\n    (i, j) = (0, 0)\n    c = 0\n    m = 0\n    while j < n:\n        c += x[j]\n        while c > s:\n            c -= x[i]\n            i += 1\n        m = max(m, j - i)\n        j += 1\n    print(n - m - 1)", "for i in range(int(input())):\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    summ = 0\n    ans = -1\n    idx = 0\n    for i in range(n):\n        summ += a[i]\n        while summ > s and idx < i:\n            summ -= a[idx]\n            idx += 1\n        if summ == s:\n            ans = max(ans, i - idx + 1)\n    if ans == -1:\n        print(-1)\n    else:\n        print(n - ans)", "for h in range(int(input())):\n    (n, s) = map(int, input().split())\n    x = list(map(int, input().split()))\n    if sum(x) < s:\n        print(-1)\n        continue\n    (i, j) = (0, 0)\n    c = 0\n    m = 0\n    while j < n:\n        c += x[j]\n        while c > s:\n            c -= x[i]\n            i += 1\n        m = max(m, j - i)\n        j += 1\n    print(n - m - 1)", "def check(a, n, s):\n    i = 0\n    j = 0\n    sm = 0\n    mx = 0\n    while j < n:\n        sm += a[j]\n        if sm < s:\n            j += 1\n        elif sm == s:\n            mx = max(mx, j - i + 1)\n            j += 1\n        else:\n            while sm > s:\n                sm -= a[i]\n                i += 1\n            if sm == s:\n                mx = max(mx, j - i + 1)\n            j += 1\n    return mx\nt = int(input())\nfor i in range(t):\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    sm = 0\n    for i in range(n):\n        sm += a[i]\n    if sm < s:\n        print(-1)\n    elif sm == s:\n        print(0)\n    else:\n        print(n - check(a, n, s))", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (ans, sum, start) = (-1, 0, 0)\n    for i in range(n):\n        sum += a[i]\n        while sum > s:\n            sum -= a[start]\n            start += 1\n        if sum == s:\n            ans = max(ans, i - start + 1)\n    print(ans if ans == -1 else n - ans)", "t = int(input())\nfor _ in range(t):\n    (n, s) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if sum(arr) < s:\n        print(-1)\n        continue\n    (i, j) = (0, 0)\n    (cur, ans) = (0, 0)\n    while i < n:\n        cur += arr[i]\n        while cur > s:\n            cur -= arr[j]\n            j += 1\n        ans = ans if ans > i - j else i - j\n        i += 1\n    print(n - ans - 1)", "for _ in range(int(input())):\n    (u, x) = map(int, input().split())\n    z = list(map(int, input().split()))\n    if x > sum(z):\n        print(-1)\n    else:\n        ans = 0\n        i = 0\n        j = 0\n        curr = 0\n        while j < u:\n            curr += z[j]\n            if curr < x:\n                j += 1\n            elif curr == x:\n                ans = max(ans, j - i + 1)\n                j += 1\n            else:\n                while curr > x:\n                    curr -= z[i]\n                    i += 1\n                if curr == x:\n                    ans = max(ans, j - i + 1)\n                j += 1\n        print(u - ans)", "t = int(input())\nfor _ in range(t):\n    (n, s) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    total = sum(nums)\n    ans = 0\n    res = []\n    if total < s:\n        ans = -1\n    elif total == s:\n        ans = 0\n    else:\n        left = 0\n        add = 0\n        for index in range(len(nums)):\n            add += nums[index]\n            if add > s:\n                res.append(len(nums) - index + left)\n                while add != s:\n                    add -= nums[left]\n                    left += 1\n            if add == s and index == len(nums) - 1:\n                res.append(left)\n        ans = min(res)\n    print(ans)", "for h in range(int(input())):\n    (n, s) = map(int, input().split())\n    x = list(map(int, input().split()))\n    if sum(x) < s:\n        print(-1)\n        continue\n    (i, j) = (0, 0)\n    c = 0\n    m = 0\n    while j < n:\n        c += x[j]\n        while c > s:\n            c -= x[i]\n            i += 1\n        m = max(m, j - i)\n        j += 1\n    print(n - m - 1)", "from collections import defaultdict\nfrom itertools import groupby\nfor _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    m = defaultdict(int)\n    sum1 = 0\n    temp = 0\n    for i in range(n):\n        sum1 += a[i]\n        if sum1 == s:\n            temp = i + 1\n        if sum1 not in m:\n            m[sum1] = i\n        if sum1 - s in m:\n            if temp < i - m[sum1 - s]:\n                temp = i - m[sum1 - s]\n    if temp != 0:\n        print(n - temp)\n    else:\n        print(-1)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, s) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    fidx = [-1]\n    num_one = 0\n    for i in range(n):\n        if a[i] == 1:\n            fidx.append(i)\n            num_one += 1\n    if num_one < s:\n        print('-1')\n        continue\n    ans = fidx[num_one - s] + 1\n    for i in range(n - 1, 0, -1):\n        if a[i] == 1:\n            num_one -= 1\n        ans = min(ans, n - i + fidx[num_one - s] + 1)\n    print(ans)", "for h in range(int(input())):\n    (n, s) = map(int, input().split())\n    x = list(map(int, input().split()))\n    if sum(x) < s:\n        print(-1)\n        continue\n    (i, j) = (0, 0)\n    c = 0\n    m = 0\n    while j < n:\n        c += x[j]\n        while c > s:\n            c -= x[i]\n            i += 1\n        m = max(m, j - i)\n        j += 1\n    print(n - m - 1)", "m = int(input())\nfor _ in range(m):\n    (n, k) = map(int, input().split())\n    mas = map(int, input().split())\n    dists = []\n    dist = 0\n    total = 0\n    for el in mas:\n        if el:\n            total += 1\n            dists.append(dist)\n            dist = 0\n        else:\n            dist += 1\n    dists.append(dist)\n    d = total - k\n    if d < 0:\n        print(-1)\n    elif d == 0:\n        print(0)\n    else:\n        rev_dists = dists[::-1]\n        for q in range(1, d):\n            dists[q] += dists[q - 1]\n            rev_dists[q] += rev_dists[q - 1]\n        ans = min(rev_dists[d - 1], dists[d - 1])\n        for i in range(d - 1):\n            ans = min(ans, dists[i] + rev_dists[d - 2 - i])\n        print(ans + d)", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = []\n    sum1 = 0\n    l = 0\n    r = 0\n    if sum(x) < s:\n        print(-1)\n        continue\n    else:\n        while True:\n            if r == n:\n                y.append(r - l)\n                break\n            if sum1 + x[r] <= s:\n                sum1 += x[r]\n                r += 1\n            else:\n                y.append(r - l)\n                sum1 -= x[l]\n                l += 1\n    print(n - max(y))", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    x = list(map(int, input().split()))\n    if x.count(1) < s:\n        print(-1)\n        continue\n    (i, j) = (0, 0)\n    c = 0\n    m = 0\n    while j < n:\n        c += x[j]\n        while c > s:\n            c -= x[i]\n            i += 1\n        m = max(m, j - i)\n        j += 1\n    print(n - m - 1)", "t = int(input())\nfor i in range(t):\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if a.count(1) < s:\n        print(-1)\n        continue\n    n = len(a)\n    (i, j) = (0, 0)\n    (sum, maxi) = (0, 0)\n    for i in range(n):\n        sum += a[i]\n        while sum > s:\n            sum -= a[j]\n            j += 1\n        maxi = max(maxi, i - j)\n        i += 1\n    print(n - maxi - 1)"]