["import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m) = map(int, input().split())\n    a = [*map(int, input().split())]\n    if n >= m:\n        return 'NO'\n    elif m >= n + sum(a) + max(a) - min(a):\n        return 'YES'\n    else:\n        return 'NO'\nfor _ in [0] * int(input()):\n    print(solve())", "import sys\ninput = sys.stdin.readline\n\ndef ri():\n    return int(input())\n\ndef rf():\n    return list(map(float, input().split()))\n\ndef rl():\n    return list(map(int, input().split()))\n\ndef rs():\n    return input().rstrip()\n\ndef out_list(x):\n    return ' '.join(map(str, x))\n\ndef solve_case():\n    (n, m) = rl()\n    A = rl()\n    if n > m:\n        print('NO')\n        return\n    need = n\n    if n == 2:\n        need += max(A) * 2\n    else:\n        need += sum(A) + max(A) - min(A)\n    if need > m:\n        print('NO')\n    else:\n        print('YES')\nT = ri()\nfor ti in range(1, T + 1):\n    solve_case()", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_ls():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef main():\n    for _ in range(int(input())):\n        (n, m) = get_ints()\n        ls = get_ls()\n        res = 0\n        for x in ls:\n            res += x\n        res = res - min(ls) + max(ls) + n\n        if n > m or res > m:\n            print('NO')\n        else:\n            print('YES')\nmain()", "from sys import stdin\nt = int(stdin.readline())\nwhile t > 0:\n    t -= 1\n    (n, m) = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    print('YES' if n + sum(a) - min(a) + max(a) <= m else 'NO')", "def solve(arr):\n    if n > m:\n        return 'NO'\n    arr.sort()\n    x = 0\n    for i in range(n - 1):\n        x += 1\n        x += arr[i + 1]\n    x += 1\n    x += arr[-1]\n    if x > m:\n        return 'NO'\n    return 'YES'\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    print(solve(arr))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if n >= m:\n        print('NO')\n        continue\n    if sum(a) + n + max(a) - min(a) <= m:\n        print('YES')\n    else:\n        print('NO')", "import sys\nDEBUG = False\n\ndef check(m, req):\n    req = list(sorted(req, reverse=True))\n    left = req[::2]\n    right = req[1::2]\n    ar = right + left\n    space = 0\n    if len(req) == 1:\n        return 1 <= m\n    if len(req) == 2:\n        return 2 + max(req) * 2 <= m\n    space += sum(left[:-1]) + len(left[:-1]) + sum(right[:-1]) + len(right[:-1])\n    space += 2 + max(left[-1], right[-1])\n    space += max(left[0], right[0])\n    return space <= m\n\ndef main(f):\n    t = int(f.readline())\n    for i in range(t):\n        (n, m) = map(int, f.readline().split())\n        req = list(map(int, f.readline().split()))\n        if check(m, req):\n            print('YES')\n        else:\n            print('NO')\nif DEBUG:\n    f = open('input.txt', 'r')\nelse:\n    f = sys.stdin\nmain(f)\nf.close()", "import sys, math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    x = 0\n    if a == 1:\n        x = l[0] + 1\n    else:\n        for i in range(1, a + 1):\n            if i == 1:\n                x = x + 2 * l[-1 * i] + 1\n            elif i == a:\n                x = x + 1\n            else:\n                x = x + l[-1 * i] + 1\n    if x <= b:\n        print('YES')\n    else:\n        print('NO')", "import sys\ninput = lambda : sys.stdin.readline().strip()\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = sorted(list(map(int, input().split())))\n    x = arr[-1]\n    arr = arr[1:]\n    y = sum(arr)\n    y += n\n    y += x\n    print('YES' if y <= m else 'NO')", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort(key=lambda x: -x)\n    curr = m - 1 - 2 * arr[0]\n    for i in range(1, n):\n        if curr <= 0:\n            return 'NO'\n        curr -= 1 + arr[i]\n    return 'YES'\nfor _ in range(int(input())):\n    print(solve())", "from sys import stdin\nT = int(stdin.readline())\n\ndef solve(a, nc):\n    a.sort()\n    a = a[::-1]\n    s = a[0]\n    for i in range(len(a) - 1):\n        s += a[i] + 1\n    return s < nc\nfor t in range(T):\n    [np, nc] = [int(x) for x in stdin.readline().strip().split(' ')]\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    if solve(a, nc):\n        print('YES')\n    else:\n        print('NO')", "from sys import stdin\nfrom math import log, floor, ceil, gcd\nfrom collections import defaultdict as dd\ninput = stdin.readline\ninp = lambda : int(stdin.readline())\nrs = lambda : stdin.readline().strip()\n\ndef ra(typ):\n    return list(map(typ, stdin.readline().split()))\n\ndef rv(typ):\n    return map(typ, stdin.readline().split())\n\ndef main():\n    for _ in range(inp()):\n        (n, m) = rv(int)\n        a = sorted(ra(int))\n        a.append(a[0])\n        x = n\n        for i in range(n):\n            x += max(a[i], a[i + 1])\n        print('YES' if x <= m else 'NO')\nmain()", "t = int(input())\nrr = ''\nyes = 'YES'\nno = 'NO'\nfor _t in range(t):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    r = yes\n    arr = sorted(arr, reverse=True)\n    if n > m:\n        r = no\n    elif n + 2 * arr[0] + sum(arr[1:-1]) > m:\n        r = no\n    rr += r + '\\n'\nprint(rr)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    w = sorted(map(int, input().split()))\n    w = w + [w[0]]\n    s = n\n    for i in range(n):\n        s += max(w[i], w[i + 1])\n    print('YES' if m >= s else 'NO')", "import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nt = inp()\nfor i in range(t):\n    (n, m) = mp()\n    l = li()\n    l.sort()\n    c1 = l[0] + 1\n    c2 = l[0]\n    for i in range(1, n):\n        if l[i] > c2:\n            a = l[i] - c2\n            c1 += a\n        c1 += l[i] + 1\n        c2 = l[i]\n    if c1 <= m:\n        pr('YES')\n    else:\n        pr('NO')", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    arr.sort()\n    seats = 0\n    for i in range(1, n):\n        seats += 1 + max(arr[i - 1], arr[i])\n    seats += 1 + max(arr[n - 1], arr[0])\n    print('YES' if seats <= m else 'NO')", "import fileinput\n\ndef getanswer(Np, Nc, gaps):\n    gaps.sort()\n    gaps = gaps[1:]\n    gaps = gaps + [max(gaps)]\n    if Nc - sum(gaps) >= Np:\n        return 'YES'\n    else:\n        return 'NO'\n\ndef solve():\n    ins = []\n    for line in fileinput.input():\n        ins.append(line.strip('\\n'))\n    num_tests = int(ins[0])\n    test_cases = ins[1:]\n    for i in range(num_tests):\n        (NpNc, gaps) = test_cases[2 * i:2 * i + 2]\n        (Np, Nc) = NpNc.split(' ')\n        gaps = [int(i) for i in gaps.split(' ')]\n        answer = getanswer(int(Np), int(Nc), gaps)\n        print(answer)\nsolve()", "from sys import stdin\nfrom math import log, floor, ceil, gcd\nfrom collections import defaultdict as dd\ninput = stdin.readline\ninp = lambda : int(stdin.readline())\nrs = lambda : stdin.readline().strip()\n\ndef ra(typ):\n    return list(map(typ, stdin.readline().split()))\n\ndef rv(typ):\n    return map(typ, stdin.readline().split())\n\ndef main():\n    for _ in range(inp()):\n        (n, m) = rv(int)\n        a = sorted(ra(int))\n        a.append(a[0])\n        x = n\n        for i in range(n):\n            x += max(a[i], a[i + 1])\n        print('YES' if x <= m else 'NO')\nmain()", "import math\nimport sys\nimport itertools\nimport fractions\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\nGAP = 2\nfor t in [wtf[i:i + GAP] for i in range(1, len(wtf), GAP)]:\n    (n, m) = map(int, t[0].split())\n    A = sorted(map(int, t[1].split()), reverse=True)\n    L = 0\n    R = m - 1\n    for a in A:\n        l = L + a + 1\n        if R < L:\n            m = -1\n            break\n        if l < m:\n            if L == 0:\n                R -= a\n            L = l\n            continue\n        r = R - a\n        if r < m:\n            if R == m - 1:\n                L += a + 1\n            R = r\n            continue\n        m = -1\n        break\n    print('NO' if m < n else 'YES')", "def value(chair, array):\n    if chair < len(array):\n        return 'NO'\n    array.sort(reverse=True)\n    chair -= 1 + 2 * array[0]\n    for i in range(1, len(array) - 1):\n        chair -= 1 + array[i]\n        if chair <= 0:\n            return 'NO'\n    if chair > 0:\n        return 'YES'\n    else:\n        return 'NO'\n\ndef main():\n    n = int(input())\n    data = []\n    chairs = []\n    for i in range(n):\n        (people, chair) = map(int, input().split())\n        array = list(map(int, input().split()))\n        chairs.append(chair)\n        data.append(array)\n    for k in range(n):\n        print(value(chairs[k], data[k]))\nmain()", "import sys\ninput = sys.stdin.readline\nfrom math import ceil, floor, gcd\n\ndef inp():\n    return int(input())\n\ndef lis():\n    return list(map(int, input().split()))\n\ndef ma():\n    return map(int, input().split())\n\ndef st():\n    return input().rstrip('\\n')\n\ndef isPrime(n):\n    if n == 1:\n        return 0\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return 0\n    return 1\nt = inp()\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = lis()\n    ma = 1\n    fl = 1\n    gap = 0\n    a.sort()\n    for i in range(n):\n        if ma - 1 > m:\n            fl = -1\n            break\n        if a[i] > gap:\n            ma += abs(a[i] - gap) + 1\n        else:\n            ma += 1\n        if i != 0 and i != n - 1:\n            ma += a[i]\n        gap = a[i]\n    ma -= 1\n    if ma > m:\n        fl = -1\n    if fl == -1:\n        print('NO')\n        continue\n    if m - ma >= a[-1] and m - ma >= a[0]:\n        pass\n    else:\n        fl = -1\n    if fl == 1:\n        print('YES')\n    else:\n        print('NO')", "import os\nimport sys\nfrom io import BytesIO, IOBase\nfrom collections import Counter, defaultdict\nfrom sys import stdin, stdout\nimport io\nimport math\nimport heapq\nimport bisect\nimport collections\n\ndef ceil(a, b):\n    return (a + b - 1) // b\ninf = float('inf')\n\ndef get():\n    return stdin.readline().rstrip()\nmod = 10 ** 5 + 7\nfor _ in range(int(get())):\n    (n, m) = map(int, get().split())\n    l = list(map(int, get().split()))\n    l.sort()\n    x = 0\n    for i in range(n - 1):\n        x += max(l[i], l[i + 1])\n    x += abs(max(l[0], l[-1])) + n\n    if x <= m:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\notv = ['NO'] * t\nfor T in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if n >= m:\n        continue\n    s = a.pop(a.index(max(a))) * 2 + 1\n    for i in range(n - 1):\n        s += a[i] + 1\n    s -= min(a)\n    if s <= m:\n        otv[T] = 'YES'\nfor i in range(t):\n    print(otv[i])", "test_cases = input()\narr1 = []\narr2 = []\narr3 = []\nfor i in range(int(test_cases)):\n    arr1.append(list(map(int, input().split())))\n    arr2.append(list(map(int, input().split())))\nfor (i, e) in enumerate(arr1):\n    chair_needed = 0\n    temp_arr = arr2[i]\n    temp_arr.sort()\n    for (ii, j) in enumerate(temp_arr):\n        if ii == len(temp_arr) - 1:\n            chair_needed += max(j, temp_arr[0])\n        else:\n            chair_needed += max(j, temp_arr[ii + 1])\n    chair_needed += e[0]\n    if e[1] >= chair_needed:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if sum(a) - min(a) + max(a) + n > m:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nwhile t > 0:\n    (n, m) = [int(x) for x in input().split()]\n    l = [int(x) for x in input().split()]\n    l.sort()\n    min = n\n    min += l[-1] * 2\n    for i in l[1:-1]:\n        min += i\n    if m >= min:\n        print('YES')\n    else:\n        print('NO')\n    t = t - 1", "t = int(input())\nfor __ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    sumi = sum(a) + a[-1] - a[0] + n\n    if sumi <= m:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = sum(a[1:])\n    s += a[-1] + n\n    if s <= m:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(0, t):\n    (n, m) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    r = max(a) + sum(a) + n - min(a)\n    if r <= m:\n        print('YES')\n    else:\n        print('NO')", "def solve():\n    (n, m) = list(map(int, input().split(' ')))\n    a = list(map(int, input().split(' ')))\n    a.sort()\n    chair_occupied = sum(a) + n + a[-1] - a[0]\n    if chair_occupied > m:\n        print('NO')\n    else:\n        print('YES')\nfor t in range(int(input())):\n    solve()", "n = int(input())\nfor p in range(0, n):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    l = []\n    a = input().split()\n    for i in range(0, n):\n        l.append(int(a[i]))\n    l.sort()\n    sum = 2 * l[n - 1] + n\n    for i in range(1, n - 1):\n        sum = sum + l[i]\n    if sum <= m:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    values = list(map(int, input().split()))\n    values.sort()\n    if n + sum(values) - values[0] + values[n - 1] <= m:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(0, t):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a.sort(reverse=True)\n    if n >= m:\n        print('NO')\n    else:\n        m -= n\n        m -= 2 * a[0]\n        j = 1\n        while m >= 0 and j < n - 1:\n            m -= a[j]\n            j += 1\n        if m >= 0:\n            print('YES')\n        else:\n            print('NO')", "def Dist():\n    num_nm = input().split()\n    m = int(num_nm[1])\n    n = int(num_nm[0])\n    a = input().split()\n    a = list(map(int, a))\n    a = sorted(a)\n    rep = max(a[0], a[n - 1])\n    if n == 2:\n        wish = 2 * rep + n\n    else:\n        for i in range(n - 1):\n            rep += max(a[i - 1], a[i])\n        wish = rep + n\n    if wish > m:\n        print('NO')\n    else:\n        print('YES')\nnum_iter = int(input())\nfor _ in range(num_iter):\n    Dist()", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if sum(a) - min(a) + max(a) + n <= m:\n        print('YES')\n    else:\n        print('NO')", "lines = int(input())\nfor i in range(lines):\n    line1 = input().split()\n    n = int(line1[0])\n    m = int(line1[1])\n    line2 = [int(x) for x in input().split()]\n    line2.sort()\n    line2.reverse()\n    seatReq = 2 * line2[0] + 1\n    for i in range(1, n - 1):\n        seatReq += 1 + line2[i]\n    seatReq += 1\n    if seatReq <= m:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t:\n    t -= 1\n    (a, b) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    ans = a + sum(arr) + (arr[-1] - arr[0])\n    if ans <= b:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if sum(l) + l[-1] - l[0] + n > m:\n        print('NO')\n    else:\n        print('YES')", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if sum(l) + l[-1] - l[0] + n > m:\n        print('NO')\n    else:\n        print('YES')", "def solution():\n    t = int(input())\n    for _ in range(t):\n        (n, m) = map(int, input().split())\n        seats_empty = list(map(int, input().split()))\n        seats_empty.sort(reverse=True)\n        res = seats_empty[0] * 2 + 1\n        for seats in seats_empty[1:n - 1]:\n            res += seats + 1\n        res += 0 if n == 1 else 1\n        if res > m:\n            print('NO')\n        else:\n            print('YES')\nsolution()", "for i in range(int(input(''))):\n    (n, m) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    if n + sum(a) + max(a) - min(a) > m:\n        print('NO')\n    else:\n        print('YES')", "T = int(input())\nfor t in range(T):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    answer = sum(a) + max(a) - min(a) + n\n    if answer > m:\n        print('NO')\n    else:\n        print('YES')", "I = lambda : [int(i) for i in input().split()]\nfor _ in range(I()[0]):\n    (n, m) = I()\n    l = sorted(I(), reverse=True)\n    print('YES' if l[0] + sum(l[:-1]) + n <= m else 'NO')", "for i in range(int(input())):\n    (peep, chair) = map(int, input().split())\n    a = list(map(int, input().split()))\n    final = max(a) + sum(a) + peep - min(a)\n    if chair >= final:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t:\n    t -= 1\n    (a, b) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    ans = a + sum(arr) + (arr[-1] - arr[0])\n    if ans <= b:\n        print('YES')\n    else:\n        print('NO')", "def Dist():\n    num_nm = input().split()\n    m = int(num_nm[1])\n    n = int(num_nm[0])\n    a = input().split()\n    a = list(map(int, a))\n    wish = n + sum(a) - min(a) + max(a)\n    print('NO' if wish > m else 'YES')\nnum_iter = int(input())\nfor _ in range(num_iter):\n    Dist()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = 1\n    a.sort()\n    for i in range(1, n - 1):\n        c += a[i] + 1\n    if c + 2 * a[-1] + 1 > m:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = 1\n    a.sort()\n    for i in range(1, n - 1):\n        c += a[i] + 1\n    if c + 2 * a[-1] + 1 > m:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor j in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if n > k:\n        print('NO')\n        continue\n    a = sorted(a)\n    if sum(a) + a[n - 1] + n - a[0] <= k:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    (col, chairs) = map(int, input().split())\n    sp_dist = list(map(int, input().split()))\n    min_chairs = max(sp_dist) + sum(sp_dist) - min(sp_dist) + col\n    if min_chairs <= chairs:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    (peep, chair) = map(int, input().split())\n    a = list(map(int, input().split()))\n    final = max(a) + sum(a) + peep - min(a)\n    if chair >= final:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    s = a[0] + n\n    for i in a[:-1]:\n        s += i\n    if s > m:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if n > m:\n        print('NO')\n    else:\n        l.sort()\n        s = n + sum(l) - l[0] + l[-1]\n        if m < s:\n            print('NO')\n        else:\n            print('YES')\n    t -= 1", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort(reverse=True)\n    j = l[0] * 2 + 1\n    t = 1\n    while j < m and t < n:\n        j += l[t] + 1\n        t += 1\n    if t < n:\n        print('NO')\n    else:\n        print('YES')", "def solve():\n    (n, m) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    zasedeni = 0\n    a.sort(reverse=True)\n    if n > m:\n        return 'NO'\n    zasedeni = a[0] + 1\n    for i in a[:-1]:\n        zasedeni += i + 1\n        if zasedeni > m:\n            return 'NO'\n    return 'YES'\nt = int(input())\nwhile t > 0:\n    print(solve())\n    t -= 1", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = sorted(list(map(int, input().split())), reverse=True)\n    x = sum(a) + n + a[0] - a[-1]\n    if x <= m:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\n\ndef changer(a):\n    if a == '1':\n        return '0'\n    return '1'\n\ndef solve():\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if sum(a) + max(a) - min(a) + n > m:\n        print('NO')\n        return\n    print('YES')\nfor i in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l = sorted(l)\n    l = l[::-1]\n    temp = sum(l)\n    if temp + n + l[0] - l[-1] <= m:\n        print('YES')\n    else:\n        print('NO')", "for t in range(int(input())):\n    (m, n) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if sum(a) - min(a) + max(a) + m > n:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\n\ndef sou():\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if n >= m:\n        return False\n    a.sort(reverse=True)\n    t = a[0]\n    p = a[0]\n    for i in range(len(a)):\n        if t + 1 > m:\n            return False\n        t += a[i] + 1\n    return True\nwhile t:\n    if sou():\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "T = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    required = sum(a) + n + max(a) - min(a)\n    if required > m:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort(reverse=True)\n    res = 0\n    for i in arr[:-1]:\n        res += i + 1\n    res += 1\n    rem = m - res\n    if rem >= arr[0]:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(c) for c in input().split()]\n    a = [int(d) for d in input().split()]\n    if n > m:\n        print('NO')\n        continue\n    a.sort(reverse=True)\n    needed = n + a[0] + sum(a[:-1])\n    print('YES' if needed <= m else 'NO')", "for _ in range(int(input())):\n    (guys, chairs) = list(map(int, input().split()))\n    dist = list(map(int, input().split()))\n    if guys > chairs:\n        print('NO')\n    elif guys == 1:\n        print('YES')\n    elif chairs < guys + sum(dist) + max(dist) - min(dist):\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [*map(int, input().split())]\n    a = sorted(a)\n    D = sum(a[1:]) + a[-1] + n\n    if D > m:\n        print('NO')\n    else:\n        print('YES')", "def solve(n, m, a: list):\n    if n > m:\n        return 'NO'\n    a.sort(reverse=True)\n    need = n + 2 * a[0]\n    for (i, num) in enumerate(a):\n        if i == 0 or i == len(a) - 1:\n            continue\n        need += num\n    if m >= need:\n        return 'YES'\n    else:\n        return 'NO'\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, m) = map(int, input().split())\n        a = list(map(int, input().split()))\n        ans = solve(n, m, a)\n        print(ans)\nmain()", "for _ in range(int(input())):\n    (p, ch) = map(int, input().split())\n    s = list(map(int, input().split()))\n    s.sort()\n    c = 0\n    if p + sum(s) - s[0] + s[p - 1] <= ch:\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\nimport math as m\n\ndef get2int():\n    p = input().split()\n    return (int(p[0]), int(p[1]))\n\ndef get3int():\n    p = input().split()\n    return (int(p[0]), int(p[1]), int(p[2]))\n\ndef cinarr():\n    arr = []\n    for i in input().split():\n        arr.append(int(i))\n    return arr\n\ndef solve():\n    (n, m) = get2int()\n    a = cinarr()\n    sm = 0\n    if n > m:\n        return 'NO'\n    a.sort(reverse=True)\n    a[0] = a[0] * 2\n    for i in range(n - 1):\n        sm += a[i] + 1\n    sm += 1\n    if sm > m:\n        return 'NO'\n    else:\n        return 'YES'\nfor case in range(int(input())):\n    print(solve())", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ans = sum(l) + max(l) + n - min(l)\n    if m >= ans:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort(reverse=True)\n    ans = 2 * l[0] + 1\n    for i in range(1, n - 1):\n        ans += l[i] + 1\n    if n > 1:\n        ans += 1\n    if ans <= k:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef intlist():\n    return [int(i) for i in input().split(' ')]\n\ndef stringlist():\n    return input().split(' ')\n\ndef yes(t):\n    if t:\n        return 'YES'\n    return 'NO'\n\ndef printjoin(l, str=False):\n    if str:\n        l = [str(i) for i in l]\n    return ' '.join(l)\n\ndef power_of_two(n):\n    b = bin(n)[2:]\n    return int(b) == 10 ** (len(b) - 1)\n\ndef bit_count(n):\n    return bin(n).count('1')\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef lcm(x, y):\n    lcm = x * y // gcd(x, y)\n    return lcm\n\ndef isint(str):\n    try:\n        int(str)\n        return True\n    except ValueError:\n        return False\n\ndef solve():\n    (n, m) = intlist()\n    l = intlist()\n    if n > m:\n        return 'NO'\n    l = sorted(l, reverse=True)\n    a = sum(l) + n\n    a -= l[-1]\n    a += l[0]\n    return yes(a <= m)\nt = input()\nfor tt in range(int(t)):\n    print(solve())", "for _ in range(int(input())):\n    result = True\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    people = [int(x) for x in input().split()]\n    people.sort(reverse=True)\n    m -= people[0] + 1\n    for i in range(1, n):\n        m -= people[i - 1] + 1\n        if m < 0:\n            result = False\n            break\n    print('YES' if result else 'NO')", "t = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    (n, m) = t()\n    a = [*t()]\n    print('YNEOS'[sum(a) + max(a) - min(a) + n > m::2])", "tc = int(input())\nfor i in range(tc):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    sum = 1\n    for j in range(n - 1):\n        sum = sum + arr[j + 1] + 1\n    sum = sum + arr[n - 1]\n    if n >= m:\n        print('NO')\n    elif sum <= m:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    a = input().split()\n    (n, m) = (int(a[0]), int(a[1]))\n    l = input().split()\n    for i in range(n):\n        l[i] = int(l[i])\n    ans = 0\n    prev = 1000000000\n    l.sort()\n    for i in l:\n        ans += i + 1\n        if prev < i:\n            ans += i - prev\n        prev = i\n    print('YES') if ans <= m else print('NO')", "tc = int(input())\nfor i in range(tc):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    sum = 1\n    for j in range(n - 1):\n        sum = sum + arr[j + 1] + 1\n    sum = sum + arr[n - 1]\n    if n >= m:\n        print('NO')\n    elif sum <= m:\n        print('YES')\n    else:\n        print('NO')", "def socialDistance(A, n, m):\n    if n > m:\n        print('NO')\n        return\n    A.sort()\n    total_chairs = m\n    total_chairs -= 1\n    total_chairs -= 2 * A[len(A) - 1]\n    if total_chairs <= 0:\n        print('NO')\n        return\n    for i in range(len(A) - 2, -1, -1):\n        total_chairs -= 1\n        if i == 0 and total_chairs >= 0:\n            print('YES')\n            return\n        total_chairs -= A[i]\n        if total_chairs < 0:\n            print('NO')\n            return\n    print('YES')\nt = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    A = [int(x) for x in input().split()]\n    socialDistance(A, n, m)", "a = int(input())\nfor i in range(a):\n    (b, c) = map(int, input().split())\n    d = [*map(int, input().split())]\n    d.sort()\n    e = sum(d[1:]) + d[-1] + b\n    if e > c:\n        print('NO')\n    else:\n        print('YES')", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, m) = R()\n    a = (*R(),)\n    print('YNEOS'[sum(a) + max(a) - min(a) + n > m::2])", "import re\n\nclass Util:\n    ALLOWED_LOCAL_FILES = set(['main.py', 'A.py', 'B.py', 'C.py', 'D.py', 'E.py', 'F.py', 'G.py'])\n    MOD = 1000000000 + 7\n\n    @staticmethod\n    def get_int_list_input():\n        return list(map(int, input().split()))\n\ndef solve():\n    (n, m) = Util.get_int_list_input()\n    a = Util.get_int_list_input()\n    extra_chairs = sum(a) - min(a) + max(a)\n    required_chairs = n + extra_chairs\n    if required_chairs > m:\n        print('NO')\n    else:\n        print('YES')\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solve()\nimport sys\nif sys.argv[0] in Util.ALLOWED_LOCAL_FILES:\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nmain()", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    r = max(a) + sum(a) + n - min(a)\n    print('YES' if r <= m else 'NO')", "t = int(input())\nfor i in range(0, t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if sum(a) + n + max(a) - min(a) <= m:\n        print('YES')\n    else:\n        print('NO')", "import math\nt = int(input())\nfor i in range(t):\n    (n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    rChairs = n + sum(a) + (max(a) - min(a))\n    if rChairs <= m:\n        print('YES')\n    else:\n        print('NO')", "import sys\n\ndef solve():\n    (n, m) = map(int, input().split())\n    num = list(map(int, input().split()))\n    num.sort()\n    s = sum(num[1:]) + num[-1] + n\n    print('YES' if s <= m else 'NO')\nfor _ in range(int(input())):\n    solve()", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if sum(l) + l[-1] - l[0] + n > m:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = sum(a) - min(a) + max(a) + n\n    if s > m:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if sum(a) + max(*a) - min(*a) + len(a) <= m:\n        print('YES')\n    else:\n        print('NO')"]