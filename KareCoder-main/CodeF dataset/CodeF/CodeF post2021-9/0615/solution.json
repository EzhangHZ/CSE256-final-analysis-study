["def main():\n    (n, k) = map(int, input().split())\n    b = list(map(int, input().split()))\n    temp = 0\n    operations = [0] * n\n    last = 0\n    for i in range(n - 1, k - 1, -1):\n        now = 0\n        if i != n - 1:\n            last -= temp\n            now = last\n            if i + k >= n:\n                pass\n            else:\n                temp -= operations[i + k]\n        delta = b[i] - now\n        if delta <= 0:\n            continue\n        else:\n            operations[i] = (delta + k - 1) // k\n            temp += operations[i]\n            last = operations[i] * k + now\n    m = 0\n    need = [0] * k\n    for i in range(k - 1, -1, -1):\n        if i != n - 1:\n            last -= temp\n            need[i] = max(0, b[i] - last)\n            if i + k >= n:\n                pass\n            else:\n                temp -= operations[i + k]\n        else:\n            need[i] = max(0, b[i])\n    for i in range(k):\n        m = max(m, (need[i] + i) // (i + 1))\n    print(sum(operations) + m)\nmain()", "import math\n\ndef progressions_covering():\n    (n, k) = [int(x) for x in input().split(' ')]\n    b = [int(x) for x in input().split(' ')]\n    result = 0\n    count = 0\n    summ = 0\n    a = [0 for x in range(n)]\n    for i in range(n - 1, -1, -1):\n        summ -= count\n        count -= a[i]\n        b[i] -= summ\n        if b[i] <= 0:\n            continue\n        el = min(i + 1, k)\n        needed = math.ceil(b[i] / el)\n        summ += needed * el\n        count += needed\n        result += needed\n        if i - el >= 0:\n            a[i - el] += needed\n    print(result)\nprogressions_covering()", "(n, k) = [*map(int, input().split())]\nb = [*map(int, input().split())]\nd = [0] * n\ns = total = 0\nfor i in range(n - 1, -1, -1):\n    b[i] -= total\n    if b[i] > 0:\n        dd = min(k, i + 1)\n        d[i] = (b[i] + dd - 1) // dd\n    s += d[i] - (d[i + k] if i + k < n else 0)\n    total += d[i] * dd - s\nprint(sum(d))", "(n, k) = [*map(int, input().split())]\nb = [*map(int, input().split())]\nd = [0] * n\ns = total = 0\nfor i in range(n - 1, -1, -1):\n    b[i] -= total\n    if b[i] > 0:\n        dd = min(k, i + 1)\n        d[i] = (b[i] + dd - 1) // dd\n    s += d[i] - (d[i + k] if i + k < n else 0)\n    total += d[i] * dd - s\nprint(sum(d))", "(n, k) = [*map(int, input().split())]\nb = [*map(int, input().split())]\nd = [0] * n\ns = total = 0\nfor i in range(n - 1, -1, -1):\n    b[i] -= total\n    if b[i] > 0:\n        dd = min(k, i + 1)\n        d[i] = (b[i] + dd - 1) // dd\n    s += d[i] - (d[i + k] if i + k < n else 0)\n    total += d[i] * dd - s\nprint(sum(d))", "(n, k) = [int(x) for x in input().split(' ')]\nb = [int(x) for x in input().split(' ')]\nresult = 0\ncount = 0\nsumm = 0\nclosed = [0 for x in range(n)]\nfor i in range(n - 1, -1, -1):\n    summ -= count\n    count -= closed[i]\n    b[i] -= summ\n    if b[i] <= 0:\n        continue\n    el = min(i + 1, k)\n    needed = int((b[i] + el - 1) / el)\n    summ += needed * el\n    count += needed\n    result += needed\n    if i - el >= 0:\n        closed[i - el] += needed\nprint(result)", "from math import ceil\n(n, k) = [int(x) for x in input().split(' ')]\narray_b = [int(x) for x in input().split(' ')]\nsoma_acumulada = 0\nops_acumulado = 0\ntotal_ops = 0\nfim_progressao = [0] * n\nfor i in reversed(range(n)):\n    soma_acumulada -= ops_acumulado\n    ops_acumulado -= fim_progressao[i]\n    array_b[i] -= soma_acumulada\n    if array_b[i] <= 0:\n        continue\n    delta = min(k, i + 1)\n    minimo_ops_para_i = ceil(array_b[i] / delta)\n    total_ops += minimo_ops_para_i\n    soma_acumulada += delta * minimo_ops_para_i\n    ops_acumulado += minimo_ops_para_i\n    if i - delta >= 0:\n        fim_progressao[i - delta] += minimo_ops_para_i\nprint(total_ops)", "(n, k) = map(int, input().split())\nb = list(map(int, input().split()))\n(ans, sum, cnt) = (0, 0, 0)\nclosed = [0] * n\nfor i in range(n - 1, -1, -1):\n    sum -= cnt\n    b[i] -= sum\n    cnt -= closed[i]\n    if b[i] <= 0:\n        continue\n    delta = min(i + 1, k)\n    x = (b[i] + delta - 1) // delta\n    cnt += x\n    sum += x * delta\n    ans += x\n    closed[i - k] += x\nprint(ans)", "from math import ceil\n(n, k) = [int(x) for x in input().split(' ')]\narray_b = [int(x) for x in input().split(' ')]\nsoma_acumulada = 0\nops_acumulado = 0\ntotal_ops = 0\nfim_progressao = [0] * n\nfor i in reversed(range(n)):\n    soma_acumulada -= ops_acumulado\n    ops_acumulado -= fim_progressao[i]\n    array_b[i] -= soma_acumulada\n    if array_b[i] <= 0:\n        continue\n    delta = min(k, i + 1)\n    minimo_ops_para_i = ceil(array_b[i] / delta)\n    total_ops += minimo_ops_para_i\n    soma_acumulada += delta * minimo_ops_para_i\n    ops_acumulado += minimo_ops_para_i\n    if i - delta >= 0:\n        fim_progressao[i - delta] += minimo_ops_para_i\nprint(total_ops)", "if True:\n    (n, k) = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    closed = [0] * len(b)\n    sum = 0\n    cnt = 0\n    ans = 0\n    for i in range(len(b) - 1, -1, -1):\n        sum -= cnt\n        cnt -= closed[i]\n        b[i] -= sum\n        if b[i] <= 0:\n            continue\n        el = min(k, i + 1)\n        f = b[i] // el + (1 if b[i] % el != 0 else 0)\n        sum += f * el\n        cnt += f\n        ans += f\n        if i >= k:\n            closed[i - k] += f\n    print(ans)", "(n, k) = map(int, input().split())\nb = list(map(int, input().split()))\n(ans, a) = (0, 0)\nd2 = [0] * n\nd = 0\nfor i in range(n - 1, -1, -1):\n    d += d2[i]\n    a += d\n    if a >= b[i]:\n        continue\n    v = min(k, i + 1)\n    x = (b[i] - a + v - 1) // v\n    a += v * x\n    ans += x\n    if i > 0:\n        d2[i - 1] -= x\n        if i - k - 1 >= 0:\n            d2[i - 1 - k] += x\nprint(ans)"]