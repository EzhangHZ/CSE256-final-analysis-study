["import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    z = a.copy()\n    z.sort()\n    p = dict()\n    s = 0\n    for i in z:\n        if i not in p:\n            p[i] = s\n            s += 1\n    C = [0] * s\n    F = [0] * s\n    r = 0\n    for i in range(n):\n        v = a[i]\n        c = 0\n        x = p[v]\n        while x >= 0:\n            c += F[x]\n            x = (x & x + 1) - 1\n        x = p[v]\n        r += min(c - C[x], i - c)\n        C[x] += 1\n        while x < s:\n            F[x] += 1\n            x = x | x + 1\n    print(r)\nfor i in range(int(input())):\n    solve()", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    d = [int(i) for i in sys.stdin.readline().split()][:n]\n    s = sorted(d)\n    (dd, last) = ({}, 1)\n    for i in s:\n        if not i in dd:\n            dd[i] = last\n            last += 1\n    d = [dd[i] for i in d]\n    a = [0] * (n + 1)\n\n    def upd(x):\n        while x <= n:\n            a[x] += 1\n            x += x & -x\n\n    def qry(x):\n        r = 0\n        while x > 0:\n            r += a[x]\n            x -= x & -x\n        return r\n    r = 0\n    dd = [0] * (n + 1)\n    for i in range(n):\n        q = qry(d[i])\n        r += min(q - dd[d[i]], i - q)\n        dd[d[i]] += 1\n        upd(d[i])\n    sys.stdout.write('%d\\n' % r)", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque, defaultdict\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000000 + 7\nmod2 = 998244353\nfor _ in range(I()):\n    n = I()\n    a = L()\n    b = sorted(a)\n    order = {}\n    uindex = 1\n    for i in b:\n        if i not in order:\n            order[i] = uindex\n            uindex += 1\n    for i in range(n):\n        a[i] = order[a[i]]\n    fentree = [0] * (n + 1)\n\n    def smallcount(x):\n        res = 0\n        while x > 0:\n            res += fentree[x]\n            x -= x & -x\n        return res\n\n    def update(x):\n        while x <= n:\n            fentree[x] += 1\n            x += x & -x\n    ans = 0\n    covered = [0] * (n + 1)\n    for i in range(n):\n        s = smallcount(a[i])\n        ans += min(s - covered[a[i]], i - s)\n        covered[a[i]] += 1\n        update(a[i])\n    print(ans)", "import sys\nfrom bisect import bisect\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    (*a,) = map(int, input().split())\n    z = a.copy()\n    z.sort()\n    p = dict()\n    s = 0\n    for i in z:\n        if i not in p:\n            p[i] = s\n            s += 1\n    C = [0] * s\n    F = [0] * s\n    for i in z:\n        x = p[i]\n        C[x] += 1\n        while x < s:\n            F[x] += 1\n            x = x | x + 1\n    r = 0\n    for i in range(n - 1, -1, -1):\n        c = 0\n        x = p[a[i]]\n        while x >= 0:\n            c += F[x]\n            x = (x & x + 1) - 1\n        x = p[a[i]]\n        r += min(c - C[x], i + 1 - c)\n        C[x] -= 1\n        while x < s:\n            F[x] -= 1\n            x = x | x + 1\n    print(r)\nfor i in range(int(input())):\n    solve()", "import sys\nfrom bisect import bisect\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    z = a.copy()\n    z.sort()\n    p = dict()\n    s = 0\n    for i in z:\n        if i not in p:\n            p[i] = s\n            s += 1\n    C = [0] * s\n    F = [0] * s\n    for i in z:\n        x = p[i]\n        C[x] += 1\n        while x < s:\n            F[x] += 1\n            x = x | x + 1\n    r = 0\n    for i in range(n - 1, -1, -1):\n        c = 0\n        x = p[a[i]]\n        while x >= 0:\n            c += F[x]\n            x = (x & x + 1) - 1\n        x = p[a[i]]\n        r += min(c - C[x], i + 1 - c)\n        C[x] -= 1\n        while x < s:\n            F[x] -= 1\n            x = x | x + 1\n    print(r)\nfor i in range(int(input())):\n    solve()", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    z = sorted(a.copy())\n    p = dict()\n    s = 0\n    for i in z:\n        if i not in p:\n            p[i] = s\n            s += 1\n    C = [0] * s\n    F = [0] * s\n    r = 0\n    for i in range(n):\n        v = a[i]\n        c = 0\n        x = p[v]\n        while x >= 0:\n            c += F[x]\n            x = (x & x + 1) - 1\n        x = p[v]\n        r += min(c - C[x], i - c)\n        C[x] += 1\n        while x < s:\n            F[x] += 1\n            x = x | x + 1\n    print(r)", "class FenwickTree:\n\n    def __init__(self, a):\n        self.bit = [0] * len(a)\n        for (i, x) in enumerate(a):\n            if x:\n                self.add(i, x)\n\n    def query(self, i):\n        s = 0\n        bit = self.bit\n        while i >= 0:\n            s += bit[i]\n            i = (i & i + 1) - 1\n        return s\n\n    def add(self, i, delta=1):\n        n = len(self.bit)\n        bit = self.bit\n        while i < n:\n            bit[i] += delta\n            i |= i + 1\nfor _ in range(int(input())):\n    input()\n    a = list(map(int, input().split()))\n    order = {}\n    i = 0\n    for x in sorted(a):\n        if x not in order:\n            order[x] = i\n            i += 1\n    inversions = 0\n    tree = FenwickTree([0] * len(order))\n    for (i, k) in enumerate(map(order.__getitem__, a)):\n        inversions += min(tree.query(k - 1), i - tree.query(k))\n        tree.add(k)\n    print(inversions)", "import sys\nfrom bisect import bisect\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    (*a,) = map(int, input().split())\n    z = a.copy()\n    z.sort()\n    p = [0] * n\n    F = [0] * n\n    C = [0] * n\n    for i in range(n):\n        x = bisect(z, a[i]) - 1\n        p[i] = x\n        C[x] += 1\n        while x < n:\n            F[x] += 1\n            x = x | x + 1\n    r = 0\n    for i in range(n - 1, -1, -1):\n        c = 0\n        x = p[i]\n        while x >= 0:\n            c += F[x]\n            x = (x & x + 1) - 1\n        x = p[i]\n        r += min(c - C[x], i + 1 - c)\n        C[x] -= 1\n        while x < n:\n            F[x] -= 1\n            x = x | x + 1\n    print(r)\nfor i in range(int(input())):\n    solve()", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    z = a.copy()\n    z.sort()\n    p = dict()\n    s = 0\n    for i in z:\n        if i not in p:\n            p[i] = s\n            s += 1\n    C = [0] * s\n    F = [0] * s\n    r = 0\n    for i in range(n):\n        v = a[i]\n        c = 0\n        x = p[v]\n        while x >= 0:\n            c += F[x]\n            x = (x & x + 1) - 1\n        x = p[v]\n        r += min(c - C[x], i - c)\n        C[x] += 1\n        while x < s:\n            F[x] += 1\n            x = x | x + 1\n    print(r)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    z = sorted(a.copy())\n    p = dict()\n    s = 0\n    for i in z:\n        if i not in p:\n            p[i] = s\n            s += 1\n    C = [0] * s\n    F = [0] * s\n    r = 0\n    for i in range(n):\n        v = a[i]\n        c = 0\n        x = p[v]\n        while x >= 0:\n            c += F[x]\n            x = (x & x + 1) - 1\n        x = p[v]\n        r += min(c - C[x], i - c)\n        C[x] += 1\n        while x < s:\n            F[x] += 1\n            x = x | x + 1\n    print(r)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    z = sorted(a.copy())\n    p = dict()\n    s = 0\n    for i in z:\n        if i not in p:\n            p[i] = s\n            s += 1\n    C = [0] * s\n    F = [0] * s\n    r = 0\n    for i in range(n):\n        v = a[i]\n        c = 0\n        x = p[v]\n        while x >= 0:\n            c += F[x]\n            x = (x & x + 1) - 1\n        x = p[v]\n        r += min(c - C[x], i - c)\n        C[x] += 1\n        while x < s:\n            F[x] += 1\n            x = x | x + 1\n    print(r)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    z = sorted(a.copy())\n    p = dict()\n    s = 0\n    for i in z:\n        if i not in p:\n            p[i] = s\n            s += 1\n    C = [0] * s\n    F = [0] * s\n    r = 0\n    for i in range(n):\n        v = a[i]\n        c = 0\n        x = p[v]\n        while x >= 0:\n            c += F[x]\n            x = (x & x + 1) - 1\n        x = p[v]\n        r += min(c - C[x], i - c)\n        C[x] += 1\n        while x < s:\n            F[x] += 1\n            x = x | x + 1\n    print(r)"]