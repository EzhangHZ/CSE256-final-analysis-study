["import math\n\ndef ans(n):\n    k = math.floor((2 * n) ** (1 / 2))\n    if k * (k + 1) > 2 * n:\n        k -= 1\n    a = 0\n    b = 0\n    if k % 4 in (1, 2):\n        b += n - k * (k + 1) // 2\n    else:\n        a += n - k * (k + 1) // 2\n    if k % 4 == 0:\n        a += k * (k + 1) // 4\n        b += k * (k + 1) // 4\n    elif k % 4 == 1:\n        a += k\n        k -= 1\n        a += k * (k + 1) // 4\n        b += k * (k + 1) // 4\n    elif k % 4 == 2:\n        b += k\n        a += k - 1\n        k -= 2\n        a += k * (k + 1) // 4\n        b += k * (k + 1) // 4\n    else:\n        b += 2 * k - 1\n        a += k - 2\n        k -= 3\n        a += k * (k + 1) // 4\n        b += k * (k + 1) // 4\n    return (a, b)\nn_num = int(input())\nfor i in range(n_num):\n    n = int(input())\n    print(*ans(n))", "import math\n\ndef predict(n):\n    x = math.floor((math.sqrt(8 * n + 1) - 1) / 2)\n    p = x // 4\n    q = x % 4\n    alice = 0\n    bob = 0\n    if q == 0:\n        bob = 4 * p * (p - 1) + 5 * p\n        alice = n - bob\n    elif q == 1 or q == 2:\n        alice = (4 * p + 1) * (p + 1)\n        bob = n - alice\n    elif q == 3:\n        bob = (4 * p + 5) * (p + 1)\n        alice = n - bob\n    print(alice, ' ', bob)\nx = int(input())\nfor i in range(x):\n    p = int(input())\n    predict(p)", "for _ in range(int(input())):\n    N = int(input())\n    n = int((-1 + (1 + 8 * N) ** 0.5) / 2)\n    player = n >> 1 & 1 ^ n % 2\n    n -= not n & 1\n    (A, B) = ((n - 1 >> 2) + 1, n + 1 >> 2)\n    cards = [A * (4 * A - 3), B * (5 + max((B - 1) * 4, -2))]\n    cards[player] += N - int(n * (n + 1) / 2)\n    print(*cards)", "cards = [[0, 0]]\ncard = 1\nwhile cards[card - 1][0] + cards[card - 1][1] <= 1000000:\n    if card % 4 == 0 or card % 4 == 1:\n        cards += [[cards[card - 1][0] + card, cards[card - 1][1]]]\n    else:\n        cards += [[cards[card - 1][0], cards[card - 1][1] + card]]\n    card += 1\nno_of_testcases = int(input())\nfor loop in range(no_of_testcases):\n    no_of_cards = int(input())\n    x = int(-1 + (1 + 8 * no_of_cards) ** 0.5) // 2\n    (alice, bob) = (cards[x][0], cards[x][1])\n    if alice + bob != no_of_cards:\n        if x % 4 == 0 or x % 4 == 3:\n            alice += no_of_cards - alice - bob\n        else:\n            bob += no_of_cards - alice - bob\n    print(alice, bob)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    turns = (1 + math.sqrt(1 + 8 * n)) / 4\n    turns = math.ceil(turns)\n    a_turns = math.ceil(turns / 2)\n    b_turns = math.floor(turns / 2)\n    a = (1 + 1 + 8 * (a_turns - 1)) * a_turns // 2\n    b = (5 + 5 + 8 * (b_turns - 1)) * b_turns // 2\n    gap = (1 + 2 * (turns - 1)) * turns - n\n    if turns % 2 == 0:\n        b -= gap\n    else:\n        a -= gap\n    print(int(a), int(b))", "for n in [*map(int, open(0))][1:]:\n    k = 1 + int((1 + 8 * n) ** 0.5) >> 2\n    m = k // 2\n    l = k - m\n    a = [(4 * l - 3) * l, 4 * m * m + m]\n    a[k % 2] += n - 2 * k * k + k\n    print(*a)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    last = (1 + math.sqrt(1 + 8 * n)) // 4\n    last = int(last)\n    if last % 2 == 0:\n        last_sum = 1 + (last - 1) * 4\n        Sum = int(math.ceil(last / 2) / 2 * (5 + last_sum))\n        print(n - Sum, Sum)\n    else:\n        last_sum = 1 + (last - 1) * 4\n        Sum = int(math.ceil(last / 2) / 2 * (1 + last_sum))\n        print(Sum, n - Sum)", "import math\nN = 3001\n(al, bl) = ([None] * N, [None] * N)\na = b = 0\nfor i in range(1, N):\n    if i % 4 == 0 or i % 4 == 1:\n        a += i\n    elif i % 4 == 2 or i % 4 == 3:\n        b += i\n    al[i] = a\n    bl[i] = b\nfor t in range(int(input())):\n    s = int(input())\n    n = int((math.sqrt(1 + 8 * s) - 1) / 2)\n    t = n * (n + 1) // 2\n    (a, b) = (al[n], bl[n])\n    if n % 4 == 0 or n % 4 == 3:\n        a += s - t\n    elif n % 4 == 1 or n % 4 == 2:\n        b += s - t\n    print(a, b)", "import math\nfor _ in range(int(input())):\n    z = int(input())\n    x = (-1 + (1 + 8 * z) ** 0.5) / 2\n    x1 = (-1 - (1 + 8 * z) ** 0.5) / 2\n    n = math.floor(max(x1, x))\n    bob = 8 * ((n - 1) // 4 - 1) * ((n - 1) // 4) / 2 + 5 * ((n - 1) // 4)\n    nt = 'Bob'\n    if (n - 1) % 4 == 1:\n        bob += n\n        nt = 'Bob'\n    elif (n - 1) % 4 == 2:\n        bob += n - 1 + n\n        nt = 'Alice'\n    elif (n - 1) % 4 == 3:\n        bob += n + n - 3\n        nt = 'Alice'\n    alice = n * (n + 1) / 2 - bob\n    if nt == 'Alice':\n        print(int(alice + (z - n * (n + 1) / 2)), int(bob))\n    else:\n        print(int(alice), int(bob + (z - n * (n + 1) / 2)))", "import math\nfor t in range(int(input())):\n    a = int(input())\n    n = (1 + (1 + 8 * a) ** (1 / 2)) / 8\n    n = int(n)\n    alice = n * (4 * n - 3)\n    bob = n * (4 * n + 1)\n    alice = int(alice)\n    bob = int(bob)\n    remaining = a - (alice + bob)\n    if remaining > 8 * n + 1:\n        alice += 8 * n + 1\n        bob += remaining - 1 * (8 * n + 1)\n    else:\n        alice += remaining\n    print(f'{alice} {bob}')", "import math as m\nk = int(input())\nfor i in range(k):\n    n = int(input())\n    T1 = m.ceil(-1 / 2 + m.sqrt(1 / 4 + 2 * n))\n    T = T1 // 2\n    T2 = T - 1\n    T1 += T1 % 2 == 0\n    if T % 2 == 0:\n        print(T // 2 + 1 + 4 * (T * (T // 2 + 1) // 2) - (T1 ** 2 + T1) // 2 + n, T // 2 + 4 * ((1 + T2) * ((T2 - 1) // 2 + 1) // 2))\n    else:\n        print(T // 2 + 1 + 4 * (T2 * (T2 // 2 + 1) // 2), T // 2 + 1 + 4 * ((1 + T) * ((T - 1) // 2 + 1) // 2) - (T1 ** 2 + T1) // 2 + n)", "import sys\nsys.setrecursionlimit(10 ** 9)\nfor i in range(int(input())):\n    N = int(input())\n    n = int((-3 + (9 - 8 * (1 - N)) ** 0.5) / 4)\n    if n % 2 == 1:\n        k = n // 2 + 1\n        b = k * (8 * k + 2) / 2\n        a = N - b\n    else:\n        k = n // 2\n        a = k * (8 * k + 10) / 2 + 1\n        b = N - a\n    print(int(a), int(b), sep=' ')", "testlist = []\nimport math as m\nfor i in range(int(input())):\n    testlist += [int(input())]\n(alice, bob) = ([], [])\nfor i in testlist:\n    N = (1 + m.sqrt(1 + 8 * i)) / 4\n    N = m.floor(N)\n    if N % 2 == 0:\n        (Na, Nb) = (N / 2, N / 2)\n    else:\n        (Na, Nb) = ((N + 1) / 2, (N - 1) / 2)\n    (Sa, Sb) = (int(Na * (1 + (Na - 1) * 4)), int(Nb * (5 + (Nb - 1) * 4)))\n    if N % 2 == 0:\n        Sa += i - Sa - Sb\n    else:\n        Sb += i - Sa - Sb\n    alice += [Sa]\n    bob += [Sb]\nfor i in range(len(testlist)):\n    print(alice[i], ' ', bob[i])", "from math import sqrt, floor\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = floor(2 + sqrt(4 + 32 * n)) // 16\n    (a, b) = ((1 + 1 + 8 * x - 8) * x // 2, (5 + 5 + 8 * x - 8) * x // 2)\n    n -= a + b\n    while n:\n        nxt = min(n, 1 + 8 * x)\n        a += nxt\n        n -= nxt\n        if not n:\n            break\n        nxt = min(n, 5 + 8 * x)\n        b += nxt\n        n -= nxt\n        x += 1\n    print(a, b)", "for i in range(int(input())):\n    a = 0\n    b = 0\n    num = int(input())\n    if num > 0:\n        n = (1 + (1 + 8 * num) ** (1 / 2)) / 2 // 1\n        c = num - (n * n - n) / 2\n        if n % 4 == 0:\n            a = a + c\n            num = num - c\n        if n % 4 == 1:\n            a = a + n - 1 + c\n            num = num - n + 1 - c\n        if n % 4 == 2:\n            a = a + n - 1 + n - 2\n            b = b + c\n            num = num - n + 1 - c - n + 2\n        if n % 4 == 3:\n            a = a + n - 2 + n - 3\n            b = b + n - 1 + c\n            num = num - n + 1 - c - n + 2 - n + 3\n        a = a + num / 2 - 2 * (n // 4)\n        b = b + num / 2 + 2 * (n // 4)\n    print(int(a), int(b))", "for _ in range(int(input())):\n    n = int(input())\n    l = 1\n    r = 1000000.0\n    while r - l > 1:\n        mid = (r + l) // 2\n        x = mid + (mid - 1) * mid // 2 * 4\n        if x <= n:\n            l = mid\n        else:\n            r = mid\n    cnt1 = l // 2 + l % 2\n    x = l + (l - 1) * l // 2 * 4\n    y = cnt1 + (cnt1 - 1) * cnt1 // 2 * 8\n    if l % 2 == 0:\n        y += n - x\n    print(int(y), n - int(y))", "for t in range(int(input())):\n    n = int(input())\n    a = 0\n    b = 0\n    k = 1\n    while n > 0:\n        a += k\n        n -= k\n        if n <= 0:\n            a += n\n            break\n        k += 4\n        b += k\n        n -= k\n        if n <= 0:\n            b += n\n            break\n        k += 4\n    print(a, b)", "n = 1000000.0\nn_cards = [1]\ni = 2\ncumsum = 1\nwhile cumsum <= n:\n    temp = 2 * i + 1\n    n_cards.append(temp)\n    i += 2\n    cumsum += temp\nn_cards_AB = []\nc = 0\nfor i in n_cards:\n    c += i\n    n_cards_AB.append(c)\ncA = 1\ncB = 0\nc = 1\nn_cards_A = [1]\nn_cards_B = [0]\nn_cards_AB = [1]\nfor i in range(1, len(n_cards)):\n    if i % 2 == 0:\n        cA += n_cards[i]\n        n_cards_A.append(cA)\n        n_cards_B.append(cB)\n    else:\n        cB += n_cards[i]\n        n_cards_A.append(cA)\n        n_cards_B.append(cB)\n    c += n_cards[i]\n    n_cards_AB.append(c)\nfor _ in range(int(input())):\n    n = int(input())\n    cnt = 0\n    for i in range(len(n_cards_AB)):\n        if n_cards_AB[i] > n:\n            break\n        else:\n            cnt += 1\n    delta = n - n_cards_AB[cnt - 1]\n    A = n_cards_A[cnt - 1]\n    B = n_cards_B[cnt - 1]\n    if cnt % 2 == 0:\n        A += delta\n    else:\n        B += delta\n    print(A, B)", "import math\n\ndef ind_cards(cards):\n    check = (1 + math.sqrt(1 + 8 * cards)) / 4\n    check = int(check)\n    alice = 0\n    bob = 0\n    count = 0\n    for i in range(1, 4 * check - 2, 4):\n        count += 1\n        if count % 2 != 0:\n            alice += i\n        else:\n            bob += i\n    if alice + bob < cards:\n        if count % 2 == 0:\n            alice += cards - (alice + bob)\n        else:\n            bob += cards - (alice + bob)\n    return (alice, bob)\nt = int(input())\nl = []\nfor i in range(t):\n    cards = int(input())\n    (x, y) = ind_cards(cards)\n    l.append([x, y])\nfor ele in l:\n    print(ele[0], ele[1])", "def solveA1():\n    n = int(input())\n    cards = [0, 0]\n    dealAmt = 1\n    turn = 0\n    while n >= dealAmt:\n        cards[turn] += dealAmt\n        n -= dealAmt\n        dealAmt += 4\n        turn = (turn + 1) % 2\n    cards[turn] += n\n    print(*cards)\nt = int(input())\nfor tc in range(t):\n    solveA1()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    numofcards = 0\n    i = 0\n    while 1:\n        numofcards += 4 * i + 3\n        if numofcards > n:\n            numofcards -= 4 * i + 3\n            break\n        i += 1\n    a = numofcards // 2\n    b = numofcards - a\n    if i % 2 == 1:\n        b += min(n - numofcards, 2 * i + 1)\n        a = n - b\n    else:\n        a += min(n - numofcards, 2 * i + 1)\n        b = n - a\n    print(a, b)", "import math\n\ndef intlist():\n    return [int(i) for i in input().split(' ')]\n\ndef stringlist():\n    return input().split(' ')\n\ndef yes(t):\n    if t:\n        return 'YES'\n    return 'NO'\n\ndef printjoin(l, is_str=False):\n    if is_str:\n        l = [str(i) for i in l]\n    return ' '.join(l)\n\ndef power_of_two(n):\n    b = bin(n)[2:]\n    return int(b) == 10 ** (len(b) - 1)\n\ndef bit_count(n):\n    return bin(n).count('1')\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef lcm(x, y):\n    lcm = x * y // gcd(x, y)\n    return lcm\n\ndef isint(str):\n    try:\n        int(str)\n        return True\n    except ValueError:\n        return False\n\ndef solve():\n    n = int(input())\n    a = 1\n    b = 0\n    i = 2\n    nex = 'b'\n    while True:\n        if n - a - b > i:\n            b += i\n            i += 1\n        else:\n            b += n - a - b\n            break\n        if n - a - b > i:\n            b += i\n            i += 1\n        else:\n            b += n - a - b\n            break\n        if n - a - b > i:\n            a += i\n            i += 1\n        else:\n            a += n - a - b\n            break\n        if n - a - b > i:\n            a += i\n            i += 1\n        else:\n            a += n - a - b\n            break\n    return '{} {}'.format(a, b)\nt = input()\nfor tt in range(int(t)):\n    print(solve())", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = 0\n    b = 0\n    k = 1\n    while n > 0:\n        a += k\n        n -= k\n        if n <= 0:\n            a += n\n            break\n        k += 4\n        b += k\n        n -= k\n        if n <= 0:\n            b += n\n            break\n        k += 4\n    print(a, b)", "t = int(input(''))\nfor i in range(t):\n    n = int(input(''))\n    nq = (-1 + (1 + 8 * n) ** (1 / 2)) / 2\n    nq = (nq - int(nq) < 0.5 and nq != int(nq)) * (int(nq) + 1) + (nq - int(nq) >= 0.5 or nq == int(nq)) * round(nq)\n    (a, b) = (0, 0)\n    if nq % 4 < 2:\n        for j in range(nq + 1):\n            if j % 4 >= 2:\n                b += j\n        a = n - b\n    else:\n        for j in range(nq + 1):\n            if j % 4 < 2:\n                a += j\n        b = n - a\n    print(f'{int(a)} {int(b)}')", "def main():\n    t = int(input().strip())\n    for i in range(t):\n        n = int(input().strip())\n        i = 1\n        j = 0\n        x = 0\n        a = 0\n        b = 0\n        while n > 0:\n            if n >= i + j:\n                a += i + j\n                n -= i + j\n                i += 2\n                j += 2\n            else:\n                a += n\n                break\n            if n >= i + j:\n                b += i + j\n                n -= i + j\n                i += 2\n                j += 2\n            else:\n                b += n\n                break\n        print(a, b)\nmain()", "def main():\n    t = int(input().strip())\n    for i in range(t):\n        n = int(input().strip())\n        i = 1\n        j = 0\n        a = 0\n        b = 0\n        while n > 0:\n            if n >= i + j:\n                a += i + j\n                n -= i + j\n                i += 2\n                j += 2\n            else:\n                a += n\n                break\n            if n >= i + j:\n                b += i + j\n                n -= i + j\n                i += 2\n                j += 2\n            else:\n                b += n\n                break\n        print(a, b)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    (alice, bob) = (0, 0)\n    sum = 1\n    while n > 0:\n        if sum >= n:\n            alice += n\n            break\n        else:\n            alice += sum\n            n -= sum\n        sum += 4\n        if sum >= n:\n            bob += n\n            break\n        else:\n            bob += sum\n            n -= sum\n        sum += 4\n    print(alice, ' ', bob)", "for _ in range(int(input())):\n    n = int(input())\n    (alice, bob) = (0, 0)\n    sum = 1\n    while n > 0:\n        if sum >= n:\n            alice += n\n            break\n        else:\n            alice += sum\n            n -= sum\n        sum += 4\n        if sum >= n:\n            bob += n\n            break\n        else:\n            bob += sum\n            n -= sum\n        sum += 4\n    print(alice, ' ', bob)", "for _ in range(int(input())):\n    n = int(input())\n    (alice, bob) = (0, 0)\n    rang = 1\n    while n > 0:\n        if rang >= n:\n            alice += n\n            break\n        else:\n            alice += rang\n            n -= rang\n        rang += 4\n        if rang >= n:\n            bob += n\n            break\n        else:\n            bob += rang\n            n -= rang\n        rang += 4\n    print(alice, bob)", "def card(cards):\n    A = 0\n    B = 0\n    pt = 1\n    count = 0\n    while cards > 0:\n        if count % 2 == 0:\n            if pt > cards:\n                A += cards\n            else:\n                A += pt\n        elif pt > cards:\n            B += cards\n        else:\n            B += pt\n        cards -= pt\n        pt += 4\n        count += 1\n    print(A, '', B)\nn = int(input())\nl = []\nfor i in range(n):\n    a = int(input())\n    l.append(a)\nfor cards in l:\n    card(cards)", "import sys\nfrom collections import deque\nfrom datetime import date, timedelta\n\ndef II():\n    return int(input())\n\ndef MI():\n    return map(int, input().split())\n\ndef LMI():\n    return list(map(int, input().split()))\n\ndef slove():\n    n = int(input())\n    s = 0\n    (a, b) = (0, 0)\n    acc = 1\n    a += acc\n    s += acc\n    f = 0\n    while s < n:\n        if f == 0:\n            acc += 1\n            b += acc\n            s += acc\n            acc += 1\n            b += acc\n            s += acc\n            f = 1\n        else:\n            acc += 1\n            a += acc\n            s += acc\n            acc += 1\n            a += acc\n            s += acc\n            f = 0\n    if s > n:\n        t = n - s\n        if f == 0:\n            a += t\n        else:\n            b += t\n    print(a, b)\ncase = int(input())\nfor _ in range(case):\n    slove()", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    n -= 1\n    a = 1\n    b = 0\n    flag = False\n    c = 2\n    while n > 0:\n        s = c * 2 + 1\n        if flag:\n            if s <= n:\n                a += s\n                n -= s\n                c += 2\n                flag = False\n            else:\n                a += n\n                break\n        elif s <= n:\n            b += s\n            n -= s\n            c += 2\n            flag = True\n        else:\n            b += n\n            break\n    print(a, b)\n    t -= 1", "from bisect import bisect_left\nfor _ in range(int(input())):\n    n = int(input())\n    x = [i * (i + 1) / 2 for i in range(1500)]\n    w = bisect_left(x, n) - 1\n    if w % 4 == 0:\n        k = w // 4\n        ans2 = k * (4 * k + 1)\n        ans1 = n - ans2\n    elif w % 4 == 1:\n        k = w // 4 + 1\n        ans1 = k * (4 * k - 3)\n        ans2 = n - ans1\n    elif w % 4 == 2:\n        k = w // 4 + 1\n        ans1 = k * (4 * k - 3)\n        ans2 = n - ans1\n    else:\n        k = w // 4 + 1\n        ans2 = k * (4 * k + 1)\n        ans1 = n - ans2\n    print('{} {}'.format(ans1, ans2))", "for t in range(int(input())):\n    n = int(input())\n    a = 0\n    b = 0\n    k = 1\n    while n > 0:\n        a += k\n        n -= k\n        if n <= 0:\n            a += n\n            break\n        k += 4\n        b += k\n        n -= k\n        if n <= 0:\n            b += n\n            break\n        k += 4\n    print(a, b)", "for _ in range(int(input())):\n    n = int(input())\n    (alice, bob) = (0, 0)\n    rang = 1\n    while n > 0:\n        if rang >= n:\n            alice += n\n            break\n        else:\n            alice += rang\n            n -= rang\n        rang += 4\n        if rang >= n:\n            bob += n\n            break\n        else:\n            bob += rang\n            n -= rang\n        rang += 4\n    print(alice, bob)", "import sys\n\ndef solve():\n    n = int(sys.stdin.readline().strip())\n    a = 1\n    p = 0\n    f = 1\n    b = 0\n    while p < n:\n        if f & 1:\n            b += min(a, n - p)\n        p += a\n        a += 4\n        f += 1\n    print(b, n - b)\nt = int(input().strip())\nfor _ in range(t):\n    solve()", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    n = int(inp())\n    i = 1\n    c = [0, 0]\n    while i <= n:\n        c[i // 2 % 2] += i\n        n -= i\n        i += 1\n    c[i // 2 % 2] += n\n    print(c[0], c[1])\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "def ncard(n):\n    a = 0\n    b = 0\n    i = 1\n    isA = True\n    c = 1\n    while n >= i:\n        if isA:\n            a += i\n        else:\n            b += i\n        n -= i\n        i += 1\n        c += 1\n        if c == 2:\n            c = 0\n            isA = not isA\n    if n > 0:\n        if isA:\n            a += n\n        else:\n            b += n\n    print(a, b)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ncard(n)", "import sys\ninput = sys.stdin.readline\nT = int(input())\nresult = []\nfor _ in range(T):\n    d = int(input()) - 1\n    alice = 1\n    bob = 0\n    i = 5\n    player = 'b'\n    while 1:\n        if d - i > 0:\n            if player == 'b':\n                bob += i\n                player = 'a'\n            else:\n                alice += i\n                player = 'b'\n        else:\n            if player == 'b':\n                bob += d\n            else:\n                alice += d\n            break\n        d -= i\n        i += 4\n    print(alice, bob)", "def solve():\n    t = 1\n    t = int(input())\n    while t:\n        t -= 1\n        n = int(input())\n        a = 0\n        b = 0\n        inc = 0\n        aTurn = True\n        while n > 4 * inc + 1:\n            if aTurn:\n                a += 4 * inc + 1\n            else:\n                b += 4 * inc + 1\n            n -= 4 * inc + 1\n            inc += 1\n            aTurn = not aTurn\n        print(a + n, b) if aTurn else print(a, b + n)\nsolve()", "for i in range(int(input())):\n    n = int(input())\n    alice = 1\n    bob = 0\n    num = 1\n    for i in range(n):\n        if alice + bob + num + 4 >= n:\n            left = n - (alice + bob)\n            if i % 2 == 0:\n                bob += left\n            else:\n                alice += left\n            break\n        if i % 2 == 0:\n            num += 4\n            bob += num\n        else:\n            num += 4\n            alice += num\n    print(alice, bob)", "def sol():\n    n = int(input())\n    if n == 1:\n        print(1, 0)\n        return\n    a = 1\n    b = 0\n    curr = 1\n    i = 2\n    bo = True\n    while curr < n:\n        if bo:\n            if curr + 2 * i + 1 < n:\n                b += 2 * i + 1\n                curr += 2 * i + 1\n            else:\n                b += n - curr\n                curr = n\n            i += 2\n            bo = False\n        else:\n            if curr + 2 * i + 1 < n:\n                a += 2 * i + 1\n                curr += 2 * i + 1\n            else:\n                a += n - curr\n                curr = n\n            i += 2\n            bo = True\n    print(a, b)\nfor i in range(int(input())):\n    sol()", "def main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        (alice, bob) = (0, 0)\n        temp = 1\n        while temp < n:\n            if temp % 4 == 2 or temp % 4 == 3:\n                bob += temp\n            else:\n                alice += temp\n            n -= temp\n            temp += 1\n        if temp % 4 == 2 or temp % 4 == 3:\n            bob += n\n        else:\n            alice += n\n        print(alice, bob)\nmain()", "from itertools import count\n\ndef solve():\n    n = int(input())\n    cnt_a = 0\n    cnt_b = 0\n    range_a = range(1, 2 * n, 8)\n    for x in count(1, 4):\n        d = min(x, n)\n        if x in range_a:\n            cnt_a += d\n        else:\n            cnt_b += d\n        n -= d\n        if n == 0:\n            break\n    print(cnt_a, cnt_b)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "def solve() -> None:\n    n = int(input())\n    ans = [0] * 2\n    idx = 0\n    curr = 1\n    while n:\n        m = min(curr, n)\n        ans[idx] += m\n        curr += 4\n        n -= m\n        idx ^= 1\n    print(ans[0], ans[1])\nt = int(input())\nfor _ in range(t):\n    solve()", "for i in range(int(input())):\n    n = int(input())\n    a = 0\n    b = 0\n    s = (-1 + (1 + 8 * n) ** 0.5) // 2\n    for i in range(1, int(s) + 1):\n        if i // 2 % 2 == 1:\n            b += i\n        elif i // 2 % 2 == 0:\n            a += i\n    if (i + 1) // 2 % 2 == 0:\n        a += n - (s + 1) * s // 2\n    else:\n        b += n - (s + 1) * s // 2\n    print(int(a), int(b))", "t = int(input())\nfor z in range(t):\n    a = 0\n    b = 0\n    i = 1\n    n = int(input())\n    while n > 0:\n        if n > i:\n            a += i\n            n -= i\n            i += 4\n        else:\n            a += n\n            n -= n\n            break\n        if n == 0:\n            break\n        elif n > 0 and n > i:\n            b += i\n            n -= i\n            i += 4\n        elif n > 0 and n <= i:\n            b += n\n            n -= n\n            break\n    print(a, b)", "t = int(input())\nfor z in range(t):\n    a = 0\n    b = 0\n    i = 1\n    n = int(input())\n    while n > 0:\n        if n > i:\n            a += i\n            n -= i\n            i += 4\n        else:\n            a += n\n            n -= n\n            break\n        if n == 0:\n            break\n        elif n > 0 and n > i:\n            b += i\n            n -= i\n            i += 4\n        elif n > 0 and n <= i:\n            b += n\n            n -= n\n            break\n    print(a, b)", "a = int(input())\nfor i in range(a):\n    b = [0, 0]\n    c = 1\n    o = False\n    n = int(input())\n    while n > 0:\n        b[o] += c\n        n -= c\n        o = not o\n        c += 4\n    b[not o] += n\n    print(b[0], b[1])", "for t in range(int(input())):\n    n = int(input())\n    c = 1\n    alice_bob = [0, 0]\n    itr = False\n    while n > 0:\n        alice_bob[itr] += c\n        n -= c\n        itr = not itr\n        c += 4\n    alice_bob[not itr] += n\n    print(*alice_bob)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    (A, B) = (0, 0)\n    c = 1\n    curA = True\n    while True:\n        if curA:\n            A += c\n            n -= c\n            curA = False\n        else:\n            B += c\n            n -= c\n            curA = True\n        if n <= 0:\n            break\n        else:\n            c += 4\n    if curA:\n        B += n\n    else:\n        A += n\n    print(A, B)", "for t in range(int(input())):\n    n = int(input())\n    c = 1\n    alice_bob = [0, 0]\n    itr = False\n    while n > 0:\n        alice_bob[itr] += c\n        n -= c\n        itr = not itr\n        c += 4\n    alice_bob[not itr] += n\n    print(*alice_bob)", "t = int(input())\nfor i in range(t):\n    z = int(input())\n    q = 0\n    w = 0\n    counter = 1\n    while z > 0:\n        if z - counter < 0:\n            q += z\n            break\n        else:\n            q += counter\n            z -= counter\n            counter += 4\n        if z - counter < 0:\n            w += z\n            break\n        else:\n            w += counter\n            z -= counter\n            counter += 4\n    print(q, w)", "import sys\nimport math\nfrom itertools import accumulate\n\ndef read_string():\n    return sys.stdin.readline().strip()\n\ndef read_int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef read_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef solve():\n    n = int(input())\n    A = 1\n    n = n - 1\n    B = 0\n    cur = 2\n    is_a = False\n    while n >= 0:\n        if is_a:\n            A += cur\n            A += cur + 1\n            n -= cur + cur + 1\n            if n < 0:\n                A += n\n        else:\n            B += 2 * cur + 1\n            n -= 2 * cur + 1\n            if n < 0:\n                B += n\n        cur += 2\n        is_a = not is_a\n    print(A, B)\nT = int(input())\nfor _ in range(T):\n    solve()", "zzz = int(input())\nfor _ in range(zzz):\n    ty = int(input())\n    qw = 1\n    er = 0\n    ui = 1\n    ans = 0\n    while er < ty:\n        if ui & 1:\n            ans += min(qw, ty - er)\n        er += qw\n        qw += 4\n        ui = ui + 1\n    print(ans, '', end='')\n    print(ty - ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = 1\n    n -= 1\n    b = 0\n    i = 2\n    bob = True\n    while n > 0:\n        if bob:\n            bd = i + i + 1\n            if n - bd < 0:\n                b += n\n                break\n            else:\n                b += bd\n                n -= bd\n                i += 2\n                bob = False\n        else:\n            ad = i + i + 1\n            if n - ad < 0:\n                a += n\n                break\n            else:\n                a += ad\n                n -= ad\n                i += 2\n                bob = True\n    print(a, ' ', b)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    n -= 1\n    A = 1\n    B = 0\n    i = 2\n    while n != 0:\n        if 2 * i + 1 <= n:\n            B += 2 * i + 1\n            n -= 2 * i + 1\n            i += 2\n        else:\n            B += n\n            n = 0\n            break\n        if 2 * i + 1 <= n:\n            A += 2 * i + 1\n            n -= 2 * i + 1\n            i += 2\n        else:\n            A += n\n            n = 0\n            break\n    print(A, B)", "def solve(n):\n    r = [1, 0]\n    c = 1\n    step = 1\n    while c < n:\n        v = min(n - c, step * 2 + step * 2 + 1)\n        r[1] += v\n        c += v\n        v = min(n - c, (step + 1) * 2 + (step + 1) * 2 + 1)\n        r[0] += v\n        c += v\n        step += 2\n    return r\nt = int(input())\nans = []\nfor ti in range(t):\n    n = int(input())\n    ans.append(solve(n))\nfor a in ans:\n    print(' '.join((str(x) for x in a)))", "for _ in range(int(input())):\n    x = int(input())\n    (a, b) = (0, 0)\n    i = 1\n    while x:\n        d = min(x, i)\n        a += d\n        x -= d\n        i += 4\n        d = min(x, i)\n        b += d\n        x -= d\n        i += 4\n    print(a, b)", "for _ in range(int(input())):\n    n = int(input())\n    if n == 0:\n        print(0, 0)\n    a = 1\n    b = 0\n    n = n - 1\n    temp = 2\n    flag = 1\n    while n > 0:\n        if flag == 1:\n            if n >= temp * 2 + 1:\n                b += temp * 2 + 1\n                flag = 0\n                n -= temp * 2 + 1\n            else:\n                b += n\n                break\n        elif n >= temp * 2 + 1:\n            a += temp * 2 + 1\n            flag = 1\n            n -= temp * 2 + 1\n        else:\n            a += n\n            break\n        temp += 2\n    print(a, b)", "for _ in range(int(input())):\n    n = int(input())\n    cards_a = 0\n    cards_b = 0\n    for i in range(1, n + 1):\n        if n >= i:\n            if i % 4 == 1:\n                cards_a += i\n                n -= i\n            elif i % 4 == 2:\n                cards_b += i\n                n -= i\n            elif i % 4 == 3:\n                cards_b += i\n                n -= i\n            elif i % 4 == 0:\n                cards_a += i\n                n -= i\n        elif n > 0 and n < i:\n            if i % 4 == 1:\n                cards_a += n\n                n -= n\n            elif i % 4 == 2:\n                cards_b += n\n                n -= n\n            elif i % 4 == 3:\n                cards_b += n\n                n -= n\n            elif i % 4 == 0:\n                cards_a += n\n                n -= n\n        else:\n            break\n    print(cards_a, cards_b)", "def main():\n    n = int(input())\n    cards = []\n    for i in range(n):\n        cards.append(int(input()))\n    for i in cards:\n        print(cardsCount(i))\n\ndef cardsCount(cards):\n    alice = 0\n    bob = 0\n    current = 'alice'\n    counter = 1\n    length = cards\n    iteration = 1\n    while counter <= length:\n        if current == 'alice':\n            alice += counter\n        else:\n            bob += counter\n        length -= counter\n        iteration += 1\n        counter += 1\n        if iteration % 2 == 0:\n            if current == 'alice':\n                current = 'bob'\n            else:\n                current = 'alice'\n    if current == 'alice':\n        alice += length\n    else:\n        bob += length\n    return f'{alice} {bob}'\nmain()", "t = int(input())\nfor tc in range(t):\n    n = int(input())\n    a = 1\n    b = 0\n    c = 1\n    while True:\n        c += 1\n        b += c\n        if a + b == n:\n            print(a, b)\n            break\n        elif a + b > n:\n            print(a, n - a)\n            break\n        c += 1\n        b += c\n        if a + b == n:\n            print(a, b)\n            break\n        elif a + b > n:\n            print(a, n - a)\n            break\n        c += 1\n        a += c\n        if a + b == n:\n            print(a, b)\n            break\n        elif a + b > n:\n            print(n - b, b)\n            break\n        c += 1\n        a += c\n        if a + b == n:\n            print(a, b)\n            break\n        elif a + b > n:\n            print(n - b, b)\n            break", "t = int(input())\nfor t in range(t):\n    n = int(input())\n    a = 1\n    b = 0\n    temp = a\n    c = 'b'\n    if n == 2:\n        print(1, 1)\n    else:\n        for i in range(2, n, 2):\n            if temp + (i + i + 1) <= n:\n                if c == 'b':\n                    b += i + i + 1\n                    c = 'a'\n                elif c == 'a':\n                    a += i + i + 1\n                    c = 'b'\n                temp += i + i + 1\n            else:\n                if c == 'b':\n                    b += n - temp\n                elif c == 'a':\n                    a += n - temp\n                break\n        print(a, b)", "a = int(input())\nfor i in range(a):\n    num = int(input())\n    alice = 1\n    bob = 0\n    num = num - 1\n    i = 4\n    j = 2\n    while num:\n        if num > j:\n            bob = bob + j\n            num = num - j\n        else:\n            bob = bob + num\n            break\n        if num >= j + 1:\n            bob = bob + j + 1\n            num = num - j - 1\n        else:\n            bob = bob + num\n            break\n        if num >= i:\n            alice = alice + i\n            num = num - i\n        else:\n            alice = alice + num\n            break\n        if num >= i + 1:\n            alice = alice + i + 1\n            num = num - i - 1\n        else:\n            alice = alice + num\n            break\n        i = i + 4\n        j = j + 4\n    print(alice, ' ', bob)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    p = 0\n    j = 0\n    k = 0\n    a = 0\n    b = 0\n    while True:\n        if k == 0:\n            a = a + j + 1\n            j = j + 1\n        else:\n            r = j + 1 + j + 2 + a + b\n            if r > n:\n                n = n - (a + b)\n                if k % 2 == 0:\n                    a = a + n\n                else:\n                    b = b + n\n                break\n            if k % 2 == 0:\n                a = a + j + 1 + j + 2\n            else:\n                b = b + j + 1 + j + 2\n            j = j + 2\n        k = k + 1\n    print(a, b)", "for _ in range(int(input())):\n    x = int(input())\n    a = 0\n    b = 0\n    t = 1\n    while x > 0:\n        if t < x:\n            a += t\n            x -= t\n            t += 1\n        else:\n            a += x\n            break\n        if t < x:\n            b += t\n            x -= t\n            t += 1\n        else:\n            b += x\n            break\n        if t < x:\n            b += t\n            x -= t\n            t += 1\n        else:\n            b += x\n            break\n        if t < x:\n            a += t\n            x -= t\n            t += 1\n        else:\n            a += x\n            break\n    print(a, end=' ')\n    print(b)", "T = int(input())\nfor t in range(T):\n    N = int(input()) - 1\n    alice = 1\n    bob = 0\n    i = 1\n    while N > 0:\n        if i % 2 == 1:\n            cards = min(N, 4 * i + 1)\n            N -= cards\n            bob += cards\n        else:\n            cards = min(N, 4 * i + 1)\n            N -= cards\n            alice += cards\n        i += 1\n    print(alice, bob)", "for _ in [''] * int(input()):\n    n = int(input())\n    A = 0\n    B = 0\n    i = 1\n    while n > 0:\n        if i % 4 == 0 or i % 4 == 1:\n            A += i\n        else:\n            B += i\n        n -= i\n        i += 1\n    i -= 1\n    if i % 4 == 0 or i % 4 == 1:\n        A += n\n    else:\n        B += n\n    print(A, B)", "n = []\nsums = []\nfor _ in range(int(input())):\n    n.append(int(input()))\n    m = max(n)\nsums = [[1, 0]]\ni = 1\nwhile sum(sums[-1]) < m:\n    i += 1\n    if i % 4 in [2, 3]:\n        sums.append([sums[-1][0], sums[-1][1] + i])\n    else:\n        sums.append([sums[-1][0] + i, sums[-1][1]])\nfor j in n:\n    k = 0\n    while sum(sums[k]) < j:\n        k += 1\n    l = sums[k][:]\n    diff = sum(l) - j\n    if k % 4 in [1, 2]:\n        l[1] -= diff\n    else:\n        l[0] -= diff\n    print(l[0], l[1])", "t = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    n = n - 1\n    (c, c1) = (1, 0)\n    a = 1\n    while n != 0:\n        if 2 * (a + 1) + 1 <= n:\n            c1 = c1 + 2 * (a + 1) + 1\n            n = n - (2 * (a + 1) + 1)\n            a = a + 2\n        else:\n            c1 = c1 + n\n            n = 0\n            break\n        if 2 * (a + 1) + 1 <= n:\n            c = c + 2 * (a + 1) + 1\n            n = n - (2 * (a + 1) + 1)\n            a = a + 2\n        else:\n            c = c + n\n            n = 0\n            break\n    print(c, end=' ')\n    print(c1)", "t = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    alice_turn = False\n    alice = 1\n    bob = 0\n    rem = n - 1\n    for i in range(2, n + 1, 2):\n        if rem <= 0:\n            break\n        if i + i + 1 <= rem:\n            rem -= i + i + 1\n            if alice_turn:\n                alice += i + i + 1\n            else:\n                bob += i + i + 1\n        else:\n            if alice_turn:\n                alice += rem\n            else:\n                bob += rem\n            rem = 0\n        alice_turn ^= True\n    print(alice, bob)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = 0\n    b = 0\n    i = 0\n    while n > 0:\n        temp = 4 * i + 1\n        if i % 2 == 0:\n            if temp <= n:\n                a += temp\n                n -= temp\n            else:\n                a += n\n                n = 0\n        elif temp <= n:\n            b += temp\n            n -= temp\n        else:\n            b += n\n            n = 0\n        i += 1\n    print('{0} {1}'.format(a, b))", "for i in range(int(input())):\n    alice = 0\n    bob = 0\n    n = int(input())\n    i = 0\n    while n > 0:\n        if n >= 2 * i + 1:\n            alice = alice + 2 * i + 1\n            n = n - 2 * i - 1\n            i = i + 2\n            if n >= 2 * i + 1:\n                bob = bob + 2 * i + 1\n                n = n - 2 * i - 1\n                i = i + 2\n            else:\n                bob = bob + n\n                n = 0\n        else:\n            alice = alice + n\n            n = 0\n    print(alice, bob)", "import sys\nimport math\nimport bisect\nimport heapq\nimport itertools\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict, Counter, deque\nfrom bisect import bisect_left, bisect_right, insort_left, insort_right\nmod = 1000000007\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_list_strings():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef solve():\n    n = get_int()\n    alice = 1\n    bob = 0\n    current = 2\n    turn = 0\n    while alice + bob + (2 * current + 1) < n:\n        if turn % 2 == 0:\n            bob += 2 * current + 1\n        else:\n            alice += 2 * current + 1\n        current += 2\n        turn += 1\n    if turn % 2 == 0:\n        bob += n - (alice + bob)\n    else:\n        alice += n - (alice + bob)\n    return [alice, bob]\nfor _ in range(get_int()):\n    print(*solve())", "for z in range(int(input())):\n    n = int(input())\n    n -= 1\n    i = 2\n    a = 1\n    b = 0\n    while n != 0:\n        if i % 4 == 0:\n            if n >= 2 * i + 1:\n                a += 2 * i + 1\n                n -= 2 * i + 1\n            else:\n                a += n\n                n -= n\n        elif n >= 2 * i + 1:\n            b += 2 * i + 1\n            n -= 2 * i + 1\n        else:\n            b += n\n            n -= n\n        i += 2\n    print(a, end=' ')\n    print(b)", "def main():\n    t = int(input())\n    for i in range(t):\n        num = int(input())\n        num = num - 1\n        (H, B, count, c) = (1, 0, 0, 2)\n        flag = -1\n        while num != 0:\n            for i in range(2):\n                if num < c:\n                    B = B + num\n                    flag = 0\n                    break\n                else:\n                    B = B + c\n                    num = num - c\n                    c = c + 1\n            if flag == 0:\n                break\n            for i in range(2):\n                if num < c:\n                    H = H + num\n                    flag = 0\n                    break\n                else:\n                    H = H + c\n                    num = num - c\n                    c = c + 1\n            if flag == 0:\n                break\n        print(H, end=' ')\n        print(B)\n    return 0\nmain()", "import collections\nimport math\nimport heapq\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 0:\n        print(0, 0)\n        continue\n    (a, b) = (1, 0)\n    cards = 2\n    x = n - 1\n    c = 0\n    giveA = False\n    while True:\n        curr = cards + cards + 1\n        if x - curr <= 0:\n            if giveA:\n                a += x\n            else:\n                b += x\n            break\n        x -= curr\n        if giveA:\n            a += curr\n        else:\n            b += curr\n        cards += 2\n        giveA = not giveA\n    print(a, b)", "t = input()\nfor i in range(int(t)):\n    n = int(input())\n    a = 1\n    b = 0\n    bt = 0\n    at = 1\n    n -= 1\n    while True:\n        b = a + 1\n        if n < b:\n            bt += n\n            break\n        n -= b\n        bt += b\n        b = b + 1\n        if n < b:\n            bt += n\n            break\n        n -= b\n        bt += b\n        a = b + 1\n        if n < a:\n            at += n\n            break\n        n -= a\n        at += a\n        a = a + 1\n        if n < a:\n            at += n\n            break\n        n -= a\n        at += a\n    print(str(at) + ' ' + str(bt))", "for _ in range(int(input())):\n    n = int(input()) - 1\n    alice = 1\n    bob = 0\n    x = 2\n    flag = True\n    flag2 = 'bob'\n    while flag:\n        if x * 2 + 1 > n:\n            if flag2 == 'bob':\n                bob += n\n            elif flag2 == 'alice':\n                alice += n\n            flag = False\n            print(alice, bob)\n            break\n        bob += x * 2 + 1\n        n -= x * 2 + 1\n        x += 2\n        flag2 = 'alice'\n        if x * 2 + 1 > n:\n            if flag2 == 'bob':\n                bob += n\n            elif flag2 == 'alice':\n                alice += n\n            flag = False\n            print(alice, bob)\n            break\n        alice += x * 2 + 1\n        n -= x * 2 + 1\n        x += 2\n        flag2 = 'bob'", "for _ in range(int(input())):\n    n = int(input())\n    a = 1\n    b = 0\n    n -= 1\n    t = 1\n    c = 2\n    while n > 0:\n        if t % 2:\n            if n > 2 * c + 1:\n                b += 2 * c + 1\n            else:\n                b += n\n        elif n > 2 * c + 1:\n            a += 2 * c + 1\n        else:\n            a += n\n        n -= 2 * c + 1\n        c += 2\n        t += 1\n    print(a, b)", "for i in range(int(input())):\n    n = int(input())\n    x = 1\n    y = 0\n    flag = 0\n    count = 0\n    for i in range(2, n + 1):\n        if x + y + i > n:\n            break\n        if flag == 1:\n            count -= 1\n            x += i\n            if count == 0:\n                flag = 0\n                continue\n        else:\n            count += 1\n            y += i\n            if count == 2:\n                flag = 1\n    if flag == 1:\n        x += n - abs(x + y)\n    else:\n        y += n - abs(x + y)\n    print(x, y)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    (soc, A, B, i) = (n - 1, 1, 0, 1)\n    while soc > 0:\n        if i % 2 == 1:\n            CB = 0\n            if soc - (1 + i * 4) >= 0:\n                CB += 1 + i * 4\n            else:\n                CB += soc\n            soc -= CB\n            B += CB\n        else:\n            CA = 0\n            if soc - (1 + i * 4) >= 0:\n                CA += 1 + i * 4\n            else:\n                CA += soc\n            soc -= CA\n            A += CA\n        i += 1\n    print(A, B)", "t = int(input())\nfor i in range(t):\n    n = int(input()) - 1\n    alice = 1\n    bob = 0\n    s = 0\n    j = 1\n    while n > 0:\n        if s == 0:\n            if n > 4 * j + 1:\n                bob += 4 * j + 1\n                n -= 4 * j + 1\n                j += 1\n                s = 1\n            else:\n                bob += n\n                n = 0\n        elif n > 4 * j + 1:\n            alice += 4 * j + 1\n            n -= 4 * j + 1\n            j += 1\n            s = 0\n        else:\n            alice += n\n            n = 0\n    print(str(alice) + ' ' + str(bob))", "def solve():\n    a = int(input())\n    obsumma = 0\n    massive = [1]\n    massive1 = []\n    a = a - 1\n    while a != 0:\n        if obsumma % 2 == 0:\n            summa = massive[-1] + 1 + (massive[-1] + 2)\n            if a - summa > 0:\n                a = a - summa\n                massive1.append(massive[-1] + 1)\n                massive1.append(massive[-1] + 2)\n            else:\n                massive1.append(a)\n                a = a - a\n        elif obsumma % 2 != 0:\n            summa = massive1[-1] + 1 + (massive1[-1] + 2)\n            if a - summa > 0:\n                a = a - summa\n                massive.append(massive1[-1] + 1)\n                massive.append(massive1[-1] + 2)\n            else:\n                massive.append(a)\n                a = a - a\n        obsumma += 1\n    print(sum(massive), sum(massive1))\na = int(input())\nfor i in range(a):\n    solve()", "import sys\n\ndef read(func=int):\n    return func(sys.stdin.readline().strip())\n\ndef read_array(func=int):\n    return list(map(func, read(str).split()))\nt = read()\nfor _ in range(t):\n    n = read()\n    (a, b) = (0, 0)\n    inA = False\n    a += min(1, n)\n    n -= a\n    cnt = 2\n    while n:\n        ad = min(cnt * 2 + 1, n)\n        if not inA:\n            b += ad\n            n -= ad\n        else:\n            a += ad\n            n -= ad\n        inA = not inA\n        cnt += 2\n    print(a, b)", "for _ in range(int(input())):\n    n = int(input())\n    (a, b) = (0, 0)\n    cards = 1\n    while n >= 0:\n        a += cards\n        n -= cards\n        cards += 1\n        if n <= 0:\n            a += n\n            break\n        b += cards\n        n -= cards\n        cards += 1\n        if n <= 0:\n            b += n\n            break\n        b += cards\n        n -= cards\n        cards += 1\n        if n <= 0:\n            b += n\n            break\n        a += cards\n        n -= cards\n        cards += 1\n        if n <= 0:\n            a += n\n            break\n    print(a, b)", "n = int(input())\nfor i in range(n):\n    a = int(input())\n    if a == 0:\n        print(0, 0)\n    else:\n        (first, second) = (1, 0)\n        a -= 1\n        c = False\n        n = 1\n        while a > 0:\n            n += 4\n            if c == False:\n                second += min(n, a)\n                c = True\n            else:\n                first += min(n, a)\n                c = False\n            a -= n\n        print(first, second)", "t = int(input())\nfor i in range(t):\n    Alisa = 0\n    Bob = 0\n    n = int(input())\n    a = 3\n    f = True\n    while n >= a:\n        if f:\n            Alisa += a // 2\n            Bob += a // 2 + 1\n        else:\n            Alisa += a // 2 + 1\n            Bob += a // 2\n        n -= a\n        a += 4\n        f = not f\n    k = min(n, a // 2)\n    if f:\n        Alisa += k\n        Bob += n - k\n    else:\n        Alisa += n - k\n        Bob += k\n    print(Alisa, Bob, sep=' ')", "ttt = int(input())\nwhile ttt > 0:\n    ttt -= 1\n    n = int(input())\n    a = 1\n    n -= 1\n    b = 0\n    i = 2\n    j = 0\n    while n > 0:\n        k = 2 * i + 1\n        if k <= n:\n            if j % 2 == 0:\n                b = b + k\n            else:\n                a = a + k\n            n = n - k\n        else:\n            if j % 2 == 0:\n                b = b + n\n            else:\n                a = a + n\n            n = 0\n        i = i + 2\n        j += 1\n    print(a, b)", "for i in range(int(input())):\n    giv = int(input())\n    sum = 0\n    (a, b) = (0, 0)\n    j = 0\n    while giv > sum:\n        j = j + 1\n        if j > giv - sum:\n            j = giv - sum\n        a = a + j\n        sum = sum + j\n        if giv > sum:\n            j = j + 1\n            if j > giv - sum:\n                j = giv - sum\n            b = b + j\n            sum = sum + j\n        if giv > sum:\n            j = j + 1\n            if j > giv - sum:\n                j = giv - sum\n            b = b + j\n            sum = sum + j\n        if giv > sum:\n            j = j + 1\n            if j > giv - sum:\n                j = giv - sum\n            a = a + j\n            sum = sum + j\n    print(a, b)", "n = int(input())\nfor _ in range(n):\n    m = int(input())\n    a = 1\n    b = 0\n    s = 2\n    m = m - 1\n    u = 0\n    while m > 0:\n        if u % 2 == 0:\n            if m >= 2 * s + 1:\n                b += 2 * s + 1\n                m = m - 2 * s - 1\n                s = s + 2\n            else:\n                b += m\n                m = 0\n        elif m >= 2 * s + 1:\n            a += 2 * s + 1\n            m = m - 2 * s - 1\n            s = s + 2\n        else:\n            a += m\n            m = 0\n        u = u + 1\n    print(a, b)", "t = int(input())\nres = []\nfor i in range(t):\n    n = int(input())\n    kola = 0\n    kolb = 0\n    j = 1\n    while j < n:\n        if j % 4 == 2 or j % 4 == 3:\n            kolb += j\n        else:\n            kola += j\n        n -= j\n        j += 1\n    if j % 4 == 2 or j % 4 == 3:\n        kolb += n\n    else:\n        kola += n\n    res.append((kola, kolb))\nfor i in res:\n    print(*i)", "n = int(input())\nfor i in range(n):\n    m = int(input())\n    alis = 1\n    bob = 0\n    m -= 1\n    r = 0\n    pos = 2\n    while m > 0:\n        if r % 2 == 1:\n            if pos * 2 + 1 <= m:\n                alis += pos * 2 + 1\n                m -= pos * 2 + 1\n            else:\n                alis += m\n                m = 0\n        elif pos * 2 + 1 <= m:\n            bob += pos * 2 + 1\n            m -= pos * 2 + 1\n        else:\n            bob += m\n            m = 0\n        pos += 2\n        r += 1\n    print(alis, bob)", "test = int(input())\nwhile test:\n    cards = int(input())\n    i = 3\n    a = 1\n    cards -= 1\n    b = 0\n    j = 0\n    while cards > 0:\n        if j:\n            res = i - 1 + i\n            if cards - res > 0:\n                a += res\n            else:\n                a += cards\n            cards -= res\n            i += 2\n        else:\n            res = i - 1 + i\n            if cards - res > 0:\n                b += res\n            else:\n                b += cards\n            i += 2\n            cards -= res\n        j = 1 - j\n    print(a, b)\n    test -= 1", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = 0\n    b = 0\n    j = 1\n    i = 1\n    while n > 0:\n        if i % 2 != 0:\n            if n >= j:\n                a = a + j\n                n = n - j\n                j = j + 1\n            else:\n                a = a + n\n                break\n            if n > 0 and n >= j:\n                b = b + j\n                n = n - j\n                j = j + 1\n            else:\n                b = b + n\n                break\n        else:\n            if n >= j:\n                b = b + j\n                n = n - j\n                j = j + 1\n            else:\n                b = b + n\n                break\n            if n > 0 and n >= j:\n                a = a + j\n                n = n - j\n                j = j + 1\n            else:\n                a = a + n\n                break\n        i = i + 1\n    print(a, b)\n    t = t - 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    sa = 0\n    sb = 0\n    j = 1\n    while sa + sb + j <= n:\n        if j % 4 == 0 or j % 4 == 1:\n            sa = sa + j\n        else:\n            sb = sb + j\n        j = j + 1\n    if j % 4 == 0 or j % 4 == 1:\n        sa = n - sb\n    else:\n        sb = n - sa\n    print(sa, sb)", "def cards(total):\n    cards_remaining = total\n    alice = 0\n    bob = 0\n    times = 0\n    for i in range(total):\n        if cards_remaining == 0:\n            break\n        cards_to_give = i + 1\n        if cards_to_give > cards_remaining:\n            cards_to_give = cards_remaining\n        cards_remaining -= cards_to_give\n        if times == 0:\n            alice += cards_to_give\n            times += 1\n        elif times <= 2:\n            bob += cards_to_give\n            times += 1\n        elif times <= 4:\n            alice += cards_to_give\n            times += 1\n            if times == 5:\n                times = 1\n    return (alice, bob)\nfor i in range(int(input())):\n    (alice, bob) = cards(int(input()))\n    print(alice, bob)", "for t in range(int(input())):\n    num = int(input())\n    (i, A, B) = (1, 0, 0)\n    while A + B != num:\n        value = 4 * i - 3\n        if value <= num - (A + B):\n            value = value\n        else:\n            value = num - (A + B)\n        if i % 2:\n            B += value\n        else:\n            A += value\n        i += 1\n    print(B, A)", "for _ in range(int(input())):\n    n = int(input())\n    summ = i = index = 1\n    receiver = [1, 0]\n    while summ < n:\n        addition = 2 * i + 3\n        if summ + addition <= n:\n            receiver[index] += addition\n            index = abs(index - 1)\n            summ += addition\n            i += 2\n        else:\n            receiver[index] += n - summ\n            break\n    print(*receiver)"]