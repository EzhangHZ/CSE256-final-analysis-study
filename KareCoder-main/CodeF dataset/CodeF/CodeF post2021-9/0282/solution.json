["def main():\n    import sys\n    input = sys.stdin.readline\n    for i in range(int(input())):\n        n = int(input())\n        s = input()\n        pary = set()\n        result = False\n        poprzednia = ''\n        for j in range(n - 1):\n            para = s[j:j + 2]\n            if para in pary:\n                result = True\n                break\n            pary.add(poprzednia)\n            poprzednia = para\n        sys.stdout.write('YES\\n' if result == True else 'NO\\n')\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef print_str_line(str):\n    sys.stdout.write(str + '\\n')\n\ndef print_number(number):\n    print_str_line(f'{number}')\n\ndef ans(string, number_of_operations):\n    set_pair = set()\n    tmp_pair = string[0:2]\n    for i in range(1, len(string) - 1):\n        curr_pair = string[i:i + 2]\n        if string[i:i + 2] in set_pair:\n            return True\n        set_pair.add(tmp_pair)\n        tmp_pair = curr_pair\n    return False\nnumber_of_inputs = int(input())\nfor i in range(number_of_inputs):\n    number_of_operations = int(input())\n    string_to_type = input()\n    _ans = ans(string_to_type, number_of_operations)\n    if _ans:\n        print('YES')\n    else:\n        print('NO')", "def solve(s, n):\n    my_set = {}\n    for i in range(n - 1):\n        substr = s[i:i + 2]\n        if substr in my_set and i - my_set[substr] > 1:\n            return 'YES'\n        elif substr not in my_set:\n            my_set[substr] = i\n    return 'NO'\n\ndef main():\n    t = int(input())\n    while t > 0:\n        n = int(input())\n        s = input()\n        print(solve(s, n))\n        t -= 1\nmain()", "import math\nfrom collections import *\n\ndef solve():\n    n = int(input())\n    a = input()\n    d = defaultdict(int)\n    for i in range(0, n - 1):\n        s = ''\n        s += a[i]\n        s += a[i + 1]\n        if s in d and d[s] != i - 1:\n            print('YES')\n            return\n        elif s not in d:\n            d[s] = i\n    print('NO')\nt = int(input())\nfor _ in range(t):\n    solve()", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    s = input()\n    flag = True\n    book = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in book:\n            if book[t] < i - 1:\n                print('YES')\n                flag = False\n                break\n        else:\n            book[t] = i\n    if flag:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "AmZx = int(input())\nAcbUyhBttt = 0\nfor j in range(AmZx):\n    AmZx1 = int(input())\n    AmZx2 = input()\n    cur = {}\n    for i in range(AmZx1 - 1):\n        AmZx = AmZx2[i:i + 2]\n        if AmZx in cur:\n            if cur[AmZx] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[AmZx] = i\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "def solution():\n    n = int(input())\n    s = input()\n    if n <= 3:\n        print('NO')\n        return\n    d = {s[0:2]}\n    for i in range(2, n - 1):\n        if s[i:i + 2] in d:\n            print('YES')\n            return\n        d.add(s[i - 1:i + 1])\n    print('NO')\n\ndef main():\n    t = int(input())\n    while t:\n        solution()\n        t -= 1\nmain()", "t = int(input())\n\ndef solve(n, string):\n    s = {}\n    for i in range(0, len(string) - 1):\n        sub = string[i:i + 2]\n        if sub in s and s[sub] <= i - 2:\n            return 'YES'\n        if sub not in s:\n            s[sub] = i\n    return 'NO'\nfor i in range(t):\n    n = int(input())\n    string = input()\n    print(solve(n, string))", "def codeforces():\n    san = int(input())\n    for i in range(san):\n        n = int(input())\n        a = input()\n        d = {}\n        c = 0\n        for i in range(n - 1):\n            if a[i] + a[i + 1] not in d:\n                d[a[i] + a[i + 1]] = i + 1\n            elif d[a[i] + a[i + 1]] != i:\n                c = 1\n                break\n        if c == 1:\n            print('YES')\n        else:\n            print('NO')\ncodeforces()", "def solve(n, s):\n    sef = set()\n    for i in range(1, len(s) - 2):\n        sef.add(s[i - 1] + s[i])\n        if s[i + 1] + s[i + 2] in sef:\n            print('YES')\n            return\n    print('NO')\nno_prb = int(input())\nprb = []\nfor i in range(no_prb):\n    prb.append((int(input()), input()))\nfor each in prb:\n    solve(each[0], each[1])", "def func(size: int, s: str):\n    d = {}\n    for i in range(0, size - 1):\n        if s[i:i + 2] not in d:\n            d[s[i:i + 2]] = i\n        elif i == d[s[i:i + 2]] + 1:\n            continue\n        else:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    if func(n, s):\n        print('YES')\n    else:\n        print('NO')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    mp = {}\n    ans = 'NO'\n    for i in range(len(s) - 1):\n        x = s[i]\n        x += s[i + 1]\n        if x not in mp:\n            mp[x] = i\n        elif mp[x] != i - 1:\n            ans = 'YES'\n            break\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    st = input()\n    d = {}\n    for j in range(n - 1):\n        temp = st[j:j + 2]\n        if temp not in d:\n            d[temp] = j\n        elif d[temp] < j - 1:\n            print('YES')\n            break\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "tc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    s = input()\n    tr = {}\n    c = n - 1\n    for i in range(c):\n        j = s[i:i + 2]\n        if j in tr:\n            if tr[j] < i - 1:\n                print('YES')\n                break\n        else:\n            tr[j] = i\n    else:\n        print('NO')", "AmZx = int(input())\nAcbUyhBttt = 0\nfor j in range(AmZx):\n    AmZx1 = int(input())\n    AmZx2 = input()\n    curent = {}\n    for j in range(AmZx1 - 1):\n        AmZx = AmZx2[j:j + 2]\n        if AmZx in curent:\n            if curent[AmZx] < j - 1:\n                print('YES')\n                break\n        else:\n            curent[AmZx] = j\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "def solve():\n    l = int(input())\n    s = input()\n    for i in range(1, len(s)):\n        if s[i - 1] + s[i] in s[i + 1:]:\n            print('YES')\n            return\n    else:\n        print('NO')\n        return\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "import os\nimport math\nimport collections\nimport bisect\nimport functools\nimport itertools\nimport string\n\ndef solve(s, n):\n    d = {}\n    for i in range(n - 1):\n        sub = s[i] + s[i + 1]\n        if sub in d:\n            if i - d[sub] > 1:\n                return True\n        else:\n            d[sub] = i\n    return False\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    ok = solve(s, n)\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\n\ndef sol(n, s):\n    st = set()\n    for i in range(1, n - 1):\n        if s[i:i + 2] in st:\n            return 'YES'\n        st.add(s[i - 1:i + 1])\n    return 'NO'\nt = int(input())\nfor case in range(t):\n    n = int(input())\n    s = input()\n    print(sol(n, s))", "t = int(input())\nfor i in range(t):\n    x = int(input())\n    s = input()\n    if x > len(s):\n        print('YES')\n    else:\n        temp = ''\n        z = ''\n        key = 0\n        ans = len(s)\n        for y in s:\n            if z + y in temp:\n                ans -= 1\n                z += y\n            else:\n                temp += z\n                z = y\n            if ans < x:\n                key = 1\n                break\n        if key == 1:\n            print('YES')\n        else:\n            print('NO')", "check = {}\n\ndef tinh(st):\n    for i in range(0, n - 1):\n        if st[i:i + 2] in check:\n            if check[st[i:i + 2]] + 1 < i:\n                return 'YES'\n        else:\n            check[st[i:i + 2]] = i\n    return 'NO'\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    st = input()\n    print(tinh(st))\n    check.clear()", "t = int(input())\ncheck = {}\n\ndef tinh(s):\n    for i in range(0, n - 1):\n        if s[i:i + 2] in check:\n            if check[s[i:i + 2]] + 1 < i:\n                return 'YES'\n        else:\n            check[s[i:i + 2]] = i\n    return 'NO'\nfor i in range(t):\n    n = int(input())\n    s = input()\n    print(tinh(s))\n    check.clear()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    d = {}\n    found = False\n    a = s[0:2]\n    d[a] = 1\n    prev = a\n    prevtoprev = '12'\n    for i in range(1, n - 1):\n        prev = a\n        a = s[i:i + 2]\n        if prevtoprev == a:\n            found = True\n            break\n        elif prev == a:\n            prevtoprev = a\n            continue\n        if a not in d:\n            d[a] = 1\n        else:\n            found = True\n            break\n    if found:\n        print('YES')\n    else:\n        print('NO')", "def solve():\n    n = int(input())\n    s = input()\n    dt = {}\n    for i in range(1, len(s)):\n        ch = s[i - 1] + s[i]\n        if ch in dt:\n            print('YES')\n            return\n        if i - 2 >= 0:\n            c = s[i - 2] + s[i - 1]\n            dt[c] = 1\n    print('NO')\ntest = int(input())\nfor i in range(test):\n    solve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    seen = set()\n    ans = False\n    prev = ''\n    for i in range(1, n):\n        characters = s[i - 1:i + 1]\n        if characters in seen:\n            ans = True\n            break\n        seen.add(prev)\n        prev = characters\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    s = input()\n    curr = dict()\n    flag = False\n    for i in range(n):\n        temp = s[i:i + 2]\n        if temp in curr:\n            if curr[temp] < i - 1:\n                flag = True\n                break\n        else:\n            curr[temp] = i\n    if flag:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "def helper(word):\n    store = set()\n    prev = ''\n    for i in range(1, len(word)):\n        cur = word[i - 1] + word[i]\n        if cur in store:\n            return 'YES'\n        store.add(prev)\n        prev = cur\n    return 'NO'\nlength = int(input())\nfor _ in range(length):\n    n = int(input())\n    word = input()\n    print(helper(word))", "def solution():\n    n = int(input())\n    s = input()\n    if n <= 3:\n        print('NO')\n        return\n    mySet = {s[0:1]}\n    for i in range(3, n + 1):\n        if s[i - 2:i] in mySet:\n            print('YES')\n            return\n        mySet.add(s[i - 3:i - 1])\n    print('NO')\nt = int(input())\nfor i in range(t):\n    solution()", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    curr = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in curr:\n            if curr[t] < i - 1:\n                print('YES')\n                break\n        else:\n            curr[t] = i\n    else:\n        print('NO')", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "from collections import defaultdict, Counter\nfrom os import path\nimport sys\nfrom collections import defaultdict\nimport math\n\ndef int_inp():\n    return int(input())\n\ndef mul_inp():\n    return map(int, input().split())\n\ndef arr_inp():\n    return list(map(int, input().split()))\n\ndef is_prime(n):\n    prime_flag = 0\n    if n > 1:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                prime_flag = 1\n                break\n        if prime_flag == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n\ndef factors(x):\n    result = []\n    i = 1\n    while i * i <= x:\n        if x % i == 0:\n            result.append(i)\n            if x // i != i:\n                result.append(x // i)\n        i += 1\n    return result\n\ndef prime_factors(x):\n    result = []\n    i = 1\n    while i * i <= x:\n        if x % i == 0:\n            result.append(i)\n        i += 1\n    return result\n\ndef solution():\n    n = int_inp()\n    s = input()\n    if n == 1:\n        print('NO')\n        return\n    for i in range(n - 2):\n        if s[i:i + 2] in s[i + 2:]:\n            print('YES')\n            return\n    print('NO')\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nfor _ in range(int_inp()):\n    x = solution()", "import math\nt = int(input())\nfor j in range(t):\n    n = int(input())\n    s = input()\n    m = False\n    if len(s) > 3:\n        for i in range(n - 1):\n            if s[i:i + 2] in s[i + 2:]:\n                m = True\n                break\n        if m:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    s = input()\n    if len(s) <= 3:\n        print('NO')\n    else:\n        see = set()\n        init = s[0] + s[1]\n        see.add(init)\n        pre = s[1] + s[2]\n        sign = 0\n        for i in range(2, len(s) - 1):\n            temp = s[i] + s[i + 1]\n            if temp in see:\n                sign = 1\n                break\n            see.add(pre)\n            pre = temp\n        if sign:\n            print('YES')\n        else:\n            print('NO')\n    t -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    d = {}\n    ans = 'NO'\n    for i in range(1, len(s) - 2):\n        pair = (s[i - 1], s[i])\n        d[pair] = 1\n        if (s[i + 1], s[i + 2]) in d:\n            ans = 'YES'\n            break\n    print(ans)", "def is_less_than_n_operations(s):\n    for i in range(len(s) - 1):\n        if s[i:i + 2] in s[i + 2:]:\n            return 'YES'\n    return 'NO'\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    print(is_less_than_n_operations(s))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    d = {}\n    i = 0\n    while i < n - 1:\n        temp = s[i] + s[i + 1]\n        if temp in d:\n            if d[temp] != i:\n                print('YES')\n                break\n        else:\n            d[temp] = i + 1\n        i += 1\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    dic = {}\n    ans = 'NO'\n    for i in range(n - 1):\n        s1 = s[i] + s[i + 1]\n        if s1 in dic:\n            if i - dic[s1] >= 2:\n                ans = 'YES'\n                break\n        else:\n            dic[s1] = i\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "def sol():\n    n = int(input())\n    s = input()\n    for i in range(2, n - 1):\n        if s[i:i + 2] in s[:i]:\n            print('YES')\n            return\n    print('NO')\n    return\nfor i in range(int(input())):\n    sol()", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cur = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        if t in cur:\n            if cur[t] < i - 1:\n                print('YES')\n                break\n        else:\n            cur[t] = i\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    if n <= 3:\n        print('NO')\n        continue\n    stop = 0\n    for i in range(n - 2):\n        if s[i:i + 2] in s[i + 2:]:\n            stop = 1\n            break\n    if stop == 0:\n        print('NO')\n    else:\n        print('YES')", "import sys\nimport re\nimport math\nfrom math import log2\nfrom math import log\nfrom math import ceil\nfrom math import gcd\nfrom decimal import *\nfrom collections import deque\nimport random\nimport heapq\nimport itertools\nimport datetime\nconst = 1000000007\nep = 1e-08\n\ndef get():\n    return list(map(int, input().split()))\nn = int(input())\nfor i in range(n):\n    m = int(input())\n    line = input()\n    d = {}\n    found = False\n    for i in range(m - 1):\n        temp = line[i:i + 2]\n        if temp in d:\n            if d[temp] != i - 1:\n                found = True\n                break\n        if temp not in d:\n            d[temp] = i\n    if found:\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    res = False\n    pos = {}\n    for i in range(n - 1):\n        if s[i:i + 2] not in pos:\n            pos[s[i:i + 2]] = i + 1\n        elif pos[s[i:i + 2]] < i:\n            res = True\n            break\n    print('YES' if res else 'NO')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    di = {}\n    f = 0\n    for i in range(1, n):\n        s1 = s[i - 1] + s[i]\n        if s1 in di and di[s1] != i - 1:\n            f = 1\n            break\n        elif s1 not in di:\n            di[s1] = i\n    if f == 0:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    mp = dict()\n    ans = 'NO'\n    for i in range(1, n):\n        pp = s[i - 1:i + 1]\n        if pp in mp and mp[pp] != i - 1:\n            ans = 'YES'\n            break\n        elif pp not in mp:\n            mp[pp] = i\n    print(ans)", "from collections import deque\nimport sys\ninput = sys.stdin.readline\nK = int(input())\nfor _ in range(K):\n    n = int(input())\n    queue = deque()\n    word = input().rstrip()\n    if len(word) <= 3:\n        print('NO')\n        continue\n    a = 0\n    for i in range(len(word) - 2):\n        if word[i:i + 2] in word[i + 2:]:\n            a = 1\n            break\n    if a == 1:\n        print('YES')\n    else:\n        print('NO')", "def op_string(s, n):\n    ans = 'NO'\n    if n > 3:\n        for i in range(n - 2):\n            subs = s[i:i + 2]\n            if s.find(subs, i + 2) != -1:\n                ans = 'YES'\n                break\n    return ans\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    s = input()\n    print(op_string(s, n))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    pairs = set()\n    dop = ''\n    for i in range(n - 1):\n        ch = s[i] + s[i + 1]\n        if ch in pairs:\n            print('YES')\n            break\n        else:\n            pairs.add(dop)\n            dop = ch\n    else:\n        print('NO')", "import sys\n\ndef in_int():\n    return int(sys.stdin.readline())\n\ndef in_str():\n    return sys.stdin.readline().rstrip()\n\ndef in_map_int():\n    return map(int, sys.stdin.readline().split())\n\ndef in_arr_int():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef in_arr_str():\n    return sys.stdin.readline().split()\n\ndef is_prime(n):\n    for i in range(2, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            return True\n    return False\n\ndef solve(n, s):\n    i = 0\n    c = ''\n    while i + 1 < n:\n        if s[i:i + 2] in c:\n            return 'YES'\n        else:\n            c += s[i]\n        i += 1\n    return 'NO'\n\ndef main():\n    t = in_int()\n    for _ in range(t):\n        n = in_int()\n        s = in_str()\n        print(solve(n, s))\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    flag = 1\n    for i in range(0, n - 1):\n        if s[i:i + 2] in s[0:i]:\n            print('YES')\n            flag = 0\n            break\n    if flag == 1:\n        print('NO')", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    if n == 1:\n        print('NO')\n    else:\n        flag = 0\n        for i in range(n - 2, -1, -1):\n            a = s[i:i + 2]\n            if a in s[:i]:\n                if i - s.index(a) >= 2:\n                    flag = 1\n                    break\n        if flag == 1:\n            print('YES')\n        else:\n            print('NO')", "for i in range(int(input())):\n    n = int(input())\n    x = input()\n    c = 'NO'\n    for j in range(n - 1):\n        if x[j] + x[j + 1] in x[j + 2:]:\n            c = 'YES'\n            break\n    print(c)", "def sol(n, s):\n    if len(set(s)) == n:\n        return 'NO'\n    for i in range(n - 1):\n        if s[i] + s[i + 1] in s[i + 2:]:\n            return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    print(sol(n, s))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    count = 0\n    if n <= 3:\n        print('NO')\n        count = 2\n    else:\n        a = set()\n        a.add(s[:2])\n        for j in range(2, n - 1):\n            if s[j:j + 2] in a:\n                print('YES')\n                count = 1\n                break\n            else:\n                a.add(s[j - 1:j + 1])\n    if count == 0:\n        print('NO')", "def verdict(n, s):\n    for i in range(n - 1):\n        if s[i:i + 2] in s[:i]:\n            return 'YES'\n    return 'NO'\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    print(verdict(n, s))", "for tests in range(int(input())):\n    n = int(input())\n    s = input()\n    d = {}\n    for i in range(n - 1):\n        t = s[i:i + 2]\n        try:\n            d[t]\n            if d[t] < i - 1:\n                print('YES')\n                break\n        except:\n            d[t] = i\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    st = set()\n    fg = 0\n    for j in range(n - 1):\n        if s[j:j + 2] in st:\n            fg = 1\n            break\n        if j > 0:\n            st.add(s[j - 1:j + 1])\n    if fg:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if n == 1:\n        print('NO')\n    else:\n        flag = 0\n        for i in range(n - 1):\n            if s[i:i + 2] in s[:i]:\n                print('YES')\n                flag = 1\n                break\n        if flag == 0:\n            print('NO')", "t = int(input())\nresult = []\nfor i in range(t):\n    n = int(input())\n    s = input()\n    if n < 3:\n        result.append('NO')\n    else:\n        temp = 'NO'\n        for j in range(0, n - 1):\n            if s[j:j + 2] in s[j + 2:]:\n                temp = 'YES'\n                break\n        result.append(temp)\nprint(*result, sep='\\n')", "input_count = int(input())\noutput = ''\nfor _ in range(input_count):\n    len_word = int(input())\n    word = input()[0:len_word]\n    eq = False\n    for i in range(len(word) - 3):\n        if word[i:i + 2] in word[i + 2:]:\n            eq = True\n            break\n    output += 'YES\\n' if eq else 'NO\\n'\nprint(output[:-1])", "def find_duplicate(word, n):\n    h = dict()\n    i = 0\n    while i < n:\n        if word[i:i + 2] not in h.keys():\n            h[word[i:i + 2]] = [1, i]\n        elif i - h[word[i:i + 2]][1] >= 2:\n            return 'YES'\n        i += 1\n    return 'NO'\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        word = input()\n        print(find_duplicate(word, n))\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    hm = {}\n    for i in range(len(s) - 1):\n        if s[i:i + 2] in hm:\n            if hm[s[i:i + 2]] < i - 1:\n                print('YES')\n                break\n        else:\n            hm[s[i:i + 2]] = i\n    else:\n        print('NO')", "def solve(n, r):\n    for i in range(n - 1):\n        cur = r[i] + r[i + 1]\n        oth = r.find(cur)\n        if oth != i:\n            if oth != i - 1:\n                return 'YES'\n    return 'NO'\nn = int(input())\nfor i in range(n):\n    print(solve(int(input()), input()))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    b = False\n    if n == 1 or n == 2 or n == 3:\n        print('NO')\n        continue\n    for i in range(n - 3):\n        if s[i:i + 2] in s[i + 2:]:\n            b = True\n            break\n    if b:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    flag = False\n    d = {}\n    for j in range(len(s)):\n        if s[j:j + 2] in d:\n            if d[s[j:j + 2]][1] != j:\n                flag = True\n                break\n        else:\n            d[s[j:j + 2]] = (j, j + 1)\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    d = {}\n    b = 0\n    for i in range(n - 1):\n        s1 = s[i] + s[i + 1]\n        if d.get(s1) != None:\n            if d[s1] != i - 1:\n                b = 1\n                break\n        else:\n            d[s1] = i\n    if b == 1:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nimport math\nfor ii in range(t):\n    n = int(input())\n    dd = {}\n    s = input()\n    kk = False\n    i = 0\n    while i < n - 1:\n        gg = s[i] + s[i + 1]\n        if gg in dd and dd[gg] != i - 1:\n            kk = True\n            break\n        if gg not in dd:\n            dd[gg] = i\n        i += 1\n    if kk:\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\n\ndef solve(n, s):\n    d = defaultdict(lambda : -1)\n    for i in range(n - 1):\n        if d[s[i:i + 2]] != -1:\n            if d[s[i:i + 2]] < i - 1:\n                return 'YES'\n        else:\n            d[s[i:i + 2]] = i\n    return 'NO'\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    print(solve(n, s))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    f = set()\n    check = False\n    for i in range(n - 1):\n        if s[i] + s[i + 1] in f:\n            check = True\n            break\n        if i != 0:\n            f.add(s[i - 1] + s[i])\n    if check:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = 'NO'\n    for i in range(2, n - 1):\n        if s[i:i + 2] in s[0:i]:\n            ans = 'YES'\n            break\n    print(ans)", "testcase_no = int(input())\nfor _ in range(testcase_no):\n    flag = False\n    length = int(input())\n    word = input()\n    list_of_substrings = dict()\n    for i in range(length - 1):\n        segment = word[i:i + 2]\n        if segment in list_of_substrings.keys():\n            if i - 1 != list_of_substrings[segment]:\n                print('YES')\n                flag = True\n                break\n        else:\n            list_of_substrings[word[i:i + 2]] = i\n    if not flag:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    d = {}\n    flag = 0\n    for i in range(n - 1):\n        p = s[i:i + 2]\n        r = str(i + 1)\n        if p not in d:\n            d[p] = r\n        elif d[p] != str(i):\n            flag = 1\n            break\n    if flag == 0:\n        print('NO')\n    else:\n        print('YES')"]