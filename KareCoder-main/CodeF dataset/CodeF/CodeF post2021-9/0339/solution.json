["for t in range(int(input())):\n    n = int(input())\n    li = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        li.append([l, l - r, r])\n    li.sort()\n    for i in range(0, n - 1):\n        if li[i][0] == li[i + 1][0]:\n            print(li[i][0], li[i][2], li[i + 1][2] + 1)\n        else:\n            print(li[i][0], li[i][2], li[i][0])\n    print(li[n - 1][0], li[n - 1][2], li[n - 1][0])", "for _ in range(int(input())):\n    n = int(input())\n    lst = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        lst.append([l, r, r - l])\n    lst = sorted(lst, key=lambda x: (x[1], x[2]), reverse=True)\n    for j in range(n):\n        if lst[j][1] == lst[j][0]:\n            lst[j][2] = lst[j][1]\n        elif lst[j][1] == lst[j + 1][1]:\n            lst[j][2] = lst[j + 1][0] - 1\n        else:\n            lst[j][2] = lst[j][1]\n    for k in range(n):\n        print(lst[k][0], lst[k][1], lst[k][2])\n    print('')", "for iii in range(int(input())):\n    n = int(input())\n    q = []\n    q1 = {}\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        q.append([x, y])\n        q1[x, y] = 1\n    for (l, r) in q:\n        if l == r:\n            print(l, r, r)\n        elif (l + 1, r) in q1:\n            print(l, r, l)\n        elif (l, r - 1) in q1:\n            print(l, r, r)\n        else:\n            for i in range(l + 1, r):\n                if (l, i - 1) in q1 and (i + 1, r) in q1:\n                    print(l, r, i)\n                    break", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    dict1 = {}\n    for i in range(0, n):\n        inputs = [int(num) for num in input().split()]\n        l = inputs[0]\n        r = inputs[1]\n        if l not in dict1:\n            dict1[l] = []\n        dict1[l].append(r)\n    for key in dict1:\n        dict1[key].sort()\n        for i in range(len(dict1[key]) - 1, 0, -1):\n            print(f'{key} {dict1[key][i]} {dict1[key][i - 1] + 1}')\n        print(f'{key} {dict1[key][0]} {key}')\n    print('')", "def solve():\n    n = int(input())\n    lis = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        lis.append((l, r))\n    lis.sort(key=lambda x: x[1] - x[0])\n    number = set()\n    for (x, y) in lis:\n        for num in range(x, y + 1):\n            if num not in number:\n                number.add(num)\n                break\n        print(x, y, num)\n    print()\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    li = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        li.append([abs(a - b), a, b])\n    li.sort()\n    d = dict()\n    for i in range(1, n + 1):\n        d[i] = 0\n    ansli = []\n    for i in range(n):\n        if d[li[i][2]] == 0:\n            d[li[i][2]] = 1\n            ansli.append([li[i][1], li[i][2], li[i][2]])\n        elif d[li[i][1]] == 0:\n            d[li[i][1]] = 1\n            ansli.append([li[i][1], li[i][2], li[i][1]])\n        else:\n            st = li[i][1]\n            end = li[i][2] + 1\n            for j in range(st, end):\n                if d[j] == 0:\n                    d[j] = 1\n                    ansli.append([li[i][1], li[i][2], j])\n    for i in range(n):\n        print(*ansli[i])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    range_arr = []\n    for theta in range(n):\n        (l, r) = map(int, input().split(' '))\n        range_arr.append((l, r))\n    range_arr.sort()\n    final_arr = []\n    counter = 0\n    while counter < n:\n        temp = range_arr[counter][0]\n        final_arr.append(str(range_arr[counter][0]) + ' ' + str(range_arr[counter][1]) + ' ' + str(range_arr[counter][0]))\n        counter += 1\n        while counter < n and range_arr[counter][0] == temp:\n            final_arr.append(str(range_arr[counter][0]) + ' ' + str(range_arr[counter][1]) + ' ' + str(range_arr[counter - 1][1] + 1))\n            counter += 1\n    for delta in range(n):\n        print(final_arr[delta])", "from itertools import permutations\nfrom math import ceil, e, log2, floor, sqrt, gcd\nfrom collections import defaultdict, deque\nfrom itertools import permutations\nimport sys\nimport os.path\nsys.setrecursionlimit(200000)\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r+')\n    sys.stdout = open('output.txt', 'w')\n\ndef MI():\n    return map(int, input().split())\n\ndef solve(testcase):\n    n = int(input())\n    l = []\n    for i in range(n):\n        (a, b) = MI()\n        l.append((a, b))\n    d = defaultdict(list)\n    for i in range(n - 1, -1, -1):\n        d[l[i][0]].append(l[i][1])\n    ans = []\n    for i in d:\n        x = sorted(d[i], reverse=True)\n        for j in range(len(x) - 1):\n            ans.append([i, x[j], x[j + 1] + 1])\n        ans.append([i, x[-1], i])\n    for i in ans:\n        print(*i)\n    print()\nt = int(input())\nfor _ in range(t):\n    solve(_ + 1)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n    a.sort(key=lambda x: x[1] - x[0])\n    nums = set(range(1, n + 1))\n    for (l, r) in a:\n        dset = nums & set(range(l, r + 1))\n        d = dset.pop()\n        nums.remove(d)\n        print(l, r, d)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    vals = {}\n    ranges = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        if vals.get(l) == None:\n            vals[l] = {'r': [r], 'l': []}\n        else:\n            vals[l]['r'].append(r)\n        if vals.get(r) == None:\n            vals[r] = {'r': [], 'l': [l]}\n        else:\n            vals[r]['l'].append(l)\n        ranges.append([l, r])\n    for v in vals:\n        vals[v]['r'].sort()\n        vals[v]['l'].sort()\n    for i in ranges:\n        if i[0] == i[1]:\n            i.append(i[1])\n        else:\n            jr = bisect.bisect_left(vals[i[0]]['r'], i[1])\n            jl = bisect.bisect_left(vals[i[1]]['l'], i[0])\n            if jl == len(vals[i[1]]['l']) - 1:\n                i.append(i[1])\n            elif jr == 0:\n                i.append(i[0])\n            else:\n                i.append(vals[i[0]]['r'][jr - 1] + 1)\n    for i in ranges:\n        print(*i)\n    print()", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        a.append([y - x, x, y])\n    a.sort(reverse=True)\n    ds = defaultdict(list)\n    de = defaultdict(list)\n    truth = [False] * n\n    (dist, x, y) = a.pop(0)\n    q = [[x, y]]\n    for i in a:\n        ds[i[1]].append(i[2])\n        de[i[2]].append(i[1])\n    for i in range(n):\n        (x, y) = q.pop(0)\n        if ds[x] == [] and de[y] == []:\n            print(x, y, x)\n        elif ds[x] == []:\n            print(x, y, x)\n            q.append([de[y][0], y])\n            m = de[y].pop(0)\n            ds[m].pop(0)\n        elif de[y] == []:\n            print(x, y, y)\n            q.append([x, ds[x][0]])\n            m = ds[x].pop(0)\n            de[m].pop(0)\n        else:\n            q.append([x, ds[x][0]])\n            q.append([de[y][0], y])\n            print(x, y, (ds[x][0] + de[y][0]) // 2)\n            m1 = ds[x].pop(0)\n            de[m1].pop(0)\n            m2 = de[y].pop(0)\n            ds[m2].pop(0)", "test = int(input())\nfor t in range(test):\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, input().strip().split())))\n    arr.sort(key=lambda x: (x[0], -x[1]))\n    for i in range(n):\n        (curr0, curr1) = (arr[i][0], arr[i][1])\n        print(curr0, curr1, end=' ')\n        if curr0 == curr1:\n            print(curr0)\n        elif arr[i + 1][0] > curr0:\n            print(curr0)\n        else:\n            print(arr[i + 1][1] + 1)", "for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(tuple(map(int, input().split())))\n    arr.sort(key=lambda s: (s[0], -s[1]))\n    res = []\n    left = {}\n    right = {}\n    for i in range(n - 1, -1, -1):\n        (l, r) = arr[i]\n        if l == r:\n            res.append((l, r, l))\n        elif l in left:\n            res.append((l, r, left[l] + 1))\n        elif r in right:\n            res.append((l, r, right[r] - 1))\n        left[l] = r\n        right[r] = l\n    for i in range(n):\n        print(res[i][0], res[i][1], res[i][2])", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    pairs = []\n    for i in range(n):\n        pairs.append([int(x) for x in input().split()])\n    pairs_dict = dict()\n    pairs_diff = []\n    for i in pairs:\n        pairs_diff.append([i[0], -(i[1] - i[0]), i[1]])\n    pairs_diff.sort()\n    for i in range(len(pairs_diff) - 1):\n        if pairs_diff[i][0] == pairs_diff[i + 1][0]:\n            pairs_dict[pairs_diff[i][0], pairs_diff[i][-1]] = pairs_diff[i + 1][-1] + 1\n        elif pairs_diff[i][0] == pairs_diff[i][-1]:\n            pairs_dict[pairs_diff[i][0], pairs_diff[i][-1]] = pairs_diff[i][-1]\n        else:\n            pairs_dict[pairs_diff[i][0], pairs_diff[i][-1]] = pairs_diff[i + 1][0] - 1\n    pairs_dict[pairs_diff[-1][0], pairs_diff[-1][-1]] = pairs_diff[-1][-1]\n    for i in pairs:\n        print(i[0], i[1], pairs_dict[tuple(i)])", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n    a.sort(key=lambda x: x[1] - x[0])\n    nums = set(range(1, n + 1))\n    for (l, r) in a:\n        dset = nums & set(range(l, r + 1))\n        d = dset.pop()\n        nums.remove(d)\n        print(l, r, d)", "for _ in range(int(input())):\n    n = int(input())\n    vals = {}\n    ranges = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        if vals.get(l) == None:\n            vals[l] = {'r': [r], 'l': []}\n        else:\n            vals[l]['r'].append(r)\n        if vals.get(r) == None:\n            vals[r] = {'r': [], 'l': [l]}\n        else:\n            vals[r]['l'].append(l)\n        ranges.append([l, r])\n    for v in vals:\n        vals[v]['r'].sort()\n        vals[v]['l'].sort()\n    for i in ranges:\n        if i[0] == i[1]:\n            i.append(i[1])\n        else:\n            jr = vals[i[0]]['r'].index(i[1])\n            jl = vals[i[1]]['l'].index(i[0])\n            if jl == len(vals[i[1]]['l']) - 1:\n                i.append(i[1])\n            elif jr == 0:\n                i.append(i[0])\n            else:\n                i.append(vals[i[0]]['r'][jr - 1] + 1)\n    for i in ranges:\n        print(*i)\n    print()", "for t in range(int(input())):\n    n = int(input())\n    A = [[int(i) for i in input().split()] for j in range(n)]\n    d = dict()\n    for i in range(n):\n        if A[i][0] == A[i][1]:\n            d[A[i][0], A[i][1]] = A[i][0]\n        else:\n            d[A[i][0], A[i][1]] = 0\n    for i in range(n):\n        if A[i][0] != A[i][1]:\n            if (A[i][0] + 1, A[i][1]) in d:\n                d[A[i][0], A[i][1]] = A[i][0]\n            elif (A[i][0], A[i][1] - 1) in d:\n                d[A[i][0], A[i][1]] = A[i][1]\n            else:\n                for j in range(A[i][0], A[i][1] - 1):\n                    if (A[i][0], j) in d and (j + 2, A[i][1]) in d:\n                        d[A[i][0], A[i][1]] = j + 1\n                        break\n    for i in range(n):\n        print(A[i][0], A[i][1], d[A[i][0], A[i][1]])", "for _ in range(int(input())):\n    n = int(input())\n    tmp = [True for i in range(n + 1)]\n    lis = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        lis.append((r - l, l, r))\n    lis.sort()\n    ans = []\n    for triplet in lis:\n        if tmp[triplet[1]]:\n            ans.append((triplet[1], triplet[2], triplet[1]))\n            tmp[triplet[1]] = False\n        elif tmp[triplet[2]]:\n            ans.append((triplet[1], triplet[2], triplet[2]))\n            tmp[triplet[2]] = False\n        else:\n            for z in range(triplet[1], triplet[2] + 1):\n                if tmp[z]:\n                    ans.append((triplet[1], triplet[2], z))\n                    tmp[z] = False\n                    break\n    for jawaban in ans:\n        print(f'{jawaban[0]} {jawaban[1]} {jawaban[2]}')", "import sys\nfrom math import sqrt, gcd\nfrom collections import deque\nsys.setrecursionlimit(10 ** 8)\nI = lambda : int(input())\nS = lambda : input().strip()\nM = lambda : map(int, input().strip().split())\nL = lambda : list(map(int, input().strip().split()))\nmod = 1000000007\nfor _ in range(I()):\n    n = I()\n    d = {}\n    li = []\n    for i in range(n):\n        (a, b) = M()\n        d[a, b] = 1\n        li.append([a, b])\n    for (l, r) in li:\n        if l == r:\n            print(l, l, l)\n            continue\n        if (l + 1, r) in d:\n            print(l, r, l)\n            continue\n        if (l, r - 1) in d:\n            print(l, r, r)\n            continue\n        for j in range(l + 1, r):\n            if (l, j - 1) in d and (j + 1, r) in d:\n                print(l, r, j)\n                break", "for _ in range(int(input())):\n    n = int(input())\n    d = {}\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        d[l, r] = 1\n    ans = []\n    for i in d.keys():\n        (l, r) = (i[0], i[1])\n        if l == r:\n            ans.append([l, r, l])\n        elif (l + 1, r) in d.keys():\n            ans.append([l, r, l])\n        elif (l, r - 1) in d.keys():\n            ans.append([l, r, r])\n        else:\n            for find in range(l + 1, r):\n                if (l, find - 1) in d.keys() and (find + 1, r) in d.keys():\n                    ans.append([l, r, find])\n                    break\n    for i in ans:\n        print(*i)", "def interval(d, h):\n    if d == h:\n        vysledek = d\n    elif not intervaly[d]:\n        vysledek = d\n        intervaly[d + 1].remove(h - d - 1)\n        zasobnik.append((d + 1, h))\n    elif h - d - 1 in intervaly[d]:\n        vysledek = intervaly[d].pop(0) + d + 1\n        zasobnik.append((d, h - 1))\n    else:\n        vysledek = intervaly[d].pop(0) + d + 1\n        intervaly[vysledek + 1].remove(h - vysledek - 1)\n        zasobnik.append((d, vysledek - 1))\n        zasobnik.append((vysledek + 1, h))\n    return vysledek\npoctest = int(input())\nfor i in range(poctest):\n    intervaly = dict()\n    n = int(input())\n    for j in range(n):\n        (l, r) = map(int, input().split())\n        if l in intervaly:\n            intervaly[l].append(r - l)\n        else:\n            intervaly[l] = [r - l]\n    for k in intervaly.keys():\n        intervaly[k].sort(reverse=True)\n    zasobnik = [(1, n)]\n    intervaly[1].remove(n - 1)\n    while zasobnik:\n        (left, right) = zasobnik.pop()\n        result = interval(left, right)\n        print(left, right, result)\n    print()", "def Game_On_Ranges(a, n):\n    s = set()\n    for i in range(n):\n        d = a[i][0]\n        l = a[i][1]\n        r = a[i][2]\n        if d == 0:\n            a[i].append(l)\n            s.add(l)\n        else:\n            cand = -1\n            for x in range(l, r + 1):\n                if x not in s:\n                    a[i].append(x)\n                    s.add(x)\n                    break\n    for i in range(n):\n        print('{} {} {}'.format(a[i][1], a[i][2], a[i][3]))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    alice = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        alice.append([r - l, l, r])\n    alice.sort(key=lambda x: x[0])\n    Game_On_Ranges(alice, n)", "import heapq\n\ndef problem2(arr):\n    ans = []\n    visited = set()\n    heap = []\n    for (left, right) in arr:\n        heapq.heappush(heap, (right - left + 1, left, right))\n    while heap:\n        (n, left, right) = heapq.heappop(heap)\n        for num in range(left, right + 1):\n            if num in visited:\n                continue\n            visited.add(num)\n            ans.append((left, right, num))\n            print(left, right, num)\n            break\nfor _ in range(int(input())):\n    n = int(input())\n    ranges = []\n    for _ in range(n):\n        ranges.append([int(num) for num in input().split(' ')])\n    problem2(ranges)", "def solve():\n    n = int(input())\n    arr = []\n    simple_range = {}\n    for _ in range(n):\n        (l, r) = map(int, input().split())\n        arr.append([abs(l - r), l, r])\n    arr.sort(reverse=True)\n    if n == 1:\n        print(arr[0][1], arr[0][1], arr[0][1])\n        return\n    (left_occur, right_occur) = ({}, {})\n    for (diff, l, r) in arr:\n        if l == r:\n            if left_occur.get(l) is not None:\n                left_occur[l].append(l)\n            else:\n                right_occur[l].append(l)\n            continue\n        if left_occur.get(l) is None:\n            left_occur[l] = []\n        else:\n            left_occur[l].append(r)\n        if right_occur.get(r) is None:\n            right_occur[r] = []\n        else:\n            right_occur[r].append(l)\n    for (diff, l, r) in arr:\n        if l == r:\n            print(l, l, l)\n            continue\n        if len(left_occur[l]):\n            x = left_occur[l].pop(0)\n        else:\n            x = None\n        if len(right_occur[r]):\n            y = right_occur[r].pop(0)\n        else:\n            y = None\n        if x and y:\n            print(l, r, (x + y) // 2)\n        elif x is None:\n            print(l, r, l)\n        else:\n            print(l, r, r)\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lis = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        lis.append((l, r))\n    lis.sort(key=lambda x: x[1] - x[0])\n    number = set()\n    for (x, y) in lis:\n        for num in range(x, y + 1):\n            if num not in number:\n                number.add(num)\n                break\n        print(x, y, num)\n    print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lis = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        lis.append((l, r))\n    lis.sort(key=lambda x: x[1] - x[0])\n    number = set()\n    for (x, y) in lis:\n        for num in range(x, y + 1):\n            if num not in number:\n                number.add(num)\n                break\n        print(x, y, num)\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    q = []\n    for i in range(n):\n        q.append(list(map(int, input().split())))\n    q.sort(key=lambda diff: abs(diff[0] - diff[1]))\n    check = [0] * (n + 1)\n    ans = []\n    for ele in q:\n        for i in range(ele[0], ele[1] + 1):\n            if check[i] == 0:\n                check[i] = 1\n                ans.append([ele[0], ele[1], i])\n                break\n    for ele in ans:\n        print(*ele)", "ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    ranges = []\n    res = []\n    for _ in range(n):\n        ranges.append(list(map(int, input().split())))\n    ranges.sort(key=lambda x: abs(x[1] - x[0]))\n    peristed = set()\n    for (l, r) in ranges:\n        for chosen in range(l, r + 1):\n            if chosen not in peristed:\n                res.append([l, r, chosen])\n                peristed.add(chosen)\n                break\n    ans.append(res)\nfor a in ans:\n    for an in a:\n        print(*an)\n    print()", "case = int(input())\nfor i in range(case):\n    S = []\n    n = int(input())\n    for j in range(n):\n        (a, b) = (int(v) for v in input().split())\n        S.append([a, b])\n        S.sort()\n    for k in range(len(S)):\n        if S[k][0] == S[k][1]:\n            print(str(S[k][0]) + ' ' + str(S[k][1]) + ' ' + str(S[k][0]))\n        elif k == 0:\n            print(str(S[k][0]) + ' ' + str(S[k][1]) + ' ' + str(S[k][0]))\n        elif S[k][0] == S[k - 1][0]:\n            print(str(S[k][0]) + ' ' + str(S[k][1]) + ' ' + str(S[k - 1][1] + 1))\n        else:\n            print(str(S[k][0]) + ' ' + str(S[k][1]) + ' ' + str(S[k][0]))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = []\n    for j in range(n):\n        a = list(map(int, input().split()))\n        l.append(a)\n        l.sort()\n    b1 = []\n    b2 = []\n    for j in l:\n        b1.append(j[0])\n        b2.append(j[1])\n    for k in range(n):\n        if b1[k] == b2[k]:\n            l[k].append(b1[k])\n        else:\n            x = b2[k]\n            b2[k] = -b2[k]\n            if x in b2:\n                l[k].append(b1[b2.index(x)] - 1)\n            else:\n                l[k].append(x)\n    for j in l:\n        print(*j)", "for _ in range(int(input())):\n    n = int(input())\n    ranges = []\n    for _ in range(n):\n        (l, r) = map(int, input().split(' '))\n        ranges.append((r - l + 1, [l, r]))\n    ranges = sorted(ranges)\n    hashes = {}\n    for i in range(n):\n        hashes[i + 1] = 'not gone'\n    answers = []\n    for range_ in ranges:\n        length = range_[0]\n        if length == 1:\n            answers.append((range_[1][0], range_[1][1], range_[1][1]))\n            hashes[range_[1][1]] = 'gone'\n        else:\n            (l, r) = range_[1]\n            for j in range(l, r + 1, 1):\n                if hashes[j] != 'gone':\n                    answers.append((range_[1][0], range_[1][1], j))\n                    hashes[j] = 'gone'\n                    break\n    assert len(answers) == n\n    for ans in answers:\n        print(ans[0], ans[1], ans[2])", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n    a.sort(key=lambda x: x[1] - x[0])\n    nums = set(range(1, n + 1))\n    for (l, r) in a:\n        dset = nums & set(range(l, r + 1))\n        d = dset.pop()\n        nums.remove(d)\n        print(l, r, d)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n    a.sort(key=lambda x: x[1] - x[0])\n    nums = set(range(1, n + 1))\n    for (l, r) in a:\n        dset = nums & set(range(l, r + 1))\n        d = dset.pop()\n        nums.remove(d)\n        print(l, r, d)", "from itertools import permutations as per\nfrom math import factorial as fact\nfrom difflib import SequenceMatcher\nfrom collections import deque\nimport bisect\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nt = int(input())\n\ndef fun(x, y):\n    return 0\nfor _ in range(t):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append([int(i) for i in input().split()])\n    a.sort(key=lambda x: x[1], reverse=True)\n    a.sort(key=lambda x: x[0])\n    for i in range(n):\n        if a[i][0] == a[i][1]:\n            print(*a[i], a[i][0])\n        elif a[i][0] != a[i + 1][0]:\n            print(*a[i], a[i][0])\n        else:\n            print(*a[i], a[i + 1][1] + 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lis = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        lis.append((l, r))\n    lis.sort(key=lambda x: x[1] - x[0])\n    number = set()\n    for (x, y) in lis:\n        for num in range(x, y + 1):\n            if num not in number:\n                number.add(num)\n                break\n        print(x, y, num)\n    print()", "from typing import DefaultDict\nimport collections\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    d = defaultdict(lambda : False)\n    a = []\n    for i in range(n):\n        tmp = tuple([int(x) for x in input().split()])\n        a.append(tmp)\n        d[tmp] = True\n    for (l, r) in a:\n        if l == r:\n            print(l, r, l)\n            continue\n        if d[l + 1, r]:\n            print(l, r, l)\n            continue\n        if d[l, r - 1]:\n            print(l, r, r)\n            continue\n        for i in range(l + 1, r):\n            if d[l, i - 1] and d[i + 1, r]:\n                print(l, r, i)\n                break", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lis = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        lis.append((l, r))\n    lis.sort(key=lambda x: x[1] - x[0])\n    number = set()\n    for (x, y) in lis:\n        for num in range(x, y + 1):\n            if num not in number:\n                number.add(num)\n                break\n        print(x, y, num)\n    print()", "cases = int(input())\nfor i in range(cases):\n    rows = int(input())\n    full = []\n    for x in range(rows):\n        (l, r) = map(int, input().split())\n        full.append((l, r))\n    full.sort(key=lambda x: x[1] - x[0])\n    number = set()\n    for (a, b) in full:\n        for num in range(a, b + 1):\n            if num not in number:\n                number.add(num)\n                break\n        print(a, b, num)\n    print()", "problem_num = int(input())\nfor _ in range(problem_num):\n    n = int(input())\n    lst = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        lst.append((l, r))\n    lst.sort(key=lambda x: x[1] - x[0])\n    numb = set()\n    for (x, y) in lst:\n        for num in range(x, y + 1):\n            if num not in numb:\n                print(x, y, num)\n                numb.add(num)\n                break", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lis = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        lis.append((l, r))\n    lis.sort(key=lambda x: x[1] - x[0])\n    number = set()\n    for (x, y) in lis:\n        for num in range(x, y + 1):\n            if num not in number:\n                number.add(num)\n                break\n        print(x, y, num)\n    print()", "from sys import stdin\n\ndef solve():\n    for _ in range(int(stdin.readline().strip())):\n        n = int(stdin.readline().rstrip())\n        ranges = []\n        for i in range(n):\n            (l, r) = map(int, stdin.readline().rstrip().split())\n            ranges.append((r - l, l, r))\n        ranges.sort()\n        prev = set()\n        results = []\n        for (_, l, r) in ranges:\n            if l == r:\n                results.append(str(l) + ' ' + str(l) + ' ' + str(l))\n                prev.add(l)\n            else:\n                tmp = set(range(l, r + 1)) - prev\n                x = tmp.pop()\n                results.append(str(l) + ' ' + str(r) + ' ' + str(x))\n                prev.add(x)\n        print('\\n'.join(results))\nsolve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lis = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        lis.append((l, r))\n    lis.sort(key=lambda x: x[1] - x[0])\n    number = set()\n    for (x, y) in lis:\n        for num in range(x, y + 1):\n            if num not in number:\n                number.add(num)\n                break\n        print(x, y, num)\n    print()", "t = int(input())\nfor t1 in range(t):\n    n = int(input())\n    data = []\n    for n1 in range(n):\n        (l, r) = map(int, input().split())\n        data.append([l, r, r - l])\n    data = sorted(data, key=lambda x: x[2])\n    remember = dict()\n    answer = []\n    for r in data:\n        for i in range(r[0], r[1] + 1):\n            if not i in remember:\n                answer.append([r[0], r[1], i])\n                remember[i] = True\n    for r in answer:\n        print(' '.join((str(x) for x in r)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lis = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        lis.append((l, r))\n    lis.sort(key=lambda x: x[1] - x[0])\n    number = set()\n    for (x, y) in lis:\n        for num in range(x, y + 1):\n            if num not in number:\n                number.add(num)\n                break\n        print(x, y, num)\n    print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lis = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        lis.append((l, r))\n    lis.sort(key=lambda x: x[1] - x[0])\n    number = set()\n    for (x, y) in lis:\n        for num in range(x, y + 1):\n            if num not in number:\n                number.add(num)\n                break\n        print(x, y, num)\n    print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lis = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        lis.append((l, r))\n    lis.sort(key=lambda x: x[1] - x[0])\n    number = set()\n    for (x, y) in lis:\n        for num in range(x, y + 1):\n            if num not in number:\n                number.add(num)\n                break\n        print(x, y, num)\n    print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lis = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        lis.append((l, r))\n    lis.sort(key=lambda x: x[1] - x[0])\n    number = set()\n    for (x, y) in lis:\n        for num in range(x, y + 1):\n            if num not in number:\n                number.add(num)\n                break\n        print(x, y, num)\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    r = []\n    for i in range(n):\n        r.append(list(map(int, input().split())))\n    r.sort(key=lambda x: x[1] - x[0])\n    s = set()\n    for i in r:\n        for j in range(i[0], i[1] + 1):\n            if j not in s:\n                s.add(j)\n                break\n        print(i[0], i[1], j)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lis = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        lis.append((l, r))\n    lis.sort(key=lambda x: x[1] - x[0])\n    number = set()\n    for (x, y) in lis:\n        for num in range(x, y + 1):\n            if num not in number:\n                number.add(num)\n                break\n        print(x, y, num)\n    print()", "for t in range(int(input())):\n    n = int(input())\n    num_list = []\n    for i in range(n):\n        r = tuple(map(int, input().split()))\n        num_list.append(r)\n    num_list.sort(key=lambda x: (x[1], x[0]))\n    val = [False for i in range(n)]\n    for i in range(n):\n        for j in range(num_list[i][0] - 1, num_list[i][1]):\n            if not val[j]:\n                print(*num_list[i], j + 1)\n                val[j] = True\n                break", "for t in range(int(input())):\n    n = int(input())\n    num_list = []\n    for i in range(n):\n        r = tuple(map(int, input().split()))\n        num_list.append(r)\n    num_list.sort(key=lambda x: (x[1], x[0]))\n    val = [False for i in range(n)]\n    for i in range(n):\n        for j in range(num_list[i][0] - 1, num_list[i][1]):\n            if not val[j]:\n                print(*num_list[i], j + 1)\n                val[j] = True\n                break", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    unused = [i for i in range(1, n + 1)]\n    range_list = []\n    answer_list = []\n    for n in range(n):\n        (l, r) = tuple(map(int, input().rstrip().split()))\n        range_list.append([l, r, r - l])\n    sorted_range_list = sorted(range_list, key=lambda x: x[2])\n    for k in sorted_range_list:\n        l = k[0]\n        r = k[1]\n        if l == r:\n            answer_list.append([l, l, l])\n            unused.remove(l)\n        else:\n            for u in unused:\n                if l <= u <= r:\n                    answer_list.append([l, r, u])\n                    unused.remove(u)\n                    break\n                else:\n                    continue\n    for a in answer_list:\n        print(f'{a[0]} {a[1]} {a[2]}')\n    print()", "q = int(input())\nfor _ in range(q):\n    n = int(input())\n    se = set([i for i in range(1, n + 1)])\n    dic = []\n    for _ in range(n):\n        dic.append(list(map(int, input().split())))\n    dic = sorted(dic, key=lambda x: abs(x[1] - x[0]))\n    for (i, j) in dic:\n        if i == j:\n            se.remove(i)\n            print(i, j, i)\n        for k in range(i, j + 1):\n            if k in se:\n                se.remove(k)\n                print(i, j, k)\n                break", "t = int(input())\n\ndef sort(L, R, a):\n    if L >= R:\n        return\n    pivot = R\n    storeIndex = R - 1\n    for i in range(R - 1, L - 1, -1):\n        if a[pivot][0] > a[i][0] or (a[pivot][0] == a[i][0] and a[pivot][1] > a[i][1]):\n            (a[storeIndex], a[i]) = (a[i], a[storeIndex])\n            storeIndex -= 1\n    (a[pivot], a[storeIndex + 1]) = (a[storeIndex + 1], a[pivot])\n    sort(L, storeIndex, a)\n    sort(storeIndex + 2, R, a)\n    return\nfor k in range(t):\n    n = int(input())\n    li = []\n    free = []\n    for i in range(n):\n        current = tuple((int(x) for x in input().split()))\n        li.append(current)\n        free.append(True)\n    if n == 1:\n        print(1, 1, 1)\n    else:\n        sort(0, n - 1, li)\n        for i in range(0, n):\n            for j in range(li[i][1], li[i][0] - 1, -1):\n                if free[j - 1]:\n                    print(li[i][0], li[i][1], j)\n                    free[j - 1] = False\n                    break", "from itertools import permutations as per\nfrom math import factorial as fact\nfrom difflib import SequenceMatcher\nfrom collections import deque\nimport bisect\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nt = int(input())\n\ndef fun(x, y):\n    return 0\nfor _ in range(t):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append([int(i) for i in input().split()])\n    a.sort(key=lambda x: x[1], reverse=True)\n    a.sort(key=lambda x: x[0])\n    for i in range(n):\n        if a[i][0] == a[i][1]:\n            print(*a[i], a[i][0])\n        elif a[i][0] != a[i + 1][0]:\n            print(*a[i], a[i + 1][0] - 1)\n        else:\n            print(*a[i], a[i + 1][1] + 1)", "for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        arr.append([r - l, l, r])\n    arr.sort()\n    d1 = {}\n    for i in arr:\n        for j in range(i[1], i[2] + 1):\n            if j not in d1:\n                d1[j] = 1\n                print(i[1], i[2], j)\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        arr.append([r - l, l, r])\n    arr.sort()\n    d1 = {}\n    for i in arr:\n        for j in range(i[1], i[2] + 1):\n            if j not in d1:\n                d1[j] = 1\n                print(i[1], i[2], j)\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(tuple(map(int, input().split())))\n    a.sort(key=lambda x: x[1] - x[0])\n    number = set()\n    for (x, y) in a:\n        for i in range(x, y + 1):\n            if i not in number:\n                number.add(i)\n                break\n        print(x, y, i)", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    A = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        A.append([r - l + 1, l, r])\n    A.sort()\n    net = [0] * n\n    ans = []\n    for i in A:\n        (l, r) = (i[1], i[2])\n        for j in range(l, r + 1):\n            if net[j - 1] == 0:\n                net[j - 1] = 1\n                print(l, r, j)\n                break\n    print()\n    t -= 1", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = [0] * n\n    b = []\n    for r in range(n):\n        b += [list(map(int, input().split()))]\n    b.sort(key=lambda x: x[1] - x[0])\n    for s in range(n):\n        if b[s][1] - b[s][0] == 0:\n            print(b[s][0], b[s][0], b[s][0])\n            a[b[s][0] - 1] = 1\n        else:\n            for r in range(b[s][0] - 1, b[s][1]):\n                if a[r] == 0:\n                    print(b[s][0], b[s][1], r + 1)\n                    a[r] = 1\n                    break", "def f(x):\n    return x[1] - x[0]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = []\n    used = set()\n    for i in range(n):\n        (lft, rgt) = map(int, input().split())\n        arr.append([lft, rgt])\n    arr.sort(key=f)\n    for el in arr:\n        for i in range(el[0], el[1] + 1):\n            if i not in used:\n                print(el[0], el[1], i)\n                used.add(i)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    x = []\n    for __ in range(n):\n        x.append(tuple(map(int, input().split())))\n    x.sort(reverse=True, key=lambda a: a[1] - a[0])\n    for i in range(n):\n        if x[i][0] == x[i][1]:\n            print(x[i][0], x[i][0], x[i][0])\n            continue\n        for j in range(i + 1, n):\n            if x[i][0] == x[j][0]:\n                print(x[i][0], x[i][1], x[j][1] + 1)\n                break\n            elif x[i][1] == x[j][1]:\n                print(x[i][0], x[i][1], x[j][0] - 1)\n                break", "for _ in range(int(input())):\n    n = int(input())\n    pairs = []\n    for _ in range(n):\n        pairs.append(list(map(int, input().strip().split())))\n    pairs.sort(key=lambda x: abs(x[0] - x[1]))\n    s = set()\n    ans = []\n    for (a, b) in pairs:\n        if a == b:\n            s.add(a)\n            ans.append(f'{a} {b} {a}')\n        else:\n            for r in range(a, b + 1):\n                if r not in s:\n                    s.add(r)\n                    ans.append(f'{a} {b} {r}')\n                    break\n    for a in ans:\n        print(a)", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    a = [0 for i in range(n)]\n    l = [0 for i in range(n + 1)]\n    for i in range(n):\n        a[i] = list(map(int, sys.stdin.readline().rstrip().split()))\n    a = sorted(a, key=lambda x: x[1] - x[0])\n    ans = []\n    for i in range(n):\n        for j in range(a[i][0], a[i][1] + 1):\n            if not l[j]:\n                l[j] = 1\n                ans.append(a[i] + [j])\n    for i in ans:\n        print(' '.join(list(map(str, i))))\n    print()", "DEBUG = False\nif DEBUG:\n    s = '4\\n1\\n1 1\\n3\\n1 3\\n2 3\\n2 2\\n6\\n1 1\\n3 5\\n4 4\\n3 6\\n4 5\\n1 6\\n5\\n1 5\\n1 2\\n4 5\\n2 2\\n4 4'\n    input_data = iter(s.split('\\n'))\nelse:\n\n    def func():\n        while 1:\n            yield input()\n    input_data = func()\n\ndef get_data():\n    n_data = int(next(input_data))\n    for _ in range(n_data):\n        n = int(next(input_data))\n        matrix = []\n        for _ in range(n):\n            (left, right) = map(int, next(input_data).split())\n            matrix.append((left, right))\n        yield (n, matrix)\n\ndef solve(n, matrix):\n    with_dif = [None] * n\n    for i in range(n):\n        (left, right) = matrix[i]\n        with_dif[i] = (left, right, right - left)\n    with_dif.sort(key=lambda i: i[-1])\n    chosen = []\n    for (left, right, _) in with_dif:\n        if left not in chosen:\n            print(left, right, left)\n            chosen.append(left)\n        elif right not in chosen:\n            print(left, right, right)\n            chosen.append(right)\n        else:\n            for i in range(left, right + 1):\n                if i in chosen:\n                    continue\n                print(left, right, i)\n                chosen.append(i)\n                break\n    print()\n\ndef main():\n    for data in get_data():\n        solve(*data)\nmain()", "t = int(input())\nfrom collections import defaultdict\nfor i in range(0, t):\n    n = int(input())\n    ranges = []\n    dic = defaultdict(list)\n    lis = []\n    for j in range(0, n):\n        (l, r) = map(int, input().split())\n        lis = [l, r]\n        dic[r - l + 1].append(lis)\n        ranges.append(lis)\n    removed = [0] * (n + 1)\n    for m in range(1, n + 1):\n        for h in dic[m]:\n            if m == 1:\n                removed[h[0]] = 1\n                h.append(h[0])\n            else:\n                for c in range(h[0], h[1] + 1):\n                    if removed[c] == 0:\n                        removed[c] = 1\n                        h.append(c)\n                        break\n    for m in dic:\n        for h in dic[m]:\n            print(h[0], end=' ')\n            print(h[1], end=' ')\n            print(h[2], end=' ')\n            print('')\n    print('')", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    if n == 1:\n        print(1, 1, 1)\n        print()\n        continue\n    l.sort(key=lambda x: abs(x[0] - x[1]))\n    used = [0] * (n + 1)\n    for i in range(n):\n        for ind in range(l[i][0], l[i][1] + 1):\n            if used[ind] == 0:\n                used[ind] = 1\n                l[i].append(ind)\n                break\n    for i in l:\n        print(*i)\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        arr.append([r - l, l, r])\n    arr.sort()\n    d1 = {}\n    for i in arr:\n        for j in range(i[1], i[2] + 1):\n            if j not in d1:\n                d1[j] = 1\n                print(i[1], i[2], j)\n    print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lis = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        lis.append((l, r))\n    lis.sort(key=lambda x: x[1] - x[0])\n    number = set()\n    for (x, y) in lis:\n        for num in range(x, y + 1):\n            if num not in number:\n                number.add(num)\n                break\n        print(x, y, num)\n    print()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    L = []\n    for j in range(n):\n        a = [int(x) for x in input().split()]\n        L.append(a)\n    L.sort(key=lambda x: x[1] - x[0])\n    number = set()\n    for (f, g) in L:\n        for var in range(f, g + 1):\n            if var not in number:\n                number.add(var)\n                break\n        print(f, g, var)\n    print()", "cases = int(input())\nanswers = []\nfor _ in range(cases):\n    n = int(input())\n    dic = {}\n    already_in = {}\n    for l_n in range(n):\n        line = input().split(' ')\n        if dic.get(int(line[1]) - int(line[0])) is not None:\n            dic[int(line[1]) - int(line[0])].append((int(line[0]), int(line[1])))\n        else:\n            dic[int(line[1]) - int(line[0])] = [(int(line[0]), int(line[1]))]\n    for key in range(0, n):\n        if dic.get(key) is not None:\n            for (w, k) in dic[key]:\n                for i in range(w, k + 1):\n                    if already_in.get(i) is None:\n                        answers.append(str(w) + ' ' + str(k) + ' ' + str(i))\n                        already_in[i] = ''\n                        break\nprint('\\n'.join(answers))", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [[int(x) for x in input().split()] for i in range(n)]\n    s = set((k for k in range(1, n + 1)))\n    for i in l:\n        i.insert(0, i[1] - i[0])\n    l = sorted(l)\n    for i in l:\n        y = s.intersection(set((h for h in range(i[1], i[2] + 1))))\n        p = y.pop()\n        i.append(p)\n        s.discard(p)\n    for i in l:\n        print(i[1], i[2], i[3])\n    print()\n    t = t - 1", "import sys\ninput = sys.stdin.readline\nk = int(input())\nfor _ in range(k):\n    n = int(input())\n    d = []\n    for _ in range(n):\n        (a, b) = map(int, input().split())\n        d.append([b - a, a, b])\n    d.sort()\n    s = set()\n    for i in range(n):\n        for j in range(d[i][1], d[i][2] + 1):\n            if j not in s:\n                s.add(j)\n                d[i] = [d[i][1], d[i][2], j]\n    for i in d:\n        print(*i)\n    if _ != k - 1:\n        print('')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ss = []\n    for i in range(n):\n        ss.append(list(map(int, input().split())))\n    ss = sorted(ss, key=lambda x: x[1] - x[0])\n    used = set()\n    ans = []\n    for s in ss:\n        (a, b) = (s[0], s[1])\n        for i in range(a, b + 1):\n            if i not in used:\n                print(' '.join([str(j) for j in [a, b, i]]))\n                used.add(i)\n                break", "def r(l):\n    return l[0] - l[1]\n\ndef solution(l):\n    if l[0][0] != l[0][1]:\n        for i in range(1, len(l)):\n            if l[i][0] == l[0][0] and l[i][1] - l[i][0] < l[0][1] - l[0][0]:\n                return l[i][1] + 1\n    return l[0][0]\nfor i in range(0, int(input())):\n    list1 = []\n    for j in range(0, int(input())):\n        list1.append(input().split())\n        list1[j] = list(map(int, list1[j]))\n    list1.sort(key=r)\n    for h in range(0, len(list1)):\n        list1[h].append(solution(list1[h:]))\n    [print(*items) for items in list1]", "def ga():\n    return list(map(int, input().split()))\nfor _ in range(int(input())):\n    n = int(input())\n    itv = []\n    for i in range(n):\n        itv.append(ga())\n    itv.sort(key=lambda x: x[1] - x[0])\n    removed = set()\n    for (l, r) in itv:\n        for i in range(l, r + 1):\n            if i not in removed:\n                removed.add(i)\n                break\n        print(l, r, i)\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    data = []\n    setData = set()\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        data.append(temp)\n    data.sort(key=lambda x: x[1] - x[0])\n    for i in range(n):\n        temp = 0\n        for j in range(data[i][0], data[i][1] + 1):\n            if j not in setData:\n                temp = j\n        setData.add(temp)\n        print(data[i][0], data[i][1], temp)", "result = []\nfor _ in range(int(input())):\n    n = int(input())\n    a = sorted([list(map(int, input().split())) for i in range(n)], key=lambda x: x[1] - x[0])\n    filled = [False for i in range(n)]\n    for (l, r) in a:\n        for c in range(l, r + 1):\n            if not filled[c - 1]:\n                filled[c - 1] = True\n                break\n        result.append([l, r, c])\nprint('\\n'.join(map(lambda x: ' '.join(map(str, x)), result)))", "import math\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    ans = []\n    a = []\n    d = []\n    h = [0] * n\n    for i in range(n):\n        (l, r) = [int(i) for i in input().split()]\n        a.append([l, r])\n    a.sort(key=lambda x: (x[1], -x[0]))\n    used = [0] * (n + 1)\n    for i in range(n):\n        if a[i][0] == a[i][1]:\n            ans.append([a[i][0], a[i][0], a[i][0]])\n            used[a[i][0]] = 1\n        elif used[a[i][1]] == 0:\n            ans.append([a[i][0], a[i][1], a[i][1]])\n            used[a[i][1]] = 1\n        elif used[a[i][0]] == 0:\n            ans.append([a[i][0], a[i][1], a[i][0]])\n            used[a[i][0]] = 1\n        else:\n            for j in range(1, n + 1):\n                if used[j] == 0 and j <= a[i][1] and (j >= a[i][0]):\n                    ans.append([a[i][0], a[i][1], j])\n                    used[j] = 1\n    for i in ans:\n        print(*i)\n    print()", "def solve(n, given_ranges):\n    ordered = sorted(given_ranges, key=lambda x: abs(x[0] - x[1]))\n    taken_nums = set()\n    for pair in ordered:\n        for i in range(pair[0], pair[1] + 1):\n            if i not in taken_nums:\n                print(pair[0], pair[1], i)\n            taken_nums.add(i)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    case = []\n    for j in range(n):\n        w = input().split(' ')\n        case.append((int(w[0]), int(w[1])))\n    solve(n, case)\n    print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ranges = set()\n    for i in range(n):\n        ranges.add(tuple(map(int, input().split())))\n    for pair in ranges:\n        (l, r) = pair\n        diff = abs(l - r)\n        if diff == 0:\n            print(l, r, l)\n        elif diff == 1:\n            if (l, l) in ranges:\n                print(l, r, r)\n            elif (r, r) in ranges:\n                print(l, r, l)\n        else:\n            for i in range(r - 1, l - 1, -1):\n                if (l, i) in ranges:\n                    print(l, r, i + 1)\n                    break\n            else:\n                if (l + 1, r) in ranges:\n                    print(l, r, l)\n    print('')", "for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        arr.append([r - l, l, r])\n    arr.sort()\n    d1 = {}\n    for i in arr:\n        for j in range(i[1], i[2] + 1):\n            if j not in d1:\n                d1[j] = 1\n                print(i[1], i[2], j)\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    arr = [i for i in range(1, n + 1)]\n    vis = [0] * n\n    d = dict()\n    v = []\n    for k in range(n):\n        (l, r) = map(int, input().split())\n        f = str(l) + ' ' + str(r)\n        if l == r:\n            d[f] = l\n            vis[l - 1] = 1\n        else:\n            v.append([l, r])\n    v = sorted(v, key=lambda x: x[1] - x[0])\n    for g in v:\n        f = str(g[0]) + ' ' + str(g[1])\n        for c in range(g[0], g[1] + 1):\n            if vis[c - 1] == 0:\n                vis[c - 1] = 1\n                d[f] = c\n                break\n    for k in d:\n        print(k, d[k])", "for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        arr.append([r - l, l, r])\n    arr.sort()\n    d1 = {}\n    for i in arr:\n        for j in range(i[1], i[2] + 1):\n            if j not in d1:\n                d1[j] = 1\n                print(i[1], i[2], j)\n    print()", "import sys, bisect, math\nfrom collections import deque, Counter\ninput = lambda : sys.stdin.readline().strip()\nceil = lambda x: math.ceil(x)\nmod = 10 ** 9 + 7\n\ndef solve():\n    n = int(input())\n    a = []\n    visited = [0] * (n + 1)\n    for _n in range(n):\n        a.append(list(map(int, input().split())))\n        (l, r) = a[-1]\n        visited[l] = visited[r] = True\n    a.sort(key=lambda x: x[1] - x[0])\n    ans = []\n    for i in a:\n        (x, y) = (-1, i[0])\n        for j in range(i[0], i[1] + 1):\n            if visited[j] == 0:\n                x = j\n                break\n            elif visited[j] == 1:\n                y = j\n        if x != -1:\n            ans.append(i + [x])\n            visited[x] = -2\n        else:\n            ans.append(i + [y])\n            visited[y] = -2\n    answer = ''\n    for i in ans:\n        answer += ' '.join((str(x) for x in i)) + '\\n'\n    return answer\nt = 1\nt = int(input())\nfor _ in range(t):\n    print(solve())", "t = int(input())\nfor j in range(t):\n    dic1 = {}\n    for i in range(1, 1001):\n        dic1[i] = 1\n    n = int(input())\n    lstf = []\n    dic = {}\n    for u in range(n):\n        (l, r) = map(int, input().split())\n        dic[l, r] = r - l\n        lstf.append([(l, r), r - l])\n    lstf.sort(key=lambda x: x[1])\n    for k in lstf:\n        l = k[0][0]\n        r = k[0][1]\n        for f in range(l, r + 1):\n            if dic1[f] == 1:\n                dic[l, r] = f\n                dic1[f] = 0\n                break\n    for y in dic.keys():\n        print(y[0], y[1], dic[y])", "t = int(input())\nfor _ in range(t):\n    lst = []\n    n = int(input())\n    for i in range(n):\n        lst.append(list(map(int, input().split())))\n    lst.sort(key=lambda x: (x[0] - x[1], x[0]))\n    for i in range(len(lst)):\n        cur = lst[i]\n        nxt = None\n        for j in range(i + 1, len(lst)):\n            if lst[j][0] >= cur[0] and lst[j][1] <= cur[1]:\n                nxt = lst[j]\n                break\n        if nxt:\n            if nxt[0] > cur[0]:\n                print(f'{cur[0]} {cur[1]} {nxt[0] - 1}')\n            elif nxt[1] < cur[1]:\n                print(f'{cur[0]} {cur[1]} {nxt[1] + 1}')\n            else:\n                print(f'{cur[0]} {cur[1]} {cur[0]}')\n        else:\n            print(f'{cur[0]} {cur[1]} {cur[0]}')", "import sys\nfor t in range(int(input())):\n    n = int(input())\n    memo = [0 for _ in range(n)]\n    rmemo = []\n    for i in range(n):\n        (a, b) = map(lambda x: int(x) - 1, input().split(' '))\n        for j in range(a, b + 1):\n            memo[j] += 1\n        rmemo.append((a, b))\n    for i in range(n):\n        (a, b) = rmemo[i]\n        idx = memo[a:b + 1].index(min(memo[a:b + 1]))\n        print(a + 1, b + 1, idx + a + 1)\n        memo[idx + a] = sys.maxsize", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nfor _ in range(inp()):\n    n = inp()\n    s = set([i for i in range(1, n + 1)])\n    arr = []\n    for i in range(n):\n        (l, r) = invr()\n        ar = [ele for ele in range(l, r + 1)]\n        arr.append([[r - l + 1], ar, [l, r]])\n    arr.sort()\n    for i in arr:\n        for j in i[1]:\n            if j in s:\n                print(*i[2], j)\n                s.remove(j)\n                break", "for _ in range(int(input())):\n    n = int(input())\n    ll = []\n    s = set()\n    for i in range(n):\n        l = list(map(int, input().split()))\n        ll.append([l[1] - l[0], l[0], l[1]])\n    ll.sort()\n    nn = len(s)\n    for i in range(n):\n        (ii, l, r) = ll[i]\n        for j in range(l, r + 1):\n            s.add(j)\n            if nn != len(s):\n                nn += 1\n                print(l, r, j)\n                break"]