["x = int(input())\n\ndef do(n, lis):\n    dp = [True] + [False] * n\n    for i in range(n):\n        v = lis[i]\n        if dp[i] and i + v < n:\n            dp[i + v + 1] = True\n        if i - v >= 0 and dp[i - v]:\n            dp[i + 1] = True\n    return dp[-1]\nfor _ in range(x):\n    a = int(input())\n    b = list(map(int, input().split()))\n    print('YES' if do(a, b) else 'NO')", "def ss(n, a):\n    a = [0] + a\n    dp = [False] * (n + 1)\n    dp[0] = True\n    for i in range(1, n + 1):\n        if i + a[i] <= n and dp[i - 1] == True:\n            dp[i + a[i]] = True\n        if i - a[i] - 1 >= 0 and dp[i - a[i] - 1]:\n            dp[i] = True\n    if dp[-1] == True:\n        return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(ss(n, a))", "def cal(n, b):\n    if n == 1:\n        return False\n    t = [0] * n\n    for i in range(n):\n        if i == 0 or t[i - 1] == 1:\n            if b[i] <= n - i - 1:\n                t[i + b[i]] = 1\n        if b[i] == i or (b[i] < i and t[i - b[i] - 1] == 1):\n            t[i] = 1\n        if t[-1] == 1:\n            return True\n    return False\nfor jj in range(int(input())):\n    n = int(input())\n    b = [int(i) for i in input().split()]\n    if cal(n, b):\n        print('YES')\n    else:\n        print('NO')", "def foo(n, ls):\n    flags = [False] * n\n    for i in range(n):\n        if i - ls[i] == 0:\n            flags[i] = True\n        elif i > ls[i] and flags[i - ls[i] - 1]:\n            flags[i] = True\n        if i + ls[i] < n and (i == 0 or flags[i - 1]):\n            flags[i + ls[i]] = True\n    return flags[-1]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ls = [int(i) for i in input().split()]\n    if foo(n, ls):\n        print('YES')\n    else:\n        print('NO')", "for n in (int(input()) for _ in range(int(input()))):\n    (xs, dp) = (list(map(int, input().split())), [True] + [False] * n)\n    for (i, x) in enumerate(xs):\n        if i - x >= 0:\n            dp[i + 1] |= dp[i - x]\n        if i + x < n:\n            dp[i + 1 + x] |= dp[i]\n    print(['NO', 'YES'][dp[-1]])", "for n in (int(input()) for _ in range(int(input()))):\n    (xs, dp) = (list(map(int, input().split())), [True] + [False] * n)\n    for (i, x) in enumerate(xs):\n        if i - x >= 0:\n            dp[i + 1] |= dp[i - x]\n        if i + x < n:\n            dp[i + 1 + x] |= dp[i]\n    print(['NO', 'YES'][dp[-1]])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    dp = [False] * (n + 1)\n    dp[0] = True\n    for i in range(0, n):\n        if dp[i] and i + 1 + b[i] <= n:\n            dp[i + 1 + b[i]] = True\n        if i - b[i] >= 0 and dp[i - b[i]]:\n            dp[i + 1] = True\n    print('YES' if dp[n] else 'NO')", "for n in (int(input()) for _ in range(int(input()))):\n    (xs, dp) = (list(map(int, input().split())), [True] + [False] * n)\n    for (i, x) in enumerate(xs):\n        if i - x >= 0:\n            dp[i + 1] |= dp[i - x]\n        if i + x < n:\n            dp[i + 1 + x] |= dp[i]\n    print(['NO', 'YES'][dp[-1]])", "for n in (int(input()) for _ in range(int(input()))):\n    (xs, dp) = (list(map(int, input().split())), [True] + [False] * n)\n    for (i, x) in enumerate(xs):\n        if i - x >= 0:\n            dp[i + 1] |= dp[i - x]\n        if i + x < n:\n            dp[i + 1 + x] |= dp[i]\n    print(['NO', 'YES'][dp[-1]])", "for n in (int(input()) for _ in range(int(input()))):\n    (xs, dp) = (list(map(int, input().split())), [True] + [False] * n)\n    for (i, x) in enumerate(xs):\n        if i - x >= 0:\n            dp[i + 1] |= dp[i - x]\n        if i + x < n:\n            dp[i + 1 + x] |= dp[i]\n    print(['NO', 'YES'][dp[-1]])", "import sys\nreadline = sys.stdin.readline\nT = int(readline())\nfor _ in range(T):\n    N = int(readline())\n    B = list(map(int, readline().split()))\n    dp = [False] * (N + 1)\n    dp[0] = True\n    for i in range(1, N + 1):\n        b = B[i - 1]\n        if i + b <= N and dp[i - 1]:\n            dp[i + b] = True\n        if i - b - 1 >= 0 and dp[i - b - 1]:\n            dp[i] = True\n    print('YES' if dp[N] else 'NO')", "def main():\n    for t in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        dp = [0 for i in range(n + 1)]\n        dp[0] = 1\n        for i in range(n + 1):\n            if i > 0 and i - a[i - 1] >= 1 and dp[i - a[i - 1] - 1]:\n                dp[i] = 1\n            if i < n and dp[i] and (i + a[i] + 1 <= n):\n                dp[i + a[i] + 1] = 1\n        print('YES' if dp[n] else 'NO')\nmain()", "for n in (int(input()) for _ in range(int(input()))):\n    (xs, dp) = (list(map(int, input().split())), [True] + [False] * n)\n    for (i, x) in enumerate(xs):\n        if i - x >= 0:\n            dp[i + 1] |= dp[i - x]\n        if i + x < n:\n            dp[i + 1 + x] |= dp[i]\n    print(['NO', 'YES'][dp[-1]])", "for n in (int(input()) for _ in range(int(input()))):\n    (xs, dp) = (list(map(int, input().split())), [True] + [False] * n)\n    for (i, x) in enumerate(xs):\n        if i - x >= 0:\n            dp[i + 1] |= dp[i - x]\n        if i + x < n:\n            dp[i + 1 + x] |= dp[i]\n    print(['NO', 'YES'][dp[-1]])", "for n in (int(input()) for _ in range(int(input()))):\n    (xs, dp) = (list(map(int, input().split())), [True] + [False] * n)\n    for (i, x) in enumerate(xs):\n        if i - x >= 0:\n            dp[i + 1] |= dp[i - x]\n        if i + x < n:\n            dp[i + 1 + x] |= dp[i]\n    print(['NO', 'YES'][dp[-1]])", "for nsfvfv in (int(input()) for _ in range(int(input()))):\n    (xs, dp) = (list(map(int, input().split())), [True] + [False] * nsfvfv)\n    for (i, xnsfvfv) in enumerate(xs):\n        if i - xnsfvfv >= 0:\n            dp[i + 1] |= dp[i - xnsfvfv]\n        if i + xnsfvfv < nsfvfv:\n            dp[i + 1 + xnsfvfv] |= dp[i]\n    print(['NO', 'YES'][dp[-1]])", "for n in (int(input()) for _ in range(int(input()))):\n    (xs, dp) = (list(map(int, input().split())), [True] + [False] * n)\n    for (i, x) in enumerate(xs):\n        if i - x >= 0:\n            dp[i + 1] |= dp[i - x]\n        if i + x < n:\n            dp[i + 1 + x] |= dp[i]\n    print(['NO', 'YES'][dp[-1]])", "for n in (int(input()) for _ in range(int(input()))):\n    (xs, dp) = (list(map(int, input().split())), [True] + [False] * n)\n    for (i, x) in enumerate(xs):\n        if i - x >= 0:\n            dp[i + 1] |= dp[i - x]\n        if i + x < n:\n            dp[i + 1 + x] |= dp[i]\n    print(['NO', 'YES'][dp[-1]])", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    dp = [0 for _ in range(n + 1)]\n    dp[0] = 1\n    for i in range(n):\n        if dp[i] == 1 and i + l[i] + 1 <= n:\n            dp[i + l[i] + 1] = 1\n        if l[i] <= i and dp[i - l[i]] == 1:\n            dp[i + 1] = 1\n    if dp[-1] == 1:\n        print('YES')\n    else:\n        print('NO')", "for n in (int(input()) for _ in range(int(input()))):\n    (xs, dp) = (list(map(int, input().split())), [True] + [False] * n)\n    for (i, x) in enumerate(xs):\n        if i - x >= 0:\n            dp[i + 1] |= dp[i - x]\n        if i + x < n:\n            dp[i + 1 + x] |= dp[i]\n    print(['NO', 'YES'][dp[-1]])", "from collections import defaultdict, deque, Counter\nfrom functools import lru_cache, reduce\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_right, bisect_left\nfrom random import randint\nfrom fractions import Fraction as frac\nimport math\nimport operator\nimport sys\nhpop = heappop\nhpush = heappush\nMOD = 10 ** 9 + 7\n\ndef solution():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dp = [False] * len(arr)\n    for i in range(n):\n        if i == 0 or dp[i - 1]:\n            end = i + arr[i]\n            if end < len(dp):\n                dp[end] = True\n        start = i - arr[i] - 1\n        if start == -1 or (start >= 0 and dp[start]):\n            dp[i] = True\n    print(['NO', 'YES'][dp[-1]])\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solution()\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dp = [False] * (n + 1)\n    dp[n] = True\n    for i in range(n - 1, -1, -1):\n        if i + arr[i] + 1 < n + 1:\n            dp[i] = dp[i] or dp[i + arr[i] + 1]\n        if dp[i + 1] and i - arr[i] >= 0:\n            dp[i - arr[i]] = True\n    if dp[0]:\n        print('YES')\n    else:\n        print('NO')", "import sys\n\ndef input():\n    return sys.stdin.readline()[:-1]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    dp = ['NO'] * (n + 1)\n    dp[0] = 'YES'\n    for i in range(n):\n        if i - b[i] >= 0 and dp[i - b[i]] == 'YES':\n            dp[i + 1] = 'YES'\n        if dp[i] == 'YES' and i + b[i] + 1 <= n:\n            dp[i + b[i] + 1] = 'YES'\n    print(dp[-1])", "import sys\nreadline = sys.stdin.readline\nT = int(readline())\nfor _ in range(T):\n    N = int(readline())\n    B = [0] + list(map(int, readline().split()))\n    dp = [False] * (N + 1)\n    dp[0] = True\n    for i in range(1, N + 1):\n        if i + B[i] <= N and dp[i - 1]:\n            dp[i + B[i]] = True\n        if i - B[i] - 1 >= 0 and dp[i - B[i] - 1]:\n            dp[i] = True\n    print('YES' if dp[N] else 'NO')", "import sys\nreadline = sys.stdin.readline\nT = int(readline())\nfor _ in range(T):\n    N = int(readline())\n    B = list(map(int, readline().split()))\n    dp = [False] * (N + 1)\n    dp[0] = True\n    for i in range(1, N + 1):\n        b = B[i - 1]\n        if i + b <= N and dp[i - 1]:\n            dp[i + b] = True\n        if i - b - 1 >= 0 and dp[i - b - 1]:\n            dp[i] = True\n    print('YES' if dp[N] else 'NO')", "for n in (int(input()) for _ in range(int(input()))):\n    (xs, dp) = (list(map(int, input().split())), [True] + [False] * n)\n    for (i, x) in enumerate(xs):\n        if i - x >= 0:\n            dp[i + 1] |= dp[i - x]\n        if i + x < n:\n            dp[i + 1 + x] |= dp[i]\n    print(['NO', 'YES'][dp[-1]])", "for n in (int(input()) for _ in range(int(input()))):\n    (xs, dp) = (list(map(int, input().split())), [True] + [False] * n)\n    for (i, x) in enumerate(xs):\n        if i - x >= 0:\n            dp[i + 1] |= dp[i - x]\n        if i + x < n:\n            dp[i + 1 + x] |= dp[i]\n    print(['NO', 'YES'][dp[-1]])", "for t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dp = [False] * (n + 1)\n    dp[0] = True\n    for i in range(n):\n        if i - arr[i] >= 0 and dp[i - arr[i]]:\n            dp[i + 1] = True\n        if i + arr[i] + 1 <= n and dp[i]:\n            dp[i + arr[i] + 1] = True\n    print('YES' if dp[n] else 'NO')", "for n in (int(input()) for _ in range(int(input()))):\n    (xs, dp) = (list(map(int, input().split())), [True] + [False] * n)\n    for (i, x) in enumerate(xs):\n        if i - x >= 0:\n            dp[i + 1] |= dp[i - x]\n        if i + x < n:\n            dp[i + 1 + x] |= dp[i]\n    print(['NO', 'YES'][dp[-1]])", "for n in (int(input()) for _ in range(int(input()))):\n    (xs, dp) = (list(map(int, input().split())), [True] + [False] * n)\n    for (i, x) in enumerate(xs):\n        if i - x >= 0:\n            dp[i + 1] |= dp[i - x]\n        if i + x < n:\n            dp[i + 1 + x] |= dp[i]\n    print(['NO', 'YES'][dp[-1]])", "for n in (int(input()) for _ in range(int(input()))):\n    (xs, dp) = (list(map(int, input().split())), [True] + [False] * n)\n    for (i, x) in enumerate(xs):\n        if i - x >= 0:\n            dp[i + 1] |= dp[i - x]\n        if i + x < n:\n            dp[i + 1 + x] |= dp[i]\n    print(['NO', 'YES'][dp[-1]])", "for n in (int(input()) for _ in range(int(input()))):\n    (xs, dp) = (list(map(int, input().split())), [True] + [False] * n)\n    for (i, x) in enumerate(xs):\n        if i - x >= 0:\n            dp[i + 1] |= dp[i - x]\n        if i + x < n:\n            dp[i + 1 + x] |= dp[i]\n    print(['NO', 'YES'][dp[-1]])", "for n in (int(input()) for _ in range(int(input()))):\n    (xs, dp) = (list(map(int, input().split())), [True] + [False] * n)\n    for (i, x) in enumerate(xs):\n        if i - x >= 0:\n            dp[i + 1] |= dp[i - x]\n        if i + x < n:\n            dp[i + 1 + x] |= dp[i]\n    print(['NO', 'YES'][dp[-1]])", "t = int(input())\nfor iter in range(t):\n    n = int(input())\n    line = input().split(' ')\n    B = [int(x) for x in line]\n    dp = [0 for i in range(n + 1)]\n    dp[0] = 1\n    for (j, x) in enumerate(B):\n        i = j + 1\n        if dp[i - 1] == 1 and i + x <= n:\n            dp[i + x] = 1\n        if i - x - 1 >= 0 and dp[i - x - 1] == 1:\n            dp[i] = 1\n    if dp[n] > 0:\n        print('YES')\n    else:\n        print('NO')", "for n in (int(input()) for _ in range(int(input()))):\n    (xs, dp) = (list(map(int, input().split())), [True] + [False] * n)\n    for (i, x) in enumerate(xs):\n        if i - x >= 0:\n            dp[i + 1] |= dp[i - x]\n        if i + x < n:\n            dp[i + 1 + x] |= dp[i]\n    print(['NO', 'YES'][dp[-1]])", "for _ in range(int(input())):\n    n = int(input())\n    b = [0] + list(map(int, input().split()))\n    dp = [False for __ in range(n + 1)]\n    dp[0] = True\n    for i in range(1, n + 1):\n        if i + b[i] <= n and dp[i - 1]:\n            dp[i + b[i]] = True\n        if 0 <= i - b[i] - 1 and dp[i - b[i] - 1]:\n            dp[i] = True\n    if dp[n]:\n        print('YES')\n    else:\n        print('NO')", "tc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    seq = [int(i) for i in input().split()]\n    dp = [False for _ in range(n + 1)]\n    dp[n] = True\n    for i in range(n - 1, -1, -1):\n        if i + seq[i] + 1 <= n:\n            if dp[i + seq[i] + 1]:\n                dp[i] = True\n        if dp[i + 1]:\n            next = i - seq[i]\n            if next >= 0:\n                dp[next] = True\n    print('YES' if dp[0] else 'NO')", "import sys\ninput = sys.stdin.readline\nmaxn = 200000.0 + 10\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print('NO')\n        return\n    dp = [0 for i in range(n + 1)]\n    dp[0] = 1\n    for i in range(n + 1):\n        if i and i - 1 - a[i - 1] >= 0:\n            dp[i] |= dp[i - 1 - a[i - 1]]\n        if i < n and i + a[i] + 1 <= n:\n            dp[i + a[i] + 1] |= dp[i]\n    if dp[n]:\n        print('YES')\n    else:\n        print('NO')\nfor T in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [False for _ in range(n + 1)]\n    dp[0] = True\n    for i in range(1, n + 1):\n        if i - a[i - 1] - 1 >= 0 and dp[i - a[i - 1] - 1]:\n            dp[i] = True\n        if dp[i - 1] and i + a[i - 1] <= n:\n            dp[i + a[i - 1]] = True\n    if dp[n]:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    flags = [False] * n\n    for i in range(n):\n        if i - l[i] == 0:\n            flags[i] = True\n        elif i > l[i] and flags[i - l[i] - 1]:\n            flags[i] = True\n        if i + l[i] < n and (i == 0 or flags[i - 1]):\n            flags[i + l[i]] = True\n    if flags[-1]:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [0] + [int(x) for x in input().split()]\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        if dp[i - 1] and i + a[i] <= n:\n            dp[i + a[i]] = 1\n        if i - a[i] - 1 >= 0 and dp[i - a[i] - 1]:\n            dp[i] = 1\n    if dp[n]:\n        print('YES')\n    else:\n        print('NO')", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    b = list(map(int, input().split()))\n    b.insert(0, -1)\n    dp = [False for i in range(n + 1)]\n    dp[0] = True\n    for i in range(1, n + 1):\n        if i + b[i] <= n and dp[i - 1]:\n            dp[i + b[i]] = True\n        if i - b[i] - 1 >= 0:\n            if dp[i - b[i] - 1]:\n                dp[i] = True\n    if dp[n]:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [False for _ in range(n)]\n    for i in range(n):\n        if a[i] == i or (a[i] < i and dp[i - a[i] - 1]):\n            dp[i] = True\n        if (i == 0 or dp[i - 1]) and a[i] <= n - i - 1:\n            dp[i + a[i]] = True\n    if dp[n - 1]:\n        print('YES')\n    else:\n        print('NO')", "from functools import lru_cache as cache\nfrom collections import Counter, defaultdict, deque\nimport math\nimport bisect\nimport string\nfrom heapq import *\nimport sys\n\ndef get_int():\n    return int(input())\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_str():\n    return sys.stdin.readline().strip()\n\ndef main():\n    testcases = get_int()\n    for _ in range(testcases):\n        n = get_int()\n        b = get_list()\n        print(solve(n, b))\n\ndef solve(n, b):\n    dp = [0 for i in range(n)]\n    for i in range(n):\n        if (i == 0 or dp[i - 1] == True) and i + b[i] < n:\n            dp[i + b[i]] = 1\n        if i - b[i] - 1 == -1 or (i - b[i] - 1 >= 0 and dp[i - b[i] - 1]):\n            dp[i] = 1\n    if dp[-1]:\n        return 'YES'\n    return 'NO'\nmain()", "for jj in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    t = [0] * n\n    for i in range(n):\n        if i == 0 or t[i - 1] == 1:\n            if arr[i] <= n - i - 1:\n                t[i + arr[i]] = 1\n        if arr[i] == i or (arr[i] < i and t[i - arr[i] - 1] == 1):\n            t[i] = 1\n        if t[-1] == 1:\n            break\n    if t[-1]:\n        print('YES')\n    else:\n        print('NO')", "tc = int(input())\nfor i in range(0, tc):\n    l = int(input())\n    sequence = [int(part) for part in input().split()]\n    can_sequence_start = [0 for _ in range(l + 1)]\n    can_sequence_start[0] = 1\n    for i in range(0, len(sequence)):\n        if can_sequence_start[i] == 1:\n            if sequence[i] + i + 1 < len(can_sequence_start):\n                can_sequence_start[sequence[i] + i + 1] = 1\n        if i - sequence[i] >= 0:\n            if can_sequence_start[i - sequence[i]] == 1:\n                can_sequence_start[i + 1] = 1\n    if can_sequence_start[len(can_sequence_start) - 1] == 1:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor o in range(t):\n    n = int(input())\n    arr = tuple(map(int, input().split()))\n    dp = [False for i in range(0, n + 1)]\n    dp[0] = True\n    for i in range(0, n + 1):\n        if i - arr[i - 1] - 1 >= 0 and dp[i - arr[i - 1] - 1]:\n            dp[i] = True\n        if i < n and dp[i]:\n            if i + 1 + arr[i] <= n:\n                dp[i + 1 + arr[i]] = True\n    if dp[n]:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nfor _ in range(n):\n    a = int(input())\n    b = list(map(int, input().split()))\n    f = [0 for _ in range(a + 1)]\n    f[0] = 1\n    b.insert(0, 0)\n    b.append(0)\n    for i in range(a + 1):\n        if i - b[i] - 1 >= 0 and f[i - b[i] - 1]:\n            f[i] = 1\n        if f[i] and i + b[i + 1] + 1 <= a:\n            f[i + b[i + 1] + 1] = 1\n    if f[a]:\n        print('YES')\n    else:\n        print('NO')", "test = int(input())\nwhile test > 0:\n    n = int(input())\n    b = list(map(int, input().split()))\n    dp = []\n    for i in range(n + 1):\n        dp.append(False)\n    dp[0] = True\n    if n >= b[0] + 1:\n        dp[b[0] + 1] = True\n    for i in range(n):\n        if b[i] <= i and dp[i + 1] == False:\n            dp[i + 1] = dp[i - b[i]]\n        if dp[i + 1] and i < n - 1:\n            if n - i - 1 >= b[i + 1] + 1:\n                dp[i + b[i + 1] + 2] = True\n    if dp[n]:\n        print('YES')\n    else:\n        print('NO')\n    test -= 1", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    possible = [False for i in range(n + 1)]\n    possible[0] = True\n    for i in range(n):\n        if possible[i]:\n            l_L = a[i] + 1\n            l_ext = i + l_L\n            if l_ext <= n:\n                possible[l_ext] = True\n        l_R = a[i] + 1\n        rem = i + 1 - l_R\n        if rem >= 0 and possible[rem]:\n            possible[i + 1] = True\n    if possible[n]:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = [int(x) for x in input().split()]\n    dp = [False] * n\n    for i in range(n):\n        if not dp[i] and b[i] == i:\n            dp[i] = True\n        if (i > 0 and dp[i - 1] or i == 0) and i + b[i] < n:\n            dp[i + b[i]] = True\n        if i > b[i] - 1:\n            if dp[i - b[i] - 1]:\n                dp[i] = True\n    if dp[n - 1]:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = [int(i) for i in input().split()]\n    dp = [False] * len(nums)\n    for (i, v) in enumerate(nums):\n        if not 0 < v < len(nums):\n            continue\n        if i + v < len(nums) and (i - 1 < 0 or dp[i - 1]):\n            dp[i + v] = True\n        if i - v >= 0 and (i - v == 0 or dp[i - v - 1]):\n            dp[i] = True\n    print('YES' if dp[-1] else 'NO')", "for _ in ' ' * int(input()):\n    n = int(input())\n    (*a,) = map(int, input().split())\n    dp = [False] * n\n    dp = [True] + dp\n    for i in range(1, n + 1):\n        if dp[i - 1] and i + a[i - 1] <= n:\n            dp[i + a[i - 1]] = True\n        if i - a[i - 1] - 1 >= 0:\n            dp[i] |= dp[i - a[i - 1] - 1]\n    if dp[-1]:\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict, deque, Counter\nfrom functools import lru_cache, reduce\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_right, bisect_left\nfrom random import randint\nfrom fractions import Fraction as frac\nimport math\nimport operator\nimport sys\nhpop = heappop\nhpush = heappush\nMOD = 10 ** 9 + 7\n\ndef solution():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dp = [False] * len(arr)\n    for i in range(n):\n        if i == 0 or dp[i - 1]:\n            end = i + arr[i]\n            if end < len(dp):\n                dp[end] = True\n        start = i - arr[i] - 1\n        if start == -1 or (start >= 0 and dp[start]):\n            dp[i] = True\n    for i in range(n):\n        if i == 0 or dp[i - 1]:\n            end = i + arr[i]\n            if end < len(dp):\n                dp[end] = True\n        start = i - arr[i] - 1\n        if start == -1 or (start >= 0 and dp[start]):\n            dp[i] = True\n    print(['NO', 'YES'][dp[-1]])\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solution()\nmain()", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom collections import deque\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    arr = int_arr()\n    ch = [0 for i in range(n)]\n    for i in range(n):\n        if i - arr[i] >= 0:\n            if i - arr[i] - 1 == -1:\n                ch[i] = 1\n            elif ch[i - arr[i] - 1] == 1:\n                ch[i] = 1\n        if i + arr[i] < n:\n            if i - 1 == -1:\n                ch[i + arr[i]] = 1\n            elif ch[i - 1] == 1:\n                ch[i + arr[i]] = 1\n    if ch[-1] == 1:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [False] * (n + 11)\n    Q = [[] for i in range(n + 11)]\n    for i in range(1, n + 1):\n        l = i\n        r = a[i - 1] + i\n        if r <= n:\n            Q[l].append(r)\n        l = i - a[i - 1]\n        r = i\n        if l >= 1:\n            Q[l].append(r)\n    dp[1] = True\n    for i in range(1, n + 1):\n        if not dp[i]:\n            continue\n        for j in Q[i]:\n            dp[j + 1] = True\n    print('YES' if dp[n + 1] else 'NO')\nT = int(input())\nfor i in range(T):\n    solve()", "import sys\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    b = list(map(int, input().split()))\n    dp = [False] * (n + 1)\n    dp[0] = True\n    st = set()\n    for i in range(1, n + 1):\n        if dp[i - 1]:\n            st.add(b[i - 1] + (i - 1))\n        if i - b[i - 1] - 1 >= 0:\n            dp[i] = dp[i - b[i - 1] - 1]\n        if i - 1 in st:\n            dp[i] = True\n    if dp[-1]:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print('NO')\n    else:\n        dp = [False] * n\n        for i in range(n):\n            if a[i] == i:\n                dp[i] = True\n            if i == 0:\n                if a[i] < n:\n                    dp[a[i]] = True\n                if a[i] == n - 1:\n                    break\n            else:\n                if dp[i - 1]:\n                    if i + a[i] < n:\n                        dp[i + a[i]] = True\n                    if i + a[i] == n - 1:\n                        break\n                if i - 1 - a[i] >= 0 and dp[i - 1 - a[i]]:\n                    dp[i] = True\n        if dp[-1]:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print('NO')\n    else:\n        dp = [False] * n\n        for i in range(n):\n            if a[i] == i:\n                dp[i] = True\n            if i == 0:\n                if a[i] < n:\n                    dp[a[i]] = True\n                if a[i] == n - 1:\n                    break\n            else:\n                if dp[i - 1]:\n                    if i + a[i] < n:\n                        dp[i + a[i]] = True\n                    if i + a[i] == n - 1:\n                        break\n                if i - 1 - a[i] >= 0 and dp[i - 1 - a[i]]:\n                    dp[i] = True\n        if dp[-1]:\n            print('YES')\n        else:\n            print('NO')", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\nfrom math import inf\nimport sys\nsys.setrecursionlimit(1000000)\nfor _ in range(int(input())):\n    n = ni()\n    b = li()\n    ans = [False] * (n + 1)\n    ans[0] = True\n    for i in range(1, n + 1):\n        if b[i - 1] < i and i - b[i - 1] - 1 >= 0 and (ans[i - b[i - 1] - 1] == True):\n            ans[i] = True\n        if i > 0 and ans[i - 1] == True and (i + b[i - 1] <= n):\n            ans[i + b[i - 1]] = True\n    if ans[-1] == True:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    dp = [False] * (n + 1)\n    dp[0] = True\n    for i in range(1, n + 1):\n        if i + b[i - 1] <= n and dp[i - 1]:\n            dp[i + b[i - 1]] = True\n        if i - b[i - 1] - 1 >= 0 and dp[i - b[i - 1] - 1]:\n            dp[i] = True\n    print('YES' if dp[n] else 'NO')", "t = int(input())\nfor p in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [[False, False, False] for k in range(n + 1)]\n    dp[0][2] = True\n    x = a[0]\n    if x + 1 <= n:\n        dp[x + 1][2] = True\n    for i in range(1, n):\n        x = a[i]\n        if dp[i][2] and i + x + 1 <= n:\n            dp[i + x + 1][2] = True\n        if i - x >= 0 and dp[i - x][2]:\n            dp[i][1] = True\n            if i + 1 <= n:\n                dp[i + 1][2] = True\n    if dp[n][2]:\n        print('YES')\n    else:\n        print('NO')", "def __(f):\n    for i in range(len(f)):\n        print(f[i][0], end=' ')\n    print()\n    for i in range(len(f)):\n        print(f[i][1], end=' ')\n    print()\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [0] + list(map(int, input().split()))\n    f = [[True, True]] + [[False, False] for i in range(len(arr))]\n    for (i, a) in enumerate(arr):\n        if i > 0:\n            pre_idx = i - a - 1\n            if pre_idx >= 0 and (f[pre_idx][0] or f[pre_idx][1]):\n                f[i][0] = True\n            else:\n                f[i][0] = False\n            if (f[i - 1][0] or f[i - 1][1]) and i + a < len(arr):\n                f[i + a][1] = True\n    if f[len(arr) - 1][0] or f[len(arr) - 1][1]:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(n):\n        if a[i] < i + 1:\n            dp[i + 1] = max(dp[i - a[i]], dp[i + 1])\n        if a[i] + i + 1 <= n:\n            dp[i + 1 + a[i]] = max(dp[i], dp[i + 1 + a[i]])\n    if dp[-1] == 1:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nfor i in range(n):\n    num = int(input())\n    x = input()\n    dp = [0 for i in range(num + 1)]\n    Se = [int(n1) for n1 in x.split()]\n    dp[0] = 1\n    for j in range(num):\n        if j - Se[j] >= 0:\n            dp[j + 1] = max(dp[j - Se[j]], dp[j + 1])\n        if j + Se[j] < num:\n            dp[j + 1 + Se[j]] = max(dp[j], dp[j + 1 + Se[j]])\n    if dp[num] == 1:\n        print('YES')\n    else:\n        print('NO')", "def solve():\n    n = int(input())\n    b = input().split(' ')\n    b = [int(x) for x in b]\n    dp = [False for _ in range(n + 1)]\n    dp[-1] = True\n    h = {}\n    for j in range(n):\n        if j not in h:\n            h[j] = []\n        if j - b[j] >= 0:\n            h[j - b[j]].append(j)\n    for i in range(n - 1, -1, -1):\n        x = b[i]\n        if x <= n - (i + 1):\n            dp[i] = dp[i] or dp[i + x + 1]\n        for j in h[i]:\n            dp[i] = dp[i] or dp[j + 1]\n    if dp[0]:\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    b = list(map(int, input().split()))\n    moves = [[] for i in range(n)]\n    for i in range(n):\n        if i + b[i] <= n - 1:\n            moves[i].append(i + b[i] + 1)\n        if i - b[i] >= 0:\n            moves[i - b[i]].append(i + 1)\n    visit = [False for i in range(n + 1)]\n    visit[0] = True\n    for i in range(n):\n        if not visit[i]:\n            continue\n        for j in moves[i]:\n            visit[j] = True\n    print(['NO', 'YES'][visit[-1]])", "from sys import stdin, stdout\nN = 200002\ng = [[] for i in range(N)]\nvis = None\n\ndef dfs(source):\n    st = [source]\n    while st:\n        u = st.pop()\n        if not vis[u]:\n            vis[u] = True\n            for v in g[u]:\n                st.append(v)\ntc = int(stdin.readline())\noutput = ''\nfor cs in range(tc):\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    for i in range(n):\n        if i + a[i] < n:\n            g[i].append(i + a[i] + 1)\n        if i - a[i] >= 0:\n            g[i - a[i]].append(i + 1)\n    vis = [False for i in range(n + 1)]\n    dfs(0)\n    if vis[n]:\n        output += 'YES\\n'\n    else:\n        output += 'NO\\n'\n    for i in range(n):\n        g[i].clear()\nprint(output)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    graph = [set() for i in range(n)]\n    for (i, b_i) in enumerate(b):\n        if i - b_i >= 0:\n            graph[i - b_i].add(i + 1)\n        if i + b_i <= n - 1:\n            graph[i].add(i + b_i + 1)\n    good = [0 for i in range(n + 1)]\n    good[0] = 1\n    for i in range(n):\n        if good[i]:\n            for j in graph[i]:\n                good[j] = 1\n    print('YES' if good[n] else 'NO')", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    bs = list(map(int, input().split()))\n    lookup = defaultdict(set)\n    for i in range(n):\n        head = i - bs[i]\n        if 0 <= head < n:\n            lookup[head].add(i)\n    for i in range(n):\n        tail = i + bs[i]\n        if 0 <= tail < n:\n            lookup[i].add(tail)\n    dp = [False] * n\n    for i in range(n):\n        if i == 0:\n            for j in lookup[i]:\n                dp[j] = True\n            continue\n        if not dp[i - 1]:\n            continue\n        for j in lookup[i]:\n            dp[j] = True\n    if dp[n - 1]:\n        print('YES')\n    else:\n        print('NO')"]