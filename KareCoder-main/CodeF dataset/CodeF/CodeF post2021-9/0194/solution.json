["import sys\ninput = sys.stdin.readline\nout = []\nt = int(input())\nfor _ in range(t):\n    input()\n    s = input().strip()\n    poss = []\n    z = o = tz = to = 0\n    for c in s:\n        if c == '0':\n            tz += 1\n            z += 1\n            o = 0\n            poss.append(z * z)\n        else:\n            to += 1\n            o += 1\n            z = 0\n            poss.append(o * o)\n    poss.append(tz * to)\n    out.append(max(poss))\nprint('\\n'.join(map(str, out)))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    a = s.count('1')\n    m = a * (n - a)\n    d = 1\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            d += 1\n        else:\n            m = max(m, d * d)\n            d = 1\n    m = max(m, d * d)\n    print(m)", "def max(a, b):\n    if a > b:\n        return a\n    return b\n\ndef longestitem(l, x):\n    if len(l) == 0:\n        return 0\n    m = 0\n    while x * (m + 1) in l:\n        m += 1\n    return m\n\ndef calc(s):\n    zeros = s.count('0')\n    ones = s.count('1')\n    if zeros > ones:\n        return max(longestitem(s, '0') ** 2, zeros * ones)\n    if ones > zeros:\n        return max(longestitem(s, '1') ** 2, zeros * ones)\n    return zeros * ones\nl = []\nfor _ in range(int(input())):\n    input()\n    l.append(calc(input()))\nprint('\\n'.join(map(str, l)))", "def solve(s, n, ans):\n    total_zero = 0\n    total_one = 0\n    zero = 0\n    one = 0\n    max_count = 0\n    for i in s:\n        if i == '0':\n            max_count = max(max_count, one)\n            one = 0\n            zero += 1\n            total_zero += 1\n        else:\n            max_count = max(max_count, zero)\n            zero = 0\n            one += 1\n            total_one += 1\n    max_count = max(max_count, zero, one)\n    max_val = max_count * max_count\n    max_val = max(max_val, total_zero * total_one)\n    ans.append(max_val)\n\ndef main():\n    t = int(input())\n    ans = []\n    for i in range(t):\n        n = int(input())\n        s = input()\n        solve(s, n, ans)\n    print('\\n'.join(map(str, ans)))\nmain()", "from sys import stdin, stdout\n\ndef inp():\n    return int(stdin.readline())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s)])\n\ndef invr():\n    return map(int, input().split())\n\ndef main():\n    for i in range(inp()):\n        n = inp()\n        s = stdin.readline()\n        c = s.count('0')\n        one = n - c\n        ans = one * c\n        i = 0\n        while i < n:\n            ini = i\n            while i < n and s[i] == s[ini]:\n                i += 1\n            ans = max(ans, (i - ini) ** 2)\n        print(ans)\nmain()", "for s in [*open(0)][2::2]:\n    ans = max(s.count('0') * s.count('1'), 1)\n    st = 1\n    s = s.strip()\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            st += 1\n        else:\n            st = 1\n        ans = max(ans, st * st)\n    print(ans)", "for s in [*open(0)][2::2]:\n    ans = s.count('0') * s.count('1')\n    cu = 1\n    s = s.strip()\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            cu += 1\n        else:\n            ans = max(ans, cu * cu)\n            cu = 1\n    print(max(ans, cu * cu))", "results = []\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    a = s.count('1')\n    b = n - a\n    m = a * b\n    c = s[0]\n    d = 1\n    for i in range(1, n):\n        if c == s[i]:\n            d += 1\n        else:\n            m = max(m, d * d)\n            c = s[i]\n            d = 1\n    m = max(m, d * d)\n    results.append(m)\nprint('\\n'.join(map(str, results)))", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\ntest_cases = inp()\ninp_arr = []\nfor i in range(test_cases):\n    num = inp()\n    s = input()\n    inp_arr.append(s)\n\ndef findResult(s):\n    c_zero = 0\n    c_one = 0\n    max_lk = 0\n    pre = ''\n    count_lk = 0\n    for i in range(len(s)):\n        num = s[i]\n        if num == pre:\n            count_lk += 1\n        else:\n            max_lk = max(count_lk, max_lk)\n            pre = num\n            count_lk = 1\n        if num == '0':\n            c_zero += 1\n        elif num == '1':\n            c_one += 1\n    result = c_zero * c_one\n    return max(result, max_lk * max_lk)\nresult = [findResult(cheeses) for cheeses in inp_arr]\nfor m in result:\n    print(m)", "for s in [*open(0)][2::2]:\n    ans = max(s.count('0') * s.count('1'), 1)\n    st = 1\n    s = s.strip()\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            st += 1\n        else:\n            st = 1\n        ans = max(ans, st * st)\n    print(ans)", "out = []\nt = int(input())\nfor _ in range(t):\n    input()\n    s = input().strip()\n    poss = []\n    z = o = tz = to = 0\n    for c in s:\n        if c == '0':\n            tz += 1\n            z += 1\n            o = 0\n            poss.append(z * z)\n        else:\n            to += 1\n            o += 1\n            z = 0\n            poss.append(o * o)\n    poss.append(tz * to)\n    out.append(max(poss))\nprint('\\n'.join(map(str, out)))", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\ntest_cases = inp()\ninp_arr = []\nfor i in range(test_cases):\n    num = inp()\n    s = input()\n    inp_arr.append(s)\n\ndef findResult(s):\n    c_zero = 0\n    c_one = 0\n    max_lk = 0\n    pre = ''\n    count_lk = 0\n    for i in range(len(s)):\n        num = s[i]\n        if num == pre:\n            count_lk += 1\n        else:\n            max_lk = max(count_lk, max_lk)\n            pre = num\n            count_lk = 1\n        if num == '0':\n            c_zero += 1\n        elif num == '1':\n            c_one += 1\n    result = c_zero * c_one\n    return max(result, max_lk * max_lk)\nresult = [findResult(cheeses) for cheeses in inp_arr]\nfor m in result:\n    print(m)", "nums = []\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = input()\n    b = a.count('0')\n    d = len(a) - b\n    count = b * d\n    e = a[0]\n    count1 = 1\n    for k in range(1, len(a)):\n        if e == a[k]:\n            count1 += 1\n        else:\n            count = max(count, count1 * count1)\n            e = a[k]\n            count1 = 1\n    count = max(count, count1 * count1)\n    nums.append(count)\nprint('\\n'.join(map(str, nums)))", "import sys\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = input().strip()\n    x = 0\n    y = 0\n    mx = 0\n    my = 0\n    c = 0\n    f = 0\n    for i in a:\n        if i == '0':\n            x += 1\n            c += 1\n            y = 0\n            mx = max(mx, x)\n        else:\n            y += 1\n            my = max(my, y)\n            f += 1\n            x = 0\n    print(max(c * f, max(mx * mx, my * my)))\n    t -= 1", "results = []\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    x = a.count('0')\n    y = n - x\n    res = x * y\n    cur = a[0]\n    cnt = 1\n    for i in range(1, n):\n        if cur == a[i]:\n            cnt += 1\n        else:\n            res = max(res, cnt * cnt)\n            cur = a[i]\n            cnt = 1\n    res = max(res, cnt * cnt)\n    results.append(res)\nprint('\\n'.join(map(str, results)))", "import sys\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    k = input().strip()\n    c1 = 0\n    c0 = 0\n    a = 0\n    b = 0\n    max1 = 0\n    max0 = 0\n    for i in k:\n        if i == '1':\n            c1 += 1\n            a += 1\n            max1 = max(a, max1)\n            b = 0\n        else:\n            b += 1\n            max0 = max(b, max0)\n            a = 0\n    print(max((n - c1) * c1, max1 ** 2, max0 ** 2))\n    t -= 1", "results = []\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    x = a.count('0')\n    y = n - x\n    res = x * y\n    cur = a[0]\n    cnt = 1\n    for i in range(1, n):\n        if cur == a[i]:\n            cnt += 1\n        else:\n            res = max(res, cnt * cnt)\n            cur = a[i]\n            cnt = 1\n    res = max(res, cnt * cnt)\n    results.append(res)\nprint('\\n'.join(map(str, results)))", "results = []\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    x = a.count('0')\n    y = n - x\n    res = x * y\n    cur = a[0]\n    cnt = 1\n    for i in range(1, n):\n        if cur == a[i]:\n            cnt += 1\n        else:\n            res = max(res, cnt * cnt)\n            cur = a[i]\n            cnt = 1\n    res = max(res, cnt * cnt)\n    results.append(res)\nprint('\\n'.join(map(str, results)))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    a = s.count('1')\n    m = a * (n - a)\n    s = s + '2'\n    c = s[0]\n    d = 0\n    for i in s:\n        if c == i:\n            d += 1\n        else:\n            m = max(m, d * d)\n            c = i\n            d = 1\n    print(m)", "import sys\ninput = sys.stdin.readline\n\ndef readList():\n    return list(map(int, input().split()))\n\ndef readInt():\n    return int(input())\n\ndef readInts():\n    return map(int, input().split())\n\ndef readStr():\n    return input().strip()\n\ndef solve():\n    n = readInt()\n    s = readStr()\n    ans = cnt = prev = 0\n    cnt += int(s[0])\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            ans = max(ans, (i - prev) ** 2)\n            prev = i\n        cnt += int(s[i])\n    ans = max(ans, (n - prev) ** 2)\n    return max(ans, cnt * (n - cnt))\nfor _ in range(int(input())):\n    print(solve())", "import sys\ninput = lambda : sys.stdin.readline().strip()\n\ndef getMax1(arr, n):\n    count = 0\n    result = 0\n    for i in range(0, n):\n        if arr[i] == '0':\n            count = 0\n        else:\n            count += 1\n            result = max(result, count)\n    return result\n\ndef getMax0(array, m):\n    count = 0\n    result = 0\n    for i in range(len(array)):\n        if array[i] == '1':\n            count = 0\n        else:\n            count += 1\n            result = max(result, count)\n    return result\nt = int(input())\nfor i in range(t):\n    tc = int(input())\n    inp = input()\n    if len(set(inp)) == 1:\n        print(len(inp) ** 2)\n    else:\n        x = getMax1(inp, len(inp))\n        y = getMax0(inp, len(inp))\n        a = inp.count('0')\n        b = inp.count('1')\n        print(max(x ** 2, y ** 2, a * b))", "import sys\ninput = sys.stdin.readline\nfor jj in range(int(input())):\n    n = int(input())\n    a = input()\n    kk = a.count('1')\n    ans = kk * (n - kk)\n    a = a + '2'\n    t = 0\n    ck = a[0]\n    m = 0\n    for i in a:\n        if i == ck:\n            t += 1\n        else:\n            m = max(m, t)\n            t = 1\n            ck = i\n    print(max(ans, m * m))", "import sys\ninput = sys.stdin.readline\nfor jj in range(int(input())):\n    n = int(input())\n    a = input()\n    kk = a.count('1')\n    ans = kk * (n - kk)\n    a = a + '2'\n    t = 0\n    ck = a[0]\n    m = 0\n    for i in a:\n        if i == ck:\n            t += 1\n        else:\n            m = max(m, t)\n            t = 1\n            ck = i\n    print(max(ans, m * m))", "from itertools import *\nfor s in [*open(0)][2::2]:\n    (x, y) = map(s.count, '01')\n    print(max([x * y] + [len([*g]) ** 2 for (k, g) in groupby(s)]))", "from itertools import *\nfor s in [*open(0)][2::2]:\n    (x, y) = map(s.count, '01')\n    print(max([x * y] + [len([*g]) ** 2 for (k, g) in groupby(s)]))", "from itertools import *\nfor s in [*open(0)][2::2]:\n    (x, y) = map(s.count, '01')\n    print(max([x * y] + [len([*g]) ** 2 for (k, g) in groupby(s)]))", "from sys import stdin\n\ndef cte(l, n):\n    c_0 = 0\n    c_1 = 0\n    subs = []\n    for i in range(n):\n        actual = l[i]\n        if actual == '0':\n            c_0 += 1\n            if c_1 != 0:\n                subs.append(c_1)\n                c_1 = 0\n        else:\n            c_1 += 1\n            if c_0 != 0:\n                subs.append(c_0)\n                c_0 = 0\n    if c_1 != 0 or c_0 != 0:\n        subs.append(max(c_1, c_0))\n    return max(subs)\n\ndef main():\n    cases = int(stdin.readline().strip())\n    for c in range(cases):\n        n = int(stdin.readline().strip())\n        st = list(stdin.readline().strip())\n        (a, b) = (st.count('1'), st.count('0'))\n        print(max(cte(st, n) ** 2, a * b))\nmain()", "import sys\nt = int(sys.stdin.readline())\nfor i in range(t):\n    n = int(sys.stdin.readline())\n    a = sys.stdin.readline().strip()\n    k = 1\n    xx = 1\n    for j in range(1, n):\n        if a[j - 1] == a[j]:\n            k += 1\n        else:\n            k = 1\n        xx = max(xx, k)\n    x = a.count('1')\n    y = a.count('0')\n    print(max(x * y, xx ** 2))", "import sys\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    k = input().strip()\n    count1 = 0\n    count0 = 0\n    a = 0\n    b = 0\n    maxcount1 = 0\n    maxcount0 = 0\n    for i in k:\n        if i == '1':\n            count1 += 1\n            a += 1\n            maxcount1 = max(a, maxcount1)\n            b = 0\n        else:\n            b += 1\n            maxcount0 = max(b, maxcount0)\n            a = 0\n    print(max((n - count1) * count1, maxcount1 ** 2, maxcount0 ** 2))\n    t -= 1", "from itertools import *\nfor s in [*open(0)][2::2]:\n    (x, y) = map(s.count, '01')\n    print(max([x * y] + [len([*g]) ** 2 for (k, g) in groupby(s)]))", "from itertools import *\nfor s in [*open(0)][2::2]:\n    (x, y) = map(s.count, '01')\n    print(max([x * y] + [len([*g]) ** 2 for (k, g) in groupby(s)]))", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    (max1, ct1, count1) = (0, 0, 0)\n    (max0, count0, ct0) = (0, 0, 0)\n    for k in s:\n        if k == '0':\n            ct0 += 1\n            max0 = max(max0, ct0)\n            ct1 = 0\n            count0 += 1\n        if k == '1':\n            ct1 += 1\n            max1 = max(max1, ct1)\n            ct0 = 0\n            count1 += 1\n    print(max(max1 ** 2, max0 ** 2, count1 * count0))", "import sys\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    k = input().strip()\n    count1 = 0\n    count0 = 0\n    a = 0\n    b = 0\n    max1 = 0\n    max0 = 0\n    for i in k:\n        if i == '1':\n            count1 += 1\n            a += 1\n            max1 = max(a, max1)\n            b = 0\n        else:\n            b += 1\n            max0 = max(b, max0)\n            a = 0\n    print(max((n - count1) * count1, max1 ** 2, max0 ** 2))\n    t -= 1", "from itertools import *\nfor k in [*open(0)][2::2]:\n    (x, y) = map(k.count, '01')\n    print(max([x * y] + [len([*g]) ** 2 for (k, g) in groupby(k)]))", "results = []\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    x = a.count('0')\n    y = n - x\n    res = x * y\n    cur = a[0]\n    cnt = 1\n    for i in range(1, n):\n        if cur == a[i]:\n            cnt += 1\n        else:\n            res = max(res, cnt * cnt)\n            cur = a[i]\n            cnt = 1\n    res = max(res, cnt * cnt)\n    results.append(res)\nprint('\\n'.join(map(str, results)))", "import sys\nsys.setrecursionlimit(10 ** 9)\ninput = lambda : sys.stdin.readline().strip()\nfrom collections import defaultdict, deque\nfrom heapq import heappop, heappush, heapify\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    x1 = s.count('1')\n    res1 = x1 * (n - x1)\n    x2 = 1\n    tx2 = 1\n    i = 0\n    while i < n - 1:\n        tx2 = 0\n        while i + 1 < n and s[i] == s[i + 1]:\n            tx2 += 1\n            i += 1\n            x2 = max(x2, tx2 + 1)\n        i += 1\n    print(max(res1, x2 * x2))", "from itertools import *\nfor s in [*open(0)][2::2]:\n    (x, y) = map(s.count, '01')\n    print(max([x * y] + [len([*g]) ** 2 for (k, g) in groupby(s)]))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    string = input()\n    (cur1, cur2) = (0, 0)\n    (mx1, mx2) = (0, 0)\n    for i in range(n):\n        if string[i] == '1':\n            cur1 += 1\n            mx1 = max(mx1, cur1)\n            cur2 = 0\n        elif string[i] == '0':\n            cur2 += 1\n            mx2 = max(cur2, mx2)\n            cur1 = 0\n    print(max(string.count('0') * string.count('1'), mx1 * mx1, mx2 * mx2))", "from itertools import *\nfor s in [*open(0)][2::2]:\n    (x, y) = map(s.count, '01')\n    print(max([x * y] + [len([*g]) ** 2 for (k, g) in groupby(s)]))", "from itertools import *\nfor s in [*open(0)][2::2]:\n    (x, y) = map(s.count, '01')\n    print(max([x * y] + [len([*g]) ** 2 for (k, g) in groupby(s)]))", "import math\nimport sys\ninput = lambda : sys.stdin.readline().strip()\nfor i in range(int(input())):\n    a = int(input())\n    b = input()\n\n    def Substring(s):\n        (ans, temp) = (1, 1)\n        for i in range(1, len(s)):\n            if s[i] == s[i - 1]:\n                temp += 1\n            else:\n                ans = max(ans, temp)\n                temp = 1\n        ans = max(ans, temp)\n        return ans\n    print(max(Substring(b) ** 2, b.count('0') * b.count('1')))", "from itertools import *\nfor s in [*open(0)][2::2]:\n    (x, y) = map(s.count, '01')\n    print(max([x * y] + [len([*g]) ** 2 for (k, g) in groupby(s)]))", "for i in [*open(0)][2::2]:\n    n = len(i)\n    g = i[0]\n    ans = 0\n    z = 1\n    e = 0\n    o = 0\n    e += g == '0'\n    o += g == '1'\n    for j in range(1, n):\n        if i[j] == g:\n            z += 1\n        else:\n            ans = max(ans, z * z)\n            z = 1\n            g = i[j]\n        e += g == '0'\n        o += g == '1'\n    ans = max(ans, z * z)\n    ans = max(ans, e * o)\n    print(ans)", "T = int(input())\nres = list()\nfor _ in range(T):\n    n = int(input())\n    s = input()\n    (x, y) = (s.count('0'), s.count('1'))\n    ans = x * y\n    i = 0\n    while i < len(s):\n        j = i\n        while i + 1 < len(s) and s[i + 1] == s[j]:\n            i += 1\n        ans = max(ans, (i - j + 1) * (i - j + 1))\n        i += 1\n    res.append(ans)\nprint('\\n'.join(list(map(str, res))))", "import sys\n\ndef input():\n    return sys.stdin.readline()\n\ndef print(x):\n    sys.stdout.write(f'{x}\\n')\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    (n0, n1, ans, c, l) = (0, 0, 1, 1, 1)\n    for (i, e) in enumerate(s):\n        if i and e == s[i - 1]:\n            c += 1\n        else:\n            l = max(l, c)\n            c = 1\n        n0 += s[i] == '0'\n    print(max(l * l, max(c * c, n0 * (n - n0))))", "from itertools import *\nfor s in [*open(0)][2::2]:\n    (x, y) = map(s.count, '01')\n    print(max([x * y] + [len([*g]) ** 2 for (k, g) in groupby(s)]))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    lst = list(input()[:-1])\n    (max_zero, max_one, mx_zero, mx_one) = (0, 0, 0, 0)\n    for i in lst:\n        if not int(i):\n            mx_zero += 1\n            max_zero = max(max_zero, mx_zero)\n            mx_one = 0\n        else:\n            mx_one += 1\n            max_one = max(max_one, mx_one)\n            mx_zero = 0\n    print(max(lst.count('0') * lst.count('1'), max_one ** 2, max_zero ** 2))", "t = int(input())\niota = []\nfor i in range(t):\n    n = int(input())\n    s = input()\n    (a, b) = (0, 0)\n    (l, r) = (0, 0)\n    (mxl, mxr) = (0, 0)\n    for j in range(n):\n        if s[j] == '0':\n            a += 1\n            if r > 0:\n                mxr = max(mxr, r)\n                r = 0\n            l += 1\n        else:\n            b += 1\n            if l > 0:\n                mxl = max(mxl, l)\n                l = 0\n            r += 1\n    mxl = max(mxl, l)\n    mxr = max(mxr, r)\n    res = max([mxl ** 2, mxr ** 2, a * b])\n    iota.append(res)\nprint('\\n'.join([str(k) for k in iota]))", "from typing import Sequence\n\ndef begin(n: int, nums: Sequence):\n    maxNum = 0\n    currOne = 0\n    currZero = 0\n    one = 0\n    zero = 0\n    for i in range(len(nums)):\n        if nums[i] == '0':\n            zero += 1\n            currOne = 0\n            currZero += 1\n            maxNum = max(maxNum, currZero)\n        else:\n            one += 1\n            currZero = 0\n            currOne += 1\n            maxNum = max(maxNum, currOne)\n    res = max(one * zero, maxNum * maxNum)\n    return res\ncaseNum = int(input())\nallnums = []\nfor i in range(0, caseNum):\n    n = int(input())\n    allnums.append(input())\nresult = [begin(n, cheeses) for cheeses in allnums]\nfor item in result:\n    print(item)", "fl = 'input.txt'\nimport sys\nimport math\nflh = sys.stdin\ntest_cases = int(flh.readline())\nres = []\nfor case in range(test_cases):\n    n = int(flh.readline())\n    s = flh.readline().strip()\n    summ = sum([int(i) for i in s])\n    a1 = summ * (len(s) - summ)\n    count = 0\n    max0 = 0\n    for i in range(len(s)):\n        if count == 0:\n            count += 1\n        elif s[i] == s[i - 1]:\n            count += 1\n        else:\n            max0 = max(max0, count)\n            count = 1\n    if count > 0:\n        max0 = max(max0, count)\n    print(max(a1, max0 * max0))", "from collections import Counter\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        counter = dict()\n        counter['0'] = 0\n        counter['1'] = 0\n        nums = input()\n        maxOnes = 0\n        maxZeros = 0\n        countZeros = 0\n        countOnes = 0\n        for i in range(n):\n            counter[nums[i]] += 1\n            if nums[i] == '0':\n                countZeros += 1\n                countOnes = 0\n            else:\n                countOnes += 1\n                countZeros = 0\n            maxZeros = max(maxZeros, countZeros)\n            maxOnes = max(maxOnes, countOnes)\n        print(max(counter['0'] * counter['1'], maxZeros ** 2, maxOnes ** 2))\nmain()", "import sys\ninput = lambda : sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    a = 0\n    b = 0\n    c = 0\n    x = 1\n    for i in range(n):\n        if i != 0:\n            if s[i] == s[i - 1]:\n                c += 1\n            else:\n                x = max(x, (c + 1) * (c + 1))\n                c = 0\n        a += s[i] == '0'\n        b += s[i] == '1'\n    x = max(x, (c + 1) * (c + 1))\n    print(max(a * b, x))", "import sys\ninput = lambda : sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    zx = len(s.replace('0', ''))\n    zx = zx * (n - zx)\n    print(max(len(max(list(s.split('0')))) ** 2, zx, len(max(list(s.split('1')))) ** 2))", "import sys\n\ndef input():\n    return sys.stdin.readline().strip()\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    x = 0\n    y = 0\n    c = 0\n    d = 0\n    m = []\n    n = []\n    for j in s:\n        if j == '0':\n            x += 1\n            if y != 0:\n                n.append(y)\n                y = 0\n            c += 1\n        else:\n            y += 1\n            if x != 0:\n                m.append(x)\n                x = 0\n            d += 1\n        m.append(x)\n        n.append(y)\n    a = max(m)\n    b = max(n)\n    e = c * d\n    print(max(a * a, b * b, e))", "n = int(input())\nans = []\nfor _ in range(n):\n    m = int(input())\n    s = input()\n    cnt = 1\n    res = 1\n    (c0, c1) = (1, 0)\n    for i in range(1, m):\n        if s[i] == s[i - 1]:\n            cnt += 1\n        else:\n            cnt = 1\n        res = max(res, cnt)\n        if s[i] == s[0]:\n            c0 += 1\n        else:\n            c1 += 1\n    ans.append(max(res ** 2, c0 * c1))\nfor a in ans:\n    print(a)", "import sys\nimport math\nFILE = False\nif FILE:\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef get_int():\n    return int(sys.stdin.readline())\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef write_int(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef write_list(list):\n    sys.stdout.write(' '.join(map(str, list)) + '\\n')\n\ndef compute_cost(x, y):\n    if x == 0:\n        return y * y\n    if y == 0:\n        return x * x\n    return x * y\ntest_cases = get_int()\nfor test in range(test_cases):\n    num1 = 0\n    num0 = 0\n    result = 0\n    remove = 0\n    n = get_int()\n    max_cost = math.inf\n    input = sys.stdin.readline().strip()\n    num1 = sum([int(i) for i in input])\n    num0 = len(input) - num1\n    if num1 == num0:\n        print(num1 * num0)\n    else:\n        result = compute_cost(num1, num0)\n        if num1 > num0:\n            find = '1'\n        else:\n            find = '0'\n        l = 0\n        r = 0\n        nums0 = 0\n        while r < n:\n            if input[r] == find:\n                nums0 += 1\n                result = max(result, nums0 * nums0)\n            else:\n                nums0 = 0\n                l = r + 1\n            r += 1\n        print(result)", "from typing import Sequence\n\ndef begin(n: int, nums: Sequence):\n    maxNum = 0\n    currOne = 0\n    currZero = 0\n    one = 0\n    zero = 0\n    for i in range(len(nums)):\n        if nums[i] == '0':\n            zero += 1\n            currOne = 0\n            currZero += 1\n            maxNum = max(maxNum, currZero)\n        else:\n            one += 1\n            currZero = 0\n            currOne += 1\n            maxNum = max(maxNum, currOne)\n    res = max(one * zero, maxNum * maxNum)\n    print(res)\ncaseNum = int(input())\nallnums = []\nfor i in range(0, caseNum):\n    n = int(input())\n    allnums.append(input())\nfor cheeses in allnums:\n    begin(n, cheeses)", "k = int(input())\nresult = []\nfor i in range(k):\n    op = int(input())\n    f = input()\n    most1 = 0\n    cnt1 = 0\n    most0 = 0\n    cnt0 = 0\n    yek = 0\n    for i in f:\n        if i == '1':\n            cnt0 = 0\n            yek += 1\n            cnt1 += 1\n            if cnt1 >= most1:\n                most1 = cnt1\n        else:\n            cnt1 = 0\n            cnt0 += 1\n            if cnt0 >= most0:\n                most0 = cnt0\n    result.append(max(max(most0 ** 2, most1 ** 2), (op - yek) * yek))\nfor i in result:\n    print(i)", "def value_of_str(str):\n    x = str.count('0')\n    y = str.count('1')\n    if x > 0 and y > 0:\n        return x * y\n    if x > 0:\n        return x * x\n    return y * y\nturns = int(input())\nresult = []\nfor _ in range(turns):\n    values = []\n    n = int(input())\n    str = input()\n    num_of_0 = 1\n    str0 = '0'\n    while str0 in str:\n        num_of_0 += 1\n        str0 = '0' * num_of_0\n    num_of_1 = 1\n    str1 = '1'\n    while str1 in str:\n        num_of_1 += 1\n        str1 = '1' * num_of_1\n    num_of_0 -= 1\n    num_of_1 -= 1\n    result.append(max(value_of_str(str), num_of_0 * num_of_0, num_of_1 * num_of_1))\nfor res in result:\n    print(res)", "n = int(input())\nans = []\nfor k in range(n):\n    a = int(input())\n    st = input()\n    i = 0\n    i1 = 0\n    maxi = 0\n    o = 0\n    o1 = 0\n    maxo = 0\n    for j in range(a):\n        if st[j] == '1':\n            i = i + 1\n            i1 = i1 + 1\n            if j == a - 1 or st[j + 1] == '0':\n                maxi = max(i, maxi)\n                i = 0\n        else:\n            o = o + 1\n            o1 = o1 + 1\n            if j == a - 1 or st[j + 1] == '1':\n                maxo = max(maxo, o)\n                o = 0\n    a = maxo * maxo\n    b = maxi * maxi\n    c = o1 * i1\n    ans.append(max(a, b, c))\nprint(*ans, sep='\\n')", "import math\nimport re\nimport sys\nfrom turtle import st\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef main():\n    t = inp()\n    res = []\n    for i in range(t):\n        n = inp()\n        bin = input()\n        num0 = 0\n        num1 = 0\n        for idx in range(n):\n            if bin[idx] == '0':\n                num0 += 1\n            if bin[idx] == '1':\n                num1 += 1\n        num0_con = 0\n        num1_con = 0\n        max_num0_con = 0\n        max_num1_con = 0\n        for idx in range(n):\n            if bin[idx] == '0':\n                num0_con += 1\n            if bin[idx] == '1' or idx == n - 1:\n                max_num0_con = max(max_num0_con, num0_con)\n                num0_con = 0\n        for idx in range(n):\n            if bin[idx] == '1':\n                num1_con += 1\n            if bin[idx] == '0' or idx == n - 1:\n                max_num1_con = max(max_num1_con, num1_con)\n                num1_con = 0\n        if num0 == 0:\n            res.append(num1 * num1)\n            continue\n        if num1 == 0:\n            res.append(num0 * num0)\n            continue\n        res.append(max([num0 * num1, max_num0_con * max_num0_con, max_num1_con * max_num1_con]))\n    for r in res:\n        print(r)\nmain()", "def Kolvo10(strok):\n    n = len(strok)\n    i = 0\n    K0 = 0\n    K1 = 1\n    while i < n:\n        k0 = 0\n        k1 = 0\n        while strok[i] == '0':\n            k0 += 1\n            i += 1\n            if i == len(strok):\n                break\n        if k0 > K0:\n            K0 = k0\n        if i == len(strok):\n            break\n        while strok[i] == '1':\n            k1 += 1\n            i += 1\n            if i == len(strok):\n                break\n        if k1 > K1:\n            K1 = k1\n        if i == len(strok):\n            break\n    return max(K0 * K0, K1 * K1)\nt = int(input())\nans = []\nfor i in range(t):\n    n = int(input())\n    strok = input()\n    x = 0\n    y = 0\n    for j in range(n):\n        if strok[j] == '0':\n            x += 1\n        else:\n            y += 1\n    ans.append(max(Kolvo10(strok), x * y))\nfor elem in ans:\n    print(elem)", "import sys\ninput = sys.stdin.readline\n\ndef print(*args, end='\\n', sep=' ') -> None:\n    sys.stdout.write(sep.join(map(str, args)) + end)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().strip()))\n    x = sum(l)\n    y = n - x\n    res = x * y\n    col_0 = 0\n    col_1 = 0\n    ans_col = 0\n    for i in range(n):\n        if l[i] == 1:\n            col_1 += 1\n            col_0 = 0\n        else:\n            col_1 = 0\n            col_0 += 1\n        ans_col = max(col_1, col_0, ans_col)\n    if res >= ans_col ** 2:\n        print(res)\n    else:\n        print(ans_col ** 2)", "def solve(size, s):\n    c_0 = s.count('0')\n    c_1 = s.count('1')\n    maxi = -1\n    if c_0 != 0 and c_1 != 0:\n        maxi = c_0 * c_1\n    elif c_1 == 0:\n        maxi = c_0 ** 2\n    else:\n        maxi = c_1 ** 2\n    max_consq0 = 0\n    max_consq1 = 0\n    prev_char = s[0]\n    count = 1\n    for i in range(1, size):\n        if s[i] == prev_char:\n            count += 1\n        else:\n            if prev_char == '0':\n                if count > max_consq0:\n                    max_consq0 = count\n            elif count > max_consq1:\n                max_consq1 = count\n            prev_char = s[i]\n            count = 1\n    if prev_char == '0':\n        if count > max_consq0:\n            max_consq0 = count\n    if prev_char == '1':\n        if count > max_consq1:\n            max_consq1 = count\n    if max((max_consq0 ** 2, max_consq1 ** 2)) > maxi:\n        maxi = max((max_consq0 ** 2, max_consq1 ** 2))\n    print(maxi)\nno_testcase = int(input())\nproblems = []\nfor i in range(no_testcase):\n    problems.append((int(input()), input()))\nfor each in problems:\n    solve(each[0], each[1])", "import sys\ninput = lambda : sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    x = int(input())\n    s = input()\n    a = len(sorted(list(map(str, s.split('0'))))[-1])\n    a = max(a, len(sorted(list(map(str, s.split('1'))))[-1]))\n    c = s.count('0')\n    print(max(a ** 2, c * (x - c)))", "import sys\ninput = lambda : sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    x = int(input())\n    s = input()\n    a = len(sorted(list(map(str, s.split('0'))))[-1])\n    a = max(a, len(sorted(list(map(str, s.split('1'))))[-1]))\n    c = s.count('0')\n    print(max(a ** 2, c * (x - c)))", "n = int(input())\nl = []\nfor i in range(n):\n    a = int(input())\n    k = input()\n    x = k.count('0')\n    y = k.count('1')\n    max1 = 1\n    max0 = 1\n    um = 0\n    num = 0\n    for i in range(a):\n        if k[i] == '1':\n            um += 1\n            num = 0\n        else:\n            num += 1\n            um = 0\n        if um > max1:\n            max1 = um\n        if num > max0:\n            max0 = num\n    l.append(max(max1 ** 2, max0 ** 2, x * y))\nfor i in range(n):\n    print(l[i], end='\\n')", "t = int(input())\nans = []\nfor _ in range(t):\n    n = int(input())\n    s = str(input())\n    maxm = i = p = 0\n    while i < n:\n        cnt = 0\n        while i < n and s[i] == '0':\n            cnt += 1\n            i += 1\n            p += 1\n        maxm = max(maxm, cnt ** 2)\n        cnt = 0\n        while i < n and s[i] == '1':\n            cnt += 1\n            i += 1\n        maxm = max(maxm, cnt ** 2)\n    maxm = max(maxm, p * (n - p))\n    ans.append(maxm)\nfor i in ans:\n    print(i)", "t = int(input())\nout = []\nfor i in range(t):\n    n = int(input())\n    st = input()\n    x2 = 0\n    y2 = 0\n    x = st.count('0')\n    y = st.count('1')\n    len0 = 0\n    len1 = 0\n    xy = x * y\n    for k in range(n):\n        if st[k] == '0':\n            len1 = 0\n            len0 += 1\n            x2 = max(x2, len0)\n        else:\n            len0 = 0\n            len1 += 1\n            y2 = max(y2, len1)\n    x2 = x2 ** 2\n    y2 = y2 ** 2\n    out.append(max(x2, y2, xy))\nfor i in out:\n    print(i)", "from collections import Counter\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        nums = input()\n        numbers = Counter(nums)\n        maxOnes = 0\n        maxZeros = 0\n        countZeros = 0\n        countOnes = 0\n        for i in range(n):\n            if nums[i] == '0':\n                countZeros += 1\n                countOnes = 0\n            else:\n                countOnes += 1\n                countZeros = 0\n            maxZeros = max(maxZeros, countZeros)\n            maxOnes = max(maxOnes, countOnes)\n        print(max(numbers['0'] * numbers['1'], maxZeros ** 2, maxOnes ** 2))\nmain()", "a = int(input())\nsp = []\nk = 0\nfor i in range(a):\n    b = int(input())\n    c = input()\n    a1 = 0\n    k1 = 0\n    k0 = 0\n    a0 = 0\n    h = 0\n    pok = 0\n    sty = []\n    for j in c:\n        if j == '1':\n            k1 += 1\n        else:\n            k0 += 1\n    for j in range(len(c) - 1):\n        if c[j] == '1':\n            a1 += 1\n        if c[j] == '1' and c[j + 1] == '0':\n            sty.append(a1)\n            a1 = 0\n        if c[j] == '0':\n            a0 += 1\n        if c[j] == '0' and c[j + 1] == '1':\n            sty.append(a0)\n            a0 = 0\n        pok += 1\n    if c[b - 1] == '1' and a1 >= a0:\n        sty.append(a1 + 1)\n    elif c[b - 1] == '0' and a0 >= a1:\n        sty.append(a0 + 1)\n    else:\n        sty.append(max(a1, a0))\n        sty.append(1)\n    sp.append(max(max(sty) ** 2, k1 * k0))\nfor i in sp:\n    print(i)", "t = int(input())\ndict = {}\nr1 = []\nresult = []\nfor i in range(t):\n    n = int(input())\n    ar = [int(x) for x in input()]\n    for j in ar:\n        if j not in dict:\n            dict[j] = 1\n        else:\n            dict[j] += 1\n    c = 1\n    for j in range(1, n):\n        if ar[j] == ar[j - 1]:\n            c += 1\n        else:\n            r1.append(c)\n            c = 1\n    r1.append(c)\n    if max(r1) ** 2 > dict.get(0, 0) * dict.get(1, 0):\n        result.append(max(r1) ** 2)\n    else:\n        result.append(dict[0] * dict[1])\n    r1.clear()\n    dict.clear()\nfor i in range(t):\n    print(result[i])", "def solve():\n    t = int(input())\n    while t:\n        t -= 1\n        N = int(input())\n        s = input()\n        zero = 0\n        one = 0\n        prev = s[0]\n        count = 0\n        (zeros, ones) = (0, 0)\n        for c in s:\n            if c == '0':\n                zeros += 1\n            else:\n                ones += 1\n            if prev == c:\n                count += 1\n            else:\n                if prev == '0':\n                    if zero <= count:\n                        zero = count\n                if prev == '1':\n                    if one <= count:\n                        one = count\n                count = 1\n                prev = c\n        if prev == '0':\n            if zero <= count:\n                zero = count\n        if prev == '1':\n            if one <= count:\n                one = count\n        res = max(zero * zero, zeros * ones, one * one)\n        print(res)\nsolve()", "import os, sys\nfrom io import BytesIO, IOBase\nfrom collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    if n == 1:\n        print(1)\n    elif n == 2:\n        if s[0] == s[1]:\n            print(4)\n        else:\n            print(1)\n    elif n == 3:\n        if s[1] == s[0] == s[2]:\n            print(9)\n        elif s[1] == s[0] or s[1] == s[2]:\n            print(4)\n        else:\n            print(2)\n    else:\n        count = 1\n        curnt_cnt = 1\n        prev = s[0]\n        for i in range(1, n):\n            if s[i] == prev:\n                curnt_cnt += 1\n            else:\n                count = max(curnt_cnt, count)\n                curnt_cnt = 1\n                prev = s[i]\n        count = max(curnt_cnt, count)\n        cnt = Counter(s)\n        print(max(count ** 2, cnt['0'] * cnt['1']))", "test_cases = int(input())\nfor _ in range(test_cases):\n    input()\n    s = input()\n    if len(s) == 1:\n        print(1)\n        continue\n    (x, y) = (0, 0)\n    (max_g1, max_g0) = (0, 0)\n    (temp1, temp0) = (0, 0)\n    for i in s:\n        if i == '1':\n            temp1 += 1\n            y += 1\n            temp0 = 0\n            if temp1 >= max_g1:\n                max_g1 = temp1\n        else:\n            temp0 += 1\n            x += 1\n            temp1 = 0\n            if temp0 >= max_g0:\n                max_g0 = temp0\n    if x * y >= max_g1 ** 2 and x * y >= max_g0 ** 2:\n        print(x * y)\n    elif max_g1 ** 2 >= x * y and max_g1 ** 2 >= max_g0 ** 2:\n        print(max_g1 ** 2)\n    else:\n        print(max_g0 ** 2)", "def start_codeforces():\n    a = int(input())\n    while a != 0:\n        a -= 1\n        a2 = 0\n        c = 0\n        d = 0\n        san = int(input())\n        text = input()\n        count = 1\n        if text[0] == '1':\n            c += 1\n        else:\n            d += 1\n        for i in range(1, san):\n            if text[i] == text[i - 1]:\n                count += 1\n            else:\n                a2 = max(a2, count)\n                count = 1\n            if text[i] == '1':\n                c += 1\n            else:\n                d += 1\n        a2 = max(a2, count)\n        if a2 * a2 > c * d:\n            print(a2 ** 2)\n        else:\n            print(c * d)\nstart_codeforces()", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if n == 1:\n        print(1)\n    else:\n        a = s.count('1')\n        b = s.count('0')\n        ans = a * b\n        g = 1\n        temp = 1\n        for i in range(n - 1):\n            if s[i] == s[i + 1]:\n                temp += 1\n            else:\n                g = max(g, temp)\n                temp = 1\n        g = max(g, temp)\n        g = g * g\n        ans = max(g, ans)\n        print(ans)", "def longest(s):\n    maximum = count = 0\n    current = ''\n    for c in s:\n        if c == current:\n            count += 1\n        else:\n            count = 1\n            current = c\n        if count > maximum:\n            maximum = count\n    return maximum\n\ndef solve(s, length):\n    try:\n        no_mix = longest(s)\n        z = s.count('0')\n        mix = z * (int(length) - z)\n        r = no_mix * no_mix\n        if mix > r:\n            print(mix)\n        else:\n            print(r)\n    except Exception as e:\n        print(e.with_traceback())\n        print(length * length)\nfor i in range(int(input())):\n    length = int(input())\n    s = input()\n    solve(s, length)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = input()\n    oc = a.count('1')\n    zc = a.count('0')\n    if oc == 0:\n        print(zc ** 2)\n        continue\n    if zc == 0:\n        print(oc ** 2)\n        continue\n    best = 1\n    mc = 1\n    for i in range(len(a) - 1):\n        if a[i + 1] == a[i]:\n            mc += 1\n            if mc > best:\n                best = mc\n        else:\n            if mc > best:\n                best = mc\n            mc = 1\n            if best >= len(a) - (i + 1):\n                break\n    print(max(best ** 2, oc * zc))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    z = s.count('0')\n    if z == n:\n        print(z * z)\n        continue\n    o = len(s) - z\n    if o == n:\n        print(o * o)\n        continue\n    m = z * o\n    c = math.ceil(math.sqrt(m))\n    if '1' * c in s:\n        while '1' * (c + 1) in s:\n            c += 1\n        if c < n // 2:\n            while '0' * (c + 1) in s:\n                c += 1\n        print(c * c)\n    elif '0' * c in s:\n        while '0' * (c + 1) in s:\n            c += 1\n        if c < n // 2:\n            while '1' * (c + 1) in s:\n                c += 1\n        print(c * c)\n    else:\n        print(m)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    if n == 1:\n        print('1')\n        continue\n    (b, d) = (0, 0)\n    for i in range(n - 1):\n        if a[i] == a[i + 1]:\n            d += 1\n        else:\n            b = max(b, d)\n            d = 0\n    b = max(b, d)\n    b += 1\n    x = a.count('0')\n    y = a.count('1')\n    print(max(x * y, b * b))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if n == 1:\n        print('1')\n        continue\n    a = s.count('1')\n    b = s.count('0')\n    m = a * b\n    maxx = 0\n    d = 1\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            d += 1\n        else:\n            maxx = max(maxx, d)\n            d = 1\n    maxx = max(maxx, d)\n    print(max(m, maxx * maxx))", "for i in range(int(input())):\n    input()\n    s = input()\n    x = s.count('0')\n    y = s.count('1')\n    if x == 0:\n        print(y ** 2)\n    elif y == 0:\n        print(x ** 2)\n    else:\n        count = 0\n        a = '0'\n        b = '1'\n        while s.count(a) > 0 or s.count(b) > 0:\n            count += 1\n            a += '0'\n            b += '1'\n        print(max(x * y, count ** 2))", "for _ in range(int(input())):\n    n = int(input())\n    s = list(input())\n    x = s.count('0')\n    y = s.count('1')\n    ans = x * y\n    count = 1\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            count += 1\n        else:\n            m = count * count\n            if m > ans:\n                ans = m\n            count = 1\n    m = count * count\n    if m > ans:\n        ans = m\n    print(ans)", "def longest(l, r):\n    k = 1\n    u = 0\n    for i in range(len(l) - 1):\n        if l[i] == l[i + 1]:\n            k = k + 1\n        else:\n            if k > u:\n                u = k\n            k = 1\n    if k > u:\n        u = k\n    if u * u > r:\n        return u * u\n    else:\n        return r\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(input())\n    r = l.count('0') * l.count('1')\n    print(longest(l, r))", "k = int(input())\nfor z in range(k):\n    trash = int(input())\n    number = str(input())\n    ee = len(number)\n    if ee == 0:\n        print(0)\n    elif ee == 1:\n        print(1)\n    else:\n        coun = 0\n        checker = '0'\n        counter = 0\n        maxcounter = 0\n        for x in number:\n            if x == '1':\n                coun += 1\n            if x == checker:\n                counter += 1\n            elif x != checker:\n                maxcounter = counter if maxcounter < counter else maxcounter\n                counter = 1\n                checker = x\n        maxcounter = counter if maxcounter < counter else maxcounter\n        if maxcounter ** 2 > coun * (len(number) - coun):\n            print(maxcounter ** 2)\n        else:\n            print(coun * (len(number) - coun))", "t = int(input())\nfor ii in range(t):\n    n = int(input())\n    s = input()\n    ans = 0\n    x = s.count('0')\n    y = s.count('1')\n    if x == 0:\n        ans = y * y\n    elif y == 0:\n        ans = x * x\n    else:\n        ans = x * y\n    z = 1\n    a = 0\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            a = z * z\n            if a > ans:\n                ans = a\n            z = 1\n        else:\n            z += 1\n    a = z * z\n    if a > ans:\n        ans = a\n    print(ans)", "a = int(input())\nwhile a:\n    a -= 1\n    d = int(input())\n    c = input()\n    tmp1 = 0\n    max1 = 0\n    a1 = 0\n    flag = c[0]\n    for i in c:\n        if i == '1':\n            a1 += 1\n        if flag == i:\n            tmp1 += 1\n        else:\n            max1 = max(tmp1, max1)\n            tmp1 = 1\n            flag = i\n    max1 = max(tmp1, max1)\n    a0 = d - a1\n    print(max([a1 * a0, max1 * max1]))", "def b():\n    t = int(input())\n    for _ in range(t):\n        _ = int(input())\n        s = input()\n        max_ones = max_zeros = 0\n        ones_in_row = zeros_in_row = 0\n        ones = zeros = 0\n        for char in s:\n            if char == '1':\n                ones += 1\n                ones_in_row += 1\n                zeros_in_row = 0\n                max_ones = max(max_ones, ones_in_row)\n            elif char == '0':\n                zeros += 1\n                zeros_in_row += 1\n                ones_in_row = 0\n                max_zeros = max(max_zeros, zeros_in_row)\n        max_ones = max(max_ones, ones_in_row)\n        max_zeros = max(max_zeros, zeros_in_row)\n        print(max(max_ones * max_ones, max_zeros * max_zeros, ones * zeros))\nb()", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = 1\n    gp = 1\n    for i in range(1, len(s)):\n        if s[i - 1] == s[i]:\n            gp += 1\n            ans = max(ans, gp * gp)\n        else:\n            gp = 1\n    ans = max(ans, s.count('0') * s.count('1'))\n    print(ans)", "def main():\n    tc = int(input())\n    for i in range(tc):\n        l = int(input())\n        st = input()\n        cnt = 1\n        ans = 1\n        for i in range(l - 1):\n            if st[i] == st[i + 1]:\n                cnt += 1\n            else:\n                cnt = 1\n            ans = max(cnt, ans)\n        (one, zero) = (0, 0)\n        for i in range(l):\n            if st[i] == '1':\n                one += 1\n            else:\n                zero += 1\n        tmp = one * zero % 100000000000\n        tmp2 = ans * ans % 100000000000\n        if tmp2 > tmp:\n            print(tmp2)\n        else:\n            print(tmp)\nmain()", "t = int(input())\nfor i in range(t):\n    l = int(input())\n    s = str(input())\n    c = 0\n    c_max = 0\n    temp = str(s[0])\n    z = 0\n    o = 0\n    for a in s:\n        if a == temp:\n            c = c + 1\n        else:\n            c = 1\n        if a == '0':\n            z = z + 1\n        else:\n            o = o + 1\n        temp = a\n        if c_max < c:\n            c_max = c\n    if c_max * c_max >= z * o:\n        print(c_max * c_max)\n    else:\n        print(z * o)", "t = int(input())\nfor _ in range(t):\n    (n, s) = (int(input()), input())\n    (res, cur) = (0, 1)\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            cur += 1\n        else:\n            (res, cur) = (max(res, cur), 1)\n    res = max(res * res, cur * cur, (z := s.count('0')) * (n - z))\n    print(res)", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = max(s.count('0') * s.count('1'), 1)\n    c = 1\n    for j in range(1, n):\n        if s[j] == s[j - 1]:\n            c += 1\n        else:\n            c = 1\n        ans = max(ans, c * c)\n    print(ans)", "n = int(input())\nfor i in range(n):\n    t = int(input())\n    str = input()\n    length = 0\n    L = 0\n    if len(str) == 1:\n        print(1)\n    else:\n        for j in range(t - 1):\n            if str[j] != str[j + 1]:\n                length += 1\n                L = max(L, length)\n                length = 0\n            else:\n                length += 1\n        if length != 0:\n            length += 1\n            L = max(L, length)\n        L2 = str.count('0') * str.count('1')\n        print(max(L2, L ** 2))", "def solve(case_no: int):\n    n = int(input())\n    string = input()\n    (max_1s, max_0s) = (0, 0)\n    (left, right) = (0, 0)\n    (ones, zeros) = (0, 0)\n    for i in string:\n        if i == '0':\n            right += 1\n            zeros += 1\n            max_1s = max(max_1s, left)\n            left = 0\n        else:\n            left += 1\n            ones += 1\n            max_0s = max(max_0s, right)\n            right = 0\n    (max_1s, max_0s) = (max(max_1s, left), max(max_0s, right))\n    print(max(ones * zeros, max_0s * max_0s, max_1s * max_1s))\ntest_case = int(input())\nfor _ in range(test_case):\n    solve(_ + 1)"]