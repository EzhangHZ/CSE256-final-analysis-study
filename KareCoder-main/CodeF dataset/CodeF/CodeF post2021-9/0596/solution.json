["def divisible_by_25(s):\n    n = len(s)\n    if n < 2:\n        if s == '0' or s == '_' or s == 'X':\n            return 1\n        return 0\n    b = s[:n - 2]\n    e = s[n - 2:]\n    valid_endings = ['25', '50', '75']\n    if n >= 3:\n        valid_endings = ['00', '25', '50', '75']\n    total = 0\n    for valid_ending in valid_endings:\n        (valid, x) = can_be_made(valid_ending, e)\n        if not valid:\n            continue\n        total += count_variants(x, b)\n    return total\n\ndef can_be_made(valid_ending, e):\n    if e == '__':\n        return (True, None)\n    for underscore in ['0', '2', '5', '7']:\n        for x in ['X', '0', '2', '5', '7']:\n            e_ = e.replace('X', x)\n            e_ = e_.replace('_', underscore)\n            if e_ == valid_ending:\n                if x == 'X':\n                    x = None\n                return (True, x)\n    return (False, None)\n\ndef count_variants(x, b):\n    if b == '':\n        return 1\n    if b[0] == '0':\n        return 0\n    total = 1\n    if b[0] == 'X':\n        if x == '0':\n            return 0\n        if x is None:\n            total *= 9\n            x = '1'\n    if b[0] == '_':\n        total *= 9\n    for ch in b[1:]:\n        if ch == '_':\n            total *= 10\n        if ch == 'X':\n            if x is None:\n                total *= 10\n                x = '1'\n    return total\ns = input()\nprint(divisible_by_25(s))", "def check(s, i):\n    if i == len(s):\n        x = ''.join(s)\n        if x[0] == '0' and x != '0':\n            return 0\n        if int(x) % 25 == 0:\n            return 1\n        return 0\n    res = 0\n    if s[i] == '_':\n        if i != 0 and i < len(s) - 2:\n            s[i] = '1'\n            res += 10 * check(s, i + 1)\n        else:\n            for j in range(10):\n                s[i] = str(j)\n                res += check(s, i + 1)\n        s[i] = '_'\n        return res\n    else:\n        return check(s, i + 1)\ninp = input()\ntotal = 0\nif 'X' in inp:\n    for i in range(10):\n        s = inp\n        s = s.replace('X', str(i))\n        total += check(list(s), 0)\nelse:\n    total = check(list(inp), 0)\nprint(total)"]