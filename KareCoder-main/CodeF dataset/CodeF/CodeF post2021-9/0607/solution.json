["import math\nmemo = {}\n\ndef divisors(n):\n    if n in memo:\n        return memo[n]\n    divs = [1]\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divs.extend([i, int(n / i)])\n    divs.extend([n])\n    memo[n] = list(set(divs))\n    return memo[n]\nfor t in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    mxK = 0\n    for j in nums:\n        diff = [x - j for x in nums]\n        k = max(diff)\n        cnt = diff.count(0)\n        if cnt >= n / 2:\n            mxK = -1\n            break\n        cnt_div = {}\n        for i in diff:\n            if i > 0:\n                divs = divisors(i)\n                for d in divs:\n                    cnt_div[d] = cnt_div.get(d, 0) + 1\n        cnt_div = sorted(cnt_div.items(), reverse=True)\n        for (u, v) in cnt_div:\n            if v + cnt >= n / 2:\n                mxK = max(mxK, u)\n    print(mxK if mxK > 0 else -1)", "import math\n\ndef half_the_same(n, a):\n    best_divisor = float('-inf')\n    a.sort()\n    if a[0] == a[-1]:\n        return -1\n    for i in range(n // 2 + 1):\n        if i >= 1 and a[i] == a[i - 1]:\n            for divisor in counts_by_divisor:\n                counts_by_divisor[divisor] += 1\n            counts_by_divisor[float('inf')] -= 1\n        else:\n            counts_by_divisor = {}\n            for j in range(i + 1, n):\n                diff = a[j] - a[i]\n                for divisor in get_divisors(diff):\n                    if divisor in counts_by_divisor:\n                        counts_by_divisor[divisor] += 1\n                    else:\n                        counts_by_divisor[divisor] = 1\n        for (divisor, count) in counts_by_divisor.items():\n            if count >= n // 2 - 1:\n                if divisor > best_divisor:\n                    best_divisor = divisor\n        if best_divisor == float('inf'):\n            return -1\n    return best_divisor\n\ndef get_divisors(value):\n    if value == 0:\n        yield float('inf')\n        return\n    m = int(math.ceil(math.sqrt(value)))\n    for d in range(1, m + 1):\n        if value % d == 0:\n            e = value // d\n            if d < e:\n                yield d\n                yield e\n            elif d == e:\n                yield d\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    print(half_the_same(n, a))", "def solve():\n    n = int(input())\n    arr = sorted(list(map(int, input().split())))\n    d = dict()\n    temp = 0\n    for x in arr:\n        d[x] = d[x] + 1 if x in d else 1\n        temp = max(temp, d[x])\n    if temp >= n // 2:\n        print(-1)\n        return\n    ans = 0\n    prev = None\n    for i in range(n // 2 + 1):\n        if arr[i] == prev:\n            continue\n        prev = arr[i]\n        diff = [abs(arr[i] - arr[j]) for j in range(i + 1, n)]\n        factors = dict()\n        factors[1] = 0\n        add = 0\n        for x in diff:\n            if x == 0:\n                add += 1\n                continue\n            y = 1\n            while y * y <= x:\n                if x % y == 0:\n                    if y in factors:\n                        factors[y] += 1\n                    else:\n                        factors[y] = 1\n                    if y != x // y:\n                        if x // y in factors:\n                            factors[x // y] += 1\n                        else:\n                            factors[x // y] = 1\n                y += 1\n        for x in factors:\n            if factors[x] + add + 1 >= n // 2:\n                ans = max(ans, x)\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "def solve():\n    n = int(input())\n    arr = sorted(list(map(int, input().split())))\n    d = dict()\n    temp = 0\n    for x in arr:\n        d[x] = d[x] + 1 if x in d else 1\n        temp = max(temp, d[x])\n    if temp >= n // 2:\n        print(-1)\n        return\n    ans = 0\n    prev = None\n    for i in range(n // 2 + 1):\n        if arr[i] == prev:\n            continue\n        prev = arr[i]\n        diff = [abs(arr[i] - arr[j]) for j in range(i + 1, n)]\n        factors = dict()\n        factors[1] = 0\n        add = 0\n        for x in diff:\n            if x == 0:\n                add += 1\n                continue\n            y = 1\n            while y * y <= x:\n                if x % y == 0:\n                    factors[y] = factors[y] + 1 if y in factors else 1\n                    if y != x // y:\n                        factors[x // y] = factors[x // y] + 1 if x // y in factors else 1\n                y += 1\n        for x in factors:\n            if factors[x] + add + 1 >= n // 2:\n                ans = max(ans, x)\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef fact(n):\n    ans = 1\n    for i in range(1, n + 1):\n        ans = ans * i\n    return ans\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr = sorted(arr)\n    d = dict()\n    temp = 0\n    for x in arr:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n        temp = max(temp, d[x])\n    if temp >= n // 2:\n        print(-1)\n        return\n    ans = 0\n    prev = None\n    for i in range(n // 2 + 1):\n        if arr[i] == prev:\n            continue\n        prev = arr[i]\n        diff = [abs(arr[i] - arr[j]) for j in range(i + 1, n)]\n        factors = dict()\n        factors[1] = 0\n        add = 0\n        for x in diff:\n            if x == 0:\n                add += 1\n                continue\n            y = 1\n            while y * y <= x:\n                if x % y == 0:\n                    if y in factors:\n                        factors[y] += 1\n                    else:\n                        factors[y] = 1\n                    if y != x // y:\n                        if x // y in factors:\n                            factors[x // y] += 1\n                        else:\n                            factors[x // y] = 1\n                y += 1\n        for x in factors:\n            if factors[x] + add + 1 >= n // 2:\n                ans = max(ans, x)\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "T = int(input())\n\ndef find(N):\n    res = set([])\n    i = 1\n    while i * i <= N:\n        if N % i == 0:\n            res.add(i)\n            res.add(N // i)\n        i += 1\n    return res\nfor t in range(T):\n    ans = 0\n    N = int(input())\n    A = list(map(int, input().split()))\n    K = -1\n    for i in range(N):\n        min_val = A[i]\n        same = 0\n        divs = []\n        for j in range(N):\n            if A[j] == min_val:\n                same += 1\n            elif A[j] > min_val:\n                divs.append(A[j] - min_val)\n        if same >= N // 2:\n            K = float('inf')\n            continue\n        umap = {}\n        for div in divs:\n            for di in find(div):\n                umap[di] = umap.get(di, 0) + 1\n        for key in umap:\n            if umap[key] >= N // 2 - same:\n                K = max(K, key)\n    ans = -1 if K == float('inf') else K\n    print(ans)", "import math\nfrom collections import Counter\nfrom math import gcd, floor, sqrt\n\ndef divs(n: int):\n    d = set()\n    for div in range(1, floor(sqrt(n)) + 1):\n        if n % div == 0:\n            d.add(div)\n            d.add(n // div)\n    return d\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    candidates = []\n    k = -1\n    for i0 in range(n):\n        numberOfAi0Value = 0\n        d = []\n        for i in range(n):\n            if a[i] == a[i0]:\n                numberOfAi0Value += 1\n            elif a[i] > a[i0]:\n                d.append(a[i] - a[i0])\n        if numberOfAi0Value >= n // 2:\n            k = math.inf\n            continue\n        div_counter = Counter()\n        for ai in d:\n            for div in divs(ai):\n                div_counter[div] += 1\n        for p in div_counter.most_common():\n            if p[1] >= n // 2 - numberOfAi0Value:\n                k = max(k, p[0])\n    print(-1 if k == math.inf else k)", "T = int(input())\n\ndef find(N):\n    res = set([])\n    i = 1\n    while i * i <= N:\n        if N % i == 0:\n            res.add(i)\n            res.add(N // i)\n        i += 1\n    return res\nfor t in range(T):\n    ans = 0\n    N = int(input())\n    A = list(map(int, input().split()))\n    K = -1\n    for i in range(N):\n        min_val = A[i]\n        same = 0\n        divs = []\n        for j in range(N):\n            if A[j] == min_val:\n                same += 1\n            elif A[j] > min_val:\n                divs.append(A[j] - min_val)\n        if same >= N // 2:\n            K = float('inf')\n            break\n        umap = {}\n        for div in divs:\n            for di in find(div):\n                umap[di] = umap.get(di, 0) + 1\n        for key in umap:\n            if umap[key] >= N // 2 - same:\n                K = max(K, key)\n    ans = -1 if K == float('inf') else K\n    print(ans)"]