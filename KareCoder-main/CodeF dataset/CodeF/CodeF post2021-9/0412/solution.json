["def beat(arr):\n    n_swap = 0\n    mult = 2\n    while mult <= len(arr):\n        for i in range(0, len(arr), mult):\n            if abs(arr[i] - arr[i + mult // 2]) < mult:\n                if arr[i] > arr[i + mult // 2]:\n                    n_swap += 1\n            else:\n                return -1\n        mult = mult * 2\n    return n_swap\nk = int(input())\nfor i in range(k):\n    n = int(input())\n    arr = [int(j) for j in input().split()]\n    print(beat(arr))", "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\ndef values():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef inlsts():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef instr():\n    return sys.stdin.readline().strip()\n\ndef words():\n    return [i for i in sys.stdin.readline().strip().split()]\n\ndef chars():\n    return [i for i in sys.stdin.readline().strip()]\n\ndef solve():\n    n = inp()\n    l = values()\n    x = 1\n    ans = 0\n    while x < n:\n        for i in range(0, n, 2 * x):\n            if abs(l[i] - l[i + x]) != x:\n                ans = -1\n                break\n            if l[i] > l[i + x]:\n                (l[i], l[x + i]) = (l[x + i], l[i])\n                ans += 1\n        x *= 2\n        if ans == -1:\n            break\n    print(ans)\nfor i in range(inp()):\n    solve()", "x = int(input())\n\ndef do(n, lis):\n    res = 0\n    for p in range(len(bin(n)) - 3):\n        k = 2 ** p\n        for q in range(0, n - 1, k * 2):\n            if lis[q] - lis[q + k] == k:\n                lis[q] -= k\n                res += 1\n            elif lis[q + k] - lis[q] != k:\n                return -1\n    return res\nfor _ in range(x):\n    a = int(input())\n    b = list(map(int, input().split()))\n    print(do(a, b))", "from math import inf\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        (*leafs,) = map(int, input().split())\n        auxLeafs = []\n        ans = 0\n        multi = 1\n        while len(leafs) > 1 and ans != -1:\n            for i in range(1, len(leafs), 2):\n                if leafs[i - 1] > leafs[i]:\n                    ans += 1\n                    (leafs[i], leafs[i - 1]) = (leafs[i - 1], leafs[i])\n                if leafs[i] - leafs[i - 1] > multi:\n                    ans = -1\n                    leafs = []\n                    break\n                auxLeafs.append(leafs[i - 1])\n            leafs = auxLeafs.copy()\n            auxLeafs = []\n            multi = multi * 2\n        print(ans)\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = 0\n    hop = 2\n    while hop <= n:\n        for i in range(0, n, hop):\n            v = arr[i] - arr[i + hop // 2]\n            if abs(v) >= hop:\n                ans = -1\n                break\n            elif v > 0:\n                ans += 1\n        hop *= 2\n        if ans == -1:\n            break\n    print(ans)", "def dfs(ls, l, r):\n    if l + 1 == r:\n        if ls[l] < ls[r]:\n            return (0, ls[l], ls[r])\n        else:\n            return (1, ls[r], ls[l])\n    mid = (l + r) // 2\n    (ans1, lo1, hi1) = dfs(ls, l, mid)\n    (ans2, lo2, hi2) = dfs(ls, mid + 1, r)\n    if ans1 == -1 or ans2 == -1:\n        return (-1, -1, -1)\n    if hi1 < hi2:\n        if hi1 + 1 == lo2:\n            return (ans1 + ans2, lo1, hi2)\n        return (-1, -1, -1)\n    else:\n        if hi2 + 1 == lo1:\n            return (1 + ans1 + ans2, lo2, hi1)\n        return (-1, -1, -1)\n\ndef foo(n, ls):\n    if n == 1:\n        return 0\n    (ans, lo, hi) = dfs(ls, 0, n - 1)\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ls = [int(i) for i in input().split()]\n    print(foo(n, ls))", "def solve():\n    n = int(input())\n    lis = list(map(int, input().split()))\n    step = 1\n    ans = int()\n    while step < n:\n        for i in range(0, n, 2 * step):\n            if lis[i] > lis[i + step]:\n                (lis[i:i + step], lis[i + step:i + step * 2]) = (lis[i + step:i + step * 2], lis[i:i + step])\n                ans += 1\n        step *= 2\n    print(ans if lis == list(range(1, n + 1)) else -1)\nfor _ in range(int(input())):\n    solve()", "from audioop import mul\nimport sys\n\ndef beat(arr):\n    n_swap = 0\n    mult = 2\n    while mult <= len(arr):\n        for i in range(0, len(arr), mult):\n            if abs(arr[i] - arr[i + mult // 2]) < mult:\n                if arr[i] > arr[i + mult // 2]:\n                    arr[i] = arr[i + mult // 2]\n                    n_swap += 1\n            else:\n                return -1\n        mult = mult * 2\n    return n_swap\nk = int(input())\nfor i in range(k):\n    n = int(input())\n    arr = [int(j) for j in input().split()]\n    print(beat(arr))", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 1\n    ans = int()\n    while s < n:\n        for i in range(0, n, 2 * s):\n            if a[i] > a[i + s]:\n                (a[i:i + s], a[i + s:i + s * 2]) = (a[i + s:i + s * 2], a[i:i + s])\n                ans += 1\n        s *= 2\n    print(ans if a == list(range(1, n + 1)) else -1)\nfor _ in range(int(input())):\n    solve()", "from heapq import heappush, heappop, heapify\nfrom collections import Counter\n\ndef getIntegerInputs():\n    return map(int, input().split())\n\ndef getListInput():\n    return list(map(int, input().split()))\n\ndef inbound(r, c, n, m):\n    return 0 <= r < n and 0 <= c < m\n\ndef solve():\n    for _ in range(int(input())):\n        n = int(input())\n        arr = getListInput()\n        (x, ans) = (1, 0)\n        while x < n:\n            for i in range(0, n, 2 * x):\n                if abs(arr[i] - arr[i + x]) != x:\n                    ans = -1\n                    break\n                if arr[i] > arr[i + x]:\n                    (arr[i], arr[x + i]) = (arr[x + i], arr[i])\n                    ans += 1\n            x *= 2\n            if ans == -1:\n                break\n        print(ans)\nsolve()", "import sys\ninput = sys.stdin.readline\nimport math\nfrom collections import defaultdict\n\ndef print_str_line(str):\n    sys.stdout.write(str + '\\n')\n\ndef print_number(number):\n    print_str_line(f'{number}')\n\ndef read_list_of_integers():\n    return [int(num) for num in input()[:-1].split(' ')]\n\ndef is_permutation_beautifiable(permutation):\n    i = 2\n    while i < len(permutation):\n        for j in range(0, len(permutation), i):\n            first_num = permutation[j]\n            second_num = permutation[j + i // 2]\n            if abs(first_num - second_num) >= i:\n                return False\n        i *= 2\n    return True\n\ndef solve(permutation):\n    if not is_permutation_beautifiable(permutation):\n        return -1\n    i = 2\n    ans = 0\n    while i <= len(permutation):\n        for j in range(0, len(permutation), i):\n            first_num = permutation[j]\n            second_num = permutation[j + i // 2]\n            if first_num > second_num:\n                ans += 1\n        i *= 2\n    return ans\n\ndef main():\n    numer_of_test_cases = int(input()[:-1])\n    for i in range(numer_of_test_cases):\n        permutation_size = int(input()[:-1])\n        permutation = read_list_of_integers()\n        _ans = solve(permutation)\n        print_number(_ans)\nmain()", "def beautifullization(p):\n    n = 0\n    newP = []\n    if len(p) == 1:\n        return 0\n    for i in range(len(p) // 2):\n        (n1, n2) = (p[2 * i], p[2 * i + 1])\n        if abs(n1 - n2) != 1:\n            return -1\n        elif n1 > n2:\n            n += 1\n            newP.append(n1 // 2)\n        else:\n            newP.append(n2 // 2)\n    deeperN = beautifullization(newP)\n    if deeperN == -1:\n        return -1\n    else:\n        return n + deeperN\nfor _ in range(int(input())):\n    m = int(input())\n    p = list(map(int, input().split()))\n    n = beautifullization(p)\n    print(n)", "from math import inf\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        (*leafs,) = map(int, input().split())\n        auxLeafs = []\n        ans = 0\n        multi = 1\n        while len(leafs) > 1 and ans != -1:\n            for i in range(1, len(leafs), 2):\n                if leafs[i - 1] > leafs[i]:\n                    ans += 1\n                    (leafs[i], leafs[i - 1]) = (leafs[i - 1], leafs[i])\n                if leafs[i] - leafs[i - 1] > multi:\n                    ans = -1\n                    leafs = []\n                    break\n                auxLeafs.append(leafs[i - 1])\n            leafs = auxLeafs.copy()\n            auxLeafs = []\n            multi = multi * 2\n        print(ans)\nmain()", "def go(a, n):\n    ans = 0\n    if n == 1:\n        return 0\n    x = 1\n    while len(a) != 1:\n        new_a = []\n        for i in range(0, len(a), 2):\n            if abs(a[i] - a[i + 1]) != x:\n                return -1\n            if a[i] < a[i + 1]:\n                new_a.append(a[i])\n            else:\n                ans += 1\n                new_a.append(a[i + 1])\n        x = x * 2\n        a = new_a\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(go(a, n))", "def solve():\n    n = int(input())\n    lis = list(map(int, input().split()))\n    step = 1\n    ans = int()\n    while step < n:\n        for i in range(0, n, 2 * step):\n            if lis[i] > lis[i + step]:\n                (lis[i:i + step], lis[i + step:i + step * 2]) = (lis[i + step:i + step * 2], lis[i:i + step])\n                ans += 1\n        step *= 2\n    print(ans if lis == list(range(1, n + 1)) else -1)\nfor _ in range(int(input())):\n    solve()", "def solve(a):\n    n = len(a)\n    if n == 1:\n        return 0\n    cnt = 0\n    arr = []\n    for i in range(0, n, 2):\n        if abs(a[i] - a[i + 1]) == 1:\n            if a[i] > a[i + 1]:\n                cnt += 1\n                (a[i + 1], a[i]) = (a[i], a[i + 1])\n            arr.append(a[i + 1] / 2)\n        else:\n            return float('inf')\n    return cnt + solve(arr)\nfor test in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    res = solve(a)\n    if res == float('inf'):\n        res = -1\n    print(res)", "def S(a, m):\n    j = 1\n    b = list(range(1, m + 1))\n    count = 0\n    while j < m:\n        j = j * 2\n        for i in range(0, m, j):\n            x = i + j\n            (k, l) = (i, i + j // 2)\n            if a[k] > a[l]:\n                count += 1\n                (a[k:l], a[l:i + j]) = (a[l:i + j], a[k:l])\n    if a != b:\n        return -1\n    return count\nfor i in range(int(input())):\n    m = int(input())\n    a = list(map(int, input().split()))\n    print(S(a, m))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = 1\n    ans = 0\n    chk = 0\n    while x < n:\n        for i in range(0, n, 2 * x):\n            if abs(a[i] - a[i + x]) == x:\n                if a[i] > a[i + x]:\n                    t = a[i]\n                    a[i] = a[i + x]\n                    a[i + x] = t\n                    ans += 1\n            else:\n                chk = 1\n                print(-1)\n                break\n        if chk:\n            break\n        x = x * 2\n    else:\n        print(ans)", "def ss(a, n):\n    j = 1\n    b = list(range(1, n + 1))\n    count = 0\n    while j < n:\n        j = j * 2\n        for i in range(0, n, j):\n            x = i + j\n            (k, l) = (i, i + j // 2)\n            if a[k] > a[l]:\n                count += 1\n                (a[k:l], a[l:i + j]) = (a[l:i + j], a[k:l])\n    if a != b:\n        return -1\n    return count\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(ss(a, n))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = 1\n    ans = 0\n    chk = 0\n    while x < n:\n        for i in range(0, n, 2 * x):\n            if abs(a[i] - a[i + x]) == x:\n                if a[i] > a[i + x]:\n                    t = a[i]\n                    a[i] = a[i + x]\n                    a[i + x] = t\n                    ans += 1\n            else:\n                chk = 1\n                print(-1)\n                break\n        if chk:\n            break\n        x = x * 2\n    else:\n        print(ans)", "def ss(a, n):\n    j = 1\n    b = list(range(1, n + 1))\n    count = 0\n    while j < n:\n        j = j * 2\n        for i in range(0, n, j):\n            x = i + j\n            (k, l) = (i, i + j // 2)\n            if a[k] > a[l]:\n                count += 1\n                (a[k:l], a[l:i + j]) = (a[l:i + j], a[k:l])\n    if a != b:\n        return -1\n    return count\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(ss(a, n))", "def solve():\n    n = int(input())\n    lis = list(map(int, input().split()))\n    ans = int()\n    step = 1\n    while step < n:\n        for i in range(0, n, step * 2):\n            if lis[i] > lis[i + step]:\n                (lis[i:i + step], lis[i + step:i + step * 2]) = (lis[i + step:i + step * 2], lis[i:i + step])\n                ans += 1\n        step *= 2\n    print(ans if lis == list(range(1, n + 1)) else -1)\nfor _ in range(int(input())):\n    solve()", "def solve():\n    n = int(input())\n    lis = list(map(int, input().split()))\n    ans = int()\n    step = 1\n    while step < n:\n        for i in range(0, n, step * 2):\n            if lis[i] > lis[i + step]:\n                (lis[i:i + step], lis[i + step:i + step * 2]) = (lis[i + step:i + step * 2], lis[i:i + step])\n                ans += 1\n        step *= 2\n    print(ans if lis == list(range(1, n + 1)) else -1)\nfor _ in range(int(input())):\n    solve()", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 1\n    ans = int()\n    while s < n:\n        for i in range(0, n, 2 * s):\n            if a[i] > a[i + s]:\n                (a[i:i + s], a[i + s:i + s * 2]) = (a[i + s:i + s * 2], a[i:i + s])\n                ans += 1\n        s *= 2\n    print(ans if a == list(range(1, n + 1)) else -1)\nfor _ in range(int(input())):\n    solve()", "def solve():\n    n = int(input())\n    ls = list(map(int, input().split()))\n    for i in range(n):\n        ls[i] = ls[i] - 1\n    f = 1\n    ans = 0\n    while len(ls) > 1:\n        nt = []\n        for i in range(0, len(ls), 2):\n            if abs(ls[i + 1] - ls[i]) > 1:\n                f = 0\n                break\n            if ls[i + 1] < ls[i]:\n                ans += 1\n            nt.append(ls[i] // 2)\n        ls = nt\n        if not f:\n            break\n    if f:\n        print(ans)\n    else:\n        print(-1)\nfor i in range(int(input())):\n    solve()", "def ans(a, cnt):\n    if len(a) == 1:\n        return cnt\n    b = []\n    for i in range(0, len(a), 2):\n        if a[i + 1] < a[i]:\n            c = a[i + 1]\n            a[i + 1] = a[i]\n            a[i] = c\n            cnt += 1\n        if a[i + 1] - a[i] == 1:\n            b.append(a[i + 1] // 2)\n        else:\n            return -1\n    return ans(b, cnt)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(ans(a, 0))", "def solve(n, arr):\n    if n == 1:\n        return 0\n    lt = []\n    cnt = 0\n    for i in range(n // 2):\n        if arr[2 * i] & 1 == 0:\n            if arr[2 * i + 1] != arr[2 * i] - 1:\n                return -1\n            else:\n                cnt += 1\n                lt.append(arr[2 * i] // 2)\n        if arr[2 * i] & 1 == 1:\n            if arr[2 * i + 1] != arr[2 * i] + 1:\n                return -1\n            else:\n                lt.append(arr[2 * i + 1] // 2)\n    ans = solve(n // 2, lt)\n    if ans == -1:\n        return -1\n    return cnt + ans\n\ndef main():\n    n = int(input())\n    txt = input()\n    lt = list(map(int, txt.split(' ')))\n    print(solve(n, lt))\nt = int(input())\nfor test in range(t):\n    main()", "for _ in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split()))\n    (l, swaps) = (1, 0)\n    while l < n:\n        for i in range(0, n, 2 * l):\n            if L[i] > L[i + l]:\n                (L[i:i + l], L[i + l:i + 2 * l]) = (L[i + l:i + 2 * l], L[i:i + l])\n                swaps += 1\n        l <<= 1\n    print(swaps if L == sorted(L) else -1)", "for _ in range(int(input())):\n    n = int(input())\n    p = [*map(int, input().split())]\n    (j, ans, f) = (1, 0, 0)\n    while j < n:\n        for i in range(0, n, j * 2):\n            if abs(p[i] - p[i + j]) != j:\n                f = 1\n            if p[i] > p[i + j]:\n                (p[i], p[i + j], ans) = (p[i + j], p[i], ans + 1)\n        j <<= 1\n    print([ans, -1][f])", "for _ in range(int(input())):\n    n = int(input())\n    p = [*map(int, input().split())]\n    (j, ans, f) = (1, 0, 0)\n    while j < n:\n        for i in range(0, n, j * 2):\n            if abs(p[i] - p[i + j]) != j:\n                f = 1\n            if p[i] > p[i + j]:\n                (p[i], p[i + j], ans) = (p[i + j], p[i], ans + 1)\n        j <<= 1\n    print([ans, -1][f])", "for _ in range(int(input())):\n    n = int(input())\n    p = [*map(int, input().split())]\n    (j, ans, f) = (1, 0, 0)\n    while j < n:\n        for i in range(0, n, j * 2):\n            if abs(p[i] - p[i + j]) != j:\n                f = 1\n            if p[i] > p[i + j]:\n                (p[i], p[i + j], ans) = (p[i + j], p[i], ans + 1)\n        j <<= 1\n    print([ans, -1][f])", "for i in range(int(input())):\n    m = int(input())\n    arr = list(map(int, input().split()))\n    if m == 1:\n        print(0)\n    else:\n        ws = 1\n        ans = 0\n        flag = True\n        while ws < m:\n            for i in range(0, m, ws * 2):\n                if abs(arr[i] - arr[i + ws]) != ws:\n                    flag = False\n                if arr[i] > arr[i + ws]:\n                    (arr[i], arr[i + ws]) = (arr[i + ws], arr[i])\n                    ans += 1\n            ws <<= 1\n        if flag == False:\n            print(-1)\n        else:\n            print(ans)", "t = int(input())\nm = 1000000000.0 + 7\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    diff = 1\n    ans = 0\n    while True:\n        lst = []\n        for i in range(1, len(arr), 2):\n            if abs(arr[i] - arr[i - 1]) != diff:\n                print(-1)\n                return\n            if arr[i] < arr[i - 1]:\n                ans = ans + 1\n            lst.append(min(arr[i], arr[i - 1]))\n        arr = lst\n        diff = diff << 1\n        if len(lst) == 0:\n            print(ans)\n            return\nfor _ in range(t):\n    solve()", "from sys import stdin\ninput = lambda : stdin.readline()\nfor _ in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split()))\n    (l, swaps) = (1, 0)\n    while l < n:\n        for i in range(0, n, 2 * l):\n            if L[i] > L[i + l]:\n                (L[i:i + l], L[i + l:i + 2 * l]) = (L[i + l:i + 2 * l], L[i:i + l])\n                swaps += 1\n        l <<= 1\n    print(swaps if L == sorted(L) else -1)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    if n == 1:\n        if s[0] == 1:\n            print(0)\n        else:\n            print(-1)\n    else:\n        tmp = []\n        ans = 0\n        diff = 1\n        cnt = 1\n        while len(s) != 1:\n            flag = 0\n            for i in range(0, len(s) - 1, 2):\n                if abs(s[i] - s[i + 1]) != diff:\n                    flag = 1\n                    break\n                if s[i] > s[i + 1]:\n                    tmp.append(s[i + 1])\n                    ans += 1\n                else:\n                    tmp.append(s[i])\n            if flag:\n                break\n            s = tmp\n            tmp = []\n            diff = math.pow(2, cnt)\n            cnt += 1\n        if flag:\n            print(-1)\n        else:\n            print(ans)", "def find_swaps(units):\n    if len(units) == 1:\n        return 0\n    new_units = []\n    count = 0\n    for i in range(len(units)):\n        if i % 2 == 0:\n            (min1, max1) = units[i]\n            (min2, max2) = units[i + 1]\n            if max1 < min2:\n                new_units.append((min1, max2))\n            elif max2 < min1:\n                count += 1\n                new_units.append((min2, max1))\n            else:\n                return -1\n    v = find_swaps(new_units.copy())\n    if v == -1:\n        return -1\n    return v + count\nt = int(input())\nfor _ in range(t):\n    m = int(input())\n    perms = list(map(int, input().split()))\n    units = [(k, k) for k in perms]\n    print(find_swaps(units))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = [a[i] - 1 for i in range(n)]\n    ans1 = 0\n    flag = True\n    while len(a) > 1:\n        ans = []\n        for i in range(0, len(a), 2):\n            if abs(a[i + 1] - a[i]) > 1:\n                flag = False\n                break\n            if a[i + 1] < a[i]:\n                ans1 += 1\n            ans.append(a[i] // 2)\n        a = ans\n        if not flag:\n            break\n    if flag:\n        print(ans1)\n    else:\n        print(-1)", "import sys, random\ninput = lambda : sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n    a = int(input())\n    p = list(map(int, input().split()))\n    if a == 1:\n        print(0)\n        continue\n    flg = 1\n    ans = 0\n    for i in range(a.bit_length() - 1):\n        k = 2 ** i\n        for j in range(0, a, k * 2):\n            if p[j] > p[j + k]:\n                (p[j], p[j + k]) = (p[j + k], p[j])\n                ans += 1\n            if abs(p[j] - p[j + k]) != k:\n                flg = 0\n    print(ans if flg else -1)", "for _ in range(int(input())):\n    n = int(input())\n    p = [*map(int, input().split())]\n    (j, ans, f) = (1, 0, 0)\n    while j < n:\n        for i in range(0, n, j * 2):\n            if abs(p[i] - p[i + j]) != j:\n                f = 1\n            if p[i] > p[i + j]:\n                (p[i], p[i + j], ans) = (p[i + j], p[i], ans + 1)\n        j <<= 1\n    print([ans, -1][f])", "for _ in range(int(input())):\n    n = int(input())\n    p = [*map(int, input().split())]\n    (j, ans, f) = (1, 0, 0)\n    while j < n:\n        for i in range(0, n, j * 2):\n            if abs(p[i] - p[i + j]) != j:\n                f = 1\n            if p[i] > p[i + j]:\n                (p[i], p[i + j], ans) = (p[i + j], p[i], ans + 1)\n        j <<= 1\n    print([ans, -1][f])", "for _ in range(int(input())):\n    n = int(input())\n    p = [*map(int, input().split())]\n    (j, ans, f) = (1, 0, 0)\n    while j < n:\n        for i in range(0, n, j * 2):\n            if abs(p[i] - p[i + j]) != j:\n                f = 1\n            if p[i] > p[i + j]:\n                (p[i], p[i + j], ans) = (p[i + j], p[i], ans + 1)\n        j <<= 1\n    print([ans, -1][f])", "for _ in range(int(input())):\n    n = int(input())\n    p = [*map(int, input().split())]\n    (j, ans, f) = (1, 0, 0)\n    while j < n:\n        for i in range(0, n, j * 2):\n            if abs(p[i] - p[i + j]) != j:\n                f = 1\n            if p[i] > p[i + j]:\n                (p[i], p[i + j], ans) = (p[i + j], p[i], ans + 1)\n        j <<= 1\n    print([ans, -1][f])", "for _ in range(int(input())):\n    n = int(input())\n    p = [*map(int, input().split())]\n    (j, ans, f) = (1, 0, 0)\n    while j < n:\n        for i in range(0, n, j * 2):\n            if abs(p[i] - p[i + j]) != j:\n                f = 1\n            if p[i] > p[i + j]:\n                (p[i], p[i + j], ans) = (p[i + j], p[i], ans + 1)\n        j <<= 1\n    print([ans, -1][f])", "for _ in range(int(input())):\n    n = int(input())\n    p = [*map(int, input().split())]\n    (j, ans, f) = (1, 0, 0)\n    while j < n:\n        for i in range(0, n, j * 2):\n            if abs(p[i] - p[i + j]) != j:\n                f = 1\n            if p[i] > p[i + j]:\n                (p[i], p[i + j], ans) = (p[i + j], p[i], ans + 1)\n        j <<= 1\n    print([ans, -1][f])", "def solve(xs):\n    out = 0\n    while len(xs) != 1:\n        tmp = [0] * (len(xs) >> 1)\n        for i in range(len(tmp)):\n            left = (xs[i << 1] + 1) // 2\n            right = (xs[(i << 1) + 1] + 1) // 2\n            if left != right:\n                print(-1)\n                return\n            if xs[i << 1] > xs[(i << 1) + 1]:\n                out += 1\n            tmp[i] = left\n        xs = tmp\n    print(out)\nfor _ in range(int(input())):\n    input()\n    xs = list(map(int, input().split()))\n    solve(xs)", "from math import log2\n\ndef ii() -> list:\n    return list(map(int, input().split()))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    tree = ii()\n    res = 0\n    for parent_i in range(int(log2(n))):\n        step = 2 ** (parent_i + 1)\n        low = tree[::step]\n        high = tree[step - 1::step]\n        for i in range(n // step):\n            if low[i] > high[i]:\n                res += 1\n                ff = step * i\n                fs = step * i + step - step // 2\n                sf = step * (i + 1) - step // 2\n                ss = step * (i + 1)\n                (tree[ff:fs], tree[sf:ss]) = (tree[sf:ss], tree[ff:fs])\n    print(res if sorted(tree) == tree else -1)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (x, ans) = (1, 0)\n    while x < n:\n        for i in range(0, n, 2 * x):\n            if abs(arr[i] - arr[i + x]) != x:\n                ans = -1\n                break\n            if arr[i] > arr[i + x]:\n                (arr[i], arr[i + x]) = (arr[i + x], arr[i])\n                ans += 1\n        x *= 2\n        if ans == -1:\n            break\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    state = 1\n    k = 0\n    for i in range(0, n - 1, 2):\n        if p[i] > p[i + 1]:\n            k += 1\n            (p[i], p[i + 1]) = (p[i + 1], p[i])\n        if p[i + 1] - p[i] > 1:\n            state = 0\n    kol = 2\n    while kol < n:\n        for i in range(0, n, kol * 2):\n            if p[i] > p[kol + i]:\n                (p[i:kol + i], p[kol + i:kol + i + kol]) = (p[kol + i:kol + i + kol], p[i:kol + i])\n                k += 1\n            if p[kol + i] - p[i] > kol:\n                state = 0\n        kol *= 2\n    print([-1, k][state])", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    nn = n\n    z = a[0:]\n    x = []\n    c = 1\n    e = 0\n    r = 0\n    while nn > 1:\n        i = 0\n        while i < nn:\n            if z[i] > z[i + 1]:\n                if z[i] - z[i + 1] != c:\n                    e = 1\n                    break\n                else:\n                    r += 1\n                    x.append(z[i])\n            elif z[i + 1] - z[i] != c:\n                e = 1\n                break\n            else:\n                x.append(z[i + 1])\n            i += 2\n        if e == 1:\n            break\n        else:\n            z = x[0:]\n            x = []\n            nn = len(z)\n            c *= 2\n    if e == 1:\n        print(-1)\n    else:\n        print(r)", "def N():\n    return int(input())\n\ndef A():\n    return [int(x) for x in input().split()]\n\ndef S():\n    return input()\nfor _ in range(N()):\n    n = N()\n    if 'er9fj48gh48gh4' == 14194665565:\n        print('Tanmay')\n    a = A()\n    d = 1\n    c = 0\n    cc = 1\n    f = True\n    for i in range(int(n ** 0.5) + 1):\n        aa = []\n        for i in range(0, len(a), 2):\n            if len(a) == 1:\n                break\n            if abs(a[i] - a[i + 1]) != d:\n                f = False\n                break\n            if a[i] > a[i + 1]:\n                aa.append(a[i + 1])\n                c += 1\n                continue\n            else:\n                aa.append(a[i])\n        if not f:\n            break\n        d *= 2\n        a = aa.copy()\n    if f:\n        print(c)\n        continue\n    print(-1)", "from math import log2\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    steps = 0\n    t = 1\n    if n == 1:\n        print(0)\n        continue\n    for i in range(0, n, 2):\n        if a[i + 1] < a[i]:\n            (a[i], a[i + 1]) = (a[i + 1], a[i])\n            steps += 1\n    par = True\n    for x in range(int(log2(n)) - 1):\n        flag = True\n        t *= 2\n        for i in range(0, n, t * 2):\n            l = a[i:i + t]\n            r = a[i + t:i + 2 * t]\n            if l[0] > r[0]:\n                (a[i:i + t], a[i + t:i + 2 * t]) = (r, l)\n                (l, r) = (r, l)\n                steps += 1\n            if l[0] < r[0] < l[-1]:\n                flag = False\n                break\n        if flag == False:\n            par = False\n            break\n    if par == False:\n        print(-1)\n    else:\n        print(steps)", "def is_valid(left, right):\n    return left // 2 == right // 2\n\ndef need_swap(left, right):\n    return left > right\n\ndef swap_layer(layer):\n    swaps = 0\n    parent_layer = []\n    for i in range(0, len(layer), 2):\n        (left, right) = (layer[i], layer[i + 1])\n        if not is_valid(left, right):\n            return (-1, [])\n        if need_swap(left, right):\n            swaps += 1\n        parent_layer.append(left // 2)\n    return (swaps, parent_layer)\n\ndef solve(layer):\n    if len(layer) == 1:\n        return 0\n    swaps = 0\n    while len(layer) > 1:\n        (count, layer) = swap_layer(layer)\n        if count == -1:\n            return -1\n        swaps += count\n    return swaps\nfor _ in range(int(input())):\n    input()\n    tree = list(map(int, input().split()))\n    tree = [t - 1 for t in tree]\n    print(solve(tree))", "def f(arr, l, r):\n    if r - l == 1:\n        if arr[l] > arr[r]:\n            (arr[l], arr[r]) = (arr[r], arr[l])\n            return 1\n        return 0\n    mid = (r + l) // 2\n    a = f(arr, l, mid)\n    b = f(arr, mid + 1, r)\n    if a == -1 or b == -1 or arr[mid] - arr[l] != mid - l or (arr[r] - arr[mid + 1] != mid - l):\n        return -1\n    result = a + b\n    if arr[l] > arr[mid + 1]:\n        (arr[l:mid + 1], arr[mid + 1:r + 1]) = (arr[mid + 1:r + 1], arr[l:mid + 1])\n        return result + 1\n    return result\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        print(f(arr, 0, n - 1))", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    m = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    ln = 1\n    moves = 0\n    while ln < m:\n        for i in range(0, m, ln * 2):\n            if a[i + ln - 1] > a[i + ln]:\n                if a[i] > a[i + ln * 2 - 1]:\n                    (a[i:i + ln], a[i + ln:i + ln * 2]) = (a[i + ln:i + ln * 2], a[i:i + ln])\n                    moves += 1\n                else:\n                    print(-1)\n                    break\n        else:\n            ln *= 2\n            continue\n        break\n    else:\n        print(moves)", "def check_sorted(L):\n    for i in range(len(L) - 1):\n        if L[i] > L[i + 1]:\n            return False\n    return True\nfor _ in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split()))\n    (l, swaps) = (1, 0)\n    while l < n:\n        for i in range(0, n, 2 * l):\n            if L[i] > L[i + l]:\n                (L[i:i + l], L[i + l:i + 2 * l]) = (L[i + l:i + 2 * l], L[i:i + l])\n                swaps += 1\n        l <<= 1\n    print(swaps if check_sorted(L) else -1)", "def check_sorted(L):\n    for i in range(len(L) - 1):\n        if L[i] > L[i + 1]:\n            return False\n    return True\nfor _ in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split()))\n    (l, swaps) = (1, 0)\n    while l < n:\n        for i in range(0, n, 2 * l):\n            if L[i] > L[i + l]:\n                (L[i:i + l], L[i + l:i + 2 * l]) = (L[i + l:i + 2 * l], L[i:i + l])\n                swaps += 1\n        l <<= 1\n    print(swaps if check_sorted(L) else -1)", "for t in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    state = 1\n    k = 0\n    for i in range(0, n - 1, 2):\n        if p[i] > p[i + 1]:\n            k += 1\n            (p[i], p[i + 1]) = (p[i + 1], p[i])\n        if p[i + 1] - p[i] > 1:\n            state = 0\n    kol = 2\n    while kol < n:\n        for i in range(0, n, kol * 2):\n            if p[i] > p[kol + i]:\n                (p[i:kol + i], p[kol + i:kol + i + kol]) = (p[kol + i:kol + i + kol], p[i:kol + i])\n                k += 1\n            if p[kol + i] - p[i] > kol:\n                state = 0\n        kol <<= 1\n    print([-1, k][state])", "l = []\nfor _ in range(int(input())):\n    m = int(input())\n    p = [int(j) for j in input().split()]\n    p2 = []\n    s = 0\n    step = 1\n    while len(p) > 1 and s >= 0:\n        for j in range(0, len(p) - 1, 2):\n            if abs(p[j] - p[j + 1]) != step:\n                s = -1\n                break\n            if p[j] < p[j + 1]:\n                p2.append(p[j])\n            else:\n                s += 1\n                p2.append(p[j + 1])\n        p = p2.copy()\n        p2 = []\n        step *= 2\n    l.append(s)\nfor i in l:\n    print(i)", "t = int(input())\nl = []\nfor i in range(t):\n    m = int(input())\n    p = [int(j) for j in input().split()]\n    p2 = []\n    s = 0\n    step = 1\n    while len(p) > 1 and s >= 0:\n        for j in range(0, len(p) - 1, 2):\n            if abs(p[j] - p[j + 1]) != step:\n                s = -1\n                break\n            if p[j] < p[j + 1]:\n                p2.append(p[j])\n            else:\n                s += 1\n                p2.append(p[j + 1])\n        p = p2.copy()\n        p2 = []\n        step *= 2\n    l.append(s)\nfor i in l:\n    print(i)", "from math import log\nfor pratyush in range(int(input())):\n    n = int(input())\n    m = int(log(n) / log(2))\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    if a == b:\n        print(0)\n        continue\n    ans = 0\n    for x in range(1, m + 1):\n        p = 2 ** x\n        q = 2 ** (x - 1)\n        for y in range(0, n, p):\n            if a[y] > a[y + q]:\n                (a[y:y + q], a[y + q:y + p]) = (a[y + q:y + p], a[y:y + q])\n                ans += 1\n    if a != b:\n        print(-1)\n        continue\n    print(ans)", "def f(arr, l, r):\n    if r - l == 1:\n        if arr[l] > arr[r]:\n            (arr[l], arr[r]) = (arr[r], arr[l])\n            return 1\n        return 0\n    mid = (r + l) // 2\n    a = f(arr, l, mid)\n    b = f(arr, mid + 1, r)\n    if a == -1 or b == -1 or arr[mid] - arr[l] != mid - l or (arr[r] - arr[mid + 1] != mid - l):\n        return -1\n    result = a + b\n    if arr[l] > arr[mid + 1]:\n        (arr[l:mid + 1], arr[mid + 1:r + 1]) = (arr[mid + 1:r + 1], arr[l:mid + 1])\n        result += 1\n    return result\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        print(f(arr, 0, n - 1))", "for _ in range(int(input())):\n    m = int(input())\n    a = list(map(int, input().split()))\n    ln = 1\n    moves = 0\n    while ln < m:\n        for i in range(0, m, ln * 2):\n            if a[i + ln - 1] > a[i + ln]:\n                if a[i] > a[i + ln * 2 - 1]:\n                    (a[i:i + ln], a[i + ln:i + ln * 2]) = (a[i + ln:i + ln * 2], a[i:i + ln])\n                    moves += 1\n                else:\n                    print(-1)\n                    break\n        else:\n            ln *= 2\n            continue\n        break\n    else:\n        print(moves)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split(' ')]\n    flag = False\n    steps = 0\n    while n > 1:\n        newArr = [-1 for i in range(n // 2)]\n        for i in range(n // 2):\n            if arr[2 * i] == arr[2 * i + 1] - 1:\n                newArr[i] = arr[2 * i + 1] // 2\n            elif arr[2 * i] == arr[2 * i + 1] + 1:\n                steps += 1\n                newArr[i] = arr[2 * i] // 2\n            else:\n                flag = True\n                break\n        arr = newArr\n        n = n // 2\n    if flag == True:\n        print(-1)\n    else:\n        print(steps)", "import sys\nsys.setrecursionlimit(10 ** 7)\nt = int(input())\nfor _ in range(t):\n    m = int(input())\n    P = list(map(int, input().split()))\n\n    def dp(i, j):\n        if i == j:\n            return (0, P[i], P[i])\n        mid = (i + j + 1) // 2\n        l = dp(i, mid - 1)\n        r = dp(mid, j)\n        if l[2] < r[1]:\n            return (l[0] + r[0], l[1], r[2])\n        elif l[1] > r[2]:\n            return (l[0] + r[0] + 1, r[1], l[2])\n        return (float('inf'), float('inf'), -float('inf'))\n    res = dp(0, m - 1)\n    if res[0] == float('inf'):\n        print(-1)\n    else:\n        print(res[0])", "def switch(a, i):\n    t1 = a[:i]\n    t2 = a[i:]\n    t = t2 + t1\n    return t\ntest = int(input())\nwhile test > 0:\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    i = 1\n    count = 0\n    while i <= n // 2:\n        for j in range(0, n, 2 * i):\n            k = j + 2 * i - 1\n            if a[j] > a[k]:\n                t = switch(a[j:k + 1], i)\n                count += 1\n                a[j:k + 1] = t\n        i *= 2\n    b = [x for x in range(1, n + 1)]\n    if a == b:\n        print(count)\n    else:\n        print('-1')\n    test -= 1", "import sys\ninput = sys.stdin.readline\nfor i in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    p = 1\n    ans = 0\n    while p < n:\n        for i in range(0, n - p * 2 + 1, p * 2):\n            if a[i + p - 1] > a[i + p]:\n                (a[i:i + p], a[i + p:i + p + p]) = (a[i + p:i + p + p], a[i:i + p])\n                ans += 1\n        p *= 2\n    if a == list(range(1, n + 1)):\n        print(ans)\n    else:\n        print(-1)", "for t in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    state = 1\n    k = 0\n    kol = 1\n    while kol < n:\n        for i in range(0, n, kol * 2):\n            if p[i] > p[kol + i]:\n                (p[i:kol + i], p[kol + i:kol + i + kol]) = (p[kol + i:kol + i + kol], p[i:kol + i])\n                k += 1\n            if p[kol + i] - p[i] > kol:\n                state = 0\n        kol *= 2\n    print([-1, k][state])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) - 1 for i in input().split()]\n    s = 0\n    imp = False\n    while len(a) > 1:\n        b = []\n        for i in range(0, len(a) - 1, 2):\n            if abs(a[i] - a[i + 1]) != 1:\n                imp = True\n                break\n            if a[i] > a[i + 1]:\n                s += 1\n            b.append(min(a[i], a[i + 1]) // 2)\n        if imp:\n            print(-1)\n            break\n        a = b\n    else:\n        print(s)", "import sys\nreadline = sys.stdin.readline\nT = int(readline())\nfor _ in range(T):\n    N = int(readline())\n    P = list(map(int, readline().split()))\n    tmp = []\n    flag = True\n    ans = 0\n    if len(P) == 1:\n        print(0)\n        continue\n    for i in range(0, N, 2):\n        (a, b) = P[i:i + 2]\n        if a > b:\n            (a, b) = (b, a)\n            ans += 1\n        tmp.append([a, b])\n    while len(tmp) > 1:\n        n = len(tmp)\n        nxt = []\n        for i in range(0, n, 2):\n            (a, b) = tmp[i:i + 2]\n            if a > b:\n                ans += 1\n                (a, b) = (b, a)\n            if a[1] + 1 == b[0]:\n                nxt.append([a[0], b[1]])\n            else:\n                flag = False\n        if flag:\n            tmp = nxt\n        else:\n            break\n    if flag:\n        print(ans)\n    else:\n        print(-1)", "t = int(input())\nfor i in range(t):\n    m = int(input())\n    a = list(map(int, input().split(' ')))\n\n    def swap(i, j):\n        x = a[i:i + j]\n        a[i:i + j] = a[i + j:i + 2 * j]\n        a[i + j:i + 2 * j] = x\n    q = 2\n    cnt = 0\n    while q <= m:\n        for i in range(0, m, q):\n            if a[i] > a[i + q // 2]:\n                cnt += 1\n                swap(i, q // 2)\n        q *= 2\n    f = 0\n    for i in range(1, m):\n        if a[i] == a[i - 1] + 1:\n            continue\n        else:\n            f = 1\n            print(-1)\n            break\n    if f == 0:\n        print(cnt)", "for t in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    state = 1\n    k = 0\n    for i in range(0, n - 1, 2):\n        if p[i] > p[i + 1]:\n            k += 1\n            (p[i], p[i + 1]) = (p[i + 1], p[i])\n        if p[i + 1] - p[i] > 1:\n            state = 0\n    kol = 2\n    while kol < n:\n        for i in range(0, n, kol * 2):\n            if p[i] > p[kol + i]:\n                (p[i:kol + i], p[kol + i:kol + i + kol]) = (p[kol + i:kol + i + kol], p[i:kol + i])\n                k += 1\n            if p[kol + i] - p[i] > kol or p[kol + 1 + i] - p[i + 1] > kol:\n                state = 0\n        kol *= 2\n    print([-1, k][state])", "t = int(input())\n\ndef sort(arr, i, j):\n    if i + 1 >= j:\n        ctr = 0\n        if arr[i] > arr[j]:\n            ctr = 1\n        valid = True\n        if abs(arr[i] - arr[j]) > 1:\n            valid = False\n        return (min(arr[i], arr[j]), max(arr[i], arr[j]), ctr, valid)\n    mid = (i + j) // 2\n    ctr = 0\n    (lmin, lmax, x, lvalid) = sort(arr, i, mid)\n    (rmin, rmax, y, rvalid) = sort(arr, mid + 1, j)\n    cmin = min(lmin, rmin)\n    cmax = max(lmax, rmax)\n    valid = lvalid and rvalid\n    if cmax - cmin != j - i:\n        valid = False\n    if lmin > rmin:\n        ctr += 1\n    return (cmin, cmax, x + y + ctr, valid)\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (amin, amax, res, valid) = sort(arr, 0, n - 1)\n    if not valid:\n        print(-1)\n    else:\n        print(res)", "def isBeautiful(a, l, r):\n    if r - l == 1:\n        return (0, a[l], a[l])\n    mid = (l + r) // 2\n    (ll, ls, lb) = isBeautiful(a, l, mid)\n    (rr, rs, rb) = isBeautiful(a, mid, r)\n    (ss, bb) = (min(ls, rs), max(lb, rb))\n    if ll == -1 or rr == -1:\n        return (-1, ss, bb)\n    if lb < rs:\n        return (ll + rr, ss, bb)\n    if ls > rb:\n        return (ll + rr + 1, ss, bb)\n    return (-1, ss, bb)\nt = int(input())\nfor _ in range(t):\n    m = int(input())\n    p = list(map(int, input().split()))\n    (ans, sm, bi) = isBeautiful(p, 0, m)\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    k = 0\n    for i in range(0, n - 1, 2):\n        if p[i] > p[i + 1]:\n            k += 1\n            (p[i], p[i + 1]) = (p[i + 1], p[i])\n        if p[i + 1] - p[i] > 1:\n            print(-1)\n            break\n    else:\n        kol = 2\n        while kol < n:\n            for i in range(0, n - kol, kol * 2):\n                if p[i] > p[kol + i] or p[i + 1] > p[kol + 1 + i]:\n                    (p[i:kol + i], p[kol + i:kol + i + kol]) = (p[kol + i:kol + i + kol], p[i:kol + i])\n                    k += 1\n                if p[kol + i] - p[i] > kol or p[kol + 1 + i] - p[i + 1] > kol:\n                    print(-1)\n                    break\n            else:\n                kol *= 2\n                continue\n            break\n        else:\n            print(k)", "for t in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    k = 0\n    for i in range(0, n - 1, 2):\n        if p[i] > p[i + 1]:\n            k += 1\n            (p[i], p[i + 1]) = (p[i + 1], p[i])\n        if p[i + 1] - p[i] > 1:\n            print(-1)\n            break\n    else:\n        kol = 2\n        while kol < n:\n            for i in range(0, n - kol, kol * 2):\n                if p[i] > p[kol + i] or p[i + 1] > p[kol + 1 + i]:\n                    (p[i:kol + i], p[kol + i:kol + i + kol]) = (p[kol + i:kol + i + kol], p[i:kol + i])\n                    k += 1\n                if p[kol + i] - p[i] > kol or p[kol + 1 + i] - p[i + 1] > kol:\n                    print(-1)\n                    break\n            else:\n                kol *= 2\n                continue\n            break\n        else:\n            print(k)", "import sys\ninput = sys.stdin.readline\nfor t in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    k = 0\n    for i in range(0, n - 1, 2):\n        if p[i] > p[i + 1]:\n            k += 1\n            (p[i], p[i + 1]) = (p[i + 1], p[i])\n        if p[i + 1] - p[i] > 1:\n            print(-1)\n            break\n    else:\n        kol = 2\n        while kol < n:\n            for i in range(0, n - kol, kol * 2):\n                if p[i] > p[kol + i] or p[i + 1] > p[kol + 1 + i]:\n                    (p[i:kol + i], p[kol + i:kol + i + kol]) = (p[kol + i:kol + i + kol], p[i:kol + i])\n                    k += 1\n                if p[kol + i] - p[i] > kol or p[kol + 1 + i] - p[i + 1] > kol:\n                    print(-1)\n                    break\n            else:\n                kol *= 2\n                continue\n            break\n        else:\n            print(k)", "for t in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    k = 0\n    for i in range(0, n - 1, 2):\n        if p[i] > p[i + 1]:\n            k += 1\n            (p[i], p[i + 1]) = (p[i + 1], p[i])\n        if p[i + 1] - p[i] > 1:\n            print(-1)\n            break\n    else:\n        kol = 2\n        while kol < n:\n            for i in range(0, n - kol, kol * 2):\n                if p[i] > p[kol + i]:\n                    (p[i:kol + i], p[kol + i:kol + i + kol]) = (p[kol + i:kol + i + kol], p[i:kol + i])\n                    k += 1\n                if p[kol + i] - p[i] > kol or p[kol + 1 + i] - p[i + 1] > kol:\n                    print(-1)\n                    break\n            else:\n                kol *= 2\n                continue\n            break\n        else:\n            print(k)", "def mergeSort(arr, curr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n        mergeSort(L, curr)\n        mergeSort(R, curr)\n        i = j = k = 0\n        if L < R:\n            arr[:mid] = L\n            arr[mid:] = R\n        else:\n            counts[curr] += 1\n            arr[:mid] = R\n            arr[mid:] = L\n\ndef printList(arr):\n    for i in range(len(arr)):\n        print(arr[i], end=' ')\n    print()\n\ndef next_power_of_2(x):\n    return 1 if x == 0 else 2 ** (x - 1).bit_length()\nt = int(input())\ncounts = [0 for i in range(t)]\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().rstrip().split()))\n    nearest = next_power_of_2(n)\n    for j in range(n, nearest):\n        arr.append(0)\n    mergeSort(arr, i)\n    if all((arr[i] <= arr[i + 1] for i in range(len(arr) - 1))):\n        pass\n    else:\n        counts[i] = -1\nfor i in counts:\n    print(i)", "import os\nimport math\nimport collections\nimport bisect\nimport functools\nimport itertools\nimport heapq\n\ndef solve(a, l, r):\n    if l == r:\n        return 0\n    m = (l + r) // 2\n    left = solve(a, l, m)\n    right = solve(a, m + 1, r)\n    if left == -1 or right == -1:\n        return -1\n    res = left + right\n    if a[r] < a[l]:\n        (a[l:m + 1], a[m + 1:r + 1]) = (a[m + 1:r + 1], a[l:m + 1])\n        res += 1\n    elif a[m] > a[m + 1]:\n        return -1\n    return res\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(solve(a, 0, n - 1))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    b = 1\n    ok = True\n    while len(a) > 1:\n        tmp = []\n        for i in range(0, len(a), 2):\n            if abs(a[i] - a[i + 1]) != b:\n                ok = False\n            if a[i] > a[i + 1]:\n                ans += 1\n            tmp.append(max(a[i], a[i + 1]))\n        b *= 2\n        a = tmp.copy()\n    print(ans if ok else -1)", "import math\n\ndef cu(Se, h, num, ans):\n    for g in range(0, num, 2):\n        if Se[g] - Se[g + 1] == 4 ** (h - 1):\n            ans += 1\n        elif abs(Se[g] - Se[g + 1]) != 4 ** (h - 1):\n            ans = -1\n            return ans\n    t = int(num / 2)\n    S = [None for m in range(t)]\n    for g1 in range(t):\n        S[g1] = Se[2 * g1 + 1] + Se[2 * g1]\n    Se[:] = S[:]\n    return ans\nn = int(input())\nfor i in range(n):\n    ans = 0\n    num = int(input())\n    h = int(math.log2(num))\n    x = input()\n    Se = [int(n1) for n1 in x.split()]\n    for g in range(1, h + 1):\n        ans = cu(Se, g, num, ans)\n        num = int(num / 2)\n        if ans == -1:\n            break\n    print(ans)", "ans = 0\n\ndef recur(arr):\n    global ans\n    if len(arr) == 2:\n        if arr[1] >= arr[0]:\n            return arr\n        else:\n            ans += 1\n            (arr[1], arr[0]) = (arr[0], arr[1])\n            return arr\n    n = len(arr)\n    mid = n // 2\n    if sum(arr[:mid]) > sum(arr[mid:]):\n        ans += 1\n        a = recur(arr[mid:])\n        b = recur(arr[:mid])\n        return a + b\n    else:\n        a = recur(arr[:mid])\n        b = recur(arr[mid:])\n        return a + b\n\ndef check(arr) -> bool:\n    for i in range(0, len(arr), 2):\n        if abs(arr[i] - arr[i + 1]) != 1:\n            return False\n    return True\n\ndef sorted(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return False\n    return True\n\ndef solve():\n    global ans\n    ans = 0\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    if n == 1:\n        return 0\n    if check == False:\n        return -1\n    if sorted(recur(arr)):\n        return ans\n    return -1\ntest = int(input())\nfor _ in range(test):\n    ans = solve()\n    print(ans)", "import sys\nsys.setrecursionlimit(10 ** 9)\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n\n    def solve(arr, n1):\n        if len(arr) == 1:\n            return 0\n        t = []\n        c = 0\n        for i in range(0, n1, 2):\n            if min(arr[i], arr[i + 1]) + 1 != max(arr[i], arr[i + 1]):\n                return float('inf')\n            if arr[i] > arr[i + 1]:\n                c += 1\n            t.append(max(arr[i], arr[i + 1]) // 2)\n        return c + solve(t, n1 // 2)\n    t1 = solve(l, n)\n    if t1 == float('inf'):\n        print(-1)\n    else:\n        print(t1)", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n        return\n    b = [(a[i], i + 1) for i in range(n)]\n    b = sorted(b)\n    ans = 0\n    step = 2\n    ds = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143]\n    iss = 0\n    while step < n:\n        for i in range(0, n, step):\n            if abs(b[i][1] - b[i + step // 2][1]) > ds[iss]:\n                print(-1)\n                return\n            if b[i][1] > b[i + step // 2][1]:\n                ans += 1\n        step *= 2\n        iss += 1\n    if b[0][1] > n // 2:\n        ans += 1\n    print(ans)\nfor T in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    res = 0\n    curr = 0\n    solved = False\n    while 1 << curr < n:\n        if n == 1:\n            if l[0] != 1:\n                solved = True\n                print(-1)\n            break\n        addon = 1 << curr\n        for i in range(0, n, addon << 1):\n            high = max(l[i], l[i + addon])\n            low = min(l[i], l[i + addon])\n            if high - low != addon:\n                solved = True\n                print(-1)\n                break\n            if l[i] != low:\n                res += 1\n                l[i] = low\n        if solved:\n            break\n        curr += 1\n    if not solved:\n        print(res)", "global counter\n\ndef flip(a):\n    global counter\n    n = len(a) // 2\n    if a[0] > a[n]:\n        a = a[n:] + a[:n]\n        counter += 1\n    return a\n\ndef repeat(a):\n    global counter\n    if len(a) == 1:\n        return a\n    a = flip(a)\n    n = len(a) // 2\n    return repeat(a[:n]) + repeat(a[n:])\nfor _ in range(int(input())):\n    m = int(input())\n    p = list(map(int, input().split()))\n    a = list(range(1, m + 1))\n    counter = 0\n    p = repeat(p)\n    if p != a:\n        print(-1)\n    else:\n        print(counter)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    logn = int(math.log2(n))\n    a = [int(x) for x in input().split()]\n    res = 0\n    flag = True\n    for i in range(1, logn + 1):\n        l = int(2 ** i)\n        for idx in range(0, n, l):\n            l_large = a[idx + l // 2 - 1]\n            l_small = a[idx]\n            r_small = a[idx + l // 2]\n            r_large = a[idx + l - 1]\n            if abs(r_small - l_large) > 1 and abs(r_large - l_small) > 1:\n                flag = False\n                break\n            elif l_small > r_large:\n                res += 1\n                (a[idx:idx + l // 2], a[idx + l // 2:idx + l]) = (a[idx + l // 2:idx + l], a[idx:idx + l // 2])\n        if not flag:\n            break\n    if not flag:\n        print('-1')\n    else:\n        print(res)", "t = int(input())\n\nclass Solution:\n\n    def __init__(self):\n        self.operations = 0\n\n    def findOperations(self, array):\n        if len(array) == 1:\n            return array\n        mid = len(array) // 2\n        left = self.findOperations(array[:mid])\n        right = self.findOperations(array[mid:])\n        if left[0] > right[0]:\n            self.operations += 1\n            return right + left\n        return left + right\nsolution = Solution()\nfor _ in range(t):\n    m = int(input())\n    permutations = list(map(int, input().split()))\n    resultPermutations = solution.findOperations(permutations)\n    left = 0\n    right = 1\n    while right < len(resultPermutations):\n        if resultPermutations[right] - resultPermutations[left] != 1:\n            print(-1)\n            break\n        left += 1\n        right += 1\n    else:\n        print(solution.operations)\n    solution.operations = 0", "T = int(input())\nwhile T:\n    T -= 1\n    v = []\n    for i in range(20):\n        v.append([])\n    n = int(input())\n    v[0] = [*map(int, input().split())]\n    ans = 0\n    k = 0\n    flag = 1\n    while len(v[k]) != 1:\n        for i in range(0, len(v[k]), 2):\n            dis = 0\n            if v[k][i] > v[k][i + 1]:\n                ans += 1\n                dis = v[k][i] - v[k][i + 1]\n            else:\n                dis = v[k][i + 1] - v[k][i]\n            if dis != 4 ** k:\n                flag = 0\n                break\n            v[k + 1].append(v[k][i] + v[k][i + 1])\n        if flag == 0:\n            break\n        k = k + 1\n    if flag:\n        print(ans)\n    else:\n        print('-1')", "import math\nimport collections\nimport bisect\nimport heapq\nfrom collections import deque\nfrom math import sqrt, ceil, floor\n\ndef inp_arr():\n    return list(map(int, input().strip().split(' ')))\n\ndef inp_int():\n    return int(input())\n\ndef inp_str():\n    return input()\n\ndef solve():\n    (n,) = inp_arr()\n    a = inp_arr()\n    block = 2\n    ans = 0\n    while block <= n:\n        half = block // 2\n        for i in range(0, n, block):\n            if a[i:i + block] != sorted(a[i:i + block]):\n                ans += 1\n                a[i:i + block] = sorted(a[i:i + block])\n                if a[i + block - 1] - a[i] != block - 1:\n                    print(-1)\n                    return\n            elif a[i + block - 1] - a[i] != block - 1:\n                print(-1)\n                return\n        block = block * 2\n    print(ans)\ntt = inp_int()\nfor t in range(tt):\n    solve()", "cases = int(input())\n\ndef checkrecur(leftList, rightList, diff):\n    nextLength = diff // 2\n    l = min(leftList)\n    r = min(rightList)\n    if abs(l - r) == diff:\n        if nextLength > 0:\n            t1 = checkrecur(leftList[:nextLength], leftList[nextLength:], nextLength)\n            t2 = checkrecur(rightList[:nextLength], rightList[nextLength:], nextLength)\n            if t1 == -1 or t2 == -1:\n                return -1\n            if l < r:\n                return t1 + t2\n            else:\n                return 1 + t1 + t2\n        elif l < r:\n            return 0\n        else:\n            return 1\n    else:\n        return -1\nfor i in range(cases):\n    m = int(input())\n    ord = input().split()\n    if m == 1:\n        print('0')\n        continue\n    order = [int(j) for j in ord]\n    diff = m // 2\n    print(checkrecur(order[:diff], order[diff:], diff))", "def cal(n, arr):\n    if n == 1:\n        return 0\n    if n == 2:\n        if arr[0] == arr[1] + 1:\n            return 1\n        elif arr[0] == arr[1] - 1:\n            return 0\n        else:\n            return -1\n    aa = sum(arr[:n // 2])\n    bb = sum(arr[n // 2:])\n    if aa > bb:\n        if aa - bb == (n // 2) ** 2:\n            k1 = cal(n // 2, arr[:n // 2])\n            k2 = cal(n // 2, arr[n // 2:])\n            if k1 == -1 or k2 == -1:\n                return -1\n            else:\n                return k1 + k2 + 1\n        else:\n            return -1\n    elif bb - aa == (n // 2) ** 2:\n        k1 = cal(n // 2, arr[:n // 2])\n        k2 = cal(n // 2, arr[n // 2:])\n        if k1 == -1 or k2 == -1:\n            return -1\n        else:\n            return k1 + k2\n    else:\n        return -1\nfor jj in range(int(input())):\n    m = int(input())\n    k = [int(i) for i in input().split()]\n    print(cal(m, k))"]