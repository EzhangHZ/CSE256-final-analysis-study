["for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    x = 1\n    y = 1\n    s = s[::-1]\n    for i in s:\n        if i == 'L' and x < m:\n            x += 1\n        elif i == 'R' and x > 1:\n            x -= 1\n        elif i == 'U' and y < n:\n            y += 1\n        elif i == 'D' and y > 1:\n            y -= 1\n    print(y, x)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    x = 1\n    y = 1\n    s = s[::-1]\n    for i in s:\n        if i == 'L' and x < m:\n            x += 1\n        elif i == 'R' and x > 1:\n            x -= 1\n        elif i == 'U' and y < n:\n            y += 1\n        elif i == 'D' and y > 1:\n            y -= 1\n    print(y, x)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    x = 1\n    y = 1\n    s = s[::-1]\n    for i in s:\n        if i == 'L' and x < m:\n            x += 1\n        elif i == 'R' and x > 1:\n            x -= 1\n        elif i == 'U' and y < n:\n            y += 1\n        elif i == 'D' and y > 1:\n            y -= 1\n    print(y, x)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    x = 1\n    y = 1\n    s = s[::-1]\n    for i in s:\n        if i == 'L' and x < m:\n            x += 1\n        elif i == 'R' and x > 1:\n            x -= 1\n        elif i == 'U' and y < n:\n            y += 1\n        elif i == 'D' and y > 1:\n            y -= 1\n    print(y, x)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    x = 1\n    y = 1\n    s = s[::-1]\n    for i in s:\n        if i == 'L' and x < m:\n            x += 1\n        elif i == 'R' and x > 1:\n            x -= 1\n        elif i == 'U' and y < n:\n            y += 1\n        elif i == 'D' and y > 1:\n            y -= 1\n    print(y, x)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    x = 1\n    y = 1\n    s = s[::-1]\n    for i in s:\n        if i == 'L' and x < m:\n            x += 1\n        elif i == 'R' and x > 1:\n            x -= 1\n        elif i == 'U' and y < n:\n            y += 1\n        elif i == 'D' and y > 1:\n            y -= 1\n    print(y, x)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    x = 1\n    y = 1\n    s = s[::-1]\n    for i in s:\n        if i == 'L' and x < m:\n            x += 1\n        elif i == 'R' and x > 1:\n            x -= 1\n        elif i == 'U' and y < n:\n            y += 1\n        elif i == 'D' and y > 1:\n            y -= 1\n    print(y, x)", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\n\ndef solve():\n    (N, M) = map(int, input().split())\n    c = r = c1 = c2 = r1 = r2 = 0\n    for s in input():\n        if s == 'L':\n            c -= 1\n            if c2 - c >= M:\n                break\n            c1 = min(c, c1)\n        elif s == 'R':\n            c += 1\n            if c - c1 >= M:\n                break\n            c2 = max(c, c2)\n        elif s == 'U':\n            r -= 1\n            if r2 - r >= N:\n                break\n            r1 = min(r, r1)\n        else:\n            r += 1\n            if r - r2 >= N:\n                break\n            r2 = max(r, r2)\n    print(1 - r1, 1 - c1)\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    x = 1\n    y = 1\n    s = s[::-1]\n    for i in s:\n        if i == 'L' and x < m:\n            x += 1\n        elif i == 'R' and x > 1:\n            x -= 1\n        elif i == 'U' and y < n:\n            y += 1\n        elif i == 'D' and y > 1:\n            y -= 1\n    print(y, x)", "def f():\n    (n, m) = map(int, input().split())\n    s = input()\n    (xp, xn, yp, yn) = (0, 0, 0, 0)\n    (x, y) = (0, 0)\n    for i in s:\n        if i == 'R':\n            x += 1\n            xp = max(xp, x)\n        elif i == 'L':\n            x -= 1\n            xn = min(x, xn)\n        elif i == 'D':\n            y += 1\n            yp = max(y, yp)\n        else:\n            y -= 1\n            yn = min(y, yn)\n        if xp - xn >= m or yp - yn >= n:\n            if i == 'L':\n                xn += 1\n            elif i == 'U':\n                yn += 1\n            print(-yn + 1, -xn + 1)\n            return\n    print(-yn + 1, -xn + 1)\nfor _ in range(int(input())):\n    f()", "def solve():\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    moves = input()\n    (grid_x, grid_y) = (0, 0)\n    (x, y) = (0, 0)\n    (max_x, max_y) = (0, 0)\n    for command in moves:\n        if command == 'R':\n            if x + 1 <= grid_x + m - 1:\n                x += 1\n                max_x = max(max_x, x)\n            else:\n                return (-grid_y + 1, -grid_x + 1)\n        elif command == 'D':\n            if y + 1 <= grid_y + n - 1:\n                y += 1\n                max_y = max(max_y, y)\n            else:\n                return (-grid_y + 1, -grid_x + 1)\n        elif command == 'L':\n            if max_x == grid_x + m - 1:\n                if x == grid_x:\n                    return (-grid_y + 1, -grid_x + 1)\n                else:\n                    x -= 1\n            elif x == grid_x:\n                x -= 1\n                grid_x -= 1\n            else:\n                x -= 1\n        elif max_y == grid_y + n - 1:\n            if y == grid_y:\n                return (-grid_y + 1, -grid_x + 1)\n            else:\n                y -= 1\n        elif y == grid_y:\n            y -= 1\n            grid_y -= 1\n        else:\n            y -= 1\n    return (-grid_y + 1, -grid_x + 1)\nt = int(input())\nfor _ in range(t):\n    result = solve()\n    print(result[0], result[1])", "def main():\n    T = int(input())\n    for t in range(T):\n        run()\n\ndef run():\n    (h, w) = map(int, input().rstrip().split(' '))\n    s = input().rstrip()\n    (pos_x, pos_y, min_x, max_x, min_y, max_y) = (0, 0, 0, 0, 0, 0)\n    grid = [(0, 0, 0, 0)]\n    for move in s:\n        if move == 'R':\n            pos_x += 1\n            max_x = max(pos_x, max_x)\n        elif move == 'L':\n            pos_x -= 1\n            min_x = min(pos_x, min_x)\n        elif move == 'U':\n            pos_y += 1\n            max_y = max(pos_y, max_y)\n        else:\n            pos_y -= 1\n            min_y = min(pos_y, min_y)\n        grid.append((min_x, max_x, min_y, max_y))\n    for (min_x, max_x, min_y, max_y) in grid[::-1]:\n        if w >= max_x - min_x + 1 and h >= max_y - min_y + 1:\n            print(max_y + 1, abs(min_x) + 1)\n            break\nmain()", "t = int(input())\nfor k in range(t):\n    inp = input().split()\n    row = int(inp[0])\n    column = int(inp[1])\n    s = input()\n    L = []\n    D = []\n    left = 0\n    down = 0\n    start = 0\n    maximum = 0\n    for i in s:\n        if i == 'R':\n            if left + 1 < column:\n                left = left + 1\n                if maximum < left:\n                    maximum = left\n            else:\n                break\n        elif i == 'L':\n            if left - 1 >= 0:\n                left = left - 1\n            elif start + 1 < column and maximum + 1 < column:\n                start = start + 1\n                maximum = maximum + 1\n            else:\n                break\n    start1 = 0\n    maximum = 0\n    down = 0\n    for i in s:\n        if i == 'D':\n            if down + 1 < row:\n                down = down + 1\n                if maximum < down:\n                    maximum = down\n            else:\n                break\n        elif i == 'U':\n            if down - 1 >= 0:\n                down = down - 1\n            elif start1 + 1 < row and maximum + 1 < row:\n                start1 = start1 + 1\n                maximum = maximum + 1\n            else:\n                break\n    print(start1 + 1, start + 1)", "def II():\n    return map(int, input().split())\n\ndef Ii():\n    return int(input())\n\ndef infi():\n    return float('Inf')\n\ndef mino():\n    return -1\nfor ____ in range(Ii()):\n    (n, m) = II()\n    cs = 0\n    ml = 0\n    mr = 0\n    mu = 0\n    md = 0\n    cd = 0\n    s = input()\n    for i in s:\n        if i == 'L':\n            cs -= 1\n            if cs < ml:\n                if mr - ml >= m - 1:\n                    break\n                ml = cs\n        if i == 'R':\n            cs += 1\n            if cs > mr:\n                if mr - ml >= m - 1:\n                    break\n                mr = cs\n        if i == 'U':\n            cd -= 1\n            if cd < mu:\n                if md - mu >= n - 1:\n                    break\n                mu = cd\n        if i == 'D':\n            cd += 1\n            if cd > md:\n                if md - mu >= n - 1:\n                    break\n                md = cd\n    print(1 - mu, 1 - ml)", "t = int(input())\nfor tc in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    (x, y, rt, dw, cr, cd) = (1, 1, 1, 1, 1, 1)\n    for c in s:\n        if c == 'R':\n            cr += 1\n            rt = max(rt, cr)\n            if rt > m:\n                break\n        elif c == 'D':\n            cd += 1\n            dw = max(dw, cd)\n            if dw > n:\n                break\n        elif c == 'L':\n            cr -= 1\n            if cr < 1:\n                rt += 1\n                cr += 1\n                if rt > m:\n                    break\n                y += 1\n        else:\n            cd -= 1\n            if cd < 1:\n                dw += 1\n                cd += 1\n                if dw > n:\n                    break\n                x += 1\n    print(x, y)", "def solve():\n    (n, m) = map(int, input().split())\n    (cx, cy) = (0, 0)\n    (minx, miny) = (0, 0)\n    (maxx, maxy) = (0, 0)\n    r = (1, 1)\n    for c in input():\n        if c == 'D':\n            cy += 1\n            maxy = max(maxy, cy)\n        elif c == 'R':\n            cx += 1\n            maxx = max(maxx, cx)\n        elif c == 'U':\n            cy -= 1\n            miny = min(miny, cy)\n        elif c == 'L':\n            cx -= 1\n            minx = min(minx, cx)\n        if maxy - miny + 1 > n or maxx - minx + 1 > m:\n            break\n        r = (1 - miny, 1 - minx)\n    return r\nfor _ in range(int(input())):\n    print(*solve())", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    i = j = 0\n    left = right = up = down = 0\n    for x in input():\n        if x == 'L':\n            j -= 1\n            if right - (left := min(left, j)) == m:\n                left += 1\n                break\n        elif x == 'R':\n            j += 1\n            if (right := max(right, j)) - left == m:\n                right -= 1\n                break\n        elif x == 'U':\n            i -= 1\n            if down - (up := min(up, i)) == n:\n                up += 1\n                break\n        elif x == 'D':\n            i += 1\n            if (down := max(down, i)) - up == n:\n                down -= 1\n                break\n    print(1 - up, 1 - left)", "t = int(input())\n\ndef solve():\n    (n, m) = map(int, input().split())\n    commands = input()\n    (leftE, rightE, upE, downE) = (0, 0, 0, 0)\n    (x, y) = (0, 0)\n    (ansI, ansJ) = (1, 1)\n    for (i, c) in enumerate(commands):\n        if c == 'L':\n            x -= 1\n            leftE = max(-x, leftE)\n        elif c == 'R':\n            x += 1\n            rightE = max(rightE, x)\n        elif c == 'U':\n            y += 1\n            upE = max(upE, y)\n        else:\n            y -= 1\n            downE = max(downE, -y)\n        r = leftE + rightE + 1\n        u = upE + downE + 1\n        if r > m or u > n:\n            break\n        ansI = upE + 1\n        ansJ = leftE + 1\n    print(ansI, ansJ)\nfor _ in range(t):\n    solve()", "def fun(m, n, s):\n    stack_hor = 0\n    stack_ver = 0\n    (min_hor, max_hor) = (0, 0)\n    (min_ver, max_ver) = (0, 0)\n    i = 0\n    while i < len(s) and (max_hor - min_hor < n and max_ver - min_ver < m):\n        direction = s[i]\n        if direction == 'U':\n            stack_ver += 1\n            max_ver = max(max_ver, stack_ver)\n            if not max_ver - min_ver < m:\n                max_ver -= 1\n                break\n        elif direction == 'D':\n            stack_ver -= 1\n            min_ver = min(min_ver, stack_ver)\n            if not max_ver - min_ver < m:\n                min_ver += 1\n                break\n        elif direction == 'R':\n            stack_hor += 1\n            max_hor = max(max_hor, stack_hor)\n            if not max_hor - min_hor < n:\n                max_hor -= 1\n                break\n        else:\n            stack_hor -= 1\n            min_hor = min(min_hor, stack_hor)\n            if not max_hor - min_hor < n:\n                min_hor += 1\n                break\n        i += 1\n    print(str(abs(max_ver) + 1) + ' ' + str(abs(min_hor) + 1))\nt = int(input())\nfor _ in range(t):\n    m_n = input().split()\n    m = int(m_n[0])\n    n = int(m_n[1])\n    s = input()\n    fun(m, n, s)", "import sys\n\ndef get_int():\n    return int(sys.stdin.readline())\n\ndef get_string():\n    return sys.stdin.readline().strip()\nFILE = False\nif FILE:\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nt = get_int()\nanswer = []\nfor i in range(0, t):\n    dim = get_string()\n    (n, m) = dim.split()\n    n = int(n)\n    m = int(m)\n    message = get_string()\n    dx = 0\n    dy = 0\n    min_dx = 0\n    max_dx = 0\n    min_dy = 0\n    max_dy = 0\n    for letter in message:\n        if letter == 'L':\n            dy -= 1\n            min_dy = min(min_dy, dy)\n        elif letter == 'R':\n            dy += 1\n            max_dy = max(max_dy, dy)\n        elif letter == 'U':\n            dx -= 1\n            min_dx = min(min_dx, dx)\n        else:\n            dx += 1\n            max_dx = max(max_dx, dx)\n        if max_dx - min_dx >= n:\n            if dx == min_dx:\n                min_dx += 1\n            break\n        if max_dy - min_dy >= m:\n            if dy == min_dy:\n                min_dy += 1\n            break\n    v1 = 1 - min_dx\n    v2 = 1 - min_dy\n    answer.append(str(v1) + ' ' + str(v2))\nfor item in answer:\n    sys.stdout.write(item)\n    sys.stdout.write('\\n')", "o = int(input())\nfor _ in range(0, o):\n    (n, m) = map(int, input().split())\n    s = input()\n    sx = 0\n    sy = 0\n    x = sx\n    y = sy\n    maxr = 0\n    maxl = 0\n    maxu = 0\n    maxd = 0\n    for w in s:\n        if w == 'R':\n            y += 1\n            if y >= m:\n                if sy - 1 - maxl >= 0:\n                    sy -= 1\n                    y -= 1\n                else:\n                    break\n            maxr = max(maxr, y - sy)\n        elif w == 'L':\n            y -= 1\n            if y < 0:\n                if sy + 1 + maxr < m:\n                    sy += 1\n                    y += 1\n                else:\n                    break\n            maxl = max(maxl, sy - y)\n        elif w == 'D':\n            x += 1\n            if x >= n:\n                if sx - 1 - maxu >= 0:\n                    sx -= 1\n                    x -= 1\n                else:\n                    break\n            maxd = max(maxd, x - sx)\n        elif w == 'U':\n            x -= 1\n            if x < 0:\n                if sx + 1 + maxd < n:\n                    sx += 1\n                    x += 1\n                else:\n                    break\n            maxu = max(maxu, sx - x)\n    print(sx + 1, sy + 1)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    n -= 1\n    m -= 1\n    s = input()\n    lh = 0\n    uh = 0\n    lw = 0\n    rw = 0\n    h = 0\n    w = 0\n    for i in s:\n        if i == 'L':\n            if rw - w == m:\n                break\n            w -= 1\n            lw = min(w, lw)\n        elif i == 'R':\n            if w - lw == m:\n                break\n            w += 1\n            rw = max(w, rw)\n        elif i == 'U':\n            if lh - h == n:\n                break\n            h -= 1\n            uh = min(h, uh)\n        elif i == 'D':\n            if h - uh == n:\n                break\n            h += 1\n            lh = max(lh, h)\n    print(-uh + 1, -lw + 1)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    (u, r, d, l) = (0, 0, 0, 0)\n    (cx, cy) = (0, 0)\n    for move in s:\n        if move == 'U':\n            cy += 1\n            u = max(u, cy)\n            if u - d >= n:\n                u -= 1\n                break\n        elif move == 'D':\n            cy -= 1\n            d = min(d, cy)\n            if u - d >= n:\n                d += 1\n                break\n        elif move == 'L':\n            cx -= 1\n            l = min(l, cx)\n            if r - l >= m:\n                l += 1\n                break\n        else:\n            cx += 1\n            r = max(r, cx)\n            if r - l >= m:\n                r -= 1\n                break\n    print(u + 1, 1 - l)", "t = int(input())\nnth = []\nmth = []\narr = []\nfor i in range(t):\n    inp = input().split(' ')\n    nth.append(int(inp[0]))\n    mth.append(int(inp[1]))\n    arr.append(input())\nfor i in range(t):\n    col = [0]\n    row = [0]\n    maxCol = 0\n    maxRow = 0\n    for j in arr[i]:\n        if j == 'L':\n            maxCol -= 1\n            col.append(maxCol)\n        elif j == 'R':\n            maxCol += 1\n            col.append(maxCol)\n        elif j == 'U':\n            maxRow -= 1\n            row.append(maxRow)\n        else:\n            maxRow += 1\n            row.append(maxRow)\n    rowAdd = 0\n    colAdd = 0\n    maxRow = 0\n    maxCol = 0\n    for j in col:\n        if j + colAdd < 0:\n            if maxCol + 1 < mth[i]:\n                colAdd += 1\n                maxCol += 1\n            else:\n                break\n        else:\n            if j + colAdd >= mth[i]:\n                break\n            if j + colAdd > maxCol:\n                maxCol = j + colAdd\n    for j in row:\n        if j + rowAdd < 0:\n            if maxRow + 1 < nth[i]:\n                rowAdd += 1\n                maxRow += 1\n            else:\n                break\n        else:\n            if j + rowAdd > maxRow:\n                maxRow = j + rowAdd\n            if j + rowAdd >= nth[i]:\n                break\n    print(rowAdd + 1, colAdd + 1)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    (x, y) = (0, 0)\n    (mxx, mnx, mxy, mny) = (0, 0, 0, 0)\n    for l in s:\n        if l == 'R':\n            x += 1\n            mxx = max(mxx, x)\n        elif l == 'L':\n            x -= 1\n            mnx = min(mnx, x)\n        elif l == 'U':\n            y += 1\n            mxy = max(mxy, y)\n        elif l == 'D':\n            y -= 1\n            mny = min(mny, y)\n        if mxx - mnx + 1 > m or mxy - mny + 1 > n:\n            if l == 'R':\n                x -= 1\n                mxx -= 1\n            elif l == 'L':\n                x += 1\n                mnx += 1\n            elif l == 'U':\n                y -= 1\n                mxy -= 1\n            elif l == 'D':\n                y += 1\n                mny += 1\n            break\n    print(1 + mxy, 1 - mnx)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    r = 0\n    l = 0\n    u = 0\n    d = 0\n    rl = 0\n    ud = 0\n    resX = 0\n    resY = 0\n    for i in range(len(s)):\n        if s[i] == 'R':\n            rl += 1\n            r = max(r, rl)\n            if 1 + r + abs(l) > m:\n                r -= 1\n                break\n        elif s[i] == 'L':\n            rl -= 1\n            l = min(l, rl)\n            if 1 + r + abs(l) > m:\n                l += 1\n                break\n        elif s[i] == 'U':\n            ud += 1\n            u = max(u, ud)\n            if 1 + u + abs(d) > n:\n                u -= 1\n                break\n        else:\n            ud -= 1\n            d = min(d, ud)\n            if 1 + u + abs(d) > n:\n                d += 1\n                break\n    print(u + 1, m - r)", "from itertools import product, combinations\nfrom math import sqrt, gcd, ceil\nINF = int(1000000000.0 + 1)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    x = 0\n    y = 0\n    (xmin, xmax, ymin, ymax) = (0, 0, 0, 0)\n    breaked = False\n    for i in range(len(s)):\n        el = s[i]\n        if el == 'L':\n            x -= 1\n        elif el == 'R':\n            x += 1\n        elif el == 'U':\n            y += 1\n        elif el == 'D':\n            y -= 1\n        if x < xmin:\n            xmin = x\n            t = 1\n        elif x > xmax:\n            xmax = x\n            t = 2\n        elif y < ymin:\n            ymin = y\n            t = 3\n        elif y > ymax:\n            ymax = y\n            t = 4\n        if ymax - ymin >= n or xmax - xmin >= m:\n            breaked = True\n            break\n    if breaked:\n        if t == 1:\n            xmin += 1\n        elif t == 2:\n            xmax -= 1\n        elif t == 3:\n            ymin += 1\n        else:\n            ymax -= 1\n    print(1 + ymax, m - xmax)", "solutions = []\nt = int(input())\nfor i in range(t):\n    str1 = input().strip().split()\n    n = int(str1[0])\n    m = int(str1[1])\n    commands = input().strip()\n    i1 = 1\n    j1 = 1\n    i2 = n\n    j2 = m\n    ok = 1\n    for j in range(len(commands)):\n        if commands[j] == 'R':\n            if j2 < m:\n                j2 += 1\n            j1 += 1\n            if j1 > j2:\n                j1 -= 1\n                ok = 0\n                break\n        elif commands[j] == 'L':\n            if j1 > 1:\n                j1 -= 1\n            j2 -= 1\n            if j1 > j2:\n                j2 += 1\n                ok = 0\n                break\n        elif commands[j] == 'D':\n            if i2 < n:\n                i2 += 1\n            i1 += 1\n            if i1 > i2:\n                i1 -= 1\n                ok = 0\n                break\n        elif commands[j] == 'U':\n            if i1 > 1:\n                i1 -= 1\n            i2 -= 1\n            if i1 > i2:\n                i2 += 1\n                ok = 0\n                break\n    curr_i = i1\n    curr_j = j1\n    if ok == 0:\n        j -= 1\n    for back in range(j, -1, -1):\n        if commands[back] == 'L':\n            curr_j += 1\n        elif commands[back] == 'R':\n            curr_j -= 1\n        elif commands[back] == 'U':\n            curr_i += 1\n        elif commands[back] == 'D':\n            curr_i -= 1\n    solutions.append(str(curr_i) + ' ' + str(curr_j))\nfor i in solutions:\n    print(i)", "move = {'L': -1, 'R': 1, 'U': 1, 'D': -1}\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    move_order = input()\n    (bx, by, maxbx, maxby, minbx, minby) = (0, 0, 0, 0, 0, 0)\n    for c in move_order:\n        if c == 'L':\n            bx -= 1\n            minbx = min(minbx, bx)\n        elif c == 'R':\n            bx += 1\n            maxbx = max(maxbx, bx)\n        elif c == 'U':\n            by -= 1\n            minby = min(minby, by)\n        else:\n            by += 1\n            maxby = max(maxby, by)\n        if maxbx - minbx >= m:\n            if bx == minbx:\n                minbx += 1\n            break\n        if maxby - minby >= n:\n            if by == minby:\n                minby += 1\n            break\n    str1 = str(1 - minby)\n    str2 = str(1 - minbx)\n    print(str1 + ' ' + str2)", "def solve(r, c, s):\n    pos = [1, 1]\n    pos_range = {'U': 1, 'D': 1, 'L': 1, 'R': 1}\n    for command in s:\n        if command == 'R':\n            pos[1] += 1\n            pos_range['R'] = max(pos_range['R'], pos[1])\n        elif command == 'L':\n            pos[1] -= 1\n            pos_range['L'] = min(pos_range['L'], pos[1])\n        elif command == 'U':\n            pos[0] -= 1\n            pos_range['U'] = min(pos_range['U'], pos[0])\n        elif command == 'D':\n            pos[0] += 1\n            pos_range['D'] = max(pos_range['D'], pos[0])\n        else:\n            raise NotImplementedError()\n        if pos_range['D'] - pos_range['U'] + 1 > r or pos_range['R'] - pos_range['L'] + 1 > c:\n            if command == 'R':\n                pos[1] -= 1\n                pos_range['R'] -= 1\n            elif command == 'L':\n                pos[1] += 1\n                pos_range['L'] += 1\n            elif command == 'U':\n                pos[0] += 1\n                pos_range['U'] += 1\n            elif command == 'D':\n                pos[0] -= 1\n                pos_range['D'] -= 1\n            else:\n                raise NotImplementedError()\n            break\n    starting_pos = [2 - pos_range['U'], 2 - pos_range['L']]\n    return starting_pos\nt = int(input())\nfor i in range(t):\n    (r, c) = list(map(int, input().split(' ')))\n    s = input()\n    result = solve(r, c, s)\n    print(result[0], result[1])", "for _ in range(int(input())):\n    (h, w) = map(int, input().split())\n    s = input()\n    n = len(s)\n    (ci, cj) = (0, 0)\n    (min_i, max_i) = (0, 0)\n    (min_j, max_j) = (0, 0)\n    last_idx = n\n    for i in range(n):\n        op = s[i]\n        if op == 'R':\n            cj += 1\n            max_j = max(max_j, cj)\n        elif op == 'L':\n            cj -= 1\n            min_j = min(min_j, cj)\n        elif op == 'D':\n            ci += 1\n            max_i = max(max_i, ci)\n        elif op == 'U':\n            ci -= 1\n            min_i = min(min_i, ci)\n        if max_i - min_i == h or max_j - min_j == w:\n            last_idx = i\n            break\n    if last_idx == -1:\n        print(1, 1)\n    elif last_idx == n:\n        print(abs(min_i) + 1, abs(min_j) + 1)\n    else:\n        op = s[last_idx]\n        if op == 'R':\n            max_j -= 1\n        elif op == 'L':\n            min_j += 1\n        elif op == 'D':\n            max_i -= 1\n        elif op == 'U':\n            min_i += 1\n        print(abs(min_i) + 1, abs(min_j) + 1)", "t = int(input())\nfor _ in range(t):\n    ans = [-1] * 2\n    (n, m) = map(int, input().split())\n    s = list(input())\n    nmin = nmax = mmin = mmax = 0\n    nnow = mnow = 0\n    for i in range(len(s)):\n        if s[i] == 'U':\n            nnow += 1\n            nmax = max(nmax, nnow)\n        elif s[i] == 'D':\n            nnow -= 1\n            nmin = min(nmin, nnow)\n        if nmax - nmin == n:\n            if nnow == nmax:\n                nmax -= 1\n            break\n        if s[i] == 'L':\n            mnow -= 1\n            mmin = min(mmin, mnow)\n        elif s[i] == 'R':\n            mnow += 1\n            mmax = max(mmax, mnow)\n        if mmax - mmin == m:\n            if mnow == mmin:\n                mmin += 1\n            break\n    ans[0] = nmax + 1\n    ans[1] = -mmin + 1\n    print(*ans)", "number = int(input())\n\ndef f(n, m, steps):\n    n = n - 1\n    m = m - 1\n    max_x = 0\n    max_y = 0\n    min_x = 0\n    min_y = 0\n    y = 0\n    x = 0\n    pos = [0, 0]\n    for step in steps:\n        if step == 'U':\n            y += 1\n        elif step == 'D':\n            y -= 1\n        elif step == 'L':\n            x += 1\n        elif step == 'R':\n            x -= 1\n        min_x = min(min_x, x)\n        min_y = min(min_y, y)\n        max_x = max(max_x, x)\n        max_y = max(max_y, y)\n        if max_y - min_y <= n and max_x - min_x <= m:\n            pos = [max_y, max_x]\n        else:\n            return pos\n    return pos\nfor _ in range(number):\n    board = input().split(' ')\n    steps = input()\n    (n, m) = (int(board[0]), int(board[1]))\n    pos = f(n, m, steps)\n    print(pos[0] + 1, pos[1] + 1)", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    s = input()\n    (r, c, tr, tc) = (1, 1, 1, 1)\n    (cnth, cntv) = (0, 0)\n    (N, M) = (n, m)\n    for i in range(len(s)):\n        if s[i] == 'R':\n            cnth += 1\n            while cnth > 0 and m + cnth > M:\n                m -= 1\n        if s[i] == 'L':\n            cnth -= 1\n            while cnth < 0 and c + cnth < 1:\n                c += 1\n        if s[i] == 'U':\n            cntv -= 1\n            while cntv < 0 and r + cntv < 1:\n                r += 1\n        if s[i] == 'D':\n            cntv += 1\n            while cntv > 0 and n + cntv > N:\n                n -= 1\n        if r > n or c > m:\n            break\n        tr = r\n        tc = c\n    print(tr, tc)", "def squareOK(r1, c1):\n    if 0 < r1 <= r and 0 < c1 <= c:\n        return True\n    return False\nt = int(input())\nfor test in range(t):\n    (r, c) = map(int, input().split())\n    s = input()\n    ir = 1\n    ic = 1\n    cr = 1\n    cc = 1\n    left = 0\n    right = c - 1\n    up = 0\n    down = r - 1\n    for (ind, i) in enumerate(s):\n        if i == 'L':\n            if squareOK(cr, cc - 1):\n                cc -= 1\n                left = min(left, cc)\n                continue\n            elif squareOK(ir, ic + 1):\n                if right > 0:\n                    ic += 1\n                    right -= 1\n                    continue\n            break\n        if i == 'R':\n            if squareOK(cr, cc + 1):\n                cc += 1\n                right = min(right, c - cc)\n                continue\n            elif squareOK(ir, ic - 1):\n                if left > 0:\n                    ic -= 1\n                    left -= 1\n                    continue\n            break\n        if i == 'U':\n            if squareOK(cr - 1, cc):\n                cr -= 1\n                up = min(up, cr)\n                continue\n            elif squareOK(ir + 1, ic):\n                if down > 0:\n                    ir += 1\n                    down -= 1\n                    continue\n            break\n        else:\n            if squareOK(cr + 1, cc):\n                cr += 1\n                down = min(down, r - cr)\n                continue\n            elif squareOK(ir - 1, ic):\n                if up > 0:\n                    ir -= 1\n                    up -= 1\n                    continue\n            break\n    print(ir, ic)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    way = input()\n    maxiUP = 0\n    maxiDOWN = 0\n    maxiRIGHT = 0\n    maxiLEFT = 0\n    now = [0, 0]\n    last = None\n    over = True\n    for j in way:\n        last = j\n        if j == 'U':\n            now[0] += 1\n        elif j == 'D':\n            now[0] -= 1\n        elif j == 'R':\n            now[1] += 1\n        elif j == 'L':\n            now[1] -= 1\n        if now[0] > maxiUP:\n            maxiUP = now[0]\n        elif now[0] < -maxiDOWN:\n            maxiDOWN = -now[0]\n        elif now[1] > maxiRIGHT:\n            maxiRIGHT = now[1]\n        elif now[1] < -maxiLEFT:\n            maxiLEFT = -now[1]\n        if maxiDOWN + maxiUP > n - 1:\n            over = False\n            break\n        elif maxiLEFT + maxiRIGHT > m - 1:\n            over = False\n            break\n    print(maxiUP + 1 - 1 if last == 'U' and (not over) else maxiUP + 1, maxiLEFT + 1 - 1 if last == 'L' and (not over) else maxiLEFT + 1)", "answers = []\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    (sx, sy, x, y, max_x, max_y) = (1, 1, 1, 1, 1, 1)\n    for j in range(len(s)):\n        i = s[j]\n        if i == 'U':\n            y -= 1\n        if i == 'D':\n            y += 1\n        if i == 'L':\n            x -= 1\n        if i == 'R':\n            x += 1\n        if x < 1:\n            if max_x < m:\n                x += 1\n                sx += 1\n                max_x += 1\n            else:\n                break\n        if y < 1:\n            if max_y < n:\n                y += 1\n                sy += 1\n                max_y += 1\n            else:\n                break\n        if x > m or y > n:\n            break\n        max_x = max(max_x, x)\n        max_y = max(max_y, y)\n    answers.append((sy, sx))\nfor i in answers:\n    print(*i)", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    s = input().rstrip()\n    (left, right, top, down) = (0, m - 1, 0, n - 1)\n    path = []\n    for t in s:\n        if t == 'L':\n            nl = max(0, left - 1)\n            nr = right - 1\n            left = nl\n            if nr < 0:\n                break\n            right = nr\n        elif t == 'R':\n            nl = left + 1\n            nr = min(m - 1, right + 1)\n            right = nr\n            if nl > m - 1:\n                break\n            left = nl\n        elif t == 'U':\n            nt = max(0, top - 1)\n            nd = down - 1\n            top = nt\n            if nd < 0:\n                break\n            down = nd\n        else:\n            nt = top + 1\n            nd = min(n - 1, down + 1)\n            down = nd\n            if nt > n - 1:\n                break\n            top = nt\n        path.append(t)\n    (r, c) = (top, left)\n    while path:\n        t = path.pop()\n        if t == 'L':\n            c += 1\n        elif t == 'R':\n            c -= 1\n        elif t == 'U':\n            r += 1\n        else:\n            r -= 1\n    print(r + 1, c + 1)", "for q in range(int(input())):\n    (str, stb) = input().split()\n    str = int(str)\n    stb = int(stb)\n    naprav = list(input())\n    l = 0\n    r = 0\n    u = 0\n    d = 0\n    lr = 0\n    ud = 0\n    z = 0\n    for i in range(len(naprav)):\n        if naprav[i] == 'L':\n            lr -= 1\n        elif naprav[i] == 'R':\n            lr += 1\n        elif naprav[i] == 'D':\n            ud -= 1\n        elif naprav[i] == 'U':\n            ud += 1\n        if lr - l >= stb or r - lr >= stb or ud - d >= str or (u - ud >= str):\n            print(1 + u, 1 - l)\n            z = 1\n            break\n        elif lr < l:\n            l = lr\n        elif lr > r:\n            r = lr\n        elif ud < d:\n            d = ud\n        elif ud > u:\n            u = ud\n    if z == 0:\n        print(1 + u, 1 - l)", "def get(a, k):\n    n = len(a)\n    x = 0\n    mini = 0\n    maxi = 0\n    for i in a:\n        mini = min(mini, i)\n        maxi = max(maxi, i)\n        if maxi - mini + 1 > k:\n            return x\n        if i < 0:\n            x = max(x, abs(i))\n    return x\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = input()\n    pre_x = []\n    pre_y = []\n    for i in a:\n        if i == 'R':\n            pre_x.append(1)\n        elif i == 'L':\n            pre_x.append(-1)\n        elif i == 'U':\n            pre_y.append(-1)\n        else:\n            pre_y.append(1)\n    for i in range(1, len(pre_x)):\n        pre_x[i] += pre_x[i - 1]\n    for i in range(1, len(pre_y)):\n        pre_y[i] += pre_y[i - 1]\n    print(get(pre_y, n) + 1, get(pre_x, m) + 1)", "tc = int(input())\nfor t in range(tc):\n    (yran, xran) = map(int, input().split())\n    s = input()\n    startx = 0\n    starty = 0\n    curx = 0\n    cury = 0\n    lowestx = 0\n    lowesty = 0\n    highestx = 0\n    highesty = 0\n    for i in range(len(s)):\n        if s[i] == 'R':\n            curx += 1\n        elif s[i] == 'L':\n            curx -= 1\n        elif s[i] == 'U':\n            cury -= 1\n        elif s[i] == 'D':\n            cury += 1\n        prevlowx = lowestx\n        prevhighx = highestx\n        prevlowy = lowesty\n        prevhighy = highesty\n        if curx < lowestx:\n            lowestx = curx\n        if cury < lowesty:\n            lowesty = cury\n        if cury > highesty:\n            highesty = cury\n        if curx > highestx:\n            highestx = curx\n        if abs(highesty - lowesty) > yran - 1:\n            lowestx = prevlowx\n            highestx = prevhighx\n            lowesty = prevlowy\n            highesty = prevhighy\n            break\n        if abs(highestx - lowestx) > xran - 1:\n            lowestx = prevlowx\n            highestx = prevhighx\n            lowesty = prevlowy\n            highesty = prevhighy\n            break\n    startx = startx - lowestx\n    starty = starty - lowesty\n    startx += 1\n    starty += 1\n    print(starty, startx)", "import heapq\n\ndef solve():\n    (n, m) = list(map(int, input().split()))\n    moves = input()\n    (max_up, max_down) = (0, 0)\n    (max_left, max_right) = (0, 0)\n    (x, y) = (0, 0)\n    (ans_x, ans_y) = (1, 1)\n    for char in moves:\n        if char == 'U':\n            y += 1\n        elif char == 'D':\n            y -= 1\n        elif char == 'L':\n            x -= 1\n        elif char == 'R':\n            x += 1\n        max_left = min(x, max_left)\n        max_right = max(x, max_right)\n        max_up = max(y, max_up)\n        max_down = min(y, max_down)\n        if max_right - max_left + 1 > m or max_up - max_down + 1 > n:\n            break\n        else:\n            ans_y = abs(max_left) + 1\n            ans_x = abs(max_up) + 1\n    print(*[ans_x, ans_y])\nfor i in range(int(input())):\n    solve()", "import sys\nN = int(200000.0 + 5)\nsys.setrecursionlimit(N)\n(n, m) = (int(), int())\ndx = [-1, 0, 1, 0]\ndy = [0, 1, 0, -1]\n\ndef charming():\n    global n, m\n    (n, m) = map(int, input().split())\n    opt = input()\n    d = {'U': 0, 'R': 1, 'D': 2, 'L': 3}\n    (res1, res2) = (1, 1)\n    (cntx, cnty) = (0, 0)\n    (mnx, mxx) = (0, 0)\n    (mny, mxy) = (0, 0)\n    (flag1, flag2) = (True, True)\n    for i in opt:\n        id = d[i]\n        cntx += dx[id]\n        cnty += dy[id]\n        mnx = min(mnx, cntx)\n        mxx = max(mxx, cntx)\n        mny = min(mny, cnty)\n        mxy = max(mxy, cnty)\n        lx = 1 - mnx\n        rx = n - mxx\n        ly = 1 - mny\n        ry = m - mxy\n        if id == 0 or id == 2:\n            if lx <= rx:\n                res1 = lx\n            else:\n                break\n        if id == 1 or id == 3:\n            if ly <= ry:\n                res2 = ly\n            else:\n                break\n    print(res1, res2)\nfor t in range(int(input())):\n    charming()", "for _ in range(int(input())):\n    (n, M) = map(int, input().split())\n    s = input()\n    cnt_hor = 0\n    cnt_ver = 0\n    mu = 0\n    md = 0\n    ml = 0\n    mr = 0\n    m = [[], [], [], []]\n    for i in s:\n        if i == 'U':\n            cnt_ver += 1\n            mu = max(mu, cnt_ver)\n        elif i == 'D':\n            cnt_ver -= 1\n            md = min(md, cnt_ver)\n        elif i == 'L':\n            cnt_hor -= 1\n            ml = min(ml, cnt_hor)\n        else:\n            cnt_hor += 1\n            mr = max(mr, cnt_hor)\n        m[3].append(mr)\n        m[0].append(mu)\n        m[2].append(ml)\n        m[1].append(md)\n    ans = len(s) - 1\n    for i in range(len(s)):\n        if m[0][i] - m[1][i] > n - 1 or m[3][i] - m[2][i] > M - 1:\n            ans = i - 1\n            break\n    if ans == -1:\n        print(1, 1)\n    else:\n        print(1 + m[0][ans], abs(m[2][ans]) + 1)", "import sys\ninput = sys.stdin.readline\n\ndef solution():\n    (n, m) = [int(x) for x in input().strip().split()]\n    s = input().strip()\n    minx = 1\n    maxx = n\n    miny = 1\n    maxy = m\n    res = ['1', '1']\n    updown = 0\n    leftright = 0\n    for command in s:\n        if command == 'U':\n            updown -= 1\n        if command == 'D':\n            updown += 1\n        if command == 'L':\n            leftright -= 1\n        if command == 'R':\n            leftright += 1\n        minx = max(minx, 1 - updown)\n        maxx = min(maxx, n - updown)\n        miny = max(miny, 1 - leftright)\n        maxy = min(maxy, m - leftright)\n        if minx > maxx or miny > maxy:\n            break\n        res = [str(minx), str(miny)]\n    print(' '.join(res))\nfor _ in range(int(input().strip())):\n    solution()", "def solve():\n    (h, w) = map(int, input().split())\n    coms = input().strip()\n    (x, y) = (0, 0)\n    (min_x, max_x, min_y, max_y) = (0, 0, 0, 0)\n    for com in coms:\n        if com == 'L':\n            x -= 1\n        elif com == 'R':\n            x += 1\n        elif com == 'U':\n            y -= 1\n        elif com == 'D':\n            y += 1\n        cached = str(-min_y + 1) + ' ' + str(-min_x + 1)\n        min_x = min(min_x, x)\n        max_x = max(max_x, x)\n        min_y = min(min_y, y)\n        max_y = max(max_y, y)\n        if max_x - min_x >= w or max_y - min_y >= h:\n            return cached\n    return str(-min_y + 1) + ' ' + str(-min_x + 1)\nn = int(input())\nfor i in range(n):\n    print(solve())", "import sys\nimport os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n    sys.stderr = open('error.txt', 'w')\ndepth = 1000000\nmod = 1000000007\nlim = mod * mod\nsys.setrecursionlimit(depth)\nlinp = lambda : list(minp())\nminp = lambda : map(int, input().split())\nfrom math import inf, ceil, sqrt, log2, gcd\nfrom collections import defaultdict, deque\ndxy = [(1, 0), (-1, 0), (0, 1), (0, -1)]\nfor _ in range(int(input())):\n    ((n, m), s) = (minp(), input())\n    (x, y) = (0, 0)\n    l = r = d = u = 0\n    (X, Y) = (1, 1)\n    for c in s:\n        if c == 'L':\n            x -= 1\n        elif c == 'R':\n            x += 1\n        elif c == 'U':\n            y += 1\n        else:\n            y -= 1\n        l = max(l, -x)\n        r = max(r, x)\n        u = max(u, y)\n        d = max(d, -y)\n        if l + r < m and u + d < n:\n            Y = l + 1\n            X = u + 1\n    print(X, Y)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    (negx, negy) = (0, 0)\n    (posx, posy) = (0, 0)\n    (prevx, prevy) = (0, 0)\n    (ansx, ansy) = (1, 1)\n    for i in range(len(s)):\n        if s[i] == 'L':\n            prevx -= 1\n        elif s[i] == 'R':\n            prevx += 1\n        elif s[i] == 'U':\n            prevy -= 1\n        else:\n            prevy += 1\n        negx = min(negx, prevx)\n        negy = min(negy, prevy)\n        posx = max(posx, prevx)\n        posy = max(posy, prevy)\n        rx = posx - negx\n        ry = posy - negy\n        if rx >= m or ry >= n:\n            break\n        ansx = 1 - negx\n        ansy = 1 - negy\n    print(ansy, ansx)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    l = d = u = r = x = y = 0\n    ans = ['0'] * 2\n    di = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n    for i in range(len(s)):\n        (a, b) = di[s[i]]\n        x += a\n        y += b\n        l = min(l, y)\n        r = max(r, y)\n        u = min(u, x)\n        d = max(d, x)\n        if r - l >= m or d - u >= n:\n            break\n        ans = (abs(u), abs(l))\n    print(int(ans[0]) + 1, int(ans[1]) + 1)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    (r, c) = (1, 1)\n    (x, y, lx, rx, uy, dy) = (0, 0, 0, 0, 0, 0)\n    for ch in s:\n        if ch == 'L':\n            x -= 1\n        elif ch == 'R':\n            x += 1\n        elif ch == 'U':\n            y -= 1\n        else:\n            y += 1\n        (lx, rx) = (min(lx, x), max(rx, x))\n        (uy, dy) = (min(uy, y), max(dy, y))\n        if rx - lx + 1 > m or dy - uy + 1 > n:\n            break\n        (r, c) = (1 - uy, 1 - lx)\n    print(r, c)", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nH = 1000000000 + 7\nfor _ in range(I()):\n    (n, m) = M()\n    s = S()\n    l = d = u = r = x = y = 0\n    ans = (0, 0)\n    di = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n    for i in range(len(s)):\n        (a, b) = di[s[i]]\n        x += a\n        y += b\n        l = min(l, y)\n        r = max(r, y)\n        u = min(u, x)\n        d = max(d, x)\n        if r - l >= m or d - u >= n:\n            break\n        ans = (abs(u), abs(l))\n    print(ans[0] + 1, ans[1] + 1)"]