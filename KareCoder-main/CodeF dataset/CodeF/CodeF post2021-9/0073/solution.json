["def proccess(length, llist, stringo):\n    diction = {}\n    for i in range(length):\n        if llist[i] in diction and stringo[i] == diction[llist[i]]:\n            continue\n        elif llist[i] not in diction:\n            diction[llist[i]] = stringo[i]\n        else:\n            print('NO')\n            return\n    print('YES')\ntest_cases = int(input())\nfor _ in range(test_cases):\n    length = input()\n    llist = input().split()\n    stringo = input()\n    proccess(int(length), llist, stringo)", "def foo(n, ls, s):\n    d = {}\n    for i in range(n):\n        if ls[i] in d:\n            if d[ls[i]] != s[i]:\n                return False\n        else:\n            d[ls[i]] = s[i]\n    return True\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ls = [int(i) for i in input().split()]\n    s = input()\n    if foo(n, ls, s):\n        print('YES')\n    else:\n        print('NO')", "import sys\nt = int(sys.stdin.readline())\nfor test in range(t):\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    s = list(sys.stdin.readline().strip())\n    dic = {}\n    ans = True\n    for i in range(n):\n        if a[i] not in dic:\n            dic[a[i]] = s[i]\n        elif dic[a[i]] != s[i]:\n            ans = False\n            break\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    k = int(input())\n    li = list(map(int, input().split()))\n    s = list(input())\n    fr = dict()\n    chec = 1\n    for i in range(len(li)):\n        if li[i] not in fr:\n            fr[li[i]] = s[i]\n        else:\n            temp = fr[li[i]]\n            if temp != s[i]:\n                chec = 0\n                break\n    if not chec:\n        print('NO')\n    else:\n        print('YES')", "from sys import stdin, stdout\nt = int(stdin.readline().strip())\nfor _ in range(t):\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().split()))\n    s = stdin.readline().strip()\n    mapping = {}\n    match = True\n    for i in range(n):\n        if arr[i] in mapping:\n            if s[i] != mapping[arr[i]]:\n                match = False\n                break\n        else:\n            mapping[arr[i]] = s[i]\n    print('YES' if match else 'NO')", "import math\nimport collections\nimport bisect\nimport heapq\nfrom collections import deque\nfrom math import sqrt, ceil, floor\n\ndef inp_arr():\n    return list(map(int, input().strip().split(' ')))\n\ndef inp_str_arr():\n    return list(input().strip().split(' '))\n\ndef inp_str():\n    return input()\n\ndef solve():\n    (n,) = inp_arr()\n    a = inp_arr()\n    s = inp_str()\n    mp = {}\n    n = len(a)\n    for i in range(n):\n        if a[i] not in mp:\n            mp[a[i]] = s[i]\n        elif mp[a[i]] != s[i]:\n            print('NO')\n            return\n    print('YES')\n    return\n(tt,) = inp_arr()\nfor t in range(tt):\n    solve()", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = input()\n    map1 = {}\n    false = False\n    for i in range(n):\n        char = s[i]\n        val = arr[i]\n        if val not in map1:\n            map1[val] = char\n        elif map1[val] == char:\n            continue\n        else:\n            false = True\n            break\n    if false:\n        print('NO')\n    else:\n        print('YES')\n    t -= 1", "tc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    s = input()\n    ans = True\n    m = {}\n    for i in range(n):\n        if a[i] in m:\n            if m[a[i]] != s[i]:\n                ans = False\n                break\n        else:\n            m[a[i]] = s[i]\n    print('YES' if ans else 'NO')", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = input()\n    d = {}\n    c = 0\n    for i in range(n):\n        if l[i] in d:\n            if d[l[i]] != s[i]:\n                c = c + 1\n        else:\n            d[l[i]] = s[i]\n    if c == 0:\n        print('YES')\n    else:\n        print('NO')", "def tr(l, s):\n    d = dict()\n    for i in range(len(l)):\n        if d.get(l[i], s[i]) != s[i]:\n            return False\n        d[l[i]] = s[i]\n    return True\nt = int(input())\nfor _ in range(t):\n    f = dict()\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = input()\n    print('YES' if tr(l, s) else 'NO')", "for _ in range(int(input())):\n    n = int(input())\n    y = {}\n    x = input().split()\n    a = input()\n    for i in range(n):\n        if x[i] in y:\n            if y[x[i]] != a[i]:\n                print('NO')\n                break\n        else:\n            y[x[i]] = a[i]\n    else:\n        print('YES')", "for _ in range(int(input())):\n    a = int(input())\n    b = [int(i) for i in input().split()]\n    c = input()\n    d = {}\n    check = True\n    for i in range(a):\n        if b[i] in d.keys():\n            if d[b[i]] != c[i]:\n                check = False\n                break\n        else:\n            d[b[i]] = c[i]\n    if check:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    s = input()\n    dct = {}\n    ans = True\n    for i in range(n):\n        if arr[i] in dct and dct[arr[i]] != s[i]:\n            ans = False\n            break\n        dct[arr[i]] = s[i]\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = input()\n    d = {}\n    done = False\n    for i in range(n):\n        if arr[i] in d:\n            if d[arr[i]] != s[i]:\n                print('NO')\n                done = True\n                break\n        else:\n            d[arr[i]] = s[i]\n    if not done:\n        print('YES')", "import math\nt = int(input())\nfor test in range(t):\n    arrLength = int(input())\n    arr = list(map(int, input().split()))\n    myStr = input()\n    myDict = {}\n    answ = True\n    for ind in range(len(arr)):\n        if arr[ind] not in myDict:\n            myDict[arr[ind]] = myStr[ind]\n        elif myDict[arr[ind]] != myStr[ind]:\n            answ = False\n    if answ:\n        print('YES')\n    else:\n        print('NO')", "import sys\nfrom collections import Counter, defaultdict, OrderedDict, deque\nfrom itertools import permutations, combinations\nfrom functools import lru_cache\ninput = lambda : sys.stdin.readline().rstrip()\nii = lambda : int(input())\nmi = lambda : map(int, input().split())\nli = lambda : list(mi())\ninf = 2 ** 63 - 1\nmod = 10 ** 9 + 7\n\ndef solve():\n    n = ii()\n    l = li()\n    s = input()\n    d = {}\n    for (i, j) in zip(l, s):\n        if i in d:\n            if d[i] != j:\n                return 'NO'\n        else:\n            d[i] = j\n    return 'YES'\nfor _ in range(ii()):\n    print(solve())", "def ans(arr, s):\n    d = {}\n    for i in range(len(arr)):\n        if arr[i] in d:\n            if d[arr[i]] != s[i]:\n                return False\n        d[arr[i]] = s[i]\n    return True\nfor T in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    s = input()\n    print('YES' if ans(arr, s) else 'NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    t = dict()\n    for i in range(n):\n        if a[i] not in t:\n            t[a[i]] = s[i]\n            continue\n        elif a[i] in t and t[a[i]] == s[i]:\n            continue\n        print('NO')\n        break\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    mas = list(map(int, input().split()))\n    check = list(input())\n    d = dict()\n    alarm = False\n    for i in range(n):\n        if mas[i] not in d:\n            d[mas[i]] = check[i]\n        elif d[mas[i]] == check[i]:\n            continue\n        else:\n            alarm = True\n            break\n    if alarm:\n        print('NO')\n    else:\n        print('YES')", "def ss(n, l, s):\n    d = {}\n    for i in range(n):\n        if l[i] in d:\n            if d[l[i]] == s[i]:\n                continue\n            else:\n                return False\n        else:\n            d[l[i]] = s[i]\n    return True\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = str(input())\n    if ss(n, l, s):\n        print('YES')\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nfor _ in range(inp()):\n    flag = 'YES'\n    hashmap = {}\n    _ = inp()\n    nums = inlt()\n    strs = insr()\n    for i in range(len(nums)):\n        if nums[i] not in hashmap:\n            hashmap[nums[i]] = strs[i]\n        if hashmap[nums[i]] != strs[i]:\n            flag = 'NO'\n            break\n    print(flag)", "from collections import deque\nInputList = lambda Dtype: [Dtype(x) for x in input().split()]\nfrom functools import lru_cache\nfrom math import sqrt, atan, pi\n\ndef solve():\n    N = int(input())\n    nums = InputList(int)\n    s = input()\n    map_n_to_c = {}\n    for (n, c) in zip(nums, s):\n        if n not in map_n_to_c:\n            map_n_to_c[n] = c\n        elif map_n_to_c[n] != c:\n            return 'NO'\n    return 'YES'\nReturnMode = True\nt = 0\nif not t:\n    t = int(input())\nfor _ in range(t):\n    ans = solve()\n    if ReturnMode:\n        print(ans) if type(ans) != list else print(*ans)", "def solution():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = input()\n    d = [''] * 51\n    for i in range(n):\n        if d[arr[i]] == s[i] or d[arr[i]] == '':\n            d[arr[i]] = s[i]\n        else:\n            print('NO')\n            return\n    print('YES')\nfor _ in range(int(input())):\n    solution()", "t = int(input())\n\ndef solve(nums, string):\n    dic = {}\n    for (index, num) in enumerate(nums):\n        if num in dic:\n            if dic[num] != string[index]:\n                return 'NO'\n        else:\n            dic[num] = string[index]\n    return 'YES'\nfor i in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    string = list(input())\n    print(solve(nums, string))", "n = int(input())\nfor i in range(n):\n    m = int(input())\n    a = list(input().split())\n    b = list(input())\n    d = {}\n    flag = 0\n    for j in range(m):\n        if a[j] not in d.keys():\n            d[a[j]] = b[j]\n        elif b[j] != d[a[j]]:\n            flag = 1\n            break\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    d = {}\n    for i in range(n):\n        if a[i] in d:\n            if d[a[i]] == s[i]:\n                continue\n            else:\n                print('NO')\n                break\n        else:\n            d[a[i]] = s[i]\n    else:\n        print('YES')", "test = int(input())\nfor _ in range(test):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = str(input())\n    words = {}\n    status = True\n    for (i, num) in enumerate(arr):\n        if num not in words:\n            words[num] = s[i]\n        elif words[num] != s[i]:\n            status = False\n            break\n    if status:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(input())\n    p = ['.'] * 52\n    x = 'YES'\n    for j in range(n):\n        i = a[j]\n        if p[i] == '.':\n            p[i] = b[j]\n        elif p[i] != b[j]:\n            x = 'NO'\n            break\n    print(x)", "t = int(input())\nfor j in range(t):\n    letters = {}\n    n = int(input())\n    nums = list(map(int, input().split()))\n    string = input()\n    ok = True\n    for i in range(n):\n        if nums[i] in letters:\n            if letters[nums[i]] != string[i]:\n                print('NO')\n                ok = False\n                break\n        else:\n            letters[nums[i]] = string[i]\n    if ok:\n        print('YES')", "t = int(input())\nfor tc in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = input()\n    d = {}\n    for i in range(n):\n        if l[i] in d:\n            d[l[i]].extend(s[i])\n        else:\n            d[l[i]] = [s[i]]\n    c = 0\n    for i in d:\n        if len(list(set(d[i]))) != 1:\n            print('NO')\n            c = 1\n            break\n    if c == 0:\n        print('YES')", "N = int(input())\nfor _ in range(N):\n    m = int(input())\n    arr = list(map(int, input().split()))\n    res_str = input()\n    dict = {}\n    if len(arr) != len(res_str):\n        print('NO')\n        continue\n    Flag = True\n    for i in range(m):\n        if not arr[i] in dict.keys():\n            dict[arr[i]] = res_str[i]\n        elif res_str[i] != dict[arr[i]]:\n            Flag = False\n    if Flag:\n        print('YES')\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef mainak(n):\n    ts = 0\n    for (idx, i) in enumerate(n):\n        if i > n[ts]:\n            ts = idx\n    return ts + 1\n\ndef iso(d):\n    a = [d[0]]\n    i = 1\n    while i < len(d):\n        if a[i - 1] - d[i] == a[i - 1] + d[i]:\n            a.append(a[i - 1] + d[i])\n        elif a[i - 1] - d[i] > 0 and a[i - 1] + d[i] > 0:\n            print(-1)\n            return\n        else:\n            a.append(a[i - 1] + d[i])\n        i += 1\n    print(' '.join([str(x) for x in a]))\n\ndef solve(n, a, s):\n    h = {}\n    i = 0\n    while i < len(s):\n        if a[i] not in h:\n            h[a[i]] = s[i]\n        elif h[a[i]] != s[i]:\n            print('NO')\n            return\n        i += 1\n    print('YES')\nt = inp()\nfor _ in range(t):\n    n = int(input().strip())\n    a = [int(x) for x in input().split()]\n    s = input().strip()\n    solve(n, a, s)", "def ans(x, n, s):\n    d = {}\n    for i in range(n):\n        if x[i] not in d:\n            d[x[i]] = [s[i]]\n        else:\n            d[x[i]].append(s[i])\n    for (i, j) in d.items():\n        if len(set(j)) > 1:\n            return 'NO'\n    return 'YES'\nfor _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    s = input().strip()\n    print(ans(x, n, s))", "t = int(input())\nz = 0\nwhile z < t:\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = input()\n    d = {}\n    flag = 1\n    for i in range(n):\n        if l[i] not in d:\n            d[l[i]] = s[i]\n        elif d[l[i]] == s[i]:\n            pass\n        else:\n            flag = 0\n            break\n    if flag == 0:\n        print('NO')\n    else:\n        print('YES')\n    z += 1", "import sys\nimport collections\nfrom math import ceil, gcd, sqrt, log\nimport bisect\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    s = input()\n    net = dict()\n    for i in range(n):\n        if A[i] not in net:\n            net[A[i]] = s[i]\n        elif net[A[i]] != s[i]:\n            print('NO')\n            return\n    print('YES')\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = input()\n    d1 = {}\n    for i in range(n):\n        if l[i] not in d1:\n            d1[l[i]] = s[i]\n        else:\n            v = l[i]\n            if d1[v] != s[i]:\n                print('NO')\n                break\n    else:\n        print('YES')", "count_of_test_cases = int(input())\nfor _ in range(count_of_test_cases):\n    number_count = int(input())\n    numbers = list(map(int, input().split()))\n    s = input()\n    my_dict = dict()\n    for i in range(len(numbers)):\n        if numbers[i] in my_dict.keys():\n            if s[i] != my_dict[numbers[i]]:\n                print('NO')\n                break\n        else:\n            my_dict[numbers[i]] = s[i]\n    else:\n        print('YES')", "t = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = input()\n    f = 1\n    d = {}\n    for i in range(n):\n        if arr[i] not in d:\n            d[arr[i]] = s[i]\n        elif d[arr[i]] != s[i]:\n            print('NO')\n            f = 0\n            break\n    if f == 1:\n        print('YES')\n    t = t - 1", "def num_replace(arr, s):\n    d = {}\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = s[i]\n        elif d[arr[i]] != s[i]:\n            return 'NO'\n    return 'YES'\nt = int(input())\ni1 = 1\nwhile i1 <= t:\n    n = int(input())\n    arr = list(map(int, input().rstrip().split()))\n    s = input()\n    print(num_replace(arr, s))\n    i1 += 1", "t = int(input())\nfor a0 in range(t):\n    n = int(input())\n    a = [i for i in str(input()).strip().split()]\n    s = str(input())\n    checker = dict(zip(a, [i for i in s]))\n    works = True\n    for (num, letter) in zip(a, s):\n        if checker[num] != letter:\n            works = False\n            print('NO')\n            break\n    if works:\n        print('YES')", "out = []\nfor _ in range(int(input())):\n    n = int(input())\n    d = dict()\n    a = input().split()\n    s = input()\n    r = 'YES'\n    for i in range(n):\n        if a[i] in d:\n            if d[a[i]] != s[i]:\n                r = 'NO'\n                break\n        else:\n            d[a[i]] = s[i]\n    out.append(r)\nfor i in out:\n    print(i)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    string = input()\n    flag = True\n    hashMap = {}\n    for i in range(n):\n        if arr[i] in hashMap:\n            if hashMap[arr[i]] == string[i]:\n                flag = True\n            else:\n                flag = False\n                break\n        else:\n            hashMap[arr[i]] = string[i]\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "t = int(input(''))\nfor i in range(t):\n    ke = 'YES'\n    a = int(input(''))\n    b = input('').split(' ')\n    s = input('')\n    mapping = {}\n    for (j, v) in enumerate(b):\n        mapping[v] = s[j]\n    for (j, v) in enumerate(b):\n        if mapping[v] != s[j]:\n            ke = 'NO'\n            break\n    print(ke)", "def Replacement(arr, s):\n    dt = {}\n    for (x, y) in zip(arr, s):\n        if x in dt and dt[x] != y:\n            return 'NO'\n        else:\n            dt[x] = y\n    return 'YES'\nOUTPUT = []\nfor _ in range(int(input())):\n    N = int(input())\n    arr = input().split()\n    s = input()\n    OUTPUT.append(Replacement(arr, s))\nfor _ in OUTPUT:\n    print(_)", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = input()\n    dic = {}\n    flag = 0\n    for i in range(0, len(arr)):\n        if arr[i] not in dic:\n            dic[arr[i]] = s[i]\n        elif s[i] != dic[arr[i]]:\n            flag = 1\n            break\n    if flag == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, arr, s, d, answer, ind) = (int(input()), map(int, input().split()), input(), {}, True, 0)\n    for i in arr:\n        if i in d and d[i] != s[ind]:\n            answer = False\n            break\n        else:\n            d[i] = s[ind]\n        ind += 1\n    if answer:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    m = {}\n    number = list(map(int, input().split()))\n    char = [*input()]\n    notapp = 0\n    for (c, j) in zip(char, number):\n        if m.get(j) == None:\n            m[j] = c\n        elif m[j] != c:\n            notapp = 1\n            break\n    if notapp == 1:\n        print('NO')\n    else:\n        print('YES')", "from bisect import *\nfrom math import gcd, inf\nfrom collections import defaultdict, deque\n\ndef li():\n    return list(map(int, input().split()))\n\ndef nn():\n    return int(input())\n\ndef w():\n    return input()\nt = nn()\nfor _ in range(t):\n    n = nn()\n    arr = li()\n    w = input()\n    flag = False\n    dic = {}\n    for (idx, i) in enumerate(arr):\n        if i not in dic:\n            dic[i] = w[idx]\n        elif dic[i] != w[idx]:\n            flag = True\n            break\n    print('NO') if flag else print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    word = input()\n    dict = {}\n    flag = 1\n    for (i, num) in enumerate(nums):\n        if num in dict and word[i] != dict[num]:\n            print('NO')\n            flag = 0\n            break\n        if num not in dict:\n            dict[num] = word[i]\n    if flag:\n        print('YES')", "n = int(input())\nfor i in range(n):\n    d = {}\n    m = int(input())\n    l = input().split(' ')\n    s = input()\n    flag = 0\n    for j in range(m):\n        if l[j] not in d:\n            d[l[j]] = s[j]\n            continue\n        if d[l[j]] != s[j]:\n            flag = 1\n            break\n    if flag:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    d = {}\n    flag = 0\n    for i in range(n):\n        if a[i] in d:\n            if d[a[i]] != s[i]:\n                flag = 1\n                print('NO')\n                break\n        d[a[i]] = s[i]\n    if flag == 0:\n        print('YES')", "n = int(input())\nfor i in range(n):\n    len_mas = int(input())\n    mas = list(map(int, input().split()))\n    s = input()\n    dict = {}\n    flag = False\n    for j in range(len_mas):\n        if mas[j] in dict.keys():\n            if dict[mas[j]] != s[j]:\n                flag = True\n                break\n        else:\n            dict[mas[j]] = s[j]\n    if flag:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\n\ndef test(n, a, s):\n    d = dict()\n    for (i, c) in enumerate(a):\n        if c in d:\n            if d[c] == s[i]:\n                continue\n            else:\n                print('NO')\n                return\n        d[c] = s[i]\n    print('YES')\nwhile t:\n    t -= 1\n    (n,) = tuple(map(int, input().split()))\n    a = list(map(int, input().split()))\n    s = input()\n    test(n, a, s)", "tt = int(input())\nwhile tt:\n    tt -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    mp = {}\n    f = True\n    for i in range(n):\n        if not a[i] in mp:\n            mp[a[i]] = s[i]\n        elif mp[a[i]] != s[i]:\n            f = False\n            break\n    if f:\n        print('YES')\n    else:\n        print('NO')", "def helper(arr, strs):\n    h = {}\n    for i in range(len(strs)):\n        if h.get(arr[i]) == None:\n            h[arr[i]] = strs[i]\n        elif h.get(arr[i]) != None and h[arr[i]] != strs[i]:\n            return False\n    return True\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    strs = input()\n    if helper(arr, strs):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = input()\n    d = {}\n    flag = True\n    for i in range(n):\n        if arr[i] not in d:\n            d[arr[i]] = s[i]\n        elif s[i] != d[arr[i]]:\n            print('NO')\n            flag = False\n            break\n    if flag:\n        print('YES')", "for _ in range(int(input())):\n    v = int(input())\n    m = input().split()\n    n = input()\n    d = {}\n    ans = 'YES'\n    for (i, x) in enumerate(m):\n        if x not in d:\n            d[x] = n[i]\n        elif n[i] != d[x]:\n            ans = 'NO'\n            break\n    print(ans)", "cases = int(input())\nfor case in range(1, cases + 1):\n    n = int(input())\n    nums = [int(i) for i in input().split()]\n    string = input()\n    d = {}\n    flag = True\n    for i in range(n):\n        let = string[i]\n        num = nums[i]\n        if num in d:\n            if d[num] != let:\n                flag = False\n                break\n        else:\n            d[num] = let\n    print(('NO', 'YES')[flag])", "def solve():\n    _ = int(input())\n    arr = list(map(int, input().split(' ')))\n    s = input()\n    d = {}\n    for (idx, key) in enumerate(arr):\n        val = d.get(key, None)\n        if val is None:\n            d[key] = s[idx]\n        elif d[key] != s[idx]:\n            return False\n    return True\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        ans = solve()\n        if ans:\n            print('YES')\n        else:\n            print('NO')\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    s = list(input())\n    d = {}\n    flag = 0\n    for j in range(len(x)):\n        if x[j] not in d:\n            d[x[j]] = s[j]\n        elif d[x[j]] != s[j]:\n            flag = 1\n            break\n    if flag:\n        print('NO')\n    else:\n        print('YES')", "from collections import defaultdict\nn = int(input())\nans = []\nfor _ in range(n):\n    m = int(input())\n    nums = list(map(int, input().split()))\n    s = str(input())\n    dic = defaultdict(str)\n    for (i, num) in enumerate(nums):\n        if dic[num] and dic[num] != s[i]:\n            ans.append('NO')\n            break\n        else:\n            dic[num] = s[i]\n    else:\n        ans.append('YES')\nfor i in ans:\n    print(i)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    w = input()\n    d = {}\n    out = True\n    for x in range(n):\n        curr_let = w[x]\n        if arr[x] not in d:\n            d[arr[x]] = curr_let\n        elif d[arr[x]] != curr_let:\n            out = False\n            break\n    if out:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    sl = {}\n    for i in range(n):\n        if a[i] not in sl:\n            sl[a[i]] = s[i]\n        elif sl[a[i]] != s[i]:\n            print('NO')\n            break\n    else:\n        print('YES')", "import sys, math\nt = int(sys.stdin.readline())\nfor i in range(t):\n    freq = [0] * 51\n    n = int(sys.stdin.readline())\n    list1 = list(map(int, sys.stdin.readline().split()))\n    string = list(sys.stdin.readline())\n    a = 0\n    for i in range(n):\n        if freq[list1[i]] == 0:\n            freq[list1[i]] = string[i]\n        elif freq[list1[i]] != string[i]:\n            print('NO')\n            a = 1\n            break\n    if a == 0:\n        print('YES')", "for i in range(int(input())):\n    n = int(input())\n    (num, ltrs) = (input().split(), input())\n    (dict1, ltrs2) = ({}, '')\n    for i in range(n):\n        dict1[num[i]] = ltrs[i]\n    for elem in num:\n        ltrs2 += dict1[elem]\n    if ltrs == ltrs2:\n        print('YES')\n    else:\n        print('NO')", "def solve(n, l, s):\n    d = {}\n    for i in range(n):\n        if l[i] in d:\n            if d[l[i]] != s[i]:\n                return 'NO'\n        else:\n            d[l[i]] = s[i]\n    return 'YES'\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = input()\n    print(solve(n, l, s))", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    s = input()\n    seen = ['!' for i in range(51)]\n    for i in range(n):\n        done = False\n        if seen[a[i]] == '!':\n            seen[a[i]] = s[i]\n        elif seen[a[i]] != s[i]:\n            print('NO')\n            done = True\n            break\n    if not done:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = input()\n    d = dict()\n    Breaker = False\n    for (ind, i) in enumerate(l):\n        if i not in d:\n            d[i] = s[ind]\n        elif d[i] != s[ind]:\n            Breaker = True\n            break\n    if Breaker:\n        print('NO')\n    else:\n        print('YES')", "tcs = int(input())\nfor tc in range(tcs):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    s = input()\n    hsh = {}\n    good = True\n    for (i, e) in enumerate(nums):\n        if nums[i] in hsh and hsh[nums[i]] != s[i]:\n            good = False\n            break\n        elif nums[i] not in hsh:\n            hsh[nums[i]] = s[i]\n    print('YES') if good else print('NO')", "test = int(input())\nwhile test > 0:\n    test -= 1\n    n = int(input())\n    a1 = input().split(' ')\n    s2 = input()\n    a2 = []\n    for i in s2:\n        a2.append(i)\n    d = {}\n    ans = ''\n    for i in range(0, n):\n        if a1[i] not in d.keys():\n            d[a1[i]] = a2[i]\n        elif d[a1[i]] != a2[i]:\n            ans = 'NO'\n            break\n    if ans == 'NO':\n        print('NO')\n        continue\n    else:\n        print('YES')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    nums = list(map(int, input().split(' ')))\n    string = list(input())\n    d = {}\n    success = True\n    for (s, n) in zip(string, nums):\n        if d.get(n) is None:\n            d[n] = s\n        elif d[n] != s:\n            print('NO')\n            success = False\n            break\n    if success:\n        print('YES')", "def execute(numbers_list: list, s: str):\n    if len(numbers_list) != len(s):\n        return 'NO'\n    dic = {}\n    for i in range(len(numbers_list)):\n        if numbers_list[i] in dic.keys():\n            if dic[numbers_list[i]] != s[i]:\n                print('NO')\n                return\n        dic[numbers_list[i]] = s[i]\n    print('YES')\n\ndef main1():\n    out_str = ''\n    inp_size = int(input())\n    for i in range(inp_size):\n        inp_list = []\n        for j in range(int(input())):\n            inp_list.append(input())\n        inp_str = input()\n        out_str += execute(inp_list, inp_str)\n    print(out_str)\n\ndef main2():\n    inp_size = int(input())\n    for i in range(inp_size):\n        inp_list_size = input()\n        inp_list = input().split(' ')\n        inp_str = input()\n        execute(inp_list, inp_str)\nmain2()", "for _ in range(int(input())):\n    (n, l, c, d, ans) = (int(input()), list(map(int, input().split())), input(), {}, 'YES')\n    for i in range(n):\n        if l[i] in d.keys():\n            if d[l[i]] != c[i]:\n                ans = 'NO'\n                break\n        else:\n            d[l[i]] = c[i]\n    print(ans)", "problems = int(input())\nfor _ in range(problems):\n    _amount = int(input())\n    nums = list(map(int, input().split(' ')))\n    word = input()\n    d = {}\n    is_true = True\n    for i in range(len(nums)):\n        if not is_true:\n            break\n        num = nums[i]\n        if num in d:\n            if d[num] != word[i]:\n                is_true = False\n        else:\n            d[num] = word[i]\n    if is_true:\n        print('YES')\n    else:\n        print('NO')", "def solve(array, string, length_a):\n    dictionary = {}\n    for i in range(length_a):\n        if array[i] in dictionary:\n            if string[i] == dictionary.get(array[i]):\n                continue\n            else:\n                return 'NO'\n        else:\n            dictionary[array[i]] = string[i]\n    return 'YES'\nnum_testcases = int(input())\nfor number in range(num_testcases):\n    length_a = int(input())\n    array = list(input().split(' '))\n    string = input()\n    print(solve(array, string, length_a))", "i = input()\nfor n in range(int(i)):\n    strlen = input()\n    nmbs = input().split(' ')\n    word = input()\n    dict = {}\n    a = True\n    for m in range(len(nmbs)):\n        if nmbs[m] in dict.keys():\n            if dict[nmbs[m]] != word[m]:\n                print('NO')\n                a = False\n                break\n        else:\n            dict.update({nmbs[m]: word[m]})\n    if a == True:\n        print('YES')", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    map_ = {}\n    flag = 1\n    for i in range(n):\n        if a[i] in map_:\n            if s[i] != s[map_[a[i]]]:\n                flag = 0\n                break\n        else:\n            map_[a[i]] = i\n    print('YES' if flag else 'NO')", "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    d = defaultdict(list)\n    n = int(input())\n    w = list(map(int, input().split()))\n    s = input()[:-1]\n    for (i, j) in enumerate(w):\n        d[j].append(i)\n    for i in d:\n        e = [s[x] for x in d[i]]\n        if len(set(e)) > 1:\n            print('NO')\n            break\n    else:\n        print('YES')", "t = int(input())\nfor tc in range(t):\n    n = int(input())\n    a = input().split()\n    s = input()\n    dick = dict()\n    z = 1\n    for i in range(n):\n        if a[i] not in dick:\n            dick[a[i]] = s[i]\n        elif dick[a[i]] != s[i]:\n            z = 0\n            print('NO')\n            break\n    if z:\n        print('YES')", "t = int(input())\noutputs = []\nfor i in range(t):\n    n = int(input())\n    array = input().split()\n    array = [int(x) for x in array]\n    s = input()\n    output = [n, array, s]\n    outputs.append(output)\n\ndef task(output):\n    result = 'NO'\n    dictNums = {}\n    n = output[0]\n    array = output[1]\n    s = output[2]\n    for i in range(n):\n        if array[i] not in dictNums:\n            dictNums[array[i]] = s[i]\n        elif s[i] == dictNums[array[i]]:\n            continue\n        else:\n            return 'NO'\n    result = 'YES'\n    return result\nfor output in outputs:\n    print(task(output))", "def single_case():\n    n = int(input())\n    t = list(map(int, input().split()))\n    s = input()\n    used_mapping = dict()\n    for (let, num) in zip(s, t):\n        if num in used_mapping:\n            if used_mapping[num] != let:\n                print('NO')\n                return\n        else:\n            used_mapping[num] = let\n    print('YES')\n    return\nz = int(input())\nfor _ in range(z):\n    single_case()", "def f(n, l, s):\n    d = {}\n    for i in range(n):\n        if l[i] not in d:\n            d[l[i]] = s[i]\n        elif d[l[i]] != s[i]:\n            return 'NO'\n    return 'YES'\nn = int(input())\nfor _ in range(n):\n    print(f(int(input()), input().split(), input()))", "n_inputs = int(input())\nresult = []\nfor test in range(n_inputs):\n    length = int(input())\n    int_list = input().split(' ')\n    char_list = input()\n    d = dict()\n    err = False\n    for i in range(length):\n        cur = d.get(int_list[i])\n        if cur != None and cur != char_list[i]:\n            err = True\n            break\n        d[int_list[i]] = char_list[i]\n    if err:\n        result.append('NO')\n    else:\n        result.append('YES')\nfor res in result:\n    print(res)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    s = input()\n    d = {}\n    ans = ''\n    for j in range(n):\n        if a[j] not in d:\n            d[a[j]] = s[j]\n        elif d[a[j]] != s[j]:\n            ans = 'NO'\n            break\n        if j == n - 1:\n            ans = 'YES'\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    dic = {}\n    ans = 'YES'\n    for (i, val) in enumerate(a):\n        if val not in dic:\n            dic[val] = s[i]\n            continue\n        if dic[val] != s[i]:\n            ans = 'NO'\n            break\n    print(ans)", "def solution(arr, ltr, n):\n    dic = {}\n    for i in range(n):\n        if arr[i] in dic:\n            if dic[arr[i]] != ltr[i]:\n                return 'NO'\n        else:\n            dic[arr[i]] = ltr[i]\n    return 'YES'\nt = int(input())\nresult = []\nfor i in range(t):\n    n = int(input())\n    arr = [x for x in input().split(' ')]\n    ltr = input()\n    result.append(solution(arr, ltr, n))\nfor res in result:\n    print(res)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    L = list(map(int, input().split()))\n    ch = input()\n    C = list(ch)\n    D = {}\n    a = 0\n    for i in range(n):\n        if L[i] not in D.keys():\n            D[L[i]] = C[i]\n    for i in range(n):\n        if D[L[i]] != C[i]:\n            a = 1\n    if a == 1:\n        print('NO')\n    else:\n        print('YES')", "d = {}\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = list(input())\n    avail = True\n    d.clear()\n    i = 0\n    while i < n and avail:\n        try:\n            if d[a[i]] != s[i]:\n                avail = False\n            else:\n                i += 1\n        except:\n            d[a[i]] = s[i]\n            i += 1\n    if avail:\n        print('YES')\n    else:\n        print('NO')", "def solve(n, ls, s):\n    ans = {}\n    for i in range(n):\n        if ls[i] in ans:\n            if s[i] != ans[ls[i]]:\n                return 'NO'\n        else:\n            ans[ls[i]] = s[i]\n    return 'YES'\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    ls = list(map(int, input().split()))\n    s = input()\n    print(solve(n, ls, s))\n    t -= 1", "for test in range(int(input())):\n    n = int(input())\n    lks = list(map(int, input().split()))\n    singh = input()\n    temp = dict()\n    ans = 'YES'\n    for i in range(n):\n        if lks[i] not in temp:\n            temp[lks[i]] = singh[i]\n        elif temp[lks[i]] != singh[i]:\n            ans = 'NO'\n            break\n    print(ans)", "import sys\n\ndef solve_problem(numbers: list, characters: list) -> str:\n    mapp = dict()\n    for n in numbers:\n        ch = characters.pop(0)\n        if n not in mapp:\n            mapp[n] = ch\n        elif mapp[n] != ch:\n            return 'NO'\n    return 'YES'\ncount = int(sys.stdin.readline())\nresp = []\nfor _ in range(count):\n    sys.stdin.readline()\n    n = list(sys.stdin.readline().split())\n    c = list(sys.stdin.readline())[:-1]\n    resp.append((n, c))\nfor r in resp:\n    print(solve_problem(r[0], r[1]))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = input()\n    a = a.split()\n    s = input()\n    a_set = set(a)\n    ch = [a[x] + s[x] for x in range(n)]\n    ch_set = set(ch)\n    if len(a_set) == len(ch_set):\n        print('YES')\n    else:\n        print('NO')", "tests = int(input())\nfor _ in range(tests):\n    m = int(input())\n    n = list(map(int, input().split()))\n    s = input()\n    dc = {}\n    for i in range(m):\n        if not dc.get(n[i]):\n            dc[n[i]] = s[i]\n        elif dc[n[i]] != s[i]:\n            print('NO')\n            break\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    d = {}\n    for i in range(n):\n        if a[i] not in d:\n            d[a[i]] = s[i]\n        elif d[a[i]] == s[i]:\n            continue\n        else:\n            print('NO')\n            break\n    else:\n        print('YES')", "def rep(arr, st):\n    d = {}\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = st[i]\n        elif d[arr[i]] != st[i]:\n            return 'NO'\n    return 'YES'\nt = int(input())\nans = []\nfor m in range(t):\n    l = int(input())\n    arr = list(map(int, input().split(' ')))\n    st = input()\n    ans.append(rep(arr, st))\nfor k in ans:\n    print(k)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(str, input().split()))\n    s = input()\n    k = {}\n    for x in range(n):\n        if l[x] not in k.keys():\n            k[l[x]] = set(s[x])\n        else:\n            k[l[x]].add(s[x])\n    flag = 0\n    for x in k.values():\n        if len(x) > 1:\n            flag = 1\n            break\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    d = dict()\n    a = list(map(int, input().split()))\n    b = input()\n    ans = 'YES'\n    for i in range(n):\n        if a[i] not in d:\n            d[a[i]] = b[i]\n        elif d[a[i]] != b[i]:\n            ans = 'NO'\n            break\n    print(ans)"]