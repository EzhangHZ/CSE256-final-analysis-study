["import sys\nimport math\n\ndef solve():\n    inp = sys.stdin.readline\n    q = int(inp())\n    s = {0}\n    d = {}\n    for i in range(q):\n        (t, x) = inp().split()\n        if t == '+':\n            s.add(int(x))\n        elif t == '?':\n            x = int(x)\n            v = d.get(x, 0)\n            while v in s:\n                v += x\n            d[x] = v\n            print(v)\n        else:\n            raise Exception('wut')\n\ndef main():\n    solve()\nmain()", "import sys\nimport math\ninp = sys.stdin.readline\nn = int(inp())\ns = {0}\nd = {}\nfor i in range(n):\n    f = inp().split()\n    zn = f[0]\n    k = int(f[1])\n    if zn == '+':\n        s.add(k)\n    else:\n        v = k\n        x = d.get(v, 0)\n        while x in s:\n            x += k\n        d[v] = x\n        d[x] = x\n        print(x)", "from math import inf\nfrom collections import Counter\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    q = int(input())\n    nums = Counter()\n    numbers = 0\n    multips = dict()\n    for _ in range(q):\n        (typeOp, num) = input().split()\n        if typeOp == '+':\n            nums[int(num)] = 1\n            numbers += 1\n        elif not nums[int(num)]:\n            print(num)\n        else:\n            multi = multips.get(int(num), 2)\n            indexes = 0\n            while True and indexes <= numbers:\n                if not nums[int(num) * multi]:\n                    multips[int(num)] = multi\n                    break\n                multi += 1\n                indexes += 1\n            print(multi * int(num))\nmain()", "from cmath import sqrt\nfrom functools import lru_cache\nimport sys\nfrom math import log2\nimport bisect\ninput = sys.stdin.readline\nfrom collections import defaultdict\nimport time\nmod = 10 ** 9 + 7\n\ndef ii():\n    return int(input())\n\ndef lii():\n    return list(map(int, input().split()))\n\ndef ss():\n    return input()\n\ndef lss():\n    return list(map(str, input().split()))\n\ndef yes():\n    sys.stdout.write('YES\\n')\n\ndef no():\n    sys.stdout.write('NO\\n')\ns = set([0])\nh = defaultdict(int)\nfor _ in range(ii()):\n    (a, b) = lss()\n    b = int(b)\n    if a == '?':\n        x = b\n        if h[b] != 0:\n            x = h[b]\n        while x in s:\n            x += b\n        h[b] = x\n        print(x)\n    else:\n        s.add(b)", "import sys\ninput = sys.stdin.readline\ns = set()\nd = {}\ns.add(0)\nfor _ in range(int(input())):\n    (sign, x) = map(str, input().split())\n    x = int(x)\n    if sign == '+':\n        s.add(x)\n    else:\n        if x not in d:\n            d[x] = x\n        while d[x] in s:\n            d[x] += x\n        print(d[x])", "import sys\nimport threading\nfrom functools import lru_cache\nfrom bisect import bisect_left\nimport math\nfrom collections import defaultdict, deque\nfrom heapq import *\n\ndef main():\n    t = int(input())\n    a = set()\n    mapping = defaultdict(int)\n    for _ in range(t):\n        (op, x) = input().split()\n        x = int(x)\n        if op == '+':\n            a.add(x)\n        else:\n            current = mapping[x] + 1\n            temp = x * current\n            current += 1\n            while temp in a:\n                temp = x * current\n                current += 1\n            mapping[x] = current - 2\n            print(temp)\nsys.setrecursionlimit(1 << 30)\nthreading.stack_size(1 << 27)\nmain_thread = threading.Thread(target=main)\nmain_thread.start()\nmain_thread.join()", "n = int(input())\nP = {}\nSi = {}\nfor i in range(n):\n    S = input()\n    a = S[0]\n    x = int(S[1:])\n    if a == '+':\n        P[x] = True\n    else:\n        if x in Si:\n            a = Si[x]\n        else:\n            a = x\n        while a in P:\n            a += x\n        Si[x] = a\n        print(a)", "s = set([0])\nans = {}\nq = int(input())\n\ndef add(x):\n    s.add(x)\n\ndef ask(x):\n    if ans.get(x) == None:\n        ans[x] = x\n    while ans[x] in s:\n        ans[x] += x\n    print(ans[x])\nfor i in range(q):\n    (c, x) = input().split()\n    if c == '+':\n        add(int(x))\n    else:\n        ask(int(x))", "last = {}\ns = set()\nq = int(input())\nfor i in range(q):\n    (qt, num) = input().split()\n    num = int(num)\n    if qt == '+':\n        s.add(num)\n    else:\n        if num in last:\n            k = last[num]\n        else:\n            k = num\n        while k in s:\n            k += num\n        last[num] = k\n        print(k)", "q = int(input())\nans = {}\na = set()\nfor _ in range(q):\n    (op, x) = input().split()\n    x = int(x)\n    if op == '+':\n        a.add(x)\n        continue\n    if x not in ans:\n        ans[x] = x\n    while ans[x] in a:\n        ans[x] += x\n    print(ans[x])", "q = int(input())\ns = {0}\nmp = dict()\nfor qq in range(q):\n    (ch, x) = input().split()\n    x = int(x)\n    if ch == '+':\n        s.add(x)\n    else:\n        y = x\n        if x in mp:\n            y = mp[x]\n        while True:\n            if y not in s:\n                print(y)\n                mp[x] = y\n                break\n            y += x", "from collections import defaultdict\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s)])\n\ndef invr():\n    return map(int, input().split())\ncheck = set()\ndic = defaultdict(int)\nfor ii in range(inp()):\n    (flag, val) = input().split()\n    val = int(val)\n    if flag == '+':\n        check.add(val)\n    else:\n        i = dic[val] + 1\n        while i * val in check:\n            i += 1\n        dic[val] = i - 1\n        print(i * val)", "(map1, map2) = [{}, {}]\nfor test_cases in range(int(input())):\n    (type, val) = list(input().split())\n    ans = 0\n    val = int(val)\n    if type == '+':\n        map1[val] = True\n    else:\n        if val in map2:\n            fuck = map2[val]\n        else:\n            fuck = val\n        while fuck in map1:\n            fuck = fuck + val\n        map2[val] = fuck + 0\n        ans = fuck + 0\n        print(ans)", "q = int(input())\nnet = set()\nseen = dict()\nfor i in range(q):\n    (a, b) = map(str, input().split())\n    if a == '+':\n        net.add(int(b))\n    else:\n        start = int(b)\n        if start in seen:\n            start = seen[start]\n        while start in net:\n            start += int(b)\n        seen[int(b)] = start\n        print(start)", "from math import inf\nfrom collections import Counter\n\ndef main():\n    q = int(input())\n    nums = Counter()\n    numbers = 0\n    multips = dict()\n    for _ in range(q):\n        (typeOp, num) = input().split()\n        if typeOp == '+':\n            nums[int(num)] = 1\n            numbers += 1\n        elif not nums[int(num)]:\n            print(num)\n        else:\n            multi = multips.get(int(num), 2)\n            indexes = 0\n            while True and indexes <= numbers:\n                if not nums[int(num) * multi]:\n                    multips[int(num)] = multi\n                    break\n                multi += 1\n                indexes += 1\n            print(multi * int(num))\nmain()", "(di, ans) = (dict(), dict())\nfor _ in range(int(input())):\n    (chr, val) = map(str, input().split())\n    val = int(val)\n    if chr == '+':\n        di[val] = True\n    else:\n        if val in ans:\n            ref = ans[val]\n        else:\n            ans[val] = 0\n            ref = 0\n        while ref + val in di:\n            ref += val\n        ans[val] = ref\n        print(ref + val)", "import math\nt = int(input())\nseen = set()\nkmex = {}\nfor tc in range(1, t + 1):\n    s = list(input().split())\n    s[1] = int(s[1])\n    if s[0] == '+':\n        seen.add(s[1])\n        continue\n    if s[0] == '?':\n        k = s[1]\n        m = kmex[k] if k in kmex else 1\n        while 1:\n            if k * m in seen:\n                m += 1\n            else:\n                break\n        kmex[k] = m\n        print(k * m)", "dic = dict()\ns = set()\nfor _ in range(int(input())):\n    (op, n) = input().split()\n    n = int(n)\n    if op == '+':\n        s.add(n)\n    else:\n        m = n\n        if m in dic:\n            m = dic[n]\n        while True:\n            if m not in s:\n                print(m)\n                dic[n] = m\n                break\n            m = m + n", "import math\n\ndef N():\n    return int(input())\n\ndef A():\n    return [int(x) for x in input().split()]\n\ndef S():\n    return input()\ns = [0]\na = set(s)\nd = {}\nfor _ in range(N()):\n    if 'er9fj48gh48gh4' == 14194665565:\n        print('Tanmay')\n    (q, n) = [x for x in input().split()]\n    n = int(n)\n    if q == '+':\n        a.add(n)\n        i = 1\n        while i * n in a:\n            i += 1\n        d[n] = i * n\n        continue\n    ans = 0\n    if n not in a:\n        print(n)\n        continue\n    if d[n] in a:\n        aa = d[n]\n        while aa in a:\n            aa += n\n        d[n] = aa\n    print(d[n])", "x = int(input())\ny = set()\nq = {}\nwhile x:\n    x -= 1\n    (op, m) = input().split()\n    m = int(m)\n    if op == '+':\n        y.add(m)\n        continue\n    f = q.get(m, m)\n    while f in y:\n        f += m\n    q[m] = f\n    print(f)", "q = int(input())\nans = {}\na = set()\nfor _ in range(q):\n    (op, x) = input().split()\n    x = int(x)\n    if op == '+':\n        a.add(x)\n        continue\n    if x not in ans:\n        ans[x] = x\n    while ans[x] in a:\n        ans[x] += x\n    print(ans[x])", "import math\nq = int(input())\na = set()\na.add(0)\nd = {}\nfor _ in range(q):\n    s = input()\n    x = int(s[2:])\n    if s[0] == '+':\n        a.add(x)\n    else:\n        k = x\n        if x in d:\n            k = d[x]\n            while k in a:\n                k += x\n            d[x] = k\n        else:\n            while k in a:\n                k += x\n            d[x] = k\n        print(k)", "(a, b) = (dict(), dict())\nfor _ in range(int(input())):\n    (s, x) = list(input().split())\n    x = int(x)\n    if s == '+':\n        a[x] = True\n    else:\n        if x in b:\n            y = b[x]\n        else:\n            y = x\n        while y in a:\n            y += x\n        b[x] = y\n        print(y)", "import math\nl = set()\nd = {}\nt = int(input())\nfor i in range(t):\n    (znak, a) = input().split()\n    a = int(a)\n    if znak == '+':\n        l.add(a)\n    else:\n        if d.get(a) == None:\n            res = a\n        else:\n            res = d.get(a)\n        while res in l:\n            res += a\n        print(res)\n        d[a] = res", "import math\nl = set()\nd = {}\nt = int(input())\nfor i in range(t):\n    (znak, a) = input().split()\n    a = int(a)\n    if znak == '+':\n        l.add(a)\n    else:\n        if d.get(a) == None:\n            res = a\n        else:\n            res = d.get(a)\n        while res in l:\n            res += a\n        print(res)\n        d[a] = res", "q = int(input())\nans = {}\na = set()\nfor _ in range(q):\n    (op, x) = input().split()\n    x = int(x)\n    if op == '+':\n        a.add(x)\n        continue\n    if x not in ans:\n        ans[x] = x\n    while ans[x] in a:\n        ans[x] += x\n    print(ans[x])", "T = int(input())\ns = {0}\nd = {}\nfor _ in range(T):\n    (ch, n) = input().split()\n    n = int(n)\n    if ch == '+':\n        s.add(n)\n    elif ch == '?':\n        if n not in d:\n            d[n] = n\n        while d[n] in s:\n            d[n] += n\n        print(d[n])", "q = int(input())\nans = {}\na = set()\nfor _ in range(q):\n    (op, x) = input().split()\n    x = int(x)\n    if op == '+':\n        a.add(x)\n        continue\n    if x not in ans:\n        ans[x] = x\n    while ans[x] in a:\n        ans[x] += x\n    print(ans[x])", "q = int(input())\nans = {}\na = set()\nfor _ in range(q):\n    (op, x) = input().split()\n    x = int(x)\n    if op == '+':\n        a.add(x)\n        continue\n    if x not in ans:\n        ans[x] = x\n    while ans[x] in a:\n        ans[x] += x\n    print(ans[x])", "s = set()\nkmex = dict()\nfor _ in range(int(input())):\n    (a, b) = input().split()\n    b = int(b)\n    if a == '+':\n        s.add(b)\n    else:\n        b = int(b)\n        if b not in kmex:\n            kmex[b] = b\n        while kmex[b] in s:\n            kmex[b] += b\n        print(kmex[b])", "q = int(input())\nans = {}\na = set()\nfor _ in range(q):\n    (op, x) = input().split()\n    x = int(x)\n    if op == '+':\n        a.add(x)\n        continue\n    if x not in ans:\n        ans[x] = x\n    while ans[x] in a:\n        ans[x] += x\n    print(ans[x])", "dic = {}\nfor jj in range(int(input())):\n    (a, b) = input().split()\n    k = int(b)\n    if a == '+':\n        dic[k] = 0\n        for i in range(k, 10 ** 37, k):\n            if i not in dic:\n                dic[k] = i\n                break\n    elif k not in dic:\n        print(k)\n    else:\n        for i in range(dic[k], 10 ** 37, k):\n            if i not in dic:\n                dic[k] = i\n                print(i)\n                break", "s = set()\nd = {}\ns.add(0)\nfor _ in range(int(input())):\n    (sign, x) = map(str, input().split())\n    x = int(x)\n    if sign == '+':\n        s.add(x)\n    else:\n        if x not in d:\n            d[x] = x\n        while d[x] in s:\n            d[x] += x\n        print(d[x])", "n = int(input())\nHashSet = set()\nHashMap = dict()\nfor i in range(n):\n    (operator, num) = map(str, input().split())\n    if operator == '+':\n        HashSet.add(int(num))\n    else:\n        num = int(num)\n        if num not in HashMap:\n            HashMap[num] = num\n        while HashMap[num] in HashSet:\n            HashMap[num] += num\n        print(HashMap[num])", "s = set()\nd = {}\nfor _ in range(int(input())):\n    (c, a) = input().split()\n    a = int(a)\n    if c == '+':\n        s.add(a)\n    else:\n        bg = 1\n        if a in d.keys():\n            bg = d[a]\n        for i in range(bg, 100000000):\n            if a * i not in s:\n                print(a * i)\n                d[a] = i\n                break", "a = int(input())\ns = set()\nsl = {}\ns.add(0)\nsp = []\nfor i in range(a):\n    x = input()\n    ni = 0\n    x1 = ''\n    x2 = ''\n    for j in x:\n        if j != ' ' and x[0] != '?' and (j != x[0]):\n            x1 += j\n            ni += 1\n        elif j != ' ' and x[0] != '+' and (j != x[0]):\n            x2 += j\n    if ni >= 1:\n        x11 = int(x1)\n        s.add(x11)\n    else:\n        x12 = int(x2)\n        if x12 in sl:\n            na = sl[x12]\n        else:\n            na = x12\n        while na in s:\n            na += x12\n        sp.append(na)\n        sl[x12] = na\nfor i in sp:\n    print(i)"]