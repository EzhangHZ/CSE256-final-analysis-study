["for _ in range(int(input())):\n    (n, _) = map(int, input().split())\n    a = map(''.join, zip(*(input() for _ in range(n))))\n    a = ('o'.join((''.join(sorted(y, reverse=True)) for y in x.split('o'))) for x in a)\n    for x in zip(*a):\n        print(''.join(x))", "for _ in range(int(input())):\n    (n, _) = map(int, input().split())\n    a = map(''.join, zip(*(input() for _ in range(n))))\n    a = ('o'.join((''.join(sorted(y, reverse=True)) for y in x.split('o'))) for x in a)\n    for x in zip(*a):\n        print(''.join(x))", "def change(grid, n, m):\n    for i in range(m):\n        b = n - 1\n        s = n\n        while b >= 0:\n            if grid[b][i] == '*':\n                grid[b][i] = '.'\n                grid[s - 1][i] = '*'\n                s -= 1\n            elif grid[b][i] == 'o':\n                s = b\n            b -= 1\nt = int(input())\nfor _ in range(t):\n    (n, m) = [int(i) for i in input().split(' ')]\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    change(grid, n, m)\n    for i in range(n):\n        print(''.join(grid[i]))", "import collections\n\ndef func(n, m, arr):\n    k = 0\n    for j in range(m):\n        k = n - 1\n        for i in range(n - 1, -1, -1):\n            if arr[i][j] == 'o':\n                k = i - 1\n            elif arr[i][j] == '*':\n                arr[i][j] = '.'\n                arr[k][j] = '*'\n                k -= 1\n    arr1 = []\n    for i in arr:\n        arr1.append(''.join(i))\n    return arr1\nt = int(input())\nfor i in range(t):\n    arr = list(map(int, input().rstrip().split()))\n    n = arr[0]\n    m = arr[1]\n    arr = []\n    for i in range(n):\n        s = input()\n        s = list(s)\n        arr.append(s)\n    ans = func(n, m, arr)\n    for i in range(n):\n        print(ans[i])", "from collections import Counter, deque, defaultdict\nfrom math import *\nfrom bisect import bisect_right\nmod = 1000000007\n\ndef solve():\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(list(input()))\n    for i in range(m):\n        j = n - 1\n        cur = -1\n        while j >= 0:\n            if l[j][i] == '.':\n                cur = j\n                break\n            j -= 1\n        if cur == '-1':\n            continue\n        for j in range(cur - 1, -1, -1):\n            if l[j][i] == '*':\n                (l[cur][i], l[j][i]) = (l[j][i], l[cur][i])\n                cur -= 1\n            elif l[j][i] == 'o':\n                cur = j - 1\n    for i in l:\n        print(''.join(i))\nt = int(input())\nfor num in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        a = list(input())\n        l.append(a)\n    for i in range(m):\n        avail = -1\n        for j in range(n - 1, -1, -1):\n            if l[j][i] == '*':\n                if avail == -1:\n                    pass\n                else:\n                    l[avail][i] = '*'\n                    l[j][i] = '.'\n                    avail -= 1\n            elif l[j][i] == '.':\n                if avail == -1:\n                    avail = j\n            elif l[j][i] == 'o':\n                avail = -1\n    for i in l:\n        print(''.join(i))", "x = int(input())\n\ndef trans(m, n, grid):\n    for i in range(n):\n        b = m - 1\n        s = m\n        while b >= 0:\n            if grid[b][i] == '*':\n                grid[b][i] = '.'\n                grid[s - 1][i] = '*'\n                s -= 1\n            elif grid[b][i] == 'o':\n                s = b\n            b -= 1\nfor jj in range(x):\n    (m, n) = [int(i) for i in input().split(' ')]\n    grid = []\n    for i in range(m):\n        grid.append(list(input()))\n    trans(m, n, grid)\n    for i in range(m):\n        print(''.join(grid[i]))", "import math\n\ndef solve():\n    (n, m) = map(int, input().split())\n    mat = []\n    for i in range(n):\n        mat.append(list(input()))\n    ct = 0\n    for j in range(m):\n        for i in range(n):\n            if mat[i][j] == 'o':\n                for x in range(ct):\n                    mat[i - 1][j] = '*'\n                    i = i - 1\n                ct = 0\n            elif i == n - 1:\n                if mat[i][j] == '*':\n                    ct += 1\n                for x in range(ct):\n                    mat[i][j] = '*'\n                    i -= 1\n                ct = 0\n            elif mat[i][j] == '*':\n                mat[i][j] = '.'\n                ct += 1\n    for i in range(n):\n        print(''.join(mat[i]))\nt = int(input())\nfor i in range(t):\n    solve()", "import collections\nfrom math import ceil, gcd, sqrt, log\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    (n, m) = map(int, input().split())\n    grid = []\n    for i in range(n):\n        s = list(input())[:m]\n        grid.append(s)\n    for c in range(m):\n        place = n - 1\n        for r in range(n - 1, -1, -1):\n            if grid[r][c] == '.':\n                continue\n            if grid[r][c] == 'o':\n                place = r - 1\n            else:\n                grid[r][c] = '.'\n                grid[place][c] = '*'\n                place -= 1\n    for i in grid:\n        print(''.join(i))\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "import sys\ngetline = sys.stdin.readline\n\ndef read_int():\n    return int(getline())\n\ndef read_ints():\n    return list(map(int, getline().split()))\n\ndef read_s():\n    return str(getline().strip())\n\ndef read_ss():\n    return list(map(str, getline().strip().split()))\nt = read_int()\nfor _ in range(t):\n    (n, m) = read_ints()\n    arr = []\n    for i in range(n):\n        row = read_s()\n        arr.append(row)\n    ans = [['.'] * m for i in range(n)]\n    for x in range(m):\n        last = n - 1\n        for y in reversed(range(n)):\n            c = arr[y][x]\n            if c == 'o':\n                ans[y][x] = 'o'\n                last = y - 1\n            if c == '*':\n                ans[last][x] = '*'\n                last -= 1\n    for line in ans:\n        print(''.join(line))", "def solve():\n    (n, m) = map(int, input().split())\n    g = [[c for c in input().strip()] for _ in range(n)]\n    for j in range(m):\n        last = n - 1\n        for i in range(n - 1, -1, -1):\n            if g[i][j] == 'o':\n                last = i - 1\n            elif g[i][j] == '*':\n                (g[i][j], g[last][j]) = (g[last][j], g[i][j])\n                last -= 1\n    for i in range(n):\n        print(''.join(g[i]))\ntt = int(input())\nfor i in range(1, tt + 1):\n    solve()", "T = int(input())\nfor _ in range(T):\n    (m, n) = list(map(int, input().split()))\n    arr = []\n    for _ in range(m):\n        arr.append(input())\n    ans = [['.' for _ in range(n)] for _ in range(m)]\n    for j in range(n):\n        cur_level = m - 1\n        for i in range(m - 1, -1, -1):\n            if arr[i][j] == 'o':\n                ans[i][j] = 'o'\n                cur_level = i - 1\n            elif arr[i][j] == '*':\n                ans[cur_level][j] = '*'\n                cur_level -= 1\n    for i in range(m):\n        print(''.join(ans[i]))", "I = input\nfor _ in range(int(I())):\n    (n, m) = map(int, I().split())\n    grid = [I().strip() for __ in range(n)]\n    res = []\n    for col in range(m):\n        newcol = ''\n        for seg in ''.join((grid[row][col] for row in range(n))).split('o'):\n            newcol += '.' * seg.count('.') + '*' * seg.count('*') + 'o'\n        res.append(newcol[0:-1])\n    for row in range(n):\n        print(''.join((res[col][row] for col in range(m))))", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(s) for s in input().split(' ')]\n    ans = [['.' for i in range(m)] for j in range(n)]\n    grid = []\n    for i in range(n):\n        row = input().strip()\n        grid.append(row)\n    for j in range(m):\n        stoneCnt = 0\n        for i in range(n):\n            if grid[i][j] == '*':\n                stoneCnt += 1\n            elif grid[i][j] == 'o':\n                ans[i][j] = 'o'\n                curRow = i - 1\n                while stoneCnt:\n                    ans[curRow][j] = '*'\n                    curRow -= 1\n                    stoneCnt -= 1\n        if stoneCnt:\n            curRow = n - 1\n            while stoneCnt:\n                ans[curRow][j] = '*'\n                curRow -= 1\n                stoneCnt -= 1\n    for i in range(n):\n        print(''.join(ans[i]))", "n = int(input())\nfor _ in range(n):\n    (x, y) = map(int, input().split())\n    arr = []\n    for __ in range(x):\n        arr.append(list(input()))\n    for zy in range(0, y, +1):\n        free_slots = 0\n        for zx in range(x - 1, -1, -1):\n            if arr[zx][zy] == '*':\n                if free_slots:\n                    arr[zx + free_slots][zy] = '*'\n                    arr[zx][zy] = '.'\n            elif arr[zx][zy] == 'o':\n                free_slots = 0\n            else:\n                free_slots += 1\n    for line in arr:\n        print(''.join(line))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    L = []\n    for i in range(n):\n        L.append(input())\n    res = [['.' for j in range(m)] for i in range(n)]\n    for j in range(m):\n        cur = n - 1\n        for i in reversed(range(n)):\n            if L[i][j] == '*':\n                res[i][j] = '.'\n                res[cur][j] = '*'\n                cur -= 1\n            elif L[i][j] == 'o':\n                res[i][j] = 'o'\n                cur = i - 1\n    for i in range(n):\n        print(''.join(res[i]))", "for _ in range(int(input())):\n    (h, w) = [int(x) for x in input().split()]\n    lines = [input() for x in range(h)]\n    columns = ['' for col in range(w)]\n    for x in range(w):\n        columns[x] = ''.join((lines[y][x] for y in range(h)))\n    for i_column in range(len(columns)):\n        new_column = ''\n        cache = [0, 0]\n        for letter in columns[i_column]:\n            if letter == 'o':\n                new_column += '.' * cache[0] + '*' * cache[1] + 'o'\n                cache = [0, 0]\n            else:\n                cache[letter == '*'] += 1\n        new_column += '.' * cache[0] + '*' * cache[1]\n        columns[i_column] = new_column\n    new_lines = ['' for lin in range(h)]\n    for y in range(h):\n        new_lines[y] = ''.join((columns[x][y] for x in range(w)))\n    print(*new_lines, sep='\\n')", "for _ in range(int(input())):\n    [n, m] = list(map(int, input().split()))\n    mat = []\n    for __ in range(n):\n        mat.append([i for i in input()])\n    new = [['.' for i in range(m)] for j in range(n)]\n    for j in range(m):\n        c = 0\n        for i in range(n):\n            if mat[i][j] == '*':\n                c += 1\n            elif mat[i][j] == 'o':\n                new[i][j] = 'o'\n                for k in range(1, c + 1):\n                    new[i - k][j] = '*'\n                c = 0\n        if c:\n            for k in range(c):\n                new[n - 1 - k][j] = '*'\n            c = 0\n    for i in new:\n        print(''.join(i))", "for t in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    mat = []\n    for i in range(n):\n        mat.append(list(input()))\n    for j in range(m):\n        lev = n\n        for i in range(n - 1, -1, -1):\n            if mat[i][j] == 'o':\n                lev = i\n            elif mat[i][j] == '*':\n                mat[i][j] = '.'\n                mat[lev - 1][j] = '*'\n                lev -= 1\n    for i in mat:\n        print(''.join(i))", "from collections import Counter, defaultdict\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    ar = []\n    for _ in range(n):\n        ar.append(input())\n    res = []\n    for col in range(m):\n        stack = []\n        prev = 0\n        for row in reversed(range(n)):\n            if ar[row][col] == '*':\n                if prev < len(stack):\n                    stack[prev] = '*'\n                    stack.append('.')\n                else:\n                    stack.append('*')\n                prev += 1\n            elif ar[row][col] == 'o':\n                stack.append('o')\n                prev = len(stack)\n            else:\n                stack.append('.')\n        res.append(stack[::-1])\n    res2 = []\n    for row in range(n):\n        res2.append(''.join((res[col][row] for col in range(m))))\n    for x in res2:\n        print(x)", "def task(n, m, a):\n    for j in range(0, m):\n        stones = 0\n        spaces = 0\n        for i in range(0, n):\n            c = a[i][j]\n            if c == '.' and i < n - 1:\n                spaces += 1\n            elif c == '*' and i < n - 1:\n                stones += 1\n            elif c == 'o':\n                for k in range(1, spaces + stones + 1):\n                    if stones > 0:\n                        a[i - k][j] = '*'\n                        stones -= 1\n                    else:\n                        a[i - k][j] = '.'\n                spaces = 0\n                stones = 0\n            elif (c == '.' or c == '*') and i == n - 1:\n                if c == '.':\n                    spaces += 1\n                if c == '*':\n                    stones += 1\n                for k in range(0, spaces + stones):\n                    if stones > 0:\n                        a[i - k][j] = '*'\n                        stones -= 1\n                    else:\n                        a[i - k][j] = '.'\n                spaces = 0\n                stones = 0\n    for i in range(0, n):\n        str = ''\n        for j in range(0, m):\n            str += a[i][j]\n        print(str)\nt = int(input())\nfor i in range(0, t):\n    (n, m) = list(map(int, input().split()))\n    a = []\n    for j in range(0, n):\n        a.append(list(input()))\n    task(n, m, a)", "def supersplit(k):\n    p = []\n    for i in k:\n        p.append(i)\n    return p\n\ndef antisplit(p):\n    k = ''\n    for i in p:\n        k += i\n    return k\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(supersplit(input()))\n    for i in range(m - 1, -1, -1):\n        g = n - 1\n        for j in range(n - 1, -1, -1):\n            if grid[j][i] == 'o':\n                g = j - 1\n            elif grid[j][i] == '*':\n                grid[j][i] = '.'\n                grid[g][i] = '*'\n                g -= 1\n    for i in grid:\n        print(antisplit(i))", "t = int(input())\nwhile t:\n    t -= 1\n    (n, m) = map(int, input().split())\n    a = [list(input()) for _ in range(n)] + [['o'] * m]\n    for j in range(m):\n        beg = cnt = 0\n        for i in range(n + 1):\n            if a[i][j] == '*':\n                cnt += 1\n            elif a[i][j] == 'o':\n                for k in range(beg, i - cnt):\n                    a[k][j] = '.'\n                for k in range(i - cnt, i):\n                    a[k][j] = '*'\n                beg = i + 1\n                cnt = 0\n    for i in range(n):\n        print(''.join(a[i]))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        row = list(input())\n        grid.append(row)\n    for col in range(m):\n        last = n - 1\n        for row in range(n - 1, -1, -1):\n            if grid[row][col] == '.':\n                last = max(last, row)\n            elif grid[row][col] == '*':\n                grid[row][col] = '.'\n                grid[last][col] = '*'\n                last -= 1\n            else:\n                last = row - 1\n    for row in grid:\n        print(''.join(row))", "cases = int(input(''))\ntests = []\nfor i in range(0, cases):\n    (n, m) = input('').split(' ')\n    n = int(n)\n    m = int(m)\n    arr = []\n    for j in range(0, n):\n        arr.append(list(input('')))\n    tests.append((n, m, arr))\nfor (n, m, arr) in tests:\n    for col in range(0, m):\n        next_obs = n - 1\n        for row in range(0, n):\n            row = n - 1 - row\n            if arr[row][col] == 'o':\n                next_obs = row - 1\n            elif arr[row][col] == '*':\n                arr[row][col] = '.'\n                arr[next_obs][col] = '*'\n                next_obs -= 1\n            else:\n                pass\n    for a_row in range(0, n):\n        arr[a_row] = ''.join(arr[a_row])\n    print('\\n'.join(arr))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    matrix = [list(input()) for x in range(n)]\n    for j in range(m):\n        free = -1\n        for i in range(n - 1, -1, -1):\n            if matrix[i][j] == '.' and free == -1:\n                free = i\n            if matrix[i][j] == '*':\n                if free > -1:\n                    matrix[free][j] = '*'\n                    matrix[i][j] = '.'\n                    free -= 1\n            if matrix[i][j] == 'o':\n                free = -1\n    for i in matrix:\n        print(''.join(i))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    t = [[] for i in range(n)]\n    for i in range(n):\n        t[i] = list(input())\n    for j in range(m):\n        lst = n - 1\n        for i in range(n - 1, -1, -1):\n            if t[i][j] == 'o':\n                lst = i - 1\n            elif t[i][j] == '*':\n                t[i][j] = '.'\n                t[lst][j] = '*'\n                lst -= 1\n    for i in range(n):\n        print(''.join(t[i]))", "for inh in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(input())\n    ans = [''] * n\n    for i in range(m):\n        last = n - 1\n        curr = n - 1\n        while curr >= 0:\n            if a[curr][i] == 'o':\n                while last > curr:\n                    ans[last] += '.'\n                    last -= 1\n                ans[last] += 'o'\n                last -= 1\n                curr -= 1\n            elif a[curr][i] == '.':\n                curr -= 1\n            else:\n                ans[last] += '*'\n                curr -= 1\n                last -= 1\n        while last >= 0:\n            ans[last] += '.'\n            last -= 1\n    for i in range(n):\n        print(ans[i])", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    g = []\n    for i in range(n):\n        g.append(list(input()))\n    for c in range(m):\n        stones = 0\n        for r in range(n):\n            if r != n - 1 and g[r][c] == '*':\n                stones += 1\n                g[r][c] = '.'\n            elif g[r][c] == 'o' or (r == n - 1 and g[r][c] == '*'):\n                for up in range(stones):\n                    g[r - up - 1][c] = '*'\n                stones = 0\n            if r == n - 1 and g[r][c] == '.':\n                for up in range(stones):\n                    g[r - up][c] = '*'\n                stones = 0\n    for i in range(n):\n        print(''.join(g[i]))", "t = int(input())\nfor _ in range(t):\n    (r, c) = tuple([int(x) for x in input().split(' ')])\n    grid = []\n    for _ in range(r):\n        grid.append(list(input()))\n    for column in range(c):\n        j = r - 1\n        segment_length = 0\n        while j >= 0:\n            if grid[j][column] == '*':\n                (grid[j][column], grid[j + segment_length][column]) = (grid[j + segment_length][column], grid[j][column])\n            elif grid[j][column] == '.':\n                segment_length += 1\n            else:\n                segment_length = 0\n            j -= 1\n    for row in range(r):\n        print(''.join(grid[row]))", "import sys\ninput = sys.stdin.readline\nfor _ in [0] * int(input()):\n    (n, m) = map(int, input().split())\n    s = [''] * m\n    for _ in [0] * n:\n        s = [s[i] + j for (i, j) in zip(range(m), input())]\n    col = [''] * n\n    k = 0\n    for i in s:\n        bl = 0\n        x = ''\n        for j in i[::-1]:\n            if j == 'o':\n                x = j + '.' * bl + x\n                bl = 0\n            elif j == '*':\n                x = j + x\n            else:\n                bl = bl + 1\n        x = '.' * bl + x\n        col = [col[ind] + val for (val, ind) in zip(x, range(n))]\n        k = k + 1\n    for j in col:\n        print(j)", "t = int(input())\nfor _ in range(t):\n    cs = input().split()\n    n = int(cs[0])\n    m = int(cs[1])\n    grid = [[None for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        line = input()\n        for j in range(m):\n            grid[i][j] = line[j]\n    result = [['.' for _ in range(m)] for _ in range(n)]\n    for j in range(m):\n        stones = 0\n        for i in range(n):\n            if grid[i][j] == '*':\n                stones += 1\n            elif grid[i][j] == 'o':\n                result[i][j] = 'o'\n                for k in range(1, stones + 1):\n                    result[i - k][j] = '*'\n                stones = 0\n        for k in range(1, stones + 1):\n            result[n - k][j] = '*'\n    for i in range(n):\n        print(''.join(result[i]))", "def fall(col):\n    marker = n\n    for i in range(n - 1, -1, -1):\n        if col[i] == 'o':\n            marker = i\n        elif col[i] == '*':\n            if i != marker - 1:\n                col[i] = '.'\n                col[marker - 1] = '*'\n                marker -= 1\n            else:\n                marker -= 1\n                continue\n    return col\nT = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    transpose = []\n    for i in range(m):\n        transpose.append([])\n    for i in range(n):\n        x = input()\n        for j in range(m):\n            transpose[j].append(x[j])\n    for i in range(m):\n        fall(transpose[i])\n    for i in range(n):\n        ans = ''\n        for j in range(m):\n            ans += transpose[j][i]\n        print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    arr = [[] for _ in range(n)]\n    for i in range(n):\n        arr[i] = list(input())\n    for j in range(0, m):\n        last = n - 1\n        for i in range(n - 1, -1, -1):\n            if arr[i][j] == 'o':\n                last = i - 1\n            elif arr[i][j] == '*':\n                (arr[i][j], arr[last][j]) = (arr[last][j], arr[i][j])\n                last -= 1\n    for a in arr:\n        print(''.join(a))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    li = []\n    for i in range(n):\n        s = input()\n        li.append([char for char in s])\n    for i in range(m):\n        st = 0\n        obs = 0\n        for j in range(n):\n            if li[j][i] == '*':\n                st += 1\n                li[j][i] = '.'\n            elif li[j][i] == 'o':\n                for k in range(j - 1, j - 1 - st, -1):\n                    li[k][i] = '*'\n                st = 0\n            if j == n - 1 and st != 0 and (li[j][i] != 'o'):\n                for k in range(j, j - st, -1):\n                    li[k][i] = '*'\n                st = 0\n    for i in range(n):\n        s = ''\n        for j in range(m):\n            s += li[i][j]\n        print(s)", "c = input()\nfor _ in range(int(c)):\n    b = input().split()\n    a = []\n    for i in range(int(b[0])):\n        a.append(list(input()))\n    for i in range(int(b[1])):\n        count = 0\n        row = int(b[0]) - 1\n        for j in range(int(b[0])):\n            if a[row][i] == '.':\n                count += 1\n            elif a[row][i] == 'o':\n                count = 0\n            else:\n                (a[row][i], a[row + count][i]) = ('.', a[row][i])\n            row -= 1\n    for i in range(int(b[0])):\n        print(''.join(a[i]))", "nT = int(input())\nwhile nT > 0:\n    mn = input()\n    mn = mn.split(' ')\n    (m, n) = (int(mn[0]), int(mn[1]))\n    board = []\n    for i in range(m):\n        strLine = [*input()]\n        board.append(strLine)\n    for j in range(n):\n        cnt = 0\n        for i in range(m):\n            if board[i][j] == '.':\n                continue\n            if board[i][j] == '*':\n                board[i][j] = '.'\n                cnt += 1\n            if board[i][j] == 'o' and cnt > 0:\n                for i1 in range(i - 1, i - (1 + cnt), -1):\n                    board[i1][j] = '*'\n                cnt = 0\n        if cnt > 0:\n            for i1 in range(m - 1, m - 1 - cnt, -1):\n                board[i1][j] = '*'\n    for l in board:\n        print(''.join(l))\n    nT -= 1", "import sys, math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    l = []\n    (n, m) = map(int, input().split())\n    for i in range(n):\n        l1 = list(input())\n        l.append(l1)\n    x = 0\n    y = 0\n    v = 0\n    for j in range(m):\n        for i in range(n):\n            if l[i][j] == '*':\n                x = x + 1\n            elif l[i][j] == '.':\n                y = y + 1\n            elif l[i][j] == 'o':\n                for k in range(v, v + y):\n                    l[k][j] = '.'\n                for k in range(v + y, v + y + x):\n                    l[k][j] = '*'\n                v = i + 1\n                y = 0\n                x = 0\n        for k in range(v, v + y):\n            l[k][j] = '.'\n        for k in range(v + y, v + y + x):\n            l[k][j] = '*'\n        v = 0\n        y = 0\n        x = 0\n    for i in range(n):\n        s = ''\n        for j in range(m):\n            s = s + l[i][j]\n        print(s)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [input() for _ in range(n)]\n    b = [''] * m\n    b1 = b.copy()\n    a1 = [''] * n\n    for i in range(n):\n        for j in range(m):\n            b[j] += a[i][j]\n    for row in range(m):\n        kam = 0\n        s = ''\n        for i in b[row]:\n            if i == '*':\n                kam += 1\n            elif i == '.':\n                s += '.'\n            else:\n                s += '*' * kam + 'o'\n                kam = 0\n        else:\n            s += '*' * kam\n        b1[row] = s\n    for i in range(n):\n        for j in range(m):\n            a1[i] += b1[j][i]\n    for i in a1:\n        print(i)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        a = input()\n        arr.append(a)\n    ans = [['.' for i in range(m)] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] == 'o':\n                ans[i][j] = 'o'\n    for i in range(m):\n        c = 0\n        base = n\n        for j in range(n - 1, -1, -1):\n            if arr[j][i] == 'o':\n                for x in range(base - 1, base - 1 - c, -1):\n                    ans[x][i] = '*'\n                base = j\n                c = 0\n            elif arr[j][i] == '*':\n                c += 1\n        for x in range(base - 1, base - 1 - c, -1):\n            ans[x][i] = '*'\n    for i in range(n):\n        s = ''\n        for j in range(m):\n            s = s + ans[i][j]\n        print(s)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [[c for c in input()] for r in range(n)]\n    for c in range(m):\n        k = 0\n        for r in range(n):\n            if a[r][c] == '*':\n                k += 1\n                a[r][c] = '.'\n            if r >= n - 1 or a[r + 1][c] == 'o':\n                for z in range(k):\n                    a[r - z][c] = '*'\n                k = 0\n    for r in range(n):\n        s = ''\n        for c in range(m):\n            s += a[r][c]\n        print(s)", "def func(arr):\n    return ''.join(arr)\nfor t in range(int(input())):\n    (r, c) = map(int, input().split())\n    grid = []\n    for i in range(r):\n        x = list(input())\n        grid.append(x)\n    for j in range(c):\n        extract = []\n        for k in range(r):\n            extract.append(grid[k][j])\n        stones = []\n        empty = []\n        obstacles = []\n        temp_e = 0\n        temp_s = 0\n        for l in range(r):\n            if extract[l] == '.':\n                temp_e += 1\n            if extract[l] == '*':\n                temp_s += 1\n            if extract[l] == 'o':\n                obstacles.append(l)\n                stones.append(temp_s)\n                temp_s = 0\n                empty.append(temp_e)\n                temp_e = 0\n        if temp_s != 0:\n            stones.append(temp_s)\n        if temp_e != 0:\n            empty.append(temp_e)\n        result = ''\n        while True:\n            if len(stones) > len(obstacles):\n                result += '*' * stones[-1]\n                stones.pop()\n            if len(empty) > len(obstacles):\n                result += '.' * empty[-1]\n                empty.pop()\n            if len(obstacles) != 0:\n                result += 'o'\n                obstacles.pop()\n            if len(empty) == 0 and len(stones) == 0 and (len(obstacles) == 0):\n                break\n        result = list(result[::-1])\n        for m in range(r):\n            grid[m][j] = result[m]\n    grid = list(map(func, grid))\n    print('\\n'.join(grid))", "for _ in range(int(input())):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    lis = []\n    for i in range(n):\n        s = input()\n        lis1 = []\n        for p in s:\n            lis1.append(p)\n        lis.append(lis1)\n    for i in range(m):\n        for j in range(n - 1, -1, -1):\n            if lis[j][i] == '.' and j == n - 1:\n                t = n\n            elif lis[j][i] == '.':\n                continue\n            elif j == n - 1:\n                t = j\n            elif lis[j][i] == '*':\n                temp = lis[t - 1][i]\n                lis[t - 1][i] = lis[j][i]\n                lis[j][i] = temp\n                t = t - 1\n            else:\n                t = j\n    for i in lis:\n        print(''.join(i))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    g = []\n    (o, s) = ([], [[] for j in range(m)])\n    for i in range(n):\n        r = input()\n        g.append(list(r))\n        for (j, c) in enumerate(r):\n            if c == 'o':\n                o.append((j, -i))\n            if c == '*':\n                s[j].append(-i)\n    o.extend(((i, 1) for i in range(m)))\n    o.extend(((i, -n) for i in range(m)))\n    o.sort()\n    os = []\n    for ((j1, i1), (j2, i2)) in zip(o, o[1:]):\n        if j1 != j2:\n            continue\n        os.append((j1, i1, sum((1 for i in s[j1] if i1 < i < i2))))\n    out = [['.'] * m for _ in range(n)]\n    for (j, i, c) in os:\n        i = -i\n        if 0 <= i < n:\n            out[i][j] = 'o'\n        for k in range(1, c + 1):\n            out[i - k][j] = '*'\n    for l in out:\n        print(''.join(l))", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        x = input().strip()\n        tmp = []\n        for j in x:\n            tmp.append(j)\n        l.append(tmp[:])\n    l.append(['o'] * m)\n    for i in range(m):\n        x = 0\n        for j in range(n + 1):\n            if l[j][i] == 'o':\n                k = j - 1\n                while k > -1 and l[k][i] != 'o':\n                    if x == 0:\n                        l[k][i] = '.'\n                    else:\n                        l[k][i] = '*'\n                        x -= 1\n                    k -= 1\n            elif l[j][i] == '*':\n                x += 1\n    for i in range(n):\n        x = ''\n        for j in range(m):\n            x += l[i][j]\n        print(x)", "import math\nimport functools\nfrom collections import *\n\ndef Solve():\n    (r, c) = [int(i) for i in input().split()]\n    ar = []\n    for _ in range(r):\n        temp = input()\n        ar.append(temp)\n    d = {}\n    for j in range(c):\n        cnt = 0\n        for i in range(r):\n            if ar[i][j] == '*':\n                ar[i] = ar[i][:j] + '.' + ar[i][j + 1:]\n                cnt += 1\n            elif ar[i][j] == 'o' and cnt:\n                d[i, j] = cnt\n                cnt = 0\n        if cnt:\n            d[i + 1, j] = cnt\n    for ((x, y), cnt) in d.items():\n        while cnt > 0:\n            ar[x - 1] = ar[x - 1][:y] + '*' + ar[x - 1][y + 1:]\n            x -= 1\n            cnt -= 1\n    print('\\n'.join(ar))\n\ndef main():\n    x = int(input(''))\n    for _ in range(x):\n        Solve()\nmain()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    lista = []\n    for i in range(0, n):\n        lista.append(input())\n    updated_column = []\n    for i in range(0, m):\n        l = ''\n        a = 0\n        b = 0\n        for j in range(0, n):\n            if lista[j][i] == '*':\n                a += 1\n            if lista[j][i] == '.':\n                b += 1\n            if lista[j][i] == 'o':\n                for k in range(b):\n                    l += '.'\n                for k in range(a):\n                    l += '*'\n                l += 'o'\n                a = 0\n                b = 0\n            if j == n - 1 and lista[j][i] != 'o':\n                for k in range(b):\n                    l += '.'\n                for k in range(a):\n                    l += '*'\n        updated_column.append(l)\n    for j in range(n):\n        p = ''\n        for i in range(m):\n            p += updated_column[i][j]\n        print(p)", "for _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    mat = [[c for c in input()] for _ in range(m)]\n    Y = [m - 1 for _ in range(n)]\n    for i in range(m - 1, -1, -1):\n        for j in range(n):\n            if mat[i][j] == '*':\n                mat[i][j] = '.'\n                mat[Y[j]][j] = '*'\n                Y[j] -= 1\n            elif mat[i][j] == 'o':\n                Y[j] = i - 1\n    for row in mat:\n        print(*row, sep='')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = [list(input()) for _ in range(n)]\n    for k in range(m):\n        last = n - 1\n        for i in range(n - 1, -1, -1):\n            if s[i][k] == '*':\n                (s[i][k], s[last][k]) = (s[last][k], s[i][k])\n                last -= 1\n            elif s[i][k] == 'o':\n                last = i - 1\n    for k in s:\n        print(*k, sep='')", "for _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    mat = [[c for c in input()] for _ in range(m)]\n    Y = [m - 1 for _ in range(n)]\n    for i in range(m - 1, -1, -1):\n        for j in range(n):\n            if mat[i][j] == '*':\n                mat[i][j] = '.'\n                mat[Y[j]][j] = '*'\n                Y[j] -= 1\n            elif mat[i][j] == 'o':\n                Y[j] = i - 1\n    for row in mat:\n        print(*row, sep='')", "for _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    mat = [[c for c in input()] for _ in range(m)]\n    Y = [m - 1 for _ in range(n)]\n    for i in range(m - 1, -1, -1):\n        for j in range(n):\n            if mat[i][j] == '*':\n                mat[i][j] = '.'\n                mat[Y[j]][j] = '*'\n                Y[j] -= 1\n            elif mat[i][j] == 'o':\n                Y[j] = i - 1\n    for row in mat:\n        print(*row, sep='')", "for _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    mat = [[c for c in input()] for _ in range(m)]\n    Y = [m - 1 for _ in range(n)]\n    for i in range(m - 1, -1, -1):\n        for j in range(n):\n            if mat[i][j] == '*':\n                mat[i][j] = '.'\n                mat[Y[j]][j] = '*'\n                Y[j] -= 1\n            elif mat[i][j] == 'o':\n                Y[j] = i - 1\n    for row in mat:\n        print(*row, sep='')", "for _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    mat = [[c for c in input()] for _ in range(m)]\n    Y = [m - 1 for _ in range(n)]\n    for i in range(m - 1, -1, -1):\n        for j in range(n):\n            if mat[i][j] == '*':\n                mat[i][j] = '.'\n                mat[Y[j]][j] = '*'\n                Y[j] -= 1\n            elif mat[i][j] == 'o':\n                Y[j] = i - 1\n    for row in mat:\n        print(*row, sep='')", "def help():\n    (n, m) = list(map(int, input().split()))\n    g = []\n    for i in range(n):\n        l = list(input())\n        g.append(l)\n    for i in range(m):\n        c = 0\n        for j in range(n):\n            if g[j][i] == '*':\n                c += 1\n                g[j][i] = '.'\n            if g[j][i] == 'o':\n                t = j - 1\n                while c > 0:\n                    g[t][i] = '*'\n                    c -= 1\n                    t -= 1\n                c = 0\n            t = n - 1\n        while c > 0:\n            g[t][i] = '*'\n            c -= 1\n            t -= 1\n    for i in range(n):\n        for j in range(m):\n            print(g[i][j], end='')\n        print()\nfor _ in range(int(input())):\n    help()", "import collections\n\ndef print_matrix(g, n, m):\n    for i in range(n):\n        for j in range(m):\n            print(g[i][j], end='')\n        print()\n\ndef solve(n, m, g):\n    matrix = [['.' for x in range(m)] for y in range(n)]\n    for x in range(n):\n        for y in range(m):\n            if g[x][y] == 'o':\n                matrix[x][y] = 'o'\n    j = 0\n    i = 0\n    while j < m:\n        nStone = 0\n        while i < n and g[i][j] != 'o':\n            if g[i][j] == '*':\n                nStone += 1\n            i += 1\n        t = i - 1\n        while nStone:\n            matrix[t][j] = '*'\n            t -= 1\n            nStone -= 1\n        if i != n:\n            i += 1\n            continue\n        i = 0\n        j += 1\n    print_matrix(matrix, n, m)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    g = []\n    for i in range(n):\n        g.append([ch for ch in input()])\n    solve(n, m, g)", "def inp(*, cf=lambda x: x):\n    return cf(input())\n\ndef inpint():\n    return inp(cf=int)\n\ndef inp_line(*, cf=lambda x: x, s=' '):\n    return list(map(cf, input().split(s)))\n\ndef inpints():\n    return inp_line(cf=int)\n\ndef stones_until_obstacle(grid, i, j):\n    stones = 0\n    while i >= 0 and grid[i][j] != 'o':\n        if grid[i][j] == '*':\n            stones += 1\n        i -= 1\n    return (i, stones)\n\ndef test_case(case):\n    (n, m) = inpints()\n    grid = []\n    for i in range(n):\n        grid.append(list(inp()))\n    if n == 1:\n        for j in range(m):\n            print(grid[0][j], end='')\n        print()\n        return\n    result = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'o':\n                result[i][j] = 'o'\n    for j in range(m):\n        i = n - 1\n        if grid[i][j] == 'o':\n            i -= 1\n        while i >= 0:\n            (next_obstacle, stones) = stones_until_obstacle(grid, i, j)\n            for s in range(i - stones + 1, i + 1):\n                result[s][j] = '*'\n            i = next_obstacle\n            if i >= 0:\n                i -= 1\n    for i in range(n):\n        for j in range(m):\n            print(result[i][j], end='')\n        print()\n\ndef main():\n    T = inpint()\n    for t in range(1, T + 1):\n        test_case(t)\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(input()) for i in range(n)]\n    a.append(['o'] * m)\n    ans = [['.'] * m for i in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(m):\n            if a[i][j] == 'o':\n                ans[i][j] = 'o'\n                kk = 0\n                for k in reversed(range(i)):\n                    if a[k][j] == 'o':\n                        break\n                    elif a[k][j] == '*':\n                        kk += 1\n                for k in range(i - kk, i):\n                    ans[k][j] = '*'\n    for i in range(n):\n        print(*ans[i], sep='')", "def resi():\n    (n, m) = map(int, input().split())\n    res = [[''] * m for i in range(n + 1)]\n    matrica = [['.'] * m for i in range(n + 1)]\n    for i in range(n):\n        s = input()\n        for j in range(m):\n            matrica[i][j] = s[j]\n    for j in range(m):\n        matrica[n][j] = 'o'\n    for j in range(m):\n        br = 0\n        for i in range(n + 1):\n            if matrica[i][j] == '*':\n                br += 1\n            if matrica[i][j] == 'o':\n                poz = i\n                if br > 0:\n                    for k in range(poz - br, poz):\n                        res[k][j] = '*'\n                res[poz][j] = 'o'\n                br = 0\n    for i in range(n):\n        for j in range(m):\n            if res[i][j] == '':\n                res[i][j] = '.'\n            print(res[i][j], end='')\n        print()\nfor _ in range(int(input())):\n    resi()", "for _ in range(int(input())):\n    (row, col) = map(int, input().split())\n    ab = []\n    for p in range(row):\n        kk = input()\n        ab.append(kk)\n    bc = [['.' for q in range(col)] for w in range(row)]\n    for i in range(col):\n        stone = 0\n        obstacle = -1\n        for j in range(row):\n            if ab[j][i] == 'o':\n                bc[j][i] = 'o'\n                if stone > 0:\n                    k = j\n                    while stone > 0:\n                        k -= 1\n                        bc[k][i] = '*'\n                        stone -= 1\n            elif ab[j][i] == '*':\n                stone += 1\n        if stone > 0:\n            k = row\n            while stone > 0:\n                k -= 1\n                bc[k][i] = '*'\n                stone -= 1\n    for r in bc:\n        for pp in r:\n            print(pp, end='')\n        print()", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = []\n    for _ in range(n):\n        s += [list(input())]\n    for i in range(m):\n        e = -1\n        for j in range(n - 1, -1, -1):\n            if s[j][i] == '.':\n                if e == -1:\n                    e = j\n            elif s[j][i] == 'o':\n                e = -1\n            elif s[j][i] == '*':\n                if e == -1:\n                    pass\n                else:\n                    s[j][i] = '.'\n                    s[e][i] = '*'\n                    e -= 1\n    for chr in s:\n        for ch in chr:\n            print(ch, end='')\n        print()", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    num_list = []\n    for i in range(n):\n        a = list(input())\n        num_list.append(a)\n    sec = [list(i) for i in zip(*num_list)]\n    for i in sec:\n        if '*' not in i:\n            continue\n        fir = n - 1\n        for j in range(n - 1, -1, -1):\n            if i[j] == 'o':\n                fir = j - 1\n            elif i[j] == '*':\n                (i[j], i[fir]) = (i[fir], i[j])\n                fir -= 1\n    for i in range(n):\n        for j in range(m):\n            print(sec[j][i], end='')\n        print()", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    num_list = []\n    for i in range(n):\n        a = list(input())\n        num_list.append(a)\n    sec = [list(i) for i in zip(*num_list)]\n    for i in sec:\n        fir = n - 1\n        for j in range(n - 1, -1, -1):\n            if i[j] == 'o':\n                fir = j - 1\n            elif i[j] == '*':\n                (i[j], i[fir]) = (i[fir], i[j])\n                fir -= 1\n    for i in range(n):\n        for j in range(m):\n            print(sec[j][i], end='')\n        print()", "def pm(a):\n    for i in range(len(a)):\n        for j in range(len(a[i])):\n            print(a[i][j], end='')\n        print()\nt = int(input())\nfor ii in range(t):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        b = str(input())\n        bb = []\n        for j in b:\n            bb.append(j)\n        a.append(bb)\n    for i in range(m):\n        p = n - 1\n        for j in range(n - 1, -1, -1):\n            if a[j][i] == '*':\n                a[j][i] = '.'\n                a[p][i] = '*'\n                p -= 1\n            elif a[j][i] == 'o':\n                p = j - 1\n            else:\n                p += 0\n    pm(a)", "n = int(input())\nfor i in range(n):\n    strng = []\n    (f, b) = map(int, input().split())\n    for c in range(f):\n        strng.append(list(map(str, input())))\n    for k in range(b):\n        a = f - 1\n        j = 0\n        while a >= 0:\n            if strng[a][k] == '.':\n                j += 1\n            elif strng[a][k] == '*' and j != 0:\n                strng[a + j][k] = '*'\n                strng[a][k] = '.'\n            elif strng[a][k] == 'o':\n                j = 0\n            a -= 1\n    for w in strng:\n        for c in w:\n            print(c, end='')\n        print()", "num = int(input())\nresult = []\nfor i in range(num):\n    (r, c) = [int(x) for x in input().split()]\n    all_rows = []\n    new_rows = []\n    for j in range(r):\n        all_rows.append(input())\n        new_rows.append(['.'] * c)\n    for k in range(c):\n        stone_number = 0\n        for j in range(r):\n            if all_rows[j][k] == '*':\n                stone_number += 1\n            if all_rows[j][k] == 'o':\n                new_rows[j][k] = 'o'\n                for l in range(stone_number):\n                    new_rows[j - l - 1][k] = '*'\n                stone_number = 0\n            if j == r - 1:\n                for l in range(stone_number):\n                    new_rows[j - l][k] = '*'\n                stone_number = 0\n    result.append(new_rows)\nfor res in result:\n    for row in res:\n        for (cc, col) in enumerate(row):\n            if cc == len(row) - 1:\n                print(col)\n            else:\n                print(col, end='')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    lst = [[x for x in input()] for i in range(n)]\n    for i in range(m):\n        count = 0\n        for j in range(n):\n            if lst[j][i] == '*':\n                count += 1\n                lst[j][i] = '.'\n            if j + 1 >= n or lst[j + 1][i] == 'o':\n                for k in range(count):\n                    lst[j - k][i] = '*'\n                count = 0\n    for j in range(n):\n        for i in range(m):\n            print(lst[j][i], sep='', end='')\n        print()", "t = int(input())\nwhile t > 0:\n    (m, n) = list(map(int, input().split(' ')))\n    grid = []\n    for i in range(m):\n        grid.append(list(input()))\n    for j in range(n):\n        last = m - 1\n        for i in range(m - 1, -1, -1):\n            c = grid[i][j]\n            if c == 'o':\n                last = i - 1\n            elif c == '*':\n                (grid[i][j], grid[last][j]) = (grid[last][j], grid[i][j])\n                last -= 1\n    for i in range(m):\n        for j in range(n):\n            print(grid[i][j], end='')\n        print()\n    t -= 1", "import sys\nfrom collections import Counter\ninput = sys.stdin.readline\n\ndef get(a):\n    b = ['o'] + a + ['o']\n    ss = ''.join(b)\n    p = ss.split('o')\n    res = []\n    for s in p:\n        cnt = Counter(s)\n        s_ok = '.' * cnt['.'] + '*' * cnt['*']\n        res.append(s_ok)\n    return list('o'.join(res))[1:-1]\n\ndef solve():\n    (n, m) = map(int, input().split())\n    a = [[0 for j in range(m)] for i in range(n)]\n    for i in range(n):\n        s = input()\n        for j in range(m):\n            a[i][j] = s[j]\n    res = []\n    for j in range(m):\n        col = []\n        for i in range(n):\n            col.append(a[i][j])\n        res.append(get(col))\n    for j in range(m):\n        for i in range(n):\n            a[i][j] = res[j][i]\n    for i in range(n):\n        for j in range(m):\n            print(a[i][j], end='')\n        print()\ntst = int(input())\nfor tt in range(tst):\n    solve()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    grid = [[0 for i in range(m)]]\n    for row in range(n):\n        temp = input()\n        rowArr = []\n        for col in range(m):\n            if temp[col] == '.':\n                rowArr.append(0)\n            elif temp[col] == '*':\n                rowArr.append(1)\n            else:\n                rowArr.append(-1)\n        grid.append(rowArr)\n    for col in range(m):\n        for row in range(1, n + 1):\n            if grid[row][col] != -1:\n                grid[row][col] += max(grid[row - 1][col], 0)\n                grid[row - 1][col] = min(0, grid[row - 1][col])\n        r = n\n        temp = ''\n        while r != 0:\n            if grid[r][col] == -1:\n                temp += 'o'\n                r -= 1\n            elif grid[r][col] == 0:\n                temp += '.'\n                r -= 1\n            else:\n                temp += '*' * grid[r][col]\n                r -= grid[r][col]\n        for row in range(1, n + 1):\n            grid[row][col] = temp[n - 1 - (row - 1)]\n    for i in range(1, len(grid)):\n        print(''.join(grid[i]))", "def printGrid(grid):\n    for i in range(len(grid)):\n        print(''.join(grid[i]))\n\ndef solution(grid):\n    (r, c) = (len(grid), len(grid[0]))\n    for i in range(r - 1, -1, -1):\n        for j in range(c - 1, -1, -1):\n            if grid[i][j] == '*':\n                grid[i][j] = '.'\n                k = i\n                while k + 1 < r and grid[k + 1][j] == '.':\n                    k += 1\n                grid[k][j] = '*'\n    printGrid(grid)\n\ndef main():\n    t = eval(input())\n    for _ in range(t):\n        (n, m) = input().split()\n        (n, m) = (int(n), int(m))\n        grid = []\n        for _ in range(n):\n            string = input()\n            lst = [s for s in string]\n            grid.append(lst)\n        solution(grid)\nmain()"]