["import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    if 1 not in a:\n        print(sum(b))\n    elif 0 not in a:\n        print(sum(b))\n    else:\n        p = []\n        q = []\n        for i in range(n):\n            if a[i] == 1:\n                q.append(b[i])\n            else:\n                p.append(b[i])\n        p = sorted(p, reverse=True)\n        q = sorted(q, reverse=True)\n        summ = 0\n        if len(p) > len(q):\n            summ += p[-1] + sum(q) * 2 + sum(p[:len(q)]) * 2 + sum(p[len(q):-1])\n        elif len(p) < len(q):\n            summ += q[-1] + sum(p) * 2 + sum(q[:len(p)]) * 2 + sum(q[len(p):-1])\n        else:\n            b.sort()\n            summ += b[0] + sum(b[1:]) * 2\n        print(summ)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().strip().split()))\n    ls = list(map(int, input().strip().split()))\n    a = l.count(0)\n    b = n - a\n    co = 0\n    if a == n or b == n:\n        co = sum(ls)\n    elif a == b:\n        co = sum(ls) * 2 - min(ls)\n    elif a < b:\n        (l0, l1) = ([], [])\n        for i in range(n):\n            if l[i] == 0:\n                l0.append(ls[i])\n            else:\n                l1.append(ls[i])\n        l0.sort(reverse=True)\n        l1.sort(reverse=True)\n        co += sum(ls)\n        for i in range(a):\n            co += l1[i] + l0[i]\n    else:\n        (l0, l1) = ([], [])\n        for i in range(n):\n            if l[i] == 0:\n                l0.append(ls[i])\n            else:\n                l1.append(ls[i])\n        l0.sort(reverse=True)\n        l1.sort(reverse=True)\n        co += sum(ls)\n        for i in range(b):\n            co += l1[i] + l0[i]\n    print(co)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    (t1, t2) = ([], [])\n    for i in range(n):\n        if A[i]:\n            t1.append(B[i])\n        else:\n            t2.append(B[i])\n    if not t1 or not t2:\n        return sum(B)\n    t1.sort(reverse=True)\n    t2.sort(reverse=True)\n    (u, v) = (len(t1), len(t2))\n    m = min(u, v)\n    if u != v:\n        ans = sum(B) + sum(t1[:m]) + sum(t2[:m])\n    else:\n        ans = 2 * sum(B) - min(B)\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    power = list(map(int, input().split()))\n    ans = 0\n    p = list(zip(power, arr))\n    p.sort(reverse=True)\n    fire = arr.count(1)\n    frost = arr.count(0)\n    if fire == frost:\n        return 2 * sum(power) - min(power)\n    i = 0\n    j = 0\n    while i < n and j < n and fire and frost:\n        while p[i][1] == 0:\n            i += 1\n        while 1 == p[j][1]:\n            j += 1\n        ans += 2 * (p[i][0] + p[j][0])\n        fire -= 1\n        frost -= 1\n        i += 1\n        j += 1\n    k = 1\n    if frost:\n        i = j\n        k = 0\n    while i < n:\n        if p[i][1] == k:\n            ans += p[i][0]\n        i += 1\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "import sys\nimport math\nfrom collections import Counter\nfrom collections import defaultdict\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef solve(a, b):\n    if a.count(1) == len(a) or a.count(1) == 0:\n        return sum(b)\n    d = defaultdict(list)\n    for i in range(len(a)):\n        d[a[i]].append(b[i])\n    for i in d:\n        d[i].sort()\n    zero = a.count(0)\n    one = a.count(1)\n    if zero == one:\n        return 2 * sum(b) - min(b)\n    ans = 0\n    if one < zero:\n        t = zero - one\n        ind = 0\n        anss = 0\n        for i in range(t):\n            anss += d[0][ind]\n            ind += 1\n        return 2 * sum(b) - anss\n    else:\n        t = one - zero\n        ind = 0\n        anss = 0\n        for i in range(t):\n            anss += d[1][ind]\n            ind += 1\n        return 2 * sum(b) - anss\nt = int(input())\nfor _ in range(t):\n    n = get_ints()\n    arr = get_ints()\n    arr2 = get_ints()\n    print(solve(arr, arr2))", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    n = int(inp())\n    a = list(map(int, inp().split()))\n    b = list(map(int, inp().split()))\n    aa = []\n    bb = []\n    for i in range(n):\n        if a[i] == 0:\n            aa.append(b[i])\n        else:\n            bb.append(b[i])\n    aa.sort()\n    bb.sort()\n    if len(aa) == len(bb):\n        if aa[0] <= bb[0]:\n            print((sum(aa) + sum(bb)) * 2 - aa[0])\n        else:\n            print((sum(aa) + sum(bb)) * 2 - bb[0])\n    else:\n        v = min(len(aa), len(bb))\n        print((sum(aa[len(aa) - v:]) + sum(bb[len(bb) - v:])) * 2 + (sum(aa[:len(aa) - v]) + sum(bb[:len(bb) - v])))\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "import sys, math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    x = a.count(1)\n    y = n - x\n    if x == y:\n        print(2 * sum(b) - min(b))\n    else:\n        u1 = []\n        u2 = []\n        for i in range(n):\n            if a[i] == 1:\n                u1.append(b[i])\n            else:\n                u2.append(b[i])\n        u1.sort(reverse=True)\n        u2.sort(reverse=True)\n        if x > y:\n            s = 2 * sum(u1[:y])\n            s2 = sum(u1[y:])\n            print(s + s2 + 2 * sum(u2))\n        else:\n            s = 2 * sum(u2[:x])\n            s2 = sum(u2[x:])\n            print(s + s2 + 2 * sum(u1))", "import sys\nimport heapq\nimport math\ninput = sys.stdin.readline\nsys.setrecursionlimit(100000)\nfrom collections import Counter, defaultdict\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef main():\n    length = inp()\n    array = inlt()\n    strength = inlt()\n    powers = defaultdict(list)\n    for i in range(length):\n        powers[array[i]].append(strength[i])\n    fire = powers[0]\n    frost = powers[1]\n    fire.sort()\n    frost.sort()\n    (N, M) = (len(fire), len(frost))\n    if N == 0:\n        print(sum(frost))\n    elif M == 0:\n        print(sum(fire))\n    elif N == M:\n        print(2 * sum(fire) + 2 * sum(frost) - min(fire[0], frost[0]))\n    elif N > M:\n        print(2 * sum(frost) + 2 * sum(fire[-M:]) + sum(fire[:-M]))\n    else:\n        print(2 * sum(fire) + 2 * sum(frost[-N:]) + sum(frost[:-N]))\nt = inp()\nfor _ in range(t):\n    main()", "import sys\ninput = sys.stdin.readline\n\ndef print(*args, end='\\n', sep=' ') -> None:\n    sys.stdout.write(sep.join(map(str, args)) + end)\n\ndef Solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    frost = []\n    fire = []\n    for i in range(n):\n        if a[i] == 0:\n            frost.append(b[i])\n        else:\n            fire.append(b[i])\n    fil = len(fire)\n    frl = len(frost)\n    ans = 0\n    frost.sort(reverse=True)\n    fire.sort(reverse=True)\n    if fil < frl:\n        ans += sum(frost[:-1][:fil]) + sum(frost)\n        ans += sum(fire) + sum(fire[:frl])\n    elif fil > frl:\n        ans += sum(fire[:-1][:frl]) + sum(fire)\n        ans += sum(frost) + sum(frost[:fil])\n    elif fire[-1] < frost[-1]:\n        ans += sum(fire[:-1]) + sum(fire) + sum(frost) * 2\n    else:\n        ans += sum(frost[:-1]) + sum(frost) + sum(fire) * 2\n    print(ans)\nfor t in range(int(input())):\n    Solve()", "import sys\ninput = sys.stdin.readline\n\ndef print(*args, end='\\n', sep=' ') -> None:\n    sys.stdout.write(sep.join(map(str, args)) + end)\n\ndef Solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    frost = []\n    fire = []\n    for i in range(n):\n        if a[i] == 0:\n            frost.append(b[i])\n        else:\n            fire.append(b[i])\n    fil = len(fire)\n    frl = len(frost)\n    ans = 0\n    fis = sum(fire)\n    frs = sum(frost)\n    frost.sort(reverse=True)\n    fire.sort(reverse=True)\n    if fil < frl:\n        ans += sum(frost[:-1][:fil]) + frs\n        ans += fis + sum(fire[:frl])\n    elif fil > frl:\n        ans += sum(fire[:-1][:frl]) + fis\n        ans += frs + sum(frost[:fil])\n    elif fire[-1] < frost[-1]:\n        ans += fis - fire[-1] + fis + frs * 2\n    else:\n        ans += frs - frost[-1] + frs + fis * 2\n    print(ans)\nfor t in range(int(input())):\n    Solve()", "import sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_iarray():\n    return [int(i) for i in sys.stdin.readline().strip().split()]\n\ndef solve(p1, p2):\n    (sr, lr) = (p2, p1)\n    if len(p1) < len(p2):\n        (sr, lr) = (p1, p2)\n    tot = 0\n    i = 0\n    while len(lr) - i > len(sr):\n        tot += lr[i]\n        i += 1\n    for j in range(len(sr)):\n        tot += 2 * (sr[j] + lr[i + j])\n    if len(sr) == len(lr):\n        tot -= min(lr[0], sr[0])\n    return tot\nt = read_int()\nfor _ in range(t):\n    n = read_int()\n    skills = read_iarray()\n    power = read_iarray()\n    (fire, frost) = ([], [])\n    for (i, v) in enumerate(power):\n        if skills[i]:\n            fire.append(v)\n        else:\n            frost.append(v)\n    print(solve(sorted(fire), sorted(frost)))", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    aa = []\n    bb = []\n    for i in range(n):\n        if a[i]:\n            aa.append(b[i])\n        else:\n            bb.append(b[i])\n    bb.sort(reverse=True)\n    aa.sort(reverse=True)\n    k = min(len(aa), len(bb))\n    ans = 0\n    if n % 2 == 0 and n // 2 == k:\n        for i in range(k - 1):\n            ans += 2 * (aa[i] + bb[i])\n        ans += 2 * max(aa[-1], bb[-1])\n        ans += min(aa[-1], bb[-1])\n    else:\n        for i in range(k):\n            ans += 2 * (aa[i] + bb[i])\n        for i in range(k, len(aa)):\n            ans += aa[i]\n        for i in range(k, len(bb)):\n            ans += bb[i]\n    print(ans)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    total_damage = 0\n    fire = [c[i] for i in range(n) if a[i] == 1]\n    fire.sort(reverse=True)\n    frost = [c[i] for i in range(n) if a[i] == 0]\n    frost.sort(reverse=True)\n    min_count = min(len(fire), len(frost))\n    total_damage = 2 * (sum(fire[:min_count]) + sum(frost[:min_count]))\n    if len(fire) < len(frost):\n        total_damage += sum(frost[min_count:])\n    elif len(fire) > len(frost):\n        total_damage += sum(fire[min_count:])\n    else:\n        min_skill = min(min(fire), min(frost))\n        total_damage -= min_skill\n    print(total_damage)", "import sys\nreadline = sys.stdin.readline\nT = int(readline())\nfor _ in range(T):\n    N = int(readline())\n    (A, B) = [list(map(int, readline().split())) for _ in range(2)]\n    (fire, flost) = [list() for _ in range(2)]\n    for i in range(N):\n        if A[i] == 0:\n            fire.append(B[i])\n        else:\n            flost.append(B[i])\n    fire.sort(reverse=True)\n    flost.sort(reverse=True)\n    if len(fire) > len(flost):\n        ans = sum(fire[:len(flost)]) * 2 + sum(flost) * 2 + sum(fire[len(flost):])\n    elif len(fire) < len(flost):\n        ans = sum(fire) * 2 + sum(flost[:len(fire)]) * 2 + sum(flost[len(fire):])\n    else:\n        ans = sum(fire) * 2 + sum(flost) * 2 - min(fire[-1], flost[-1])\n    print(ans)", "t = int(input())\na = []\nb = []\nn = []\nfor i in range(t):\n    n.append(int(input()))\n    a.append(list(map(int, input().split())))\n    b.append(list(map(int, input().split())))\nfor k in range(t):\n    zero = []\n    one = []\n    cn = n[k]\n    ca = a[k]\n    cb = b[k]\n    s = 0\n    for j in range(cn):\n        if ca[j] == 1:\n            one.append(cb[j])\n        else:\n            zero.append(cb[j])\n    if len(one) == 0 or len(zero) == 0:\n        print(sum(cb))\n    elif len(one) == len(zero):\n        mb = min(cb)\n        s += mb\n        cb.remove(mb)\n        s += sum(cb) * 2\n        print(s)\n    else:\n        nn = min(len(zero), len(one))\n        m1 = len(zero)\n        m2 = len(one)\n        if m1 > m2:\n            c = 0\n        else:\n            c = 1\n        zero.sort()\n        one.sort()\n        for item in range(nn * 2):\n            if c % 2 == 0:\n                mm = zero.pop()\n                s += mm * 2\n            else:\n                mm = one.pop()\n                s += mm * 2\n            c += 1\n        if c % 2 == 1:\n            for ii in one:\n                s += ii\n        else:\n            for jj in zero:\n                s += jj\n        print(s)", "t = int(input())\na = []\nb = []\nn = []\nfor i in range(t):\n    n.append(int(input()))\n    a.append(list(map(int, input().split())))\n    b.append(list(map(int, input().split())))\nfor k in range(t):\n    zero = []\n    one = []\n    cn = n[k]\n    ca = a[k]\n    cb = b[k]\n    s = 0\n    for j in range(cn):\n        if ca[j] == 1:\n            one.append(cb[j])\n        else:\n            zero.append(cb[j])\n    if len(one) == 0 or len(zero) == 0:\n        print(sum(cb))\n    elif len(one) == len(zero):\n        mb = min(cb)\n        s += mb\n        cb.remove(mb)\n        s += sum(cb) * 2\n        print(s)\n    else:\n        nn = min(len(zero), len(one))\n        m1 = len(zero)\n        m2 = len(one)\n        if m1 > m2:\n            c = 0\n        else:\n            c = 1\n        zero.sort()\n        one.sort()\n        for item in range(nn * 2):\n            if c % 2 == 0:\n                mm = zero.pop()\n                s += mm * 2\n            else:\n                mm = one.pop()\n                s += mm * 2\n            c += 1\n        if c % 2 == 1:\n            for ii in one:\n                s += ii\n        else:\n            for jj in zero:\n                s += jj\n        print(s)", "t = int(input())\nn = []\na = []\nb = []\nfor i in range(t):\n    n.append(int(input()))\n    row1 = input().split()\n    row2 = input().split()\n    for j in range(n[i]):\n        row1[j] = int(row1[j])\n        row2[j] = int(row2[j])\n    a.append(row1)\n    b.append(row2)\nfor i in range(t):\n    f = []\n    l = []\n    for j in range(n[i]):\n        if a[i][j] == 0:\n            f.append(b[i][j])\n        else:\n            l.append(b[i][j])\n    f = sorted(f, reverse=True)\n    l = sorted(l, reverse=True)\n    k = min(len(f), len(l))\n    x = sum(2 * l[:k] + l[k:] + 2 * f[:k] + f[k:])\n    if len(f) == len(l):\n        x -= min(b[i])\n    print(x)", "from math import isqrt\n\ndef cal(a):\n    if a == 0:\n        return 0\n    if a < 4:\n        return a\n    t = isqrt(a)\n    ans = 3 * (t - 1)\n    i = 0\n    while t ** 2 + t * i <= a:\n        i += 1\n    return ans + i\nfor jj in range(int(input())):\n    n = int(input())\n    ty = input().split()\n    dam = [int(i) for i in input().split()]\n    a = ty.count('0')\n    b = ty.count('1')\n    if a == 0 or b == 0:\n        print(sum(dam))\n    elif a == b:\n        dam.sort()\n        print(dam[0] + 2 * sum(dam[1:]))\n    else:\n        ar = []\n        br = []\n        for i in range(n):\n            if ty[i] == '0':\n                ar.append(dam[i])\n            else:\n                br.append(dam[i])\n        ar.sort()\n        br.sort()\n        if a > b:\n            print(sum(ar[:a - b]) + 2 * (sum(ar[a - b:]) + sum(br)))\n        else:\n            print(sum(br[:b - a]) + 2 * (sum(ar) + sum(br[b - a:])))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    if 1 not in a:\n        print(sum(b))\n    elif 0 not in a:\n        print(sum(b))\n    else:\n        p = []\n        q = []\n        for i in range(n):\n            if a[i] == 1:\n                q.append(b[i])\n            else:\n                p.append(b[i])\n        p = sorted(p, reverse=True)\n        q = sorted(q, reverse=True)\n        summ = 0\n        if len(p) > len(q):\n            summ += p[-1] + sum(q) * 2 + sum(p[:len(q)]) * 2 + sum(p[len(q):-1])\n        elif len(p) < len(q):\n            summ += q[-1] + sum(p) * 2 + sum(q[:len(p)]) * 2 + sum(q[len(p):-1])\n        else:\n            b.sort()\n            summ += b[0] + sum(b[1:]) * 2\n        print(summ)", "def glory_addict(n, a, b):\n    if n == 1:\n        return b[0]\n    (fire, frost) = ([], [])\n    for i in range(n):\n        if a[i] == 0:\n            fire.append(b[i])\n        else:\n            frost.append(b[i])\n    (sum_fire, sum_frost, sum_b) = (sum(fire), sum(frost), sum(b))\n    if len(fire) == 0:\n        return sum_frost\n    if len(frost) == 0:\n        return sum_fire\n    fire.sort()\n    frost.sort()\n    result = 0\n    common = min(len(fire), len(frost))\n    if len(fire) < len(frost):\n        result += sum_fire\n        for j in range(common):\n            result += frost[len(frost) - j - 1]\n        result += sum_b\n        return result\n    if len(fire) == len(frost):\n        result += 2 * sum_b - min(fire[0], frost[0])\n        return result\n    if len(fire) > len(frost):\n        result += sum_frost\n        for j in range(common):\n            result += fire[len(fire) - j - 1]\n        result += sum_b\n        return result\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(glory_addict(n, a, b))", "for i in range(int(input())):\n    a = int(input())\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    su = sum(c)\n    if 0 not in b or 1 not in b:\n        print(su)\n    else:\n        d = []\n        e = []\n        for i in range(a):\n            if b[i] == 0:\n                d.append(c[i])\n            else:\n                e.append(c[i])\n        d.sort()\n        e.sort()\n        f = len(d)\n        g = len(e)\n        if f > g:\n            print(2 * su - sum(d[:f - g]))\n        elif f < g:\n            print(2 * su - sum(e[:g - f]))\n        else:\n            print(2 * su - min(c))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    if n == 1:\n        print(b[0])\n    else:\n        one = []\n        zeros = []\n        for i in range(n):\n            if a[i] == 0:\n                zeros.append(b[i])\n            else:\n                one.append(b[i])\n        if not zeros:\n            print(sum(b))\n        elif not one:\n            print(sum(b))\n        else:\n            one.sort()\n            one = one[::-1]\n            zeros.sort()\n            zeros = zeros[::-1]\n            if len(one) == len(zeros):\n                print(2 * sum(one) + 2 * sum(zeros) - min(min(one), min(zeros)))\n            elif not one:\n                print(sum(zeros))\n            elif not zeros:\n                print(sum(one))\n            elif len(one) < len(zeros):\n                print(2 * sum(one) + 2 * sum(zeros[:len(one)]) + sum(zeros[len(one):]))\n            else:\n                print(2 * sum(zeros) + 2 * sum(one[:len(zeros)]) + sum(one[len(zeros):]))", "times = int(input())\nfor i in range(times):\n    length = int(input())\n    skills = list(map(int, input().split()))\n    damage = list(map(int, input().split()))\n    if 1 in skills and 0 in skills:\n        fire = skills.count(0)\n        frost = skills.count(1)\n        fireDamage = [damage[j] for j in range(len(damage)) if skills[j] == 0]\n        frostDamage = [damage[j] for j in range(len(damage)) if skills[j] == 1]\n        frostDamage.sort()\n        fireDamage.sort()\n        t = min(frost, fire)\n        s = 0\n        if fire == frost:\n            s = s - min(damage) + 2 * sum(damage)\n        else:\n            s = s + 2 * sum(fireDamage[fire - t:]) + 2 * sum(frostDamage[frost - t:]) + sum(fireDamage[:fire - t]) + sum(frostDamage[:frost - t])\n        print(s)\n    else:\n        print(sum(damage))", "def help(A, B):\n    FI = []\n    FR = []\n    for i in range(len(A)):\n        if A[i] == 0:\n            FI.append(B[i])\n        else:\n            FR.append(B[i])\n    return (sorted(FI, reverse=True), sorted(FR, reverse=True))\n\ndef solve(FI, FR):\n    ans = 0\n    i = min(len(FI), len(FR))\n    ans += 2 * (sum(FI[:i]) + sum(FR[:i]))\n    if len(FI) > len(FR):\n        ans += 2 * FI[i]\n        ans += sum(FI[i + 1:])\n    else:\n        ans += sum(FR[i:])\n    return ans\nN = int(input())\nfor _ in range(N):\n    n = int(input())\n    A = [int(x) for x in input().split(' ')]\n    B = [int(x) for x in input().split(' ')]\n    if sum(A) == 0 or sum(A) == len(A):\n        print(sum(B))\n        continue\n    (FI, FR) = help(A, B)\n    v1 = solve(FI, FR[:-1]) + FR[-1] if len(FR) > 0 else 0\n    v2 = solve(FR, FI[:-1]) + FI[-1] if len(FI) > 0 else 0\n    print(f'{max(v1, v2)}')", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    (lfr, lfi) = ([], [])\n    l1 = input().split()\n    l2 = input().split()\n    dmg = 0\n    for j in range(n):\n        if l1[j] == '1':\n            lfr.append(int(l2[j]))\n        else:\n            lfi.append(int(l2[j]))\n    if len(lfi) == 0:\n        for k in lfr:\n            dmg += k\n    elif len(lfr) == 0:\n        for k in lfi:\n            dmg += k\n    else:\n        lfi.sort()\n        lfr.sort()\n        if len(lfi) == len(lfr):\n            ld1 = min(lfi)\n            ld2 = min(lfr)\n            if ld1 > ld2:\n                dmg -= ld2\n                for k in range(int(n / 2)):\n                    dmg += 2 * (lfi[k] + lfr[k])\n            else:\n                dmg -= ld1\n                for k in range(int(n / 2)):\n                    dmg += 2 * (lfi[k] + lfr[k])\n        else:\n            a = len(lfr)\n            b = len(lfi)\n            if b > a:\n                for k1 in range(b - a):\n                    dmg += lfi[k1]\n                for k2 in range(a):\n                    dmg += 2 * (lfr[k2] + lfi[b - a + k2])\n            else:\n                for k1 in range(a - b):\n                    dmg += lfr[k1]\n                for k2 in range(b):\n                    dmg += 2 * (lfi[k2] + lfr[a - b + k2])\n    print(dmg)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    o = a.count(1)\n    z = a.count(0)\n    if o == z:\n        print(2 * sum(b) - min(b))\n        continue\n    if not o or not z:\n        print(sum(b))\n        continue\n    mx = sorted(zip(a, b), key=lambda x: x[1])\n    ans = 0\n    sign = 1 if o > z else 0\n    _min = max(o, z) - min(o, z)\n    for i in range(n):\n        if _min and mx[i][0] == sign:\n            ans += mx[i][1]\n            _min -= 1\n        else:\n            ans += 2 * mx[i][1]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    if 1 not in a or 0 not in a:\n        print(sum(b))\n    else:\n        z = []\n        o = []\n        for i in range(n):\n            if a[i] == 0:\n                z.append(b[i])\n            else:\n                o.append(b[i])\n        z.sort()\n        o.sort()\n        s = 0\n        if len(z) == len(o):\n            s = min(z[0], o[0]) + 2 * max(z[0], o[0])\n            for i in range(1, len(z)):\n                s = s + 2 * z[i] + 2 * o[i]\n            print(s)\n        elif len(z) < len(o):\n            while len(z) != 0:\n                s = s + 2 * o.pop()\n                s = s + 2 * z.pop()\n            s = s + sum(o)\n            print(s)\n        else:\n            while len(o) != 0:\n                s = s + 2 * z.pop()\n                s = s + 2 * o.pop()\n            s = s + sum(z)\n            print(s)", "import collections\n\ndef max_uron(a, b, n):\n    if len(a) == 1:\n        print(b[0])\n    elif len(set(a)) == 1:\n        print(sum(b))\n    else:\n        c = collections.Counter(a)\n        res = 0\n        b_maxc = [0 for _ in range(n)]\n        mincount = 0 if c[1] > c[0] else 1\n        if c[0] == c[1]:\n            m = min(b)\n            res = 2 * sum(b) - m\n        elif c[1] > c[0] or c[1] < c[0]:\n            for i in range(n):\n                if a[i] == mincount:\n                    res += 2 * b[i]\n                else:\n                    b_maxc[i] = b[i]\n            b_maxc.sort(reverse=True)\n            for i in range(c[mincount]):\n                res += 2 * b_maxc[i]\n            res += sum(b_maxc[c[mincount]:])\n        print(res)\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    max_uron(a, b, n)", "def A():\n    inp = int(input())\n    for _ in range(inp):\n        n = int(input())\n        a = [int(x) for x in input().split(' ')]\n        b = [int(y) for y in input().split(' ')]\n        fire = []\n        frost = []\n        for i in range(len(a)):\n            if a[i] == 0:\n                fire.append(b[i])\n            else:\n                frost.append(b[i])\n        fire.sort()\n        frost.sort()\n        if len(fire) == 0:\n            print(sum(frost))\n            continue\n        if len(frost) == 0:\n            print(sum(fire))\n            continue\n        ans = 0\n        if len(fire) > len(frost):\n            ans += 2 * sum(frost)\n            ans += 2 * sum(fire[-len(frost):])\n            ans += sum(fire[:-len(frost)])\n        elif len(fire) < len(frost):\n            ans += 2 * sum(fire)\n            ans += 2 * sum(frost[-len(fire):])\n            ans += sum(frost[:-len(fire)])\n        elif len(fire) == len(frost):\n            ans += 2 * sum(fire)\n            ans += 2 * sum(frost)\n            ans -= fire[0] if fire[0] <= frost[0] else frost[0]\n        print(ans)\nA()", "I = input\nfor _ in [0] * int(I()):\n    I()\n    c = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        c[x > '0'] += (int(y),)\n    (a, b) = sorted(c, key=len)\n    l = len(a)\n    c = sorted(b)[::-1][:l]\n    print(sum(a * 2 + b + c) - (l == len(b)) * min(a + b))", "def func(skill, demage):\n    fire = []\n    frost = []\n    for i in range(len(demage)):\n        if skill[i] == 0:\n            fire.append(demage[i])\n        else:\n            frost.append(demage[i])\n    demage.sort()\n    fire.sort(reverse=True)\n    frost.sort(reverse=True)\n    if len(fire) == 0 or len(frost) == 0:\n        return sum(demage)\n    elif len(fire) == len(frost):\n        return 2 * sum(demage) - demage[0]\n    elif len(fire) > len(frost):\n        return 2 * sum(frost) + 2 * sum(fire[:len(frost)]) + sum(fire[len(frost):])\n    elif len(fire) < len(frost):\n        return 2 * sum(fire) + 2 * sum(frost[:len(fire)]) + sum(frost[len(fire):])\nnum_test = int(input())\nfor test in range(num_test):\n    n = input()\n    skill = [int(x) for x in input().split(' ')]\n    demage = [int(x) for x in input().split(' ')]\n    print(func(skill, demage))", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    list1 = [int(num) for num in input().split()]\n    list2 = [int(num) for num in input().split()]\n    zeros = []\n    ones = []\n    zl = 0\n    ol = 0\n    c = 0\n    for i in range(0, n):\n        if list1[i] == 0:\n            zeros.append(list2[i])\n            zl += 1\n        else:\n            ones.append(list2[i])\n            ol += 1\n    zeros.sort(reverse=True)\n    ones.sort(reverse=True)\n    if zl == 0:\n        print(sum(ones))\n    elif ol == 0:\n        print(sum(zeros))\n    else:\n        if zl == ol:\n            if ones[ol - 1] <= zeros[ol - 1]:\n                c += ones[ol - 1]\n                c += zeros[0] * 2\n                for i in range(0, ol - 1):\n                    c += ones[i] * 2\n                    c += zeros[i + 1] * 2\n            else:\n                c += zeros[ol - 1]\n                c += ones[0] * 2\n                for i in range(0, ol - 1):\n                    c += zeros[i] * 2\n                    c += ones[i + 1] * 2\n        else:\n            if zl < ol:\n                minl = zl\n                maxl = ol\n                mina = zeros\n                maxa = ones\n            else:\n                minl = ol\n                maxl = zl\n                mina = ones\n                maxa = zeros\n            c += maxa[maxl - 1]\n            j = 0\n            for i in range(0, minl):\n                c += mina[i] * 2\n                c += maxa[i] * 2\n                j += 1\n            i = j\n            for i in range(j, maxl - 1):\n                c += maxa[i]\n        print(c)", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    zr = []\n    on = []\n    cz = 0\n    co = 0\n    for i in range(n):\n        if a[i] == 0:\n            cz += 1\n            zr.append(b[i])\n        else:\n            co += 1\n            on.append(b[i])\n    if cz == 0:\n        print(sum(on))\n    elif co == 0:\n        print(sum(zr))\n    else:\n        zr.sort()\n        on.sort()\n        if cz == co:\n            if zr[0] < on[0]:\n                sm = 0\n                sm += zr[0]\n                sm += 2 * (sum(zr[1:]) + sum(on))\n                print(sm)\n            else:\n                sm = 0\n                sm += on[0]\n                sm += 2 * (sum(zr) + sum(on[1:]))\n                print(sm)\n        else:\n            sm = 0\n            while len(zr) and len(on):\n                sm += zr.pop()\n                sm += on.pop()\n            sm *= 2\n            while len(zr):\n                sm += zr.pop()\n            while len(on):\n                sm += on.pop()\n            print(sm)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(ii) for ii in input().split()]\n    b = [int(ii) for ii in input().split()]\n    (x, y) = ([], [])\n    for j in range(n):\n        if a[j] == 0:\n            x.append(b[j])\n        else:\n            y.append(b[j])\n    (lx, ly) = (len(x), len(y))\n    if lx == 0 or ly == 0:\n        print(sum(b))\n        continue\n    x.sort(reverse=True)\n    y.sort(reverse=True)\n    if lx == ly:\n        m = min(x[-1], y[-1])\n        print(2 * sum(b) - m)\n    elif lx < ly:\n        print(2 * sum(x[:lx]) + 2 * sum(y[:lx]) + sum(y[lx:]))\n    else:\n        print(2 * sum(x[:ly]) + 2 * sum(y[:ly]) + sum(x[ly:]))", "from collections import deque\n\ndef foo(n, a, b):\n    l1 = []\n    l2 = []\n    for i in range(n):\n        if a[i] == 0:\n            l1.append(b[i])\n        else:\n            l2.append(b[i])\n    l1.sort()\n    l2.sort()\n    ans = 0\n    while l1 and l2:\n        ans += 2 * (l1.pop() + l2.pop())\n    if l1:\n        ans += sum(l1)\n    elif l2:\n        ans += sum(l2)\n    else:\n        ans -= min(b)\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    print(foo(n, a, b))", "a = int(input())\nfor y in range(a):\n    b = int(input())\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    j = []\n    h = []\n    for z in range(b):\n        if c[z] == 0:\n            j.append(d[z])\n        else:\n            h.append(d[z])\n    if h == [] or j == []:\n        if h == []:\n            print(sum(j))\n        else:\n            print(sum(h))\n    else:\n        h.sort()\n        j.sort()\n        k = len(h)\n        l = len(j)\n        if k == l:\n            s = sum(h) + sum(j)\n            print(max(2 * s - h[0], 2 * s - j[0]))\n        elif k < l:\n            print(2 * (sum(h) + sum(j[l - k:])) + sum(j[:l - k]))\n        else:\n            print(2 * (sum(j) + sum(h[k - l:])) + sum(h[:k - l]))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    fire = []\n    frost = []\n    for (x, y) in zip(a, b):\n        if x == 0:\n            fire.append(y)\n        else:\n            frost.append(y)\n    fire.sort()\n    frost.sort()\n    fire_len = len(fire)\n    frost_len = len(frost)\n    ans = 0\n    if fire_len == frost_len:\n        ans -= min(fire[0], frost[0])\n    while fire and frost:\n        ans += (fire.pop() + frost.pop()) * 2\n    for x in fire:\n        ans += x\n    for x in frost:\n        ans += x\n    print(ans)\n    t -= 1", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "for i in range(int(input())):\n    n = int(input())\n    f_s = list(map(int, input().split()))\n    value_list = list(map(int, input().split()))\n    fire = []\n    frost = []\n    for i in range(n):\n        if f_s[i] == 1:\n            fire.append(value_list[i])\n        else:\n            frost.append(value_list[i])\n    fire_len = len(fire)\n    frost_len = len(frost)\n    if fire_len < 1 or frost_len < 1:\n        print(sum(fire) + sum(frost))\n    else:\n        dif = abs(fire_len - frost_len)\n        if fire_len > frost_len:\n            fire = sorted(fire)\n            ans = 2 * sum(frost) + 2 * sum(fire[-frost_len:]) + sum(fire[:dif])\n        elif fire_len < frost_len:\n            frost = sorted(frost)\n            ans = 2 * sum(fire) + 2 * sum(frost[-fire_len:]) + sum(frost[:dif])\n        else:\n            ans = 2 * sum(fire) + 2 * sum(frost) - min(value_list)\n        print(ans)", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "t = int(input())\n\ndef make_list(first, c) -> int:\n    ans = 0\n    c = c[:]\n    for i in range(len(c) - 1, -1, -1):\n        if c[i][1] == first:\n            ans += c[i][0]\n            c.pop(i)\n            break\n    cnt = [0, 0]\n    cnt[first] = 1\n    for (y, x) in c:\n        cnt[x] += 1\n    for (y, x) in c:\n        if cnt[1 - x]:\n            ans += 2 * y\n            cnt[1 - x] -= 1\n        else:\n            ans += y\n    return ans\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = [(b[i], a[i]) for i in range(n)]\n    d.sort(reverse=True)\n    if sum(a) == n or sum(a) == 0:\n        print(sum(b))\n    else:\n        print(max(make_list(0, d), make_list(1, d)))", "t = int(input())\nfor _ in range(t):\n    r = int(input())\n    c = []\n    d = []\n    e = []\n    f = []\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(r):\n        if a[i] == 0:\n            c.append(b[i])\n            e.append(b[i])\n        else:\n            d.append(b[i])\n            f.append(b[i])\n    c.sort()\n    d.sort()\n    e.sort()\n    f.sort()\n    if len(d) == 0:\n        x = sum(c)\n        print(x)\n        continue\n    if len(c) == 0:\n        x = sum(d)\n        print(x)\n        continue\n    x = c[0] + 2 * d[-1]\n    y = f[0] + 2 * e[-1]\n    c.pop(0)\n    d.pop(-1)\n    f.pop(0)\n    e.pop(-1)\n    c.reverse()\n    d.reverse()\n    e.reverse()\n    f.reverse()\n    while c != [] and d != []:\n        x += 2 * d[0] + 2 * c[0]\n        c.pop(0)\n        d.pop(0)\n    if c == []:\n        if len(d) > 0:\n            x += sum(d)\n    elif len(c) > 0:\n        x += sum(c) + c[0]\n    while e != [] and f != []:\n        y += 2 * e[0] + 2 * f[0]\n        e.pop(0)\n        f.pop(0)\n    if e == []:\n        if len(f) > 0:\n            y += sum(f) + f[0]\n    elif len(e) > 0:\n        y += sum(e)\n    print(max(x, y))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "def solve():\n    input()\n    skills = [int(x) for x in input().split()]\n    damages = [int(x) for x in input().split()]\n    fire = []\n    frost = []\n    for (skill, damage) in zip(skills, damages):\n        if skill == 0:\n            fire.append(damage)\n        else:\n            frost.append(damage)\n    fire.sort()\n    frost.sort()\n    full_damages = fire + frost\n    lfi = len(fire)\n    lfr = len(frost)\n    if lfi == lfr:\n        print(sum(full_damages) * 2 - min(full_damages))\n    else:\n        s = 0\n        for _ in range(min(lfi, lfr)):\n            s += (fire.pop() + frost.pop()) * 2\n        s += sum(fire) + sum(frost)\n        print(s)\nfor _ in range(int(input())):\n    solve()", "test = int(input())\nfor t in range(test):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    fire = list()\n    frost = list()\n    fire_num = 0\n    frost_num = 0\n    for i in range(n):\n        if a[i] == 0:\n            fire.append(b[i])\n            fire_num += 1\n        else:\n            frost.append(b[i])\n            frost_num += 1\n    fire.sort()\n    frost.sort()\n    if fire_num == 0:\n        score = sum(frost)\n    elif frost_num == 0:\n        score = sum(fire)\n    elif frost_num > fire_num:\n        score = frost.pop(0)\n        frost_num -= 1\n        score += sum(fire) * 2 + sum(frost[-fire_num:]) * 2 + sum(frost[:frost_num - fire_num])\n    elif frost_num < fire_num:\n        score = fire.pop(0)\n        fire_num -= 1\n        score += sum(frost) * 2 + sum(fire[-frost_num:]) * 2 + sum(fire[:fire_num - frost_num])\n    else:\n        if fire[0] < frost[0]:\n            score = fire.pop(0)\n        else:\n            score = frost.pop(0)\n        score += sum(frost) * 2 + sum(fire) * 2\n    print(score)", "k = int(input())\nfor i in range(k):\n    m = int(input())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    if min(x) == max(x):\n        print(sum(y))\n        continue\n    zeros = []\n    ones = []\n    for (m, n) in zip(x, y):\n        if m == 0:\n            zeros.append(n)\n        else:\n            ones.append(n)\n    res = 0\n    if len(ones) == len(zeros):\n        res += 2 * sum(ones)\n        res += 2 * sum(zeros)\n        res -= min(min(zeros), min(ones))\n        print(res)\n        continue\n    zeros.sort(reverse=True)\n    ones.sort(reverse=True)\n    if len(zeros) > len(ones):\n        (ones, zeros) = (zeros, ones)\n    if len(ones) > len(zeros):\n        for i in range(len(zeros)):\n            res += 2 * zeros[0]\n            zeros.pop(0)\n            res += 2 * ones[0]\n            ones.pop(0)\n        res += sum(ones)\n    print(res)", "for asdasdas in range(int(input())):\n    n = int(input())\n    items_a = [int(i) for i in input().split()]\n    items_dict = {0: [], 1: []}\n    for (index, elem) in enumerate(input().split()):\n        items_dict[items_a[index]].append(int(elem))\n    items_dict[0].sort()\n    items_dict[1].sort()\n    c = 0\n    if len(items_dict[1]) == 0:\n        print(sum(items_dict[0]))\n    elif len(items_dict[0]) == 0:\n        print(sum(items_dict[1]))\n    elif len(items_dict[1]) == len(items_dict[0]):\n        min_0 = items_dict[0][0]\n        min_1 = items_dict[1][0]\n        if min_0 < min_1:\n            c = items_dict[0].pop(0)\n        else:\n            c = items_dict[1].pop(0)\n        print(c + 2 * sum(items_dict[0] + items_dict[1]))\n    elif len(items_dict[1]) > len(items_dict[0]):\n        c = sum(items_dict[0]) * 2 + sum(items_dict[1][-len(items_dict[0]):]) * 2 + sum(items_dict[1][:-len(items_dict[0])])\n        print(c)\n    else:\n        c = sum(items_dict[1]) * 2 + sum(items_dict[0][-len(items_dict[1]):]) * 2 + sum(items_dict[0][:-len(items_dict[1])])\n        print(c)", "I = input\nm = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = m(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + m(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "for i in range(int(input())):\n    n = int(input())\n    f_s = list(map(int, input().split()))\n    value_list = list(map(int, input().split()))\n    fire = []\n    frost = []\n    for i in range(n):\n        if f_s[i] == 1:\n            fire.append(value_list[i])\n        else:\n            frost.append(value_list[i])\n    fire_len = len(fire)\n    frost_len = len(frost)\n    if fire_len < 1 or frost_len < 1:\n        print(sum(fire) + sum(frost))\n    else:\n        dif = abs(fire_len - frost_len)\n        if fire_len > frost_len:\n            fire = sorted(fire)\n            ans = 2 * sum(frost) + 2 * sum(fire[-frost_len:]) + sum(fire[:dif])\n        elif fire_len < frost_len:\n            frost = sorted(frost)\n            ans = 2 * sum(fire) + 2 * sum(frost[-fire_len:]) + sum(frost[:dif])\n        else:\n            ans = 2 * sum(fire) + 2 * sum(frost) - min(value_list)\n        print(ans)", "import math\nimport sys\n\ndef solve():\n    n = int(input())\n    ind = [int(x) for x in input().split()]\n    val = [int(x) for x in input().split()]\n    zeros = []\n    ones = []\n    for i in range(n):\n        if ind[i] == 0:\n            zeros.append(val[i])\n        else:\n            ones.append(val[i])\n    zeros.sort()\n    ones.sort()\n    re = 0\n    if len(zeros) == len(ones):\n        if zeros[0] >= ones[0]:\n            re = ones[0]\n            ones[0] = 0\n        else:\n            re = zeros[0]\n            zeros[0] = 0\n        ans = sum(zeros) * 2 + sum(ones) * 2 + re\n        print(ans)\n    elif len(zeros) > len(ones):\n        print(cal(ones, zeros))\n    else:\n        print(cal(zeros, ones))\n\ndef cal(arr1, arr2):\n    ans = sum(arr1) * 2 + sum(arr2[len(arr2) - len(arr1):]) * 2 + sum(arr2[:len(arr2) - len(arr1)])\n    return ans\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    arrA = list(map(int, input().split()))\n    arrB = list(map(int, input().split()))\n    frost = []\n    fire = []\n    for i in range(n):\n        if arrA[i] == 0:\n            fire.append(arrB[i])\n        else:\n            frost.append(arrB[i])\n    fire.sort()\n    frost.sort()\n    res = 0\n    if len(fire) == 0:\n        res = sum(frost)\n    elif len(frost) == 0:\n        res = sum(fire)\n    else:\n        rr = len(fire) - 1\n        rf = len(frost) - 1\n        if rf == rr:\n            while rr >= 1 and rf >= 1:\n                res += 2 * fire[rr] + 2 * frost[rf]\n                rr -= 1\n                rf -= 1\n            if fire[rr] > frost[rf]:\n                res += 2 * fire[rr] + frost[rf]\n            else:\n                res += 2 * frost[rf] + fire[rr]\n        else:\n            while rr >= 0 and rf >= 0:\n                res += 2 * fire[rr] + 2 * frost[rf]\n                rr -= 1\n                rf -= 1\n            if rr == -1:\n                for i in range(0, rf + 1):\n                    res += frost[i]\n            else:\n                for i in range(0, rr + 1):\n                    res += fire[i]\n    print(res)\n    t -= 1", "I = input\nfor _ in [0] * int(I()):\n    I()\n    c = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        c[x > '0'] += (int(y),)\n    (a, b) = sorted(c, key=len)\n    l = len(a)\n    c = sorted(b)[::-1][:l]\n    print(sum(a * 2 + b + c) - (l == len(b)) * min(a + b))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    x = []\n    y = []\n    for i in range(n):\n        if a[i] == 0:\n            x.append(b[i])\n        else:\n            y.append(b[i])\n    x.sort(reverse=True)\n    y.sort(reverse=True)\n    ff = 0\n    b.sort()\n    if len(x) == 0:\n        print(sum(y))\n        continue\n    elif len(y) == 0:\n        print(sum(x))\n        continue\n    if len(x) < len(y):\n        for i in range(len(x)):\n            ff += 2 * x[i]\n            ff += 2 * y[i]\n        ff += sum(y[len(x):])\n        print(ff)\n    elif len(y) < len(x):\n        for i in range(len(y)):\n            ff += 2 * x[i]\n            ff += 2 * y[i]\n        ff += sum(x[len(y):])\n        print(ff)\n    else:\n        print(2 * sum(b) - b[0])", "I = input\nfor _ in [0] * int(I()):\n    I()\n    c = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        c[x > '0'] += (int(y),)\n    (a, b) = sorted(c, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + sorted(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "H = input\nfor _ in [0] * int(H()):\n    H()\n    r = [[], []]\n    for (x, y) in zip(H()[::2], H().split()):\n        r[x > '0'] += (int(y),)\n    (p, q) = sorted(r, key=len)\n    l = len(p)\n    r = sorted(q)[::-1][:l]\n    print(sum(p * 2 + q + r) - (l == len(q)) * min(p + q))", "H = input\nfor _ in [0] * int(H()):\n    H()\n    r = [[], []]\n    for (x, y) in zip(H()[::2], H().split()):\n        r[x > '0'] += (int(y),)\n    (p, q) = sorted(r, key=len)\n    l = len(p)\n    r = sorted(q)[::-1][:l]\n    print(sum(p * 2 + q + r) - (l == len(q)) * min(p + q))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "n = int(input())\nfor y in range(n):\n    number = int(input())\n    types = input().split()\n    array = input().split()\n    fire = []\n    frost = []\n    for x in range(number):\n        if types[x] == '0':\n            fire.append(int(array[x]))\n        else:\n            frost.append(int(array[x]))\n    fire.sort(reverse=True)\n    frost.sort(reverse=True)\n    total = 0\n    if len(fire) < len(frost):\n        total += 2 * sum(fire)\n        total += 2 * sum(frost[:len(fire)])\n        total += sum(frost[len(fire):])\n        print(total)\n    elif len(fire) == len(frost):\n        if min(fire) < min(frost):\n            total += min(fire)\n            total += 2 * sum(fire[:len(fire) - 1]) + 2 * sum(frost)\n        else:\n            total += min(frost)\n            total += 2 * sum(frost[:len(frost) - 1]) + 2 * sum(fire)\n        print(total)\n    else:\n        total += 2 * sum(frost)\n        total += 2 * sum(fire[:len(frost)])\n        total += sum(fire[len(frost):])\n        print(total)", "n = int(input())\nfor i in range(n):\n    m = int(input())\n    v1 = list(map(int, input().split()))\n    v2 = list(map(int, input().split()))\n    v3 = []\n    v4 = []\n    p = 0\n    q = 0\n    for j in range(m):\n        if v1[j] == 1:\n            v3.append(v2[j])\n            p += 1\n            q += v2[j]\n        else:\n            v4.append(v2[j])\n            q += v2[j]\n    if p == 0 or p == m:\n        print(q)\n    elif p == m - p:\n        v3.sort()\n        v4.sort()\n        q *= 2\n        if v3[0] > v4[0]:\n            print(q - v4[0])\n        else:\n            print(q - v3[0])\n    elif p > m - p:\n        v3.sort()\n        b = 0\n        for j in range(2 * p - m):\n            b += v3[j]\n        for j in range(2 * p - m, p):\n            b += 2 * v3[j]\n        for j in range(m - p):\n            b += 2 * v4[j]\n        print(b)\n    else:\n        v4.sort()\n        b = 0\n        for j in range(m - 2 * p):\n            b += v4[j]\n        for j in range(m - 2 * p, m - p):\n            b += 2 * v4[j]\n        for j in range(p):\n            b += 2 * v3[j]\n        print(b)", "test_cases = int(input())\nfor t in range(test_cases):\n    n = int(input())\n    damage_fires = []\n    damage_frost = []\n    skills = [int(x) for x in input().split(' ')]\n    counter = 0\n    for x in input().split(' '):\n        if skills[counter] == 0:\n            damage_frost.append(int(x))\n        else:\n            damage_fires.append(int(x))\n        counter += 1\n    damage_frost.sort()\n    damage_fires.sort()\n    max_dmg = sum(damage_fires) + sum(damage_frost)\n    sum_ = sum(skills)\n    if sum_ == 0 or sum_ == n:\n        print(max_dmg)\n    elif sum_ == n / 2:\n        max_dmg += max_dmg - min(min(damage_fires), min(damage_frost))\n        print(max_dmg)\n    elif sum_ > n / 2:\n        max_dmg += sum(damage_frost)\n        max_dmg += sum(damage_fires[-len(damage_frost):])\n        print(max_dmg)\n    else:\n        max_dmg += sum(damage_fires)\n        max_dmg += sum(damage_frost[-len(damage_fires):])\n        print(max_dmg)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    a0 = []\n    a1 = []\n    dmg = 0\n    for j in range(n):\n        if a[j] == 0:\n            a0.append(d[j])\n        if a[j] == 1:\n            a1.append(d[j])\n    a0.sort()\n    a1.sort()\n    if len(a0) == 0 or len(a1) == 0:\n        if len(d) != 0:\n            dmg = sum(d)\n    elif len(a0) != len(a1):\n        if len(a1) > len(a0):\n            for x in range(len(a1)):\n                if x < len(a1) - len(a0):\n                    dmg += a1[x]\n                else:\n                    dmg += 2 * a1[x]\n            dmg += 2 * sum(a0)\n        else:\n            for x in range(len(a0)):\n                if x < len(a0) - len(a1):\n                    dmg += a0[x]\n                else:\n                    dmg += 2 * a0[x]\n            dmg += 2 * sum(a1)\n    elif len(a0) == len(a1):\n        if min(a1) < min(a0):\n            dmg += a1[0]\n            dmg += 2 * sum(a0)\n            dmg += 2 * sum(a1[1:])\n        else:\n            dmg += a0[0]\n            dmg += 2 * sum(a1)\n            dmg += 2 * sum(a0[1:])\n    print(dmg)", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "I = input\nfor _ in [0] * int(I()):\n    I()\n    c = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        c[x > '0'] += (int(y),)\n    (a, b) = sorted(c, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + sorted(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "G = input\nsrg = sorted\nfor _ in [0] * int(G()):\n    G()\n    f = [[], []]\n    for (g, h) in zip(G()[::2], G().split()):\n        f[g > '0'] += (int(h),)\n    (f, e) = srg(f, key=len)\n    l = len(f)\n    print(sum(f * 2 + e + srg(e)[::-1][:l]) - (l == len(e)) * min(f + e))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "for i in range(int(input())):\n    n = int(input())\n    f_s = list(map(int, input().split()))\n    value_list = list(map(int, input().split()))\n    fire = []\n    frost = []\n    for i in range(n):\n        if f_s[i] == 1:\n            fire.append(value_list[i])\n        else:\n            frost.append(value_list[i])\n    fire_len = len(fire)\n    frost_len = len(frost)\n    if fire_len < 1 or frost_len < 1:\n        print(sum(fire) + sum(frost))\n    else:\n        dif = abs(fire_len - frost_len)\n        fire = sorted(fire)\n        frost = sorted(frost)\n        if fire_len > frost_len:\n            ans = 2 * sum(frost) + 2 * sum(fire[-frost_len:]) + sum(fire[:dif])\n        elif fire_len < frost_len:\n            ans = 2 * sum(fire) + 2 * sum(frost[-fire_len:]) + sum(frost[:dif])\n        else:\n            ans = 2 * sum(fire) + 2 * sum(frost) - min(fire[0], frost[0])\n        print(ans)", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "for i in range(int(input())):\n    n = int(input())\n    values1 = list(map(int, input().split()))\n    values2 = list(map(int, input().split()))\n    z = []\n    o = []\n    zc = 0\n    oc = 0\n    j = 0\n    while j < n:\n        if values1[j] == 0:\n            z.append(values2[j])\n            zc += 1\n        else:\n            o.append(values2[j])\n            oc += 1\n        j += 1\n    z.sort()\n    o.sort()\n    if zc == oc:\n        if z[0] < o[0]:\n            print(2 * (sum(o) + sum(z)) - z[0])\n        else:\n            print(2 * (sum(o) + sum(z)) - o[0])\n    elif zc > oc:\n        print(sum(z[0:zc - oc]) + 2 * (sum(o) + sum(z[zc - oc:])))\n    else:\n        print(sum(o[0:oc - zc]) + 2 * (sum(z) + sum(o[oc - zc:])))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "I = input\ns = sorted\nfor _ in [0] * int(I()):\n    I()\n    a = [[], []]\n    for (x, y) in zip(I()[::2], I().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "def main():\n    t = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    fire = []\n    frost = []\n    for i in range(t):\n        if a[i]:\n            frost.append(b[i])\n        else:\n            fire.append(b[i])\n    fire.sort()\n    frost.sort()\n    n = len(fire)\n    m = t - n\n    ans = 0\n    sn = sum(fire)\n    sm = sum(frost)\n    if n == 0 or m == 0:\n        return sn + sm\n    if n > m:\n        ans += 2 * sm\n        ans += sn\n        ans += sum(fire[-m:])\n        return ans\n    elif m > n:\n        ans += 2 * sn\n        ans += sm\n        ans += sum(frost[-n:])\n        return ans\n    ans += 2 * sm\n    ans += 2 * sn\n    ans -= min(fire[0], frost[0])\n    return ans\nfor _ in range(int(input())):\n    print(main())", "for _ in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split()))\n    M = list(map(int, input().split()))\n    A = []\n    B = []\n    for i in range(n):\n        if L[i] == 0:\n            A.append(M[i])\n        else:\n            B.append(M[i])\n    A.sort(reverse=True)\n    B.sort(reverse=True)\n    a = len(A)\n    b = len(B)\n    if a == 0:\n        print(sum(B))\n        continue\n    if b == 0:\n        print(sum(A))\n        continue\n    if a < b:\n        ans = B[-1]\n        B.pop()\n        for i in range(len(A)):\n            ans += 2 * (A[i] + B[i])\n        for i in range(len(A), len(B)):\n            ans += B[i]\n    elif b < a:\n        ans = A[-1]\n        A.pop()\n        for i in range(len(B)):\n            ans += 2 * (B[i] + A[i])\n        for i in range(len(B), len(A)):\n            ans += A[i]\n    else:\n        ans = 2 * sum(M)\n        ans -= min(M)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    type = list(map(int, input().split()))\n    skill = list(map(int, input().split()))\n    ones = []\n    zeros = []\n    for i in range(n):\n        if type[i] == 0:\n            zeros.append(skill[i])\n        else:\n            ones.append(skill[i])\n    ones.sort(reverse=True)\n    zeros.sort(reverse=True)\n    if len(ones) == len(zeros):\n        t = sum(ones) * 2 + sum(zeros) * 2 - min(ones[-1], zeros[-1])\n        print(t)\n    elif len(ones) < len(zeros):\n        k = len(ones)\n        if k == 0:\n            t = sum(zeros)\n        else:\n            t = sum(ones) * 2 + sum(zeros[:k]) * 2 + sum(zeros[k:])\n        print(t)\n    else:\n        k = len(zeros)\n        if k == 0:\n            t = sum(ones)\n        else:\n            t = sum(zeros) * 2 + sum(ones[:k]) * 2 + sum(ones[k:])\n        print(t)", "arr = input\ns = sorted\nfor _ in [0] * int(arr()):\n    arr()\n    a = [[], []]\n    for (x, y) in zip(arr()[::2], arr().split()):\n        a[x > '0'] += (int(y),)\n    (a, b) = s(a, key=len)\n    l = len(a)\n    print(sum(a * 2 + b + s(b)[::-1][:l]) - (l == len(b)) * min(a + b))", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    fire = []\n    frost = []\n    for (x, y) in zip(a, b):\n        if x == 0:\n            fire.append(y)\n        else:\n            frost.append(y)\n    fire.sort()\n    frost.sort()\n    fire_len = len(fire)\n    frost_len = len(frost)\n    ans = 0\n    if fire_len == frost_len:\n        ans -= min(fire[0], frost[0])\n    while fire and frost:\n        ans += (fire.pop() + frost.pop()) * 2\n    for x in fire:\n        ans += x\n    for x in frost:\n        ans += x\n    print(ans)\n    t -= 1", "I = lambda : int(input())\nIs = lambda : map(int, input().split())\nLi = lambda : list(map(int, input().split()))\n\ndef solve():\n    n = I()\n    a = Li()\n    b = Li()\n    hashMap0 = []\n    sum1 = 0\n    hashMap1 = []\n    for i in range(n):\n        if a[i] == 1:\n            hashMap1.append(b[i])\n        else:\n            hashMap0.append(b[i])\n        sum1 += b[i] * 2\n    hashMap1.sort(reverse=True)\n    hashMap0.sort(reverse=True)\n    n0 = len(hashMap0)\n    n1 = n - n0\n    if n1 == n0:\n        min_val = min(hashMap0[-1], hashMap1[-1])\n        ans = sum1 - min_val\n    elif n1 > n0:\n        ans = sum1 - sum(hashMap1[n0:])\n    else:\n        ans = sum1 - sum(hashMap0[n1:])\n    print(ans)\n    return 1\nt = I()\nwhile t:\n    solve()\n    t -= 1"]