["import math\n\ndef shift(s) -> int:\n    for i in range(1, len(s)):\n        if s == s[i:] + s[:i]:\n            return i\n    return len(s)\n\ndef solve():\n    n = int(input())\n    s = input()\n    p = [int(x) - 1 for x in input().split()]\n    vis = [False] * n\n    ans = 1\n    for i in range(n):\n        if vis[i]:\n            continue\n        ss = ''\n        j = i\n        ss += s[j]\n        vis[j] = True\n        j = p[j]\n        while j != i:\n            ss += s[j]\n            vis[j] = True\n            j = p[j]\n        ln = shift(ss)\n        ans = ans * ln // math.gcd(ans, ln)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "from math import gcd\n\ndef solve():\n    n = int(input())\n    s = input()\n    p = list(map(int, input().split()))\n    v = [False for _ in p]\n    lcm = 1\n    for per in p:\n        if v[per - 1]:\n            continue\n        v[per - 1] = True\n        str_bef = s[per - 1]\n        pos = p[per - 1] - 1\n        while not v[pos]:\n            str_bef += s[pos]\n            v[pos] = True\n            pos = p[pos] - 1\n        str_after = str_bef\n        num = 1\n        str_after = shift_chars(str_after)\n        while str_bef != str_after:\n            str_after = shift_chars(str_after)\n            num += 1\n        lcm = lcm * num // gcd(lcm, num)\n    return lcm\n\ndef shift_chars(string):\n    return string[-1] + string[:-1]\ntt = int(input())\nfor _ in range(tt):\n    print(solve())", "from math import gcd\nI = lambda : int(input())\nIs = lambda : map(int, input().split())\nLi = lambda : list(map(int, input().split()))\n\ndef solve():\n    n = I()\n    s = input()\n    a = Li()\n    dic = {}\n    path = []\n    seen = set()\n    lst = []\n    for (index, i) in enumerate(a):\n        dic[i] = index + 1\n    for i in a:\n        if i not in seen:\n            tmp = s[i - 1]\n            cur = i\n            head = cur\n            seen.add(i)\n            while dic[cur] != head:\n                cur = dic[cur]\n                tmp += s[cur - 1]\n                seen.add(cur)\n            path.append(tmp)\n    for i in path:\n        tmp = i\n        i = i[-1] + i[:-1]\n        t = 1\n        while i != tmp:\n            i = i[-1] + i[:-1]\n            t += 1\n        lst.append(t)\n    ans = lst[0]\n    for i in lst[1:]:\n        ans = ans * i // gcd(ans, i)\n    print(ans)\n    return 1\nt = I()\nwhile t:\n    solve()\n    t -= 1", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef shift(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\n\ndef solve():\n    n = int(input())\n    s = input()\n    p = [int(x) - 1 for x in input().split()]\n    used = [False] * n\n    ans = 1\n    i = 0\n    while i < n:\n        ss = ''\n        while not used[i]:\n            ss += s[i]\n            used[i] = True\n            i = p[i]\n        i += 1\n        if len(ss) == 0:\n            continue\n        ln = shift(ss)\n        ans = ans * ln // gcd(ans, ln)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef shift(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\n\ndef solve():\n    n = int(input())\n    s = input()\n    p = [int(x) - 1 for x in input().split()]\n    used = [False] * n\n    ans = 1\n    i = 0\n    while i < n:\n        ss = ''\n        while not used[i]:\n            ss += s[i]\n            used[i] = True\n            i = p[i]\n        i += 1\n        if len(ss) == 0:\n            continue\n        ln = shift(ss)\n        ans = ans * ln // gcd(ans, ln)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef shift(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\n\ndef solve():\n    n = int(input())\n    s = input()\n    p = [int(x) - 1 for x in input().split()]\n    used = [False] * n\n    ans = 1\n    i = 0\n    while i < n:\n        ss = ''\n        while not used[i]:\n            ss += s[i]\n            used[i] = True\n            i = p[i]\n        i += 1\n        if len(ss) == 0:\n            continue\n        ln = shift(ss)\n        ans = ans * ln // gcd(ans, ln)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef shift(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\n\ndef solve():\n    n = int(input())\n    s = input()\n    p = [int(x) - 1 for x in input().split()]\n    used = [False] * n\n    ans = 1\n    i = 0\n    while i < n:\n        ss = ''\n        while not used[i]:\n            ss += s[i]\n            used[i] = True\n            i = p[i]\n        i += 1\n        if len(ss) == 0:\n            continue\n        ln = shift(ss)\n        ans = ans * ln // gcd(ans, ln)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\ninput = sys.stdin.readline\nfrom math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()[:-1]\n    w = list(map(int, input().split()))\n    d = [0] * n\n    ans = 1\n    for i in range(n):\n        if not d[i]:\n            d[i] = 1\n            a = i\n            p = s[i]\n            while 1:\n                a = w[a] - 1\n                if d[a] == 1:\n                    break\n                d[a] = 1\n                p += s[a]\n            m = p\n            c = 0\n            while 1:\n                m = m[1:] + m[0]\n                c += 1\n                if m == p:\n                    break\n            ans = ans * c // gcd(ans, c)\n    print(ans)", "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef helper(a):\n    ans = len(a)\n    for i in range(1, len(a) // 2 + 1):\n        q = len(a) // i\n        if a[:i] * q == a:\n            return i\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    arr = list(map(int, input().split()))\n    ch = []\n    seen = set()\n    res = []\n    for i in range(n):\n        temp = []\n        if i not in seen:\n            while i not in seen:\n                temp.append(s[i])\n                seen.add(i)\n                i = arr[i] - 1\n            res.append(helper(''.join(temp)))\n    start = res[0]\n    for el in res[1:]:\n        start = lcm(start, el)\n    print(start)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef shift(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\n\ndef solve():\n    n = int(input())\n    s = input()\n    p = [int(x) - 1 for x in input().split()]\n    used = [False] * n\n    ans = 1\n    i = 0\n    while i < n:\n        ss = ''\n        while not used[i]:\n            ss += s[i]\n            used[i] = True\n            i = p[i]\n        i += 1\n        if len(ss) == 0:\n            continue\n        ln = shift(ss)\n        ans = ans * ln // gcd(ans, ln)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef shift(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\n\ndef solve():\n    n = int(input())\n    s = input()\n    p = [int(x) - 1 for x in input().split()]\n    used = [False] * n\n    ans = 1\n    i = 0\n    while i < n:\n        ss = ''\n        while not used[i]:\n            ss += s[i]\n            used[i] = True\n            i = p[i]\n        i += 1\n        if len(ss) == 0:\n            continue\n        ln = shift(ss)\n        ans = ans * ln // gcd(ans, ln)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import math\nx = int(input())\n\ndef cal(n, s, arr):\n    dic = {}\n    for (i, v) in enumerate(arr):\n        dic[v] = i\n    gr = []\n    for i in range(n):\n        if i not in dic:\n            continue\n        j = i\n        p = []\n        while j in dic:\n            p.append(j)\n            a = j\n            j = dic[a]\n            del dic[a]\n        gr.append(p)\n    res = []\n    for i in gr:\n        st = ''\n        for j in i:\n            st += s[j]\n        k = len(st)\n        for j in range(1, k + 1):\n            if st[j % k:] + st[:j % k] == st:\n                res.append(j)\n                break\n    ans = 1\n    for i in res:\n        ans = ans * i // math.gcd(ans, i)\n    return ans\nfor jj in range(x):\n    n = int(input())\n    s = input()\n    arr = [int(i) - 1 for i in input().split(' ')]\n    print(cal(n, s, arr))", "def gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef shift(s):\n    for i in range(1, len(s) + 1):\n        if s[i:] + s[:i] == s:\n            return i\n\ndef sol():\n    n = int(input())\n    s = input()\n    p = [int(x) - 1 for x in input().split()]\n    i = 0\n    vis = [False] * n\n    ans = 1\n    while i < n:\n        x = i\n        st = ''\n        while not vis[x]:\n            st += s[x]\n            vis[x] = 1\n            x = p[x]\n        i += 1\n        if len(st) == 0:\n            continue\n        now = shift(st)\n        ans = lcm(ans, now)\n    print(ans)\nt = int(input())\nwhile t:\n    t -= 1\n    sol()", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef shift(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\n\ndef solve():\n    n = int(input())\n    s = input()\n    p = [int(x) - 1 for x in input().split()]\n    used = [False] * n\n    ans = 1\n    i = 0\n    while i < n:\n        ss = ''\n        while not used[i]:\n            ss += s[i]\n            used[i] = True\n            i = p[i]\n        i += 1\n        if len(ss) == 0:\n            continue\n        ln = shift(ss)\n        ans = ans * ln // gcd(ans, ln)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef shift(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\n\ndef solve():\n    n = int(input())\n    s = input()\n    p = [int(x) - 1 for x in input().split()]\n    used = [False] * n\n    ans = 1\n    i = 0\n    while i < n:\n        ss = ''\n        while not used[i]:\n            ss += s[i]\n            used[i] = True\n            i = p[i]\n        i += 1\n        if len(ss) == 0:\n            continue\n        ln = shift(ss)\n        ans = ans * ln // gcd(ans, ln)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef shift(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\n\ndef solve():\n    n = int(input())\n    s = input()\n    p = [int(x) - 1 for x in input().split()]\n    used = [False] * n\n    ans = 1\n    i = 0\n    while i < n:\n        ss = ''\n        while not used[i]:\n            ss += s[i]\n            used[i] = True\n            i = p[i]\n        i += 1\n        if len(ss) == 0:\n            continue\n        ln = shift(ss)\n        ans = ans * ln // gcd(ans, ln)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef shift(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\n\ndef solve():\n    n = int(input())\n    s = input()\n    p = [int(x) - 1 for x in input().split()]\n    used = [False] * n\n    ans = 1\n    i = 0\n    while i < n:\n        ss = ''\n        while not used[i]:\n            ss += s[i]\n            used[i] = True\n            i = p[i]\n        i += 1\n        if len(ss) == 0:\n            continue\n        ln = shift(ss)\n        ans = ans * ln // gcd(ans, ln)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef shift(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\n\ndef solve():\n    n = int(input())\n    s = input()\n    p = [int(x) - 1 for x in input().split()]\n    used = [False] * n\n    ans = 1\n    i = 0\n    while i < n:\n        ss = ''\n        while not used[i]:\n            ss += s[i]\n            used[i] = True\n            i = p[i]\n        i += 1\n        if len(ss) == 0:\n            continue\n        ln = shift(ss)\n        ans = ans * ln // gcd(ans, ln)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef shift(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\n\ndef solve():\n    n = int(input())\n    s = input()\n    p = [int(x) - 1 for x in input().split()]\n    used = [False] * n\n    ans = 1\n    i = 0\n    while i < n:\n        ss = ''\n        while not used[i]:\n            ss += s[i]\n            used[i] = True\n            i = p[i]\n        i += 1\n        if len(ss) == 0:\n            continue\n        ln = shift(ss)\n        ans = ans * ln // gcd(ans, ln)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import abc\nimport itertools\nimport math\nfrom math import gcd as gcd\nimport sys\nimport queue\nimport itertools\nfrom heapq import heappop, heappush\nimport random\n\ndef solve():\n\n    def psevdo_dfs(s, c):\n        l = ''\n        while p[c] != 0:\n            l += s[p[c] - 1]\n            tmp = c * 1\n            c = p[c] - 1\n            p[tmp] = 0\n        return l\n    n = int(input())\n    s = str(input())\n    p = list(map(int, input().split()))\n    r = []\n    for i in range(n):\n        if p[i] != 0:\n            l = psevdo_dfs(s, i)\n            w = l[-1] + l[0:len(l) - 1]\n            q = 1\n            for j in range(len(l)):\n                if w == l:\n                    break\n                else:\n                    q += 1\n                    w = w[-1] + w[0:len(w) - 1]\n            r.append(q)\n    for i in range(1, len(r)):\n        r[i] = r[i - 1] * r[i] // math.gcd(r[i - 1], r[i])\n    print(r[-1])\nmulti_test = 1\nif multi_test == 1:\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        solve()\nelse:\n    solve()", "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef helper(a):\n    ans = len(a)\n    for i in range(1, len(a) // 2 + 1):\n        q = len(a) // i\n        if a[:i] * q == a:\n            return i\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    arr = list(map(int, input().split()))\n    ch = []\n    seen = set()\n    res = []\n    for i in range(n):\n        temp = []\n        if i not in seen:\n            while i not in seen:\n                temp.append(s[i])\n                seen.add(i)\n                i = arr[i] - 1\n            res.append(helper(''.join(temp)))\n    start = res[0]\n    for el in res[1:]:\n        start = lcm(start, el)\n    print(start)", "def gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\ndef shift_length(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\n\ndef solve():\n    n = int(input())\n    s = input()\n    p = [int(x) - 1 for x in input().split()]\n    used = [False] * n\n    ans = 1\n    i = 0\n    while i < n:\n        ss = ''\n        while not used[i]:\n            ss += s[i]\n            used[i] = True\n            i = p[i]\n        i += 1\n        if len(ss) != 0:\n            ln = shift_length(ss)\n            ans = ans * ln // gcd(ans, ln)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef rotations(t):\n    for i in range(1, len(t) + 1):\n        if t == t[i:] + t[:i]:\n            return i\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    p = [int(i) - 1 for i in input().split()]\n    visited = [False] * n\n    ans = 1\n    for i in range(n):\n        if visited[i]:\n            continue\n        visited[i] = True\n        j = p[i]\n        t = s[i]\n        while j != i:\n            t += s[j]\n            visited[j] = True\n            j = p[j]\n        rotation = rotations(t)\n        ans = ans * rotation // gcd(ans, rotation)\n    print(ans)", "def findRotations(str):\n    tmp = str + str\n    n = len(str)\n    for i in range(1, n + 1):\n        substring = tmp[i:i + n]\n        if str == substring:\n            return i\n    return n\n\ndef calculate_lcm(num1, num2):\n    if num1 > num2:\n        num = num1\n        den = num2\n    else:\n        num = num2\n        den = num1\n    rem = num % den\n    while rem != 0:\n        num = den\n        den = rem\n        rem = num % den\n    gcd = den\n    lcm = int(int(num1 * num2) / int(gcd))\n    return lcm\n\ndef solve(n, s, array):\n    done = [False for i in range(n)]\n    cycles = []\n    for i in range(n):\n        if not done[i]:\n            start = i\n            newS = []\n            j = i + 1\n            while array[j - 1] - 1 != start:\n                newS += s[j - 1]\n                done[j - 1] = True\n                j = array[j - 1]\n            newS.append(s[j - 1])\n            done[j - 1] = True\n            cycles.append(''.join(newS))\n    ans = []\n    for i in cycles:\n        ans.append(findRotations(i))\n    result = ans[0]\n    for i in range(1, len(ans)):\n        result = calculate_lcm(result, ans[i])\n    return result\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    array = [int(i) for i in input().split(' ')]\n    print(solve(n, s, array))", "import math\ntc = int(input())\nfor t in range(tc):\n    n = int(input())\n    s = input()\n    arr = list(map(int, input().split()))\n    num = []\n    vis = set()\n    ans = 1\n    for i in range(n):\n        if i not in vis:\n            j = arr[i] - 1\n            vis.add(i)\n            coun = 0\n            ch = s[i]\n            while j != i:\n                vis.add(j)\n                ch = ch + s[j]\n                j = arr[j] - 1\n            l = ch\n            while 1:\n                l = l[1:] + l[0]\n                coun = coun + 1\n                if l == ch:\n                    break\n            ans = ans * coun // math.gcd(ans, coun)\n    print(ans)", "import math\nimport sys\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    s = input().strip()\n    ll = list(map(int, input().split()))\n    gr = dd(set)\n    for i in range(n):\n        ll[i] -= 1\n    vis = [0] * n\n    lt = []\n    for i in range(n):\n        if vis[i] == 0:\n            ss = s[i]\n            j = ll[i]\n            vis[i] = 1\n            while vis[j] != 1:\n                ss += s[j]\n                vis[j] = 1\n                j = ll[j]\n            lt.append(ss)\n    nt = []\n    for each in lt:\n        here = each[1:] + each[0]\n        go = 1\n        while each != here:\n            here = here[1:] + here[0]\n            go += 1\n        nt.append(go)\n    ans = nt[0]\n    for it in nt[1:]:\n        ans = ans * it // math.gcd(ans, it)\n    print(ans)", "from sys import stdin\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor test in range(int(input())):\n    n = int(input())\n    string = input().strip()\n    seq = [0] + list(map(int, input().split()))\n    check = [0] + [1] * n\n    l = 1\n    for i in range(1, n + 1):\n        if check[i]:\n            cycle = [i, seq[i]]\n            check[cycle[-1]] = 0\n            while cycle[-1] != i:\n                cycle.append(seq[cycle[-1]])\n                check[cycle[-1]] = 0\n            cycle.pop()\n            str_check = ''.join((string[s - 1] for s in cycle))\n            x = 1\n            while str_check[x:] + str_check[:x] != str_check:\n                x += 1\n            l = lcm(l, x)\n    print(l)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    p = [int(x) for x in input().split()]\n    num = []\n    vis = set()\n    ans = 1\n    for i in range(n):\n        if i not in vis:\n            j = p[i] - 1\n            vis.add(i)\n            count = 0\n            ch = s[i]\n            while j != i:\n                vis.add(j)\n                ch = ch + s[j]\n                j = p[j] - 1\n            l = ch\n            while l:\n                l = l[1:] + l[0]\n                count = count + 1\n                if l == ch:\n                    break\n            ans = ans * count // math.gcd(ans, count)\n    print(ans)", "import math, sys, bisect, collections\n\ndef shift(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    p = [int(x) - 1 for x in input().split()]\n    (used, ans, i) = ([False] * n, 1, 0)\n    while i < n:\n        ss = ''\n        while not used[i]:\n            ss = ss + s[i]\n            used[i] = True\n            i = p[i]\n        i += 1\n        if len(ss) == 0:\n            continue\n        ln = shift(ss)\n        ans = ans * ln // math.gcd(ln, ans)\n    print(ans)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef shift(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\n\ndef solve():\n    n = int(input())\n    s = input()\n    p = [int(x) - 1 for x in input().split()]\n    used = [False] * n\n    ans = 1\n    i = 0\n    while i < n:\n        ss = ''\n        while not used[i]:\n            ss += s[i]\n            used[i] = True\n            i = p[i]\n        i += 1\n        if len(ss) == 0:\n            continue\n        ln = shift(ss)\n        ans = ans * ln // gcd(ans, ln)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import math, sys, bisect, collections\n\ndef gcd(a, b):\n    for i in range(max(a, b), min(a, b) - 1, -1):\n        if b % i == 0 and a % i == 0:\n            return i\n    return 1\n\ndef shift(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    p = [int(x) - 1 for x in input().split()]\n    (used, ans, i) = ([False] * n, 1, 0)\n    while i < n:\n        ss = ''\n        while not used[i]:\n            ss = ss + s[i]\n            used[i] = True\n            i = p[i]\n        i += 1\n        if len(ss) == 0:\n            continue\n        ln = shift(ss)\n        ans = ans * ln // math.gcd(ln, ans)\n    print(ans)", "import math\n\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)\n\ndef repeat(string):\n    n = len(string)\n    for rot in range(n):\n        if string == string[n - 1 - rot:] + string[:n - 1 - rot]:\n            return rot + 1\nfor _ in range(int(input())):\n    (n, s, p) = (int(input()), input(), list(map(lambda x: int(x) - 1, input().split())))\n    v = [False] * n\n    cstr = []\n    for i in range(n):\n        cs = ''\n        if v[i]:\n            continue\n        while True:\n            cs += s[i]\n            (v[i], i) = (True, p[i])\n            if v[i]:\n                break\n        cstr.append(cs)\n    r = 1\n    for i in range(len(cstr)):\n        r = lcm(r, repeat(cstr[i]))\n    print(r)", "import math\nx = int(input())\nfor t in range(x):\n    k = int(input())\n    s = input()\n    arr = [int(i) - 1 for i in input().split()]\n    visited = [False] * k\n    y = []\n    for i in arr:\n        l = []\n        ss = ''\n        u = i\n        while not visited[u]:\n            ss += s[u]\n            visited[u] = True\n            u = arr[u]\n        if ss:\n            y += [ss]\n    for (ii, i) in enumerate(y):\n        ss = i\n        for j in range(len(ss)):\n            ss = ss[1:] + ss[0]\n            if ss == i:\n                y[ii] = j + 1\n                break\n    mb = 1\n    for i in y:\n        mb = i * mb // math.gcd(mb, i)\n    print(mb)", "import math\nl = lambda : map(lambda x: int(x) - 1, input().split())\n\ndef f(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\nfor t in range(int(input())):\n    n = int(input())\n    s = input()\n    p = [*l()]\n    v = [True] * n\n    (z, i) = (1, 0)\n    while i < n:\n        w = ''\n        while v[i]:\n            w += s[i]\n            v[i] = False\n            i = p[i]\n        i += 1\n        if len(w) == 0:\n            continue\n        r = f(w)\n        z *= r // math.gcd(z, r)\n    print(z)", "import math\nl = lambda : map(lambda x: int(x) - 1, input().split())\n\ndef f(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\nfor t in range(int(input())):\n    n = int(input())\n    s = input()\n    p = [*l()]\n    v = [True] * n\n    (z, i) = (1, 0)\n    while i < n:\n        w = ''\n        while v[i]:\n            w += s[i]\n            v[i] = False\n            i = p[i]\n        i += 1\n        if len(w) == 0:\n            continue\n        r = f(w)\n        z *= r // math.gcd(z, r)\n    print(z)", "import math\nl = lambda : map(lambda x: int(x) - 1, input().split())\n\ndef f(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\nfor t in range(int(input())):\n    n = int(input())\n    s = input()\n    p = [*l()]\n    v = [True] * n\n    (z, i) = (1, 0)\n    while i < n:\n        w = ''\n        while v[i]:\n            w += s[i]\n            v[i] = False\n            i = p[i]\n        i += 1\n        if len(w) == 0:\n            continue\n        r = f(w)\n        z *= r // math.gcd(z, r)\n    print(z)", "import math\nl = lambda : map(lambda x: int(x) - 1, input().split())\n\ndef f(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\nfor t in range(int(input())):\n    n = int(input())\n    s = input()\n    p = [*l()]\n    v = [True] * n\n    (z, i) = (1, 0)\n    while i < n:\n        w = ''\n        while v[i]:\n            w += s[i]\n            v[i] = False\n            i = p[i]\n        i += 1\n        if len(w) == 0:\n            continue\n        r = f(w)\n        z *= r // math.gcd(z, r)\n    print(z)", "import math\nl = lambda : map(lambda x: int(x) - 1, input().split())\n\ndef f(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\nfor t in range(int(input())):\n    n = int(input())\n    s = input()\n    p = [*l()]\n    v = [True] * n\n    (z, i) = (1, 0)\n    while i < n:\n        w = ''\n        while v[i]:\n            w += s[i]\n            v[i] = False\n            i = p[i]\n        i += 1\n        if len(w) == 0:\n            continue\n        r = f(w)\n        z *= r // math.gcd(z, r)\n    print(z)", "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef count(str):\n    cnt = 1\n    tmp = str[-1] + str[:len(str) - 1]\n    while tmp != str:\n        cnt += 1\n        tmp = tmp[-1] + tmp[:len(tmp) - 1]\n    return cnt\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    arr = list(map(int, input().split()))\n    seen = {}\n    cy = []\n    for i in range(n):\n        if i in seen:\n            continue\n        tmp = [i]\n        cur = i\n        seen[i] = 1\n        while arr[cur] - 1 != i:\n            cur = arr[cur] - 1\n            seen[cur] = 1\n            tmp.append(cur)\n        cy.append(tmp)\n    for i in range(len(cy)):\n        for j in range(len(cy[i])):\n            cy[i][j] = s[cy[i][j]]\n    for i in range(len(cy)):\n        cy[i] = ''.join(cy[i])\n    ans = 1\n    for i in range(len(cy)):\n        ans = lcm(ans, count(cy[i]))\n    print(ans)", "import math\nl = lambda : map(lambda x: int(x) - 1, input().split())\n\ndef f(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\nfor t in range(int(input())):\n    n = int(input())\n    s = input()\n    p = [*l()]\n    v = [True] * n\n    (z, i) = (1, 0)\n    while i < n:\n        w = ''\n        while v[i]:\n            w += s[i]\n            v[i] = False\n            i = p[i]\n        i += 1\n        if len(w) == 0:\n            continue\n        r = f(w)\n        z *= r // math.gcd(z, r)\n    print(z)", "import math\nl = lambda : map(lambda x: int(x) - 1, input().split())\n\ndef f(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\nfor t in range(int(input())):\n    n = int(input())\n    s = input()\n    p = [*l()]\n    v = [True] * n\n    (z, i) = (1, 0)\n    while i < n:\n        w = ''\n        while v[i]:\n            w += s[i]\n            v[i] = False\n            i = p[i]\n        i += 1\n        if len(w) == 0:\n            continue\n        r = f(w)\n        z *= r // math.gcd(z, r)\n    print(z)", "import math\nl = lambda : map(lambda x: int(x) - 1, input().split())\n\ndef f(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\nfor t in range(int(input())):\n    n = int(input())\n    s = input()\n    p = [*l()]\n    v = [True] * n\n    (z, i) = (1, 0)\n    while i < n:\n        w = ''\n        while v[i]:\n            w += s[i]\n            v[i] = False\n            i = p[i]\n        i += 1\n        if len(w) == 0:\n            continue\n        r = f(w)\n        z *= r // math.gcd(z, r)\n    print(z)", "def lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef gcd(a, b):\n    if b > a:\n        return gcd(b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    bl = [False for i in range(n)]\n    s = input()\n    l_for_gcd = []\n    perm = [int(i) - 1 for i in input().split()]\n    l = perm[0]\n    for i in range(n):\n        l = perm[i]\n        if bl[i] == False:\n            bl[i] = True\n            strpart = s[i]\n            j = perm[i]\n            while perm[j] != l:\n                bl[j] = True\n                strpart += s[j]\n                j = perm[j]\n            counter = 0\n            ns = strpart\n            for k in range(len(strpart)):\n                ns = ns[1:] + ns[0]\n                counter += 1\n                if ns == strpart:\n                    break\n            l_for_gcd.append(counter)\n    if len(l_for_gcd) == 1:\n        print(int(l_for_gcd[0]))\n    else:\n        ans = l_for_gcd[0]\n        for i in range(1, len(l_for_gcd)):\n            ans = lcm(ans, l_for_gcd[i])\n        print(int(ans))", "def solve():\n    n = int(input())\n    s = input()\n    p = list(map(int, input().split()))\n    for i in range(n):\n        p[i] -= 1\n    cycles = list()\n    visited = set()\n    for i in range(n):\n        if i in visited:\n            continue\n        ptr = i\n        visited.add(ptr)\n        chain = s[ptr]\n        while p[ptr] != i:\n            ptr = p[ptr]\n            chain += s[ptr]\n            visited.add(ptr)\n        clen = kmp(chain[1:] + chain, chain) + 1\n        cycles.append(clen)\n    out = 1\n    for n in cycles:\n        out = lcm(out, n)\n    print(out)\n\ndef pi(pat):\n    p = [0] * len(pat)\n    for i in range(1, len(pat)):\n        j = p[i - 1]\n        while j and pat[i] != pat[j]:\n            j = p[j - 1]\n        if pat[i] == pat[j]:\n            j += 1\n        p[i] = j\n    return p\n\ndef kmp(target, pattern):\n    p = pi(pattern)\n    j = 0\n    for i in range(len(target)):\n        while j and target[i] != pattern[j]:\n            j = p[j - 1]\n        if target[i] == pattern[j]:\n            j += 1\n        if j == len(pattern):\n            return i - len(pattern) + 1\n    return -1\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\nfor _ in range(int(input())):\n    solve()", "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef shift(s):\n    for i in range(1, len(s) + 1):\n        if s[i:] + s[:i] == s:\n            return i\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    s = [x for x in input()]\n    p = [int(x) for x in input().split()]\n    trans = [0] * (n + 1)\n    for i in range(n):\n        trans[p[i]] = i + 1\n    res = []\n    cir = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if cir[i] != 0:\n            continue\n        flag = 0\n        x = trans[i]\n        tmp = [i]\n        string = s[i - 1]\n        while x != i:\n            tmp.append(x)\n            string += s[x - 1]\n            x = trans[x]\n        tmpans = shift(string)\n        for x in tmp:\n            cir[x] = tmpans\n    ans = cir[1]\n    for x in cir[2:]:\n        ans = lcm(ans, x)\n    print(ans)", "from sys import stdin\ninput = stdin.readline\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef f(s, a):\n    cnt = 0\n    cycles = []\n    vis = [-1] * len(a)\n    for i in range(len(a)):\n        if vis[i] == -1:\n            cur = []\n            node = i\n            while vis[node] == -1:\n                cur.append(node)\n                vis[node] = cnt\n                node = a[node]\n            cycles.append(cur)\n            cnt += 1\n    ans = 1\n    for cycle in cycles:\n        start = [s[i] for i in cycle]\n        cnt = 1\n        t = [start[-1]] + start[:len(start) - 1]\n        while t != start:\n            cnt += 1\n            t = [t[-1]] + t[:len(t) - 1]\n        ans = lcm(ans, cnt)\n    return ans\nfor _ in range(int(input())):\n    n = input()\n    s = input().strip()\n    a = list(map(lambda s: int(s) - 1, input().strip().split()))\n    print(f(s, a))", "class zAlgorithm:\n\n    def __init__(self, s):\n        self.sdat = list(map(lambda x: ord(x), s))\n        self.sl = len(s)\n        self.res = [0] * self.sl\n        self.res[0] = self.sl\n        (i, j) = (1, 0)\n        while i < self.sl:\n            while i + j < self.sl:\n                if self.sdat[j] != self.sdat[i + j]:\n                    break\n                j += 1\n            self.res[i] = j\n            if j == 0:\n                i += 1\n                continue\n            k = 1\n            while i + k < self.sl and k + self.res[k] < j:\n                self.res[i + k] = self.res[k]\n                k += 1\n            i += k\n            j -= k\n\ndef do():\n    import math\n\n    def lcm(x, y):\n        return x * y // math.gcd(x, y)\n    n = int(input())\n    s = input()\n    dat = list(map(int, input().split()))\n    for i in range(len(dat)):\n        dat[i] -= 1\n    visited = [False] * n\n    cycles = []\n    ans = 1\n    for i in range(n):\n        if visited[i]:\n            continue\n        route = []\n        cur = i\n        while visited[cur] is False:\n            visited[cur] = True\n            route.append(s[cur])\n            cur = dat[cur]\n        instr = ''.join(route * 2)\n        zres = zAlgorithm(instr)\n        ind = 1\n        while zres.res[ind] < len(route):\n            ind += 1\n        ans = lcm(ans, ind)\n    print(ans)\nq = int(input())\nfor _ in range(q):\n    do()", "import string\ns0 = string.ascii_lowercase\n\ndef gcd(x, y):\n    if x < y:\n        (x, y) = (y, x)\n    if y == 0:\n        return x\n    return gcd(y, x % y)\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    p = list(map(int, input().split()))\n    res = []\n    flag = [False] * n\n    for i in range(n):\n        if flag[i]:\n            continue\n        flag[i] = True\n        cur = p[i] - 1\n        curs = s[i]\n        while cur != i:\n            curs += s[cur]\n            cur = p[cur] - 1\n            flag[cur] = True\n        prev = str(curs)\n        cur_res = 1\n        curs = curs[-1] + curs[0:len(curs) - 1]\n        while prev != curs:\n            curs = curs[-1] + curs[0:len(curs) - 1]\n            cur_res += 1\n        res.append(cur_res)\n    result = 1\n    for i in range(len(res)):\n        result = lcm(result, res[i])\n    print(result)"]