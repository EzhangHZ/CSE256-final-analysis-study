["for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    a = [c - x for c in a]\n    begin = True\n    unchosen = 0\n    sum = 0\n    for i in range(n):\n        if begin:\n            sum = a[i]\n            begin = False\n        else:\n            sum += a[i]\n            if sum < 0:\n                begin = True\n                unchosen += 1\n            else:\n                sum = min(sum, a[i])\n    print(n - unchosen)", "D = input\nC = int\nfor H in range(C(D())):\n    I = C(D())\n    B = list(map(C, D().split()))\n    G = C(D())\n    B = [A - G for A in B]\n    A = 10 ** 18\n    E = 0\n    for F in B:\n        A += F\n        if A < 0:\n            A = 10 ** 18\n        else:\n            E += 1\n            A = min(A, F)\n    print(E)", "import sys\ninput = sys.stdin.readline\n\ndef ri():\n    return int(input())\n\ndef rf():\n    return list(map(float, input().split()))\n\ndef rl():\n    return list(map(int, input().split()))\n\ndef rs():\n    return input().rstrip()\n\ndef out_list(x):\n    return ' '.join(map(str, x))\n\ndef solve_case():\n    n = ri()\n    A = rl()\n    x = ri()\n    res = 0\n    j = 0\n    for i in range(n):\n        ok = True\n        if i - j >= 1 and A[i - 1] + A[i] < 2 * x:\n            ok = False\n        if i - j >= 2 and A[i - 2] + A[i - 1] + A[i] < 3 * x:\n            ok = False\n        if not ok:\n            res += 1\n            j = i + 1\n    print(n - res)\nT = ri()\nfor ti in range(1, T + 1):\n    solve_case()", "epsilon = 10 ** (-6)\nt = int(input())\nfor k in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    x = int(input())\n    l = [a - x for a in l]\n    s = 0\n    not_choose = 0\n    new_subseg = False\n    for i in range(n):\n        if not new_subseg:\n            s = l[i]\n            new_subseg = True\n        else:\n            s += l[i]\n            if s < 0:\n                not_choose += 1\n                new_subseg = False\n            else:\n                s = min(s, l[i])\n    print(n - not_choose)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    ans = 0\n    Sum = 2e+18\n    for i in a:\n        Sum += i - x\n        if Sum < 0:\n            Sum = 2e+18\n        else:\n            Sum = min(Sum, i - x)\n            ans += 1\n    print(ans)", "def solver():\n    n = int(input())\n    for _ in range(n):\n        len_input = int(input())\n        (*array,) = map(int, input().split())\n        x = int(input())\n        incriminated = set()\n        for i in range(1, len_input):\n            if i == 1:\n                if array[i - 1] + array[i] < x * 2:\n                    incriminated.add(i)\n            elif i - 2 in incriminated:\n                if i - 1 in incriminated:\n                    continue\n                elif array[i - 1] + array[i] < 2 * x:\n                    incriminated.add(i)\n            elif not i - 1 in incriminated:\n                if array[i - 2] + array[i - 1] + array[i] < 3 * x:\n                    incriminated.add(i)\n                if array[i - 1] + array[i] < 2 * x:\n                    incriminated.add(i)\n        print(len_input - len(incriminated))\nsolver()", "from itertools import permutations as per\nfrom math import factorial as fact\nfrom difflib import SequenceMatcher\nimport bisect\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    x = int(input())\n    bi = -1\n    c = 0\n    for i in range(n):\n        if i - 1 > bi and a[i - 1] + a[i] < x * 2:\n            bi = i\n            c += 1\n            continue\n        if i - 2 > bi and sum(a[i - 2:i + 1]) < x * 3:\n            bi = i\n            c += 1\n    print(n - c)", "def Rep_Edges(n, l, x):\n    i = 0\n    while i < n:\n        l[i] = l[i] - x\n        i = i + 1\n    ans = n\n    j = -1\n    for i in range(1, n):\n        if (i - 1 > j) & (l[i] + l[i - 1] < 0):\n            ans = ans - 1\n            j = i\n        elif (i - 2 > j) & (l[i] + l[i - 1] + l[i - 2] < 0):\n            ans = ans - 1\n            j = i\n    return ans\nt = int(input())\nls = []\nln = []\nla = []\nlx = []\nfor i in range(t):\n    n = int(input())\n    s = str(input())\n    x = int(input())\n    ln.append(n)\n    ls.append(s)\n    lx.append(x)\nfor i in range(len(ls)):\n    n = ln[i]\n    s = ls[i]\n    x = lx[i]\n    l = []\n    for j in s.split(' '):\n        l.append(int(j))\n    ans = Rep_Edges(n, l, x)\n    la.append(ans)\nfor a in la:\n    print(a)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    ans = 0\n    for i in range(n):\n        a[i] -= x\n    sa = [a[0]]\n    for i in range(1, n):\n        sa.append(sa[-1] + a[i])\n    i = 1\n    l = a[0]\n    while i < n:\n        if l + a[i] < 0:\n            ans += 1\n            i += 1\n            if i < n:\n                l = a[i]\n        else:\n            l = min(a[i], l + a[i])\n        i += 1\n    print(n - ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = int(input())\n    for i in range(n):\n        l[i] -= x\n    l1 = [0]\n    m = 0\n    for i in range(n):\n        m += l[i]\n        l1.append(m)\n    high = -1000000\n    high1 = -1000000\n    h1 = -1\n    m = 0\n    cur = 0\n    for i in range(n):\n        if i - 1 >= cur:\n            if l[i] + l[i - 1] < 0:\n                cur = i + 1\n                m += 1\n        if i - 2 >= cur:\n            if l[i] + l[i - 1] + l[i - 2] < 0:\n                cur = i + 1\n                m += 1\n    print(n - m)", "tt = int(input())\nfor TC in range(tt):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    x = int(input())\n    for i in range(n):\n        a[i] -= x\n    v = []\n    for i in range(1, n):\n        if a[i] + a[i - 1] < 0:\n            v.append((i, 2))\n    for i in range(2, n):\n        if a[i] + a[i - 1] >= 0 and a[i - 1] + a[i - 2] >= 0 and (a[i] + a[i - 1] + a[i - 2] < 0):\n            v.append((i, 3))\n    v.sort()\n    if len(v) == 0:\n        print(n)\n        continue\n    deleted = 0\n    cnt = 1\n    for i in range(1, len(v)):\n        if v[i][0] - v[i][1] + 1 == v[i - 1][0]:\n            cnt += 1\n        else:\n            deleted += (cnt + 1) // 2\n            cnt = 1\n    deleted += (cnt + 1) // 2\n    print(n - deleted)"]