["import functools\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    r = functools.reduce(int.__and__, a)\n    u = [x.count('0') for x in zip(*(f'{x:031b}' for x in a))]\n    for (i, x) in enumerate(u):\n        if x <= k:\n            break\n    else:\n        print(r)\n        continue\n    for (i, x) in enumerate(u[i:], i):\n        if x <= k:\n            r |= 1 << 30 - i\n            k -= x\n    print(r)", "from operator import iand\nfrom functools import reduce\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    res = a[0]\n    plus = 0\n    u = [x.count('0') for x in zip(*(f'{x:031b}' for x in a))]\n    for i in range(len(u)):\n        if u[i] == 0:\n            continue\n        if u[i] <= k:\n            plus += 2 ** (30 - i)\n            k -= u[i]\n    res = reduce(lambda x, y: x & y, a)\n    print(res + plus)", "def buh(a):\n    p = str(bin(int(a)))[2:]\n    return (31 - len(p)) * '0' + p\n\ndef solve(L, k, pos):\n    if pos == 31:\n        return 0\n    c = 0\n    for i in L:\n        if i[pos] == '0':\n            c += 1\n    if c > k:\n        return solve(L, k, pos + 1)\n    elif c < k:\n        return 2 ** (30 - pos) + solve(L, k - c, pos + 1)\n    else:\n        return 2 ** (30 - pos) + solve(L, 0, pos + 1)\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    L = list(map(buh, input().split()))\n    print(solve(L, k, 0))", "def buh(a):\n    p = str(bin(int(a)))[2:]\n    return (31 - len(p)) * '0' + p\n\ndef solve(L, k, pos):\n    if pos == 31:\n        return 0\n    c = 0\n    for i in L:\n        if i[pos] == '0':\n            c += 1\n    if c > k:\n        return solve(L, k, pos + 1)\n    elif c < k:\n        return 2 ** (30 - pos) + solve(L, k - c, pos + 1)\n    else:\n        return 2 ** (30 - pos) + solve(L, 0, pos + 1)\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    L = list(map(buh, input().split()))\n    print(solve(L, k, 0))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    if m >= 31 * n:\n        print(sum((2 ** i for i in range(31))))\n        continue\n    kek = ar[0]\n    for x in ar:\n        kek &= x\n    res = kek\n    for i in reversed(range(31)):\n        if m == 0:\n            break\n        q = 2 ** i\n        left = sum((not x & q for x in ar))\n        if m >= left > 0:\n            res += q\n            m -= left\n    print(res)", "def task(n, k, a):\n    cache = []\n    for i in range(0, 32):\n        cache.append(0)\n    for number in a:\n        binary = '{0:031b}'.format(number)\n        for i in range(0, 31):\n            if binary[i] == '1':\n                cache[30 - i] += 1\n    total = 0\n    for i in reversed(range(0, 31)):\n        needed = n - cache[i]\n        if needed <= k:\n            k -= needed\n            total += pow(2, i)\n    print(total)\nt = int(input())\nfor i in range(0, t):\n    (n, k) = map(int, input().split())\n    a = map(int, input().split())\n    task(n, k, a)", "def solution():\n    (n, k) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    bits = [0] * 31\n    for i in range(31):\n        bits[i] = sum([j >> i & 1 == 0 for j in a])\n    ans = 0\n    for i in range(30, -1, -1):\n        if k >= bits[i]:\n            k -= bits[i]\n            ans += 1 << i\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solution()", "def str_to_bin(s):\n    b = bin(int(s))[2:]\n    return '0' * (31 - len(b)) + b\n\ndef solve():\n    (n, k) = map(int, input().split())\n    a = list(map(str_to_bin, input().split()))\n    res = 0\n    for i in range(31):\n        count = sum(map(lambda x: x[i] == '1', a))\n        if k + count >= n:\n            res += 2 ** (30 - i)\n            k -= n - count\n    print(res)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "def str_to_bin(s):\n    b = bin(int(s))[2:]\n    return '0' * (31 - len(b)) + b\n\ndef solve():\n    (n, k) = map(int, input().split())\n    a = list(map(str_to_bin, input().split()))\n    res = 0\n    for i in range(31):\n        count = sum(map(lambda x: x[i] == '1', a))\n        if k + count >= n:\n            res += 2 ** (30 - i)\n            k -= n - count\n    print(res)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for z in range(30, -1, -1):\n        c = len(list(filter(lambda x: x >> z & 1 == 0, a)))\n        if k >= c:\n            k -= c\n            ans |= 1 << z\n    print(ans)", "def solution():\n    (n, k) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    bits = [0] * 31\n    for i in range(31):\n        bits[i] = sum([j & 1 << i == 0 for j in a])\n    ans = 0\n    for i in range(30, -1, -1):\n        if k >= bits[i]:\n            k -= bits[i]\n            ans += 1 << i\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solution()", "x = int(input())\n\ndef cal(m, n, arr):\n    ans = arr[0]\n    if m > 1:\n        for i in range(1, m):\n            ans = ans & arr[i]\n    b = [1]\n    for i in range(31):\n        b.append(b[-1] * 2)\n    for i in range(30, -1, -1):\n        p = n\n        ck = -1\n        for j in range(m):\n            if arr[j] & b[i] == 0:\n                p -= 1\n        if p >= 0:\n            if p < n:\n                n = p\n                ans += b[i]\n    return ans\nfor jj in range(x):\n    (m, n) = [int(i) for i in input().split(' ')]\n    arr = [int(i) for i in input().split(' ')]\n    print(cal(m, n, arr))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mxv = 0\n    for i in range(30, -1, -1):\n        cnt = sum((x & 1 << i == 0 for x in a))\n        if cnt <= k:\n            k -= cnt\n            mxv |= 1 << i\n    print(mxv)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    numbers = list(map(int, input().split()))\n    binaries = []\n    for item in numbers:\n        u = bin(item)[2:]\n        u = '0' * (31 - len(u)) + u\n        binaries.append(u)\n    new = ''\n    for i in range(31):\n        things = []\n        for item in binaries:\n            things.append(item[i])\n        needed = things.count('0')\n        if needed <= k:\n            k -= needed\n            new += '1'\n        else:\n            new += '0'\n    print(int(new, 2))", "def inp(*, cf=lambda x: x):\n    return cf(input())\n\ndef inpint():\n    return inp(cf=int)\n\ndef inp_line(*, cf=lambda x: x, s=' '):\n    return list(map(cf, input().split(s)))\n\ndef inpints():\n    return inp_line(cf=int)\n\ndef bitwise_and(array):\n    s = array[0]\n    for i in range(1, len(array)):\n        s &= array[i]\n    return s\n\ndef set_bit(array, b):\n    for i in range(len(array)):\n        array[i] = array[i] | 1 << b\n\ndef count_free_bits(x, free_bits):\n    for b in range(31):\n        if x & 1 << b == 0:\n            free_bits[b] += 1\n\ndef test_case(case):\n    (n, k) = inpints()\n    free_bits = [0] * 31\n    array = inp_line(cf=lambda x: count_free_bits(int(x), free_bits))\n    ans = 0\n    for b in reversed(range(31)):\n        if free_bits[b] <= k:\n            ans += 1 << b\n            k -= free_bits[b]\n    return ans\n\ndef main():\n    T = inpint()\n    for t in range(1, T + 1):\n        print(test_case(t))\nmain()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mxv = 0\n    for i in range(30, -1, -1):\n        cnt = sum((x & 1 << i == 0 for x in a))\n        if cnt <= k:\n            k -= cnt\n            mxv |= 1 << i\n    print(mxv)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mxv = 0\n    for i in range(30, -1, -1):\n        cnt = sum((x & 1 << i == 0 for x in a))\n        if cnt <= k:\n            k -= cnt\n            mxv |= 1 << i\n    print(mxv)", "def inp(*, cf=lambda x: x):\n    return cf(input())\n\ndef inpint():\n    return inp(cf=int)\n\ndef inp_line(*, cf=lambda x: x, s=' '):\n    return list(map(cf, input().split(s)))\n\ndef inpints():\n    return inp_line(cf=int)\n\ndef bitwise_and2(array):\n    s = array[0]\n    for i in range(1, len(array)):\n        s &= array[i]\n    return s\n\ndef bitwise_and(array):\n    s = array[0]\n    for i in range(1, len(array)):\n        s &= array[i]\n    return s\n\ndef set_bit(array, b):\n    for i in range(len(array)):\n        array[i] = array[i] | 1 << b\n\ndef count_free_bits(x, free_bits):\n    for b in range(31):\n        if x & 1 << b == 0:\n            free_bits[b] += 1\n\ndef test_case(case):\n    (n, k) = inpints()\n    free_bits = [0] * 31\n    array = inp_line(cf=lambda x: count_free_bits(int(x), free_bits))\n    ans = 0\n    for b in reversed(range(31)):\n        if free_bits[b] <= k:\n            ans += 1 << b\n            k -= free_bits[b]\n    return ans\n\ndef main():\n    T = inpint()\n    for t in range(1, T + 1):\n        print(test_case(t))\nmain()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mxv = 0\n    for i in range(30, -1, -1):\n        cnt = sum((x & 1 << i == 0 for x in a))\n        if cnt <= k:\n            k -= cnt\n            mxv |= 1 << i\n    print(mxv)", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    cnt = [0] * 31\n    for x in a:\n        for j in range(31):\n            if x & 1 << j:\n                cnt[j] += 1\n    res = 0\n    for j in range(30, -1, -1):\n        if cnt[j] == n:\n            res |= 1 << j\n        elif k >= n - cnt[j]:\n            k -= n - cnt[j]\n            res |= 1 << j\n    print(res)\nt = int(input())\nfor _ in range(t):\n    solve()", "def resi():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    br = [0] * 31\n    for i in range(n):\n        tmp = a[i]\n        for j in range(31):\n            br[j] += tmp % 2\n            tmp = tmp >> 1\n    broj = 0\n    i = 30\n    while i >= 0:\n        if n - br[i] <= k:\n            k -= n - br[i]\n            broj += 2 ** i\n        i -= 1\n    print(broj)\nfor _ in range(int(input())):\n    resi()", "from collections import defaultdict, deque\nimport math\nfrom random import random, shuffle\nfrom sys import setrecursionlimit\nimport os, sys\ncwd = os.getcwd()\nif os.path.exists(cwd + '/test/input.txt'):\n    sys.stdin = open(cwd + '/test/input.txt', 'r')\n    sys.stdout = open(cwd + '/test/output.txt', 'w')\nsetrecursionlimit(10 ** 6)\nmi = lambda : map(int, input().split())\nli = lambda : list(mi())\n(dx, dy) = ([1, 1, -1, -1], [1, -1, 1, -1])\nlowbit = lambda x: x & -x\n\nclass BIT:\n\n    def __init__(self, n):\n        self.bit = [0] * (n + 1)\n\n    def upd(self, idx, val):\n        bit = self.bit\n        while idx <= len(bit):\n            bit[idx] += val\n            idx += lowbit(idx)\n\n    def query(self, idx):\n        res = 0\n        bit = self.bit\n        while idx > 0:\n            res += bit[idx]\n            idx -= lowbit(idx)\n        return res\n\ndef solve():\n    T = int(input())\n    while T:\n        T -= 1\n        (n, k) = mi()\n        a = li()\n        cnt = [0] * 31\n        for i in range(n):\n            t = a[i]\n            for j in range(31):\n                if t >> j & 1:\n                    cnt[j] += 1\n        res = 0\n        for i in range(30, -1, -1):\n            if k >= n - cnt[i]:\n                k -= n - cnt[i]\n                res |= 1 << i\n        print(res)\nsolve()", "bits = [2 ** i for i in range(31)]\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    strng = 0\n    for i in range(30, -1, -1):\n        count = 0\n        for a in lst:\n            if a & bits[i] == 0:\n                count += 1\n        if count <= k:\n            strng += 2 ** i\n            k -= count\n    print(strng)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nt = inp()\nfor _ in range(t):\n    (n, k) = inlt()\n    a = inlt()\n    ans = 0\n    for j in range(30, -1, -1):\n        temp = 0\n        for i in a:\n            if i & 1 << j == 0:\n                temp += 1\n        if temp <= k:\n            k -= temp\n            ans = ans | 1 << j\n    print(ans)", "def solve(nums, N, K):\n    arr = [0] * 31\n    for n in nums:\n        i = 0\n        while n:\n            if n & 1:\n                arr[i] += 1\n            n = n >> 1\n            i += 1\n    ans = 0\n    for i in range(30, -1, -1):\n        need = N - arr[i]\n        if K >= need:\n            ans += 1 << i\n            K -= need\n    return ans\nT = int(input())\nfor _ in range(T):\n    (N, K) = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    print(solve(nums, N, K))", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    lsti = []\n    for j in lst:\n        s = bin(j).replace('0b', '')\n        l = len(s)\n        s = (31 - l) * '0' + s\n        lsti.append(s)\n    dic = {}\n    for j in range(31):\n        dic[j] = 0\n    for j in range(31):\n        c = 0\n        for g in lsti:\n            if g[j] == '1':\n                c += 1\n        dic[j] = c\n    ans = []\n    ind = 0\n    while True:\n        if ind > 30:\n            break\n        else:\n            co = dic[ind]\n            req = n - co\n            if req <= k:\n                ans.append(ind)\n                k -= req\n            ind += 1\n    c = 0\n    for h in ans:\n        c += 2 ** (31 - h - 1)\n    print(c)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    temp = ['{0:032b}'.format(i) for i in a]\n    ans = ''\n    for dig in range(1, 32):\n        flag = True\n        count = 0\n        for j in temp:\n            if j[dig] == '1':\n                pass\n            else:\n                count += 1\n                flag = False\n        if count <= k:\n            ans += '1'\n            k -= count\n        else:\n            ans += '0'\n    print(int(ans, 2))", "import sys\nimport collections\nfrom math import ceil, gcd, sqrt, log\nimport bisect\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    net = [0] * 31\n    for x in A:\n        for i in range(31):\n            if x & 1 << 30 - i:\n                net[i] += 1\n    final_mask = []\n    for i in net:\n        if n - i > k:\n            final_mask.append(0)\n            continue\n        k -= n - i\n        final_mask.append(1)\n    ans = ''\n    for i in final_mask:\n        if i == 1:\n            ans += '1'\n        else:\n            ans += '0'\n    print(int(ans, 2))\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [n] * 31\n    for i in range(31):\n        mask = 1 << i\n        for v in a:\n            if v & mask != 0:\n                b[i] -= 1\n    ans = 0\n    for i in range(30, -1, -1):\n        if b[i] <= k:\n            k -= b[i]\n            b[i] = 0\n        if b[i] == 0:\n            ans += 1 << i\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    (N, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    cnt = [0] * 31\n    for n in arr:\n        s = str(bin(n))\n        s = s[:1:-1]\n        for i in range(len(s)):\n            if s[i] == '1':\n                cnt[i] += 1\n    ans = 0\n    for i in range(len(cnt) - 1, -1, -1):\n        if k >= N - cnt[i]:\n            k -= N - cnt[i]\n            ans += 1 << i\n    print(ans)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l1 = []\n    for i in l:\n        l1.append('{:032b}'.format(i))\n    arr = []\n    ind = []\n    for i in range(32):\n        arr.append(0)\n    for i in l1:\n        for j in range(32):\n            if i[j] == '1':\n                arr[j] += 1\n    for i in range(1, 32):\n        if n - arr[i] <= k:\n            k -= n - arr[i]\n            arr[i] += n - arr[i]\n    for i in range(1, 32):\n        if arr[i] == n:\n            ind.append(32 - i - 1)\n    ans = 0\n    for i in ind:\n        ans += 2 ** i\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    bineries = list(map(int, 31 * '0'))\n    for num in a:\n        b = bin(num)[2:][::-1]\n        for k1 in range(len(b)):\n            if b[k1] == '1':\n                bineries[30 - k1] += 1\n    result = '0b'\n    for j in range(31):\n        if n - bineries[j] <= k and k > 0:\n            k -= n - bineries[j]\n            result += '1'\n        else:\n            result += str(int(bineries[j] == n))\n    print(int(result, 2))", "def inp(*, cf=lambda x: x):\n    return cf(input())\n\ndef inpint():\n    return inp(cf=int)\n\ndef inp_line(*, cf=lambda x: x, s=' '):\n    return list(map(cf, input().split(s)))\n\ndef inpints():\n    return inp_line(cf=int)\n\ndef bitwise_and(array):\n    s = array[0]\n    for i in range(1, len(array)):\n        s &= array[i]\n    return s\n\ndef set_bit(array, b):\n    for i in range(len(array)):\n        array[i] = array[i] | 1 << b\n\ndef test_case(case):\n    (n, k) = inpints()\n    array = inpints()\n    free_bits = [0] * 31\n    for b in range(31):\n        for i in range(n):\n            if array[i] & 1 << b == 0:\n                free_bits[b] += 1\n    ans = 0\n    for b in reversed(range(31)):\n        if free_bits[b] <= k:\n            ans += 1 << b\n            k -= free_bits[b]\n    return ans\n\ndef main():\n    T = inpint()\n    for t in range(1, T + 1):\n        print(test_case(t))\nmain()", "import math\nfrom collections import defaultdict\nt = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    lis = list(map(int, input().split()))\n    ans = 0\n    for j in range(30, -1, -1):\n        tot = 0\n        for y in lis:\n            if y >> j & 1 == 0:\n                tot += 1\n        if tot == 0:\n            ans = ans + 2 ** j\n        elif tot <= k:\n            ans = ans + 2 ** j\n            k = k - tot\n    print(ans)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = {i: n for i in range(31)}\n    for x in a:\n        for i in range(31):\n            d[i] -= x & 1 << i != 0\n    ans = 0\n    for i in range(30, -1, -1):\n        if d[i] <= k:\n            ans += 1 << i\n            k -= d[i]\n    print(ans)\ntst = int(input())\nfor tt in range(tst):\n    solve()", "NUM_BITS = 31\nt = int(input())\nfor _ in range(t):\n    (n, k) = tuple(map(int, input().split()))\n    a = tuple(map(int, input().split()))\n    histogram = [0] * NUM_BITS\n    mask = 1\n    for i in range(NUM_BITS):\n        for num in a:\n            histogram[i] += num & mask != 0\n        mask <<= 1\n    max_and = 0\n    mask = 1 << NUM_BITS - 1\n    for i in range(NUM_BITS - 1, -1, -1):\n        if n - histogram[i] <= k:\n            k -= n - histogram[i]\n            max_and |= mask\n        mask >>= 1\n    print(max_and)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr = ['{0:031b}'.format(i) for i in arr]\n    counts = [n] * 31\n    for i in arr:\n        for j in range(31):\n            if i[j] == '1':\n                counts[j] -= 1\n    l = 0\n    while l < 31:\n        if counts[l] <= k:\n            k -= counts[l]\n            counts[l] = 0\n        l += 1\n    ans = 0\n    for i in range(30, -1, -1):\n        if counts[30 - i] == 0:\n            ans += 2 ** i\n    print(ans)", "for test in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [n] * 31\n    ans = 0\n    for i in range(31)[::-1]:\n        p = 2 ** i\n        for el in a:\n            if el & p:\n                b[i] -= 1\n        if k >= b[i]:\n            k -= b[i]\n            ans += p\n    print(ans)", "a = int(input())\nfor x in range(a):\n    (b, c) = map(int, input().split())\n    j = list(map(int, input().split()))\n    l = [0 for x in range(31)]\n    for y in range(b):\n        s = format(j[y], '031b')\n        for z in range(31):\n            if s[z] == '1':\n                l[z] += 1\n    for y in range(31):\n        if b - l[y] <= c:\n            c -= b - l[y]\n            l[y] = b\n    s = 30\n    ans = 0\n    for y in range(31):\n        if l[y] == b:\n            ans += 2 ** s\n        s -= 1\n    print(ans)", "bin_func = [1]\nfor m in range(1, 31):\n    bin_func.append(bin_func[-1] * 2)\nbin_func.reverse()\n\ndef solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    res = 0\n    for i in range(31):\n        count = sum(map(lambda x: x & bin_func[i] == bin_func[i], a))\n        if k + count >= n:\n            res += bin_func[i]\n            k -= n - count\n    print(res)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "bin_func = [1]\nfor m in range(1, 31):\n    bin_func.append(bin_func[-1] * 2)\nbin_func.reverse()\n\ndef solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    res = 0\n    for i in range(31):\n        count = sum(map(lambda x: x & bin_func[i] == bin_func[i], a))\n        if k + count >= n:\n            res += bin_func[i]\n            k -= n - count\n    print(res)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "def bin_dec(arr):\n    c = 0\n    ans = 0\n    for i in range(31, -1, -1):\n        ans += 2 ** c * arr[i]\n        c += 1\n    return ans\n\ndef bit(n, arr):\n    c = 0\n    while n > 0:\n        a = n & 1\n        if a == 1:\n            arr[c] += 1\n        c += 1\n        n >>= 1\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    li = [0 for i in range(32)]\n    for ele in arr:\n        bit(ele, li)\n    p = 0\n    ans = []\n    for i in range(31, -1, -1):\n        if li[i] == n:\n            ans.append(1)\n        elif li[i] + k >= n and i <= 30:\n            ans.append(1)\n            k -= n - li[i]\n        else:\n            ans.append(0)\n    ans = bin_dec(ans)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    cnt = [0] * 31\n    for item in a:\n        b = str(bin(item))[2:][::-1]\n        for i in range(len(b)):\n            if b[i] == '1':\n                cnt[i] += 1\n    for i in range(30, -1, -1):\n        if n - cnt[i] <= k:\n            k -= n - cnt[i]\n            cnt[i] = n\n    res = 0\n    for i in range(31):\n        if cnt[i] == n:\n            res += 2 ** i\n    print(res)", "def bin(n):\n    i = 1 << 30\n    ind = 0\n    while i > 0:\n        if n & i != 0:\n            output[ind] += 1\n        i = i // 2\n        ind += 1\n    return output\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    output = [0] * 31\n    for item in arr:\n        bin(item)\n    ind = 0\n    while ind < 31:\n        diff = n - output[ind]\n        if k >= diff:\n            k = k - diff\n            output[ind] = n\n        ind += 1\n    ans = 0\n    for (ind, val) in enumerate(output):\n        if val == n:\n            ans += 1 << 30 - ind\n    print(ans)", "import math\n\ndef solve():\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    bits = [0 for i in range(31)]\n    for num in arr:\n        x = 0\n        while num > 0:\n            bits[x] += num & 1\n            num = num >> 1\n            x += 1\n    for i in range(30, -1, -1):\n        if n - bits[i] <= k:\n            k -= n - bits[i]\n            bits[i] = n\n    ans = 0\n    for i in range(31):\n        if bits[i] >= n:\n            ans += pow(2, i)\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "def main():\n    t = int(input())\n    while t:\n        t -= 1\n        (n, k) = list(map(int, input().split()))\n        arr = list(map(int, input().split()))\n        cnt = [0 for _ in range(31)]\n        for i in range(n):\n            for j in range(30, -1, -1):\n                if arr[i] & 1 << j:\n                    cnt[j] += 1\n        ans = 0\n        for j in range(30, -1, -1):\n            need = n - cnt[j]\n            if need <= k:\n                k -= need\n                ans += 1 << j\n        print(ans)\nmain()", "from collections import defaultdict\nfrom functools import lru_cache\nimport heapq\nfrom locale import resetlocale\nimport sys\nimport random\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return s\n\ndef invr():\n    return map(int, input().split())\nT = inp()\n\ndef solve():\n    (n, k) = invr()\n    nums = inlt()\n    jl = [0] * 31\n    for i in range(n):\n        for j in range(31):\n            jl[j] += 1 if nums[i] & 1 << j else 0\n    ans = 0\n    for j in range(30, -1, -1):\n        if jl[j] == n:\n            ans += 2 ** j\n        elif jl[j] + k >= n:\n            ans += 2 ** j\n            k -= n - jl[j]\n    print(ans)\nfor _ in range(T):\n    solve()", "import math\n\ndef solve():\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    bits = [0 for i in range(31)]\n    for num in arr:\n        x = 0\n        while num > 0:\n            bits[x] += num & 1\n            num = num >> 1\n            x += 1\n    for i in range(30, -1, -1):\n        if n - bits[i] <= k:\n            k -= n - bits[i]\n            bits[i] = n\n    ans = 0\n    for i in range(31):\n        if bits[i] >= n:\n            ans += pow(2, i)\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "def solve():\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    bits = [0 for i in range(31)]\n    for num in arr:\n        x = 0\n        while num > 0:\n            bits[x] += num & 1\n            num >>= 1\n            x += 1\n    for i in range(30, -1, -1):\n        if n - bits[i] <= k:\n            k -= n - bits[i]\n            bits[i] = n\n    ans = 0\n    for i in range(31):\n        if bits[i] >= n:\n            ans += 1 << i\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    ans = 0\n    bitmap = [0] * 31\n    for p in range(0, 31):\n        for m in nums:\n            if m & 1 << p == 0:\n                bitmap[p] += 1\n    for g in range(30, -1, -1):\n        if k >= bitmap[g]:\n            k -= bitmap[g]\n            ans += 1 << g\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    arr = [0 for i in range(31)]\n    for i in range(n):\n        x = bin(a[i])\n        x = str(x)\n        x = x[2:]\n        x = x[::-1]\n        n2 = len(x)\n        for j in range(n2):\n            if x[j] == '1':\n                arr[j] += 1\n    arr.reverse()\n    ans = 0\n    for i in range(31):\n        if n - arr[i] <= k:\n            k = k - (n - arr[i])\n            ans = ans + 2 ** (30 - i)\n    print(ans)", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    bit_counts = [0] * 31\n    for x in a:\n        x_bin = bin(x)[2:]\n        for (index, bit) in enumerate(x_bin[::-1]):\n            bit_counts[index] += int(bit)\n    res = []\n    for bit_cnt in bit_counts[::-1]:\n        if k + bit_cnt >= n:\n            res.append('1')\n            k -= n - bit_cnt\n        else:\n            res.append('0')\n    print(int(''.join(res), 2))\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(30, -1, -1):\n        unset = 0\n        for j in a:\n            if j & 1 << i == 0:\n                unset += 1\n        if unset <= k:\n            k -= unset\n            ans += 2 ** i\n    print(ans)", "for _ in range(int(input())):\n    (N, K) = list(map(int, input().split(' ')))\n    A = list(map(int, input().split(' ')))\n    ans = 0\n    for i in range(30, -1, -1):\n        unset = 0\n        for j in A:\n            unset += j & 1 << i == 0\n        if unset <= K:\n            K -= unset\n            ans |= 1 << i\n    print(ans)", "MAX_NUM_BITS = 31\nt = int(input())\nfor _ in range(t):\n    (n, k) = tuple(map(int, input().split()))\n    a = tuple(map(int, input().split()))\n    histogram = [0] * MAX_NUM_BITS\n    mask = 1\n    for i in range(MAX_NUM_BITS):\n        for num in a:\n            histogram[i] += num & mask != 0\n        mask <<= 1\n    max_and = 0\n    mask = 1 << MAX_NUM_BITS - 1\n    for i in range(MAX_NUM_BITS - 1, -1, -1):\n        if n - histogram[i] <= k:\n            k -= n - histogram[i]\n            max_and |= mask\n        mask >>= 1\n    print(max_and)", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    bit_counts = [0] * 31\n    for x in a:\n        for (index, bit) in enumerate(bin(x)[2:][::-1]):\n            bit_counts[index] += int(bit)\n    res = []\n    for bit_cnt in bit_counts[::-1]:\n        if k + bit_cnt >= n:\n            res.append('1')\n            k -= n - bit_cnt\n        else:\n            res.append('0')\n    print(int(''.join(res), 2))\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(lambda x: bin(int(x)), input().split()))\n    bit_counts = [0] * 31\n    for i in a:\n        for (index, bit) in enumerate(i[2:][::-1]):\n            bit_counts[index] += int(bit)\n    res = []\n    for bit_cnt in bit_counts[::-1]:\n        if k + bit_cnt >= n:\n            res.append('1')\n            k -= n - bit_cnt\n        else:\n            res.append('0')\n    print(int(''.join(res), 2))\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    bit_counts = [0] * 31\n    for x in a:\n        x_bin = bin(x)[2:]\n        for (index, bit) in enumerate(x_bin[::-1]):\n            bit_counts[index] += int(bit)\n    res = []\n    for (index, bit_cnt) in enumerate(bit_counts[::-1]):\n        if k + bit_cnt >= n:\n            res.append('1')\n            k -= n - bit_cnt\n        else:\n            res.append('0')\n    print(int(''.join(res), 2))\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "def str_to_bin(s):\n    b = bin(int(s))[2:]\n    return '0' * (31 - len(b)) + b\n\ndef solve():\n    (n, k) = map(int, input().split())\n    a = list(map(str_to_bin, input().split()))\n    res = 0\n    for i in range(31):\n        count = sum(map(lambda x: int(x[i]), a))\n        if k + count >= n:\n            res += 2 ** (30 - i)\n            k -= n - count\n    print(res)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "def main():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    st = 2 ** 30\n    ans = 0\n    for i in range(30, -1, -1):\n        c = 0\n        for j in range(len(a)):\n            if a[j] % (st * 2) < st:\n                c += 1\n        if c <= k:\n            k -= c\n            ans += st\n        st //= 2\n    print(ans)\nfor i in range(int(input())):\n    main()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    count = [0 for _ in range(31)]\n    powers = [2 ** i for i in range(31)]\n    for num in arr:\n        for i in range(31):\n            if powers[i] & num:\n                count[i] += 1\n    ind = 30\n    while k and ind >= 0:\n        if k >= n - count[ind]:\n            k -= n - count[ind]\n            count[ind] = n\n        ind -= 1\n    ans = 0\n    for i in range(31):\n        if count[i] == n:\n            ans += powers[i]\n    print(ans)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    ans = 0\n    bitmap = [0] * 31\n    for p in range(0, 31):\n        for m in nums:\n            if m & 1 << p == 0:\n                bitmap[p] += 1\n    for (g, val) in list(enumerate(bitmap))[::-1]:\n        if k >= val:\n            k -= val\n            ans += 1 << g\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    for i in range(len(a)):\n        a[i] = bin(a[i])[2:]\n        if len(a[i]) < 31:\n            a[i] = '0' * (31 - len(a[i])) + a[i]\n    oneTotals = [0 for i in range(31)]\n    for i in range(31):\n        total = 0\n        for j in range(len(a)):\n            if a[j][i] == '1':\n                total += 1\n        oneTotals[i] = total\n    ans = ['0' for i in range(31)]\n    for i in range(31):\n        if n - oneTotals[i] <= k:\n            k -= n - oneTotals[i]\n            ans[i] = '1'\n    ans = ''.join(ans)\n    ans = int(ans, 2)\n    print(ans)", "def make_list(a):\n    bit_list = [0] * 31\n    for num in a:\n        count = 1\n        while num > 0:\n            bit_list[31 - count] += num % 2\n            num = num // 2\n            count += 1\n    return bit_list\n\ndef test_case(a, k):\n    max_add = len(a)\n    ans = 0\n    for (idx, place) in enumerate(make_list(a)):\n        if max_add - place > k:\n            continue\n        ans += 2 ** (30 - idx)\n        k -= max_add - place\n    print(ans)\nfor _ in range(int(input())):\n    n = int(input().split(' ')[1])\n    numbers = [int(k) for k in input().split(' ')]\n    test_case(numbers, n)", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nt = inp()\nfor test in range(t):\n    (n, k) = invr()\n    a = inlt()\n    count_ones = [0 for i in range(31)]\n    res = 0\n    for val in a:\n        for j in range(30, -1, -1):\n            if val & 1 << j:\n                count_ones[j] += 1\n    for j in range(30, -1, -1):\n        if k + count_ones[j] >= n:\n            k -= n - count_ones[j]\n            res += 1 << j\n    print(res)", "z = int(input())\nfor i in range(z):\n    (n, k) = [int(x) for x in input().split()]\n    l = [int(x) for x in input().split()]\n    l_dic = []\n    for i in range(31):\n        l_dic.append({0: 0})\n    for j in range(n):\n        int_number = l[j]\n        bin_number = bin(l[j])\n        n_bin = len(bin_number) - 2\n        n_dicider = 31 - n_bin\n        for t in range(0, n_dicider):\n            l_dic[t][0] += 1\n        for s in range(n_dicider, 31):\n            if bin_number[s - n_dicider + 2] == '0':\n                l_dic[s][0] += 1\n    ans = 0\n    u = 0\n    while u < 31:\n        if l_dic[u][0] <= k:\n            ans = ans + 2 ** (31 - u - 1)\n            k -= l_dic[u][0]\n        elif l_dic[u][0] == 0:\n            ans = ans + 2 ** (31 - u - 1)\n        u += 1\n    print(ans)", "def str_to_bin(s):\n    b = bin(int(s))[2:]\n    return '0' * (31 - len(b)) + b\n\ndef solve():\n    (n, k) = map(int, input().split())\n    a = list(map(str_to_bin, input().split()))\n    res = 0\n    for i in range(31):\n        count = sum(map(lambda x: int(x[i]), a))\n        if k + count >= n:\n            res += 2 ** (30 - i)\n            k -= n - count\n    print(res)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "MAX_NUM_BITS = 31\nt = int(input())\nfor _ in range(t):\n    (n, k) = tuple(map(int, input().split()))\n    a = tuple(map(int, input().split()))\n    histogram = [0] * MAX_NUM_BITS\n    mask = 1\n    for i in range(MAX_NUM_BITS):\n        for num in a:\n            histogram[i] += num & mask != 0\n        mask <<= 1\n    max_and = 0\n    mask = 1 << MAX_NUM_BITS - 1\n    for i in range(MAX_NUM_BITS - 1, -1, -1):\n        if n - histogram[i] <= k:\n            k -= n - histogram[i]\n            max_and |= mask\n        mask >>= 1\n    print(max_and)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    buckets = [0 for _ in range(31)]\n    for i in range(31):\n        for v in a:\n            if v & 1 << i:\n                buckets[i] += 1\n    i = 30\n    out = 0\n    while i >= 0 and k:\n        if buckets[i] + k >= n:\n            k -= n - buckets[i]\n            buckets[i] = n\n        i -= 1\n    for i in range(31):\n        if buckets[i] == n:\n            out |= 1 << i\n    print(out)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    buckets = [0 for _ in range(31)]\n    for i in range(31):\n        for v in a:\n            if v & 1 << i:\n                buckets[i] += 1\n    i = 30\n    out = 0\n    while i >= 0 and k:\n        if buckets[i] + k >= n:\n            k -= n - buckets[i]\n            buckets[i] = n\n        i -= 1\n    for i in range(31):\n        if buckets[i] == n:\n            out |= 1 << i\n    print(out)", "def countt(ind, a):\n    s = 0\n    for el in a:\n        s += int(el[ind])\n    return s\nt = int(input())\nfor qwer in range(t):\n    (n, k) = map(int, input().split())\n    sp = list(map(int, input().split()))\n    cop = sp.copy()\n    prib = list('0000000000000000000000000000000')\n    for i in range(n):\n        sp[i] = bin(sp[i])[2:].zfill(31)\n    for i in range(31):\n        f = countt(i, sp)\n        if n - f <= k:\n            k -= n - f\n            prib[i] = '1'\n        if k <= 0:\n            break\n    g = cop[0]\n    for i in range(1, n):\n        g = g & cop[i]\n    otv = int(''.join(prib), 2) | g\n    print(otv)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in reversed(range(31)):\n        count = 0\n        for ai in a:\n            count += ai & 1 << i == 0\n        if k >= count:\n            ans += 1 << i\n            k -= count\n    print(ans)"]