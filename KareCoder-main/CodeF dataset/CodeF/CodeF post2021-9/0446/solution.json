["import sys\n\ndef solve(string, reps, idx, pos):\n    if idx < 0:\n        return string[pos - 1]\n    (l, ls) = reps[idx]\n    if pos < ls:\n        return solve(string, reps, idx - 1, pos)\n    else:\n        return solve(string, reps, idx - 1, l + (pos - ls))\nfor i in range(int(next(sys.stdin).strip())):\n    (n, c, q) = [int(x) for x in next(sys.stdin).strip().split()]\n    string = next(sys.stdin).strip()\n    repeats = []\n    query = []\n    for idx in range(c):\n        (l, r) = [int(x) for x in next(sys.stdin).strip().split(' ')]\n        repeats.append((l, n + 1))\n        n = n + r - l + 1\n    for idx in range(q):\n        query = int(next(sys.stdin).strip())\n        print(solve(string, repeats, c - 1, query))", "from bisect import bisect_left\nimport sys\nsys.setrecursionlimit(100000)\nfor item in range(int(input())):\n    (n, c, q) = list((int(i) for i in sys.stdin.readline().split()))\n    s = sys.stdin.readline().strip()\n    intervals = []\n    intervals = []\n    intervals.append([1, n])\n    lens = []\n    lens.append(n)\n    for j in range(c):\n        (a, b) = list((int(i) for i in sys.stdin.readline().split()))\n        intervals.append((a, b))\n        lens.append(b - a + 1 + lens[-1])\n    for j in range(q):\n        x = int(sys.stdin.readline())\n        ind = bisect_left(lens, x)\n        while x > n:\n            ind = bisect_left(lens, x)\n            x = x - lens[ind - 1] - 1 + intervals[ind][0]\n        print(s[x - 1])", "ans = ''\nfor t in range(int(input())):\n    (n, c, q) = list(map(int, input().split()))\n    string = input()\n    left = [0] * (c + 1)\n    right = [0] * (c + 1)\n    diff = [0] * (c + 1)\n    left[0] = 0\n    right[0] = n\n    for i in range(1, c + 1):\n        (l, r) = list(map(int, input().split()))\n        l -= 1\n        r -= 1\n        left[i] = right[i - 1]\n        right[i] = left[i] + (r - l + 1)\n        diff[i] = left[i] - l\n    for _ in range(q):\n        k = int(input())\n        k -= 1\n        for i in range(c, 0, -1):\n            if k < left[i]:\n                continue\n            else:\n                k -= diff[i]\n        ans += string[k] + '\\n'\nprint(ans)", "from bisect import bisect_left\nimport sys\nsys.setrecursionlimit(100000)\nfor item in range(int(input())):\n    (n, c, q) = list((int(i) for i in sys.stdin.readline().split()))\n    s = sys.stdin.readline().strip()\n    intervals = []\n    intervals = []\n    intervals.append([1, n])\n    lens = []\n    lens.append(n)\n    for j in range(c):\n        (a, b) = list((int(i) for i in sys.stdin.readline().split()))\n        intervals.append((a, b))\n        lens.append(b - a + 1 + lens[-1])\n    for j in range(q):\n        x = int(sys.stdin.readline())\n        ind = bisect_left(lens, x)\n        while x > n:\n            ind = bisect_left(lens, x)\n            (a, b) = intervals[ind]\n            x = x - lens[ind] + b\n            ind -= 1\n        print(s[x - 1])", "def solve(n, s, array, queries):\n    lengths = [n]\n    for (l, r) in array:\n        lengths.append(lengths[-1] + (r - l + 1))\n    res = ''\n    for q in queries:\n        temp = q\n        for i in range(len(lengths), 0, -1):\n            if temp > lengths[i - 1]:\n                temp -= lengths[i - 1]\n                temp += array[i - 1][0] - 1\n        res += s[temp - 1]\n    return res\nT = int(input())\nfor _ in range(T):\n    (n, c, q) = map(int, input().split())\n    s = input()\n    array = [list(map(int, input().split())) for _ in range(c)]\n    queries = [int(input()) for _ in range(q)]\n    res = solve(n, s, array, queries)\n    for let in res:\n        print(let)", "import bisect\n\ndef main():\n    for t in range(int(input())):\n        (n, c, q) = map(int, input().split())\n        s = '0' + input()\n        d = [n]\n        dd = [0]\n        for i in range(c):\n            (l, r) = map(int, input().split())\n            d.append(d[-1] + r - l + 1)\n            dd.append([l, r])\n        for i in range(q):\n            x = int(input())\n            while x > n:\n                j = bisect.bisect_left(d, x)\n                x = dd[j][0] + x - d[j - 1] - 1\n            print(s[x])\nmain()", "import sys\nfrom math import *\nfrom bisect import *\nfrom heapq import *\nfrom collections import *\nfrom functools import *\nsys.setrecursionlimit(100000)\nx = int(input())\n\ndef op(x):\n    if x <= len(s):\n        return x\n    idx = bisect_left(index, x)\n    (l, r) = temp[idx]\n    n = index[idx]\n    return op(x + r - n)\nfor _ in range(x):\n    (n, c, q) = map(int, input().split())\n    s = input()\n    temp = [[1, n]]\n    index = [n]\n    for i in range(c):\n        (l, r) = map(int, input().split())\n        index.append(index[-1] + r - l + 1)\n        temp.append([l, r])\n    for i in range(q):\n        print(s[op(int(input())) - 1])", "import sys\nimport collections\nfrom math import ceil, gcd, sqrt, log\nimport bisect\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    (n, c, q) = map(int, input().split())\n    s = input()\n    net = []\n    query = []\n    curr = n\n    for i in range(c):\n        (l, r) = map(int, input().split())\n        query.append((l, r))\n        length = r - l + 1\n        ok1 = curr + 1\n        ok2 = curr + length\n        net.append((ok1, ok2))\n        curr = curr + length\n    for j in range(q):\n        k = int(input())\n        (start, end) = (0, 1)\n        for i in range(c - 1, -1, -1):\n            if k >= net[i][start] and k <= net[i][end]:\n                gap = k - net[i][start]\n                k = query[i][start] + gap\n        print(s[k - 1])\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "import sys\nimport bisect\nsys.setrecursionlimit(10 ** 6)\n\ndef dfs(x, s, n, A, B):\n    if 0 <= x < n:\n        return s[x]\n    else:\n        index = bisect.bisect_right(A, x) - 1\n        return dfs(x - B[index], s, n, A, B)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, c, q) = map(int, input().split())\n        s = input()\n        A = []\n        B = []\n        length = len(s)\n        for _ in range(c):\n            (l, r) = map(int, input().split())\n            l -= 1\n            r -= 1\n            A.append(length)\n            B.append(length - l)\n            length += r - l + 1\n        for _ in range(q):\n            x = int(input())\n            x -= 1\n            ans = dfs(x, s, n, A, B)\n            print(ans)\nmain()", "import math, bisect\nxx = int(input())\n\ndef cal(qq):\n    if qq < n:\n        return s[qq]\n    while qq >= n:\n        t = bisect.bisect(arr, qq)\n        qq = qq - arr[t - 1] + p[t - 1][0]\n    return s[qq]\nfor jj in range(xx):\n    (n, c, q) = [int(i) for i in input().split(' ')]\n    s = input()\n    fe = n\n    arr = [0]\n    p = [0]\n    for i in range(c):\n        (a, b) = [int(i) - 1 for i in input().split(' ')]\n        arr.append(fe)\n        fe += b - a + 1\n        p.append([a, b])\n    for i in range(q):\n        qq = int(input()) - 1\n        print(cal(qq))", "from bisect import bisect_right\n\ndef miis():\n    return map(int, input().split())\nfor _ in range(int(input())):\n    (n, c, q) = miis()\n    s = input()\n    z = [1, n + 1]\n    cc = []\n    for i in range(c):\n        (l, r) = miis()\n        cc.append((l, r))\n        z.append(z[-1] + (r - l + 1))\n    for i in range(q):\n        k = int(input())\n        while k > n:\n            m = bisect_right(z, k) - 1\n            k = cc[m - 1][0] + k - z[m]\n        print(s[k - 1])", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, c, q) = R()\n    s = input()\n    a = []\n    while c:\n        c -= 1\n        (l, r) = R()\n        a = [(n, n - l + 1)] + a\n        n += r - l + 1\n    while q:\n        q -= 1\n        (k,) = R()\n        for (x, y) in a:\n            k -= y * (k > x)\n        print(s[k - 1])", "t = int(input())\nfor k in range(t):\n    (n, c, q) = list(map(int, input().split(' ')))\n    s = list(input())\n    (left, right, diff) = ([0] * (c + 1), [0] * (c + 1), [0] * (c + 1))\n    left[0] = 0\n    right[0] = n\n    for i in range(1, c + 1):\n        (l, r) = map(int, input().split(' '))\n        l -= 1\n        r -= 1\n        left[i] = right[i - 1]\n        right[i] = left[i] + r - l + 1\n        diff[i] = left[i] - l\n    for _ in range(q):\n        k = int(input())\n        k -= 1\n        for i in range(c, 0, -1):\n            if k < left[i]:\n                continue\n            else:\n                k -= diff[i]\n        print(s[k])", "for _ in range(int(input())):\n    (n, c, q) = input().split()\n    (n, c, q) = (int(n), int(c), int(q))\n    s = input()\n    arr = []\n    for i in range(c):\n        (l, r) = input().split(' ')\n        (l, r) = (int(l), int(r))\n        arr.insert(0, (n, l))\n        n += r - l + 1\n    for i in range(q):\n        k = int(input())\n        for p in arr:\n            if p[0] < k:\n                k -= p[0] - p[1] + 1\n        print(s[k - 1])", "from bisect import bisect_left\nT = int(input())\nfor _ in range(T):\n    (n, c, q) = map(int, input().split())\n    s = ' ' + input()\n    length = [len(s) - 1]\n    add_ons = []\n    cur_length = len(s) - 1\n    start_length = len(s) - 1\n    for o in range(c):\n        (start, end) = map(int, input().split())\n        cur_length += end - start + 1\n        length.append(cur_length)\n        add_ons.append([start, end])\n    for o in range(q):\n        index = int(input())\n        while index > start_length:\n            mark = bisect_left(length, index) - 1\n            index = add_ons[mark][0] + (index - length[mark]) - 1\n        print(s[index])", "t = int(input())\nfor i in range(t):\n    (n, c, q) = map(int, input().split())\n    s = input()\n    left = [0]\n    right = [n]\n    diff = [0]\n    for i in range(1, c + 1):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        left.append(right[i - 1])\n        right.append(left[i] + (r - l + 1))\n        diff.append(left[i] - l)\n    for i in range(q):\n        k = int(input())\n        k -= 1\n        for i in range(c, 0, -1):\n            if k < left[i]:\n                continue\n            else:\n                k -= diff[i]\n        print(s[k])", "t = int(input())\nfrom bisect import bisect_left\nwhile t:\n    t -= 1\n    (a, b, c) = map(int, input().split())\n    s = input()\n    intervals = [[1, a]]\n    ele = [a]\n    for j in range(b):\n        (x, y) = map(int, input().split())\n        intervals.append([x, y])\n        ele.append(y - x + 1)\n    pre = [ele[0]]\n    for j in range(1, len(ele)):\n        pre.append(pre[-1] + ele[j])\n    for j in range(0, c):\n        g = int(input())\n        while g > len(s):\n            vayu = bisect_left(pre, g)\n            g = intervals[vayu][0] + g - pre[vayu - 1] - 1\n        print(s[g - 1])", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, c, q) = R()\n    s = input()\n    d = {}\n    while c:\n        c -= 1\n        (l, r) = R()\n        d[n] = n - l + 1\n        n += r - l + 1\n    (*a,) = d\n    while q:\n        q -= 1\n        (k,) = R()\n        k -= 1\n        while (i := bisect(a, k)):\n            k -= d[a[i - 1]]\n        print(s[k])", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, c, q) = R()\n    s = input()\n    d = {}\n    while c:\n        c -= 1\n        (l, r) = R()\n        d[n] = n - l + 1\n        n += r - l + 1\n    (*a,) = d\n    while q:\n        q -= 1\n        (k,) = R()\n        while (i := bisect(a, k - 1)):\n            k -= d[a[i - 1]]\n        print(s[k - 1])", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, c, q) = R()\n    s = input()\n    d = {}\n    while c:\n        c -= 1\n        (l, r) = R()\n        d[n] = n - l + 1\n        n += r - l + 1\n    a = (*d,)\n    while q:\n        q -= 1\n        (k,) = R()\n        while (i := bisect(a, k - 1)):\n            k -= d[a[i - 1]]\n        print(s[k - 1])", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, c, q) = R()\n    s = input()\n    a = []\n    while c:\n        c -= 1\n        (l, r) = R()\n        a = [(n, n - l + 1)] + a\n        n += r - l + 1\n    while q:\n        q -= 1\n        (k,) = R()\n        for (x, y) in a:\n            k -= y * (k > x)\n        print(s[k - 1])", "for _ in range(int(input())):\n    (n, c, q) = map(int, input().split())\n    s = input()\n    li = []\n    for i in range(c):\n        (l, r) = map(int, input().split())\n        li.append([n, l])\n        n = n + r - l + 1\n    for i in range(q):\n        k = int(input())\n        for j in range(len(li) - 1, -1, -1):\n            if k > li[j][0]:\n                k -= li[j][0] - li[j][1] + 1\n        print(s[k - 1])", "import bisect\nfor _ in range(int(input())):\n    (n, c, q) = list(map(int, input().split()))\n    s = input()\n    li = [[1, n]]\n    lnt = [n]\n    for i in range(c):\n        (a, b) = list(map(int, input().split()))\n        li.append([a, b])\n        lnt.append(lnt[-1] + (b - a + 1))\n    for i in range(q):\n        k = int(input())\n        tt = bisect.bisect(lnt, k)\n        if lnt[tt - 1] == k:\n            tt = tt - 1\n        temp = lnt[tt] - k\n        k = li[tt][1] - temp\n        while k > n:\n            tt = bisect.bisect(lnt, k)\n            if lnt[tt - 1] == k:\n                tt = tt - 1\n            temp = lnt[tt] - k\n            k = li[tt][1] - temp\n        print(s[k - 1])", "for _ in range(int(input())):\n    (n, c, q) = map(int, input().split())\n    s = str(input())\n    length = []\n    length.append(n)\n    ln = n\n    ops = []\n    ops.append((1, n))\n    for i in range(c):\n        (l, r) = map(int, input().split())\n        ln += r - l + 1\n        length.append(ln)\n        ops.append((l, r))\n    for j in range(q):\n        k = int(input())\n        for i in range(c - 1, -1, -1):\n            if k > length[i]:\n                k = ops[i + 1][0] + k - length[i] - 1\n        print(s[k - 1])", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, c, q) = R()\n    s = input()\n    a = []\n    while c:\n        c -= 1\n        (l, r) = R()\n        a = ((n, n - l + 1), *a)\n        n += r - l + 1\n    while q:\n        q -= 1\n        (k,) = R()\n        for (x, y) in a:\n            k -= y * (k > x)\n        print(s[k - 1])", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, c, q) = R()\n    s = input()\n    a = []\n    while c:\n        c -= 1\n        (l, r) = R()\n        a = ((n, n - l + 1), *a)\n        n += r - l + 1\n    while q:\n        q -= 1\n        (k,) = R()\n        for (x, y) in a:\n            k -= y * (k > x)\n        print(s[k - 1])", "import bisect\n\ndef query(s, c, copy, q):\n    if q <= len(s):\n        return s[q - 1]\n    a = bisect.bisect_left(c, q)\n    b = q - c[a - 1] + copy[a - 1][0] - 1\n    return query(s, c, copy, b)\nfor _ in range(int(input())):\n    (n, c, q) = map(int, input().split())\n    s = input()\n    c1 = [len(s)]\n    copy = []\n    for i in range(c):\n        (a, b) = map(int, input().split())\n        copy.append((a, b))\n        c1.append(c1[-1] + b - a + 1)\n    for i in range(q):\n        print(query(s, c1, copy, int(input())))", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, c, q) = R()\n    s = input()\n    a = []\n    b = []\n    while c:\n        c -= 1\n        (l, r) = R()\n        a += (n,)\n        b += (n - l + 1,)\n        n += r - l + 1\n    while q:\n        q -= 1\n        (k,) = R()\n        while (i := bisect(a, k - 1)):\n            k -= b[i - 1]\n        print(s[k - 1])", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, c, q) = R()\n    s = input()\n    d = {}\n    while c:\n        c -= 1\n        (l, r) = R()\n        d[n] = n - l + 1\n        n += r - l + 1\n    while q:\n        q -= 1\n        (k,) = R()\n        for x in [*d][::-1]:\n            k -= d[x] * (k > x)\n        print(s[k - 1])", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, c, q) = R()\n    s = input()\n    a = []\n    while c:\n        c -= 1\n        (l, r) = R()\n        a = ((n, n - l + 1), *a)\n        n += r - l + 1\n    while q:\n        q -= 1\n        (k,) = R()\n        for (x, y) in a:\n            k -= y * (k > x)\n        print(s[k - 1])", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, c, q) = R()\n    s = input()\n    a = []\n    while c:\n        c -= 1\n        (l, r) = R()\n        a = ((n, n - l + 1), *a)\n        n += r - l + 1\n    while q:\n        q -= 1\n        (k,) = R()\n        for (x, y) in a:\n            k -= y * (k > x)\n        print(s[k - 1])", "import bisect\nfor _ in range(int(input())):\n    (n, c, q) = map(int, input().split())\n    s = str(input())\n    ranges = [(-1, -1)]\n    pref = [n]\n    for _ in range(c):\n        (l, r) = map(int, input().split())\n        ranges.append((l, r))\n        pref.append(pref[-1] + r - l + 1)\n    for _ in range(q):\n        k = int(input())\n        while k > len(s):\n            ind = bisect.bisect_left(pref, k)\n            rem = k - pref[ind - 1]\n            k = ranges[ind][0] + rem - 1\n            ind -= 1\n        print(s[max(0, k - 1)])", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, c, q) = R()\n    s = input()\n    d = {}\n    while c:\n        c -= 1\n        (l, r) = R()\n        d[n] = n - l + 1\n        n += r - l + 1\n    a = (*d,)\n    while q:\n        q -= 1\n        (k,) = R()\n        for x in a[::-1]:\n            k -= d[x] * (k > x)\n        print(s[k - 1])", "t = int(input())\nwhile t:\n    (p, q, r) = map(int, input().split())\n    s = input()\n    l = []\n    check = []\n    curr = p\n    for i in range(q):\n        (j, k) = map(int, input().split())\n        l.append([j, k])\n        g = l[i][1] - l[i][0] + 1\n        check.append([p + 1, p + g])\n        p = check[i][1]\n    for i in range(r):\n        idx = int(input())\n        for j in range(q - 1, -1, -1):\n            if idx >= check[j][0] and idx <= check[j][1]:\n                gap = idx - check[j][0]\n                idx = l[j][0] + gap\n        print(s[idx - 1])\n    t -= 1", "(t,) = map(int, input().split())\nwhile t:\n    t -= 1\n    (n, c, q) = map(int, input().split())\n    s = input()\n    a = []\n    while c:\n        c -= 1\n        (l, r) = map(int, input().split())\n        a = ((n, n - l + 1), *a)\n        n += r - l + 1\n    while q:\n        q -= 1\n        (k,) = map(int, input().split())\n        for (x, y) in a:\n            k -= y * (k > x)\n        print(s[k - 1])", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, c, q) = R()\n    s = input()\n    a = []\n    while c:\n        c -= 1\n        (l, r) = R()\n        a = ((n, n - l + 1), *a)\n        n += r - l + 1\n    while q:\n        q -= 1\n        (k,) = R()\n        for (x, y) in a:\n            k -= y * (k > x)\n        print(s[k - 1])", "out = []\nfor _ in range(int(input())):\n    (n, c, q) = map(int, input().split())\n    s = input()\n    ins = [[n, 0, 0]]\n    for i in range(c):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ins.append([ins[-1][0] + r - l + 1, l, r])\n    for i in range(q):\n        x = int(input()) - 1\n        cur = c\n        while cur > 0:\n            while cur > 0 and ins[cur - 1][0] > x:\n                cur -= 1\n            if cur == 0:\n                break\n            x = x - ins[cur - 1][0] + ins[cur][1]\n        out.append(s[x])\nfor i in out:\n    print(i)", "from bisect import bisect_left\nfor _ in range(int(input())):\n    (n, c, q) = map(int, input().split())\n    s = input()\n    mp = {1: (1, n)}\n    st = n + 1\n    nums = [1]\n    for i in range(c):\n        (l, r) = map(int, input().split())\n        mp[st] = (l, r)\n        nums.append(st)\n        st += r - l + 1\n    for i in range(q):\n        x = int(input())\n        while x > n:\n            pos = bisect_left(nums, x) - 1\n            if pos < c and nums[pos + 1] == x:\n                pos += 1\n            (l, r) = mp[nums[pos]]\n            x = x - nums[pos] + l\n        print(s[x - 1])", "t = int(input())\nwhile t:\n    t -= 1\n    (n, c, q) = [int(x) for x in input().split()]\n    s = input()\n    a = []\n    ini = n\n    ls = [ini]\n    for i in range(c):\n        (l, r) = [int(x) for x in input().split()]\n        a.append((l, r))\n        ini += r - l + 1\n        ls.append(ini)\n    for i in range(q):\n        k = int(input())\n        for (i, x) in enumerate(ls):\n            if x >= k:\n                for j in range(i - 1, -1, -1):\n                    if k > ls[j]:\n                        d = k - ls[j]\n                        k = d + a[j][0] - 1\n                print(s[k - 1])\n                break", "t = int(input())\nfor _ in range(t):\n    (n, c, q) = [int(k) for k in input().split()]\n    s = input()\n    l_arr = []\n    r_arr = []\n    query = []\n    curr_end = n\n    for i in range(1, c + 1):\n        (l, r) = [int(k) for k in input().split()]\n        query.append((l, r))\n        q_len = r - l + 1\n        l_arr.append(curr_end + 1)\n        r_arr.append(curr_end + q_len)\n        curr_end = r_arr[-1]\n    for i in range(q):\n        idx = int(input())\n        for j in range(c - 1, -1, -1):\n            left = l_arr[j]\n            right = r_arr[j]\n            if left <= idx <= right:\n                gap = idx - left\n                idx = query[j][0] + gap\n        print(s[idx - 1])", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, c, q) = R()\n    s = input()\n    a = []\n    while c:\n        c -= 1\n        (l, r) = R()\n        a = ((n, n - l + 1), *a)\n        n += r - l + 1\n    while q:\n        q -= 1\n        (k,) = R()\n        for (x, y) in a:\n            k -= y * (k > x)\n        print(s[k - 1])", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, c, q) = R()\n    s = input()\n    a = []\n    while c:\n        c -= 1\n        (l, r) = R()\n        a = ((n, n - l + 1), *a)\n        n += r - l + 1\n    while q:\n        q -= 1\n        (k,) = R()\n        for (x, y) in a:\n            k -= y * (k > x)\n        print(s[k - 1])", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, c, q) = R()\n    s = input()\n    a = []\n    while c:\n        c -= 1\n        (l, r) = R()\n        a = ((n, n - l + 1), *a)\n        n += r - l + 1\n    while q:\n        q -= 1\n        (k,) = R()\n        for (x, y) in a:\n            k -= y * (k > x)\n        print(s[k - 1])", "from collections import deque\nimport bisect\nt = int(input())\nfor _ in range(t):\n    (n, c, q) = [int(x) for x in input().split()]\n    s = input()\n    intervals = []\n    deduct = []\n    m = n\n    for _ in range(c):\n        (l, r) = [int(x) - 1 for x in input().split()]\n        intervals.append([m, m + r - l])\n        deduct.append(m - l)\n        m += r - l + 1\n    for _ in range(q):\n        k = int(input()) - 1\n        i = c - 1\n        while k >= n:\n            (a, b) = intervals[i]\n            if a <= k <= b:\n                k -= deduct[i]\n            i -= 1\n        print(s[k])", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, c, q) = R()\n    s = input()\n    a = []\n    while c:\n        c -= 1\n        (l, r) = R()\n        a = ((n, n - l + 1), *a)\n        n += r - l + 1\n    while q:\n        q -= 1\n        (k,) = R()\n        for (x, y) in a:\n            k -= y * (k > x)\n        print(s[k - 1])", "t = int(input())\nfor _ in range(t):\n    (n, c, q) = map(int, input().split())\n    s = input().strip()\n    strips = []\n    lengths = [n]\n    for i in range(c):\n        (l, r) = map(int, input().split())\n        strips.append(l)\n        lengths.append(lengths[-1] + r - l + 1)\n    for i in range(q):\n        k = int(input())\n        for j in range(c):\n            last_length = lengths[-j - 2]\n            if k > last_length:\n                k = k - last_length + strips[-j - 1] - 1\n        print(s[k - 1])", "for _ in range(int(input())):\n    (n, c, q) = map(int, input().split())\n    s = input()\n    a = n\n    d = [n]\n    w = []\n    for _ in range(c):\n        (l, r) = map(int, input().split())\n        a += r - l + 1\n        d.append(a)\n        w.append(l)\n    for _ in range(q):\n        k = int(input())\n        i = len(d) - 1\n        while k > n:\n            if d[i] >= k > d[i - 1]:\n                k -= d[i - 1]\n                k += w[i - 1] - 1\n            i -= 1\n        print(s[k - 1])", "t = int(input())\nfor _ in range(t):\n    (n, c, q) = map(int, input().split())\n    s = input().strip()\n    strips = []\n    lengths = [n]\n    for i in range(c):\n        (l, r) = map(int, input().split())\n        strips.append(l)\n        lengths.append(lengths[-1] + r - l + 1)\n    for i in range(q):\n        k = int(input())\n        for j in range(c):\n            last_length = lengths[-j - 2]\n            if k > last_length:\n                k = k - last_length + strips[-j - 1] - 1\n        print(s[k - 1])", "for _ in range(int(input())):\n    (n, c, q) = map(int, input().split())\n    s = input()\n    a = n\n    d = [n]\n    w = []\n    for i in range(c):\n        (l, r) = map(int, input().split())\n        a += r - l + 1\n        d.append(a)\n        w.append(l)\n    for j in range(q):\n        k = int(input())\n        i = len(d) - 1\n        while k > n:\n            if d[i] >= k > d[i - 1]:\n                k -= d[i - 1]\n                k += w[i - 1] - 1\n            i -= 1\n        print(s[k - 1])", "from bisect import *\nfor t in range(int(input())):\n    (n, c, q) = map(int, input().split())\n    s = str(input())\n    ind = [(0, n - 1, (0, n - 1))]\n    for i in range(c):\n        (l, r) = map(int, input().split())\n        ind.append((ind[-1][1] + 1, ind[-1][1] + 1 + r - l, (l - 1, r - 1)))\n    for Q in range(q):\n        k = int(input()) - 1\n        while k > n - 1:\n            i = bisect_right(ind, (k + 1, 0, (0, 0))) - 1\n            k = ind[i][2][0] + (k - ind[i][0])\n        print(s[k])", "t = int(input())\nfor _ in range(t):\n    (n, c, q) = map(int, input().split())\n    s = input()\n    notes = []\n    currentlength = [n]\n    for _ in range(c):\n        lst = list(map(int, input().split()))\n        if currentlength[-1] <= 10 ** 18:\n            notes.append(lst)\n            currentlength.append(currentlength[-1] + lst[1] - lst[0] + 1)\n    for _ in range(q):\n        pos = int(input())\n        for i in range(c + 1):\n            if currentlength[i] >= pos:\n                break\n        for k in range(i + 1, 0, -1):\n            if pos > currentlength[k - 1]:\n                pos = notes[k - 1][0] + pos - currentlength[k - 1] - 1\n        print(s[pos - 1])", "for _ in range(int(input())):\n    (n, c, q) = map(int, input().split())\n    s = input()\n    a = [(1, n)]\n    ln = [n]\n    for _ in range(c):\n        (l, r) = map(int, input().split())\n        ln.append(ln[-1] + (r - l + 1))\n        a.append((l, r))\n    for _ in range(q):\n        k = int(input())\n        idx = 0\n        for i in range(c + 1):\n            if ln[i] >= k:\n                idx = i\n                break\n        while idx > 0:\n            if ln[idx - 1] >= k:\n                idx -= 1\n            else:\n                k = k - ln[idx - 1] + a[idx][0] - 1\n                idx -= 1\n        print(s[k - 1])", "t = int(input())\nwhile t:\n    s = input().split()\n    (n, c, q) = map(int, s)\n    s = input()\n    ops = []\n    bndry = [[0, len(s)]]\n    for i in range(c):\n        a = input().split()\n        (l, r) = map(int, a)\n        l -= 1\n        r -= 1\n        cur = [bndry[-1][1], bndry[-1][1] + r - l + 1]\n        bndry.append(cur)\n        ops.append([l, r])\n    qrys = []\n    for i in range(q):\n        k = int(input())\n        k -= 1\n        for j in range(len(bndry) - 1, -1, -1):\n            b = bndry[j]\n            if j == 0:\n                print(s[k])\n                break\n            if b[0] <= k < b[1]:\n                gap = k - b[0]\n                k = ops[j - 1][0] + gap\n    t -= 1", "T = int(input())\nfor _ in range(T):\n    (N, C, Q) = map(int, input().split())\n    S = input().strip()\n    lr = []\n    le = len(S)\n    for i in range(C):\n        (l, r) = map(int, input().split())\n        lr.append((l, r))\n        le += r - l + 1\n    leo = le\n    lr = lr[::-1]\n    for i in range(Q):\n        le = leo\n        k = int(input())\n        for (l, r) in lr:\n            s = le - (r - l)\n            if s <= k and k <= le:\n                k = l + (k - s)\n            le -= r - l + 1\n        print(S[k - 1])", "from bisect import bisect_right\nfor _ in ' ' * int(input()):\n    (n, c, q) = map(int, input().split())\n    s = input()\n    c_l = []\n    ss = [1, n]\n    for __ in ' ' * c:\n        (l, r) = map(int, input().split())\n        c_l.append((l, r))\n        ss.append(ss[-1] + r - l + 1)\n    for ___ in ' ' * q:\n        k = int(input())\n        while k > n:\n            zhu = bisect_right(ss, k) - 1\n            if k in ss:\n                zhu -= 1\n            c_index = zhu - 1\n            l = c_l[c_index][0]\n            k = l + k - ss[zhu] - 1\n        print(s[k - 1])", "def solve():\n    (n, c, q) = list(map(int, input().split()))\n    s = input()\n    marz = [(1, n)]\n    tah = [n]\n    for _ in range(c):\n        (l, r) = map(int, input().split())\n        marz.append((l, r))\n        tah.append(tah[-1] + r - l + 1)\n    for _ in range(q):\n        ind = int(input())\n        position = 0\n        while True:\n            for i in range(len(tah)):\n                if tah[i] >= ind:\n                    position = i\n                    break\n            ind = marz[position][1] - (tah[position] - ind)\n            if ind <= n:\n                break\n        print(s[ind - 1])\nfor _ in range(int(input())):\n    solve()", "def find(k):\n    if k <= N:\n        return k\n    for i in v:\n        if k - i < 0:\n            continue\n        return find(k - i + d[i])\nfor _ in range(int(input())):\n    (N, C, Q) = map(int, input().split())\n    s = list(input().strip())\n    d = dict()\n    d[1] = 1\n    x = N + 1\n    for c in range(C):\n        (l, r) = map(int, input().split())\n        d[x] = l\n        x += r - l + 1\n    v = list(d.keys())\n    v.sort(reverse=True)\n    for q in range(Q):\n        k = int(input())\n        print(s[find(k) - 1])", "for _ in range(int(input())):\n    (n, c, q) = map(int, input().split())\n    s = str(input())\n    l = [[1, n]]\n    t = [n]\n    for _ in range(c):\n        (a, b) = map(int, input().split())\n        l.append([a, b])\n        t.append(t[-1] + b - a + 1)\n\n    def ceiling_of_element(a, x):\n        n = len(a)\n        start = 0\n        end = n - 1\n        res = -1\n        while start <= end:\n            mid = (start + end) // 2\n            if a[mid] == x:\n                return mid\n            elif x > a[mid]:\n                start = mid + 1\n            else:\n                res = mid\n                end = mid - 1\n        return res\n    for _ in range(q):\n        x = int(input())\n        i = ceiling_of_element(t, x)\n        aaa = l[i][1] - t[i] + x\n        while aaa > n:\n            i = ceiling_of_element(t, aaa)\n            aaa = l[i][1] - t[i] + aaa\n        if aaa == 0:\n            aaa = n\n        print(s[aaa - 1])", "def binary_search(list1, n):\n    low = 0\n    high = len(list1) - 1\n    mid = 0\n    while low < high:\n        mid = (high + low + 1) // 2\n        if list1[mid] < n:\n            low = mid\n        elif list1[mid] > n:\n            high = mid - 1\n        else:\n            return mid\n    return low\nfor _ in range(int(input())):\n    (n, c, q) = map(int, input().split())\n    string = input()\n    n = len(string)\n    initial = n\n    limits = [0]\n    starting = [0]\n    for i in range(c):\n        (l, r) = map(int, input().split())\n        limits.append(l - 1)\n        starting.append(n)\n        n = n + r - l + 1\n    for j in range(q):\n        k = int(input())\n        indx = binary_search(starting, k - 1)\n        needed = k - starting[indx] + limits[indx] - 1\n        while needed > initial - 1:\n            indx = binary_search(starting, needed)\n            needed = needed - starting[indx] + limits[indx]\n        print(string[needed])", "t = int(input())\n\ndef findindex(array1, array2, n, len_of_s):\n    position = n\n    while position > len_of_s:\n        for i in range(len(array2) - 1, -1, -1):\n            if array2[i][0] <= position:\n                pos = i\n                break\n        position = array1[pos][0] + position - array2[pos][0]\n    return position\nwhile t > 0:\n    (n, c, q) = map(int, input().split(' '))\n    s = str(input())\n    copyop = []\n    for i in range(c):\n        copyop.append(list(map(int, input().split(' ')[:2])))\n    queries = []\n    for i in range(q):\n        queries.append(int(input()))\n    original_pos = []\n    currend = len(s)\n    for (l, r) in copyop:\n        original_pos.append([currend + 1, currend + 1 + r - l])\n        currend = currend + 1 + r - l\n    for i in queries:\n        if i <= len(s):\n            print(s[i - 1])\n        else:\n            pos = findindex(copyop, original_pos, i, len(s))\n            print(s[pos - 1])\n    t -= 1", "for iii in range(int(input())):\n    (n, c, q) = map(int, input().split())\n    s = input()\n    q1 = []\n    for i in range(c):\n        q2 = list(map(int, input().split()))\n        q1.append(q2)\n    pre = [n]\n    for i in range(c):\n        x = pre[i] + q1[i][1] - q1[i][0] + 1\n        pre.append(x)\n\n    def qwe(x):\n        if x <= n:\n            return s[x - 1]\n        dis = -1\n        ind = -1\n        for i in range(c + 1):\n            if x <= pre[i]:\n                dis = x - pre[i - 1]\n                ind = i - 1\n                break\n        dis1 = q1[ind][0] + dis - 1\n        return qwe(dis1)\n    for i in range(q):\n        x = int(input())\n        print(qwe(x))", "t = int(input())\nfor tt in range(t):\n    (n, c, q) = map(int, input().split())\n    s = input()\n    l = []\n    r = []\n    a = []\n    a.append(n)\n    for i in range(c):\n        (ll, rr) = map(int, input().split())\n        ll -= 1\n        rr -= 1\n        l.append(ll)\n        r.append(rr)\n        a.append(a[len(a) - 1] + rr - ll + 1)\n    for qq in range(q):\n        k = int(input())\n        k -= 1\n        while k >= n:\n            ll = 0\n            rr = len(a)\n            while rr - ll > 0:\n                m = (ll + rr) // 2\n                if a[m] > k:\n                    rr = m\n                elif m < len(a) - 1 and a[m + 1] > k:\n                    k = l[m] + k - a[m]\n                    break\n                else:\n                    ll = m\n        print(s[k])", "def low_bound(list, item):\n    low = -1\n    high = len(list)\n    while high - low > 1:\n        mid = (low + high) // 2\n        if list[mid][0] < item:\n            low = mid\n        else:\n            high = mid\n    return low + 1\nfor _ in range(int(input())):\n    (n, c, q) = map(int, input().split())\n    s = input()\n    b = [[0, 0]] * c\n    ll = n\n    for i in range(c):\n        (l, r) = map(int, input().split())\n        ll += r - l + 1\n        b[i] = [ll, r]\n    for _ in range(q):\n        k = int(input())\n        while k > n:\n            k = b[low_bound(b, k)][1] - b[low_bound(b, k)][0] + k\n        print(s[k - 1])", "def get_character(n):\n    for i in range(c + 1):\n        if n <= list[i][0]:\n            if i != 0:\n                z = n - list[i - 1][0]\n                character = list[i][1] + z - 1\n                return get_character(character)\n            else:\n                return string[n - 1]\nfor _ in range(int(input())):\n    global list\n    global string\n    global c\n    (m, c, q) = map(int, input().split())\n    string = input()\n    list = [[m, 1]]\n    for i in range(c):\n        (l, r) = map(int, input().split())\n        m += r - l + 1\n        list.append([m, l])\n    for _ in range(q):\n        print(get_character(int(input())))", "for w in range(0, int(input())):\n    [n, c, q] = [int(x) for x in input().split()]\n    s = input()\n    ranges = [[0, n - 1]]\n    thresh = [n]\n    cur = n\n    for j in range(c):\n        (l, r) = [int(x) for x in input().split()]\n        ranges.append([l - 1, r - 1])\n        cur += r - l + 1\n        thresh.append(cur)\n    for j in range(q):\n        k = int(input()) - 1\n        while k >= n:\n            i = c\n            while thresh[i] > k:\n                i -= 1\n            k = k - thresh[i] + ranges[i + 1][0]\n        print(s[k])", "import sys\nt = int(sys.stdin.readline())\nfor i in range(t):\n    (n, c, q) = map(int, sys.stdin.readline().split())\n    s = input()\n    dic = {}\n    le = n\n    dic[1, n] = s\n    for j in range(c):\n        (l, r) = map(int, sys.stdin.readline().split())\n        ele = r - l + 1\n        dic[le + 1, le + ele] = [l, r]\n        le += ele\n\n    def fun(a):\n        if a >= 1 and a <= n:\n            return s[a - 1]\n        tup = (-1, -1)\n        for f in dic.keys():\n            l = f[0]\n            r = f[1]\n            if a >= l and a <= r:\n                tup = f\n                break\n        c = dic[tup][0]\n        d = dic[tup][1]\n        dif = a - tup[0]\n        return fun(c + dif)\n    for j in range(q):\n        k = int(sys.stdin.readline())\n        print(fun(k))", "t = int(input())\nfor tc in range(t):\n    (n, c, q) = map(int, input().split())\n    s = input()\n    start = []\n    end = []\n    length = [n]\n    for i in range(c):\n        (S, E) = map(int, input().split())\n        start.append(S)\n        end.append(E)\n        length.append(length[-1] + E - S + 1)\n    for query in range(q):\n        k = int(input())\n        while k > n:\n            r = 0\n            for i in range(len(length)):\n                if k <= length[i]:\n                    r = i\n                    break\n            k += start[r - 1] - length[r - 1] - 1\n        print(s[k - 1])", "for _ in range(int(input())):\n    (n, c, q) = list(map(int, input().split(' ')))\n    s = input()\n    dic = {}\n    il = []\n    si = n + 1\n    for i in range(c):\n        (l, r) = list(map(int, input().split(' ')))\n        t = (si, si + r - l)\n        dic[t] = l\n        il.append(t)\n        si = si + r - l + 1\n    for i in range(q):\n        rn = int(input())\n        while rn > n:\n            for i in il:\n                if i[0] <= rn <= i[1]:\n                    ri = dic[i] + rn - i[0]\n                    rn = ri\n                    break\n        print(s[rn - 1])", "def find_char(s, c_s, lens_after_c, idx):\n    if idx < len(s):\n        return s[idx]\n    paste_idx = 0\n    while idx > lens_after_c[paste_idx] - 1:\n        paste_idx += 1\n    paste_idx -= 1\n    idx = idx - lens_after_c[paste_idx] + c_s[paste_idx][0] - 1\n    return find_char(s, c_s, lens_after_c, idx)\n\ndef main():\n    i = int(input())\n    for _ in range(i):\n        (n, c, q) = [int(x) for x in input().strip('\\r\\n').split()]\n        c_s = []\n        lens_after_c = [n]\n        s = input().strip('\\r\\n')\n        for _ in range(c):\n            c_s.append([int(x) for x in input().strip('\\r\\n').split()])\n            lens_after_c.append(lens_after_c[-1] + c_s[-1][1] - c_s[-1][0] + 1)\n        for _ in range(q):\n            _q = int(input().strip('\\r\\n')) - 1\n            print(find_char(s, c_s, lens_after_c, _q))\nmain()", "for i in range(int(input())):\n    (n, c, q) = map(int, input().split())\n    a = input()\n    copyPastINtervals = [(1, n)]\n    copyPastRanges = [n]\n    for i in range(c):\n        (l, r) = map(int, input().split())\n        copyPastINtervals.append((l, r))\n        copyPastRanges.append(copyPastRanges[-1] + r - l + 1)\n    for i in range(q):\n        k = int(input())\n        while True:\n            for j in range(len(copyPastRanges)):\n                if copyPastRanges[j] >= k:\n                    (l, r) = copyPastINtervals[j]\n                    d = copyPastRanges[j] - k\n                    k = r - d\n                    break\n            if k <= n:\n                break\n        print(a[k % n - 1])", "def query(s, d, x):\n    if x < len(s):\n        return s[x]\n    for i in d:\n        j = d[i]\n        if i + j[-1] > x:\n            return query(s, d, x - i + j[0])\nfor t in range(int(input())):\n    (n, c, q) = map(int, input().split())\n    s = input()\n    d = {}\n    for i in [1] * c:\n        (x, y) = map(int, input().split())\n        d[n] = [x - 1, y - 1, y - x + 1]\n        n += y - x + 1\n    for i in [1] * q:\n        x = int(input()) - 1\n        print(query(s, d, x))", "for _ in range(int(input())):\n    (n, c, q) = map(int, input().split())\n    w = input()\n    w_len = len(w)\n    changes = []\n    for x in range(c):\n        (a, b) = map(int, input().split())\n        w_len += b - a + 1\n        changes.append([a, b, w_len])\n    for y in range(q):\n        found_ans = False\n        query = int(input())\n        if query <= n:\n            print(w[query - 1])\n            continue\n        while query > n:\n            for xx in range(len(changes)):\n                if changes[xx][2] >= query:\n                    query = changes[xx][1] - (changes[xx][2] - query)\n                    break\n            if query <= n:\n                ans = query\n                found_ans = True\n                break\n        print(w[ans - 1])", "for _ in range(int(input())):\n    (n, c, q) = map(int, input().split())\n    w = input()\n    w_len = len(w)\n    changes = []\n    for x in range(c):\n        (a, b) = map(int, input().split())\n        w_len += b - a + 1\n        changes.append([a, b, w_len])\n    for y in range(q):\n        query = int(input())\n        if query <= n:\n            print(w[query - 1])\n            continue\n        while query > n:\n            for xx in range(len(changes)):\n                if changes[xx][2] >= query:\n                    query = changes[xx][1] - (changes[xx][2] - query)\n                    break\n            if query <= n:\n                ans = query\n                break\n        print(w[ans - 1])", "def find(s, d, x):\n    if x < len(s):\n        return s[x]\n    for i in d:\n        j = d[i]\n        if x < i + j[-1]:\n            return find(s, d, x - i + j[0])\nfor _ in range(int(input())):\n    (n, c, q) = map(int, input().split())\n    s = input()\n    d = {}\n    l = len(s)\n    for i in range(c):\n        (x, y) = map(int, input().split())\n        d[l] = [x - 1, y - 1, y - x + 1]\n        l += y - x + 1\n    for Q in range(q):\n        x = int(input()) - 1\n        print(find(s, d, x))", "t = int(input())\n\ndef diff(x):\n    return x[1] - x[0]\nfor i in range(t):\n    line = input().split()\n    int_line = [int(x) for x in line]\n    (n, c, q) = int_line\n    text = input()\n    c_list = []\n    for i in range(c):\n        line = input().split()\n        int_line = [int(x) for x in line]\n        (l, r) = int_line\n        l -= 1\n        c_list.append((l, r))\n    pos_list = [n]\n    for i in range(c):\n        pos_list.append(pos_list[-1] + diff(c_list[i]))\n    for j in range(q):\n        pos = int(input()) - 1\n        while pos >= n:\n            index = 0\n            while pos >= pos_list[index + 1]:\n                index += 1\n            pos = pos - pos_list[index] + c_list[index][0]\n        print(text[pos])", "for i in range(int(input())):\n    (n, c, q) = map(int, input().split())\n    a = input()\n    copyPastINtervals = [(1, n)]\n    copyPastRanges = [n]\n    for i in range(c):\n        (l, r) = map(int, input().split())\n        copyPastINtervals.append((l, r))\n        copyPastRanges.append(copyPastRanges[-1] + r - l + 1)\n    for i in range(q):\n        k = int(input())\n        while True:\n            for j in range(len(copyPastRanges)):\n                if copyPastRanges[j] >= k:\n                    (l, r) = copyPastINtervals[j]\n                    d = copyPastRanges[j] - k\n                    k = r - d\n                    break\n            if k <= n:\n                break\n        print(a[k % n - 1])", "for i in range(int(input())):\n    (n, c, q) = map(int, input().split())\n    a = input()\n    intervals = [(1, n)]\n    ranges = [n]\n    for i in range(c):\n        (x, y) = map(int, input().split())\n        intervals.append((x, y))\n        ranges.append(ranges[-1] + y - x + 1)\n    for i in range(q):\n        z = int(input())\n        while True:\n            for j in range(len(ranges)):\n                if ranges[j] >= z:\n                    (x, y) = intervals[j]\n                    d = ranges[j] - z\n                    z = y - d\n                    break\n            if z <= n:\n                break\n        print(a[z - 1])", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, c, q) = map(int, input().split())\n    string = input()\n    queries = [[1, n]]\n    quer2 = [[1, n]]\n    while c > 0:\n        c -= 1\n        (a, b) = map(int, input().split())\n        tot = quer2[-1][-1]\n        quer2.append([tot + 1, tot + 1 + (b - a)])\n        queries.append([a, b])\n    size = len(quer2)\n    while q > 0:\n        q -= 1\n        k = int(input())\n        while k > n:\n            for i in range(-1, -(size + 1), -1):\n                if quer2[i][0] <= k <= quer2[i][1]:\n                    break\n            m = queries[i][0] + k - quer2[i][0]\n            k = m\n        print(string[k - 1])", "def findLetter(n, indices, x):\n    if x <= n:\n        return s[x - 1]\n    else:\n        count = n\n        for index in indices:\n            count += index[1] - index[0] + 1\n            if x <= count:\n                a = count - (index[1] - index[0] + 1)\n                b = x - a - 1\n                newX = index[0] + b\n                return findLetter(n, indices, newX)\nfor _ in range(int(input())):\n    (n, c, q) = [int(x) for x in input().split()]\n    s = input()\n    indices = []\n    for i in range(c):\n        (l, r) = [int(x) for x in input().split()]\n        indices.append((l, r))\n    for i in range(q):\n        x = int(input())\n        print(findLetter(n, indices, x))", "t = int(input())\nfor i in range(t):\n    (n, c, q) = map(int, input().split())\n    s = input()\n    limits = [(1, n)]\n    diff = [0]\n    for i in range(c):\n        (l, r) = map(int, input().split())\n        limits.append((limits[-1][1] + 1, limits[-1][1] + 1 + r - l))\n        diff.append(limits[-1][1] - r)\n    for i in range(q):\n        x = int(input())\n        while True:\n            l = 0\n            r = len(diff) - 1\n            while l <= r:\n                mid = (l + r) // 2\n                if x in range(limits[mid][0], limits[mid][1] + 1):\n                    break\n                elif x < limits[mid][0]:\n                    r = mid - 1\n                else:\n                    l = mid + 1\n            if diff[mid] != 0:\n                x -= diff[mid]\n            else:\n                print(s[x - 1])\n                break", "t = int(input())\nfor i in range(t):\n    (n, c, q) = map(int, input().split())\n    s = list(input())\n    m = [0]\n    dl = [n]\n    for x in range(c):\n        (l, r) = map(int, input().split())\n        m.append(l - 1)\n        dl.append(r - l + 1)\n    for x in range(q):\n        w = int(input()) - 1\n        while w >= n:\n            for e in range(len(dl)):\n                if dl[e] > w:\n                    st = e\n                    break\n                else:\n                    w -= dl[e]\n            w += m[st]\n        print(s[w])", "for _ in range(int(input())):\n    (n, c, q) = map(int, input().split())\n    s = input()\n    d = {}\n    for i in range(c):\n        (x, y) = map(int, input().split())\n        d[n] = [x - 1, y - x + 1]\n        n += y - x + 1\n    for Q in range(q):\n        x = int(input()) - 1\n        while x >= len(s):\n            for i in d:\n                j = d[i]\n                if x < i + j[-1]:\n                    x -= i - j[0]\n                    break\n        print(s[x])", "t = int(input())\nfor i in range(t):\n    (n, c, q) = map(int, input().split())\n    string = input()\n    d = {}\n    for j in range(c):\n        (a, b) = map(int, input().split())\n        d[n] = [a - 1, b - a + 1]\n        n += b - a + 1\n    for k in range(q):\n        x = int(input()) - 1\n        while x >= len(string):\n            for l in d:\n                a = d[l]\n                if x < l + a[-1]:\n                    x -= l\n                    x += a[0]\n                    break\n        print(string[x])", "for _ in range(int(input())):\n    (n, c, q) = list(map(int, input().split()))\n    string = str(input())\n    cc = []\n    for i in range(c):\n        cc.append(list(map(int, input().split())))\n\n    def get_prev_size_and_start_for_index(index):\n        if index < n:\n            return (0, 0)\n        s = n\n        for i in range(c):\n            add = cc[i][1] - cc[i][0] + 1\n            s += add\n            if index < s:\n                return (s - add, i)\n\n    def get_real_index(index):\n        (s, start) = get_prev_size_and_start_for_index(index)\n        start = cc[start][0] - 1\n        if s == 0:\n            return index\n        return get_real_index(index - s + start)\n    for i in range(q):\n        qq = int(input())\n        qq -= 1\n        print(string[get_real_index(qq)])"]