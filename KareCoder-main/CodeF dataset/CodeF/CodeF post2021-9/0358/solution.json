["from enum import Enum, auto\nimport copy\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, x) = map(int, input().split())\n        a = list(map(int, input().split()))\n        a_sorted = sorted(a)\n        stack = {}\n        for aa in reversed(a_sorted):\n            if aa * x in stack:\n                if stack[aa * x] == 1:\n                    stack.pop(aa * x)\n                else:\n                    stack[aa * x] -= 1\n            elif aa in stack:\n                stack[aa] += 1\n            else:\n                stack[aa] = 1\n        print(sum(stack.values()))\nmain()", "import sys\nimport math\nfrom fractions import Fraction\nfrom decimal import *\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    inp = input().strip()\n    arr = [int(x) for x in inp.split(' ')]\n    n = arr[0]\n    x = arr[1]\n    inp = input().strip()\n    arr = [int(x) for x in inp.split(' ')]\n    arr.sort()\n    numsdict = {}\n    for num in arr[::-1]:\n        if num * x in numsdict and numsdict[num * x] > 0:\n            numsdict[num * x] -= 1\n        elif num in numsdict:\n            numsdict[num] += 1\n        else:\n            numsdict[num] = 1\n    ans = 0\n    for k in numsdict.keys():\n        ans += numsdict[k]\n    print(ans)\n    t -= 1", "import sys\nimport math\nfrom sys import stdin, stdout\n\ndef get_ints_in_variables():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_int():\n    return int(input())\n\ndef get_ints_in_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_of_list(n):\n    return [list(map(int, sys.stdin.readline().strip().split())) for _ in range(n)]\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef main():\n    for t in range(get_int()):\n        (n, x) = get_ints_in_variables()\n        arr = get_ints_in_list()\n        mp = {}\n        for i in range(0, n):\n            if arr[i] not in mp:\n                mp[arr[i]] = 1\n            else:\n                mp[arr[i]] += 1\n        arr.sort()\n        for i in range(0, n):\n            if mp[arr[i]] > 0:\n                tp = arr[i] * x\n                if tp in mp:\n                    if mp[tp] > 0:\n                        mp[tp] -= 1\n                        mp[arr[i]] -= 1\n        ans = 0\n        for (key, val) in mp.items():\n            ans += val\n        print(ans)\nmain()", "from bisect import bisect_left\nout = []\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    used = [False] * n\n    ans = 0\n    i = 0\n    j = bisect_left(a, a[0] * x)\n    while j < n:\n        t = a[i] * x\n        while j < n and a[j] < t:\n            j += 1\n        if j < n and a[j] == t:\n            used[j] = True\n            used[i] = True\n            j += 1\n        else:\n            ans += 1\n            used[i] = True\n        while i < n and used[i]:\n            i += 1\n        if i == n:\n            break\n    ans += used.count(False)\n    out.append(ans)\nfor i in out:\n    print(i)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    great = 0\n    dic = {}\n    for k in a:\n        if k in dic:\n            dic[k] += 1\n        else:\n            dic[k] = 1\n    for i in dic:\n        while dic[i] > 0:\n            if i * x in dic and dic[i * x] > 0:\n                dic[i] -= 1\n                dic[i * x] -= 1\n            else:\n                great += dic[i]\n                dic[i] = 0\n    print(great)", "def solve():\n    (n, x) = map(int, input().split())\n    ll = list(map(int, input().split()))\n    ll.sort()\n    count = 0\n    mp = {}\n    for i in ll:\n        if i not in mp:\n            mp[i] = 1\n        else:\n            mp[i] += 1\n    for i in ll:\n        if mp[i] > 0:\n            if i * x in mp and mp[i * x] > 0:\n                mp[i * x] -= 1\n                mp[i] -= 1\n            else:\n                count += 1\n                mp[i] -= 1\n    return count\nt = int(input())\nwhile t:\n    res = solve()\n    print(res)\n    t -= 1", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    m = {}\n    for i in l[::-1]:\n        if i in m:\n            m[i] += 1\n        else:\n            m[i] = 1\n        if x * i in m:\n            if m[x * i]:\n                m[x * i] -= 1\n                m[i] -= 1\n    print(sum(m.values()))", "def main():\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    freq = {}\n    for z in arr:\n        if z not in freq:\n            freq[z] = 0\n        freq[z] += 1\n    for (k, v) in freq.items():\n        if x * k in freq:\n            curr = min(v, freq[x * k])\n            freq[k] -= curr\n            freq[x * k] -= curr\n    ans = 0\n    for (k, v) in freq.items():\n        ans += v\n    return ans\nfor _ in range(int(input())):\n    print(main())", "import collections\nimport sys\ninput = sys.stdin.readline\n\ndef solve(n, x, arr):\n    arr.sort()\n    counter = collections.defaultdict(int)\n    for num in arr:\n        counter[num] += 1\n    ans = 0\n    used = collections.defaultdict(int)\n    for num in arr:\n        if num in used and used[num] > 0:\n            used[num] -= 1\n            continue\n        if x * num in counter and counter[x * num] > 0:\n            counter[x * num] -= 1\n            used[x * num] += 1\n        else:\n            ans += 1\n    print(ans)\n    return\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    solve(n, x, arr)", "t = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ht = {}\n    for p in arr:\n        if p in ht:\n            ht[p] += 1\n        else:\n            ht[p] = 1\n    pairs = 0\n    arr.sort()\n    for num in arr:\n        if ht[num] > 0:\n            if num * x in ht and ht[num * x] > 0:\n                ht[num * x] -= 1\n                ht[num] -= 1\n                pairs += 1\n    paired = pairs * 2\n    print(n - paired)", "def check(n, x, a):\n    a.sort()\n    data = {}\n    for i in a[::-1]:\n        if i not in data:\n            data[i] = 1\n        else:\n            data[i] += 1\n        val = i * x\n        if val in data:\n            if data[val]:\n                data[i] -= 1\n                data[val] -= 1\n    return sum(data.values())\nt = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(check(n, x, a))", "t = int(input())\nwhile t > 0:\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr = sorted(arr)\n    cnt = 0\n    j = n - 1\n    vis = [False] * n\n    for i in range(n - 1, -1, -1):\n        if vis[i] == True:\n            continue\n        if arr[i] % x == 0:\n            f = arr[i] / x\n            while j >= 0 and (vis[j] == True or arr[j] > f):\n                j -= 1\n            while j >= 0 and arr[j] == f and (vis[j] == False):\n                vis[i] = True\n                vis[j] = True\n                cnt += 1\n    print(n - 2 * cnt)\n    t = t - 1", "import sys\nfrom collections import defaultdict\n\nclass Solution:\n\n    def great_sequence(self, N, X, L):\n        c = 0\n        freq = defaultdict(int)\n        for item in L:\n            freq[item] += 1\n        keys = list(freq.keys())\n        keys.sort()\n        for key in keys:\n            while freq[key] > 0 and freq[key * X] > 0:\n                freq[key] -= 1\n                freq[key * X] -= 1\n                c += 2\n        return len(L) - c\nT = int(sys.stdin.readline().strip())\nfor t_ in range(T):\n    (N, X) = [int(x_) for x_ in sys.stdin.readline().strip().split(' ')]\n    L = [int(x_) for x_ in sys.stdin.readline().strip().split(' ')]\n    s = Solution()\n    print(s.great_sequence(N, X, L))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    d = {}\n    o = set()\n    res = 0\n    for k in a:\n        if k in d:\n            d[k] += 1\n        else:\n            d[k] = 1\n    l = sorted(list(d.keys()))\n    for k in l:\n        if d[k] == 0:\n            continue\n        if k * x in d:\n            f = d[k]\n            s = d[k * x]\n            diff = f - s\n            if diff >= 0:\n                res += diff\n                d[k * x] = 0\n            else:\n                d[k * x] -= f\n        else:\n            res += d[k]\n    print(res)", "def solve():\n    (n, x) = [int(x) for x in input().split()]\n    a = sorted([int(x) for x in input().split()])\n    value_counts = {}\n    for i in a:\n        if i not in value_counts:\n            value_counts[i] = 0\n        value_counts[i] += 1\n    good_pair = 0\n    for i in a:\n        if value_counts[i] <= 0:\n            continue\n        if i * x in value_counts and value_counts[i * x] > 0:\n            value_counts[i] -= 1\n            value_counts[i * x] -= 1\n            good_pair += 1\n    ans = sum(value_counts.values())\n    print(ans)\nfor tc in range(int(input())):\n    solve()", "def solve():\n    (n, x) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    d = {a: 0 for a in nums}\n    for c in nums:\n        d[c] += 1\n    res = 0\n    for c in sorted(d):\n        if d.get(c * x) != None:\n            k1 = d[c]\n            k2 = d[c * x]\n            d[c] -= min(k1, k2)\n            d[c * x] -= min(k1, k2)\n    for c in d.keys():\n        res += d[c]\n    print(res)\nt = int(input())\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = dict()\n    for i in l:\n        d[i] = d.get(i, 0) + 1\n    d = {i: d[i] for i in sorted(d.keys())}\n    c = 0\n    for i in d:\n        if i % x == 0 and i // x in d:\n            t = min(d[i // x], d[i])\n            c += 2 * t\n            d[i] -= t\n    print(n - c)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = Counter(map(int, input().split()))\n    ans = 0\n    for i in sorted(a.keys()):\n        if i * x in a and a[i] > 0:\n            res = min(a[i], a[i * x])\n            a[i] -= res\n            a[i * x] -= res\n    print(sum(a.values()))", "from collections import Counter\nfor i in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    ls = Counter(l)\n    for i in l:\n        if i in ls and i * x in ls and (ls[i] > 0) and (ls[i * x] > 0):\n            ls[i] -= 1\n            ls[i * x] -= 1\n    no = ls.values()\n    print(sum(no))", "from collections import Counter\nfor i in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    ls = Counter(l)\n    for i in l:\n        if i in ls and i * x in ls and (ls[i] > 0) and (ls[i * x] > 0):\n            ls[i] -= 1\n            ls[i * x] -= 1\n    no = ls.values()\n    print(sum(no))", "for t in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = [*map(int, input().split())]\n    l = {}\n    for i in a:\n        if l.get(i, 0):\n            l[i] += 1\n        else:\n            l[i] = 1\n    for i in sorted(a):\n        if l.get(i * x, 0):\n            if l[i * x] != 0 and l[i] != 0:\n                l[i * x] -= 1\n                l[i] -= 1\n    print(sum(l.values()))", "from collections import Counter\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = Counter(map(int, input().split()))\n    ans = 0\n    for i in sorted(a.keys()):\n        if i * x in a and a[i] > 0:\n            res = min(a[i], a[i * x])\n            a[i] -= res\n            a[i * x] -= res\n    print(sum(a.values()))", "for i in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = dict()\n    for i in l:\n        d[i] = d.get(i, 0) + 1\n    d = {i: d[i] for i in sorted(d.keys())}\n    c = 0\n    for i in d:\n        if i % x == 0 and i // x in d:\n            t = min(d[i // x], d[i])\n            c += 2 * t\n            d[i] -= t\n    print(n - c)", "t = int(input())\nfor tt in range(t):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    di = {}\n    score = 0\n    for i in range(n):\n        if a[i] * x not in di:\n            score += 1\n            if a[i] not in di:\n                di[a[i]] = 1\n            else:\n                di[a[i]] += 1\n        elif di[a[i] * x] >= 1:\n            score -= 1\n            di[a[i] * x] -= 1\n        else:\n            score += 1\n            if a[i] not in di:\n                di[a[i]] = 1\n            else:\n                di[a[i]] += 1\n    print(score)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    a = [int(v) for v in input().split()]\n    a.sort()\n    count = defaultdict(int)\n    total = 0\n    for ai in a:\n        if ai % x != 0:\n            count[ai] += 1\n            continue\n        if count[ai // x] != 0:\n            total += 2\n            count[ai // x] -= 1\n        else:\n            count[ai] += 1\n    print(n - total)", "n = int(input())\nfor i in range(n):\n    (tam, x) = map(int, input().split())\n    lista = list(map(int, input().split()))\n    dicio = {}\n    for item in lista:\n        if item in dicio:\n            dicio[item] += 1\n        else:\n            dicio[item] = 1\n    total = 0\n    for item in sorted(dicio):\n        esperado = item * x\n        if esperado not in dicio:\n            total += dicio[item]\n        elif dicio[item] <= dicio[esperado]:\n            dicio[esperado] -= dicio[item]\n            dicio[item] = 0\n            continue\n        elif dicio[item] > dicio[esperado]:\n            total += dicio[item] - dicio[esperado]\n            dicio[esperado] = 0\n    print(total)", "for _ in range(int(input())):\n    (n, x) = list(map(int, input().split(' ')))\n    nums = list(map(int, input().split(' ')))\n    a = dict()\n    for num in nums:\n        if num in a:\n            a[num] += 1\n        else:\n            a[num] = 1\n    ans = 0\n    nums.sort()\n    for num in nums:\n        if a[num] == 0:\n            continue\n        a[num] -= 1\n        if num * x in a:\n            if a[num * x] > 0:\n                a[num * x] -= 1\n            else:\n                ans += 1\n        else:\n            ans += 1\n    print(ans)", "import math\nfrom sys import stdin\nfrom collections import Counter\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    s = set(a)\n    d = Counter(a)\n    a.sort()\n    for i in range(n):\n        if d[a[i]] > 0:\n            if a[i] * x in s:\n                if d[a[i] * x] > 0:\n                    d[a[i] * x] = d[a[i] * x] - 1\n                    d[a[i]] = d[a[i]] - 1\n    c = 0\n    for i in s:\n        c = c + d[i]\n    print(c)", "def main():\n    T = int(input())\n    for x in range(T):\n        (n, k) = list(map(int, input().split(' ')))\n        array = list(map(int, input().split(' ')))\n        array.sort()\n        vis = {}\n        for elem in array:\n            if vis.get(elem) is None:\n                vis[elem] = 1\n            else:\n                vis[elem] += 1\n        for i in range(len(array)):\n            temp = k * array[i]\n            if vis.get(temp) is None:\n                continue\n            elif vis[temp] == 0 or vis[array[i]] == 0:\n                continue\n            vis[temp] -= 1\n            vis[array[i]] -= 1\n        count = 0\n        for (key, val) in vis.items():\n            if val > 0:\n                count += val\n        print(count)\nmain()", "import math\n\ndef func(n, x, a):\n    a.sort()\n    m = {}\n    for i in range(n):\n        if m.get(a[i] / x) == None:\n            if m.get(a[i]) == None:\n                m[a[i]] = 1\n            else:\n                m[a[i]] += 1\n        elif m.get(a[i] / x) > 0:\n            m[a[i] / x] -= 1\n            if m[a[i] / x] == 0:\n                m.pop(a[i] / x)\n    return sum(m.values())\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    print(func(n, k, a))", "mod = 10 ** 9 + 7\n\ndef ri():\n    return int(input())\n\ndef rl():\n    return list(map(int, input().split()))\n\ndef rm():\n    return map(int, input().split())\nfor _ in range(ri()):\n    (n, x) = rm()\n    a = rl()\n    a.sort()\n    d = {}\n    c = 0\n    for i in a:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in a:\n        if d[i] > 0:\n            d[i] -= 1\n            if i * x not in d or d[i * x] == 0:\n                c += 1\n            else:\n                d[i * x] -= 1\n    print(c)", "from collections import Counter\nt = int(input())\nwhile t > 0:\n    (n, x) = map(int, input().split())\n    a = Counter(map(int, input().split()))\n    for i in sorted(a.keys()):\n        if i * x in a and a[i] > 0:\n            r = min(a[i], a[i * x])\n            a[i] -= r\n            a[i * x] -= r\n    print(sum(a.values()))\n    t -= 1", "for iii in range(int(input())):\n    (n, x) = map(int, input().split())\n    q = list(map(int, input().split()))\n    q.sort()\n    q1 = {}\n    for i in q:\n        q1[i] = q1.get(i, 0) + 1\n    cout = n\n    for i in range(n):\n        f = q[i] * x\n        if q1[q[i]] == 0:\n            continue\n        if f in q1 and q1[f] > 0:\n            q1[f] -= 1\n            q1[q[i]] -= 1\n            cout -= 2\n    print(cout)", "for t in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    m = {}\n    for i in a:\n        if i not in m:\n            m[i] = 1\n        else:\n            m[i] += 1\n    count = 0\n    for i in a:\n        if m[i] == 0:\n            continue\n        m[i] -= 1\n        if i * x not in m or m[i * x] == 0:\n            count += 1\n        else:\n            m[i * x] -= 1\n    print(count)", "from collections import Counter, defaultdict\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    neededNumber = defaultdict(int)\n    for num in a:\n        if neededNumber[num] != 0:\n            neededNumber[num] -= 1\n        else:\n            neededNumber[x * num] += 1\n    print(sum(neededNumber.values()))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    dp = {}\n    for i in arr:\n        if i in dp:\n            dp[i] += 1\n        else:\n            dp[i] = 1\n    arr.sort()\n    ans = 0\n    for i in arr:\n        if i not in dp:\n            continue\n        if dp[i] == 0:\n            continue\n        dp[i] -= 1\n        if i * k not in dp:\n            ans += 1\n        else:\n            if dp[i * k] == 0:\n                ans += 1\n                continue\n            dp[i * k] -= 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    l = list(map(int, input().split()))\n    (n, k) = (l[0], l[1])\n    a = sorted(list(map(int, input().split())))\n    d = {}\n    for i in a:\n        if i not in d.keys():\n            d[i] = 1\n        else:\n            d[i] += 1\n    c = 0\n    for i in sorted(d.keys()):\n        if d[i] > 0:\n            if i * k in d.keys():\n                if d[i * k] > 0:\n                    mi = min(d[i * k], d[i])\n                    d[i * k] -= mi\n                    d[i] -= mi\n                else:\n                    c += d[i]\n                    d[i] = 0\n                if d[i] > 0:\n                    c += d[i]\n            else:\n                c += d[i]\n    print(c)", "for i in range(int(input())):\n    (n, x) = map(int, input().split())\n    arr = [int(ele) for ele in input().split()]\n    arr.sort()\n    dict = {}\n    for ele in arr:\n        dict[ele] = dict.get(ele, 0) + 1\n    for ele in arr:\n        if dict[ele] > 0:\n            if ele * x in dict and dict[ele * x] > 0:\n                dict[ele] -= 1\n                dict[ele * x] -= 1\n    count = 0\n    for key in dict:\n        count += dict[key]\n    print(count)", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    dct = {}\n    (n, x) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    nums.sort()\n    for i in range(n):\n        dct[nums[i]] = dct.get(nums[i], 0) + 1\n    ans = 0\n    for key in dct.keys():\n        if key * x in dct:\n            decrease = min(dct[key], dct[key * x])\n            dct[key] -= decrease\n            dct[key * x] -= decrease\n        ans += dct[key]\n    print(ans)", "from collections import defaultdict\nl = int(input())\nfor i in range(l):\n    (n, x) = map(int, input().split())\n    noli = list(sorted(map(int, input().split())))\n    d = defaultdict(int)\n    for j in noli:\n        if d[j]:\n            d[j] -= 1\n        else:\n            d[j * x] += 1\n    t = sum(d.values())\n    print(t)", "a = int(input())\nfor i in range(a):\n    (n, x) = map(int, input().split())\n    A = [int(x) for x in input().split()]\n    A.sort()\n    numsdict = {}\n    for num in A[::-1]:\n        if num * x in numsdict and numsdict[num * x] > 0:\n            numsdict[num * x] -= 1\n        elif num in numsdict:\n            numsdict[num] += 1\n        else:\n            numsdict[num] = 1\n    ans = 0\n    for k in numsdict.keys():\n        ans += numsdict[k]\n    print(ans)", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    cnt = 0\n    j = 0\n    for i in range(n):\n        while j < n - 1 and a[j] < a[i] * x:\n            j += 1\n        if a[j] == a[i] * x:\n            cnt += 2\n            a[j] = -1\n            a[i] = -1\n    print(n - cnt)", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    o = sorted(nums)\n    l = {x: 0 for x in o}\n    for item in o:\n        l[item] += 1\n    for item in o:\n        if l.get(item * x) and l.get(item * x) > 0 and l.get(item):\n            l[item] -= 1\n            l[item * x] -= 1\n    print(sum(l.values()))", "from collections import defaultdict\n\ndef solve(n, x, a):\n    looking = defaultdict(int)\n    for d in a:\n        looking[d] += 1\n    for d in sorted(a):\n        if looking[d] > 0 and looking[d * x] > 0:\n            looking[d] -= 1\n            looking[d * x] -= 1\n    print(sum(looking.values()))\ndebugmode = 0\nif debugmode:\n    with open('input.txt', 'r') as f:\n        t = int(f.readline())\n        for _ in range(t):\n            (n, x) = list(map(int, f.readline().split()))\n            a = list(map(int, f.readline().split()))\n            solve(n, x, a)\nelse:\n    t = int(input())\n    for _ in range(t):\n        (n, x) = list(map(int, input().split()))\n        a = list(map(int, input().split()))\n        solve(n, x, a)", "from collections import Counter\nfor t in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = [*map(int, input().split())]\n    l = Counter(a)\n    for i in sorted(set(a)):\n        if l.get(i * x, 0):\n            e = min(l[i * x], l[i])\n            l[i * x] -= e\n            l[i] -= e\n    print(sum(l.values()))", "from collections import defaultdict\nl = int(input())\nfor _ in range(0, l):\n    (n, x) = map(int, input().split())\n    numbers = [int(i) for i in input().split()]\n    numbers.sort()\n    d = defaultdict(int)\n    for i in numbers:\n        d[i] += 1\n    ans = len(numbers)\n    for key in d:\n        if key % x == 0 and key // x in d and d[key // x]:\n            ans -= 2 * min(d[key // x], d[key])\n            minimal = min(d[key // x], d[key])\n            d[key // x] -= minimal\n            d[key] -= minimal\n    print(ans)", "import collections\nt = int(input())\nfor i in range(t):\n    (n, x) = input().split()\n    n = int(n)\n    x = int(x)\n    ap = input().split()\n    a = [int(y) for y in ap]\n    a.sort()\n    fr = collections.Counter(a)\n    p = len(fr.keys())\n    ctr = 0\n    for j in fr.keys():\n        if j * x in fr.keys():\n            val = min(fr[j], fr[j * x])\n            ctr += val\n            fr[j] = fr[j] - val\n            fr[j * x] = fr[j * x] - val\n    print(n - 2 * ctr)", "t = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    d = {}\n    for num in l:\n        d[num] = d.get(num, 0) + 1\n    for num in l:\n        if d[num] > 0 and x * num in d and (d[x * num] > 0):\n            d[num] -= 1\n            d[x * num] -= 1\n    res = 0\n    for key in d:\n        res += d[key]\n    print(res)", "def read_int():\n    return int(input())\n\ndef read_int_map():\n    return map(int, input().split())\n\ndef read_int_list():\n    return list(map(int, input().split()))\nt = read_int()\nfor _ in range(t):\n    (n, x) = read_int_map()\n    a = read_int_list()\n    a.sort()\n    res = 0\n    p = 0\n    for i in range(n):\n        v = a[i]\n        if v < 0:\n            continue\n        m = v * x\n        while p < n:\n            if a[p] >= m:\n                break\n            p += 1\n        if p < n and a[p] == m:\n            a[i] = -1\n            a[p] = -1\n        else:\n            res += 1\n    print(res)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    ls = Counter(list(map(int, input().split())))\n    keys = sorted(ls.keys())\n    for item in keys:\n        if ls[item * x] > 0:\n            kom = min(ls[item], ls[item * x])\n            ls[item] -= kom\n            ls[item * x] -= kom\n    print(sum(ls.values()))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    d = {}\n    o = set()\n    res = 0\n    for k in a:\n        if k in d:\n            d[k] += 1\n        else:\n            d[k] = 1\n    l = sorted(list(d.keys()))\n    for k in l:\n        if d[k] == 0:\n            continue\n        if k * x in d:\n            f = d[k]\n            s = d[k * x]\n            diff = f - s\n            if diff >= 0:\n                res += diff\n                d[k * x] = 0\n            else:\n                d[k * x] -= f\n        else:\n            res += d[k]\n    print(res)", "from collections import Counter\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    inp = [int(i) for i in input().split()]\n    c = Counter(inp)\n    d = defaultdict(int, sorted(c.items(), key=lambda i: i[0]))\n    for i in d:\n        if i * x in d:\n            t = min(d[i], d[i * x])\n            d[i] -= t\n            d[i * x] -= t\n    print(sum(d.values()))", "inp = lambda : list(map(int, input().split()))\nt = int(input())\nfor _ in range(t):\n    (n, x) = inp()\n    a = inp()\n    cnt = 0\n    dct = dict()\n    for el in a:\n        if el in dct:\n            dct[el] += 1\n        else:\n            dct[el] = 1\n    a.sort()\n    for el in a:\n        if dct[el] == 0:\n            continue\n        if not el % x and el // x in dct and (dct[el // x] != 0):\n            dct[el // x] -= 1\n        elif x * el in dct and dct[x * el] != 0:\n            dct[x * el] -= 1\n        else:\n            cnt += 1\n        dct[el] -= 1\n    print(cnt)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = {}\n    for i in range(n):\n        if a[i] in b:\n            b[a[i]] += 1\n        else:\n            b[a[i]] = 1\n    c = 0\n    for i in sorted(b.keys()):\n        if i * k in b:\n            if b[i * k] > b[i]:\n                b[i * k] -= b[i]\n                b[i] = 0\n            else:\n                b[i] -= b[i * k]\n                b[i * k] = 0\n                c += b[i]\n        else:\n            c += b[i]\n            b[i] = 0\n    print(c)", "def solve(a, x):\n    ans = 0\n    t = dict()\n    for i in a:\n        if i not in t:\n            t.__setitem__(i, 0)\n        t[i] += 1\n    sort_keys = sorted(list(t.keys()))\n    for k in sort_keys:\n        if k * x in t:\n            minus = min(t[k], t[k * x])\n            t[k] += -minus\n            t[k * x] += -minus\n        ans += t[k]\n    return ans\ntest = int(input())\nfor i in range(0, test):\n    (n, x) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    print(solve(a, x))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    l1.sort()\n    cnt = 0\n    j = 0\n    for i in range(n):\n        while j < n - 1 and l1[j] < l1[i] * x:\n            j += 1\n        if l1[j] == l1[i] * x:\n            cnt += 2\n            l1[j] = -1\n    print(n - cnt)", "for i in range(int(input())):\n    (n, x) = map(int, input().split())\n    W = list(map(int, input().split()))\n    Map1 = {}\n    W.sort()\n    for w in W:\n        if w not in Map1:\n            Map1[w] = 1\n        else:\n            Map1[w] += 1\n    for key in Map1:\n        if Map1[key] != 0:\n            if key / x in Map1 and Map1[key / x] != 0:\n                m91 = min(Map1[key], Map1[key / x])\n                Map1[key / x] -= m91\n                Map1[key] -= m91\n    Total91 = 0\n    for q in Map1:\n        if Map1[q] != 0:\n            Total91 += Map1[q]\n    print(Total91)", "t = int(input())\nwhile t > 0:\n    cnt = 0\n    Dict = {}\n    (n, x) = [int(item) for item in input().split()]\n    list = [int(item) for item in input().split()]\n    for i in list:\n        if i in Dict:\n            Dict[i] += 1\n        else:\n            Dict[i] = 1\n    list.sort()\n    for i in range(0, n):\n        if list[i] * x in Dict:\n            if Dict[list[i]] > 0 and Dict[list[i] * x] > 0:\n                Dict[list[i]] -= 1\n                Dict[list[i] * x] -= 1\n            elif Dict[list[i]] > 0:\n                cnt += 1\n                Dict[list[i]] -= 1\n        elif Dict[list[i]] > 0:\n            cnt += 1\n            Dict[list[i]] -= 1\n    print(cnt)\n    t -= 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    l = list(map(int, input().split(' ')))\n    d = {}\n    h = {}\n    for i in range(n):\n        if l[i] in d:\n            d[l[i]] += 1\n        else:\n            d[l[i]] = 1\n    l.sort()\n    i = 0\n    cnt = 0\n    while i < n:\n        if l[i] in h and h[l[i]] > 0:\n            j = i\n            while i < j + h[l[j]]:\n                i += 1\n            h[l[j]] = 0\n        else:\n            if l[i] * k in d and d[l[i] * k] > 0:\n                d[l[i] * k] -= 1\n                if l[i] * k not in h:\n                    h[l[i] * k] = 1\n                else:\n                    h[l[i] * k] += 1\n            else:\n                cnt += 1\n            i += 1\n    print(cnt)", "from collections import deque\nt = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    dq = deque([])\n    sol = 0\n    for y in a:\n        if len(dq) > 0:\n            while dq[0] < y:\n                dq.popleft()\n                sol += 1\n                if len(dq) == 0:\n                    break\n        if len(dq) > 0 and y == dq[0]:\n            dq.popleft()\n            continue\n        dq.append(y * x)\n    print(sol + len(dq))", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (n, x) = (int(y) for y in input().split())\n    nums = [int(y) for y in input().split()]\n    nums.sort()\n    remaining_nums = Counter(nums)\n    paired = 0\n    for z in nums:\n        bigger = x * z\n        if remaining_nums[z] == 0 or remaining_nums[bigger] == 0:\n            continue\n        paired += 2\n        remaining_nums[z] -= 1\n        remaining_nums[bigger] -= 1\n    print(n - paired)", "def solve():\n    n = list(input().split())\n    x = int(n[1])\n    n = int(n[0])\n    vec = list(input().split())\n    for i in range(n):\n        vec[i] = int(vec[i])\n    memo = dict()\n    for i in vec:\n        if memo.get(i):\n            memo[i] += 1\n        else:\n            memo[i] = 1\n    ans = 0\n    for el in sorted(memo.keys()):\n        if memo.get(el):\n            for i in range(memo[el]):\n                if memo.get(el * x):\n                    memo[el * x] -= 1\n                    memo[el] -= 1\n                    if memo[el * x] == 0:\n                        memo.pop(el * x)\n                    if memo[el] == 0:\n                        memo.pop(el)\n                else:\n                    ans += 1\n    print(ans)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    solve()", "T = int(input())\nfor _ in range(T):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    d = {}\n    for i in a:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in a:\n        if i not in d.keys():\n            continue\n        if i * x in d.keys():\n            d[i] -= 1\n            d[i * x] -= 1\n            if d[i] == 0:\n                d.pop(i)\n            if d[i * x] == 0:\n                d.pop(i * x)\n        elif i % x == 0 and i // x in d.keys():\n            d[i] -= 1\n            d[i // x] -= 1\n            if d[i] == 0:\n                d.pop(i)\n            if d[i // x] == 0:\n                d.pop(i // x)\n    count = 0\n    for i in d.values():\n        count += i\n    print(count)", "t = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    i = 0\n    cnt = 0\n    dict = {}\n    for i in arr:\n        dict[i] = 0\n    for i in arr:\n        dict[i] += 1\n    for i in dict:\n        if i == 0:\n            continue\n        while dict[i] != 0:\n            if x * i in dict:\n                if dict[x * i] > 0:\n                    dict[i] -= 1\n                    dict[i * x] -= 1\n                else:\n                    cnt += 1\n                    dict[i] -= 1\n            else:\n                cnt += 1\n                dict[i] -= 1\n    print(cnt)", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nmod = 1000000007\nt = inp()\nfor i in range(t):\n    (n, x) = mul()\n    l = seq()\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    ans = 0\n    for i in sorted(d):\n        v1 = d[i]\n        v2 = d.get(i * x, 0)\n        if v1 <= v2 and v2 != 0:\n            d[i * x] -= v1\n        elif v2 != 0:\n            ans += v1 - v2\n            d[i * x] = 0\n        else:\n            ans += v1\n    print(ans)", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = sorted(map(int, input().split()))\n    q = {}\n    o = 0\n    for i in range(n):\n        q[a[i]] = q.get(a[i], 0) + 1\n    for i in range(n):\n        if q[a[i]]:\n            if a[i] * x in q and q[a[i] * x]:\n                q[a[i]] -= 1\n                q[a[i] * x] -= 1\n    print(sum(q.values()))", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    a = list(sorted(map(int, input().split())))\n    need = defaultdict(int)\n    for y in a:\n        if need[y]:\n            need[y] -= 1\n        else:\n            need[x * y] += 1\n    print(sum(need.values()))", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    a = list(sorted(map(int, input().split())))\n    insert = defaultdict(int)\n    for y in a:\n        if not insert[y]:\n            insert[x * y] += 1\n        else:\n            insert[y] -= 1\n    print(sum(insert.values()))", "from collections import Counter\nt = int(input())\nfor j in range(0, t):\n    (n, x) = map(int, input().split())\n    a = Counter(map(int, input().split()))\n    ans = 0\n    for i in sorted(a.keys()):\n        if i * x in a and a[i] > 0:\n            res = min(a[i], a[i * x])\n            a[i] -= res\n            a[i * x] -= res\n    print(sum(a.values()))", "t = int(input())\nwhile t > 0:\n    cnt = 0\n    Dict = {}\n    (n, x) = [int(item) for item in input().split()]\n    list = [int(item) for item in input().split()]\n    for i in list:\n        if i in Dict:\n            Dict[i] += 1\n        else:\n            Dict[i] = 1\n    list.sort()\n    for i in range(0, n):\n        if list[i] * x in Dict:\n            if Dict[list[i] * x] > 0 and Dict[list[i]] > 0:\n                Dict[list[i] * x] -= 1\n                Dict[list[i]] -= 1\n            elif Dict[list[i]] > 0:\n                cnt += 1\n                Dict[list[i]] -= 1\n        elif Dict[list[i]] > 0:\n            Dict[list[i]] -= 1\n            cnt += 1\n    print(cnt)\n    t -= 1", "from collections import Counter\nt = int(input())\nfor z in range(t):\n    (n, x) = map(int, input().split())\n    l = [int(i) for i in input().split()]\n    dic = Counter(l)\n    l_d = sorted(dic.keys())\n    ans = n\n    for i in l_d:\n        if dic[x * i]:\n            if dic[x * i] >= dic[i]:\n                dic[x * i] -= dic[i]\n                ans -= 2 * dic[i]\n                dic[i] = 0\n            else:\n                dic[i] -= dic[x * i]\n                ans -= 2 * dic[x * i]\n                dic[x * i] = 0\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    a = sorted(map(int, input().split()))\n    ans = 0\n    j = 0\n    for i in range(n):\n        while j < n - 1 and a[j] < a[i] * k:\n            j += 1\n        if a[j] == a[i] * k:\n            ans += 2\n            a[j] = -1\n    print(n - ans)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    ls = Counter(list(map(int, input().split())))\n    keys = sorted(ls.keys())\n    for item in keys:\n        if ls[item * x] > 0:\n            kom = min(ls[item], ls[item * x])\n            ls[item] -= kom\n            ls[item * x] -= kom\n    print(sum(ls.values()))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    ans = 0\n    h = {}\n    for i in range(n):\n        if l[i] not in h:\n            h[l[i]] = 1\n        else:\n            h[l[i]] += 1\n    for (i, j) in h.items():\n        if i * x in h:\n            if h[i * x] > j:\n                h[i * x] -= j\n                h[i] = 0\n            elif h[i * x] < j:\n                h[i] -= h[i * x]\n                h[i * x] = 0\n            else:\n                h[i] = 0\n                h[i * x] = 0\n    for (i, j) in h.items():\n        ans += j\n    print(ans)", "from collections import Counter\n\ndef fn(n, x, arr):\n    arr.sort()\n    cnt = Counter(arr)\n    for num in arr:\n        if num in cnt:\n            if not cnt[num]:\n                continue\n        if num * x in cnt and cnt[num * x]:\n            cnt[num * x] -= 1\n            cnt[num] -= 1\n    ans = 0\n    for (k, v) in cnt.items():\n        if v > 0:\n            ans += v\n    return ans\nfor _ in range(int(input())):\n    (n, x) = input().split()\n    arr = [int(i) for i in input().split()]\n    print(fn(int(n), int(x), arr))", "import heapq\nfrom collections import *\nimport math\n\ndef solve():\n    (n, x) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    d = defaultdict(int)\n    ans = 0\n    for i in a:\n        d[i] += 1\n    a.sort()\n    for i in a:\n        while d[i] > 0:\n            if d[i * x] > 0:\n                d[i * x] -= 1\n            else:\n                ans += 1\n            d[i] -= 1\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "for t in range(int(input())):\n    (n, x) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    hash_ = {i: 0 for i in set(a)}\n    for i in a:\n        hash_[i] += 1\n    ans = 0\n    for i in sorted(a):\n        nxt = i * x\n        if nxt in hash_:\n            if hash_[nxt] > 0 and hash_[i] > 0:\n                hash_[nxt] -= 1\n                hash_[i] -= 1\n            elif hash_[nxt] == 0 and hash_[i] > 0:\n                hash_[i] -= 1\n                ans += 1\n        elif hash_[i] > 0:\n            hash_[i] -= 1\n            ans += 1\n    print(ans)", "import collections\nt = int(input())\nfor i in range(t):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    ans = 0\n    hmap = collections.defaultdict(int)\n    for i in range(n):\n        hmap[arr[i]] += 1\n    for (i, j) in hmap.items():\n        if i * x not in hmap:\n            ans += j\n            hmap[i] = 0\n        elif hmap[i] > hmap[i * x]:\n            ans += hmap[i] - hmap[i * x]\n            hmap[i] = 0\n            hmap[i * x] = 0\n        elif hmap[i] < hmap[i * x]:\n            hmap[i * x] -= hmap[i]\n            hmap[i] = 0\n        else:\n            hmap[i] = 0\n            hmap[i * x] = 0\n    print(ans)", "from math import ceil, log, floor, sqrt, gcd\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    d = {}\n    for i in range(n):\n        try:\n            d[l[i]] += 1\n        except:\n            d[l[i]] = 1\n    for i in d:\n        if i * k in d:\n            if d[i] > 0 and d[i * k] > 0:\n                sub = min(d[i], d[i * k])\n                d[i] -= sub\n                d[i * k] -= sub\n    print(sum(d.values()))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    great = 0\n    dic = {}\n    for k in a:\n        if k in dic:\n            dic[k] += 1\n        else:\n            dic[k] = 1\n    for i in dic:\n        while dic[i] > 0:\n            if i * x in dic and dic[i * x] > 0:\n                dic[i] -= 1\n                dic[i * x] -= 1\n            else:\n                great += dic[i]\n                dic[i] = 0\n    print(great)", "for t in range(int(input())):\n    (n, x) = map(int, input().split())\n    A = [int(i) for i in input().split()]\n    d = dict()\n    for i in A:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    A.sort()\n    count = 0\n    for i in range(n):\n        (x1, x2) = (A[i], A[i] * x)\n        if x1 in d and x2 in d:\n            if d[x1] > 0 and d[x2] > 0:\n                d[x1] -= 1\n                d[x2] -= 1\n            elif d[x1] > 0 and d[x2] == 0:\n                count += 1\n                d[x1] -= 1\n        elif d[x1] > 0:\n            count += 1\n            d[x1] -= 1\n    print(count)", "import collections\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    d = collections.Counter(arr)\n    ans = 0\n    for k in sorted(d.keys()):\n        if d[k * x] > 0:\n            a = d[k * x]\n            b = d[k]\n            if b > a:\n                ans += b - a\n                d[k] = 0\n                d[k * x] = 0\n            else:\n                d[k] = 0\n                d[k * x] -= b\n        else:\n            ans += d[k]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, x) = [int(x) for x in input().split(' ')]\n    l = sorted([int(x) for x in input().split(' ')])\n    m = {}\n    for a in l:\n        if a not in m:\n            m[a] = 1\n        else:\n            m[a] += 1\n    ans = 0\n    for a in l:\n        if m[a] == 0:\n            continue\n        m[a] -= 1\n        if a * x not in m or m[a * x] == 0:\n            ans += 1\n        else:\n            m[a * x] -= 1\n    print(ans)", "for _ in range(int(input())):\n    (n, p) = map(int, input().split())\n    a = sorted(map(int, input().split()))\n    c = {}\n    for x in a:\n        c[x] = c.get(x, 0) + 1\n    d = 0\n    while 1:\n        while a and (not c[a[-1]]):\n            a.pop()\n        if not a:\n            break\n        x = a.pop()\n        c[x] -= 1\n        if x % p or not c.get(x // p, 0):\n            d += 1\n        else:\n            c[x // p] -= 1\n    print(d)", "import sys\nimport math\nttime = int(input())\nfor ccount in range(ttime):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    mark = [False for i in range(len(a))]\n    pointer = 0\n    cnt = 0\n    for i in range(len(a)):\n        if mark[i] == False:\n            while pointer < len(a) and (a[pointer] < a[i] * x or mark[pointer]):\n                pointer += 1\n            if pointer < len(a) and a[pointer] == a[i] * x and (mark[pointer] == False):\n                cnt += 1\n                mark[pointer] = True\n    print(len(a) - cnt * 2)", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if a[i] in d:\n            d[a[i]] += 1\n        else:\n            d[a[i]] = 1\n    cnt = 0\n    a.sort(reverse=True)\n    for i in range(n):\n        if a[i] in d:\n            if a[i] % x == 0 and a[i] // x in d:\n                d[a[i]] -= 1\n                if d[a[i]] == 0:\n                    d.pop(a[i])\n                d[a[i] // x] -= 1\n                if d[a[i] // x] == 0:\n                    d.pop(a[i] // x)\n            else:\n                cnt += d[a[i]]\n                d.pop(a[i])\n    print(cnt)", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dic = {}\n    s = set()\n    for i in a:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n            s.add(i)\n    ans = 0\n    s = list(s)\n    s.sort()\n    for i in s:\n        for _ in range(dic[i]):\n            if i * x in dic and dic[i * x] > 0:\n                dic[i * x] -= 1\n            else:\n                ans += 1\n                dic[i] = 0\n    print(ans)", "from collections import Counter, deque, defaultdict\nfrom itertools import accumulate, product, groupby\nimport operator\nimport math\nfrom functools import reduce\nimport sys\nimport decimal\n\ndef readIntLine():\n    return [int(char) for char in input().split()]\n\ndef readCharLine():\n    return [char for char in input().split()]\n\ndef solve():\n    (n, x) = readIntLine()\n    arr = readIntLine()\n    counter = Counter(arr)\n    nums = sorted([num for (num, count) in counter.items()])\n    ans = 0\n    for num in nums:\n        count = counter[num]\n        if count == 0:\n            continue\n        num2 = num * x\n        if num2 not in counter or counter[num2] == 0:\n            ans += count\n        else:\n            count2 = counter[num2]\n            if count == count2:\n                counter[num2] = 0\n                continue\n            elif count2 < count:\n                counter[num2] = 0\n                ans += count - count2\n            else:\n                counter[num2] -= count\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "t = int(input())\nfor i in range(0, t):\n    (n, x) = [int(y) for y in input().split()]\n    a = list(map(int, input().split()))\n    a.sort()\n    hash_map = {}\n    for j in a:\n        if hash_map.get(j) == None:\n            hash_map[j] = 1\n        else:\n            hash_map[j] += 1\n    keys = hash_map.keys()\n    for k in keys:\n        if hash_map.get(k * x) != None:\n            if hash_map[k] > 0 and hash_map[x * k]:\n                hash_map[x * k] -= hash_map[k]\n                hash_map[k] = 0\n    count = 0\n    for k in keys:\n        if hash_map[k] != 0:\n            count += abs(hash_map[k])\n    print(count)", "import sys\nfrom collections import Counter\n\nclass Solution:\n\n    def call(self, input):\n        problems = self.parse(input)\n        for problem in problems:\n            self.solve(problem)\n\n    def parse(self, input):\n        raw = [text.split(' ') for text in input]\n        raw.pop(0)\n        problems = []\n        for i in range(len(raw) // 2):\n            problems.append({'n': int(raw[2 * i][0]), 'x': int(raw[2 * i][1]), 'nums': [int(a) for a in raw[2 * i + 1]]})\n        return problems\n\n    def solve(self, problem):\n        freq = dict(Counter(problem['nums']))\n        cluster = []\n        explored = set()\n        nums = list(freq)\n        nums.sort()\n        for num in nums:\n            if num in explored:\n                continue\n            explored.add(num)\n            group = [freq[num]]\n            while num * problem['x'] in freq.keys():\n                num *= problem['x']\n                explored.add(num)\n                group.append(freq[num])\n            cluster.append(group)\n        remaining = 0\n        for group in cluster:\n            for i in range(len(group) - 1):\n                pairs = min(group[i], group[i + 1])\n                group[i] -= pairs\n                group[i + 1] -= pairs\n            remaining += sum(group)\n        print(remaining)\n        return remaining\ninput = sys.stdin.readlines()\nSolution().call(input)", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l = sorted(l)\n    c = 0\n    d = {}\n    for i in range(n):\n        if l[i] in d:\n            d[l[i]] += 1\n        else:\n            d[l[i]] = 1\n    for i in l:\n        if i in d and d[i] > 0:\n            if x * i in d and d[x * i] > 0:\n                d[i] -= 1\n                d[x * i] -= 1\n            else:\n                c += 1\n                d[i] -= 1\n    print(c)", "import collections\nfrom math import ceil, gcd, sqrt, log\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    (n, x) = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n    net = collections.Counter(A)\n    ans = 0\n    for i in A:\n        if net[i] > 0:\n            comp = i * x\n            if comp in net and net[comp] > 0:\n                net[comp] -= 1\n            else:\n                ans += 1\n            net[i] -= 1\n    print(ans)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1"]