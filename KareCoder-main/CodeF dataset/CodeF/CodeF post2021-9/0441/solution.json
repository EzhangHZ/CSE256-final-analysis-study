["import sys\n\ndef get_ans(n, banknotes, denominations):\n    banknotes += 1\n    ans = 0\n    for i in range(n - 1):\n        can_use = ten_powers[denominations[i + 1] - denominations[i]] - 1\n        notes_using = min(banknotes, can_use)\n        banknotes -= notes_using\n        ans += ten_powers[denominations[i]] * notes_using\n        if banknotes == 0:\n            break\n    if banknotes > 0:\n        ans += ten_powers[denominations[n - 1]] * banknotes\n    return ans\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nten_powers = [1 for i in range(10)]\ntemp = 1\nfor i in range(1, 10):\n    temp = temp * 10\n    ten_powers[i] = temp\nt = int(input())\nfor i in range(t):\n    (n, banknotes) = input().split()\n    (n, banknotes) = (int(n), int(banknotes))\n    denominations = map(int, input().split())\n    denominations = sorted(denominations)\n    print(get_ans(n, banknotes, denominations))", "import sys, math\ninput = sys.stdin.readline\nINF = int(1000000000.0) + 7\n\ndef solve():\n    (n, k) = map(int, input().split())\n    data = list(map(int, input().split()))\n    cur = 0\n    ans = 0\n    for i in range(n - 1):\n        now = 10 ** (data[i + 1] - data[i]) - 1\n        if cur + now <= k:\n            ans += 10 ** data[i] * now\n            cur += now\n        else:\n            ans += 10 ** data[i] * (k + 1 - cur)\n            cur = k + 1\n            break\n    if cur == k + 1:\n        print(ans)\n        return\n    else:\n        print(ans + (k + 1 - cur) * 10 ** data[-1])\nt = int(input())\nwhile t:\n    t -= 1\n    solve()", "def solve():\n    t = int(input())\n    for _ in range(t):\n        (n, k) = [int(s) for s in input().split()]\n        a = [int(s) for s in input().split()]\n        rep = True\n        max_pow = 1\n        for i in range(1, n):\n            new_pow = 10 ** (a[i] - a[i - 1])\n            if rep:\n                if new_pow <= k + 1:\n                    k -= new_pow - 1\n                    max_pow *= new_pow\n                else:\n                    rep = False\n        print((k + 2) * max_pow - 1)\nsolve()", "import sys\ninp = sys.stdin.readline\n\ndef solve():\n    (n, k) = map(int, inp().split())\n    a = list(map(int, inp().split()))\n    c = [0] * n\n    for i in range(n - 1):\n        c[i] = 10 ** (a[i + 1] - a[i]) - 1\n    c[n - 1] = 2000000000\n    s = 0\n    r = []\n    for i in range(n):\n        if s + c[i] > k:\n            for j in range(i):\n                v = str(c[j])\n                r.append(v + '0' * (len(v) - a[j + 1] - a[j]))\n            r.append(str(k + 1 - s))\n            break\n        s += c[i]\n    r.reverse()\n    print(''.join(r))\n\ndef main():\n    for i in range(int(inp())):\n        solve()\nmain()", "import math\nimport sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    answer = ''\n    (n, k) = map(int, input().split())\n    k += 1\n    data = list(map(int, input().split()))\n    li = []\n    for i in range(1, n):\n        li.append(data[i] - data[i - 1])\n    for t in li:\n        temp = pow(10, t) - 1\n        if k >= temp:\n            k -= temp\n            answer = str(temp) + answer\n        else:\n            answer = str(k) + answer\n            k = 0\n        if k == 0:\n            break\n    if k > 0:\n        answer = str(k) + answer\n    print(answer)", "def count(n, a, k):\n    ans = [0] * n\n    for i in range(n - 1):\n        max_fill = 10 ** (a[i + 1] - a[i]) - 1\n        if k < max_fill:\n            ans[i] = k + 1\n            return ans\n        ans[i] += max_fill\n        k -= max_fill\n    ans[n - 1] = k + 1\n    return ans\n\ndef solve(n, a, k):\n    c = count(n, a, k)\n    return sum((10 ** a[i] * c[i] for i in range(n)))\n\ndef main():\n    tests = int(input())\n    ans = [None] * tests\n    for t in range(tests):\n        (n, k) = map(int, input().split())\n        a = [*map(int, input().split())]\n        ans[t] = solve(n, a, k)\n    print(*ans, sep='\\n')\nmain()", "import sys\ninput = iter(sys.stdin.read().splitlines()).__next__\n\ndef solve(n, k, A):\n    ret = 0\n    remK = k + 1\n    for i in range(n - 1):\n        t = min(10 ** (A[i + 1] - A[i]) - 1, remK)\n        remK -= t\n        assert remK >= 0\n        ret += t * 10 ** A[i]\n        if remK == 0:\n            return ret\n    ret += remK * 10 ** A[-1]\n    return ret\nTC = int(input())\nfor tc in range(TC):\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    res = solve(n, k, A)\n    print(res)", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nH = 1000000000 + 7\nfor _ in range(I()):\n    (n, k) = M()\n    k += 1\n    l = L()\n    s = ''\n    i = 0\n    while i < n and k > 0:\n        if i + 1 < n:\n            a = '9' * (l[i + 1] - l[i])\n            if k >= int(a):\n                k -= int(a)\n                s += a\n            else:\n                s += str(k)[::-1]\n                break\n            i += 1\n        else:\n            s += str(k)[::-1]\n            break\n    print(s[::-1])", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nH = 1000000000 + 7\nfor _ in range(I()):\n    (n, k) = M()\n    k += 1\n    l = L()\n    s = ''\n    i = 0\n    while i < n and k > 0:\n        if i + 1 < n:\n            a = '9' * (l[i + 1] - l[i])\n            if k >= int(a):\n                k -= int(a)\n                s += a\n            else:\n                s += str(k)[::-1]\n                break\n            i += 1\n        else:\n            s += str(k)[::-1]\n            break\n    print(s[::-1])", "def banknotes(n, k, a):\n    amount = 0\n    for i in range(n):\n        max_num = a[i + 1] // a[i] - 1\n        if k > max_num:\n            k -= max_num\n            amount = amount + a[i] * max_num\n        else:\n            amount = amount + a[i] * k\n            k = 0\n    return amount\nt = int(input())\nfor i in range(t):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    a = input().split(' ')\n    a = [10 ** int(ai) for ai in a]\n    a.append(10 ** 18)\n    print(banknotes(n, k + 1, a))", "def solve(test_num: int) -> None:\n    (n, k) = [int(a) for a in input().split(' ')]\n    banknotes = [10 ** int(a) for a in input().split(' ')]\n    k += 1\n    index = 0\n    money = 0\n    while k > 0:\n        if n - 1 > index:\n            limit = banknotes[index + 1] // banknotes[index] - 1\n        else:\n            limit = k\n        if k > limit:\n            money += banknotes[index] * limit\n            k -= limit\n        else:\n            money += banknotes[index] * k\n            k = 0\n        index += 1\n    print(money)\ntest_num: int = int(input())\nfor i in range(1, test_num + 1):\n    solve(i)", "t = int(input())\nans = []\nwhile t > 0:\n    number = 0\n    t -= 1\n    (n, k) = [int(i) for i in input().split()]\n    s = [10 ** int(i) for i in input().split()]\n    for i in range(1, n):\n        if s[i] // s[i - 1] > k:\n            if s[i] // s[i - 1] - 1 == k:\n                number = number + k * s[i - 1] + s[i]\n                k = 0\n                break\n            else:\n                number += (k + 1) * s[i - 1]\n                k = 0\n                break\n        else:\n            number += (s[i] // s[i - 1] - 1) * s[i - 1]\n            k -= s[i] // s[i - 1] - 1\n    if k != 0:\n        number += (k + 1) * s[-1]\n    ans.append(number)\nfor i in ans:\n    print(i)", "t = int(input())\nb = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000]\nfor i in range(t):\n    s = input().split(' ')\n    n = int(s[0])\n    k = int(s[1])\n    k = k + 1\n    s = input().split(' ')\n    ans = 0\n    for i in range(len(s) - 1):\n        cnt = b[int(s[i + 1])] // b[int(s[i])] - 1\n        if k >= cnt:\n            ans = ans + b[int(s[i])] * cnt\n            k = k - cnt\n        else:\n            ans = ans + b[int(s[i])] * k\n            k = 0\n            break\n    if k > 0:\n        ans = ans + b[int(s[len(s) - 1])] * k\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, k) = [int(x) for x in input().split()]\n    burls = [int(x) for x in input().split()]\n    cnt = 0\n    ans = ''\n    for i in range(1, len(burls)):\n        temp_diff = burls[i] - burls[i - 1]\n        cnt += 10 ** temp_diff - 1\n        if cnt > k:\n            cnt -= 10 ** temp_diff - 1\n            break\n        ans = '9' * temp_diff + ans\n    ans = str(k - cnt + 1) + ans\n    print(ans)", "def solve():\n    (n, k) = list(map(int, input().split()))\n    k += 1\n    ans = 0\n    arr = list(map(int, input().split()))\n    for i in range(n - 1):\n        if k > 0:\n            x = pow(10, arr[i + 1] - arr[i]) - 1\n            val = min(x, k)\n            ans += pow(10, arr[i]) * val\n            k -= val\n    ans += k * pow(10, arr[n - 1])\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "import sys\nreadline = sys.stdin.readline\nT = int(readline())\nfor _ in range(T):\n    (N, K) = map(int, readline().split())\n    K += 1\n    A = [pow(10, a) for a in map(int, readline().split())][::-1]\n    ans = 0\n    while K:\n        a0 = A.pop()\n        if A:\n            a1 = A[-1]\n            ans += min(a1 // a0 - 1, K) * a0\n            K -= min(a1 // a0 - 1, K)\n        else:\n            ans += K * a0\n            K = 0\n    print(ans)", "import math\ntt = int(input())\nANS = []\nwhile tt > 0:\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    a = [int(i) for i in input().split()]\n    b = []\n    for i in range(n - 1):\n        b.append(pow(10, a[i + 1] - a[i]) - 1)\n    ans = 0\n    cnt = 0\n    ind = n - 1\n    for i in range(n - 1):\n        if cnt + b[i] >= k + 1:\n            ind = i\n            break\n        cnt += b[i]\n    kk = k + 1 - cnt\n    for i in range(ind):\n        ans += pow(10, a[i]) * b[i]\n    ans += kk * pow(10, a[ind])\n    ANS.append(ans)\n    tt -= 1\nfor ans in ANS:\n    print(ans)", "def solve():\n    (n, k) = map(int, input().split())\n    denom = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        res = 10 ** (denom[i + 1] - denom[i]) - 1\n        if res > k:\n            ans += (k + 1) * 10 ** denom[i]\n            return ans\n        elif res == k:\n            ans += k * 10 ** denom[i] + 10 ** denom[i + 1]\n            return ans\n        else:\n            ans += res * 10 ** denom[i]\n            k -= res\n    return ans + (k + 1) * 10 ** denom[-1]\nt = int(input())\nfor _ in range(t):\n    print(solve())", "import sys\ninput = sys.stdin.readline\n\ndef printL(list):\n    sys.stdout.write(' '.join(map(str, list)) + '\\n')\n\ndef printN(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef f(s, a, n):\n    m = s\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        ans += m // a[i]\n        m -= a[i] * (m // a[i])\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    lft = k + 1\n    m = 0\n    for i in range(0, n - 1):\n        m += pow(10, a[i]) * min(lft, pow(10, a[i + 1] - a[i]) - 1)\n        lft -= min(lft, pow(10, a[i + 1] - a[i]) - 1)\n        if lft <= 0:\n            break\n    if lft > 0:\n        m += pow(10, a[n - 1]) * lft\n    printN(m)", "def solve():\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    val = 0\n    for i in range(n):\n        if i == n - 1:\n            val += k * 10 ** a[i]\n            break\n        diff = 10 ** (a[i + 1] - a[i])\n        if k < diff - 1:\n            val += k * 10 ** a[i]\n            break\n        if i == 0:\n            k -= diff - 2\n            val += diff - 2\n        else:\n            k -= diff - 1\n            val += (diff - 1) * 10 ** a[i]\n    print(val + 1)\nt = int(input())\nfor i in range(t):\n    solve()", "t = int(input())\nfor sdaskljdkj in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    l = [int(i) for i in input().split()]\n    ans = ''\n    last = k\n    for i in range(n - 1):\n        if last >= 10 ** (l[i + 1] - l[i]) - 1:\n            ans = '9' * (l[i + 1] - l[i]) + ans\n            last -= int('9' * (l[i + 1] - l[i]))\n        else:\n            break\n    print(str(last + 1) + ans)", "t = int(input())\nfor cyc in range(t):\n    (n, k) = map(int, input().split())\n    a = [10 ** int(i) for i in input().split()]\n    a = sorted(a)\n    a.append(10 ** 20)\n    cur = 0\n    for i in range(n):\n        cur1 = cur\n        cur += a[i + 1] // a[i] - 1\n        if cur > k:\n            print(a[i] * (k - cur1 + 2) - 1)\n            break", "def x(left, now, next_):\n    if next_ == -1:\n        return left\n    return min(left, 10 ** (next_ - now) - 1)\n\ndef solve():\n    (n, k) = map(int, input().split())\n    k += 1\n    notes = list(map(int, input().split()))\n    notes.append(-1)\n    val = 0\n    for i in range(n):\n        a = x(k, notes[i], notes[i + 1])\n        val += a * 10 ** notes[i]\n        k -= a\n    return val\nn = int(input())\nfor _ in range(n):\n    print(solve())", "from sys import stdin\nimport math\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    d = list(map(int, input().split()))\n    kk = k + 1\n    ans = 0\n    for i in range(len(d) - 1):\n        s = pow(10, d[i])\n        c = pow(10, d[i + 1] - d[i]) - 1\n        ans += min(c, kk) * s\n        kk -= min(c, kk)\n    ans += kk * pow(10, d[-1])\n    print(ans)", "def banknotes(n, k, a):\n    k += 1\n    amount = 0\n    a += [20]\n    for i in range(n):\n        max_notes = 10 ** (a[i + 1] - a[i]) - 1\n        taken_notes = min(max_notes, k)\n        k -= taken_notes\n        amount += taken_notes * 10 ** a[i]\n    return amount\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    print(banknotes(n, k, a))", "import sys\n\ndef rall():\n    return sys.stdin.readlines()\n\ndef rl():\n    return sys.stdin.readline().strip()\n\ndef rl_types(types):\n    str_list = [x for x in sys.stdin.readline().strip().split(' ')]\n    return [types[i](str_list[i]) for i in range(len(str_list))]\n\ndef pr(something=''):\n    sys.stdout.write(str(something) + '\\n')\n\ndef pra(array):\n    sys.stdout.write(' '.join([str(x) for x in array]) + '\\n')\n\ndef solve(array):\n    return array\nNT = int(rl())\nfor ti in range(NT):\n    (n, k) = map(int, rl().split(' '))\n    notes = list(map(int, rl().split(' ')))\n    kover = k + 1\n    max_per_note = [0] * len(notes)\n    for i in range(len(notes) - 1):\n        max_per_note[i] = int('9' * (notes[i + 1] - notes[i]))\n    tot = 0\n    for i in range(len(notes) - 1):\n        note_val = 10 ** notes[i]\n        tot += note_val * min(kover, max_per_note[i])\n        kover = max(0, kover - max_per_note[i])\n        if kover == 0:\n            break\n    if kover > 0:\n        note_val = 10 ** notes[-1]\n        tot += note_val * kover\n    pr(tot)", "t = int(input())\nfor sdaskljdkj in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    l = [int(i) for i in input().split()]\n    ans = ''\n    last = k\n    for i in range(n - 1):\n        if last >= 10 ** (l[i + 1] - l[i]) - 1:\n            ans = '9' * (l[i + 1] - l[i]) + ans\n            last -= int('9' * (l[i + 1] - l[i]))\n        else:\n            break\n    print(str(last + 1) + ans)", "t = int(input())\nfor tt in range(t):\n    (n, k) = map(int, input().split())\n    k += 1\n    steps = list(map(lambda x: 10 ** int(x), input().split()))\n    ans = 0\n    for i in range(0, n - 1):\n        count = steps[i + 1] // steps[i] - 1\n        ans += min(count, k) * steps[i]\n        k -= min(count, k)\n    ans += k * steps[n - 1]\n    print(ans)", "I = input\nO = int\nfor _ in range(O(I())):\n    (n, k) = map(O, I().split())\n    w = [10 ** O(x) for x in I().split()] + [10 ** 18]\n    (a, i) = (0, 0)\n    k += 1\n    while k > 0:\n        l = w[i + 1] // w[i] - 1\n        a += w[i] * min(k, l)\n        k -= l\n        i += 1\n    print(a)", "for _ in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    l = [int(i) for i in input().split()]\n    ans = ''\n    last = k\n    for i in range(n - 1):\n        if last >= 10 ** (l[i + 1] - l[i]) - 1:\n            ans = '9' * (l[i + 1] - l[i]) + ans\n            last -= int('9' * (l[i + 1] - l[i]))\n        else:\n            break\n    print(str(last + 1) + ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    k += 1\n    a = list(map(int, input().split()))\n    ans = 0\n    for j in range(n - 1):\n        z = pow(10, a[j + 1] - a[j]) - 1\n        if k >= z:\n            k -= z\n            ans += pow(10, a[j]) * z\n        else:\n            ans += pow(10, a[j]) * k\n            k = 0\n            break\n    ans += pow(10, a[n - 1]) * k\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    k += 1\n    ans = 0\n    A = [pow(10, a) for a in map(int, input().split())]\n    for i in range(n):\n        cnt = k\n        if i + 1 < n:\n            cnt = min(cnt, A[i + 1] // A[i] - 1)\n        ans += cnt * A[i]\n        k -= cnt\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    line = list(map(int, input().split()))\n    (a, k) = (0, k + 1)\n    for i in range(n - 1):\n        t = line[i + 1] - line[i]\n        minim = min(10 ** t - 1, k)\n        a = a + 10 ** line[i] * minim\n        k = k - minim\n        if k == 0:\n            break\n    print(a + 10 ** line[-1] * k)", "def solve(n, k, array):\n    ans = 0\n    current_ten = 0\n    next_ten = 0\n    i = 0\n    remaining_k = k + 1\n    while i < n - 1:\n        if remaining_k <= 0:\n            break\n        diff = pow(10, array[i + 1] - array[i]) - 1\n        if remaining_k - diff >= 0:\n            ans += pow(10, array[i]) * diff\n        else:\n            ans += pow(10, array[i]) * remaining_k\n        remaining_k = max(0, remaining_k - diff)\n        i += 1\n    ans += pow(10, array[i]) * remaining_k\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    array = [int(x) for x in input().split()]\n    print(solve(n, k, array))", "t = int(input())\nfor _ in range(t):\n    (n, K) = map(int, input().split())\n    K += 1\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        tmp = min(K, 10 ** (a[i + 1] - a[i]) - 1)\n        K -= tmp\n        ans += tmp * 10 ** a[i]\n        if K == 0:\n            break\n    if K > 0:\n        ans += K * 10 ** a[n - 1]\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(map(int, input().split()))\n    ans = 0\n    k += 1\n    for i in range(n - 1):\n        a = s[i + 1] - s[i]\n        b = min(10 ** a - 1, k)\n        ans += 10 ** s[i] * b\n        k -= b\n        if k == 0:\n            break\n    ans += 10 ** s[-1] * k\n    print(ans)", "def ans(n, k, l):\n    res = 0\n    if n == 1 or k < 9:\n        return k + 1\n    k += 1\n    for i in range(len(l) - 1):\n        if k > 0:\n            x = pow(10, l[i + 1] - l[i]) - 1\n            y = min(x, k)\n            res += y * 10 ** l[i]\n            k -= y\n        else:\n            break\n    if k > 0:\n        y = k\n        res += y * 10 ** l[-1]\n    return res\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    print(ans(n, k, l))", "for i in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    k += 1\n    mi = 0\n    for i in range(n - 1):\n        if k > 0:\n            now = 10 ** (arr[i + 1] - arr[i]) - 1\n            pre = min(now, k)\n            mi += 10 ** arr[i] * pre\n            k -= pre\n    mi += k * 10 ** arr[n - 1]\n    print(mi)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    k += 1\n    a = list(map(int, input().split()))\n    for i in range(len(a)):\n        a[i] = 10 ** a[i]\n    i = s = c = 0\n    while i < n - 1 and c < k:\n        c += a[i + 1] // a[i] - 1\n        s += (a[i + 1] // a[i] - 1) * a[i]\n        i += 1\n    if c < k:\n        s += (k - c) * a[i]\n    else:\n        s -= (c - k) * a[i - 1]\n    print(s)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(k + 1)\n        continue\n    maxn = []\n    for i in range(n - 1):\n        maxn.append(10 ** (a[i + 1] - a[i]) - 1)\n    c = 0\n    s = 0\n    flag = False\n    for i in range(n - 1):\n        if c + maxn[i] > k:\n            flag = True\n            break\n        c += maxn[i]\n        s += maxn[i] * 10 ** a[i]\n    if not flag:\n        i += 1\n    s += (k - c + 1) * 10 ** a[i]\n    print(s)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    k += 1\n    a = list(map(int, input().split()))\n    coins = []\n    for i in range(n):\n        coins.append(10 ** a[i])\n    tmp = []\n    s = 0\n    for i in range(n - 1):\n        dif = int(round(coins[i + 1] / coins[i])) - 1\n        if dif < k:\n            k -= dif\n            s += coins[i] * dif\n        else:\n            s += coins[i] * k\n            k = 0\n            break\n    if k == 0:\n        print(s)\n    else:\n        print(s + k * coins[-1])", "t = int(input())\nfor q in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    arr = [10 ** int(x) for x in input().split()]\n    lis = [arr[i + 1] / arr[i] - 1 for i in range(n - 1)]\n    k += 1\n    count = 0\n    ans = 0\n    i = 0\n    while count < k and i < n - 1:\n        if count + lis[i] <= k:\n            ans += lis[i] * arr[i]\n            count += lis[i]\n            i += 1\n        else:\n            diff = k - count\n            ans += diff * arr[i]\n            count += diff\n    if count == k:\n        print(int(ans))\n    else:\n        print(int(ans) + int((k - count) * arr[i]))", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, k) = R()\n    a = (*R(), 18)\n    s = i = 0\n    while k >= 0:\n        s += 10 ** a[i] * min((d := (10 ** (a[i + 1] - a[i]) - 1)), k + 1)\n        k -= d\n        i += 1\n    print(s)", "t = int(input())\nfor test in range(t):\n    (n, k) = map(int, input().split(' '))\n    a = [10 ** int(i) for i in input().split(' ')]\n    count = k + 1\n    i = 0\n    ans = 0\n    while count > 0:\n        if i < len(a) - 1:\n            maxb = (a[i + 1] - a[i]) // a[i]\n        else:\n            maxb = count\n        if maxb > count:\n            maxb = count\n        count -= maxb\n        ans += maxb * a[i]\n        i += 1\n    print(ans)", "def solve():\n    (n, coins) = list(map(int, input().split()))\n    denominations = list(map(int, input().split()))\n    number = 0\n    coins += 1\n    denominations.sort()\n    for i in range(n):\n        if i == n - 1:\n            value = coins\n        else:\n            leverage = 10 ** abs(denominations[i] - denominations[i + 1]) - 1\n            value = min(leverage, coins)\n        number += 10 ** denominations[i] * value\n        coins -= value\n    return number\nfor _ in range(int(input())):\n    print(solve())", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, k) = R()\n    a = (*R(), 18)\n    s = i = 0\n    while k >= 0:\n        s += 10 ** a[i] * min((d := (10 ** (a[i + 1] - a[i]) - 1)), k + 1)\n        k -= d\n        i += 1\n    print(s)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    myinput = list(map(int, input().split()))\n    n = myinput[0]\n    k = myinput[1]\n    arr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    myinput = list(map(int, input().split()))\n    for x in myinput:\n        arr[x] += 1\n    ans = 0\n    pv = 1\n    for x in range(10):\n        if arr[x] > 0:\n            pv = 1\n        else:\n            pv *= 10\n        if pv * 9 <= k:\n            k -= 9 * pv\n            ans += 9 * 10 ** x\n        else:\n            ans += (k + 1) * int(10 ** x / pv)\n            k = -1\n            break\n    ans += (k + 1) * int(10 ** 9 / pv)\n    if arr[0] == 0:\n        ans = 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    k += 1\n    a = list(map(int, input().split()))\n    v = 0\n    a = sorted(a)\n    for i in range(n - 1):\n        A = 10 ** (a[i + 1] - a[i])\n        n = min(k, A - 1)\n        k -= n\n        v += n * 10 ** a[i]\n    A = 10 ** a[-1]\n    v += k * 10 ** a[-1]\n    print(v)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    k += 1\n    arr = list(map(int, input().split()))\n    ans = 0\n    for i in range(len(arr)):\n        arr[i] = 10 ** arr[i]\n    canUse = [10 ** 20] * n\n    for i in range(0, n - 1):\n        canUse[i] = arr[i + 1] // arr[i] - 1\n    for i in range(0, n - 1):\n        useHere = min(canUse[i], k)\n        k -= useHere\n        ans += useHere * arr[i]\n    if k > 0:\n        ans += arr[n - 1] * k\n    print(ans)", "t = int(input())\nfor sdaskljdkj in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    l = [int(i) for i in input().split()]\n    ans = ''\n    last = k + 1\n    for i in range(n - 1):\n        if last == 0:\n            break\n        if last >= 10 ** (l[i + 1] - l[i]) - 1:\n            ans = '9' * (l[i + 1] - l[i]) + ans\n            last -= int('9' * (l[i + 1] - l[i]))\n        else:\n            ans = str(last) + ans\n            last = 0\n            break\n    if last == 0:\n        print(ans)\n    else:\n        print(str(last) + ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(lambda x: 10 ** int(x), input().split()))\n    index = 0\n    tot = 0\n    k += 1\n    while k != 0:\n        if index != n - 1:\n            diff = (l[index + 1] - l[index]) // l[index]\n            mini = min(diff, k)\n            k -= mini\n            tot += l[index] * mini\n            index += 1\n        else:\n            tot += l[index] * k\n            break\n    print(tot)", "t = int(input())\nfor test_case in range(t):\n    (n, k) = map(int, input().split())\n    a = [10 ** int(i) for i in input().split()]\n    s = 0\n    for i in range(n):\n        v_to_add = a[i + 1] - a[i] if i < n - 1 else a[i] * (k + 1)\n        s += v_to_add\n        k -= int(v_to_add / a[i])\n        if k <= -1:\n            s += a[i] * (k + 1)\n            break\n    print(s)", "for u in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = [int(w) for w in input().split()]\n    ans = 0\n    k += 1\n    for i in range(n - 1):\n        if k > 0:\n            temp = 10 ** (x[i + 1] - x[i]) - 1\n            ans += 10 ** x[i] * min(temp, k)\n            k -= min(temp, k)\n    ans += k * 10 ** x[n - 1]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    k += 1\n    ans = 0\n    for i in range(n):\n        if i == n - 1:\n            ans += k * 10 ** arr[i]\n            break\n        elif 10 ** (arr[i + 1] - arr[i]) - 1 >= k:\n            ans += k * 10 ** arr[i]\n            break\n        else:\n            k -= 10 ** (arr[i + 1] - arr[i]) - 1\n            ans += (10 ** (arr[i + 1] - arr[i]) - 1) * 10 ** arr[i]\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    sm = 0\n    k += 1\n    for i in range(n - 1):\n        diff = a[i + 1] - a[i]\n        temp = min(pow(10, diff) - 1, k)\n        k -= temp\n        ans += pow(10, a[i]) * temp\n        if k == 0:\n            break\n    if k != 0:\n        ans += pow(10, a[-1]) * k\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    m = [0 for i in range(n - 1)]\n    for i in range(n - 1):\n        m[i] = 10 ** (a[i + 1] - a[i]) - 1\n    ans = 0\n    for i in range(n - 1):\n        if k >= m[i]:\n            ans += m[i] * 10 ** a[i]\n            k -= m[i]\n        else:\n            ans += (k + 1) * 10 ** a[i]\n            k = -1\n            break\n    if k >= 0:\n        ans += (k + 1) * 10 ** a[n - 1]\n    print(ans)", "cases = int(input())\nfor i in range(cases):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    kk = k + 1\n    b = []\n    c = 0\n    for ii in range(len(a) - 1):\n        b.append(10 ** (a[ii + 1] - a[ii]) - 1)\n    for iii in range(len(b)):\n        if b[iii] < kk:\n            c += b[iii] * 10 ** a[iii]\n            kk -= b[iii]\n        else:\n            c += kk * 10 ** a[iii]\n            kk = 0\n            print(c)\n            break\n    if kk > 0:\n        print(c + kk * 10 ** a[-1])", "t = int(input())\nfor T in range(t):\n    (n, k) = map(int, input().split())\n    arr = input().split()\n    arr = [10 ** int(x) for x in arr]\n    k += 1\n    ans = 0\n    for i in range(n - 1):\n        if k <= arr[i + 1] // arr[i] - 1:\n            ans += arr[i] * k\n            k = 0\n            break\n        else:\n            ans += (arr[i + 1] // arr[i] - 1) * arr[i]\n            k -= arr[i + 1] // arr[i] - 1\n    print(int(ans + arr[n - 1] * k))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    res = ''\n    k += 1\n    for i in range(1, n):\n        if k >= 10 ** (a[i] - a[i - 1]) - 1:\n            k -= 10 ** (a[i] - a[i - 1]) - 1\n            res = '9' * (a[i] - a[i - 1]) + res\n        else:\n            res = str(k) + res\n            k = 0\n        if k == 0:\n            break\n    if k > 0:\n        res = str(k) + res\n    print(res)", "t = int(input())\nfor sdaskljdkj in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    l = [int(i) for i in input().split()]\n    ans = ''\n    last = k\n    for i in range(n - 1):\n        if last >= 10 ** (l[i + 1] - l[i]) - 1:\n            ans = '9' * (l[i + 1] - l[i]) + ans\n            last -= int('9' * (l[i + 1] - l[i]))\n        else:\n            ans = str(last + 1) + ans\n            last = -1\n            break\n    if last == -1:\n        print(ans)\n    else:\n        print(str(last + 1) + ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    w = [10 ** int(x) for x in input().split()] + [10 ** 18]\n    (a, i) = (0, 0)\n    k += 1\n    while k > 0:\n        l = w[i + 1] // w[i] - 1\n        a += w[i] * min(k, l)\n        k -= l\n        i += 1\n    print(a)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, k) = R()\n    a = (*R(), 18)\n    s = i = 0\n    while k >= 0:\n        s += 10 ** a[i] * min((d := (10 ** (a[i + 1] - a[i]) - 1)), k + 1)\n        k -= d\n        i += 1\n    print(s)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    k += 1\n    a = list(map(int, input().split())) + [18]\n    num = 0\n    for i in range(n):\n        t = 10 ** int(a[i + 1] - a[i]) - 1\n        if k > t:\n            k -= t\n            num += int(10 ** a[i]) * t\n        else:\n            num += int(10 ** a[i]) * k\n            print('%d' % num)\n            break", "import sys\nmax_int = sys.maxsize\n\ndef f(n):\n    return pow(10, n)\nt = int(input())\nfor x in range(t):\n    S = list(map(int, input().strip().split()))\n    n = S[0]\n    k = S[1]\n    L = list(map(int, input().strip().split()))\n    M = list(map(f, L))\n    ST = []\n    for y in range(n - 1):\n        ST = ST + [M[y + 1] // M[y] - 1]\n    ST = ST + [max_int]\n    a = k + 1\n    b = 0\n    total = 0\n    while a > 0:\n        if a >= ST[b]:\n            total = total + ST[b] * M[b]\n            a = a - ST[b]\n            b = b + 1\n        else:\n            total = total + a * M[b]\n            a = 0\n    print(total)", "t = int(input())\nfor e in range(t):\n    l1 = list(map(int, input().split()))\n    l22 = list(map(int, input().split()))\n    l2 = []\n    for i in range(len(l22)):\n        l2.append(10 ** l22[i])\n    q = l1[1]\n    s = 0\n    chk = 0\n    for i in range(len(l2) - 1):\n        if l2[i] * (q + 1) < l2[i + 1]:\n            s += l2[i] * (q + 1)\n            q = 0\n            break\n        else:\n            q1 = int(l2[i + 1] / l2[i]) - 1\n            s += l2[i] * q1\n            q = q - q1\n            if q == 0:\n                if i == len(l2) - 2:\n                    chk = 1\n    if q != 0:\n        s += (q + 1) * l2[-1]\n    if q == 0 and chk == 1:\n        s += l2[-1]\n    print(s)", "test = int(input())\nfor _ in range(test):\n    (n, k) = map(int, input().split())\n    deno = [10 ** int(x) for x in input().split()]\n    arr = [0] * n\n    arr[0] = k + 1\n    for i in range(n - 1):\n        if arr[i] >= deno[i + 1] // deno[i]:\n            tmp = arr[i]\n            arr[i] = deno[i + 1] // deno[i] - 1\n            arr[i + 1] = tmp - arr[i]\n    ans = 0\n    for i in range(n):\n        ans += arr[i] * deno[i]\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    ans = 0\n    cont = 0\n    for ind in range(len(arr)):\n        arr[ind] = 10 ** arr[ind]\n    for i in range(1, n):\n        dif = arr[i] - arr[i - 1]\n        if cont + arr[i] / arr[i - 1] - 1 <= k:\n            cont += int(arr[i] / arr[i - 1] - 1)\n            ans += arr[i] - arr[i - 1]\n        else:\n            ans += arr[i - 1] * (k - cont + 1)\n            cont = k + 1\n            break\n    if cont == k + 1:\n        print(int(ans))\n    else:\n        print(ans + (k + 1 - cont) * arr[n - 1])", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, k) = R()\n    a = (*R(), 18)\n    s = 0\n    for (x, y) in zip(a, a[1:]):\n        s += 10 ** x * max(0, min((d := (10 ** (y - x) - 1)), k + 1))\n        k -= d\n    print(s)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    notes = list(map(int, input().split()))\n    money = 0\n    k += 1\n    for i in range(n - 1):\n        if k == 0:\n            break\n        bills = (10 ** notes[i + 1] - 10 ** notes[i]) // 10 ** notes[i]\n        if k > bills:\n            money += bills * 10 ** notes[i]\n            k -= bills\n        else:\n            money += k * 10 ** notes[i]\n            k -= k\n    if k > 0:\n        money += k * 10 ** notes[-1]\n    print(money)", "import math\n\ndef solve():\n    (n, k) = list(map(int, input().split()))\n    denominations = list(map(int, input().split()))\n    (ans, remainder) = (0, k + 1)\n    max_occurances = []\n    for i in range(len(denominations) - 1):\n        occ = 10 ** denominations[i + 1] // 10 ** denominations[i] - 1\n        max_occurances.append(occ)\n    for (idx, occurance) in enumerate(max_occurances):\n        if remainder == 0:\n            break\n        power = 10 ** denominations[idx]\n        useable = min(occurance, remainder)\n        remainder -= useable\n        ans += useable * power\n    if remainder > 0:\n        d = denominations[-1]\n        ans += remainder * 10 ** d\n    return ans\nfor i in range(int(input())):\n    print(solve())", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    num = [10 ** arr[i] for i in range(n)]\n    if arr[0] != 0:\n        print(1)\n        continue\n    s = ''\n    maxd = []\n    for i in range(n - 1):\n        dd = arr[i + 1] - arr[i]\n        el = '9' * dd\n        maxd += [int(el)]\n    money = 0\n    for i in range(len(maxd)):\n        if maxd[i] > k:\n            diff = k + 1\n            money += diff * 10 ** arr[i]\n            k = -1\n            break\n        else:\n            money += maxd[i] * 10 ** arr[i]\n            k -= maxd[i]\n    if k >= 0:\n        k += 1\n        money += k * 10 ** arr[-1]\n    print(money)", "_ = int(input())\nfor __ in range(_):\n    (n, k) = map(int, input().split())\n    k += 1\n    l = list(map(int, input().split()))\n    values = [10 ** x for x in l]\n    num_of_b = []\n    out = 0\n    if n == 1:\n        print(k)\n        continue\n    for x in range(1, n):\n        num_of_b.append(values[x] // values[x - 1] - 1)\n    for x in range(0, n - 1):\n        if k >= num_of_b[x]:\n            out += num_of_b[x] * values[x]\n            k -= num_of_b[x]\n        else:\n            out += values[x] * k\n            k = 0\n            break\n    if k:\n        out += k * values[-1]\n    print(out)", "for tc in range(int(input())):\n    (n, k) = [int(xx) for xx in input().split()]\n    a = sorted([int(xx) for xx in input().split()])\n    ans = 0\n    balance = k + 1\n    for i in range(1, n):\n        cur = a[i - 1]\n        nxt = None\n        nxt = a[i]\n        diff = nxt - cur\n        max_pos = 10 ** diff - 1\n        if max_pos < balance:\n            balance -= max_pos\n            ans += 10 ** cur * max_pos\n        else:\n            ans += 10 ** cur * balance\n            balance = 0\n    print(ans + 10 ** a[-1] * balance)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    sum = 0\n    ind = 0\n    for i in range(1, n):\n        temp = 10 ** a[i] // 10 ** a[i - 1] - 1\n        if k - temp >= 0:\n            sum += temp * 10 ** a[i - 1]\n            k -= temp\n            ind = i\n        else:\n            break\n    if k > 0:\n        sum += (k + 1) * 10 ** a[ind]\n    elif k == 0:\n        sum += 10 ** a[min(ind, n - 1)]\n    print(sum)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    k += 1\n    i = 0\n    s = 0\n    d = 0\n    while i < n - 1 and k > 0:\n        d = 10 ** a[i + 1] // 10 ** a[i] - 1\n        if k - d < 0:\n            s += k * 10 ** a[i]\n            k = 0\n            break\n        else:\n            k -= d\n            s += d * 10 ** a[i]\n        i += 1\n    if k > 0:\n        s += k * 10 ** a[n - 1]\n    print(s)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    b = []\n    for i in range(n):\n        u = int('9' * (a[i + 1] - a[i])) if i < n - 1 else 9\n        if u <= k:\n            b.append(u)\n            k -= u\n        else:\n            b.append(k)\n            k = 0\n            break\n    ans = 0\n    for i in range(len(b)):\n        ans += b[i] * 10 ** a[i]\n    ans += 10 ** a[len(b) - 1]\n    if k != 0:\n        ans += k * 10 ** a[len(b) - 1]\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    coin = list(map(int, input().split()))\n    ans = 0\n    amount = 0\n    i = 0\n    k += 1\n    while k > 0:\n        if i == n - 1:\n            break\n        f = 10 ** coin[i]\n        s = 10 ** coin[i + 1]\n        t = (s - 1) // f\n        m = min(t, k)\n        amount += m * f\n        ans += m\n        k -= m\n        i += 1\n    amount += k * 10 ** coin[-1]\n    ans += k\n    print(amount)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    mas = list(map(int, input().split()))\n    out = 0\n    z = 0\n    k += 1\n    for i in range(len(mas) - 1):\n        if z != k:\n            out += 10 ** mas[i] * min(k - z, 10 ** (mas[i + 1] - mas[i]) - 1)\n            z += min(k - z, 10 ** (mas[i + 1] - mas[i]) - 1)\n        else:\n            break\n    if z != k:\n        out += 10 ** mas[-1] * (k - z)\n    print(out)", "import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time, functools, copy, statistics\ninf = float('inf')\nmod = 10 ** 9 + 7\n\ndef LI():\n    return [int(x) for x in sys.stdin.readline().split()]\n\ndef LF():\n    return [float(x) for x in sys.stdin.readline().split()]\n\ndef I():\n    return int(sys.stdin.readline())\n\ndef F():\n    return float(sys.stdin.readline())\n\ndef S():\n    return input()\n\ndef LS():\n    return input().split()\nimport time\nt = I()\nfor _ in range(t):\n    (n, k) = LI()\n    list1 = LI()\n    m = k + 1\n    ans = 0\n    if n == 1:\n        ans = m\n    else:\n        for i in range(n - 1):\n            a = m * 10 ** list1[i]\n            if a < 10 ** list1[i + 1]:\n                ans = ans + a\n                break\n            else:\n                ans = ans + (10 ** (list1[i + 1] - list1[i]) - 1) * 10 ** list1[i]\n                m = m - (10 ** (list1[i + 1] - list1[i]) - 1)\n            if i + 1 == n - 1:\n                ans = ans + m * 10 ** list1[i + 1]\n                break\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().strip().split()))\n    A = list(map(int, input().strip().split()))\n    B = []\n    total = 0\n    for i in range(len(A) - 1):\n        diff = A[i + 1] - A[i]\n        if i == 0:\n            if 10 ** diff - 2 < k - total:\n                B.append(10 ** diff - 2)\n                total += 10 ** diff - 2\n            else:\n                B.append(k - total)\n                total += k - total\n                break\n        elif total + 10 ** diff - 1 < k:\n            B.append(10 ** diff - 1)\n            total += 10 ** diff - 1\n        else:\n            B.append(k - total)\n            total += k - total\n            break\n    if total - k != 0:\n        B.append(k - total)\n    ans = 0\n    for i in range(len(B)):\n        ans += B[i] * 10 ** A[i]\n    print(ans + 1)", "t = int(input())\nimport sys\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    den = [10 ** x for x in l1]\n    avail = []\n    j = 1\n    while j < len(den):\n        avail.append(den[j] // den[j - 1] - 1)\n        j += 1\n    avail.append(10000000000000000000000)\n    ans = 0\n    z = 0\n    k += 1\n    while k:\n        l = min(k, avail[z])\n        ans += den[z] * l\n        k -= l\n        z += 1\n    print(ans)", "import math\n\ndef solve(A, l):\n    numb = 0\n    remind = l\n    while remind > 0:\n        if A:\n            x = A.pop(0)\n            if A:\n                t = (10 ** A[0] - 10 ** x) / 10 ** x\n                r = int(min(t, remind))\n                numb += int(r * 10 ** x)\n                remind -= r\n            if not A:\n                numb += int(remind * 10 ** x)\n                remind = 0\n    print(int(numb))\nt = int(input())\nfor i in range(t):\n    (n, l) = list(map(int, input().strip().split()))\n    l += 1\n    A = list(map(int, input().strip().split()))\n    solve(A, l)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    coin = list(map(int, input().split()))\n    ans = 0\n    amount = 0\n    i = 0\n    k += 1\n    while k > 0:\n        if i == n - 1:\n            amount += k * 10 ** coin[-1]\n            ans += k\n            break\n        t = (10 ** coin[i + 1] - 1) // 10 ** coin[i]\n        amount += min(t, k) * 10 ** coin[i]\n        ans += min(t, k)\n        k -= min(t, k)\n        i += 1\n    print(amount)", "number_tests = int(input(''))\nfor test in range(number_tests):\n    list_input = input('').split()\n    number_types = int(list_input[0])\n    amount = int(list_input[1]) + 1\n    list_types = input('').split()\n    result = 0\n    count = 0\n    for types in range(number_types):\n        if count != 0:\n            actual = 10 ** int(list_types[count])\n            previous = 10 ** int(list_types[count - 1])\n            diff = int(actual / previous) - 1\n            if diff >= amount and amount > 0:\n                result += amount * previous\n                amount = 0\n            elif amount > diff and amount > 0 and (types == number_types - 1):\n                result += diff * previous\n                amount -= diff\n                result += amount * actual\n            elif amount > diff and amount > 0:\n                result += diff * previous\n                amount -= diff\n        count += 1\n    if count == 1:\n        print(amount)\n    else:\n        print(result)", "import sys\nntests = int(sys.stdin.readline())\nfor _ in range(ntests):\n    inval = sys.stdin.readline().strip()\n    (ncurr, maxnotes) = inval.split()\n    maxnotes = int(maxnotes)\n    ncurr = int(ncurr)\n    curr = [int(x) for x in sys.stdin.readline().strip().split()]\n    curr += [1000]\n    maxnotes += 1\n    ans = 0\n    curridx = 0\n    while maxnotes:\n        nnotes = min(maxnotes, 10 ** (curr[curridx + 1] - curr[curridx]) - 1)\n        maxnotes -= nnotes\n        ans += nnotes * 10 ** curr[curridx]\n        curridx += 1\n    print(ans)", "def solve(n, k, a):\n    for _ in range(a[0]):\n        print('0', end='')\n    i = 0\n    s = []\n    while k > 0 and i < n - 1:\n        count = min(k, pow(10, a[i + 1] - a[i]) - 1)\n        s.append(count)\n        k = k - count\n        i = i + 1\n    if k > 0:\n        s.append(k)\n    i = len(s) - 1\n    while i >= 0:\n        print(s[i], end='')\n        i = i - 1\n    print()\nT = int(input())\nfor _ in range(T):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k) + 1\n    a = [int(i) for i in input().split()]\n    solve(n, k, a)", "def solve(k, b, n):\n    s = 0\n    i = 0\n    while k > 0:\n        if i < n - 1:\n            add = 10 ** (b[i + 1] - b[i]) - 1\n            if add < k:\n                s += add * 10 ** b[i]\n                k -= add\n            else:\n                s += k * 10 ** b[i]\n                k = 0\n        else:\n            s += k * 10 ** b[i]\n            break\n        i += 1\n    return s\nt = int(input())\nfor x in range(t):\n    a = input().split()\n    n = int(a[0])\n    k = int(a[1])\n    b = input().split()\n    b = [int(_) for _ in b]\n    print(solve(k + 1, b, n))", "from math import log\nt = int(input())\nfor i in range(t):\n    (n, k) = list(map(int, input().split(' ')))\n    req = k + 1\n    a = list(map(int, input().split(' ')))\n    ptr1 = 0\n    ptr2 = 1\n    x = 0\n    n = 0\n    while ptr2 < len(a):\n        x = int((pow(10, a[ptr2]) - pow(10, a[ptr1])) / pow(10, a[ptr1]))\n        if req < x:\n            n = n + req * pow(10, a[ptr1])\n            req = 0\n        else:\n            req = req - x\n            n = n + x * pow(10, a[ptr1])\n        ptr1 += 1\n        ptr2 += 1\n    if len(a) == 1:\n        print(req)\n    elif req > 0:\n        n += req * pow(10, a[len(a) - 1])\n        print(n)\n    else:\n        print(n)", "def bp(a, n):\n    if n == 0:\n        return 1\n    if n & 1:\n        return a * bp(a, n - 1)\n    half = bp(a, n // 2)\n    return half * half\nt = int(input())\nwhile t > 0:\n    f = input().split(' ')\n    (n, k) = f\n    n = int(n)\n    k = int(k)\n    ar = input().split(' ')\n    ans = 0\n    left = k + 1\n    for i in range(n):\n        add = left\n        if i + 1 < n:\n            add = min(add, bp(10, int(ar[i + 1]) - int(ar[i])) - 1)\n        ans += add * bp(10, int(ar[i]))\n        left -= add\n    print(ans)\n    t -= 1", "from decimal import *\n\ndef bankNotes(n, k, notes):\n    count = [0] * 10\n    i = 0\n    while i < n - 1:\n        req = Decimal(10 ** notes[i + 1] - 10 ** notes[i]) / Decimal(10 ** notes[i])\n        if req <= k:\n            k -= req\n            count[notes[i]] = req\n            i += 1\n            if k == 0:\n                count[notes[i]] += 1\n                break\n        else:\n            count[notes[i]] = k + 1\n            k = 0\n            break\n    if k > 0:\n        count[notes[-1]] += k + 1\n    ans = 0\n    for x in range(10):\n        ans += 10 ** x * count[x]\n    return int(ans)\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    print(bankNotes(n, k, l))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    val = [0] * n\n    coins = [0] * n\n    for i in range(n - 1):\n        coins[i] += (10 ** l[i + 1] - 10 ** l[i]) // 10 ** l[i]\n    req = [0] * n\n    k += 1\n    c = 0\n    ans = 0\n    while k > coins[c]:\n        k -= coins[c]\n        req[c] += coins[c]\n        c += 1\n        if c == n:\n            break\n    if c == n:\n        for i in range(n - 1):\n            ans += 10 ** l[i] * coins[i]\n        ans += 10 ** l[n - 1] * k\n    else:\n        for i in range(c):\n            ans += 10 ** l[i] * coins[i]\n        ans += 10 ** l[c] * k\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = list(map(int, input().split()))\n    mini = 0\n    counter = 0\n    for g in range(n):\n        if g + 1 != n and k + 1 - counter >= 10 ** s[g + 1] // 10 ** s[g] - 1:\n            counter += 10 ** s[g + 1] // 10 ** s[g] - 1\n            mini += (10 ** s[g + 1] // 10 ** s[g] - 1) * 10 ** s[g]\n        else:\n            mini += 10 ** s[g] * (k + 1 - counter)\n            break\n    print(mini)", "import math\ntest_cases = int(input())\nfor i in range(0, test_cases):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    A = input().split()\n    amount = 0\n    count = 0\n    for j in range(0, n - 1):\n        if count <= k:\n            diff = k - count + 1\n            temp = (int(pow(10, int(A[j + 1]))) - int(pow(10, int(A[j])))) // int(pow(10, int(A[j])))\n            if diff >= temp:\n                amount = amount + pow(10, int(A[j + 1])) - pow(10, int(A[j]))\n                count = count + temp\n            else:\n                amount = amount + diff * pow(10, int(A[j]))\n                count = count + diff\n    diff = k - count + 1\n    if diff > 0:\n        amount = amount + diff * pow(10, int(A[n - 1]))\n        count = count + diff\n    print(amount)", "for T in range(int(input())):\n    mp = [0] * 1005\n    (n, k) = map(int, input().split())\n    k += 1\n    (res, pre) = (0, 0)\n    a = list(map(int, input().split()))\n    for i in a:\n        mp[i] = 1\n    i = 0\n    while True:\n        if k <= 0:\n            break\n        if mp[i] == 1:\n            if k - 9 >= 0:\n                k -= 9\n                res += 9 * pow(10, i)\n                pre = i\n            else:\n                res += k * pow(10, i)\n                break\n        elif k - 9 * pow(10, i - pre) >= 0:\n            k -= 9 * pow(10, i - pre)\n            res += 9 * pow(10, i)\n        else:\n            res += k * pow(10, pre)\n            break\n        i += 1\n    print(res)", "from collections import deque\n\ndef f(s, a):\n    ans = 0\n    a = sorted(a, reverse=True)\n    q = deque(a)\n    while s:\n        bill = q.popleft()\n        while bill > s:\n            bill = q.popleft()\n        ans += s // bill\n        s %= bill\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [10 ** i for i in a]\n    goal = k + 1\n    i = 0\n    bill = b[i]\n    test = 0\n    notes = f(test, b)\n    while notes < goal:\n        rem = goal - notes\n        if i == n - 1:\n            test += rem * bill\n            notes = f(test, b)\n        else:\n            i += 1\n            bill = b[i]\n            test += min(rem, bill // b[i - 1] - 1) * b[i - 1]\n            notes = f(test, b)\n    print(test)"]