["import sys\nfrom itertools import chain\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\ndef readline():\n    return map(int, input().split())\nMOD = 998244353\n\ndef solve():\n    (n, m, k, q) = readline()\n    last_in_row = dict()\n    last_in_col = dict()\n    for i in range(q):\n        (x, y) = readline()\n        last_in_row[x - 1] = i\n        last_in_col[y - 1] = i\n    lr = min(last_in_row.values()) if len(last_in_row) == n else 0\n    lc = min(last_in_col.values()) if len(last_in_col) == m else 0\n    start = max(lr, lc)\n    is_valuable = [False] * q\n    for i in chain(last_in_row.values(), last_in_col.values()):\n        if i >= start:\n            is_valuable[i] = True\n    cnt = sum(is_valuable)\n    print(pow(k, cnt, MOD))\nt = int(input())\nfor __ in range(t):\n    solve()", "import sys\nfin = sys.stdin\nP = 998244353\n\ndef solve(n, m, k, q, o):\n    cx = set()\n    cy = set()\n    unique_i = set()\n    for (i, (x, y)) in enumerate(o[::-1]):\n        if len(cx) == n or len(cy) == m:\n            break\n        if x not in cx or y not in cy:\n            unique_i.add(i)\n            cx.add(x)\n            cy.add(y)\n    return pow(k, len(unique_i), P)\nt = int(fin.readline())\nfor test in range(t):\n    (n, m, k, q) = list(map(int, fin.readline().split()))\n    o = [tuple(map(int, fin.readline().split())) for _ in range(q)]\n    print(solve(n, m, k, q, o))", "import math\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, m, k, q) = map(int, input().split())\n    l = []\n    rs = set()\n    cs = set()\n    for i in range(q):\n        l.append([int(i) for i in input().split()])\n    l.reverse()\n    c = 0\n    for [x, y] in l:\n        if x not in rs or y not in cs:\n            c = c + 1\n            rs.add(x)\n            cs.add(y)\n        if len(rs) == n or len(cs) == m:\n            break\n    print(pow(k, c, 998244353))", "import math\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, m, k, q) = map(int, input().split())\n    l = []\n    rs = set()\n    cs = set()\n    for i in range(q):\n        l.append([int(i) for i in input().split()])\n    l.reverse()\n    c = 0\n    for i in range(len(l)):\n        if l[i][0] not in rs or l[i][1] not in cs:\n            c = c + 1\n            rs.add(l[i][0])\n            cs.add(l[i][1])\n        if len(rs) == n or len(cs) == m:\n            break\n    print(pow(k, c, 998244353))", "import sys\ninput = sys.stdin.readline\n\ndef solve(n, m, k, q, arr):\n    modulo = 998244353\n    if n == 1 or m == 1:\n        print(k % modulo)\n        return\n    dp = [0] * q\n    dp[-1] = k\n    (rSet, cSet) = (set(), set())\n    rSet.add(arr[-1][0])\n    cSet.add(arr[-1][1])\n    for i in range(q - 2, -1, -1):\n        (x, y) = arr[i]\n        if x in rSet or y in cSet:\n            if x not in rSet:\n                if len(cSet) == m:\n                    dp[i] = dp[i + 1]\n                else:\n                    dp[i] = dp[i + 1] * k % modulo\n            elif y not in cSet:\n                if len(rSet) == n:\n                    dp[i] = dp[i + 1]\n                else:\n                    dp[i] = dp[i + 1] * k % modulo\n            else:\n                dp[i] = dp[i + 1]\n        else:\n            dp[i] = dp[i + 1] * k % modulo\n        rSet.add(x)\n        cSet.add(y)\n    print(dp[0])\nfor _ in range(int(input())):\n    (n, m, k, q) = map(int, input().split())\n    arr = []\n    for _ in range(q):\n        (x, y) = map(int, input().split())\n        arr.append([x - 1, y - 1])\n    solve(n, m, k, q, arr)", "import math\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, m, k, q) = map(int, input().split())\n    l = []\n    rs = set()\n    cs = set()\n    for i in range(q):\n        l.append(tuple((int(i) for i in input().split())))\n    l.reverse()\n    c = 0\n    for i in range(len(l)):\n        if l[i][0] not in rs or l[i][1] not in cs:\n            c = c + 1\n            rs.add(l[i][0])\n            cs.add(l[i][1])\n        if len(rs) == n or len(cs) == m:\n            break\n    print(pow(k, c, 998244353))", "def solve():\n    t = int(input())\n    for r in range(t):\n        (n, m, k, q) = map(int, input().split())\n        row = set()\n        col = set()\n        q_row = []\n        q_col = []\n        result = 1\n        for i in range(q):\n            s = input().split()\n            q_row.append(int(s[0]))\n            q_col.append(int(s[1]))\n        for i in range(q - 1, -1, -1):\n            f = 0\n            if not q_row[i] in row:\n                f = 1\n                row.add(q_row[i])\n            if not q_col[i] in col:\n                f = 1\n                col.add(q_col[i])\n            if f == 1:\n                result = result * k % 998244353\n            if len(row) == n or len(col) == m:\n                break\n        print(result)\nsolve()", "from enum import Enum, auto\nimport copy\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        my_op = []\n        (n, m, k, q) = map(int, input().split())\n        for _ in range(q):\n            my_op.append(list(map(int, input().split())))\n        row_color = {}\n        col_color = {}\n        row_list = set()\n        col_list = set()\n        for (i, op) in enumerate(reversed(my_op)):\n            if op[0] not in row_color:\n                row_color[op[0]] = i\n            if op[1] not in col_color:\n                col_color[op[1]] = i\n            row_list.add(op[0])\n            col_list.add(op[1])\n            if len(row_list) == n or len(col_list) == m:\n                break\n        num_colors = len(set(row_color.values()) | set(col_color.values()))\n        res = 1\n        for _ in range(num_colors):\n            res = res * k\n            res = res % 998244353\n        print(res)\nmain()", "import sys\nfin = sys.stdin\nP = 998244353\n\ndef solve(n, m, k, q, o):\n    cx = set()\n    cy = set()\n    unique_i = set()\n    for (i, (x, y)) in enumerate(o[::-1]):\n        if len(cx) == n or len(cy) == m:\n            break\n        if x not in cx or y not in cy:\n            unique_i.add(i)\n            cx.add(x)\n            cy.add(y)\n    return pow(k, len(unique_i), P)\nt = int(fin.readline())\nfor test in range(t):\n    (n, m, k, q) = list(map(int, fin.readline().split()))\n    o = [tuple(map(int, fin.readline().split())) for _ in range(q)]\n    print(solve(n, m, k, q, o))", "import math, sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000007\nmod2 = 998244353\nfor _ in range(I()):\n    (n, m, k, q) = M()\n    queries = []\n    for i in range(q):\n        (x, y) = M()\n        queries.append([x, y])\n    r = set()\n    c = set()\n    cnt = 0\n    for (x, y) in reversed(queries):\n        if x in r and y in c or len(r) == n or len(c) == m:\n            continue\n        r.add(x)\n        c.add(y)\n        cnt += 1\n    print(pow(k, cnt, mod2))", "for _ in range(int(input())):\n    (n, m, k, q) = map(int, input().split())\n    o = [tuple(list(map(int, input().split()))) for i in range(q)][::-1]\n    xy = [set(), set()]\n    ans = 1\n    for (x, y) in o:\n        if len(xy[0]) < n and len(xy[1]) < m and (not (x in xy[0] and y in xy[1])):\n            ans *= k\n            ans %= 998244353\n            xy[0].add(x)\n            xy[1].add(y)\n    print(ans)", "for _ in range(int(input())):\n    (n, m, k, q) = [int(x) for x in input().split()]\n    l = []\n    for i in range(q):\n        (x, y) = [int(t) for t in input().split()]\n        l.append([x, y])\n    modting = 998244353\n    rowscolored = set()\n    columnscolored = set()\n    l = l[::-1]\n    kcnt = 0\n    for i in l:\n        if i[0] not in rowscolored or i[1] not in columnscolored:\n            kcnt += 1\n        columnscolored.add(i[1])\n        rowscolored.add(i[0])\n        if len(rowscolored) == n or len(columnscolored) == m:\n            break\n    print(pow(k, kcnt, modting) % modting)", "n = int(input())\nfor i in range(0, n):\n    (n, m, k, q) = map(int, input().split())\n    o = [tuple(list(map(int, input().split()))) for i in range(q)][::-1]\n    xy = [set(), set()]\n    ans = 1\n    for (x, y) in o:\n        if len(xy[0]) < n and len(xy[1]) < m and (not (x in xy[0] and y in xy[1])):\n            ans *= k\n            ans %= 998244353\n            xy[0].add(x)\n            xy[1].add(y)\n    print(ans)", "ux = []\nuy = []\n\ndef solve():\n    (n, m, k, q) = list(map(int, input().split(' ')))\n    mod = 998244353\n    while len(ux) < n + 1:\n        ux.append(False)\n    while len(uy) < m + 1:\n        uy.append(False)\n    queries = []\n    for i in range(q):\n        (x, y) = map(int, input().split(' '))\n        queries.append((x, y))\n    cr = 0\n    cc = 0\n    res = 1\n    for i in range(q - 1, -1, -1):\n        (xi, yi) = queries[i]\n        f = False\n        if cr == n or cc == m:\n            continue\n        if ux[xi] == 0:\n            ux[xi] = True\n            cr += 1\n            f = True\n        if uy[yi] == 0:\n            uy[yi] = True\n            cc += 1\n            f = True\n        if f:\n            res = res * k % mod\n    for i in range(q):\n        (xi, yi) = queries[i]\n        ux[xi] = False\n        uy[yi] = False\n    print(res)\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    (n, m, k, q) = [int(x) for x in input().split()]\n    l = []\n    for i in range(q):\n        (x, y) = [int(t) for t in input().split()]\n        l.append([x, y])\n    modting = 998244353\n    rowscolored = set()\n    columnscolored = set()\n    l = l[::-1]\n    kcnt = 0\n    for i in l:\n        if i[0] not in rowscolored or i[1] not in columnscolored:\n            kcnt += 1\n        if i[0] not in rowscolored:\n            rowscolored.add(i[0])\n        if i[1] not in columnscolored:\n            columnscolored.add(i[1])\n        if len(rowscolored) == n or len(columnscolored) == m:\n            break\n    print(pow(k, kcnt, modting) % modting)", "for _ in range(int(input())):\n    (n, m, k, q) = map(int, input().split())\n    o = [tuple(list(map(int, input().split()))) for i in range(q)][::-1]\n    xy = [set(), set()]\n    ans = 1\n    for (x, y) in o:\n        if len(xy[0]) < n and len(xy[1]) < m and (not (x in xy[0] and y in xy[1])):\n            ans *= k\n            ans %= 998244353\n            xy[0].add(x)\n            xy[1].add(y)\n    print(ans)", "for _ in range(int(input())):\n    (n, m, k, q) = map(int, input().split())\n    queries = []\n    for _ in range(q):\n        queries.append(tuple(map(int, input().split())))\n    ligneColored = set()\n    colColored = set()\n    numberOfWay = 1\n    while queries:\n        currentQ = queries.pop()\n        if len(ligneColored) == m or len(colColored) == n:\n            break\n        elif currentQ[0] in colColored and currentQ[1] in ligneColored:\n            continue\n        else:\n            numberOfWay *= k\n            numberOfWay = numberOfWay % 998244353\n            colColored.add(currentQ[0])\n            ligneColored.add(currentQ[1])\n    print(numberOfWay)", "for _ in range(int(input())):\n    (n, m, k, q) = map(int, input().split())\n    o = [tuple(list(map(int, input().split()))) for i in range(q)][::-1]\n    xy = [set(), set()]\n    ans = 1\n    for (x, y) in o:\n        if len(xy[0]) < n and len(xy[1]) < m and (not (x in xy[0] and y in xy[1])):\n            ans *= k\n            ans %= 998244353\n            xy[0].add(x)\n            xy[1].add(y)\n    print(ans)", "for _ in range(int(input())):\n    (n, m, k, q) = map(int, input().split())\n    o = [tuple(list(map(int, input().split()))) for i in range(q)][::-1]\n    xy = [set(), set()]\n    ans = 1\n    for (x, y) in o:\n        if len(xy[0]) < n and len(xy[1]) < m and (not (x in xy[0] and y in xy[1])):\n            ans *= k\n            ans %= 998244353\n            xy[0].add(x)\n            xy[1].add(y)\n    print(ans)", "for _ in range(int(input())):\n    (n, m, k, q) = map(int, input().split())\n    o = [tuple(list(map(int, input().split()))) for i in range(q)][::-1]\n    xy = [set(), set()]\n    ans = 1\n    for (x, y) in o:\n        if len(xy[0]) < n and len(xy[1]) < m and (not (x in xy[0] and y in xy[1])):\n            ans *= k\n            ans %= 998244353\n            xy[0].add(x)\n            xy[1].add(y)\n    print(ans)", "for _ in range(int(input())):\n    (n, m, k, q) = map(int, input().split())\n    o = [tuple(list(map(int, input().split()))) for i in range(q)][::-1]\n    xy = [set(), set()]\n    ans = 1\n    for (x, y) in o:\n        if len(xy[0]) < n and len(xy[1]) < m and (not (x in xy[0] and y in xy[1])):\n            ans *= k\n            ans %= 998244353\n            xy[0].add(x)\n            xy[1].add(y)\n    print(ans)", "t = int(input())\nfor tc in range(t):\n    (n, m, k, q) = map(int, input().split())\n    moves = []\n    for ops in range(q):\n        moves.append([int(fdsjk) for fdsjk in input().split()])\n    modting = 998244353\n    kcnt = 0\n    moves.reverse()\n    rowscolored = set()\n    columnscolored = set()\n    for i in moves:\n        if i[0] not in rowscolored or i[1] not in columnscolored:\n            kcnt += 1\n        if i[0] not in rowscolored:\n            rowscolored.add(i[0])\n        if i[1] not in columnscolored:\n            columnscolored.add(i[1])\n        if len(rowscolored) == n or len(columnscolored) == m:\n            break\n    print(pow(k, kcnt, modting) % modting)", "def power(a, n, m):\n    if n == 0:\n        return 1\n    if n == 1:\n        return a % m\n    if n % 2 == 0:\n        return power(a, n // 2, m) ** 2 % m\n    else:\n        return power(a, n // 2, m) * power(a, n - n // 2, m) % m\nfor some_random_name in range(int(input())):\n    (n, m, k, q) = map(int, input().split())\n    a = []\n    for i in range(q):\n        (l, b) = map(int, input().split())\n        a.append([l, b])\n    a.reverse()\n    x = set()\n    y = set()\n    pos = 0\n    for i in range(q):\n        (l, r) = (a[i][0], a[i][1])\n        if len(x) >= n or len(y) >= m:\n            break\n        if l in x and r in y:\n            continue\n        pos += 1\n        x.add(l)\n        y.add(r)\n    print(pow(k, pos, 998244353))", "class Solver1644D:\n\n    def __init__(self):\n        self.mod = 998244353\n        (self.n, self.m, self.k, self.q) = list(map(int, input().split(' ')))\n        self.inp = []\n        for i in range(self.q):\n            (x, y) = list(map(int, input().split(' ')))\n            self.inp.append([x, y])\n\n    def solve(self):\n        seen_x = {}\n        seen_y = {}\n        output = 1\n        for i in range(self.q - 1, -1, -1):\n            if len(seen_x) != self.n and len(seen_y) != self.m and (seen_x.get(self.inp[i][0]) == None or seen_y.get(self.inp[i][1]) == None):\n                output = output * self.k % self.mod\n                seen_x[self.inp[i][0]] = 1\n                seen_y[self.inp[i][1]] = 1\n        return output\nt = int(input())\nwhile t:\n    t -= 1\n    cur = Solver1644D()\n    print(cur.solve())", "def solve(n, m, s, k):\n    if m == 1 or n == 1:\n        print(k)\n        return\n    s.reverse()\n    x = dict()\n    y = dict()\n    count = 0\n    for item in s:\n        r = item[0]\n        c = item[1]\n        if r not in x or c not in y:\n            if r not in x:\n                x.__setitem__(r, '')\n            if c not in y:\n                y.__setitem__(c, '')\n            count += 1\n            if len(x) == n or len(y) == m:\n                break\n    ans = 1\n    for i in range(0, count):\n        ans = ans * k % 998244353\n    print(ans)\n    return\ntest = int(input())\nfor te in range(0, test):\n    (n, m, k, q) = list(map(int, input().split()))\n    s = []\n    for pi in range(0, q):\n        s.append(list(map(int, input().split())))\n    solve(n, m, s, k)", "mod = 998244353\nt = int(input())\nfor _ in range(t):\n    (n, m, k, q) = map(int, input().split())\n    rd = {}\n    cd = {}\n    rs = set()\n    cs = set()\n    res = 1\n    rc = []\n    for i in range(q):\n        (r, c) = map(int, input().split())\n        rc.append([r, c])\n        rd[r] = rd.get(r, 0) + 1\n        cd[c] = cd.get(c, 0) + 1\n        rs.add(r)\n        cs.add(c)\n    for (r, c) in rc:\n        if rd[r] > 1 and cd[c] > 1 or (rd[r] > 1 and len(rs) == n) or (cd[c] > 1 and len(cs) == m):\n            pass\n        else:\n            res *= k\n            res %= mod\n        rd[r] -= 1\n        if rd[r] == 0:\n            rs.remove(r)\n        cd[c] -= 1\n        if cd[c] == 0:\n            cs.remove(c)\n    print(res)", "import math\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, m, k, q) = map(int, input().split())\n    l = []\n    rs = set()\n    cs = set()\n    for i in range(q):\n        l.append([int(i) for i in input().split()])\n    l.reverse()\n    c = 0\n    for i in range(len(l)):\n        if l[i][0] not in rs or l[i][1] not in cs:\n            c = c + 1\n            rs.add(l[i][0])\n            cs.add(l[i][1])\n        if len(rs) == n or len(cs) == m:\n            break\n    print(k ** c % 998244353)", "import math\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, m, k, q) = map(int, input().split())\n    l = []\n    rs = set()\n    cs = set()\n    for i in range(q):\n        l.append([int(i) for i in input().split()])\n    l = l[::-1]\n    c = 0\n    for i in range(len(l)):\n        if l[i][0] not in rs or l[i][1] not in cs:\n            c = c + 1\n            rs.add(l[i][0])\n            cs.add(l[i][1])\n        if len(rs) == n or len(cs) == m:\n            break\n    print(k ** c % 998244353)", "from re import T\nt = int(input())\nans = []\nfor i in range(t):\n    (n, m, k, q) = tuple(map(int, input().split()))\n    arr = []\n    for i in range(q):\n        arr.append(tuple(map(int, input().split())))\n    (r, c) = (set(), set())\n    cnt = 0\n    for i in range(q - 1, -1, -1):\n        (ri, ci) = (arr[i][0], arr[i][1])\n        (rc, cc) = (False, False)\n        if len(c) == m or ri in r:\n            rc = True\n        if len(r) == n or ci in c:\n            cc = True\n        if cc and rc:\n            continue\n        cnt += 1\n        r.add(ri)\n        c.add(ci)\n    ans.append(k ** cnt % 998244353)\nfor i in ans:\n    print(i)", "for _ in range(int(input())):\n    (n, m, t, q) = map(int, input().split())\n    s = {}\n    a = []\n    for i in range(q):\n        (r, c) = map(int, input().split())\n        if f'r{r}' not in s:\n            s[f'r{r}'] = len(a)\n            a.append([f'r{r}', True, i])\n        else:\n            a[s[f'r{r}']][1] = False\n            s[f'r{r}'] = len(a)\n            a.append([f'r{r}', True, i])\n        if f'c{c}' not in s:\n            s[f'c{c}'] = len(a)\n            a.append([f'c{c}', True, i])\n        else:\n            a[s[f'c{c}']][1] = False\n            s[f'c{c}'] = len(a)\n            a.append([f'c{c}', True, i])\n    colors = set()\n    r_count = 0\n    c_count = 0\n    for (ty, valid, color) in reversed(a):\n        if valid:\n            if ty[0] == 'r':\n                if c_count == m:\n                    break\n                else:\n                    colors.add(color)\n                    r_count += 1\n            elif r_count == n:\n                break\n            else:\n                colors.add(color)\n                c_count += 1\n    print(pow(t, len(colors), 998244353))", "for _ in range(int(input())):\n    (n, m, k, q) = map(int, input().split())\n    color = []\n    x = set()\n    y = set()\n    for i in range(q):\n        color.append(list(map(int, input().split())))\n    cnt = 0\n    t1 = t2 = 0\n    for i in range(q - 1, -1, -1):\n        (xi, yi) = color[i]\n        if t1 < n and t2 < m:\n            if xi not in x and yi in y:\n                cnt += 1\n                x.add(xi)\n                t1 += 1\n            elif yi not in y and xi in x:\n                cnt += 1\n                y.add(yi)\n                t2 += 1\n            elif xi not in x and yi not in y:\n                cnt += 1\n                x.add(xi)\n                y.add(yi)\n                t1 += 1\n                t2 += 1\n        else:\n            break\n    M = 998244353\n    print(k ** cnt % M)", "for _ in range(int(input())):\n    (n, m, t, q) = map(int, input().split())\n    s = {}\n    a = []\n    for i in range(q):\n        (r, c) = map(int, input().split())\n        if f'r{r}' not in s:\n            s[f'r{r}'] = len(a)\n            a.append([f'r{r}', True, i])\n        else:\n            a[s[f'r{r}']][1] = False\n            s[f'r{r}'] = len(a)\n            a.append([f'r{r}', True, i])\n        if f'c{c}' not in s:\n            s[f'c{c}'] = len(a)\n            a.append([f'c{c}', True, i])\n        else:\n            a[s[f'c{c}']][1] = False\n            s[f'c{c}'] = len(a)\n            a.append([f'c{c}', True, i])\n    colors = set()\n    r_set = set()\n    c_set = set()\n    for (ty, valid, color) in reversed(a):\n        if valid:\n            if ty[0] == 'r':\n                if len(c_set) == m:\n                    break\n                else:\n                    colors.add(color)\n                    r_set.add(int(ty[1:]))\n            elif len(r_set) == n:\n                break\n            else:\n                colors.add(color)\n                c_set.add(int(ty[1:]))\n    print(pow(t, len(colors), 998244353))"]