["t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = input()\n    l = l[::2]\n    if '0' not in l:\n        print(n - 1)\n    elif '1' not in l:\n        print(n - 1)\n    else:\n        ma = l.find('0')\n        mi = l.rfind('1')\n        t2 = l[ma + 1:].count('0')\n        t3 = l[:mi].count('1')\n        vc0 = l.count('0')\n        u1 = -ma + t2\n        u2 = -(n - mi - 1) + t3\n        vs0 = 0\n        count = 0\n        for j in l:\n            if j == '1':\n                count += vc0 - vs0\n            else:\n                vs0 += 1\n        print(max(count + u1, count + u2, count))", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    a = sys.stdin.readline().split()\n    ans = 0\n    an2 = ji2 = an = ji = 0\n    f1 = 1\n    for i in a:\n        if i == '1':\n            ji += 1\n        else:\n            an += ji\n        if f1 and i == '0':\n            ji2 += 1\n            f1 = 0\n        elif i == '1':\n            ji2 += 1\n        else:\n            an2 += ji2\n    ans = max(ans, an, an2)\n    an = ji = 0\n    f2 = 1\n    for i in range(n - 1, -1, -1):\n        if f2 and a[i] == '1':\n            a[i] = '0'\n            break\n    for i in a:\n        if i == '1':\n            ji += 1\n        else:\n            an += ji\n    ans = max(ans, an)\n    print(ans)", "import sys\ninput = sys.stdin.readline\nnel = int(input())\nfor iline in range(nel):\n    input()\n    line = list(map(int, input().split(' ')))\n    prec_ones = 0\n    prec_ones_with_0inv = 0\n    prec_ones_with_1inv = 0\n    first_0 = False\n    poss = 0\n    poss_with_0inv = 0\n    poss_with_1inv = 0\n    try:\n        ilast1 = len(line) - line[::-1].index(1) - 1\n    except:\n        ilast1 = -1\n    for (iel, el) in enumerate(line):\n        if el == 1:\n            if iel == ilast1:\n                poss_with_1inv += prec_ones_with_1inv\n            else:\n                prec_ones_with_1inv += 1\n            prec_ones += 1\n            prec_ones_with_0inv += 1\n        else:\n            poss += prec_ones\n            poss_with_1inv += prec_ones_with_1inv\n            if not first_0:\n                prec_ones_with_0inv += 1\n                first_0 = True\n            else:\n                poss_with_0inv += prec_ones_with_0inv\n    print(max(max(poss, poss_with_0inv), poss_with_1inv))", "import sys\ninput = sys.stdin.readline\n\ndef solution():\n    T = int(input())\n    for t in range(T):\n        N = int(input())\n        num = list(map(int, input().split()))\n        (cnt, oneCnt) = (0, 0)\n        for i in range(N):\n            if num[i] == 1:\n                oneCnt += 1\n            else:\n                cnt += oneCnt\n        answer = cnt\n        (leftIdx, rightIdx) = (-1, -1)\n        for i in range(N):\n            if num[i] == 0:\n                leftIdx = i\n                break\n        for i in range(N - 1, -1, -1):\n            if num[i] == 1:\n                rightIdx = i\n                break\n        num[leftIdx] = 1\n        (cnt, oneCnt) = (0, 0)\n        for i in range(N):\n            if num[i] == 1:\n                oneCnt += 1\n            else:\n                cnt += oneCnt\n        answer = max(cnt, answer)\n        num[leftIdx] = 0\n        num[rightIdx] = 0\n        (cnt, oneCnt) = (0, 0)\n        for i in range(N):\n            if num[i] == 1:\n                oneCnt += 1\n            else:\n                cnt += oneCnt\n        answer = max(answer, cnt)\n        print(answer)\nsolution()", "def inversion_checker(string):\n    number_one = 0\n    number_inversion = 0\n    for item in string:\n        if item == 0:\n            number_inversion += number_one\n        elif item == 1:\n            number_one += 1\n    return number_inversion\n\ndef first_zero_flip(string):\n    for item in string:\n        if item == 0:\n            string[string.index(item)] = 1\n            break\n    return string\n\ndef last_one_flip(string):\n    rev = string[::-1]\n    for item in rev:\n        if item == 1:\n            rev[rev.index(item)] = 0\n            break\n    return rev[::-1]\nanswer = []\nfor i in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    dup = s.copy()\n    original_string = inversion_checker(s)\n    first_zero = inversion_checker(first_zero_flip(s))\n    last_one = inversion_checker(last_one_flip(dup))\n    answer.append(max(original_string, first_zero, last_one))\nprint(*answer, sep='\\n')", "for a in [*open(0)][2::2]:\n    a = [*map(int, a.split())]\n    ans = 0\n    z = 0\n    n = len(a)\n    for i in a:\n        z += i\n        if i == 0:\n            ans += z\n    x = ans\n    for i in range(len(a)):\n        if a[i] == 0:\n            ans = max(ans, ans - i + n - z - 1)\n            break\n    for i in range(len(a) - 1, -1, -1):\n        if a[i] == 1:\n            ans = max(ans, x - n + i + z)\n    print(ans)", "def f(a):\n    a = a[::-1]\n    s = 0\n    z = 0\n    for i in a:\n        if i:\n            s += z\n        else:\n            z += 1\n    return s\nt = int(input())\nwhile t:\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a1 = a[:]\n    a2 = a[:]\n    if 0 in a:\n        a1[a.index(0)] = 1\n    if 1 in a:\n        a2[-(a[::-1].index(1) + 1)] = 0\n    print(max(f(a), f(a1), f(a2)))\n    t -= 1", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    zeros = a.count(0)\n    ones = a.count(1)\n    rem_zeros = zeros\n    invs = 0\n    first0 = -1\n    if zeros > 0:\n        first0 = a.index(0)\n    last1 = -1\n    for i in range(n):\n        if a[i] == 1:\n            invs += rem_zeros\n            last1 = i\n        else:\n            rem_zeros -= 1\n    change0 = 0\n    if zeros > 0:\n        change0 = max(0, zeros - 1 - first0)\n    change1 = 0\n    if ones > 0:\n        change1 = max(0, ones - 1 - (n - last1 - 1))\n    print(invs + max(change0, change1))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c0 = 0\n    c1 = 0\n    p0 = -1\n    p1 = -1\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] == 0:\n            c0 += 1\n            p0 = i\n        else:\n            if c1 == 0:\n                p1 = i\n            c1 += 1\n            ans += c0\n    print(max(ans, ans + (c0 - 1) - p0, ans - (n - p1 - 1) + (c1 - 1)))", "def solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    inversions = 0\n    zeroes = 0\n    for i in range(n - 1, -1, -1):\n        if l[i] == 0:\n            zeroes += 1\n        else:\n            inversions += zeroes\n    ones = 0\n    maxgains = 0\n    for i in range(n):\n        if l[i] == 0:\n            zeroes -= 1\n            if maxgains < zeroes - ones:\n                maxgains = zeroes - ones\n        else:\n            if maxgains < ones - zeroes:\n                maxgains = ones - zeroes\n            ones += 1\n    print(inversions + maxgains)\nt = int(input())\nfor _ in range(t):\n    solve()", "def count(x, sm, n):\n    total = 0\n    for i in range(n):\n        if x[i] == 1:\n            sm -= 1\n            total += n - 1 - i - sm\n    return total\n\ndef main(n, x):\n    sm = sum(x)\n    (a, b) = (0, 0)\n    for i in range(n):\n        if x[i]:\n            a -= 1\n        else:\n            a += n - sm - 1\n            break\n    for i in range(n - 1, -1, -1):\n        if x[i] == 0:\n            b -= 1\n        else:\n            b += sm - 1\n            break\n    if a < 0 and b < 0:\n        return count(x, sm, n)\n    elif a < b:\n        return count(x, sm, n) + b\n    else:\n        return count(x, sm, n) + a\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(main(n, list(map(int, input().split()))))", "def inverse(arr):\n    (ans, ones) = (0, 0)\n    for i in arr:\n        if i == 1:\n            ones += 1\n        else:\n            ans += ones\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    result = inverse(arr)\n    tag = None\n    for i in range(n):\n        if arr[i] == 0:\n            arr[i] = 1\n            tag = i\n            break\n    result = max(result, inverse(arr))\n    if tag != None:\n        arr[tag] = 0\n    for i in range(n - 1, -1, -1):\n        if arr[i] == 1:\n            arr[i] = 0\n            break\n    print(max(result, inverse(arr)))", "for jj in range(int(input())):\n    n = int(input())\n    arr = input().split()\n    k = arr.count('1')\n    m = n - k\n    if k == 0 or m == 0:\n        print(n - 1)\n        continue\n    (x, y) = (k, m)\n    a = b = -1\n    res = 0\n    for i in range(n):\n        if arr[i] == '0':\n            if a == -1:\n                a = i\n            y -= 1\n        else:\n            b = i\n            res += y\n    print(max(res, res + m - 1 - a, res + k - 1 - (n - b - 1)))", "def maximum_numb_inversions(lst):\n    max_numb_1 = 0\n    inversion_count_1 = 0\n    first_zero = False\n    for number in lst:\n        if number == 1:\n            inversion_count_1 += 1\n        elif first_zero == False:\n            inversion_count_1 += 1\n            first_zero = True\n        else:\n            max_numb_1 += inversion_count_1\n    max_numb_2 = 0\n    inversion_count_2 = 0\n    first_one = False\n    for number in lst[::-1]:\n        if number == 0:\n            inversion_count_2 += 1\n        elif first_one == False:\n            inversion_count_2 += 1\n            first_one = True\n        else:\n            max_numb_2 += inversion_count_2\n    max_numb_3 = 0\n    inversion_count_3 = 0\n    for number in lst:\n        if number == 1:\n            inversion_count_3 += 1\n        else:\n            max_numb_3 += inversion_count_3\n    return max(max_numb_1, max_numb_2, max_numb_3)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    print(maximum_numb_inversions(lst))", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s.strip())\n\ndef invr():\n    return map(int, input().split())\nfor _ in range(inp()):\n    n = inp()\n    arr = inlt()\n    pref = []\n    suf = []\n    o = 0\n    oo = 0\n    val = 0\n    for i in arr:\n        if i == 0:\n            o += 1\n            val += oo\n        else:\n            oo += 1\n    ans = 0\n    oo = 0\n    switch = True\n    for i in arr:\n        if i == 1:\n            oo += 1\n        elif switch:\n            oo += 1\n            switch = False\n        else:\n            ans += oo\n    val = max(ans, val)\n    ans = 0\n    switch = True\n    o = 0\n    for i in arr[::-1]:\n        if i == 0:\n            o += 1\n        elif switch:\n            o += 1\n            switch = False\n        else:\n            ans += o\n    print(max(ans, val))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c0 = 0\n    c1 = 0\n    p0 = -1\n    p1 = -1\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] == 0:\n            c0 += 1\n            p0 = i\n        else:\n            if c1 == 0:\n                p1 = i\n            c1 += 1\n            ans += c0\n    print(max(ans, ans + (c0 - 1) - p0, ans - (n - p1 - 1) + (c1 - 1)))", "def inverse_couny(arr):\n    cnt1 = 0\n    cnt2 = 0\n    for i in arr:\n        if i == 1:\n            cnt1 += 1\n        else:\n            cnt2 += cnt1\n    return cnt2\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr_cop = arr[:]\n    c1 = inverse_couny(arr)\n    for i in range(n):\n        if arr[i] == 0:\n            arr[i] = 1\n            break\n    c2 = inverse_couny(arr)\n    for i in range(n - 1, -1, -1):\n        if arr_cop[i] == 1:\n            arr_cop[i] = 0\n            break\n    c3 = inverse_couny(arr_cop)\n    print(max(c1, c2, c3))", "def f(a):\n    a = a[::-1]\n    s = 0\n    z = 0\n    for i in a:\n        if i:\n            s += z\n        else:\n            z += 1\n    return s\nt = int(input())\nwhile t:\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a1 = a[:]\n    a2 = a[:]\n    if 0 in a:\n        a1[a.index(0)] = 1\n    if 1 in a:\n        a2[-(a[::-1].index(1) + 1)] = 0\n    print(max(f(a), f(a1), f(a2)))\n    t -= 1", "t = int(input())\nfor t1 in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    i = n - 1\n    zcount = 0\n    count = 0\n    lastzero = 0\n    fone = 0\n    while i >= 0:\n        if a[i] == 0:\n            zcount += 1\n            lastzero = i\n        else:\n            if i > fone:\n                fone = i\n            count += zcount\n        i -= 1\n    if zcount == 0 or zcount == n:\n        print(n - 1)\n    else:\n        if fone - zcount > zcount - lastzero - 1:\n            if fone > zcount:\n                count += fone - zcount\n        elif zcount > lastzero + 1:\n            count += zcount - lastzero - 1\n        print(count)", "def f():\n    T = int(input())\n    for _ in range(T):\n        _ = input()\n        nums = [int(c) for c in input().split()]\n        print(solve(nums))\n\ndef solve(nums):\n    original = count_inversions(nums)\n    flip_first_zero = 0\n    flip_last_one = 0\n    first_zero = -1\n    last_one = -1\n    for i in range(len(nums)):\n        x = nums[i]\n        if x == 0:\n            if first_zero == -1:\n                first_zero = i\n        else:\n            last_one = i\n    if first_zero != -1:\n        clone = nums[:]\n        clone[first_zero] = 1\n        flip_first_zero = count_inversions(clone)\n    if last_one != -1:\n        clone = nums[:]\n        clone[last_one] = 0\n        flip_last_one = count_inversions(clone)\n    return max(original, flip_first_zero, flip_last_one)\n\ndef count_inversions(nums):\n    ones = 0\n    res = 0\n    for x in nums:\n        if x == 0:\n            res += ones\n        else:\n            ones += 1\n    return res\nf()", "def inverse_couny(arr):\n    cnt1 = 0\n    cnt2 = 0\n    for i in arr:\n        if i == 1:\n            cnt1 += 1\n        else:\n            cnt2 += cnt1\n    return cnt2\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr_cop = arr[:]\n    c1 = inverse_couny(arr)\n    for i in range(n):\n        if arr[i] == 0:\n            arr[i] = 1\n            break\n    c2 = inverse_couny(arr)\n    for i in range(n - 1, -1, -1):\n        if arr_cop[i] == 1:\n            arr_cop[i] = 0\n            break\n    c3 = inverse_couny(arr_cop)\n    print(max(c1, c2, c3))", "def pos(a):\n    ones = 0\n    s = 0\n    for i in a:\n        if i == 1:\n            ones += 1\n        else:\n            s += ones\n    return s\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    i1 = pos(a)\n    zrep = orep = 0\n    b = a.copy()\n    for i in range(n):\n        if b[i] == 0:\n            b[i] = 1\n            zrep = pos(b)\n            break\n    for i in range(n - 1, -1, -1):\n        if a[i] == 1:\n            a[i] = 0\n            orep = pos(a)\n            break\n    print(max(i1, zrep, orep))", "for _ in range(int(input())):\n    n = int(input())\n    num = [int(x) for x in input().split()]\n    if len(set(num)) == 1:\n        print(n - 1)\n    else:\n        (n1, n0, n0s, n1s, r) = (0, num.index(0), 0, 0, 0)\n        for i in range(n):\n            if num[i] == 1:\n                n1 = i\n                n1s += 1\n            else:\n                n0s += 1\n                r += n1s\n        r0 = r + (n0s - 1) - n0\n        r1 = r + n1s - 1 - (n - 1 - n1)\n        print(max(r0, r1, r))", "def invs(array):\n    null = array.copy()\n    one = array.copy()\n    (a, b, c) = (0, 0, inversions(array))\n    for i in range(len(array) - 1, -1, -1):\n        if array[i] == 1:\n            null[i] = 0\n            a = inversions(null)\n            break\n    for i in range(0, len(array)):\n        if array[i] == 0:\n            one[i] = 1\n            b = inversions(one)\n            break\n    print(max(a, b, c))\n\ndef inversions(array):\n    ones = 0\n    inv = 0\n    for i in array:\n        if i == 1:\n            ones += 1\n        if i == 0:\n            inv += ones\n    return inv\nfor set in range(int(input())):\n    n = int(input())\n    mass = [int(x) for x in input().split()]\n    invs(mass)", "count = int(input())\n\ndef CountInversions(bList):\n    oneCount = 0\n    inversionsCount = 0\n    for i in bList:\n        if i == 1:\n            oneCount += 1\n        else:\n            inversionsCount += oneCount\n    return inversionsCount\nfor i in range(count):\n    numsCount = int(input())\n    binaryList = [int(e) for e in input().split(' ')]\n    inv0 = CountInversions(binaryList)\n    changedIndex = -1\n    for i in reversed(range(numsCount)):\n        if binaryList[i] == 1:\n            binaryList[i] = 0\n            changedIndex = i\n            break\n    inv1 = CountInversions(binaryList)\n    if changedIndex > -1:\n        binaryList[changedIndex] = 1\n    for i in range(numsCount):\n        if binaryList[i] == 0:\n            binaryList[i] = 1\n            changedIndex = i\n            break\n    inv2 = CountInversions(binaryList)\n    print(max([inv0, inv1, inv2]))", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if 0 not in l or 1 not in l:\n        print(n - 1)\n    else:\n        z = l.count(0)\n        o = n - z\n        if z - 1 - l[0:l.index(0)].count(1) > o - 1 - l[::-1][0:l[::-1].index(1)].count(0):\n            l[l.index(0)] = 1\n            z -= 1\n        elif o - 1 > l[::-1][0:l[::-1].index(1)].count(0):\n            l[n - l[::-1].index(1) - 1] = 0\n            z += 1\n        cz = 0\n        c = 0\n        for i in range(n):\n            if l[i] == 1:\n                c += z - cz\n            else:\n                cz += 1\n        print(c)", "def f(o):\n    c1 = 0\n    c2 = 0\n    for i in o:\n        if i == 1:\n            c1 += 1\n        else:\n            c2 += c1\n    return c2\nfor _ in range(int(input())):\n    t = int(input())\n    l = list(map(int, input().split()))\n    c1 = f(l)\n    p = l.copy()\n    for j in range(t):\n        if l[j] == 0:\n            l[j] = 1\n            break\n    c2 = f(l)\n    for j in range(t - 1, -1, -1):\n        if p[j] == 1:\n            p[j] = 0\n            break\n    c3 = f(p)\n    print(max(c1, c2, c3))", "def f(a):\n    a = a[::-1]\n    s = 0\n    z = 0\n    for i in a:\n        if i:\n            s += z\n        else:\n            z += 1\n    return s\nt = int(input())\nwhile t:\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a1 = a[:]\n    a2 = a[:]\n    if 0 in a:\n        a1[a.index(0)] = 1\n    if 1 in a:\n        a2[-(a[::-1].index(1) + 1)] = 0\n    print(max(f(a), f(a1), f(a2)))\n    t -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c0 = 0\n    c1 = 0\n    p0 = -1\n    p1 = -1\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] == 0:\n            c0 += 1\n            p0 = i\n        else:\n            if c1 == 0:\n                p1 = i\n            c1 += 1\n            ans += c0\n    print(max(ans, ans + (c0 - 1) - p0, ans - (n - p1 - 1) + (c1 - 1)))", "def calc(a):\n    ones = 0\n    sum = 0\n    for i in range(len(a)):\n        if a[i] == '1':\n            ones += 1\n        else:\n            sum += ones\n    return sum\nfor _ in range(int(input())):\n    n = int(input())\n    s = [x for x in input().split()]\n    ans = calc(s)\n    for i in range(n):\n        if s[i] == '0':\n            s[i] = '1'\n            ans = max(ans, calc(s))\n            s[i] = '0'\n            break\n    for i in range(n - 1, -1, -1):\n        if s[i] == '1':\n            s[i] = '0'\n            ans = max(ans, calc(s))\n            s[i] = '1'\n            break\n    print(ans)", "def get_total(data):\n    curr_i = 0\n    total = 0\n    for i in range(len(data)):\n        if data[i] == '1':\n            curr_i += 1\n        else:\n            total += curr_i\n    return total\ntimes = int(input())\nfor _ in range(times):\n    _ = input()\n    data = input().split()\n    first_zero = -1\n    for i in range(len(data)):\n        if data[i] == '0':\n            first_zero = i\n            break\n    last_one = -1\n    for i in range(len(data) - 1, -1, -1):\n        if data[i] == '1':\n            last_one = i\n            break\n    best = get_total(data)\n    if first_zero != -1:\n        data[first_zero] = '1'\n        best = max(best, get_total(data))\n        data[first_zero] = '0'\n    if last_one != -1:\n        data[last_one] = '0'\n        best = max(best, get_total(data))\n        data[last_one] = '1'\n    print(best)", "def inverse_couny(arr):\n    cnt1 = 0\n    cnt2 = 0\n    for i in arr:\n        if i == 1:\n            cnt1 += 1\n        else:\n            cnt2 += cnt1\n    return cnt2\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr_cop = arr[:]\n    c1 = inverse_couny(arr)\n    for i in range(n):\n        if arr[i] == 0:\n            arr[i] = 1\n            break\n    c2 = inverse_couny(arr)\n    for i in range(n - 1, -1, -1):\n        if arr_cop[i] == 1:\n            arr_cop[i] = 0\n            break\n    c3 = inverse_couny(arr_cop)\n    print(max(c1, c2, c3))", "from copy import copy\n\ndef inversions(a):\n    ones = 0\n    ans = 0\n    for i in a:\n        if i:\n            ones += 1\n        else:\n            ans += ones\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = copy(a)\n    ans = inversions(a)\n    for i in range(len(a)):\n        if a[i] == 0:\n            a[i] = 1\n            break\n    ans = max(ans, inversions(a))\n    for i in range(len(b) - 1, -1, -1):\n        if b[i] == 1:\n            b[i] = 0\n            break\n    ans = max(ans, inversions(b))\n    print(ans)", "def getSum(seq, n):\n    val = 0\n    res = 0\n    for i in range(n - 1, -1, -1):\n        if seq[i] == 0:\n            val += 1\n        else:\n            res += val\n    return res\n\ndef func(seq, n):\n    best = getSum(seq, n)\n    i = 0\n    while i < n and seq[i] == 1:\n        i += 1\n    if i < n:\n        seq[i] = 1\n        best = max(best, getSum(seq, n))\n        seq[i] = 0\n    i = n - 1\n    while i >= 0 and seq[i] == 0:\n        i -= 1\n    if i >= 0:\n        seq[i] = 0\n        best = max(best, getSum(seq, n))\n        seq[i] = 1\n    return best\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        seq = list(map(int, input().split()))\n        print(func(seq, n))\nmain()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if len(set(l)) == 1:\n        print(n - 1)\n    else:\n        l1 = l[::-1]\n        c = 0\n        inv = []\n        for k in l1:\n            if k == 0:\n                c = c + 1\n            else:\n                inv.append(c)\n        d = 0\n        flag = 0\n        for j in range(n):\n            if l[j] == 1:\n                d = d + 1\n                flag = 1\n            else:\n                if flag == 0:\n                    ans1 = max(inv) + sum(inv) + l.index(1) - j - 1\n                else:\n                    ans1 = max(inv) - d - flag + sum(inv)\n                ans2 = sum(inv) - min(inv) + len(inv) - 1\n                ans = max(ans1, ans2, sum(inv))\n                break\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c0 = 0\n    c1 = 0\n    p0 = -1\n    p1 = -1\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] == 0:\n            c0 += 1\n            p0 = i\n        else:\n            if c1 == 0:\n                p1 = i\n            c1 += 1\n            ans += c0\n    print(max(ans, ans + (c0 - 1) - p0, ans - (n - p1 - 1) + (c1 - 1)))", "def count_inversions(a):\n    ones = sum(a)\n    inv = 0\n    for num in a[::-1]:\n        if num == 1:\n            ones -= 1\n        else:\n            inv += ones\n    return inv\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = [int(x) for x in input().split()]\n    inv1 = count_inversions(nums)\n    nums2 = nums.copy()\n    for i in range(n - 1, -1, -1):\n        if nums2[i] == 1:\n            nums2[i] = 0\n            break\n    inv2 = count_inversions(nums2)\n    nums3 = nums.copy()\n    for i in range(n):\n        if nums3[i] == 0:\n            nums3[i] = 1\n            break\n    inv3 = count_inversions(nums3)\n    print(max([inv1, inv2, inv3]))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count_0 = 0\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] == 0:\n            count_0 += 1\n        else:\n            ans += count_0\n    count_1 = 0\n    change_first = ans\n    change_last = ans\n    for i in a:\n        if i == 0:\n            change_first -= count_1\n            change_first += count_0 - 1\n            break\n        else:\n            count_1 += 1\n    if change_first > ans:\n        ans = change_first\n    count_1 = a.count(1)\n    count_0 = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] == 1:\n            change_last -= count_0\n            change_last += count_1 - 1\n            break\n        else:\n            count_0 += 1\n    if change_last > ans:\n        ans = change_last\n    print(ans)", "def inversions_count(arr):\n    ones = 0\n    inv = 0\n    for i in arr:\n        if i == 1:\n            ones += 1\n        else:\n            inv += ones\n    return inv\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c1 = inversions_count(a)\n    i = 0\n    while a[i] == 1 and i < n - 1:\n        i += 1\n    a2 = a.copy()\n    a2[i] = 1\n    c2 = inversions_count(a2)\n    i = n - 1\n    while a[i] == 0 and i > 0:\n        i -= 1\n    a3 = a.copy()\n    a3[i] = 0\n    c3 = inversions_count(a3)\n    print(max(c1, c2, c3))", "def text(arr):\n    s = 0\n    m = 0\n    for i in arr:\n        if i == 1:\n            m += 1\n        else:\n            s += m\n    return s\nfor i in range(int(input())):\n    input()\n    ls = list(map(int, input().split()))\n    lsa = ls.copy()\n    s = text(ls)\n    for j in range(len(ls)):\n        if ls[j] == 0:\n            ls[j] = 1\n            break\n    s = max(text(ls), s)\n    for j in range(len(lsa) - 1, 0, -1):\n        if lsa[j] == 1:\n            lsa[j] = 0\n            break\n    s = max(s, text(lsa))\n    print(s)", "def sana(l):\n    q = 0\n    s = 0\n    for i in range(n - 1, -1, -1):\n        if l[i] == 0:\n            q += 1\n        else:\n            s += q\n    return s\nfor _ in int(input()) * ' ':\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = sum(l)\n    m = sana(l)\n    k = l.copy()\n    for i in range(n):\n        if l[i] == 0:\n            l[i] = 1\n            break\n    for i in range(n - 1, -1, -1):\n        if k[i] == 1:\n            k[i] = 0\n            break\n    print(max(sana(l), sana(k), m))", "def solve():\n    n = int(input())\n    ls = list(map(int, input().split()))\n    ro = ls.count(1)\n    rz = ls.count(0)\n    lo = 0\n    lz = 0\n    ans = 0\n    c = 0\n    for i in range(n):\n        if ls[i] == 0:\n            c += lo\n            rz -= 1\n            ans = max(ans, rz - lo)\n            lz += 1\n        else:\n            ro -= 1\n            ans = max(ans, lo - rz)\n            lo += 1\n    print(ans + c)\nfor i in range(int(input())):\n    solve()", "def kol_inv(a):\n    zeros = a.count(0)\n    ones = a.count(1)\n    inv = 0\n    for i in a:\n        if i == 1:\n            ones -= 1\n            inv += zeros\n        else:\n            zeros -= 1\n    return inv\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    (*a,) = map(int, input().split())\n    inv1 = kol_inv(a)\n    ind = 0\n    for j in a:\n        if j == 1:\n            ind += 1\n        else:\n            break\n    a1 = a.copy()\n    if ind < n:\n        a1[ind] = 1\n    inv2 = kol_inv(a1)\n    ind = n - 1\n    while ind >= 0 and a[ind] == 0:\n        ind -= 1\n    a[ind] = 0\n    inv3 = kol_inv(a)\n    print(max(inv1, inv2, inv3))", "def find_inversions(a):\n    zeros = a.count(0)\n    inversions = 0\n    for num in a:\n        if zeros == 0:\n            break\n        if num == 1:\n            inversions += zeros\n        else:\n            zeros -= 1\n    return inversions\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_inversions = find_inversions(arr)\n    for i in range(n):\n        if arr[i] == 0:\n            arr[i] = 1\n            max_inversions = max(max_inversions, find_inversions(arr))\n            arr[i] = 0\n            break\n    for i in range(n - 1, -1, -1):\n        if arr[i] == 1:\n            arr[i] = 0\n            max_inversions = max(max_inversions, find_inversions(arr))\n            break\n    print(max_inversions)", "for t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    totalInv = 0\n    numberOfOne = 0\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            totalInv += numberOfOne\n        else:\n            numberOfOne += 1\n    numberOfZero = n - numberOfOne\n    oneBeforeFirstZero = 0\n    for i in arr:\n        if i % 2 == 0:\n            break\n        else:\n            oneBeforeFirstZero += 1\n    zeroAfterLastOne = 0\n    for i in range(n - 1, -1, -1):\n        if arr[i] % 2 == 1:\n            break\n        else:\n            zeroAfterLastOne += 1\n    ans1 = totalInv - oneBeforeFirstZero + (numberOfZero - 1)\n    ans2 = totalInv - zeroAfterLastOne + (numberOfOne - 1)\n    ans = max([totalInv, ans1, ans2])\n    print(ans)", "from sys import stdin, stdout\n\nclass Solution:\n\n    def BinaryInversions(self, n, bits):\n        (first, second, orig) = (bits[:], bits[:], bits[:])\n        (hasFirst, hasSecond) = (True, True)\n        for i in range(n):\n            if hasFirst and bits[i] == 0:\n                first[i] = 1\n                hasFirst = False\n            if hasSecond and bits[n - i - 1] == 1:\n                second[n - i - 1] = 0\n                hasSecond = False\n        (first_sum, second_sum, orig_sum) = (0, 0, 0)\n        (first_zeros, second_zeros, orig_zeros) = (0, 0, 0)\n        for i in range(n - 1, -1, -1):\n            if orig[i] == 0:\n                orig_zeros += 1\n            else:\n                orig_sum += orig_zeros\n            if second[i] == 0:\n                second_zeros += 1\n            else:\n                second_sum += second_zeros\n            if first[i] == 0:\n                first_zeros += 1\n            else:\n                first_sum += first_zeros\n        return max(orig_sum, first_sum, second_sum)\nsol = Solution()\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    bits = list(map(int, input().split()))\n    print(sol.BinaryInversions(n, bits))", "from copy import copy\n\ndef inversions(a):\n    ones = 0\n    ans = 0\n    for i in a:\n        if i:\n            ones += 1\n        else:\n            ans += ones\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = copy(a)\n    ans = inversions(a)\n    for i in range(len(a)):\n        if a[i] == 0:\n            a[i] = 1\n            break\n    ans = max(ans, inversions(a))\n    for i in range(len(b) - 1, -1, -1):\n        if b[i] == 1:\n            b[i] = 0\n            break\n    ans = max(ans, inversions(b))\n    print(ans)\npass", "def f(arr):\n    ind_1 = -1\n    ind_0 = 9999999\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            if i < ind_0:\n                ind_0 = i\n        elif i > ind_1:\n            ind_1 = i\n    if ind_0 == 9999999 or ind_1 == -1:\n        return len(arr) - 1\n    k1 = 0\n    k2 = 0\n    k3 = 0\n    k = 0\n    for i in arr:\n        if i == 1:\n            k += 1\n        else:\n            k1 += k\n    k = 0\n    arr[ind_0] = 1\n    for i in arr:\n        if i == 1:\n            k += 1\n        else:\n            k2 += k\n    k = 0\n    arr[ind_0] = 0\n    arr[ind_1] = 0\n    for i in arr:\n        if i == 1:\n            k += 1\n        else:\n            k3 += k\n    return max(k1, k2, k3)\nt = int(input())\nfor gg in range(t):\n    n = int(input())\n    v = [int(x) for x in input().split()]\n    print(f(v))", "def f(M):\n    res = 0\n    n = 0\n    for i in range(a - 1, -1, -1):\n        if M[i] == 0:\n            n += 1\n        else:\n            res += n\n    return res\nt = int(input())\nfor _ in range(t):\n    a = int(input())\n    M = list(map(int, input().split()))\n    M2 = [f(M)]\n    for i in range(a):\n        if M[i] == 0:\n            M[i] = 1\n            M2.append(f(M))\n            M[i] = 0\n            break\n    for i in range(a - 1, -1, -1):\n        if M[i] == 1:\n            M[i] = 0\n            M2.append(f(M))\n            M[i] = 1\n            break\n    print(max(M2))", "def inv_count(a):\n    inv_sum = 0\n    curr_inv = 0\n    for x in a[::-1]:\n        if x == 0:\n            curr_inv += 1\n        else:\n            inv_sum += curr_inv\n    return inv_sum\n    return res\n\ndef func(a, n):\n    flipone = a[:]\n    flipzero = a[:]\n    for i in range(n):\n        if flipzero[i] == 0:\n            flipzero[i] = 1\n            break\n    for i in range(n - 1, -1, -1):\n        if flipone[i] == 1:\n            flipone[i] = 0\n            break\n    return max(inv_count(flipone), inv_count(flipzero), inv_count(a))\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = [int(x) for x in list(input().split(' '))]\n    print(func(a, n))", "def countinv(l):\n    inc = 0\n    count = 0\n    o = 0\n    for i in l:\n        if i == 1:\n            o += 1\n            inc += 1\n        elif i == 0:\n            count += inc\n    return count\nfor tests in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if len(list(set(l))) == 1:\n        print(n - 1)\n    else:\n        count1 = countinv(l)\n        first0 = l.index(0)\n        l[first0] = 1\n        count2 = countinv(l)\n        l[first0] = 0\n        l.reverse()\n        last1 = l.index(1)\n        l[last1] = 0\n        l.reverse()\n        count3 = countinv(l)\n        print(max([count1, count2, count3]))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    l = len(arr)\n    c0 = c1 = nsum = sum0t1 = sum1t0 = 0\n    d = {'1beforefirst0': 0, '0afterlast1': 0}\n    exist0 = False\n    exist1 = False\n    for i in range(l - 1, -1, -1):\n        if arr[i] == 0:\n            c0 += 1\n            exist0 = True\n            d['1beforefirst0'] = 0\n            if not exist1:\n                d['0afterlast1'] += 1\n        else:\n            c1 += 1\n            exist1 = True\n            d['1beforefirst0'] += 1\n            nsum += c0\n    if exist0:\n        sum0t1 = nsum - d['1beforefirst0'] + c0 - 1\n    if exist1:\n        sum1t0 = nsum - d['0afterlast1'] + c1 - 1\n    print(max(nsum, sum0t1, sum1t0))", "def solution():\n    t = int(input())\n\n    def calculate(nums):\n        ans = 0\n        zeroes = 0\n        for i in range(len(nums) - 1, -1, -1):\n            if nums[i] == 0:\n                zeroes += 1\n            else:\n                ans += zeroes\n        return ans\n    for _ in range(t):\n        n = int(input())\n        nums = [int(x) for x in input().split()]\n        ans = calculate(nums)\n        for i in range(len(nums) - 1, -1, -1):\n            if nums[i] == 1:\n                nums[i] = 0\n                ans = max(ans, calculate(nums))\n                nums[i] = 1\n                break\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                nums[i] = 1\n                ans = max(ans, calculate(nums))\n                nums[i] = 0\n                break\n        print(ans)\nsolution()", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (N, A) = (int(input()), list(map(int, input().split())))\n    ans = 0\n    X = [0] * N\n    t = 0\n    for i in range(N - 1, -1, -1):\n        if A[i] == 1:\n            X[i] = t\n        if A[i] == 0:\n            t += 1\n    ans = max(ans, sum(X))\n    B = A.copy()\n    for i in range(N - 1, -1, -1):\n        if B[i] == 1:\n            B[i] = 0\n            break\n    X = [0] * N\n    t = 0\n    for i in range(N - 1, -1, -1):\n        if B[i] == 1:\n            X[i] = t\n        if B[i] == 0:\n            t += 1\n    ans = max(ans, sum(X))\n    B = A.copy()\n    for i in range(N):\n        if B[i] == 0:\n            B[i] = 1\n            break\n    X = [0] * N\n    t = 0\n    for i in range(N - 1, -1, -1):\n        if B[i] == 1:\n            X[i] = t\n        if B[i] == 0:\n            t += 1\n    ans = max(ans, sum(X))\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    zeros = 0\n    ones = 0\n    res1 = 0\n    res2 = 0\n    res3 = 0\n    l = list(map(int, input().split()))\n    c = []\n    aux = []\n    for i in range(n):\n        if l[i] == 0:\n            c.append(i)\n            zeros += 1\n        else:\n            aux.append(i)\n    ones = n - zeros\n    for i in range(zeros - 1, -1, -1):\n        res1 += c[i] - i\n    if len(c) != 0:\n        res2 = res1 + zeros - 1 - c[0]\n    else:\n        res2 = res1\n    if len(aux) != 0:\n        res3 = res1 + ones - 1 - (n - aux[ones - 1] - 1)\n    else:\n        res3 = res1\n    print(max(res1, res2, res3))", "def inversion(L):\n    onescount = 0\n    inversioncount = 0\n    for i in range(len(L)):\n        if L[i] == 1:\n            onescount += 1\n        else:\n            inversioncount = inversioncount + onescount\n    return inversioncount\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    L1 = list(map(int, input().split()))\n    (i, j) = (0, len(L1) - 1)\n    L2 = L1.copy()\n    L3 = L1.copy()\n    while i < n:\n        if L1[i] == 0:\n            L2[i] = 1\n            break\n        i += 1\n    while j >= 0:\n        if L1[j] == 1:\n            L3[j] = 0\n            break\n        j -= 1\n    print(max(inversion(L1), inversion(L2), inversion(L3)))", "def counter(a, n):\n    mx = 0\n    zeroes = 0\n    for i in reversed(range(n)):\n        if a[i] == 0:\n            zeroes += 1\n        else:\n            mx += zeroes\n    return mx\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = counter(a, n)\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n            ans = max(ans, counter(a, n))\n            a[i] = 0\n            break\n    for i in reversed(range(n)):\n        if a[i] == 1:\n            a[i] = 0\n            ans = max(ans, counter(a, n))\n            a[i] = 1\n            break\n    print(ans)\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1", "def solve():\n    n = input()\n    a = [int(x) for x in input().split(' ')]\n    ct0 = 0\n    ct1 = 0\n    cnt = 0\n    for ev in a:\n        if ev == 0:\n            ct0 += 1\n            cnt += ct1\n        else:\n            ct1 += 1\n    res = cnt\n    be0 = 0\n    be1 = 0\n    for ev in a:\n        ans = cnt\n        if ev == 0:\n            ct0 -= 1\n            ans -= be1\n            ans += ct0\n        else:\n            ct1 -= 1\n            ans -= ct0\n            ans += be1\n        if ev == 0:\n            be0 += 1\n        else:\n            be1 += 1\n        res = max(res, ans)\n    print(res)\nt = int(input())\nfor each in range(t):\n    solve()", "import sys\nfrom collections import defaultdict as dd, deque\ninput = lambda : sys.stdin.readline().strip()\n\ndef ii():\n    return int(input())\n\ndef ia():\n    return list(map(int, input().split()))\ng8 = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (-1, -1), (1, -1), (-1, 1)]\ng4 = [(0, 1), (0, -1), (1, 0), (-1, 0)]\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\ndef res(ar):\n    s = sum(ar)\n    n = len(ar)\n    if n == 1:\n        return 0\n    ans = 0\n    psum = 0\n    for i in range(n - 1, -1, -1):\n        psum += ar[i]\n        if ar[i] == 0:\n            ans += s - psum\n    return ans\nt = ii()\nfor _ in range(t):\n    n = ii()\n    a = ia()\n    a1 = a.copy()\n    ans = res(a)\n    for i in range(n):\n        if a[i] == 0:\n            a1[i] = 1\n            ans = max(ans, res(a1))\n            break\n    a2 = a.copy()\n    for i in range(n - 1, -1, -1):\n        if a[i] == 1:\n            a2[i] = 0\n            ans = max(ans, res(a2))\n            break\n    print(ans)", "from copy import copy\n\ndef inversions_count(arr):\n    counter = 0\n    num_of_once = 0\n    for item in arr:\n        if item == 1:\n            num_of_once += 1\n        else:\n            counter += num_of_once\n    return counter\nn = int(input())\nfor j in range(n):\n    len_of_str = int(input())\n    arr = [int(_) for _ in input().split()]\n    given = inversions_count(arr)\n    arr_1 = copy(arr)\n    for i in range(len(arr)):\n        if arr_1[i] == 0:\n            arr_1[i] = 1\n            break\n    arr_1_count = inversions_count(arr_1)\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] == 1:\n            arr[i] = 0\n            break\n    arr_2_count = inversions_count(arr)\n    result = max(given, arr_1_count)\n    print(max(result, arr_2_count))", "for i in range(int(input())):\n    o = 0\n    f = 0\n    n = int(input())\n    bin_list = list(map(int, input().split()))\n    for j in range(n):\n        if bin_list[j] == 1:\n            o += 1\n        else:\n            f += o\n    index_last_one = -1\n    for j in range(n - 1, -1, -1):\n        if bin_list[j] == 1:\n            index_last_one = j\n            break\n    index_first_zero = -1\n    for j in range(n):\n        if bin_list[j] == 0:\n            index_first_zero = j\n            break\n    kolvo_ones = 0\n    kolvo_zeroes = 0\n    for j in range(n):\n        if bin_list[j] == 1:\n            kolvo_ones += 1\n        else:\n            kolvo_zeroes += 1\n    f = max(f, f + (kolvo_ones - 1) - (n - index_last_one - 1), f - index_first_zero + kolvo_zeroes - 1)\n    print(f)", "for t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (c1, c2) = (0, 0)\n    (c3, c4) = (0, 0)\n    (c5, c6) = (0, 0)\n    for i in l:\n        if i == 1:\n            c1 += 1\n        else:\n            c2 += c1\n    p = l.copy()\n    for j in range(n):\n        if l[j] == 0:\n            l[j] = 1\n            break\n    for i in l:\n        if i == 1:\n            c3 += 1\n        else:\n            c4 += c3\n    for j in range(n - 1, -1, -1):\n        if p[j] == 1:\n            p[j] = 0\n            break\n    for i in p:\n        if i == 1:\n            c5 += 1\n        else:\n            c6 += c5\n    print(max(c2, c4, c6))", "def cnt_inversions_in_binary_array(a):\n    n = len(a)\n    ans = 0\n    cnt1 = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += cnt1\n        else:\n            cnt1 += 1\n    return ans\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    leftmost_0 = -1\n    rightmost_1 = -1\n    for i in range(n):\n        if a[i] == 0 and leftmost_0 == -1:\n            leftmost_0 = i\n        elif a[i] == 1:\n            rightmost_1 = i\n    ans = cnt_inversions_in_binary_array(a)\n    if leftmost_0 != -1:\n        b = a[:]\n        b[leftmost_0] = 1\n        ans = max(ans, cnt_inversions_in_binary_array(b))\n    if rightmost_1 != -1:\n        b = a[:]\n        b[rightmost_1] = 0\n        ans = max(ans, cnt_inversions_in_binary_array(b))\n    print(ans)\nN = int(input())\nfor _ in range(N):\n    solve()", "import collections\nimport itertools\nimport heapq\nimport sys\nimport math\nimport bisect\nimport os\nfrom io import BytesIO, IOBase\ninput = sys.stdin.readline\n\ndef get(ll):\n    tot = 0\n    o = 0\n    for i in ll:\n        if i == 1:\n            o += 1\n        else:\n            tot += o\n    return tot\n\ndef solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = collections.Counter(l)\n    if 0 not in c:\n        n - 1\n    if 1 not in c:\n        n - 1\n    z = 0\n    o = 0\n    g = get(l)\n    mx = g\n    for i in range(n):\n        if l[i] == 0:\n            z += 1\n        if l[i] == 0:\n            mx = max(mx, g - o + c[0] - z)\n        elif l[i] == 1:\n            mx = max(mx, g - (c[0] - z) + o)\n        if l[i] == 1:\n            o += 1\n    return mx\nfor i in range(int(input())):\n    print(solve())", "import collections\nimport sys\nimport os\ninput = sys.stdin.readline\n\ndef get(ll):\n    tot = 0\n    o = 0\n    for i in ll:\n        if i == 1:\n            o += 1\n        else:\n            tot += o\n    return tot\n\ndef solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = collections.Counter(l)\n    if 0 not in c:\n        return n - 1\n    if 1 not in c:\n        return n - 1\n    z = 0\n    o = 0\n    g = get(l)\n    mx = g\n    for i in range(n):\n        if l[i] == 0:\n            z += 1\n        if l[i] == 0:\n            mx = max(mx, g - o + c[0] - z)\n        elif l[i] == 1:\n            mx = max(mx, g - (c[0] - z) + o)\n        if l[i] == 1:\n            o += 1\n    return mx\nfor i in range(int(input())):\n    print(solve())", "def inversion(a):\n    count = 0\n    ans = 0\n    for i in range(len(a) - 1, -1, -1):\n        if a[i] == 0:\n            count += 1\n        else:\n            ans += count\n    return ans\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = [int(c) for c in input().split()]\n    ans1 = inversion(a)\n    b = a[:]\n    for i in range(0, len(b)):\n        if b[i] == 0:\n            b[i] = 1\n            break\n    ans2 = inversion(b)\n    for i in range(len(a) - 1, 0, -1):\n        if a[i] == 1:\n            a[i] = 0\n            break\n    ans3 = inversion(a)\n    print(max(max(ans1, ans2), ans3))\n    t -= 1", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = a.copy()\n    sums = 0\n    sums0 = a.count(0)\n    sums1 = a.count(1)\n    p0 = 0\n    p1 = 0\n    for i in range(n - 1):\n        if a[i] == 0:\n            p0 += 1\n        if a[i] == 1:\n            sums += sums0 - p0\n    (p0, p0) = (0, 0)\n    sumss = 0\n    for i in range(n):\n        if a[i] == 1:\n            p1 += 1\n        if a[i] == 0:\n            sumss = max(sumss, sums0 - p0 - 1 - p1)\n            break\n    (p0, p1) = (0, 0)\n    for i in range(n - 1, -1, -1):\n        if a[i] == 0:\n            p0 += 1\n        if a[i] == 1:\n            sumss = max(sumss, sums1 - 1 - p0)\n            break\n    print(max(sums, sumss + sums))", "for s in [*open(0)][2::2]:\n    k = l = m = 0\n    c = s.count('1')\n    n = len(s) // 2\n    for x in map(int, s[::2]):\n        n -= 1\n        k += x\n        m = max(m, (n - c, c - n - 1)[x])\n        l += (x ^ 1) * k\n    print(l + m)", "def solve():\n    t = int(input())\n    while t:\n        n = int(input())\n        arr = list(map(int, input().split()))\n        temp = []\n        for i in arr:\n            temp.append(i)\n        (res, c) = (0, 0)\n        for i in range(n - 1, -1, -1):\n            if arr[i] == 1:\n                res += c\n            else:\n                c += 1\n        for i in range(n - 1, -1, -1):\n            if arr[i] == 1:\n                arr[i] = 0\n                break\n        for i in range(n):\n            if temp[i] == 0:\n                temp[i] = 1\n                break\n        (ans, res1) = (0, 0)\n        (count, count2) = (0, 0)\n        for i in range(n - 1, -1, -1):\n            if arr[i] == 1:\n                ans += count\n            elif arr[i] == 0:\n                count += 1\n            if temp[i] == 1:\n                res1 += count2\n            elif temp[i] == 0:\n                count2 += 1\n        print(max(res, max(res1, ans)))\n        t -= 1\nsolve()", "for s in [*open(0)][2::2]:\n    k = l = m = 0\n    c = s.count('1')\n    n = len(s) // 2\n    for x in map(int, s[::2]):\n        n -= 1\n        k += x\n        m = max(m, (n - c, c - n - 1)[x])\n        l += (x ^ 1) * k\n    print(l + m)", "def count(l):\n    c = l.count(0)\n    ans = 0\n    for i in range(n):\n        if l[i] == 1:\n            ans = ans + c\n        elif l[i] == 0:\n            c = c - 1\n    return ans\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = y = z = 0\n    z = count(l)\n    for i in range(n):\n        if l[i] == 0:\n            l[i] = 1\n            x = count(l)\n            l[i] = 0\n            break\n    for i in range(n):\n        if l[-i - 1] == 1:\n            l[-i - 1] = 0\n            y = count(l)\n            l[-i - 1] = 0\n            break\n    print(max(x, y, z))", "for s in [*open(0)][2::2]:\n    k = l = m = 0\n    c = s.count('1')\n    n = len(s) // 2\n    for x in map(int, s[::2]):\n        n -= 1\n        k += x\n        m = max(m, (n - c, c - n - 1)[x])\n        l += (x ^ 1) * k\n    print(l + m)", "def counts(num):\n    c0 = 0\n    ans = 0\n    for i in range(len(num) - 1, -1, -1):\n        if num[i] == 0:\n            c0 += 1\n        else:\n            ans += c0\n    return ans\nfor i in range(int(input())):\n    length = int(input())\n    num = [int(x) for x in input().split()]\n    last_one = length - 1\n    first_zero = 0\n    for i in range(length):\n        if num[i] == 0:\n            first_zero = i\n            break\n    for i in range(length - 1, -1, -1):\n        if num[i] == 1:\n            last_one = i\n            break\n    ori = counts(num)\n    temp = num.copy()\n    temp[last_one] = 0\n    oneToZero = counts(temp)\n    num[first_zero] = 1\n    zeroToOne = counts(num)\n    print(max(ori, oneToZero, zeroToOne))", "def check_inversion(n, arr):\n    ans = 0\n    one = 0\n    for i in range(n):\n        if arr[i] == 1:\n            one += 1\n        elif arr[i] == 0:\n            ans += one\n    return ans\nfor _ in range(int(input())):\n    a = int(input())\n    b = list(map(int, input().split()))\n    lst = []\n    lst.append(check_inversion(a, b))\n    check = -1\n    for i in range(a):\n        if b[i] == 0:\n            b[i] = 1\n            check = i\n            lst.append(check_inversion(a, b))\n            break\n    if check != -1:\n        b[check] = 0\n    for i in range(a - 1, 0, -1):\n        if b[i] == 1:\n            b[i] = 0\n            lst.append(check_inversion(a, b))\n            break\n    print(max(lst))", "for t in range(int(input())):\n    N = int(input())\n    arr = input().split()\n    arrFwd = list(arr)\n    arrBwd = list(arr)\n\n    def count(arr):\n        (totalK, ones, cur0) = (0, 0, 0)\n        for i in range(N + 1):\n            if arr[i] == '1':\n                totalK += cur0 * ones\n                cur0 = 0\n                ones += 1\n            else:\n                cur0 += 1\n        return totalK\n    arr.append('1')\n    T0 = count(arr)\n    for i in range(N):\n        if arrFwd[i] == '0':\n            arrFwd[i] = '1'\n            break\n    arrFwd.append('1')\n    T1 = count(arrFwd)\n    for i in range(N - 1, -1, -1):\n        if arrBwd[i] == '1':\n            arrBwd[i] = '0'\n            break\n    arrBwd.append('1')\n    T2 = count(arrBwd)\n    print(max(T0, T1, T2))", "for t in range(int(input())):\n    N = int(input())\n    arr = input().split()\n    arrFwd = list(arr)\n    arrBwd = list(arr)\n\n    def count(arr):\n        (totalK, ones, cur0) = (0, 0, 0)\n        for i in range(N + 1):\n            if arr[i] == '1':\n                totalK += cur0 * ones\n                cur0 = 0\n                ones += 1\n            else:\n                cur0 += 1\n        return totalK\n    arr.append('1')\n    T0 = count(arr)\n    for i in range(N):\n        if arrFwd[i] == '0':\n            arrFwd[i] = '1'\n            break\n    arrFwd.append('1')\n    T1 = count(arrFwd)\n    for i in range(N - 1, -1, -1):\n        if arrBwd[i] == '1':\n            arrBwd[i] = '0'\n            break\n    arrBwd.append('1')\n    T2 = count(arrBwd)\n    print(max(T0, T1, T2))", "for t in range(int(input())):\n    N = int(input())\n    arr = input().split()\n    arrFwd = list(arr)\n    arrBwd = list(arr)\n\n    def count(arr):\n        (totalK, ones, cur0) = (0, 0, 0)\n        for i in range(N + 1):\n            if arr[i] == '1':\n                totalK += cur0 * ones\n                cur0 = 0\n                ones += 1\n            else:\n                cur0 += 1\n        return totalK\n    arr.append('1')\n    T0 = count(arr)\n    for i in range(N):\n        if arrFwd[i] == '0':\n            arrFwd[i] = '1'\n            break\n    arrFwd.append('1')\n    T1 = count(arrFwd)\n    for i in range(N - 1, -1, -1):\n        if arrBwd[i] == '1':\n            arrBwd[i] = '0'\n            break\n    arrBwd.append('1')\n    T2 = count(arrBwd)\n    print(max(T0, T1, T2))", "import sys\n\ndef read(func=int):\n    return func(sys.stdin.readline().strip())\n\ndef read_array(func=int):\n    return list(map(func, read(str).split()))\nt = read()\nfor _ in range(t):\n    n = read()\n    A = read_array()\n    ones = [0] * n\n    fst0 = float('inf')\n    ltr1 = -1\n    ans = 0\n    for i in range(n):\n        ones[i] = A[i] + ones[i - 1]\n        if A[i]:\n            ltr1 = max(ltr1, i)\n        else:\n            fst0 = min(fst0, i)\n            ans += ones[i - 1]\n    ansG = ans\n    if fst0 < float('inf'):\n        ones_left = ones[fst0]\n        ones_right = ones[-1] - ones[fst0]\n        nums_right = n - fst0 - 1\n        zeros_right = nums_right - ones_right\n        ansG = max(ansG, ans + zeros_right - ones_left)\n    if ltr1 != -1:\n        ones_left = ones[ltr1] - 1\n        ones_right = ones[-1] - ones[i]\n        nums_right = n - ltr1 - 1\n        zeros_right = nums_right - ones_right\n        ansG = max(ansG, ans + ones_left - zeros_right)\n    print(ansG)", "for s in [*open(0)][2::2]:\n    k = l = m = 0\n    c = s.count('1')\n    n = len(s) // 2\n    for x in map(int, s[::2]):\n        n -= 1\n        k += x\n        m = max(m, (n - c, c - n - 1)[x])\n        l += (x ^ 1) * k\n    print(l + m)", "t = int(input())\nwhile t:\n    l = int(input())\n    s = list(map(int, input().split()))\n\n    def calc(arr):\n        z = 0\n        ans = 0\n        for i in range(len(arr) - 1, -1, -1):\n            if arr[i] == 0:\n                z = z + 1\n            else:\n                ans += z\n        return ans\n    ini = calc(s)\n    case1 = s.copy()\n    case2 = s.copy()\n    for i in range(l - 1, -1, -1):\n        if case1[i] == 1:\n            case1[i] = 0\n            break\n    for i in range(l):\n        if case2[i] == 0:\n            case2[i] = 1\n            break\n    print(max([ini, calc(case1), calc(case2)]))\n    t = t - 1", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    if 0 not in a or 1 not in a:\n        print(n - 1)\n        continue\n    ind0 = a.index(0)\n    ind1 = 0\n    for i in range(n):\n        if a[i] == 1:\n            ind1 = i\n    m = a[:ind0].count(1)\n    k = a[ind0:].count(0) - 1\n    flag = False\n    if (m + 1) * k > m * (k + 1):\n        a[ind0] = 1\n        flag = True\n    l = a.count(0)\n    count = 0\n    for i in a:\n        if i:\n            count += l\n        else:\n            l -= 1\n    if flag:\n        a[ind0] = 0\n    m = a[:ind1].count(1)\n    k = a[ind1:].count(0)\n    if (m + 1) * k < m * (k + 1):\n        a[ind1] = 0\n    l = a.count(0)\n    count2 = 0\n    for i in a:\n        if i:\n            count2 += l\n        else:\n            l -= 1\n    print(max(count, count2))", "import sys\nimport os\nimport math\nfrom collections import defaultdict\nfrom collections import Counter\nfrom collections import deque\nfrom heapq import heappush, heappop\n\ndef cnt_inversions_in_binary_array(a):\n    n = len(a)\n    ans = 0\n    cnt1 = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += cnt1\n        else:\n            cnt1 += 1\n    return ans\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    leftmost_0 = -1\n    rightmost_1 = -1\n    for i in range(n):\n        if a[i] == 0 and leftmost_0 == -1:\n            leftmost_0 = i\n        elif a[i] == 1:\n            rightmost_1 = i\n    ans = cnt_inversions_in_binary_array(a)\n    if leftmost_0 != -1:\n        b = a[:]\n        b[leftmost_0] = 1\n        ans = max(ans, cnt_inversions_in_binary_array(b))\n    if rightmost_1 != -1:\n        b = a[:]\n        b[rightmost_1] = 0\n        ans = max(ans, cnt_inversions_in_binary_array(b))\n    print(ans)\n\ndef main():\n    N = int(input())\n    for _ in range(N):\n        solve()\nmain()", "def op1(l):\n    l2 = []\n    for i in l:\n        l2.append(i)\n    for i in range(len(l2)):\n        if l2[i] == 0:\n            l2[i] = 1\n            break\n    return l2\n\ndef op2(l, m):\n    l2 = []\n    for i in l:\n        l2.append(i)\n    for i in range(m - 1, -1, -1):\n        if l2[i] == 1:\n            l2[i] = 0\n            break\n    return l2\n\ndef count(l2):\n    c = 0\n    s = 0\n    for i in l2:\n        if i == 1:\n            c += 1\n        else:\n            s += c\n    return s\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    k = list(map(int, input().split(' ')))\n    c1 = count(k)\n    k1 = op1(k)\n    c2 = count(k1)\n    k2 = op2(k, n)\n    c3 = count(k2)\n    print(max(c1, c2, c3))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = [int(x) for x in input().split()]\n    s2 = s[:]\n    count = 0\n    ans = 0\n    for x in s:\n        if x == 1:\n            count += 1\n        else:\n            ans += count\n    idx = 0\n    for i in range(len(s2) - 1, -1, -1):\n        if s2[i] == 1:\n            s2[i] = 0\n            break\n    count1 = ans1 = 0\n    for x in s2:\n        if x == 1:\n            count1 += 1\n        else:\n            ans1 += count1\n    for i in range(len(s)):\n        if s[i] == 0:\n            s[i] = 1\n            break\n    count2 = ans2 = 0\n    for x in s:\n        if x == 1:\n            count2 += 1\n        else:\n            ans2 += count2\n    print(max(ans1, ans2, ans))", "def solve(myArr):\n    ans = 0\n    zeros = 0\n    for i in myArr[::-1]:\n        zeros += 1 - i\n        ans += i * zeros\n    return ans\nfor _ in range(int(input())):\n    input()\n    arr = list(map(int, input().split()))\n    arr2 = arr.copy()\n    if 0 in arr2:\n        arr2[arr2.index(0)] = 1\n    arr1 = arr[::-1].copy()\n    if 1 in arr1:\n        arr1[arr1.index(1)] = 0\n        arr1 = arr1[::-1]\n    print(max(solve(arr), solve(arr2), solve(arr1)))", "for s in [*open(0)][2::2]:\n    k = l = m = 0\n    c = s.count('1')\n    n = len(s) // 2\n    for x in map(int, s[::2]):\n        n -= 1\n        k += x\n        m = max(m, (n - c, c - n - 1)[x])\n        l += (x ^ 1) * k\n    print(l + m)", "def inversion(string: list):\n    count = 0\n    count0 = string.count('0')\n    count1 = string.count('1')\n    for i in range(len(string)):\n        if string[i] == '1':\n            count1 -= 1\n            count += count0\n        else:\n            count0 -= 1\n    return count\n\ndef oi():\n    a = input().split()\n    if '0' not in a or '1' not in a:\n        return len(a) - 1\n    first_zero = a.index('0')\n    a.reverse()\n    last_one = len(a) - a.index('1') - 1\n    a.reverse()\n    h1 = inversion(a)\n    h2 = inversion(a[:first_zero] + ['1'] + a[first_zero + 1:])\n    h3 = inversion(a[:last_one] + ['0'] + a[last_one + 1:])\n    return max(h1, h2, h3)\nfor i in range(int(input())):\n    input()\n    print(oi())", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    barray = list(map(int, input().split()))\n    veryfirst0 = 0\n    verylast1 = 0\n    first0found = False\n    first1found = False\n    for i in range(n):\n        if barray[i] == 0 and (not first0found):\n            first0found = True\n            veryfirst0 = barray[i + 1:].count(0) - i\n            barrayinv0 = barray[:i] + [1] + barray[i + 1:]\n        if barray[n - 1 - i] == 1 and (not first1found):\n            first1found = True\n            verylast1 = barray[:n - 1 - i].count(1) - i\n            barrayinv1 = barray[:n - 1 - i] + [0] + barray[n - i:]\n        if first0found and first1found:\n            break\n    if veryfirst0 >= verylast1 and veryfirst0 > 0:\n        barray = barrayinv0\n    elif verylast1 > veryfirst0 and verylast1 > 0:\n        barray = barrayinv1\n    index1 = []\n    for i in range(n):\n        if barray[i] == 1:\n            index1.append(i)\n    noinv = 0\n    no1 = len(index1)\n    for i in range(len(index1)):\n        no0after1 = n - 1 - index1[i] - (no1 - 1 - i)\n        noinv += no0after1\n    print(noinv)", "import math\nfrom collections import Counter\n\ndef li():\n    return list(map(int, input().split()))\n\ndef n():\n    return int(input())\n\ndef st():\n    return input()\nyes = 'YES'\nno = 'NO'\neven = 'EVEN'\nodd = 'ODD'\n\ndef prefix(L):\n    size = len(L)\n    for i in range(1, size):\n        L[i] = L[i] + L[i - 1]\n    return L\n\ndef inL0(size):\n    L = [0 for i in range(size)]\n    return L\n\ndef process(L):\n    z = L.count(0)\n    o = size - z\n    ans = 0\n    for i in range(size):\n        if L[i] == 0:\n            z -= 1\n        else:\n            ans += z\n    return ans\nfor _ in range(int(input())):\n    size = n()\n    L = li()\n    z = L.count(0)\n    o = size - z\n    if z == 0 or o == 0:\n        print(size - 1)\n        continue\n    ultiL = list(L)\n    ultiL = ultiL[::-1]\n    pos0 = L.index(0)\n    pos1 = ultiL.index(1)\n    check1 = list(L)\n    check2 = list(L)\n    check1[pos0] = 1\n    check2[-pos1 - 1] = 0\n    ans = process(L)\n    temp1 = process(check1)\n    temp2 = process(check2)\n    print(max(ans, temp1, temp2))", "for j in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    start = 0\n    st = 0\n    nst = 0\n    end = 0\n    en = 0\n    nen = 0\n    zero = 0\n    one = 0\n    res = 0\n    for i in a:\n        if i == 0:\n            if start == 1:\n                st += 1\n            if start == 0:\n                start = 1\n                nst = one\n            zero += 1\n            res += one\n        else:\n            one += 1\n    zero = 0\n    one = 0\n    for i in a[::-1]:\n        if i == 0:\n            zero += 1\n        else:\n            if end == 1:\n                en += 1\n            if end == 0:\n                end = 1\n                nen = zero\n            one += 1\n            one += 1\n    print(max(res, res - nst + st, res - nen + en))", "def evaluate(arr) -> int:\n    s = k = 0\n    for i in range(len(arr)):\n        if arr[i]:\n            k += 1\n        else:\n            s += k\n    return s\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = evaluate(arr)\n    p = arr.copy()\n    if 0 in p:\n        p[p.index(0)] = 1\n        ans = max(ans, evaluate(p))\n    p = arr.copy()\n    if 1 in p:\n        p[n - list(reversed(p)).index(1) - 1] = 0\n        ans = max(ans, evaluate(p))\n    print(ans)", "def get_inv(arr, n):\n    count = 0\n    zeros = arr.count(0)\n    for i in arr:\n        if i == 1:\n            count += zeros\n        else:\n            zeros -= 1\n    return count\n\ndef solve(arr, n):\n    ones = arr.count(1)\n    zeros = n - ones\n    l_zeros = 0\n    l_ones = 0\n    r_zeros = zeros\n    r_ones = ones\n    maxx = -10 ** 9\n    for i in range(n):\n        if arr[i] == 1:\n            l_ones += 1\n            r_ones -= 1\n            maxx = max(maxx, l_ones - r_zeros - 1)\n        else:\n            l_zeros += 1\n            r_zeros -= 1\n            maxx = max(maxx, r_zeros - l_ones)\n    return maxx\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    a = get_inv(arr, n)\n    b = solve(arr, n)\n    print(max(a + b, a))", "t = int(input())\nfor i in range(t):\n    a = int(input())\n    b = list(map(int, input().split()))\n    b.reverse()\n    k0 = 0\n    col = 0\n    m = []\n    for i in b:\n        if i == 0:\n            col += 1\n        elif i == 1:\n            m.append(col)\n    c = []\n    (k0, k1) = (0, 0)\n    for i in b:\n        if i == 0:\n            c.append(-(len(m) - k1) + k0)\n            k0 += 1\n        else:\n            k1 += 1\n            c.append(len(m) - k1 - k0)\n    print(max(sum(m), sum(m) + max(c)))", "def check(arr):\n    a = 0\n    ans = 0\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == 0:\n            a += 1\n        else:\n            ans += a\n    return ans\n\ndef solve():\n    n = int(input())\n    s = list(map(int, input().split()))\n    init = check(s)\n    cas1 = s.copy()\n    cas2 = s.copy()\n    for i in range(n - 1, -1, -1):\n        if cas1[i] == 1:\n            cas1[i] = 0\n            break\n    for i in range(n):\n        if cas2[i] == 0:\n            cas2[i] = 1\n            break\n    return max(init, check(cas1), check(cas2))\nfor t in range(0, int(input())):\n    print(solve())", "def evaluate(arr) -> int:\n    s = k = 0\n    for i in range(len(arr)):\n        if arr[i]:\n            k += 1\n        else:\n            s += k\n    return s\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = evaluate(arr)\n    p = arr.copy()\n    if 0 in p:\n        p[p.index(0)] = 1\n        ans = max(ans, evaluate(p))\n    p = arr.copy()\n    if 1 in p:\n        p[n - list(reversed(p)).index(1) - 1] = 0\n        ans = max(ans, evaluate(p))\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    count = 0\n    ans = 0\n    one = l.count(1)\n    zero = l.count(0)\n    for j in range(n - 1, -1, -1):\n        if l[j] == 0:\n            count += 1\n        else:\n            ans += count\n    rone = 0\n    for j in l:\n        if j == 1:\n            rone += 1\n        else:\n            break\n    ans1 = zero - rone - 1\n    l.reverse()\n    lzero = 0\n    for j in l:\n        if j == 0:\n            lzero += 1\n        else:\n            break\n    ans2 = one - lzero - 1\n    print(max(ans, ans + ans1, ans + ans2))", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\ntest_cases = inp()\ninp_arr = []\nfor i in range(test_cases):\n    num = inp()\n    nums = inlt()\n    inp_arr.append(nums)\n\ndef cal(nums):\n    c_one = sum(nums)\n    result = 0\n    for (i, n) in enumerate(nums):\n        if n == 1:\n            result += len(nums) - i - 1 - c_one + 1\n            c_one -= 1\n    return result\n\ndef findResult(nums):\n    result = cal(nums)\n    zero_index = -1\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_index = i\n            break\n    if zero_index != -1:\n        nums[zero_index] = 1\n        result = max(result, cal(nums))\n        nums[zero_index] = 0\n    one_index = -1\n    for i in range(len(nums) - 1, -1, -1):\n        if nums[i] == 1:\n            one_index = i\n            break\n    if one_index != -1:\n        nums[one_index] = 0\n        result = max(result, cal(nums))\n    return result\nresult = [findResult(cheeses) for cheeses in inp_arr]\nfor m in result:\n    print(m)", "for s in [*open(0)][2::2]:\n    k = l = m = 0\n    c = s.count('1')\n    n = len(s) // 2\n    for x in map(int, s[::2]):\n        n -= 1\n        k += x\n        m = max(m, (n - c, c - n - 1)[x])\n        l += (x ^ 1) * k\n    print(l + m)", "t = int(input())\n\ndef cou(arr):\n    k = 0\n    ans = 0\n    for i in arr:\n        if i == 1:\n            k += 1\n        elif i == 0:\n            ans += k\n    return ans\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = []\n    b = []\n    for i in l:\n        a.append(i)\n        b.append(i)\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n            break\n    for i in range(n - 1, -1, -1):\n        if b[i] == 1:\n            b[i] = 0\n            break\n    print(max(cou(l), max(cou(a), cou(b))))"]