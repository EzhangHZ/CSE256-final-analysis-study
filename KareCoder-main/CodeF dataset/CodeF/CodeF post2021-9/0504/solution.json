["tc = int(input())\nfor i in range(1, tc + 1):\n    n = int(input())\n    x = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    a = [i + j for (i, j) in zip(x, t)]\n    b = [i - j for (i, j) in zip(x, t)]\n    ans = (max(a) + min(b)) / 2\n    print(ans)", "tc = int(input())\nfor i in range(1, tc + 1):\n    n = int(input())\n    x = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    a = [i + j for (i, j) in zip(x, t)]\n    b = [i - j for (i, j) in zip(x, t)]\n    ans = (max(a) + min(b)) / 2\n    print(ans)", "for (_, (xs, ts)) in ((input(), (tuple(map(int, input().split())) for _ in '00')) for _ in range(int(input()))):\n    print((max((x + t for (x, t) in zip(xs, ts))) + min((x - t for (x, t) in zip(xs, ts)))) / 2)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [i + j for (i, j) in zip(a, b)]\n    d = [i - j for (i, j) in zip(a, b)]\n    print(0.5 * (max(c) + min(d)))", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    b = [*map(int, input().split())]\n    print((max(map(lambda x: x[0] + x[1], zip(a, b))) + min(map(lambda x: x[0] - x[1], zip(a, b)))) / 2)", "import collections\n\ndef do_test():\n    n = int(input())\n    x = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    minx = min([x[i] - t[i] for i in range(n)])\n    maxx = max([x[i] + t[i] for i in range(n)])\n    print((maxx + minx) / 2)\nt = int(input())\nfor _ in range(t):\n    do_test()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = list(map(int, input().split(' ')))\n    t = list(map(int, input().split(' ')))\n    r = [a + b for (a, b) in zip(x, t)]\n    l = [a - b for (a, b) in zip(x, t)]\n    o = (max(r) + min(l)) / 2\n    print(int(o) if o % 1 == 0 else o)", "def segments_intersect(l1, r1, l2, r2):\n    return l1 <= l2 <= r1 or l1 <= r2 <= r1 or l2 <= l1 <= r2 or (l2 <= r1 <= r2)\n\ndef all_intersect(lhs, rhs):\n    ext_l = max(lhs)\n    ext_r = min(rhs)\n    if ext_l > ext_r:\n        return False\n    return all((segments_intersect(ext_l, ext_r, l, r) for (l, r) in zip(lhs, rhs)))\n\ndef solve():\n    n = int(input())\n    xx = list(map(int, input().split()))\n    tt = list(map(int, input().split()))\n    max_t = max(tt)\n    lhs = [x - (max_t - t) for (x, t) in zip(xx, tt)]\n    rhs = [x + (max_t - t) for (x, t) in zip(xx, tt)]\n    if all_intersect(lhs, rhs):\n        slowest_idx = next((i for (i, t) in enumerate(tt) if t == max_t))\n        slowest_x = xx[slowest_idx]\n        return slowest_x\n    most_left = min(rhs)\n    most_right = max(lhs)\n    return (most_left + most_right) / 2\nfor test_id in range(int(input())):\n    print(solve())", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'R();a=*zip(R(),R()),;print((max(x+y for x,y in a)+min(x-y for x,y in a))/2);')", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'R();a=*zip(R(),R()),;print((max(x+y for x,y in a)+min(x-y for x,y in a))/2);')", "t = int(input())\n\ndef solve():\n    n = int(input())\n    lst = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    arr = []\n    for i in range(n):\n        arr += [lst[i] - t[i], lst[i] + t[i]]\n    s = max(arr) + min(arr)\n    if s % 2 == 0:\n        print(s // 2)\n    else:\n        print(s // 2, end='')\n        print('.', end='')\n        print(5)\nwhile t:\n    solve()\n    t -= 1", "for (_, (xs, ts)) in ((input(), (tuple(map(int, input().split())) for _ in '00')) for _ in range(int(input()))):\n    print((max((x + t for (x, t) in zip(xs, ts))) + min((x - t for (x, t) in zip(xs, ts)))) / 2)", "import collections\n\ndef do_test():\n    n = int(input())\n    x = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    minx = min([x[i] - t[i] for i in range(n)])\n    maxx = max([x[i] + t[i] for i in range(n)])\n    print((maxx + minx) / 2)\nt = int(input())\nfor _ in range(t):\n    do_test()", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nfor _ in [0] * int(input()):\n    n = int(input())\n    a = [*map(int, input().split())]\n    b = [*map(int, input().split())]\n    print((max(map(lambda x: x[0] + x[1], zip(a, b))) + min(map(lambda x: x[0] - x[1], zip(a, b)))) / 2)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    left = a[0]\n    right = a[-1]\n    for i in range(n):\n        if a[i] - b[i] < left:\n            left = a[i] - b[i]\n        if a[i] + b[i] > right:\n            right = a[i] + b[i]\n    ans = (left + right) / 2\n    print(ans)\n    t -= 1", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = (*zip(R(), R()),)\n    print((max((x + y for (x, y) in a)) + min((x - y for (x, y) in a))) / 2)", "n = int(input())\nfor i in range(n):\n    x = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    min = l1[0] - l2[0]\n    max = l1[0] + l2[0]\n    for j in range(1, x):\n        low = l1[j] - l2[j]\n        high = l1[j] + l2[j]\n        if low < min:\n            min = low\n        if high > max:\n            max = high\n    print((max + min) / 2.0)", "for _ in range(int(input().strip())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    t1 = [l1[i] - l2[i] for i in range(n)]\n    t2 = [l1[i] + l2[i] for i in range(n)]\n    res = (min(t1) + max(t2)) / 2\n    print(res)", "from collections import defaultdict as dd\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = list(map(int, input().split()))\n    x1 = [l[x] + l1[x] for x in range(n)]\n    x2 = [l[x] - l1[x] for x in range(n)]\n    print((max(x1) + min(x2)) / 2)", "for _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    mi = x[0] - t[0]\n    ma = t[0] + x[0]\n    for i in range(1, n):\n        l = x[i] - t[i]\n        h = x[i] + t[i]\n        if l < mi:\n            mi = l\n        if h > ma:\n            ma = h\n    print((mi + ma) / 2.0)", "def main():\n    n_tests = int(input())\n    for _ in range(n_tests):\n        n = int(input())\n        elems = list(map(int, input().split(' ')))\n        times = list(map(int, input().split(' ')))\n        updates = []\n        for i in range(n):\n            updates.append(elems[i] + times[i])\n            updates.append(elems[i] - times[i])\n        (min_v, max_v) = (updates[0], updates[0])\n        for x in updates:\n            if x > max_v:\n                max_v = x\n            if x < min_v:\n                min_v = x\n        print((max_v + min_v) / 2)\nmain()", "K = int(input())\nwhile K:\n    k = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = []\n    for (i, j) in zip(a, b):\n        c.append(i - j)\n        c.append(i + j)\n    print((max(c) + min(c)) / 2)\n    K -= 1", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'R();a=*zip(R(),R()),;print((max(x+y for x,y in a)+min(x-y for x,y in a))/2);')", "for _ in range(int(input().strip())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    t1 = [l1[i] - l2[i] for i in range(n)]\n    t2 = [l1[i] + l2[i] for i in range(n)]\n    res = (min(t1) + max(t2)) / 2\n    print(res)", "import math\nimport string\nfrom typing import Optional\n\ndef mapped_read(cast):\n    return map(cast, input().split())\n\ndef read_list(cast):\n    return list(mapped_read(cast))\n\ndef lcm(a, b):\n    return a // math.gcd(a, b) * b\n\ndef calc(x, t, a):\n    return max([t[i] + abs(x[i] - a) for i in range(len(x))])\n\ndef solve():\n    (n,) = mapped_read(int)\n    x = read_list(int)\n    t = read_list(int)\n    a = [x[i] - t[i] for i in range(n)] + [x[i] + t[i] for i in range(n)]\n    (l, r) = (min(a), max(a))\n    print(f'{(l + r) / 2:.1f}')\nn = 1\nn = int(input())\nfor _ in range(n):\n    solve()", "n = int(input())\nfor i in range(n):\n    x = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    min = l1[0] - l2[0]\n    max = l1[0] + l2[0]\n    for j in range(1, x):\n        low = l1[j] - l2[j]\n        high = l1[j] + l2[j]\n        if low < min:\n            min = low\n        if high > max:\n            max = high\n    print((max + min) / 2.0)", "from cmath import inf\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    location = list(map(int, input().split(' ')))\n    time = list(map(int, input().split(' ')))\n    mins = []\n    maxs = []\n    max_time = max(time)\n    index = -1\n    is_find = False\n    for i in range(n):\n        remain_time = max_time - time[i]\n        if remain_time == 0 and (not is_find):\n            index = location[i]\n            is_find = True\n            continue\n        mins.append(location[i] - remain_time)\n        maxs.append(location[i] + remain_time)\n    if len(mins) < 1:\n        print(location[0])\n        continue\n    max_min = max(mins)\n    min_max = min(maxs)\n    if min_max < max_min:\n        left = min([index, max_min, min_max])\n        right = max([index, max_min, min_max])\n        print((right + left) / 2)\n    elif index < max_min:\n        print((index + max_min) / 2)\n    elif max_min <= index <= min_max:\n        print(index)\n    else:\n        print((index + min_max) / 2)", "for _ in range(int(input())):\n    a = int(input())\n    b = [int(i) for i in input().split()]\n    c = [int(i) for i in input().split()]\n    d = [c[i] + b[i] for i in range(a)]\n    e = [b[i] - c[i] for i in range(a)]\n    d.extend(e)\n    (mi, ma) = (min(d), max(d))\n    if (mi + ma) % 2 == 0:\n        print((mi + ma) // 2)\n    else:\n        print((mi + ma) / 2)", "for _ in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    s = []\n    f = 0.0\n    for i in range(n):\n        s.append(l1[i] + l2[i])\n        s.append(l1[i] - l2[i])\n    a = min(s) + max(s)\n    f = a / 2\n    print(f)", "def meeting(arr1, arr2):\n    k = 0\n    index = arr1[0]\n    for i in range(len(arr2)):\n        if arr2[i] > k:\n            k = arr2[i]\n            index = arr1[i]\n    pos = index\n    left_side = 0\n    right_side = 0\n    for i in range(len(arr1)):\n        if arr1[i] < pos:\n            temp1 = pos - arr1[i] + arr2[i]\n            left_side = max(left_side, temp1)\n        elif arr1[i] > pos:\n            temp2 = arr1[i] - pos + arr2[i]\n            right_side = max(right_side, temp2)\n    if left_side >= k and right_side >= k:\n        opt_pos = index + (right_side - left_side) / 2\n    elif left_side <= k and right_side <= k:\n        opt_pos = index\n    elif left_side <= k and right_side >= k:\n        opt_pos = index + (right_side - k) / 2\n    else:\n        opt_pos = index - (left_side - k) / 2\n    if opt_pos < 0:\n        return 0\n    else:\n        return opt_pos\nk = int(input())\nfor i in range(k):\n    n = int(input())\n    arr1 = input().split()\n    arr1 = [int(l) for l in arr1]\n    arr2 = input().split()\n    arr2 = [int(l) for l in arr2]\n    print(meeting(arr1, arr2))", "for _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append(x[i] - t[i])\n        a.append(x[i] + t[i])\n    print((max(a) + min(a)) / 2)", "from sys import stdin\n\ndef main():\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        x = list(map(int, stdin.readline().split()))\n        times = list(map(int, stdin.readline().split()))\n        dic = {}\n        m = -1\n        m_idx = 0\n        for i in range(n):\n            if x[i] in dic:\n                dic[x[i]] = max(dic[x[i]], times[i])\n            else:\n                dic[x[i]] = times[i]\n            if m < times[i]:\n                m = times[i]\n                m_idx = x[i]\n        min_pos = 1000000000\n        max_pos = -1\n        for set in dic.items():\n            min_pos = min(min_pos, min(m_idx, set[0] + (m - set[1])))\n            max_pos = max(max_pos, max(m_idx, set[0] - (m - set[1])))\n        print((min_pos + max_pos) / 2)\nmain()", "import sys\nfrom os.path import exists\nif exists('test.txt'):\n    sys.stdin = open('test.txt', 'r')\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    res = []\n    for i in range(len(a)):\n        res.append(a[i] - t[i])\n        res.append(a[i] + t[i])\n    print((max(res) + min(res)) / 2)", "for _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    arr = []\n    for i in range(n):\n        arr.append(x[i] - t[i])\n        arr.append(x[i] + t[i])\n    ans = (max(arr) + min(arr)) / 2\n    if int(ans) == ans:\n        print(int(ans))\n    else:\n        print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = [int(x) for x in input().split()]\n    t = [int(x) for x in input().split()]\n    l = 100000000\n    r = -100000000\n    i = 0\n    while i < n:\n        if x[i] + t[i] > r:\n            r = x[i] + t[i]\n        if x[i] - t[i] < l:\n            l = x[i] - t[i]\n        i += 1\n    print((l + r) / 2)", "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\ndef values():\n    return tuple(map(int, sys.stdin.readline().split()))\n\ndef inlsts():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef instr():\n    return sys.stdin.readline().strip()\n\ndef words():\n    return [i for i in sys.stdin.readline().strip().split()]\n\ndef chars():\n    return [i for i in sys.stdin.readline().strip()]\n\ndef solve():\n    n = inp()\n    d = values()\n    t = values()\n    (mn, mx) = (float('inf'), -float('inf'))\n    for i in range(n):\n        mn = min(mn, d[i] - t[i])\n        mx = max(mx, d[i] + t[i])\n    print((mn + mx) / 2)\nfor i in range(inp()):\n    solve()\n0", "t = int(input())\n\ndef solve():\n    n = int(input())\n    x = [int(x) for x in input().split()]\n    t = [int(x) for x in input().split()]\n    tmax = max(t)\n    xlower = 10 ** 9\n    xupper = -1\n    for i in range(n):\n        if t[i] == tmax:\n            if x[i] < xlower:\n                xlower = x[i]\n            if x[i] > xupper:\n                xupper = x[i]\n    mp = (xlower + xupper) / 2\n    time_mp = tmax + (xupper - xlower) / 2\n    leftmost = mp\n    rightmost = mp\n    for i in range(n):\n        if x[i] < mp:\n            rnge = time_mp - t[i]\n            if x[i] + rnge < leftmost:\n                leftmost = x[i] + rnge\n        elif x[i] > mp:\n            rnge = time_mp - t[i]\n            if x[i] - rnge > rightmost:\n                rightmost = x[i] - rnge\n    print((leftmost + rightmost) / 2)\nfor _ in range(t):\n    solve()", "import sys\nimport math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    positions = list(map(int, input().strip().split()))\n    dressedTime = list(map(int, input().strip().split()))\n    maxTime = max(dressedTime)\n    left = []\n    right = []\n    for i in range(n):\n        dist = maxTime - dressedTime[i]\n        left.append(positions[i] - dist)\n        right.append(positions[i] + dist)\n    print((max(left) + min(right)) / 2)", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'R();a,b=zip(*((x+y,x-y)for x,y in zip(R(),R())));print((max(a)+min(b))/2);')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    x = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]\n    l = []\n    for j in range(n):\n        l.append(x[j] - p[j])\n        l.append(x[j] + p[j])\n    ma = max(l)\n    mi = min(l)\n    print((ma + mi) / 2)", "n = int(input())\nfor i in range(n):\n    ppl = input()\n    positions = list(map(int, input().split()))\n    gettingready = list(map(int, input().split()))\n    avg = (max(positions) + min(positions)) / 2\n    new = []\n    for i in range(len(positions)):\n        new.append(positions[i] - gettingready[i])\n        new.append(positions[i] + gettingready[i])\n    new_avg = (max(new) + min(new)) / 2\n    print(new_avg)", "for _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    if t.count(0) == len(t):\n        print((max(x) + min(x)) / 2)\n    else:\n        a = []\n        for i in range(n):\n            a.append(x[i] - t[i])\n            a.append(x[i] + t[i])\n        print((max(a) + min(a)) / 2)", "for _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append(x[i] - t[i])\n        a.append(x[i] + t[i])\n    print((max(a) + min(a)) / 2)", "for _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    l = []\n    for e in range(n):\n        l.append(x[e] + t[e])\n        l.append(x[e] - t[e])\n    print((max(l) + min(l)) / 2)", "def main():\n    for i in range(int(input())):\n        test()\n\ndef test():\n    n = int(input())\n    x = list(map(int, input().split(' ')))\n    t = list(map(int, input().split(' ')))\n    mi = x[0] - t[0]\n    ma = x[0] + t[0]\n    for i in range(1, n):\n        mi = min(x[i] - t[i], mi)\n        ma = max(x[i] + t[i], ma)\n    print((mi + ma) / 2)\nmain()", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'R();a,b=zip(*((x+y,x-y)for x,y in zip(R(),R())));print((max(a)+min(b))/2);')", "K = int(input())\nwhile K:\n    k = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = []\n    for (i, j) in zip(a, b):\n        c.append(i - j)\n        c.append(i + j)\n    print((max(c) + min(c)) / 2)\n    K -= 1", "import sys\nfrom itertools import accumulate\ninput = sys.stdin.readline\n\ndef find_max(t):\n    m = 0\n    ind = 0\n    for (i, val) in enumerate(t):\n        if val > m:\n            m = val\n            ind = i\n    return (ind, m)\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    (ind, m) = find_max(t)\n    pi = p[ind]\n    ls = [max(p[k] - (m - t[k]), pi) if p[k] >= pi else min(p[k] + (m - t[k]), pi) for k in range(n)]\n    print((max(ls) + min(ls)) / 2)", "def func():\n    N = int(input())\n    Pos = list(map(int, input().split()))\n    Dressed = list(map(int, input().split()))\n    max_pos = -999999999999\n    min_pos = 999999999999\n    for i in range(N):\n        max_pos = max(max_pos, Pos[i] + Dressed[i])\n        min_pos = min(min_pos, Pos[i] - Dressed[i])\n    print((max_pos + min_pos) / 2)\nn_tests = int(input())\nfor i in range(n_tests):\n    func()", "test = int(input())\nfor _ in range(test):\n    input()\n    l = 10000000000.0\n    r = -10000000000.0\n    index = [int(x) for x in input().split()]\n    time = [int(x) for x in input().split()]\n    for (i, j) in zip(index, time):\n        l = min(l, i - j)\n        r = max(r, i + j)\n    print((l + r) / 2)", "import sys\nsys.setrecursionlimit(1000000)\n\ndef mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\nfor T in range(int(input())):\n    n = ni()\n    x = li()\n    t = li()\n    minn = min(x)\n    maxx = max(x)\n    for i in range(n):\n        minn = min(minn, x[i] - t[i])\n        maxx = max(maxx, x[i] + t[i])\n    print((minn + maxx) / 2)", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'R();a,b=zip(*((x+y,x-y)for x,y in zip(R(),R())));print((max(a)+min(b))/2);')", "for i in range(int(input())):\n    n = int(input())\n    posi = list(map(int, input().split()))\n    time = list(map(int, input().split()))\n    (m1, m2) = (posi[0] - time[0], posi[0] + time[0])\n    for i in range(n):\n        m1 = min(m1, posi[i] - time[i])\n        m2 = max(m2, posi[i] + time[i])\n    print((m1 + m2) / 2)", "s = int(input())\nwhile s != 0:\n    n = int(input())\n    x = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    mx = x[0] + t[0]\n    mi = x[0] - t[0]\n    for i in range(1, n):\n        mi = min(mi, x[i] - t[i])\n        mx = max(mx, x[i] + t[i])\n    sum = mi + mx\n    if sum % 2 == 0:\n        print(sum // 2)\n    else:\n        print(str(sum // 2) + '.5')\n    s -= 1", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'R();a,b=zip(*((x+y,x-y)for x,y in zip(R(),R())));print((max(a)+min(b))/2);')", "t = int(input())\noutput = []\nfor i in range(t):\n    n = int(input())\n    coordinates = [int(c) for c in input().split()]\n    dress = [int(d) for d in input().split()]\n    new_coordinates = []\n    for j in range(n):\n        if dress[j] != 0:\n            new_coordinates.append(coordinates[j] - dress[j])\n            new_coordinates.append(coordinates[j] + dress[j])\n            n += 1\n        else:\n            new_coordinates.append(coordinates[j])\n    output.append((max(new_coordinates) + min(new_coordinates)) / 2)\nfor o in output:\n    print(o)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    ans = float('inf')\n    ans1 = -float('inf')\n    for i in range(n):\n        ans = min(ans, l[i] - m[i])\n        ans1 = max(ans1, l[i] + m[i])\n    print((ans + ans1) / 2)", "for _ in range(int(input().strip())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    t1 = l1[0] - l2[0]\n    t2 = l1[0] + l2[0]\n    for i in range(n):\n        t1 = min(t1, l1[i] - l2[i])\n        t2 = max(t2, l1[i] + l2[i])\n    print((t1 + t2) / 2)", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'R();a,b=zip(*((x+y,x-y)for x,y in zip(R(),R())));print((max(a)+min(b))/2);')", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'R();a,b=zip(*((x+y,x-y)for x,y in zip(R(),R())));print((max(a)+min(b))/2);')", "from math import fabs\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    line1 = input().split(' ')\n    line2 = input().split(' ')\n    intline = [int(x) for x in line1]\n    intline2 = [int(x) for x in line2]\n    x0 = intline[0]\n    s0 = intline2[0]\n    for j in range(1, len(intline)):\n        x1 = intline[j]\n        s1 = intline2[j]\n        if x0 > x1:\n            (x0, x1) = (x1, x0)\n            (s0, s1) = (s1, s0)\n        if x1 - x0 <= fabs(s1 - s0):\n            if s1 > s0:\n                x0 = x1\n                s0 = s1\n            else:\n                pass\n        else:\n            x0 = (x1 + x0 + (s1 - s0)) / 2\n            s0 = s1 + (x1 - x0)\n    if x0 % 1 == 0.0:\n        print(int(x0))\n    else:\n        print(x0)", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom collections import deque\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    a = int_arr()\n    t = int_arr()\n    mn = float('inf')\n    mx = 0\n    for i in range(n):\n        mn = min(mn, a[i] - t[i])\n        mx = max(mx, a[i] + t[i])\n    ans = (mx + mn) / 2\n    print(ans)", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'R();a,b=zip(*((x+y,x-y)for x,y in zip(R(),R())));print((max(a)+min(b))/2);')", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'R();a,b=zip(*((x+y,x-y)for x,y in zip(R(),R())));print((max(a)+min(b))/2);')", "INT_MAX = 2147483627\nimport math\nt = int(input())\ncnt = 0\nwhile t:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    maxx = -10 ** 9\n    minn = 10 ** 9\n    for i in range(n):\n        maxx = max(maxx, l[i] + a[i])\n        minn = min(minn, l[i] - a[i])\n    print((maxx + minn) / 2.0)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    mx = a[0]\n    mi = a[-1]\n    for i in range(n):\n        mx = max(mx, a[i] + b[i])\n        mi = min(mi, a[i] - b[i])\n    print(0.5 * (mx + mi))", "cnt = int(input())\nwhile cnt:\n    n = int(input())\n    x = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    (p, q) = (min(x), max(x))\n    for i in range(n):\n        p = min(p, x[i] - t[i])\n        q = max(q, x[i] + t[i])\n    print((p + q) / 2)\n    cnt -= 1", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    j = 0\n    ma = -200000000\n    mi = 200000000\n    while j < n:\n        ma = max(ma, a[j] + t[j])\n        mi = min(mi, a[j] - t[j])\n        j += 1\n    print((ma + mi) / 2)", "for _ in range(int(input())):\n    n = int(input())\n    arr = input().split(' ')\n    time = input().split(' ')\n    arr = [int(i) for i in arr]\n    time = [int(i) for i in time]\n    (a, b) = (-2 ** 31, -2 ** 31)\n    for i in range(n):\n        a = max(a, time[i] + arr[i])\n        b = max(b, time[i] - arr[i])\n    if (a - b) % 2:\n        print((a - b) / 2)\n    else:\n        print((a - b) // 2)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    coordinates = [int(c) for c in input().split()]\n    dress = [int(d) for d in input().split()]\n    new_coordinates = []\n    for j in range(n):\n        if dress[j] != 0:\n            new_coordinates.append(coordinates[j] - dress[j])\n            new_coordinates.append(coordinates[j] + dress[j])\n            n += 1\n        else:\n            new_coordinates.append(coordinates[j])\n    print((max(new_coordinates) + min(new_coordinates)) / 2)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    x_str = input()\n    time_str = input()\n    list_of_x_str = x_str.split(' ')\n    x = [int(a) for a in list_of_x_str]\n    list_of_time_str = time_str.split(' ')\n    time = [int(a) for a in list_of_time_str]\n    count = 0\n    min_cor = 200000000\n    max_cor = 0\n    for i in range(n):\n        count += 1\n        min_cor = min(min_cor, x[i] - time[i])\n        max_cor = max(max_cor, x[i] + time[i])\n    print((min_cor + max_cor) / 2)", "def N():\n    return int(input())\n\ndef A():\n    return [int(x) for x in input().split()]\n\ndef S():\n    return input()\nfor _ in range(N()):\n    a = []\n    b = []\n    n = N()\n    x = A()\n    if 'dutrhg39fer89' == 32474864432759553:\n        print('Tanmay')\n    t = A()\n    m = max(t)\n    for i in range(n):\n        dif = m - t[i]\n        b.append(dif + x[i])\n        a.append(max(0, x[i]) - dif)\n    maxi = min(b)\n    mini = max(a)\n    print(int(maxi + mini) / 2)", "import sys\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    aa = [float(i) for i in input().split()]\n    t = [float(i) for i in input().split()]\n    a = []\n    for i in range(n):\n        a.append(aa[i] + t[i])\n        a.append(aa[i] - t[i])\n    a.sort()\n    print((a[0] + a[-1]) / 2)", "nb_test = int(input())\nans = []\nfor _ in range(nb_test):\n    n = int(input())\n    xs = list(map(int, input().split(' ')))\n    ts = list(map(int, input().split(' ')))\n    best = 0\n    worse_p = 0\n    worse_n = 0\n\n    def dist_p(i):\n        return xs[i] + ts[i]\n\n    def dist_n(i):\n        return -xs[i] + ts[i]\n    for i in range(n):\n        if dist_p(i) >= dist_p(worse_p):\n            worse_p = i\n        if dist_n(i) >= dist_n(worse_n):\n            worse_n = i\n    an = (xs[worse_p] + xs[worse_n] + ts[worse_p] - ts[worse_n]) / 2\n    if an.is_integer():\n        an = int(an)\n    ans.append(an)\nfor an in ans:\n    print(an)", "from math import inf\nfor _ in range(int(input())):\n    n = int(input())\n    coords = list(map(int, input().split()))\n    time = list(map(int, input().split()))\n    mx = time.index(max(time))\n    x1 = inf\n    x2 = -inf\n    for i in range(n):\n        if coords[i] <= coords[mx]:\n            x1 = min(x1, min(coords[mx], coords[i] + (time[mx] - time[i])))\n        if coords[i] >= coords[mx]:\n            x2 = max(x2, max(coords[mx], coords[i] - (time[mx] - time[i])))\n    print((x1 + x2) / 2)", "for _ in range(int(input())):\n    n = int(input())\n    positions = [int(x) for x in input().split()]\n    sorted_positions = sorted(positions)\n    dressing_times = [int(x) for x in input().split()]\n    max_dressing_time = -1\n    index_of_maxes = []\n    for (index, time) in enumerate(dressing_times):\n        if time > max_dressing_time:\n            index_of_maxes = [index]\n            max_dressing_time = time\n        elif time == max_dressing_time:\n            index_of_maxes.append(index)\n    first_element = sorted_positions[0]\n    last_element = sorted_positions[-1]\n    current_min_diff = 200000000.0\n    centered_max_index = 0\n    for index in index_of_maxes:\n        pos = positions[index]\n        diff = abs(abs(first_element - pos) - abs(last_element - pos))\n        if diff < current_min_diff:\n            centered_max_index = index\n            current_min_diff = diff\n    centered_pos = positions[centered_max_index]\n    new_positions = []\n    for i in range(n):\n        time = dressing_times[i]\n        pos = positions[i]\n        max_time = time + abs(centered_pos - pos)\n        if max_dressing_time > max_time:\n            continue\n        remaining_time = max_dressing_time - time\n        new_positions.append(pos - remaining_time if centered_pos < pos else pos + remaining_time)\n    sorted_positions = sorted(new_positions)\n    print((sorted_positions[-1] + sorted_positions[0]) / 2)", "ntestcases = int(input())\nfor t in range(ntestcases):\n    numPeople = int(input())\n    positions = list(map(int, input().split(' ')))\n    dressingTimes = list(map(int, input().split(' ')))\n    if dressingTimes[0] > 0:\n        minPos = positions[0] - dressingTimes[0]\n        maxPos = positions[0] + dressingTimes[0]\n    else:\n        minPos = positions[0]\n        maxPos = positions[0]\n    for i in range(1, numPeople):\n        if dressingTimes[i] > 0:\n            smol = positions[i] - dressingTimes[i]\n            big = positions[i] + dressingTimes[i]\n            minPos = min(minPos, smol)\n            maxPos = max(maxPos, big)\n        else:\n            minPos = min(minPos, positions[i])\n            maxPos = max(maxPos, positions[i])\n    answer = (maxPos + minPos) / 2\n    intAnswer = int(answer)\n    if answer == intAnswer:\n        print(intAnswer)\n    else:\n        print(answer)", "from re import L\nimport sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nfor _ in range(inp()):\n    n = inp()\n    dis = inlt()\n    time = inlt()\n    k = 0\n    ki = 0\n    for i in range(n):\n        if time[i] > k:\n            k = time[i]\n            ki = i\n    mx = 1000000009\n    mn = 0\n    for i in range(n):\n        mx = min(mx, dis[i] + abs(time[i] - k))\n        mn = max(mn, dis[i] - abs(time[i] - k), 0)\n    if mn <= mx:\n        print(dis[ki])\n    else:\n        print((mx + mn) / 2)", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    list1 = [int(num) for num in input().split()]\n    times = [int(num) for num in input().split()]\n    list2 = []\n    for i in range(0, n):\n        list2.append(list1[i] + times[i])\n        list2.append(list1[i] - times[i])\n    list2.sort()\n    mid = (list2[0] + list2[-1]) / 2\n    print(mid)", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    list1 = [int(num) for num in input().split()]\n    times = [int(num) for num in input().split()]\n    list2 = []\n    for i in range(0, n):\n        list2.append(list1[i] + times[i])\n        list2.append(list1[i] - times[i])\n    list2.sort()\n    mid = (list2[0] + list2[-1]) / 2\n    print(mid)", "n = int(input())\nz = []\nfor i in range(n):\n    y = []\n    x = int(input())\n    p = input().split(' ')\n    t = input().split(' ')\n    for k in range(len(p)):\n        y.append(int(p[k]) + int(t[k]))\n        y.append(int(p[k]) - int(t[k]))\n    min = 1000000000\n    max = 0\n    for i in range(len(y)):\n        if y[i] > max:\n            max = y[i]\n        elif y[i] < min:\n            min = y[i]\n    print((max + min) / 2)\nfor a in range(len(z)):\n    print(z[a])", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    x = list(map(int, input().split(' ')))\n    time = list(map(int, input().split(' ')))\n    a = list()\n    for i in range(n):\n        a.append(x[i] + time[i])\n        a.append(x[i] - time[i])\n    minn = a[0]\n    maxx = a[0]\n    for v in a:\n        minn = min(minn, v)\n        maxx = max(maxx, v)\n    summ = maxx + minn\n    print(summ / 2)\n    t -= 1", "n = int(input())\nfor i in range(n):\n    y = []\n    x = int(input())\n    p = input().split(' ')\n    t = input().split(' ')\n    for k in range(len(p)):\n        y.append(int(p[k]) + int(t[k]))\n        y.append(int(p[k]) - int(t[k]))\n    y.sort()\n    print((y[0] + y[-1]) / 2)", "for i in range(int(input())):\n    y = []\n    x = int(input())\n    p = input().split(' ')\n    t = input().split(' ')\n    for k in range(len(p)):\n        y.append(int(p[k]) + int(t[k]))\n        y.append(int(p[k]) - int(t[k]))\n    y.sort()\n    print((y[0] + y[-1]) / 2)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    (list_time, list_cord) = ([], [])\n    list_cord = list(map(int, input().split()))\n    list_time = list(map(int, input().split()))\n    list_all_x_points = [0 for i in range(2 * n)]\n    for i in range(0, 2 * n, 2):\n        list_all_x_points[i] = list_cord[i // 2] + list_time[i // 2]\n        list_all_x_points[1 + i] = list_cord[i // 2] - list_time[i // 2]\n    maxi = mini = list_all_x_points[0]\n    for i in list_all_x_points:\n        maxi = max(maxi, i)\n        mini = min(mini, i)\n    sum = mini + maxi\n    print(sum // 2, end='')\n    if sum % 2:\n        print('.5')\n    else:\n        print()", "import collections\nimport sys\nfrom typing import List\nfrom bisect import bisect_left, bisect_right, insort_left, insort_right\nfrom collections import defaultdict, Counter, deque\nfrom heapq import heappush, heappop\nfrom itertools import accumulate\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nres = []\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    (list_time, list_cord) = ([], [])\n    list_cord = list(map(int, input().split()))\n    list_time = list(map(int, input().split()))\n    list_all_x_points = [0] * (2 * n)\n    for i in range(0, 2 * n, 2):\n        list_all_x_points[i] = list_cord[i // 2] + list_time[i // 2]\n        list_all_x_points[1 + i] = list_cord[i // 2] - list_time[i // 2]\n    maxi = mini = list_all_x_points[0]\n    for i in list_all_x_points:\n        maxi = max(maxi, i)\n        mini = min(mini, i)\n    sum = mini + maxi\n    res.append(round(sum / 2, 1))\nfor i in res:\n    print(i)", "for i in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    tim = list(map(int, input().split()))\n    cal = sorted(list(zip(tim, nums)), reverse=True)\n    ans = [cal[0][0], cal[0][1]]\n    for i in cal:\n        if ans[1] < i[1]:\n            if i[1] - ans[1] + i[0] > ans[0]:\n                v = (i[1] - ans[1] + i[0] - ans[0]) / 2\n                (ans[0], ans[1]) = (ans[0] + v, ans[1] + v)\n        elif ans[1] > i[1]:\n            if -i[1] + ans[1] + i[0] > ans[0]:\n                v = (-i[1] + ans[1] + i[0] - ans[0]) / 2\n                (ans[0], ans[1]) = (ans[0] + v, ans[1] - v)\n    print(ans[1])", "t = int(input())\nfor ncase in range(1, t + 1):\n    n = int(input())\n    x = [int(s) for s in input().split(' ')]\n    t = [int(s) for s in input().split(' ')]\n    z = [(x[i], x[i] - t[i], x[i] + t[i]) for i in range(n)]\n    ans = 0\n    z.sort()\n    low = z[0][1]\n    high = z[-1][2]\n    for i in range(0, n):\n        if z[i][1] < low:\n            low = z[i][1]\n        if z[i][2] > high:\n            high = z[i][2]\n    ans = (low + high) / 2\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    pos = [int(i) for i in input().split()]\n    t_ex = [int(i) for i in input().split()]\n    (pos, t_ex) = [list(x) for x in zip(*sorted(zip(pos, t_ex), key=lambda pair: pair[0]))]\n    if n == 1:\n        print(pos[0])\n        continue\n    left = [t_ex[0]]\n    right = [t_ex[-1]]\n    for i in range(1, len(pos)):\n        left.append(max(t_ex[i], left[-1] + pos[i] - pos[i - 1]))\n        right.append(max(t_ex[-i - 1], right[-1] + pos[-i] - pos[-i - 1]))\n    right.reverse()\n    if left[-1] <= right[-1]:\n        print(pos[-1])\n        continue\n    for i in range(len(pos)):\n        if left[i] >= right[i]:\n            print(pos[i] + (right[i] - left[i]) / 2.0)\n            break", "import sys\n\ndef main():\n    t = int(sys.stdin.readline()[:-1])\n    for _ in range(t):\n        n = int(sys.stdin.readline()[:-1])\n        xs = list(map(int, sys.stdin.readline()[:-1].split()))\n        ts = list(map(int, sys.stdin.readline()[:-1].split()))\n        ids = list(range(len(xs)))\n        ids.sort(key=lambda i: xs[i])\n        (_xs, _ts) = ([], [])\n        for i in ids:\n            _xs.append(xs[i])\n            _ts.append(ts[i])\n        (xs, ts) = (_xs, _ts)\n        d = []\n        for i in range(len(xs)):\n            if len(d) == 0:\n                d.append(ts[i] - xs[i])\n            else:\n                d.append(max(d[-1], ts[i] - xs[i]))\n        s = []\n        for i in range(len(xs) - 1, -1, -1):\n            if len(s) == 0:\n                s.append(ts[i] + xs[i])\n            else:\n                s.append(max(s[-1], ts[i] + xs[i]))\n        s = s[::-1]\n        (_min, pos) = (float('inf'), -1)\n        for i in range(len(xs)):\n            cur = max(d[i] + xs[i], s[i] - xs[i])\n            if cur < _min:\n                (_min, pos) = (cur, xs[i])\n            if i > 0:\n                p = (s[i] - d[i - 1]) / 2\n                if xs[i - 1] < p < xs[i]:\n                    cur = max(d[i - 1] + p, s[i] - p)\n                    if cur < _min:\n                        (_min, pos) = (cur, p)\n        print(pos)\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = list(map(int, input().split()))\n    time = list(map(int, input().split()))\n    if len(x) == 1:\n        print(x[0])\n        continue\n    st = sorted(list(zip(x, time)), key=lambda p: p[1])\n    max_time = st[-1]\n    time = list(map(lambda p: p - max_time[1], time))\n    st = sorted(list(zip(x, time)), key=lambda p: p[0])\n    most_left = None\n    most_right = None\n    for obj in st:\n        left = obj[0] + obj[1]\n        right = obj[0] - obj[1]\n        mid = obj[0]\n        if left <= max_time[0] <= right:\n            if most_left is None:\n                most_left = max_time[0]\n            most_left = min(most_left, max_time[0])\n            if most_right is None:\n                most_right = max_time[0]\n            most_right = max(most_right, max_time[0])\n        else:\n            if mid < max_time[0]:\n                if most_left is None:\n                    most_left = right\n                most_left = min(most_left, right)\n            if mid > max_time[0]:\n                if most_right is None:\n                    most_right = left\n                most_right = max(most_right, left)\n    print((most_left + most_right) / 2.0)", "import sys, math\ninput = sys.stdin.readline\nINF = int(1000000000.0) + 7\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [(a[i], b[i]) for i in range(n)]\n    c.sort()\n    pre = [0] * n\n    suf = [0] * n\n    for i in range(n):\n        pre[i] = c[i][1] - c[i][0]\n        suf[i] = c[i][0] + c[i][1]\n    for i in range(1, n):\n        pre[i] = max(pre[i], pre[i - 1])\n    for i in range(n - 2, -1, -1):\n        suf[i] = max(suf[i], suf[i + 1])\n    ans = c[-1][0]\n    ret = max(suf[-1] - c[-1][0], c[-1][0] + pre[-1])\n    for i in range(n - 1):\n        x = c[i][0] + pre[i]\n        y = suf[i + 1] - c[i][0]\n        if max(x, y) < ret:\n            ret = max(x, y)\n            ans = c[i][0]\n        if y > x:\n            z = (suf[i + 1] - pre[i]) / 2\n            if c[i][0] <= z <= c[i + 1][0]:\n                x = z + pre[i]\n                y = suf[i + 1] - z\n                if max(x, y) < ret:\n                    ret = max(x, y)\n                    ans = z\n    print(ans)\nt = 1\nt = int(input())\nfor i in range(1, t + 1):\n    solve()", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    time = list(map(int, input().split()))\n    x = []\n    for i in range(n):\n        x.append([arr[i], time[i]])\n    x.sort()\n    ans = 0\n    mx = max(time)\n    idx = -1\n    md = 0\n    for i in range(n):\n        if x[i][1] == mx:\n            idx = i\n            md = x[i][0]\n            break\n    a = md\n    b = md\n    for i in range(n):\n        if i < idx:\n            x[i][0] += mx - x[i][1]\n            x[i][0] = min(md, x[i][0])\n            a = min(a, x[i][0])\n        elif i > idx:\n            x[i][0] -= mx - x[i][1]\n            x[i][0] = max(md, x[i][0])\n            b = max(b, x[i][0])\n    ans = (b - a) / 2 + a\n    if ans.is_integer():\n        print(int(ans))\n    else:\n        print(ans)", "import sys\nt = int(sys.stdin.readline())\nfor i in range(t):\n    n = int(input())\n    lstx = list(map(int, input().split()))\n    lsty = list(map(int, input().split()))\n    low = min(lstx)\n    high = max(lstx)\n    l = 0\n    r = 200000001\n    mid = (l + r) / 2\n    ans = r\n    while True:\n        if r < l:\n            break\n        mid = (l + r) // 2\n        lt = -1000000000000000.0\n        rt = 1000000000000000.0\n        er = 0\n        for j in range(n):\n            left = mid - lsty[j]\n            if left < 0:\n                er += 1\n                break\n            a = lstx[j] - left\n            b = lstx[j] + left\n            if a > r or b < l:\n                er += 1\n                break\n            lt = max(lt, a)\n            rt = min(rt, b)\n        if er > 0:\n            l = mid + 1\n        else:\n            ans = (lt + rt) / 2\n            r = mid - 1\n    if int(ans) == ans:\n        ans = int(ans)\n    print(ans)"]