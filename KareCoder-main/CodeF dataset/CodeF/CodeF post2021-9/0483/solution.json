["def bina(l, r, c, d, ss, n):\n    m = (l + r + 1) // 2\n    if l == r:\n        return l\n    y = d // (m + 1)\n    otv = ss[min(n - 1, m)] * y\n    if (m + 1) * y < d:\n        otv += ss[min(n, d - y * (m + 1)) - 1]\n    if otv >= c:\n        return bina(m, r, c, d, ss, n)\n    else:\n        return bina(l, m - 1, c, d, ss, n)\nt = int(input())\nfor test in range(t):\n    (n, c, d) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    x = sum(a[:min(n, d)])\n    if x >= c:\n        print('Infinity')\n    elif a[0] * d < c:\n        print('Impossible')\n    else:\n        ss = [0] * n\n        ss[0] = a[0]\n        for i in range(1, n):\n            ss[i] = ss[i - 1] + a[i]\n        print(bina(0, d, c, d, ss, n))", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom collections import deque\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    (n, v, d) = int_arr()\n    arr = int_arr()\n    arr.sort(reverse=True)\n    p = 0\n    sm = []\n    for i in range(n):\n        p += arr[i]\n        sm.append(p)\n    if max(arr) * d < v:\n        print('Impossible')\n        continue\n    elif sum(arr[:min(n, d)]) >= v:\n        print('Infinity')\n        continue\n    i = 1\n    j = d\n    ans = 0\n    while i <= j:\n        mid = (i + j) // 2\n        if mid <= n:\n            tot = sm[mid - 1]\n            cnt = tot * (d // mid)\n            if d % mid != 0:\n                cnt += sm[d % mid - 1]\n        else:\n            tot = sm[n - 1]\n            cnt = tot * (d // mid)\n            if d % mid != 0:\n                cnt += sm[min(n - 1, d % mid - 1)]\n        if cnt >= v:\n            i = mid + 1\n            ans = mid\n        else:\n            j = mid - 1\n    print(ans - 1)", "def bin():\n    l = 0\n    r = 1\n    while isok(r):\n        r *= 2\n    while r - l > 1:\n        m = (l + r) // 2\n        if isok(m):\n            l = m\n        else:\n            r = m\n    return l\n\ndef isok(n):\n    pz = d // n\n    npz = d % n\n    sum = pz * p[min(n, len(s))] + p[min(npz, len(s))]\n    return sum >= c\nfor qwer in range(int(input())):\n    (n, c, d) = map(int, input().split())\n    s = list(map(int, input().split()))\n    s.sort(reverse=True)\n    p = [0]\n    for i in s:\n        p.append(p[-1] + i)\n    if s[0] * d < c:\n        print('Impossible')\n    elif p[min(len(s), d)] >= c:\n        print('Infinity')\n    else:\n        print(bin() - 1)", "def f(k, s, d):\n    ck = s[min(k, n - 1)] * (d // (k + 1))\n    if d % (k + 1) > 0:\n        ck += s[min(d % (k + 1) - 1, n - 1)]\n    return ck\nT = int(input())\nfor t in range(T):\n    (n, c, d) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a.sort(reverse=True)\n    s = [0] * n\n    s[0] = a[0]\n    for i in range(1, n):\n        s[i] = s[i - 1] + a[i]\n    if s[min(d - 1, n - 1)] >= c:\n        print('Infinity')\n        continue\n    if s[0] * d < c:\n        print('Impossible')\n        continue\n    l = 0\n    r = d\n    while r > l:\n        k = (l + r + 1) // 2\n        ck = f(k, s, d)\n        if ck >= c:\n            l = k\n        else:\n            r = k - 1\n    print(l)", "from itertools import accumulate, dropwhile, count\nfor _ in range(int(input())):\n    (n, c, d) = map(int, input().split())\n    rwds = list(sorted(map(int, input().split()), reverse=True))\n    sums = [0] + list(accumulate(rwds))\n    if sums[min(d, len(rwds))] >= c:\n        print('Infinity')\n    elif d // len(rwds) * sums[-1] + sums[d % len(rwds)] >= c:\n        print(next(dropwhile(lambda k: d // (k + 1) * sums[-1] + sums[min(d % (k + 1), len(rwds))] >= c, count(d * sums[-1] // (c + sums[-1]) - 1))) - 1)\n    else:\n        try:\n            print(next(dropwhile(lambda k: d // (k + 1) * sums[k + 1] + sums[d % (k + 1)] < c, count(len(rwds) - 1, -1))))\n        except:\n            print('Impossible')", "def calc(pre, k, d):\n    recur = 0\n    if k >= len(pre):\n        recur = pre[-1]\n    else:\n        recur = pre[k - 1]\n    cycles = d // k\n    leftover = d % k\n    add = 0\n    if leftover > len(pre):\n        add = pre[-1]\n    elif leftover == 0:\n        add = 0\n    else:\n        add = pre[leftover - 1]\n    return recur * cycles + add\nq = int(input())\nfor o in range(q):\n    (n, c, d) = map(int, input().strip().split())\n    a = list(map(int, input().strip().split()))\n    a.sort()\n    a.reverse()\n    pre = [0 for i in range(n)]\n    cur = 0\n    for i in range(len(a)):\n        cur += a[i]\n        pre[i] = cur\n    l = 1\n    r = d\n    while r - l > 1:\n        m = (r + l) // 2\n        if calc(pre, m, d) >= c:\n            l = m\n        else:\n            r = m\n    if calc(pre, r, d) >= c:\n        if r == d:\n            print('Infinity')\n        else:\n            print(r - 1)\n    elif calc(pre, 1, d) < c:\n        print('Impossible')\n    else:\n        print(l - 1)", "for _ in range(int(input())):\n    (n, c, d) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    zeros = []\n    if d > n:\n        zeros = [0] * (d - n)\n        arr = zeros + arr\n    m = len(arr)\n    ans = 0\n    arr1 = [0] * m\n    if arr[m - 1] * d < c:\n        ans = 'Impossible'\n    elif sum(arr[m - d:m]) >= c:\n        ans = 'Infinity'\n    else:\n        arr1[m - 1] = arr[m - 1]\n        for i in range(m - 2, -1, -1):\n            arr1[i] = arr1[i + 1] + arr[i]\n        for i in range(d, 0, -1):\n            que = d // i\n            rem = d % i\n            if rem > 0:\n                if que * arr1[m - i] + arr1[m - rem] >= c:\n                    ans = i - 1\n                    break\n            elif que * arr1[m - i] >= c:\n                ans = i - 1\n                break\n    print(ans)", "def solve():\n    (n, c, d) = tuple(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    agg = 0\n    for i in range(n):\n        if i >= d:\n            break\n        agg += a[i]\n        a[i] = agg\n        if agg >= c:\n            print('Infinity')\n            return\n    for i in range(d - 1, -1, -1):\n        if a[min(i, n - 1)] * (d // (i + 1)) + (a[min(d % (i + 1) - 1, n - 1)] if d % (i + 1) != 0 else 0) >= c:\n            print(str(i))\n            return\n    print('Impossible')\nt = int(input())\nfor _ in range(t):\n    solve()", "t = int(input(''))\naas = [0] * t\nfor j in range(t):\n    ncd = input('').split(' ')\n    n = int(ncd[0])\n    c = int(ncd[1])\n    d = int(ncd[2])\n    y = input('').split(' ')\n    y = sorted([int(z) for z in y])[::-1]\n    y += [0] * d\n    z = [0] * (n + 1 + d)\n    for i in range(n + d):\n        z[i + 1] = z[i] + y[i]\n    if y[0] * d < c:\n        aas[j] = 'Impossible'\n    elif z[d] >= c:\n        aas[j] = 'Infinity'\n    else:\n        kmin = 1\n        kmax = d\n        while kmin + 1 < kmax:\n            kmed = (kmin + kmax) // 2\n            q = d // kmed\n            r = d % kmed\n            prof = q * z[kmed] + z[r]\n            if prof >= c:\n                kmin = kmed\n            else:\n                kmax = kmed\n        aas[j] = kmin - 1\nfor a in aas:\n    print(a)", "import sys\ninput = sys.stdin.readline\nfor t in range(int(input())):\n    (n, c, d) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    if d > n:\n        for i in range(d - n):\n            lst.append(0)\n    n = len(lst)\n    lst.sort()\n    lst = lst[n - d:]\n    sm = sum(lst)\n    if sm >= c:\n        sys.stdout.write('Infinity' + '\\n')\n        continue\n    if lst[-1] * d < c:\n        sys.stdout.write('Impossible' + '\\n')\n        continue\n    res = []\n    temp = 0\n    for i in reversed(lst):\n        temp += i\n        res.append(temp)\n    for i in reversed(range(1, d)):\n        a = d // i\n        b = d % i\n        temp = a * res[i - 1]\n        if b != 0:\n            temp += res[(b - 1) % len(res)]\n        if temp >= c:\n            sys.stdout.write(str(i - 1) + '\\n')\n            break", "for t in range(int(input())):\n    (n, c, d) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    if d > n:\n        for i in range(d - n):\n            lst.append(0)\n    n = len(lst)\n    lst.sort()\n    lst = lst[n - d:]\n    sm = sum(lst)\n    if sm >= c:\n        print('Infinity')\n        continue\n    if lst[-1] * d < c:\n        print('Impossible')\n        continue\n    res = []\n    temp = 0\n    for i in reversed(lst):\n        temp += i\n        res.append(temp)\n    for i in reversed(range(1, d)):\n        a = d // i\n        b = d % i\n        temp = a * res[i - 1]\n        if b != 0:\n            temp += res[(b - 1) % len(res)]\n        if temp >= c:\n            print(i - 1)\n            break", "for t in range(int(input())):\n    (n, c, d) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    if d > n:\n        for i in range(d - n):\n            lst.append(0)\n    n = len(lst)\n    lst.sort()\n    lst = lst[n - d:]\n    sm = sum(lst)\n    if sm >= c:\n        print('Infinity')\n        continue\n    if lst[-1] * d < c:\n        print('Impossible')\n        continue\n    res = []\n    temp = 0\n    for i in reversed(lst):\n        temp += i\n        res.append(temp)\n    for i in reversed(range(1, d)):\n        a = d // i\n        b = d % i\n        temp = a * res[i - 1]\n        if b != 0:\n            temp += res[(b - 1) % len(res)]\n        if temp >= c:\n            print(i - 1)\n            break", "import sys\ninput = sys.stdin.readline\nfor t in range(int(input())):\n    (n, c, d) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    if d > n:\n        for i in range(d - n):\n            lst.append(0)\n    n = len(lst)\n    lst.sort()\n    lst = lst[n - d:]\n    sm = sum(lst)\n    if sm >= c:\n        print('Infinity')\n        continue\n    if lst[-1] * d < c:\n        print('Impossible')\n        continue\n    res = []\n    temp = 0\n    for i in reversed(lst):\n        temp += i\n        res.append(temp)\n    for i in reversed(range(1, d)):\n        a = d // i\n        b = d % i\n        temp = a * res[i - 1]\n        if b != 0:\n            temp += res[(b - 1) % len(res)]\n        if temp >= c:\n            print(i - 1)\n            break", "import sys\nfrom collections import deque\ninput = sys.stdin.readline\n\ndef valid(mid, l, d, c):\n    s = sum(l[:mid])\n    temp = s * (d // mid)\n    temp += sum(l[:d % mid])\n    if temp >= c:\n        return True\n    else:\n        return False\n\ndef solve():\n    (n, c, d) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort(reverse=True)\n    if l[0] * d < c:\n        print('Impossible')\n    elif sum(l[:d]) >= c:\n        print('Infinity')\n    else:\n        high = d - 1\n        low = 1\n        result = 1\n        while low <= high:\n            mid = (low + high) // 2\n            if valid(mid, l, d, c):\n                result = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        print(result - 1)\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "for _ in range(int(input())):\n    (n, c, d) = map(int, input().split())\n    A = list(map(int, input().split()))\n    A = sorted(A)[::-1]\n    if sum(A[:d]) >= c:\n        print('Infinity')\n    elif A[0] * d < c:\n        print('Impossible')\n    else:\n        (l, r) = (0, d)\n        mid = (l + r + 1) // 2\n        while l < r:\n            selecsum = sum(A[:mid + 1])\n            numselec = d // (mid + 1)\n            remain = d % (mid + 1)\n            coins = numselec * selecsum + sum(A[:remain])\n            if coins >= c:\n                l = mid\n            else:\n                r = mid - 1\n            mid = (l + r + 1) // 2\n        print(mid)", "import math\n\ndef solution():\n    (n, c, d) = [int(i) for i in input().split()]\n    nums = [int(i) for i in input().split()]\n    nums.sort(reverse=True)\n    if c > d * nums[0]:\n        print('Impossible')\n        return None\n    if c <= sum(nums[:d]):\n        print('Infinity')\n        return None\n    sum_num = [0] * n\n    sum_num[0] = nums[0]\n    for i in range(1, n):\n        sum_num[i] = sum_num[i - 1] + nums[i]\n    for k in range(1, d + 2):\n        (div, mod) = divmod(d, k + 1)\n        temp = div * sum_num[min(k, n - 1)]\n        if mod > 0:\n            temp += sum_num[min(mod - 1, n - 1)]\n        if c > temp:\n            print(k - 1)\n            return None\nt = int(input())\nwhile t:\n    solution()\n    t -= 1", "import sys\nfrom collections import deque\nfrom queue import PriorityQueue\ninput = sys.stdin.readline\n\ndef valid(mid, l, d, c):\n    s = sum(l[:mid])\n    temp = s * (d // mid)\n    temp += sum(l[:d % mid])\n    if temp >= c:\n        return True\n    else:\n        return False\n\ndef solve():\n    (n, c, d) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort(reverse=True)\n    if l[0] * d < c:\n        print('Impossible')\n    elif sum(l[:d]) >= c:\n        print('Infinity')\n    else:\n        high = d - 1\n        low = 1\n        result = 1\n        while low <= high:\n            mid = (low + high) // 2\n            if valid(mid, l, d, c):\n                result = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        print(result - 1)\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "testcase = int(input())\nfor _ in range(testcase):\n    (n, c, d) = [int(num) for num in input().split()]\n    arr = [int(num) for num in input().split()]\n    arr.sort(reverse=True)\n    if sum(arr[:d]) >= c:\n        print('Infinity')\n        continue\n    if arr[0] * d < c:\n        print('Impossible')\n        continue\n    l = 0\n    r = d + 1\n    while l + 1 < r:\n        k = (l + r) // 2\n        s0 = sum(arr[d % (k + 1):k + 1])\n        s1 = sum(arr[:d % (k + 1)])\n        ans = s0 * (d // (k + 1)) + s1 * ((d + k) // (k + 1))\n        if ans >= c:\n            l = k\n        else:\n            r = k\n    print(l)", "import sys\ninput = sys.stdin.readline\nnel = int(input())\nfor i in range(nel):\n    data = list(map(int, input().split(' ')))\n    n_quest = data[0]\n    n_coins = data[1]\n    n_days = data[2]\n    data = list(map(int, input().split(' ')))\n    rew = sorted(data)[::-1]\n    if rew[0] >= n_coins:\n        print('Infinity')\n        continue\n\n    def getSum(k):\n        kk = k + 1\n        return sum(rew[:kk]) * (n_days // kk) + sum(rew[:n_days % kk])\n    h_k = -1\n    if n_days < 100:\n        k = 0\n        while k < n_days:\n            sum_rews = getSum(k)\n            if sum_rews >= n_coins:\n                h_k = k\n            else:\n                k = n_days\n                break\n            k += 1\n    else:\n        (s, e) = (0, n_days - 1)\n        while s <= e:\n            m = (s + e) // 2\n            val = getSum(m) >= n_coins\n            if val:\n                s = m + 1\n            else:\n                e = m - 1\n        h_k = s - 1\n    if h_k == n_days - 1:\n        print('Infinity')\n    elif h_k >= 0:\n        print(h_k)\n    else:\n        print('Impossible')", "t = int(input())\nfor _ in range(t):\n    a = [int(i) for i in input().split()]\n    n = a[0]\n    c = a[1]\n    d = a[2]\n    a = [int(i) for i in input().split()]\n    a.sort()\n    a = a[::-1]\n    if sum(a[:min(n, d)]) >= c:\n        print('Infinity')\n        continue\n    if d * a[0] < c:\n        print('Impossible')\n        continue\n    k1 = 0\n    l = 0\n    r = d\n    while r - l > 1:\n        k = (r + l) // 2\n        if c <= sum(a[:min(k + 1, n)]) * (d // (k + 1)) + sum(a[:min(n, d % (k + 1))]):\n            l = k\n            k1 = max(k1, k)\n        else:\n            r = k\n    print(k1)", "def calc(v, arr):\n    v += 1\n    tmp1 = d // v\n    tmp2 = d % v\n    t = sum(arr[:v])\n    tmp_out = tmp1 * t + sum(arr[:tmp2])\n    if tmp_out >= c:\n        return tmp_out\n    else:\n        return False\n\ndef binarySearch(low, high, out):\n    index = (high + low + 1) // 2\n    tmp_out = calc(index, arr_sort)\n    if high == low:\n        return out\n    if tmp_out:\n        out = max(out, index)\n        return binarySearch(index, high, out)\n    else:\n        return binarySearch(low, index - 1, out)\nfor _ in range(int(input())):\n    (n, c, d) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr_sort = sorted(arr, reverse=True)\n    arr_sort_sum = sum(arr_sort)\n    arr_to_d = sum(arr_sort[:d])\n    m = max(arr)\n    out = 0\n    if d * m < c:\n        print('Impossible')\n    elif arr_to_d >= c:\n        print('Infinity')\n    else:\n        print(binarySearch(0, d, out))", "def binary_search(a, days, cnt):\n    a = a\n    days = days\n    cnt = cnt\n    l = 0\n    r = days\n    while r - l != 1:\n        m = (r + l) // 2\n        temp = sum(a[0:m]) * (days // m) + sum(a[0:days - m * (days // m)])\n        if temp >= cnt:\n            l = m\n        else:\n            r = m\n    return l - 1\nt = int(input())\nfor p in range(t):\n    (n, cnt, days) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    x = sum(a[0:days])\n    if x >= cnt:\n        print('Infinity')\n    elif a[0] * days < cnt:\n        print('Impossible')\n    else:\n        print(binary_search(a, days, cnt))", "for __ in range(int(input())):\n    (n, c, d) = map(int, input().split())\n    a = sorted(list(map(int, input().split())), reverse=True)\n    sumlst = [0]\n    for i in a:\n        sumlst.append(sumlst[-1] + i)\n    ans = 'Impossible'\n    for k in range(d + 1):\n        if sumlst[min(n, k + 1)] * (d // (k + 1)) + sumlst[min(n, d % (k + 1))] >= c:\n            ans = k\n    print('Infinity' if ans == d else ans)", "def check(mid, a, d, c):\n    num = mid + 1\n    lun = d // num\n    lunsum = a[min(num, len(a)) - 1]\n    res = lun * lunsum\n    yu = d % num\n    if yu:\n        res += a[min(yu, len(a)) - 1]\n    if res >= c:\n        return 1\n    else:\n        return 0\n\ndef solve():\n    (n, c, d) = input().split(' ')\n    n = int(n)\n    c = int(c)\n    d = int(d)\n    a = [int(x) for x in input().split(' ')]\n    ff = 0\n    if d <= n:\n        s = sum(a)\n        if s >= c:\n            ff = 1\n    maxn = max(a)\n    if maxn * d < c:\n        print('Impossible')\n        return\n    l = 0\n    r = 600000\n    a.sort(reverse=True)\n    for ev in range(len(a)):\n        if ev == 0:\n            continue\n        a[ev] += a[ev - 1]\n    check(1, a, d, c)\n    while l < r:\n        mid = (l + r + 1) // 2\n        if check(mid, a, d, c) == 1:\n            l = mid\n        else:\n            r = mid - 1\n    if l == 600000:\n        print('Infinity')\n    else:\n        print(l)\nt = int(input())\nfor each in range(t):\n    solve()", "def check(mid, a, d, c):\n    num = mid + 1\n    lun = d // num\n    lunsum = a[min(num, len(a)) - 1]\n    res = lun * lunsum\n    yu = d % num\n    if yu:\n        res += a[min(yu, len(a)) - 1]\n    if res >= c:\n        return 1\n    else:\n        return 0\n\ndef solve():\n    (n, c, d) = input().split(' ')\n    n = int(n)\n    c = int(c)\n    d = int(d)\n    a = [int(x) for x in input().split(' ')]\n    ff = 0\n    if d <= n:\n        s = sum(a)\n        if s >= c:\n            ff = 1\n    maxn = max(a)\n    if maxn * d < c:\n        print('Impossible')\n        return\n    l = 0\n    r = 400000\n    a.sort(reverse=True)\n    for ev in range(len(a)):\n        if ev == 0:\n            continue\n        a[ev] += a[ev - 1]\n    check(1, a, d, c)\n    while l < r:\n        mid = (l + r + 1) // 2\n        if check(mid, a, d, c) == 1:\n            l = mid\n        else:\n            r = mid - 1\n    if l == 400000:\n        print('Infinity')\n    else:\n        print(l)\nt = int(input())\nfor each in range(t):\n    solve()", "for _ in range(int(input())):\n    (a, b1, c) = map(int, input().split())\n    ls = sorted(list(map(int, input().split())), reverse=True)\n    b = [0] * (a + 1)\n    for i in range(1, a + 1):\n        b[i] = b[i - 1] + ls[i - 1]\n    if b[min(a, c)] >= b1:\n        print('Infinity')\n        continue\n    flag = -1\n    for i in range(c - 1):\n        t = b[min(i + 1, a)] * (c // (i + 1)) + b[min(c % (i + 1), a)]\n        if b1 <= t:\n            flag = i\n        else:\n            break\n    if flag == -1:\n        print('Impossible')\n    else:\n        print(flag)", "t = int(input())\nfor _ in range(t):\n    (n, c, d) = map(int, input().split())\n    q = list(map(int, input().split()))\n    q.sort(reverse=True)\n\n    def check_k(k):\n        blocks = d // (k + 1)\n        block_sum = sum(q[:min(k + 1, n)])\n        pre_mon = blocks * block_sum\n        left_over = d - (k + 1) * blocks\n        for i in range(min(left_over, n)):\n            pre_mon += q[i]\n        return pre_mon >= c\n    l = 0\n    r = d\n    if not check_k(0):\n        print('Impossible')\n        continue\n    if check_k(d):\n        print('Infinity')\n        continue\n    while l < r - 1:\n        m = (l + r) // 2\n        afn = check_k(m)\n        if afn:\n            l = m\n        else:\n            r = m\n    print(l)", "for _ in range(int(input())):\n    (a, b1, c) = map(int, input().split())\n    ls = sorted(list(map(int, input().split())), reverse=True)\n    b = [0] * (a + 1)\n    for i in range(1, a + 1):\n        b[i] = b[i - 1] + ls[i - 1]\n    if b[min(a, c)] >= b1:\n        print('Infinity')\n        continue\n    flag = -1\n    for i in range(c + 5):\n        t = b[min(i + 1, a)] * (c // (i + 1)) + b[min(c % (i + 1), a)]\n        if b1 <= t:\n            flag = i\n        else:\n            break\n    if flag == -1:\n        print('Impossible')\n    else:\n        print(flag)", "for _ in range(int(input())):\n    (a, b1, c) = map(int, input().split())\n    ls = sorted(list(map(int, input().split())), reverse=True)\n    b = [0] * (a + 1)\n    for i in range(1, a + 1):\n        b[i] = b[i - 1] + ls[i - 1]\n    if b[min(a, c)] >= b1:\n        print('Infinity')\n        continue\n    flag = -1\n    for i in range(c + 5):\n        t = b[min(i + 1, a)] * (c // (i + 1)) + b[min(c % (i + 1), a)]\n        if b1 <= t:\n            flag = i\n        else:\n            break\n    if flag == -1:\n        print('Impossible')\n    else:\n        print(flag)", "t = int(input())\nfor h in range(t):\n    (n, c, d) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a, reverse=True)\n    b = [0] * (n + 1)\n    for i in range(n):\n        b[i + 1] = b[i] + a[i]\n    f = -1\n    for k in range(d + 10):\n        s = b[min(k + 1, n)] * (d // (k + 1)) + b[min(d % (k + 1), n)]\n        if s >= c:\n            f = k\n    if f == -1:\n        print('Impossible')\n    elif f == d + 9:\n        print('Infinity')\n    else:\n        print(f)", "for _ in range(int(input())):\n    (n, c, d) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a, reverse=True)\n    b = [0] * (n + 1)\n    for i in range(n):\n        b[i + 1] = b[i] + a[i]\n    f = -1\n    for k in range(d + 10):\n        s = b[min(k + 1, n)] * (d // (k + 1)) + b[min(d % (k + 1), n)]\n        if s >= c:\n            f = k\n    if f == -1:\n        print('Impossible')\n    elif f == d + 9:\n        print('Infinity')\n    else:\n        print(f)", "for _ in range(int(input())):\n    (n, c, d) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a, reverse=True)\n    b = [0] * (n + 1)\n    for i in range(n):\n        b[i + 1] = b[i] + a[i]\n    f = -1\n    for k in range(d + 10):\n        s = b[min(k + 1, n)] * (d // (k + 1)) + b[min(d % (k + 1), n)]\n        if s >= c:\n            f = k\n    if f == -1:\n        print('Impossible')\n    elif f == d + 9:\n        print('Infinity')\n    else:\n        print(f)", "from typing import List\nfrom bisect import *\nfrom collections import *\ncaseNum = int(input())\nfor i in range(0, caseNum):\n    (n, c, d) = [int(v) for v in input().split(' ')]\n    quests = [int(v) for v in input().split(' ')]\n    quests.sort(reverse=True)\n    if c <= sum(quests[:d]):\n        print('Infinity')\n        continue\n    if c > d * quests[0]:\n        print('Impossible')\n        continue\n    k = 0\n    pre = [0] * (n + 1)\n    pre[0] = quests[0]\n    for i in range(1, n):\n        pre[i] = pre[i - 1] + quests[i]\n    while k <= d:\n        t = pre[min(k, n - 1)]\n        tempSum = d // (k + 1) * t\n        tempSum += pre[min(d % (k + 1) - 1, n - 1)]\n        if tempSum < c:\n            k -= 1\n            break\n        k += 1\n    print(k)", "t = int(input())\nfor h in range(t):\n    (n, c, d) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a, reverse=True)\n    b = [0] * (n + 1)\n    for i in range(n):\n        b[i + 1] = b[i] + a[i]\n    f = -1\n    for k in range(d + 10):\n        s = b[min(k + 1, n)] * (d // (k + 1)) + b[min(d % (k + 1), n)]\n        if s >= c:\n            f = k\n    if f == -1:\n        print('Impossible')\n    elif f == d + 9:\n        print('Infinity')\n    else:\n        print(f)", "t = int(input())\nfor h in range(t):\n    (n, c, d) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a, reverse=True)\n    b = [0] * (n + 1)\n    for i in range(n):\n        b[i + 1] = b[i] + a[i]\n    f = -1\n    for k in range(d + 10):\n        s = b[min(k + 1, n)] * (d // (k + 1)) + b[min(d % (k + 1), n)]\n        if s >= c:\n            f = k\n    if f == -1:\n        print('Impossible')\n    elif f == d + 9:\n        print('Infinity')\n    else:\n        print(f)", "t = int(input())\nfor h in range(t):\n    (n, c, d) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a, reverse=True)\n    b = [0] * (n + 1)\n    for i in range(n):\n        b[i + 1] = b[i] + a[i]\n    f = -1\n    for k in range(d + 10):\n        s = b[min(k + 1, n)] * (d // (k + 1)) + b[min(d % (k + 1), n)]\n        if s >= c:\n            f = k\n    if f == -1:\n        print('Impossible')\n    elif f == d + 9:\n        print('Infinity')\n    else:\n        print(f)", "import math\nt = int(input())\n\ndef will_it(arr, n, k, c, d):\n    if k <= n - 1:\n        s = sum(arr[:k + 1])\n    else:\n        s = sum(arr)\n    if d - (k + 1) * (d // (k + 1)) < n:\n        required_sum = sum(arr[:d - (k + 1) * (d // (k + 1))])\n    else:\n        required_sum = sum(arr)\n    if s * (d // (k + 1)) + required_sum >= c:\n        return True\n    else:\n        return False\n\ndef solve():\n    (n, c, d) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort(reverse=True)\n    if arr[0] * d < c:\n        print('Impossible')\n    else:\n        s = 0\n        days = -1\n        for i in range(n):\n            s += arr[i]\n            if arr[i] >= c:\n                days = i + 1\n                break\n        if days != -1 and days <= d:\n            print('Infinity')\n        else:\n            low = 0\n            up = 1000000\n            ans = 0\n            while low <= up:\n                mid = low + (up - low) // 2\n                if will_it(arr, n, mid, c, d):\n                    low = mid + 1\n                    ans = max(ans, mid)\n                else:\n                    up = mid - 1\n            print(ans if up < 1000000 else 'Infinity')\nwhile t:\n    solve()\n    t -= 1", "import sys\nfrom sys import stdin\nimport heapq\nsys.setrecursionlimit(10 ** 9)\ninf = float('inf')\ninput = sys.stdin.readline\nt = int(input())\nres = []\n\ndef solution(d, k, len, lis):\n    (sum, ans) = (0, 0)\n    for i in range(min(len, k + 1)):\n        sum += lis[i]\n    ans = sum * (d // (k + 1))\n    for i in range(min(len, d % (k + 1))):\n        ans += lis[i]\n    return ans\nfor _ in range(t):\n    (n, c, d) = map(int, input().split())\n    lis = list(map(int, input().split()))\n    lis.sort(reverse=True)\n    if lis[0] * d < c:\n        res.append('Impossible')\n        continue\n    sum = 0\n    for i in range(min(n, d)):\n        sum += lis[i]\n    if sum >= c:\n        res.append('Infinity')\n        continue\n    (l, r) = (0, d)\n    while r - l > 1:\n        mid = (l + r) // 2\n        if solution(d, mid, n, lis) < c:\n            r = mid\n            continue\n        else:\n            l = mid\n            continue\n    res.append(l)\nprint(*res, sep='\\n')", "arr = [4, 4, 2, 1, 2, 2]\nd = 8\nc = 22\n\ndef check(k):\n    num = min(k, len(arr) - 1)\n    num = min(d - 1, num)\n    multi = d // (k + 1)\n    modul = d % (k + 1)\n    modul = min(modul, len(arr))\n    sum = 0\n    for i in range(0, num + 1):\n        sum += arr[i]\n    if multi > 0:\n        sum *= multi\n    if modul > 0:\n        for i in range(modul):\n            sum += arr[i]\n    return sum\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, c, d) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    (l, r) = (0, d)\n    maxK = -1\n    arr.sort(reverse=True)\n    while l <= r:\n        mid = (l + r) // 2\n        sum = check(mid)\n        if sum >= c:\n            l = mid + 1\n            maxK = max(maxK, mid)\n        else:\n            r = mid - 1\n    if l >= d:\n        print('Infinity')\n    elif maxK >= 0:\n        print(maxK)\n    else:\n        print('Impossible')", "inf = 2 ** 60\nfor tcase in range(int(input())):\n    (n, c, d) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    a = [0] + a\n    for i in range(n):\n        a[i + 1] += a[i]\n    (l, r) = (-1, inf)\n    while r - l > 1:\n        k = (l + r) // 2\n        (d1, d2) = divmod(d, k + 1)\n        if c <= a[min(n, k + 1)] * d1 + a[min(n, d2)]:\n            l = k\n        else:\n            r = k\n    if l > inf // 3:\n        print('Infinity')\n    elif l < 0:\n        print('Impossible')\n    else:\n        print(l)", "def check(mid, a, d, c):\n    num = mid + 1\n    lun = d // num\n    lunsum = 0\n    for ev in range(min(num, len(a))):\n        lunsum += a[ev]\n    res = lun * lunsum\n    yu = d % num\n    if yu:\n        for ev in range(min(yu, len(a))):\n            res += a[ev]\n    if res >= c:\n        return 1\n    else:\n        return 0\n\ndef solve():\n    (n, c, d) = input().split(' ')\n    n = int(n)\n    c = int(c)\n    d = int(d)\n    a = [int(x) for x in input().split(' ')]\n    ff = 0\n    if d <= n:\n        s = sum(a)\n        if s >= c:\n            ff = 1\n    maxn = max(a)\n    if maxn * d < c:\n        print('Impossible')\n        return\n    l = 0\n    r = 1000000\n    a.sort(reverse=True)\n    check(1, a, d, c)\n    while l < r:\n        mid = (l + r + 1) // 2\n        if check(mid, a, d, c) == 1:\n            l = mid\n        else:\n            r = mid - 1\n    if l == 1000000:\n        print('Infinity')\n    else:\n        print(l)\nt = int(input())\nfor each in range(t):\n    solve()", "t = int(input())\n\ndef possible(k, n, c, d, nums):\n    ssum = 0\n    for i in range(d):\n        try:\n            a = nums[i % (k + 1)]\n        except:\n            a = 0\n        ssum += a\n    return ssum >= c\n\ndef solve():\n    (n, c, d) = [int(x) for x in input().split()]\n    nums = [int(x) for x in input().split()]\n    nums.sort(reverse=True)\n    l = 0\n    r = d - 1\n    if sum(nums[:min(d, n, len(nums))]) >= c:\n        print('Infinity')\n        return\n    while True:\n        if r - l <= 3:\n            for k in range(r, l - 1, -1):\n                if possible(k, n, c, d, nums):\n                    print(k)\n                    return\n            print('Impossible')\n            return\n        k = (l + r) // 2\n        pos = possible(k, n, c, d, nums)\n        if pos:\n            l = k\n        else:\n            r = k - 1\nfor _ in range(t):\n    solve()", "T = int(input())\nwhile T > 0:\n    T -= 1\n    (n, c, d) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    aoi = sorted(arr, reverse=True)\n    l = 1\n    r = d + 1\n    sum = 0\n    for i in range(len(aoi)):\n        sum += aoi[i]\n\n    def check(k):\n        sana = 0\n        for i in range(d):\n            if i % k < n:\n                sana += aoi[i % k]\n        return sana >= c\n    while l < r:\n        m = (l + r) // 2\n        if check(m):\n            l = m + 1\n        else:\n            r = m\n    if l == 1:\n        print('Impossible')\n    elif l == d + 1:\n        print('Infinity')\n    else:\n        print(l - 2)", "t = int(input())\nwhile t > 0:\n    (n, c, d) = list(map(int, input().split(' ')))\n    a = list(map(int, input().split(' ')))\n    a.sort(reverse=True)\n    (left, right) = (0, d + 2)\n    while left < right:\n        mid = left + (right - left + 1) // 2\n        total = 0\n        current = 0\n        for i in range(d):\n            if i % mid < n:\n                total += a[i % mid]\n        if total >= c:\n            left = mid\n        else:\n            right = mid - 1\n    if left == d + 2:\n        print('Infinity')\n    elif left == 0:\n        print('Impossible')\n    else:\n        print(left - 1)\n    t -= 1", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (N, C, D) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    A.sort()\n    i = N - 1\n    temp = 0\n    for _ in range(min(D, N)):\n        temp += A[i]\n        i -= 1\n        if temp >= C:\n            print('Infinity')\n            return\n    if D * A[-1] < C:\n        print('Impossible')\n        return\n    A.reverse()\n    ans = 0\n    (l, r) = (0, D - 1)\n    while l <= r:\n        mid = (l + r) // 2\n        k = mid + 1\n        t = 0\n        j = 0\n        while j < D:\n            if j % k < N:\n                t += A[j % k]\n                j += 1\n            else:\n                j += k - j % k\n        if t >= C:\n            ans = mid\n            l = mid + 1\n        else:\n            r = mid - 1\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "def compute_max(numbers, k, d, n):\n    sum = 0\n    for i in range(d):\n        if i % (k + 1) < n:\n            sum += numbers[i % (k + 1)]\n    return sum\nt = int(input())\nwhile t > 0:\n    ncd = [int(x) for x in input().split()]\n    n = ncd[0]\n    c = ncd[1]\n    d = ncd[2]\n    list_of_numbers = [int(x) for x in input().split()]\n    list_of_numbers.sort(reverse=True)\n    show_infinity = sum(list_of_numbers[:min(d, n)])\n    if show_infinity >= c:\n        print('Infinity')\n    elif list_of_numbers[0] * d < c:\n        print('Impossible')\n    else:\n        left = 0\n        right = d - 1\n        ans = 0\n        while left <= right:\n            middle = int((left + right) / 2)\n            max_coins = compute_max(list_of_numbers, middle, d, n)\n            if max_coins >= c:\n                ans = middle\n                left = middle + 1\n            if max_coins < c:\n                right = middle - 1\n        print(ans)\n    t = t - 1", "T = int(input())\nfor hasbulla in range(T):\n    (n, c, d) = [int(x) for x in map(int, input().split())]\n    t = list(map(int, input().split()))\n    t.sort(reverse=True)\n    if t[0] * d < c:\n        print('Impossible')\n        continue\n    l = 0\n    r = d + 9\n    ans = 0\n    while l != r:\n        mid = (l + r) // 2\n        essa = 0\n        for i in range(d):\n            if i % mid < n:\n                essa += t[i % mid]\n        if essa >= c:\n            l = mid + 1\n            ans = mid\n        else:\n            r = mid\n    if ans == d + 8:\n        print('Infinity')\n        continue\n    print(ans - 1)", "test = int(input())\nfrom itertools import accumulate\nwhile test:\n    (n, c, d) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    a.sort(reverse=True)\n    pre_sum = list(accumulate(a))\n    low = -1\n    high = d + 1\n    while low < high:\n        mid = low + high + 1 >> 1\n        curr_coins = 0\n        for i in range(d):\n            ind = i % (mid + 1)\n            if ind < n:\n                curr_coins += a[ind]\n        if curr_coins >= c:\n            low = mid\n        else:\n            high = mid - 1\n    if low == -1:\n        print('Impossible')\n    elif low == d + 1:\n        print('Infinity')\n    else:\n        print(low)\n    test -= 1", "import os\nimport math\nimport collections\nimport bisect\nimport functools\nimport itertools\nimport heapq\n\ndef solve(a, n, c, d):\n    if sum(a[:min(d, n)]) >= c:\n        return 'Infinity'\n    if d * a[0] < c:\n        return 'Impossible'\n\n    def count(k):\n        ans = 0\n        visited = set()\n        for (i, x) in enumerate(a):\n            j = i\n            while j < d and j not in visited:\n                ans += x\n                visited.add(j)\n                j += k + 1\n        return ans\n    (l, r) = (0, d)\n    while l < r:\n        k = (l + r + 1) // 2\n        if count(k) >= c:\n            l = k\n        else:\n            r = k - 1\n    return l\nt = int(input())\nfor _ in range(t):\n    (n, c, d) = map(int, input().split())\n    a = sorted(map(int, input().split()))[::-1]\n    print(solve(a, n, c, d))", "def check(mid, a, d, c):\n    num = mid + 1\n    lun = d // num\n    lunsum = 0\n    for ev in range(min(num, len(a))):\n        lunsum += a[ev]\n    res = lun * lunsum\n    yu = d % num\n    if yu:\n        for ev in range(min(yu, len(a))):\n            res += a[ev]\n    if res >= c:\n        return 1\n    else:\n        return 0\n\ndef solve():\n    (n, c, d) = input().split(' ')\n    n = int(n)\n    c = int(c)\n    d = int(d)\n    a = [int(x) for x in input().split(' ')]\n    ff = 0\n    if d <= n:\n        s = sum(a)\n        if s >= c:\n            ff = 1\n    maxn = max(a)\n    if maxn * d < c:\n        print('Impossible')\n        return\n    l = 0\n    r = 1000000000\n    a.sort(reverse=True)\n    check(1, a, d, c)\n    while l < r:\n        mid = (l + r + 1) // 2\n        if check(mid, a, d, c) == 1:\n            l = mid\n        else:\n            r = mid - 1\n    if l == 1000000000:\n        print('Infinity')\n    else:\n        print(l)\nt = int(input())\nfor each in range(t):\n    solve()", "t = int(input())\nfor i in range(t):\n    (n, c, d) = [int(x) for x in input().split()]\n    L = [int(x) for x in input().split()]\n    L.sort(reverse=True)\n    (l, r) = (0, 10 ** 15)\n    while l < r:\n        m = (l + r + 1) // 2\n        if m == 0:\n            l = 0\n            break\n        if sum(L[:min(m, n)]) * (d // m) + sum(L[:min(d % m, n)]) >= c:\n            l = m\n        else:\n            r = m - 1\n    print(l - 1 if l != 10 ** 15 and l != 0 else 'Infinity' if r == 10 ** 15 else 'Impossible')", "def binp(b, m, c, y):\n    if b[c] >= m and b[c - 1] < m:\n        return c\n    elif b[c] > m:\n        return binp(b, m, c - y, max(y // 2, 1))\n    elif b[c] < m:\n        return binp(b, m, c + y, max(y // 2, 1))\nfor _ in range(int(input())):\n    (n, c, d) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    ans = -1\n    s = 0\n    b = [0]\n    I = -1\n    i = 0\n    while True:\n        if i < n:\n            s += a[i]\n            b.append(s)\n            w = c // s * (i + 1) + (binp(b, c % s, len(b) // 2, max(len(b) // 2 // 2, 1)) if c % s > 0 else 0)\n        elif c % s == 0:\n            w = (c // s - 1) * (i + 1) + len(b) - 1\n        else:\n            w = c // s * (i + 1) + (binp(b, c % s, len(b) // 2, max(len(b) // 2 // 2, 1)) if c % s > 0 else 0)\n        if c <= s and i + 1 <= d:\n            I = 1\n            break\n        if w <= d:\n            ans = i\n        else:\n            break\n        i += 1\n    if I == 1:\n        print('Infinity')\n    elif ans > -1:\n        print(ans)\n    else:\n        print('Impossible')", "def N():\n    return int(input())\n\ndef A():\n    return [int(x) for x in input().split()]\n\ndef S():\n    return input()\nfor _ in range(N()):\n    (n, c, d) = A()\n    l = 0\n    if 'codeforces' == 28226329:\n        print('Tanmay')\n    a = A()\n    h = 10 ** 18\n    a.sort()\n    a.reverse()\n    while l < h:\n        k = (h + 1 + l) // 2\n        if c > d // k * sum(a[:min(k, n)]) + sum(a[:min(d % k, n)]):\n            h = k - 1\n        else:\n            l = k\n    if l == 10 ** 18:\n        print('Infinity')\n        continue\n    if l == 0:\n        print('Impossible')\n        continue\n    print(l - 1)", "import math\nfor _ in range(int(input())):\n    (n, c, d) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n\n    def works(k):\n        sum1 = 0\n        for i in range(min(k, n)):\n            sum1 += a[i]\n        poss = d // k * sum1 + sum(a[:min(d % k, n)])\n        return poss >= c\n    lo = 0\n    hi = 10 ** 18\n    while lo < hi:\n        mid = (lo + hi + 1) // 2\n        if works(mid):\n            lo = mid\n        else:\n            hi = mid - 1\n    print('Impossible' if lo == 0 else 'Infinity' if lo == 10 ** 18 else lo - 1)"]