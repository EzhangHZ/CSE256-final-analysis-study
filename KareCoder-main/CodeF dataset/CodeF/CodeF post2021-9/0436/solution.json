["def get_input():\n    al = []\n    for c in range(int(input())):\n        input()\n        a = [int(i) for i in input().split(' ')]\n        b = [int(i) for i in input().split(' ')]\n        al.append([a, b])\n    return al\n\ndef solve(a, b):\n    j = 1\n    di = {}\n    for i in range(len(a)):\n        while j < b[i]:\n            di[j] = i\n            j += 2\n    ans = 2 * len(a) + 1\n    for i in range(len(a)):\n        ans = min(ans, i + di[a[i]])\n    return ans\n\ndef main():\n    arr_list = get_input()\n    for (a, b) in arr_list:\n        r = solve(a, b)\n        print(r)\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    pos = [0] * (2 * n + 1)\n    for i in range(n):\n        pos[A[i]] = i\n        pos[B[i]] = i\n    l = ans = float('inf')\n    for i in range(2 * n, 0, -1):\n        if i % 2:\n            ans = min(ans, l + pos[i])\n        else:\n            l = min(l, pos[i])\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "def get_input():\n    al = []\n    for c in range(int(input())):\n        input()\n        a = [int(i) for i in input().split(' ')]\n        b = [int(i) for i in input().split(' ')]\n        al.append([a, b])\n    return al\n\ndef solve(a, b):\n    j = 1\n    di = {}\n    for i in range(len(a)):\n        while j < b[i]:\n            di[j] = i\n            j += 2\n    ans = 2 * len(a) + 1\n    for i in range(len(a)):\n        ans = min(ans, i + di[a[i]])\n    return ans\n\ndef main():\n    arr_list = get_input()\n    for (a, b) in arr_list:\n        r = solve(a, b)\n        print(r)\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    (*a,) = map(int, input().split())\n    (*b,) = map(int, input().split())\n    A = [0] * (2 * n + 3)\n    B = [0] * (2 * n + 3)\n    for i in range(n):\n        A[a[i]] = i\n        B[b[i]] = i\n    r = 10 * n\n    c = r\n    for j in range(2 * n - 1, 0, -2):\n        c = min(c, B[j + 1])\n        r = min(r, A[j] + c)\n    print(r)\nfor i in range(int(input())):\n    solve()", "def solve(n, a, b):\n    list_of_indexes = [0] * (2 * n + 1)\n    for (i, el) in enumerate(a):\n        list_of_indexes[el] = i\n    for (i, el) in enumerate(b):\n        list_of_indexes[el] = i\n    best_choice_from_b = 2 * n\n    answer = 2 * n\n    for i in range(2 * n - 1, 0, -2):\n        best_choice_from_b = min(best_choice_from_b, list_of_indexes[i + 1])\n        answer = min(answer, list_of_indexes[i] + best_choice_from_b)\n    return answer\ntest_count = int(input())\noutput = list()\nfor i in range(test_count):\n    n = int(input())\n    a = input().split(' ')\n    a = list(map(int, a))\n    b = input().split(' ')\n    b = list(map(int, b))\n    output.append(solve(n, a, b))\nfor i in output:\n    print(i)", "n = int(input())\nans = []\nfor k in range(n):\n    n2 = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    index = {}\n    j = 1\n    for i in range(n2):\n        while j < b[i]:\n            index[j] = i\n            j += 2\n    temp = 100000000\n    for i in range(n2):\n        temp = min(temp, i + index[a[i]])\n    ans.append(temp)\nfor i in ans:\n    print(i)", "from sys import stdin\nip = stdin.readline\nfor _ in range(int(ip())):\n    n = int(ip())\n    a = list(map(int, ip().split()))\n    b = list(map(int, ip().split()))\n    idx = [0] * (2 * n + 1)\n    for (i, c) in enumerate(zip(a, b)):\n        (x, y) = c\n        idx[x] = idx[y] = i\n    ans = cont = float('inf')\n    for i in range(2 * n - 1, 0, -2):\n        cont = min(cont, idx[i + 1])\n        ans = min(ans, cont + idx[i])\n    print(ans)", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    odd = list(map(int, stdin.readline().split()))\n    even = list(map(int, stdin.readline().split()))\n    d = {}\n    m = 1\n    ans = 100000000\n    if odd[0] < even[0]:\n        ans = 0\n    for i in range(n):\n        if even[i] > m:\n            for j in range(m, even[i], 2):\n                if j not in d:\n                    d[j] = i\n            m = even[i] + 1\n    for j in range(n):\n        ans = min(ans, j + d[odd[j]])\n    print(ans)", "def sol():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    ktore = n * [0]\n    for i in range(n):\n        ktore[(b[i] - 1) // 2] = i\n    ans = n * [0]\n    ans[n - 1] = ktore[n - 1]\n    for i in range(n - 2, -1, -1):\n        ans[i] = min(ans[i + 1], ktore[i])\n    wyn = 10 ** 9\n    for i in range(n):\n        wyn = min(wyn, i + ans[a[i] // 2])\n    print(wyn)\n\ndef main():\n    for i in range(int(input())):\n        sol()\nmain()", "import sys\ninput = lambda : sys.stdin.readline()[:-1]\nni = lambda : int(input())\nna = lambda : list(map(int, input().split()))\nsys.setrecursionlimit(10 ** 7)\nyes = lambda : print('yes')\nYes = lambda : print('Yes')\nYES = lambda : print('YES')\nno = lambda : print('no')\nNo = lambda : print('No')\nNO = lambda : print('NO')\nt = ni()\nfor _ in range(t):\n    n = ni()\n    a = na()\n    b = na()\n    bb = [0]\n    for i in range(n):\n        bb.append(max(bb[-1], b[i]))\n    ans = n\n    j = n\n    for i in range(n):\n        while j >= 0 and a[i] < bb[j]:\n            j -= 1\n        ans = min(ans, i + j)\n    print(ans)", "def solve():\n    t = int(input())\n    for _ in range(t):\n        solve_one()\n\ndef solve_one():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    assert len(a) == len(b)\n    assert len(a) == n\n    price = [0] * n\n    for (i, ai) in enumerate(a):\n        price[ai // 2] = i\n    cur_min_price = price[0]\n    for (i, p) in enumerate(price[:]):\n        if p < cur_min_price:\n            cur_min_price = p\n        else:\n            price[i] = cur_min_price\n    min_price = n\n    for (i, bi) in enumerate(b):\n        bi_price = i + price[bi // 2 - 1]\n        min_price = min(min_price, bi_price)\n    print(min_price)\nsolve()", "def func(alist, blist, n):\n    tmp_ans = 2 * n\n    clist = [0] * n\n    for i in range(n):\n        clist[alist[i] // 2] = i\n    j = 0\n    for i in range(n):\n        while j < n and blist[j] < 2 * i + 1:\n            j += 1\n        if blist[j] > 2 * i + 1:\n            tmp_ans = min(tmp_ans, clist[i] + j)\n    return tmp_ans\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    alist = [int(x) for x in input().split()]\n    blist = [int(x) for x in input().split()]\n    print(func(alist, blist, n))", "for _ in range(int(input())):\n    n = int(input())\n    odd = list(map(int, input().split()))\n    even = list(map(int, input().split()))\n    idx = {}\n    j = 1\n    for i in range(n):\n        while j < even[i]:\n            idx[j] = i\n            j += 2\n    ans = float('inf')\n    for i in range(n):\n        ans = min(ans, i + idx[odd[i]])\n    print(ans)", "def solution():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        b_idx = 0\n        for _ in range(n):\n            if a[0] > b[b_idx]:\n                b_idx += 1\n            else:\n                break\n        res = b_idx\n        b_ascending = [(0, b[0])]\n        for i in range(1, b_idx + 1):\n            if b[i] > b_ascending[-1][1]:\n                b_ascending.append((i, b[i]))\n        last_from_a = a[0]\n        idx = len(b_ascending)\n        for i in range(1, n):\n            if a[i] < last_from_a:\n                while idx != 0 and b_ascending[idx - 1][1] > a[i]:\n                    idx -= 1\n                last_from_a = a[i]\n                res = min(res, i + b_ascending[idx][0])\n        print(res)\nsolution()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [0] * n\n    ans = n\n    for i in range(n):\n        c[a[i] // 2] = i\n    for i in range(1, n):\n        c[i] = min(c[i], c[i - 1])\n    for i in range(n):\n        ans = min(ans, i + c[b[i] // 2 - 1])\n    print(ans)", "from collections import deque\nimport heapq\nfrom math import sqrt\nimport operator\nfrom operator import itemgetter\nimport sys\nimport copy\ninf_var = 0\nif inf_var == 1:\n    inf = open('input.txt', 'r')\nelse:\n    inf = sys.stdin\ninput = inf.readline\n\ndef read_one_int():\n    return int(input().rstrip('\\n'))\n\ndef read_one_float():\n    return float(input().rstrip('\\n'))\n\ndef read_list_of_ints():\n    res = [int(val) for val in input().rstrip('\\n').split(' ')]\n    return res\n\ndef read_str():\n    return input().rstrip()\n\ndef calc_min_mov(n, odd_elements, even_elements, q):\n    res = 2 * n\n    odd_to_ind = {}\n    for (i, el) in enumerate(odd_elements):\n        odd_to_ind[el] = i\n    left_smaller = {}\n    for i in range(2, 2 * n + 1, 2):\n        heapq.heappush(q, odd_to_ind[i - 1])\n        left_smaller[i] = q[0]\n    for (i, el) in enumerate(even_elements):\n        cur_res = left_smaller[el] + i\n        res = min(res, cur_res)\n        if res == 0:\n            break\n    print(res)\n\ndef main():\n    tests = read_one_int()\n    for _ in range(tests):\n        n = read_one_int()\n        odd_elements = read_list_of_ints()\n        even_elements = read_list_of_ints()\n        q = []\n        heapq.heapify(q)\n        calc_min_mov(n, odd_elements, even_elements, q)\nmain()", "def calculate_min_amount_of_operations(a, b, array_length):\n    indexes = [None for _ in range(array_length * 2)]\n    for i in range(array_length):\n        indexes[a[i] - 1] = i\n    for i in range(array_length):\n        indexes[b[i] - 1] = i\n    min_amount_of_operations = 2 * array_length\n    min_b_index = array_length\n    for i in range(array_length * 2 - 1, 0, -2):\n        min_b_index = min(min_b_index, indexes[i])\n        min_amount_of_operations = min(min_amount_of_operations, min_b_index + indexes[i - 1])\n    return min_amount_of_operations\ntests_amount = int(input())\nfor _ in range(tests_amount):\n    array_length = int(input())\n    array_a = [int(element) for element in input().split(' ')]\n    array_b = [int(element) for element in input().split(' ')]\n    print(calculate_min_amount_of_operations(array_a, array_b, array_length))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [0] * n\n    ans = n\n    for i in range(n):\n        c[a[i] // 2] = i\n    for i in range(1, n):\n        c[i] = min(c[i], c[i - 1])\n    for i in range(n):\n        ans = min(ans, i + c[b[i] // 2 - 1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = {}\n    j = 1\n    for i in range(n):\n        while j < b[i]:\n            c[j] = i\n            j += 2\n    ans = 10000000.0\n    for i in range(n):\n        ans = min(ans, i + c[a[i]])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [0] * n\n    ans = n\n    for i in range(n):\n        c[a[i] // 2] = i\n    for i in range(1, n):\n        c[i] = min(c[i], c[i - 1])\n    for i in range(n):\n        ans = min(ans, i + c[b[i] // 2 - 1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [0] * n\n    for i in range(n):\n        c[a[i] // 2] = i\n    for i in range(1, n):\n        c[i] = min(c[i], c[i - 1])\n    ans = n\n    for i in range(n):\n        ans = min(ans, i + c[b[i] // 2 - 1])\n    print(ans)", "import sys\nfor k in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))[:n]\n    b = list(map(int, input().split()))[:n]\n    p = {}\n    j = 1\n    for i in range(n):\n        while j < b[i]:\n            p[j] = i\n            j += 2\n    ans = sys.maxsize\n    for i in range(n):\n        ans = min(ans, i + p[a[i]])\n    print(ans)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = {}\n    for i in range(len(a)):\n        d[a[i]] = i\n    prev = float('-inf')\n    ans = float('inf')\n    for i in range(n):\n        if b[i] > prev:\n            for j in range(max(0, prev) + 1, b[i], 2):\n                ans = min(ans, d.get(j) + i)\n            prev = b[i]\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ar = [0] * n\n    for j in range(n):\n        x = (a[j] + 1) // 2\n        ar[x - 1] = j\n    m = ar[0]\n    for j in range(n):\n        if ar[j] > m:\n            ar[j] = m\n        else:\n            m = ar[j]\n    m = 3 * n\n    for j in range(n):\n        x = b[j] // 2\n        m = min(m, j + ar[x - 1])\n    print(m)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arrA = [int(x) for x in input().split(' ')]\n    arrB = [int(x) for x in input().split(' ')]\n    indexmap = {arrA[x]: x for x in range(n)}\n    lessOrEqual = {}\n    lessOrEqual[1] = indexmap[1]\n    for i in range(3, 2 * n, 2):\n        lessOrEqual[i] = min(indexmap[i], lessOrEqual[i - 2])\n    mincost = lessOrEqual[arrB[0] - 1]\n    for i in range(1, n):\n        if arrB[i] > arrB[0] and i < mincost:\n            evenshift = i\n            oddshift = lessOrEqual[arrB[i] - 1]\n            mincost = min(mincost, oddshift + evenshift)\n    print(mincost)", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nfrom bisect import bisect_left as bisect\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    ans = 2 * n\n    minA = [2 * n for _ in range(n)]\n    maxB = [0 for _ in range(n)]\n    minA[0] = A[0]\n    maxB[0] = B[0]\n    for i in range(1, n):\n        minA[i] = min(minA[i - 1], A[i])\n        maxB[i] = max(maxB[i - 1], B[i])\n    for i in range(n):\n        j = bisect(maxB, minA[i])\n        ans = min(ans, i + j)\n    print(ans)\nT = int(input())\nfor i in range(1, T + 1):\n    solve()", "for i in range(int(input())):\n    n = int(input())\n    d1 = {}\n    d2 = {}\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(n):\n        d1[a[i]] = i\n    d2[1] = d1[1]\n    for i in range(3, 2 * n, 2):\n        d2[i] = min(d2[i - 2], d1[i])\n    ans = float('inf')\n    for i in range(n):\n        ans = min(ans, i + d2[b[i] - 1])\n    print(ans)", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom statistics import mode\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    a = int_arr()\n    b = int_arr()\n    step = [0 for i in range(n * 2)]\n    for i in range(n):\n        step[a[i] - 1] = i\n    mn = float('inf')\n    for i in range(0, n * 2, 2):\n        mn = min(mn, step[i])\n        step[i] = mn\n    ans = float('inf')\n    for j in range(n):\n        ans = min(ans, j + step[b[j] - 2])\n    print(ans)", "t = int(input())\na = [0 for i in range(0, 100010)]\nb = [0 for i in range(0, 100010)]\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    for i in range(1, n + 1):\n        a[i] = 0\n        b[i] = 0\n    temp = input().split(' ')\n    for i in range(1, n + 1):\n        a[int(temp[i - 1]) // 2 + 1] = i\n    temp = input().split(' ')\n    for i in range(1, n + 1):\n        b[int(temp[i - 1]) // 2] = i\n    min = 1000000\n    for i in range(n - 1, 0, -1):\n        if b[i] > b[i + 1]:\n            b[i] = b[i + 1]\n    for i in range(1, n + 1):\n        sum = a[i] + b[i]\n        if min > sum:\n            min = sum\n    print(min - 2)", "def solve():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    sorted_by_values = [None for _ in range(2 * n)]\n    for i in range(n):\n        sorted_by_values[a[i] - 1] = i\n        sorted_by_values[b[i] - 1] = i\n    min_greater_index = sorted_by_values[2 * n - 1]\n    min_swaps = 2 * n\n    for odd_number in range(2 * n - 1, 0, -2):\n        min_greater_index = min(min_greater_index, sorted_by_values[odd_number])\n        min_swaps = min(min_swaps, min_greater_index + sorted_by_values[odd_number - 1])\n    return min_swaps\nt = int(input())\nfor _ in range(t):\n    print(solve())", "import math\nimport heapq\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nH = 1000000000 + 7\nfor _ in range(I()):\n    n = I()\n    a = L()\n    b = L()\n    m = ans = n\n    l = [0] * (2 * n + 1)\n    for i in range(n):\n        l[a[i]] = i\n        l[b[i]] = i\n    for i in range(2 * n, 0, -1):\n        if i % 2 == 0:\n            m = min(l[i], m)\n        else:\n            ans = min(ans, l[i] + m)\n    print(ans)", "def main():\n    t = input()\n    t = int(t)\n    for i in range(t):\n        n = input()\n        n = int(n)\n        a = input().split()\n        b = input().split()\n        ans = 2 * n + 5\n        position = [0 for i in range(2 * n + 5)]\n        for i in range(len(a)):\n            x = int(a[i])\n            position[x] = i\n            y = int(b[i])\n            position[y] = i\n        l = position[1]\n        for i in range(1, 2 * n + 1):\n            if i % 2 == 0:\n                ans = min(ans, position[i] + l)\n            else:\n                l = min(l, position[i])\n        print(ans)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [0] * n\n    ans = n\n    for i in range(n):\n        c[a[i] // 2] = i\n    for i in range(1, n):\n        c[i] = min(c[i], c[i - 1])\n    for i in range(n):\n        ans = min(ans, i + c[b[i] // 2 - 1])\n    print(ans)", "import sys\n\ndef swaps(n, a, b):\n    a = [int(i) for i in a]\n    b = [int(i) for i in b]\n    a_pos = sorted(range(len(a)), key=a.__getitem__)\n    b_pos = sorted(range(len(b)), key=b.__getitem__)\n    res = sys.maxsize\n    dis_a = sys.maxsize\n    for i in range(n):\n        dis_a = min(dis_a, a_pos[i])\n        res = min(res, dis_a + b_pos[i])\n    return res\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(input().split())\n    b = list(input().split())\n    print(swaps(n, a, b))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [0] * n\n    for i in range(n):\n        c[a[i] // 2] = i\n    for i in range(1, n):\n        c[i] = min(c[i], c[i - 1])\n    ans = n\n    for i in range(n):\n        ans = min(ans, i + c[b[i] // 2 - 1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [0] * n\n    for i in range(n):\n        c[a[i] // 2] = i\n    for i in range(1, n):\n        c[i] = min(c[i], c[i - 1])\n    ans = n\n    for i in range(n):\n        ans = min(ans, i + c[b[i] // 2 - 1])\n    print(ans)", "for k in range(int(input())):\n    len_num = int(input())\n    a_num = [int(n) for n in input().split()]\n    b_num = [int(n) for n in input().split()]\n    c = [0] * len_num\n    for i in range(len_num):\n        c[a_num[i] // 2] = i\n    for i in range(1, len_num):\n        c[i] = min(c[i], c[i - 1])\n    count = len_num\n    for i in range(len_num):\n        count = min(count, i + c[b_num[i] // 2 - 1])\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [0] * n\n    ans = n\n    for i in range(n):\n        c[a[i] // 2] = i\n    for i in range(1, n):\n        c[i] = min(c[i], c[i - 1])\n    for i in range(n):\n        ans = min(ans, i + c[b[i] // 2 - 1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [0] * n\n    for i in range(n):\n        c[a[i] // 2] = i\n    for i in range(1, n):\n        c[i] = min(c[i], c[i - 1])\n    ans = n\n    for i in range(n):\n        ans = min(ans, i + c[b[i] // 2 - 1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [0] * n\n    ans = n\n    for i in range(n):\n        c[a[i] // 2] = i\n    for i in range(1, n):\n        c[i] = min(c[i], c[i - 1])\n    for i in range(n):\n        ans = min(ans, i + c[b[i] // 2 - 1])\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    indexes = [0] * (2 * n + 1)\n    min_b_pos = 2 * n\n    answer = 2 * n\n    for i in range(n):\n        indexes[a[i]] = i\n        indexes[b[i]] = i\n    for j in range(len(indexes) - 2, 0, -2):\n        min_b_pos = min(min_b_pos, indexes[j + 1])\n        answer = min(answer, min_b_pos + indexes[j])\n    print(answer)", "def int_input():\n    a = int(input())\n    return a\n\ndef int_list_input():\n    a = list(map(int, input().split()))\n    return a\n\ndef solve():\n    n = int(input())\n    a = int_list_input()\n    b = int_list_input()\n    for i in range(n):\n        if a[i] > b[i]:\n            break\n        elif a[i] < b[i]:\n            print(0)\n            return\n    ans = float('inf')\n    d = [0 for _ in range(2 * n)]\n    for i in range(n):\n        d[a[i] - 1] = i\n        d[b[i] - 1] = i\n    for i in range(2 * n - 3, 0, -2):\n        d[i] = min(d[i + 2], d[i])\n    for i in range(0, 2 * n, 2):\n        j = d[i + 1]\n        ans = min(ans, d[i] + j)\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    pos = dict()\n    for (i, x) in enumerate(a):\n        pos[x] = i\n    for i in range(3, 2 * n, 2):\n        pos[i] = min(pos[i - 2], pos[i])\n    ans = float('inf')\n    for i in range(n):\n        ans = min(ans, i + pos[b[i] - 1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [0] * n\n    ans = n\n    for i in range(n):\n        c[a[i] // 2] = i\n    for i in range(1, n):\n        c[i] = min(c[i], c[i - 1])\n    for i in range(n):\n        ans = min(ans, i + c[b[i] // 2 - 1])\n    print(ans)", "import math, bisect, heapq, random, sys, itertools\nsys.setrecursionlimit(10 ** 5)\nints = lambda : list(map(int, input().split()))\nalpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\np = 10 ** 9 + 7\nfor t in range(int(input())):\n    n = int(input())\n    a = ints()\n    b = ints()\n    store = {}\n    for i in range(n):\n        store[a[i]] = i\n    dp = []\n    minn = p\n    for i in range(1, 2 * n, 2):\n        minn = min(minn, store[i])\n        dp.append(minn)\n    ans = p\n    for i in range(n):\n        moves = i + dp[b[i] // 2 - 1]\n        ans = min(moves, ans)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [0] * n\n    ans = n\n    for i in range(n):\n        c[a[i] // 2] = i\n    for i in range(1, n):\n        c[i] = min(c[i], c[i - 1])\n    for i in range(n):\n        ans = min(ans, i + c[b[i] // 2 - 1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    limit = 2 * n + 1\n    a = (*map(int, input().split()),)\n    b = (*map(int, input().split()),)\n    d = {}\n    for i in range(n):\n        for even in range(a[i] + 1, limit, 2):\n            if even in d:\n                break\n            d[even] = i\n    ans = float('inf')\n    for i in range(n):\n        swaps = i + d[b[i]]\n        ans = min(swaps, ans)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ar = [0] * n\n    for j in range(n):\n        x = (a[j] + 1) // 2\n        ar[x - 1] = j\n    m = ar[0]\n    for j in range(n):\n        if ar[j] > m:\n            ar[j] = m\n        else:\n            m = ar[j]\n    m = 3 * n\n    for j in range(n):\n        x = b[j] // 2\n        m = min(m, j + ar[x - 1])\n    print(m)", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    arr = [0] * n\n    for j in range(n):\n        x = (a[j] + 1) // 2\n        arr[x - 1] = j\n    m = arr[0]\n    for j in range(n):\n        if arr[j] > m:\n            arr[j] = m\n        else:\n            m = arr[j]\n    m = 3 * n\n    for j in range(n):\n        x = b[j] // 2\n        m = min(m, j + arr[x - 1])\n    print(m)", "import sys\nfrom collections import deque\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = {}\n    d = {}\n    for i in range(n):\n        c[a[i]] = i\n        d[b[i]] = i\n    temp = n\n    result = 2 * n\n    k = 1\n    while k <= n:\n        temp = min(temp, c[2 * k - 1])\n        result = min(result, d[2 * k] + temp)\n        k += 1\n    print(result)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    indexes = [0] * (2 * n + 1)\n    min_b_pos = 2 * n\n    answer = 2 * n\n    for i in range(len(a)):\n        indexes[a[i]] = i\n    for i in range(len(b)):\n        indexes[b[i]] = i\n    for j in range(len(indexes) - 2, 0, -2):\n        min_b_pos = min(min_b_pos, indexes[j + 1])\n        answer = min(answer, min_b_pos + indexes[j])\n    print(answer)\npass", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    odd = list(map(int, input().split()))\n    even = list(map(int, input().split()))\n    min_steps = [0] * (n + 1)\n    for (id, i) in enumerate(even):\n        min_steps[i // 2] = id\n    for i in range(2 * n - 2, 0, -2):\n        min_steps[i // 2] = min(min_steps[i // 2], min_steps[(i + 2) // 2])\n    mn = 4 * n\n    mn_value = odd[0]\n    for (id, i) in enumerate(odd):\n        if i <= mn_value:\n            mn = min(mn, id + min_steps[(i + 1) // 2])\n            i = mn_value\n    print(mn)", "n = int(input())\nwhile n:\n    n -= 1\n    f = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ev = [0] * f\n    for i in range(f):\n        ev[b[i] // 2 - 1] = i\n    mi = 100000000000\n    for i in reversed(range(f)):\n        ev[i] = min(mi, ev[i])\n        mi = min(mi, ev[i])\n    mi = 1000000000000\n    for i in range(f):\n        mi = min(i + ev[(a[i] - 1) // 2], mi)\n    print(mi)", "def bs(val):\n    (l, r) = (0, n - 1)\n    while l <= r:\n        mid = l + (r - l) // 2\n        if b[mid] > val:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return b[l]\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = float('inf')\n    pos = {}\n    for j in range(n):\n        pos[b[j]] = j\n    minind = {}\n    cind = float('inf')\n    for j in range(2 * n, 1, -2):\n        cind = min(cind, pos[j])\n        minind[j] = cind\n    for j in range(n):\n        ele = a[j] + 1\n        ans = min(ans, j + minind[ele])\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    astr = input().split()\n    a = [(int(astr[i]), i) for i in range(len(astr))]\n    b = list(map(int, input().split()))\n    c = 999999999\n    aa = sorted(a, key=lambda x: x[0])\n    for i in range(len(b)):\n        if i > 1:\n            j = j\n        else:\n            j = 0\n        while aa[i][0] > b[j]:\n            j += 1\n        c = min(c, j + aa[i][1])\n    print(c)", "for j in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [0] * n\n    for i in range(n):\n        c[a[i] // 2] = i\n    for i in range(1, n):\n        c[i] = min(c[i], c[i - 1])\n    ans = n\n    for i in range(n):\n        ans = min(ans, i + c[b[i] // 2 - 1])\n    print(ans)", "T = int(input())\nfor haha in range(T):\n    n = int(input())\n    a = []\n    b = []\n    pos = [None] * (2 * n + 5)\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for _ in range(n):\n        pos[a[_]] = _\n    for _ in range(n):\n        pos[b[_]] = _\n    res = 1000000\n    mi = 1000000\n    i = 2 * n - 1\n    while i >= 1:\n        mi = min(mi, pos[i + 1])\n        res = min(res, mi + pos[i])\n        i -= 2\n    print(res)", "from sys import *\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    numList = [0] * (2 * n + 1)\n    recList = numList.copy()\n    a = list(map(int, input().split()))\n    for i in range(len(a)):\n        numList[a[i]] = i\n    b = list(map(int, input().split()))\n    for i in range(len(b)):\n        numList[b[i]] = i\n    minNum = float('inf')\n    for i in range(1, len(numList), 2):\n        minNum = min(minNum, numList[i])\n        recList[i] = minNum\n    ans = float('inf')\n    for i in range(2, len(numList), 2):\n        ans = min(ans, numList[i] + recList[i - 1])\n    print(ans)", "t = input()\nfor k in range(int(t)):\n    z = int(input())\n    n = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    c = [0] * z\n    for i in range(z):\n        c[n[i] // 2] = i\n    for i in range(1, z):\n        c[i] = min(c[i], c[i - 1])\n    for i in range(z):\n        c[i] = c[int(m[i] / 2) - 1] + i\n    mini = min(c)\n    print(mini)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [0] * n\n    ans = n\n    for i in range(n):\n        c[a[i] // 2] = i\n    for i in range(1, n):\n        c[i] = min(c[i], c[i - 1])\n    for i in range(n):\n        ans = min(ans, i + c[b[i] // 2 - 1])\n    print(ans)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    index = [0 for i in range(n + 1)]\n    for i in range(n):\n        index[a[i] // 2] = i\n    c = 0\n    ans = n\n    for i in range(1, n):\n        index[i] = min(index[i - 1], index[i])\n    for i in range(n):\n        ans = min(index[b[i] // 2 - 1] + i, ans)\n        c += 1\n    print(ans)\n    t -= 1", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    pos = dict()\n    for (i, x) in enumerate(a):\n        pos[x] = i\n    for i in range(3, 2 * n, 2):\n        pos[i] = min(pos[i - 2], pos[i])\n    ans = float('inf')\n    for i in range(n):\n        ans = min(ans, i + pos[b[i] - 1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [0] * n\n    ans = n\n    for i in range(n):\n        c[a[i] // 2] = i\n    for i in range(1, n):\n        c[i] = min(c[i], c[i - 1])\n    for i in range(n):\n        ans = min(ans, i + c[b[i] // 2 - 1])\n    print(ans)", "from collections import Counter\n\ndef solve():\n    n = int(input())\n    A = [int(char) for char in input().split()]\n    B = [int(char) for char in input().split()]\n    ans = n - 1\n    for (i, a) in enumerate(A):\n        for (j, b) in enumerate(B):\n            if a < b:\n                ans = min(ans, i + j)\n    print(ans)\n\ndef solve2():\n    n = int(input())\n    A = [int(char) for char in input().split()]\n    B = [int(char) for char in input().split()]\n    A_pos = {a: i for (i, a) in enumerate(A)}\n    Bs = sorted([(b, i) for (i, b) in enumerate(B)])\n    Bmin = [i for (b, i) in Bs]\n    for i in range(n - 2, -1, -1):\n        Bmin[i] = min(Bmin[i + 1], Bmin[i])\n    ans = 2 * (n - 1)\n    for i in range(n):\n        odd_num = 2 * i + 1\n        ans = min(ans, A_pos[odd_num] + Bmin[i])\n    return ans\nfor _ in range(int(input())):\n    print(solve2())", "from collections import deque\n\ndef min_to_the_right(n, sorted_array):\n    queue = deque([])\n    min_moves = [0 for x in range(n)]\n    for i in range(n - 1, -1, -1):\n        while len(queue) > 0 and queue[0] > sorted_array[i]:\n            queue.popleft()\n        queue.appendleft(sorted_array[i])\n        min_moves[i] = queue[-1]\n    return min_moves\n\ndef solve(n, a, b):\n    sorted_array = [0 for x in range(n)]\n    for i in range(n):\n        sorted_array[b[i] // 2 - 1] = i\n    min_moves = min_to_the_right(n, sorted_array)\n    final_ans = float('inf')\n    for i in range(n):\n        first = a[i]\n        second = b[i]\n        current = i\n        just_greater = first + 1\n        no_of_moves = min_moves[just_greater // 2 - 1]\n        current += no_of_moves\n        final_ans = min(final_ans, current)\n    return final_ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    print(solve(n, a, b))", "for ii in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    even = 10 ** 9\n    ans = 10 ** 9\n    e = {}\n    for i in range(n):\n        e[a[i]] = i\n        e[b[i]] = i\n    for i in range(2 * n, 0, -1):\n        even = min(even, e[i]) if i % 2 == 0 else even\n        ans = min(ans, e[i] + even) if i % 2 != 0 else ans\n    print(ans)", "t = int(input())\nfor case in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[a[i]] = i\n        d[b[i]] = i\n    ans = 2 * n\n    a.sort()\n    b.sort()\n    mini = [0] * n\n    mini[n - 1] = d[b[n - 1]]\n    for i in range(n - 2, -1, -1):\n        mini[i] = min(mini[i + 1], d[b[i]])\n    for i in range(n):\n        ans = min(ans, d[a[i]] + mini[i])\n    print(ans)", "import sys\nsys.setrecursionlimit(10 ** 6)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    m = 10 ** 9\n    ans = 10 ** 9\n    c = [0] * n\n    d = [0] * n\n    for i in range(n):\n        c[(a[i] - 1) // 2] = i\n        d[(b[i] - 1) // 2] = i\n    for i in range(n - 1, -1, -1):\n        d[i] = min(m, d[i])\n        m = d[i]\n        ans = min(ans, m + c[i])\n    print(ans)", "tst = int(input())\nfor _ in range(tst):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    d = {}\n    for i in range(n):\n        d[arr[i]] = i\n    arr = list(map(int, input().split(' ')))\n    for i in range(n):\n        d[arr[i]] = i\n    l = float('inf')\n    answer = float('inf')\n    for i in range(2 * n, 0, -1):\n        if i % 2 == 0:\n            l = min(l, d[i])\n        else:\n            answer = min(answer, l + d[i])\n    print(answer)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    numList = [0] * (2 * n + 1)\n    recList = numList.copy()\n    a = list(map(int, input().split()))\n    for i in range(len(a)):\n        numList[a[i]] = i\n    b = list(map(int, input().split()))\n    for i in range(len(b)):\n        numList[b[i]] = i\n    minNum = float('inf')\n    for i in range(1, len(numList), 2):\n        minNum = min(minNum, numList[i])\n        recList[i] = minNum\n    ans = float('inf')\n    for i in range(2, len(numList), 2):\n        ans = min(ans, numList[i] + recList[i - 1])\n    print(ans)", "T = int(input())\n\ndef swapPlaces(arrOdd, arrEven):\n    h = {}\n    for (i, a) in enumerate(arrOdd):\n        h[a] = i\n    for (i, b) in enumerate(arrEven):\n        h[b] = i\n    arrOdd.sort(reverse=True)\n    arrEven.sort(reverse=True)\n    suffixMin = []\n    c = float('inf')\n    for (i, a) in enumerate(arrEven):\n        m = min(c, h[a])\n        suffixMin.append(m)\n        c = m\n    minDist = float('inf')\n    for (i, a) in enumerate(arrOdd):\n        dist = h[a] + suffixMin[i]\n        minDist = min(minDist, dist)\n    return minDist\nfor t in range(T):\n    n = int(input())\n    a = [int(c) for c in input().split()]\n    b = [int(c) for c in input().split()]\n    print(swapPlaces(a, b))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    swap_a = {}\n    swap_b = {}\n    for i in range(n):\n        swap_a[a[i]] = i\n        swap_b[b[i]] = i\n    b.sort()\n    mini = 10 ** 8\n    suff = []\n    for i in range(n - 1, -1, -1):\n        mini = min(mini, swap_b[b[i]])\n        suff.append(mini)\n    ans = 10 ** 15\n    suff.reverse()\n    for i in range(n):\n        ans = min(ans, swap_a[a[i]] + suff[a[i] // 2])\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    odd = list(map(int, input().split()))\n    eve = list(map(int, input().split()))\n    indices = [-1 for j in range(n + 1)]\n    for j in range(n):\n        indices[eve[j] // 2] = j\n    prev = 2 * n\n    for j in range(n, 0, -1):\n        prev = min(indices[j], prev)\n        indices[j] = prev\n    mi = 2 * n - 1\n    for j in range(n):\n        steps = j + indices[odd[j] // 2 + 1]\n        mi = min(mi, steps)\n    print(mi)", "t = int(input())\nwhile t:\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    req_a = a[0]\n    req_b = b[0]\n    if req_a < req_b:\n        print(0)\n    else:\n        swaps = [0] * (2 * n + 1)\n        for (i, val) in enumerate(b):\n            swaps[val] = i\n        for i in range(2 * n - 2, -1, -1):\n            swaps[i] = min(swaps[i], swaps[i + 2])\n        ans = n\n        for i in range(n):\n            ans = min(ans, i + swaps[a[i] + 1])\n        print(ans)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(j) for j in input().split()]\n    b = [int(j) for j in input().split()]\n    mp = [10 ** 7] * (2 * n + 1)\n    for i in range(n):\n        mp[b[i]] = i\n    minmp = [0] * (2 * n + 1)\n    minmp[2 * n] = mp[2 * n]\n    for i in range(2 * n - 1, -1, -1):\n        minmp[i] = min(minmp[i + 1], mp[i])\n    ans = 10 ** 10\n    for i in range(n):\n        ans = min(ans, i + minmp[a[i] + 1])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = a[:]\n    d = b[:]\n    for i in range(1, n):\n        c[i] = min(c[i - 1], a[i])\n        d[i] = max(d[i - 1], b[i])\n    ans = 2 * (n - 1)\n    x = 0\n    y = 0\n    for i in range(n):\n        if c[i] < d[0]:\n            ans = min(ans, i)\n            x = i\n            y = 0\n            break\n    else:\n        for j in range(n):\n            if c[i] < d[j]:\n                ans = min(ans, i + j)\n                x = i\n                y = j\n                break\n    while x > 0:\n        x -= 1\n        while c[x] >= d[y] and y < n - 1:\n            y += 1\n        if c[x] < d[y]:\n            ans = min(ans, x + y)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = {}\n    for i in range(len(a)):\n        d[a[i]] = i\n    prev = float('-inf')\n    ans = float('inf')\n    for i in range(n):\n        if b[i] > prev:\n            for j in range(max(0, prev) + 1, b[i], 2):\n                ans = min(ans, d.get(j) + i)\n            prev = b[i]\n    print(ans)", "t = int(input())\nfor y in range(t):\n    n = int(input())\n    a = input().split()\n    b = input().split()\n    a = [int(x) for x in a]\n    b = [int(x) for x in b]\n    k = [-1] * n\n    m = [-1] * n\n    val1 = max(a) + 1\n    val2 = -1\n    for i in range(n):\n        val1 = min(val1, a[i])\n        k[i] = val1\n        val2 = max(val2, b[i])\n        m[i] = val2\n    c1 = n - 1\n    c2 = 0\n    l = []\n    ans = 2 * n\n    while c1 >= 0:\n        if k[c1] < m[c2]:\n            l.append((k[c1], m[c2]))\n            ans = min(ans, c1 + c2)\n            c1 -= 1\n        else:\n            c2 += 1\n    print(ans)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    t = t - 1\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    gt = [0 for i in range(0, 2 * n + 2)]\n    idx = [0 for i in range(0, 2 * n + 2)]\n    gt[2 * n + 1] = 300000\n    res = 300000\n    for i in range(0, n):\n        idx[b[i]] = i\n    for i in range(2 * n - 1, 0, -2):\n        gt[i] = min(gt[i + 2], idx[i + 1])\n    for i in range(0, n):\n        res = min(res, i + gt[a[i]])\n    print(res)", "for i in range(int(input())):\n    n = int(input())\n    odd = list(map(int, input().split()))\n    eve = list(map(int, input().split()))\n    indices = [-1 for j in range(n + 1)]\n    for j in range(n):\n        indices[eve[j] // 2] = j\n    prev = 2 * n\n    anoth = indices.copy()\n    for j in range(n, 0, -1):\n        prev = min(anoth[j], prev)\n        anoth[j] = prev\n    mi = 2 * n - 1\n    for j in range(n):\n        steps = j + min(indices[odd[j] // 2 + 1], anoth[odd[j] // 2 + 1])\n        mi = min(mi, steps)\n    print(mi)", "t = int(input())\nfor y in range(t):\n    n = int(input())\n    a = input().split()\n    b = input().split()\n    a = [int(x) for x in a]\n    b = [int(x) for x in b]\n    c = [-1] * n\n    d = [-1] * n\n    val1 = max(a) + 1\n    val2 = -1\n    for i in range(n):\n        val1 = min(val1, a[i])\n        c[i] = val1\n        val2 = max(val2, b[i])\n        d[i] = val2\n    p1 = n - 1\n    p2 = 0\n    l = []\n    ans = 2 * n\n    while p1 >= 0:\n        if c[p1] < d[p2]:\n            l.append((c[p1], d[p2]))\n            ans = min(ans, p1 + p2)\n            p1 -= 1\n        else:\n            p2 += 1\n    print(ans)", "import sys\n\ndef mgc(a, b, n):\n    (first, second) = ([], [])\n    if a[0] < b[0]:\n        return 0\n    for i in range(n):\n        first.append([a[i], i])\n        second.append([b[i], i])\n    first.sort()\n    second.sort()\n    mini = []\n    x = second[-1][1]\n    for i in range(n - 1, -1, -1):\n        x = min(x, second[i][1])\n        mini.append(x)\n    mini = mini[::-1]\n    ans = sys.maxsize\n    for i in range(n):\n        ans = min(ans, first[i][1] + mini[i])\n    return ans\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(mgc(a, b, n))", "for _ in range(int(input().strip())):\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    arr = [10 ** 6] * (2 * n)\n    for i in range(n):\n        arr[a[i] - 1] = i\n    an = 10 ** 6\n    for i in range(1, 2 * n):\n        arr[i] = min(arr[i], arr[i - 1])\n    for i in range(n):\n        an = min(arr[b[i] - 1] + i, an)\n    print(an)", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    a = []\n    b = []\n    inp = input().split()\n    for i in inp:\n        a.append(int(i))\n    inp = input().split()\n    for i in inp:\n        b.append(int(i))\n    d = [0]\n    for i in range(len(b)):\n        d.append(max(d[-1], b[i]))\n    j = n\n    ans = 10 ** 9\n    for i in range(n):\n        while j >= 0 and a[i] < d[j]:\n            j -= 1\n        ans = min(ans, i + j)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    list_odd = list(map(int, input().split()))\n    list_even = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        (list1, list2) = ([], [])\n        for i in range(n):\n            list1.append(-1)\n            list2.append(-1)\n        counter = 0\n        for i in list_odd:\n            place = int(0.5 * (i - 1))\n            list1[place] = counter\n            counter += 1\n        counter = 0\n        for i in list_even:\n            place = int(0.5 * i - 1)\n            list2[place] = counter\n            counter += 1\n        index = 0\n        list1_modified = list1[:]\n        while True:\n            if list1_modified[index + 1] > list1_modified[index]:\n                list1_modified[index + 1] = list1_modified[index]\n            index += 1\n            if index == n - 1:\n                break\n        index = -1\n        list2_modified = list2[:]\n        while True:\n            if list2_modified[index - 1] > list2_modified[index]:\n                list2_modified[index - 1] = list2_modified[index]\n            index -= 1\n            if index == -n:\n                break\n        list_final = []\n        for i in range(n):\n            list_final.append(list1_modified[i] + list2_modified[i])\n        step = min(list_final)\n        print(step)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lsta = list(map(int, input().split()))\n    lstb = list(map(int, input().split()))\n    dic = {}\n    la = []\n    lb = []\n    for d in range(n):\n        dic[lsta[d]] = d\n        dic[lstb[d]] = d\n        la.append([lsta[d], d])\n        lb.append([lstb[d], d])\n    c = 0\n    for k in range(2, 2 * n + 1, 2):\n        if k == 2:\n            ele = 1\n            c = dic[2] + dic[1]\n        else:\n            if dic[k - 1] < dic[ele]:\n                ele = k - 1\n            c1 = dic[ele] + dic[k]\n            c = min(c1, c)\n    print(c)", "import math\nfor m in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    dict = {}\n    c = []\n    for i in range(len(a)):\n        c.append([a[i], i])\n    c.sort()\n    min1 = math.inf\n    for z in range(len(a)):\n        min1 = min((c[z][1], min1))\n        dict[c[z][0] + 1] = min1\n    q = math.inf\n    for k in range(len(b)):\n        q = min(abs(k + dict[b[k]]), q)\n    print(q)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    list_odd = list(map(int, input().split()))\n    list_even = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        (list1, list2) = ([], [])\n        for i in range(n):\n            list1.append(-1)\n            list2.append(-1)\n        counter = 0\n        for i in list_odd:\n            place = int(0.5 * (i - 1))\n            list1[place] = counter\n            counter += 1\n        counter = 0\n        for i in list_even:\n            place = int(0.5 * i - 1)\n            list2[place] = counter\n            counter += 1\n        index = 0\n        list1_modified = list1[:]\n        while True:\n            if list1_modified[index + 1] > list1_modified[index]:\n                list1_modified[index + 1] = list1_modified[index]\n            index += 1\n            if index == n - 1:\n                break\n        index = -1\n        list2_modified = list2[:]\n        while True:\n            if list2_modified[index - 1] > list2_modified[index]:\n                list2_modified[index - 1] = list2_modified[index]\n            index -= 1\n            if index == -n:\n                break\n        list_final = []\n        for i in range(n):\n            list_final.append(list1_modified[i] + list2_modified[i])\n        step = min(list_final)\n        print(step)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [0] * n\n    ans = n\n    for i in range(n):\n        c[a[i] // 2] = i\n    for i in range(1, n):\n        c[i] = min(c[i], c[i - 1])\n    for i in range(n):\n        ans = min(ans, i + c[b[i] // 2 - 1])\n    print(ans)", "from collections import deque, Counter\nfrom collections import defaultdict as dfd\nfrom bisect import bisect, bisect_left\nfrom math import sqrt, gcd, ceil, factorial, log2\nfrom heapq import heapify, heappush, heappop\nMOD = 10 ** 9 + 7\ninf = float('inf')\nans_ = []\n\ndef nin():\n    return int(input())\n\ndef ninf():\n    return int(file.readline())\n\ndef st():\n    return input().strip()\n\ndef stf():\n    return file.readline().strip()\n\ndef read():\n    return list(map(int, input().strip().split()))\n\ndef readf():\n    return list(map(int, file.readline().strip().split()))\n\ndef readfl():\n    return list(map(float, input().strip().split()))\n\ndef readffl():\n    return list(map(float, file.readline().strip().split()))\n\ndef solve():\n    for _ in range(nin()):\n        n = nin()\n        a = read()\n        b = read()\n        a = sorted([(a[i], i) for i in range(n)])\n        b = sorted([(b[i], i) for i in range(n)])\n        ans = 10 ** 9\n        mini = 10 ** 9\n        for i in range(n):\n            mini = min(mini, a[i][1])\n            ans = min(ans, mini + b[i][1])\n        ans_.append(ans)\nsolve()\nfor i in ans_:\n    print(i)", "for _ in range(int(input())):\n    n = int(input())\n    a = [[x, i] for (i, x) in enumerate(list(map(int, input().split(' '))))]\n    b = [[x, i] for (i, x) in enumerate(list(map(int, input().split(' '))))]\n    a.sort(key=lambda x: x[0])\n    b.sort(key=lambda x: x[0])\n    out = float('inf')\n    mn = float('inf')\n    for i in range(len(a)):\n        mn = min(mn, a[i][1])\n        out = min(out, b[i][1] + mn)\n    print(out)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    brr = list(map(int, input().split()))\n    d = []\n    e = []\n    for i in range(n):\n        d.append((arr[i], i))\n        e.append((brr[i], i))\n    d.sort()\n    e.sort()\n    m = [e[-1][1]]\n    for el in e[-2::-1]:\n        if el[1] < m[-1]:\n            m.append(el[1])\n        else:\n            m.append(m[-1])\n    m = m[::-1]\n    ans = float('inf')\n    i = 0\n    for (a, b) in d:\n        ans = min(ans, b + m[i])\n        i += 1\n    print(ans)", "for _ in range(int(input())):\n    ewr = input()\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    if a[0] < b[0]:\n        print(0)\n    else:\n        c = []\n        d = []\n        st = dict()\n        for i in range(len(a)):\n            st[a[i]] = i\n            c.append([a[i], i])\n            d.append([b[i], i])\n        c = sorted(c, key=lambda x: x[0])\n        c = sorted(a)\n        d = sorted(d, key=lambda x: x[0])\n        i = len(d) - 1\n        mini = d[i][-1]\n        arr = []\n        while i >= 0:\n            arr.append(mini)\n            i -= 1\n            mini = min(mini, d[i][-1])\n        arr = arr[::-1]\n        ans = 10 ** 9\n        for i in range(len(c)):\n            ans = min(ans, st[c[i]] + arr[i])\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [[x, i] for (i, x) in enumerate(list(map(int, input().split(' '))))]\n    b = [[x, i] for (i, x) in enumerate(list(map(int, input().split(' '))))]\n    a.sort(key=lambda x: x[0])\n    b.sort(key=lambda x: x[0])\n    out = float('inf')\n    mn = float('inf')\n    for i in range(len(a)):\n        mn = min(mn, a[i][1])\n        out = min(out, b[i][1] + mn)\n    print(out)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    firstleqa = {}\n    for i in range(n):\n        j = a[i]\n        while j <= 2 * n and j not in firstleqa:\n            firstleqa[j] = i\n            j += 1\n    firstgeqb = {}\n    firstgeqb[2 * n - 1] = int(1000000000.0)\n    for i in range(n):\n        j = b[i]\n        while j >= 0 and j not in firstgeqb:\n            firstgeqb[j] = i\n            j -= 1\n    ans = int(1000000000.0)\n    for i in range(n):\n        ans = min(ans, i + firstleqa[b[i]])\n        ans = min(ans, i + firstgeqb[a[i]])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    odd = list(map(int, input().split()))\n    even = list(map(int, input().split()))\n    odd = [[odd[i], i] for i in range(n)]\n    even = [[even[i], i] for i in range(n)]\n    odd.sort()\n    even.sort()\n    ans = n\n    mini = 10000000\n    for i in range(n - 1, -1, -1):\n        mini = min(even[i][1], mini)\n        ans = min(mini + odd[i][1], ans)\n    print(ans)", "def getarray():\n    return list(map(int, input().split()))\n\ndef getints():\n    return map(int, input().split())\n\ndef getint():\n    return int(input())\n\ndef solve():\n    n = getint()\n    a = getarray()\n    b = getarray()\n    (arr, brr) = ([], [])\n    for i in range(n):\n        arr.append([a[i], i])\n        brr.append([b[i], i])\n    arr.sort()\n    brr.sort()\n    postarr = [float('inf')] * n\n    postbrr = [float('inf')] * n\n    postbrr[-1] = brr[-1][1]\n    for i in range(n - 2, -1, -1):\n        postbrr[i] = min(brr[i][1], postbrr[i + 1])\n    ans = float('inf')\n    for i in range(n):\n        ans = min(ans, arr[i][1] + postbrr[i])\n    print(ans)\nfor t in range(getint()):\n    solve()", "import sys\n\ndef func():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ma = []\n    mb = []\n    for i in range(n):\n        ma.append([a[i], i])\n        mb.append([b[i], i])\n    ma.sort()\n    mb.sort()\n    lia = [0 for i in range(n)]\n    lia[n - 1] = mb[n - 1][1]\n    idx = n - 2\n    while idx >= 0:\n        lia[idx] = min(lia[idx + 1], mb[idx][1])\n        idx -= 1\n    mnp = sys.maxsize\n    for i in range(n):\n        mnp = min(mnp, ma[i][1] + lia[i])\n    print(mnp)\nt = int(input())\nfor i in range(t):\n    func()", "import sys\nfast_input = sys.stdin.readline\nt = int(fast_input())\nwhile t:\n    t -= 1\n    n = int(fast_input())\n    a = list(map(int, fast_input().split()))\n    b = list(map(int, fast_input().split()))\n    new = []\n    for i in range(n):\n        new.append([a[i], i])\n        new.append([b[i], i])\n    new.sort(reverse=True)\n    res = 2 * n\n    (x, y) = (n, n)\n    for ne in new:\n        if ne[0] % 2 == 0:\n            x = min(x, ne[1])\n        else:\n            res = min(res, x + ne[1])\n    print(res)"]