["import sys\nt = int(sys.stdin.readline())\nfor i in range(t):\n    n = int(sys.stdin.readline())\n    tmp = sys.stdin.readline().split(' ')\n    c = list(map(int, tmp))\n    ans = [0 for j in range(n)]\n    prev = [-1 for j in range(n)]\n    for j in range(len(c)):\n        if prev[c[j] - 1] == -1:\n            prev[c[j] - 1] = j\n            ans[c[j] - 1] += 1\n        elif (j - prev[c[j] - 1]) % 2 == 1:\n            prev[c[j] - 1] = j\n            ans[c[j] - 1] += 1\n    ans = list(map(str, ans))\n    print(' '.join(ans))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    nums = [int(x) for x in input().split()]\n    result = [0] * n\n    meta = [-1] * (n + 1)\n    for (index, num) in enumerate(nums):\n        last_index = meta[num]\n        if last_index == -1:\n            result[num - 1] = 1\n            meta[num] = index\n        elif index % 2 != last_index % 2:\n            result[num - 1] += 1\n            meta[num] = index\n    print(' '.join([str(r) for r in result]))", "for _ in range(int(input())):\n    n = int(input())\n    count = [0] * n\n    last = [None] * n\n    c = [int(x) - 1 for x in input().split()]\n    for (i, x) in enumerate(c):\n        if last[x] is None:\n            last[x] = i % 2\n            count[x] = 1\n            continue\n        if last[x] != i % 2:\n            last[x] = 1 - last[x]\n            count[x] += 1\n    print(' '.join(map(str, count)))", "t = int(input())\n\ndef solve():\n    n = int(input())\n    lst = list(map(int, input().split()))\n    ans = [0] * n\n    hash_map = {}\n    for i in range(len(lst)):\n        if not lst[i] in hash_map:\n            hash_map[lst[i]] = i\n            ans[lst[i] - 1] = 1\n        elif (i - hash_map[lst[i]]) % 2 != 0:\n            ans[lst[i] - 1] += 1\n            hash_map[lst[i]] = i\n    print(' '.join((str(ele) for ele in ans)))\nwhile t:\n    solve()\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    last = [None] * n\n    count = [0] * n\n    for (i, x) in enumerate(input().split()):\n        x = int(x) - 1\n        if last[x] is None or (last[x] + i) % 2 == 1:\n            last[x] = i\n            count[x] += 1\n    print(' '.join(map(str, count)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    l = [0 for _ in range(n)]\n    prev = [0 for _ in range(n)]\n    for i in range(1, n + 1):\n        if prev[c[i - 1] - 1] == 0 or (i - prev[c[i - 1] - 1]) % 2 != 0:\n            l[c[i - 1] - 1] += 1\n            prev[c[i - 1] - 1] = i\n    print(' '.join(map(str, l)))", "for _ in range(int(input())):\n    n = int(input())\n    c = tuple(map(int, input().split()))\n    ans = [0] * n\n    d = {}\n    for i in range(n):\n        r = c[i]\n        if r not in d:\n            ans[r - 1] += 1\n        elif i - d[r] == 1:\n            ans[r - 1] += 1\n        elif (i - d[r]) % 2 == 1:\n            ans[r - 1] += 1\n        d[r] = i\n    print(' '.join((str(i) for i in ans)))", "def validate(arr):\n    count_vector = [0 for _ in range(len(arr))]\n    indexes = [-1 for _ in range(len(arr))]\n    for i in range(len(arr)):\n        if indexes[arr[i] - 1] == -1:\n            indexes[arr[i] - 1] = i\n            count_vector[arr[i] - 1] += 1\n        elif (i - indexes[arr[i] - 1]) % 2:\n            indexes[arr[i] - 1] = i\n            count_vector[arr[i] - 1] += 1\n    return ' '.join([str(x) for x in count_vector])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    colors = [int(x) for x in input().split()]\n    print(validate(colors))", "t = int(input())\nfor i in range(t):\n    l = input()\n    l1 = list(map(int, input().split()))\n    n = int(l)\n    ans = {}\n    for i in range(1, n + 1):\n        ans[i] = 0\n    prev_idx = {}\n    for i in range(n):\n        if ans[l1[i]] == 0:\n            ans[l1[i]] = 1\n            prev_idx[l1[i]] = i\n        else:\n            if (i - prev_idx[l1[i]]) % 2 == 1:\n                ans[l1[i]] += 1\n            prev_idx[l1[i]] = i\n    res = ' '.join([str(e) for e in ans.values()])\n    print(res)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans0 = [[] for i in range(n + 1)]\n    for (i, x) in enumerate(a):\n        if len(ans0[x]) == 0:\n            ans0[x].append(i)\n        elif ans0[x][-1] % 2 != i % 2:\n            ans0[x].append(i)\n    ans = []\n    for i in range(1, n + 1):\n        ans.append(len(ans0[i]))\n    print(' '.join(map(str, ans)))", "t = int(input())\nfor _ in range(t):\n    last_seen = {}\n    count = {}\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    for (i, color) in enumerate(a):\n        if color not in last_seen:\n            count[color] = 1\n            last_seen[color] = i\n        elif (i - last_seen[color]) % 2 == 1:\n            count[color] += 1\n            last_seen[color] = i\n    ans = []\n    for i in range(1, n + 1):\n        if i in count:\n            ans.append(count[i])\n        else:\n            ans.append(0)\n    print(' '.join([str(b) for b in ans]))", "t = int(input())\nans = list()\nfor i in range(0, t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    t = n * [0]\n    p = n * [-1]\n    for i in range(0, n):\n        if t[arr[i] - 1] == 0:\n            t[arr[i] - 1] = 1\n        if p[arr[i] - 1] != -1 and (p[arr[i] - 1] - i) % 2 == 1:\n            t[arr[i] - 1] += 1\n        p[arr[i] - 1] = i\n    s = ''\n    for x in t:\n        s += f'{x} '\n    ans.append(s)\nfor s in ans:\n    print(s)", "def solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = dict()\n    ans = [0 for i in range(n)]\n    for i in range(n):\n        if l[i] in d:\n            d[l[i]].append(i)\n        else:\n            d[l[i]] = [i]\n    for i in d.keys():\n        c = 0\n        start = d[i][0] % 2\n        for j in range(1, len(d[i])):\n            if d[i][j] % 2 == (start + 1) % 2:\n                c += 1\n                start = (start + 1) % 2\n        ans[i - 1] = c + 1\n    print(' '.join(map(str, ans)))\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1", "def solveonecolor(array):\n    m = len(array)\n    if m == 0:\n        return 0\n    elif m == 1:\n        return 1\n    else:\n        maxi = 1\n        for i in range(m - 1):\n            if (array[i + 1] - array[i]) % 2 == 1:\n                maxi += 1\n    return maxi\n\ndef solve(n, array):\n    allans = []\n    subarrays = [[] for _ in range(n)]\n    for i in range(n):\n        color = array[i] - 1\n        subarrays[color].append(i)\n    for color in range(n):\n        allans.append(solveonecolor(subarrays[color]))\n    print(' '.join((str(i) for i in allans)))\ntests = int(input())\nfor _ in range(tests):\n    n = int(input())\n    array = list(map(int, input().split()))\n    solve(n, array)", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    c = list((int(s) for s in input().split()))\n    c.insert(0, None)\n    started = [False] * (n + 1)\n    isEven = [None] * (n + 1)\n    count = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if count[c[i]] == 0:\n            isEven[c[i]] = i % 2 == 0\n            count[c[i]] = 1\n        elif isEven[c[i]] and i % 2 != 0:\n            isEven[c[i]] = False\n            count[c[i]] += 1\n        elif not isEven[c[i]] and i % 2 == 0:\n            isEven[c[i]] = True\n            count[c[i]] += 1\n    out = []\n    for i in range(1, n + 1):\n        out.append(str(count[i]))\n        out.append(' ')\n    print(''.join(out[:-1]))", "def solution(n, arr):\n    res = []\n    dic = {}\n    for i in range(len(arr)):\n        dic[arr[i]] = dic.get(arr[i], [])\n        dic[arr[i]].append(i)\n    for i in range(1, n + 1):\n        if dic.get(i, 0) == 0:\n            res.append('0')\n        else:\n            s = 1\n            current = dic[i][0]\n            if len(dic[i]) > 1:\n                for j in range(1, len(dic[i])):\n                    if (dic[i][j] - current - 1) % 2 == 0:\n                        s += 1\n                        current = dic[i][j]\n            res.append(str(s))\n    return ' '.join(res)\nN = int(input())\nfor _ in range(N):\n    n = int(input())\n    arr = [int(i) for i in input().split(' ')]\n    print(solution(n, arr))", "trails = int(input())\nfor x in range(trails):\n    n = int(input())\n    k = input().split(' ')\n    ans = [0] * n\n    li = [-1] * n\n    index = -1\n    for p in k:\n        index += 1\n        g = int(p)\n        li_val = li[g - 1]\n        if (index - li_val) % 2 == 1 or li_val == -1:\n            ans[g - 1] = ans[g - 1] + 1\n        li[g - 1] = index\n    ans_str = ''\n    for i in ans:\n        ans_str += str(i)\n        ans_str += ' '\n    print(ans_str)", "import collections\nfor _ in range(int(input())):\n    n = int(input())\n    nums = input().split(' ')\n    di = collections.defaultdict(list)\n    colors = [0] * (n + 1)\n    for i in range(n):\n        di[nums[i]].append(i)\n    for i in di:\n        count = 1\n        k = di[i]\n        for j in range(len(k) - 1):\n            if (k[j + 1] - k[j]) % 2 == 1:\n                count += 1\n        colors[int(i)] = count\n    colors.pop(0)\n    print(' '.join(list(map(str, colors))))", "for _ in range(int(input())):\n    n = int(input())\n    arr = input().split()\n    dp = {}\n    result = [0] * n\n    for i in range(n):\n        if arr[i] not in dp:\n            dp[arr[i]] = [i]\n        else:\n            dp[arr[i]].append(i)\n    for i in dp:\n        arr1 = dp[i]\n        count = 1\n        n1 = len(arr1)\n        for j in range(1, n1):\n            if arr1[j] - arr1[j - 1] == 1 or (arr1[j] - arr1[j - 1]) % 2 == 1:\n                count += 1\n            else:\n                continue\n        result[int(i) - 1] = count\n    print(' '.join(map(str, result)))", "def main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    last = [-1] * (n + 1)\n    final = [0] * (n + 1)\n    for i in range(n):\n        curr = arr[i]\n        if final[curr] == 0:\n            final[curr] = 1\n            last[curr] = i\n        elif (i - last[curr]) % 2:\n            last[curr] = i\n            final[curr] += 1\n    for z in final[1:]:\n        print(z, end=' ')\n    print()\n    return\nfor _ in range(int(input())):\n    main()", "from collections import defaultdict\n\ndef sol(arr):\n    dic = defaultdict(list)\n    for i in range(len(arr)):\n        dic[arr[i]].append(i)\n    ans = [0 for _ in range(len(arr))]\n    for key in dic:\n        dic[key] = sorted(dic[key])\n        if len(dic[key]) == 0:\n            ans[key - 1] = 0\n            continue\n        elif len(dic[key]) == 1:\n            ans[key - 1] = 1\n            continue\n        count = 1\n        for i in range(1, len(dic[key])):\n            if (dic[key][i] - dic[key][i - 1]) % 2 != 0:\n                count += 1\n        ans[key - 1] = count\n    return ' '.join(map(str, ans))\nx = int(input())\nfor _ in range(x):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(sol(arr))", "t = int(input())\nfor jj in range(t):\n    n = int(input())\n    p = [int(i) for i in input().split(' ')]\n    dic = {}\n    for (i, v) in enumerate(p):\n        if v not in dic:\n            dic[v] = [i]\n        else:\n            dic[v].append(i)\n    ans = []\n\n    def cal(a):\n        if len(a) == 1:\n            return 1\n        res = 1\n        tag = a[0] % 2\n        for i in range(1, len(a)):\n            if a[i] % 2 != tag:\n                tag = (tag + 1) % 2\n                res += 1\n        return res\n    for i in range(1, n + 1):\n        if i not in dic:\n            ans.append(0)\n        else:\n            ans.append(cal(dic[i]))\n    k = [str(i) for i in ans]\n    print(' '.join(k))", "for _ in range(int(input())):\n    n = int(input())\n    c = [int(x) - 1 for x in input().split()]\n    towers = [[0, 0] for _ in c]\n    for i in range(n - 1, -1, -1):\n        parity = i % 2\n        towers[c[i]][parity] = 1 + towers[c[i]][int(not parity)]\n    print(' '.join([str(max(x)) for x in towers]))", "import sys, math\n\ndef get_line_ints(stream):\n    return [int(x) for x in next(lines).rstrip().split(' ')]\nlines = sys.stdin\nn_cases = get_line_ints(lines)[0]\nfor case_ndx in range(n_cases):\n    n = get_line_ints(lines)[0]\n    col_ints = get_line_ints(lines)\n    max_towers = []\n    col_indices_list = []\n    for _ in range(n):\n        col_indices_list.append([])\n    for (i, col) in enumerate(col_ints):\n        col_indices_list[col - 1].append(i % 2)\n    for col_ndx in range(n):\n        col_indices = col_indices_list[col_ndx]\n        if len(col_indices) == 0:\n            max_towers.append(0)\n            continue\n        tower_count = 1\n        parity = col_indices[0]\n        for current_parity in col_indices[1:]:\n            if current_parity != parity:\n                parity = current_parity\n                tower_count += 1\n        max_towers.append(tower_count)\n    print(' '.join([str(x) for x in max_towers]))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = [int(x) for x in input().split()]\n    C = set(c)\n    sol = [0 for _ in range(n)]\n    runs = dict()\n    for (i, x) in enumerate(c):\n        if x not in runs:\n            runs[x] = [1, i]\n        else:\n            (a, b) = runs[x]\n            if (i - b) % 2:\n                runs[x] = [a + 1, i]\n    for i in range(n):\n        if i + 1 in C:\n            sol[i] = runs[i + 1][0]\n    print(' '.join((str(x) for x in sol)))", "for _ in range(int(input())):\n    n = int(input())\n    last = [None] * n\n    count = [0] * n\n    for (i, x) in enumerate(input().split()):\n        x = int(x) - 1\n        if last[x] is None or (last[x] + i) % 2 == 1:\n            last[x] = i\n            count[x] += 1\n    print(*count)", "for qwerty in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = [0] * n + [0]\n    ans = ''\n    for (j, i) in enumerate(l):\n        if l1[i] == 0:\n            l1[i] = [j % 2]\n            continue\n        l1[i] += [j % 2]\n    for i in range(1, n + 1):\n        t = l1[i]\n        if t == 0:\n            ans += '0 '\n        else:\n            ans1 = 1\n            x = t[0]\n            for i in t:\n                if x == 0:\n                    if i == 1:\n                        ans1 += 1\n                        x = 1\n                elif i == 0:\n                    ans1 += 1\n                    x = 0\n            ans += str(ans1) + ' '\n    print(ans)", "test = int(input())\nwhile test:\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = [0] * (n + 1)\n    towers = dict()\n    for (i, j) in enumerate(a):\n        if j in towers:\n            if towers[j] % 2 != i % 2:\n                towers[j] = i % 2\n                ans[j] += 1\n        else:\n            towers[j] = i % 2\n            ans[j] += 1\n    print(*ans[1:])\n    test -= 1", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    c = list(map(int, input().split()))\n    marker = [[] for i in range(n + 1)]\n    for i in range(n):\n        marker[c[i]].append(i)\n    ans = []\n    for i in range(1, n + 1):\n        if len(marker[i]) == 0:\n            ans.append(str(0))\n        else:\n            M = 1\n            for j in range(1, len(marker[i])):\n                if (marker[i][j] - marker[i][j - 1]) % 2 == 1:\n                    M += 1\n            ans.append(str(M))\n    print(' '.join(ans))", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    stack = [0, 0] * n\n    a = [int(x) for x in input().split()]\n    for i in range(0, n):\n        if stack[a[i] + n - 1] == 0 and stack[a[i] - 1] == 0:\n            stack[a[i] + n - 1] = i\n            stack[a[i] - 1] += 1\n        else:\n            x = i - stack[a[i] + n - 1]\n            if x % 2 == 1:\n                stack[a[i] - 1] += 1\n                stack[a[i] + n - 1] = i\n    stack2 = []\n    for i in range(0, n):\n        stack2.append(str(stack[i]))\n    print(' '.join(stack2))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = [0] * (n + 1)\n    ind = [-1] * (n + 1)\n    for i in range(n):\n        if ind[l[i]] == -1 or (i - ind[l[i]]) % 2:\n            ans[l[i]] += 1\n        ind[l[i]] = i\n    print(*ans[1:n + 1])", "from re import A\nfor _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    d = [0] * n\n    e = [-1] * n\n    for i in range(n):\n        if e[c[i] - 1] != -1:\n            if (i - e[c[i] - 1]) % 2 == 1:\n                d[c[i] - 1] += 1\n                e[c[i] - 1] = i\n        else:\n            d[c[i] - 1] = 1\n            e[c[i] - 1] = i\n    print(*d)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [0] * n\n    p = [0] * n\n    for (i, c) in enumerate(a):\n        if ans[c - 1] == 0:\n            ans[c - 1] += 1\n            p[c - 1] = i\n        elif (i - p[c - 1]) % 2 == 1:\n            ans[c - 1] += 1\n            p[c - 1] = i\n    print(*ans)", "t = int(input())\nfor i in range(t):\n    m = int(input())\n    arr = list(map(int, input().strip().split()))[:m]\n    prev = [-1] * (m + 1)\n    brr = [0] * (m + 1)\n    for j in range(m):\n        if prev[arr[j]] == -1:\n            prev[arr[j]] = j + 1\n            brr[arr[j]] = 1\n        elif (j + 1 - prev[arr[j]]) % 2 != 0:\n            brr[arr[j]] += 1\n            prev[arr[j]] = j + 1\n    crr = brr[1:]\n    print(*crr)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr = [j - 1 for j in arr]\n    ans = [0] * n\n    ps = [-1] * n\n    for j in range(n):\n        if ps[arr[j]] == -1:\n            ps[arr[j]] = j\n            ans[arr[j]] = 1\n        elif (j - ps[arr[j]]) % 2:\n            ps[arr[j]] = j\n            ans[arr[j]] += 1\n    print(*ans)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    cnt = [[] for _ in range(n + 1)]\n    for i in range(n):\n        if not cnt[arr[i]]:\n            cnt[arr[i]].append(i)\n        elif (i - cnt[arr[i]][-1]) % 2:\n            cnt[arr[i]].append(i)\n    ans = [0] * (n + 1)\n    for i in range(n + 1):\n        ans[i] = len(cnt[i])\n    return ans[1:]\nfor _ in range(int(input())):\n    print(*solve())", "for _ in range(int(input())):\n    n = int(input())\n    mass = list(map(int, input().split()))\n    f = {}\n    for i in range(n):\n        if mass[i] not in f:\n            f[mass[i]] = []\n        f[mass[i]].append(i)\n    s = ''\n    for i in range(1, n + 1):\n        if i not in f:\n            s += '0 '\n        else:\n            w = f[i]\n            k = 1\n            otv = 1\n            if len(w) > 1:\n                for j in range(1, len(w)):\n                    if (w[j] - w[j - 1] - 1) % 2 == 0:\n                        k += 1\n                    otv = max(otv, k)\n            s += f'{otv} '\n    print(s)", "t = int(input())\nwhile t:\n    n = int(input())\n    s = input().split()\n    c = list(map(int, s))\n    d = {}\n    for i in range(n):\n        d[i + 1] = []\n    for i in range(n):\n        d[c[i]].append(i)\n    ans = []\n    for i in range(1, n + 1):\n        if len(d[i]) == 0:\n            ans.append(0)\n            continue\n        val = 1\n        for j in range(1, len(d[i])):\n            if (d[i][j] - d[i][j - 1]) % 2 != 0:\n                val += 1\n        ans.append(val)\n    print(' '.join(map(str, ans)))\n    t -= 1", "standard_input = '6\\n7\\n1 2 3 1 2 3 1\\n6\\n4 2 2 2 4 4\\n1\\n1\\n5\\n5 4 5 3 5\\n6\\n3 3 3 1 3 3\\n8\\n1 2 3 4 4 3 2 1\\n'\n\ndef trySeq(space):\n    total = 0\n    bestEvenCount = 1\n    bestOddCount = 0\n    for i in range(len(space)):\n        v = space[i]\n        total += v\n        even = total % 2 == 0\n        if even:\n            bestEvenCount = max(bestEvenCount, bestOddCount + 1)\n        else:\n            bestOddCount = max(bestOddCount, bestEvenCount + 1)\n    return max(bestEvenCount, bestOddCount)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    prev = [-1 for _ in range(n)]\n    spacings = [[] for _ in range(n)]\n    for i in range(n):\n        v = a[i] - 1\n        if prev[v] != -1:\n            spacings[v].append(i - prev[v])\n        prev[v] = i\n    arr = []\n    for i in range(n):\n        if prev[i] == -1:\n            arr.append(0)\n        else:\n            arr.append(trySeq(spacings[i]))\n    print(' '.join(map(str, arr)))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = [0] * (n + 1)\n    ind = [-1] * (n + 1)\n    for i in range(n):\n        if ind[l[i]] == -1 or (i - ind[l[i]]) % 2:\n            ans[l[i]] += 1\n        ind[l[i]] = i\n    print(*ans[1:n + 1])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    L = list(map(int, input().split()))\n    M = [0] * n\n    N = [-1] * n\n    for i in range(n):\n        a = L[i]\n        if M[a - 1] == 0:\n            M[a - 1] += 1\n            N[a - 1] = i % 2\n        elif i % 2 == N[a - 1]:\n            pass\n        else:\n            N[a - 1] = i % 2\n            M[a - 1] += 1\n    print(*M)", "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n\n    def solve(self, n, c):\n        ans = ['0'] * (n + 1)\n        ht = defaultdict(list)\n        for (i, color) in enumerate(c):\n            ht[color].append(i)\n        for (color, arr) in ht.items():\n            ans[color] = str(1)\n            (odd, even) = (0, 0)\n            for ind in arr:\n                if ind % 2 == 0:\n                    even = max(odd + 1, even)\n                else:\n                    odd = max(even + 1, odd)\n            ans[color] = str(max(even, odd))\n        return ' '.join(ans[1:])\nobj = Solution()\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    c = list(map(int, input().split()))\n    ans = obj.solve(n, c)\n    print(ans)", "test = int(input())\n\ndef value(array, n):\n    hmap = {}\n    for i in range(n):\n        if array[i] not in hmap:\n            hmap[array[i]] = [i]\n        else:\n            hmap[array[i]].append(i)\n    result = [0 for i in range(n)]\n    for i in range(n):\n        if i + 1 in hmap:\n            indices = hmap[i + 1]\n            oddCount = 0\n            evenCount = 0\n            odd = True\n            even = True\n            for index in indices:\n                if odd and index % 2 == 1:\n                    oddCount += 1\n                    odd = False\n                elif not odd and index % 2 == 0:\n                    oddCount += 1\n                    odd = True\n                if even and index % 2 == 0:\n                    evenCount += 1\n                    even = False\n                elif not even and index % 2 == 1:\n                    evenCount += 1\n                    even = True\n            result[i] = max(evenCount, oddCount)\n    answer = []\n    for num in result:\n        answer.append(str(num))\n        answer.append(' ')\n    return ''.join(answer)\nfor i in range(test):\n    n = int(input())\n    array = list(map(int, input().split()))\n    print(value(array, n))", "for _ in range(int(input())):\n    n = int(input())\n    numbers = list(map(int, input().split()))\n    result = [0] * n\n    r_last_index = [-1] * n\n    for i in range(n):\n        r = numbers[i] - 1\n        if r_last_index[r] == -1 or (i - r_last_index[r]) % 2 == 1:\n            r_last_index[r] = i\n            result[r] += 1\n    print(*result, sep=' ')", "for t in range(int(input())):\n    n = int(input())\n    ar = [*map(int, input().split())]\n    l = [0] * n\n    prev = [0] * n\n    for i in range(1, n + 1):\n        if prev[ar[i - 1] - 1] == 0 or (i - prev[ar[i - 1] - 1]) % 2 != 0:\n            prev[ar[i - 1] - 1] = i\n            l[ar[i - 1] - 1] += 1\n    print(*l)", "for s in [*open(0)][2::2]:\n    a = s.split()\n    r = [[0, 0] for _ in a]\n    i = 0\n    for x in a:\n        x = int(x) - 1\n        r[x][i & 1] = r[x][~i & 1] + 1\n        i += 1\n    print(*map(max, r))", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.insert(0, 0)\n    a = [-1] * (n + 1)\n    res = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if a[arr[i]] == -1:\n            a[arr[i]] = i % 2\n            res[arr[i]] = res[arr[i]] + 1\n        elif a[arr[i]] != i % 2:\n            a[arr[i]] = i % 2\n            res[arr[i]] = res[arr[i]] + 1\n    res.pop(0)\n    print(*res)\n    t = t - 1", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = [0 for i in range(n)]\n    d = {}\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = i\n            ans[arr[i] - 1] += 1\n        else:\n            diff = abs(d[arr[i]] - i) - 1\n            if diff % 2 == 0:\n                ans[arr[i] - 1] += 1\n                d[arr[i]] = i\n    print(*ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        arr[i] = arr[i] - 1\n    sign = [0 for i in range(n)]\n    ind = [0 for i in range(n)]\n    cnt = [0 for i in range(n)]\n    for i in range(n):\n        if sign[arr[i]] == 0:\n            sign[arr[i]] = 1\n            ind[arr[i]] = i\n            cnt[arr[i]] = 1\n        else:\n            if (ind[arr[i]] - i) % 2 == 1:\n                cnt[arr[i]] += 1\n            ind[arr[i]] = i\n    s = ''\n    for i in range(n):\n        s += str(cnt[i]) + ' '\n    print(s)", "T = int(input())\nfor test in range(T):\n    N = int(input())\n    Color = list(map(int, input().split()))\n    Answer = [0] * (N + 1)\n    dict_val = {}\n    for (index, i) in enumerate(Color):\n        if i not in dict_val:\n            Answer[i] += 1\n            dict_val[i] = index\n        elif (index - dict_val[i] - 1) % 2 == 0:\n            Answer[i] += 1\n            dict_val[i] = index\n    for i in range(1, N):\n        print(Answer[i], end=' ')\n    print(Answer[N])", "T = int(input())\nfor test in range(T):\n    N = int(input())\n    Color = list(map(int, input().split()))\n    Answer = [0] * (N + 1)\n    dict_val = {}\n    for (index, i) in enumerate(Color):\n        if i not in dict_val:\n            Answer[i] += 1\n            dict_val[i] = index\n        elif (index - dict_val[i] - 1) % 2 == 0:\n            Answer[i] += 1\n            dict_val[i] = index\n    for i in range(1, N):\n        print(Answer[i], end=' ')\n    print(Answer[N])", "for s in [*open(0)][2::2]:\n    a = s.split()\n    r = [[0, 0] for j in a]\n    i = 0\n    for x in a:\n        x = int(x) - 1\n        r[x][i & 1] = r[x][~i & 1] + 1\n        i += 1\n    print(*map(max, r))", "def miis():\n    return map(int, input().split())\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(miis())\n    ans = [0 for i in range(n + 1)]\n    last = [-1 for i in range(n + 1)]\n    for i in range(n):\n        if ans[a[i]] == 0:\n            ans[a[i]] = 1\n        elif (i - last[a[i]]) % 2 or i - last[a[i]] == 1:\n            ans[a[i]] += 1\n        last[a[i]] = i\n    print(*ans[1:])", "def func():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    a = [0] + arr + [0]\n    mp = {}\n    for i in range(1, n + 1):\n        if a[i] not in mp:\n            mp[a[i]] = [i]\n        else:\n            mp[a[i]].append(i)\n    tmp = [0] * (n + 2)\n    for key in mp:\n        count = 1\n        for i in range(1, len(mp[key])):\n            if mp[key][i] - mp[key][i - 1] - 1 & 1:\n                continue\n            count += 1\n        tmp[key] = count\n    print(*tmp[1:n + 1])\ntc = int(input())\nwhile tc > 0:\n    func()\n    tc -= 1", "for s in [*open(0)][2::2]:\n    a = s.split()\n    r = [[0, 0] for j in a]\n    i = 0\n    for x in a:\n        x = int(x) - 1\n        r[x][i & 1] = r[x][~i & 1] + 1\n        i += 1\n    print(*map(max, r))", "for s in [*open(0)][2::2]:\n    a = s.split()\n    r = [[0, 0] for _ in a]\n    i = 0\n    for x in a:\n        x = int(x) - 1\n        r[x][i & 1] = r[x][~i & 1] + 1\n        i += 1\n    print(*map(max, r))", "for s in [*open(0)][2::2]:\n    a = s.split()\n    r = [[0, 0] for _ in a]\n    i = 0\n    for x in a:\n        x = int(x) - 1\n        r[x][i & 1] = r[x][~i & 1] + 1\n        i += 1\n    print(*map(max, r))", "for t in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    ans = [0] * n\n    d = {}\n    for i in range(0, n):\n        c = s[i]\n        if c in d.keys():\n            if (i - d[c][0][1]) % 2 == 1:\n                d[c][0][0] += 1\n                d[c][0][1] = i\n            elif d[c][1][0] == 0:\n                d[c][1][0] += 1\n                d[c][1][1] = i\n            elif (i - d[c][1][1]) % 2 == 1:\n                d[c][1][0] += 1\n                d[c][1][1] = i\n        else:\n            d[c] = [[1, i], [0, 0]]\n    for i in d.keys():\n        ans[i - 1] = max(d[i][0][0], d[i][1][0])\n    print(' '.join(map(str, ans)))", "for _ in range(int(input())):\n    n = int(input())\n    seq = list(map(int, input().split()))\n    res = [0 for _ in range(n)]\n    last = {}\n    for i in range(n):\n        if seq[i] not in last:\n            res[seq[i] - 1] = 1\n        res[seq[i] - 1] += (i - last.get(seq[i], i)) % 2\n        last[seq[i]] = i\n    print(*res)", "for s in [*open(0)][2::2]:\n    a = s.split()\n    r = [[0, 0] for _ in a]\n    i = 0\n    for x in a:\n        x = int(x) - 1\n        r[x][i & 1] = r[x][~i & 1] + 1\n        i += 1\n    print(*map(max, r))", "for s in [*open(0)][2::2]:\n    a = s.split()\n    r = [[0, 0] for _ in a]\n    i = 0\n    for x in a:\n        x = int(x) - 1\n        r[x][i & 1] = r[x][~i & 1] + 1\n        i += 1\n    print(*map(max, r))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    dic = {}\n    ans = [0] * (n + 1)\n    for i in range(len(lst)):\n        if lst[i] in dic:\n            if i % 2 != dic[lst[i]]:\n                ans[lst[i]] += 1\n                dic[lst[i]] = i % 2\n        else:\n            dic[lst[i]] = i % 2\n            ans[lst[i]] = 1\n    for i in ans[1:]:\n        print(i, end=' ')\n    print()", "for s in [*open(0)][2::2]:\n    ajo = s.split()\n    min = [[0, 0] for _ in ajo]\n    i = 0\n    for jx in ajo:\n        jx = int(jx) - 1\n        min[jx][i & 1] = min[jx][~i & 1] + 1\n        i += 1\n    print(*map(max, min))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    nums = [int(temp) for temp in input().split()]\n    first = [-1] * (n + 1)\n    odds = [0] * (n + 1)\n    for i in range(n):\n        x = nums[i]\n        if first[x] == -1:\n            odds[x] += 1\n            first[x] = i\n        elif (i - first[x] - 1) % 2 == 0:\n            odds[x] += 1\n            first[x] = i\n    for i in range(1, n + 1):\n        print(odds[i], end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    d = {}\n    for (i, ci) in enumerate((*map(int, input().split()),)):\n        if ci not in d:\n            d[ci] = [i]\n        elif i & 1 != d[ci][-1] & 1:\n            d[ci].append(i)\n    print(*(len(d.get(ci, [])) for ci in range(1, n + 1)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if d.get(c[i], None) is None:\n            d[c[i]] = [1, i % 2]\n        elif d[c[i]][1] != i % 2:\n            d[c[i]][0] += 1\n            d[c[i]][1] ^= 1\n    print(*(d.get(i, [0])[0] for i in range(1, n + 1)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if d.get(c[i], None) is None:\n            d[c[i]] = [1, i % 2]\n        elif d[c[i]][1] != i % 2:\n            d[c[i]][0] += 1\n            d[c[i]][1] ^= 1\n    print(*(d.get(i, [0])[0] for i in range(1, n + 1)))", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = [[] for o in range(n)]\n    for r in range(n):\n        d[a[r] - 1] += [r]\n    ans = [0] * n\n    for i in range(n):\n        if len(d[i]) != 0:\n            ans[i] = 1\n        for j in range(1, len(d[i])):\n            if d[i][j] - d[i][j - 1] - 1 & 1 == 0:\n                ans[i] += 1\n    print(' '.join(map(str, ans)))", "import sys\nprintf = sys.stdout.write\n\ndef intput():\n    return int(sys.stdin.readline())\n\ndef get_int():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_lis():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_liss():\n    return sys.stdin.readline().split()\n\ndef get_ints():\n    return sys.stdin.readline().split()\n\ndef get_str():\n    return sys.stdin.readline().strip()\n\ndef pop_zeros(items):\n    while items[-1] == 0:\n        items.pop()\nfrom collections import defaultdict\nimport math\nt = intput()\nwhile t:\n    n = intput()\n    l = get_lis()\n    dic = {}\n    dicc = {}\n    for i in range(n):\n        if l[i] not in dic:\n            dic[l[i]] = [i]\n            dicc[l[i]] = [i]\n        else:\n            dicc[l[i]].append(i)\n            dic[l[i]].append(i - dicc[l[i]][-2])\n    lans = [0] * n\n    for ele in dic.keys():\n        if len(dic[ele]) >= 1:\n            ans = 1\n            for i in range(1, len(dic[ele])):\n                if dic[ele][i] % 2 != 0:\n                    ans += 1\n            lans[ele - 1] = ans\n    printf(' '.join((str(x) for x in lans)))\n    printf('\\n')\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [0] * n\n    p = [0] * n\n    for (i, c) in enumerate(a):\n        if ans[c - 1] == 0:\n            ans[c - 1] += 1\n            p[c - 1] = i\n        elif (i - p[c - 1]) % 2 == 1:\n            ans[c - 1] += 1\n            p[c - 1] = i\n    print(*ans)", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    arr = input().split()\n    arr = list(map(int, arr))\n    (x, y) = (0, 0)\n    ans = [0] * n\n    ind = [-1] * n\n    p = arr[0] - 1\n    ans[p] = 1\n    ind[p] = 0\n    for i in range(1, n):\n        p = arr[i] - 1\n        if ind[p] == -1:\n            ans[p] = 1\n            ind[p] = i\n        elif i - ind[p] == 1 or (i - ind[p]) % 2 != 0:\n            ans[p] += 1\n        ind[p] = i\n    for i in ans:\n        print(i, end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    size = [0] * n\n    mydict = {}\n    for i in range(n):\n        if a[i] not in mydict:\n            size[a[i] - 1] += 1\n            mydict[a[i]] = i\n        elif (i - mydict[a[i]] + 1) % 2 == 0:\n            size[a[i] - 1] += 1\n            mydict[a[i]] = i\n    for s in size:\n        print(s, end=' ')\n    print()", "for s in [*open(0)][2::2]:\n    a = s.split()\n    r = [[0, 0] for _ in a]\n    i = 0\n    for x in a:\n        x = int(x) - 1\n        r[x][i & 1] = r[x][~i & 1] + 1\n        i += 1\n    print(*map(max, r))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = []\n    mod = []\n    for i in range(n):\n        ans.append(0)\n        mod.append(-1)\n    for i in range(n):\n        ans[l[i] - 1] = 1\n    for i in range(n):\n        if mod[l[i] - 1] == -1:\n            mod[l[i] - 1] = i % 2\n        elif mod[l[i] - 1] != i % 2:\n            ans[l[i] - 1] += 1\n            mod[l[i] - 1] = i % 2\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    ans = [[0, '0'] for _ in range(n)]\n    for (index, value) in enumerate(map(int, input().split())):\n        a = index % 2\n        if a != ans[value - 1][1]:\n            ans[value - 1][0] += 1\n            ans[value - 1][1] = a\n    print(*map(lambda x: x[0], ans))", "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    saveIdx = defaultdict(list)\n    n = int(input())\n    order = list(map(int, input().split()))\n    answer = [0] * (n + 1)\n    for i in range(n):\n        if order[i] in saveIdx:\n            if (i + 1 - saveIdx[order[i]][0]) % 2 == 1:\n                saveIdx[order[i]][0] = i + 1\n                saveIdx[order[i]][1] += 1\n        else:\n            saveIdx[order[i]] = [i + 1, 1]\n    for key in saveIdx.keys():\n        answer[key] = saveIdx[key][1]\n    for j in range(1, len(answer)):\n        print(answer[j], end=' ')\n    print()", "def solve():\n    n = int(input())\n    lst = list(map(int, input().split(' ')))\n    dct = {}\n    ans = [0] * n\n    for i in range(n):\n        if lst[i] in dct:\n            dct[lst[i]].append(i)\n        else:\n            dct[lst[i]] = [i]\n    for i in dct:\n        cnt = 1\n        for j in range(len(dct[i]) - 1):\n            if (dct[i][j + 1] - dct[i][j]) % 2:\n                cnt += 1\n        ans[i - 1] = cnt\n    for i in ans:\n        print(i, end=' ')\n    print()\nt = int(input())\nwhile t:\n    t -= 1\n    solve()", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    list1 = [int(num) for num in input().split()]\n    list2 = [0 for i in range(0, n)]\n    list2[list1[0] - 1] += 1\n    last_ind = [0 for i in range(0, n)]\n    for i in range(1, n):\n        if list2[list1[i] - 1] == 0:\n            list2[list1[i] - 1] += 1\n            last_ind[list1[i] - 1] = i\n        elif list1[i] == list1[i - 1]:\n            list2[list1[i] - 1] += 1\n            last_ind[list1[i] - 1] = i\n        else:\n            diff = i - last_ind[list1[i] - 1]\n            if i - 2 < 0:\n                list2[list1[i] - 1] += 1\n                last_ind[list1[i] - 1] = i\n            elif diff % 2 == 1:\n                list2[list1[i] - 1] += 1\n                last_ind[list1[i] - 1] = i\n    print(*list2)", "import sys\ninp = sys.stdin.readline\nfor _ in range(int(inp())):\n    n = int(inp())\n    c = list(map(int, inp().split()))\n    res = {}\n    for i in range(n):\n        try:\n            res[c[i]]\n            if (i - res[c[i]][0] - 1) % 2 == 0:\n                res[c[i]][1] += 1\n            res[c[i]][0] = i\n        except Exception:\n            res[c[i]] = [i, 1]\n    for i in range(1, n + 1):\n        if i in res:\n            print(res[i][1], end=' ')\n        else:\n            print(0, end=' ')\n    print()", "for s in [*open(0)][2::2]:\n    a = s.split()\n    r = [[0, 0] for _ in a]\n    i = 0\n    for x in a:\n        x = int(x) - 1\n        r[x][i & 1] = r[x][~i & 1] + 1\n        i += 1\n    print(*map(max, r))", "for sasuke in [*open(0)][2::2]:\n    asta = sasuke.split()\n    rimuru = [[0, 0] for jiraya in asta]\n    itadori = 0\n    for xeno in asta:\n        xeno = int(xeno) - 1\n        rimuru[xeno][itadori & 1] = rimuru[xeno][~itadori & 1] + 1\n        itadori += 1\n    print(*map(max, rimuru))", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    maxi = [0] * (n + 1)\n    if 3434 == 'dfdjfhgrh':\n        print('Tanmay')\n    prev = [0] * (n + 1)\n    c = [0] * (n + 1)\n    for i in range(1, n + 1):\n        x = a[i - 1]\n        if prev[x] == 0:\n            c[x] += 1\n            maxi[x] += 1\n            prev[x] = i\n            continue\n        if (i - prev[x]) % 2 == 1:\n            c[x] += 1\n            maxi[x] = max(c[x], maxi[x])\n            prev[x] = i\n    for i in maxi[1:]:\n        print(i, end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    res = [0 for _ in range(n)]\n    info = {}\n    for i in range(n):\n        if c[i] not in info:\n            res[c[i] - 1] = 1\n        res[c[i] - 1] += (i - info.get(c[i], i)) % 2\n        info[c[i]] = i\n    print(*res)", "def main():\n    for t in range(int(input())):\n        n = int(input())\n        c = [0] + list(map(int, input().split()))\n        ans = [[] for i in range(n + 1)]\n        pre = [0 for i in range(n + 1)]\n        for i in range(1, n + 1):\n            if pre[c[i]] == 0:\n                ans[c[i]].append(1)\n                pre[c[i]] = i\n            elif (i - pre[c[i]] - 1) % 2 == 0:\n                ans[c[i]][-1] += 1\n                pre[c[i]] = i\n        for i in range(1, n + 1):\n            if len(ans[i]) == 0:\n                print(0, end=' ')\n            else:\n                print(max(ans[i]), end=' ')\n        print()\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    res = [0] * n\n    for i in range(n):\n        arr[i] -= 1\n        if res[arr[i]] == 0:\n            res[arr[i]] = 1\n    seen = {}\n    for i in range(n):\n        color = arr[i]\n        if color not in seen:\n            seen[color] = i\n        else:\n            if (i - seen[color]) % 2 == 1:\n                res[color] += 1\n            seen[color] = i\n    for val in res:\n        print(val, end=' ')\n    print()", "for s in [*open(0)][2::2]:\n    a = s.split()\n    r = [[] for _ in a]\n    i = 0\n    for x in a:\n        l = r[int(x) - 1]\n        l += ([], [i])[l == [] or i - l[-1] & 1]\n        i += 1\n    print(*map(len, r))", "cases = int(input())\nfor _ in range(cases):\n    n = int(input())\n    last_index = [None] * (n + 1)\n    height = [0] * (n + 1)\n    colors = list(map(lambda x: int(x), input().split(' ')))\n    for i in range(len(colors)):\n        if last_index[colors[i]] == None:\n            last_index[colors[i]] = i\n            height[colors[i]] += 1\n        elif (i - last_index[colors[i]] - 1) % 2 == 0:\n            last_index[colors[i]] = i\n            height[colors[i]] += 1\n    for i in range(1, n + 1):\n        print(height[i], end=' ')\n    print()", "T = int(input())\nwhile T:\n    n = int(input())\n    l = list(map(int, input().split()))\n    info = {}\n    for i in range(n):\n        if l[i] not in info:\n            info[l[i]] = [i, 1]\n        elif (i - info[l[i]][0] - 1) % 2 == 0:\n            t = info[l[i]][1] + 1\n            info[l[i]] = [i, t]\n        else:\n            info[l[i]][0] = i\n    for j in range(1, n + 1):\n        if j not in info:\n            print(0, end=' ')\n        else:\n            print(info[j][1], end=' ')\n    print()\n    T -= 1", "for t in range(int(input())):\n    n = int(input())\n    steps = list(map(lambda x: [0, 0], range(n)))\n    for (idx, c) in enumerate(map(int, input().split(' '))):\n        steps[c - 1][idx % 2] = steps[c - 1][(idx + 1) % 2] + 1\n    print(*list(map(max, steps)))", "testcase = int(input())\nfor _ in range(testcase):\n    n = int(input())\n    arr = [int(num) for num in input().split()]\n    stackes = [[] for _ in range(n)]\n    for (ind, num) in enumerate(arr):\n        stackes[num - 1].append(ind)\n    ans = []\n    for ArrStack in stackes:\n        if not ArrStack:\n            ans.append(0)\n            continue\n        t = [ArrStack[0] % 2]\n        for num in ArrStack[1:]:\n            if num % 2 == t[-1]:\n                continue\n            t.append(num % 2)\n        ans.append(len(t))\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    l = [[0, 0] for i in range(n + 1)]\n    for (i, x) in enumerate(a):\n        if l[x][0] == 0 or (i - l[x][1]) % 2:\n            l[x][0] += 1\n            l[x][1] = i\n    print(*[x[0] for x in l[1:]])", "for t in range(int(input())):\n    n = int(input())\n    steps = list(map(lambda x: [0, 0], range(n)))\n    for (idx, c) in enumerate(map(int, input().split(' '))):\n        steps[c - 1][idx % 2] = steps[c - 1][(idx + 1) % 2] + 1\n    print(*list(map(max, steps)))", "t = int(input())\nwhile t:\n    p = int(input())\n    g = [[] for i in range(p + 1)]\n    s = list(map(int, input().split()))\n    for i in range(p):\n        g[s[i]].append(i)\n    l = [0] * p\n    for i in range(1, p + 1):\n        if len(g[i]) >= 1:\n            check = 1\n            for k in range(1, len(g[i])):\n                if (g[i][k] - g[i][k - 1]) % 2 == 1:\n                    check += 1\n            l[i - 1] = check\n    print(*l)\n    t -= 1", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    colors = list(map(int, input().split()))\n    last_index = dict()\n    ans_val = defaultdict(int)\n    for (i, c) in enumerate(colors):\n        if c not in last_index:\n            last_index[c] = i\n            ans_val[c] = 1\n        elif (i - last_index[c]) % 2 == 1:\n            last_index[c] = i\n            ans_val[c] += 1\n    for i in range(1, n + 1):\n        print(ans_val[i], end='' if i == n else ' ')\n    print()", "for t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d1 = {}\n    for i in range(n):\n        if l[i] in d1:\n            d1[l[i]].append(i)\n        else:\n            d1[l[i]] = [i]\n    for i in range(1, n + 1):\n        if i in d1:\n            c = 1\n            if len(d1[i]) == 1:\n                l[i - 1] = c\n            else:\n                for j in range(1, len(d1[i])):\n                    if (d1[i][j] - d1[i][j - 1]) % 2 == 1:\n                        c += 1\n                l[i - 1] = c\n        else:\n            l[i - 1] = 0\n    print(*l)", "from collections import *\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = defaultdict(list)\n    for i in range(n):\n        if not d[a[i]]:\n            d[a[i]].append(i)\n        elif (i - d[a[i]][-1] - 1) % 2 == 0:\n            d[a[i]].append(i)\n    ans = []\n    for i in range(1, n + 1):\n        ans.append(len(d[i]))\n    print(*ans)", "for _ in [0] * int(input()):\n    n = int(input())\n    (*c,) = map(int, input().split())\n    b = [[0, -1] for i in range(n + 1)]\n    for i in range(n):\n        if (i - b[c[i]][1]) % 2 or b[c[i]][1] == -1:\n            b[c[i]][0] += 1\n        b[c[i]][1] = i\n    for i in range(n):\n        print(b[i + 1][0], end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    d = {}\n    cnt = {}\n    for i in range(n):\n        if c[i] in d:\n            x = i - d[c[i]]\n            if x % 2 == 1:\n                if c[i] in cnt:\n                    cnt[c[i]] += 1\n                else:\n                    cnt[c[i]] = 2\n        d[c[i]] = i\n    for k in range(1, n + 1):\n        if k in cnt:\n            print(cnt[k], end=' ')\n        elif k in d:\n            print(1, end=' ')\n        else:\n            print(0, end=' ')\n    print()"]