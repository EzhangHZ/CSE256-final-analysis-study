["import math\n\ndef nChooseK(n, k):\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\nsoln = {2: [1, 0, 1]}\nfor n in range(4, 62, 2):\n    a = int(nChooseK(n, n // 2)) // 2 % 998244353\n    b = int(nChooseK(n - 2, n // 2 - 2)) % 998244353\n    a += soln[n - 2][1]\n    b += soln[n - 2][0]\n    a = a % 998244353\n    b = b % 998244353\n    soln[n] = [a, b, 1]\nimport sys\narr = []\nfor line in sys.stdin:\n    arr.append(int(line))\ntc = arr[0]\nfor n in arr[1:]:\n    print(*soln[n])", "import sys\nsys.setrecursionlimit(1000000)\n\ndef mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\n\ndef ncr(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\nfrom math import comb\nans = [(1, 0, 1), (3, 2, 1), (12, 7, 1), (42, 27, 1)]\np = 998244353\nfor i in range(10, 61, 2):\n    curr = list(ans[-1])\n    new = ((ncr(i - 1, i // 2, p) + curr[1]) % p, (ncr(i, i // 2, p) - (ncr(i - 1, i // 2, p) + curr[1]) - 1) % p, 1)\n    ans.append(new)\nfor T in range(int(input())):\n    n = ni()\n    print(*ans[n // 2 - 1])", "from math import comb\nfrom functools import lru_cache\nt = int(input())\n\n@lru_cache\ndef res(n):\n    if n == 2:\n        return [1, 0]\n    else:\n        result = [comb(n - 1, n // 2) + res(n - 2)[1], comb(n - 2, n // 2) + res(n - 2)[0]]\n        return result\nfor i in range(t):\n    n = int(input())\n    print(str(res(n)[0] % 998244353) + ' ' + str(res(n)[1] % 998244353) + ' ' + '1')", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "t = int(input())\ndp = [[0, 1], [0, 0]]\n\ndef ncr(n, r):\n    ans = 1\n    for j in range(1, n + 1):\n        ans *= j\n    for j in range(1, r + 1):\n        ans //= j\n    for j in range(1, n - r + 1):\n        ans //= j\n    return ans\nfor i in range(2, 31):\n    dp[0].append(int(dp[1][i - 1] + ncr(2 * i - 1, i)) % 998244353)\n    dp[1].append(int(dp[0][i - 1] + ncr(2 * i - 2, i)) % 998244353)\nwhile t > 0:\n    t -= 1\n    nn = int(input())\n    print(int(dp[0][nn // 2]), int(dp[1][nn // 2]), '1')", "def f(n):\n    res = 1\n    for i in range(2, n + 1):\n        res *= i\n    return res\n\ndef c(n, k):\n    return f(n) // f(k) // f(n - k)\nl = [0] * 61\nfor i in range(61):\n    l[i] = [0] * 3\n(l[2][0], l[2][1], l[2][2]) = (1, 0, 1)\nfor i in range(4, 61, 2):\n    l[i][0] = c(i - 1, i // 2 - 1) + l[i - 2][1]\n    l[i][1] = c(i, i // 2) - l[i][0] - 1\n    l[i][2] = 1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(l[n][0] % 998244353, l[n][1] % 998244353, l[n][2] % 998244353)", "import sys\ninput = sys.stdin.readline\nimport math\nMOD = 998244353\ndp = [[0, 0, 0] for _ in range(61)]\ndp[2][0] = 1\ndp[2][1] = 0\ndp[2][2] = 1\nfor i in range(4, 61, 2):\n    dp[i][2] = 1\n    dp[i][0] = (math.comb(i, i // 2) // 2 + dp[i - 2][1]) % MOD\n    dp[i][1] = (math.comb(i, i // 2) - dp[i][0] - dp[i][1] - 1) % MOD\nfor _ in range(int(input())):\n    n = int(input())\n    print(dp[n][0], dp[n][1], dp[n][2])", "import math\nmod = 998244353\nfor _ in range(int(input())):\n    T = int(input())\n    r = 0\n    (t, u) = (T - 2, T // 2)\n    while t > 0:\n        r += math.comb(t, u)\n        r %= mod\n        t -= 4\n        u -= 2\n    (t, u) = (T - 3, T // 2 - 1)\n    while t > 0:\n        r += math.comb(t, u)\n        r %= mod\n        t -= 4\n        u -= 2\n    tot = math.comb(T, T // 2) % mod\n    print((tot - 1 - r + mod) % mod, r, 1)", "MAX_N = 60\nMOD = 998244353\nf = [0] * (MAX_N + 1)\nf[0] = 1\nfor i in range(1, MAX_N + 1):\n    f[i] = f[i - 1] * i % MOD\ninv_f = [0] * (MAX_N + 1)\ninv_f[MAX_N] = pow(f[MAX_N], MOD - 2, MOD)\nfor i in range(MAX_N, 0, -1):\n    inv_f[i - 1] = inv_f[i] * i % MOD\n\ndef comb(a, b):\n    if a < b:\n        return 0\n    return f[a] * inv_f[a - b] * inv_f[b] % MOD\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = n // 2\n    w = 0\n    for i in range(k, 0, -1):\n        w = (w + comb(2 * i - 1 - (k - i) % 2, i)) % MOD\n    print(w, (comb(2 * k, k) - w - 1) % MOD, 1)", "from math import factorial as f\na = [1]\nb = [0]\nfor i in range(30):\n    a.append(f(2 * (i + 2) - 1) // (f(i + 2) * f(i + 1)) + b[-1])\n    b.append(f(2 * (i + 2)) // f(i + 2) ** 2 - 1 - a[-1])\nfor z in range(int(input())):\n    n = int(input())\n    print(a[n // 2 - 1] % 998244353, b[n // 2 - 1] % 998244353, 1)", "from math import comb\n\ndef foo(N):\n    modulo = 998244353\n    d = {2: (1, 0, 1)}\n    for n in range(4, N + 1, 2):\n        (plose, pwin, pdraw) = d[n - 2]\n        k = n // 2\n        win = (comb(n - 1, k - 1) + pwin) % modulo\n        lose = (comb(n - 2, k) + plose) % modulo\n        draw = pdraw\n        d[n] = (win, lose, draw)\n    return d\nt = int(input())\nns = []\nfor _ in range(t):\n    n = int(input())\n    ns.append(n)\nnmax = max(ns)\nd = foo(nmax)\nfor n in ns:\n    (win, lose, draw) = d[n]\n    print(win, lose, draw)", "T = int(input())\nP = 998244353\n\ndef fac(n):\n    res = 1\n    for i in range(1, n + 1):\n        res *= i\n        res %= P\n    return res\n\ndef invmod(n):\n    return pow(n, P - 2, P)\n\ndef nCr(n, r):\n    return fac(n) * invmod(fac(r)) * invmod(fac(n - r)) % P\ndp = [0] * 62\ndp[2] = (1, 0)\nfor i in range(4, 60 + 1, 2):\n    A = (nCr(i - 1, i // 2 - 1) + dp[i - 2][1]) % P\n    total = nCr(i, i // 2)\n    B = (total - 1 - A + P) % P\n    dp[i] = (A, B)\n\ndef solve():\n    N = int(input())\n    print(dp[N][0], dp[N][1], 1, sep=' ')\nfor _ in range(T):\n    solve()", "a = [0, 0, 1]\nb = [0, 0, 0]\nn: int\nm: int\n\ndef C(n, m):\n    if m < n - m:\n        m = n - m\n    ans = 1\n    for i in range(m + 1, n + 1):\n        ans *= i\n    for i in range(1, n - m + 1):\n        ans //= i\n    return ans\nfor i in range(1, 60):\n    a += [0]\n    b += [0]\ni: int\nfor i in range(4, 61, 2):\n    a[i] = C(i - 1, i // 2 - 1) + b[i - 2]\n    b[i] = C(i, i // 2) - a[i] - 1\nt = int(input())\nfor exi in range(0, t):\n    x = int(input())\n    print(a[x] % 998244353, b[x] % 998244353, 1)", "from math import comb\nfor t in range(int(input())):\n    d = 998244353\n    n = int(input())\n    w = [1]\n    l = [0]\n    for i in range(2, n + 1, 2):\n        w.append(comb(i, i // 2) // 2 + l[-1])\n        l.append(comb(i, i // 2) - w[-1] - 1)\n    print(w[-1] % d, l[-1] % d, 1)", "a = [(1, 0, 1), (3, 2, 1), (12, 7, 1), (42, 27, 1), (153, 98, 1), (560, 363, 1), (2079, 1352, 1), (7787, 5082, 1), (29392, 19227, 1), (111605, 73150, 1), (425866, 279565, 1), (1631643, 1072512, 1), (6272812, 4127787, 1), (24186087, 15930512, 1), (93489272, 61628247, 1), (362168442, 238911947, 1), (407470704, 927891162, 1), (474237047, 614943428, 1), (319176974, 87534470, 1), (131938523, 955113935, 1), (558075845, 644336680, 1), (544270478, 253841470, 1), (209493498, 700054910, 1), (859106804, 457241336, 1), (921005664, 6522991, 1), (366933608, 353887625, 1), (142064435, 432533537, 1), (741221694, 874398972, 1), (297907370, 545598131, 1), (341102826, 248150916, 1)]\nt = int(input())\nfor _ in range(t):\n    n = int(input()) // 2 - 1\n    print(' '.join((str(x) for x in a[n])))", "import math\nimport sys\ninput = sys.stdin.readline\nt = int(input())\nmodulo = 998244353\nwin = [0] * 61\nloose = [0] * 61\nwin[2] = 1\nloose[2] = 0\nfor i in range(4, 61, 2):\n    total = math.comb(i, i // 2)\n    win[i] = math.comb(i - 1, i // 2) + loose[i - 2]\n    loose[i] = total - win[i] - 1\nfor _ in range(t):\n    n = int(input())\n    print(win[n] % modulo, loose[n] % modulo, 1)", "def fact(n):\n    res = 1\n    for i in range(1, int(n) + 1):\n        res = res * i\n    return res\nt = int(input())\nresa = []\nresb = []\nfor i in range(2, 62, 2):\n    if i == 2:\n        resa.append(1)\n        resb.append(0)\n        continue\n    total = int(fact(i) / (fact(i / 2) * fact(i / 2)))\n    resa.append((int(total / 2) + resb[-1]) % 998244353)\n    resb.append((total - (int(total / 2) + resb[-1] + 1)) % 998244353)\nfor i in range(t):\n    n = int(input())\n    print(resa[int(n / 2) - 1], resb[int(n / 2) - 1], 1)", "from math import factorial\n\ndef CmbinationNumber(n, m):\n    if m <= n:\n        a = factorial(n) // (factorial(n - m) * factorial(m))\n    return a\na = [0] * 100\na[1] = 1\na[2] = 3\nc = [0] * 100\nfor i in range(3, 31):\n    a[i] = CmbinationNumber(2 * i - 1, i - 1) + CmbinationNumber(2 * i - 4, i - 3) + a[i - 2]\nfor i in range(1, 61):\n    c[i] = CmbinationNumber(2 * i, i)\nt = int(input())\nwhile t > 0:\n    k = int(input())\n    k = k // 2\n    print('%d %d %d' % (a[k] % 998244353, (c[k] - a[k] - 1) % 998244353, 1))\n    t -= 1", "mod = 998244353\na = [0] * 200\nb = [0] * 200\nfac = [0] * 200\nfac[1] = 1\nfor i in range(2, 160):\n    fac[i] = i * fac[i - 1]\na[1] = 1\nb[1] = 0\na[2] = 3\nb[2] = 2\nfor i in range(3, 70):\n    a[i] = fac[2 * i - 1] // (fac[i] * fac[i - 1]) + b[i - 1]\n    b[i] = fac[2 * i] // (fac[i] * fac[i]) - a[i] - 1\nfor _ in range(int(input())):\n    n = int(input())\n    n //= 2\n    print(int(a[n] % mod), int(b[n] % mod), 1)", "from math import comb\nres = [(0, 0), (1, 0)]\nmod = 998244353\nfor k in range(2, 31):\n    a = comb(2 * k - 1, k - 1)\n    a += res[k - 1][1]\n    b = comb(2 * k, k) - 1 - a\n    res.append((a, b))\nt = int(input())\nfor i in range(t):\n    n = int(input()) // 2\n    print(res[n][0] % mod, res[n][1] % mod, 1)", "ans = [[1, 0, 1], [3, 2, 1], [12, 7, 1], [42, 27, 1], [153, 98, 1], [560, 363, 1], [2079, 1352, 1], [7787, 5082, 1], [29392, 19227, 1], [111605, 73150, 1], [425866, 279565, 1], [1631643, 1072512, 1], [6272812, 4127787, 1], [24186087, 15930512, 1], [93489272, 61628247, 1], [362168442, 238911947, 1], [407470704, 927891162, 1], [474237047, 614943428, 1], [319176974, 87534470, 1], [131938523, 955113935, 1], [558075845, 644336680, 1], [544270478, 253841470, 1], [209493498, 700054910, 1], [859106804, 457241336, 1], [921005664, 6522991, 1], [366933608, 353887625, 1], [142064435, 432533537, 1], [741221694, 874398972, 1], [297907370, 545598131, 1], [341102826, 248150916, 1]]\nfor _ in range(int(input())):\n    n = int(input()) // 2 - 1\n    if n >= 0:\n        print(*ans[n], sep=' ')", "k = [1, 3, 12, 42, 153, 560, 2079, 7787, 29392, 111605, 425866, 1631643, 6272812, 24186087, 93489272, 362168442, 407470704, 474237047, 319176974, 131938523, 558075845, 544270478, 209493498, 859106804, 921005664, 366933608, 142064435, 741221694, 297907370, 341102826]\ndp = [0, 2, 7, 27, 98, 363, 1352, 5082, 19227, 73150, 279565, 1072512, 4127787, 15930512, 61628247, 238911947, 927891162, 614943428, 87534470, 955113935, 644336680, 253841470, 700054910, 457241336, 6522991, 353887625, 432533537, 874398972, 545598131, 248150916]\nt = eval(input())\nfor i in range(t):\n    n = eval(input())\n    n //= 2\n    n -= 1\n    print(k[n], end=' ')\n    print(dp[n], end=' ')\n    print(1)", "from math import comb\nmod = 998244353\ndp = [[0, 0, 0] for _ in range(31)]\nfor i in range(1, 31):\n    dp[i][0] = comb(2 * i, i) // 2 + dp[i - 1][1]\n    dp[i][2] = 1\n    dp[i][1] = comb(2 * i, i) - dp[i][0] - dp[i][2]\nfor i in range(int(input())):\n    n = int(input())\n    print(dp[n // 2][0] % mod, dp[n // 2][1] % mod, dp[n // 2][2] % mod)", "def factoriel(n):\n    if n == 1:\n        return 1\n    return n * factoriel(n - 1)\nalex = []\nboris = []\nalex += [1]\nboris += [0]\nfor i in range(1, 30):\n    a = factoriel(2 * i + 1) * (i + 1)\n    b = factoriel(i + 1) ** 2\n    c = int(a / b)\n    alex += [c + boris[i - 1]]\n    boris += [int(factoriel((i + 1) * 2) / factoriel(i + 1) ** 2) - 1 - alex[i]]\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    print(alex[int(n / 2 - 1)] % 998244353, (int(factoriel(n) / factoriel(int(n / 2)) ** 2) - 1 - alex[int(n / 2 - 1)]) % 998244353, '1')", "def factoriel(n):\n    if n == 1:\n        return 1\n    return n * factoriel(n - 1)\nalex = []\nboris = []\nalex += [1]\nboris += [0]\nfor i in range(1, 30):\n    alex += [int(factoriel(2 * i + 1) * (i + 1) / factoriel(i + 1) ** 2) + boris[i - 1]]\n    boris += [int(factoriel((i + 1) * 2) / factoriel(i + 1) ** 2) - 1 - alex[i]]\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    print(alex[int(n / 2 - 1)] % 998244353, (int(factoriel(n) / factoriel(int(n / 2)) ** 2) - 1 - alex[int(n / 2 - 1)]) % 998244353, '1')", "def f(n, r):\n    up = 1\n    down = 1\n    temp = n - r\n    for i in range(1, n + 1):\n        up = up * i\n    for i in range(1, r + 1):\n        down = down * i\n    for i in range(1, temp + 1):\n        down = down * i\n    if down == 0:\n        return -1\n    else:\n        return int(up / down)\nmod = 998244353\nt = int(input())\na = {}\nb = {}\na[2] = 1\nb[2] = 0\nfor i in range(4, 61, 2):\n    total = f(i, int(i / 2))\n    a[i] = f(i - 1, int(i / 2) - 1) + b[i - 2]\n    b[i] = total - a[i] - 1\nfor i in range(t):\n    n = int(input())\n    print(a[n] % mod, b[n] % mod, 1)", "import math\n\ndef ncr(n, r):\n    n = int(n)\n    r = int(r)\n    return math.factorial(n) // math.factorial(r) // math.factorial(n - r)\nt = int(input())\nfor i in range(t):\n    M = 998244353\n    n = int(input())\n    dp = [0] * 71\n    dp[2] = 1\n    dp[4] = 3\n    for j in range(6, 71, 2):\n        dp[j] = dp[j - 4]\n        dp[j] += ncr(j - 1, j / 2)\n        dp[j] += ncr(j - 4, j / 2 - 1)\n    ans1 = dp[n]\n    ans2 = ncr(n, n / 2) - ans1 - 1\n    ans1 %= M\n    ans2 %= M\n    print(ans1, ans2, 1)", "from math import factorial\n\ndef choose(n, k):\n    return factorial(n) // factorial(k) // factorial(n - k)\n\ndef calc(n):\n    if n == 2:\n        return [1, 0, 1]\n    else:\n        a = calc(n - 2)\n        return [choose(n - 1, n // 2) + a[1], choose(n - 2, n // 2) + a[0], 1]\nt = int(input())\nfor i in range(t):\n    mod = 998244353\n    n = int(input())\n    a = calc(n)\n    a = list(map(lambda x: x % mod, a))\n    print(*a)", "dp1 = []\ndp2 = []\nmod = 998244353\n\ndef ncr(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\nfor i in range(0, 62, 1):\n    dp1.insert(i, 0)\n    dp2.insert(i, 0)\ndp1[2] = 1\nfor i in range(4, 62, 2):\n    toadd = ncr(i - 1, int(i / 2), mod)\n    total = ncr(i, int(i / 2), mod)\n    dp1[i] = ((dp2[i - 2] + mod) % mod + toadd % mod) % mod\n    dp2[i] = total - dp1[i] - 1\nt = int(input())\nwhile t:\n    n = int(input())\n    print(dp1[n], (dp2[n] + mod) % mod, 1, sep=' ', end='\\n')\n    t = t - 1", "import math\nA = [1]\nB = [0]\nfor n in range(4, 62, 2):\n    A.append((B[-1] + math.comb(n - 1, n // 2 - 1)) % 998244353)\n    B.append((math.comb(n, n // 2) - A[-1] - 1) % 998244353)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ind = n // 2 - 1\n    print(str(A[ind]) + ' ' + str(B[ind]) + ' ' + '1')", "from math import comb\n(res, M) = ([[1, 0, 1]], 998244353)\nfor i in range(4, 61, 2):\n    half = comb(i, i >> 1) // 2 % M\n    res += ([(half + res[-1][1]) % M, (half - res[-1][1] - 1) % M, 1],)\nfor _ in range(int(input())):\n    print(*res[int(input()) // 2 - 1])", "from math import comb\nMOD = 998244353\nwins = [0] * 61\nloses = [0] * 61\nfor n in range(2, 61, 2):\n    wins[n] = loses[n - 2] + comb(n - 1, n // 2)\n    loses[n] = wins[n - 2] + comb(n - 2, n // 2)\n    wins[n] %= MOD\n    loses[n] %= MOD\nfor _ in range(int(input())):\n    n = int(input())\n    print(wins[n], loses[n], 1)", "from math import comb\nmod = 998244353\ndp = [[0, 0, 0] for _ in range(31)]\nfor i in range(1, 31):\n    dp[i][0] = comb(2 * i, i) // 2 + dp[i - 1][1]\n    dp[i][2] = 1\n    dp[i][1] = comb(2 * i, i) - dp[i][0] - dp[i][2]\nfor i in range(int(input())):\n    n = int(input())\n    print(dp[n // 2][0] % mod, dp[n // 2][1] % mod, dp[n // 2][2] % mod)", "import sys\nimport math\n\ndef solve(n, m):\n    if n == 2:\n        m[2] = (1, 0, 1)\n        return (1, 0, 1)\n    num_a_wins = 0\n    num_b_wins = 0\n    num_draws = 0\n    num_a_wins += math.comb(n - 1, n // 2 - 1)\n    if n - 2 in m:\n        (b, a, d) = m[n - 2]\n    else:\n        (b, a, d) = solve(n - 2, m)\n    num_a_wins += a\n    num_b_wins += b\n    num_draws += d\n    num_b_wins += math.comb(n - 2, n // 2 - 2)\n    m[n] = (num_a_wins, num_b_wins, num_draws)\n    return (num_a_wins, num_b_wins, num_draws)\nt = int(sys.stdin.readline())\nMOD = 998244353\nm = {}\nfor i in range(t):\n    n = int(sys.stdin.readline())\n    (a, b, d) = solve(n, m)\n    print(a % MOD, b % MOD, d % MOD)", "from math import comb\n(res, M) = ([[1, 0, 1]], 998244353)\nfor i in range(4, 61, 2):\n    half = comb(i, i >> 1) // 2 % M\n    res += ([(half + res[-1][1]) % M, (half - res[-1][1] - 1) % M, 1],)\nfor _ in range(int(input())):\n    print(*res[int(input()) // 2 - 1])", "import math\nA = [1]\nB = [0]\nfor n in range(4, 62, 2):\n    A.append((B[-1] + math.comb(n - 1, n // 2 - 1)) % 998244353)\n    B.append((math.comb(n, n // 2) - A[-1] - 1) % 998244353)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ind = n // 2 - 1\n    print(str(A[ind]) + ' ' + str(B[ind]) + ' ' + '1')", "import math\np = 998244353\na = [1]\nb = [0]\nfor k in range(1, 31):\n    a_k = a[k - 1]\n    b_k = b[k - 1]\n    a_k1 = b_k + math.comb(2 * k + 1, k + 1) % p\n    b_k1 = a_k + math.comb(2 * k, k + 1) % p\n    a.append(a_k1)\n    b.append(b_k1)\nfor i in range(int(input())):\n    n = int(input())\n    print(a[n // 2 - 1] % p, b[n // 2 - 1] % p, 1)", "card_game = {2: '1 0 1', 4: '3 2 1', 6: '12 7 1', 8: '42 27 1', 10: '153 98 1', 12: '560 363 1', 14: '2079 1352 1', 16: '7787 5082 1', 18: '29392 19227 1', 20: '111605 73150 1', 22: '425866 279565 1', 24: '1631643 1072512 1', 26: '6272812 4127787 1', 28: '24186087 15930512 1', 30: '93489272 61628247 1', 32: '362168442 238911947 1', 34: '407470704 927891162 1', 36: '474237047 614943428 1', 38: '319176974 87534470 1', 40: '131938523 955113935 1', 42: '558075845 644336680 1', 44: '544270478 253841470 1', 46: '209493498 700054910 1', 48: '859106804 457241336 1', 50: '921005664 6522991 1', 52: '366933608 353887625 1', 54: '142064435 432533537 1', 56: '741221694 874398972 1', 58: '297907370 545598131 1', 60: '341102826 248150916 1'}\nt = int(input())\nfor i in range(t):\n    cards = int(input())\n    print(card_game[cards])", "from math import comb\np = 998244353\nf = lambda x: comb(x * 2, x) // 2 % p\na = [(0, 0), (1, 0)]\nfor i in range(2, 31):\n    a += [((f(i) + a[-1][1]) % p, (f(i) - a[-1][1] - 1 + p) % p)]\nfor _ in range(int(input())):\n    n = int(input()) // 2\n    print(*a[n], 1)", "hsh = {}\n\ndef fact(n):\n    if n == 0 or n == 1:\n        return 1\n    if n in hsh:\n        return hsh[n]\n    hsh[n] = n * fact(n - 1)\n    return hsh[n]\n\ndef comp(n, r):\n    p = fact(n)\n    m = fact(r) * fact(n - r)\n    return p // m\nhsh2 = {}\n\ndef solve(n, flag):\n    if n == 2:\n        return flag\n    if n in hsh2:\n        return hsh2[n] if flag else comp(n, n / 2) - 1 - hsh2[n]\n    cur = comp(n - 1, n / 2 - 1)\n    cur += solve(n - 2, 0)\n    hsh2[n] = cur\n    if flag:\n        return hsh2[n]\n    return comp(n, n / 2) - cur - 1\nmod = 998244353\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    print(int(solve(n, 1) % mod), ' ', int(solve(n, 0) % mod), ' ', 1)\n    t -= 1", "from math import comb\nfor p in range(int(input())):\n    d = 998244353\n    n = int(input())\n    w = [1]\n    l = [0]\n    for i in range(2, n + 1, 2):\n        w.append(comb(i, i // 2) // 2 + l[-1])\n        l.append(comb(i, i // 2) - w[-1] - 1)\n    print(w[-1] % d, l[-1] % d, 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\nX = [(1, 0)]\nfor i in range(1, 31):\n    Y = (math.comb(2 * i, i) // 2 + X[i - 1][1]) % p\n    X += [(Y % p, (math.comb(2 * i, i) - Y - 1) % p)]\nfor i in range(int(input())):\n    print(*X[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\n\ndef a(n):\n    return math.comb(n, n // 2) - b(n) - 1\n\ndef b(n):\n    if n == 2:\n        return 0\n    elif n == 4:\n        return 2\n    else:\n        return math.comb(n - 2, n // 2 - 2) + a(n - 2)\nfor i in range(int(input())):\n    n = int(input())\n    if n > 4:\n        B = b(n)\n        A = a(n)\n        print(A % 998244353, B % 998244353, 1)\n    elif n == 2:\n        print(1, 0, 1)\n    else:\n        print(3, 2, 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "from math import comb\nmod = 998244353\n\ndef solve(n):\n    alex = [0] * (n + 1)\n    boris = [0] * (n + 1)\n    for i in range(2, n + 1, 2):\n        t = comb(i, i // 2)\n        alex[i] = boris[i - 2] + t // 2\n        boris[i] = t - alex[i] - 1\n        alex[i] %= mod\n        boris[i] %= mod\n    return [alex[n], boris[n], 1]\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        print(' '.join([str(e) for e in solve(n)]))\nmain()", "import math\np = 998244353\na = [(1, 0)]\nfor i in range(1, 31):\n    b = (math.comb(2 * i, i) // 2 + a[i - 1][1]) % p\n    a += [(b % p, (math.comb(2 * i, i) - b - 1) % p)]\nfor i in range(int(input())):\n    print(*a[int(input()) // 2], 1)", "def f(n):\n    res = 1\n    for i in range(2, n + 1):\n        res *= i\n    return res\n\ndef c(n, k):\n    return f(n) // f(k) // f(n - k)\nl = [0] * 61\nfor i in range(61):\n    l[i] = [0] * 3\n(l[2][0], l[2][1], l[2][2]) = (1, 0, 1)\nfor i in range(4, 61, 2):\n    l[i][0] = c(i - 1, i // 2 - 1) + l[i - 2][1]\n    l[i][1] = c(i, i // 2) - l[i][0] - 1\n    l[i][2] = 1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(l[n][0] % 998244353, l[n][1] % 998244353, l[n][2] % 998244353)", "from math import comb\nl = [[0] * 2 for i in range(61)]\nfor i in range(1, 31):\n    l[i * 2][0] = comb(i * 2 - 1, i - 1) + l[i * 2 - 2][1]\n    l[i * 2][1] = comb(i * 2, i) - l[i * 2][0] - 1\nfor i in range(int(input())):\n    print(*map(lambda x: x % 998244353, l[int(input())]), 1)", "t = int(input())\n\ndef ncr(n, r):\n    if r == 0:\n        return 1\n    ans = 1\n    for i in range(1, r + 1):\n        ans = ans * (n - i + 1) // i\n    return ans\n\ndef fn(n):\n    if n <= 4:\n        return n - 1\n    else:\n        return ncr(n - 1, n // 2) + ncr(n - 4, n // 2 - 1) + fn(n - 4)\nfor t1 in range(t):\n    n = int(input())\n    alex = fn(n)\n    tot = ncr(n, n // 2)\n    print(alex % 998244353, (tot - alex - 1) % 998244353, 1)", "NMAX = 61\nMOD = 998244353\ncnks = [[0 for _ in range(NMAX)] for __ in range(NMAX)]\nfor i in range(NMAX):\n    cnks[i][0] = 1\n    cnks[i][i] = 1\nfor i in range(2, NMAX):\n    for j in range(1, i):\n        cnks[i][j] = (cnks[i - 1][j] + cnks[i - 1][j - 1]) % MOD\nfs = [0 for _ in range(NMAX)]\nfs[2] = 1\nfor k in range(4, NMAX, 2):\n    fs[k] = (cnks[k - 1][(k - 1) // 2] + cnks[k - 2][k // 2 - 1] - fs[k - 2] - 1) % MOD\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(f'{fs[n]} {(cnks[n][n // 2] - fs[n] - 1) % MOD} 1')", "import math\nA = [1]\nB = [0]\nfor n in range(4, 62, 2):\n    A.append((B[-1] + math.comb(n - 1, n // 2 - 1)) % 998244353)\n    B.append((math.comb(n, n // 2) - A[-1] - 1) % 998244353)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ind = n // 2 - 1\n    print(str(A[ind]) + ' ' + str(B[ind]) + ' ' + '1')", "from math import comb\n(res, M) = ([[1, 0, 1]], 998244353)\nfor i in range(4, 61, 2):\n    half = comb(i, i >> 1) // 2 % M\n    res += ([(half + res[-1][1]) % M, (half - res[-1][1] - 1) % M, 1],)\nfor _ in range(int(input())):\n    print(*res[int(input()) // 2 - 1])", "import math\nt = int(input())\nans = [[1, 0]]\nfor i in range(2, 31, 1):\n    n = 2 * i\n    x = ans[i - 2][0]\n    y = ans[i - 2][1]\n    tot = math.comb(n, n // 2)\n    val = math.comb(n - 1, n // 2 - 1)\n    ans.append([val + y, tot - 1 - val - y])\nfor t1 in range(t):\n    n = int(input())\n    i = n // 2 - 1\n    print(ans[i][0] % 998244353, ans[i][1] % 998244353, 1)", "from math import factorial\n\ndef C(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef gam(n):\n    res = [0] * 3\n    if n == 2:\n        return [1, 0, 1]\n    w = gam(n - 2)\n    res[0] += C(n - 1, n // 2)\n    res[1] += C(n - 2, n // 2)\n    res[2] += w[2]\n    res[0] += w[1]\n    res[1] += w[0]\n    return res\nrez = {}\nfor i in range(2, 61, 2):\n    q = gam(i)\n    for x in range(3):\n        q[x] = q[x] % 998244353\n    rez[i] = q\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(*rez[n])", "from math import comb\nmod = 998244353\n\ndef WDL(n):\n    if n == 2:\n        return [1, 1, 0]\n    wdl = WDL(n - 2)[::-1]\n    wdl[0] += comb(n - 1, n // 2)\n    wdl[2] += comb(n - 2, n // 2)\n    return wdl\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(WDL(n)[0] % mod, WDL(n)[2] % mod, WDL(n)[1] % mod)", "import math\nmod = 998244353\nfor i in range(int(input())):\n    a = int(input())\n    total = math.comb(a, a // 2)\n    alex = 0\n    for i in range(a, 0, -4):\n        alex += math.comb(i - 1, i // 2 - 1)\n        if i > 4:\n            alex += math.comb(i - 4, i // 2 - 3)\n    print(alex % mod, (total - 1 - alex) % mod, 1)", "def c(n):\n    ans = 1\n    for i in range(n // 2 + 1, n):\n        ans *= i\n    for i in range(1, n // 2):\n        ans //= i\n    return ans\n\ndef c2(n):\n    ans = 1\n    for i in range(n // 2 + 1, n + 1):\n        ans *= i\n    for i in range(1, n // 2 + 1):\n        ans //= i\n    return ans\nt = int(input())\nfor ti in range(t):\n    alex = 0\n    boris = 0\n    n = int(input())\n    for i in range(n // 2):\n        alex = boris + c(i * 2 + 2)\n        boris = c2(i * 2 + 2) - alex - 1\n    print(alex % 998244353, boris % 998244353, '1')", "import operator as op\nfrom functools import reduce\n\ndef ncr(n, r):\n    if n <= 0 or r < 0:\n        return 0\n    r = min(r, n - r)\n    numer = reduce(op.mul, range(n, n - r, -1), 1)\n    denom = reduce(op.mul, range(1, r + 1), 1)\n    return numer // denom\n\ndef uno(n):\n    if n == 0:\n        return 0\n    return ncr(n - 1, n // 2 - 1) + dos(n - 2)\n\ndef dos(n):\n    if n == 0:\n        return 0\n    return ncr(n - 2, n // 2 - 2) + uno(n - 2)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = uno(n)\n    b = dos(n)\n    c = 1\n    mod = 998244353\n    a %= mod\n    b %= mod\n    print(a, b, c)", "from math import comb\nMOD = 998244353\n\ndef a(n: int):\n    if n == 0:\n        return 0\n    if n == 2:\n        return 1\n    return (comb(n - 1, n // 2) + comb(n - 4, n // 2 - 1) + a(n - 4)) % MOD\n\ndef b(n: int):\n    if n == 0:\n        return 0\n    if n == 2:\n        return 0\n    return (comb(n - 3, n // 2 - 1) + comb(n - 2, n // 2) + b(n - 4)) % MOD\n\ndef solve():\n    n = int(input())\n    print(a(n), b(n), 1)\nfor _ in range(int(input())):\n    solve()", "answers = [None, [1, 0, 1]]\nfact = [1, 1]\nfor i in range(2, 61):\n    fact.append(fact[-1] * i)\n\ndef get_nCr(n, r):\n    ans = fact[n] // fact[n - r] // fact[r]\n    return ans\nfor i in range(4, 62, 2):\n    total = 1\n    for j in range(i // 2 + 1, i + 1):\n        total *= j\n    for j in range(1, i // 2 + 1):\n        total //= j\n    temp = [total, 0, 1]\n    temp[1] += answers[i // 2 - 1][0]\n    temp[1] += get_nCr(i - 2, i - 2 - i // 2)\n    temp[0] -= temp[1] + temp[2]\n    answers.append(temp)\nfor i in range(1, 31):\n    answers[i][0] %= 998244353\n    answers[i][1] %= 998244353\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(*answers[n // 2])", "import math\n\ndef nCr(n, r):\n    f = math.factorial\n    return f(n) // f(r) // f(n - r)\nans1 = [1, 3]\nans2 = [0, 2]\nMOD = 998244353\nfor i in range(6, 61, 2):\n    s = nCr(i - 1, i // 2) % MOD\n    x = ans1[-1]\n    ans1.append((s + ans2[-1]) % MOD)\n    s = nCr(i - 2, i // 2) % MOD\n    ans2.append((s + x) % MOD)\nfor _ in range(int(input())):\n    n = int(input())\n    n = n // 2 - 1\n    print(ans1[n], ans2[n], 1)", "t = int(input())\nf = {}\n\ndef fact(x):\n    if x == 0:\n        return 1\n    if x not in f:\n        s = fact(x - 1) * x\n        f[x] = s\n        return s\n    else:\n        return f[x]\nff = {}\n\ndef c(N, K):\n    return fact(N) // (fact(K) * fact(N - K))\n\ndef fin(n):\n    if n == 2:\n        return [1, 0]\n    else:\n        if n not in ff:\n            a = c(n - 1, n // 2 - 1)\n            a += fin(n - 2)[1]\n            b = c(n, n // 2) - a - 1\n            ff[n] = [a % mod, b % mod]\n        return ff[n]\nfor _ in range(t):\n    n = int(input())\n    mod = 998244353\n    print(fin(n)[0] % mod, fin(n)[1] % mod, 1)", "t = int(input())\nmod = 998244353\n\ndef binomialCoeffUtil(n, k, dp):\n    for i in range(n + 1):\n        for j in range(min(i, k) + 1):\n            if j == 0 or j == i:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n    return dp[n][k]\ndp = [[-1 for y in range(61 + 1)] for x in range(61 + 1)]\nbinomialCoeffUtil(61, 61, dp)\nans = 61 * [0]\n\ndef solve():\n    n = int(input())\n    print((mod + dp[n][n // 2] - ans[n] - 1) % mod, ans[n], 1)\nfor i in range(t):\n    for i in range(2, 61, 2):\n        ans[i] = (mod + dp[i][i // 2] - (ans[i - 2] + dp[i - 1][i // 2 - 1]) - 1) % mod\n    solve()", "from math import factorial as fact\nMOD = 998244353\nb = [None] * 61\nf = [None] * 61\nb[2] = 0\nf[2] = 2\nfor i in range(4, 61, 2):\n    f[i] = fact(i) // fact(i // 2) ** 2\n    b[i] = f[i] // 2 - b[i - 2] - 1\nt = int(input())\nfor _ in range(t):\n    i = int(input())\n    print(*map(lambda x: x % MOD, (f[i] - b[i] - 1, b[i], 1)))", "from math import comb, factorial\nawin = [0 for _ in range(100)]\nbwin = [0 for _ in range(100)]\nawin[2] = 1\nbwin[2] = 0\nMOD = 998244353\nfor i in range(4, 61, 2):\n    awin[i] = (bwin[i - 2] + comb(i - 1, i // 2 - 1)) % MOD\n    bwin[i] = (comb(i, i // 2) - 1 - awin[i]) % MOD\nTC = int(input())\nfor _ in range(TC):\n    N = int(input())\n    print(awin[N], bwin[N], 1)", "l = [[1, 0, 1], [3, 2, 1], [12, 7, 1], [42, 27, 1], [153, 98, 1], [560, 363, 1], [2079, 1352, 1], [7787, 5082, 1], [29392, 19227, 1], [111605, 73150, 1], [425866, 279565, 1], [1631643, 1072512, 1], [6272812, 4127787, 1], [24186087, 15930512, 1], [93489272, 61628247, 1], [362168442, 238911947, 1], [407470704, 927891162, 1], [474237047, 614943428, 1], [319176974, 87534470, 1], [131938523, 955113935, 1], [558075845, 644336680, 1], [544270478, 253841470, 1], [209493498, 700054910, 1], [859106804, 457241336, 1], [921005664, 6522991, 1], [366933608, 353887625, 1], [142064435, 432533537, 1], [741221694, 874398972, 1], [297907370, 545598131, 1], [341102826, 248150916, 1]]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(l[n // 2 - 1][0], l[n // 2 - 1][1], l[n // 2 - 1][2])", "import math as m\na = [[0, 0]] * 70\na[2] = [1, 0]\nfor i in range(4, 66, 2):\n    a[i] = [(m.comb(i - 1, i // 2 - 1) + a[i - 2][1]) % 998244353, (m.comb(i, i // 2) - (m.comb(i - 1, i // 2 - 1) + a[i - 2][1] + 1)) % 998244353]\nfor _ in range(int(input())):\n    n = int(input())\n    print(str(a[n][0]) + ' ' + str(a[n][1]) + ' 1')", "from math import factorial as f\n\ndef res(n):\n    if n == 2:\n        return (1, 0, 1)\n    (a, b, c) = res(n - 2)\n    return ((f(n) * pow(f(n // 2), -2, 998244353) * pow(2, -1, 998244353) + b) % 998244353, (f(n - 2) * pow(f(n // 2 - 2), -1, 998244353) * pow(f(n // 2), -1, 998244353) + a) % 998244353, 1)\nfor _ in range(int(input())):\n    n = int(input())\n    print(*res(n))", "c = [[1] * 61 for i in range(61)]\nfor i in range(61):\n    for j in range(61):\n        if j > i:\n            c[j][i] = 0\nfor i in range(1, 61):\n    for j in range(1, i + 1):\n        c[j][i] = (c[j][i - 1] + c[j - 1][i - 1]) % 998244353\nf = [0] * 61\nf[2] = 1\nf[4] = 3\nfor i in range(6, 61, 2):\n    f[i] = f[i - 4] + c[int(i / 2) - 1][i - 1] + c[int(i / 2) - 3][i - 4]\n    f[i] %= 998244353\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    x = f[n]\n    y = (c[int(n / 2)][n] - f[n] - 1 + 998244353) % 998244353\n    print(f'{x} {y} 1')", "mod = 998244353\n\ndef C(n, r):\n    ans = 1\n    for i in range(1, r + 1):\n        ans = ans * n * pow(i, -1, mod)\n        n -= 1\n    return (ans + 5 * mod) % mod\nl = [[1, 0, 1]]\nfor i in range(4, 61, 2):\n    combi_term = C(i - 1, (i - 1) // 2) % mod\n    full = C(i, i // 2) % mod\n    a = (combi_term + l[-1][1]) % mod\n    b = (full - a - 1 + mod) % mod\n    c = 1\n    l.append([a, b, c])\nfor _ in range(int(input())):\n    n = int(input()) - 1\n    t = l[n // 2]\n    print(t[0], t[1], t[2])", "import math\nntestcases = int(input())\nfor i in range(ntestcases):\n    n = int(input())\n\n    def GoesFirstWins(k):\n        if k == 2:\n            return 1\n        return math.comb(k - 1, k // 2 - 1) + GoesSecondWins(k - 2)\n\n    def GoesSecondWins(k):\n        if k == 2:\n            return 0\n        return math.comb(k, k // 2) - GoesFirstWins(k) - 1\n    alexWins = GoesFirstWins(n) % 998244353\n    borisWins = (math.comb(n, n // 2) - alexWins - 1) % 998244353\n    print(' '.join(list(map(str, [alexWins, borisWins, '1']))))", "from collections import deque, defaultdict, Counter\nfrom math import *\nfrom heapq import *\nfrom functools import cmp_to_key, lru_cache\nfact = {}\n\ndef factorial(n):\n    if n in [0, 1]:\n        return 1\n    if n in fact:\n        return fact[n]\n    fact[n] = n * factorial(n - 1)\n    return fact[n]\nfactorial(60)\n\ndef ncr(n, r):\n    return fact[n] / (fact[n - r] * fact[r])\nmemo = {2: [1, 0, 1], 4: [3, 2, 1], 6: [12, 7, 1]}\n\ndef build(n):\n    if n in memo:\n        return memo[n]\n    prev = int(ncr(n - 1, int(n / 2 - 1)) % 998244353 + build(n - 2)[1] % 998244353)\n    memo[n] = [prev, int(ncr(n, n / 2) % 998244353 - prev - 1), 1]\n    return memo[n]\n\nclass Solution:\n\n    def solve(self):\n        n = int(input())\n        if n in memo:\n            return ' '.join(map(lambda x: str(int(x % 998244353)), memo[n]))\n        else:\n            return ' '.join(map(lambda x: str(int(x % 998244353)), build(n)))\nob = Solution()\nfor _ in range(int(input())):\n    print(ob.solve())", "def fact(x):\n    if x == 1:\n        return 1\n    return x * fact(x - 1)\na = [0] * 61\nb = [0] * 61\na[2] = 1\nb[2] = 0\na[4] = 3\nb[4] = 2\nfor t in range(5, 61):\n    if t % 2 == 0:\n        a[t] = b[t - 2] + fact(t - 1) // fact(t // 2 - 1) // fact(t - t // 2)\n        b[t] = fact(t) // fact(t // 2) // fact(t // 2) - 1 - a[t]\nn = int(input())\nfor t in range(n):\n    x = int(input())\n    print(a[x] % 998244353, b[x] % 998244353, 1)"]