["from enum import Enum, auto\nimport copy\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        init_path = input().strip()\n        if 'R' not in init_path or 'D' not in init_path:\n            print(n)\n            continue\n        r_num = init_path.count('R')\n        d_num = init_path.count('D')\n        res = r_num + d_num + 1\n        if r_num < n:\n            r_index = init_path.find('R')\n            chuga = d_num + 1 - r_index\n            res += (n - r_num - 1) * chuga\n        if d_num < n:\n            d_index = init_path.find('D')\n            chuga = r_num + 1 - d_index\n            res += (n - d_num - 1) * chuga\n        res += (n - 1 - r_num) * (n - 1 - d_num)\n        print(res)\nmain()", "import sys\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\ndef readline():\n    return map(int, input().split())\n\ndef solve():\n    n = int(input())\n    s = input()\n    ans = len(s) + 1\n    r_cnt = s.count('R')\n    d_cnt = len(s) - r_cnt\n    width = r_cnt + 1\n    height = d_cnt + 1\n    if r_cnt and d_cnt:\n        ans += (n - width) * (n - height)\n    d = s.find('D')\n    if d != -1:\n        ans += (width - d) * (n - height)\n    r = s.find('R')\n    if r != -1:\n        ans += (height - r) * (n - width)\n    print(ans)\nt = int(input())\nfor __ in range(t):\n    solve()", "def calc(s, n):\n    ld = s.find('R')\n    res = ld * (n - 1)\n    y = 0\n    for i in range(len(s) - 1, ld - 1, -1):\n        if s[i] == 'D':\n            res += y\n        else:\n            y += 1\n    return res\nout = ''\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if s.count(s[0]) == len(s):\n        out += str(n) + '\\n'\n        continue\n    ans = n * n\n    ans -= calc(s, n)\n    ans -= calc(''.join(['D' if c == 'R' else 'R' for c in s]), n)\n    out += str(ans) + '\\n'\nprint(out)", "Z = input\nfor _ in range(int(Z())):\n    m = int(Z())\n    s = Z()\n    n = len(s)\n    y = chr(150 - ord(s[0]))\n    x = (s + y).index(y)\n    print(1 + n + (m - x) * m - (1 + s.count('D', x)) * (1 + s.count('R', x)) if x < n else m)", "Z = input\nfor _ in range(int(Z())):\n    m = int(Z())\n    s = Z()\n    n = len(s)\n    y = chr(150 - ord(s[0]))\n    x = (s + y).index(y)\n    print(1 + n + (m - x) * m - (1 + s.count('D', x)) * (1 + s.count('R', x)) if x < n else m)", "Z = input\nfor _ in range(int(Z())):\n    m = int(Z())\n    s = Z()\n    n = len(s)\n    y = chr(150 - ord(s[0]))\n    x = (s + y).index(y)\n    print(1 + n + (m - x) * m - (1 + s.count('D', x)) * (1 + s.count('R', x)) if x < n else m)", "Z = input\nfor _ in range(int(Z())):\n    m = int(Z())\n    s = Z()\n    n = len(s)\n    y = chr(150 - ord(s[0]))\n    x = (s + y).index(y)\n    print(1 + n + (m - x) * m - (1 + s.count('D', x)) * (1 + s.count('R', x)) if x < n else m)", "import math\n\ndef solve():\n    n = int(input())\n    s = input()\n    l = len(s)\n    ar = s.count('R')\n    al = l - ar\n    ans = mk = cntl = cntr = 0\n    if ar == 0 or al == 0:\n        return n\n    for i in s:\n        if i == 'R':\n            cntr += 1\n            ans += al - cntl if cntl else n - 1\n        else:\n            cntl += 1\n            ans += ar - cntr if cntr else n - 1\n    return n * n - ans\nt = input()\nfor tt in range(int(t)):\n    print(solve())", "import math\n\ndef intlist():\n    return [int(i) for i in input().split(' ')]\n\ndef stringlsit():\n    return input().split(' ')\n\ndef solve():\n    n = int(input())\n    s = input()\n    l = len(s)\n    ar = s.count('R')\n    al = l - ar\n    ans = 0\n    mk = 0\n    cntl = 0\n    cntr = 0\n    if ar == 0 or al == 0:\n        return n\n    for i in s:\n        if i == 'R':\n            cntr += 1\n        else:\n            cntl += 1\n        if i == 'R':\n            if cntl == 0:\n                ans += n - 1\n            else:\n                ans += al - cntl\n        elif cntr == 0:\n            ans += n - 1\n        else:\n            ans += ar - cntr\n    return n * n - ans\n    return ans\nt = input()\nfor tt in range(int(t)):\n    print(solve())", "def solve():\n    t = int(input())\n    for r in range(t):\n        n = int(input())\n        path = input()\n        cnt_r = path.count('R')\n        cnt_d = path.count('D')\n        if cnt_r == 0 or cnt_d == 0:\n            result = n\n        else:\n            move_r = n - cnt_r - 1\n            move_d = n - cnt_d - 1\n            result = 1\n            cur_char = ''\n            prev_char = ''\n            last_char = ''\n            for cur_char in path:\n                result += 1\n                if prev_char != cur_char:\n                    last_char = prev_char\n                if last_char == 'R':\n                    result += move_r\n                elif last_char == 'D':\n                    result += move_d\n                prev_char = cur_char\n            result += (1 + move_r) * (1 + move_d)\n            result -= 1\n        print(result)\nsolve()", "def calc(s, n):\n    ld = s.find('R')\n    res = ld * (n - 1)\n    y = 0\n    for i in range(len(s) - 1, ld - 1, -1):\n        if s[i] == 'D':\n            res += y\n        else:\n            y += 1\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if s.count(s[0]) == len(s):\n        print(n)\n        continue\n    ans = n * n\n    ans -= calc(s, n)\n    ans -= calc(''.join(['D' if c == 'R' else 'R' for c in s]), n)\n    print(ans)", "def calc(s, n):\n    ld = s.find('R')\n    res = ld * (n - 1)\n    y = 0\n    for i in range(len(s) - 1, ld - 1, -1):\n        if s[i] == 'D':\n            res += y\n        else:\n            y += 1\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if s.count(s[0]) == len(s):\n        print(n)\n        continue\n    ans = n * n\n    ans -= calc(s, n)\n    ans -= calc(''.join(['D' if c == 'R' else 'R' for c in s]), n)\n    print(ans)", "def calc(s, n):\n    ld = s.find('R')\n    res = ld * (n - 1)\n    y = 0\n    for i in range(len(s) - 1, ld - 1, -1):\n        if s[i] == 'D':\n            res += y\n        else:\n            y += 1\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if s.count(s[0]) == len(s):\n        print(n)\n        continue\n    ans = n * n\n    ans -= calc(s, n)\n    ans -= calc(''.join(['D' if c == 'R' else 'R' for c in s]), n)\n    print(ans)", "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        s = input()\n        t = ''.join(['D' if i == 'R' else 'R' for i in s])\n        poss = s.find('R')\n        post = t.find('R')\n        if s == 'R' * len(s) or s == 'D' * len(s):\n            print(n)\n            continue\n        (res, cnta, cntb) = (poss * (n - 1) + post * (n - 1), 0, 0)\n        for i in range(len(s) - 1, poss - 1, -1):\n            if s[i] == 'D':\n                res += cnta\n            else:\n                cnta += 1\n        for i in range(len(t) - 1, post - 1, -1):\n            if t[i] == 'D':\n                res += cntb\n            else:\n                cntb += 1\n        print(n * n - res)\nmain()", "def calc(s, n):\n    ld = s.find('R')\n    res = ld * (n - 1)\n    y = 0\n    for i in range(len(s) - 1, ld - 1, -1):\n        if s[i] == 'D':\n            res += y\n        else:\n            y += 1\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if s.count(s[0]) == len(s):\n        print(n)\n        continue\n    ans = n * n\n    ans -= calc(s, n)\n    ans -= calc(''.join(['D' if c == 'R' else 'R' for c in s]), n)\n    print(ans)", "def solve():\n    n = int(input())\n    s = input()\n    m = len(s)\n    flag = True\n    for i in range(1, m):\n        if s[i] != s[i - 1]:\n            flag = False\n    if flag:\n        return n\n    (x, y) = (1, 1)\n    for c in s:\n        if c == 'R':\n            y = y + 1\n        if c == 'D':\n            x = x + 1\n    (x, y) = (n - x, n - y)\n    res = m\n    for i in range(m):\n        if i and s[i] != s[i - 1]:\n            flag = True\n        if flag:\n            if s[i] == 'R':\n                res = res + x\n            if s[i] == 'D':\n                res = res + y\n    return res + (x + 1) * (y + 1)\nfor i in range(int(input())):\n    print(solve())", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    (posX, posY) = (0, 0)\n    maxDown = [0]\n    maxRight = [0]\n    for c in s:\n        if c == 'D':\n            posY += 1\n            maxDown[-1] += 1\n            maxRight.append(posX)\n        else:\n            posX += 1\n            maxDown.append(posY)\n            maxRight[-1] += 1\n    if posX == 0 or posY == 0:\n        print(n)\n    else:\n        jeuBas = n - posY - 1\n        jeuDroite = n - posX - 1\n        nbCase = 0\n        for i in maxDown:\n            if i == 0:\n                nbCase += n - 1\n            else:\n                nbCase += n - 1 - i - jeuBas\n        for i in maxRight:\n            if i == 0:\n                nbCase += n - 1\n            else:\n                nbCase += n - 1 - i - jeuDroite\n        print(n * n - nbCase)"]