["for s in [*open(0)][2::2]:\n    a = [x & -x for x in map(int, s.split())]\n    m = a.count((b := min(a)))\n    (x, y, z) = (bin(x)[::-1].find('1') for x in (b, b * m, b * m - m))\n    print(len(a) - m + min(m * x, m - 1 + y, m - 2 + x + 1) * (b > 1))", "for s in [*open(0)][2::2]:\n    a = [x & -x for x in map(int, s.split())]\n    m = a.count((b := min(a)))\n    (x, y, z) = (bin(x)[::-1].find('1') for x in (b, b * m, b * m - m))\n    print(len(a) - m + min(m * x, m - 1 + y, m - 2 + x + 1))", "for s in [*open(0)][2::2]:\n    a = [x & -x for x in map(int, s.split())]\n    m = a.count((b := min(a)))\n    (x, y) = (bin(x)[::-1].find('1') for x in (b, b * m))\n    print(len(a) - m + min(m * x, m - 1 + y, m - 2 + x + 1))", "for s in [*open(0)][2::2]:\n    a = [x & -x for x in map(int, s.split())]\n    m = a.count((b := min(a)))\n    (x, y) = (bin(x)[::-1].find('1') for x in (b, b * m))\n    print(len(a) - m + min(m * x, m + x - 1))", "for s in [*open(0)][2::2]:\n    b = min((a := [x & -x for x in map(int, s.split())]))\n    print(len(a) + min((k := (bin(b)[::-1].find('1') - 1)), k * a.count(b)))", "for s in [*open(0)][2::2]:\n    b = min((a := [x & -x for x in map(int, s.split())]))\n    print(len(a) + min((k := (bin(b)[::-1].find('1') - 1)), k * a.count(b)))", "for s in [*open(0)][2::2]:\n    a = [x & -x for x in map(int, s.split())]\n    m = a.count((b := min(a)))\n    (x, y) = (bin(x)[::-1].find('1') for x in (b, b * m))\n    print(len(a) - m + min(m * x, m - 1 + y, m + x - 1))", "for s in [*open(0)][2::2]:\n    a = [x & -x for x in map(int, s.split())]\n    m = a.count((b := min(a)))\n    k = bin(b)[::-1].find('1')\n    print(len(a) - m + min(m * k, m + k - 1))", "for s in [*open(0)][2::2]:\n    a = [x & -x for x in map(int, s.split())]\n    m = a.count((b := min(a)))\n    print(len(a) + min((k := (bin(b)[::-1].find('1') - 1)), m * k))", "for s in [*open(0)][2::2]:\n    b = min((a := [x & -x for x in map(int, s.split())]))\n    print(len(a) + min((k := (bin(b)[::-1].find('1') - 1)), k * a.count(b)))", "for s in [*open(0)][2::2]:\n    b = min((a := [x & -x for x in map(int, s.split())]))\n    print(len(a) + min((k := (bin(b)[::-1].find('1') - 1)), k * a.count(b)))", "for s in [*open(0)][2::2]:\n    b = min((a := [x & -x for x in map(int, s.split())]))\n    print(len(a) + min((k := (bin(b)[::-1].find('1') - 1)), k * a.count(b)))", "for s in [*open(0)][2::2]:\n    b = min((a := [x & -x for x in map(int, s.split())]))\n    print(len(a) + min((k := (bin(b)[::-1].find('1') - 1)), k * a.count(b)))", "for s in [*open(0)][2::2]:\n    b = min((a := [x & -x for x in map(int, s.split())]))\n    print(len(a) + min((k := (bin(b)[::-1].find('1') - 1)), k * a.count(b)))", "for s in [*open(0)][2::2]:\n    b = min((a := [x & -x for x in map(int, s.split())]))\n    print(len(a) + min((k := (bin(b)[::-1].find('1') - 1)), k * a.count(b)))", "for i in range(int(input())):\n    n = int(input())\n    lst = [int(x) for x in input().split()]\n    flag = False\n    x = 0\n    count = 0\n    for element in lst:\n        if element & 1:\n            flag = True\n        else:\n            x |= element\n            count += 1\n    if flag:\n        print(count)\n    else:\n        x = x & ~x + 1\n        count = 0\n        while x > 1:\n            count += 1\n            x >>= 1\n        print(n - 1 + count)", "t = int(input())\ng = 1\nd = []\nwhile g < 10 ** 9:\n    d.append(g)\n    g *= 2\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    nechot = 0\n    mina = 0\n    for i in range(n):\n        if a[i] & 1 == 1:\n            nechot += 1\n        if nechot == 0:\n            j = 0\n            mina |= a[i]\n    if nechot == 0:\n        j = 0\n        while mina & d[j] == 0:\n            j += 1\n        print(j + n - 1)\n    else:\n        print(n - nechot)", "import math\n\nclass MagicalTalisman:\n\n    def operate(self, n, a):\n        odd = 0\n        even = 0\n        minPower = a[0] & -a[0]\n        for i in a:\n            if i % 2:\n                odd += 1\n            else:\n                even += 1\n                minPower = min(minPower, i & -i)\n        if odd > 0:\n            print(even)\n        else:\n            print(int(math.log(minPower, 2)) + even - 1)\n        return\nT = int(input())\nwhile T:\n    T -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    MagicalTalisman().operate(n, a)", "tc = int(input())\nfor t in range(tc):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    num = 0\n    coun = n - 1\n    odd = 0\n    for j in range(n):\n        num = num | arr[j]\n        if arr[j] % 2 == 1:\n            odd += 1\n    if odd:\n        coun = n - odd\n    while num % 2 != 1:\n        num = num >> 1\n        coun += 1\n    print(coun)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    od = 0\n    x = a[0]\n    for i in a:\n        if i & 1:\n            od += 1\n        x = math.gcd(x, i)\n    if od > 0:\n        print(n - od)\n        continue\n    c = 0\n    while x & 1 != 1:\n        x = x >> 1\n        c += 1\n    print(c + n - 1)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    od = 0\n    x = a[0]\n    for i in a:\n        if i & 1:\n            od += 1\n        x = math.gcd(x, i)\n    if od > 0:\n        print(n - od)\n        continue\n    c = 0\n    while x & 1 != 1:\n        x = x >> 1\n        c += 1\n    print(c + n - 1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    li2 = list()\n    gcd = li[0]\n    for i in li:\n        if i % 2 == 0:\n            li2.append(i)\n        gcd = math.gcd(gcd, i)\n    cnt = 0\n    sm = sum(li2)\n    if len(li2) == 0:\n        print(0)\n    elif len(li2) == n:\n        while gcd % 2 == 0:\n            gcd = gcd // 2\n            cnt += 1\n        print(cnt + n - 1)\n    else:\n        print(len(li2))", "def ctz(v):\n    return (v & -v).bit_length() - 1\n\ndef solve():\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    e = [ctz(i) for i in arr if i % 2 == 0]\n    o = n - len(e)\n    if o:\n        return len(e)\n    return min(e) + len(e) - 1\n\ndef main():\n    for _ in range(int(input())):\n        print(solve())\n    return\nmain()", "for t in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    f = False\n    k = 0\n    for i in range(0, n):\n        if s[i] % 2 == 1:\n            f = True\n        else:\n            k += 1\n    if f:\n        print(k)\n    else:\n        y = s[0]\n        for i in range(1, n):\n            y = y | s[i]\n        min = 0\n        while y % 2 == 0:\n            y //= 2\n            min += 1\n        print(min + len(s) - 1)", "t = int(input())\nfor _ in range(t):\n    input()\n    a = [int(i) for i in input().split()]\n    m = sum((1 for i in a if i & 1 == 0))\n    if m > 0:\n        x = min((i for i in a if i & 1 == 1), default=None)\n        if not x:\n\n            def first_set_bit(n):\n                return n - (n & n - 1)\n            x = min(a, key=first_set_bit)\n            m -= 1\n            while x & 1 == 0:\n                x >>= 1\n                m += 1\n    print(m)", "import math\n\ndef solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    odds = 0\n    evens = 0\n    min = 10 ** 9\n    for i in l:\n        if i % 2 == 0:\n            bit = int(math.log2(i & -i))\n            if bit < min:\n                min = bit\n            evens += 1\n        else:\n            odds += 1\n    if odds > 0:\n        print(evens)\n    else:\n        print(min + n - 1)\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1", "import math\n\ndef work(a):\n    mink = 1000000000.0 + 1\n    (c, b) = (0, 0)\n    for o in a:\n        if o & 1:\n            c += 1\n        else:\n            b += 1\n            mink = min(mink, math.log2(o & -o))\n    if c != 0:\n        print(b)\n    else:\n        print(int(mink + b - 1))\nn = int(input())\nwhile n:\n    n -= 1\n    input()\n    a = list(map(int, input().split()))\n    work(a)", "import math\n\ndef solve():\n    x = int(input())\n    arr = input().split()\n    for i in range(len(arr)):\n        arr[i] = int(arr[i])\n    odd = 0\n    even = 0\n    reduction = 9999999999\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even += 1\n            temp = arr[i]\n            cc = temp & ~(temp - 1)\n            if reduction > cc:\n                reduction = cc\n        else:\n            odd += 1\n    if odd > 0:\n        print(even)\n    else:\n        print(int(even - 1 + math.log2(reduction)))\nt = int(input())\nfor i in range(t):\n    solve()", "for _ in ' ' * int(input()):\n    n = int(input())\n    a = list(map(int, input().split()))\n    op = any((i & 1 for i in a))\n    ec = sum((1 - (i & 1) for i in a))\n    if not ec:\n        print(0)\n    elif op:\n        print(ec)\n    else:\n        print(ec - 2 + min([len(bin(x & -x)[2:]) for x in a]))", "from math import log2\nimport sys\nfor t in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    mindist = sys.maxsize\n    evens = 0\n    odds = 0\n    for i in arr:\n        if not i & 1:\n            evens += 1\n            dist = i & ~(i - 1)\n            if dist < mindist:\n                mindist = dist\n        else:\n            odds += 1\n    if odds > 0:\n        print(evens)\n    elif evens > 0:\n        print(int(log2(mindist) + evens - 1))", "for _ in ' ' * int(input()):\n    (n, a) = (int(input()), list(map(int, input().split())))\n    (op, ec) = (any((i & 1 for i in a)), sum((1 - (i & 1) for i in a)))\n    print([0, [ec - 2 + min([len(bin(x & -x)[2:]) for x in a]), ec][op]][ec > 0])", "from math import log2\nfor _ in range(int(input())):\n    x = int(input())\n    y = list(map(int, input().split()))\n    even = 0\n    k = []\n    for i in range(x):\n        if y[i] % 2 == 0:\n            even += 1\n        k.append(y[i] - (y[i] & y[i] - 1))\n    if even == 0:\n        print(0)\n    elif x > even > 0:\n        print(even)\n    else:\n        print(int(log2(min(k))) + x - 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    num_odd = 0\n    num_even = 0\n    for x in a:\n        if x % 2:\n            num_odd += 1\n    if num_odd == 0:\n        m = 1000000000.0 + 8\n        for x in a:\n            y = x & -x\n            m = min(m, y)\n        k = 0\n        while m % 2 == 0:\n            m //= 2\n            k += 1\n        print(n + k - 1)\n    else:\n        print(n - num_odd)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def ggcd(x, y):\n        while y:\n            (x, y) = (y, x % y)\n        return x\n    (e, c) = (0, 0)\n    g = a[0]\n    for x in a:\n        if x % 2 == 0:\n            g = ggcd(g, x)\n            e += 1\n    while g % 2 == 0:\n        c += 1\n        g /= 2\n    if e == 0:\n        print(0)\n    elif e < n:\n        print(e)\n    else:\n        print(e + c - 1)", "from math import ceil, floor, log2\n\ndef ffs(x):\n    return (x & -x).bit_length() - 1\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    q = set()\n    a = 31\n    (k, w) = (0, 0)\n    for i in range(n):\n        if l[i] % 2 == 0:\n            k += 1\n            if ffs(l[i]) < a:\n                a = ffs(l[i])\n        else:\n            w = 1\n        (e, f) = (0, 0)\n    t = a + k - 1\n    if w == 1:\n        t = min(k, t)\n    print(t)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    x = [*map(int, input().split())]\n    evenStack = []\n    oddStack = []\n    for y in x:\n        (evenStack if y & 1 != 1 else oddStack).append(int(math.log2(y & -y) - 1))\n    ans = len(evenStack) + (min(evenStack) if not oddStack else 0)\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    x = [*map(int, input().split())]\n    evenStack = []\n    oddStack = []\n    for y in x:\n        (evenStack if y & 1 != 1 else oddStack).append(int(math.log2(y & -y) - 1))\n    ans = len(evenStack) + (min(evenStack) if not oddStack else 0)\n    print(ans)", "n = int(input())\n\ndef ctz(v):\n    return (v & -v).bit_length() - 1\nfor _ in range(n):\n    length = int(input())\n    no_odd = 0\n    numbers = list(map(int, input().split()))\n    even_numbers = []\n    ret = 0\n    for num in numbers:\n        if num % 2 == 1:\n            no_odd += 1\n        else:\n            even_numbers.append(num)\n    if no_odd > 0:\n        ret = length - no_odd\n    else:\n        count = 32\n        for num in even_numbers:\n            count = min(count, ctz(num))\n        ret = count + len(even_numbers) - 1\n    print(ret)", "import math\n\ndef func(li, n):\n    if n == 0:\n        return\n    c = 0\n    a = 1000\n    for x in li:\n        if x % 2 == 1:\n            c = c + 1\n    e = n - c\n    if c >= 1:\n        return e\n    for i in range(n):\n        x = li[i]\n        a = int(min(a, math.log2(x & -x)))\n    return a + n - 1\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    li = [int(x) for x in input().split()]\n    print(func(li, n))\n    t = t - 1", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    data = list(map(int, input().split()))\n    odds = 0\n    evens = 0\n    quickestEven = 10000000000000000000\n    for x in data:\n        if x % 2 == 0:\n            evens += 1\n            quickestEven = min(quickestEven, math.log2(x & -x))\n        else:\n            odds += 1\n    if odds > 0:\n        print(evens)\n    else:\n        print(int(evens + quickestEven - 1))", "import math\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    a = [int(x) for x in input().split(' ')]\n    c = 0\n    m = float('inf')\n    for i in a:\n        if i % 2 == 1:\n            c += 1\n        m = min(m, int(math.log2(i & -i)))\n    if c > 0:\n        print(n - c)\n    else:\n        print(n - 1 + m)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    evens = list(filter(lambda x: x % 2 == 0, a))\n    nodds = n - len(evens)\n    nevens = n - nodds\n    if nodds != 0:\n        print(nevens)\n    else:\n        num2s = list(map(lambda x: bin(x)[2:][::-1].index('1'), evens))\n        print(min(num2s) + nevens - 1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    (cnt, a) = (0, 32)\n    line = list(map(int, input().split()))\n    for num in line:\n        if num & 1 == 0:\n            cnt += 1\n            a = min(a, math.log2(num & -num))\n    if cnt == n:\n        print(cnt - 1 + int(a))\n    else:\n        print(cnt)", "import math\nimport sys\nfor _ in range(int(input())):\n    x = int(input())\n    arr = list(map(int, sys.stdin.readline().split()))\n    m = math.inf\n    even = 0\n    odd = 0\n    for num in arr:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if odd > 0:\n        print(even)\n    else:\n        m = math.inf\n        for num in arr:\n            if num % 2 == 0:\n                m = min(m, (num & -num).bit_length() - 1)\n        print(even - 1 + m)", "import math\n\ndef highestPowerOf2(n):\n    return n & ~(n - 1)\n\ndef magic(A):\n    even = 0\n    odd = 0\n    count = 0\n    c = math.inf\n    for j in range(len(A)):\n        count = 0\n        if A[j] % 2 == 0:\n            even += 1\n            count = int(math.log2(highestPowerOf2(A[j])))\n            c = min(c, count)\n        else:\n            odd += 1\n    if odd > 0:\n        return even\n    else:\n        return c + even - 1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    count = magic(A)\n    print(count)", "t = int(input())\nfor _ in range(t):\n    input()\n    a = [int(x) for x in input().split()]\n    even_num = []\n    num_odd = 0\n    num_even = 0\n    for x in a:\n        if x % 2:\n            num_odd += 1\n        else:\n            even_num.append(x)\n            num_even += 1\n    if num_odd == 0:\n        m = 1000000000.0 + 7\n        for x in a:\n            y = x & -x\n            m = min(m, y)\n        k = -1\n        for i in range(32):\n            if m & 1 << i:\n                k = i\n                break\n        print(k + num_even - 1)\n    else:\n        print(num_even)", "t = int(input())\nfor _ in range(t):\n    input()\n    a = [int(x) for x in input().split()]\n    even_num = []\n    num_odd = 0\n    num_even = 0\n    for x in a:\n        if x % 2:\n            num_odd += 1\n        else:\n            even_num.append(x)\n            num_even += 1\n    if num_odd == 0:\n        m = 1000000000.0 + 7\n        for x in a:\n            y = x & -x\n            m = min(m, y)\n        k = 0\n        while m % 2 == 0:\n            m = m // 2\n            k += 1\n        print(k + num_even - 1)\n    else:\n        print(num_even)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(a) for a in input().split()]\n    count = 0\n    for num in arr:\n        count += num % 2\n    if count:\n        print(n - count)\n    else:\n        s = ['{:b}'.format(b)[::-1] for b in arr]\n        s = [c.index('1') for c in s]\n        print(min(s) + n - 1)", "t = int(input())\nwhile t:\n    t -= 1\n    n = input()\n    a = list(map(int, input().split(' ')))\n    u = sum(map(lambda x: x & 1, a))\n    if u:\n        print(len(a) - u)\n    else:\n        a_ = []\n        for x in a:\n            bx = bin(x).split('b')[1]\n            a_.append(len(bx) - 1 - bx.rfind('1'))\n        print(min(a_) + len(a) - 1)", "for _ in range(int(input())):\n    n = input()\n    arr = list(map(int, input().split(' ')))\n    u = sum(map(lambda x: x & 1, arr))\n    if u:\n        print(len(arr) - u)\n    else:\n        arr2 = []\n        for x in arr:\n            bx = bin(x).split('b')[1]\n            arr2.append(len(bx) - 1 - bx.rfind('1'))\n        print(min(arr2) + len(arr) - 1)", "from math import inf\nfor _ in range(int(input())):\n    n = int(input())\n    lst = [i for i in map(int, input().split()) if i % 2 == 0]\n    m = len(lst)\n    if m == 0:\n        print(0)\n    elif m < n:\n        print(m)\n    else:\n        mi = inf\n        for i in lst:\n            e = bin(i)[::-1].index('1')\n            mi = min(mi, e)\n        print(mi + m - 1)", "import math\n\ndef solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    oe = [0, 0]\n    for val in l:\n        oe[val % 2] += 1\n    if oe[1] > 0:\n        return oe[0]\n    else:\n        min_shift = 1e+20\n        for val in l:\n            one = val ^ val - 1\n            shift = one ^ one >> 1\n            min_shift = min(min_shift, int(math.log2(shift)))\n        ans = min_shift\n        oe[0] -= 1\n        return ans + oe[0]\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        ans = solve()\n        print(ans)\nmain()", "for _ in range(int(input())):\n    N = int(input())\n    nums = list(map(int, input().split()))\n    evens = 0\n    odd_flg = False\n    min_step = 30\n    for num in nums:\n        step = len(bin((num ^ num - 1) + 1)) - 4\n        min_step = min(min_step, step)\n        if step == 0:\n            odd_flg = True\n        else:\n            evens += 1\n    if odd_flg:\n        print(evens)\n    else:\n        print(evens + min_step - 1)", "t = int(input())\nwhile t:\n    t -= 1\n    n = input()\n    a = list(map(int, input().split(' ')))\n    u = sum(map(lambda x: x & 1, a))\n    if u:\n        print(len(a) - u)\n    else:\n        a_ = []\n        for x in a:\n            bx = bin(x).split('b')[1]\n            a_.append(len(bx) - 1 - bx.rfind('1'))\n        print(min(a_) + len(a) - 1)", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor testcase in range(1, T + 1):\n    n = int(input())\n    aa = list(map(int, input().split()))\n    odds = 0\n    besteven = 50\n    for a in aa:\n        if a % 2 != 0:\n            odds += 1\n        else:\n            b = '0' + bin(a)[2:]\n            l = len(b)\n            right1 = b.rfind('1')\n            num0 = l - right1\n            if num0 < besteven:\n                besteven = num0\n    evens = n - odds\n    result = evens\n    if odds == 0:\n        result += besteven - 2\n    print(result)", "for _ in range(int(input())):\n    n = int(input())\n    c = 0\n    c0 = 40\n    for x in map(int, input().split()):\n        if x % 2:\n            c += 1\n        else:\n            b = bin(x)\n            c0 = min(c0, len(b) - len(b.rstrip('0')))\n    if c > 0:\n        print(n - c)\n    else:\n        print(c0 + n - 1)", "from math import log2\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    odd = 0\n    teven = 0\n    oeven = 10000000000000000000\n    for i in l:\n        if i % 2 == 0:\n            st = str(bin(i))\n            st = st[::-1]\n            oeven = min(oeven, st.index('1'))\n        else:\n            odd += 1\n    if odd >= 1:\n        print(n - odd)\n    else:\n        print(oeven + (n - 1))", "import math\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    (even, odd) = (0, 0)\n    for value in arr:\n        if value % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    ans = 0\n    if odd != 0:\n        ans = even\n    else:\n        min_op = 10 ** 9\n        for value in arr:\n            t1 = value - (value & value - 1)\n            op = math.log(t1, 2)\n            min_op = min(min_op, op)\n        ans += min_op + even - 1\n    print(int(ans))", "for t in range(int(input())):\n    n = int(input())\n    l = [*(int(x) for x in input().split() if int(x) % 2 == 0)]\n    m = len(l)\n    if m == 0:\n        print(0)\n    elif m < n:\n        print(len(l))\n    else:\n        mi = 10 ** 11\n        for i in l:\n            e = bin(i)[::-1].index('1')\n            mi = min(mi, e)\n        print(mi + m - 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    o = 0\n    e = 0\n    E = []\n    for i in a:\n        if i % 2 == 1:\n            o += 1\n        else:\n            e += 1\n            E.append(i)\n    if o > 0:\n        f = e\n    else:\n        f = e - 1\n        min = 10000000\n        for i in E:\n            x = bin(i)[2:]\n            j = x[::-1].index('1')\n            if j < min:\n                min = j\n        f += min\n    print(f)", "T = int(input())\nwhile T:\n    T -= 1\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    ans = float('inf')\n    cnt = 0\n    for (i, x) in enumerate(l):\n        num = 0\n        if x % 2 == 1:\n            cnt += 1\n        bx = bin(x)[2:]\n        num = len(bx) - bx.rfind('1') - 1\n        ans = num if num < ans else ans\n    print(n - cnt if ans == 0 else ans + n - 1)", "from sys import stdin\nfrom math import log, floor, ceil, gcd\ninp = lambda : int(stdin.readline())\n\ndef ra(typ):\n    return list(map(typ, stdin.readline().split()))\n\ndef rv(typ):\n    return map(typ, stdin.readline().split())\n\ndef main():\n    for _ in range(inp()):\n        n = inp()\n        a = ra(int)\n        (odd, even) = (0, 0)\n        for i in a:\n            if i & 1 == 1:\n                odd += 1\n            else:\n                even += 1\n        if odd > 0:\n            print(even)\n        else:\n            x = 9999999\n            for i in a:\n                if x == 1:\n                    break\n                b = bin(i)\n                b1 = bin(i).rstrip('0')\n                x = min(x, len(b) - len(b1))\n            print(even + x - 1)\nmain()", "for t in range(int(input())):\n    n = int(input())\n    l = [*(int(x) for x in input().split() if int(x) % 2 == 0)]\n    m = len(l)\n    if m == 0:\n        print(0)\n    elif m < n:\n        print(len(l))\n    else:\n        mi = 10 ** 11\n        for i in l:\n            e = bin(i)\n            mi = min(mi, len(e) - 1 - e.rindex('1'))\n        print(mi + m - 1)", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mn = 100\n    n1 = 0\n    n2 = 0\n    for i in range(n):\n        if a[i] % 2 != 0:\n            n1 = 1\n        else:\n            n2 += 1\n            st = bin(a[i])\n            st = st[::-1]\n            k = st.find('1')\n            if k < mn:\n                mn = k\n        if n1 == 1:\n            ans = n2\n        else:\n            ans = n2 + mn - 1\n    print(ans)", "t = int(input())\nwhile t:\n    n = int(input())\n    l = list(map(int, input().split()))\n    co = 0\n    ce = 0\n    le = []\n    for i in range(n):\n        if l[i] % 2 == 0:\n            ce += 1\n            le.append(l[i])\n        else:\n            co += 1\n    if co != 0:\n        print(ce)\n    else:\n        for i in range(len(le)):\n            s = bin(l[i])[2:]\n            s = s[::-1]\n            f = s.index('1')\n            l[i] = f\n        print(min(l) + ce - 1)\n    t -= 1", "def solve():\n    n = int(input())\n    a = [int(e) for e in input().split()]\n    (even, min2) = (0, 33)\n    for x in a:\n        if x % 2 == 0:\n            even += 1\n        if x % 2 == 1:\n            min2 = 0\n            continue\n        man = str(bin(x))\n        min2 = min(len(man) - len(man.rstrip('0')), min2)\n    print(min2 + even - (1 if min2 > 0 else 0))\n    return\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    even = 0\n    odd = 0\n    e = []\n    for c in a:\n        if c & 1:\n            odd += 1\n        else:\n            even += 1\n            e.append(c)\n    if odd:\n        print(even)\n    else:\n        T = True\n        for i in range(e.__len__()):\n            e[i] = len(bin(e[i])[2:].split('1')[-1])\n        num = min(e)\n        print(even - 1 + num)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    fil = []\n    flag = False\n    for i in l:\n        if i % 2 == 0:\n            b = list(bin(i)[2:])\n            b.reverse()\n            fil.append(b.index('1'))\n        else:\n            flag = True\n    if len(fil) == 0:\n        print(0)\n    else:\n        x = min(fil)\n        if flag:\n            x = 1\n        print(x + len(fil) - 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = []\n    l2 = []\n    p = 100000000\n    for i in range(n):\n        if l[i] % 2 == 0:\n            l1.append(l[i])\n        else:\n            l2.append(l[i])\n    l3 = []\n    if len(l2) > 0:\n        print(len(l1))\n        continue\n    for i in l1:\n        z = bin(i)\n        z = z[2:]\n        z = z[::-1]\n        q = z.index('1')\n        p = min(p, q)\n    print(p + len(l1) - 1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    flag = True\n    for x in a:\n        if x % 2 == 1:\n            flag = False\n            break\n    mx = 32\n    nod = 0\n    for x in a:\n        if x % 2 == 1:\n            nod += 1\n        elif flag:\n            while math.ceil(x / math.pow(2, mx)) != math.floor(x / math.pow(2, mx)):\n                mx -= 1\n    if flag == False:\n        print(n - nod)\n    else:\n        print(mx + n - 1)", "for _ in range(int(input())):\n    n = int(input())\n    (even, odd) = (0, 0)\n    num = list(map(int, input().split()))\n    for i in range(n):\n        if num[i] % 2 == 0:\n            even += 1\n    odd = n - even\n    if even == 0:\n        print(0)\n    elif odd != 0:\n        print(even)\n    else:\n        ans = even - 1\n        x = sum(num)\n        while x / 2 == int(x / 2):\n            x = x / 2\n            ans += 1\n        ans1 = 1000000000\n        for i in range(n):\n            x = str(bin(num[i]))\n            x = x[::-1]\n            z = x.find('1')\n            ans1 = min(ans1, z)\n        ans1 = ans1 + even - 1\n        print(min(ans, ans1))", "from cmath import sqrt\nfrom collections import defaultdict\nfrom math import *\nimport sys\nfrom typing import Counter\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = list(map(int, input().split()))[0]\n    a = list(map(int, input().split()))\n    odd = []\n    even = []\n    for i in a:\n        if i & 1:\n            odd.append(i)\n        else:\n            even.append(i)\n    if not even:\n        print(0)\n    elif odd:\n        print(len(even))\n    else:\n        minn = float('inf')\n        c = 40\n        for i in even:\n            c = min(c, bin(i)[2:][::-1].find('1'))\n            minn = min(minn, c)\n        print(minn + len(even) - 1)", "def f(n):\n    k = 0\n    while n != 1:\n        n /= 2\n        k += 1\n        if n % 2 == 1:\n            break\n    return k\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    b = []\n    c = set()\n    for el in a:\n        if el % 2 == 0:\n            b.append(el)\n            c.add(el)\n    if len(b) != len(a):\n        m = len(b)\n    else:\n        m = 100000000\n        for el in c:\n            m = min(m, f(el))\n        m = m + len(b) - 1\n    print(m)", "def main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    odd = 0\n    even = 0\n    for z in arr:\n        if z % 2:\n            odd += 1\n    even = n - odd\n    if odd > 0:\n        return even\n    pos = {}\n    for z in arr:\n        b = bin(z)\n        b = b[::-1]\n        for i in range(len(b)):\n            if b[i] == '1':\n                if i not in pos:\n                    pos[i] = 0\n                pos[i] += 1\n                break\n    srt = list(pos.keys())\n    srt.sort()\n    ans = 0\n    sm = srt[0]\n    freq = pos[sm]\n    ans += sm\n    ans += n - 1\n    return ans\n    ans += n - pos[srt[0]]\n    if freq % 2:\n        ans += freq - 1\n        ans += sm\n        return ans\n    else:\n        ans += freq - 2\n        pre = sum(arr)\n        b = bin(pre)\n        b = b[::-1]\n        for i in range(len(b)):\n            if b == '1':\n                break\n        addon = min(2 * sm, 1 + i)\n        ans += addon\n        return ans\n        if sm > 2:\n            ans += 1\n            ans += sm + 1\n            return ans\n        else:\n            ans += 2 * sm\n            return ans\n    return ans\nfor _ in range(int(input())):\n    print(main())", "def f(n):\n    k = 0\n    while n != 1:\n        n /= 2\n        k += 1\n        if n % 2 == 1:\n            break\n    return k\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = []\n    c = set()\n    for el in a:\n        if el % 2 == 0:\n            b.append(el)\n            c.add(el)\n    if len(b) != len(a):\n        m = len(b)\n    else:\n        m = 100000000\n        for el in c:\n            m = min(m, f(el))\n        m = m + len(b) - 1\n    print(m)", "t = int(input())\n\ndef zcount(n):\n    c = 0\n    for i in str(bin(n))[::-1]:\n        if i == '0':\n            c += 1\n        else:\n            return c\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    b = []\n    c = []\n    for i in a:\n        if i % 2 == 0:\n            c.append(zcount(i))\n            b.append(i)\n    if len(b) != n:\n        print(len(b))\n    else:\n        print(min(c) + len(b) - 1)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = sum((x % 2 == 1 for x in l))\n    r = 10000000000.0\n    if c:\n        print(n - c)\n        continue\n    for x in set(l):\n        cnt = 0\n        while x % 2 == 0:\n            x = x // 2\n            cnt += 1\n        r = min(r, cnt)\n    print(r + (n - c - 1))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    tokens = [int(x) for x in input().split()]\n    L = len(tokens)\n    O = sum((x % 2 for x in tokens))\n    if O > 0:\n        print(L - O)\n    else:\n        mindiv = -1\n        for tok in set(tokens):\n            d = 0\n            while tok % 2 == 0:\n                tok //= 2\n                d += 1\n            if mindiv == -1 or mindiv > d:\n                mindiv = d\n        y = mindiv + L - 1\n        print(y)", "import sys\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = [0 if i % 2 == 0 else 1 for i in l]\n    d = n - c.count(1)\n    if d != n:\n        print(d)\n    else:\n        ma = sys.maxsize\n        for m in set(l):\n            k = 0\n            while m % 2 == 0:\n                m = m / 2\n                k += 1\n            ma = min(ma, k)\n        print(ma + n - 1)", "x = int(input())\n\ndef cal(n, arr):\n    t = float('inf')\n    evn = 0\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            evn += 1\n    if evn == 0:\n        return 0\n    if evn < n:\n        return evn\n    for i in range(n):\n        p = bin(arr[i])\n        k = -1\n        for j in range(len(p) - 1, -1, -1):\n            if p[j] != '0':\n                k = len(p) - 1 - j\n                break\n        if k == 1:\n            return n\n        t = min(t, n - 1 + k)\n    return t\nfor jj in range(x):\n    n = int(input())\n    arr = [int(i) for i in input().split(' ')]\n    print(cal(n, arr))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 0\n    for i in l:\n        if i % 2 != 0:\n            c += 1\n    if c > 0:\n        print(n - c)\n    else:\n        s = set(l)\n        s1 = set()\n        for i in s:\n            j = 0\n            k = i\n            while k % 2 == 0:\n                k /= 2\n                j += 1\n            s1.add(j)\n        print(min(s1) + n - 1)", "t = int(input())\na = []\nfor i in range(t):\n    h = input()\n    a += [list(map(int, input().split()))]\nfor ela in a:\n    chet = []\n    necht = []\n    for el in ela:\n        if el % 2 == 1:\n            necht += [el]\n        else:\n            chet += [el]\n    if necht:\n        print(len(chet))\n    else:\n        sc = list(set(chet))\n        go = True\n        c = 0\n        while go:\n            c += 1\n            for i in range(len(sc)):\n                sc[i] = sc[i] / 2\n                if sc[i] % 2 == 1:\n                    print(len(chet) - 1 + c)\n                    go = False\n                    break", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    tokens = [int(x) for x in input().split()]\n    L = len(tokens)\n    O = sum((x % 2 for x in tokens))\n    if O > 0:\n        print(L - O)\n    else:\n        S = sum(tokens)\n        x = L - 1\n        while S % 2 == 0:\n            S //= 2\n            x += 1\n        mindiv = -1\n        for tok in set(tokens):\n            d = 0\n            while tok % 2 == 0:\n                tok //= 2\n                d += 1\n            if mindiv == -1 or mindiv > d:\n                mindiv = d\n        y = mindiv + L - 1\n        print(min(x, y))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = sum((x % 2 == 1 for x in l))\n    r = 10000000000.0\n    if c:\n        print(n - c)\n        continue\n    for x in set(l):\n        cnt = 0\n        while x % 2 == 0:\n            x = x // 2\n            cnt += 1\n        r = min(r, cnt)\n    print(r + (n - 1))", "n = int(input())\nfor _ in range(n):\n    k = int(input())\n    nums = list(map(int, input().split()))\n    odds = 0\n    for x in nums:\n        if x % 2 == 1:\n            odds += 1\n    if odds > 0:\n        print(k - odds)\n        continue\n    least = 100\n    seen = {}\n    for x in nums:\n        if x in seen:\n            continue\n        j = x\n        count = 0\n        while j % 2 == 0:\n            count += 1\n            j = j / 2\n        least = min(least, count)\n        seen[x] = count\n    print(least + k - 1)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    oddCount = 0\n    for i in a:\n        if not i % 2 == 0:\n            oddCount += 1\n    if oddCount > 0:\n        print(n - oddCount)\n    else:\n        a = set(a)\n        mp = float('inf')\n        for i in a:\n            x = i\n            c = 0\n            while x % 2 == 0 and c < mp:\n                x //= 2\n                c += 1\n            mp = min(mp, c)\n        print(n - 1 + mp)", "t = int(input(''))\nfor z in range(t):\n    n = int(input(''))\n    c = 0\n    d = 0\n    e = 0\n    t = 0\n    b = []\n    a = list(map(int, input('').split()))[:n]\n    for x in a:\n        if x % 2 != 0:\n            c += 1\n        else:\n            d += 1\n    if d == 0:\n        print(0)\n    elif c >= 1:\n        print(d)\n    else:\n        cl = set(a)\n        cl = list(cl)\n        for p in cl:\n            t = 0\n            while t != 1:\n                if p % 2 == 0:\n                    p = p / 2\n                    e += 1\n                else:\n                    t = 1\n            b.append(e)\n            e = 0\n        print(min(b) + d - 1)", "t = int(input())\nfor _ in range(t):\n    (n,) = map(int, input().split())\n    a = list(map(int, input().split()))\n    o = 0\n    for i in a:\n        if i % 2 != 0:\n            o += 1\n    if o > 0:\n        print(n - o)\n        continue\n    mp = float('inf')\n    a = set(a)\n    for i in a:\n        x = i\n        p = 0\n        while x % 2 == 0 and p < mp:\n            x //= 2\n            p += 1\n        mp = min(mp, p)\n    print(n - 1 + mp)", "for time in range(int(input())):\n    n = int(input())\n    j = float('inf')\n    nums = list(map(int, input().split()))\n    k = 0\n    numbers = set()\n    for j in nums:\n        if j % 2 == 0:\n            k += 1\n    if k != n:\n        print(k)\n        continue\n    best = float('inf')\n    for j in nums:\n        if j in numbers:\n            continue\n        numbers.add(j)\n        l = 0\n        while l < best and j % 2 == 0:\n            j = j // 2\n            l += 1\n        if best > l:\n            best = l\n    print(best + k - 1)", "def odd(x: int) -> bool:\n    return x & 1\n\ndef div2(x: int) -> int:\n    d = x & -x\n    cnt = 0\n    while d > 1:\n        cnt += 1\n        d >>= 1\n    return cnt\nfor _ in range(int(input())):\n    _ = input()\n    a = list(map(int, input().split()))\n    evens = [x for x in a if not odd(x)]\n    odds = [x for x in a if odd(x)]\n    if len(evens) == 0:\n        print(0)\n    elif len(evens) > len(odds):\n        if len(odds) != 0:\n            print(len(evens))\n        else:\n            tmp = div2(min(evens, key=div2)) + len(evens) - 1\n            print(tmp)\n    else:\n        print(len(evens))", "n = int(input())\ndatas = []\nfor i in range(n):\n    l = int(input())\n    data = input().split()\n    numbers = [int(n) for n in data]\n    datas.append(numbers)\n\ndef solve1(n):\n    for i in range(32):\n        if n >> i & 1:\n            return i\n\ndef solve(data):\n    even_count = 0\n    odd_count = 0\n    m = None\n    for n in data:\n        if n % 2 == 0:\n            even_count += 1\n            r = solve1(n)\n            if m is None:\n                m = r\n            else:\n                m = min(m, r)\n        else:\n            odd_count += 1\n    if odd_count:\n        print(even_count)\n    else:\n        print(m + even_count - 1)\nfor data in datas:\n    solve(data)", "def decimalToBinary(n):\n    return bin(n).replace('0b', '')\n\ndef helper(x):\n    x_ = decimalToBinary(x)\n    k = len(x_)\n    var = len(x_) - 1\n    k -= 1\n    while k >= 0:\n        if x_[k] == '1':\n            return var - k\n        else:\n            k -= 1\n\ndef min_operations(x, list):\n    num_even = 0\n    for i in range(x):\n        if list[i] % 2 == 0:\n            num_even += 1\n    if num_even == 0:\n        return 0\n    elif num_even < x:\n        return num_even\n    else:\n        num_operations = []\n        for i in range(x):\n            var = helper(list[i])\n            num_operations.append(var)\n        temp = min(num_operations)\n        ans = x - 1 + temp\n        return ans\nn = int(input())\nfor i in range(n):\n    x = int(input())\n    l = list(map(int, input().split()))\n    print(min_operations(x, l))", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef func(nums, count):\n    i = 0\n    found = False\n    oddNums = [n for n in nums if n % 2 == 0]\n    if not oddNums:\n        return 0\n    if len(oddNums) != len(nums):\n        return len(oddNums)\n    while not found:\n        for num in nums:\n            if num & 1 << i:\n                found = True\n                break\n        if not found:\n            i += 1\n    return i + len(oddNums) - 1\nnumberOfInput = inp()\nfor i in range(numberOfInput):\n    try:\n        a = inp()\n        b = inlt()\n        print(func(b, 0))\n    except:\n        break", "le = int(input())\ns = []\nfor y in range(le):\n    k = int(input())\n    l = [int(n) for n in input().split()]\n    ev = 0\n    for m in l:\n        if m % 2 == 0:\n            ev += 1\n    if ev < k:\n        s.append(ev)\n    elif ev == k:\n        rmin = []\n        for m in l:\n            q = bin(m)[::-1]\n            for i in range(len(q)):\n                if q[i] == '1':\n                    rmin.append(i)\n                    break\n        s.append(min(rmin) + k - 1)\nfor i in s:\n    print(i)", "import sys\n\ndef solve():\n    odd = False\n    even = 0\n    val = sys.maxsize\n    for i in range(n):\n        if arr[i] % 2:\n            odd = True\n        else:\n            even += 1\n            temp = arr[i]\n            count = 0\n            while temp & 1 == 0:\n                count += 1\n                temp >>= 1\n            val = min(val, count)\n    if odd:\n        return even\n    val += even - 1\n    return val\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = solve()\n    print(ans)", "def binc(n):\n    return bin(n).replace('0b', '')\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    count = 0\n    k = []\n    ind = []\n    for i in range(n):\n        if l[i] % 2 != 0:\n            count += 1\n    if count == 0:\n        for i in range(n):\n            k.append(list(str(binc(l[i]))))\n            ind.append(k[i][::-1].index('1'))\n        print(min(ind) + n - 1)\n    else:\n        print(n - count)", "def work(a):\n    (c, b) = (0, 0)\n    for o in a:\n        if o & 1:\n            c += 1\n        else:\n            b += 1\n    if c != 0:\n        print(b)\n    else:\n        mink = 1000000000.0 + 1\n        for o in a:\n            k = 0\n            while not o & 1:\n                k += 1\n                o //= 2\n            mink = min(mink, k)\n        print(mink + b - 1)\nn = int(input())\nwhile n:\n    n -= 1\n    input()\n    a = list(map(int, input().split()))\n    work(a)", "t = int(input())\nfor ran in range(t):\n    k = int(input())\n    li = list(map(int, input().split()))\n    even = 0\n    odd = 0\n    l3 = []\n    for x in li:\n        if x % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        l3.append(bin(x)[2:])\n    if odd == 0:\n        l4 = []\n        for y in l3:\n            for z in range(-1, -len(y) - 1, -1):\n                if y[z] == '1':\n                    l4.append(-z - 1)\n                    break\n        minn = 10 ** 10\n        for x in l4:\n            if x < minn:\n                minn = x\n        print(even + minn - 1)\n    else:\n        print(even)", "import io, os\n\ndef ri():\n    return int(input().strip())\n\ndef rl():\n    return list(map(int, input().strip().split()))\n\ndef Solve():\n    n = ri()\n    a = rl()\n    cnt = 0\n    for x in a:\n        cnt += x & 1\n    if cnt != 0:\n        print(n - cnt)\n        return\n    ans = 1000000000.0\n    for x in a:\n        tmp = 0\n        while x & 1 == 0:\n            tmp += 1\n            x >>= 1\n        ans = min(ans, tmp)\n    print(ans + n - 1)\nT = ri()\nwhile T:\n    T -= 1\n    Solve()"]