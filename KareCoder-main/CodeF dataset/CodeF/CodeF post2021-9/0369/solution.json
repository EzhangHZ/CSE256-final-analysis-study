["g = lambda : [*map(int, input().split())]\nfor _ in range(int(input())):\n    (N, M) = g()\n    ones = 0\n    Map = []\n    for _ in range(N):\n        s = input()\n        Map.append(s)\n        ones += s.count('1')\n    if ones == N * M:\n        print(ones - 2)\n    else:\n        flag = False\n        for i in range(N - 1):\n            for j in range(M - 1):\n                if (Map[i][j:j + 2] + Map[i + 1][j:j + 2]).count('0') > 1:\n                    flag = True\n                    break\n            if flag:\n                break\n        if flag:\n            print(ones)\n        else:\n            print(ones - 1)", "testnum = int(input())\nfor testcount in range(testnum):\n    (n, m) = map(int, input().split())\n    znum = 0\n    dz = False\n    l = []\n    for i in range(n):\n        s = input()\n        znum += s.count('0')\n        if not dz:\n            l.append('1' + s + '1')\n            if s.find('00') >= 0:\n                dz = True\n    if znum <= 1:\n        print(n * m - 2)\n        continue\n    for i in range(n - 1):\n        if dz:\n            break\n        for j in range(1, m + 1):\n            if l[i][j] == '0' and l[i + 1][j - 1:j + 2].find('0') >= 0:\n                dz = True\n                break\n    if dz:\n        print(n * m - znum)\n    else:\n        print(n * m - znum - 1)", "for _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    a = []\n    for i in range(n):\n        a.append(input())\n    count = 0\n    for row in a:\n        for j in row:\n            if j == '1':\n                count += 1\n    if count == n * m:\n        print(count - 2)\n        continue\n    if count == n * m - 1:\n        print(count - 1)\n        continue\n    flag = False\n    for i in range(1, n):\n        for j in range(1, m):\n            if (a[i - 1][j - 1] == '0') + (a[i - 1][j] == '0') + (a[i][j - 1] == '0') + (a[i][j] == '0') + 0 > 1:\n                flag = True\n                break\n        if flag:\n            break\n    if flag:\n        print(count)\n    else:\n        print(count - 1)", "a = int(input())\nfor x in range(a):\n    (b, c) = map(int, input().split())\n    j = []\n    s = 0\n    for y in range(b):\n        d = input()\n        s += d.count('1')\n        j.append(d)\n    p = 0\n    q = 0\n    for y in range(b):\n        for z in range(c):\n            if j[y][z] == '0':\n                p = -1\n                if z - 1 >= 0 and y - 1 >= 0:\n                    if j[y - 1][z - 1] == '0':\n                        q = -1\n                        break\n                if z + 1 < c and y + 1 < b:\n                    if j[y + 1][z + 1] == '0':\n                        q = -1\n                        break\n                if z - 1 >= 0 and y + 1 < b:\n                    if j[y + 1][z - 1] == '0':\n                        q = -1\n                        break\n                if z + 1 < c and y - 1 >= 0:\n                    if j[y - 1][z + 1] == '0':\n                        q = -1\n                        break\n                if z - 1 >= 0:\n                    if j[y][z - 1] == '0':\n                        q = -1\n                        break\n                if y - 1 >= 0:\n                    if j[y - 1][z] == '0':\n                        q = -1\n                        break\n                if y + 1 < b:\n                    if j[y + 1][z] == '0':\n                        q = -1\n                        break\n                if z + 1 < c:\n                    if j[y][z + 1] == '0':\n                        q = -1\n                        break\n    if q == -1:\n        print(s)\n    elif p == -1:\n        print(s - 1)\n    else:\n        print(s - 2)", "for _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    matrix = []\n    ones = False\n    zeros = False\n    ops = 0\n    for _ in range(x):\n        s = input().strip()\n        ops += s.count('1')\n        if '1' in s:\n            ones = True\n        if '0' in s:\n            zeros = True\n        matrix.append([j for j in s])\n    if not ones:\n        print(0)\n        continue\n    if not zeros:\n        print(ops - 2)\n        continue\n    ops -= 1\n    flag = False\n    for i in range(x - 1):\n        for j in range(y - 1):\n            count = 0\n            if matrix[i][j] == '0':\n                count += 1\n            if matrix[i + 1][j] == '0':\n                count += 1\n            if matrix[i + 1][j + 1] == '0':\n                count += 1\n            if matrix[i][j + 1] == '0':\n                count += 1\n            if count >= 2:\n                ops += 1\n                flag = True\n                break\n        if flag:\n            break\n    print(ops)", "import sys, math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    a = []\n    ones = 0\n    flag = 0\n    for i in range(n):\n        s = input().strip()\n        a.append(s)\n        ones += s.count('1')\n        if i == 0:\n            if '00' in s:\n                flag = 1\n\n    def check(i, j):\n        if 0 <= i <= n - 1 and 0 <= j <= m - 1 and (a[i][j] == '0'):\n            return True\n        return False\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '0':\n                if check(i, j + 1) or check(i, j - 1) or check(i - 1, j) or check(i + 1, j) or check(i + 1, j + 1) or check(i + 1, j - 1) or check(i - 1, j + 1) or check(i - 1, j + 1):\n                    flag = 1\n                    break\n    for i in range(n - 1):\n        if a[i][0] == a[i + 1][0] == '0':\n            flag = 1\n    if flag == 0:\n        if ones == m * n:\n            ans = ones - 2\n        elif ones == 0:\n            ans = 0\n        else:\n            ans = ones - 1\n    else:\n        ans = ones\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [0] * n\n    for i in range(n):\n        a[i] = list(input())\n    count = 0\n    for row in a:\n        for v in row:\n            if v == '1':\n                count += 1\n    if count == n * m:\n        print(count - 2)\n        continue\n    if count == n * m - 1:\n        print(count - 1)\n        continue\n    flag = False\n    for i in range(1, n):\n        for j in range(1, m):\n            if 1 < 0 + (a[i - 1][j - 1] == '0') + (a[i - 1][j] == '0') + (a[i][j - 1] == '0') + (a[i][j] == '0'):\n                flag = True\n                break\n        if flag:\n            break\n    if flag:\n        print(count)\n    else:\n        print(count - 1)", "t = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    d = [list(map(int, input())) for x in range(n)]\n    c = sum((sum(r) for r in d))\n    perfect = False\n    if c == n * m:\n        print(c - 2)\n    elif c == 0:\n        print(0)\n    else:\n        for p in range(n - 1):\n            for q in range(m - 1):\n                s = d[p][q] + d[p][q + 1] + d[p + 1][q] + d[p + 1][q + 1]\n                if s <= 2:\n                    perfect = True\n                    break\n            if perfect:\n                break\n        print(c if perfect else c - 1)", "t = int(input())\nres = []\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    a = []\n    s = 0\n    for _ in range(n):\n        a.append(list(map(int, input())))\n        s += sum(a[-1])\n    if s == n * m:\n        res.append(s - 2)\n    elif s == 0:\n        res.append(0)\n    else:\n        L = False\n        for i in range(n):\n            for j in range(m):\n                if i + 1 < n and a[i][j] == 0 and (a[i + 1][j] == 0):\n                    L = True\n                    break\n                if j + 1 < m and a[i][j] == 0 and (a[i][j + 1] == 0):\n                    L = True\n                    break\n                if j + 1 < m and a[i][j + 1] == 0 and (i + 1 < n) and (a[i + 1][j] == 0):\n                    L = True\n                    break\n                if j - 1 > -1 and a[i][j - 1] == 0 and (i + 1 < n) and (a[i + 1][j] == 0):\n                    L = True\n                    break\n                if i - 1 > -1 and a[i - 1][j] == 0 and (j + 1 < m) and (a[i][j + 1] == 0):\n                    L = True\n                    break\n                if i - 1 > -1 and a[i - 1][j] == 0 and (j - 1 > -1) and (a[i][j - 1] == 0):\n                    L = True\n                    break\n        if L:\n            res.append(s)\n        else:\n            res.append(s - 1)\nfor r in res:\n    print(r)", "t = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    d = [list(map(int, input())) for x in range(n)]\n    c = sum((sum(r) for r in d))\n    perfect = False\n    if c == n * m:\n        print(c - 2)\n    elif c == 0:\n        print(0)\n    else:\n        for p in range(n - 1):\n            for q in range(m - 1):\n                s = d[p][q] + d[p][q + 1] + d[p + 1][q] + d[p + 1][q + 1]\n                if s <= 2:\n                    perfect = True\n                    break\n            if perfect:\n                break\n        print(c if perfect else c - 1)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    grid = []\n    direction = [(1, 0), (0, 1), (-1, 0), (0, -1), (1, 1), (-1, -1), (1, -1), (-1, 1)]\n    ones = 0\n    zeros = 0\n    for _ in range(n):\n        grid.append(list(input()))\n        ones += grid[-1].count('1')\n        zeros += grid[-1].count('0')\n    found = False\n    for r in range(n):\n        for c in range(m):\n            if grid[r][c] == '0':\n                for (dx, dy) in direction:\n                    (newr, newc) = (r + dx, c + dy)\n                    if 0 <= newr < n and 0 <= newc < m:\n                        if grid[newr][newc] == '0':\n                            found = True\n                            break\n                if found:\n                    break\n        if found:\n            break\n    if found:\n        print(ones)\n    elif zeros > 0:\n        print(ones - 1)\n    else:\n        print(ones - 2)", "t = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    d = [list(map(int, input())) for x in range(n)]\n    c = sum((sum(r) for r in d))\n    perfect = False\n    if c == n * m:\n        print(c - 2)\n    elif c == 0:\n        print(0)\n    else:\n        for p in range(n - 1):\n            for q in range(m - 1):\n                s = d[p][q] + d[p][q + 1] + d[p + 1][q] + d[p + 1][q + 1]\n                if s <= 2:\n                    perfect = True\n                    break\n            if perfect:\n                break\n        print(c if perfect else c - 1)", "t = int(input())\nfor iteration in range(t):\n    (n, m) = tuple(map(int, input().split()))\n    rows = []\n    weight = 0\n    for i in range(n):\n        row = input()\n        weight += sum(list(map(int, list(row))))\n        rows.append(row)\n    if weight == n * m:\n        print(n * m - 2)\n    else:\n        double_zero = False\n        for i in range(n - 1):\n            for j in range(m - 1):\n                zero_count = 0\n                for k in (i, i + 1):\n                    for l in (j, j + 1):\n                        if rows[k][l] == '0':\n                            zero_count += 1\n                if zero_count >= 2:\n                    double_zero = True\n                    break\n            if double_zero:\n                break\n        if double_zero:\n            print(weight)\n        else:\n            print(weight - 1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input())) for i in range(n)]\n    ones = sum(map(sum, a))\n    if ones == n * m:\n        print(ones - 2)\n    else:\n        is_2_0 = False\n        for row in range(n):\n            for col in range(1, m):\n                if a[row][col] == 0 and (a[row][col - 1] == 0 or (row and a[row - 1][col - 1] == 0)):\n                    is_2_0 = True\n                    break\n            if is_2_0:\n                break\n        if not is_2_0:\n            for col in range(m):\n                for row in range(1, n):\n                    if a[row][col] == 0 and (a[row - 1][col] == 0 or (col < m - 1 and a[row - 1][col + 1] == 0)):\n                        is_2_0 = True\n                        break\n                if is_2_0:\n                    break\n        if is_2_0:\n            print(ones)\n        else:\n            print(ones - 1)", "t = int(input())\nfor i in range(t):\n    (n, m) = list(map(int, input().split()))\n    d = [list(map(int, input())) for x in range(n)]\n    c = sum((sum(r) for r in d))\n    perfect = False\n    if c == n * m:\n        print(c - 2)\n    elif c == 0:\n        print(0)\n    else:\n        for i in range(n - 1):\n            for j in range(m - 1):\n                s = d[i][j] + d[i + 1][j] + d[i][j + 1] + d[i + 1][j + 1]\n                if s <= 2:\n                    perfect = True\n                    break\n            if perfect:\n                break\n        print(c if perfect else c - 1)", "t = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    d = [list(map(int, input())) for x in range(n)]\n    c = sum((sum(r) for r in d))\n    perfect = False\n    if c == n * m:\n        print(c - 2)\n    elif c == 0:\n        print(0)\n    else:\n        for p in range(n - 1):\n            for q in range(m - 1):\n                s = d[p][q] + d[p][q + 1] + d[p + 1][q] + d[p + 1][q + 1]\n                if s <= 2:\n                    perfect = True\n                    break\n            if perfect:\n                break\n        print(c if perfect else c - 1)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef solve():\n    (n, m) = inlt()\n    matrix = []\n    for _ in range(n):\n        matrix.append(insr())\n    one = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '1':\n                one += 1\n    zero = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '0':\n                zero += 1\n                for (ni, nj) in [[i - 1, j], [i + 1, j], [i, j - 1], [i, j + 1], [i - 1, j - 1], [i - 1, j + 1], [i + 1, j - 1], [i + 1, j + 1]]:\n                    if 0 <= ni < n and 0 <= nj < m and (matrix[ni][nj] == '0'):\n                        return one\n    if zero == 0:\n        return one - 2\n    return one - 1\nfor _ in range(inp()):\n    print(solve())", "def e(arr, i, j):\n    if i < 0 or i >= len(arr):\n        return -1\n    if j < 0 or j >= len(arr[i]):\n        return -1\n    return arr[i][j]\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [input() for __ in range(n)]\n    adjacent = False\n    diagonal = False\n    ones = 0\n    for (i, r) in enumerate(a):\n        for (j, x) in enumerate(r):\n            if x == '0' and (not (adjacent or diagonal)):\n                if e(a, i, j + 1) == '0' or e(a, i, j - 1) == '0' or e(a, i - 1, j) == '0' or (e(a, i + 1, j) == '0'):\n                    adjacent = True\n                if e(a, i - 1, j - 1) == '0' or e(a, i - 1, j + 1) == '0' or e(a, i + 1, j - 1) == '0' or (e(a, i + 1, j + 1) == '0'):\n                    diagonal = True\n            elif x == '1':\n                ones += 1\n    if adjacent or diagonal:\n        print(ones)\n    elif ones == n * m:\n        print(ones - 2)\n    else:\n        print(ones - 1)", "DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n\ndef main():\n    length = int(input())\n    for _ in range(length):\n        (row, col) = list(map(int, input().split(' ')))\n        graph = []\n        for _ in range(row):\n            line = input()\n            graph.append(line)\n        res = solver(graph, row, col)\n        sum_val = 0\n        for r in range(row):\n            for c in range(col):\n                if graph[r][c] == '1':\n                    sum_val += 1\n        print(sum_val - 2 + res)\n\ndef solver(graph, row, col):\n    res = 0\n    for r in range(row):\n        for c in range(col):\n            if graph[r][c] == '0':\n                res = 1\n                for (_r, _c) in DIRECTIONS:\n                    if not isValid(r + _r, c + _c, row, col):\n                        continue\n                    if graph[r + _r][c + _c] == '0':\n                        return 2\n    return res\n\ndef isValid(r, c, row, col):\n    if r < 0 or r >= row or c < 0 or (c >= col):\n        return False\n    return True\nmain()", "t = int(input())\nfor i in range(t):\n    (n, m) = list(map(int, input().split()))\n    totalOnes = 0\n    ans = 0\n    caveFound = False\n    maxCave = 0\n    inpMat = []\n    for row in range(n):\n        rowInp = list(map(int, list(input())))\n        inpMat.append(rowInp)\n        totalOnes += sum(rowInp)\n        if not caveFound:\n            for col in range(m):\n                if rowInp[col] == 0:\n                    maxCave = 1\n                    if row != 0 and inpMat[row - 1][col] == 0:\n                        maxCave = 2\n                        caveFound = True\n                    elif col != 0 and inpMat[row][col - 1] == 0:\n                        maxCave = 2\n                        caveFound = True\n                    elif col != 0 and row != 0 and (inpMat[row - 1][col - 1] == 0):\n                        maxCave = 2\n                        caveFound = True\n                    elif row != 0 and col != m - 1 and (inpMat[row - 1][col + 1] == 0):\n                        maxCave = 2\n                        caveFound = True\n    if caveFound:\n        print(totalOnes)\n    elif maxCave == 1:\n        print(totalOnes - 1)\n    else:\n        print(totalOnes - 2)", "xx = [1, 1, 1, 0, 0, -1, -1, -1]\nyy = [-1, 0, 1, 1, -1, -1, 0, 1]\nfor _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split(' ')]\n    mp = []\n    for i in range(n):\n        mp.append(input())\n    ans = 0\n    flag1 = 0\n    flag2 = 0\n    for i in range(n):\n        for j in range(m):\n            if mp[i][j] == '1':\n                ans += 1\n            else:\n                if flag2:\n                    continue\n                flag1 = 1\n                for k in range(8):\n                    ii = i + xx[k]\n                    jj = j + yy[k]\n                    if ii >= 0 and jj >= 0 and (ii < n) and (jj < m) and (mp[ii][jj] == mp[i][j]):\n                        flag2 = 1\n    if flag2:\n        ans = ans\n    elif flag1:\n        ans = max(ans - 1, 0)\n    else:\n        ans = max(ans - 2, 0)\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    cords = [[str(x) for x in input().split()] for i in range(n)]\n\n    def find_all(x, y):\n        lis = [[-1, -1], [0, -1], [1, -1], [-1, 0], [1, 0], [-1, 1], [0, 1], [1, 1]]\n        lis2 = []\n        for (x1, y1) in lis:\n            if x1 + int(x) != -1 and x1 + int(x) != m:\n                if y1 + int(y) != -1 and y1 + int(y) != n:\n                    lis2.append([x1, y1])\n        for i in lis2:\n            if cords[i[1] + y][0][i[0] + x] == '0':\n                return True\n        return False\n    poss = False\n    count = 0\n    for i in range(n):\n        for x in range(m):\n            if cords[i][0][x] == '0':\n                count += 1\n                if poss == False:\n                    if find_all(x, i):\n                        poss = True\n    if poss:\n        print(n * m - count)\n    elif count > 0:\n        print(n * m - count - 1)\n    else:\n        print(n * m - 2)", "t = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    d = [list(map(int, input())) for x in range(n)]\n    c = sum((sum(r) for r in d))\n    perfect = False\n    if c == n * m:\n        print(c - 2)\n    elif c == 0:\n        print(0)\n    else:\n        for p in range(n - 1):\n            for q in range(m - 1):\n                s = d[p][q] + d[p][q + 1] + d[p + 1][q] + d[p + 1][q + 1]\n                if s <= 2:\n                    perfect = True\n                    break\n            if perfect:\n                break\n        print(c if perfect else c - 1)", "import sys\nt = int(input())\nfor _ in range(t):\n    nm = [int(ii) for ii in input().split()]\n    (n, m) = (nm[0], nm[1])\n    mas = [[2] * (m + 1)] * (n + 1)\n    (a, stop) = (0, 0)\n    for iii in range(n):\n        s = [int(ii) for ii in input()]\n        a += sum(s)\n        mas[iii] = s + [2]\n    if a <= 2:\n        print(a)\n        continue\n    if a == n * m:\n        print(a - 2)\n        continue\n    for i in range(n):\n        if stop == 1:\n            break\n        for j in range(m):\n            if mas[i][j] == 0 and (mas[i][j + 1] == 0 or mas[i + 1][j] == 0 or mas[i + 1][j + 1] == 0):\n                stop = 1\n                break\n            if mas[i][j + 1] == 0 and mas[i + 1][j] == 0:\n                stop = 1\n                break\n    if stop == 1:\n        print(a)\n    else:\n        print(a - 1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [input() for i in range(n)]\n    q = False\n    w = False\n    one = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '1':\n                one += 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '0':\n                zero = 0\n                for e in range(max(0, i - 1), min(n - 1, i + 1) + 1):\n                    for r in range(max(0, j - 1), min(m - 1, j + 1) + 1):\n                        if a[e][r] == '0':\n                            zero += 1\n                if zero >= 2:\n                    w = True\n                    break\n                if zero == 1:\n                    q = True\n        if w:\n            break\n    if w:\n        print(one)\n    elif q:\n        print(one - 1)\n    else:\n        print(one - 2)", "import itertools as it\n\ndef spoogly():\n    dims = input().split()\n    n = int(dims[0])\n    m = int(dims[1])\n    mat = [0] * n\n    for i in range(n):\n        mat[i] = [int(x) for x in input()]\n    N = sum((sum(mat[i]) for i in range(n)))\n    if N == n * m:\n        print(N - 2)\n    else:\n        for (i, j) in it.product(list(range(n - 1)), list(range(m - 1))):\n            count = sum((mat[u][v] for u in range(i, i + 2) for v in range(j, j + 2)))\n            if count in [0, 1, 2]:\n                print(N)\n                return\n        print(N - 1)\nhowmanyspoogly = int(input())\nfor i in range(howmanyspoogly):\n    spoogly()", "def obok(kordy, ycor):\n    for linia in kordy:\n        for x in range(len(linia)):\n            if linia[x - 1] + 1 == linia[x]:\n                return 0\n    for linia in range(ycor - 1):\n        for x in kordy[linia]:\n            temp = (x - 1, x, x + 1)\n            for x2 in kordy[linia + 1]:\n                if x2 in temp:\n                    return 0\n    return 1\nfor _ in range(int(input())):\n    (y, x) = map(int, input().split())\n    (zera, cords) = (0, [])\n    for row in range(y):\n        rzad = []\n        linia = input()\n        for i in range(x):\n            if linia[i] == '0':\n                zera += 1\n                rzad += [i]\n        cords.append(rzad)\n    if zera == 0:\n        print(x * y - 2)\n    else:\n        print(x * y - zera - obok(cords, y))", "import sys\nt = int(sys.stdin.readline())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    lst = []\n    for j in range(n):\n        s = input()\n        lst.append(s)\n    zer = 0\n    one = 0\n    for x in range(n):\n        for y in range(m):\n            if lst[x][y] == '0':\n                zer += 1\n            else:\n                one += 1\n    if zer == 0:\n        print(one - 2)\n    else:\n        e = 0\n        for x in range(n - 1):\n            for y in range(m - 1):\n                a = lst[x][y]\n                b = lst[x + 1][y]\n                c = lst[x][y + 1]\n                d = lst[x + 1][y + 1]\n                lst1 = [a, b, c, d]\n                z = lst1.count('0')\n                if z >= 2:\n                    e += 1\n                    break\n        if e > 0:\n            print(one)\n        else:\n            print(one - 1)", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    counter = 0\n    d = -2\n    prev_zeros = [False] * m\n    for i in range(n):\n        zeros = [False] * m\n        s = input()\n        for j in range(m):\n            if s[j] == '1':\n                counter += 1\n            else:\n                zeros[j] = True\n                if j > 0 and zeros[j - 1]:\n                    d = 0\n                elif prev_zeros[j]:\n                    d = 0\n                elif j > 0 and prev_zeros[j - 1]:\n                    d = 0\n                elif j < m - 1 and prev_zeros[j + 1]:\n                    d = 0\n                elif d == -2:\n                    d = -1\n        prev_zeros = zeros\n    print(counter + d)", "def countone(a, n, m):\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                count += 1\n    return count\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split(' '))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input())))\n    count = countone(a, n, m)\n    if count == 0:\n        print(0)\n    elif count == n * m:\n        print(count - 2)\n    elif n == m == 2:\n        if count == 1:\n            print(count)\n        else:\n            print(2)\n    else:\n        case = 'no'\n        for i in range(n - 1):\n            for j in range(m - 1):\n                if a[i][j] == a[i][j + 1] == 0 or a[i][j] == a[i + 1][j] == 0 or a[i][j + 1] == a[i + 1][j + 1] == 0 or (a[i + 1][j] == a[i + 1][j + 1] == 0) or (a[i][j] == a[i + 1][j + 1] == 0):\n                    case = 'a'\n                    break\n                elif a[i + 1][j] == a[i][j + 1] == 0:\n                    case = 'a'\n                    break\n        if case == 'a':\n            print(count)\n        else:\n            print(count - 1)", "def solve():\n    x = int(input())\n    for _ in range(x):\n        [m, n] = list(map(int, input().split()))\n        matrix = list()\n        for __ in range(m):\n            matrix.append(list(map(int, list(input()))))\n        ones = 0\n        zs = set()\n        adj = False\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 1:\n                    ones += 1\n                elif not adj:\n                    zs.add((i, j))\n                    moves = [[-1, 0], [1, 0], [0, -1], [0, 1], [1, 1], [-1, -1], [-1, 1], [1, -1]]\n                    for move in moves:\n                        if (i + move[0], j + move[1]) in zs:\n                            adj = True\n                            break\n        if ones == 0:\n            print(0)\n        elif adj:\n            print(ones)\n        elif m * n - ones > 0:\n            print(ones - 1)\n        else:\n            print(ones - 2)\nsolve()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    before = []\n    flag = False\n    flag2 = True\n    count = 0\n    for _ in range(n):\n        nxt = []\n        left = False\n        for (i, num) in enumerate(map(int, list(input().strip()))):\n            count += num\n            if flag2:\n                if num == 0:\n                    flag = True\n                    nxt.append(i)\n                    if i in before or i - 1 in before or i + 1 in before or left:\n                        check = 0\n                        flag2 = False\n                    left = True\n                else:\n                    left = False\n        before = nxt\n    if flag2:\n        if flag:\n            check = 1\n        else:\n            check = 2\n    print(count - check)", "t = int(input())\nfor ti in range(t):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, list(input()))))\n    OneCnt = 0\n    for i in a:\n        OneCnt += sum(i)\n    if OneCnt >= n * m:\n        MINU = 2\n    else:\n        MINU = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                flag = 1\n                for di in range(-1, 2):\n                    for dj in range(-1, 2):\n                        if (di != 0) | (dj != 0):\n                            if (i + di < n) & (i + di >= 0) & (j + dj < m) & (j + dj >= 0):\n                                if a[i + di][j + dj] == 0:\n                                    flag = 0\n                                    break\n                if flag == 0:\n                    MINU = 0\n        if MINU == 0:\n            break\n    print(OneCnt - MINU)", "import math\nimport heapq\nimport itertools\nfrom typing import List\nimport bisect\nimport collections\nfrom collections import defaultdict\nfrom collections import Counter\nfrom collections import deque\ntime = int(input())\nfor i in range(time):\n    nm = input()\n    rc = nm.split(' ')\n    row = int(rc[0])\n    col = int(rc[1])\n    one = 0\n    lines = []\n    doublezero = False\n    for r in range(row):\n        line = input()\n        lines.append(line)\n        cd = Counter(line)\n        if '1' in cd:\n            one += cd['1']\n        if doublezero:\n            continue\n        if '00' in line:\n            doublezero = True\n    if doublezero:\n        print(one)\n    elif one == row * col:\n        print(one - 2)\n    else:\n        zeros = set()\n        for r in range(row):\n            for c in range(col):\n                if lines[r][c] == '0':\n                    zeros.add((r, c))\n                    if r - 1 >= 0 and lines[r][c] == lines[r - 1][c]:\n                        doublezero = True\n                        break\n            if doublezero:\n                break\n        if doublezero:\n            print(one)\n        else:\n            for (zr, zc) in zeros:\n                for (ox, oy) in [(-1, -1), [1, 1], [-1, 1], [1, -1]]:\n                    (nr, nz) = (zr + ox, zc + oy)\n                    if (nr, nz) in zeros:\n                        doublezero = True\n                        break\n                if doublezero:\n                    break\n            if doublezero:\n                print(one)\n            else:\n                print(one - 1)", "def isValid(i, j, n, m):\n    return i >= 0 and i < n and (j >= 0) and (j < m)\nts = int(input())\nfor _ in range(ts):\n    (n, m) = [int(i) for i in input().split()]\n    arr = []\n    for _ in range(n):\n        x = input()\n        l = []\n        for a in x:\n            l.append(a)\n        arr.append(l)\n    count = 0\n    flag = False\n    found = False\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] == '0':\n                found = True\n            if arr[i][j] == '1':\n                count += 1\n            elif flag == False:\n                if isValid(i + 1, j, n, m):\n                    if arr[i + 1][j] == '0':\n                        flag = True\n                if isValid(i, j + 1, n, m):\n                    if arr[i][j + 1] == '0':\n                        flag = True\n                if isValid(i + 1, j + 1, n, m):\n                    if arr[i + 1][j + 1] == '0':\n                        flag = True\n                if isValid(i + 1, j - 1, n, m):\n                    if arr[i + 1][j - 1] == '0':\n                        flag = True\n    if count == 0:\n        print(0)\n        continue\n    if flag:\n        print(count)\n    elif found:\n        print(count - 1)\n    else:\n        print(count - 2)", "n = int(input())\nfor _ in range(n):\n    dim = input().split(' ')\n    i = int(dim[0])\n    j = int(dim[1])\n    matrix = []\n    adj = 0\n    ones = 0\n    bool = False\n    for x in range(i):\n        matrix += input().split()\n        for y in range(j):\n            if matrix[x][y] == '0':\n                adj = 1\n                if y < j - 1 and matrix[x][y + 1] == '0' or (x > 0 and matrix[x - 1][y] == '0') or (y < j - 1 and x > 0 and (matrix[x - 1][y + 1] == '0')) or (x > 0 and y > 0 and (matrix[x - 1][y - 1] == '0')):\n                    bool = True\n            else:\n                ones += 1\n    if bool:\n        print(ones)\n    elif adj == 1:\n        print(ones - 1)\n    else:\n        print(ones - 2)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, m) = map(int, input().split())\n    s = []\n    o = 0\n    v = []\n    for i in range(n):\n        l = list(input())\n        o += l.count('1')\n        for j in range(len(l)):\n            if l[j] == '0':\n                v.append([i, j])\n        s.append(l)\n    if o == n * m:\n        print(n * m - 2)\n    elif o == 0:\n        print(0)\n    else:\n        y = 0\n        for i in range(len(v)):\n            (c, d) = (v[i][0], v[i][1])\n            ind = []\n            for j in range(3):\n                ind.append([c - 1, d - 1 + j])\n            ind.append([c, d + 1])\n            for j in range(3):\n                ind.append([c + 1, d - 1 + j])\n            ind.append([c, d - 1])\n            for j in ind:\n                if (j[0] >= 0 and j[1] >= 0) and (j[0] < n and j[1] < m):\n                    if s[j[0]][j[1]] == '0':\n                        y = 1\n                        break\n            if y:\n                break\n        if y:\n            print(o)\n        else:\n            print(o - 1)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    cnt = 0\n    a = []\n    for i in range(n):\n        s = [*map(int, input())]\n        cnt += s.count(1)\n        a.append(s)\n    c2 = any((True if sum(x[i:i + 2] + y[i:i + 2]) < 3 else False for (x, y) in zip(a, a[1:]) for i in range(m - 1)))\n    print(cnt - 2 + c2 + (cnt != m * n))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    m = []\n    a = [1]\n    b = 0\n    for i in range(k):\n        a.append(1)\n    a.append(1)\n    m.append(a)\n    a = [1]\n    for i in range(n):\n        r = input()\n        for l in r:\n            a.append(int(l))\n            if l == '1':\n                b += 1\n        a.append(1)\n        m.append(a)\n        a = [1]\n    for i in range(k):\n        a.append(1)\n    a.append(1)\n    m.append(a)\n    a = [1]\n    jeste = True\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if m[i][j] == 0 and 0 in {m[i - 1][j], m[i + 1][j], m[i - 1][j - 1], m[i - 1][j + 1], m[i + 1][j - 1], m[i + 1][j + 1], m[i][j - 1], m[i][j + 1]}:\n                jeste = False\n                break\n    if jeste and b != 0 and (b != n * k):\n        b -= 1\n    if b == n * k:\n        b -= 2\n    print(b)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    cnt = 0\n    a = []\n    for i in range(n):\n        s = [*map(int, input())]\n        cnt += s.count(1)\n        a.append(s)\n    c2 = any((True for (x, y) in zip(a, a[1:]) for i in range(m - 1) if sum(x[i:i + 2] + y[i:i + 2]) < 3))\n    print(cnt - 2 + c2 + (cnt != m * n))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    L = []\n    s = 0\n    for i in range(n):\n        M = list(input())\n        s += M.count('1')\n        L.append(M)\n    if s == 0 or s == 1:\n        print(s)\n        continue\n    if s == n * m:\n        print(s - 2)\n        continue\n    flag1 = 0\n    for i in range(n):\n        flag2 = 0\n        for j in range(1, m):\n            if L[i][j] == L[i][j - 1] == '0':\n                flag2 = 1\n                break\n        if flag2:\n            flag1 = 1\n            break\n    for i in range(1, n):\n        flag2 = 0\n        for j in range(m):\n            if L[i][j] == L[i - 1][j] == '0':\n                flag2 = 1\n                break\n        if flag2:\n            flag1 = 1\n            break\n    for i in range(n - 1):\n        flag2 = 0\n        for j in range(m - 1):\n            if L[i][j] == L[i + 1][j + 1] == '0':\n                flag2 = 1\n                break\n        if flag2:\n            flag1 = 1\n            break\n    for i in range(n - 1):\n        flag2 = 0\n        for j in range(1, m):\n            if L[i][j] == L[i + 1][j - 1] == '0':\n                flag2 = 1\n                break\n        if flag2:\n            flag1 = 1\n            break\n    if flag1:\n        print(s)\n    else:\n        print(s - 1)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    c2 = cnt = 0\n    a = []\n    for i in range(n):\n        s = [*map(int, input())]\n        cnt += s.count(1)\n        a.append(s)\n    for (x, y) in zip(a, a[1:]):\n        for i in range(m - 1):\n            if sum(x[i:i + 2] + y[i:i + 2]) < 3:\n                c2 += 1\n                break\n    if c2:\n        print(cnt)\n    elif cnt != m * n:\n        print(cnt - 1)\n    else:\n        print(cnt - 2)", "for i in range(int(input())):\n    (m, n) = map(int, input().split())\n    (a, b, c) = ([input() for i in range(m)], 0, 2)\n    for i in range(m):\n        for j in range(n):\n            if a[i][j] == '0':\n                c = min(1, c)\n                if j + 1 != n and a[i][j + 1] == '0' or (i + 1 != m and a[i + 1][j] == '0') or (j + 1 != n and i + 1 != m and (a[i + 1][j + 1] == '0')) or (j != 0 and i + 1 != m and (a[i + 1][j - 1] == '0')):\n                    c = 0\n        b += a[i].count('1')\n    print(b - c)", "def maximum_angles_changing(n, m):\n    matr = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        matr[i] = list(map(int, list(input())))\n    c_0 = 0\n    c_1 = sum([i.count(1) for i in matr])\n    cur_c_0 = -10000\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if not matr[i][j]:\n                c_0 += 1\n            if not matr[i][j + 1]:\n                c_0 += 1\n            if not matr[i + 1][j]:\n                c_0 += 1\n            if not matr[i + 1][j + 1]:\n                c_0 += 1\n            if c_0 > cur_c_0:\n                cur_c_0 = c_0\n            c_0 = 0\n    if cur_c_0 == 0:\n        print(c_1 - 2)\n    elif cur_c_0 == 1:\n        print(c_1 - 1)\n    else:\n        print(c_1)\nt = int(input())\nwhile t:\n    t -= 1\n    (n, m) = map(int, input().split())\n    maximum_angles_changing(n, m)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [list(map(int, input())) for i in range(n)]\n    c = sum((sum(r) for r in l))\n    perfect = False\n    for i in range(n - 1):\n        for j in range(m - 1):\n            s = l[i][j] + l[i + 1][j] + l[i + 1][j + 1] + l[i][j + 1]\n            if s <= 2:\n                perfect = True\n                break\n        if perfect:\n            break\n    if c == 0:\n        print(0)\n    elif c == n * m:\n        print(c - 2)\n    else:\n        print(c if perfect else c - 1)", "for _ in range(int(input())):\n    (r, c) = list(map(int, input().split()))\n    g = [input() for i in range(r)]\n    ct = ''.join(g).count('1')\n    res = max(((g[i][j] + g[i + 1][j] + g[i + 1][j + 1] + g[i][j + 1]).count('0') for i in range(r - 1) for j in range(c - 1)))\n    print(ct + min(res, 2) - 2)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    o_count = 0\n    flag = 0\n    st1 = input()\n    max_zeros = 0\n    for k in range(n - 1):\n        st2 = input()\n        sh = st1.count('1')\n        for j in range(m - 1):\n            values = [st1[j], st1[j + 1], st2[j], st2[j + 1]]\n            ch = values.count('0')\n            max_zeros = max(max_zeros, ch)\n        st1 = st2\n        o_count += sh\n    o_count += st1.count('1')\n    if max_zeros >= 2:\n        print(o_count)\n    elif max_zeros == 1:\n        print(o_count - 1)\n    else:\n        print(o_count - 2)", "t = int(input())\nfor _ in range(t):\n    (n, m) = input().split()\n    (n, m) = (int(n), int(m))\n    s = []\n    for i in range(n):\n        ss = input().strip()\n        ss = [int(char) for char in ss]\n        s.append(ss)\n    one_num = sum([sum(row) for row in s])\n    hasZero = False if one_num == m * n else True\n    has_row2zero = True if min([min([row[i] + row[i + 1] for i in range(m - 1)]) for row in s]) == 0 else False\n    has_col2zero = True if min([min([s[i][j] + s[i + 1][j] for i in range(n - 1)]) for j in range(m)]) == 0 else False\n    has_xie2zero = False\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if s[i][j] == 0 and s[i + 1][j + 1] == 0:\n                has_xie2zero = True\n                break\n            if s[i + 1][j] == 0 and s[i][j + 1] == 0:\n                has_xie2zero = True\n                break\n    if has_row2zero or has_col2zero or has_xie2zero:\n        print(one_num)\n    elif hasZero:\n        print(one_num - 1)\n    else:\n        print(one_num - 2)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    c2 = cnt = 0\n    a = []\n    for i in range(n):\n        s = input()\n        cnt += s.count('1')\n        c2 += s.count('00')\n        a.append(s)\n    if c2:\n        print(cnt)\n    else:\n        for (x, y) in zip(a, a[1:]):\n            for (i, j, r, s) in zip(x, x[1:], y, y[1:]):\n                if int(i) + int(j) + int(r) + int(s) < 3:\n                    c2 += 1\n                    break\n        if c2:\n            print(cnt)\n        elif cnt != m * n:\n            print(cnt - 1)\n        else:\n            print(cnt - 2)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    c2 = cnt = 0\n    a = []\n    for i in range(n):\n        s = input()\n        cnt += s.count('1')\n        a.append(s)\n    for (x, y) in zip(a, a[1:]):\n        for (i, j, r, s) in zip(x, x[1:], y, y[1:]):\n            if int(i) + int(j) + int(r) + int(s) < 3:\n                c2 += 1\n                break\n    if c2:\n        print(cnt)\n    elif cnt != m * n:\n        print(cnt - 1)\n    else:\n        print(cnt - 2)", "from itertools import product\n\ndef solve(grid, rows, cols):\n\n    def sq_pop(row, col):\n        return grid[row][col] + grid[row + 1][col] + grid[row][col + 1] + grid[row + 1][col + 1]\n    min_sq_pop = min((sq_pop(row, col) for (row, col) in product(range(rows - 1), range(cols - 1))))\n    if min_sq_pop == 4:\n        return rows * cols - 2\n    elif min_sq_pop == 3:\n        return sum((grid[row][col] for (row, col) in product(range(rows), range(cols)))) - 1\n    else:\n        return sum((grid[row][col] for (row, col) in product(range(rows), range(cols))))\nt = int(input())\nfor _ in range(t):\n    (rows, cols) = [int(component) for component in input().split(' ')]\n    grid = []\n    for row in range(rows):\n        grid.append([int(component) for component in input()])\n    print(solve(grid, rows, cols))", "t = int(input())\nfor i in range(t):\n    (n, m) = [int(j) for j in input().split()]\n    matrix = []\n    zeros = []\n    for j in range(n):\n        matrix.append([int(r) for r in list(input())])\n        for e in range(m):\n            if matrix[-1][e] == 0:\n                zeros.append([len(matrix) - 1, e])\n    zero = False\n    for j in zeros:\n        if zeros.count([j[0] + 1, j[1]]) != 0 or zeros.count([j[0], j[1] + 1]) != 0 or zeros.count([j[0] + 1, j[1] + 1]) != 0 or (zeros.count([j[0] - 1, j[1] + 1]) != 0):\n            zero = True\n            break\n    ans = 0\n    for e in matrix:\n        ans += e.count(1)\n    if zero == True:\n        print(ans)\n    elif len(zeros) >= 1:\n        print(ans - 1)\n    else:\n        print(ans - 2)", "import math\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    ar = []\n    cnt = 0\n    for i in range(n):\n        arr = list(map(int, list(input().strip())))\n        cnt += arr.count(1)\n        ar.append(arr)\n    perf = False\n    for i in range(n - 1):\n        for j in range(m - 1):\n            res = ar[i][j] + ar[i + 1][j] + ar[i][j + 1] + ar[i + 1][j + 1]\n            if res <= 2:\n                perf = True\n                break\n        if perf:\n            break\n    if cnt == 0:\n        print(0)\n    elif cnt == n * m:\n        print(cnt - 2)\n    elif perf:\n        print(cnt)\n    else:\n        print(cnt - 1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [list(map(int, input())) for i in range(n)]\n    ans = min([max(1, sum(l[i][j:j + 2]) + sum(l[i + 1][j:j + 2]) - 1) for i in range(n - 1) for j in range(m - 1)])\n    print(sum((sum(l[i]) for i in range(n))) - ans + 1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [list(map(int, input())) for i in range(n)]\n    ans = min([max(1, sum(l[i][j:j + 2]) + sum(l[i + 1][j:j + 2]) - 1) for i in range(n - 1) for j in range(m - 1)])\n    print(sum((sum(l[i]) for i in range(n))) - ans + 1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [list(map(int, input())) for i in range(n)]\n    ans = min([max(1, sum(l[i][j:j + 2]) + sum(l[i + 1][j:j + 2]) - 1) for i in range(n - 1) for j in range(m - 1)])\n    print(sum((sum(l[i]) for i in range(n))) - ans + 1)", "import sys\n\ndef read():\n    cases = int(sys.stdin.readline())\n    for k in range(cases):\n        (rows, cols) = [int(num) for num in sys.stdin.readline().split(' ')]\n        arr = []\n        for r in range(rows):\n            arr.append([int(num) for num in sys.stdin.readline().strip()])\n        print(solve(arr))\n\ndef solve(arr):\n    total_ones = 0\n    for r in range(len(arr)):\n        for c in range(len(arr[0])):\n            total_ones += arr[r][c]\n    square_sum = float('inf')\n    adj_zeroes = False\n    for r in range(len(arr) - 1):\n        for c in range(len(arr[0]) - 1):\n            square_sum = min(square_sum, arr[r][c] + arr[r + 1][c] + arr[r][c + 1] + arr[r + 1][c + 1])\n    if square_sum <= 2:\n        return total_ones\n    elif square_sum == 3:\n        return total_ones - 1\n    else:\n        return total_ones - 2\nread()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [list(map(int, input())) for i in range(n)]\n    ans = min([max(1, sum(l[i][j:j + 2]) + sum(l[i + 1][j:j + 2]) - 1) for i in range(n - 1) for j in range(m - 1)])\n    print(sum((sum(l[i]) for i in range(n))) - ans + 1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [list(map(int, input())) for i in range(n)]\n    ans = min([max(1, sum(l[i][j:j + 2]) + sum(l[i + 1][j:j + 2]) - 1) for i in range(n - 1) for j in range(m - 1)])\n    print(sum((sum(l[i]) for i in range(n))) - ans + 1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ones = 0\n    prevRow = '1' * m\n    dblZ = False\n    zero = False\n    for r in range(n):\n        row = input()\n        prevV = 1\n        rowLen = len(row)\n        for i in range(rowLen):\n            v = int(row[i])\n            ones += v\n            if v == 0:\n                if prevRow[i] == row[i] or prevV == v:\n                    dblZ = True\n                if i > 0 and prevRow[i - 1] == row[i]:\n                    dblZ = True\n                elif i < rowLen - 1 and prevRow[i + 1] == row[i]:\n                    dblZ = True\n                zero = True\n            prevV = v\n        prevRow = row\n    if dblZ:\n        print(ones)\n    elif zero:\n        print(ones - 1)\n    else:\n        print(ones - 2)", "for _ in range(int(input())):\n    (nco, mde) = map(int, input().split())\n    lfine = [list(map(int, input())) for i in range(nco)]\n    resans = min([max(1, sum(lfine[i][j:j + 2]) + sum(lfine[i + 1][j:j + 2]) - 1) for i in range(nco - 1) for j in range(mde - 1)])\n    print(sum((sum(lfine[i]) for i in range(nco))) - resans + 1)", "def checkConnectedZero(a, b, c, d):\n    t = [a, b, c, d]\n    count = t.count('0')\n    if count > 1:\n        return True\n    return False\nt = int(input())\nresult = []\nfor i in range(t):\n    (n, m) = list(map(int, input().split(' ')))\n    ligne = []\n    for l in range(n):\n        ligne.append(list(input()))\n    nbones = 0\n    conn = False\n    for l in range(n - 1):\n        nbones += ligne[l].count('1')\n        for c in range(m - 1):\n            if checkConnectedZero(ligne[l][c], ligne[l][c + 1], ligne[l + 1][c], ligne[l + 1][c + 1]) == True:\n                conn = True\n    nbones += ligne[-1].count('1')\n    if nbones == 0:\n        result.append(0)\n    elif nbones == n * m:\n        result.append(nbones - 2)\n    elif conn == False:\n        result.append(nbones - 1)\n    else:\n        result.append(nbones)\nfor i in result:\n    print(i)", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    M = [list(map(int, input())) for i in range(n)]\n    k = min([max(1, sum(M[i][j:j + 2]) + sum(M[i + 1][j:j + 2]) - 1) for i in range(n - 1) for j in range(m - 1)])\n    print(sum((sum(M[i]) for i in range(n))) - k + 1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [list(map(int, input())) for i in range(n)]\n    ans = min([max(1, sum(l[i][j:j + 2]) + sum(l[i + 1][j:j + 2]) - 1) for i in range(n - 1) for j in range(m - 1)])\n    print(sum((sum(l[i]) for i in range(n))) - ans + 1)", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    M = [list(map(int, input())) for i in range(n)]\n    k = min([max(1, sum(M[i][j:j + 2]) + sum(M[i + 1][j:j + 2]) - 1) for i in range(n - 1) for j in range(m - 1)])\n    print(sum((sum(M[i]) for i in range(n))) - k + 1)", "standard_input = '4\\n4 3\\n101\\n111\\n011\\n110\\n3 4\\n1110\\n0111\\n0111\\n2 2\\n00\\n00\\n2 2\\n11\\n11\\n'\nfor _ in range(int(input())):\n    (h, w) = map(int, input().split())\n    g = [list(map(int, input())) for _ in range(h)]\n    c = sum((sum(r) for r in g))\n    perfect = False\n    for y in range(h - 1):\n        for x in range(w - 1):\n            s = g[y][x] + g[y][x + 1] + g[y + 1][x] + g[y + 1][x + 1]\n            if s <= 2:\n                perfect = True\n                break\n        if perfect:\n            break\n    if c == 0:\n        print(0)\n    elif c == h * w:\n        print(c - 2)\n    else:\n        print(c if perfect else c - 1)", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    M = [list(map(int, input())) for i in range(n)]\n    k = min([max(1, sum(M[i][j:j + 2]) + sum(M[i + 1][j:j + 2]) - 1) for i in range(n - 1) for j in range(m - 1)])\n    print(sum((sum(M[i]) for i in range(n))) - k + 1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [list(map(int, input())) for i in range(n)]\n    ans = min([max(1, sum(l[i][j:j + 2]) + sum(l[i + 1][j:j + 2]) - 1) for i in range(n - 1) for j in range(m - 1)])\n    print(sum((sum(l[i]) for i in range(n))) - ans + 1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [list(map(int, input())) for i in range(n)]\n    ans = min([max(1, sum(l[i][j:j + 2]) + sum(l[i + 1][j:j + 2]) - 1) for i in range(n - 1) for j in range(m - 1)])\n    print(sum((sum(l[i]) for i in range(n))) - ans + 1)", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    M = [list(map(int, input())) for i in range(n)]\n    k = min([max(1, sum(M[i][j:j + 2]) + sum(M[i + 1][j:j + 2]) - 1) for i in range(n - 1) for j in range(m - 1)])\n    print(sum((sum(M[i]) for i in range(n))) - k + 1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [list(map(int, input())) for i in range(n)]\n    ans = min([max(1, sum(l[i][j:j + 2]) + sum(l[i + 1][j:j + 2]) - 1) for i in range(n - 1) for j in range(m - 1)])\n    print(sum((sum(l[i]) for i in range(n))) - ans + 1)", "t = int(input())\nwhile t != 0:\n    (n, m) = map(int, input().split())\n    l = [list(map(int, input())) for i in range(n)]\n    do = min([max(1, sum(l[i][j:j + 2]) + sum(l[i + 1][j:j + 2]) - 1) for i in range(n - 1) for j in range(m - 1)])\n    print(sum((sum(l[i]) for i in range(n))) - do + 1)\n    t -= 1", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [list(map(int, input())) for i in range(n)]\n    ans = min([max(1, sum(l[i][j:j + 2]) + sum(l[i + 1][j:j + 2]) - 1) for i in range(n - 1) for j in range(m - 1)])\n    print(sum((sum(l[i]) for i in range(n))) - ans + 1)", "for _ in range(int(input())):\n    (n, mik) = map(int, input().split())\n    l = [list(map(int, input())) for i in range(n)]\n    ans = min([max(1, sum(l[i][j:j + 2]) + sum(l[i + 1][j:j + 2]) - 1) for i in range(n - 1) for j in range(mik - 1)])\n    print(sum((sum(l[i]) for i in range(n))) - ans + 1)", "xx = int(input())\nfor jj in range(xx):\n    (n, m) = [int(i) for i in input().split(' ')]\n    grid = []\n    for i in range(n):\n        arr = [int(_) for _ in list(input())]\n        grid.append(arr)\n    tot = 0\n    for i in range(n):\n        tot += sum(grid[i])\n    p = 4\n    for i in range(n - 1):\n        for j in range(m - 1):\n            p = min(p, grid[i][j] + grid[i + 1][j] + grid[i][j + 1] + grid[i + 1][j + 1])\n            if p < 3:\n                break\n        if p < 3:\n            break\n    if p < 3:\n        print(tot)\n    elif p == 3:\n        print(tot - 1)\n    else:\n        print(tot - 2)", "R = lambda : [*map(int, input().split())]\n\ndef t(a, b):\n    return sum(a, b)\nfor _ in range(int(input())):\n    (n, m) = R()\n    a = []\n    summ = 0\n    for _ in range(n):\n        b = [*map(int, list(input()))]\n        summ += sum(b)\n        a.append(b)\n    ans = 4\n    for i in range(n - 1):\n        for j in range(m - 1):\n            ans = min(ans, sum(a[i][j:j + 2]) + sum(a[i + 1][j:j + 2]))\n            if ans < 3:\n                break\n    if ans < 3:\n        print(summ)\n    elif ans == 3:\n        print(summ - 1)\n    else:\n        print(summ - 2)", "for _ in range(int(input())):\n    s = []\n    n = 0\n    (r, c) = map(int, input().split())\n    for i in range(r):\n        s.append(input())\n        n += s[i].count('1')\n    p = 2\n    for i in range(0, r):\n        for j in range(0, c):\n            if s[i][j] == '0':\n                if i > 0 and j > 0 and (p == 2):\n                    if s[i - 1][j - 1] == '0':\n                        p = 0\n                        break\n                if i > 0 and p == 2:\n                    if s[i - 1][j] == '0':\n                        p = 0\n                        break\n                if i > 0 and j < c - 1 and (p == 2):\n                    if s[i - 1][j + 1] == '0':\n                        p = 0\n                        break\n                if j > 0 and p == 2:\n                    if s[i][j - 1] == '0':\n                        p = 0\n                        break\n                if j < c - 1 and p == 2:\n                    if s[i][j + 1] == '0':\n                        p = 0\n                        break\n                if i < r - 1 and j > 0 and (p == 2):\n                    if s[i + 1][j - 1] == '0':\n                        p = 0\n                        break\n                if i < r - 1 and p == 2:\n                    if s[i + 1][j] == '0':\n                        p = 0\n                        break\n                if i < r - 1 and j < c - 1 and (p == 2):\n                    if s[i + 1][j + 1] == '0':\n                        p = 0\n                        break\n    if n == 0:\n        print(0)\n    elif n == r * c:\n        print(n - 2)\n    elif p == 0:\n        print(n)\n    else:\n        print(n - 1)", "def zero(l):\n    a = 0\n    c = False\n    s = 0\n    for j in range(0, len(l) - 1):\n        for k in range(0, len(l[0]) - 1):\n            if l[j][k] == 1:\n                a = a + 1\n            if c == False:\n                s = l[j][k] + l[j][k + 1] + l[j + 1][k] + l[j + 1][k + 1]\n                if s == 1 or s == 2:\n                    c = True\n            s = 0\n    for j in range(0, len(l) - 1):\n        if l[j][len(l[0]) - 1] == 1:\n            a = a + 1\n    for k in range(0, len(l[0])):\n        if l[len(l) - 1][k] == 1:\n            a = a + 1\n    return (a, c)\ns = int(input())\nfor i in range(0, s):\n    (n, m) = map(int, input().split())\n    l = []\n    for j in range(0, n):\n        a = input()\n        r = []\n        for p in range(0, m):\n            r.append(int(a[p]))\n        l.append(r)\n    (x, y) = zero(l)\n    if x == n * m:\n        print(x - 2)\n    elif x == 0:\n        print(0)\n    elif y:\n        print(x)\n    else:\n        print(x - 1)", "def codeforces(arr):\n    n = len(arr)\n    m = len(arr[0])\n    ms = 5\n    for i in range(n - 1):\n        for j in range(m - 1):\n            res = arr[i][j] + arr[i][j + 1] + arr[i + 1][j] + arr[i + 1][j + 1]\n            if res:\n                ms = min(res, ms)\n    if ms == 5:\n        return 0\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            ans += arr[i][j]\n    if ms == 3:\n        return ans - 1\n    elif ms == 4:\n        return ans - 2\n    else:\n        return ans\nt = int(input())\nfor test in range(t):\n    (n, m) = [int(i) for i in input().split()]\n    arr = []\n    for i in range(n):\n        s = input()\n        res = []\n        for ind in s:\n            res.append(int(ind))\n        arr.append(res)\n    print(codeforces(arr))", "for _ in range(int(input())):\n    (n, mik) = map(int, input().split())\n    l = [list(map(int, input())) for i in range(n)]\n    ans = min([max(1, sum(l[i][j:j + 2]) + sum(l[i + 1][j:j + 2]) - 1) for i in range(n - 1) for j in range(mik - 1)])\n    print(sum((sum(l[i]) for i in range(n))) - ans + 1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    g = []\n    for i in range(n):\n        s = input()\n        l = []\n        for j in range(m):\n            l.append(int(s[j]))\n        g.append(l)\n    ones = 0\n    cond = False\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if g[i][j] + g[i + 1][j] + g[i][j + 1] + g[i + 1][j + 1] < 3:\n                cond = True\n            if g[i][j] == 1:\n                ones += 1\n    for i in range(n):\n        if g[i][-1] == 1:\n            ones += 1\n    for i in range(m - 1):\n        if g[-1][i] == 1:\n            ones += 1\n    if ones == m * n:\n        print(ones - 2)\n        continue\n    if cond:\n        print(ones)\n        continue\n    print(ones - 1)", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, m) = map(int, inp().split())\n    a = [list(map(int, inp().strip())) for i in range(n)]\n    z = 4\n    for i in range(1, n):\n        for j in range(1, m):\n            v = [a[i - 1][j - 1], a[i - 1][j], a[i][j - 1], a[i][j]]\n            z = min(z, sum(v) - max(v))\n    r = sum((sum(i) for i in a))\n    if z == 0:\n        print(r)\n    else:\n        print(r - z + 1)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "import sys\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\nimport bisect as bi\n(t,) = I()\nfor _ in range(t):\n    (n, m) = I()\n    grd = []\n    an = 0\n    for i in range(n):\n        grd.append(list(map(int, list(input().strip()))))\n        an += grd[-1].count(1)\n    mx = 2\n    for i in range(n - 1):\n        for j in range(m - 1):\n            ct = grd[i][j] + grd[i + 1][j] + grd[i][j + 1] + grd[i + 1][j + 1]\n            if ct == 3:\n                mx = min(1, mx)\n            elif ct < 3:\n                mx = min(0, mx)\n    print(an - mx)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    one = 0\n    for _ in range(n):\n        a.append([int(x) for x in input()])\n        one += a[-1].count(1)\n    mini = 4\n    for i in range(1, n):\n        for j in range(1, m):\n            mini = min(mini, a[i][j] + a[i - 1][j] + a[i][j - 1] + a[i - 1][j - 1])\n    ex = min(mini, 1)\n    if mini >= 2:\n        ex += 1\n    print(one - mini + ex)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    var = 0\n    for j in range(n):\n        a = input()\n        l.append(a)\n        var += a.count('1')\n    con = 0\n    for j in range(n):\n        for k in range(m - 1):\n            if l[j][k] == l[j][k + 1] == '0':\n                con = 1\n                break\n    for j in range(m):\n        for k in range(n - 1):\n            if l[k][j] == l[k + 1][j] == '0':\n                con = 1\n                break\n    i = 0\n    for j in range(n - 1):\n        for k in range(0, m - 1):\n            if l[j][k] == l[j + 1][k + 1] == '0':\n                con = 1\n                break\n    for j in range(n - 1):\n        for k in range(0, m - 1):\n            if l[j][k + 1] == l[j + 1][k] == '0':\n                con = 1\n                break\n    if n * m == var:\n        print(var - 2)\n    elif con == 0:\n        print(var - 1)\n    else:\n        print(var)", "temp = int(input())\nfor _ in range(temp):\n    (n, m) = map(int, input().split())\n    a = [input() for _ in range(n)]\n    ans = sum(map(lambda x: x.count('1'), a))\n    (x, y) = (4, 0)\n    for i in range(n - 1):\n        for j in range(m - 1):\n            y = a[i][j:j + 2].count('1') + a[i + 1][j:j + 2].count('1')\n            x = min(x, y)\n    if x == 4:\n        ans -= 2\n    elif x == 3:\n        ans -= 1\n    print(ans)", "for _ in range(int(input())):\n    (r, c) = list(map(int, input().split()))\n    g = [input() for i in range(r)]\n    ct = ''.join(g).count('1')\n    res = 0\n    for i in range(r - 1):\n        for j in range(c - 1):\n            res = max(res, (g[i][j] + g[i + 1][j] + g[i + 1][j + 1] + g[i][j + 1]).count('0'))\n    print(ct + min(res, 2) - 2)", "t = int(input())\nfor e in range(t):\n    a = []\n    l = list(map(int, input().split()))\n    for k in range(l[0]):\n        l1 = []\n        l2 = input()\n        for k in l2:\n            l1.append(int(k))\n        a.append(l1)\n\n    def chk(i, j):\n        if i < 0 or j < 0 or i >= len(a) or (j >= len(a[0])):\n            return False\n        return a[i][j] == 0\n    c = 0\n    c2 = 0\n    cnt1 = 0\n    cnt0 = 0\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            if a[i][j] == 0:\n                cnt0 += 1\n                q = chk(i + 1, j) or chk(i - 1, j) or chk(i, j - 1) or chk(i, j + 1) or chk(i - 1, j - 1) or chk(i + 1, j + 1) or chk(i - 1, j + 1) or chk(i + 1, j - 1)\n                if q == True:\n                    c = 1\n            else:\n                cnt1 += 1\n    if c == 1:\n        print(cnt1)\n    elif cnt0 == 0:\n        print(cnt1 - 2)\n    else:\n        print(cnt1 - 1)", "testCase = int(input())\nfor i in range(testCase):\n    info = input().split(' ')\n    grid = []\n    countOne = 0\n    maxxZero = 0\n    for j in range(int(info[0])):\n        arr = list(input())\n        grid.append(arr)\n        countOne += arr.count('1')\n    for k in range(int(info[0]) - 1):\n        for z in range(int(info[1]) - 1):\n            count = 0\n            count += grid[k][z:z + 2].count('0')\n            count += grid[k + 1][z:z + 2].count('0')\n            maxxZero = max(maxxZero, count)\n    if maxxZero >= 2:\n        print(countOne)\n    elif maxxZero == 1:\n        print(countOne - 1)\n    elif maxxZero == 0:\n        print(countOne - 2)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    lst = [list(map(int, input())) for i in range(n)]\n    s = []\n    for i in range(n - 1):\n        for j in range(m - 1):\n            sum_of_4 = sum(lst[i][j:j + 2]) + sum(lst[i + 1][j:j + 2])\n            s.append(max(1, sum_of_4 - 1))\n    print(sum((sum(lst[i]) for i in range(n))) - min(s) + 1)", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    arr = []\n    for i in range(n):\n        arr.append([int(x) for x in input()])\n    c = 0\n    one = 0\n    for i in range(n - 1):\n        for j in range(m - 1):\n            c = max(c, [arr[i][j], arr[i + 1][j], arr[i][j + 1], arr[i + 1][j + 1]].count(0))\n    for i in arr:\n        for j in i:\n            if j == 1:\n                one += 1\n    if c >= 2:\n        print(one)\n    elif c == 1:\n        print(one - 1)\n    elif c == 0:\n        print(one - 2)", "t = int(input())\nfor i in range(t):\n    shape = input().split()\n    shape[0] = int(shape[0])\n    shape[1] = int(shape[1])\n    arr = []\n    for j in range(shape[0]):\n        data = input()\n        arr.append(data)\n    k = 0\n    indices = {}\n    ones = 0\n    zeros = 0\n    while k < shape[0] * shape[1]:\n        if arr[k // shape[1]][k % shape[1]] == '0':\n            indices[k] = '0'\n            zeros += 1\n        else:\n            indices[k] = '1'\n            ones += 1\n        k = k + 1\n    adj = False\n    if zeros == 0:\n        print(ones - 2)\n    else:\n        for a in range(len(indices)):\n            if indices[a] == '0':\n                if a > 0 and indices[a - 1] == '0' and (a % shape[1] > 0) or (a < len(indices) - 1 and indices[a + 1] == '0' and (a % shape[1] < shape[1] - 1)) or (a % shape[1] != 0 and a + shape[1] - 1 < len(indices) and (indices[a + shape[1] - 1] == '0')):\n                    adj = True\n                elif a + shape[1] < len(indices) and indices[a + shape[1]] == '0' or (a % shape[1] != shape[1] - 1 and a + shape[1] + 1 < len(indices) and (indices[a + shape[1] + 1] == '0')):\n                    adj = True\n        if adj == True:\n            print(ones)\n        else:\n            print(ones - 1)", "t = int(input())\nfor tt in range(t):\n    (n, m) = map(int, input().split())\n    summ = 0\n    a = [[0] * m for i in range(n)]\n    for i in range(n):\n        s = str(input())\n        for j in range(m):\n            a[i][j] = int(s[j])\n            summ += a[i][j]\n    minn = 4\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if minn > a[i][j] + a[i + 1][j] + a[i][j + 1] + a[i + 1][j + 1]:\n                minn = a[i][j] + a[i + 1][j] + a[i][j + 1] + a[i + 1][j + 1]\n    if minn == 0 or minn == 1:\n        print(summ)\n    else:\n        print(summ - (minn - 1) + 1)", "tc = int(input())\nwhile tc > 0:\n    (n, m) = [int(i) for i in input().split()]\n    A = []\n    for i in range(n):\n        X = [int(i) for i in input()]\n        A.append(X)\n    no = 0\n    mi = 4\n    for i in range(m):\n        no += A[n - 1][i]\n    for i in range(n - 1):\n        no += A[i][m - 1]\n    for i in range(n - 1):\n        for j in range(m - 1):\n            no += A[i][j]\n            curr = A[i][j] + A[i][j + 1] + A[i + 1][j] + A[i + 1][j + 1]\n            mi = min(mi, curr)\n    if mi > 2:\n        mi -= 2\n    else:\n        mi = 0\n    print(no - mi)\n    tc -= 1", "t = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    l = []\n    count = 0\n    for i in range(n):\n        s = input()\n        for j in range(m):\n            if s[j] == '1':\n                count = count + 1\n        l.append(s)\n    ans = 0\n    for i in range(n - 1):\n        for j in range(m - 1):\n            ct = 0\n            if l[i][j] == '0':\n                ct = ct + 1\n            if l[i + 1][j] == '0':\n                ct = ct + 1\n            if l[i][j + 1] == '0':\n                ct = ct + 1\n            if l[i + 1][j + 1] == '0':\n                ct = ct + 1\n            ans = max(ans, ct)\n    if ans == 4 or ans == 3:\n        print(count)\n    if ans == 2:\n        print(count)\n    if ans == 1:\n        print(count - 1)\n    if ans == 0:\n        print(count - 2)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mat = []\n    ans = 0\n    for _ in range(n):\n        s = input()\n        ans += s.count('1')\n        mat.append(s)\n    f = 0\n    temp = []\n    for i in range(n - 1):\n        for j in range(m - 1):\n            t1 = int(mat[i][j]) + int(mat[i + 1][j]) + int(mat[i][j + 1]) + int(mat[i + 1][j + 1])\n            if t1 <= 2:\n                f = 1\n    if f:\n        print(ans)\n    elif ans == n * m:\n        print(ans - 2)\n    else:\n        print(ans - 1)", "from bisect import bisect_left\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = False\n    e = 0\n    a = [[] for x in range(n)]\n    for x in range(n):\n        s = list(map(int, list(input())))\n        e += s.count(1)\n        for y in range(m):\n            if s[y] == 0:\n                a[x].append(y)\n    p = []\n    for i in a:\n        c = -2\n        g = 0\n        for x in i:\n            if x - c == 1:\n                ans = True\n            c = x\n            while g < len(p):\n                if p[g] > x:\n                    if p[g] == x + 1:\n                        ans = True\n                    break\n                else:\n                    if abs(p[g] - x) < 2:\n                        ans = True\n                    g += 1\n        p = i\n    if e == n * m:\n        print(n * m - 2)\n    elif ans:\n        print(e)\n    else:\n        print(e - 1)", "T = int(input())\nfor t in range(T):\n    (n, m) = map(int, input().split())\n    mat = []\n    (tot, k) = (0, 4)\n    for i in range(n):\n        X = input()\n        row = []\n        for x in X:\n            row.append(int(x))\n        mat.append(row)\n        tot += sum(row)\n    for i in range(n - 1):\n        for j in range(m - 1):\n            k = min(k, sum([mat[i][j], mat[i][j + 1], mat[i + 1][j], mat[i + 1][j + 1]]))\n    if k == 0 or k == 1:\n        print(tot)\n    else:\n        print(tot - k + 2)"]