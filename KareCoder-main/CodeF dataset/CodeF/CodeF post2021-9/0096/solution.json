["def main():\n    for _ in range(int(input())):\n        n = int(input())\n        print(f'{n - 3} 1 1 1')\nimport sys\ninput = sys.stdin.readline\nexit(main())", "import sys\ninp = sys.stdin.readline()\ntest = int(inp.strip('\\n'))\nresult = ''\nfor i in range(test):\n    inp = sys.stdin.readline()\n    n = int(inp.strip('\\n'))\n    sys.stdout.write(str(n - 3) + ' 1 1 1\\n')", "import math\nt = int(input())\nres = []\nfor i in range(t):\n    n = int(input())\n    res.append(' '.join([str(n - 3), '1', '1', '1']))\nfor i in res:\n    print(i)", "def q(n):\n    return str(n - 3) + ' 1' + ' 1' + ' 1'\nn = int(input())\nw = []\nfor i in range(n):\n    w.append(q(int(input())))\nfor i in w:\n    print(i)", "def ans(n):\n    return str(int(n - 3)) + ' 1 1 1'\nx = int(input())\narr = []\nfor i in range(x):\n    arr.append(int(input()))\nfor i in arr:\n    print(ans(i))", "n = int(input())\narr = []\nfor i in range(n):\n    arr.append(int(input()))\nfor i in arr:\n    print(str(1) + ' ' + str(i - 3) + ' ' + str(1) + ' ' + str(1))", "import sys\nfor i in range(int(sys.stdin.readline())):\n    k = int(sys.stdin.readline())\n    print(k - 3, '1 1 1')", "t = int(input())\nres = []\nfor _ in range(t):\n    n = int(input())\n    res.append((n - 3, 1, 1, 1))\nfor i in range(t):\n    print(f'{res[i][0]} {res[i][1]} {res[i][2]} {res[i][3]}')", "import sys\ninput = sys.stdin.readline\nfor ii in range(int(input())):\n    n = int(input())\n    print(n - 3, 1, 1, 1)", "import sys\n\ndef main(num):\n    return (num - 3, 1, 1, 1)\nn = int(sys.stdin.readline().strip())\nfor i in range(n):\n    num = int(sys.stdin.readline().strip())\n    res = main(num)\n    print(*res)", "import math\nimport sys\nimport itertools\nimport fractions\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\nfor t in wtf[1:]:\n    n = int(t)\n    print(f'{n - 3} 1 1 1')", "import sys\ninput = sys.stdin.readline\n\ndef inp_int():\n    return int(input())\n\ndef inp_list():\n    return list(map(int, input().split()))\n\ndef inp_string():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef inp_reverse():\n    return map(int, input().split())\n\ndef solve():\n    n = inp_int()\n    print(n - 3, 1, 1, 1)\nnumber_cases = inp_int()\nfor x in range(number_cases):\n    solve()", "for n in [*open(0)][1:]:\n    print(int(n) - 3, 1, 1, 1)", "for g in [*open(0)][1:]:\n    print(int(g) - 3, 1, 1, 1)", "import sys\ninput = lambda : sys.stdin.readline().strip()\nfor i in range(int(input())):\n    inp = int(input())\n    if inp == 1:\n        print('1 1 1 1')\n    elif inp == 2:\n        print('Mian_Talha_g')\n    elif inp == 3:\n        print('Talha_kite_Lover')\n    else:\n        count = 0\n        count += inp - 3\n        print(count, '1 1 1')", "for n in [*open(0)][1:]:\n    print(int(n) - 3, 1, 1, 1)", "for n in [*open(0)][1:]:\n    print(int(n) - 3, 1, 1, 1)", "for n in [*open(0)][1:]:\n    print(int(n) - 3, 1, 1, 1)", "def solve(n):\n    return f'{n - 3} 1 1 1'\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    print(solve(n))", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    print(1, N - 3, 1, 1)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nfor _ in range(inp()):\n    n = inp()\n    print(n - 3, 1, 1, 1)", "import sys\ninput = lambda : sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    print(n - 3, 1, 1, 1)", "for n in [*open(0)][1:]:\n    print(int(n) - 3, 1, 1, 1)", "from sys import stdin, stdout\nt = int(stdin.readline())\nfor t_i in range(0, t):\n    n = int(stdin.readline())\n    half = n // 2\n    a = n - 3\n    c = 1\n    b = 1\n    d = 1\n    print(a, b, c, d)", "for n in [*open(0)][1:]:\n    print(int(n) - 3, 1, 1, 1)", "import sys\nfrom typing import List\n\nclass Solution:\n\n    def gcd_vs_lcm(self, total_sum: int) -> str:\n        return ' '.join([str(total_sum - 3), '1', '1', '1'])\ncodeforce = Solution()\nnum_tests = int(sys.stdin.readline())\nwhile num_tests > 0:\n    data = int(sys.stdin.readline())\n    print(codeforce.gcd_vs_lcm(data))\n    num_tests -= 1", "for i in [*open(0)][1:]:\n    print(int(i) - 3, 1, 1, 1)", "for t in [*open(0)][1:]:\n    print(int(t) - 3, 1, 1, 1)", "for l in [*open(0)][1:]:\n    print(int(l) - 3, 1, 1, 1)", "for x in [*open(0)][1:]:\n    print(int(x) - 3, 1, 1, 1)", "import sys\ninput = lambda : sys.stdin.readline().strip()\nsys.setrecursionlimit(10 ** 9)\nt = int(input())\nfor _ in [0] * t:\n    n = int(input())\n    print(1, n - 3, 1, 1)", "import sys\nfrom collections import *\n\ndef prin(a):\n    sys.stdout.write(str(a) + '\\n')\n\ndef input():\n    return sys.stdin.readline().strip()\nmod = int(1000000000.0 + 7)\nx8 = [-1, -1, 0, 1, 1, 1, 0, -1]\ny8 = [0, 1, 1, 1, 0, -1, -1, -1]\nfor _ in range(int(input())):\n    x = int(input())\n    r = []\n    r.append(x - 3)\n    r.append(1)\n    r.append(1)\n    r.append(1)\n    print(*r)", "import sys\ninput = sys.stdin.readline\nfor iiii in range(int(input())):\n    name = int(input())\n    print(name - 3, 1, 1, 1)", "import collections, math, bisect, sys\nfrom collections import OrderedDict, Counter, defaultdict\nfrom sys import stdin, stdout\n\ndef get_line():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef in1():\n    return int(stdin.readline())\n\ndef display_arr(arr):\n    stdout.write(' '.join(map(str, arr)) + '\\n')\n\ndef display_num(num):\n    stdout.write(str(num) + '\\n')\n\ndef factorial(n):\n    return n * factorial(n - 1) if n > 1 else 1\n\ndef percent(c, s):\n    return c / s * 100\n\ndef l2d(a):\n    return collections.Counter(a)\n\ndef lcm(x, y):\n    return x * y // math.gcd(x, y)\na = []\n\ndef SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    for p in range(2, n + 1):\n        if prime[p]:\n            a.append(p)\n    return prime\nfor _ in range(in1()):\n    n = in1()\n    print(n - 3, 1, 1, 1)", "tests = int(input())\narr = []\nfor _ in range(0, tests):\n    arr.append(int(input()))\nfor i in range(0, tests):\n    c = 1\n    d = 1\n    b = 1\n    a = arr[i] - 3\n    print(a, b, c, d)", "cantidad = int(input())\nx = []\nfor i in range(cantidad):\n    x.append(int(input()))\nfor num in x:\n    print(num - 3, 1, 1, 1)", "def compute(n):\n    return [n - 3, 1, 1, 1]\nt = int(input())\nmain = []\nfor i in range(t):\n    a = int(input())\n    main.append(a)\nfor i in range(len(main)):\n    string = ''\n    for j in compute(main[i]):\n        string += str(j) + ' '\n    print(string)", "import math\nimport sys\nfrom collections import deque\nimport heapq\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\ndef mpp():\n    return map(int, inp().split())\n\ndef lis():\n    return list(mpp())\n\ndef main():\n    t = int(inp())\n    for _ in range(t):\n        n = int(inp())\n        print(n - 3, 1, 1, 1)\nmain()", "a = int(input())\nc = []\nd = 0\nfor i in range(0, a):\n    z = int(input())\n    c.append(z)\nfor b in c:\n    print(b - 3, 1, 1, 1)", "x = int(input(''))\nz = []\nfor i in range(x):\n    z.append(int(input('')))\nfor i in z:\n    print(i - 3, 1, 1, 1)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    print(1, n - 3, 1, 1)", "T = int(input())\nfor t in range(1, T + 1):\n    n = int(input())\n    print('{} {} {} {}'.format(n - 3, 1, 1, 1))", "alpha = []\nbeta = []\ngamma = []\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    alpha.append(n)\nfor i in range(t):\n    n = alpha[i]\n    a = 1\n    c = 1\n    d = 1\n    b = n - 3\n    print(a, b, c, d)", "from sys import stdin\nfrom math import log, floor, ceil, gcd\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\ninput = stdin.readline\ninp = lambda : int(stdin.readline())\nrs = lambda : stdin.readline().strip()\n\ndef ra(typ):\n    return list(map(typ, stdin.readline().split()))\n\ndef rv(typ):\n    return map(typ, stdin.readline().split())\n\ndef main():\n    for _ in range(inp()):\n        n = inp()\n        print(n - 3, 1, 1, 1)\nmain()", "problems = int(input())\nfor problem_no in range(problems):\n    n = int(input())\n    a = n - 3\n    to_print = f'{a} 1 1 1'\n    print(to_print)", "import math\nimport sys\nfrom typing import List\n\nclass Solution:\n\n    def gcd_vs_lcm(self, total_sum: int) -> str:\n        for num in range(total_sum - 3, 0, -1):\n            if self.is_valid_answer([num, 1, 1, 1], total_sum, sum([3, num])):\n                return ' '.join([str(num), '1', '1', '1'])\n\n    def compute_lcm(self, x, y):\n        lcm = x * y // math.gcd(x, y)\n        return lcm\n\n    def is_valid_answer(self, state: List[int], total_sum: int, current_sum: int) -> bool:\n        if len(state) == 4 and current_sum == total_sum and (math.gcd(state[0], state[1]) == self.compute_lcm(state[2], state[3])):\n            return True\n        return False\ncodeforce = Solution()\nnum_tests = int(sys.stdin.readline())\nwhile num_tests > 0:\n    data = int(sys.stdin.readline())\n    print(codeforce.gcd_vs_lcm(data))\n    num_tests -= 1", "import sys\ninput = lambda : sys.stdin.readline().strip()\nn = int(input())\nfor i in range(n):\n    x = int(input())\n    print(x - 3, 1, 1, 1)", "for n in [*open(0)][1:]:\n    print(int(n) - 3, 1, 1, 1)", "for n in [*open(0)][1:]:\n    print(int(n) - 3, 1, 1, 1)", "for n in [*open(0)][1:]:\n    print(int(n) - 3, 1, 1, 1)", "for n in [*open(0)][1:]:\n    print(int(n) - 3, 1, 1, 1)", "for n in [*open(0)][1:]:\n    print(int(n) - 3, 1, 1, 1)", "for n in [*open(0)][1:]:\n    print(int(n) - 3, 1, 1, 1)", "for _ in range(int(input())):\n    n = int(input())\n    print(str(n - 3) + ' 1 1 1')", "tests = int(input())\nfor _ in range(tests):\n    n = int(input())\n    a = n - 3\n    print(f'{a} 1 1 1')", "tc = int(input())\nfor _ in range(tc):\n    x = int(input())\n    print(str(x - 3) + ' 1 1 1')", "def solve(n):\n    return f'{n - 3} {1} {1} {1}'\nt = int(input())\nfor T in range(t):\n    n = int(input())\n    print(solve(n))", "for num in range(int(input())):\n    print(str(int(input()) - 3) + ' 1 1 1')", "for _ in range(int(input())):\n    n = int(input())\n    print(f'{n - 3} 1 1 1')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(n - 3, '1 1 1')", "n = int(input())\nfor _ in range(n):\n    x = int(input())\n    print(f'{x - 3} 1 1 1')", "T = int(input())\nfor i in range(T):\n    tmp1 = input()\n    print('1 %i 1 1' % (int(tmp1) - 3))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(f'1 {n - 3} 1 1')", "for t in range(int(input())):\n    n = int(input())\n    print(f'{n - 3} 1 1 1')", "t = int(input())\nlst = []\nfor x in range(t):\n    y = int(input())\n    lst.append(y)\nfor i in lst:\n    print(int(i - 3), int(1), int(1), int(1))", "t = int(input())\nmatrix = []\nfor i in range(t):\n    n = int(input())\n    lis = [1, n - 3, 1, 1]\n    matrix.append(lis)\nl = len(matrix)\nfor i in range(l):\n    print(matrix[i][0], matrix[i][1], matrix[i][2], matrix[i][3])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(n - 3, '1 1 1')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = str(n - 3) + ' 1 1 1'\n    print(ans)", "for _ in [0] * int(input()):\n    print(f'1 {int(input()) - 3} 1 1')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(str(n - 3) + ' 1 1 1')", "n = int(input())\nfor m in range(0, n):\n    i = int(input())\n    print(f'{i - 3} 1 1 1')", "for _ in range(int(input())):\n    n = int(input())\n    print(f'{n - 3} 1 1 1')", "t = int(input(), base=10)\nfor _ in range(t):\n    n = int(input())\n    if n >= 4:\n        print(f'{n - 3} 1 1 1')", "t = int(input())\nwhile t:\n    n = int(input())\n    print(n - 3, '1 ' * 3)\n    t -= 1", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    print('{} {} {} {}'.format(n - 3, 1, 1, 1))", "t = int(input())\n\ndef q(n):\n    return str(n - 3) + ' 1 1 1'\nfor i in range(t):\n    n = int(input())\n    print(q(n))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(str(n - 3) + ' 1 1 1')", "for case in range(int(input())):\n    print(f'{int(input()) - 3} 1 1 1')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(str(n - 3) + ' 1 1 1')", "ti = int(input())\nfor i in range(ti):\n    nn = int(input())\n    print('1 ' + str(nn - 3) + ' 1 1')", "ti = int(input())\nfor i in range(ti):\n    nn = int(input())\n    print('1 ' + str(nn - 3) + ' 1 1')", "a = int(input())\nfor i in range(0, a):\n    n = int(input())\n    if n >= 4 and n <= 10 ** 9:\n        print(str(n - 3) + ' ' + '1' + ' ' + '1' + ' ' + '1')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    ans = str(n - 3) + ' 1 1 1'\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    print(n - 3, 1, 1, 1)"]