["import sys\nfrom collections import deque\ninput = sys.stdin.readline\n\ndef solve(n, arr):\n    included = set(arr)\n    ans = {}\n    dq = deque()\n    for (x, y) in arr:\n        for (nx, ny) in [(x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)]:\n            if (nx, ny) not in included:\n                ans[x, y] = (nx, ny)\n                dq.append((x, y))\n    while dq:\n        (x, y) = dq.popleft()\n        for (nx, ny) in [(x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)]:\n            if (nx, ny) in included and (nx, ny) not in ans:\n                ans[nx, ny] = ans[x, y]\n                dq.append((nx, ny))\n    for (x, y) in arr:\n        print(*ans[x, y])\nn = int(input())\narr = list([tuple(map(int, input().split())) for _ in range(n)])\nsolve(n, arr)", "import sys\nfrom collections import deque\ninput = sys.stdin.readline\n\ndef solve(n, arr):\n    included = set(arr)\n    ans = {}\n    dq = deque()\n    for (x, y) in arr:\n        for (nx, ny) in [(x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)]:\n            if (nx, ny) not in included:\n                ans[x, y] = (nx, ny)\n                dq.append((x, y))\n    while dq:\n        (x, y) = dq.popleft()\n        for (nx, ny) in [(x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)]:\n            if (nx, ny) in included and (nx, ny) not in ans:\n                ans[nx, ny] = ans[x, y]\n                dq.append((nx, ny))\n    for (x, y) in arr:\n        print(*ans[x, y])\nn = int(input())\narr = list([tuple(map(int, input().split())) for _ in range(n)])\nsolve(n, arr)", "import collections\nfrom functools import lru_cache\nn = int(input())\nm = 200000.0 + 1\nt = []\nd = {}\nfor i in range(n):\n    (x, y) = map(int, input().split())\n    d[x, y] = i\nres = [[-1, -1] for i in range(n)]\ndeq = collections.deque()\nvisit = collections.defaultdict(int)\nfor (i, j) in d.keys():\n    for (x, y) in [[i + 1, j], [i - 1, j], [i, j + 1], [i, j - 1]]:\n        if (x, y) not in d:\n            res[d[i, j]] = [x, y]\n            deq.append((x, y, i, j))\nwhile deq:\n    (i, j, x, y) = deq.popleft()\n    for (k, v) in [[x + 1, y], [x - 1, y], [x, y + 1], [x, y - 1]]:\n        if (k, v) in d and res[d[k, v]] == [-1, -1]:\n            res[d[k, v]] = [i, j]\n            deq.append((i, j, k, v))\nfor (i, j) in res:\n    print(*[i, j])"]