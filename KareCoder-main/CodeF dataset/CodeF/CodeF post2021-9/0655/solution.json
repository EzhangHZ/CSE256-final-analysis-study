["def countHoles(pic):\n    h = 0\n    for i in range(1, len(pic) - 1):\n        for j in range(1, len(pic[i]) - 1):\n            h += pic[i + 1][j] == pic[i - 1][j] == pic[i][j - 1] == pic[i][j + 1] and pic[i + 1][j] != pic[i][j]\n    return h\n\ndef findDiff(pic1, pic2):\n    diff = []\n    for i in range(len(pic)):\n        for j in range(len(pic[i])):\n            if pic1[i][j] != pic2[i][j]:\n                diff += [(i, j)]\n    return diff\n(n, m, k) = (int(v) for v in input().split())\npics = []\nfor i in range(k + 1):\n    input()\n    pic = []\n    for l in range(n):\n        pic += [[c for c in input()]]\n    pics += [(i, pic)]\nsortpics = sorted(pics, key=lambda p: -countHoles(p[1]))\nprevpic = sortpics[0][1]\nop = []\nfor (i, pic) in sortpics[1:]:\n    diff = findDiff(prevpic, pic)\n    for (x, y) in diff:\n        op += [(1, x + 1, y + 1)]\n    op += [(2, i + 1)]\n    prevpic = pic\nprint(sortpics[0][0] + 1)\nprint(len(op))\nif len(op) != 0:\n    print('\\n'.join([' '.join((str(v) for v in t)) for t in op]))", "(n, m, k) = [int(_) for _ in input().split(' ')]\narrs = []\nind = 0\nwhile ind <= k:\n    input()\n    arr = []\n    for i in range(n):\n        arr.append(input())\n    tmp = 0\n    for (i, row) in enumerate(arr):\n        for (j, ch) in enumerate(row):\n            if i != 0 and i < n - 1 and (j != 0) and (j < m - 1) and (arr[i - 1][j] != ch) and (arr[i - 1][j] == arr[i + 1][j] == arr[i][j - 1] == arr[i][j + 1]):\n                tmp += 1\n    arrs.append((arr, tmp, ind + 1))\n    ind += 1\narrs.sort(key=lambda x: x[1], reverse=True)\nans = []\nfor q in range(1, k + 1):\n    if arrs[q][1] == arrs[q - 1][1]:\n        ans.append([2, arrs[q][2]])\n        continue\n    for (i, (row1, row2)) in enumerate(zip(arrs[q - 1][0], arrs[q][0])):\n        for (j, (ch1, ch2)) in enumerate(zip(row1, row2)):\n            if ch1 != ch2:\n                ans.append([1, i + 1, j + 1])\n    ans.append([2, arrs[q][2]])\nprint(arrs[0][2])\nprint(len(ans))\nfor anss in ans:\n    res = ' '.join((str(_) for _ in anss))\n    print(res)", "(n, m, k) = input('').split(' ')\nn = int(n)\nm = int(m)\nk = int(k)\nts = []\nps = []\nfor p in range(k + 1):\n    _ = input('')\n    pic = ''\n    for line in range(n):\n        pic += input('')\n    ps.append(pic)\n    w = 0\n    for i in range(1, n - 1):\n        for j in range(1, m - 1):\n            z = i * m + j\n            if pic[z] not in (pic[z + 1], pic[z - 1], pic[z + m], pic[z - m]):\n                w += 1\n    ts.append((n * m - w, p))\nts = sorted(ts)\nprint(ts[0][1] + 1)\nops = []\nfor r in range(k):\n    pic1 = ps[ts[r][1]]\n    pic2 = ps[ts[r + 1][1]]\n    for i in range(1, n - 1):\n        for j in range(1, m - 1):\n            z = i * m + j\n            if pic1[z] != pic2[z]:\n                ops.append('1 %i %i' % (i + 1, j + 1))\n    ops.append('2 ' + str(ts[r + 1][1] + 1))\nprint(len(ops))\nfor op in ops:\n    print(op)", "(n, m, k) = input('').split(' ')\nn = int(n)\nm = int(m)\nk = int(k)\nts = []\nps = []\nfor p in range(k + 1):\n    _ = input('')\n    pic = ''\n    for line in range(n):\n        pic += input('')\n    ps.append(pic)\n    w = 0\n    for i in range(1, n - 1):\n        for j in range(1, m - 1):\n            z = i * m + j\n            if pic[z] not in (pic[z + 1], pic[z - 1], pic[z + m], pic[z - m]):\n                w += 1\n    ts.append((n * m - w, p))\nts = sorted(ts)\nprint(ts[0][1] + 1)\nops = []\nfor r in range(k):\n    pic1 = ps[ts[r][1]]\n    pic2 = ps[ts[r + 1][1]]\n    for i in range(1, n - 1):\n        for j in range(1, m - 1):\n            z = i * m + j\n            if pic1[z] != pic2[z]:\n                ops.append('1 %i %i' % (i + 1, j + 1))\n    ops.append('2 ' + str(ts[r + 1][1] + 1))\nprint(len(ops))\nfor op in ops:\n    print(op)", "(n, m, k) = input('').split(' ')\nn = int(n)\nm = int(m)\nk = int(k)\nts = []\nps = []\nfor p in range(k + 1):\n    _ = input('')\n    pic = ''\n    for line in range(n):\n        pic += input('')\n    ps.append(pic)\n    w = 0\n    for i in range(1, n - 1):\n        for j in range(1, m - 1):\n            z = i * m + j\n            if pic[z] not in (pic[z + 1], pic[z - 1], pic[z + m], pic[z - m]):\n                w += 1\n    ts.append((n * m - w, p))\nts = sorted(ts)\nprint(ts[0][1] + 1)\nops = []\nfor r in range(k):\n    pic1 = ps[ts[r][1]]\n    pic2 = ps[ts[r + 1][1]]\n    for i in range(1, n - 1):\n        for j in range(1, m - 1):\n            z = i * m + j\n            if pic1[z] != pic2[z]:\n                ops.append('1 %i %i' % (i + 1, j + 1))\n    ops.append('2 ' + str(ts[r + 1][1] + 1))\nprint(len(ops))\nfor op in ops:\n    print(op)", "(n, m, k) = input('').split(' ')\nn = int(n)\nm = int(m)\nk = int(k)\nks = []\nps = []\nfor p in range(k + 1):\n    _ = input('')\n    pic = ''\n    for line in range(n):\n        pic += input('')\n    ps.append(pic)\n    w = 0\n    for i in range(1, n - 1):\n        for j in range(1, m - 1):\n            z = i * m + j\n            if pic[z] not in (pic[z + 1], pic[z - 1], pic[z + m], pic[z - m]):\n                w += 1\n    ks.append((n * m - w, p))\nks = sorted(ks)\nprint(ks[0][1] + 1)\nops = []\nfor r in range(k):\n    pic1 = ps[ks[r][1]]\n    pic2 = ps[ks[r + 1][1]]\n    for i in range(1, n - 1):\n        for j in range(1, m - 1):\n            z = i * m + j\n            if pic1[z] != pic2[z]:\n                ops.append('1 %i %i' % (i + 1, j + 1))\n    ops.append('2 ' + str(ks[r + 1][1] + 1))\nprint(len(ops))\nfor op in ops:\n    print(op)"]