["import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = [0] * n\n    c = 0\n    for i in range(n):\n        if d[a[i] - 1] == 0:\n            c += 1\n            t = i\n            while d[t] == 0:\n                d[t] = c\n                t = a[t] - 1\n    ans = n - c + 1\n    for i in range(n - 1):\n        if d[i] == d[i + 1]:\n            ans -= 2\n            break\n    print(ans)", "out = []\nfor _ in range(int(input())):\n    n = int(input())\n    p = [int(i) - 1 for i in input().split()]\n    ind = 1\n    ans = 0\n    comp = [0] * n\n    for i in range(n):\n        if comp[i]:\n            continue\n        v = i\n        while comp[v] == 0:\n            comp[v] = ind\n            v = p[v]\n            ans += 1\n        ind += 1\n        ans -= 1\n    for i in range(n - 1):\n        if comp[i] == comp[i + 1]:\n            out.append(ans - 1)\n            break\n    else:\n        out.append(ans + 1)\nfor i in out:\n    print(i)", "def main():\n    visit = [0] * n\n    cnt = 0\n    idx = 1\n    for i in range(n):\n        if visit[i]:\n            continue\n        j = i\n        while not visit[j]:\n            visit[j] = idx\n            j = A[j]\n            cnt += 1\n        idx += 1\n        cnt -= 1\n    for i in range(n - 1):\n        if visit[i] == visit[i + 1]:\n            return cnt - 1\n    return cnt + 1\nt = int(input())\nfor case in range(t):\n    n = int(input())\n    A = list(map(lambda x: int(x) - 1, input().split()))\n    print(main())", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    arr = [0] + arr\n    visited = [-1 for i in range(n + 1)]\n    yes = 0\n    ans = 0\n    for i in range(1, n + 1):\n        if visited[i] != -1:\n            continue\n        temp = arr[i]\n        visited[i] = i\n        l = 0\n        while temp != i:\n            visited[temp] = i\n            temp = arr[temp]\n            ans += 1\n    for i in range(n):\n        if visited[i] == visited[i + 1]:\n            yes = 1\n            break\n    print(ans + 1 - 2 * yes)", "t = int(input())\nfor ___ in range(t):\n    n = int(input())\n    cnt = 0\n    ok = False\n    vis = [0] * (n + 2)\n    p = [0] + list(map(int, input().split()))\n    for i in range(1, n + 1):\n        if vis[i] > 0:\n            continue\n        k = i\n        while True:\n            vis[k] = i\n            if vis[k - 1] == i or vis[k + 1] == i:\n                ok = True\n            k = p[k]\n            if k == i:\n                break\n            cnt += 1\n    print(cnt + (-1 if ok else 1))", "def conseq(arr):\n    if len(arr) == 0:\n        return False\n    for idx in range(len(arr) - 1):\n        if arr[idx + 1] == arr[idx] + 1:\n            return True\n\ndef solve():\n    n = int(input())\n    arr = [int(x) - 1 for x in input().split(' ')]\n    vis = [False] * n\n    parts = []\n    conseqs = []\n    created_inversion = False\n    for idx in range(n):\n        if idx == arr[idx]:\n            vis[idx] = True\n        elif vis[idx] is False:\n            cidx = idx\n            tarr = []\n            while vis[cidx] is False:\n                vis[cidx] = True\n                tarr.append(cidx)\n                cidx = arr[cidx]\n            starr = sorted(tarr)\n            tconseq = conseq(starr)\n            if created_inversion is False and len(starr) == 2 and (tconseq is True):\n                created_inversion = True\n            else:\n                parts.append(tarr)\n                conseqs.append(tconseq)\n    ans = 0\n    for idx in range(len(parts)):\n        pp = parts[idx]\n        cc = conseqs[idx]\n        if created_inversion is False and cc is True:\n            created_inversion = True\n            ans += len(pp) - 2\n        else:\n            ans += len(pp) - 1\n    if created_inversion is False:\n        ans += 1\n    return ans\ntc = int(input())\nfor idx in range(tc):\n    ans = solve()\n    print(ans)", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    cnt = 0\n    chk = False\n    vis = [0] * (n + 2)\n    p = [0] + list(map(int, input().split()))\n    for i in range(1, n + 1):\n        if vis[i] > 0:\n            continue\n        k = i\n        while True:\n            vis[k] = i\n            if vis[k - 1] == i or vis[k + 1] == i:\n                chk = True\n            k = p[k]\n            if k == i:\n                break\n            cnt += 1\n    if chk:\n        cnt -= 1\n    else:\n        cnt += 1\n    print(cnt)", "t = int(input(''))\nfor _ in range(t):\n    n = int(input(''))\n    p = [int(x) - 1 for x in input('').split(' ')]\n    vis = [0] * n\n    turn = 1\n    cost = 0\n    for i in range(n):\n        if not vis[i]:\n            vis[i] = turn\n            cur = p[i]\n            ln = 1\n            while cur != i:\n                vis[cur] = turn\n                ln += 1\n                cur = p[cur]\n            cost += ln - 1\n            turn += 1\n    adj = False\n    for i in range(n - 1):\n        if vis[i] == vis[i + 1]:\n            adj = True\n            break\n    if adj:\n        print(cost - 1)\n    else:\n        print(cost + 1)", "t = int(input())\nfor ___ in range(t):\n    n = int(input())\n    cnt = 0\n    ok = False\n    vis = [0] * (n + 2)\n    p = [0] + list(map(int, input().split()))\n    for i in range(1, n + 1):\n        if vis[i] > 0:\n            continue\n        k = i\n        while True:\n            vis[k] = i\n            if vis[k - 1] == i or vis[k + 1] == i:\n                ok = True\n            k = p[k]\n            if k == i:\n                break\n            cnt += 1\n    print(cnt + (-1 if ok else 1))", "for _ in range(int(input())):\n    N = int(input())\n    P = list(map(int, input().split()))\n    v = [False] * N\n    ans = 0\n    f = False\n    for i in range(N):\n        if v[i]:\n            continue\n        v[i] = True\n        cur = P[i] - 1\n        gr = [i]\n        while cur != i:\n            v[cur] = True\n            gr.append(cur)\n            cur = P[cur] - 1\n        gr.sort()\n        cnt = len(gr) - 1\n        if not f:\n            for i in range(len(gr) - 1):\n                if gr[i + 1] - gr[i] == 1:\n                    cnt -= 1\n                    f = True\n                    break\n        ans += cnt\n    if not f:\n        ans += 1\n    print(ans)", "def solve(perm):\n    touched = set()\n    cycles = []\n    for elem in range(len(perm)):\n        if elem in touched:\n            continue\n        touched.add(elem)\n        cycle = [elem]\n        while perm[elem] not in touched:\n            elem = perm[elem]\n            touched.add(elem)\n            cycle.append(elem)\n        cycles.append(cycle)\n    if all((len(cycle) == 1 for cycle in cycles)):\n        return 1\n    ans = sum((len(cycle) - 1 for cycle in cycles))\n    for cycle in cycles:\n        s = set(cycle)\n        for elem in s:\n            if elem + 1 in s:\n                return ans - 1\n    return ans + 1\n\ndef run():\n    n = int(input())\n    p = [int(x) - 1 for x in input().split()]\n    ans = solve(p)\n    print(ans)\ntests_nr = int(input())\nfor _ in range(tests_nr):\n    run()", "import math\nfrom collections import defaultdict\nfrom bisect import bisect_left, bisect_right\nfrom heapq import heappush, heappop, heapify\n\ndef getList(val=0):\n    if not val:\n        return list(map(int, input().split()))\n    else:\n        return list(map(str, input().split()))\n\ndef getTuple(val=0):\n    if not val:\n        return map(int, input().split())\n    return map(str, input().split())\n\ndef printList(arr):\n    for i in arr:\n        print(i, end=' ')\n    print()\n\ndef myCode():\n    n = int(input())\n    arr = getList()\n    dct = defaultdict(int)\n    now = 0\n    arrType = [-1 for i in arr]\n    total = 0\n    for i in range(1, n + 1):\n        if arrType[i - 1] + 1:\n            continue\n        j = i\n        while arrType[j - 1] == -1:\n            arrType[j - 1] = now\n            dct[now] += 1\n            j = arr[j - 1]\n        total += dct[now] - 1\n        now += 1\n    ans = float('inf')\n    for i in range(n - 1):\n        if arrType[i] == arrType[i + 1]:\n            ans = min(ans, total - 1)\n        else:\n            ans = min(ans, total + 1)\n    print(ans)\nfor _ in range(int(input())):\n    myCode()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    L = list(map(int, input().split()))\n    a = 0\n    Visited = [False] * n\n    C = []\n    f = False\n    for i in range(n):\n        if not Visited[i]:\n            if L[i] == i + 1:\n                Visited[i] = True\n            else:\n                c = 1\n                j = i\n                K = [i]\n                Visited[j] = True\n                while L[j] != i + 1:\n                    j = L[j] - 1\n                    K.append(j)\n                    Visited[j] = True\n                    c += 1\n                C.append(c)\n                K.sort()\n                for i in range(1, len(K)):\n                    if K[i] == K[i - 1] + 1:\n                        f = True\n                        break\n    ans = 0\n    for i in range(len(C)):\n        ans += C[i] - 1\n    if f:\n        ans -= 1\n    else:\n        ans += 1\n    print(ans)", "def cnt_cc(lst):\n    cc_id = [None] * len(lst)\n    cnt = 0\n    for i in range(len(lst)):\n        if cc_id[i] is not None:\n            continue\n        cnt += 1\n        top = i\n        while cc_id[top] is None:\n            cc_id[top] = cnt\n            top = lst[top]\n    return (cnt, cc_id)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = [int(v) - 1 for v in input().strip().split()]\n    backward = [None] * len(lst)\n    for (i, v) in enumerate(lst):\n        backward[v] = i\n    (total_cc, cc_id) = cnt_cc(lst)\n    answer = 1000000000.0\n    for i in range(1, len(lst)):\n        if cc_id[backward[i]] != cc_id[backward[i - 1]]:\n            cur_cc = total_cc - 1\n        else:\n            cur_cc = total_cc + 1\n        answer = min(answer, n - cur_cc)\n    print(answer)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    done = [0] * n\n    bns = -1\n    cct = 0\n    for i in range(n):\n        if done[i] == 0:\n            j = i\n            k = ls[i] - 1\n            cycle = set()\n            cycle.add(j)\n            cycle.add(k)\n            while i != ls[j] - 1:\n                cct += 1\n                done[k] = 1\n                j = k\n                k = ls[k] - 1\n                cycle.add(k)\n            sorted_cyc = sorted(cycle)\n            len_cyc = len(sorted_cyc)\n            for j in range(len_cyc - 1):\n                if sorted_cyc[j + 1] - 1 == sorted_cyc[j]:\n                    bns = 1\n    print(cct - bns)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    done = [False] * n\n    adj = False\n    cnt = 0\n    for i in range(n):\n        if done[i] or arr[i] == i + 1:\n            continue\n        else:\n            j = arr[i] - 1\n            inds = [i, j]\n            ln = 2\n            while j != i:\n                cnt += 1\n                done[j] = True\n                if abs(j - arr[j] + 1) == 1:\n                    adj = True\n                j = arr[j] - 1\n                inds.append(j)\n                ln += 1\n            inds.sort()\n            for j in range(ln - 1):\n                if abs(inds[j] - inds[j + 1]) == 1:\n                    adj = True\n    if adj:\n        print(cnt - 1)\n    else:\n        print(cnt + 1)"]