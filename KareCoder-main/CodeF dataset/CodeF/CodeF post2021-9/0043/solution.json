["for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    mem = list(map(int, input().split()))\n    ram = list(map(int, input().split()))\n    dp = []\n    for i in range(n):\n        dp.append([mem[i], ram[i]])\n    dp.sort()\n    rm = k\n    for i in dp:\n        if i[0] <= rm:\n            rm += i[1]\n        else:\n            break\n    print(rm)", "t = int(input())\nfor i in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    d = {}\n    for i in range(n):\n        if a[i] in d:\n            d[a[i]] += b[i]\n        else:\n            d[a[i]] = b[i]\n    key = sorted(list(d.keys()))\n    for i in key:\n        if k >= i:\n            k += d[i]\n        else:\n            break\n    print(k)", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_array():\n    return list(get_ints())\n\ndef input():\n    return sys.stdin.readline().strip()\nT = int(input())\nwhile T > 0:\n    (n, k) = get_ints()\n    Arr1 = get_array()\n    Arr2 = get_array()\n    curr = k\n    p = []\n    for i in range(n):\n        p.append((Arr1[i], Arr2[i]))\n    p.sort(key=lambda x: (x[0], -x[1]))\n    i = 0\n    ans = k\n    while i < n and curr >= p[i][0]:\n        curr += p[i][1]\n        ans = max(ans, curr)\n        i += 1\n    print(ans)\n    T -= 1", "import sys\ninput = lambda : sys.stdin.readline().strip()\nsys.setrecursionlimit(10 ** 9)\nt = int(input())\nfor _ in [0] * t:\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = []\n    for (i, j) in zip(a, b):\n        l += [(i, j)]\n    l.sort()\n    for (i, j) in l:\n        if k >= i:\n            k += j\n    print(k)", "def solve(k, a, b):\n    n = len(a)\n    s = [[a[i], b[i]] for i in range(n)]\n    s = sorted(s, key=lambda x: x[0])\n    cur = k\n    for i in range(n):\n        if s[i][0] > cur:\n            return cur\n        cur += s[i][1]\n    return cur\nt = int(input())\nout = []\nfor case in range(t):\n    s = list(map(int, input().split(' ')))\n    (n, k) = (s[0], s[1])\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    out.append(str(solve(k, a, b)))\nprint('\\n'.join(out))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = map(int, input().split())\n    b = map(int, input().split())\n    arr = sorted(zip(a, b), key=lambda x: x[0])\n    sm = k\n    for (a, b) in arr:\n        if a <= sm:\n            sm += b\n        else:\n            break\n    print(sm)", "t = int(input())\nwhile t:\n    l = list(map(int, input().split()))\n    n = l[0]\n    k = l[1]\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = []\n    for i in range(0, n):\n        l.append([a[i], b[i]])\n    y = sorted(l, key=lambda x: x[0])\n    for i in y:\n        if i[0] <= k:\n            k += i[1]\n    print(k)\n    t -= 1", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    result = list(zip(a, b))\n    result.sort(key=lambda x: x[0])\n    ans = k\n    for i in result:\n        if i[0] > ans:\n            return ans\n        ans += i[1]\n    return ans\n\ndef main():\n    t = int(input())\n    while t:\n        print(solve())\n        t -= 1\nmain()", "T = int(input())\nwhile T:\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    listOflists = list(zip(a, b))\n    listOflists.sort(key=lambda x: x[0])\n    for i in listOflists:\n        if i[0] <= k:\n            k += i[1]\n    print(k)\n    T -= 1", "testcases = int(input())\nout = []\nfor _ in range(testcases):\n    (shop, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    new = list(zip(a, b))\n    new.sort(key=lambda x: x[0])\n    for (x, y) in new:\n        if k >= x:\n            k += y\n    out.append(k)\nfor o in out:\n    print(o)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    x = []\n    for i in range(n):\n        x.append([a[i], b[i]])\n    x.sort()\n    for i in range(n):\n        if x[i][0] <= k:\n            k += x[i][1]\n        else:\n            break\n    print(k)\n    t -= 1", "import math\n\ndef solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    arr = []\n    for i in range(n):\n        arr.append([a[i], b[i]])\n    arr.sort()\n    s = k\n    for i in range(len(arr)):\n        if arr[i][0] <= s:\n            s += arr[i][1]\n        else:\n            break\n    print(s)\nt = int(input())\nfor i in range(t):\n    solve()", "T = int(input())\nfor t in range(T):\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    f = sorted(list(zip(a, b)))\n    for i in f:\n        if i[0] <= k:\n            k += i[1]\n        else:\n            break\n    print(k)", "class a:\n\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\ndef keys(a):\n    return a.x\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    b = [a(i) for i in list(map(int, input().split()))]\n    c = list(map(int, input().split()))\n    for i in range(n):\n        b[i].y = c[i]\n    b.sort(key=keys)\n    for i in range(n):\n        if k >= b[i].x:\n            k += b[i].y\n        else:\n            break\n    print(k)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    q = list(zip(a, b))\n    q.sort()\n    for i in range(n):\n        if q[i][0] <= k:\n            k += q[i][1]\n        else:\n            break\n    print(k)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [[i, j] for (i, j) in zip(a, b)]\n\n    def myfun(s):\n        return s[0]\n    c.sort(key=myfun)\n    ram = k\n    for i in range(n):\n        if c[i][0] > ram:\n            break\n        else:\n            ram += c[i][1]\n    print(ram)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    arr = [0] * n\n    for i in range(n):\n        arr[i] = list((a[i], b[i]))\n    arr.sort(key=lambda x: x[0])\n    for i in arr:\n        if i[0] <= k:\n            k += i[1]\n    print(k)", "t = int(input())\nfor tt in range(t):\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = []\n    for i in range(len(a)):\n        d.append((a[i], b[i]))\n    d.sort(key=lambda x: x[0])\n    for ram in d:\n        if k >= ram[0]:\n            k += ram[1]\n        else:\n            break\n    print(k)", "import math\nt = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    x = list(zip(a, b))\n    x.sort(key=lambda y: (y[0], -y[1]))\n    for i in range(0, n):\n        if x[i][0] <= k:\n            k = k + x[i][1]\n        else:\n            break\n    print(k)\n    t = t - 1", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'n,k=R()\\nfor x,y in sorted(zip(R(),R())):k+=(x<=k)*y\\nprint(k)\\n')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr1 = list(map(int, input().split()))\n    arr2 = list(map(int, input().split()))\n    arr = []\n    for i in range(n):\n        arr.append([arr1[i], arr2[i]])\n    arr.sort()\n    i = 0\n    while i < n and k >= arr[i][0]:\n        if k >= arr[i][0]:\n            k += arr[i][1]\n        else:\n            break\n        i += 1\n    print(k)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    (a, b) = [[*map(int, input().split())] for i in range(2)]\n    for (i, j) in sorted(zip(a, b)):\n        if k - i < 0:\n            break\n        k += j\n    print(k)", "import sys\ninput = sys.stdin.readline\nMAX = sys.maxsize\nsys.setrecursionlimit(10 ** 9)\n\ndef inp():\n    return int(input())\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\ndef solve(a, b, k):\n    zipped = list(reversed(sorted(zip(a, b))))\n    available = k\n    while True:\n        (prog, additional) = zipped.pop()\n        if prog <= available:\n            available += additional\n        else:\n            return available\n        if not zipped:\n            return available\nfor _ in range(inp()):\n    (n, k) = read_int_list()\n    a = read_int_list()\n    b = read_int_list()\n    print(solve(a, b, k))", "def find_max_ram(n, k, a, b):\n    ramsoft = list(zip(a, b))\n    ramsoft.sort(key=lambda x: x[0])\n    for (cost, value) in ramsoft:\n        if cost <= k:\n            k += value\n        else:\n            return k\n    return k\nT = int(input())\nfor t in range(T):\n    (n, k) = [int(j) for j in input().split()]\n    a = [int(j) for j in input().split()]\n    b = [int(j) for j in input().split()]\n    print(find_max_ram(n, k, a, b))", "for u in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(w) for w in input().split()]\n    b = [int(w) for w in input().split()]\n    x = [[a[i], b[i]] for i in range(n)]\n    x = sorted(x)\n    for i in range(n):\n        if k >= x[i][0]:\n            k += x[i][1]\n        else:\n            break\n    print(k)", "tst = int(input())\nfor i in range(tst):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = zip(a, b)\n    for i in sorted(c):\n        if i[0] <= k:\n            k += i[1]\n    print(k)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    req = list(map(int, input().split()))\n    ram = list(map(int, input().split()))\n    for (p, q) in sorted(zip(req, ram)):\n        if p <= k:\n            k += q\n        else:\n            break\n    print(k)", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = []\n    for i in range(n):\n        c.append([a[i], b[i]])\n    c.sort()\n    for i in range(n):\n        if k >= c[i][0]:\n            k += c[i][1]\n    print(k)\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "for z in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    lis = sorted(zip(a, b))\n    for i in range(n):\n        if lis[i][0] <= k:\n            k += lis[i][1]\n        else:\n            break\n    print(k)", "import sys\niterNum = int(input())\n(NK, A, B) = ([], [], [])\nfor _ in range(iterNum):\n    NK.append(sys.stdin.readline().rstrip('\\n'))\n    A.append(sys.stdin.readline().rstrip('\\n'))\n    B.append(sys.stdin.readline().rstrip('\\n'))\nN = [int(i.split(' ')[0]) for i in NK]\nK = [int(i.split(' ')[1]) for i in NK]\nfor (a, b, n, k) in zip(A, B, N, K):\n    a = [int(i) for i in a.split(' ')]\n    b = [int(i) for i in b.split(' ')]\n    abList = [[i, j] for (i, j) in zip(a, b)]\n    abList.sort()\n    for ab in abList:\n        if ab[0] <= k:\n            k += ab[1]\n        else:\n            break\n    print(k)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    b = [x for (_, x) in sorted(zip(a, b))]\n    a.sort()\n    for i in range(len(a)):\n        if a[i] <= k:\n            k += b[i]\n        else:\n            break\n    print(k)", "import sys\nfrom operator import itemgetter\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nnumber_tests = inp()\nfor _ in range(number_tests):\n    numbers = inlt()\n    answer = numbers[1]\n    first_list = inlt()\n    second_list = inlt()\n    combined_list = list(zip(first_list, second_list))\n    combined_list.sort(key=itemgetter(0))\n    for number in combined_list:\n        if answer >= number[0]:\n            answer += number[1]\n    print(answer)", "rii = lambda : [int(x) for x in input().split()]\nt = int(input())\nfor _ in range(t):\n    (n, k) = rii()\n    software = sorted(list(zip(rii(), rii())), key=lambda x: (x[0], -x[1]))\n    for (needed, recieved) in software:\n        if k < needed:\n            break\n        k += recieved\n    print(k)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = sorted(zip(a, b))\n    a = [x for (x, y) in c]\n    b = [y for (x, y) in c]\n    for x in range(n):\n        if a[x] <= k:\n            k += b[x]\n        else:\n            break\n    print(k)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    zipped_pairs = zip(a, b)\n    a = sorted(a)\n    c = [x for (_, x) in sorted(zipped_pairs)]\n    for i in range(n):\n        if a[i] <= k:\n            k += c[i]\n    print(k)", "def main():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = list(zip(a, b))\n    l.sort()\n    for i in range(n):\n        if l[i][0] <= k:\n            k += l[i][1]\n        else:\n            break\n    return k\nfor _ in range(int(input())):\n    print(main())", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    aa = [int(a) for a in input().split()]\n    bb = [int(b) for b in input().split()]\n    ab = sorted(zip(aa, bb))\n    for (a, b) in ab:\n        if a > k:\n            break\n        k += b\n    print(k)", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    s = [[float('inf'), float('inf')]]\n    for i in range(n):\n        s.append([a[i], b[i]])\n    s.sort()\n    ans = 0\n    while k >= s[0][0]:\n        k = k + s[0][1]\n        s.pop(0)\n    print(k)\n    t = t - 1", "t = int(input())\nfor i in range(t):\n    nk = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    z = []\n    for i in range(len(a)):\n        z.append([a[i], b[i]])\n    sz = sorted(z)\n    k = nk[1]\n    for i in range(len(sz)):\n        if sz[i][0] <= k:\n            k += sz[i][1]\n    print(k)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [[a[i], b[i]] for i in range(n)]\n    c.sort()\n    for (x, y) in c:\n        if x > k:\n            break\n        k += y\n    print(k)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [[a[i], b[i]] for i in range(n)]\n    c.sort()\n    for (x, y) in c:\n        if x > k:\n            break\n        k += y\n    print(k)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    ram_software = zip(a, b)\n    ram_software = sorted(ram_software)\n    for i in range(n):\n        if k >= ram_software[i][0]:\n            k += ram_software[i][1]\n        else:\n            break\n    print(k)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a1 = map(int, input().split())\n    b2 = map(int, input().split())\n    y = list(zip(a1, b2))\n    y.sort()\n    s = 0\n    for j in range(n):\n        if y[j][0] <= k + s:\n            s += y[j][1]\n    print(k + s)", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'n,k=R()\\nfor x,y in sorted(zip(R(),R())):k+=(x<=k)*y\\nprint(k)\\n')", "import sys\ninput = sys.stdin.readline\n\ndef print(*args, end='\\n', sep=' ') -> None:\n    sys.stdout.write(sep.join(map(str, args)) + end)\n\ndef solve() -> str:\n    (_, k) = map(int, input().split())\n    for (a, b) in sorted(zip(list(map(int, input().split())), list(map(int, input().split())))):\n        if a > k:\n            break\n        k += b\n    print(k)\n\ndef main() -> None:\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "def find_greedy_sol(ram, software):\n    software = sorted(software)\n    for (i, j) in software:\n        if i <= ram:\n            ram += j\n        else:\n            break\n    print(ram)\nnb = int(input())\nfor k in range(nb):\n    (ln, ram) = [int(i) for i in input().split()]\n    ram_necessary = [int(i) for i in input().split()]\n    ram_unlock = [int(i) for i in input().split()]\n    software = [(ram_necessary[i], ram_unlock[i]) for i in range(ln)]\n    find_greedy_sol(ram, software)", "testCases = int(input())\nfor _ in range(testCases):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for (i, j) in sorted(enumerate(a), key=lambda x: x[1]):\n        if j <= k:\n            k += b[i]\n        else:\n            break\n    print(k)", "import sys\ninput = sys.stdin.readline\n\ndef solve(n, k, a, b):\n    arr = list(zip(a, b))\n    arr.sort(key=lambda x: (x[0], -x[1]))\n    i = 0\n    curr = k\n    while i < n and arr[i][0] <= curr:\n        curr += arr[i][1]\n        i += 1\n    return curr\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(solve(n, k, a, b))", "from sys import stdin\n\ndef rei():\n    return list(map(int, stdin.readline().strip().split(' ')))\n\ndef res():\n    return stdin.readline().rstrip()\n\ndef prno():\n    print('NO')\n\ndef pryes():\n    print('YES')\n\ndef solve():\n    (n, k) = rei()\n    a = rei()\n    b = rei()\n    ab = sorted(list(zip(a, b)), key=lambda x: x[0])\n    for (a, b) in ab:\n        if a <= k:\n            k += b\n        else:\n            break\n    print(k)\nt = rei()[0]\nfor _ in range(t):\n    solve()", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(zip(a, b))\n    c.sort()\n    for (index, val) in enumerate(c):\n        if k >= val[0]:\n            k += val[1]\n        else:\n            break\n    print(k)", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'n,k=R()\\nfor x,y in sorted(zip(R(),R())):k+=(x<=k)*y\\nprint(k)\\n')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()[:n]))\n    b = list(map(int, input().split()[:n]))\n    y = [i[0] for i in sorted(enumerate(a), key=lambda x: x[1])]\n    a.sort()\n    l = []\n    for i in range(len(a)):\n        if k >= a[i]:\n            k += b[y[i]]\n        if i == len(a) - 1:\n            l.append(k)\n    print(*l)", "alpha = []\nbeta = []\ngamma = []\nt = int(input())\nfor i in range(t):\n    n = [int(s) for s in input().split(' ')]\n    a = [int(s) for s in input().split(' ')]\n    b = [int(s) for s in input().split(' ')]\n    alpha.append(n)\n    beta.append(a)\n    gamma.append(b)\nfor i in range(t):\n    (n, k) = alpha[i]\n    a = beta[i]\n    b = gamma[i]\n    z = []\n    for j in range(len(a)):\n        z.append([a[j], b[j]])\n    z.sort()\n    for j in range(len(a)):\n        if z[j][0] <= k:\n            k += z[j][1]\n        else:\n            break\n    print(k)", "n = int(input())\nfor i in range(n):\n    (ram_size, current_ram) = list(map(int, input().split(' ')))\n    ram_consumption = list(map(int, input().split(' ')))\n    ram_value = list(map(int, input().split(' ')))\n    d = {}\n    total_ram = current_ram\n    for j in range(ram_size):\n        d[j] = [ram_consumption[j], ram_value[j]]\n    d = dict(sorted(d.items(), key=lambda x: x[1][0]))\n    for (key, value) in d.items():\n        if value[0] <= total_ram:\n            total_ram += value[1]\n        else:\n            break\n    print(total_ram)", "import heapq\nT = int(input())\nfor _ in range(T):\n    inLine = input().split(' ')\n    (N, currentRam) = (int(inLine[0]), int(inLine[1]))\n    ramRequired = input().split(' ')\n    ramToGain = input().split(' ')\n    ramTuples = [0] * N\n    for i in range(N):\n        ramTuples[i] = (int(ramRequired[i]), int(ramToGain[i]))\n    heapq.heapify(ramTuples)\n    while len(ramTuples) > 0 and ramTuples[0][0] <= currentRam:\n        currentRam += heapq.heappop(ramTuples)[1]\n    print(currentRam)", "while True:\n    try:\n        test_cases = int(input())\n        for i in range(test_cases):\n            data = [int(x) for x in input().rstrip('\\n').split()]\n            n = data[0]\n            k = data[1]\n            A = [int(x) for x in input().rstrip('\\n').split()]\n            B = [int(x) for x in input().rstrip('\\n').split()]\n            A_B = []\n            a_to_b = {}\n            for i in range(len(A)):\n                A_B.append((A[i], B[i]))\n            A_B.sort()\n            for i in range(len(A_B)):\n                if k >= A_B[i][0]:\n                    k += A_B[i][1]\n            print(k)\n    except EOFError:\n        break", "numTests = int(input())\nfor num in range(numTests):\n    adders = dict()\n    line = input().split(' ')\n    options = int(line[0])\n    ram = int(line[1])\n    ramNeeded = input().split(' ')\n    ramAdded = input().split(' ')\n    for i in range(options):\n        if int(ramNeeded[i]) in adders:\n            adders[int(ramNeeded[i])] += int(ramAdded[i])\n        else:\n            adders[int(ramNeeded[i])] = int(ramAdded[i])\n    ramNeededList = sorted(adders.keys())\n    for i in range(len(ramNeededList)):\n        if ram >= ramNeededList[i]:\n            ram += adders[int(ramNeededList[i])]\n        else:\n            break\n    print(ram)", "def main():\n    numCases = int(input(''))\n    for i in range(numCases):\n        line1 = input('').split()\n        n = int(line1[0])\n        k = int(line1[1])\n        line2 = [int(x) for x in input('').split()]\n        line3 = [int(x) for x in input('').split()]\n        pairs = [(line2[i], line3[i]) for i in range(len(line2))]\n        pairs.sort()\n        for ele in pairs:\n            if k >= ele[0]:\n                k += ele[1]\n        print(k)\nmain()", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a1 = []\n    for i in range(n):\n        a1.append((a[i], i))\n    a1.sort()\n    for i in range(n):\n        if a1[i][0] <= k:\n            k += b[a1[i][1]]\n    print(k)", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'n,k=R()\\nfor x,y in sorted(zip(R(),R())):k+=(x<=k)*y\\nprint(k)\\n')", "t = int(input())\nwhile t != 0:\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    mk = []\n    for i in range(n):\n        mk.append([a[i], b[i]])\n    mk.sort()\n    for i in range(n):\n        if k >= mk[i][0]:\n            k = k + mk[i][1]\n        else:\n            break\n    print(k)\n    t = t - 1", "t = int(input())\nfor _ in range(t):\n    (n, ram) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    sortedA = sorted(a)\n    if sortedA[0] > ram:\n        print(ram)\n        continue\n    for e in sortedA:\n        if e <= ram:\n            ram += b[a.index(e)]\n            a[a.index(e)] = 's'\n        else:\n            continue\n    print(ram)", "def main():\n    t = int(input())\n    for i in range(t):\n        (n, k) = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        w = []\n        for j in range(n):\n            w.append([a[j], b[j]])\n        w = sorted(w)\n        for j in range(n):\n            if w[j][0] <= k:\n                k += w[j][1]\n        print(k)\nmain()", "t = int(input())\nfor _ in range(t):\n    inp = input().split()\n    n = int(inp[0])\n    k = int(inp[1])\n    lsa = input().split()\n    lsb = input().split()\n    lst = []\n    for i in range(n):\n        lst.append((int(lsa[i]), int(lsb[i])))\n    lst.sort(key=lambda x: x[0])\n    for i in lst:\n        if k >= i[0]:\n            k += i[1]\n        else:\n            break\n    print(k)", "for _ in range(int(input())):\n    d = input().split(' ')\n    n = int(d[0])\n    ozu = int(d[1])\n    lst1 = list(map(int, input().split(' ')))\n    lst2 = list(map(int, input().split(' ')))\n    for (x, y) in sorted(zip(lst1, lst2)):\n        if x > ozu:\n            break\n        ozu += y\n    print(ozu)", "from math import ceil, log10\nimport bisect\nimport math\nfrom collections import defaultdict\nfrom itertools import groupby\nfrom collections import defaultdict, Counter\nfrom heapq import heappop, heappush\nfrom collections import deque\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(zip(a, b))\n    c.sort(key=lambda x: x[0])\n    for (reqd, inc) in c:\n        if k < reqd:\n            break\n        k += inc\n    print(k)", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    c = list(zip(x, y))\n    c.sort()\n    for (i, j) in c:\n        if b >= i:\n            b += j\n    print(b)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a_copy = [i for i in a]\n    a_copy.sort()\n    while a_copy[0] <= k:\n        s = a_copy[0]\n        k += b.pop(a.index(s))\n        a.remove(s)\n        a_copy.pop(0)\n        if len(a_copy) == 0:\n            break\n    print(k)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    for (a, b) in sorted(zip(map(int, input().split()), input().split())):\n        if a > k:\n            break\n        k += int(b)\n    print(k)", "def moreRAM(l, a, b, k):\n    arr = [(0, 0)]\n    for i in range(l):\n        arr.append((a[i], b[i]))\n    arr.sort(key=lambda x: x[0])\n    for i in range(len(arr)):\n        if arr[i][0] <= k:\n            k = k + arr[i][1]\n    return k\nT = int(input())\nfor i in range(T):\n    arr = list(map(int, input().split()))\n    l = arr[0]\n    k = arr[1]\n    print(moreRAM(l, list(map(int, input().split())), list(map(int, input().split())), k))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    v = [[0, 0] for i in range(n)]\n    j = 0\n    for i in map(int, input().split()):\n        v[j][0] = i\n        j += 1\n    j = 0\n    for i in map(int, input().split()):\n        v[j][1] = i\n        j += 1\n    v.sort()\n    for i in v:\n        if i[0] > k:\n            break\n        else:\n            k += i[1]\n    print(k)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    (a, b) = [[*map(int, input().split())] for i in range(2)]\n    for (i, j) in sorted(zip(a, b)):\n        if k - i < 0:\n            break\n        k += j\n    print(k)", "t = int(input())\nfor i in range(t):\n    nk = input().split()\n    n = int(nk[0])\n    k = int(nk[1])\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    tmp = []\n    for i in range(n):\n        tmp.append((a[i], b[i]))\n    tmp.sort()\n    for value in tmp:\n        if value[0] > k:\n            break\n        else:\n            k += value[1]\n    print(k)", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'n,k=R()\\nfor x,y in sorted(zip(R(),R())):k+=(x<=k)*y\\nprint(k)\\n')", "t = int(input())\nwhile t != 0:\n    t -= 1\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for (i, j) in sorted(zip(a, b)):\n        if k - i < 0:\n            break\n        k += j\n    print(k)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = sorted(list(zip(list(map(int, input().split())), list(map(int, input().split())))), key=lambda x: x[0])\n    for i in l:\n        if i[0] <= k:\n            k += i[-1]\n        else:\n            break\n    print(k)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    p = sorted(zip(a, b))\n    t = k\n    for (i, j) in p:\n        if i <= t:\n            t += j\n    print(t)", "for i in range(int(input())):\n    (a, b) = map(int, input().split())\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    if b < min(c):\n        print(b)\n    else:\n        e = []\n        for j in range(a):\n            e.append((c[j], d[j]))\n        e.sort()\n        for k in range(len(e)):\n            if e[k][0] <= b:\n                b += e[k][1]\n        print(b)", "t = int(input())\nfor i in range(t):\n    (n, k) = input().split()\n    n = int(n)\n    ram = int(k)\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    mem = []\n    for i in range(n):\n        ele = []\n        ele.append(a[i])\n        ele.append(b[i])\n        mem.append(ele)\n    sm = sorted(mem)\n    for i in range(n):\n        if sm[i][0] <= ram:\n            ram = ram + sm[i][1]\n    print(ram)", "t = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr1 = list(map(int, input().split()))\n    ans = [(arr[i], arr1[i]) for i in range(n)]\n    ans.sort()\n    for i in ans:\n        if i[0] <= k:\n            k += i[1]\n    print(k)\n    t -= 1", "for i in range(int(input())):\n    (n, k) = [int(i) for i in input().split(' ')]\n    a = [int(i) for i in input().split(' ')]\n    b = [int(i) for i in input().split(' ')]\n    c = [[i, j] for (i, j) in zip(a, b)]\n    c.sort(key=lambda x: x[0])\n    for i in range(n):\n        temp = c[i][0]\n        extra = c[i][1]\n        if k >= temp:\n            k += extra\n        else:\n            break\n    print(k)", "t = int(input())\nfor z in range(t):\n    d = {}\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [x for (_, x) in sorted(zip(a, b))]\n    a.sort()\n    for i in range(n):\n        if a[i] <= k:\n            k = k + c[i]\n    print(k)", "t = int(input())\nfor z in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[i] = a[i]\n    res = {key: val for (key, val) in sorted(d.items(), key=lambda ele: ele[1])}\n    for i in res:\n        if k < res[i]:\n            break\n        else:\n            k += b[i]\n    print(k)", "mod = 10000000\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ab = list(zip(a, b))\n    ab.sort()\n    for (a, b) in ab:\n        if a <= k:\n            k += b\n    print(k)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    assert len(a) == len(b) == n\n    for (req, add) in sorted(zip(a, b)):\n        if req > k:\n            break\n        k += add\n    print(k)", "import collections\nt = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    has_map = {}\n    for i in range(n):\n        if a[i] in has_map:\n            has_map[a[i]] += b[i]\n        else:\n            has_map[a[i]] = b[i]\n    od = dict(sorted(has_map.items()))\n    for (key, value) in od.items():\n        if key <= k:\n            k += value\n    print(k)\n    t -= 1", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    p = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n    f = []\n    for i in range(a):\n        f.append([p[i], q[i]])\n    f = sorted(f, key=lambda l: l[0])\n    for i in range(a):\n        if b >= f[i][0]:\n            b += f[i][1]\n        else:\n            break\n    print(b)", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * 'n,k=R()\\nfor x,y in sorted(zip(R(),R())):k+=(x<=k)*y\\nprint(k)\\n')", "T = int(input())\nfor _ in range(T):\n    (n, k) = [int(x) for x in input().split(' ')]\n    a = [int(x) for x in input().split(' ')]\n    b = [int(x) for x in input().split(' ')]\n    c = sorted(zip(a, b))\n    j = 0\n    for (i, j) in c:\n        if i <= k:\n            k += j\n        else:\n            break\n    print(k)", "tests = int(input())\nfor test in range(tests):\n    (n, memory) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    d = list(zip(a, b))\n    d.sort(key=lambda x: x[0])\n    for x in d:\n        if x[0] <= memory:\n            memory += x[1]\n    print(memory)", "for l in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ab = list(zip(a, b))\n    ab.sort()\n    for (a, b) in ab:\n        if a <= k:\n            k += b\n    print(k)", "def sor(val):\n    return val[0]\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    arr = []\n    for i in range(n):\n        arr.append((a[i], b[i]))\n    arr.sort(key=sor)\n    i = 0\n    while i < n and k >= arr[i][0]:\n        k = k + arr[i][1]\n        i = i + 1\n    print(k)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    mergedList = [[a[i], b[i]] for i in range(n)]\n    mergedList.sort(key=lambda x: x[0])\n    for x in mergedList:\n        if x[0] <= k:\n            k += x[1]\n    print(k)", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(XX) for XX in input().split()]\n    a = [int(XX) for XX in input().split()]\n    b = [int(XX) for XX in input().split()]\n    allSoftware = list(sorted([(a[i], b[i]) for i in range(n)]))\n    for i in range(n):\n        if k < allSoftware[i][0]:\n            break\n        k += allSoftware[i][1]\n    print(k)", "t = int(input())\nfor _ in range(0, t):\n    inputs = [int(num) for num in input().split()]\n    n = inputs[0]\n    k = inputs[1]\n    lista = [int(num) for num in input().split()]\n    listb = [int(num) for num in input().split()]\n    c1 = 0\n    zipped_lists = zip(lista, listb)\n    sorted_pairs = sorted(zipped_lists)\n    tuples = zip(*sorted_pairs)\n    (lista, listb) = [list(tuple) for tuple in tuples]\n    ram = k\n    i = 0\n    for i in range(0, len(lista)):\n        if lista[i] <= ram:\n            ram += listb[i]\n        else:\n            break\n    print(ram)", "size = int(input())\noutput = ''\nfor i in range(0, size):\n    (nb, initial) = list(map(int, input().split()))\n    programs = list(map(int, input().split()))\n    rewards = list(map(int, input().split()))\n    data = dict()\n    for k in range(0, len(programs)):\n        try:\n            data[programs[k]] += rewards[k]\n        except KeyError:\n            data[programs[k]] = rewards[k]\n    j = 0\n    programs = list(dict.fromkeys(programs))\n    programs.sort()\n    while j < len(programs) and initial >= programs[j]:\n        initial += data[programs[j]]\n        j += 1\n    output += str(initial) + '\\n'\nprint(output)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    (a, b) = [[*map(int, input().split())] for i in range(2)]\n    for (i, j) in sorted(zip(a, b)):\n        if k - i < 0:\n            break\n        k += j\n    print(k)", "answers = []\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    new_a = []\n    for (index, value) in enumerate(a):\n        new_a.append((value, index))\n    new_a.sort(key=lambda tup: tup[0])\n    for item in new_a:\n        (value, index) = (item[0], item[1])\n        if value > k:\n            break\n        k += b[index]\n    ans = k\n    answers.append(ans)\nfor i in answers:\n    print(i)", "import math\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = list(zip(A, B))\n    C = sorted(C, key=lambda item: item[0])\n    for (a, b) in C:\n        if k >= a:\n            k += b\n    print(k)"]