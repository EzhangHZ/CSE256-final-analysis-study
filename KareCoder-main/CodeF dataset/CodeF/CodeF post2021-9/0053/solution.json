["def Solve():\n    (ns, A) = ([], [])\n    for t in range(int(input())):\n        ns.append(int(input()))\n        A.append(list(map(int, input().split())))\n    for (n, a) in zip(ns, A):\n        s = set()\n        for i in a[::-1]:\n            if i not in s:\n                s.add(i)\n            else:\n                print(n - len(s))\n                break\n        else:\n            print(0)\nSolve()", "def unique_breaks(s):\n    r = {}\n    start = len(s) - 1\n    end = -1\n    step = end\n    for k in range(start, end, step):\n        v = s[k]\n        if r.get(v) == None:\n            r[v] = 1\n        else:\n            return k + 1\n    return 0\n\ndef main():\n    t = input()\n    t = int(t)\n    from itertools import repeat\n    b = list(repeat(0, t))\n    for i in range(t):\n        n = input()\n        s = input()\n        b[i] = unique_breaks(s.split(' '))\n    for k in range(t):\n        print(b[k])\nmain()", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nmis = lambda : map(int, input().split())\nINF = float('inf')\n\ndef solve():\n    N = int(input())\n    arr = list(mis())\n    cnt = [0] * (N + 1)\n    ans = N\n    for i in range(N - 1, -1, -1):\n        if cnt[arr[i]]:\n            break\n        ans -= 1\n        cnt[arr[i]] = 1\n    print(ans)\nT = int(input())\nfor _ in range(T):\n    solve()", "import sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n = int(sys.stdin.readline())\n        arr = list(map(int, sys.stdin.readline().split()))\n        st = set()\n        for i in range(n - 1, -1, -1):\n            if arr[i] not in st:\n                st.add(arr[i])\n            else:\n                break\n        print(len(arr) - len(st))\nmain()", "import sys\nk = int(sys.stdin.readline().strip())\nfor _ in range(k):\n    s = set()\n    n = int(sys.stdin.readline().strip())\n    a = list(map(int, sys.stdin.readline().split()))\n    for v in a[::-1]:\n        if v in s:\n            break\n        s.add(v)\n    print(n - len(s))", "from sys import stdin, stdout\n\ndef ans():\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    temp = set()\n    for x in a[::-1]:\n        if x in temp:\n            break\n        temp.add(x)\n    print(n - len(temp))\nt = int(stdin.readline())\nfor _ in range(t):\n    ans()", "import sys\ninput = sys.stdin.readline\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = set()\n    for i in arr[::-1]:\n        if i in x:\n            break\n        x.add(i)\n    print(n - len(x))", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    n = int(inp())\n    a = list(map(int, inp().split()))\n    c = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        if c[a[i]] > 0:\n            print(i + 1)\n            return\n        c[a[i]] += 1\n    print(0)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "def solve():\n    n = int(input())\n    tc = []\n    for i in range(n):\n        tc.append([])\n        tc[i].append(int(input()))\n        tc[i].append(list(map(int, str(input()).split())))\n    for test in tc:\n        l = test[0]\n        coll = set()\n        vals = test[1]\n        rv = 0\n        for i in range(l - 1, -1, -1):\n            if vals[i] in coll:\n                rv = i + 1\n                break\n            else:\n                coll.add(vals[i])\n        print(rv)\nsolve()", "import sys\ninput = sys.stdin.readline\nI = lambda : list(map(int, input().split()))\n(t,) = I()\nfor _ in range(t):\n    (n,) = I()\n    l = I()\n    vis = [0] * (n + 1)\n    rem = flag = 0\n    for i in range(n - 1, -1, -1):\n        if flag == 0 and vis[l[i]]:\n            rem = i + 1\n            flag = 1\n        else:\n            vis[l[i]] = 1\n    print(rem)", "import sys\ninput = sys.stdin.readline\n\ndef print(*args, end='\\n', sep=' ') -> None:\n    sys.stdout.write(sep.join(map(str, args)) + end)\n\ndef Solve():\n    (ns, A) = ([], [])\n    for t in range(int(input())):\n        ns.append(int(input()))\n        A.append(list(map(int, input().split())))\n    for (n, a) in zip(ns, A):\n        s = dict()\n        for i in a[::-1]:\n            if i not in s.keys():\n                s[i] = None\n            else:\n                print(n - len(s))\n                break\n        else:\n            print(0)\nSolve()", "def main():\n    len_s = int(input())\n    my_nums = set()\n    seq = input().split(' ')\n    for i in range(len_s - 1, -1, -1):\n        if seq[i] not in my_nums:\n            my_nums.add(seq[i])\n        else:\n            print(i + 1)\n            return\n    print('0')\nn = int(input())\nfor _ in range(n):\n    main()", "cant_test_cases = int(input())\nfor i in range(cant_test_cases):\n    len_lista = int(input())\n    lista = input().split(' ')[::-1]\n    letras = set()\n    for elemento in lista:\n        if elemento in letras:\n            break\n        else:\n            letras.add(elemento)\n    print(len_lista - len(letras))", "def solve(arr, n):\n    vis = [0] * (n + 1)\n    ans = n\n    for i in range(n - 1, -1, -1):\n        if vis[arr[i]] != 1:\n            ans -= 1\n            vis[arr[i]] = 1\n        else:\n            break\n    return ans\nt = int(input())\nans = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = solve(arr, n)\n    ans.append(x)\nfor i in ans:\n    print(i)", "def solve():\n    n = int(input())\n    a = input().split(' ')\n    s = set()\n    for i in range(n - 1, -1, -1):\n        if a[i] in s:\n            print(i + 1)\n            return\n        else:\n            s.add(a[i])\n    print(0)\nT = int(input())\nfor t in range(T):\n    solve()", "def solve():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    count = n\n    ans = set()\n    for i in range(n - 1, -1, -1):\n        if a[i] in ans:\n            return str(count)\n        count -= 1\n        ans.add(a[i])\n    return str(count)\nt = int(input())\nq = []\nwhile t:\n    q.append(solve())\n    t -= 1\nprint('\\n'.join(q))", "t = int(input())\nsol = []\nfor _ in range(t):\n    n = int(input())\n    a = input().split()[::-1]\n    s = set()\n    cnt = 0\n    for i in range(n):\n        if a[i] not in s:\n            s.add(a[i])\n            cnt += 1\n        else:\n            break\n    sol.append(n - cnt)\nfor s in sol:\n    print(s)", "import sys\nfrom collections import deque\ninp = sys.stdin.readline\nfor _ in range(int(inp())):\n    n = int(inp())\n    a = list(map(int, inp().split()))\n    d = [0] * (n + 1)\n    cnt = 0\n    for i in range(n - 1, -1, -1):\n        if not d[a[i]]:\n            d[a[i]] = 1\n            cnt += 1\n        else:\n            break\n    print(n - cnt)", "t = int(input())\n\ndef compute():\n    n = int(input())\n    seq = [int(x) for x in input().split(' ')]\n    seq.reverse()\n    hashmap = {}\n    moves = n\n    for val in seq:\n        if val in hashmap:\n            return moves\n        else:\n            hashmap[val] = 1\n            moves -= 1\n    return 0\nfor _ in range(t):\n    print(compute())", "for _ in range(int(input())):\n    n = int(input())\n    a = input().split()[::-1]\n    d = set()\n    for x in a:\n        if x in d:\n            break\n        d.add(x)\n    print(n - len(d))", "from collections import defaultdict\n_ = int(input())\nans = []\nfor testcases in range(_):\n    n = int(input())\n    a = list(reversed(list(map(int, input().split()))))\n    hash = defaultdict(int)\n    if len(set(a)) == n:\n        ans.append(0)\n    else:\n        for j in a:\n            if hash[j] == 0:\n                hash[j] += 1\n            else:\n                ans.append(n - sum(list(hash.values())))\n                break\nfor i in ans:\n    print(i)", "from sys import stdin\n\ndef input():\n    return stdin.readline().strip()\n\ndef read_int():\n    return int(input())\n\ndef read_ints():\n    return map(int, input().split())\nt = read_int()\nfor case_num in range(t):\n    n = read_int()\n    a = list(read_ints())\n    s = set()\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] in s:\n            ans = i + 1\n            break\n        s.add(a[i])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = input().split()\n    s = set()\n    flag = True\n    for i in l[::-1]:\n        if i not in s:\n            s.add(i)\n        else:\n            print(n - len(s))\n            flag = False\n            break\n    if flag:\n        print(0)", "for i in range(int(input())):\n    n = int(input())\n    aLst = list(input().split())\n    aLst.reverse()\n    newSet = set()\n    for j in aLst:\n        if j not in newSet:\n            newSet.add(j)\n        else:\n            break\n    print(n - len(newSet))", "def polycarp():\n    n = int(input())\n    counter = {}\n    duplicate = 0\n    seq = list(input().split())\n    for s in seq:\n        if s in counter:\n            if counter[s] == 1:\n                duplicate += 1\n            counter[s] += 1\n        else:\n            counter[s] = 1\n    if not duplicate:\n        return 0\n    for (i, num) in enumerate(seq):\n        counter[num] -= 1\n        if counter[num] == 1:\n            duplicate -= 1\n        if duplicate == 0:\n            return i + 1\n    return len(seq) - 1\nt = int(input())\nfor _ in range(t):\n    print(polycarp())", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = input().split()[::-1]\n    s = set()\n    for i in a:\n        if i in s:\n            break\n        s.add(i)\n    print(n - len(s))\n    t -= 1", "def print_hi(W):\n    for i in range(int(W)):\n        n = input()\n        a = input()\n        list1 = list(a.split())[::-1]\n        set1 = set()\n        for i in list1:\n            if i in set1:\n                break\n            set1.add(i)\n        print(int(n) - len(set1))\nt = input()\nprint_hi(t)", "for _ in range(int(input())):\n    (n, s) = (int(input()), set())\n    a = list(input().split())[::-1]\n    for i in a:\n        if i in s:\n            break\n        s.add(i)\n    print(n - len(s))", "t = int(input())\nwhile t:\n    n = int(input())\n    a = input().split()[::-1]\n    l = set()\n    for i in a:\n        if i in l:\n            break\n        l.add(i)\n    print(n - len(l))\n    t -= 1", "def test():\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    s = set()\n    count = 0\n    for i in reversed(l):\n        if i in s:\n            break\n        s.add(i)\n        count += 1\n    print(n - count)\nT = int(input())\nfor i in range(T):\n    test()", "from sys import stdin, stdout\nfrom math import gcd, sqrt, floor, ceil\nfrom collections import defaultdict\nimport random\ninput = stdin.readline\n\ndef list_inp(x):\n    return list(map(x, input().split()))\n\ndef map_inp(x):\n    return map(x, input().split())\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list_inp(int)\n    if n == 0 or n == 1:\n        print(0)\n    else:\n        rep = [0] * (n + 1)\n        ans = n\n        for i in range(n - 1, -1, -1):\n            if rep[arr[i]] == 1:\n                break\n            ans -= 1\n            rep[arr[i]] = 1\n        print(ans)", "def makeHappy(n, seq):\n    data = {}\n    if len(set(seq)) == len(seq):\n        return 0\n    if len(seq) == 1:\n        return 0\n    else:\n        for i in reversed(range(n)):\n            if seq[i] not in data:\n                data[seq[i]] = True\n            else:\n                return i + 1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    seq = list(map(int, input().split()))\n    print(makeHappy(n, seq))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    boo = set()\n    moves = 0\n    for i in a[::-1]:\n        if i in boo:\n            break\n        boo.add(i)\n        moves += 1\n    print(n - moves)", "for s in [*open(0)][2::2]:\n    a = s.split()\n    s = {0}\n    i = len(a)\n    while {a[(i := (i - 1))]} - s:\n        s |= {a[i]}\n    print(i + 1)", "for s in [*open(0)][2::2]:\n    a = s.split()\n    s = {0}\n    i = len(a)\n    while {a[(i := (i - 1))]} - s:\n        s |= {a[i]}\n    print(i + 1)", "for s in [*open(0)][2::2]:\n    a = s.split()\n    s = {0}\n    i = len(a)\n    while {a[(i := (i - 1))]} - s:\n        s |= {a[i]}\n    print(i + 1)", "def delete_prefix(a):\n    (s, res) = (set(), 0)\n    for (i, j) in enumerate(reversed(a)):\n        if j in s:\n            res = len(a) - i\n            break\n        else:\n            s.add(j)\n    print(res)\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    delete_prefix(a)", "for s in [*open(0)][2::2]:\n    a = s.split()\n    s = {0}\n    i = len(a)\n    while {a[(i := (i - 1))]} - s:\n        s |= {a[i]}\n    print(i + 1)", "for s in [*open(0)][2::2]:\n    a = s.split()\n    s = {0}\n    i = len(a)\n    while {a[(i := (i - 1))]} - s:\n        s |= {a[i]}\n    print(i + 1)", "for s in [*open(0)][2::2]:\n    a = s.split()\n    s = {0}\n    i = len(a)\n    while {a[(i := (i - 1))]} - s:\n        s |= {a[i]}\n    print(i + 1)", "for _ in range(int(input())):\n    (n, s) = (int(input()), set())\n    a = list(input().split())[::-1]\n    for i in a:\n        if i in s:\n            break\n        s.add(i)\n    print(n - len(s))", "import math\nt = int(input())\nfor t1 in range(t):\n    n = int(input())\n    a = input().split()\n    ans = set()\n    for i in a[::-1]:\n        if i not in ans:\n            ans.add(i)\n        else:\n            break\n    print(abs(len(ans) - n))", "n = int(input())\nwhile n > 0:\n    m = int(input())\n    a = input().split()[::-1]\n    q = set()\n    for k in a:\n        if k in q:\n            break\n        q.add(k)\n    print(m - len(q))\n    n -= 1", "import math\n\ndef max_cuts(n, a, b, c):\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -1\n    result = max(max_cuts(n - a, a, b, c), max_cuts(n - b, a, b, c), max_cuts(n - c, a, b, c))\n    if result == -1:\n        return -1\n    return result + 1\n\ndef freq(list1):\n    freq_count = {}\n    for i in list1:\n        if i in freq_count:\n            freq_count[i] += 1\n        else:\n            freq_count[i] = 1\n    return freq_count\nt = int(input())\nfor t1 in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    uniq = set()\n    for i in a[::-1]:\n        if i not in uniq:\n            uniq.add(i)\n        else:\n            break\n    print(n - len(uniq))", "t = int(input())\nans = []\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    s = set()\n    res = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] in s:\n            res = i + 1\n            break\n        s.add(a[i])\n    ans.append(res)\nfor i in range(t):\n    print(ans[i])", "for s in [*open(0)][2::2]:\n    a = s.split()\n    s = {0}\n    i = len(a)\n    while {a[(i := (i - 1))]} - s:\n        s |= {a[i]}\n    print(i + 1)", "for s in [*open(0)][2::2]:\n    s = s.split()\n    l = set()\n    j = len(s) - 1\n    while j >= 0 and s[j] not in l:\n        l.add(s[j])\n        j -= 1\n    print(j + 1)", "import sys\nimport math\nfrom collections import Counter\nfrom collections import defaultdict\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef solve(arr):\n    visit = set()\n    cnt = 0\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] not in visit:\n            visit.add(arr[i])\n            cnt += 1\n        else:\n            break\n    return len(arr) - cnt\nt = int(input())\nfor _ in range(t):\n    n = get_ints()\n    arr = get_ints()\n    print(solve(arr))", "T = int(input())\nq = []\nfor i in range(T):\n    n = int(input())\n    data = [int(i) for i in input().split()]\n    q.append((n, data))\n\ndef solve(n, data):\n    s = set()\n    for i in range(n - 1, -1, -1):\n        if data[i] in s:\n            print(i + 1)\n            return\n        s.add(data[i])\n    print(0)\nfor (n, data) in q:\n    solve(n, data)", "t = int(input())\nans = []\nfor x in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = set()\n    for y in range(len(a) - 1, -1, -1):\n        if a[y] in s:\n            ans.append(y + 1)\n            break\n        s.add(a[y])\n    if len(s) == len(a):\n        ans.append(0)\nfor el in ans:\n    print(el)", "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    I = list(map(int, input().split()))\n    Ans = [0] * (n + 1)\n    check = True\n    for i in range(1, n + 1):\n        if Ans[I[-i]] == 0:\n            Ans[I[-i]] = 1\n        else:\n            check = False\n            break\n    if not check:\n        print(n - i + 1)\n    else:\n        print(0)", "for _ in range(int(input())):\n    n = int(input())\n    s = set()\n    if 438434 == '7t8ht4h':\n        print('Tanmay')\n    a = [int(x) for x in input().split()]\n    c = 0\n    if n == len(set(a)):\n        print(0)\n        continue\n    for i in a[-1::-1]:\n        if i in s:\n            c = n - c\n            break\n        c += 1\n        s.add(i)\n    print(c)", "t = int(input())\nres = []\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (d, maxx) = (set(), 0)\n    for j in range(len(arr) - 1, -1, -1):\n        if arr[j] in d:\n            res.append(j + 1)\n            maxx = 1\n            break\n        else:\n            d.add(arr[j])\n    if not maxx:\n        res.append(0)\nfor i in res:\n    print(i)", "t = int(input())\n\ndef solve():\n    n = int(input())\n    lst = list(map(int, input().split()))\n    hash_map = {}\n    for i in range(n - 1, -1, -1):\n        if lst[i] in hash_map:\n            print(i + 1)\n            return\n        else:\n            hash_map[lst[i]] = 1\n    print(0)\nwhile t:\n    solve()\n    t -= 1", "import sys\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\ndef get_vars():\n    return map(int, sys.stdin.readline().split())\n\ndef get_num():\n    return int(sys.stdin.readline())\ntests = get_num()\nfor test in range(tests):\n    n = get_num()\n    a = get_array()\n    freq = dict()\n    i = n - 1\n    rep = False\n    while i >= 0:\n        if a[i] in freq:\n            rep = True\n            break\n        else:\n            freq[a[i]] = 1\n        i -= 1\n    if rep:\n        print(i + 1)\n    else:\n        print(0)", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    s = s[::-1]\n    dic = {}\n    c = n\n    d = 0\n    for j in s.split():\n        if dic.get(j) == None:\n            dic[j] = 1\n        else:\n            d = c\n            break\n        c -= 1\n    print(d)", "t = int(input())\nfor _in in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    ma = {}\n    ans = 0\n    for i in a[::-1]:\n        if i in ma:\n            break\n        ma[i] = 1\n        ans += 1\n    print(n - ans)", "def Solve():\n    for t in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        s = set()\n        for i in a[::-1]:\n            if i not in s:\n                s.add(i)\n            else:\n                print(n - len(s))\n                break\n        else:\n            print(0)\nSolve()", "for k in [*open(0)][2::2]:\n    b = k.split()\n    k = {0}\n    i = len(b)\n    while {b[(i := (i - 1))]} - k:\n        k |= {b[i]}\n    print(i + 1)", "t = int(input())\nfor i in range(0, t):\n    le = int(input())\n    arr = input().split()\n    arr.reverse()\n    arr1 = {}\n    for i in range(0, len(arr)):\n        if arr1.get(arr[i]) == None:\n            arr1[arr[i]] = 1\n        else:\n            print(le - len(arr1))\n            break\n    else:\n        print(0)", "from bisect import bisect_left, bisect_right\nimport math, sys, os\nfrom io import BytesIO\nfrom collections import defaultdict, Counter\nfrom math import log, ceil, sqrt, floor, gcd, log2\nfrom itertools import chain, combinations\nfrom functools import reduce\ninput = sys.stdin.readline\nprintt = lambda x: sys.stdout.write(str(x) + '\\n')\nprintts = lambda x: sys.stdout.write(' '.join(map(str, x)) + '\\n')\ndivisors = lambda n: set(chain.from_iterable(((i, n // i) for i in range(1, int(sqrt(n)) + 1) if not n % i)))\nis_prime = lambda n: False if n < 2 else True if n in [2, 3] else False if n % 2 == 0 else not any((n % i == 0 for i in range(3, 1 + floor(sqrt(n)), 2)))\nn_is_power_of_p = lambda n, p: not log(n, p) % 1\nlcm = lambda a, b: int(a * b / gcd(a, b))\n\ndef yes():\n    printt('YES')\n\ndef no():\n    printt('NO')\nfor case in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    used = set()\n    found = False\n    for i in range(n - 1, -1, -1):\n        if arr[i] in used:\n            printt(i + 1)\n            found = True\n            break\n        used.add(arr[i])\n    if not found:\n        printt(0)", "for k in [*open(0)][2::2]:\n    b = k.split()\n    k = {0}\n    i = len(b)\n    while {b[(i := (i - 1))]} - k:\n        k |= {b[i]}\n    print(i + 1)", "def ans(n, a):\n    s = set()\n    i = 0\n    for j in range(n):\n        while a[j] in s:\n            s.remove(a[i])\n            i += 1\n        s.add(a[j])\n    return n - len(s)\nT = int(input())\nl = []\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = ans(n, a)\n    l.append(c)\nfor i in range(T):\n    print(l[i])", "for so1 in [*open(0)][2::2]:\n    a1 = so1.split()\n    so1 = {0}\n    i = len(a1)\n    while {a1[(i := (i - 1))]} - so1:\n        so1 |= {a1[i]}\n    print(i + 1)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = input().split()[::-1]\n    s = set()\n    for i in a:\n        if i in s:\n            break\n        s.add(i)\n    print(n - len(s))\n    t -= 1", "for s in [*open(0)][2::2]:\n    a = s.split()\n    s = {0}\n    i = len(a)\n    while {a[(i := (i - 1))]} - s:\n        s |= {a[i]}\n    print(i + 1)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    temp = set()\n    f = 1\n    for b in a[::-1]:\n        if b in temp:\n            print(n - len(temp))\n            f = 0\n            break\n        else:\n            temp.add(b)\n    if f:\n        print(0)", "def sol(l):\n    l.reverse()\n    d = dict()\n    if len(l) == len(set(l)):\n        return 0\n    for _ in range(len(l)):\n        if l[_] not in d:\n            d[l[_]] = 1\n        else:\n            return len(l) - _\nt = int(input())\nfor _ in range(t):\n    n = input()\n    l = [int(i) for i in input().split()]\n    print(sol(l))", "test = int(input())\nfor _ in range(test):\n    leng = int(input())\n    linp = list(map(int, input().split()))\n    remove = len(linp) - len(set(linp))\n    l = []\n    if remove == 0:\n        print(0)\n        continue\n    else:\n        c = set()\n        for i in range(leng - 1, -1, -1):\n            if linp[i] in c:\n                move = i + 1\n                print(i + 1)\n                break\n            else:\n                c.add(linp[i])\n        continue", "import math\nt = int(input())\nfor t1 in range(t):\n    n = int(input())\n    a = input().split()\n    ans = set()\n    for i in a[::-1]:\n        if i not in ans:\n            ans.add(i)\n        else:\n            break\n    print(abs(len(ans) - n))", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = input().split()[::-1]\n    s = set()\n    for i in a:\n        if i in s:\n            break\n        s.add(i)\n    print(n - len(s))\n    t -= 1", "n_cases = int(input())\nfor i in range(n_cases):\n    largo = int(input())\n    lista = input().split(' ')[::-1]\n    lista_control = set()\n    for num in lista:\n        if num not in lista_control:\n            lista_control.add(num)\n        else:\n            break\n    print(largo - len(lista_control))", "for s in [*open(0)][2::2]:\n    a = s.split()\n    s = {0}\n    i = len(a)\n    while {a[(i := (i - 1))]} - s:\n        s |= {a[i]}\n    print(i + 1)", "import sys\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(ii) for ii in input().split()]\n    if len(set(a)) == n:\n        print(0)\n        continue\n    b = {}\n    i = n - 1\n    while i >= 0:\n        if a[i] in b.keys():\n            break\n        else:\n            b[a[i]] = 1\n            i -= 1\n    print(i + 1)", "import sys\nsys.setrecursionlimit(10 ** 6)\n\ndef proc():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    s = set()\n    for (i, ai) in enumerate(a[::-1]):\n        if ai in s:\n            return n - i\n        s.add(ai)\n    return 0\npass\nnofkase = int(input())\nfor kase in range(nofkase):\n    print(proc())", "for s in [*open(0)][2::2]:\n    a = s.split()\n    s = {0}\n    i = len(a)\n    while {a[(i := (i - 1))]} - s:\n        s |= {a[i]}\n    print(i + 1)", "def calc():\n    n = int(input())\n    arr = [int(el) for el in input().split()]\n    st = set()\n    for i in range(-1, -n - 1, -1):\n        if arr[i] in st:\n            print(n + i + 1)\n            return\n        st.add(arr[i])\n    print(0)\nfor _ in range(int(input())):\n    calc()", "for i in range(int(input())):\n    n = int(input())\n    l = input().split(' ')[::-1]\n    s = set()\n    for num in l:\n        if num not in s:\n            s.add(num)\n        else:\n            break\n    print(n - len(s))", "def linp():\n    return list(map(int, input().split()))\n\ndef minp():\n    return map(int, input().split())\n\ndef iinp():\n    return int(input())\n\ndef test():\n    return int(input())\n\ndef inp():\n    return input()\n\ndef solve():\n    n = iinp()\n    arr = linp()\n    d = {}\n    res = 0\n    for i in range(n):\n        if arr[i] in d:\n            res = max(res, d[arr[i]])\n        d[arr[i]] = i + 1\n    print(res)\n\ndef main():\n    for _ in range(test()):\n        solve()\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(set(a)) == len(a):\n        print(0)\n    else:\n        d = dict()\n        count = 0\n        x = -1\n        for i in range(len(a) - 1, -1, -1):\n            if a[i] not in d:\n                d[a[i]] = 1\n            else:\n                x = i\n                break\n        print(x + 1)", "def ss(l):\n    n = len(l)\n    d = {}\n    i = n - 1\n    while i >= 0 and l[i] not in d:\n        d[l[i]] = 1\n        i -= 1\n    return i + 1\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(ss(l))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    check = set()\n    flag = 0\n    for i in range(n - 1, -1, -1):\n        if arr[i] in check:\n            flag = 1\n            break\n        else:\n            check.add(arr[i])\n    if flag:\n        print(i + 1)\n    else:\n        print(i)", "import math\n\ndef slove():\n    a = int(input())\n    op = [0] * (a + 1)\n    b = list(map(int, input().split()))\n    ans = 0\n    for i in range(len(b) - 1, -1, -1):\n        if op[b[i]] == 0:\n            op[b[i]] += 1\n            ans += 1\n        else:\n            break\n    print(a - ans)\nfor i in range(int(input())):\n    slove()", "def fun():\n    t = int(input())\n    while t:\n        n = int(input())\n        arr = [int(i) for i in input().split()]\n        dic = {}\n        for index in reversed(range(n)):\n            if arr[index] not in dic:\n                dic[arr[index]] = 1\n            else:\n                print(index + 1)\n                break\n        else:\n            print(0)\n        t -= 1\nfun()", "import sys\nfrom collections import Counter\n\ndef input_int():\n    return int(sys.stdin.readline())\n\ndef input_str():\n    return sys.stdin.readline().rstrip()\n\ndef input_int_arr():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef input_char_arr():\n    return sys.stdin.readline().rstrip().split()\n\ndef print_ln(num):\n    sys.stdout.write(str(num) + '\\n')\n\ndef print_sp(num):\n    sys.stdout.write(str(num) + ' ')\n\ndef print_only(num):\n    sys.stdout.write(str(num))\n\ndef solve():\n    n = input_int()\n    arr = input_char_arr()\n    counter_dict = Counter(arr)\n    total_move = 0\n    recall = 0\n    for char in arr:\n        if counter_dict[char] > 1:\n            counter_dict[char] -= 1\n            total_move += 1 + recall\n            recall = 0\n        else:\n            recall += 1\n    print_ln(total_move)\n\ndef main():\n    t = input_int()\n    for _ in range(t):\n        solve()\nmain()", "t = int(input())\n\ndef minNum(a):\n    (res, d, pad) = (0, {}, 0)\n    for num in a:\n        d[num] = d.get(num, 0) + 1\n    for num in a:\n        if d[num] > 1:\n            d[num] -= 1\n            res += 1 + pad\n            pad = 0\n        else:\n            pad += 1\n    return res\nwhile t:\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minNum(a))\n    t -= 1", "for s in [*open(0)][2::2]:\n    a = s.split()\n    s = {0}\n    i = len(a)\n    while {a[(i := (i - 1))]} - s:\n        s |= {a[i]}\n    print(i + 1)", "def solve():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    s = set()\n    i = len(arr) - 1\n    while i >= 0:\n        if arr[i] in s:\n            print(i + 1)\n            return\n        s.add(arr[i])\n        i -= 1\n    print(0)\n    return\nt = int(input())\nfor _ in range(t):\n    solve()", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = [int(i) for i in input().split()]\n        b = set()\n        ans = 0\n        for i in a[::-1]:\n            if i in b:\n                break\n            b.add(i)\n            ans += 1\n        print(n - ans)\nmain()", "t = int(input())\nres = []\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = set()\n    while n > 0:\n        if a[n - 1] in s:\n            break\n        s.add(a[n - 1])\n        n -= 1\n    res.append(n)\nfor r in res:\n    print(r)", "def sol():\n    n = int(input())\n    a = list(map(int, input().split()))[::-1]\n    s = set()\n    for (i, v) in enumerate(a):\n        if v not in s:\n            s.add(v)\n        else:\n            print(n - i)\n            return\n    print(0)\nfor _ in range(int(input())):\n    sol()", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = {0}\n    l = 0\n    b.remove(0)\n    for i in range(n - 1, -1, -1):\n        b.add(a[i])\n        length = len(b)\n        if l == length:\n            break\n        else:\n            l = length\n    print(n - l)\n    b.clear()\n    a.clear()\nt = int(input())\nfor i in range(t):\n    solve()", "t = int(input())\nwhile t:\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = a[::-1]\n    m = set()\n    if len(b) == len(set(b)):\n        print('0')\n    else:\n        for i in range(len(b)):\n            m.add(b[i])\n            if len(m) != i + 1:\n                break\n        print(n - i)\n    t = t - 1", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split(' ')]\n    l.reverse()\n    a = set()\n    for i in l:\n        if i in a:\n            break\n        a.add(i)\n    print(len(l) - len(a))"]