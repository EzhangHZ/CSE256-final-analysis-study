["import sys\nfrom bisect import bisect_right as bs\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    b = list(map(int, input().split()))\n    st = set(b)\n    if len(st) != n // 2:\n        print(-1)\n        continue\n    res = [i for i in range(1, n + 1) if i not in st]\n    ans = []\n    for i in range(n // 2 - 1, -1, -1):\n        j = bs(res, b[-1]) - 1\n        if j == -1:\n            ans = -1\n            break\n        ans.extend((b[-1], res[j]))\n        del b[-1]\n        del res[j]\n    if isinstance(ans, int):\n        print(ans)\n    else:\n        sys.stdout.write(' '.join(map(str, ans[::-1])) + '\\n')", "from bisect import bisect_right as bs\nfor _ in range(int(input())):\n    n = int(input())\n    b = input().split()\n    ans = [0] * n\n    used = [0] * (n + 1)\n    for (i, x) in enumerate(b):\n        q = int(x)\n        ans[2 * i + 1] = q\n        used[q] = 1\n    res = [i for i in range(1, n + 1) if not used[i]]\n    if len(res) != n / 2:\n        print(-1)\n        continue\n    for i in range(n // 2 - 1, -1, -1):\n        j = bs(res, ans[2 * i + 1]) - 1\n        if j == -1:\n            ans = -1\n            break\n        ans[2 * i] = res[j]\n        del res[j]\n    if isinstance(ans, int):\n        print(ans)\n    else:\n        print(*ans)", "from bisect import bisect_right as bs\nfor _ in range(int(input())):\n    n = int(input())\n    b = list(map(int, input().split()))\n    st = set(b)\n    if len(st) != n // 2:\n        print(-1)\n        continue\n    res = [i for i in range(1, n + 1) if i not in st]\n    ans = []\n    for i in range(n // 2 - 1, -1, -1):\n        j = bs(res, b[-1]) - 1\n        if j == -1:\n            ans = -1\n            break\n        ans.extend((b[-1], res[j]))\n        del b[-1]\n        del res[j]\n    if isinstance(ans, int):\n        print(ans)\n    else:\n        print(*ans[::-1])", "from queue import PriorityQueue\n\ndef f(n: int):\n    maxes = list(map(int, input().split()))\n    pairs = [[] for _ in range(len(maxes))]\n    used_numbers = {x: i for (i, x) in enumerate(maxes)}\n    queue = PriorityQueue()\n    for x in reversed(range(1, n + 1)):\n        if x in used_numbers:\n            i = used_numbers[x]\n            pairs[i].append(x)\n            if len(pairs[i]) == 1:\n                queue.put(-i)\n            continue\n        if queue.empty():\n            return [-1]\n        i = -queue.get()\n        pairs[i].append(x)\n    result = []\n    for (x, y) in pairs:\n        result.extend((min(x, y), max(x, y)))\n    return result\nfor _ in range(int(input())):\n    print(' '.join(map(str, f(int(input())))))", "from queue import PriorityQueue\n\ndef f(n: int):\n    maxes = list(map(int, input().split()))\n    pairs = [[] for _ in range(len(maxes))]\n    used_numbers = {x: i for (i, x) in enumerate(maxes)}\n    queue = PriorityQueue()\n    for x in reversed(range(1, n + 1)):\n        if x in used_numbers:\n            i = used_numbers[x]\n            pairs[i].append(x)\n            if len(pairs[i]) == 1:\n                queue.put(-i)\n            continue\n        if queue.empty():\n            return [-1]\n        i = -queue.get()\n        pairs[i].append(x)\n    result = []\n    for (x, y) in pairs:\n        result.extend((min(x, y), max(x, y)))\n    return result\nfor _ in range(int(input())):\n    print(' '.join(map(str, f(int(input())))))", "from queue import PriorityQueue\n\ndef f(n: int):\n    maxes = list(map(int, input().split()))\n    pairs = [[] for _ in range(len(maxes))]\n    used_numbers = {x: i for (i, x) in enumerate(maxes)}\n    queue = PriorityQueue()\n    for x in reversed(range(1, n + 1)):\n        if x in used_numbers:\n            i = used_numbers[x]\n            pairs[i].append(x)\n            if len(pairs[i]) == 1:\n                queue.put(-i)\n            continue\n        if queue.empty():\n            return [-1]\n        i = -queue.get()\n        pairs[i].append(x)\n    result = []\n    for (x, y) in pairs:\n        result.extend((min(x, y), max(x, y)))\n    return result\nfor _ in range(int(input())):\n    print(' '.join(map(str, f(int(input())))))", "from queue import PriorityQueue\n\ndef f(n: int):\n    maxes = list(map(int, input().split()))\n    pairs = [[] for _ in range(len(maxes))]\n    used_numbers = {x: i for (i, x) in enumerate(maxes)}\n    queue = PriorityQueue()\n    for x in reversed(range(1, n + 1)):\n        if x in used_numbers:\n            i = used_numbers[x]\n            pairs[i].append(x)\n            if len(pairs[i]) == 1:\n                queue.put(-i)\n            continue\n        if queue.empty():\n            return [-1]\n        i = -queue.get()\n        pairs[i].append(x)\n    result = []\n    for (x, y) in pairs:\n        result.extend((min(x, y), max(x, y)))\n    return result\nfor _ in range(int(input())):\n    print(' '.join(map(str, f(int(input())))))"]