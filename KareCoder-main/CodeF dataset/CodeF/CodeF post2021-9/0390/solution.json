["ans = []\nt = int(input())\nfor x in range(t):\n    score = 0\n    (n, k) = input().split()\n    (n, k) = (int(n), int(k))\n    lst = sorted(list(map(int, input().split())))\n    if k > 0:\n        zn = lst[-k:]\n        lst = lst[:-k]\n        ch = lst[-k:]\n        lst = lst[:-k]\n        q = 0\n        while q < len(ch):\n            score += ch[q] // zn[q]\n            q += 1\n    score += sum(lst)\n    ans.append(score)\nfor x in ans:\n    print(x)", "for _ in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    l = list(map(int, input().strip().split()))\n    l.sort(reverse=True)\n    an = 0\n    for i in range(k):\n        if l[i] == l[i + k]:\n            an += 1\n    an += sum(l[2 * k:])\n    print(an)", "t = int(input())\nfor _ in range(t):\n    (n, k) = tuple(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    ans = 0\n    for i in range(k):\n        if a[i] == a[i + k]:\n            ans += 1\n    ans += sum(a[2 * k:])\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    lst.sort()\n    ans = 0\n    ans += sum(lst[:n - 2 * k])\n    lst = lst[n - 2 * k:]\n    c = 0\n    start = k - 1\n    end = 2 * k - 1\n    while c < k:\n        a = lst[start]\n        b = lst[end]\n        ans += a // b\n        c += 1\n        start -= 1\n        end -= 1\n    print(ans)", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = sorted(list(map(int, input().split())), reverse=True)\n    ans = 0\n    ans = sum(a[2 * k:])\n    a = a[:2 * k]\n    for i in range(k):\n        ans += a[i + k] // a[i]\n    print(ans)", "def solve():\n    (n, k) = map(int, input().split())\n    arr = sorted(list(map(int, input().split())))\n    score = 0\n    for i in range(k):\n        score += arr[n - 1 - i - k] // arr[n - i - 1]\n    for i in range(n - 2 * k):\n        score += arr[i]\n    return score\nfor _ in range(int(input())):\n    print(solve())", "t = int(input())\nfor i in range(t):\n    (n, k) = list(map(int, input().strip().split()))\n    arr = list(map(int, input().strip().split()))\n    if k == 0:\n        print(sum(arr))\n        continue\n    arr.sort()\n    ans = 0\n    for i in range(n - 1, n - k - 1, -1):\n        if arr[i] == arr[i - k]:\n            ans += 1\n    ans += sum(arr[:-2 * k])\n    print(ans)", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    cost = sum(a[0:n - 2 * k]) + sum(map(lambda x: a[x + n - 2 * k] // a[x + n - k], range(0, k)))\n    print(cost)\nt = int(input())\nfor i in range(t):\n    solve()", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    cost = sum(a[0:n - 2 * k]) + sum(map(lambda x: a[x + n - 2 * k] // a[x + n - k], range(0, k)))\n    print(cost)\nt = int(input())\nfor i in range(t):\n    solve()", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    cost = sum(a[0:n - 2 * k]) + sum(map(lambda x: a[x + n - 2 * k] // a[x + n - k], range(0, k)))\n    print(cost)\nt = int(input())\nfor i in range(t):\n    solve()", "T = int(input())\nfor t in range(T):\n    (l_of_list, n_of_pairs) = map(int, input().split())\n    numbers = list(map(int, input().split()))\n    score = 0\n    numbers.sort(reverse=True)\n    for i in range(n_of_pairs):\n        score += numbers[i + n_of_pairs] // numbers[i]\n    for k in range(n_of_pairs * 2):\n        numbers.remove(numbers[0])\n    for j in range(len(numbers)):\n        score += numbers[j]\n    print(score)", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    cost = sum(a[0:n - 2 * k]) + sum(map(lambda x: a[x + n - 2 * k] // a[x + n - k], range(0, k)))\n    print(cost)\nt = int(input())\nfor i in range(t):\n    solve()", "from math import floor\n\ndef solve():\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    arr.sort()\n    l = 0\n    r = n - 1\n    res = 0\n    for i in range(n - 2 * k, n - k):\n        res += floor(arr[i] / arr[i + k])\n    for i in range(n - 2 * k):\n        res += arr[i]\n    print(res)\nt = int(input())\nwhile t:\n    t -= 1\n    solve()", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    cost = sum(a[0:n - 2 * k]) + sum(map(lambda x: a[x + n - 2 * k] // a[x + n - k], range(0, k)))\n    print(cost)\nt = int(input())\nfor i in range(t):\n    solve()", "import sys\n\ndef array_and_operations(n, k, a):\n    a.sort()\n    total = 0\n    for i in range(k):\n        total += a[-(i + k + 1)] // a[-(i + 1)]\n    for i in range(n - 2 * k):\n        total += a[i]\n    return total\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    sys.stdout.write(f'{array_and_operations(n, k, a)}\\n')", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    cost = sum(a[0:n - 2 * k]) + sum(map(lambda x: a[x + n - 2 * k] // a[x + n - k], range(0, k)))\n    print(cost)\nt = int(input())\nfor i in range(t):\n    solve()", "t = int(input())\nfor tc in range(t):\n    (n, k) = map(int, input().split())\n    aa = list(map(int, input().split()))\n    aa.sort()\n    ans = sum(aa[:n - 2 * k])\n    for i in range(n - 2 * k, n - k):\n        ans += aa[i] // aa[i + k]\n    print(ans)", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    cost = sum(a[0:n - 2 * k]) + sum(map(lambda x: a[x + n - 2 * k] // a[x + n - k], range(0, k)))\n    print(cost)\nt = int(input())\nfor i in range(t):\n    solve()", "import math\ncases = int(input())\nfor i in range(cases):\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a.sort(reverse=True)\n    matching = a[:2 * k]\n    rest = a[2 * k:]\n    total = 0\n    for i in range(k):\n        total += math.floor(matching[k + i] / matching[i])\n    total += sum(rest)\n    print(total)", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    cost = sum(a[0:n - 2 * k]) + sum(map(lambda x: a[x + n - 2 * k] // a[x + n - k], range(0, k)))\n    print(cost)\nt = int(input())\nfor i in range(t):\n    solve()", "def doSomething(arr, k):\n    l = len(arr)\n    arr.sort()\n    k_arr = arr[l - 2 * k:]\n    rem_arr = arr[:l - 2 * k]\n    sum = 0\n    for i in rem_arr:\n        sum += i\n    a = k_arr[:k]\n    b = k_arr[k:]\n    for i in range(k):\n        sum += int(a[i] / b[i])\n    print(sum)\nt = int(input())\nfor i in range(t):\n    (n, k) = list(map(int, input().split()))\n    array = list(map(int, input().split()))\n    doSomething(array, k)", "q = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    (n, k) = q()\n    a = sorted(q())[::-1]\n    print(k - sum((y < x for (x, y) in zip(a[:k], a[k:2 * k]))) + sum(a[2 * k:]))", "q = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    (n, k) = q()\n    a = sorted(q())[::-1]\n    print(k - sum((y < x for (x, y) in zip(a[:k], a[k:2 * k]))) + sum(a[2 * k:]))", "q = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    (n, k) = q()\n    a = sorted(q())[::-1]\n    print(k - sum((y < x for (x, y) in zip(a[:k], a[k:2 * k]))) + sum(a[2 * k:]))", "import math\n\ndef main():\n    t = int(input())\n    while t > 0:\n        (n, k) = map(int, input().split())\n        arr = list(map(int, input().split()))\n        arr.sort()\n        s = 0\n        for i in range(k):\n            e1 = arr[n - i - 1]\n            e2 = arr[n - k - i - 1]\n            s += math.floor(e2 / e1)\n        for i in range(n - 2 * k):\n            s += arr[i]\n        print(s)\n        t -= 1\nmain()", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    cost = sum(a[0:n - 2 * k]) + sum(map(lambda x: a[x + n - 2 * k] // a[x + n - k], range(0, k)))\n    print(cost)\nt = int(input())\nfor i in range(t):\n    solve()", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    cost = sum(a[0:n - 2 * k]) + sum(map(lambda x: a[x + n - 2 * k] // a[x + n - k], range(0, k)))\n    print(cost)\nt = int(input())\nfor i in range(t):\n    solve()", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    cost = sum(a[0:n - 2 * k]) + sum(map(lambda x: a[x + n - 2 * k] // a[x + n - k], range(0, k)))\n    print(cost)\nt = int(input())\nfor i in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    a = sorted(a)\n    cost = sum(a[0:n - 2 * k]) + sum(map(lambda x: a[x + n - 2 * k] // a[x + n - k], range(0, k)))\n    print(cost)", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    cost = sum(a[0:n - 2 * k]) + sum(map(lambda x: a[x + n - 2 * k] // a[x + n - k], range(0, k)))\n    print(cost)\nt = int(input())\nfor i in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    numbers = list(map(int, input().split()))\n    numbers = sorted(numbers, reverse=True)\n    score = 0\n    cc = 0\n    for i in range(k):\n        score += numbers[i + k] // numbers[i]\n        cc += numbers[i]\n        cc += numbers[i + k]\n    c = sum(numbers) - cc\n    score += c\n    print(score)", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    cost = sum(a[0:n - 2 * k]) + sum(map(lambda x: a[x + n - 2 * k] // a[x + n - k], range(0, k)))\n    print(cost)\nt = int(input())\nfor i in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = sorted(map(int, input().split()))\n    s = 0\n    for i in range(n - k * 2 - 1, -1, -1):\n        s += a[i]\n    for i in range(n - k * 2, n - k):\n        s += a[i] // a[i + k]\n    print(s)", "import math\n\ndef main_function():\n    test_cases = range(int(input()))\n    for test_case in test_cases:\n        (n, k) = [int(i) for i in input().split(' ')]\n        a = sorted([int(i) for i in input().split(' ')], reverse=True)\n        counter = 0\n        what_will_be_left = n - 2 * k\n        current_ind = -1\n        for i in range(what_will_be_left):\n            counter += a[-1]\n            a.pop()\n        hash_a = {}\n        for i in a:\n            if i in hash_a:\n                hash_a[i] += 1\n            else:\n                hash_a[i] = 1\n        for i in hash_a:\n            if hash_a[i] > k:\n                counter += hash_a[i] - k\n        print(counter)\nmain_function()", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_ls():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef main():\n    for _ in range(int(input())):\n        (n, k) = get_ints()\n        ls = get_ls()\n        ans = 0\n        ls.sort()\n        ans = sum(ls[:n - 2 * k], sum(map(lambda x: ls[x + n - 2 * k] // ls[x + n - k], range(0, k))))\n        print(ans)\nmain()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    ans = 0\n    for i in range(n - 2 * k):\n        ans += arr[i]\n    for i in range(n - 2 * k, n - k):\n        ans += int(arr[i] / arr[i + k])\n    print(ans)", "xx = int(input())\n\ndef solve():\n    arr.sort()\n    b = n - 2 * k\n    ans = sum(arr[:b])\n    for i in range(n - k, n):\n        if arr[i] == arr[i - k]:\n            ans += 1\n    return ans\nfor jj in range(xx):\n    (n, k) = [int(i) for i in input().split(' ')]\n    arr = [int(i) for i in input().split(' ')]\n    print(solve())", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    num = sorted(list(map(int, input().split())), reverse=True)\n    re = 0\n    i = 0\n    while i < k:\n        re += num[i + k] // num[i]\n        i += 1\n    re += sum(num[2 * k:])\n    print(re)", "import math, sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000007\nmod2 = 998244353\nfor _ in range(I()):\n    (n, k) = M()\n    a = sorted(L())\n    ans = sum(a[:n - 2 * k])\n    i = n - 2 * k\n    j = n - k\n    while j < n:\n        ans += a[i] // a[j]\n        i += 1\n        j += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    sc = 0\n    if n & 1:\n        sc = a[0]\n        a = a[1:]\n        n -= 1\n    sc += sum(a[:n - 2 * k])\n    a = a[n - 2 * k:]\n    i = 0\n    j = k\n    while k:\n        sc += a[i] // a[j]\n        k -= 1\n        i += 1\n        j += 1\n    print(sc)", "t = int(input())\nfor i in range(t):\n    (n, k) = list(map(int, input().split(' ')))\n    arr = list(map(int, input().split(' ')))\n    list.sort(arr)\n    sum = 0\n    for j in range(n - 2 * k, n - k):\n        sum += int(arr[j] / arr[j + k])\n    for x in range(n - 2 * k):\n        sum += arr[x]\n    print(sum)", "import sys\nimport bisect\nimport math\nfrom collections import deque\ninput = lambda : sys.stdin.readline().strip()\nmod = 10 ** 9 + 7\n\ndef solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    s = 0\n    for i in range(k):\n        s += a[i + k] // a[i]\n    return s + sum(a[2 * k:])\nt = 1\nt = int(input())\nfor _ in range(t):\n    print(solve())", "t = int(input())\nfor z in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    score = sum(a[:n - 2 * k])\n    temp = 0\n    for i in range(n - 1, n - 2 * k - 1, -2):\n        temp += a[i - 1] // a[i]\n    temp2 = 0\n    for i in range(n - 1, n - k - 1, -1):\n        temp2 += a[i - k] // a[i]\n    score += min(temp, temp2)\n    print(score)", "import heapq\nimport sys\nimport math\nfrom collections import deque\nfrom bisect import bisect_left, bisect_right\nI = sys.stdin.readline\nII = lambda : int(I())\nIN = lambda x: map(int, x.split())\nFN = lambda x: map(float, x.split())\nL = lambda x: list(IN(x))\nM = 1000000007\nP = print\nT = True\nF = False\nfor _ in range(II()):\n    (n, k) = IN(I())\n    rem = n - 2 * k\n    a = L(I())\n    a.sort()\n    sc = 0\n    (f, s) = (rem, rem + k)\n    for i in range(k):\n        sc += a[f] // a[s]\n        f += 1\n        s += 1\n    sc += sum(a[:rem])\n    print(sc)", "t = int(input())\nfor tt in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    a = sorted([int(i) for i in input().split()])\n    ans = sum(a[0:n - 2 * k])\n    for i in range(n - 2 * k, n - k):\n        ans += a[i] // a[i + k]\n    print(ans)", "import math\nt = int(input().strip())\nfor i in range(t):\n    [n, k] = [int(j) for j in input().strip().split()]\n    numbers = [int(j) for j in input().strip().split()]\n    numbers.sort()\n    num_sum = 0\n    for j in range(n - 2 * k):\n        num_sum += numbers[j]\n    for j in range(n - 2 * k, n - k):\n        num_sum += numbers[j] // numbers[j + k]\n    print(num_sum)", "t = int(input())\nfor x in range(t):\n    (n, k) = list(map(int, input().split()))\n    row = input().split()\n    ints = list(map(int, row))\n    ints = list(reversed(sorted(ints)))\n    ans = 0\n    for _ in range(n - 2 * k):\n        ans += ints.pop()\n    ints.reverse()\n    for i in range(k):\n        ans += ints[i] // ints[i + k]\n    print(ans)", "t = int(input())\nfor q in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    arr.sort()\n    ans = 0\n    (l, r) = (n - 1 - k, n - 1)\n    for i in range(k):\n        ans += arr[l] // arr[r]\n        l -= 1\n        r -= 1\n    ans += sum(arr[:n - 2 * k])\n    print(ans)", "from sys import stdin\nimport math\nfrom collections import deque\nfrom heapq import heapify, heappop, heappush\nfrom bisect import bisect_left, bisect_right\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = sorted(list(map(int, input().split())))\n    if len(set(arr)) == 1:\n        print(k + arr[-1] * (n - 2 * k))\n        continue\n    if k == 0:\n        print(sum(arr))\n        continue\n    val = sum(arr[:n - 2 * k])\n    (i, j) = (n - k - 1, n - k)\n    if arr[i] != arr[j]:\n        print(val)\n        continue\n    (left, right) = (0, 0)\n    for b in range(j, n):\n        if arr[b] == arr[j]:\n            right += 1\n        else:\n            break\n    for b in range(i, max(-1, i - k), -1):\n        if arr[b] == arr[i]:\n            left += 1\n        else:\n            break\n    if k - right < left:\n        val += left - k + right\n    print(val)", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    lst = [int(i) for i in input().split()]\n    lst.sort()\n    if k == 0:\n        print(sum(lst))\n        continue\n    div = lst[-k:]\n    lst = lst[:-k]\n    d = lst[-k:]\n    lst = lst[:-k]\n    cnt = sum(lst) + sum([x // y for (x, y) in zip(d, div)])\n    print(cnt)", "import math\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    if k == 0:\n        print(sum(a))\n    else:\n        s = 0\n        for i in range(k):\n            s += a[i + k] // a[i]\n        summ = 0\n        for i in range(2 * k, n):\n            summ += a[i]\n        print(s + summ)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = sorted(map(int, input().split()))\n    s = sum(l[:n - 2 * k])\n    (i, j) = (n - 2 * k, n - k)\n    for x in range(k):\n        if l[i] == l[j]:\n            s += 1\n        (i, j) = (i + 1, j + 1)\n    print(s)", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\ninp = lambda : list(map(int, sys.stdin.readline().rstrip('\\r\\n').split()))\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = inp()\n    a.sort()\n    ans = 0\n    b = a[n - 2 * k:]\n    t = len(b)\n    i = 0\n    while i < t // 2:\n        ans += b[i] // b[i + k]\n        i += 1\n    ans += sum(a[:n - 2 * k])\n    print(ans)", "t = int(input())\nfor l in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = 0\n    a.sort()\n    for i in range(n - 2 * k):\n        s += a[i]\n    for i in range(n - 2 * k, n - k):\n        s += a[i] // a[i + k]\n    print(s)", "from bisect import *\nt = int(input())\nfor i in range(t):\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for x in a[0:n - 2 * k]:\n        ans += x\n    for (x, y) in zip(a[-2 * k:-k], a[-k:]):\n        ans += x // y\n    print(ans)", "n = int(input())\nfor i in range(n):\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    b.sort()\n    summie = sum(b[0:a[0] - 2 * a[1]])\n    for j in range(a[1]):\n        summie = summie + b[a[0] - a[1] - j - 1] // b[a[0] - j - 1]\n    print(summie)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = sorted(list(map(int, input().split())), reverse=True)\n    ans = 0\n    for i in range(k):\n        ans += a[i + k] // a[i]\n    print(ans + sum(a[2 * k:]))", "for tt in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    a = sorted([int(i) for i in input().split()])\n    print(sum(a[0:n - 2 * k]) + sum([a[i] // a[i + k] for i in range(n - 2 * k, n - k)]))", "for p in range(int(input())):\n    (n, k) = map(int, input().split())\n    lis = list(map(int, input().split()))\n    lis.sort(reverse=True)\n    a = 0\n    for i in range(k):\n        a += lis[i + k] // lis[i]\n    print(a + sum(lis[2 * k:]))", "t = int(input())\nfor l in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = 0\n    a.sort()\n    for i in range(n - 2 * k):\n        s = s + a[i]\n    for i in range(n - 2 * k, n - k):\n        s = s + a[i] // a[i + k]\n    print(s)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    array = sorted(list(map(int, input().split())))\n    our_result = 0\n    for i in range(k):\n        our_elem = array[-(i + 1)]\n        our_result += array[-(i + 1) - k] // our_elem\n    for i in range(n - 2 * k):\n        our_result += array[i]\n    print(our_result)", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(i) for i in input().split(' ')]\n    arr = sorted([int(i) for i in input().split(' ')])\n    ans = 0\n    (l, h) = (n - k - 1, n - 1)\n    while k:\n        ans += arr[l] // arr[h]\n        l -= 1\n        h -= 1\n        k -= 1\n    for i in range(l + 1):\n        ans += arr[i]\n    print(ans)", "import math\nt = int(input())\nfor i in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    arr.sort()\n    op = sum([math.floor(arr[n - k * 2 + j] / arr[n - k + j]) for j in range(k)])\n    rem = sum(arr[:n - k * 2])\n    score = op + rem\n    print(score)", "t = int(input())\nfor i in range(t):\n    num = 0\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    for j in range(k):\n        num += arr[-k + j - 1] // arr[-1]\n        del arr[-k + j - 1]\n        del arr[-1]\n    num += sum(arr)\n    print(num)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    account = 0\n    a.sort(reverse=True)\n    b1 = a[0:2 * k]\n    b2 = a[2 * k:n]\n    for i in range(k):\n        account += b1[k + i] // b1[i]\n    account += sum(b2)\n    print(account)", "t = int(input())\nfor ii in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    m = l[n - 2 * k:]\n    freq = {}\n    max_f = 0\n    for i in m:\n        freq[i] = freq.get(i, 0) + 1\n        if freq[i] > max_f:\n            max_f = freq[i]\n    ans = 0\n    if max_f > k:\n        ans = max_f - k\n    if 2 * k < n:\n        s = sum(l[:n - 2 * k])\n        print(s + ans)\n    else:\n        print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    mas = sorted(list(map(int, input().split())))\n    s = mas[0:n - 2 * k]\n    mas2 = []\n    mini = 0\n    for i in range(k):\n        mas2.append(mas[i + n - 2 * k] // mas[i + n - k])\n    summa = sum(mas2)\n    summa2 = sum(s)\n    print(summa + summa2)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    li = list(map(int, input().split()))\n    li.sort()\n    ans = 0\n    c = 0\n    for i in range(n - 1, 0, -1):\n        if c == k:\n            break\n        ans += li[i - k] // li[i]\n        c += 1\n    for i in range(n - 2 * k):\n        ans += li[i]\n    print(ans)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort(reverse=True)\n    score = 0\n    for i in range(k):\n        score += l[k + i] // l[i]\n    for i in range(2 * k, n):\n        score += l[i]\n    print(score)", "T = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n    ans = sum(A[0:n - 2 * k])\n    for i in range(k):\n        ans += A[n - 2 * k + i] // A[n - k + i]\n    print(ans)", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\n\ndef solve():\n    T = int(input())\n    for t in range(T):\n        (n, k) = list(map(int, input().split()))\n        nums = map(int, input().split())\n        nums = sorted(nums)\n        (nomr, denomr) = (n - 2 * k, n - k)\n        score = 0\n        i = 0\n        while i < nomr:\n            score += nums[i]\n            i += 1\n        while denomr < n:\n            score += nums[nomr] // nums[denomr]\n            nomr += 1\n            denomr += 1\n        print(score)\nsolve()", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\n\ndef solve():\n    T = int(input())\n    for t in range(T):\n        (n, k) = list(map(int, input().split()))\n        nums = map(int, input().split())\n        nums = sorted(nums)\n        (nomr, denomr) = (n - 2 * k, n - k)\n        score = 0\n        i = 0\n        while i < nomr:\n            score += nums[i]\n            i += 1\n        while denomr < n:\n            score += nums[nomr] // nums[denomr]\n            nomr += 1\n            denomr += 1\n        print(score)\nsolve()", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = sorted(list(map(int, input().split())), reverse=True)\n    ans = 0\n    for i in range(k):\n        ans += a[i + k] // a[i]\n    print(ans + sum(a[2 * k:]))", "import sys\ninput = lambda : sys.stdin.readline()[:-1]\n\ndef array_and_operations(n, k, a):\n    a.sort()\n    total = 0\n    for i in range(k):\n        total += a[-(i + k + 1)] // a[-(i + 1)]\n    for i in range(n - 2 * k):\n        total += a[i]\n    return total\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    sys.stdout.write(f'{array_and_operations(n, k, a)}\\n')", "def solve(li, n, k):\n    li.sort()\n    score = sum(li[:n - 2 * k])\n    for i in range(n - 2 * k, n - k):\n        score += li[i] // li[i + k]\n    return score\nfor case in range(int(input())):\n    (n, k) = map(int, input().split())\n    li = list(map(int, input().split()))\n    ans = solve(li, n, k)\n    print(ans)", "problem_num = int(input())\nfor i in range(problem_num):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    arr = input().split()\n    arr = [int(i) for i in arr]\n    arr.sort()\n    sub_main = arr[:n - 2 * k]\n    sub_div = arr[n - 2 * k:]\n    sub_score = 0\n    for j in range(k):\n        sub_score += int(sub_div[j] / sub_div[k + j])\n    score = sum(sub_main) + sub_score\n    print(score)", "t = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().strip().split()))\n    A = list(map(int, input().strip().split()))\n    A.sort()\n    A.reverse()\n    ans = 0\n    for i in range(k):\n        ans += A[i + k] // A[i]\n    ans += sum(A[2 * k:n])\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = sorted(map(int, input().split()))\n    s = sum(l[:n - 2 * k])\n    (i, j) = (n - 2 * k, n - k)\n    for x in range(k):\n        if l[i] == l[j]:\n            s += 1\n        (i, j) = (i + 1, j + 1)\n    print(s)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = sorted(list(map(int, input().split())), reverse=True)\n    res = sum([i // j for (i, j) in zip(a[k:2 * k], a[:k])])\n    if n > 2 * k:\n        res += sum(a[2 * k:])\n    print(res)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l = sorted(l, reverse=True)\n    (score, mi) = (0, 0)\n    for i in range(k):\n        score += math.floor(l[k + i] / l[i])\n    score += sum(l[2 * k:])\n    print(score)", "q = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    (n, k) = q()\n    a = sorted(q())[::-1]\n    print(k - sum((y < x for (x, y) in zip(a[:k], a[k:2 * k]))) + sum(a[2 * k:]))", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    cost = sum(a[0:n - 2 * k]) + sum(map(lambda x: a[x + n - 2 * k] // a[x + n - k], range(0, k)))\n    print(cost)\nt = int(input())\nfor i in range(t):\n    solve()", "t = int(input())\n\ndef calc(arr, k):\n    s = 0\n    x = []\n    y = []\n    for i in range(k):\n        x.append(arr[-1])\n        arr.pop()\n    for i in range(k):\n        y.append(arr[-1])\n        arr.pop()\n    for i in range(k):\n        s += y[i] // x[i]\n    s += sum(arr)\n    return s\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = sorted([int(x) for x in input().split()])\n    print(calc(arr, k))", "q = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    (n, k) = q()\n    a = sorted(q())[::-1]\n    print(k - sum((y < x for (x, y) in zip(a[:k], a[k:2 * k]))) + sum(a[2 * k:]))", "import sys\ninput = sys.stdin.readline\nimport math\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split(' ')))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef solveProblem(length, array, operations):\n    array.sort()\n    map = {}\n    j = 0\n    sum = 0\n    for i in range(length - 2 * operations):\n        sum += array[i]\n    for j in range(length - 2 * operations, length):\n        i = array[j]\n        if i in map:\n            map[i] = map[i] + 1\n        else:\n            map[i] = 1\n    max = 0\n    for item in map:\n        if map[item] > max:\n            max = map[item]\n    if max > operations:\n        sum += math.floor(max - operations)\n    return sum\noutp = []\nx = inp()\nfor i in range(x):\n    i1 = inlt()\n    length = i1[0]\n    op = i1[1]\n    array = inlt()\n    result = solveProblem(length, array, op)\n    outp.append(result)\nfor out in outp:\n    print(out)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    c = sum(a[0:n - 2 * k]) + sum(map(lambda x: a[x + n - 2 * k] // a[x + n - k], range(0, k)))\n    print(c)", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    cost = sum(a[0:n - 2 * k]) + sum(map(lambda x: a[x + n - 2 * k] // a[x + n - k], range(0, k)))\n    print(cost)\nt = int(input())\nfor i in range(t):\n    solve()", "q = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    (n, k) = q()\n    a = sorted(q())[::-1]\n    print(k - sum((y < x for (x, y) in zip(a[:k], a[k:2 * k]))) + sum(a[2 * k:]))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    ans = 0\n    for i in range(n - 2 * k):\n        ans += l[i]\n    for i in range(k):\n        ans += l[n - 2 * k + i] // l[n - k + i]\n    print(ans)", "q = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    (n, k) = q()\n    a = sorted(q())[::-1]\n    print(k - sum((y < x for (x, y) in zip(a[:k], a[k:2 * k]))) + sum(a[2 * k:]))", "t = int(input())\nfor i in range(t):\n    (n, k) = tuple(map(int, input().split(' ')))\n    a = list(map(int, input().split(' ')))\n    sa = sorted(a)\n    remaining = sum(sa[:n - 2 * k])\n    for j in range(n - k, n):\n        remaining += sa[j - k] // sa[j]\n    print(remaining)", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    result = 0\n    arr = sorted(arr)\n    result += sum(arr[:n - 2 * k])\n    for i in range(k):\n        result += arr[n - k - i - 1] // arr[n - i - 1]\n    print(result)\n    t -= 1", "import math\nmod = 10 ** 18 + 9\n\ndef catalan(n):\n    return int(math.factorial(2 * n) // (math.factorial(n) * math.factorial(n + 1))) % mod\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = sum(a[0:n - 2 * k])\n    idx1 = n - 2 * k\n    idx2 = n - k\n    for j in range(0, k):\n        ans += a[idx1 + j] // a[idx2 + j]\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    l = [int(x) for x in input().split()]\n    l.sort()\n    l1 = l[0:n - k]\n    l2 = l[n - k:len(l)]\n    score = 0\n    for j in range(k):\n        score = score + l1[-1] // l2[-1]\n        l1.pop()\n        l2.pop()\n    score = score + sum(l1)\n    print(score)", "from sys import stdin\nfrom collections import defaultdict\n\ndef solve():\n    for _ in range(int(stdin.readline().rstrip())):\n        (n, k) = map(int, stdin.readline().rstrip().split())\n        A = sorted(list(map(int, stdin.readline().rstrip().split())))\n        ans = sum(A[:n - 2 * k])\n        freq = defaultdict(int)\n        for x in A[n - 2 * k:]:\n            freq[x] += 1\n        for x in freq.values():\n            if x > k:\n                ans += x - k\n        print(ans)\nsolve()", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    total = 0\n    for x in range(n - 2 * k, n - k):\n        total += l[x] // l[x + k]\n    for x in range(n - 2 * k):\n        total += l[x]\n    print(total)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    A = [int(k) for k in input().split()]\n    s = 0\n    A.sort()\n    for K in range(k - 1, -1, -1):\n        s += A[n - k - K - 1] // A[n - K - 1]\n    print(s + sum(A[:n - 2 * k]))", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = sorted(list(map(int, input().split())), reverse=True)\n    ans = 0\n    for i in range(k):\n        ans += a[i + k] // a[i]\n    print(ans + sum(a[2 * k:]))", "a = int(input())\nfor t in range(a):\n    (n, k) = map(int, input().split())\n    d = input().split()\n    l = [int(_) for _ in d]\n    f = 0\n    l.sort()\n    for t in range(n - 2 * k):\n        f = f + l[t]\n    for t in range(n - 2 * k, n - k):\n        f = f + l[t] // l[t + k]\n    print(f)"]