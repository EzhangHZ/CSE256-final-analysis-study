["import math\nprimes = [2, 3]\nfor i in range(4, math.ceil(math.sqrt(10 ** 9))):\n    isprime = True\n    for x in primes:\n        if x > math.sqrt(i):\n            break\n        if i % x == 0:\n            isprime = False\n            break\n    if isprime:\n        primes.append(i)\na = [int(input()) for i in range(int(input()))]\nfor x in a:\n    done = True\n    for i in primes:\n        if i > x / 2:\n            break\n        if x % i == 0:\n            print(x // i, x - x // i)\n            done = False\n            break\n    if done:\n        print(1, x - 1)", "import math\na = [int(input()) for i in range(int(input()))]\nprimes = [2, 3]\nfor i in range(4, math.ceil(math.sqrt(10 ** 9))):\n    isprime = True\n    for x in primes:\n        if x > math.sqrt(i):\n            break\n        if i % x == 0:\n            isprime = False\n            break\n    if isprime:\n        primes.append(i)\nfor x in a:\n    done = True\n    for i in primes:\n        if i > x / 2:\n            break\n        if x % i == 0:\n            print(x // i, x - x // i)\n            done = False\n            break\n    if done:\n        print(1, x - 1)", "import math\n\ndef ans(n):\n    l = []\n    if n % 2 == 0:\n        return [n // 2, n // 2]\n    else:\n        a = n // 2\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                a = n // i\n                return [a, n - a]\n        return [1, n - 1]\nt = int(input())\nl = []\nfor i in range(t):\n    n = int(input())\n    l.append(ans(n))\nfor i in range(t):\n    print(' '.join(map(str, l[i])))", "import math\nprimes = [2, 3]\nfor i in range(4, math.ceil(math.sqrt(10 ** 9))):\n    isprime = True\n    for x in primes:\n        if x > math.sqrt(i):\n            break\n        if i % x == 0:\n            isprime = False\n            break\n    if isprime:\n        primes.append(i)\na = [int(input()) for i in range(int(input()))]\nfor x in a:\n    done = True\n    for i in primes:\n        if i > math.sqrt(x):\n            break\n        if x % i == 0:\n            print(x // i, x - x // i)\n            done = False\n            break\n    if done:\n        print(1, x - 1)", "from math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    (a, b) = (1, n - 1)\n    if n % 2 == 0:\n        a = n // 2\n        b = a\n    else:\n        k = int(sqrt(n)) + 1\n        lcm = n - 1\n        for i in range(3, k, 2):\n            if n % i == 0:\n                if n - i < lcm:\n                    lcm = n - i\n                    a = i\n                    b = n - a\n                if n - n // i < lcm:\n                    lcm = n - n // i\n                    a = n // i\n                    b = n - a\n    print(a, ' ', b)", "from math import sqrt\ntests = int(input())\nfor test in range(tests):\n    n = int(input())\n    if n % 2 == 0:\n        min_prime_divisor = 2\n    else:\n        min_prime_divisor = n\n        for i in range(3, int(sqrt(n)) + 1, 2):\n            if n % i == 0:\n                min_prime_divisor = i\n                break\n    print(f'{int(n / min_prime_divisor)} {int(n - n / min_prime_divisor)}')", "def getf(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    x = getf(n)\n    print(x, n - x)", "import sys\ninput = sys.stdin.readline\nimport math\n\ndef print_str_line(str):\n    sys.stdout.write(str + '\\n')\n\ndef print_number(number):\n    print_str_line(f'{number}')\n\ndef ans(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return [n // i, n - n // i]\n    return [1, n - 1]\nnumber_of_test_cases = int(input())\nfor i in range(number_of_test_cases):\n    n = int(input())\n    _ans = ans(n)\n    print_str_line(' '.join([str(x) for x in _ans]))", "import math\n\ndef solve(n):\n    if n % 2 == 0:\n        s = str(n // 2) + ' ' + str(n // 2)\n        return s\n    x = math.ceil(math.sqrt(n))\n    b = n - 1\n    for i in range(2, x + 1):\n        if n % i == 0:\n            a = n // i\n            b = n - n // i\n            return str(a) + ' ' + str(b)\n    a1 = n - b\n    return str(a1) + ' ' + str(b)\n\ndef test():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        print(solve(n))\ntest()", "def prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor _ in range(int(input())):\n    a = int(input())\n    b = prime(a)\n    print(b, a - b)", "def prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor _ in range(int(input())):\n    p = int(input())\n    q = prime(p)\n    print(q, p - q)", "def prime(m):\n    for i in range(2, int(m ** 0.5) + 1):\n        if m % i == 0:\n            return m // i\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    p = prime(n)\n    print(p, n - p)", "def prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    p = prime(n)\n    print(p, n - p)", "def prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    p = prime(n)\n    print(p, n - p)", "def prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    p = prime(n)\n    print(p, n - p)", "def prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    p = prime(n)\n    print(p, n - p)", "def prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    p = prime(n)\n    print(p, n - p)", "def prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    p = prime(n)\n    print(p, n - p)", "def prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor i in range(int(input())):\n    n = int(input())\n    p = prime(n)\n    print(p, n - p)", "T = int(input())\nfor i in range(T):\n    n = int(input())\n\n    def prime(n):\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return n // i\n        return 1\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        p = prime(n)\n        print(p, n - p)", "def prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor _ in range(int(input())):\n    a = int(input())\n    b = prime(a)\n    print(b, a - b)", "def prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor _ in range(int(input())):\n    a = int(input())\n    b = prime(a)\n    print(b, a - b)", "def prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor _ in range(int(input())):\n    a = int(input())\n    b = prime(a)\n    print(b, a - b)", "import math\n\ndef findLcm(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor i in range(int(input())):\n    n = int(input())\n    a = findLcm(n)\n    print(a, n - a)", "def prime_number(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    p = prime_number(n)\n    print(p, n - p)", "def solve(n):\n    answer = 1\n    for i in range(2, int(n ** 0.5 + 1)):\n        if n % i == 0:\n            answer = n / i\n            break\n    print(f'{int(answer)} {int(n - answer)}')\nt = int(input())\nfor i in range(t):\n    solve(int(input()))", "def prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    p = prime(n)\n    print(p, n - p)", "def prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    p = prime(n)\n    print(p, n - p)", "def prime(a):\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            return a // i\n    return 1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    b = prime(n)\n    print(b, n - b)", "def solve(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nt = int(input())\nfor i in range(t):\n    l = int(input())\n    a = solve(l)\n    print(a, l - a, sep=' ')", "import math as m\n\ndef f(n):\n    if n % 2 == 0:\n        print(int(n / 2), int(n / 2))\n    else:\n        z = 0\n        for i in range(2, int(m.sqrt(n) + 1)):\n            if n % i == 0:\n                z = 1\n                print(int(n / i * (i - 1)), int(n / i))\n                break\n        if z == 0:\n            print(n - 1, 1)\nfor t in range(int(input())):\n    inp1 = int(input())\n    f(inp1)", "import math\nimport sys\n\ndef solve():\n    input = sys.stdin.readline\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                print(n // i, n - n // i)\n                return\n        print(1, n - 1)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "def prime(c):\n    for i in range(2, int(c ** 0.5) + 1):\n        if c % i == 0:\n            return c // i\n    return 1\nfor _ in range(int(input())):\n    a = int(input())\n    b = prime(a)\n    print(b, a - b)", "def prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    p = prime(n)\n    print(p, n - p)", "def prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    p = prime(n)\n    print(p, n - p)", "def prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    p = prime(n)\n    print(p, n - p)", "def getf(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    x = getf(n)\n    print(x, n - x)", "def prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    p = prime(n)\n    print(p, n - p)", "def compute_lcm(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = compute_lcm(n)\n    print(a, n - a)", "def prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor _ in range(int(input())):\n    a = int(input())\n    b = prime(a)\n    print(b, a - b)", "def prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return n // i\n    return 1\nfor _ in range(int(input())):\n    a = int(input())\n    b = prime(a)\n    print(b, a - b)", "from dataclasses import dataclass\nimport math\nnt = [2, 3]\n\n@dataclass\nclass MyInput:\n    t: int\n    test_cases: list\n\ndef get_input():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        x = int(input())\n        test_cases.append((x,))\n    return MyInput(t=t, test_cases=test_cases)\n\ndef _populate_nt(n):\n    for i in range(5, n, 1):\n        is_prime = True\n        if is_prime:\n            nt.append(i)\n\ndef resolve(x):\n    for i in range(2, int(math.sqrt(x)) + 1):\n        if x % i == 0:\n            a = int(x / i)\n            return f'{a} {x - a}'\n    return f'1 {x - 1}'\n\ndef main():\n    myinput = get_input()\n    for i in range(myinput.t):\n        x = myinput.test_cases[i]\n        print(resolve(x[0]))\n    return myinput\nmain()", "def is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    x = is_prime(n)\n    if x == 1:\n        print('1', n - 1)\n    else:\n        print(f'{n // x} {n - n // x}')", "import math\n\ndef is_prime(n):\n    if n % 2 == 0 and n > 2:\n        return False\n    return all((n % i for i in range(3, int(math.sqrt(n)) + 1, 2)))\n\ndef not_Prime_LCM(n):\n    for i in range(3, n // 2 + 1, 2):\n        if n % i == 0:\n            smallest = n - i\n            num = n // i\n            if n - num < smallest:\n                print(num, n - num)\n                return\n            else:\n                print(i, smallest)\n                return\n        else:\n            pass\n    return\ntest_case = int(input())\nwhile test_case != 0:\n    n = int(input())\n    if n % 2 == 0:\n        l = n // 2\n        print(l, l)\n    elif is_prime(n) == True:\n        print(1, n - 1)\n    else:\n        not_Prime_LCM(n)\n    test_case = test_case - 1", "from math import sqrt\n\ndef main():\n    for i in range(0, int(input())):\n        minLcm(int(input()))\n\ndef minLcm(n):\n    largestfac = largest_factor(n)\n    print(largestfac, n - largestfac)\n\ndef largest_factor(n):\n    largest = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            factor1 = i\n            factor2 = n // i\n            if factor1 != n:\n                largest = max(largest, factor1)\n            if factor2 != n:\n                largest = max(largest, factor2)\n    return largest\nmain()", "from typing import List\nfrom bisect import *\nfrom collections import *\nfrom functools import *\nfrom itertools import *\nfrom math import *\nfrom queue import PriorityQueue\n\ndef main1(n):\n    res = []\n    mlcm = n - 1\n    for i in range(1, n // 2 + 1):\n        temp = i * (n - i) / gcd(i, n - i)\n        if temp <= mlcm:\n            mlcm = temp\n            res = [i, n - i]\n    print(*res, mlcm)\n\ndef main(n):\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n        return\n    dst = int(sqrt(n) + 1)\n    dst = min(dst, n - 2)\n    find = False\n    for i in range(2, dst + 1):\n        if n % i == 0:\n            print(n // i, n - n // i)\n            find = True\n            break\n    if find == False:\n        print(1, n - 1)\ncaseNum = int(input())\nfor i in range(0, caseNum):\n    n = int(input())\n    main(n)", "for _ in range(int(input())):\n    n = int(input())\n    for i in range(2, int(n ** 0.5) + 1):\n        if not n % i:\n            print(n // i, n - n // i)\n            break\n    else:\n        print(1, n - 1)", "iter = int(input())\nfor j in range(iter):\n    n = int(input())\n    gcd = 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            gcd = n // i\n            break\n    print(gcd, n - gcd)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    check = 0\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            print(n // i, n // i * (i - 1))\n            check = 1\n            break\n    if check == 0:\n        print(n - 1, 1)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2, sep=' ', end='\\n')\n    else:\n        flag = 0\n        for j in range(2, int(math.sqrt(n)) + 1):\n            if n % j == 0 and (n - j) % j == 0:\n                flag = 1\n                if (n - n // j) % (n // j) == 0 and n - n // j:\n                    print(n // j, n - n // j, sep=' ', end='\\n')\n                    break\n                else:\n                    print(j, n - j, sep=' ', end='\\n')\n                    break\n        if flag == 0:\n            print(1, n - 1, sep=' ', end='\\n')", "for _ in range(int(input())):\n    n = int(input())\n    temp = 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            temp = n // i\n            break\n    print(temp, n - temp)", "import sys\nfor lol in range(int(input())):\n    n = int(input())\n    for i in range(2, min(int(n ** 0.5) + 2, n - 1)):\n        if n % i == 0:\n            print((i - 1) * n // i, n // i)\n            break\n    else:\n        print(1, n - 1)", "import math\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    if k % 2 == 0:\n        print(k // 2, k // 2)\n        continue\n    newK = k\n    for i in range(2, math.ceil(math.sqrt(k)) + 1):\n        if k % i == 0:\n            newK = newK // i\n            break\n    if k == newK:\n        print(1, k - 1)\n        continue\n    print(newK, k - newK)", "for _ in range(int(input())):\n    n = int(input())\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            b = n // i\n            break\n    else:\n        b = 1\n    print(b, n - b)", "import sys\nrd = sys.stdin.readline\nfor _ in range(int(rd())):\n    n = int(rd())\n    a = 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            a = n // i\n            break\n    print(a, n - a)", "from math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    a = 1\n    for j in range(2, int(sqrt(n) + 1)):\n        if n % j == 0:\n            a = n // j\n            break\n    print(a, n - a)", "for i in range(int(input())):\n    flag = False\n    n = int(input())\n    for j in range(2, int(pow(n, 1 / 2)) + 1):\n        if n % j == 0:\n            print(n // j, (j - 1) * n // j)\n            flag = True\n            break\n    if not flag:\n        print(1, n - 1)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    m = int(math.sqrt(n))\n    flag = 1\n    for j in range(2, m + 1):\n        if n % j == 0:\n            x = n // j\n            print(x, end=' ')\n            print(n - x)\n            flag = 0\n            break\n    if flag == 1:\n        print(1, end=' ')\n        print(n - 1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            ans = n // i\n            break\n    print(ans, n - ans)", "case = int(input())\nfor i in range(case):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n        continue\n    flag = False\n    t = 3\n    while t * t <= n:\n        if n % t == 0:\n            print(n // t, n - n // t)\n            flag = True\n            break\n        t += 2\n    if not flag:\n        print(1, n - 1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            ans = n // i\n            break\n    print(ans, n - ans)", "from math import sqrt\n\ndef sieve_of_eratosthenes(n):\n    primes = [True] * (n + 1)\n    (primes[0], primes[1]) = (False, False)\n    for i in range(2, int(sqrt(n)) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n    return primes\nprimes = sieve_of_eratosthenes(1000000)\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        for i in range(2, int(sqrt(n)) + 1):\n            if primes[i]:\n                if n % i == 0:\n                    a = n // i\n                    print(a, n - a)\n                    break\n        else:\n            print(1, n - 1)", "from math import *\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    d = n - 1\n    for j in range(2, int(sqrt(n)) + 1):\n        if n % j == 0:\n            d = -1\n            print(n // j, n - n // j)\n            break\n    if d == n - 1:\n        print(1, n - 1)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 2:\n        print(1, 1)\n    elif n == 3:\n        print(1, 2)\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                print(n // i, n - n // i)\n                break\n        else:\n            print(1, n - 1)", "import math\na = [int(input()) for i in range(int(input()))]\nfor x in a:\n    done = True\n    for i in range(2, round(math.sqrt(x)) + 1):\n        if x % i == 0:\n            print(x // i, x - x // i)\n            done = False\n            break\n    if done:\n        print(1, x - 1)", "for _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        ans = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                ans = i\n                print(n // i, n - n // i)\n                break\n        if ans == 1:\n            print(1, n - 1)", "import math\nfor _ in range(int(input())):\n    a = 1\n    n = int(input())\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            a = n // i\n            break\n    print(str(a) + ' ' + str(n - a))", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    flag = True\n    for j in range(2, math.floor(math.sqrt(n)) + 1):\n        if n % j == 0:\n            print(n // j, n - n // j)\n            flag = False\n            break\n    if flag:\n        print(1, n - 1)", "from math import gcd\n\ndef brute(n):\n    ans = []\n    for i in range(1, n):\n        b = n - i\n        ans.append((i * b // gcd(i, b), i, b))\n    ans.sort()\n    print(ans)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    best = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            b = n - i\n            a1 = n // i\n            b1 = n - a1\n            best.append((b * i // gcd(b, i), b, i))\n            if a1 == 0 or b1 == 0:\n                continue\n            best.append((a1 * b1 // gcd(a1, b1), a1, b1))\n    got = min(best)\n    print(got[1], got[2])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    elif n % 3 == 0:\n        q = n // 3\n        d = n - q\n        print(q, d)\n    elif n % 5 == 0:\n        q = n // 5\n        d = n - q\n        print(q, d)\n    elif n % 7 == 0:\n        q = n // 7\n        d = n - q\n        print(q, d)\n    elif n % 9 == 0:\n        q = n // 9\n        d = n - q\n        print(q, d)\n    else:\n        x = []\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                x.append(i)\n                break\n        if x:\n            g = n // x[0]\n            k = n - g\n            if g * k < n - 1:\n                print(1, n - 1)\n            else:\n                print(g, k)\n        else:\n            print(1, n - 1)", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    else:\n        for i in range(3, int(n ** (1 / 2)) + 1):\n            if n % i == 0:\n                print(n // i, n - n // i)\n                break\n        else:\n            print(1, n - 1)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = 1\n    for g in range(2, int(n ** 0.5) + 1):\n        if n % g == 0:\n            a = n // g\n            break\n    print(a, n - a)", "from math import sqrt, ceil\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    fctr = n\n    for i in range(2, ceil(sqrt(n)) + 1):\n        if n % i == 0:\n            fctr = i\n            break\n    print(n // fctr, (fctr - 1) * n // fctr)", "import math\nmod1 = 1000000007\nT = int(input())\nfor test in range(T):\n    n = int(input())\n    ans = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            ans = n // i\n            break\n    print(ans, n - ans)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n & 1 == 0:\n        print(n // 2, n // 2)\n    else:\n        ans = n\n        mx_fct = 1\n        for i in range(2, int(n ** (1 / 2)) + 1):\n            if n % i == 0:\n                mx_fct = max(i, n // i, mx_fct)\n        (a, b) = (mx_fct, n - mx_fct)\n        print(a, b)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    elif n % 3 == 0:\n        q = n // 3\n        d = n - q\n        print(q, d)\n    elif n % 5 == 0:\n        q = n // 5\n        d = n - q\n        print(q, d)\n    elif n % 7 == 0:\n        q = n // 7\n        d = n - q\n        print(q, d)\n    elif n % 9 == 0:\n        q = n // 9\n        d = n - q\n        print(q, d)\n    else:\n        x = []\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                x.append(i)\n                break\n        if x:\n            g = n // x[0]\n            k = n - g\n            if g * k < n - 1:\n                print(1, n - 1)\n            else:\n                print(g, k)\n        else:\n            print(1, n - 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2, n // 2)\n    elif n % 3 == 0:\n        q = n // 3\n        d = n - q\n        print(q, d)\n    elif n % 5 == 0:\n        q = n // 5\n        d = n - q\n        print(q, d)\n    elif n % 7 == 0:\n        q = n // 7\n        d = n - q\n        print(q, d)\n    elif n % 9 == 0:\n        q = n // 9\n        d = n - q\n        print(q, d)\n    else:\n        x = []\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                x.append(i)\n                break\n        if x:\n            g = n // x[0]\n            k = n - g\n            if g * k < n - 1:\n                print(1, n - 1)\n            else:\n                print(g, k)\n        else:\n            print(1, n - 1)", "t = int(input())\nfor tc in range(t):\n    n = int(input())\n    temp = 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            temp = n // i\n            break\n    print(temp, n - temp)", "t = int(input())\nfor t0 in range(t):\n    n = int(input())\n    lowest_p = None\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            lowest_p = i\n            break\n    if lowest_p == None:\n        lowest_p = n\n    a = int(n / lowest_p)\n    b = (lowest_p - 1) * a\n    print(a, b)", "import math\nt = int(input())\nfor T in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(int(n / 2), int(n / 2))\n    else:\n        ans = n\n        up = int(math.sqrt(n)) + 2\n        for x in range(2, up):\n            if n % x == 0:\n                ans = x\n                break\n        p1 = int(n / ans)\n        p2 = int((ans - 1) * (n / ans))\n        print(p1, p2)", "import math\ntestCount = int(input())\nfor i in range(testCount):\n    var1 = int(input())\n    smallestNum = 1\n    for num in range(math.floor(math.sqrt(var1))):\n        if var1 % (num + 2) == 0:\n            smallestNum = num + 2\n            break\n    if smallestNum == 1:\n        print(str(var1 - 1) + ' 1')\n    else:\n        print(str(int(var1 / smallestNum)) + ' ' + str(int(var1 - var1 / smallestNum)))", "t = int(input())\n\ndef solve():\n    n = int(input())\n    k = 2\n    while k * k <= n:\n        if n % k == 0:\n            print(n // k, n - n // k)\n            return\n        k += 1\n    print(1, n - 1)\nwhile t:\n    solve()\n    t -= 1", "listofnums = list(map(int, [*open(0)][1:]))\n\ndef minLCM(n):\n    a = 1\n    b = 2\n    while b * b <= n:\n        if n % b == 0:\n            a = n // b\n            return f'{a} {n - a}'\n        b += 1\n    return f'{a} {n - a}'\nfor i in listofnums:\n    print(minLCM(i))", "from math import gcd\n\ndef solve():\n    n = int(input())\n    (a, i) = (1, 2)\n    while i * i <= n:\n        if n % i == 0:\n            a = n // i\n            break\n        i += 1\n    print(a, n - a)\ntt = 1\ntt = int(input())\nfor _ in range(tt):\n    solve()", "from math import gcd\nfrom sys import stdin, stdout\ninput = stdin.readline\n\ndef solve():\n    n = int(input())\n    (a, i) = (1, 2)\n    while i * i <= n:\n        if n % i == 0:\n            a = n // i\n            break\n        i += 1\n    print(a, n - a)\ntt = 1\ntt = int(input())\nfor _ in range(tt):\n    solve()", "import math\nfor i in range(int(input())):\n    n = int(input())\n    a = 0\n    b = 0\n    for val in range(1, int(math.sqrt(n))):\n        if n % (val + 1) == 0:\n            a = n // (val + 1)\n            b = n - n // (val + 1)\n            break\n    if a == 0 and b == 0:\n        print(1, n - 1)\n    else:\n        print(a, b)", "import math\n\ndef pg(x):\n    vf = False\n    i = 3\n    while i <= math.sqrt(x) and vf == False:\n        if x % i == 0:\n            vf = True\n        else:\n            i += 2\n    if vf == False:\n        return 1\n    else:\n        return x // i\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        a = n // 2\n        b = n // 2\n    else:\n        a = pg(n)\n        b = n - a\n    print(a, b)", "import math\nprimes = [2, 3]\nfor i in range(4, math.ceil(math.sqrt(10 ** 9))):\n    isprime = True\n    for x in primes:\n        if i % x == 0:\n            isprime = False\n            break\n    if isprime:\n        primes.append(i)\na = [int(input()) for i in range(int(input()))]\nfor x in a:\n    done = True\n    for i in primes:\n        if i > x / 2:\n            break\n        if x % i == 0:\n            print(x // i, x - x // i)\n            done = False\n            break\n    if done:\n        print(1, x - 1)", "import math\nx = int(input())\nfor i in range(x):\n    a = int(input())\n    delitelj = 0\n    test = True\n    for i in range(2, math.ceil(math.sqrt(a)) + 1):\n        if a % i == 0:\n            delitelj = i + delitelj\n            test = False\n            break\n    if test == True:\n        print(1, int(a - 1))\n    if test == False:\n        print(int(a - a / delitelj), int(a / delitelj))", "import math\na = [int(input()) for i in range(int(input()))]\nprimes = [2, 3]\nfor i in range(4, math.ceil(math.sqrt(10 ** 9))):\n    isprime = True\n    for x in primes:\n        if i % x == 0:\n            isprime = False\n            break\n    if isprime:\n        primes.append(i)\nfor x in a:\n    done = True\n    for i in primes:\n        if i > x / 2:\n            break\n        if x % i == 0:\n            print(x // i, x - x // i)\n            done = False\n            break\n    if done:\n        print(1, x - 1)", "from math import sqrt\nfor i in range(int(input())):\n    n = int(input())\n    l = int(sqrt(n))\n    ind = 2\n    while n % ind != 0 and ind <= l:\n        ind += 1\n    if n % ind == 0:\n        print(n // ind, n - n // ind)\n    else:\n        print(1, n - 1)", "import math\na = [int(input()) for i in range(int(input()))]\nfor x in a:\n    done = True\n    for i in range(2, round(math.sqrt(x)) + 1):\n        if i > x / 2:\n            break\n        if x % i == 0:\n            print(x // i, x - x // i)\n            done = False\n            break\n    if done:\n        print(1, x - 1)", "def smallestPrimeDivisor(n):\n    if n % 2 == 0:\n        return 2\n    found = False\n    i = 3\n    while found == False and i <= int(n ** 0.5):\n        if n % i == 0:\n            return i\n        i += 2\n    return n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p = smallestPrimeDivisor(n)\n    print(str(int((p - 1) * n / p)) + ' ' + str(int(n / p)))", "import math\n\ndef primeFactors(n):\n    l = []\n    c = 2\n    while n > 1:\n        if n % c == 0:\n            l.append(c)\n            n = n / c\n        else:\n            c = c + 1\n    return l\n\ndef prime(n):\n    prime_flag = 0\n    if n > 1:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                prime_flag = 1\n                break\n    return prime_flag\nt = int(input())\nwhile t:\n    n = int(input())\n    i = 1\n    ans = 0\n    d = prime(n)\n    if n % 2 == 0:\n        print(n // 2, end=' ')\n        print(n // 2)\n    elif d == 0:\n        print(1, end=' ')\n        print(n - 1)\n    else:\n        m = 999999999\n        k = int(math.sqrt(n))\n        for i in range(3, k + 1):\n            if n % i == 0:\n                m = min(m, i)\n        ans = n // m\n        ans_1 = n - ans\n        print(ans, end=' ')\n        print(ans_1)\n    t = t - 1", "import sys\ninput = lambda : sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n\n    def prime(n):\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    i = 2\n    if prime(n):\n        print(1, n - 1)\n    else:\n        while True:\n            if n % i == 0:\n                if prime(i):\n                    print(n // i, n - n // i)\n                    break\n            i += 1", "for _ in range(int(input())):\n    (n, d) = (int(input()), 2)\n    while d * d <= n:\n        if n % d == 0:\n            print(n // d, (d - 1) * n // d)\n            break\n        d += 1\n    if d * d > n:\n        print(n - 1, 1)", "for _ in range(int(input())):\n    n = int(input())\n    i = 2\n    a = 1\n    while i * i <= n:\n        if n % i == 0:\n            a = n // i\n            break\n        i += 1\n    print(a, n - a)", "n = int(input())\nfor i in range(n):\n    s = int(input())\n    a = 1\n    g = 2\n    while g * g <= s:\n        if s % g == 0:\n            a = s / g\n            break\n        g += 1\n    print(int(a), int(s - a))", "for _ in range(int(input())):\n    n = int(input())\n    i = 2\n    a = 1\n    while i * i <= n:\n        if n % i == 0:\n            a = n // i\n            break\n        i += 1\n    print(a, n - a)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = 1\n    g = 2\n    while g * g <= n:\n        if n % g == 0:\n            a = n // g\n            break\n        g += 1\n    print(a, n - a)\n    t -= 1"]