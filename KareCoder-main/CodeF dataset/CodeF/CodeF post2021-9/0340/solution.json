["for s in [*open(0)][2::2]:\n    i = len((a := s.split()))\n    while i and a[i - 1] == a[-i]:\n        i -= 1\n    print('YNEOS'[all((v != v[::-1] for v in ([x for x in a if x != y] for y in (a[i - 1], a[-i]))))::2])", "for s in [*open(0)][2::2]:\n    i = len((a := s.split()))\n    while (a[i - 1] == a[-i]) * i:\n        i -= 1\n    print('YNEOS'[all((v != v[::-1] for v in ([x for x in a if x != y] for y in (a[i - 1], a[-i]))))::2])", "for s in [*open(0)][2::2]:\n    i = len((a := s.split()))\n    while i and a[i - 1] == a[-i]:\n        i -= 1\n    print('YNEOS'[all((v != v[::-1] for v in ([x for x in a if x != y] for y in (a[i - 1], a[-i]))))::2])", "import sys\n\ndef kalindrome(S, i, j, canceled_number=0, life=0):\n    while True:\n        if j - i == 0:\n            return True\n        elif j - i == 1 and S[i] == S[j]:\n            return True\n        if S[i] == S[j]:\n            i += 1\n            j -= 1\n        elif S[i] == canceled_number:\n            i += 1\n        elif S[j] == canceled_number:\n            j -= 1\n        elif life > 0:\n            life -= 1\n            return kalindrome(S, i, j, S[i], life - 1) or kalindrome(S, i, j, S[j], life - 1)\n        else:\n            return False\n\ndef solve():\n    T = int(sys.stdin.readline().rstrip())\n    for _ in range(T):\n        N = int(sys.stdin.readline().rstrip())\n        S = list(map(int, sys.stdin.readline().rstrip().split(' ')))\n        i = 0\n        j = N - 1\n        print('YES' if kalindrome(S, i, j, 0, 1) else 'NO')\nsolve()", "for s in [*open(0)][2::2]:\n    a = s.split()\n    i = len(a)\n    while i and a[i - 1] == a[-i]:\n        i -= 1\n    print('YNEOS'[all((v != v[::-1] for v in ([x for x in a if x != y] for y in (a[i - 1], a[-i]))))::2])", "for s in [*open(0)][2::2]:\n    a = s.split()\n    i = len(a)\n    while i and a[i - 1] == a[-i]:\n        i -= 1\n    print('YNEOS'[all((v != v[::-1] for v in ([x for x in a if x != y] for y in (a[i - 1], a[-i]))))::2])", "def solve(answers):\n    l = 0\n    r = int(input()) - 1\n    numbers = [int(x) for x in input().split()]\n    marginals = []\n    while l < r:\n        if numbers[l] == numbers[r]:\n            l += 1\n            r -= 1\n        else:\n            marginals += [numbers[l], numbers[r]]\n            break\n    marginals.append(-1)\n    for x in marginals:\n        tmp = [y for y in numbers if y != x]\n        if tmp == list(reversed(tmp)):\n            answers.append('YES')\n            return\n    answers.append('NO')\nsets_num = int(input())\nanswers = []\nfor i in range(sets_num):\n    solve(answers)\nfor i in answers:\n    print(i)", "for r in [*open(0)][2::2]:\n    m = r.split()\n    i = len(m)\n    while i and m[i - 1] == m[-i]:\n        i -= 1\n    print('YNEOS'[all((z != z[::-1] for z in ([x for x in m if x != y] for y in (m[i - 1], m[-i]))))::2])", "for s in [*open(0)][2::2]:\n    i = len((a := s.split()))\n    while (a[i - 1] == a[-i]) * i:\n        i -= 1\n    print('YNEOS'[all((v != v[::-1] for v in ([x for x in a if x != y] for y in (a[i - 1], a[-i]))))::2])", "for s in [*open(0)][2::2]:\n    i = len((a := s.split()))\n    while (a[i - 1] == a[-i]) * i:\n        i -= 1\n    print('YNEOS'[all((v != v[::-1] for v in ([x for x in a if x != y] for y in (a[i - 1], a[-i]))))::2])", "t = int(input())\nA = []\nfor x in range(t):\n    n = input()\n    a = list(map(int, input().split()))\n    A.append(a)\nfor a in A:\n    (i, j) = (0, len(a))\n    if j in [0, 1, 2]:\n        print('YES')\n    else:\n        result = False\n        j -= 1\n        (left, right) = (None, None)\n        while i < j:\n            if a[i] == a[j]:\n                i += 1\n                j -= 1\n                result = True\n                continue\n            elif not left:\n                left = a[i]\n                (l, k) = (i + 1, j)\n                while l < k:\n                    if a[l] == a[k]:\n                        l += 1\n                        k -= 1\n                        result = True\n                        continue\n                    elif a[l] == left:\n                        l += 1\n                        result = True\n                        continue\n                    elif a[k] == left:\n                        k -= 1\n                        result = True\n                        continue\n                    else:\n                        result = False\n                        break\n            elif not right and (not result):\n                right = a[j]\n                (l, k) = (i, j - 1)\n                while l < k:\n                    if a[l] == a[k]:\n                        l += 1\n                        k -= 1\n                        result = True\n                        continue\n                    elif a[l] == right:\n                        l += 1\n                        result = True\n                        continue\n                    elif a[k] == right:\n                        k -= 1\n                        result = True\n                        continue\n                    else:\n                        result = False\n                        break\n            else:\n                break\n        if result:\n            print('YES')\n        else:\n            print('NO')", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef finding():\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] == arr[j]:\n            i += 1\n            j -= 1\n        else:\n            return [i, j]\n    return 0\n\ndef ch(val, i, j):\n    while i < j:\n        if arr[i] == arr[j]:\n            i += 1\n            j -= 1\n        elif arr[i] == val:\n            i += 1\n        elif arr[j] == val:\n            j -= 1\n        else:\n            return 0\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    arr = int_arr()\n    v = finding()\n    if v == 0:\n        print('YES')\n        continue\n    (i, j) = v\n    z = i\n    y = j\n    val1 = arr[i]\n    val2 = arr[j]\n    a = ch(val1, i, j)\n    b = ch(val2, z, y)\n    if a == 1 or b == 1:\n        print('YES')\n    else:\n        print('NO')", "def check_new(a, i, j, k):\n    while i < j:\n        if a[i] == k:\n            i += 1\n        elif a[j] == k:\n            j -= 1\n        elif a[i] == a[j]:\n            (i, j) = (i + 1, j - 1)\n        else:\n            return False\n    return True\n\ndef check_palindrome(a, i, j):\n    while i < j:\n        if a[i] != a[j]:\n            return check_new(a, i, j - 1, a[j]) or check_new(a, i + 1, j, a[i])\n        else:\n            (i, j) = (i + 1, j - 1)\n    return True\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    if check_palindrome(a, 0, n - 1):\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "import sys\nimport math\nfrom fractions import Fraction\nfrom decimal import *\ninput = sys.stdin.readline\n\ndef checkPalin(arr, l, r, num):\n    while l < r:\n        if arr[l] == arr[r]:\n            l += 1\n            r -= 1\n        elif arr[l] == num:\n            l += 1\n        elif arr[r] == num:\n            r -= 1\n        else:\n            return False\n    return True\nt = int(input())\nwhile t > 0:\n    n = int(input().strip())\n    inp = input().strip()\n    arr = [int(x) for x in inp.split(' ')]\n    l = 0\n    r = len(arr) - 1\n    while l < r:\n        if arr[l] == arr[r]:\n            l += 1\n            r -= 1\n        else:\n            break\n    if arr[l] == arr[r]:\n        print('YES')\n    else:\n        a = checkPalin(arr, l + 1, r, arr[l])\n        if a:\n            print('YES')\n        else:\n            a = checkPalin(arr, l, r - 1, arr[r])\n            if a:\n                print('YES')\n            else:\n                print('NO')\n    t -= 1", "def f(i, j, remove, A):\n    while i < j:\n        if A[i] == remove:\n            i += 1\n        elif A[j] == remove:\n            j -= 1\n        elif A[i] == A[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    (i, j) = (0, len(A) - 1)\n    while i < j and A[i] == A[j]:\n        i += 1\n        j -= 1\n    if i >= j:\n        return True\n    choice_one = f(i + 1, j, A[i], A)\n    if choice_one:\n        return True\n    choice_two = f(i, j - 1, A[j], A)\n    return choice_two\nfor _ in range(int(input())):\n    if solve():\n        print('YES')\n    else:\n        print('NO')", "from math import ceil, floor, log\nimport sys\ninput = sys.stdin.readline\ninp_lis = lambda : list(map(int, input().split()))\ninp_multi = lambda : map(int, input().split())\ninp_int = lambda : int(input().strip())\n\ndef palind(arr, x):\n    l = [i for i in arr if i != x]\n    if l == l[::-1]:\n        return 1\n    return 0\nfor _ in range(int(input().strip())):\n    n = inp_int()\n    a = inp_lis()\n    if a == a[::-1] or n == 2 or n == 1:\n        print('YES')\n        continue\n    ans = 1\n    i = 0\n    while i < n - i:\n        if a[i] != a[n - i - 1]:\n            ans = max(palind(a, a[i]), palind(a, a[n - i - 1]))\n            break\n        i += 1\n    if ans == 0:\n        print('NO')\n    else:\n        print('YES')", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    ans = 'NO'\n    for i in range(n // 2):\n        if w[i] != w[n - 1 - i]:\n            s = w[i:n - i]\n            d = [a for a in s if a != w[i]]\n            x = len(d)\n            e = [a for a in s if a != w[n - 1 - i]]\n            y = len(e)\n            for j in range(x // 2):\n                if d[j] != d[x - 1 - j]:\n                    break\n            else:\n                ans = 'YES'\n            if ans == 'NO':\n                for j in range(y // 2):\n                    if e[j] != e[y - 1 - j]:\n                        break\n                else:\n                    ans = 'YES'\n            break\n    else:\n        ans = 'YES'\n    print(ans)", "def check(x):\n    l = 0\n    r = n - 1\n    while l <= r:\n        if a[l] == x:\n            l += 1\n            continue\n        if a[r] == x:\n            r -= 1\n            continue\n        if a[l] == a[r]:\n            l += 1\n            r -= 1\n            continue\n        return False\n    return True\nT = int(input())\nfor tests in range(T):\n    n = int(input())\n    S = input()\n    a = S.split()\n    l = 0\n    r = n - 1\n    while l <= r:\n        if a[l] != a[r]:\n            break\n        else:\n            l += 1\n            r -= 1\n    if l >= r:\n        print('YES')\n        continue\n    if check(a[l]) or check(a[r]):\n        print('YES')\n    else:\n        print('NO')", "def pal(a, n1, n2, n, c):\n    while n1 < n2 and n1 < n:\n        if a[n1] == a[n2]:\n            n1 += 1\n            n2 -= 1\n        elif a[n1] == c:\n            n1 += 1\n        elif a[n2] == c:\n            n2 -= 1\n        else:\n            return False\n    return True\n\ndef pa(a, n):\n    n1 = 0\n    n2 = n - 1\n    while n1 < n2:\n        if a[n1] == a[n2]:\n            n1 += 1\n            n2 -= 1\n        else:\n            if pal(a, n1 + 1, n2, n, a[n1]):\n                return 'YES'\n            elif pal(a, n1, n2 - 1, n, a[n2]):\n                return 'YES'\n            else:\n                return 'NO'\n            break\n    return 'YES'\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    if n == 1 or n == 2:\n        print('YES')\n    else:\n        print(pa(ar, n))", "def pal(a, n1, n2, n, c):\n    while n1 < n2:\n        if a[n1] == a[n2]:\n            n1 += 1\n            n2 -= 1\n        elif a[n1] == c:\n            n1 += 1\n        elif a[n2] == c:\n            n2 -= 1\n        else:\n            return False\n    return True\n\ndef pa(a, n):\n    n1 = 0\n    n2 = n - 1\n    while n1 < n2:\n        if a[n1] == a[n2]:\n            n1 += 1\n            n2 -= 1\n        else:\n            if pal(a, n1 + 1, n2, n, a[n1]):\n                return 'YES'\n            elif pal(a, n1, n2 - 1, n, a[n2]):\n                return 'YES'\n            else:\n                return 'NO'\n            break\n    return 'YES'\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    if n == 1 or n == 2:\n        print('YES')\n    else:\n        print(pa(ar, n))", "def is_kalindrome(a, n):\n    i = 0\n    j = n - 1\n    x = -1\n    flag = 0\n    while i < j:\n        if a[i] == a[j]:\n            i += 1\n            j -= 1\n        else:\n            if flag == 0:\n                k = i + 1\n                x = a[i]\n                while a[k] == x:\n                    k += 1\n                if a[k] == a[j]:\n                    i = k + 1\n                    j -= 1\n                    flag = 1\n                    continue\n                h = j - 1\n                x = a[j]\n                while a[h] == x:\n                    h -= 1\n                if a[h] == a[i]:\n                    i += 1\n                    j = h - 1\n                    flag = 1\n                    continue\n                return False\n            elif flag == 1 and x == a[i]:\n                while a[i] == x:\n                    i += 1\n                if a[i] == a[j]:\n                    i += 1\n                    j -= 1\n                    continue\n                return False\n            elif flag == 1 and x == a[j]:\n                while a[j] == x:\n                    j -= 1\n                if a[i] == a[j]:\n                    i += 1\n                    j -= 1\n                    continue\n                return False\n            return False\n    return True\nn_testcase = int(input())\nfor _ in range(n_testcase):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if is_kalindrome(a, n):\n        print('YES')\n    else:\n        print('NO')", "from tkinter.messagebox import RETRY\n\ndef IsFixable(a, l, r, av_to_rem):\n    while l <= r:\n        if a[l] == a[r]:\n            l += 1\n            r -= 1\n        elif a[l] == av_to_rem:\n            l += 1\n        elif a[r] == av_to_rem:\n            r -= 1\n        else:\n            return False\n    return True\n\ndef SolOfTest(n, a):\n    (l, r) = (0, n - 1)\n    while l <= r and a[l] == a[r]:\n        l += 1\n        r -= 1\n    if l > r:\n        return 'YES'\n    is_fixable = IsFixable(a, l, r, a[l]) or IsFixable(a, l, r, a[r])\n    if is_fixable:\n        return 'YES'\n    else:\n        return 'NO'\n\ndef GetInputOfTest():\n    n = int(input())\n    a = list(map(int, input().split()))\n    return (n, a)\nnum_tests = int(input())\nanswers = []\nfor test_ind in range(num_tests):\n    (n, a) = GetInputOfTest()\n    answ = SolOfTest(n, a)\n    answers.append(answ)\nfor answ in answers:\n    print(answ)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n\n    def fun(l):\n        (i, j) = (0, n - 1)\n        while i < j:\n            if l[i] != l[j]:\n                break\n            i += 1\n            j -= 1\n        if i >= j:\n            return 'YES'\n        (a, b) = (i, j)\n        (i, j) = (0, n - 1)\n        while i < j:\n            if l[i] != l[j]:\n                if l[i] == l[a]:\n                    i += 1\n                elif l[j] == l[a]:\n                    j -= 1\n                else:\n                    break\n            else:\n                i += 1\n                j -= 1\n        if i >= j:\n            return 'YES'\n        (i, j) = (0, n - 1)\n        while i < j:\n            if l[i] != l[j]:\n                if l[i] == l[b]:\n                    i += 1\n                elif l[j] == l[b]:\n                    j -= 1\n                else:\n                    break\n            else:\n                i += 1\n                j -= 1\n        if i >= j:\n            return 'YES'\n        return 'NO'\n    print(fun(l))", "import copy\nimport math\nfrom sys import stdin\n\ndef A():\n    t = int(stdin.readline())\n    while t:\n        t -= 1\n        (n, m) = [int(x) for x in stdin.readline().split()]\n        if n == 1 and m == 1:\n            print(0)\n        else:\n            print(min(n, m))\n\ndef B():\n    t = int(stdin.readline())\n    while t:\n        t -= 1\n        n = int(stdin.readline())\n        a = [int(x) for x in stdin.readline().split()]\n        res = []\n        res1 = []\n        l = 0\n        r = n - 1\n        while a[l] == a[r] and l < r:\n            l += 1\n            r -= 1\n        for i in a:\n            if i == a[l]:\n                continue\n            res.append(i)\n        for i in a:\n            if i == a[r]:\n                continue\n            res1.append(i)\n        if res == res[::-1] or len(res) == 0:\n            print('YES')\n        elif res1 == res1[::-1] or len(res1) == 0:\n            print('YES')\n        else:\n            print('NO')\n\ndef C():\n    t = int(stdin.readline())\n    while t:\n        t -= 1\n        a = [int(x) for x in stdin.readline().split()]\n        (n, m) = (a[0], a[1])\n        m1 = copy.deepcopy(m)\n        m += 1\n        res = n ^ m\n        while res >= m1:\n            m += 1\n            res = n ^ m\n        while n ^ m < m1:\n            m += 1\n            res = min(n ^ m, res)\n        print(res)\n\ndef D():\n    t = int(stdin.readline())\n    while t:\n        t -= 1\nB()", "def sl(s, rem):\n    tes = []\n    for val in s:\n        if val != rem:\n            tes.append(val)\n    return tes == tes[::-1]\n\ndef solve(s, i, j):\n    while i <= j:\n        if s[i] == s[j]:\n            i += 1\n            j -= 1\n        else:\n            return sl(s, s[i]) or sl(s, s[j])\n    return True\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if solve(arr, 0, n - 1):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\n\ndef ispalin(a):\n    i = 0\n    j = len(a) - 1\n    while i < j:\n        if a[i] == a[j]:\n            i += 1\n            j -= 1\n            continue\n        else:\n            return (a[i], a[j])\n    return (-1, -1)\n\ndef ispalinwox(a, x):\n    i = 0\n    j = len(a) - 1\n    while i < j:\n        if a[i] == a[j]:\n            i += 1\n            j -= 1\n            continue\n        elif a[i] == x:\n            i += 1\n            continue\n        elif a[j] == x:\n            j -= 1\n            continue\n        else:\n            return False\n    return True\nfor tc in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print('YES')\n        continue\n    (poss1, poss2) = ispalin(a)\n    if poss1 == -1:\n        print('YES')\n        continue\n    if ispalinwox(a, poss1) or ispalinwox(a, poss2):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n\n    def check(i, j, x):\n        while i < j:\n            if arr[i] != arr[j]:\n                if x != -1:\n                    if arr[i] != x and arr[j] != x:\n                        return False\n                    if arr[i] == x:\n                        i += 1\n                    else:\n                        j -= 1\n                else:\n                    return check(i + 1, j, arr[i]) or check(i, j - 1, arr[j])\n            else:\n                i += 1\n                j -= 1\n        return True\n    print('YES' if check(0, n - 1, -1) else 'NO')", "import sys\nfrom math import sqrt, gcd\nfrom collections import deque, Counter, OrderedDict\nsys.setrecursionlimit(10 ** 8)\nI = lambda : int(input())\nS = lambda : input().strip()\nM = lambda : map(int, input().strip().split())\nL = lambda : list(map(str, input().strip().split()))\nmod = 1000000007\n\ndef valid(arr, l, r, var):\n    flag = 1\n    while l < r:\n        if arr[l] == arr[r]:\n            l += 1\n            r -= 1\n        elif arr[l] == var:\n            l += 1\n        elif arr[r] == var:\n            r -= 1\n        else:\n            flag = 0\n            break\n    return flag\nfor _ in range(I()):\n    n = I()\n    a = L()\n    (i, j) = (0, len(a) - 1)\n    flag = 1\n    while i < j:\n        if a[i] == a[j]:\n            i += 1\n            j -= 1\n        else:\n            if not (valid(a, i + 1, j, a[i]) or valid(a, i, j - 1, a[j])):\n                flag = 0\n            break\n    print('YES' if flag else 'NO')", "def kalindrome(arr, length):\n    left = 0\n    right = length - 1\n    if checkPalindrome(arr, left, right, 0):\n        return True\n    while left < right:\n        if arr[left] != arr[right]:\n            checkLeft = checkPalindrome(arr, left + 1, right, arr[left])\n            checkRight = checkPalindrome(arr, left, right - 1, arr[right])\n            if checkLeft or checkRight:\n                return True\n            else:\n                return False\n        left += 1\n        right -= 1\n    return False\n\ndef checkPalindrome(arr, left, right, k):\n    while left < right:\n        if arr[left] == k or arr[right] == k:\n            if arr[left] == k:\n                left += 1\n            if arr[right] == k:\n                right -= 1\n        else:\n            if arr[right] != arr[left]:\n                return False\n            left += 1\n            right -= 1\n    return True\n\ndef checkKalindrome(arr, length):\n    check = kalindrome(arr, length)\n    if check:\n        return 'YES'\n    return 'NO'\ncase = int(input())\nfor i in range(case):\n    length = int(input())\n    arr = list(map(int, input().split(' ')))\n    print(checkKalindrome(arr, length))", "def check(numbers, number):\n    new_numbers = [x for x in numbers if x != number]\n    return new_numbers == new_numbers[::-1]\n\ndef main():\n    n = int(input())\n    numbers = [int(x) for x in input().split()]\n    for i in range(n // 2):\n        if numbers[i] != numbers[n - i - 1]:\n            if check(numbers, numbers[i]) or check(numbers, numbers[n - i - 1]):\n                return 'YES'\n            return 'NO'\n    return 'YES'\ntests = int(input())\nwhile tests:\n    tests -= 1\n    print(main())", "from collections import defaultdict\n\ndef isKalindrome(arr, size, dell):\n    fp = 0\n    lp = size - 1\n    while fp <= lp:\n        if arr[lp] != arr[fp]:\n            if arr[fp] == dell:\n                lp += 1\n            elif arr[lp] == dell:\n                fp -= 1\n            else:\n                return False\n        fp += 1\n        lp -= 1\n    return True\n\ndef func(arr):\n    (fp, lp) = (0, len(arr) - 1)\n    isKal = True\n    while fp <= lp:\n        if arr[fp] != arr[lp]:\n            if not (isKalindrome(arr, len(arr), arr[fp]) or isKalindrome(arr, len(arr), arr[lp])):\n                isKal = False\n                break\n            else:\n                isKal = True\n                break\n        fp += 1\n        lp -= 1\n    if isKal:\n        return 'YES'\n    else:\n        return 'NO'\nfor t in range(int(input())):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    print(func(arr))", "get_int = lambda : int(input())\nget_int_list = lambda : list(map(int, input().split()))\n\ndef solve():\n    n = get_int()\n    ar = get_int_list()\n    left = 0\n    right = n - 1\n    while left <= right:\n        if ar[left] != ar[right]:\n            break\n        left += 1\n        right -= 1\n    if left > right:\n        print('YES')\n        return\n    saved = (left, right)\n    for x in [ar[left], ar[right]]:\n        (left, right) = saved\n        while left <= right:\n            if ar[left] == x:\n                left += 1\n            elif ar[right] == x:\n                right -= 1\n            elif ar[left] == ar[right]:\n                left += 1\n                right -= 1\n            else:\n                break\n        found_x = left > right\n        if found_x:\n            break\n    if found_x:\n        print('YES')\n    else:\n        print('NO')\nt = get_int()\nfor _ in range(t):\n    solve()", "def remove(i, j, x):\n    ans = True\n    while i <= j:\n        if a[i] != a[j]:\n            if a[i] == x:\n                i += 1\n            elif a[j] == x:\n                j -= 1\n            else:\n                ans = False\n                break\n        else:\n            i += 1\n            j -= 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    (i, j) = (0, n - 1)\n    while i <= j and a[i] == a[j]:\n        i += 1\n        j -= 1\n    ans = True\n    if i > j:\n        print('YES')\n        continue\n    if remove(i, j, a[i]) or remove(i, j, a[j]):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    kal = list(map(int, input().split()))\n    i = 0\n    j = n - 1\n    ignore = -1\n    flag = 0\n    flag2 = 0\n    while i < j:\n        if kal[i] == kal[j]:\n            i += 1\n            j -= 1\n        else:\n            if flag == 0:\n                ignore = kal[i]\n                i += 1\n                flag = 1\n                continue\n            if kal[i] == ignore:\n                i += 1\n            elif kal[j] == ignore:\n                j -= 1\n            else:\n                flag2 = 1\n                break\n    flag3 = 0\n    i = 0\n    j = n - 1\n    flag = 0\n    while i < j:\n        if kal[i] == kal[j]:\n            i += 1\n            j -= 1\n        else:\n            if flag == 0:\n                ignore = kal[j]\n                j -= 1\n                flag = 1\n                continue\n            if kal[i] == ignore:\n                i += 1\n            elif kal[j] == ignore:\n                j -= 1\n            else:\n                flag3 = 1\n                break\n    if (flag2 and flag3) == 0:\n        print('YES')\n    else:\n        print('NO')", "def remove(l, item):\n    res = list(filter(item.__ne__, l))\n    n1 = len(res)\n    l1 = res[:n1 // 2]\n    r1 = res[n1 - n1 // 2:]\n    r1 = r1[::-1]\n    if l1 == r1:\n        return 1\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n <= 2:\n        print('YES')\n        continue\n    f = 1\n    for i in range(n // 2):\n        if a[i] != a[n - 1 - i]:\n            if remove(a, a[i]) or remove(a, a[n - 1 - i]):\n                print('YES')\n                f = 0\n                break\n            else:\n                print('NO')\n                f = 0\n                break\n    if f:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a == a[::-1]:\n        print('YES')\n        continue\n    aa = a[::-1]\n    for i in range(n):\n        if a[i] != aa[i]:\n            badchar = a[i]\n            badchar2 = aa[i]\n            b = [i for i in a if i != badchar]\n            bb = [i for i in a if i != badchar2]\n            if b == b[::-1] or bb == bb[::-1]:\n                print('YES')\n            else:\n                print('NO')\n            break", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    while n and arr[n - 1] == arr[-n]:\n        n -= 1\n    print('YNEOS'[all((v != v[::-1] for v in ([x for x in arr if x != y] for y in (arr[n - 1], arr[-n]))))::2])", "def is_kalindrome(a, x):\n    i = 0\n    j = len(a) - 1\n    orig_x = x\n    if j <= 0:\n        return True\n    while i < j:\n        if a[i] == a[j]:\n            i += 1\n            j -= 1\n            continue\n        else:\n            orig_i = i\n            if not x:\n                x = a[i]\n            while x and i < j and (a[i] == x):\n                i += 1\n            if i != orig_i and is_kalindrome(a[i:j + 1], x):\n                return True\n            x = orig_x\n            if not x:\n                x = a[j]\n            i = orig_i\n            orig_j = j\n            while x and i < j and (a[j] == x):\n                j -= 1\n            if j != orig_j and is_kalindrome(a[i:j + 1], x):\n                return True\n            return False\n    return True\n\ndef main():\n    no_of_test_cases = int(input().strip())\n    for i in range(no_of_test_cases):\n        n = int(input().strip())\n        a = list(map(int, input().strip().split()))\n        if is_kalindrome(a, None):\n            print('YES')\n        else:\n            print('NO')\nmain()", "def ispalindrome(arr):\n    return arr == arr[::-1]\n\ndef removeall(arr, x):\n    return [i for i in arr if i != x]\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (i, j) = (0, n - 1)\n    while i < j:\n        if arr[i] != arr[j]:\n            if ispalindrome(removeall(arr, arr[i])) or ispalindrome(removeall(arr, arr[j])):\n                return 'YES'\n            return 'NO'\n        i += 1\n        j -= 1\n    return 'YES'\nfor _ in range(int(input())):\n    print(solve())", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    vals = None\n    for i in range(n):\n        if a[i] != a[-i - 1]:\n            vals = (a[i], a[-i - 1])\n            break\n    else:\n        print('YES')\n        continue\n    b = a.copy()\n    b = [x for x in a if x != vals[0]]\n    a = [x for x in a if x != vals[-1]]\n    if b == b[::-1] or a == a[::-1]:\n        print('YES')\n    else:\n        print('NO')", "def isPalindrome(x):\n    if x == x[::-1]:\n        return True\n    return False\n_ = int(input())\nfor __ in range(_):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if isPalindrome(arr):\n        print('YES')\n    else:\n        beg = 0\n        end = n - 1\n        while beg < end:\n            if arr[beg] == arr[end]:\n                beg += 1\n                end -= 1\n            else:\n                if isPalindrome([x for x in arr if x != arr[beg]]) or isPalindrome([x for x in arr if x != arr[end]]):\n                    print('YES')\n                else:\n                    print('NO')\n                break", "I = input\nfor _ in range(int(I())):\n    n = int(I())\n    lst = list(map(int, I().split()))\n    i = 0\n    while 2 * i < n - 1 and lst[i] == lst[-i - 1]:\n        i += 1\n    for y in (lst[i], lst[-i - 1]):\n        v = [x for x in lst if x != y]\n        if v == v[::-1]:\n            print('YES')\n            break\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    check = False\n    ck = False\n    num = -1\n    i = 0\n    j = n - 1\n    while i < j:\n        if a[i] == a[j]:\n            i += 1\n            j -= 1\n        elif a[i] != a[j] and (not ck):\n            num = a[j]\n            ck = True\n            j -= 1\n        elif a[i] != a[j] and ck:\n            if a[i] == num:\n                i += 1\n            elif a[j] == num:\n                j -= 1\n            else:\n                check = True\n                break\n        if check:\n            break\n    ck = False\n    num = -1\n    if check:\n        check = False\n        i = 0\n        j = n - 1\n        while i < j:\n            if a[i] == a[j]:\n                i += 1\n                j -= 1\n            elif a[i] != a[j] and (not ck):\n                num = a[i]\n                ck = True\n                i += 1\n            elif a[i] != a[j] and ck:\n                if a[i] == num:\n                    i += 1\n                elif a[j] == num:\n                    j -= 1\n                else:\n                    check = True\n                    break\n            if check:\n                break\n        if check:\n            print('NO')\n        else:\n            print('YES')\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print('YES')\n        continue\n    if n == 2:\n        print('YES')\n        continue\n    i = 0\n    j = n - 1\n    while i < j:\n        if a[i] == a[j]:\n            i += 1\n            j -= 1\n        else:\n            break\n    if i >= j:\n        print('YES')\n        continue\n    (p, q) = (i, j)\n    (x, y) = (a[i], a[j])\n    i += 1\n    while i < j:\n        if a[i] == a[j]:\n            i += 1\n            j -= 1\n        elif a[i] == x:\n            i += 1\n        elif a[j] == x:\n            j -= 1\n        else:\n            break\n    if i >= j:\n        print('YES')\n        continue\n    (i, j) = (p, q)\n    j -= 1\n    while i < j:\n        if a[i] == a[j]:\n            i += 1\n            j -= 1\n        elif a[i] == y:\n            i += 1\n        elif a[j] == y:\n            j -= 1\n        else:\n            break\n    if i >= j:\n        print('YES')\n        continue\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    l = 0\n    r = n - 1\n    if l == r:\n        print('YES')\n        continue\n    while l < r:\n        if arr[l] == arr[r]:\n            l += 1\n            r -= 1\n        else:\n            d1 = arr[l]\n            d2 = arr[r]\n            break\n    if l >= r:\n        print('YES')\n        continue\n    (l, r) = (0, n - 1)\n    while l < r:\n        if arr[l] == arr[r]:\n            l += 1\n            r -= 1\n        elif arr[l] == d1:\n            l += 1\n        elif arr[r] == d1:\n            r -= 1\n        else:\n            break\n    if l >= r:\n        print('YES')\n        continue\n    (l, r) = (0, n - 1)\n    while l < r:\n        if arr[l] == arr[r]:\n            l += 1\n            r -= 1\n        elif arr[l] == d2:\n            l += 1\n        elif arr[r] == d2:\n            r -= 1\n        else:\n            break\n    if l >= r:\n        print('YES')\n        continue\n    print('NO')", "def ispalindrome(arr):\n    return arr == arr[::-1]\n\ndef iskalindrome(arr, n):\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] != arr[j]:\n            arr1 = []\n            arr2 = []\n            for k in arr:\n                if k == arr[i]:\n                    arr2.append(k)\n                elif k == arr[j]:\n                    arr1.append(k)\n                else:\n                    arr2.append(k)\n                    arr1.append(k)\n            if ispalindrome(arr2) or ispalindrome(arr1):\n                return 1\n            else:\n                return 0\n        i += 1\n        j -= 1\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print('YES' if iskalindrome(arr, n) else 'NO')", "remove = lambda x, a: [i for i in a if i != x]\nfor _ in range(int(input())):\n    (n, ans) = (int(input()), 0)\n    l = list(map(int, input().split()))\n    for i in range(len(l)):\n        if l[i] != l[n - 1 - i]:\n            if (z := remove(l[i], l)) != z[::-1] and (z := remove(l[n - 1 - i], l)) != z[::-1]:\n                ans = 1\n            break\n    print('YNEOS'[ans::2])", "def f(a, bad):\n    n = len(a)\n    (i, j) = (0, n - 1)\n    while i < j:\n        if a[i] == bad:\n            i += 1\n        elif a[j] == bad:\n            j -= 1\n        elif a[i] != a[j]:\n            return False\n        else:\n            i += 1\n            j -= 1\n    return True\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (i, j) = (0, n - 1)\n    bad = None\n    while i < j:\n        if a[i] != a[j]:\n            bad = [a[i], a[j]]\n            break\n        else:\n            i += 1\n            j -= 1\n    if bad is None:\n        print('YES')\n        continue\n    for x in bad:\n        if f(a, x):\n            print('YES')\n            break\n    else:\n        print('NO')", "def func(arr, val):\n    arr1 = list(filter(val.__ne__, arr))\n    return arr1 == arr1[::-1]\n\ndef solve(arr):\n    i = 0\n    j = len(arr) - 1\n    k = 0\n    while i <= j:\n        if arr[i] == arr[j]:\n            i += 1\n            j -= 1\n        else:\n            ans1 = func(arr, arr[i])\n            ans2 = func(arr, arr[j])\n            if not ans1 and (not ans2):\n                return False\n            if ans1 or ans2:\n                return True\n    return True\nt = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if solve(arr):\n        print('YES')\n        t -= 1\n    else:\n        print('NO')\n        t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    array = list(map(int, input().split()))\n    flag = False\n    if n <= 2 or array == array[::-1]:\n        flag = True\n    else:\n        i = 0\n        j = n - 1\n        while i <= j:\n            if array[i] != array[j]:\n                a1 = [x for x in array if x != array[i]]\n                a2 = [x for x in array if x != array[j]]\n                if a1 == a1[::-1] or a2 == a2[::-1]:\n                    flag = True\n                else:\n                    flag = False\n                break\n            i += 1\n            j -= 1\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "def test(A, x):\n    (a, b) = (0, len(A) - 1)\n    while a < b:\n        if A[a] == A[b]:\n            a += 1\n            b -= 1\n        elif A[a] == x:\n            a += 1\n        elif A[b] == x:\n            b -= 1\n        else:\n            return False\n    return True\n\ndef solve():\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    (a, b) = (0, len(A) - 1)\n    while a < b:\n        if A[a] == A[b]:\n            a += 1\n            b -= 1\n        elif test(A, A[a]) or test(A, A[b]):\n            return 'YES'\n        else:\n            return 'NO'\n    return 'YES'\nt = int(input())\nfor _ in range(t):\n    print(solve())", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    i = 0\n    j = n - 1\n    k = 0\n    ans1 = 1\n    ans2 = 1\n    while i < j:\n        if a[i] != a[j] and k == 0:\n            a1 = a[i]\n            b = a[j]\n            k = 1\n        if k == 1:\n            if a[i] == a[j]:\n                i += 1\n                j -= 1\n            elif a[i] == a1:\n                i += 1\n            elif a[j] == a1:\n                j -= 1\n            else:\n                ans1 = 0\n                k += 1\n                i = 0\n                j = n - 1\n            if i > j:\n                i = 0\n                j = n - 1\n                k += 1\n        elif k == 2:\n            if a[i] == a[j]:\n                i += 1\n                j -= 1\n            elif a[i] == b:\n                i += 1\n            elif a[j] == b:\n                j -= 1\n            else:\n                ans2 = 0\n                break\n        else:\n            i += 1\n            j -= 1\n    if ans1 == 1 or ans2 == 1:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    left = 0\n    right = n - 1\n    flag = 0\n    x = None\n    while left < right:\n        if flag:\n            break\n        if arr[left] == arr[right]:\n            left += 1\n            right -= 1\n        elif x:\n            if x == arr[left]:\n                left += 1\n            elif x == arr[right]:\n                right -= 1\n            else:\n                flag = 1\n                break\n        else:\n            x = arr[left]\n            left += 1\n    l = 0\n    r = n - 1\n    f = 0\n    y = None\n    while l < r:\n        if f:\n            break\n        if arr[l] == arr[r]:\n            l += 1\n            r -= 1\n        elif y:\n            if y == arr[l]:\n                l += 1\n            elif y == arr[r]:\n                r -= 1\n            else:\n                f = 1\n                break\n        else:\n            y = arr[r]\n            r -= 1\n    if f * flag:\n        print('NO')\n    else:\n        print('YES')", "remove = lambda x, a: [i for i in a if i != x]\nfor _ in range(int(input())):\n    (n, ans) = (int(input()), 0)\n    l = list(map(int, input().split()))\n    for i in range(len(l)):\n        if l[i] != l[n - 1 - i]:\n            if (z := remove(l[i], l)) != z[::-1] and (z := remove(l[n - 1 - i], l)) != z[::-1]:\n                ans = 1\n            break\n    print('YNEOS'[ans::2])", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a == a[::-1]:\n        print('YES')\n    else:\n        for i in range(n // 2):\n            if a[i] != a[n - 1 - i]:\n                (t, b) = (a[i], a[n - 1 - i])\n                break\n        for j in [t, b]:\n            p = [i for i in a if i != j]\n            if p == p[::-1]:\n                print('YES')\n                break\n        else:\n            print('NO')", "def is_kalindrome(a, x):\n    i = 0\n    j = len(a) - 1\n    orig_x = x\n    if j <= 0:\n        return True\n    while i < j:\n        while x and i < j and (a[i] == x):\n            i += 1\n        while x and i < j and (a[j] == x):\n            j -= 1\n        if a[i] == a[j]:\n            i += 1\n            j -= 1\n            continue\n        else:\n            orig_i = i\n            if not x:\n                x = a[i]\n            while x and i < j and (a[i] == x):\n                i += 1\n            if i != orig_i and is_kalindrome(a[i:j + 1], x):\n                return True\n            x = orig_x\n            if not x:\n                x = a[j]\n            i = orig_i\n            orig_j = j\n            while x and i < j and (a[j] == x):\n                j -= 1\n            if j != orig_j and is_kalindrome(a[i:j + 1], x):\n                return True\n            return False\n    return True\n\ndef main():\n    no_of_test_cases = int(input().strip())\n    for i in range(no_of_test_cases):\n        n = int(input().strip())\n        a = list(map(int, input().strip().split()))\n        if is_kalindrome(a, None):\n            print('YES')\n        else:\n            print('NO')\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a == a[::-1]:\n        print('YES')\n        continue\n    for i in range(n // 2):\n        if a[i] != a[n - i - 1]:\n            (x, y) = (a[i], a[n - i - 1])\n            break\n    a1 = [i for i in a if i != x]\n    a2 = [i for i in a if i != y]\n    if a1 == a1[::-1] or a2 == a2[::-1]:\n        print('YES')\n        continue\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    i = 0\n    while arr[i] == arr[n - i - 1]:\n        i += 1\n        if i == n:\n            break\n    if i == n:\n        print('YES')\n        continue\n    p = arr[i]\n    l = i + 1\n    r = n - i - 1\n    while l < r:\n        if arr[l] == arr[r]:\n            l += 1\n            r -= 1\n        elif arr[l] == p:\n            l += 1\n        elif arr[r] == p:\n            r -= 1\n        else:\n            break\n    if l >= r:\n        print('YES')\n        continue\n    p = arr[n - i - 1]\n    l = i\n    r = n - i - 2\n    while l < r:\n        if arr[l] == arr[r]:\n            l += 1\n            r -= 1\n        elif arr[l] == p:\n            l += 1\n        elif arr[r] == p:\n            r -= 1\n        else:\n            break\n    if l >= r:\n        print('YES')\n        continue\n    print('NO')", "def works(a, k):\n    s = 0\n    e = len(a) - 1\n    while s < e:\n        if arr[s] == arr[e]:\n            s += 1\n            e -= 1\n        elif arr[s] == k:\n            s += 1\n        elif arr[e] == k:\n            e -= 1\n        else:\n            return False\n    return True\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if arr == arr[::-1]:\n        print('YES')\n        continue\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] == arr[j]:\n            i += 1\n            j -= 1\n        else:\n            if works(arr, arr[i]) or works(arr, arr[j]):\n                print('YES')\n            else:\n                print('NO')\n            break", "def palindrome(a, n, num):\n    left = 0\n    right = n - 1\n    while left < right:\n        while left <= right and a[left] == num:\n            left += 1\n        while right >= left and a[right] == num:\n            right -= 1\n        if a[left] != a[right]:\n            return False\n        else:\n            left += 1\n            right -= 1\n    return True\n\ndef Kalindrome_Array(a, n):\n    if n == 1 or n == 2:\n        return 'YES'\n    l = 0\n    r = n - 1\n    while l < r:\n        if a[l] != a[r]:\n            if palindrome(a, n, a[l]) or palindrome(a, n, a[r]):\n                return 'YES'\n            else:\n                return 'NO'\n        else:\n            l += 1\n            r -= 1\n    return 'YES'\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(Kalindrome_Array(a, n))", "import sys\n\ndef isPalindrome(arr):\n    if len(arr) % 2 == 0:\n        r = len(arr) // 2\n    else:\n        r = len(arr) // 2 + 1\n    for i in range(r):\n        if arr[i] != arr[len(arr) - 1 - i]:\n            return (False, arr[i], arr[len(arr) - 1 - i])\n    return (True, None, None)\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    arr = [int(x) for x in sys.stdin.readline().split()]\n    (res, x1, x2) = isPalindrome(arr)\n    if not res:\n        list_1 = [x for x in arr if x != x1]\n        (res, _, _) = isPalindrome(list_1)\n    if not res:\n        list_2 = [x for x in arr if x != x2]\n        (res, _, _) = isPalindrome(list_2)\n    print('YES' if res else 'NO')", "def isPalin(x):\n    if x == x[::-1]:\n        return True\n    return False\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    if isPalin(a):\n        print('YES')\n        t -= 1\n        continue\n    for i in range(n // 2):\n        if a[i] != a[n - i - 1]:\n            k1 = a[i]\n            k2 = a[n - i - 1]\n            break\n    net1 = [i for i in a if i != k1]\n    net2 = [i for i in a if i != k2]\n    if isPalin(net1) or isPalin(net2):\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "for j in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    el = -1\n    ell = -1\n    dis = n // 2\n    if n % 2 == 1:\n        dis += 1\n    for i in range(dis):\n        if arr[i] != arr[n - i - 1]:\n            el = arr[n - i - 1]\n            ell = arr[i]\n            break\n    (a, b) = ([], [])\n    for i in arr:\n        if el != i:\n            a.append(i)\n        if ell != i:\n            b.append(i)\n    if a == a[::-1] or b == b[::-1]:\n        print('YES')\n        continue\n    print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    flag = 1\n    (i, j, k) = (0, n - 1, 0)\n    while i < j:\n        if l[i] == l[j]:\n            pass\n        elif k == 0:\n            k = l[j]\n            j -= 1\n            continue\n        elif k == l[j]:\n            j -= 1\n            continue\n        elif k == l[i]:\n            i += 1\n            continue\n        else:\n            flag = 0\n            break\n        i += 1\n        j -= 1\n    f2 = 1\n    (i, j, k) = (0, n - 1, 0)\n    while i < j:\n        if l[i] == l[j]:\n            pass\n        elif k == 0:\n            k = l[i]\n            i += 1\n            continue\n        elif k == l[i]:\n            i += 1\n            continue\n        elif k == l[j]:\n            j -= 1\n            continue\n        else:\n            f2 = 0\n            break\n        i += 1\n        j -= 1\n    if not (flag or f2):\n        print('NO')\n    else:\n        print('YES')", "for i in range(int(input())):\n    n = int(input())\n    (x, y, cnt) = (0, 0, 0)\n    a = [int(j) for j in input().split()]\n    (start, stop) = (0, n - 1)\n    while start <= stop:\n        if a[start] != a[stop] and cnt == 0:\n            y = stop\n            stop -= 1\n            cnt += 1\n            continue\n        if a[start] == a[stop]:\n            start += 1\n            stop -= 1\n        elif a[start] == a[y]:\n            start += 1\n        elif a[stop] == a[y]:\n            stop -= 1\n        else:\n            break\n    else:\n        print('YES')\n        continue\n    (start, stop, cnt) = (0, n - 1, 0)\n    while start <= stop:\n        if a[start] != a[stop] and cnt == 0:\n            x = start\n            start += 1\n            cnt += 1\n            continue\n        if a[start] == a[stop]:\n            start += 1\n            stop -= 1\n        elif a[start] == a[x]:\n            start += 1\n        elif a[stop] == a[x]:\n            stop -= 1\n        else:\n            break\n    else:\n        print('YES')\n        continue\n    if start <= stop:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ns = list(map(int, input().split()))\n    nums = []\n    for i in range(n // 2):\n        (l, r) = (ns[i], ns[-1 - i])\n        if l == r:\n            continue\n        nums = [l, r]\n        break\n    if not nums:\n        print('YES')\n        continue\n    for num in nums:\n        (li, ri) = (0, n - 1)\n        ok = True\n        while li < ri:\n            (l, r) = (ns[li], ns[ri])\n            if l == r:\n                li += 1\n                ri -= 1\n                continue\n            if l == num:\n                li += 1\n            elif r == num:\n                ri -= 1\n            else:\n                ok = False\n                break\n        if ok:\n            break\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "def ch(a, n, z):\n    l = 1\n    r = n\n    while l <= r:\n        if z[l] == z[r]:\n            l += 1\n            r -= 1\n        elif z[l] != a and z[r] != a:\n            return False\n        elif z[l] == a:\n            l += 1\n        elif z[r] == a:\n            r -= 1\n    return True\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    (a, b) = (0, 0)\n    z = list(map(int, input().split()))\n    z.insert(0, 0)\n    for j in range(1, n // 2 + 1):\n        if z[j] != z[n + 1 - j]:\n            a = z[j]\n            b = z[n + 1 - j]\n            break\n    if ch(a, n, z) or ch(b, n, z):\n        print('YES')\n    else:\n        print('NO')\n    z = []", "for i in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    if n <= 1:\n        print('YES')\n    elif n == 3:\n        if len(set(x)) <= 2:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        ans = 'YES'\n        temp = []\n        for k in range(n // 2):\n            if x[k] != x[n - 1 - k]:\n                ans = 'NO'\n                temp += [x[k], x[n - 1 - k]]\n                break\n        if ans == 'NO':\n            for j in range(2):\n                l = k\n                r = n - 1 - k\n                while l < r:\n                    if x[l] != x[r]:\n                        if x[l] == temp[j]:\n                            l += 1\n                        elif x[r] == temp[j]:\n                            r -= 1\n                        else:\n                            break\n                    elif x[l] == x[r]:\n                        l += 1\n                        r -= 1\n                    if l >= r:\n                        ans = 'YES'\n                        break\n                        break\n        print(ans)", "t = int(input())\n\ndef palindrome(val):\n    for (i, v) in enumerate(val[:len(val) // 2]):\n        opp = val[len(val) - 1 - i]\n        if v != opp:\n            return False\n    return True\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if palindrome(arr) or n == 1:\n        print('YES')\n        continue\n    for (i, v) in enumerate(arr):\n        opp = arr[n - 1 - i]\n        if v != opp:\n            first = [x for x in arr if x != v]\n            second = [x for x in arr if x != opp]\n            if palindrome(first) or palindrome(second):\n                print('YES')\n            else:\n                print('NO')\n            break", "def check(arr, x):\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] == x:\n            i += 1\n        elif arr[j] == x:\n            j -= 1\n        elif arr[i] != arr[j]:\n            return 0\n        else:\n            i += 1\n            j -= 1\n    return 1\ntestCase = int(input())\nwhile testCase != 0:\n    testCase -= 1\n    n = int(input())\n    arr = [int(x) for x in input().split(' ')]\n    flag = 1\n    for i in range(0, n - 1):\n        if arr[i] != arr[n - 1 - i]:\n            flag = check(arr, arr[i]) or check(arr, arr[n - 1 - i])\n            break\n    print('YES' if flag else 'NO')", "from typing import Iterable\n\ndef filter_list(a: Iterable[int], remove_value: int) -> Iterable[int]:\n    return [i for i in a if i != remove_value]\n\ndef is_palindrom(a: Iterable[int]) -> bool:\n    for i in range((len(a) + 1) // 2):\n        if a[i] != a[-i - 1]:\n            return False\n    return True\n\ndef Solution() -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range((n + 1) // 2):\n        if a[i] != a[-i - 1]:\n            if is_palindrom(filter_list(a, a[i])) or is_palindrom(filter_list(a, a[-i - 1])):\n                return 'YES'\n            else:\n                return 'NO'\n    return 'YES'\nt = int(input())\nfor i in range(t):\n    print(Solution())", "def check(x):\n    a = []\n    for i in range(n):\n        if l[i] != x:\n            a.append(l[i])\n    if a[:] != a[::-1]:\n        return False\n    else:\n        return True\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 0\n    ok = 1\n    for i in range(n):\n        if l[i] != l[n - i - 1]:\n            ok = 0\n            if check(l[i]):\n                ok = 1\n            if check(l[n - i - 1]):\n                ok = 1\n            break\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\n\ndef calc():\n    n = int(input())\n    l = list(map(int, input().split()))\n    start = 0\n    end = n - 1\n    for j in range(n // 2):\n        if l[start] == l[end]:\n            start += 1\n            end -= 1\n        else:\n            temp1 = list(filter(lambda x: x != l[start], l))\n            temp2 = list(filter(lambda x: x != l[end], l))\n            if temp1 == temp1[::-1] or temp2 == temp2[::-1]:\n                return 'YES'\n            else:\n                return 'NO'\n    return 'YES'\nfor i in range(t):\n    print(calc())", "def check(num, nums):\n    b = []\n    for i in range(len(nums)):\n        if nums[i] != num:\n            b.append(nums[i])\n    if b == b[::-1]:\n        return True\n    else:\n        return False\nfor _ in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split(' ')))\n    flag = True\n    for i in range(n):\n        if nums[i] != nums[n - 1 - i]:\n            if check(nums[i], nums) or check(nums[n - i - 1], nums):\n                flag = True\n            else:\n                flag = False\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    vals = None\n    for i in range(n):\n        if arr[i] != arr[-i - 1]:\n            vals = (arr[i], arr[-i - 1])\n            break\n    else:\n        print('YES')\n        continue\n    arr2 = [x for x in arr if x != vals[0]]\n    arr = [x for x in arr if x != vals[-1]]\n    if arr2 == arr2[::-1] or arr == arr[::-1]:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    si = 0\n    sf = len(a) - 1\n    num = -1\n    check = True\n    while si < sf and check:\n        if a[si] != a[sf] and num == -1:\n            num = a[sf]\n            sf -= 1\n        elif a[si] != a[sf]:\n            if a[si] == num:\n                si += 1\n            elif a[sf] == num:\n                sf -= 1\n            else:\n                check = False\n        else:\n            si += 1\n            sf -= 1\n    if not check:\n        check = True\n        si = 0\n        sf = len(a) - 1\n        num = -1\n        while si < sf and check:\n            if a[si] != a[sf] and num == -1:\n                num = a[si]\n                si += 1\n            elif a[si] != a[sf]:\n                if a[si] == num:\n                    si += 1\n                elif a[sf] == num:\n                    sf -= 1\n                else:\n                    check = False\n            else:\n                si += 1\n                sf -= 1\n    if not check:\n        print('NO')\n    else:\n        print('YES')", "import collections\n\ndef isPalin(x):\n    if x == x[::-1]:\n        return True\n    return False\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    if isPalin(a):\n        print('YES')\n        t -= 1\n        continue\n    for i in range(n // 2):\n        if a[i] != a[n - i - 1]:\n            k1 = a[i]\n            k2 = a[n - i - 1]\n            break\n    net1 = [i for i in a if i != k1]\n    net2 = [i for i in a if i != k2]\n    if isPalin(net1) or isPalin(net2):\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "import io, os, sys\nt = int(input())\n\ndef GO_LIFE():\n    n = int(input())\n    d = list(map(int, input().split()))\n    x = -1\n    ans = 0\n    n1 = n\n    d1 = []\n    for i in d:\n        d1 += [i]\n    i = 0\n    K = 1\n    k = 0\n    j = 0\n    while i < n // 2:\n        if d[i + k] != d[-(i + K)]:\n            if x == -1:\n                x = d[i + k]\n                y = d[-(i + K)]\n                j = i\n            elif d[i + k] != x and d[-(i + K)] != x:\n                ans += 1\n                break\n            if d[i + k] != x:\n                K += 1\n            else:\n                k += 1\n            n -= 1\n        else:\n            i += 1\n    K = 1\n    k = 0\n    while j < n1 // 2:\n        if d1[j + k] != d1[-(j + K)]:\n            if x == -1:\n                x = d1[j + k]\n                y = d1[-(j + K)]\n            elif d1[j + k] != y and d1[-(j + K)] != y:\n                ans += 1\n                break\n            if d1[j + k] != y:\n                K += 1\n            else:\n                k += 1\n            n1 -= 1\n        else:\n            j += 1\n    if ans == 2:\n        sys.stdout.write('NO\\n')\n    else:\n        sys.stdout.write('YES\\n')\nwhile t > 0:\n    GO_LIFE()\n    t -= 1", "def checkPalindrome(arr):\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = 'YES'\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            break\n        left += 1\n        right -= 1\n    firstArr = []\n    secondArr = []\n    for num in arr:\n        if num != arr[left]:\n            firstArr.append(num)\n        if num != arr[right]:\n            secondArr.append(num)\n    if checkPalindrome(firstArr) or checkPalindrome(secondArr):\n        return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    print(solve())", "for iii in range(int(input())):\n    n = int(input())\n    q = list(map(int, input().split()))\n    low = 0\n    high = n - 1\n    flag = True\n    q1 = 0\n    q2 = 0\n    while low <= high:\n        if q[low] != q[high]:\n            q1 = q[low]\n            q2 = q[high]\n            flag = False\n            break\n        low += 1\n        high -= 1\n    if flag:\n        print('YES')\n        continue\n    low = 0\n    high = n - 1\n    flag = True\n    while low <= high and flag:\n        if q[low] == q1:\n            low += 1\n        elif q[high] == q1:\n            high -= 1\n        elif q[low] != q[high]:\n            flag = False\n        else:\n            low += 1\n            high -= 1\n    if flag:\n        print('YES')\n        continue\n    low = 0\n    high = n - 1\n    flag = True\n    while low <= high and flag:\n        if q[low] == q2:\n            low += 1\n        elif q[high] == q2:\n            high -= 1\n        else:\n            if q[low] != q[high]:\n                flag = False\n            low += 1\n            high -= 1\n    if flag:\n        print('YES')\n        continue\n    print('NO')", "n = int(input())\nfor j in range(n):\n    m = int(input())\n    x = -1\n    y = -1\n    a = list(map(int, input().split()))\n    for i in range(m // 2 + 1):\n        if a[i] != a[m - 1 - i]:\n            x = a[i]\n            y = a[m - 1 - i]\n            break\n    if x == -1:\n        print('YES')\n        continue\n    solved = False\n    for num in [x, y]:\n        t = []\n        for i in a:\n            if i != num:\n                t.append(i)\n        check = True\n        for i in range(len(t) // 2 + 1):\n            if t[i] != t[-i - 1]:\n                check = False\n                break\n        if check:\n            solved = True\n            break\n    if solved:\n        print('YES')\n    else:\n        print('NO')", "for j in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    a1 = -1\n    a2 = -1\n    dis = n // 2\n    if n % 2 == 1:\n        dis += 1\n    for i in range(dis):\n        if arr[i] != arr[n - i - 1]:\n            a1 = arr[n - i - 1]\n            a2 = arr[i]\n            break\n    (crr, brr) = ([], [])\n    for i in arr:\n        if a1 != i:\n            crr.append(i)\n        if a2 != i:\n            brr.append(i)\n    if crr == crr[::-1] or brr == brr[::-1]:\n        print('YES')\n        continue\n    print('NO')", "import sys\nfrom collections import deque\nfrom collections import Counter\nimport heapq\nimport bisect\nimport copy\nMOD = 1000000007\nNO = lambda : print('NO')\nYES = lambda : print('YES')\n_1 = lambda : print(-1)\nari = lambda : [int(_) for _ in input().split()]\ncin = lambda : int(input())\ncis = lambda : input()\nshow = lambda x: print(x)\nfast = lambda : sys.stdin.readline()\ntest_case = 1\ntest_case = int(input())\nsys.setrecursionlimit(10 ** 6)\n\ndef ans():\n    n = cin()\n    arr = ari()\n    ans = True\n\n    def docheck(ele):\n        nonlocal ans\n        st = []\n        for i in arr:\n            if i != ele:\n                st.append(i)\n        if st == st[::-1]:\n            ans = True\n    for i in range(len(arr)):\n        j = n - (i + 1)\n        if arr[i] != arr[j]:\n            value = arr[j]\n            newval = arr[i]\n            ans = False\n            docheck(value)\n            docheck(newval)\n            break\n    if ans:\n        YES()\n    else:\n        NO()\n    return\nfor _ in range(test_case):\n    ans()", "def check(arr, v, n):\n    new = []\n    for i in range(n):\n        if arr[i] == v:\n            continue\n        new.append(arr[i])\n    for j in range(len(new) // 2):\n        if new[j] != new[len(new) - j - 1]:\n            return False\n    return True\nfor _ in range(int(input().strip())):\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split()))\n    ans = []\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            ans.append(arr[i])\n            ans.append(arr[n - i - 1])\n            break\n    if len(ans) == 0:\n        print('YES')\n        continue\n    flag = 0\n    for i in ans:\n        ans = check(arr, i, n)\n        if ans == True:\n            flag = 1\n            break\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')", "def palindrome(arr, a):\n    m = 0\n    temp = []\n    for i in arr:\n        if i != a:\n            temp.append(i)\n            m += 1\n    for i in range(m // 2):\n        if temp[i] != temp[m - i - 1]:\n            return False\n    return True\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (a, b) = (0, 0)\n    ans = True\n    if n <= 2:\n        print('YES')\n    else:\n        for i in range(n // 2):\n            if arr[i] != arr[n - i - 1]:\n                ans = False\n                if palindrome(arr, arr[i]) or palindrome(arr, arr[n - i - 1]):\n                    print('YES')\n                else:\n                    print('NO')\n                break\n        if ans:\n            print('YES')", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    i = 0\n    j = len(arr) - 1\n    if arr == arr[::-1]:\n        print('YES')\n        continue\n    while arr[i] == arr[j]:\n        i += 1\n        j -= 1\n    b = []\n    for k in arr:\n        if k == arr[i]:\n            continue\n        else:\n            b.append(k)\n    if b == b[::-1]:\n        print('YES')\n        continue\n    b = []\n    for k in arr:\n        if k == arr[j]:\n            continue\n        else:\n            b.append(k)\n    if b == b[::-1]:\n        print('YES')\n        continue\n    print('NO')", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    f = True\n    a = 0\n    b = 0\n    for i in range(n // 2):\n        if l[i] != l[n - i - 1]:\n            f = False\n            a = l[i]\n            b = l[n - i - 1]\n            break\n    if f:\n        print('YES')\n    else:\n        ans1 = True\n        i = 0\n        j = n - i - 1\n        while i <= j:\n            if l[i] == l[j]:\n                j -= 1\n                i += 1\n            elif l[i] != l[j] and l[i] == a:\n                i += 1\n            elif l[i] != l[j] and l[j] == a:\n                j -= 1\n            else:\n                ans1 = False\n                break\n        ans2 = True\n        i = 0\n        j = n - i - 1\n        while i <= j:\n            if l[i] == l[j]:\n                j -= 1\n                i += 1\n            elif l[i] != l[j] and l[i] == b:\n                i += 1\n            elif l[i] != l[j] and l[j] == b:\n                j -= 1\n            else:\n                ans2 = False\n                break\n        if ans1 or ans2:\n            print('YES')\n        else:\n            print('NO')", "def res(arr, N):\n    p1 = 0\n    p2 = N - 1\n    ind1 = ind2 = -1\n    while p1 < p2:\n        if arr[p1] != arr[p2]:\n            ind1 = p1\n            ind2 = p2\n            break\n        else:\n            p1 += 1\n            p2 -= 1\n    else:\n        print('YES')\n        return\n    l1 = [arr[ind1], arr[ind2]]\n    for i in l1:\n        stack = []\n        for j in range(N):\n            if arr[j] != i:\n                stack.append(arr[j])\n        p11 = 0\n        p22 = len(stack) - 1\n        while p11 < p22:\n            if stack[p11] != stack[p22]:\n                break\n            else:\n                p11 += 1\n                p22 -= 1\n        else:\n            print('YES')\n            return\n    print('NO')\nfor _ in range(int(input())):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    res(arr, N)"]