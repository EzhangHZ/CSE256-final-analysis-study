["from sys import stdin\n\ndef read_input():\n    n = int(stdin.readline())\n    return (n,)\n\ndef solve(n):\n    answer = f'{-n + 1} {n}'\n    return answer\n\ndef main():\n    t = int(stdin.readline())\n    for _ in range(t):\n        input = read_input()\n        answer = solve(*input)\n        print(answer)\nmain()", "import sys\nreadline = sys.stdin.readline\nT = int(readline())\nfor _ in range(T):\n    N = int(readline())\n    print(-N + 1, N)", "m = int(input())\nl = []\nfor i in range(m):\n    a = int(input())\n    if a - 1 == 0:\n        l.append(f'{a - 1} {a}')\n    else:\n        l.append(f'-{a - 1} {a}')\nfor i in l:\n    print(i)", "from sys import stdin\ninput = stdin.readline\nimport math\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    (l, r) = (1 - n, n)\n    print(l, r)", "t = int(input())\nl = []\nfor i in range(t):\n    n = int(input())\n    l.append([-n + 1, n])\nfor j in l:\n    print(*j)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    print(-1 * (n - 1), n)", "t = int(input())\nd = {}\nfor i in range(t):\n    n = int(input())\n    d[i] = str(-(n - 1)) + ' ' + str(n)\nfor i in range(t):\n    print(d[i])", "for s in [*open(0)][1:]:\n    print(-(int(s) - 1), int(s))", "noOfTestCase = int(input())\nansList = []\nfor testCase in range(noOfTestCase):\n    n = int(input())\n    ansList.append([1 - n, n])\nfor ans in ansList:\n    print(*ans)", "def consecutiveSum(num):\n    if num == 0:\n        print(0, 0)\n    else:\n        print(-(num - 1), num)\ntestcases = int(input())\nres = []\nfor _ in range(testcases):\n    res.append(int(input()))\nfor i in res:\n    consecutiveSum(i)", "def consecutiveSum(num):\n    if num == 0:\n        print(0, 0)\n    else:\n        print(-(num - 1), num)\ntestcases = int(input())\nres = []\nfor _ in range(testcases):\n    res.append(int(input()))\nfor i in res:\n    consecutiveSum(i)", "num_of_test_cases = int(input())\narr = []\nfor i in range(num_of_test_cases):\n    arr.append(input())\nfor num in arr:\n    print(str(-(int(num) - 1)) + ' ' + str(int(num)))", "t = int(input())\na = []\nfor i in range(t):\n    i = int(input())\n    a.append(i)\nfor i in a:\n    print(-1 * i + 1, i)", "n = []\nfor i in range(int(input())):\n    n.append(int(input()))\nfor k in n:\n    print(str(-1 * (k - 1)) + ' ' + str(k))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    return (-(n - 1), n)\nfor _ in range(int(input())):\n    print(*solve())", "t = int(input())\nr = []\nfor i in range(t):\n    n = int(input())\n    p = []\n    p.append(str(-(n - 1)))\n    p.append(str(n))\n    q = ' '.join(map(str, p))\n    r.append(q)\nfor j in range(len(r)):\n    print(r[j])", "import sys\ninp = sys.stdin.readline\nfor i in range(int(inp())):\n    n = int(inp())\n    if n == 1:\n        print('0 1')\n    else:\n        print(-n + 1, n)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\nt = inp()\nwhile t > 0:\n    n = inp()\n    print(-n + 1, n)\n    t = t - 1", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    print(1 - n, n)", "t = int(input())\nnums = []\nfor i in range(t):\n    num = int(input())\n    nums.append(num)\nfor num in nums:\n    print(-num + 1, num)", "n = int(input())\nnList = []\nfor _ in range(n):\n    nList.append(int(input()))\nfor i in range(n):\n    r = -(nList[i] - 1)\n    l = nList[i]\n    print(r, l)", "n = int(input())\nl = list()\nfor i in range(n):\n    l.append(int(input()))\nfor j in l:\n    print(1 - j, j)", "t = int(input())\nif t < 1:\n    print('\u041d\u0435\u0432\u0435\u0440\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 t')\n    raise SystemExit\nres = []\nfor i in range(t):\n    n = int(input())\n    res.append([-(n - 1), n])\nfor r in res:\n    print(r[0], r[1])", "t = int(input())\nn = []\nfor i in range(t):\n    m = int(input())\n    n.append(m)\nfor j in n:\n    l = -(j - 1)\n    r = j\n    print(l, j)", "num_of_test_cases = int(input())\narr = []\nfor i in range(num_of_test_cases):\n    arr.append(input())\nfor num in arr:\n    print(str(-(int(num) - 1)) + ' ' + str(int(num)))", "n = int(input())\nfor j in [int(input()) for i in range(n)]:\n    print(f'{-(j - 1)} {j}')", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    print(-(n - 1), n)", "for s in [*open(0)][1:]:\n    print(-(int(s) - 1), int(s))", "import sys\ninput = iter(sys.stdin.read().splitlines()).__next__\nTC = int(input())\nfor tc in range(TC):\n    N = int(input())\n    l = -(N - 1)\n    r = N\n    print(l, r)", "from sys import stdin\ninput = lambda : stdin.readline().strip()\nlin = lambda : list(map(int, input().split()))\niin = lambda : int(input())\nmain = lambda : map(int, input().split())\nfrom math import ceil, sqrt, factorial, log\nfrom collections import deque\nfrom bisect import bisect_left\nmod = 998244353\nmod = 1000000007\n\ndef solve(we):\n    n = iin()\n    print(-(n - 1), n)\nqwe = 1\nqwe = iin()\nfor _ in range(qwe):\n    solve(_ + 1)", "def getlistint():\n    return list(map(int, stdin.readline().split()))\n\ndef getmapint():\n    return map(int, stdin.readline().split())\n\ndef getliststr():\n    return list(stdin.readline().split())\n\ndef getint():\n    return int(stdin.readline().strip())\n\ndef getstr():\n    return stdin.readline().strip()\n\ndef pr(s):\n    stdout.write(str(s) + '\\n')\n\ndef prlist(l):\n    stdout.write(' '.join(list(map(str, l))) + '\\n')\nfrom sys import stdin, stdout\nfrom math import sqrt\nfor _ in range(getint()):\n    n = getint()\n    pr(str(-n + 1) + ' ' + str(n))", "n = int(input())\na = []\nfor i in range(n):\n    x = int(input())\n    b = -x + 1\n    a.append((b, x))\nfor i in range(0, n):\n    print(a[i][0], a[i][1])", "for n in [*map(int, open(0))][1:]:\n    print(1 - n, n)", "t = input()\nt = int(t)\ni = 0\ntem = []\nwhile t > 0:\n    n = input()\n    n = int(n)\n    x = -(n - 1)\n    tem.append(x)\n    tem.append(n)\n    t -= 1\nlent = len(tem)\nwhile lent > 0:\n    print(f'{tem[i]} {tem[i + 1]}')\n    i = i + 2\n    lent = lent - 2", "a = int(input())\nl = []\nfor i in range(a):\n    b = int(input())\n    l += [b]\nfor i in range(a):\n    print(1 - l[i], l[i])", "for s in [*map(int, open(0))][1:]:\n    print(1 - s, s)", "t = int(input())\nn_vals = []\nans = {}\nfor a1 in range(t):\n    nex = int(input())\n    n_vals.append(nex)\nfor a2 in n_vals:\n    print(int(-a2 + 1), ' ', int(a2))", "test_count = int(input())\nresults = []\nfor test_round in range(test_count):\n    n = int(input())\n    results.append((-1 * (n - 1), n))\nfor (result1, result2) in results:\n    print(result1, result2)", "from sys import stdin, stdout\n\ndef main():\n    n = int(stdin.readline())\n    p = []\n    for i in range(n):\n        p.append([int(x) for x in stdin.readline().split()])\n    for i in p:\n        r = -1 * (i[0] - 1)\n        l = i[0]\n        print(r, ' ', l)\nmain()", "x = int(input())\ncases = []\nfor i in range(0, x):\n    cases.append(int(input()))\nfor i in range(0, x):\n    print(str(-cases[i] + 1) + ' ' + str(cases[i]))", "test = []\nt = int(input())\nfor i in range(t):\n    test.append(int(input()))\nfor i in range(t):\n    print(-1 * (test[i] - 1), test[i])", "t = int(input())\nans = []\nfor i in range(t):\n    n = int(input())\n    r = n\n    l = -n + 1\n    ans += [[l, r]]\nfor i in range(t):\n    print(ans[i][0], ans[i][1])", "t = int(input())\nnumeri = []\nwhile t != 0:\n    n = int(input())\n    a = 0 - n + 1\n    A = str(a) + ' ' + str(n)\n    numeri.append(A)\n    t = t - 1\nfor i in numeri:\n    print(i)", "w = int(input())\nl = []\nfor i in range(w):\n    k = int(input())\n    l.append(k)\nfor i in l:\n    print(-(i - 1), i)", "import sys\ninput = sys.stdin.readline\nrep = int(input())\nfor _ in range(rep):\n    n = int(input())\n    print(-(n - 1), n)", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    print(-(n - 1), n)", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\ninp_vars_int = lambda : map(int, input().split())\ninp_list_int = lambda : list(map(int, input().split()))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(1 - n, n)", "n = int(input())\na = []\nfor i in range(n):\n    a.append(int(input()))\nfor i in a:\n    print('{} {}'.format(-i + 1, i))", "for _ in range(int(input())):\n    n = int(input())\n    print(f'{1 - n} {n}')", "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        if n == 1:\n            print(0, 1)\n            continue\n        print(-(n - 1), n)\nmain()", "for i in range(int(input())):\n    n = int(input())\n    print(-n + 1, n)", "def summ(a):\n    return [-a + 1, a]\n\ndef pri(array):\n    print(array[0], ' ', array[1])\ntestcases = int(input())\nque = []\nfor i in range(testcases):\n    p = input()\n    que.append(p)\nfor i in range(testcases):\n    pri(summ(int(que[i])))", "def solution():\n    for t in range(int(input())):\n        n = int(input())\n        (l, r) = (0, 0)\n        l = -(n - 1)\n        r = n\n        print('{0:} {1:}'.format(l, r))\n    return\nsolution()", "import math\nimport sys\nimport itertools\nimport fractions\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\nfor t in wtf[1:]:\n    n = int(t)\n    print(-(n - 1), n)", "def main():\n    T = int(input())\n    for k in range(T):\n        n = int(input())\n        print(f'{-n + 1} {n}')\nmain()", "def solve():\n    n = int(input())\n    return '{0} {1}'.format(1 - n, n)\nt = input()\nfor tt in range(int(t)):\n    print(solve())", "for i in range(int(input())):\n    a = int(input())\n    print(-a + 1, a)", "t = int(input())\n\ndef q(n):\n    return str(-(n - 1)) + ' ' + str(n)\nfor i in range(t):\n    n = int(input())\n    print(q(n))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(-n + 1, n)", "for i in range(int(input())):\n    n = int(input())\n    print(-n + 1, n)", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    print(-n + 1, n)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(-n + 1, n)", "for _ in range(int(input())):\n    n = int(input())\n    print(f'{-(n - 1)} {n}')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(-(n - 1), n)", "Input = '\\n7\\n1\\n2\\n3\\n6\\n100\\n25\\n3000000000000\\n'[1:-1].split('\\n')\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(-(n - 1), n)", "test = int(input())\nwhile test:\n    n = int(input())\n    print(1 - n, n)\n    test -= 1", "import bisect\nimport collections\nimport copy\nimport functools\nimport itertools\nimport math\nimport operator\nimport sys\nimport os\nfrom heapq import heappop, heappush\nfrom typing import Callable, Generic, Iterable, List, Tuple, TypeVar, Union\nsys.setrecursionlimit(100000)\nis_local = 'TERM_PROGRAM' in os.environ\ninput = sys.stdin.readline\nINF = float('inf')\nMOD = 998244353\n\ndef debug(*args, **kwargs):\n    if is_local:\n        print(*args, **kwargs)\n\ndef I():\n    return input().rstrip()\n\ndef IS():\n    return input().split()\n\ndef II():\n    return int(input())\n\ndef IIS():\n    return map(int, input().split())\n\ndef LIIS():\n    return list(map(int, input().split()))\n\ndef main():\n    q = II()\n    for _ in range(q):\n        a = II()\n        (l, r) = solve(a)\n        print(f'{l} {r}')\n\ndef solve(a):\n    return (-(a - 1), a)\nmain()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(-(n - 1), n)", "for i in range(int(input())):\n    n = int(input())\n    print(-(n - 1), n)"]