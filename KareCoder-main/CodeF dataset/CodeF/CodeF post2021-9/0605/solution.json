["(n, m) = map(int, input().split())\nif m == 1:\n    print(n - 1)\n    exit()\nM = 998244353\ntot = (pow(m, n + 1, M) - 1) * pow(m - 1, -1, M) - 1\np = set([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31])\nfac = [1, 1]\nfor i in range(2, 37):\n    fac += (fac[-1] * (i if i in p else 1),)\n(i, res, temp) = (2, m, m)\nwhile i <= min(n, 36) and fac[i] <= m:\n    temp = m // fac[i] * temp % M\n    res = (res + temp) % M\n    i += 1\nprint((tot - res) % M)", "(n, m) = map(int, input().split())\nif m == 1:\n    print(n - 1)\n    exit()\nM = 998244353\ntot = (pow(m, n + 1, M) - 1) * pow(m - 1, -1, M) - 1\np = set([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37])\nfac = [1, 1]\nfor i in range(2, 38):\n    fac += (fac[-1] * (i if i in p else 1),)\n(i, res, temp) = (2, m, m)\nwhile i <= min(n, 37) and fac[i] <= m:\n    temp = m // fac[i] * temp % M\n    res = (res + temp) % M\n    i += 1\nprint((tot - res) % M)", "from typing import List\nfrom math import sqrt\nMOD = 998244353\n\ndef sieve(n) -> List[bool]:\n    is_prime = [True] * (n + 1)\n    is_prime[0] = is_prime[1] = False\n    for i in range(4, n + 1, 2):\n        is_prime[i] = False\n    for i in range(3, int(sqrt(n)) + 2, 2):\n        if is_prime[i]:\n            for j in range(i * i, n, 2 * i):\n                is_prime[j] = False\n    return is_prime\n\ndef main():\n    (n, m) = map(int, input().split())\n    is_prime = sieve(n)\n    unambiguous = 0\n    last = 1\n    primes_acc = 1\n    for i in range(1, n + 1):\n        if primes_acc > m:\n            break\n        if is_prime[i]:\n            primes_acc *= i\n        last *= m // primes_acc\n        unambiguous = (unambiguous + last) % MOD\n    if m != 1:\n        all = pow(m, n + 1, MOD) - 1\n        all = (all * pow(m - 1, MOD - 2, MOD) - 1 + MOD) % MOD\n    else:\n        all = n % MOD\n    ans = (all - unambiguous + MOD) % MOD\n    print(ans)\nmain()", "def GCD(x, y):\n    if x < y:\n        (x, y) = (y, x)\n    while y != 0:\n        temp = x % y\n        x = y\n        y = temp\n    return x\n(n, m) = [int(x) for x in input().split(' ')]\npri = [0, 1, 2]\nfor i in range(3, 60):\n    if GCD(pri[-1], i) == 1 and i < 60:\n        pri.append(pri[-1] * i)\n    else:\n        pri.append(pri[-1])\nans = 0\nnow = 1\nfor i in range(n):\n    now = now * m % 998244353\n    ans += now\nans -= m\nfor i in range(2, n + 1):\n    if i <= 50:\n        tem = 1\n        for j in range(1, i + 1):\n            tem = tem * (m // pri[j]) % 998244353\n        ans -= tem\nprint(ans % 998244353)", "import math\n(n, m) = input().split()\nn = int(n)\nm = int(m)\nmod = 998244353\nans = 0\nmul = m % mod\nfor i in range(1, n + 1):\n    ans += mul\n    if ans >= mod:\n        ans -= mod\n    mul = mul * m % mod\nfactor = 1\nmul = 1\nfor i in range(1, n + 1):\n    if math.gcd(factor, i) == 1:\n        factor *= i\n    cnt = int(m / factor)\n    if cnt == 0:\n        break\n    mul = mul * cnt % mod\n    ans -= mul\n    if ans < 0:\n        ans += mod\nprint(ans)", "import math\n(n, m) = input().split()\nn = int(n)\nm = int(m)\nmod = 998244353\nans = 0\nmul = m % mod\nfor i in range(1, n + 1):\n    ans += mul\n    if ans >= mod:\n        ans -= mod\n    mul = mul * m % mod\nfactor = 1\nmul = 1\nfor i in range(1, n + 1):\n    if math.gcd(factor, i) == 1:\n        factor *= i\n    cnt = int(m / factor)\n    if cnt == 0:\n        break\n    mul = mul * cnt % mod\n    ans -= mul\n    if ans < 0:\n        ans += mod\nprint(ans)", "import math\n(n, m) = input().split()\nn = int(n)\nm = int(m)\nmod = 998244353\nans = 0\nmul = m % mod\nfor i in range(1, n + 1):\n    ans += mul\n    if ans >= mod:\n        ans -= mod\n    mul = mul * m % mod\nfactor = 1\nmul = 1\nfor i in range(1, n + 1):\n    if math.gcd(factor, i) == 1:\n        factor *= i\n    cnt = int(m / factor)\n    if cnt == 0:\n        break\n    mul = mul * cnt % mod\n    ans -= mul\n    if ans < 0:\n        ans += mod\nprint(ans)", "import math\n(n, m) = input().split()\nn = int(n)\nm = int(m)\nmod = 998244353\nans = 0\nmul = m % mod\nfor i in range(1, n + 1):\n    ans += mul\n    if ans >= mod:\n        ans -= mod\n    mul = mul * m % mod\nfactor = 1\nmul = 1\nfor i in range(1, n + 1):\n    if math.gcd(factor, i) == 1:\n        factor *= i\n    cnt = int(m / factor)\n    if cnt == 0:\n        break\n    mul = mul * cnt % mod\n    ans -= mul\n    if ans < 0:\n        ans += mod\nprint(ans)", "(n, m) = map(int, input().split())\nmod = 998244353\nnum = n\nprime = [True for i in range(num + 1)]\np = 2\nwhile p * p <= num:\n    if prime[p] == True:\n        for i in range(p * p, num + 1, p):\n            prime[i] = False\n    p += 1\nfinal = 0\ntotal = 1\nnonamb = 1\ntotpripro = 1\nflag = n + 1\nfor i in range(1, n + 1):\n    if prime[i]:\n        totpripro *= i\n        if totpripro > m:\n            flag = i\n            break\n    total *= m\n    total %= mod\n    nonamb *= m // totpripro\n    final += total - nonamb\n    final %= mod\nfor i in range(flag, n + 1):\n    total *= m\n    total %= mod\n    final += total\n    final %= mod\nprint(final)", "mod = 998244353\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\nv = [1] * 38\nfor prime in primes:\n    for i in range(prime, 38):\n        v[i] *= prime\n(n, m) = map(int, input().split())\nans = 0\nac = 1\nfor i in range(1, n + 1):\n    ac *= m\n    ac %= mod\n    uc = 1\n    if i >= 38:\n        uc = 0\n    else:\n        for k in range(1, i + 1):\n            if v[k] > m:\n                uc = 0\n                break\n            cc = m // v[k]\n            uc *= cc\n            uc %= mod\n    tc = ac - uc + mod\n    ans += tc\n    ans %= mod\nprint(ans)", "N = 3 * 10 ** 5 + 5\n(n, m) = map(int, input().split())\np = [1 for i in range(N)]\nmod = 998244353\nfor i in range(2, N):\n    if p[i] == 1:\n        for j in range(2 * i, N, i):\n            p[j] = 0\nans = m\ncurr = m\nl = 1\nfor i in range(2, n + 1):\n    if p[i] == 1:\n        l = l * i\n    if l > m:\n        break\n    curr = curr * (m // l) % mod\n    ans = (ans + curr) % mod\nt = m\ncurr = m\nfor i in range(2, n + 1):\n    curr = curr * m % mod\n    t = (t + curr) % mod\nans = (t - ans + mod) % mod\nprint(ans)", "from math import gcd\n(n, m) = map(int, input().split())\nSUM = 0\nsum = m\nL = 2\nk = m ** 2\nfor i in range(2, n + 1):\n    if gcd(i, L) == 1 and L <= 10 ** 12:\n        L *= i\n    sum *= m // L\n    sum = sum % 998244353\n    SUM += k - sum\n    k *= m\n    k = k % 998244353\nprint(SUM % 998244353)", "from math import gcd\n(n, m) = map(int, input().split())\nSUM = 0\nsum = m\nQ = 2\nk = m ** 2\nfor i in range(2, n + 1):\n    if gcd(i, Q) == 1 and Q <= 10 ** 12:\n        Q *= i\n    sum *= m // Q\n    sum = sum % 998244353\n    SUM += k - sum\n    k *= m\n    k = k % 998244353\nprint(SUM % 998244353)", "from math import gcd\n(n, m) = map(int, input().split())\nans = 0\ncur = m\ng = 2\nq = m * m\nfor i in range(2, n + 1):\n    if gcd(g, i) == 1 and g < 10 ** 13:\n        g *= i\n    cur *= m // g\n    cur = cur % 998244353\n    ans += q - cur\n    q *= m\n    q = q % 998244353\n    ans = ans % 998244353\nprint(ans % 998244353)", "from math import gcd\n(n, m) = map(int, input().split())\nans = 0\ncur = m\ng = 2\nq = m * m\nfor i in range(2, n + 1):\n    if gcd(g, i) == 1 and g < 10 ** 13:\n        g *= i\n    cur *= m // g\n    cur = cur % 998244353\n    ans += q - cur\n    q *= m\n    q = q % 998244353\n    ans = ans % 998244353\nprint(ans % 998244353)", "from math import gcd\n(x, m) = map(int, input().split())\nans = 0\ncur = m\ng = 2\nq = m * m\nfor i in range(2, x + 1):\n    if gcd(g, i) == 1 and g < 10 ** 13:\n        g *= i\n    cur *= m // g\n    cur = cur % 998244353\n    ans += q - cur\n    q *= m\n    q = q % 998244353\n    ans = ans % 998244353\nprint(ans % 998244353)", "from math import gcd\n(n, m) = map(int, input().split())\nans = 0\ncur = m\ng = 2\nq = m * m\nfor i in range(2, n + 1):\n    if gcd(g, i) == 1 and g < 10 ** 13:\n        g *= i\n    cur *= m // g\n    cur = cur % 998244353\n    ans += q - cur\n    q *= m\n    q = q % 998244353\n    ans = ans % 998244353\nprint(ans % 998244353)", "from math import gcd\n(x, m) = map(int, input().split())\nanswers = 0\ncur = m\ng = 2\nq = m * m\nfor i in range(2, x + 1):\n    if gcd(g, i) == 1 and g < 10 ** 13:\n        g *= i\n    cur *= m // g\n    cur = cur % 998244353\n    answers += q - cur\n    q *= m\n    q = q % 998244353\n    answers = answers % 998244353\nprint(answers % 998244353)", "from math import gcd\n(n, m) = map(int, input().split())\nans = 0\ncur = m\ng = 2\nq = m * m\nfor i in range(2, n + 1):\n    if gcd(g, i) == 1 and g < 10 ** 13:\n        g *= i\n    cur *= m // g\n    cur = cur % 998244353\n    ans += q - cur\n    q *= m\n    q = q % 998244353\n    ans = ans % 998244353\nprint(ans % 998244353)", "from math import gcd\n(n, m) = map(int, input().split())\nans = 0\ncur = m\ng = 2\nq = m * m\nfor i in range(2, n + 1):\n    if gcd(g, i) == 1 and g < 10 ** 13:\n        g *= i\n    cur *= m // g\n    cur = cur % 998244353\n    ans += q - cur\n    q *= m\n    q = q % 998244353\n    ans = ans % 998244353\nprint(ans % 998244353)", "from math import gcd\n(n, m) = map(int, input().split())\nans = 0\ncur = m\ng = 2\nq = m * m\nfor i in range(2, n + 1):\n    if gcd(g, i) == 1 and g < 10 ** 13:\n        g *= i\n    cur *= m // g\n    cur = cur % 998244353\n    ans += q - cur\n    q *= m\n    q = q % 998244353\n    ans = ans % 998244353\nprint(ans % 998244353)", "import math\nmodule = 998244353\n\ndef is_prime(n):\n    if n == 1:\n        return True\n    for x in range(2, int(math.sqrt(n)) + 1):\n        if n % x == 0:\n            return False\n    return True\nline1 = input().split(' ')\nn = int(line1[0])\nm = int(line1[1])\ns = m\nans = 0\nproductP = 1\nF = 0\nfor i in range(2, n + 1):\n    if productP <= m and is_prime(i):\n        productP *= i\n    tmp = m * F % module\n    x = m - int(m / productP)\n    tmp += (s - F) * x % module\n    tmp %= module\n    F = tmp\n    ans = (F + ans) % module\n    s = s * m % module\nprint(ans)", "sz = 300010\nstat = [1 for i in range(sz)]\nstat[0] = 0\nstat[1] = 0\nfor i in range(2, sz):\n    if stat[i] == 1:\n        for j in range(i * i, sz, i):\n            stat[j] = 0\n(n, m) = list(map(int, input().split()))\nmod = 998244353\np = 1\nl = 1\nans = 0\nflag = 0\nm1 = 1\nfor i in range(1, n + 1):\n    if stat[i] == 1 and flag == 0:\n        l *= i\n    if m // l == 0:\n        flag = 1\n    if flag == 1:\n        p = 0\n    p = p * (m // l)\n    p = p % mod\n    m1 *= m\n    m1 = m1 % mod\n    ans += m1 - p\n    ans = ans % mod\nprint(ans)", "import math\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\nlists = input().split()\nnumber_element_max = int(lists[0])\nmaximum_value_of_element = int(lists[1])\nnb_normal = maximum_value_of_element\nincrement = 1\nres = 0\nfor i in range(2, number_element_max + 1):\n    if nb_normal != 0 and isPrime(i):\n        increment *= i\n    number_possibility = maximum_value_of_element // increment\n    res += pow(maximum_value_of_element, i, 998244353)\n    nb_normal *= number_possibility\n    nb_normal = nb_normal % 998244353\n    res -= nb_normal\nprint(res % 998244353)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m) = map(int, input().split())\n    mo = 998244353\n    isPrime = [True] * 40\n    for i in range(2, 40):\n        if isPrime[i]:\n            for j in range(2 * i, 40, i):\n                isPrime[j] = False\n    ans = 0\n    others = m\n    val = 1\n    j = 2\n    for i in range(2, n + 1):\n        while j <= i and val <= m and (j < 40):\n            if isPrime[j]:\n                val *= j\n            j += 1\n        if val > m:\n            ans += pow(m, i, mo)\n            ans %= mo\n            continue\n        others *= m // val\n        others %= mo\n        ans += (pow(m, i, mo) - others) % mo\n    return ans\nprint(solve())", "def add(a, b, mod):\n    return (a + b) % mod\n\ndef mul(a, b, mod):\n    return a * b % mod\n\ndef sub(a, b, mod):\n    return (a - b + mod) % mod\n\ndef binpow(a, n, mod):\n    if n == 0:\n        return 1\n    if n % 2 == 1:\n        return mul(a, binpow(a, n - 1, mod), mod)\n    b = binpow(a, n // 2, mod)\n    return mul(b, b, mod)\n\ndef prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return n > 1\nMOD = 998244353\n(n, m) = map(int, input().split())\np = 1\nans = 0\ncur = m\nans = sub(ans, cur, MOD)\nfor i in range(1, n + 1):\n    ans = add(ans, int(pow(m, i, MOD)), MOD)\nfor i in range(1, n):\n    if prime(i + 1):\n        p *= i + 1\n    if p > m:\n        break\n    cur = mul(cur, m // p, MOD)\n    ans = sub(ans, cur, MOD)\nprint(ans)", "from typing import List\nfrom math import sqrt\nMOD = 998244353\n\ndef sieve(n) -> List[bool]:\n    is_prime = [True] * (n + 1)\n    is_prime[0] = is_prime[1] = False\n    for i in range(4, n + 1, 2):\n        is_prime[i] = False\n    for i in range(3, int(sqrt(n)) + 2, 2):\n        if is_prime[i]:\n            for j in range(i * i, n, 2 * i):\n                is_prime[j] = False\n    return is_prime\n\ndef main():\n    (n, m) = map(int, input().split())\n    is_prime = sieve(n)\n    unambiguous = 0\n    last = 1\n    primes_acc = 1\n    for i in range(1, n + 1):\n        if primes_acc <= m and is_prime[i]:\n            primes_acc *= i\n        last *= m // primes_acc\n        unambiguous = (unambiguous + last) % MOD\n    all = 0\n    for i in range(1, n + 1):\n        all = (all + pow(m, i, MOD)) % MOD\n    ans = (all - unambiguous + MOD) % MOD\n    print(ans)\nmain()", "def add(a, b, mod):\n    return (a + b) % mod\n\ndef mul(a, b, mod):\n    return a * b % mod\n\ndef sub(a, b, mod):\n    return (a - b + mod) % mod\n\ndef binpow(a, n, mod):\n    if n == 0:\n        return 1\n    if n % 2 == 1:\n        return mul(a, binpow(a, n - 1, mod), mod)\n    b = binpow(a, n // 2, mod)\n    return mul(b, b, mod)\n\ndef prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return n > 1\nMOD = 998244353\n(n, m) = map(int, input().split())\np = 1\nans = 0\ncur = m\nans = sub(ans, cur, MOD)\nfor i in range(1, n + 1):\n    ans = add(ans, int(pow(m, i, MOD)), MOD)\nfor i in range(1, n):\n    if prime(i + 1):\n        p *= i + 1\n    if p > m:\n        break\n    if m // p == 0:\n        break\n    cur = mul(cur, m // p, MOD)\n    ans = sub(ans, cur, MOD)\nprint(ans)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m) = map(int, input().split())\n    mo = 998244353\n    isPrime = [True] * (n + 1)\n    for i in range(2, n // 2 + 1):\n        if isPrime[i]:\n            for j in range(2 * i, n + 1, i):\n                isPrime[j] = False\n    ans = 0\n    others = m\n    val = 1\n    j = 2\n    for i in range(2, n + 1):\n        while j <= i and val <= m:\n            if isPrime[j]:\n                val *= j\n            j += 1\n        if val > m:\n            ans += pow(m, i, mo)\n            ans %= mo\n            continue\n        others *= m // val\n        others %= mo\n        ans += (pow(m, i, mo) - others) % mo\n    return ans\nprint(solve())", "import math\nprime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n\ndef sw(n, m):\n    g = 1\n    for i in prime:\n        if i <= n:\n            g *= i\n    return m // g\n\ndef wronganswer(n, m):\n    ans = 1\n    if n <= 37:\n        for i in range(1, n + 1):\n            ans = ans * sw(i, m) % 998244353\n        return ans\n    else:\n        return 0\n\ndef rightanswer(n, m):\n    return pow(m, n, 998244353) - wronganswer(n, m) % 998244353\n(n, m) = map(int, input().split())\nsum = 0\nif n == 1:\n    print(0)\nelse:\n    for i in range(2, n + 1):\n        sum += rightanswer(i, m)\n        sum %= 998244353\n    print(sum)", "(n, m) = [int(i) for i in input().split()]\nprime = [1] * (n + 1)\nprime[1] = 0\nfor i in range(2, n + 1):\n    if prime[i]:\n        for j in range(i * i, n + 1, i):\n            prime[j] = 0\nprod = 1\ncur = 1\nans = 0\nall_cnt = 0\nMOD = 998244353\nfor i in range(1, n + 1):\n    if prime[i] and prod <= m:\n        prod = prod * i\n    cur = cur * (m // prod) % MOD\n    ans = (ans + cur) % MOD\n    all_cnt = (all_cnt + pow(m, i, MOD)) % MOD\nprint((all_cnt - ans) % MOD)", "mod = 998244353\n\ndef solve(n, m):\n    primes = [1] * (n + 1)\n    for i in range(2, n + 1):\n        for j in range(i + i, n + 1, i):\n            primes[j] = 0\n    cur = 1\n    ans = 0\n    b = m\n    for i in range(1, n + 1):\n        if primes[i]:\n            b //= i\n        cur = cur * b % mod\n        ans = (ans + pow(m, i, mod) - cur) % mod\n    return ans\n\ndef main():\n    (n, m) = list(map(int, input().split()))\n    print(solve(n, m))\nmain()"]