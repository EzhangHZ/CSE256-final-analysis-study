["import sys\ninput = lambda : sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n    (K, X) = map(int, input().split())\n    a = K * (K + 1) // 2\n    if X <= a:\n        b = int((2 * X) ** 0.5)\n        ans = b\n        if b * (b + 1) < X * 2:\n            ans += 1\n        print(ans)\n    elif X >= a + a - K:\n        print(K + K - 1)\n    else:\n        X = a + a - K - X\n        b = int((2 * X) ** 0.5)\n        ans = K + K - 1 - b\n        if b * (b + 1) > 2 * X:\n            ans += 1\n        print(ans)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    k = a * (a + 1) // 2\n    if b >= 2 * k - a:\n        print(2 * a - 1)\n    elif b <= k:\n        c = int((-1 + (1 + 8 * b) ** (1 / 2)) // 2)\n        if c * (c + 1) // 2 >= b:\n            print(c)\n        else:\n            print(c + 1)\n    else:\n        b = b - a * (a + 1) // 2\n        b = a * (a - 1) // 2 - b\n        c = int((-1 + (1 + 8 * b) ** (1 / 2)) // 2)\n        if c * (c + 1) // 2 <= b:\n            print(2 * a - c - 1)\n        else:\n            print(2 * a - c)", "from math import sqrt\nfor _ in range(int(input())):\n    (k, x) = map(int, input().split())\n    if 2 * x <= k * (k + 1):\n        xd = int(sqrt(2 * x))\n        while xd * (xd + 1) < 2 * x:\n            xd += 1\n        print(xd)\n    elif x >= k ** 2:\n        print(2 * k - 1)\n    else:\n        ans = k\n        temp = k\n        x -= k * (k + 1) // 2\n        xd = k - int(sqrt(k ** 2 - k - 2 * x)) - 1\n        while xd * (2 * k - xd - 1) // 2 < x:\n            xd += 1\n        ans += xd\n        print(ans)", "import itertools\nfrom math import floor, log, log2, ceil, sqrt\nfrom itertools import groupby\nfrom decimal import Decimal, getcontext\nimport sys\nt = int(input())\nres = []\nfor i in range(t):\n    [k, x] = list(map(int, input().split()))\n    ans = 0\n    half = k * (k + 1) // 2\n    if x >= k ** 2:\n        ans = 2 * k - 1\n    elif x == half:\n        ans = k\n    elif x < half:\n        ans = ceil((Decimal(1 + 8 * x).sqrt() - 1) / 2)\n    else:\n        ans = 2 * k - floor((Decimal(1 + 8 * (k ** 2 - x)).sqrt() + 1) / 2)\n    res.append(ans)\nfor i in range(t):\n    print(res[i])", "for _ in range(int(input())):\n    (k, x) = map(int, input().split())\n    ans = 0\n    t = k * (k + 1) // 2\n    if t <= x:\n        ans += k\n        x -= t\n    else:\n        y = int((2 * x) ** 0.5)\n        ans += y\n        x -= y * (y + 1) // 2\n        while x > 0:\n            ans += 1\n            y += 1\n            x -= y\n        x = 0\n    if x:\n        t = k * (k - 1) // 2\n        if t <= x:\n            ans += k - 1\n        else:\n            p = k * (k - 1) - 2 * x\n            y = k - int(p ** 0.5) - 1\n            p = t - (k - y) * (k - y - 1) // 2\n            ans += y\n            x -= p\n            y += 1\n            while x > 0:\n                ans += 1\n                x -= k - y\n                y += 1\n    print(ans)", "import math as mt\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    if b >= a ** 2:\n        print(2 * a - 1)\n        continue\n    x = mt.ceil((-1 + 2 * mt.sqrt(2 * b)) / 2)\n    if x <= a and x * (x + 1) // 2 >= b:\n        print(x)\n        continue\n    if x <= a and x * (x + 1) // 2 < b:\n        print(x + 1)\n        continue\n    z = -2 * a * a + a * (a + 1)\n    n = 1 - 4 * a\n    y = mt.floor((-n - mt.sqrt(n * n - 8 * b + 8 * z)) / 2)\n    if 2 * a * y - y * (y + 1) // 2 + a * (a + 1) - 2 * a * a >= b:\n        print(y)\n        continue\n    print(y + 1)", "def findline(k, x):\n    if k == 1:\n        return 1\n    if x == 1:\n        return 1\n    if x > k ** 2:\n        return 2 * k - 1\n    if x <= k * (k + 1) / 2:\n        t = int(((1 + 8 * x) ** 0.5 - 1) / 2)\n        if 2 * x <= (t - 1) * t:\n            return t - 1\n        if 2 * x > t * (t + 1):\n            return t + 1\n        return t\n    t = int((2 * k - 1 - (8 * k ** 2 + 1 - 8 * x) ** 0.5) / 2)\n    y = x - t * k\n    if y <= (k - t) * (k + t - 1) / 2:\n        return t - 1 + k\n    if y > k + (k - t - 1) * (k + t) / 2:\n        return t + 1 + k\n    return t + k\ntotal = int(input())\nfor i in range(total):\n    line = input().split()\n    k = int(line[0])\n    x = int(line[1])\n    print(findline(k, x))", "import math\n\ndef chat_ban(k, x):\n    if x >= k * k:\n        return 2 * k - 1\n    if x <= k * (k + 1) // 2:\n        m = int(math.ceil((-1 + (1 + 8 * x) ** 0.5) / 2))\n        for m_ in range(m - 2, m + 3):\n            if m_ * (m_ + 1) // 2 < x:\n                continue\n            return m_\n    r = k * k - x\n    p = int(math.floor((-1 + (1 + 8 * r) ** 0.5) / 2))\n    for p_ in range(p + 3, p - 3, -1):\n        if p_ * (p_ + 1) // 2 > r:\n            continue\n        return 2 * k - p_ - 1\nfor _ in range(int(input())):\n    (k, x) = map(int, input().split())\n    print(chat_ban(k, x))", "import sys\nimport math\nfrom fractions import Fraction\nfrom decimal import *\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    inp = input().strip()\n    s = [int(x) for x in inp.split(' ')]\n    k = s[0]\n    x = s[1]\n    if x >= int(k * (k + 1) >> 1) + int(k * (k - 1) >> 1):\n        print(2 * k - 1)\n    elif x <= int(k * (k + 1) >> 1):\n        a = math.ceil(Decimal(8 * x + 1).sqrt() - 1)\n        l = math.ceil(a >> 1)\n        if a % 2 == 1:\n            l += 1\n        print(l)\n    else:\n        l = k\n        rem = x - int(k * (k + 1) >> 1)\n        notp = int(k * (k - 1) >> 1) - rem\n        l += k - 1 - (int(Decimal(8 * notp + 1).sqrt() - 1) >> 1)\n        print(l)\n    t -= 1", "import math\nt = int(input())\nfor i in range(t):\n    (k, x) = map(int, input().split())\n    s1 = k * (k + 1) // 2\n    s2 = s1 - k\n    s = s1 + s2\n    d = 1 + 8 * x\n    r = int((-1 + math.sqrt(d)) // 2)\n    if s <= x:\n        print(2 * k - 1)\n    elif x < s1:\n        d = 1 + 8 * x\n        r = int((-1 + math.sqrt(d)) // 2)\n        if r * (r + 1) // 2 >= x:\n            print(r)\n        else:\n            print(r + 1)\n    else:\n        x = x - s1\n        x = k * (k - 1) // 2 - x\n        r = int((-1 + math.sqrt(1 + 8 * x)) // 2)\n        if r * (r + 1) // 2 <= x:\n            print(2 * k - r - 1)\n        else:\n            print(2 * k - r)", "import math\nfrom decimal import *\n\ndef f(k, x):\n    k = Decimal(k)\n    x = Decimal(x)\n    n = x - k * (k + 1) / 2\n    fh = math.ceil(((1 + 8 * x).sqrt() - 1) / 2)\n    if k * k <= x:\n        return 2 * k - 1\n    if fh <= k:\n        return fh\n    else:\n        sh = math.ceil(k - Decimal('0.5') - ((k - Decimal('0.5')) ** 2 - 2 * n).sqrt())\n        return sh + k\nfor (a, b) in map(str.split, [*open(0)][1:]):\n    print(f(int(a), int(b)))", "import math\nfrom decimal import *\n\ndef chatBan(k, n):\n    if k * (k + 1) // 2 >= n:\n        d = Decimal(1 + 8 * n)\n        ans = math.ceil((-1 + d.sqrt()) / 2)\n    else:\n        if n >= k * (k + 1) // 2 + k * (k - 1) // 2:\n            return 2 * k - 1\n        m = k ** 2 - n\n        d = Decimal(1 + 8 * m)\n        ans = math.ceil(2 * k - 1 - (-1 + d.sqrt()) / 2)\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    print(chatBan(n, k))", "from sys import stdin\n\ndef solve():\n    results = []\n    for _ in range(int(stdin.readline().strip())):\n        (k, x) = map(int, stdin.readline().strip().split())\n        if k * k <= x:\n            results.append(2 * k - 1)\n            continue\n        d = k * (k + 1) // 2\n        if d > x and d - x < k:\n            results.append(k)\n            continue\n        ans = -1\n        inv = 0\n        lo = 1\n        hi = k\n        if x > k * (k + 1) // 2:\n            x = k * k - x\n            inv = 1\n        while lo <= hi:\n            mid = lo + (hi - lo) // 2\n            d = mid * (mid + 1) // 2\n            if d == x:\n                ans = mid\n                if inv:\n                    ans += 1\n                break\n            if d >= x and d - x < mid:\n                ans = mid\n                break\n            elif d < x:\n                lo = mid + 1\n            else:\n                hi = mid - 1\n        if ans != -1 and inv:\n            ans = 2 * k - ans\n        results.append(ans)\n    print('\\n'.join(map(str, results)))\nsolve()", "from decimal import Decimal, getcontext\nfrom math import ceil, floor\ngetcontext().prec = 32\nfor _ in range(int(input())):\n    (k, x) = map(int, input().split())\n    if x <= k * (k + 1) // 2:\n        print(ceil((Decimal(x * 8 + 1).sqrt() - 1) / 2))\n    elif x >= k ** 2:\n        print(k * 2 - 1)\n    else:\n        print(k * 2 - 1 - floor((Decimal(k ** 2 * 8 - x * 8 + 1).sqrt() - 1) / 2))", "from collections import Counter, deque\nimport math\nfrom random import randint\nfrom bisect import bisect\nimport sys\nimport re\nimport copy\nfrom decimal import Decimal, getcontext\ngetcontext().prec = 32\nMOD = 1000000007\nMAX = sys.maxsize\nMIN = -sys.maxsize\nprime = []\n\nclass get:\n\n    def int():\n        return list(map(int, input().split()))\n\n    def str():\n        return input().split()\n\n    def float():\n        return list(map(float, input().split()))\n\n    def map():\n        return map(int, input().split())\n\ndef sqrt(x):\n    return int(math.sqrt(x)) + 1\n\ndef gcd(*args):\n    result = args[0]\n    for item in args:\n        result = math.gcd(result, item)\n    return result\n\ndef LCM(a, b):\n    return a * b // math.gcd(a, b)\n\ndef isPrime(n):\n    if n == 1:\n        return False\n    for i in range(2, sqrt(n)):\n        if n % i == 0:\n            return False\n    return True\n\ndef solve():\n    (k, x) = get.map()\n    sum_ = k * (k + 1) // 2\n    if x >= k ** 2:\n        print(2 * k - 1)\n        return\n    if x == sum_:\n        print(k)\n    elif x < sum_:\n        value = (-1 + Decimal(1 + 8 * x).sqrt()) / 2\n        print(math.ceil(value))\n    else:\n        x = x - sum_\n        value = (2 * k - 1 - Decimal((2 * k - 1) ** 2 - 8 * x).sqrt()) / 2\n        print(k + math.ceil(value))\nfor _ in range(int(input())):\n    solve()", "import sys\ninput = iter(sys.stdin.read().splitlines()).__next__\n\ndef sum1toN(n):\n    return n * (n + 1) // 2\n\ndef solve(k, x):\n    total = sum1toN(k) + sum1toN(k - 1)\n    if total < x:\n        return 2 * k - 1\n\n    def count(m):\n        if m <= k:\n            return sum1toN(m)\n        else:\n            return total - sum1toN(2 * k - 1 - m)\n    (lo, hi) = (0, 2 * k - 1)\n    res = 0\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if count(mid) >= x:\n            res = mid\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return res\nres = []\nTC = int(input())\nfor tc in range(TC):\n    (k, x) = map(int, input().split())\n    res.append(solve(k, x))\nprint('\\n'.join(map(str, res)))", "from sys import stdin, setrecursionlimit\nfor _ in range(int(stdin.readline())):\n    (a, b) = map(int, stdin.readline().split())\n    t = a * (a + 1) // 2\n    if t < b:\n        if t + a * (a - 1) // 2 <= b:\n            ans = 2 * a - 1\n        else:\n            b -= t\n            x = a * (a - 1) // 2 - b\n\n            def f(l, h, x):\n                if h == l:\n                    return h\n                if h == l + 1:\n                    if h * (h + 1) // 2 <= x:\n                        return h\n                    return l\n                m = (h + l) // 2\n                if m * (m + 1) // 2 == x:\n                    return m\n                elif m * (m + 1) // 2 < x:\n                    if (m + 1) * (m + 2) // 2 > x:\n                        return m\n                    return f(m + 1, h, x)\n                else:\n                    return f(l, m - 1, x)\n            anss = f(1, a - 1, x)\n            ans = a + a - anss - 1\n    else:\n\n        def func(l, h, b):\n            if h == l:\n                return h\n            if h == l + 1:\n                if l * (l + 1) // 2 >= b:\n                    return l\n                return h\n            m = (h + l) // 2\n            if m * (m + 1) // 2 >= b:\n                return func(l, m, b)\n            else:\n                return func(m + 1, h, b)\n        ans = func(0, a, b)\n    print(ans)", "import sys\ninput = sys.stdin.readline\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\ndef gauss_sum(n):\n    return n * (n + 1) // 2\n\ndef bin_search(x, n):\n    (low, up) = (0, 2 * x - 1)\n    while low < up:\n        mid = (up - low) // 2 + low\n        if mid > x:\n            res = x * (x + 1) - x - (x - 1 - mid + x) * (2 * x - mid) // 2\n        else:\n            res = mid * (mid + 1) // 2\n        if res >= n:\n            up = mid\n        else:\n            low = mid + 1\n    return up\nfor _ in range(int(input())):\n    print(bin_search(*read_int_list()))", "def solve():\n    (k, x) = list(map(int, input().split()))\n    first_half_sum = int(k * (k + 1) / 2)\n    second_half_sum = int(k * (k - 1) / 2)\n    total_sum = first_half_sum + second_half_sum\n    if x >= total_sum:\n        return 2 * k - 1\n    elif x <= first_half_sum:\n        (left, right) = (1, k)\n        while left < right:\n            mid = (left + right) // 2\n            total = mid * (mid + 1) // 2\n            if total >= x:\n                right = mid\n            else:\n                left = mid + 1\n        return left\n    else:\n        x = x - first_half_sum\n        (left, right) = (1, k - 1)\n        while left < right:\n            mid = (left + right) // 2\n            if (k - 1 + k - mid) * mid // 2 >= x:\n                right = mid\n            else:\n                left = mid + 1\n        return k + left\n        return k + (k - right)\nfor i in range(int(input())):\n    print(solve())", "from decimal import *\nimport math\njkl = int(input())\nfor _ in range(jkl):\n    (k, x) = map(int, input().split())\n    num1 = Decimal(1 + 8 * x).sqrt()\n    n1 = math.ceil((num1 - 1) / 2)\n    if n1 <= k:\n        ans = n1\n    else:\n        ans = k\n        x -= (k ** 2 + k) // 2\n        if x > 0:\n            a = k - 1\n            a1 = 2 * a + 1\n            d2 = a1 ** 2 - 8 * x\n            if d2 >= 0:\n                num1 = Decimal(d2).sqrt()\n                n1 = math.ceil((a1 - num1) / 2)\n                if n1 < k - 1:\n                    ans += n1\n                else:\n                    ans = 2 * k - 1\n            else:\n                ans = 2 * k - 1\n    print(ans)", "def binary_search(k, x):\n    ans = 0\n    l = 1\n    r = 2 * k - 1\n    total = k * (k + 1) - k\n    while l <= r:\n        m = (l + r) // 2\n        req = 0\n        if m > k:\n            diff = m - k\n            val = k - diff\n            req = total - val * (val + 1) // 2\n        else:\n            req = m * (m - 1) // 2\n        if x > req:\n            ans = m\n            l = m + 1\n        else:\n            r = m - 1\n    return ans\nt = int(input())\nfor i in range(t):\n    (k, x) = map(int, input().split())\n    print(binary_search(k, x))", "def solve():\n    (n, s) = [int(x) for x in input().split()]\n    if n == 1:\n        print(1)\n        return\n    checker = n * (n + 1) // 2\n    if checker == s:\n        print(n)\n        return\n    elif checker > s:\n        lo = 1\n        hi = n - 1\n        while hi >= lo:\n            mid = lo + (hi - lo) // 2\n            checker = mid * (mid + 1) // 2\n            if checker == s:\n                print(mid)\n                return\n            elif checker > s:\n                hi = mid - 1\n            else:\n                lo = mid + 1\n        print(lo)\n        return\n    elif checker < s:\n        toCheck = n * (n + 1) // 2 + n * (n - 1) // 2\n        if toCheck <= s:\n            print(2 * n - 1)\n            return\n        else:\n            lahatLahat = n * (n + 1) // 2\n            lahatLahat += n * (n - 1) // 2\n            lo = 1\n            hi = n - 1\n            while hi >= lo:\n                mid = lo + (hi - lo) // 2\n                cntCnt = (1 + mid - 1) * (mid - 1) // 2\n                cntCnt = lahatLahat - cntCnt\n                if cntCnt == s:\n                    print(n + (n - mid))\n                    return\n                elif cntCnt > s:\n                    lo = mid + 1\n                else:\n                    hi = mid - 1\n            print(n + n - hi)\nfor i in range(int(input())):\n    solve()", "def solution_1(k, x):\n    if x >= k * k:\n        return 2 * k - 1\n    sum_ = 0\n    for i in range(1, 2 * k):\n        sum_ += i if i < k else 2 * k - 1 - i\n        if sum_ >= x:\n            return i\n\ndef solution_2(k, x):\n    if x >= k * k:\n        return 2 * k - 1\n    low = 1\n    high = 2 * k - 1\n    while low < high:\n        mid = (low + high) // 2\n        if mid <= k:\n            target = mid * (mid + 1) // 2\n        else:\n            target = k * k - (2 * k - 1 - mid) * (2 * k - mid) // 2\n        if target >= x:\n            high = mid\n        else:\n            low = mid + 1\n    return low\nt = int(input())\nfor i in range(t):\n    terms = input().split(' ')\n    res = solution_2(int(terms[0]), int(terms[1]))\n    print(res)", "def next():\n    return input()\n\ndef nextInt():\n    return int(next())\n\ndef nextFloat():\n    return float(next())\n\ndef nextArray(sep=' ', fct=lambda x: x):\n    return [fct(d) for d in next().split(sep)]\n\ndef nextIntArray(sep=' '):\n    return nextArray(sep, int)\n\ndef nextFloatArray(sep=' '):\n    return nextArray(sep, float)\n\ndef getArray(n, sep=' ', fct=lambda x: x):\n    return [nextArray(sep, fct) for _ in range(n)]\n\ndef getIntArray(n, sep=' '):\n    return getArray(n, sep, int)\n\ndef getFloatArray(n, sep=' '):\n    return getArray(n, sep, float)\n\ndef printList(l):\n    print(' '.join(map(str, l)))\nINF = float('inf')\nN = nextInt()\ndata = getIntArray(N)\n\ndef get_emotes(i, k):\n    if i <= k:\n        return i * (i + 1) // 2\n    else:\n        return k ** 2 - (2 * k - 1 - i) * (2 * k - i) // 2\n\ndef solve(d):\n    (k, x) = d\n    if k ** 2 <= x:\n        print(2 * k - 1)\n    else:\n        bmin = 1\n        bmax = 2 * k - 1\n        while bmin < bmax:\n            m = (bmax + bmin) // 2\n            if get_emotes(m, k) > x:\n                bmax = m\n            else:\n                bmin = m + 1\n        if get_emotes(bmin - 1, k) >= x:\n            print(bmin - 1)\n        else:\n            print(bmin)\nfor d in data:\n    solve(d)", "def binary_search(k, x):\n    ans = 0\n    l = 1\n    r = 2 * k - 1\n    total = k * (k + 1) - k\n    while l <= r:\n        m = (l + r) // 2\n        req = 0\n        if m > k:\n            val = 2 * k - m\n            req = total - val * (val + 1) // 2\n        else:\n            req = m * (m - 1) // 2\n        if x > req:\n            ans = m\n            l = m + 1\n        else:\n            r = m - 1\n    return ans\nt = int(input())\nfor i in range(t):\n    (k, x) = map(int, input().split())\n    print(binary_search(k, x))", "from math import sqrt, ceil\nfor _ in range(int(input())):\n    (k, x) = map(int, input().split())\n    if x >= k ** 2:\n        print(2 * k - 1)\n    elif x <= k * (k + 1) // 2:\n        (l, r) = (1, k)\n        while l < r:\n            mid = (l + r) // 2\n            if mid * (mid + 1) // 2 >= x:\n                r = mid\n            else:\n                l = mid + 1\n        print(l)\n    else:\n        x -= k * (k + 1) // 2\n        (l, r) = (1, k - 1)\n        while l < r:\n            mid = (l + r) // 2\n            if (k - 1 + k - mid) * mid // 2 >= x:\n                r = mid\n            else:\n                l = mid + 1\n        print(k + l)", "for _ in ' ' * int(input()):\n    (k, x) = map(int, input().split())\n    m = 2 * k - 1\n\n    def smiles(i):\n        if i <= k:\n            return i * (i + 1) // 2\n        else:\n            return k * k - (m - i) * (m - i + 1) // 2\n\n    def search(min_lim, max_lim):\n        while max_lim - min_lim > 1:\n            test_v = (min_lim + max_lim) // 2\n            if smiles(test_v) < x:\n                min_lim = test_v\n            else:\n                max_lim = test_v\n        return max_lim\n    print(search(0, 2 * k - 1))", "for _ in range(int(input())):\n    (k, x) = map(int, input().split())\n    s = k * (k + 1) // 2\n    if x <= s:\n        (l, r) = (1, k)\n        while l < r:\n            n = (l + r) // 2\n            if n * (n + 1) // 2 < x:\n                l = n + 1\n            else:\n                r = n\n        print(r)\n    else:\n        x -= s\n        (l, r) = (1, k - 1)\n        while l < r:\n            n = (l + r) // 2\n            if n * (2 * k - n - 1) // 2 < x:\n                l = n + 1\n            else:\n                r = n\n        print(r + k)", "def bs(r, x):\n    ans = 1\n    l = 1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if mid * (mid + 1) // 2 <= x:\n            ans = mid\n            l = mid + 1\n        else:\n            r = mid - 1\n    return ans\n\ndef bs1(l, x):\n    r = 1\n    k = l\n    ans = l\n    while l >= r:\n        mid = r + (l - r) // 2\n        if k * (k + 1) // 2 - (mid - 1) * mid // 2 <= x:\n            ans = mid\n            l = mid - 1\n        else:\n            r = mid + 1\n    return ans\nfor _ in range(int(input())):\n    (k, x) = map(int, input().split())\n    cnt = bs(k, x)\n    cnt1 = 0\n    x -= cnt * (cnt + 1) // 2\n    if x > 0:\n        if cnt < k:\n            cnt += 1\n        else:\n            cnt1 = bs1(k - 1, x)\n            x -= (k - 1) * k // 2 - cnt1 * (cnt1 - 1) // 2\n            if x > 0 and cnt1 > 1:\n                cnt1 = k - cnt1\n                cnt1 += 1\n            else:\n                cnt1 = k - cnt1\n    print(min(cnt + cnt1, 2 * k - 1))", "import sys\nfrom collections import deque\nimport heapq\nimport bisect\nimport copy\nMOD = 1000000007\nNO = lambda : print('NO')\nYES = lambda : print('YES')\n_1 = lambda : print(-1)\nari = lambda : [int(_) for _ in input().split()]\ncin = lambda : int(input())\ncis = lambda : input()\nshow = lambda x: print(x)\nfast = lambda : sys.stdin.readline()\ntest_case = 1\ntest_case = int(input())\nsys.setrecursionlimit(10 ** 6)\n\ndef ans():\n    (a, limit) = ari()\n    tt = 2 * a - 1\n    low = 1\n    high = tt\n    ans = 0\n    while low <= high:\n        mid = low + (high - low) // 2\n        if mid <= a:\n            n = mid * (mid - 1) // 2 + 1\n        else:\n            n = a * a - (2 * a - mid) * (2 * a - mid + 1) // 2 + 1\n        if n <= limit:\n            ans = mid\n            low = mid + 1\n        else:\n            high = mid - 1\n    print(high)\n    return\nfor _ in range(test_case):\n    ans()", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000000 + 7\nmod2 = 998244353\nfor _ in range(I()):\n    (k, x) = M()\n    s = 0\n    l = 0\n    r = 2 * k - 1\n    while l <= r:\n        m = (l + r) // 2\n        if m <= k:\n            t = m * (m + 1) // 2\n        else:\n            p = 2 * k - 1 - m\n            t = k * k - p * (p + 1) // 2\n        if t > x:\n            r = m - 1\n        elif t <= x:\n            s = m\n            l = m + 1\n    if s <= k and x > s * (s + 1) // 2 or (s > k and x > k * k - (2 * k - s - 1) * (2 * k - s) // 2):\n        print(min(2 * k - 1, s + 1))\n    else:\n        print(s)", "from sys import stdin, stdout\nt = int(stdin.readline())\nfor tt in range(t):\n    (k, x) = [int(s) for s in stdin.readline().split()]\n    (l, r) = (0, k)\n    sm = None\n    while l != r:\n        n = (l + r) // 2\n        sm = n * (n + 1) // 2\n        if sm < x:\n            l = n + 1\n        else:\n            r = n\n    sm = l * (l + 1) // 2\n    if sm >= x:\n        print(l)\n        continue\n    x -= k * (k + 1) // 2\n    (l, r) = (0, k - 1)\n    sm = None\n    while l != r:\n        n = (l + r) // 2\n        m = k - n\n        sm = k * (k - 1) // 2 - m * (m - 1) // 2\n        if sm < x:\n            l = n + 1\n        else:\n            r = n\n    print(l + k)", "import sys\ninput = sys.stdin.readline\n\ndef calc(n):\n    return n * (n + 1) // 2\nfor _ in range(int(input())):\n    (k, x) = map(int, input().split())\n    lo = 0\n    hi = 2 * k - 1\n    while lo < hi:\n        mi = (lo + hi) // 2\n        if mi <= k:\n            c = calc(mi)\n        else:\n            c = calc(k) + (calc(k - 1) - calc(2 * k - 1 - mi))\n        if c >= x:\n            hi = mi\n        else:\n            lo = mi + 1\n    print(lo)", "def calc(a, b):\n    if b < a:\n        return (1 + b) * b // 2\n    else:\n        return (a - 1) * a // 2 + (a + a - (b - a)) * (b - a + 1) // 2\nt = int(input())\nfor i in range(t):\n    (a, b) = input().split(' ')\n    (a, b) = (int(a), int(b))\n    ttmp = (1 + a) * a // 2 + (a - 1) * a // 2\n    if ttmp < b:\n        print(a + a - 1)\n        continue\n    tmp = (1 + a) * a // 2\n    if tmp == b:\n        print(a)\n    elif tmp > b:\n        l = 1\n        r = a\n        ans = 0\n        while l <= r:\n            mid = (l + r) // 2\n            tmp = (1 + mid) * mid // 2\n            if tmp < b:\n                l = mid + 1\n            elif tmp == b:\n                ans = mid\n                break\n            else:\n                r = mid - 1\n                ans = mid\n        print(ans)\n    else:\n        l = 1\n        r = a\n        base = a * (a - 1) // 2\n        ans = 10000000\n        while l <= r:\n            mid = (l + r) // 2\n            tmp = base + (a + a - mid + 1) * mid // 2\n            if tmp < b:\n                l = mid + 1\n            elif tmp == b:\n                ans = mid\n                break\n            else:\n                r = mid - 1\n                ans = mid\n        print(ans + a - 1)", "def add_messages(start, end, total, x):\n    second_half = total * (total + 1) >> 1\n    mid = start + end >> 1\n    left = total - mid\n    messages = second_half - (left * (left + 1) >> 1)\n    past = second_half - ((left + 1) * (left + 2) >> 1)\n    if past < x <= messages:\n        return mid\n    elif past >= x:\n        return add_messages(start, mid - 1, total, x)\n    else:\n        return add_messages(mid + 1, end, total, x)\n\ndef first_messages(start, end, x):\n    mid = start + end >> 1\n    messages = mid * (mid + 1) >> 1\n    past = mid * (mid - 1) >> 1\n    if past < x <= messages:\n        return mid\n    elif past >= x:\n        return first_messages(start, mid - 1, x)\n    else:\n        return first_messages(mid + 1, end, x)\nt = int(input())\nfor _ in range(t):\n    (k, x) = list(map(int, input().split()))\n    first_half = k * (k + 1) >> 1\n    second_half = k * (k - 1) >> 1\n    if first_half + second_half <= x:\n        print(int((k << 1) - 1))\n    elif first_half <= x:\n        print(int(k + add_messages(0, k - 1, k - 1, x - first_half)))\n    else:\n        print(int(first_messages(0, k, x)))", "t = int(input())\n\ndef trinum(a, b):\n    if a >= b:\n        return b * (b + 1) // 2\n    else:\n        return a * (a + 1) // 2 + (a * (a - 1) // 2 - (2 * a - 1 - b) * (2 * a - 1 - b + 1) // 2)\nret = []\nfor i in range(t):\n    (k, x) = map(int, input().split())\n    ok = 0\n    ng = 2 * k - 1\n    while ng - ok > 1:\n        mid = (ok + ng) // 2\n        if trinum(k, mid) >= x:\n            ng = mid\n        else:\n            ok = mid\n    ret.append(ng)\nprint(*ret, sep='\\n')", "for _ in range(int(input())):\n    (k, n) = map(int, input().split())\n    (l, r) = (0, 2 * k - 1)\n    while l < r:\n        ans = 0\n        mid = (l + r) // 2\n        ans = k * (k + 1) - k - (k - 1 - mid + k) * (2 * k - mid) // 2 if mid > k else mid * (mid + 1) // 2\n        if ans >= n:\n            r = mid\n        else:\n            l = mid + 1\n    print(l)", "for _ in range(int(input())):\n    (k, n) = map(int, input().split())\n    (l, r) = (0, 2 * k - 1)\n    while l < r:\n        ans = 0\n        mid = (l + r) // 2\n        ans = k * (k + 1) - k - (k - 1 - mid + k) * (2 * k - mid) // 2 if mid > k else mid * (mid + 1) // 2\n        if ans >= n:\n            r = mid\n        else:\n            l = mid + 1\n    print(l)", "for t in range(int(input())):\n    (k, x) = map(int, input().split())\n    l = 0\n    r = 2 * k - 1\n    if x < k * k:\n        while r - l > 1:\n            m = l + (r - l) // 2\n            if m <= k:\n                s = m * (m + 1) // 2\n            else:\n                s = k * k - (2 * k - 1 - m) * (2 * k - m) // 2\n            if s < x:\n                l = m\n            else:\n                r = m\n    print(r)", "for _ in range(int(input())):\n    (k, x) = map(int, input().split())\n    (low, high) = (1, 2 * k - 1)\n    while low < high:\n        mid = (low + high) // 2\n        if mid > k:\n            v = k * k - (2 * k - 1 - mid) * (2 * k - mid) // 2\n        else:\n            v = mid * (mid + 1) // 2\n        if v < x:\n            low = mid + 1\n        else:\n            high = mid\n    print(low)", "for _ in range(int(input())):\n    (k, x) = map(int, input().split())\n    total = k * (k + 1) // 2 + k * (k - 1) // 2\n    if x >= total:\n        print(2 * k - 1)\n    elif x <= k * (k + 1) // 2:\n        l = 0\n        r = k\n        while l < r:\n            mid = (l + r) // 2\n            if x <= mid * (mid + 1) // 2:\n                r = mid\n            else:\n                l = mid + 1\n        print(r)\n    else:\n        l = 0\n        r = k - 1\n        while l < r:\n            mid = (l + r) // 2\n            temp = k - mid\n            val = total - temp * (temp - 1) // 2\n            if x <= val:\n                r = mid\n            else:\n                l = mid + 1\n        print(k + r)", "def cal(line, k):\n    if line <= k:\n        return line * (line + 1) // 2\n    else:\n        lost_line = k * 2 - 1 - line\n        return k * (k + 1) // 2 + (k - 1) * k // 2 - lost_line * (lost_line + 1) // 2\n\ndef b_search(k, x):\n    (l, r) = (1, 2 * k - 1)\n    if cal(r, k) <= x:\n        return r\n    while l < r:\n        mid = (l + r) // 2\n        tmp = cal(mid, k)\n        if tmp == x:\n            return mid\n        elif tmp < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    if cal(l, k) >= x:\n        return l\n    return l + 1\nt = int(input())\nfor i in range(t):\n    input_str = list(map(int, input().split()))\n    (k, x) = (input_str[0], input_str[1])\n    print(b_search(k, x))", "for _ in range(int(input())):\n    (k, x) = [int(i) for i in input().split()]\n    (s, e) = (1, 2 * k - 1)\n    result = None\n    r = 0\n    mid = 0\n    while s < e:\n        mid = (s + e) // 2\n        r = (k - 1 + (2 * k - mid)) * (mid - k) // 2 + k * (k + 1) // 2 if mid > k else mid * (mid + 1) // 2\n        if r > x:\n            e = mid\n        elif r < x:\n            s = mid + 1\n        else:\n            break\n    if r < x:\n        print(mid + 1)\n    else:\n        print(mid)", "for t in range(int(input())):\n    (k, x) = map(int, input().split())\n    l = 0\n    r = 2 * k - 1\n    if x < k * k:\n        while r - l > 1:\n            m = l + (r - l) // 2\n            if m <= k:\n                s = m * (m + 1) // 2\n            else:\n                s = k * k - (2 * k - 1 - m) * (2 * k - m) // 2\n            if s < x:\n                l = m\n            else:\n                r = m\n    print(r)", "def bin_search(x, k, l, r):\n    if abs(l - r) == 0:\n        print(l)\n        return\n    m = l + (r - l) // 2\n    if m <= k:\n        s = (m + 1) * m // 2\n    else:\n        n = 2 * k - 1 - m\n        s = k ** 2 - (n + 1) * n // 2\n    if s >= x:\n        bin_search(x, k, l, m)\n    else:\n        bin_search(x, k, m + 1, r)\n\ndef messages():\n    n = int(input())\n    for _ in range(n):\n        line = input()\n        (k, x) = line.split(' ')\n        k = int(k)\n        x = int(x)\n        r = 2 * k - 1\n        if k ** 2 <= x:\n            print(r)\n            continue\n        bin_search(x, k, 1, r)\nmessages()", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (k, x) = map(int, input().split())\n    (lo, hi) = (1, 2 * k - 1)\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        val = min(mid, k) * (min(mid, k) + 1) // 2\n        if mid > k:\n            val *= 2\n            val -= (2 * k - 1 - mid) * (2 * k - mid) // 2 + k\n        if val < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\nfor _ in range(int(input())):\n    print(solve())", "casos = int(input())\nfor c in range(casos):\n    (N, L) = map(int, input().split())\n    if N ** 2 <= L:\n        print(2 * N - 1)\n    else:\n        (ini, fin) = (1, 2 * N - 1)\n        exacto = False\n        while ini <= fin:\n            i = (ini + fin) // 2\n            if i <= N:\n                cant = i * (i + 1) // 2\n                if cant == L:\n                    print(i)\n                    exacto = True\n                    break\n                elif cant < L:\n                    ini = i + 1\n                else:\n                    fin = i - 1\n            else:\n                cant = i * (i + 1) // 2 - (i - N) * (i - N + 1)\n                if cant == L:\n                    print(i)\n                    exacto = True\n                    break\n                elif cant < L:\n                    ini = i + 1\n                else:\n                    fin = i - 1\n        if not exacto:\n            if cant < L:\n                print(i + 1)\n            else:\n                print(i)", "def bsqrt(n):\n    assert n >= 0\n    if n <= 1:\n        return n\n    l = 1\n    r = n\n    while r - l > 1:\n        m = (r + l) // 2\n        if m * m <= n:\n            l = m\n        else:\n            r = m\n    return l\n\ndef base_algo(k, x):\n    return (bsqrt(8 * x + 1) - 1) // 2\nfor _ in range(int(input())):\n    (k, x) = map(int, input().split())\n    if x >= k ** 2:\n        print(2 * k - 1)\n    else:\n        q = base_algo(k, x)\n        if q <= k and (q + 1) * q // 2 == x:\n            print(q)\n        elif q < k and (q + 1) * q // 2 != x:\n            print(q + 1)\n        else:\n            print(2 * k - 1 - base_algo(k, k ** 2 - x))", "t = int(input())\nwhile t:\n    (k, n) = map(int, input().split())\n    (l, r) = (0, 2 * k - 1)\n    while l < r:\n        ans = 0\n        mid = (l + r) // 2\n        if mid > k:\n            ans = k * (k + 1) - k - (k - 1 - mid + k) * (2 * k - mid) // 2\n        else:\n            ans = mid * (mid + 1) // 2\n        if ans >= n:\n            r = mid\n        else:\n            l = mid + 1\n    print(l)\n    t -= 1", "t = int(input())\nwhile t:\n    (k, n) = map(int, input().split())\n    (l, r) = (0, 2 * k - 1)\n    while l < r:\n        ans = 0\n        mid = (l + r) // 2\n        if mid > k:\n            ans = k * (k + 1) - k - (k - 1 - mid + k) * (2 * k - mid) // 2\n        else:\n            ans = mid * (mid + 1) // 2\n        if ans >= n:\n            r = mid\n        else:\n            l = mid + 1\n    print(l)\n    t -= 1", "def main():\n    n = int(input())\n    for i in range(n):\n        (k, x) = map(int, input().split(' '))\n        if x >= k * k:\n            print(2 * k - 1)\n            continue\n        res = solve(0, 2 * k - 1, x, k)\n        print(res)\n\ndef solve(low, high, x, k):\n    mid = low + (high - low) // 2\n    mid_value = calculate_sum(k, mid)\n    if high >= low:\n        if mid_value > x:\n            return solve(low, mid - 1, x, k)\n        elif mid_value < x:\n            return solve(mid + 1, high, x, k)\n        else:\n            if mid_value == x:\n                return mid\n            return mid + 1\n    if mid_value == x:\n        return mid\n    return mid + 1\n\ndef calculate_sum(k, index):\n    n = 2 * k - 1\n    if index <= k:\n        return index * (index + 1) // 2\n    else:\n        return k * k - (n - index) * (n - index + 1) // 2\nmain()", "def totalEmoticons(i, k):\n    if i <= k:\n        return i * (i + 1) // 2\n    else:\n        return k * k - (2 * k - 1 - i) * (2 * k - i) // 2\n\ndef binarySearch(k, start, end, target):\n    mid = (start + end) // 2\n    val = totalEmoticons(mid, k)\n    if start < end:\n        if val < target:\n            return binarySearch(k, mid + 1, end, target)\n        elif val == target:\n            return mid\n        else:\n            return binarySearch(k, start, mid, target)\n    else:\n        return start\nt = int(input())\nfor i in range(t):\n    [k, x] = [int(num) for num in input().split(' ')]\n    if k * (k + 1) <= x:\n        print(2 * k - 1)\n    else:\n        print(binarySearch(k, 1, 2 * k - 1, x))", "def solve(k, x):\n    tri1 = f(k)\n    tri2 = f(k - 1)\n    triAll = tri1 + tri2\n    if triAll <= x:\n        print(2 * k - 1)\n        return\n\n    def getchar(x):\n        result = 0\n        if x > k:\n            result = triAll\n            result -= f(2 * k - 1 - x)\n        else:\n            result = f(x)\n        return result\n    l_mes = 0\n    u_mes = 2 * k\n    while u_mes - l_mes != 1:\n        m_mes = (u_mes + l_mes) // 2\n        if getchar(m_mes) >= x:\n            u_mes = m_mes\n        else:\n            l_mes = m_mes\n    print(u_mes)\n\ndef f(x):\n    return (x * x + x) // 2\n\ndef main():\n    for _ in range(int(input())):\n        (k, x) = [int(x) for x in input().split()]\n        solve(k, x)\nmain()", "def find_sum(lines, apex):\n    x = 0\n    if lines > apex:\n        x += apex ** 2 + (lines - 2 * apex) * (2 * apex - 1 - lines) // 2\n    else:\n        x += lines * (lines + 1) // 2\n    return x\n\ndef binary_search(target, apex):\n    (high, low) = (2 * apex - 1, 0)\n    while high > low:\n        mid = (high + low) // 2\n        if find_sum(mid, apex) < target:\n            low = mid + 1\n        else:\n            high = mid\n    return low\nt = int(input())\nfor i in range(t):\n    (k, x) = [int(i) for i in input().split()]\n    print(binary_search(x, k))", "for t in range(int(input())):\n    (k, x) = map(int, input().split())\n    (l, r) = (0, 2 * k - 1)\n    while l < r:\n        ans = 0\n        mid = (l + r) // 2\n        if mid > k:\n            ans = k * (k + 1) - k - (k - 1 - mid + k) * (2 * k - mid) // 2\n        else:\n            ans = mid * (mid + 1) // 2\n        if ans >= x:\n            r = mid\n        else:\n            l = mid + 1\n    print(l)", "def S(n):\n    return n * (n + 1) // 2\nt = int(input())\nfor i in range(t):\n    (k, x) = map(int, input().split())\n    if k * k <= x:\n        print(2 * k - 1)\n        continue\n    low = 0\n    high = 2 * k\n    while low + 1 < high:\n        mid = (low + high) // 2\n        if mid <= k:\n            r = S(mid)\n        else:\n            r = k * k - S(2 * k - mid - 1)\n        if r >= x:\n            high = mid\n        else:\n            low = mid\n    if r >= x:\n        print(mid)\n    else:\n        print(mid + 1)", "from sys import stdin\ninput = stdin.readline\n\ndef total(k, l):\n    if l <= k:\n        return l * (l + 1) // 2\n    else:\n        diff = l - k\n        value = k * (k + 1) // 2\n        value += k * (k - 1) // 2 - (k - diff) * (k - 1 - diff) // 2\n        return value\nfor _ in range(int(input())):\n    (k, x) = map(int, input().split())\n    if total(k, 2 * k - 1) <= x:\n        print(2 * k - 1)\n        continue\n    (low, high, res) = (0, 2 * k, 0)\n    while low < high:\n        mid = (low + high) // 2\n        if mid == low:\n            if total(k, low) >= x:\n                res = low\n            else:\n                res = high\n            break\n        val = total(k, mid)\n        if val == x:\n            res = mid\n            break\n        elif val < x:\n            low = mid\n        else:\n            high = mid\n    print(res)", "t = int(input())\n\ndef cnt(n, m):\n    if m < n:\n        return m * (m + 1) // 2\n    elif m == n:\n        return n * (n + 1) // 2\n    elif m > n:\n        dm = (n - 1) * 2 + 1 - m\n        mn = n - 1\n        als = mn * (mn + 1) + n\n        als -= dm * (dm + 1) // 2\n        return als\nfor i in range(t):\n    (n, b) = list(map(int, input().split()))\n    l = 0\n    r = (n - 1) * 2 + 2\n    while r - l > 1:\n        m = (r + l) // 2\n        am = cnt(n, m)\n        if am <= b:\n            l = m\n        else:\n            r = m\n    if l == (n - 1) * 2 + 1:\n        print(l)\n    elif cnt(n, l) < b:\n        print(l + 1)\n    else:\n        print(l)", "for tc in range(int(input())):\n    (k, x) = map(int, input().split())\n    if k == 1:\n        print(1)\n        continue\n    (st, en, top_sum) = (1, k, 0)\n    while st <= en:\n        mid = (st + en) // 2\n        if mid * (mid + 1) <= 2 * x:\n            (top_sum, st) = (mid, mid + 1)\n        else:\n            en = mid - 1\n    if top_sum * (top_sum + 1) == 2 * x:\n        print(top_sum)\n        continue\n    elif top_sum < k:\n        print(top_sum + 1)\n        continue\n    else:\n        (st, en, ans1) = (1, k - 1, 0)\n        rem_x = x - top_sum * (top_sum + 1) // 2\n        rem_sum = en * (en + 1) // 2\n        while st <= en:\n            mid = (st + en) // 2\n            mid_sum = mid * (mid + 1) // 2\n            if rem_sum - mid_sum >= rem_x:\n                st = mid + 1\n            else:\n                (en, ans1) = (mid - 1, mid)\n        print(top_sum + k - ans1)", "def find_count(K, y):\n    if y <= K:\n        return y * (y + 1) // 2\n    else:\n        return find_count(K, K) * 2 - K - find_count(K, 2 * K - 1 - y)\n\ndef lower_bound(K, x):\n    low = 0\n    high = 2 * K - 1\n    while low < high:\n        mid = (high + low) // 2\n        if find_count(K, mid) < x:\n            low = mid + 1\n        else:\n            high = mid\n    print(low)\nt = int(input())\nfor i in range(t):\n    s = input().split(' ')\n    k = int(s[0])\n    x = int(s[1])\n    lower_bound(k, x)", "t = int(input())\nwhile t:\n    (k, n) = map(int, input().split())\n    (l, r) = (0, 2 * k - 1)\n    while l < r:\n        ans = 0\n        mid = (l + r) // 2\n        if mid > k:\n            ans = k * (k + 1) - k - (k - 1 - mid + k) * (2 * k - mid) // 2\n        else:\n            ans = mid * (mid + 1) // 2\n        if ans >= n:\n            r = mid\n        else:\n            l = mid + 1\n    print(l)\n    t -= 1", "for _ in range(int(input())):\n    (k, x) = map(int, input().split())\n    left = 1\n    right = 2 * k - 1\n    while left < right:\n        mid = (left + right) // 2\n        if mid <= k:\n            val = mid * (mid + 1) // 2\n        else:\n            val = k * (k + 1) // 2 + (mid - k) * (3 * k - mid - 1) // 2\n        if val < x:\n            left = mid + 1\n        elif val > x:\n            right = mid\n        else:\n            break\n    print((left + right) // 2)", "def f(x, k):\n    if x <= k:\n        return x * (x + 1) // 2\n    else:\n        x = 2 * k - 1 - x\n        return k * (k + 1) // 2 + k * (k - 1) // 2 - x * (x + 1) // 2\nt = int(input())\nfor _ in range(t):\n    (k, x) = map(int, input().split())\n    l = 0\n    r = 2 * k - 1\n    while r - l > 1:\n        m = (l + r) // 2\n        if f(m, k) >= x:\n            r = m\n        else:\n            l = m\n    print(r)", "t = int(input())\nimport math\n\ndef calc(i, k):\n    if i <= k:\n        return (1 + i) * i // 2\n    return (1 + k) * k // 2 + (k - 1 + (k - (i - k))) * (i - k) // 2\nfor _ in range(t):\n    (k, x) = tuple(map(int, input().split()))\n    l = k * k\n    if x >= l:\n        print(2 * k - 1)\n        continue\n    res = 0\n    l = 1\n    h = 2 * k - 1\n    while l <= h:\n        m = (l + h) // 2\n        if calc(m, k) <= x:\n            l = m + 1\n        else:\n            h = m - 1\n    x -= calc(h, k)\n    if x > 0:\n        res += 1\n    print(res + h)", "def countEmotes(k, row):\n    if 1 <= row <= k:\n        return row * (row + 1) // 2\n    else:\n        val = k * (k + 1) // 2\n        rem = 2 * k - 1 - row\n        val += (k - 1) * k // 2 - rem * (rem + 1) // 2\n        return val\ntest = int(input())\nfor _ in range(test):\n    (k, x) = map(int, input().split())\n    (start, end) = (1, 2 * k - 1)\n    while start <= end:\n        mid = (start + end) // 2\n        count = countEmotes(k, mid)\n        if count < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    print(min(start, 2 * k - 1))", "for t in range(int(input())):\n    (k, x) = map(int, input().split())\n    l = 0\n    r = 2 * k - 1\n    if x < k * k:\n        while r - l > 1:\n            m = (l + r) // 2\n            if m <= k:\n                s = m * (m + 1) // 2\n            else:\n                s = k * k - (2 * k - 1 - m) * (2 * k - m) // 2\n            if s < x:\n                l = m\n            else:\n                r = m\n    print(r)", "for _ in range(int(input())):\n    (k, n) = map(int, input().split())\n    (l, r) = (0, 2 * k - 1)\n    while l < r:\n        ans = 0\n        mid = (l + r) // 2\n        ans = k * (k + 1) - k - (k - 1 - mid + k) * (2 * k - mid) // 2 if mid > k else mid * (mid + 1) // 2\n        if ans >= n:\n            r = mid\n        else:\n            l = mid + 1\n    print(l)", "def good(mid, k, x):\n    if mid <= k:\n        here = mid * (mid + 1) // 2\n        return here >= x\n    else:\n        here = k * (k + 1) // 2\n        left = 2 * k - 1 - mid\n        down = k * (k - 1) // 2\n        now = down - left * (left + 1) // 2\n        return now + here >= x\nfor _ in range(int(input())):\n    (k, x) = map(int, input().split(' '))\n    low = 0\n    high = 2 * k - 1\n    ans = 1\n    if good(high, k, x) == False:\n        ans = 2 * k - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if good(mid, k, x) == True:\n            high = mid - 1\n            ans = mid\n        else:\n            low = mid + 1\n    print(ans)", "def f(t, k):\n    if t <= k:\n        return t * (t + 1) // 2\n    else:\n        a = 2 * k - t - 1\n        f = k * k - a * (a + 1) // 2\n        return f\nfor i in range(int(input())):\n    (k, x) = map(int, input().split())\n    a = 1\n    b = 2 * k - 1\n    f1 = True\n    ans = 0\n    while a <= b:\n        mid = a + (b - a) // 2\n        value = f(mid, k)\n        if a == b and value < x and (value < f(mid + 1, k)):\n            ans += 1\n        if value < x:\n            a = mid + 1\n        elif value > x:\n            b = mid - 1\n        elif value == x:\n            f1 = False\n            break\n    print(ans + mid)", "for _ in range(int(input())):\n    (k, x) = map(int, input().split())\n    total = k * k\n    low = 1\n    high = 2 * k - 1\n    ans = 0\n    while low <= high:\n        mid = (low + high) // 2\n        valueTillNow = 0\n        if mid > k:\n            diff = mid - k\n            val = k - diff\n            sumOfRightPart = val * (val - 1) // 2\n            valueTillNow = total - sumOfRightPart\n        else:\n            valueTillNow = mid * (mid + 1) // 2\n        if valueTillNow < x:\n            low = mid + 1\n        else:\n            ans = mid\n            high = mid - 1\n    print(max(ans, high))", "def get_sum_seq(last_item: int) -> int:\n    return last_item * (last_item + 1) // 2\nfor inn in range(int(input())):\n    (k, x) = map(int, input().split())\n    (left, right) = (1, 2 * k - 1)\n    (middle, answer) = (0, right)\n    while left <= right:\n        middle = (left + right) // 2\n        if middle >= k:\n            if 2 * get_sum_seq(k) - k - get_sum_seq(2 * k - middle - 1) >= x:\n                answer = middle\n                right = middle - 1\n            else:\n                left = middle + 1\n        elif get_sum_seq(middle) >= x:\n            answer = middle\n            right = middle - 1\n        else:\n            left = middle + 1\n    print(answer)", "t = int(input())\nfor i in range(t):\n    (k, x) = map(int, input().split())\n    if k * (k + 1) // 2 + k * (k - 1) // 2 < x:\n        print(2 * k - 1)\n    elif k * (k + 1) // 2 + k * (k - 1) // 2 >= x >= k * (k + 1) // 2:\n        l = k\n        r = 2 * k - 1\n        while r - l > 1:\n            mid = (l + r) // 2\n            if (k + 1) * k // 2 + k * (mid - k) - (mid - k) * (mid - k + 1) // 2 >= x:\n                r = mid\n            else:\n                l = mid\n        mid = l\n        if (k + 1) * k // 2 + k * (mid - k) - (mid - k) * (mid - k + 1) // 2 < x:\n            mid += 1\n        if (k + 1) * k // 2 + k * (mid - k) - (mid - k) * (mid - k + 1) // 2 < x:\n            mid += 1\n        print(mid)\n    else:\n        l = 1\n        r = k\n        while r - l > 1:\n            mid = (l + r) // 2\n            if mid * (mid + 1) // 2 >= x:\n                r = mid\n            else:\n                l = mid\n        mid = l\n        if mid * (mid + 1) // 2 < x:\n            mid += 1\n        if mid * (mid + 1) // 2 < x:\n            mid += 1\n        print(mid)", "def calc(line, size):\n    return line * (line + 1) // 2 - max(0, line - size) * (line - size + 1)\n\ndef bin_search(emoji_limit, triangle_size):\n    lowest_line = 1\n    highest_line = 2 * triangle_size - 1\n    while highest_line - lowest_line > 1:\n        mid_line = (lowest_line + highest_line) // 2\n        emoji_printed = calc(mid_line, triangle_size)\n        if emoji_printed < emoji_limit:\n            lowest_line = mid_line + 1\n        else:\n            highest_line = mid_line\n    if calc(lowest_line, triangle_size) >= emoji_limit:\n        return lowest_line\n    else:\n        return highest_line\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(bin_search(b, a))", "for _ in range(int(input())):\n    (k, x) = map(int, input().split())\n    (low, high) = (0, 2 * k - 1)\n    while low < high:\n        ans = 0\n        mid = (low + high) // 2\n        ans = k * (k + 1) - k - (2 * k - mid - 1) * (2 * k - mid) // 2 if mid > k else mid * (mid + 1) // 2\n        if ans >= x:\n            high = mid\n        else:\n            low = mid + 1\n    print(low)", "def total(n):\n    return n * (n + 1) // 2\nfor _ in range(int(input())):\n    (k, x) = map(int, input().split())\n    if total(k) + total(k - 1) <= x:\n        print(2 * k - 1)\n    else:\n        ch2 = total(k)\n        if ch2 > x:\n            (l, r) = (0, k)\n            while l + 1 < r:\n                mid = (l + r) // 2\n                if total(mid) < x:\n                    l = mid\n                elif total(mid) > x:\n                    r = mid\n                else:\n                    r = mid\n            print(r)\n        elif ch2 < x:\n            (l, r) = (0, k)\n            while l + 1 < r:\n                mid = (l + r) // 2\n                if k ** 2 - total(mid + 1) < x:\n                    r = mid\n                elif k ** 2 - total(mid + 1) > x:\n                    l = mid\n                else:\n                    l = mid\n            print(2 * k - r - 1)\n        else:\n            print(k)", "def count(k, lines):\n    ret = 0\n    start = min(lines, k)\n    ret += (start + 1) * start // 2\n    if lines > k:\n        end = lines - k\n        ret += end * k - (end + 1) * end // 2\n    return ret\n\ndef solve():\n    (k, x) = [int(x) for x in input().split()]\n    (a, b) = (1, 2 * k - 1)\n    while a < b:\n        c = (a + b) // 2\n        printed = count(k, c)\n        if printed < x:\n            a = c + 1\n        else:\n            b = c\n    return a\nt = int(input())\nfor _ in range(t):\n    print(solve())", "for _ in range(int(input())):\n    (k, n) = map(int, input().split())\n    (l, r) = (0, 2 * k - 1)\n    while l < r:\n        ans = 0\n        mid = (l + r) // 2\n        if mid > k:\n            ans = k * (k + 1) - k - (k - 1 - mid + k) * (2 * k - mid) // 2\n        else:\n            ans = mid * (mid + 1) // 2\n        if ans >= n:\n            r = mid\n        else:\n            l = mid + 1\n    print(l)", "for t in range(int(input())):\n    (k, x) = map(int, input().split())\n    (l, r) = (0, 2 * k - 1)\n    if x < k * k:\n        while r - l > 1:\n            m = l + (r - l) // 2\n            if m <= k:\n                s = m * (m + 1) // 2\n            else:\n                s = k * k - (2 * k - 1 - m) * (2 * k - m) // 2\n            if s < x:\n                l = m\n            else:\n                r = m\n    print(r)", "for iii in range(int(input())):\n    (k, x) = map(int, input().split())\n    n = 2 * k\n    n -= 1\n    low = 0\n    high = n\n    ans = 0\n    while low <= high:\n        mid = (low + high) // 2\n        summ = 0\n        if mid <= k:\n            summ = mid * (mid + 1) // 2\n        else:\n            summ = k * (k + 1) // 2\n            xx = mid - k\n            summ = summ + xx * (2 * (k - 1) - (xx - 1)) // 2\n        if summ == x:\n            ans = mid\n            break\n        if summ < x:\n            ans = mid\n            low = mid + 1\n        else:\n            high = mid - 1\n    summ = 0\n    if ans <= k:\n        summ = mid * (mid + 1) // 2\n    else:\n        summ = k * (k + 1) // 2\n        xx = ans - k\n        summ = summ + xx * (2 * (k - 1) - (xx - 1)) // 2\n    if summ == x:\n        print(ans)\n    else:\n        print(min(ans + 1, n))", "def f(a, n):\n    return n * (a + a + n - 1) // 2\nfor _ in range(int(input())):\n    (k, x) = map(int, input().split())\n    l = 1\n    r = 2 * k\n    while r - l != 1:\n        m = (l + r) // 2\n        if m > k:\n            a = f(1, k)\n            b = f(k - (m - k) + 1, m - k - 1)\n            if x > a + b:\n                l = m\n            else:\n                r = m\n        else:\n            a = f(1, m - 1)\n            if x > a:\n                l = m\n            else:\n                r = m\n    print(l)", "def s(tri, c):\n    half = (1 + tri) * tri // 2\n    if c == tri:\n        return half\n    elif c < tri:\n        return half - (tri + c + 1) * (tri - c) // 2\n    elif c > tri:\n        return half + (3 * tri - 1 - c) * (c - tri) // 2\n\ndef solve(tri, ban):\n    l = 0\n    r = 2 * tri - 1\n    while l + 1 != r:\n        mid = (l + r) // 2\n        if s(tri, mid) >= ban:\n            r = mid\n        else:\n            l = mid\n    return r\nn = int(input())\nfor i in range(n):\n    (triangle, ban) = map(int, input().split())\n    print(solve(triangle, ban))", "import math\n\ndef isPossible(num_emotes, num_lines, k):\n    tempcount = 0\n    if num_lines <= k:\n        tempcount += num_lines * (num_lines - 1) // 2\n        tempcount += 1\n        if tempcount <= num_emotes:\n            return True\n        else:\n            return False\n    elif num_lines > k:\n        tempcount += k * k\n        templines = 2 * k - 1 - num_lines + 1\n        tempcount -= templines * (templines + 1) // 2\n        tempcount += 1\n        if tempcount <= num_emotes:\n            return True\n        else:\n            return False\n\ndef numLinesPossible(k, x):\n    if x >= k * k:\n        print(2 * k - 1)\n        return\n    (l, h) = (1, 2 * k - 1)\n    ans = -math.inf\n    while l <= h:\n        m = l + (h - l) // 2\n        if isPossible(x, m, k):\n            ans = max(ans, m)\n            l = m + 1\n        else:\n            h = m - 1\n    print(ans)\n    return\nt = int(input())\nfor t in range(1, t + 1):\n    arr = [int(j) for j in input().split()]\n    (k, x) = (arr[0], arr[1])\n    numLinesPossible(k, x)", "from itertools import permutations as per\nfrom math import factorial as fact\nfrom difflib import SequenceMatcher\nt = int(input())\nfor _ in range(t):\n    (k, x) = map(int, input().split())\n    if k * k <= x:\n        print(2 * k - 1)\n    else:\n        (l, r) = (1, 2 * k - 1)\n        while l <= r:\n            m = (l + r) // 2\n            if m <= k:\n                e = m * (m - 1) // 2 + 1\n            else:\n                e = k * k - (2 * k - m) * (2 * k - m + 1) // 2 + 1\n            if e <= x:\n                l = m + 1\n            else:\n                r = m - 1\n        print(r)", "k = None\nmid_sum = None\nk_sum = None\n\ndef get_sum(num):\n    curr_sum = 0\n    if num > k:\n        return mid_sum + k_sum - get_sum(2 * k - 1 - num)\n    else:\n        return num * (num + 1) // 2\nfor _ in range(int(input())):\n    (k, x) = map(int, input().split())\n    lo = 1\n    hi = 2 * k - 1\n    mid_sum = k * (k + 1) // 2\n    k_sum = k * (k - 1) // 2\n    ans = hi\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        curr_sum = get_sum(mid)\n        if curr_sum == x:\n            ans = mid\n            break\n        elif curr_sum < x:\n            lo = mid + 1\n        else:\n            ans = mid\n            hi = mid - 1\n    print(ans)", "def check(terms):\n    t = min(k, terms)\n    max_mess = t * (t + 1) // 2\n    if terms > k:\n        temp = k * (k - 1) // 2\n        ex = k - 1 - terms + t\n        temp -= ex * (ex + 1) // 2\n        max_mess += temp\n    return max_mess < x\nfor _ in range(int(input())):\n    (k, x) = map(int, input().split())\n    low = 1\n    high = 2 * k - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if check(mid):\n            low = mid + 1\n        else:\n            high = mid - 1\n    print(min(low, 2 * k - 1))", "for tc in range(int(input())):\n    (k, x) = map(int, input().split())\n    if k == 1:\n        print(1)\n        continue\n    (st, en, top_sum) = (1, k, 0)\n    while st <= en:\n        mid = int((st + en) // 2)\n        if mid * (mid + 1) <= 2 * x:\n            (top_sum, st) = (mid, mid + 1)\n        else:\n            en = mid - 1\n    if top_sum * (top_sum + 1) == 2 * x:\n        print(top_sum)\n        continue\n    elif top_sum < k:\n        print(top_sum + 1)\n        continue\n    else:\n        (st, en, ans1) = (1, k - 1, 0)\n        rem_x = x - top_sum * (top_sum + 1) // 2\n        rem_sum = int(en * (en + 1) // 2)\n        while st <= en:\n            mid = int((st + en) // 2)\n            mid_sum = mid * (mid + 1) // 2\n            if rem_sum - mid_sum >= rem_x:\n                st = mid + 1\n            else:\n                (en, ans1) = (mid - 1, mid)\n        print(top_sum + k - ans1)", "t = int(input())\nfor i in range(t):\n    c = 1\n    s = 0\n    (k, x) = map(int, input().split())\n    s1 = k * (k + 1) // 2\n    if k == 1:\n        print(1)\n    elif k * k <= x:\n        print(2 * k - 1)\n    elif k * (k + 1) // 2 >= x:\n        (b, l) = (0, k)\n        while b + 1 < l:\n            m = int((b + l) // 2 + 0.5)\n            if m * (m + 1) // 2 > x:\n                l = m\n            elif m * (m + 1) // 2 < x:\n                b = m\n            else:\n                print(m)\n                break\n        else:\n            print(l)\n    else:\n        b = 0\n        l = k - 1\n        t = l * (l + 1) // 2\n        while b + 1 < l:\n            m = int((b + l) // 2 + 0.5)\n            if t - m * (m + 1) // 2 + s1 < x:\n                l = m\n            elif t - m * (m + 1) // 2 + s1 > x:\n                b = m\n            else:\n                print(2 * k - m - 1)\n                break\n        else:\n            print(2 * k - l)", "import sys\nfrom turtle import end_fill\ninput = sys.stdin.readline\n\ndef solve():\n    (k, x) = map(int, input().split())\n    (lowest, higest) = (1, 2 * k - 1)\n    while lowest < higest:\n        mid = lowest + (higest - lowest) // 2\n        val = min(mid, k) * (min(mid, k) + 1) // 2\n        if mid > k:\n            val *= 2\n            val -= (2 * k - 1 - mid) * (2 * k - mid) // 2 + k\n        if val < x:\n            lowest = mid + 1\n        else:\n            higest = mid\n    return lowest\nfor _ in range(int(input())):\n    print(solve())", "def get(x):\n    return x * (x + 1) // 2\nfor _ in range(int(input())):\n    (k, x) = map(int, input().split())\n    l = 1\n    r = 2 * k - 1\n    res = 2 * k - 1\n    over = False\n    while l <= r:\n        mid = (l + r) // 2\n        if mid >= k:\n            over = get(k) + get(k - 1) - get(2 * k - 1 - mid) >= x\n        else:\n            over = get(mid) >= x\n        if over:\n            res = mid\n            r = mid - 1\n        else:\n            l = mid + 1\n    print(res)", "def find_sum(k, mid):\n    if mid <= k:\n        return mid * (mid + 1) // 2\n    last = 2 * k - 1\n    result = k * (k + 1) // 2\n    result += k * (k - 1) // 2 - (last - mid) * (last - mid + 1) // 2\n    return result\ntest = int(input())\nfor _ in range(test):\n    (k, x) = list(map(int, input().strip().split()))\n    start = 1\n    end = 2 * k - 1\n    messages = end\n    while start <= end:\n        mid = start + (end - start) // 2\n        emotes = find_sum(k, mid)\n        if emotes < x:\n            start = mid + 1\n        else:\n            messages = mid\n            end = mid - 1\n    print(messages)", "def emote_count(k, m):\n    if m <= k:\n        return m * (m + 1) // 2\n    else:\n        return k * (k + 1) // 2 + k * (k - 1) // 2 - (2 * k - 1 - m) * (2 * k - 1 - m + 1) // 2\nt = int(input())\nwhile t > 0:\n    (k, x) = map(int, input().split())\n    if k * k <= x:\n        print(2 * k - 1)\n    else:\n        low = 1\n        high = 2 * k - 1\n        mid = (low + high) // 2\n        msg = 0\n        while low <= high:\n            mid = (low + high) // 2\n            val = emote_count(k, mid)\n            if val <= x:\n                low = mid + 1\n            else:\n                msg = mid\n                high = mid - 1\n        val = emote_count(k, msg)\n        if val >= x and emote_count(k, msg - 1) < x:\n            print(msg)\n        else:\n            print(msg - 1)\n    t -= 1", "def solve(mid, x, k):\n    store = min(mid, k)\n    ans = store * (store + 1) // 2\n    mid -= store\n    tem = mid * (2 * (k - 1) + (mid - 1) * -1)\n    tem //= 2\n    ans += tem\n    if ans < x:\n        return True\n    else:\n        return False\nimport math\nfor t in range(int(input())):\n    (k, x) = map(int, input().split())\n    l = 1\n    h = 2 * k - 1\n    while l < h:\n        mid = (l + h) // 2\n        if solve(mid, x, k):\n            l = mid + 1\n        else:\n            h = mid\n    print(l)", "t = int(input())\nfor i in range(t):\n    (k, x) = map(int, input().split())\n    left = 1\n    right = 2 * k - 1\n    total = 2 * k - 1\n    mid = left + (right - left) // 2\n    while left <= right:\n        if mid <= (total + 1) // 2:\n            comp = mid * (mid + 1) // 2\n            if comp < x:\n                left = mid + 1\n                mid = left + (right - left) // 2\n            else:\n                right = mid - 1\n                mid = left + (right - left) // 2\n        else:\n            comp = k * (k + 1) // 2\n            dif = mid - k\n            comp += (2 * k - 1 - dif) * dif // 2\n            if comp < x:\n                left = mid + 1\n                mid = left + (right - left) // 2\n            else:\n                right = mid - 1\n                mid = left + (right - left) // 2\n    if mid <= (total + 1) // 2:\n        comp = mid * (mid + 1) // 2\n        if comp < x and mid != 2 * k - 1:\n            print(mid + 1)\n        else:\n            print(mid)\n    else:\n        comp = k * (k + 1) // 2\n        dif = mid - k\n        comp += (2 * k - 1 - dif) * dif // 2\n        if comp < x and mid != 2 * k - 1:\n            print(mid + 1)\n        else:\n            print(mid)", "def get(n, k):\n    cnt = 2 * k - 1\n    l = min(n, k)\n    r = max(0, n - l)\n    return l * (l + 1) // 2 + r * (cnt - r) // 2\n\ndef solve():\n    (k, x) = map(int, input().split())\n    (l, r) = (0, 2 * k)\n    while r > l + 1:\n        mid = (l + r) // 2\n        if get(mid, k) <= x:\n            l = mid\n        else:\n            r = mid\n    ans = l\n    if get(l, k) < x:\n        ans = r\n    print(min(ans, 2 * k - 1))\nT = int(input())\nfor _ in range(T):\n    solve()", "def ok(k, x, now):\n    ans = 0\n    ok = min(now, k)\n    ans += ok * (ok + 1) // 2\n    now -= ok\n    a = k - 1\n    dec = -1\n    n = now\n    temp = now * (2 * a + (n - 1) * dec)\n    temp = temp // 2\n    ans += temp\n    if ans < x:\n        return 1\n    return 0\nfor i in range(int(input())):\n    (n, x) = list(map(int, input().split()))\n    l = 1\n    h = 2 * n - 1\n    while l < h:\n        m = (l + h) // 2\n        if ok(n, x, m):\n            l = m + 1\n            continue\n        h = m\n    print(l)"]