["import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, k) = map(int, inp().split())\n    d = dict()\n    for i in inp():\n        d[i] = d.get(i, 0) + 1\n    del d['\\n']\n    pairs = 0\n    for i in d:\n        pairs += d[i] // 2\n    pk = pairs // k\n    if n - pk * 2 * k >= k:\n        print(pk * 2 + 1)\n    else:\n        print(pk * 2)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, k) = map(int, inp().split())\n    d = dict()\n    for i in inp():\n        d[i] = d.get(i, 0) + 1\n    del d['\\n']\n    pairs = 0\n    for i in d:\n        pairs += d[i] // 2\n    pk = pairs // k\n    if n - pk * 2 * k >= k:\n        print(pk * 2 + 1)\n    else:\n        print(pk * 2)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "import sys\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    s = input().strip()\n    mp = {}\n    for i in s:\n        if i in mp:\n            mp[i] += 1\n        else:\n            mp[i] = 1\n    x = 0\n    for i in mp.values():\n        x += i // 2\n    ans = x // k * 2\n    rem = n - ans * k\n    if rem >= k:\n        ans += 1\n    print(ans)\n    t -= 1", "cases = int(input())\nfinalstring = ''\nfor case in range(cases):\n    numbers = [int(x) for x in input().split(' ')]\n    givenstring = input()\n    finalvalue = 1\n    myDict = {}\n    for char in givenstring:\n        myDict.setdefault(char, 0)\n        myDict[char] += 1\n    duplicate = 0\n    nonduplicate = 0\n    for (key, value) in myDict.items():\n        if value % 2 == 0:\n            duplicate += value\n        else:\n            duplicate += value - 1\n            nonduplicate += 1\n    shortmax = numbers[0] // numbers[1]\n    while shortmax > 1:\n        if shortmax % 2 != 0:\n            unique = numbers[1] if nonduplicate >= numbers[1] else nonduplicate\n            if shortmax * numbers[1] <= duplicate + unique:\n                finalvalue = shortmax\n                break\n            else:\n                shortmax -= 1\n        elif shortmax * numbers[1] <= duplicate:\n            finalvalue = shortmax\n            break\n        else:\n            shortmax -= 1\n    finalstring += f'{finalvalue}\\n'\nprint(finalstring)", "cases = int(input())\nfinalstring = ''\nfor case in range(cases):\n    numbers = [int(x) for x in input().split(' ')]\n    givenstring = input()\n    myDict = {}\n    for char in givenstring:\n        myDict.setdefault(char, 0)\n        myDict[char] += 1\n    duplicate = 0\n    nonduplicate = 0\n    for (key, value) in myDict.items():\n        if value % 2 == 0:\n            duplicate += value\n        else:\n            duplicate += value - 1\n            nonduplicate += 1\n    shortmax = numbers[0] // numbers[1]\n    while shortmax > 1:\n        if shortmax % 2 != 0:\n            unique = numbers[1] if nonduplicate >= numbers[1] else nonduplicate\n            if shortmax * numbers[1] <= duplicate + unique:\n                break\n            else:\n                shortmax -= 1\n        elif shortmax * numbers[1] <= duplicate:\n            break\n        else:\n            shortmax -= 1\n    finalstring += f'{shortmax}\\n'\nprint(finalstring)", "from functools import lru_cache as cache\nfrom collections import Counter\nimport math\nfrom heapq import *\nimport sys\n\ndef get_int():\n    return int(input())\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef main():\n    testcases = get_int()\n    for i in range(testcases):\n        (n, k) = get_ints()\n        s = get_string()\n        print(solve(s, k, n))\n\ndef solve(s, k, n):\n    start = 1\n    end = n // k\n    count = Counter(s)\n    pairs = 0\n    ones = 0\n    for letter in count.keys():\n        if count[letter] % 2 == 0:\n            pairs += count[letter] // 2\n        else:\n            pairs += count[letter] // 2\n            ones += 1\n    while start < end:\n        mid = start + math.ceil((end - start + 1) / 2)\n        current_ones = ones\n        current_pairs = pairs\n        invalid = False\n        for i in range(k):\n            current_pairs -= mid // 2\n            if mid % 2 == 1:\n                if current_ones > 0:\n                    current_ones -= 1\n                else:\n                    current_ones += 1\n                    current_pairs -= 1\n            if current_pairs < 0:\n                invalid = True\n                break\n        if invalid:\n            end = mid - 1\n        else:\n            start = mid\n    return start\nmain()", "def coloring(s, k):\n    pairs = 0\n    paired = {'a': True, 'b': True, 'c': True, 'd': True, 'e': True, 'f': True, 'g': True, 'h': True, 'i': True, 'j': True, 'k': True, 'l': True, 'm': True, 'n': True, 'o': True, 'p': True, 'q': True, 'r': True, 's': True, 't': True, 'u': True, 'v': True, 'w': True, 'x': True, 'y': True, 'z': True}\n    for alph in s:\n        if paired[alph]:\n            paired[alph] = False\n        else:\n            paired[alph] = True\n            pairs += 1\n    single = tuple(paired.values()).count(False) + 2 * (pairs % k)\n    if single >= k:\n        return 1 + 2 * (pairs // k)\n    else:\n        return 2 * (pairs // k)\nt = int(input())\ntests = [0 for i in range(t)]\nn = 0\nk = 0\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    tests[i] = coloring(input(), k)\nfor test in tests:\n    print(test)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, sys.stdin.readline().split())\n    s = sys.stdin.readline().rstrip()\n    su = 0\n    ans = 0\n    alpha = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0, 'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    for i in s:\n        alpha[i] += 1\n    for i in alpha.keys():\n        if alpha[i] >= 2:\n            su = su + alpha[i] // 2\n    ans = su // k * 2\n    if su % k * 2 + n - su * 2 >= k:\n        ans += 1\n    print(ans)", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom collections import deque\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    (n, k) = int_arr()\n    st = input()\n    cnt = 0\n    d = dict()\n    rem = 0\n    for i in st:\n        d[i] = d.get(i, 0) + 1\n    for i in d.values():\n        if i % 2 != 0:\n            cnt += i - 1\n            rem += 1\n        else:\n            cnt += i\n    ans = cnt // k\n    rem += cnt % k\n    if ans % 2 == 0:\n        if rem // k > 0:\n            print(ans + 1)\n        else:\n            print(max(ans, 1))\n    else:\n        print(max(ans, 1))", "import math\nfrom os import remove\n\ndef test():\n    (n, k) = map(int, input().split())\n    pairs = 0\n    st = []\n    ch = input()\n    for i in range(n):\n        if ch[i] in st:\n            st.remove(ch[i])\n            pairs += 1\n        else:\n            st.append(ch[i])\n    ones = len(st)\n    minlen = pairs // k * 2\n    if pairs % k * 2 + ones >= k:\n        minlen += 1\n    print(int(minlen))\nt = int(input())\nfor i in range(t):\n    test()", "for l in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    st = input()\n    dic = {i: 0 for i in st}\n    for i in st:\n        dic[i] += 1\n    ts = 0\n    for i in dic:\n        ts += dic[i] // 2\n    ans = 2 * (ts // k)\n    if n - ans * k >= k:\n        ans += 1\n    print(ans)", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip('\\r\\n')\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    letters = [0] * 26\n    for c in s:\n        letters[ord(c) - 97] += 1\n    num_evens = 0\n    for x in letters:\n        num_evens += x // 2\n    r = n // k + 1\n    l = 1\n    cur = (l + r) // 2\n    while r - l > 1:\n        if cur // 2 * k <= num_evens:\n            l = cur\n        else:\n            r = cur\n        cur = (l + r) // 2\n    print(cur)", "import sys\nfrom collections import Counter\n\ndef read_line():\n    return sys.stdin.readline().strip()\n\ndef read_ints_line():\n    return [int(x) for x in read_line().split()]\nt = int(read_line())\nfor _ in range(t):\n    (n, k) = tuple(read_ints_line())\n    s = [ord(x) - ord('a') for x in read_line()]\n    cnt = Counter(s)\n    cnt_uneven = len([x for x in cnt.values() if x % 2 == 1])\n    even_len = (n - cnt_uneven) // k\n    even_len -= even_len % 2\n    extra = n - even_len * k\n    max_len = even_len + int(extra >= k)\n    print(max_len)", "def solve():\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        a = input()\n        mp = {}\n        for ele in a:\n            mp[ele] = mp.get(ele, 0) + 1\n        pair = 0\n        for key in mp:\n            pair += mp[key] // 2\n        left = len(a) - pair * 2\n        ans = 2 * (pair // k)\n        left += pair % k * 2\n        if left >= k:\n            print(ans + 1)\n        else:\n            print(ans)\nsolve()", "def solve():\n    (n, k) = map(int, input().split())\n    s = input()\n    d = {}\n    for c in s:\n        d[c] = d.get(c, 0) + 1\n    pairs = 0\n    for v in d.values():\n        pairs += v // 2\n    sz = pairs // k * 2\n    rem = n - pairs // k * k * 2\n    if rem >= k:\n        print(sz + 1)\n    else:\n        print(sz)\nt = int(input())\nfor _ in range(t):\n    solve()", "def solve():\n    (n, k) = map(int, input().split())\n    s = input()\n    d = dict()\n    for x in s:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    pair = 0\n    ones = 0\n    for x in d:\n        pair += d[x] // 2\n        d[x] = d[x] % 2\n        ones += d[x]\n    ans = pair // k * 2\n    ones += pair % k * 2\n    if ones >= k:\n        ans += 1\n    return ans\nt = int(input())\nfor i in range(t):\n    print(solve())", "def solve():\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    cnt = {i: 0 for i in s}\n    for i in s:\n        cnt[i] += 1\n    ts = 0\n    for i in cnt:\n        ts += cnt[i] // 2\n    ans = 2 * (ts // k)\n    if n - ans * k >= k:\n        ans += 1\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    sets = list(set(s))\n    val = 0\n    for i in sets:\n        val += s.count(i) // 2\n    indi = n - val * 2\n    ans = 0\n    while val >= k:\n        ans += 2\n        val -= k\n    if val * 2 + indi >= k:\n        ans += 1\n    print(ans)", "for l in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    st = input()\n    dic = {i: 0 for i in st}\n    for i in st:\n        dic[i] += 1\n    ts = 0\n    for i in dic:\n        ts += dic[i] // 2\n    ans = 2 * (ts // k)\n    if n - ans * k >= k:\n        ans += 1\n    print(ans)", "import sys\nfrom os import path\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef solve():\n    (n, k) = map(int, input().split())\n    a = input()\n    dict = {}\n    for i in range(n):\n        if a[i] not in dict:\n            dict[a[i]] = 1\n        else:\n            dict[a[i]] += 1\n    pair = 0\n    odd = 0\n    for element in dict:\n        pair += dict[element] // 2\n        odd += dict[element] % 2\n    odd += 2 * (pair % k)\n    ans = pair // k * 2 + (odd >= k)\n    print(ans)\nq = 1\nq = int(input())\nfor i in range(q):\n    solve()", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(i) for i in input().strip().split()]\n    s = input()\n    d = {}\n    for x in s:\n        d[x] = d.get(x, 0) + 1\n    count = 0\n    left = set()\n    for i in d:\n        if d[i] % 2 == 0:\n            count += d[i]\n        else:\n            count += d[i] - 1\n            left.add(i)\n    ans = count // k\n    if len(left) < k - count % k or ans % 2 == 1:\n        print(ans)\n    else:\n        print(ans + 1)", "for t in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    if n < 2 * k:\n        print(1)\n    else:\n        d = {}\n        for i in s:\n            if i not in d:\n                d[i] = 1\n            else:\n                d[i] += 1\n        l = list(d.values())\n        pairs = 0\n        for i in l:\n            pairs = pairs + i // 2\n        ans = pairs // k * 2\n        left1 = n - ans * k\n        if left1 >= k:\n            ans += 1\n        print(ans)", "def palindromesColoring(n, k, s):\n    if k == n:\n        return 1\n    s = list(s)\n    d = {}\n    for x in s:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    a = 0\n    b = 0\n    for x in d:\n        if d[x] % 2 == 0:\n            a += d[x] // 2\n        else:\n            a += d[x] // 2\n            b += 1\n    c = a // k\n    r = k - a % k\n    if b >= r:\n        return 2 * c + 1\n    elif k - r + b >= r:\n        return 2 * c + 1\n    else:\n        return 2 * c\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(palindromesColoring(n, k, s))", "def solve():\n    (n, k) = map(int, input().split())\n    s = input()\n    cnt = {}\n    for i in s:\n        if i in cnt.keys():\n            cnt[i] += 1\n        else:\n            cnt[i] = 1\n    odd_cnt = even_cnt = 0\n    for (i, j) in cnt.items():\n        even_cnt += j // 2\n        odd_cnt += j % 2\n    ans = 2 * (even_cnt // k)\n    remaining = even_cnt % k\n    odd_cnt += remaining * 2\n    if odd_cnt >= k:\n        ans += 1\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "test = int(input())\nwhile test:\n    test -= 1\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    pair = 0\n    single = 0\n    d = {}\n    for c in s:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    for c in d:\n        pair += d[c] // 2\n        single += d[c] % 2\n    single += pair % k * 2\n    l = pair // k * 2\n    if single >= k:\n        print(l + 1)\n    else:\n        print(l)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    dic = {}\n    for j in range(len(s)):\n        if s[j] in dic:\n            dic[s[j]] += 1\n        else:\n            dic[s[j]] = 1\n    pairs = 0\n    singles = 0\n    for i in dic.values():\n        pairs += i // 2\n        singles += i % 2\n    ll = pairs // k\n    singles += pairs % k * 2\n    ll = ll * 2\n    if singles >= k:\n        ll += 1\n    print(ll)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    h = {}\n    for i in s:\n        h[i] = h.get(i, 0) + 1\n    pairs = 0\n    singles = 0\n    for i in h:\n        pairs += h[i] // 2\n        singles += h[i] & 1\n    if pairs < k:\n        print(1)\n        continue\n    minl = 2 * (pairs // k)\n    singles += 2 * (pairs % k)\n    if singles >= k:\n        minl += 1\n    print(minl)", "N = int(input())\nfor i in range(N):\n    (n, k) = map(int, input().split())\n    s = input()\n    dick1 = {}\n    for el in s:\n        dick1[el] = dick1.get(el, 0) + 1\n    pairs_num = 0\n    free_guys = 0\n    for el in dick1:\n        pairs_num += dick1[el] // 2\n        free_guys += dick1[el] % 2\n    min_num = n // k\n    while min_num > 1:\n        if min_num // 2 * k <= pairs_num and min_num % 2 * k <= free_guys + (pairs_num - min_num // 2 * k) * 2:\n            break\n        min_num -= 1\n    print(min_num)", "n = int(input())\nfor i in range(n):\n    (n, k) = map(int, input().split())\n    para = 0\n    a = []\n    str = input()\n    for i in range(n):\n        if str[i] in a:\n            a.remove(str[i])\n            para += 1\n        else:\n            a.append(str[i])\n    one = len(a)\n    len_min = para // k * 2\n    if para % k * 2 + one >= k:\n        len_min += 1\n    print(len_min)", "import sys\nfrom math import *\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    h = {}\n    for i in s:\n        if i not in h:\n            h[i] = 1\n        else:\n            h[i] += 1\n    p = 0\n    e = 0\n    for i in h:\n        p += h[i] // 2\n        e += h[i] % 2\n    e += p % k * 2\n    m = 1 if e >= k else 0\n    print(p // k * 2 + m)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    d = dict()\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    counter_2 = 0\n    for i in d:\n        counter_2 += d[i] // 2\n    ans = counter_2 // k * 2\n    extra = n - ans * k\n    ans += 1 if extra >= k else 0\n    print(ans)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    s = list(input())\n    s.sort()\n    unique = set(s)\n    dct = dict()\n    for i in unique:\n        dct[i] = s.count(i)\n    pairs = 0\n    singles = 0\n    for i in dct:\n        pairs += dct[i] // 2\n        singles += dct[i] % 2\n    if k > pairs:\n        print(1)\n        continue\n    shortest = 0\n    while pairs >= k:\n        shortest += 2\n        pairs -= k\n    singles += pairs * 2\n    if singles >= k:\n        shortest += 1\n    print(shortest)", "from collections import Counter\n\ndef solve(string, k):\n    counts = Counter(string)\n    num_pairs = 0\n    num_singles = 0\n    for (char, count) in counts.items():\n        num_pairs += count // 2\n        num_singles += count % 2\n    ans = 2 * (num_pairs // k)\n    num_singles += 2 * (num_pairs % k)\n    if num_singles >= k:\n        ans += 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    (_, k) = input().split()\n    s = input()\n    print(solve(s, int(k)))", "t = int(input())\nwhile t:\n    l = []\n    (n, k) = map(int, input().split())\n    s = input()\n    for ele in s:\n        if ele not in l:\n            l.append(ele)\n    cp = 0\n    for ele in l:\n        cp += s.count(ele) // 2\n    if len(s) - k * 2 * (cp // k) >= k:\n        ans = 2 * (cp // k) + 1\n    else:\n        ans = 2 * (cp // k)\n    print(ans)\n    t -= 1", "from collections import Counter\n\ndef check(n, k, s):\n    data = dict(Counter(s))\n    (total1, total2) = (0, 0)\n    for i in data.values():\n        sharma = i // 2\n        total2 += sharma\n        total1 += i - sharma * 2\n    val = total2 // k\n    ans = val * 2\n    re = total2 - val * k\n    total1 += re * 2\n    if total1 >= k:\n        ans += 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(check(n, k, s))", "_ = int(input())\nfor __ in range(_):\n    (n, k) = map(int, input().split())\n    s = input()\n    if n == 1:\n        print(1)\n        continue\n    letters = {}\n    pairs = 0\n    for l in s:\n        if l not in letters:\n            letters[l] = 1\n        else:\n            letters[l] += 1\n    for x in letters:\n        pairs += letters[x] // 2\n    if k > pairs:\n        print(1)\n        continue\n    used_pairs = pairs // k\n    single = n - pairs * 2 + (pairs * 2 - used_pairs * k * 2)\n    if single >= k:\n        print(used_pairs * 2 + 1)\n    else:\n        print(used_pairs * 2)", "for l in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    st = input()\n    dic = {i: 0 for i in st}\n    for i in st:\n        dic[i] += 1\n    ts = 0\n    for i in dic:\n        ts += dic[i] // 2\n    ans = 2 * (ts // k)\n    if n - ans * k >= k:\n        ans += 1\n    print(ans)", "from collections import Counter\n\ndef solve():\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    res = 0\n    cnts = Counter(s)\n    pairs = 0\n    for pc in cnts.values():\n        pairs += pc // 2\n    res = 2 * (pairs // k)\n    if n - res * k >= k:\n        res += 1\n    return res\nt = int(input())\nfor _ in range(t):\n    print(solve())", "from collections import Counter\nfor _ in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    s = input()\n    Q = Counter(s)\n    p = sum((i // 2 for i in Q.values()))\n    ans = p // k * 2\n    if n - ans * k >= k:\n        ans += 1\n    print(ans)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    cnt = {}\n    for i in range(n):\n        if s[i] in cnt:\n            cnt[s[i]] += 1\n        else:\n            cnt[s[i]] = 1\n    pairs = 0\n    odd = 0\n    for i in cnt:\n        if cnt[i] % 2:\n            odd += 1\n        pairs += cnt[i] // 2\n    ans = 2 * (pairs // k)\n    odd += 2 * (pairs % k)\n    if odd >= k:\n        ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    cnt = dict()\n    for c in s:\n        cnt[c] = cnt.get(c, 0) + 1\n    (even, odd) = (0, 0)\n    for c in cnt:\n        isOdd = cnt[c] % 2\n        odd += isOdd\n        even += cnt[c] - isOdd\n    d = even // k\n    if d == 0:\n        print(1)\n        continue\n    isEven = d % 2 == 0\n    remainder = d != even / k\n    ans = -1\n    if not remainder and isEven:\n        ans = d + (odd >= k)\n        print(ans)\n        continue\n    if not remainder and (not isEven):\n        ans = d\n        print(ans)\n        continue\n    if remainder and (not isEven):\n        ans = d\n        print(ans)\n        continue\n    if remainder and isEven:\n        ans = d\n        rem = even - d * k\n        odd += rem\n        ans += odd >= k\n        print(ans)\n        continue", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    string = list(input())\n    if n == k:\n        print(1)\n    else:\n        dic = {}\n        for i in string:\n            if i not in dic:\n                dic[i] = 1\n            else:\n                dic[i] += 1\n        count = 0\n        for i in dic:\n            if dic[i] % 2 == 1:\n                count += 1\n        temp = int((n - count) / 2)\n        if temp < k:\n            print(1)\n        else:\n            count += temp % k * 2\n            re = temp // k * 2\n            if count >= k:\n                re += 1\n            print(re)", "t = eval(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    h = input()\n    p = {}\n    o = 0\n    if n == k:\n        print(1)\n        continue\n    for i in h:\n        if i not in p:\n            p[i] = 1\n        else:\n            p[i] += 1\n    for i in p:\n        o += p[i] // 2\n    o1 = n - o * 2\n    c = [0] * k\n    c1 = 0\n    for i in range(o):\n        if c1 == k:\n            c1 = 0\n        c[c1] += 2\n        c1 += 1\n    c.sort()\n    c2 = 0\n    for i in range(len(c)):\n        if o1 > 0:\n            c[i] += 1\n            o1 -= 1\n        else:\n            break\n    r = min(c)\n    if r % 2 == 0:\n        if c.count(min(c)) <= c.count(min(c) + 2):\n            print(r + 1)\n        else:\n            print(r)\n    else:\n        print(r)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    st = input()\n    s = 0\n    C = Counter(st)\n    for i in C.values():\n        s += i // 2\n    ans = s // k * 2\n    if n - ans * k >= k:\n        ans += 1\n    print(ans)", "for l in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    st = input()\n    dic = {i: 0 for i in st}\n    for i in st:\n        dic[i] += 1\n    ts = 0\n    for i in dic:\n        ts += dic[i] // 2\n    ans = 2 * (ts // k)\n    if n - ans * k >= k:\n        ans += 1\n    print(ans)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    cnt = {}\n    for i in range(n):\n        if s[i] in cnt:\n            cnt[s[i]] += 1\n        else:\n            cnt[s[i]] = 1\n    pairs = 0\n    odd = 0\n    for i in cnt:\n        if cnt[i] % 2:\n            odd += 1\n        pairs += cnt[i] // 2\n    ans = 2 * (pairs // k)\n    odd += 2 * (pairs % k)\n    if odd >= k:\n        ans += 1\n    print(ans)", "ttime = int(input())\nfor ccount in range(ttime):\n    (n, k) = map(int, input().split())\n    st = input()\n    count = {}\n    for c in st:\n        count[c] = 0\n    for c in st:\n        count[c] += 1\n    sm = 0\n    for c in count:\n        sm += count[c] - count[c] % 2\n    start = sm // 2 // k * 2\n    if len(st) - start * k >= k:\n        start += 1\n    print(start)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    d = dict()\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    A = d.values()\n    A = list(A)\n    (counter_1, counter_2) = (0, 0)\n    for i in A:\n        counter_2 += i // 2\n        counter_1 += i % 2\n    x0 = counter_1\n    y0 = counter_2\n    x0 += y0 % k * 2\n    x0 = 1 if x0 >= k else 0\n    ans0 = y0 // k * 2 + x0\n    print(ans0)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    pal = input()\n    color = defaultdict(int)\n    for i in pal:\n        color[i] += 1\n    (single, pair) = (0, 0)\n    for i in color:\n        if color[i] % 2:\n            single += 1\n        pair += color[i] // 2\n    single += pair % k * 2\n    print(pair // k * 2 + 1) if single >= k else print(pair // k * 2)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ss = sorted(s)\n    (cur, p, o) = (1, 0, 0)\n    for i in range(1, len(ss)):\n        if ss[i] == ss[i - 1]:\n            cur += 1\n        else:\n            p += cur // 2\n            o += cur % 2\n            cur = 1\n    p += cur // 2\n    o += cur % 2\n    print(int(p / k) * 2 + (o + p % k * 2 >= k))", "t = int(input())\nwhile t:\n    (a, b) = map(int, input().split())\n    s1 = input()\n    d = {}\n    for i in s1:\n        d[i] = 1 + d.get(i, 0)\n    c1 = 0\n    c2 = 0\n    for i in d.values():\n        c1 += i // 2\n        c2 += i % 2\n    ans = 2 * (c1 // b)\n    c2 += 2 * (c1 % b)\n    if c2 >= b:\n        ans += 1\n    print(ans)\n    t -= 1", "import math\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    cnt = [0] * 26\n    for ele in s:\n        cnt[ord(ele) - ord('a')] += 1\n    (odd_cnt, even_cnt) = (0, 0)\n    for i in range(26):\n        if cnt[i] == 0:\n            continue\n        even_cnt += cnt[i] // 2\n        odd_cnt += cnt[i] % 2\n    res = even_cnt // k * 2\n    odd_cnt += even_cnt % k * 2\n    if odd_cnt >= k:\n        res += 1\n    print(res)", "T = int(input())\nfor tc in range(T):\n    (n, k) = map(int, input().split())\n    s = input()\n    d = {}\n    for i in s:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n    pair = 0\n    count = 0\n    for key in d.keys():\n        if d[key] % 2 == 0:\n            pair += d[key] // 2\n        else:\n            count += 1\n            pair += d[key] // 2\n    res = pair // k\n    rem = pair % k\n    if 2 * rem + count < k:\n        print(2 * res)\n    elif 2 * rem + count >= k:\n        print(2 * res + 1)", "import sys\nfrom math import sqrt, gcd\nfrom collections import deque, Counter\nsys.setrecursionlimit(10 ** 8)\nI = lambda : int(input())\nS = lambda : input().strip()\nM = lambda : map(int, input().strip().split())\nL = lambda : list(map(int, input().strip().split()))\nmod = 1000000007\n\ndef valid(le):\n    val = 0\n    if pair >= k:\n        val += pair // k\n        pair -= val\n    if pair > 0 and odd > 0:\n        val += 1\n    return val >= le\nfor i in range(I()):\n    (n, k) = M()\n    s = S()\n    d = {i: 0 for i in s}\n    for i in s:\n        d[i] += 1\n    pair = 0\n    odd = 0\n    for i in d:\n        pair += d[i] // 2\n        if d[i] % 2:\n            odd += 1\n    (a, b) = (pair // k, pair % k)\n    if 2 * b + odd < k:\n        print(2 * a)\n    else:\n        print(2 * a + 1)", "t = int(input())\nDIC = {}\nfor _ in range(t):\n    DIC.clear()\n    (n, k) = map(int, input().split())\n    s = input()\n    for c in s:\n        DIC[c] = DIC.get(c, 0) + 1\n    tot = 0\n    totPairs = 0\n    for key in DIC:\n        if DIC[key] % 2 != 0:\n            tot += 1\n            DIC[key] -= 1\n        totPairs += DIC[key] // 2\n    tot = min(tot, k)\n    mn = totPairs // k * 2\n    left = totPairs % k\n    left *= 2\n    if tot == 0:\n        if left >= k:\n            mn += 1\n        print(mn)\n    elif left == 0:\n        if tot == k:\n            print(mn + 1)\n        else:\n            print(mn)\n    elif tot + left < k:\n        print(mn)\n    else:\n        print(mn + 1)", "t = int(input())\nDIC = {}\nfor _ in range(t):\n    DIC.clear()\n    (n, k) = map(int, input().split())\n    s = input()\n    for c in s:\n        DIC[c] = DIC.get(c, 0) + 1\n    tot = 0\n    totPairs = 0\n    for key in DIC:\n        if DIC[key] % 2 != 0:\n            tot += 1\n            DIC[key] -= 1\n        totPairs += DIC[key] // 2\n    tot = min(tot, k)\n    mn = totPairs // k * 2\n    left = totPairs % k\n    left *= 2\n    if tot == 0:\n        if left >= k:\n            mn += 1\n        print(mn)\n    elif left == 0:\n        if tot == k:\n            print(mn + 1)\n        else:\n            print(mn)\n    elif tot + left < k:\n        print(mn)\n    else:\n        print(mn + 1)", "from collections import *\nTT = int(input())\nfor y in range(TT):\n    (n, m) = map(int, input().split())\n    s = input()\n    d = defaultdict(int)\n    for i in s:\n        d[i] += 1\n    c1 = c2 = 0\n    for i in d:\n        c2 += d[i] // 2\n        if d[i] % 2 != 0:\n            c1 += 1\n    minn = c2 // m * 2\n    c2 = c2 % m * 2 + c1\n    if c2 >= m:\n        print(minn + 1)\n    else:\n        print(minn)", "from typing import Counter\n\ndef find(l, col, s: str):\n    N = Counter(s)\n    npair = 0\n    for letter in N:\n        npair += N[letter] // 2\n    max_pair = npair // col\n    remain = l - max_pair * 2 * col\n    if remain >= col:\n        return max_pair * 2 + 1\n    else:\n        return max_pair * 2\nr = int(input())\nfor i in range(r):\n    (l, col) = list(map(int, input().split()))\n    s = input()\n    print(find(l, col, s))", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    pal = input()\n    color = defaultdict(int)\n    for i in pal:\n        color[i] += 1\n    (single, pair) = (0, 0)\n    for i in color:\n        if color[i] % 2:\n            single += 1\n        pair += color[i] // 2\n    single += pair % k * 2\n    print(pair // k * 2 + 1) if single >= k else print(pair // k * 2)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    A = input()\n    pairs = 0\n    d = defaultdict(lambda : 0)\n    for i in A:\n        d[i] += 1\n    for i in d.keys():\n        pairs += d[i] // 2\n    (l, r) = (0, n // k + 1)\n    while l + 1 < r:\n        x = (l + r) // 2\n        if x % 2 == 0:\n            if pairs >= k * x // 2:\n                l = x\n            else:\n                r = x\n        elif pairs >= x // 2 * k:\n            l = x\n        else:\n            r = x\n    print(l)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    freq = defaultdict(int)\n    for ch in s:\n        freq[ch] += 1\n    pairs = 0\n    singles = 0\n    for i in freq:\n        pairs += freq[i] // 2\n        singles += freq[i] & 1\n    if pairs < k:\n        minLength = 1\n    else:\n        minLength = pairs // k * 2\n        singles += pairs % k * 2\n        if singles >= k:\n            minLength += 1\n    print(minLength)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    d = {}\n    for i in range(n):\n        if s[i] not in d:\n            d[s[i]] = 1\n        else:\n            d[s[i]] += 1\n    pairs = 0\n    ones = 0\n    for e in d:\n        pairs += d[e] // 2\n        ones += d[e] % 2\n    ans = 2 * (pairs // k)\n    ones += 2 * (pairs % k)\n    if pairs // k > 0 and ones >= n - pairs % k or ones >= k:\n        ans += 1\n    print(ans)", "def main():\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        s = input()\n        chrs = [0 for i in range(26)]\n        for i in s:\n            chrs[ord(i) - ord('a')] += 1\n        (par, odd) = (0, 0)\n        for i in chrs:\n            par += i // 2\n            odd += i % 2\n        a = 2 * (par // k)\n        odd += 2 * (par % k)\n        if odd >= k:\n            a += 1\n        print(a)\nmain()", "for j in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    s = input()\n    ch = ''\n    pa = 0\n    for i in s:\n        if i not in ch:\n            ch += i\n            a = s.count(i)\n            pa += a // 2\n    la = pa // k * 2\n    if k == n:\n        print(1)\n    elif n - la * k < k:\n        print(la)\n    else:\n        print(la + 1)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split(' '))\n    x = list(input())\n    count = {}\n    for ele in x:\n        if count.get(ele, -1) == -1:\n            count[ele] = 1\n        else:\n            count[ele] += 1\n    pairs = 0\n    single = 0\n    for key in count.keys():\n        if count[key] % 2 == 0:\n            pairs += count[key] // 2\n        else:\n            pairs += count[key] // 2\n            single += 1\n    min_len = 2 * (pairs // k)\n    single += (pairs - pairs // k * k) * 2\n    if single >= k:\n        min_len += 1\n    print(min_len)", "from collections import Counter\n\ndef main():\n    T = int(input())\n    for t in range(T):\n        (l, k) = map(int, input().strip().split(' '))\n        s = input()\n        freq = Counter(s)\n        rep = 0\n        unique = 0\n        for a in freq:\n            rep += freq[a] // 2\n            unique += freq[a] % 2\n        pal = 2 * (rep // k)\n        unique += 2 * rep - pal * k\n        pal += min(unique // k, 1)\n        print(pal)\nmain()", "for i in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = input()\n    t = list(set(s))\n    d = {i: 0 for i in s}\n    for i in d:\n        d[i] = s.count(i)\n    pf = 0\n    for i in d:\n        pf += d[i] // 2\n    mphl = pf // b\n    mpl = 2 * mphl\n    x = len(s) - mpl * b\n    if x >= b:\n        print(mpl + 1)\n    else:\n        print(mpl)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    s = input()\n    Q = Counter(s)\n    p = sum((i // 2 for i in Q.values()))\n    ans = p // k * 2\n    if n - ans * k >= k:\n        ans += 1\n    print(ans)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    c = Counter(input()).values()\n    s = sum((i // 2 for i in c))\n    print(s // k * 2 + (sum(c) - 2 * (s - s % k) >= k))", "from collections import Counter\n\ndef solution():\n    (n, k) = [int(i) for i in input().split()]\n    c = Counter(input())\n    pair = lone = 0\n    for i in c.values():\n        pair += i // 2\n        lone += i % 2\n    lone += pair % k * 2\n    print(pair // k * 2 + (lone >= k))\nt = int(input())\nfor _ in range(t):\n    solution()", "task_num = int(input().strip())\nfor task_id in range(task_num):\n    len_and_color_num = list(map(int, input().strip().split()))\n    color_num = len_and_color_num[1]\n    letters = input().strip()\n    letter_dict = {}\n    for letter in letters:\n        if letter in letter_dict.keys():\n            letter_dict[letter] += 1\n        else:\n            letter_dict[letter] = 1\n    pair_num = 0\n    single_num = 0\n    for letter in letter_dict.keys():\n        if letter_dict[letter] % 2:\n            single_num += 1\n        pair_num += letter_dict[letter] // 2\n    mini_pair = pair_num // color_num\n    single_num += 2 * (pair_num % color_num)\n    if single_num >= color_num:\n        print(2 * mini_pair + 1)\n    else:\n        print(2 * mini_pair)", "from collections import defaultdict\nfor _ in range(int(input())):\n    charCount = defaultdict(int)\n    (n, k) = map(int, input().split())\n    s = input()\n    for i in s:\n        charCount[i] += 1\n    count_2 = 0\n    count_1 = 0\n    for char in charCount:\n        count_2 += charCount[char] // 2\n        count_1 += charCount[char] % 2\n    if count_1 + 2 * (count_2 % k) < k:\n        print(2 * (count_2 // k))\n    else:\n        print(2 * (count_2 // k) + 1)", "from collections import Counter\n\ndef solve(n, k, s):\n    c = Counter(s)\n    pairs = sum((c[x] // 2 for x in c))\n    singles = sum((c[x] % 2 for x in c))\n    (a, b) = divmod(pairs, k)\n    result = 2 * a\n    if 2 * b + singles >= k:\n        result += 1\n    return result\nT = int(input())\nfor _ in range(T):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    result = solve(n, k, s)\n    print(result)", "from collections import Counter, deque\nimport math\nfrom random import randint\nfrom bisect import bisect\nimport sys\nimport re\nimport copy\nfrom decimal import Decimal, getcontext\ngetcontext().prec = 32\nMOD = 998244353\nMAX = sys.maxsize\nMIN = -sys.maxsize\n\nclass get:\n\n    def int():\n        return list(map(int, input().split()))\n\n    def str():\n        return input().split()\n\n    def float():\n        return list(map(float, input().split()))\n\n    def map():\n        return map(int, input().split())\n\ndef sqrt(x):\n    return int(math.sqrt(x)) + 1\n\ndef gcd(*args):\n    result = args[0]\n    for item in args:\n        result = math.gcd(result, item)\n    return result\n\ndef LCM(a, b):\n    return a * b // math.gcd(a, b)\n\ndef isPrime(n):\n    if n == 1:\n        return False\n    for i in range(2, sqrt(n)):\n        if n % i == 0:\n            return False\n    return True\n\ndef solve():\n    (n, k) = get.map()\n    s = input()\n    if n == k:\n        print(1)\n        return\n    d = Counter(s)\n    (singles, pairs) = (0, 0)\n    for (a, b) in d.items():\n        singles += b % 2\n        pairs += b // 2\n    ans = 0\n    ans += 2 * (pairs // k)\n    if n - ans * k >= k:\n        print(ans + 1)\n    else:\n        print(ans)\nfor _ in range(int(input())):\n    solve()", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    d = dict()\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    A = d.values()\n    A = list(A)\n    flag = 1\n    (counter_1, counter_2) = (0, 0)\n    (counter_1_d, counter_2_d) = (0, 0)\n    (counter_1_extra, counter_2_extra) = (0, 0)\n    for i in A:\n        if i % k == 0 and i // k % 2 and flag:\n            flag = 0\n            counter_2_extra = i - k\n            counter_1_extra = k\n            counter_2_d = i // 2\n            counter_1_d = i % 2\n        else:\n            counter_2 += i // 2\n            counter_1 += i % 2\n    x0 = counter_1 + counter_1_d\n    y0 = counter_2 + counter_2_d\n    x0 += y0 % k * 2\n    x0 = 1 if x0 >= k else 0\n    x1 = counter_1 + counter_1_extra\n    y1 = counter_2 + counter_2_extra // 2\n    x1 += y1 % k * 2\n    x1 = 1 if x1 >= k else 0\n    ans0 = y0 // k * 2 + x0\n    ans1 = y1 // k * 2 + x1\n    print(max(ans0, ans1))", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    pairs = 0\n    count = Counter(s)\n    for element in count.values():\n        (p, r) = divmod(element, 2)\n        pairs += p\n    answer = pairs // k * 2\n    remain = n - answer * k\n    if remain >= k:\n        answer += 1\n    print(answer)", "from collections import defaultdict\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    d = defaultdict(int)\n    for a in s:\n        d[a] += 1\n    l = []\n    for a in d:\n        l.append(d[a])\n    p = 0\n    n_p = 0\n    for m in range(len(l)):\n        p += l[m] // 2\n        n_p += l[m] % 2\n    sol = 2 * (p // k)\n    rem = 2 * (p % k) + n_p\n    if rem >= k:\n        sol += 1\n    print(sol)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    c = Counter(s)\n    (odd, even) = (0, 0)\n    for v in c.values():\n        odd += v % 2\n        even += v // 2\n    ret = 2 * (even // k)\n    if odd + 2 * (even % k) >= k:\n        ret += 1\n    print(ret)", "def solve(n, k, s):\n    dct = {}\n    for i in range(n):\n        dct[s[i]] = dct.get(s[i], 0) + 1\n    pairs = 0\n    single = 0\n    for ele in dct:\n        if dct[ele] > 1:\n            pairs += dct[ele] // 2\n        single += dct[ele] % 2\n        dct[ele] = 0\n    ans = 0\n    remain = 0\n    if pairs >= k:\n        ans = 2 * (pairs // k)\n        single += 2 * (pairs % k)\n    else:\n        single += 2 * (pairs % k)\n    if single >= k:\n        print(ans + 1)\n    else:\n        print(ans)\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    solve(n, k, s)", "class CodeForces1624D:\n\n    def solve(self, k: int, s: str) -> int:\n        hash_map = [0 for _ in range(0, 27)]\n        for c in s:\n            hash_map[ord(c) - ord('a')] += 1\n        (pairs_sum, odd_sum) = (0, 0)\n        for count in hash_map:\n            pairs_sum += count // 2\n            odd_sum += count % 2\n        ans = 2 * (pairs_sum // k)\n        odd_sum += 2 * (pairs_sum % k)\n        return ans + (1 if odd_sum >= k else 0)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        inp = list(map(int, input().split()))\n        (n, k) = (inp[0], inp[1])\n        s = str(input())\n        print(CodeForces1624D().solve(k, s))\nmain()", "from collections import Counter\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    counts = Counter(s)\n    singles = 0\n    pairs = 0\n    for c in counts:\n        pairs += counts[c] // 2\n        singles += counts[c] % 2\n    ans = 2 * (pairs // k)\n    ans += singles + 2 * (pairs % k) >= k\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    S = list(input())\n    counter = Counter(S)\n    C = list(counter.values())\n    (cntPairs, cntOdd) = (0, 0)\n    for cnt in C:\n        cntPairs += cnt // 2\n        cntOdd += cnt % 2\n    ans = 2 * (cntPairs // k)\n    cntOdd += 2 * (cntPairs % k)\n    if cntOdd >= k:\n        ans += 1\n    print(ans)", "import sys, string\n\ndef palindromes_coloring(n, k, s):\n    counts = {ch: 0 for ch in string.ascii_lowercase}\n    for ch in s:\n        counts[ch] += 1\n    even_count = 0\n    for (ch, count) in counts.items():\n        even_count += 2 * (count // 2)\n    odd_count = n - even_count\n    l = even_count // (k * 2) * 2\n    even_count -= l * k\n    if even_count + odd_count >= k:\n        l += 1\n    return l\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    sys.stdout.write(f'{palindromes_coloring(n, k, s)}\\n')", "import sys\nimport re\nimport math\nfrom math import log2 as lg\nfrom decimal import *\nfrom collections import deque\nimport random\nimport heapq\nimport itertools\nconst = 1000000007\nep = 1e-10\n\ndef get():\n    return list(map(int, input().split()))\nn = int(input())\nfor i in range(n):\n    line = get()\n    (m, k) = (line[0], line[1])\n    d = {}\n    s = input()\n    for term in s:\n        if term in d:\n            d[term] += 1\n        else:\n            d[term] = 1\n    (even, odd) = (0, 0)\n    for t in d:\n        term = d[t]\n        if term % 2 == 1:\n            odd += 1\n        even += term // 2\n    ans = even // k * 2\n    odd += even % k * 2\n    if odd >= k:\n        ans += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    d = dict()\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    odds = 0\n    eves = 0\n    for i in d:\n        if d[i] % 2 == 0:\n            num = d[i] // 2 * 2\n            eves += num\n        else:\n            odds += 1\n            num = d[i] // 2 * 2\n            eves += num\n    pairs = eves // 2\n    minlength = pairs // k * 2\n    if pairs % k == 0:\n        if odds >= k:\n            minlength += 1\n            print(minlength)\n        else:\n            print(minlength)\n    else:\n        left = pairs % k * 2\n        if left + odds >= k:\n            minlength += 1\n        print(minlength)", "def problem4(n, k, string):\n    counter = [0] * 26\n    for c in string:\n        counter[ord(c) - ord('a')] += 1\n    pairs = ans = remainder = 0\n    for num in counter:\n        pairs += num // 2\n        remainder += num % 2\n    ans = pairs // k * 2\n    if pairs % k * 2 + remainder >= k:\n        ans += 1\n    print(max(ans, 1))\nfor _ in range(int(input())):\n    (n, k) = [int(num) for num in input().split(' ')]\n    string = input()\n    problem4(n, k, string)", "t = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    li = input()\n    alpha = [0 for __ in range(26)]\n    cnt1 = 0\n    cnt2 = 0\n    for w in li:\n        alpha[ord(w) - 97] += 1\n        if alpha[ord(w) - 97] > 1:\n            alpha[ord(w) - 97] -= 2\n            cnt2 += 1\n    cnt1 = sum(alpha)\n    res = 0\n    res += cnt2 // k * 2\n    cnt2 %= k\n    cnt1 += cnt2 * 2\n    if cnt1 >= k:\n        res += 1\n    print(res)", "from collections import Counter\n\ndef solve():\n    (n, k) = map(int, input().split())\n    s = input()\n    counter = Counter(s)\n    pairs = sum((x // 2 for x in counter.values()))\n    ones = sum((1 for x in counter.values() if x % 2 == 1))\n    return pairs // k * 2 + (1 if pairs % k * 2 + ones >= k else 0)\nt = int(input())\nfor c in range(t):\n    print(solve())", "def solve(s, k):\n    ans = 0\n    c = dict()\n    for a in s:\n        if a not in c:\n            c.__setitem__(a, 0)\n        c[a] += 1\n    sort_c = sorted(c.items(), key=lambda x: x[1], reverse=True)\n    count = 0\n    total = 0\n    middle = 0\n    for item in sort_c:\n        count += 1\n        total += item[1]\n        if item[1] % 2 == 1:\n            total += -1\n            middle += 1\n    ans = int(total / k)\n    if middle + total % k >= k and ans % 2 == 0:\n        ans += 1\n    return max(ans, 1)\ntest = int(input())\nfor t in range(0, test):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    print(solve(s, k))", "for u in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = input()\n    y = [0] * 26\n    for i in range(n):\n        y[ord(x[i]) - ord('a')] += 1\n    t = 0\n    for i in range(26):\n        t += y[i] // 2\n    l = 1\n    r = n // k + 1\n    while l <= r:\n        mid = (l + r) // 2\n        if mid % 2 == 0 and t >= k * (mid // 2) or (mid % 2 and t >= k * (mid // 2) and (n >= 2 * k * (mid // 2) + k)):\n            l = mid + 1\n            ans = mid\n            continue\n        r = mid - 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    arr = [0 for i in range(26)]\n    for i in range(n):\n        arr[ord(s[i]) - ord('a')] += 1\n    pairs = 0\n    for i in range(26):\n        pairs += arr[i] // 2\n    rem = n - 2 * pairs\n    ans = pairs // k\n    pairs = pairs - ans * k\n    ans = ans * 2\n    rem = rem + pairs * 2\n    if rem >= k:\n        ans += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    stats = {}\n    for c in s:\n        if c not in stats.keys():\n            stats[c] = 1\n        else:\n            stats[c] = stats[c] + 1\n    tot_pair_cnt = 0\n    extras_1 = 0\n    total = 0\n    for (ky, v) in stats.items():\n        total += v\n        tot_pair_cnt += v // 2\n        extras_1 += v % 2\n    extras = extras_1 + tot_pair_cnt % k * 2\n    res = 0\n    if extras >= k:\n        res += 1\n    res += tot_pair_cnt // k * 2\n    print(res)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    counts = Counter(s)\n    ps = [0] * 2\n    for key in counts.keys():\n        ps[1] += counts[key] % 2\n        ps[0] += counts[key] // 2\n    ps[1] += 2 * (ps[0] % k)\n    ans = 2 * (ps[0] // k) + (1 if ps[1] >= k else 0)\n    print(ans)", "size = int(input())\nfor i in range(size):\n    str1 = list(map(int, input().split()))\n    n = str1[0]\n    k = str1[1]\n    str1 = input()\n    table_c = []\n    table_n = []\n    for i in range(n):\n        if str1[i] in table_c:\n            ndx = table_c.index(str1[i])\n            table_n[ndx] += 1\n        else:\n            table_c.append(str1[i])\n            table_n.append(1)\n    table = sorted(table_n)\n    s = len(table)\n    even = [int(table[t] / 2) for t in range(s)]\n    odd = [table[t] % 2 for t in range(s)]\n    seven = sum(even)\n    sodd = sum(odd)\n    tt = seven % k\n    ncount = 0\n    if n == k:\n        print('1')\n        continue\n    if tt == 0:\n        count = int(seven / k)\n    else:\n        count = int(seven / k)\n        sodd = tt * 2 + sodd\n    if sodd >= k:\n        ncount = 1\n    print(count * 2 + ncount)", "from collections import Counter\n\ndef solve():\n    (n, k) = map(int, input().split())\n    s = input()\n    counter = Counter(s)\n    pairs = sum((x // 2 for x in counter.values()))\n    ones = sum((1 for x in counter.values() if x % 2 == 1))\n    k_ = pairs // k\n    rp = pairs % k\n    return max(1, k_ * 2 + (1 if pairs % k * 2 + ones >= k else 0))\nt = int(input())\nfor c in range(t):\n    print(solve())", "t = int(input())\n\ndef solve():\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    letters = [0] * 26\n    for i in s:\n        x = ord(i) - ord('a')\n        letters[x] += 1\n    count_double = 0\n    count_once = 0\n    for i in range(len(letters)):\n        y = letters[i] // 2\n        count_double += y\n        letters[i] %= 2\n        if letters[i] == 1:\n            letters[i] = 0\n            count_once += 1\n    x = count_double // k\n    count_double %= k\n    answer = x * 2\n    if count_double * 2 + count_once >= k:\n        answer += 1\n    print(answer)\nfor i in range(t):\n    solve()", "from collections import Counter\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    c = Counter(s)\n    ev = 0\n    od = 0\n    for i in c:\n        ev += c[i] // 2\n        od += c[i] % 2\n    s = ev // k * 2\n    od += ev % k * 2\n    if od >= k:\n        print(s + 1)\n    else:\n        print(s)"]