["from sys import stdin\n\ndef solve():\n    pows2 = set()\n    x = 1\n    while x < 10 ** 6:\n        pows2.add(x)\n        x *= 2\n    for _ in range(int(stdin.readline().strip())):\n        n = int(stdin.readline().rstrip())\n        A = list(range(n))[::-1]\n        flag = 0\n        for i in range(n):\n            if A[i] in pows2:\n                B = A[i + 1:] + A[:i + 1][::-1]\n                break\n        print(' '.join(map(str, B)))\nsolve()", "import sys\n\ndef getline() -> str:\n    return sys.stdin.readline().strip()\n\ndef solve():\n    n = int(getline()) - 1\n    bits = str(bin(n))[2:]\n    highest = 1 << len(bits) - 1\n    sol = list(range(1, n + 1))\n    sol.insert(highest - 1, 0)\n    print(' '.join(map(str, sol)))\nt = int(getline())\nfor _ in range(t):\n    solve()", "n = int(input())\nresults = []\nwhile n:\n    pillers = int(input())\n    k = 1\n    while k < pillers:\n        k = k * 2\n    k = k // 2\n    pillerSet = [str(i) for i in range(k - 1, 0, -1)]\n    pillerSet.append('0')\n    for i in range(k, pillers):\n        pillerSet.append(str(i))\n    results.append(pillerSet)\n    n -= 1\nfor i in results:\n    print(' '.join(i))", "n = int(input())\nresults = []\nwhile n:\n    pillers = int(input())\n    k = 1\n    while k < pillers:\n        k = k * 2\n    k = k // 2\n    pillerSet = [str(j) for j in range(k - 1, 0, -1)]\n    pillerSet.append('0')\n    for i in range(k, pillers):\n        pillerSet.append(str(i))\n    results.append(pillerSet)\n    n -= 1\nfor i in results:\n    print(' '.join(i))", "import sys\nFILE = None\nif FILE:\n    sys.stdin = open(FILE, 'r')\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nfor _ in range(int(input())):\n    n = inp()\n    pow = 0\n    cur = 1\n    while cur * 2 < n:\n        pow += 1\n        cur *= 2\n    arr = []\n    for i in range(1, cur):\n        arr.append(i)\n    arr.append(0)\n    for i in range(cur, n):\n        arr.append(i)\n    print(' '.join([str(item) for item in arr]))", "import math as m\ntc = int(input())\nfor i in range(tc):\n    x = int(input())\n    if x == 2:\n        print('0 1')\n    elif x == 3:\n        print('2 0 1')\n    else:\n        list1 = []\n        a = 2 ** int(m.log(x - 1, 2))\n        for i in range(2, a):\n            list1 += [i]\n        list1 += [1, 0]\n        for i in range(a, x):\n            list1 += [i]\n        list1 = str(list1)\n        list1 = list1.replace(',', '')\n        list1 = list1.replace('[', '')\n        list1 = list1.replace(']', '')\n        print(list1)", "import sys\nimport math\nfrom typing import List\ninput = sys.stdin.readline\n\ndef solution() -> List[str]:\n    std = 2 ** int(math.log2(n - 1))\n    res = [str(num) for num in range(std - 1, -1, -1)]\n    for num in range(std, n):\n        res.append(str(num))\n    return res\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    sol = solution()\n    print(' '.join(sol))", "for iters in range(int(input())):\n    n = int(input())\n    msb = 0\n    m = n - 1\n    while m != 0:\n        msb += 1\n        m //= 2\n    s = [str(i) for i in range(2 ** (msb - 1))]\n    s.reverse()\n    e = [str(i) for i in range(2 ** (msb - 1), n)]\n    final = s + e\n    print(' '.join(final))", "def solve(n):\n    res = []\n    boundary = 1\n    while boundary * 2 <= n - 1:\n        boundary = boundary * 2\n    for i in range(n - 1, boundary - 1, -1):\n        res.append(i)\n    res.append(0)\n    for i in range(1, boundary):\n        res.append(i)\n    r = ' '.join(list(map(str, res)))\n    return r\ntest = int(input())\nfor t in range(0, test):\n    n = int(input())\n    print(solve(n))", "for _ in range(int(input())):\n    n = int(input())\n    t = n - 1\n    count = 0\n    l = []\n    while t != 1:\n        t = t // 2\n        count += 1\n    l = [i for i in range(2 ** count)]\n    l.reverse()\n    for i in range(2 ** count, n):\n        l.append(i)\n    l = [str(i) for i in l]\n    print(' '.join(l))", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    m = 1\n    while m * 2 <= n - 1:\n        m = 2 * m\n    l = list(range(1, m)) + [0, m] + list(range(m + 1, n))\n    print(' '.join((str(c) for c in l)))", "import sys\n\ndef f(x):\n    if x == 0:\n        return [0]\n    elif x == 1:\n        return [0, 1]\n    z = 1\n    while z * 2 <= x:\n        z *= 2\n    print('z', x, z)\n    a = list(range(z))\n    for v in f(x - z):\n        a.append(z | v)\n    return a\n\ndef solve():\n    inp = sys.stdin.readline\n    n = int(inp())\n    z = 1\n    while z * 2 <= n - 1:\n        z *= 2\n    p = list(range(z - 1, -1, -1)) + list(range(z, n))\n    z = 0\n    for i in range(1, n):\n        z = max(z, p[i] ^ p[i - 1])\n    print(' '.join(map(str, p)))\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "import math\nT = int(input())\nfor i in range(T):\n    answer = []\n    N = int(input())\n    n = 2 ** int(math.log2(N - 1))\n    answer.append(str(0))\n    answer.append(str(n))\n    count = 1\n    while n + count < N:\n        if count % 2 == 1:\n            answer.append(str(n + count))\n            answer.append(str(count))\n        else:\n            answer.append(str(count))\n            answer.append(str(n + count))\n        count += 1\n    front_answer = []\n    for i in range(count, n):\n        front_answer.append(str(i))\n    print(' '.join(front_answer + answer))", "import itertools\nimport math\n\ndef xor(p):\n    return max((x ^ y for (x, y) in zip(p, p[1:])))\n\ndef min_xor(permutations):\n    return min((xor(p) for p in permutations))\n\ndef naive(n):\n    permutations = list(itertools.permutations(range(n)))\n    minimum = min_xor(permutations)\n    return [p for p in permutations if xor(p) == minimum]\n\ndef solution(n):\n    return ' '.join((str(v) for v in itertools.chain(range(n, 2 ** int(math.log2(n)) - 1, -1), [0], range(2 ** int(math.log2(n)) - 1, 0, -1))))\n\ndef read_int():\n    return int(input().strip())\n\ndef main():\n    for i in range(read_int()):\n        print(solution(read_int() - 1))\nmain()", "for t in range(int(input())):\n    n = int(input())\n    i = 1\n    while 2 * i < n:\n        i *= 2\n    arr = [x for x in range(i - 1, -1, -1)] + [x for x in range(i, n)]\n    print(' '.join(map(str, arr)))", "from math import log2, floor\ntc = int(input())\nfor t in range(tc):\n    n = int(input())\n    lhs = 1 << floor(log2(n - 1))\n    arr = list()\n    for i in range(lhs - 1, -1, -1):\n        arr.append(i)\n    for i in range(lhs, n):\n        arr.append(i)\n    print(' '.join((str(i) for i in arr)))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    x = len(bin(n - 1)) - 2\n    (res, eta) = ([], [])\n    c = 2 ** (x - 1)\n    for j in range(c):\n        res.append(j)\n    for j in range(c, n):\n        eta.append(j)\n    res = res[::-1] + eta\n    print(' '.join([str(k) for k in res]))", "for _ in range(int(input())):\n    n = int(input())\n    base = 1\n    while 2 * base <= n - 1:\n        base *= 2\n    res = []\n    for i in range(n - 1, 0, -1):\n        res.append(str(i))\n        if i == base:\n            res.append('0')\n    print(' '.join(res))", "for _ in range(int(input())):\n    n = int(input())\n    m = n - 1\n    cnt = 0\n    arr = []\n    s = m\n    while m > 0:\n        m //= 2\n        cnt += 1\n    y = cnt - 1\n    x = 2 ** y\n    for i in range(s, x - 1, -1):\n        arr.append(i)\n    for j in range(x):\n        arr.append(j)\n    str_arr = [str(x) for x in arr]\n    print(' '.join(str_arr))", "import sys\nimport re\nimport math\nfrom math import log2 as lg\nfrom math import gcd\nfrom decimal import *\nfrom collections import deque\nimport random\nimport heapq\nimport itertools\nimport datetime\nconst = 1000000007\nep = 1e-08\n\ndef get():\n    return list(map(int, input().split()))\nn = int(input())\nfor i in range(n):\n    m = int(input())\n    lst = []\n    largest = 1\n    while largest * 2 < m:\n        largest *= 2\n    for j in range(m - 1, largest - 1, -1):\n        lst.append(str(j))\n    for j in range(0, largest):\n        lst.append(str(j))\n    print(' '.join(lst))", "N = int(input())\nfor _ in range(N):\n    n = int(input())\n    if n == 2:\n        print('0 1')\n    else:\n        a = [-1] * n\n        h = (n - 1).bit_length() - 1\n        if n - 1 == 1 << h:\n            a[0] = n - 1\n            for i in range(n - 1):\n                a[i + 1] = i\n        else:\n            a[0] = 0\n            a[1] = 1 << h\n            for i in range(n - (1 << h) - 1):\n                a[i + 2] = i + (1 << h) + 2\n            a[n - (1 << h)] = (1 << h) + 1\n            for i in range((1 << h) - 1):\n                a[n - (1 << h) + 1 + i] = i + 1\n        print(' '.join(map(str, a)))", "import sys\n\ndef solve():\n    n = int(input())\n    x = 2\n    while x * 2 < n:\n        x <<= 1\n    for i in range(x - 1, -1, -1):\n        sys.stdout.write(f'{i} ')\n    for i in range(x, n):\n        sys.stdout.write(f'{i} ')\n    sys.stdout.write('\\n')\nt = int(input())\nfor _ in range(t):\n    solve()", "from math import log, floor\nk = int(input())\nfor i in range(k):\n    n = int(input())\n    significant = int(2 ** floor(log(n, 2)))\n    if significant == n:\n        significant = int(2 ** floor(log(n - 1, 2)))\n    m = n - significant\n    a = list(reversed(range(significant + 1, n, 2)))\n    a = a + list(reversed(range(significant, n, 2)))\n    a.append(0)\n    a = a + list(range(1, significant))\n    print(' '.join(map(str, a)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = (n - 1).bit_length()\n    u = 1 << k - 1\n    upper = []\n    for i in range(1, u):\n        if i != n - 1 - u:\n            upper.append(str(i))\n    upper.append('0')\n    for i in range(u, n):\n        upper.append(str(i))\n    if n - 1 - u != 0:\n        upper.append(str(n - 1 - u))\n    print(' '.join(upper))", "def function(n):\n    import math\n    arr = [str(i) for i in range(n)]\n    if n < 3:\n        return ' '.join(arr)\n    for i in range(n - 1, -1, -1):\n        val = math.log(i, 2)\n        if 2 ** int(val) == i:\n            arr[i - 1] = '0'\n            arr[0] = str(i - 1)\n            break\n    return ' '.join(arr)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(function(n))", "import math\nfor i in range(int(input())):\n    output = ''\n    n = int(input())\n    log = int(math.log(n - 1, 2))\n    for i in range(1, 2 ** log):\n        output += str(i) + ' '\n    output += '0 '\n    for i in range(2 ** log, n):\n        output += str(i) + ' '\n    print(output)", "t = int(input())\nii = 0\nfor ii in range(0, t):\n    n = int(input())\n    if n == 2:\n        print('0 1')\n    else:\n        maxp = 2\n        while maxp <= n - 1:\n            maxp = maxp * 2\n        maxp = int(maxp / 2)\n        s = ''\n        i = n - 1\n        while i >= maxp:\n            s += str(i) + ' '\n            i -= 1\n        i = 0\n        while i < maxp:\n            s += str(i) + ' '\n            i += 1\n        print(s.strip())", "import sys\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = 2\n    while x * 2 < n:\n        x <<= 1\n    for i in range(x - 1, -1, -1):\n        sys.stdout.write(f'{i} ')\n    for i in range(x, n):\n        sys.stdout.write(f'{i} ')\n    sys.stdout.write('\\n')", "import sys\ninput = sys.stdin.readline\nimport math\nfor _ in range(int(input())):\n    n = int(input())\n    x = 2 ** int(math.log(n, 2))\n    if n != x:\n        d = list(range(x - 1, -1, -1)) + list(range(x, n))\n    else:\n        d = list(range(x // 2 - 1, -1, -1)) + list(range(x // 2, n))\n    print(*d)", "for i in range(int(input())):\n    a = int(input())\n    s = 1\n    while 2 * s <= a - 1:\n        s *= 2\n    ans = ''\n    for i in range(s - 1, -1, -1):\n        ans += str(i) + ' '\n    for i in range(s, a):\n        ans += str(i) + ' '\n    print(ans[:-1])", "t = int(input())\nfor _ in range(t):\n    n = int(input()) - 1\n    l = n.bit_length()\n    a = 1 << l - 1\n    s = ''\n    for i in range(a - 1, -1, -1):\n        s += str(i) + ' '\n    for i in range(a, n + 1):\n        s += str(i) + ' '\n    print(s.strip())", "cases = int(input())\nwhile cases > 0:\n    n = int(input())\n    n -= 1\n    temp = n\n    c = 0\n    while temp > 0:\n        c += 1\n        temp = int(temp / 2)\n    j = 1\n    c -= 1\n    while c > 0:\n        j *= 2\n        c -= 1\n    ans = ''\n    while n >= j:\n        ans += str(n) + ' '\n        n -= 1\n    i = 0\n    while i < j:\n        ans += str(i) + ' '\n        i += 1\n    print(ans)\n    cases -= 1", "from collections import Counter\nimport heapq\ntt = int(input())\nfor i in range(tt):\n    n = int(input())\n    p = 1\n    while p << 1 < n:\n        p <<= 1\n    ans = ''\n    for i in range(p - 1, -1, -1):\n        ans += str(i) + ' '\n    ans += str(p)\n    for i in range(p + 1, n):\n        ans += ' ' + str(i)\n    print(ans)", "from math import log2\nt = int(input())\nres = []\nfor _ in range(t):\n    n = int(input())\n    n -= 1\n    k = 2 ** int(log2(n))\n    r = [i for i in range(1, k)] + [0, k] + [i for i in range(k + 1, n + 1)]\n    res.append(r)\nfor i in res:\n    print(*i)", "import math\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    xyz = int(math.log2(n - 1))\n    maxi = 2 ** xyz\n    b = []\n    for i in range(1, maxi):\n        b.append(i)\n    b.append(0)\n    b.append(maxi)\n    for i in range(maxi + 1, n):\n        b.append(i)\n    print(*b)", "import math\ncases = int(input())\nwhile cases > 0:\n    n = int(input())\n    n -= 1\n    ans = ''\n    po = pow(2, int(math.log2(n)))\n    while n >= po:\n        ans += str(n) + ' '\n        n -= 1\n    i = 0\n    while i < po:\n        ans += str(i) + ' '\n        i += 1\n    print(ans)\n    cases -= 1", "from math import log2, floor\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = 2 ** floor(log2(n - 1))\n    for x in range(1, a):\n        print(x, end=' ')\n    print(0, a, end=' ')\n    for x in range(a + 1, n):\n        print(x, end=' ')\n    print()", "import sys\ninput = sys.stdin.readline\n\ndef solution():\n    n = int(input())\n    d = 1\n    while 2 * d < n:\n        d *= 2\n    for i in range(n - 1, d - 1, -1):\n        print(i, end=' ')\n    print(0, end=' ')\n    for i in range(d - 1, 0, -1):\n        print(i, end=' ')\n    print()\n\ndef main():\n    t = 1\n    t = int(input())\n    for i in range(t):\n        solution()\nmain()", "import sys\ninput = sys.stdin.readline\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    n -= 1\n    cnt = 0\n    tmp = n\n    while tmp != 1:\n        tmp //= 2\n        cnt += 1\n    ret = 2 ** cnt\n    lst = []\n    for i in range(1, ret):\n        lst.append(i)\n    lst += [0, ret]\n    for i in range(ret + 1, n + 1):\n        lst.append(i)\n    print(*lst)", "import sys\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = 2\n    while x * 2 < n:\n        x <<= 1\n    for i in range(x - 1, -1, -1):\n        sys.stdout.write(str(i) + ' ')\n    for i in range(x, n):\n        sys.stdout.write(str(i) + ' ')\n    sys.stdout.write('\\n')", "def cutpoint(n):\n    i = 1\n    while n > 1:\n        n >>= 1\n        i <<= 1\n    return i\nfor _ in range(int(input())):\n    n = int(input())\n    c = cutpoint(n - 1)\n    L = list(range(c - 1, -1, -1)) + list(range(c, n))\n    print(*L)", "for _ in range(int(input())):\n    n = int(input())\n    k = 1\n    i = n - 1\n    while i > 1:\n        i //= 2\n        k += k\n    print(*range(1, k), 0, *range(k, n))", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    binary = 1\n    while binary * 2 < n:\n        binary *= 2\n    for x in range(n - 1, binary - 1, -1):\n        print(x, end=' ')\n    for x in range(binary):\n        print(x, end=' ')\n    print()", "for tc in range(int(input())):\n    n = int(input())\n    arr = [i for i in range(n)]\n    po = 0\n    n -= 1\n    while 2 ** po <= n:\n        po += 1\n    po -= 1\n    ind = arr.index(2 ** po)\n    arr.pop(0)\n    arr.insert(ind - 1, 0)\n    print(*arr, sep=' ')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    ans = []\n    l = math.log(n - 1, 2)\n    l = int(l)\n    po = 1 << l\n    ans = []\n    for i in range(1, po):\n        ans.append(i)\n    ans.append(0)\n    for i in range(po, n):\n        ans.append(i)\n    print(*ans)", "import sys, collections\n\ndef solve(n):\n    mx = n - 1\n    if mx & mx - 1 == 0:\n        return [i for i in range(1, mx)] + [0, mx]\n    s = bin(mx)[2:]\n    v = int('1' + '0' * (len(s) - 1), 2)\n    return [i for i in range(1, v)] + [0, v] + [i for i in range(v + 1, mx + 1)]\ninput = sys.stdin.readline\ntests = int(input()[:-1])\nfor test in range(tests):\n    n = int(input()[:-1])\n    arr = solve(n)\n    print(*arr)", "import sys\ninput = sys.stdin.readline\nfrom math import log2\n\ndef solve(n):\n    ans = [i for i in range(n)]\n    z = 2 ** int(log2(n - 1))\n    first = ans[:z]\n    first.reverse()\n    return first + ans[z:]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(*solve(n))", "def main():\n    n = int(input())\n    x = 1\n    while x * 2 < n:\n        x *= 2\n    A = list(range(1, x)) + [0] + list(range(x, n))\n    print(*A)\n\ndef xor(x, y):\n    a = bin(x)[2:]\n    b = bin(y)[2:]\n    lngth = max(len(a), len(b))\n    a = '0' * (lngth - len(a)) + a\n    b = '0' * (lngth - len(b)) + b\n    c = int(''.join(['1' if a[i] != b[i] else '0' for i in range(lngth)]), 2)\n    return c\n\ndef coast(A):\n    m = -1\n    for i in range(len(A) - 1):\n        m = max(m, xor(A[i], A[i + 1]))\n    for i in range(len(A)):\n        a = bin(A[i])[2:]\n    return m\nt = int(input())\nfor _ in range(t):\n    main()", "powers = [2 ** i for i in range(18)]\nout = []\nfor _ in range(int(input())):\n    n = int(input())\n    p = 17\n    while powers[p] >= n:\n        p -= 1\n    ans = [i for i in range(n - 1, powers[p] - 1, -1)]\n    ans.append(0)\n    ans += [i for i in range(powers[p] - 1, 0, -1)]\n    out.append(ans)\nfor i in out:\n    print(*i)", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    a = 0\n    s = ''\n    for j in range(0, n):\n        if 2 ** j > n - 1:\n            a = 2 ** (j - 1)\n            break\n    s += str(a) + ' 0 '\n    if a == n - 1:\n        for l in range(1, n):\n            if l != a:\n                s += str(l) + ' '\n    else:\n        for p in range(1, n):\n            if p == a + 1:\n                s += '1 '\n                s += str(p) + ' '\n            elif p == 1 or p == a:\n                continue\n            else:\n                s += str(p) + ' '\n    s.rstrip()\n    print(s)", "import math\nimport sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\nt = inp()\nwhile t > 0:\n    n = inp()\n    p = []\n    if n == 2:\n        p = [1, 0]\n    else:\n        curr = n - 1\n        while True:\n            p.append(curr)\n            if math.log(curr, 2).is_integer():\n                break\n            else:\n                curr -= 1\n        for i in range(curr):\n            p.append(i)\n    print(*p)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input()) - 1\n    z = 1 << n.bit_length() - 1\n    print(*range(z - 1, -1, -1), *range(z, n + 1))", "import sys\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = 2\n    while x * 2 < n:\n        x <<= 1\n    for i in range(x - 1, -1, -1):\n        sys.stdout.write(''.join([str(i), ' ']))\n    for i in range(x, n):\n        sys.stdout.write(''.join([str(i), ' ']))\n    sys.stdout.write('\\n')", "for _ in range(int(input())):\n    n = int(input()) - 1\n    k = n.bit_length() - 1\n    i = 2 ** k\n    print(*range(i - 1, -1, -1), *range(i, n + 1))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    x = int(math.log2(n - 1))\n    l = list(range(1, 2 ** x, 1)) + [0] + list(range(2 ** x, n, 1))\n    print(*l)", "num_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()\nfor _ in range(int(input())):\n    n = int(input()) - 1\n    z = 1 << n.bit_length() - 1\n    print(*range(z - 1, -1, -1), *range(z, n + 1))", "cas = int(input())\nfor i in range(cas):\n    n = int(input())\n    k = 1\n    c = n - 1\n    while c > 1:\n        c = c // 2\n        k = k + k\n    print(*range(1, k), 0, *range(k, n))", "from math import log2\nfor _ in range(int(input())):\n    n = int(input())\n    a = int(log2(n - 1))\n    k = 2 ** a\n    print(*range(1, k), 0, *range(k, n))", "for _ in range(int(input())):\n    n = int(input()) - 1\n    z = 1 << n.bit_length() - 1\n    print(*range(z - 1, -1, -1), *range(z, n + 1))", "for _ in range(int(input())):\n    n = int(input()) - 1\n    z = 1 << n.bit_length() - 1\n    print(*range(z - 1, -1, -1), *range(z, n + 1))", "import math\npower = [2 ** i for i in range(2, 22)]\nfor _ in range(int(input())):\n    n = int(input())\n    ans = ''\n    if n - 1 in power:\n        for i in range(n - 1):\n            ans += str(i) + ' '\n        ans = str(n - 1) + ' ' + ans\n    else:\n        cek = True\n        tmp = 2 ** 30\n        for i in power:\n            if i > n - 1:\n                tmp = i\n                tmp = tmp // 2\n                break\n        for i in range(1, n):\n            if i == tmp - 1:\n                ans += str(i) + ' 0 '\n            else:\n                ans += str(i) + ' '\n    if n == 3:\n        print('2 0 1')\n    elif n == 2:\n        print('0 1')\n    else:\n        print(ans)", "for _ in range(int(input())):\n    a = int(input())\n    r = list(range(a))\n    a -= 1\n    msb = 1\n    while msb << 1 <= a:\n        msb = msb << 1\n    r[0] = msb - 1\n    r[msb - 1] = 0\n    print(*r)", "import math\nfrom math import floor\nfor tc in range(int(input())):\n    n = int(input())\n    ans = []\n    lln = bin(n - 1)[2:]\n    lln = 2 ** (len(lln) - 1)\n    ans.extend(list(range(n - 1, lln - 1, -1)))\n    ans.extend(list(range(0, lln)))\n    print(*ans, sep=' ')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = 1\n    i = n - 1\n    while i > 1:\n        i //= 2\n        k += k\n    print(*range(1, k), 0, *range(k, n))", "from math import log2\nfor _ in range(int(input())):\n    n = int(input())\n    l = 2 ** int(log2(n - 1))\n    p = [*range(1, l)] + [0] + [*range(l, n)]\n    print(*p)", "def solve(x):\n    pow = 1\n    while x >= 2 * pow:\n        pow *= 2\n    ret = []\n    for i in reversed(range(pow, x + 1)):\n        ret.append(i)\n    ret.append(0)\n    for i in range(1, pow):\n        ret.append(i)\n    return ret\nt = int(input())\nfor _ in range(t):\n    x = int(input())\n    print(*solve(x - 1), sep=' ')", "for _ in range(int(input())):\n    n = int(input()) - 1\n    z = 1 << n.bit_length() - 1\n    print(*range(z - 1, -1, -1), *range(z, n + 1))", "for _ in range(int(input())):\n    n = int(input()) - 1\n    z = 1 << n.bit_length() - 1\n    print(*range(z - 1, -1, -1), *range(z, n + 1))", "from collections import Counter, deque\nfrom itertools import accumulate, product, groupby\nimport operator\nimport math\nfrom functools import reduce\n\ndef solve():\n    n = int(input())\n    if n == 2:\n        return [0, 1]\n    i = 1\n    n2 = 2\n    while n2 <= n:\n        n2 *= 2\n        i += 1\n    if n & n - 1 == 0:\n        n2 //= 2\n    n2 //= 2\n    ans = []\n    for i in range(n - 1, n2 - 1, -1):\n        ans.append(i)\n    ans.append(0)\n    for i in range(n2 - 1, 0, -1):\n        ans.append(i)\n    return ans\nfor _ in range(int(input())):\n    print(*solve())", "t = int(input())\nfor i in range(t):\n    n = int(input()) - 1\n    binary = bin(n)\n    length = len(binary) - 2\n    min_cost = 2 ** (length - 1)\n    arr = list(range(1, min_cost))\n    arr.append(0)\n    arr2 = list(range(min_cost, n + 1))\n    final = arr + arr2\n    print(*final)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    j = 1\n    while j * 2 < n:\n        j *= 2\n    for i in range(1, j):\n        print(i, end=' ')\n    print(0, end=' ')\n    for i in range(j, n):\n        print(i, end=' ')\n    print()", "for i in range(0, int(input())):\n    l = []\n    n = int(input())\n    k = bin(n - 1)[2:]\n    k = 2 ** (len(k) - 1)\n    l.extend(list(range(n - 1, k - 1, -1)))\n    l.extend(list(range(0, k)))\n    print(*l, sep=' ')", "from math import log, ceil\nfor _ in range(int(input())):\n    n = int(input())\n    l = ceil(log(n, 2))\n    print(*list(range(2 ** (l - 1) - 1, -1, -1)), *list(range(2 ** (l - 1), n)))", "for i in range(int(input())):\n    n = int(input()) - 1\n    binary = bin(n)\n    length = len(binary) - 2\n    min_cost = 2 ** (length - 1)\n    arr = list(range(1, min_cost))\n    arr.append(0)\n    arr2 = list(range(min_cost, n + 1))\n    final = arr + arr2\n    print(*final)", "from collections import Counter, deque, defaultdict\nfrom itertools import accumulate, product, groupby\nimport operator\nimport math\nfrom functools import reduce\n\ndef solve():\n    n = int(input())\n    bin_string = bin(n - 1)[2:]\n    bs = len(bin_string)\n    mid = '1' + '0' * (bs - 1)\n    mid_val = int(mid, 2)\n    left = list(range(mid_val - 1, -1, -1))\n    right = list(range(mid_val, n))\n    return left + right\nfor _ in range(int(input())):\n    print(*solve())", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    if n == 2:\n        print(*[0, 1])\n        continue\n    for i in range(32):\n        if n <= 2 ** i:\n            k = 2 ** (i - 1)\n            break\n    for i in range(k - 1, -1, -1):\n        l.append(i)\n    l.append(k)\n    for i in range(k + 1, n):\n        l.append(i)\n    print(*l)", "from math import log, ceil\nfor _ in range(int(input())):\n    n = int(input())\n    l = ceil(log(n, 2))\n    print(*list(range(2 ** (l - 1) - 1, -1, -1)), *list(range(2 ** (l - 1), n)))", "from math import log2\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    b = int(log2(n - 1))\n    c = 2 ** b\n    for i in range(c - 1, -1, -1):\n        a.append(i)\n    for i in range(c, n):\n        a.append(i)\n    print(*a)", "import math\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    n = n - 1\n    logn = int(math.log(n, 2))\n    b = 2 ** logn\n    arr = []\n    for i in range(n, b - 1, -1):\n        arr.append(i)\n    arr.append(0)\n    arr += [i for i in range(b - 1, 0, -1)]\n    print(*arr)", "def get_closest_power_of_2(n):\n    x = 1\n    while 2 * x < n:\n        x *= 2\n    return x\n\ndef print_sequence(n):\n    closest_power = get_closest_power_of_2(n)\n    for i in range(1, closest_power):\n        print(i, end=' ')\n    print(0, end=' ')\n    for i in range(closest_power, n):\n        print(i, end=' ')\n    print()\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print_sequence(n)", "import sys\ninput = sys.stdin.readline\nMAX = sys.maxsize\nsys.setrecursionlimit(10 ** 9)\n\ndef inp():\n    return int(input())\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\ndef read_list():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef read_int_map():\n    return map(int, input().split())\n\ndef solve(n):\n    x = 1\n    while x < n:\n        x <<= 1\n    rev = x >> 1\n    for i in range(rev - 1, -1, -1):\n        print(f'{i} ', end='')\n    for i in range(rev, n):\n        print(f'{i} ', end='')\n    print()\nfor _ in range(inp()):\n    solve(inp())", "a = [1]\nx = 1\nfor i in range(1, 20):\n    x = x * 2\n    a.append(x)\nfor l in range(int(input())):\n    n = int(input())\n    n -= 1\n    for i in range(20):\n        if a[i] > n:\n            x = a[i - 1]\n            break\n    print(*range(n, x - 1, -1), 0, *range(x - 1, 0, -1))", "for _ in range(int(input())):\n    n = int(input())\n    k = 1\n    while k << 1 < n:\n        k <<= 1\n    print(*range(k - 1, -1, -1), *range(k, n))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = 1\n    i = n - 1\n    while i > 1:\n        i //= 2\n        k += k\n    print(*range(1, k), 0, *range(k, n))", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    binary = 1\n    while binary * 2 < n:\n        binary *= 2\n    remain = n - binary - 1\n    for x in range(binary, n):\n        print(x, end=' ')\n    print(remain, end=' ')\n    for x in range(binary):\n        if x == remain:\n            continue\n        print(x, end=' ')\n    print()", "from math import log2\nfor _ in range(int(input())):\n    n = int(input())\n    a = int(log2(n - 1))\n    k = 2 ** a\n    print(*range(1, k), 0, *range(k, n))", "from math import *\nfor _ in range(int(input())):\n    N = int(input())\n    r = 1 << int(log2(N - 1))\n    print(*list(range(N - 1, r - 1, -1)) + list(range(r)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = n\n    n -= 1\n    while n & n - 1 != 0:\n        n -= 1\n    arr = list(range(n - 1, -1, -1)) + list(range(n, k))\n    print(*arr)", "def highestPowerof2(x):\n    x |= x >> 1\n    x |= x >> 2\n    x |= x >> 4\n    x |= x >> 8\n    x |= x >> 16\n    return x ^ x >> 1\nfor _ in range(int(input())):\n    n = int(input())\n    hp = highestPowerof2(n - 1)\n    l = []\n    for i in range(1, hp):\n        l.append(i)\n    l.append(0)\n    for i in range(hp, n):\n        l.append(i)\n    print(*l)", "for _ in range(int(input())):\n    n = int(input())\n    if n == 2:\n        print(1, 0)\n    else:\n        i = 1\n        n2 = 2\n        while n2 <= n:\n            n2 *= 2\n            i + 1\n        if n & n - 1 == 0:\n            n2 //= 2\n        n2 //= 2\n        for k in range(n - 1, n2 - 1, -1):\n            print(k, end=' ')\n        print(0, end=' ')\n        for k in range(n2 - 1, 0, -1):\n            print(k, end=' ')\n        print()", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input()) - 1\n    k = int(math.log(n, 2))\n    k = pow(2, k)\n    for i in range(1, k):\n        print(i, end=' ')\n    print(0, k, end=' ')\n    for i in range(k + 1, n + 1):\n        print(i, end=' ')\n    print()", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    j = 1\n    while j * 2 < n:\n        j = j * 2\n    for i in range(1, j):\n        print(i, end=' ')\n    print(0, end=' ')\n    for j in range(j, n):\n        print(j, end=' ')\n    print()", "import sys\nfrom math import sqrt, gcd\nfrom collections import deque, Counter, OrderedDict\nsys.setrecursionlimit(10 ** 8)\nI = lambda : int(input())\nS = lambda : input().strip()\nM = lambda : map(int, input().strip().split())\nL = lambda : list(map(str, input().strip().split()))\nmod = 1000000007\nfor i in range(I()):\n    n = I()\n    k = 1\n    while k * 2 <= n - 1:\n        k *= 2\n    ans = [i + 1 for i in range(k - 1)] + [0] + [i for i in range(k, n)]\n    print(*ans)", "from math import log2\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    b = int(log2(n - 1))\n    c = 2 ** b\n    for i in range(c - 1, -1, -1):\n        a.append(i)\n    for i in range(c, n):\n        a.append(i)\n    print(*a)", "for _ in range(int(input())):\n    n = int(input())\n    k = len(bin(n - 1)[2:])\n    l = pow(2, k - 1)\n    lst = []\n    x = n - 1\n    while x >= l:\n        lst.append(x)\n        x -= 1\n    for i in range(l):\n        lst.append(i)\n    print(*lst)", "def solve(n):\n    if n == 2:\n        print('0 1')\n        return\n    ans = []\n    nums = set([i for i in range(n)])\n    v = 2 ** (len(bin(n - 1)) - 3)\n    for i in range(n - 1, v - 1, -1):\n        ans.append(i)\n        nums.remove(i)\n    ans.append(0)\n    nums.remove(0)\n    for num in nums:\n        ans.append(num)\n    print(*ans)\nfor _ in range(int(input())):\n    solve(int(input()))", "for _ in range(int(input())):\n    n = int(input())\n    k = 1\n    while 2 * k <= n - 1:\n        k *= 2\n    for i in range(k - 1, -1, -1):\n        print(i, end=' ')\n    for i in range(k, n):\n        print(i, end=' ')\n    print()"]