["from sys import stdin\n\ndef solve():\n    for _ in range(int(stdin.readline().strip())):\n        (n, s) = map(int, stdin.readline().rstrip().split())\n        print(s // (n * n))\nsolve()", "import sys\nimport math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, s) = input().split()\n    n = int(n)\n    s = int(s)\n    print(math.floor(s / (n * n)))", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // n // n)", "for _ in [*open(0)][1:]:\n    (n, s) = map(int, _.split())\n    print(s // (n * n))", "import sys\n\ndef main():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        (n, s) = map(int, sys.stdin.readline().split())\n        print(s // n ** 2)\nmain()", "import sys\nsys.setrecursionlimit(10 ** 6)\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    if n * n > s:\n        print(0)\n        continue\n    ans = s // (n * n)\n    print(ans)", "import sys\ntest_cases = sys.stdin.readline()\nfor line in sys.stdin:\n    if not line.strip():\n        continue\n    (n, s) = map(int, line.strip().split())\n    print(s // n ** 2)", "def solve(n, s):\n    rem = s // n ** 2\n    return rem\nfrom sys import stdin\ninput = stdin.readline\nt = int(input())\nfor i in range(t):\n    (n, s) = [int(x) for x in input().split()]\n    print(solve(n, s))", "from math import *\nfrom sys import *\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\nfrom array import array\ninput = stdin.readline\ninp = lambda : int(input())\nli = lambda : list(map(int, input().split()))\nlb = lambda : list(map(int, input()))\nls = lambda : list(input())\nbi = lambda n: bin(n).replace('0b', '')\nyn = lambda f: print('NYOE S'[f::2])\nsrp = lambda s, i, c: s[:i] + c + s[i + 1:]\n\ndef solve(__=1):\n    for _ in range(__):\n        (n, s) = li()\n        print(s // n ** 2)\nsolve(inp())", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // n // n)", "for _ in [*open(0)][1:]:\n    (n, s) = map(int, _.split())\n    print(s // (n * n))", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // n // n)", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    arr = stdin.readline().split()\n    n = int(arr[0])\n    s = int(arr[1])\n    print(s // n ** 2)", "from sys import stdin\nfrom math import floor\n\ndef A():\n    T = int(stdin.readline())\n    for _ in range(T):\n        (n, s) = map(int, stdin.readline().split())\n        print(s // int(n ** 2))\nA()", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // n // n)", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // n // n)", "import sys\ninput = sys.stdin.readline\n\ndef find_possible():\n    number_examples = int(input())\n    for test_case in range(number_examples):\n        test_case = list(map(int, input().split()))\n        n = test_case[0]\n        s = test_case[1]\n        if s:\n            print(s // n ** 2)\n        else:\n            print(0)\nfind_possible()", "import sys\nimport bisect\ninp = sys.stdin.readline\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(inp())):\n    (n, s) = map(int, inp().split())\n    print(s // n ** 2)", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // n // n)", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // n // n)", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // n // n)", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // n // n)", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // n // n)", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // n // n)", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // n // n)", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // n // n)", "def solve():\n    (n, s) = [int(i) for i in input().split()]\n    return s // n // n\nt = int(input())\nans = []\nwhile t:\n    ans.append(str(solve()))\n    t -= 1\nprint('\\n'.join(ans))", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // n // n)", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // n // n)", "from math import *\nfrom sys import *\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\nfrom array import array\ninput = stdin.readline\ninp = lambda : int(input())\nli = lambda : list(map(int, input().split()))\nlb = lambda : list(map(int, input()))\nls = lambda : list(input())\nbi = lambda n: bin(n).replace('0b', '')\nyn = lambda f: print('NYOE S'[f::2])\nsrp = lambda s, i, c: s[:i] + c + s[i + 1:]\n\ndef solve(__=1):\n    for _ in range(__):\n        (n, s) = li()\n        print(s // n ** 2)\nsolve(inp())", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    t = int(input())\n    for tc in range(t):\n        (n, s) = map(int, input().split())\n        print(s // n ** 2)\nmain()", "import math\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    print(s // (n * n))", "t = int(input())\nl = []\nfor i in range(t):\n    (a, b) = input().split()\n    n = int(a)\n    s = int(b)\n    c = n * n\n    d = s // c\n    l.append(d)\nfor i in l:\n    print(i)", "t = int(input())\ns = 0\nnumbers = []\nfor i in range(t):\n    (n, s) = input().split()\n    n = int(n)\n    s = int(s)\n    n2 = n * n\n    numbers.append(s // n2)\nfor i in numbers:\n    print(i)", "cases = int(input())\narr = []\nfor i in range(cases):\n    (n, s) = input().split()\n    n = int(n)\n    s = int(s)\n    arr.append(s // (n * n))\nfor i in arr:\n    print(i)", "from math import ceil\nfrom sys import stdin\ninput = stdin.readline\n\ndef main():\n    for _ in range(int(input())):\n        (n, s) = map(int, input().split())\n        mes = (n - 1) * (n + 1)\n        if s > mes:\n            init = (n - 1) * n + n ** 2\n            x = init - mes\n            print(ceil((s - mes) / x))\n        else:\n            print(0)\nmain()", "for s in [*open(0)][1:]:\n    (n, s) = map(int, s.split())\n    print(s // n // n)", "from sys import stdin, stdout\nfrom collections import defaultdict\ninput = stdin.readline\nt = int(input().strip())\nfor _ in range(t):\n    (n, s) = list(map(int, input().strip().split()))\n    nsq = n * n\n    cnt = 0\n    cnt = s // nsq\n    print(cnt)", "import sys\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\nfrom collections import deque\nfrom queue import PriorityQueue as pq\nfrom math import gcd\ninput_ = lambda : sys.stdin.readline().strip('\\r\\n')\nii = lambda : int(input_())\nil = lambda : list(map(int, input_().split()))\nilf = lambda : list(map(float, input_().split()))\nlii = lambda : list(map(int, list(ip())))\nip = lambda : input_()\nfi = lambda : float(input_())\nap = lambda ab, bc, cd: ab[bc].append(cd)\nli = lambda : list(input_())\npr = lambda x: print(x)\nprinT = lambda x: print(x)\nf = lambda : sys.stdout.flush()\ninv = lambda x: pow(x, mod - 2, mod)\ndx = [0, 0, 1, -1]\ndy = [1, -1, 0, 0]\nmod = 10 ** 9 + 7\nmod1 = 998244353\nfor _ in range(ii()):\n    (n, s) = il()\n    ans = s // (n * n)\n    print(ans)", "out = []\nfor _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    out.append(s // n ** 2)\nfor i in out:\n    print(i)", "import sys\ninput = sys.stdin.readline\n\ndef solve(n, s):\n    print(s // n ** 2)\nfor _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    solve(n, s)", "from collections import deque\nfrom re import X\nimport sys\nfor _ in range(int(sys.stdin.readline())):\n    (n, s) = map(int, sys.stdin.readline().split())\n    print(s // (n * n))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    print(s // n ** 2)", "from enum import Enum, auto\nimport copy\nimport sys\nimport re\nimport math\nimport bisect\nfrom collections import deque\ninput = sys.stdin.readline\nINF = 987654321\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, s) = map(int, input().split())\n        ret = int(s / (n * n))\n        print(ret)\nmain()", "t = int(input())\narr = []\nfor i in range(0, t):\n    (n, k) = map(int, input().split())\n    arr.append(k // (n * n))\nfor x in arr:\n    print(x)", "t = int(input())\nresult = []\nfor case in range(t):\n    (n, s) = map(int, input().split())\n    result.append(s // n ** 2)\nfor x in result:\n    print(x)", "import sys\ninput = sys.stdin.readline\nprint = sys.stdout.write\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (a, b) = map(int, input().split())\n        print(f'{b // a ** 2}\\n')\nmain()", "c = int(input())\nn = [0] * c\ns = [0] * c\nfor i in range(c):\n    (n[i], s[i]) = map(int, input().split())\nfor h in range(c):\n    print(s[h] // (n[h] * n[h]))", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nx = int(input())\nfor i in range(x):\n    input_numbers = inlt()\n    num_sqrd = input_numbers[0] * input_numbers[0]\n    print(int(input_numbers[1] / num_sqrd))", "t = int(input())\nli = []\nfor i in range(t):\n    (n, s) = map(int, input().split()[:2])\n    j = s // n ** 2\n    li.append(j)\nfor i in li:\n    print(i)", "cases = int(input())\nlist = []\nwhile cases != 0:\n    (n, s) = map(int, input().split())\n    if s == 0:\n        list.append(0)\n    else:\n        list.append(s // n ** 2)\n    cases = cases - 1\nfor x in list:\n    print(x)", "def main():\n    t = int(input())\n    solutions = []\n    for test in range(t):\n        datas = input().split()\n        n = int(datas[0])\n        s = int(datas[1])\n        if s < n * n:\n            solutions.append(0)\n        elif s == n * n:\n            solutions.append(1)\n        else:\n            solutions.append(int(s / (n * n)))\n    for ss in solutions:\n        print(ss)\nmain()", "m = []\nfor _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    k = n ** 2\n    m.append(s // k)\nfor mo in m:\n    print(mo)", "def count(n, s):\n    return s // n ** 2\nt = int(input())\nlst = []\nfor i in range(t):\n    (n, s) = map(int, input().split())\n    lst.append(count(n, s))\nprint(*lst, sep='\\n')", "import sys\n\nclass Solution:\n\n    def square_counting(self, N, S):\n        return S // N ** 2\nT = int(sys.stdin.readline().strip())\nfor t_ in range(T):\n    (N, S) = [int(x_) for x_ in sys.stdin.readline().strip().split(' ')]\n    s = Solution()\n    print(s.square_counting(N, S))", "import math\nimport sys\nimport itertools\nimport fractions\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\nfor t in wtf[1:]:\n    (n, s) = map(int, t.split())\n    print(int(s // n ** 2))", "from math import *\nimport sys\ncin = lambda : sys.stdin.readline().strip()\ncout = sys.stdout.write\n\ndef print_test_cases(tt, ans):\n    cout(f'Case #{tt}: {ans}\\n')\n\ndef read_line():\n    return list(map(int, cin().split()))\n\ndef solve(tt):\n    (n, s) = read_line()\n    ans = s // (n * n)\n    cout(str(ans))\n    cout('\\n')\n\ndef main():\n    T = int(cin())\n    for tt in range(1, T + 1):\n        solve(tt)\nmain()", "a = int(input())\nb = []\nfor i in range(a):\n    b.append(list(map(int, input().split())))\nfor l in b:\n    print(l[1] // l[0] ** 2)", "def fun(l):\n    n = l[0]\n    s = l[1]\n    return s // (n * n)\nfinal = []\nfor i in range(int(input())):\n    l = list(map(int, input().split()))\n    final.append(fun(l))\nfor i in final:\n    print(i)", "t = int(input())\nlst = []\nfor i in range(t):\n    (n, s) = map(int, input().split(' '))\n    lst.append(s // n ** 2)\nfor i in lst:\n    print(i)", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, s) = map(int, inp().split())\n    print(s // n ** 2)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "from math import floor\nt = int(input())\nresult = []\nfor i1 in range(t):\n    in1 = input().split()\n    result.append(floor(int(in1[1]) / int(in1[0]) ** 2))\nfor i2 in result:\n    print(i2)", "import sys\ninp = sys.stdin.readline\nfor _ in range(int(inp())):\n    (n, s) = map(int, inp().split())\n    if s < n ** 2:\n        print(0)\n    elif s == n ** 2:\n        print(1)\n    else:\n        print(s // n ** 2)", "results = []\nfor t in range(int(input())):\n    (n, s) = [int(x) for x in input().split()]\n    results.append(int(s / (n * n)))\nprint(*results, sep='\\n')", "import math\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    print(s // (n * n))", "t = int(input())\nres = []\nfor i in range(t):\n    ar = list(map(int, input().split()))\n    n = ar[0]\n    s = ar[1]\n    res.append(int(s / n ** 2))\nfor el in res:\n    print(el)", "ans = ''\nnum = int(input())\nfor i in range(num):\n    (n, s) = map(int, input().split())\n    ans += f'{int(s / n ** 2)}\\n'\nprint(ans)", "def squre(t):\n    f_lst = []\n    for i in range(t):\n        (a, b) = list(map(int, input().split()))\n        s = b // a ** 2\n        f_lst.append(s)\n    return f_lst\nt = int(input())\nx = squre(t)\nfor i in x:\n    print(i)", "l1 = []\nl2 = []\nl3 = []\nt = int(input())\nfor i in range(t):\n    l1 = input().split()\n    l2 = list(map(int, l1))\n    l3.append(l2)\nfor i in range(len(l3)):\n    c = l3[i][0]\n    s = l3[i][1]\n    print(int(s / (c * c)))", "ls = []\nfor i in range(int(input())):\n    cnt = 0\n    (n, s) = input().split()\n    if int(s) == 0:\n        ls.append(0)\n    else:\n        flag = int(s) >= int(n) ** 2\n        remaining = s\n        if flag:\n            cnt = int(s) // int(n) ** 2\n            ls.append(cnt)\n        else:\n            ls.append(0)\nfor items in ls:\n    print(items)", "t = int(input(''))\nans = []\nfor i in range(t):\n    (n, s) = map(int, input().split())\n    if n ** 2 > s:\n        ans.append(0)\n    elif n == 1 and s == 1:\n        ans.append(1)\n    else:\n        ans.append(s // n ** 2)\nfor i in range(t):\n    print(ans[i])", "from math import ceil\nfrom sys import stdin\ninput = stdin.readline\n\ndef main():\n    for _ in range(int(input())):\n        (n, s) = map(int, input().split())\n        mes = (n - 1) * (n + 1)\n        if s > mes:\n            init = (n - 1) * n + n ** 2\n            x = init - mes\n            print(ceil((s - mes) / x))\n        else:\n            print(0)\nmain()", "import fileinput\nfile = fileinput.input()\n\ndef square(n, s):\n    a = n ** 2\n    b = int(s / a)\n    print(b)\nwhile True:\n    test = []\n    line = file.readline().strip()\n    if line == '':\n        break\n    for _ in range(int(line)):\n        case = file.readline().strip()\n        case = case.split(' ')\n        square(int(case[0]), int(case[1]))", "t = int(input())\nA = []\nfor i in range(t):\n    ti = input().split(' ')\n    (n, s) = (int(ti[0]), int(ti[1]))\n    if s == 0:\n        A.append(0)\n    else:\n        A.append(s // n ** 2)\nfor a in A:\n    print(a)", "alpha = []\nbeta = []\ngamma = []\nt = int(input())\nfor i in range(t):\n    a = [int(s) for s in input().split(' ')]\n    beta.append(a)\nfor i in range(t):\n    (n, s) = beta[i]\n    if n != 0:\n        print(int(s / pow(n, 2)))\n    else:\n        print(0)", "k = []\nfor i in range(int(input())):\n    (n, s) = map(int, input().split())\n    k.append(s // n ** 2)\nfor t in k:\n    print(t)", "n = int(input())\narr = []\nfor i in range(n):\n    y = [int(x) for x in input().split()]\n    arr.append(y)\nfor i in range(len(arr)):\n    print(arr[i][1] // arr[i][0] ** 2)", "import math as m\nt = int(input())\nList = []\nfor k in range(0, t):\n    listns = []\n    inpuut = input()\n    inputspl = inpuut.split()\n    n = int(inputspl[0])\n    s = int(inputspl[1])\n    listns.append(n)\n    listns.append(s)\n    List.append(listns)\nfor element in List:\n    d = element[0] ** 2\n    c = m.floor(element[1] / d)\n    print(c)", "import math\nt = int(input())\nans = []\nfor x in range(t):\n    inp = list(map(int, input().split()))\n    n = inp[0]\n    s = inp[1]\n    answer = math.ceil((s - n * n + 1) / (n * n - n + 1))\n    if answer < 0:\n        answer = 0\n    ans.append(answer)\nfor a in ans:\n    print(a)", "__ = int(input())\nl = []\nfor _ in range(__):\n    a = input().split()\n    l.extend(a)\nw = 0\nfor j in range(__):\n    n = int(l[w])\n    s = int(l[w + 1])\n    square = n ** 2\n    max_value = square * (n + 1)\n    y = s // square\n    h = False\n    if s == 0:\n        pass\n    elif s == max_value:\n        k = s // (n + 1)\n        h = True\n    else:\n        h = False\n    w += 2\n    if h:\n        print(n + 1)\n    else:\n        print(y)", "l0 = int(input())\nl2 = {}\nl4 = []\nfor i in range(l0):\n    l1 = input()\n    l4.append(l1.split(' '))\nfor i in range(l0):\n    if int(l4[i][1]) != 0:\n        print(int(int(l4[i][1]) / int(l4[i][0]) ** 2))\n    else:\n        print(0)", "import math\nfrom itertools import permutations\nfrom re import X\nn = int(input(''))\nLIST = []\nfor i in range(n):\n    line = list(map(int, input().split()))\n    LIST.append(line)\nfor numbers in LIST:\n    n = numbers[0]\n    s = numbers[1]\n    print(math.floor(s / n ** 2))", "def function(testCases):\n    while testCases != 0:\n        (n, s) = input().split(' ')\n        n = int(n)\n        s = int(s)\n        print(s // (n * n))\n        testCases -= 1\nfunction(int(input()))", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    if s == 0:\n        print(0)\n    else:\n        n2 = n * n\n        ans = s // n2\n        print(ans)", "t = int(input())\nfor i in range(t):\n    (n, s) = map(int, input().split())\n    print(s // n ** 2)", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    print(s // (n * n))", "import math\ntry:\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        n = n\n        ans = k // (n * n)\n        if k == 0:\n            print(0)\n            continue\n        print(ans)\nexcept:\n    pass", "x = int(input())\nfor i in range(x):\n    (n, s) = map(int, input().split())\n    print(s // (n * n))", "n = int(input())\nfor i in range(n):\n    m = input().split()\n    a = int(m[0])\n    b = int(m[1])\n    s = a ** 2\n    if b == 0:\n        print('0')\n    else:\n        print(b // s)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, s) = map(int, input().split())\n    x = n * n\n    if s >= x:\n        print(s // x)\n    else:\n        print(0)", "for i in range(int(input())):\n    (A, B) = map(int, input().split())\n    print(B // A ** 2)", "a = int(input())\nfor i in range(a):\n    (a, b) = map(int, input().split())\n    print(b // a ** 2)", "t = int(input())\nfor i in range(t):\n    (n, s) = map(int, input().split())\n    if s >= n:\n        print(s // (n * n))\n    else:\n        print(0)", "for i in range(int(input())):\n    (n, s) = map(int, input().split())\n    k = n * n\n    print(s // k)"]