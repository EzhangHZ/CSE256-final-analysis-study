["def solve(studentActivity, n, s):\n    maxContiguousLength = 0\n    firstIndex = -1\n    rangeList = [-1]\n    curActivitySum = s\n    for (lastIndex, activity) in enumerate(studentActivity):\n        curActivitySum += activity\n        while curActivitySum < 0 and firstIndex < lastIndex:\n            firstIndex += 1\n            curActivitySum -= studentActivity[firstIndex]\n        curActivityLength = lastIndex - firstIndex\n        if curActivityLength > maxContiguousLength:\n            rangeList = [firstIndex + 2, lastIndex + 1]\n            maxContiguousLength = curActivityLength\n    print(*rangeList)\nfor case in range(int(input())):\n    (n, s) = map(int, input().split())\n    studentActivity = list(map(int, input().split()))\n    solve(studentActivity, n, s)", "def f():\n    (n, t) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = 0\n    (x, y) = (0, 0)\n    (p, q) = (-1, -1)\n    for i in range(n):\n        if t + l[i] >= 0:\n            y += 1\n            t += l[i]\n        else:\n            if d < y - x:\n                d = y - x\n                (p, q) = (x, y)\n            while t + l[i] < 0 and x != y:\n                t -= l[x]\n                x += 1\n            y += 1\n            if t + l[i] < 0:\n                x += 1\n            else:\n                t += l[i]\n        if d < y - x:\n            d = y - x\n            (p, q) = (x, y)\n    if d:\n        return [p + 1, q]\n    else:\n        return [-1]\nfor _ in range(int(input())):\n    print(*f())", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    arr = [-1] + list(map(int, input().split()))\n    maxSoFar = x = y = 0\n    left = 1\n    curr = s\n    for right in range(1, n + 1):\n        curr += arr[right]\n        while curr < 0:\n            curr -= arr[left]\n            left += 1\n        if right - left + 1 > maxSoFar:\n            maxSoFar = right - left + 1\n            x = left\n            y = right\n    print(f'{x} {y}' if maxSoFar else -1)", "def main():\n    t = int(input())\n    for i in range(t):\n        (n, s) = list(map(int, input().split()))\n        a = list(map(int, input().split()))\n        (l1, l2, r_l1, r_l2) = (0, 0, 0, 0)\n        summa = 0\n        while l1 < n:\n            if l2 < l1:\n                l2 = l1\n                summa = 0\n            while l2 < n and summa + a[l2] + s >= 0:\n                summa += a[l2]\n                l2 += 1\n            if r_l2 - r_l1 < l2 - l1:\n                (r_l2, r_l1) = (l2, l1)\n            summa -= a[l1]\n            l1 += 1\n        print(r_l1 + 1, r_l2) if r_l1 < r_l2 else print(-1)\nmain()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    s = [-1 * i for i in arr]\n    subarray_start = 0\n    subarray_end = 0\n    st = -1\n    e = -1\n    subarray_sum = 0\n    max_len = -1\n    for i in s:\n        subarray_sum += i\n        subarray_end += 1\n        while subarray_sum > k:\n            subarray_sum -= s[subarray_start]\n            subarray_start += 1\n        if subarray_end - subarray_start > max_len:\n            max_len = subarray_end - subarray_start\n            st = subarray_start\n            e = subarray_end\n    if st == 1 and e == 1:\n        print(-1)\n    else:\n        print(st + 1, e)", "cases = int(input())\nfor _ in range(cases):\n    (n, s) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    left = 0\n    end = -1\n    available = s\n    students = 0\n    for (right, n) in enumerate(lst):\n        available += n\n        while available < 0:\n            available -= lst[left]\n            left += 1\n        student_window = right - left + 1\n        if student_window > students:\n            students = student_window\n            end = right\n    if end == -1:\n        print(-1)\n    else:\n        end += 1\n        print(end - students + 1, end)", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000000 + 7\nmod2 = 998244353\nfor _ in range(I()):\n    (n, s) = M()\n    a = L()\n    i = j = 0\n    c = s\n    m = -1\n    p = q = -1\n    for k in a:\n        c += k\n        j += 1\n        if c >= 0:\n            if m < j - i:\n                m = j - i\n                (p, q) = (i + 1, j)\n        else:\n            while c < 0:\n                c -= a[i]\n                i += 1\n    if m == -1:\n        print(-1)\n    else:\n        print(p, q)", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    arr = [-1] + list(map(int, input().split()))\n    maxSoFar = x = y = 0\n    left = 1\n    curr = s\n    for right in range(1, n + 1):\n        curr += arr[right]\n        while curr < 0:\n            curr -= arr[left]\n            left += 1\n        if right - left + 1 > maxSoFar:\n            maxSoFar = right - left + 1\n            x = left\n            y = right\n    print(f'{x} {y}' if maxSoFar else -1)", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    l = 0\n    ans = -1\n    temp = 0\n    res = []\n    for (r, el) in enumerate(arr):\n        temp += el\n        while l <= r and temp + s < 0:\n            temp -= arr[l]\n            l += 1\n        if l > r:\n            pass\n        elif ans < r - l + 1:\n            ans = r - l + 1\n            res = [l, r]\n    if ans == -1:\n        print(ans)\n    else:\n        print(res[0] + 1, res[1] + 1)", "import sys\ninput = sys.stdin.readline\nnn = int(input())\nfor _ in range(nn):\n    (n, s) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    (l, r, total, length) = (0, 0, 0, [0, 0, 0])\n    for r in range(n):\n        total += nums[r]\n        while l <= r and total < -s:\n            total -= nums[l]\n            l += 1\n        if r - l + 1 > length[0]:\n            length = [r - l + 1, l + 1, r + 1]\n    print(*length[1:]) if length[0] > 0 else print(-1)", "for _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    arr = [-1] + list(map(int, input().split()))\n    maxSoFar = x = y = 0\n    left = 1\n    curr = s\n    for right in range(1, n + 1):\n        curr += arr[right]\n        while curr < 0:\n            curr -= arr[left]\n            left += 1\n        if right - left + 1 > maxSoFar:\n            maxSoFar = right - left + 1\n            x = left\n            y = right\n    print(f'{x} {y}' if maxSoFar else -1)", "t = int(input())\nanswers = []\nfor _ in range(t):\n    (n, s) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    (l, r, lmax, rmax, cur_max) = (0, 0, 0, -1, 0)\n    for i in range(n):\n        s += a[i]\n        cur_max += 1\n        while s < 0:\n            s -= a[l]\n            l += 1\n            cur_max -= 1\n        if rmax - lmax + 1 < cur_max:\n            lmax = l\n            rmax = r\n        r += 1\n    if rmax == -1:\n        print(-1)\n    else:\n        print(str(lmax + 1) + ' ' + str(rmax + 1))", "t = int(input())\nfor i in range(t):\n    (n, s) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    if n == 1:\n        if s + a[0] >= 0:\n            print(1, 1)\n        else:\n            print(-1)\n    else:\n        curfp = 0\n        curlp = 0\n        curlength = 0\n        maxfp = 0\n        maxlp = 0\n        maxlength = 0\n        temp_sum = a[0]\n        while curlp != n - 1:\n            if temp_sum + s >= 0:\n                temp_sum += a[curlp + 1]\n                curlength += 1\n                curlp += 1\n            elif curfp == curlp:\n                temp_sum = a[curlp + 1]\n                curfp += 1\n                curlp += 1\n            else:\n                if curlength > maxlength:\n                    maxlength = curlength\n                    maxfp = curfp\n                    maxlp = curlp - 1\n                temp_sum -= a[curfp]\n                curfp += 1\n                curlength -= 1\n        if curlp - curfp + 1 > maxlength and temp_sum + s >= 0:\n            maxlength = curlp - curfp + 1\n            maxfp = curfp\n            maxlp = curlp\n        elif curlength > maxlength:\n            maxlength = curlength\n            maxfp = curfp\n            maxlp = curlp - 1\n        if maxlength > 0:\n            print(maxfp + 1, maxlp + 1)\n        else:\n            print(-1)", "t = int(input())\nfor _ in range(t):\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = [-1]\n    (mxlen, i, j, cs, w) = [0] * 5\n    while 1:\n        if cs >= -s:\n            if j - i > mxlen:\n                mxlen = j - i\n                ans = [i + 1, j]\n            if j >= n:\n                break\n            cs += a[j]\n            j += 1\n            continue\n        cs = cs - a[i]\n        i += 1\n    print(*ans)", "f = lambda : [*map(int, input().split())]\nfor _ in [0] * f()[0]:\n    (n, s) = f()\n    (a, x) = (f(), [-1])\n    (l, b, e, t, w) = [0] * 5\n    while 1:\n        if w >= -s:\n            if e - b > l:\n                l = e - b\n                x = [b + 1, e]\n            if e >= n:\n                print(*x)\n                break\n            t += a[e]\n            w = min(w, t)\n            e += 1\n        else:\n            w = t = t - a[b]\n            b += 1", "import sys\nprinter = []\nfor _ in range(int(sys.stdin.readline())):\n    (n, s) = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    (i, j) = (0, 0)\n    atm = s\n    ans = -1\n    (L, R) = (0, 0)\n    while j < n:\n        if a[j] + atm >= 0:\n            atm += a[j]\n            j += 1\n        else:\n            atm -= a[i]\n            i += 1\n        if ans < j - i:\n            ans = j - i\n            (L, R) = (i + 1, j)\n    if L > R:\n        printer.append('-1')\n    else:\n        printer.append(str(L) + ' ' + str(R))\nprint('\\n'.join(printer))", "import sys\nsys.stdin.readline\ntc = int(input())\nfor _ in range(tc):\n    (n, k) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    ans = 0\n    l = 0\n    r = 0\n    sum = k\n    maxd = 0\n    resL = -1\n    resr = -1\n    while r <= len(ar) - 1:\n        sum += ar[r]\n        if sum < 0:\n            r += 1\n            while l < r and sum < 0:\n                sum -= ar[l]\n                l += 1\n        else:\n            dist = r - l + 1\n            if maxd < dist:\n                resL = l + 1\n                resr = r + 1\n                maxd = max(maxd, dist)\n            r += 1\n    if resL == -1:\n        print(-1)\n    else:\n        print(resL, resr)", "test = int(input())\nfor _ in range(test):\n    (n, s) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    (left, right) = (0, 0)\n    ans = [0, -1, -1]\n    while right < n:\n        if arr[right] >= 0:\n            s += arr[right]\n            right += 1\n        elif s + arr[right] >= 0:\n            s += arr[right]\n            right += 1\n        else:\n            if right - left > ans[0]:\n                ans[0] = right - left\n                ans[1] = left\n                ans[2] = right - 1\n            if left < right:\n                s -= arr[left]\n                left += 1\n            else:\n                left += 1\n                right += 1\n    while left < right:\n        if right - left > ans[0]:\n            ans[0] = right - left\n            ans[1] = left\n            ans[2] = right - 1\n        if left < right:\n            s -= arr[left]\n            left += 1\n        else:\n            left += 1\n            right += 1\n    if ans[0]:\n        print(ans[1] + 1, ans[2] + 1)\n    else:\n        print(-1)", "import itertools, operator\nT = int(input())\nfor t in range(T):\n    (n, s) = map(int, input().split())\n    a = list(itertools.accumulate(map(lambda x: -int(x), input().split()), func=operator.add, initial=0))\n    (x, y, l) = (-1, -1, 0)\n    (i, j) = (1, 1)\n    while j < n + 1:\n        if a[j] - a[i - 1] <= s:\n            j += 1\n            if l < j - i:\n                (x, y, l) = (i, j, j - i)\n        else:\n            i += 1\n        if i > j:\n            j = i\n    if i <= n:\n        if l < j - i + 1:\n            (x, y, l) = (i, j, j - i + 1)\n    if l:\n        print(x, y - 1)\n    else:\n        print(-1)", "tc = int(input())\nfor case in range(tc):\n    (n, suma) = (int(i) for i in input().split())\n    queries = [int(j) for j in input().split()]\n    indice = -1\n    final = -1\n    maximo = 0\n    for pos in range(n):\n        valor = queries[pos]\n        if suma + valor >= 0:\n            if indice == -1:\n                indice = pos\n                final = pos\n                suma += valor\n            else:\n                suma += valor\n                final = pos\n            longitud = final - indice + 1\n            if longitud > maximo:\n                last_indice = indice\n                last_final = final\n            maximo = max(maximo, longitud)\n        elif indice != -1:\n            suma += queries[pos]\n            for j in range(indice, pos + 1):\n                suma -= queries[j]\n                if suma >= 0:\n                    indice = j + 1\n                    break\n    if indice == -1:\n        print(-1)\n    else:\n        print(last_indice + 1, last_final + 1)", "f = lambda : [*map(int, input().split())]\nfor _ in [0] * f()[0]:\n    (n, s) = f()\n    (a, x) = (f(), [-1])\n    (l, b, e, t, w) = [0] * 5\n    while 1:\n        if w >= -s:\n            if e - b > l:\n                l = e - b\n                x = [b + 1, e]\n            if e >= n:\n                print(*x)\n                break\n            t += a[e]\n            w = min(w, t)\n            e += 1\n        else:\n            t -= a[b]\n            w -= a[b]\n            b += 1", "T = int(input())\nfor _ in range(T):\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (l, r, m) = (0, 0, 0)\n    add = 0\n    interm = 0\n    while r < n:\n        if s + add >= 0 and s + add + a[r] >= 0:\n            add += a[r]\n            if m < r - l + 1:\n                ans = [l, r]\n                m = r - l + 1\n            r += 1\n        elif l == r:\n            add = 0\n            l += 1\n            r += 1\n        else:\n            add -= a[l]\n            l += 1\n    if m == 0:\n        print('-1')\n    else:\n        print(f'{ans[0] + 1} {ans[1] + 1}')", "from collections import deque\nfrom math import inf\n\ndef solve(s, a):\n    prefix = [0] * len(a)\n    prefix[0] = a[0]\n    for k in range(1, len(a)):\n        prefix[k] = prefix[k - 1] + a[k]\n\n    def subsum(x, y):\n        if x == 0:\n            return prefix[y]\n        return prefix[y] - prefix[x - 1]\n    d = deque()\n    max_students_served = -inf\n    best_pair = (-1, -1)\n    for last_served in range(len(a)):\n        d.append(last_served)\n        while d and subsum(d[0], last_served) + s < 0:\n            d.popleft()\n        if d and last_served - d[0] + 1 > max_students_served:\n            max_students_served = last_served - d[0] + 1\n            best_pair = (d[0], last_served)\n    return best_pair\nt = int(input())\nfor _ in range(t):\n    (n, s) = [int(q) for q in input().split(' ')]\n    a = [int(q) for q in input().split(' ')]\n    (p, q) = solve(s, a)\n    if (p, q) == (-1, -1):\n        print('-1')\n    else:\n        print(p + 1, q + 1)", "f = lambda : [*map(int, input().split())]\nfor _ in [0] * f()[0]:\n    (n, s) = f()\n    (a, x) = (f(), [-1])\n    (l, b, e, t, w) = [0] * 5\n    while 1:\n        if w >= -s:\n            if e - b > l:\n                l = e - b\n                x = [b + 1, e]\n            if e >= n:\n                print(*x)\n                break\n            t += a[e]\n            w = min(w, t)\n            e += 1\n        else:\n            w = t = t - a[b]\n            b += 1", "f = lambda : [*map(int, input().split())]\nfor _ in [0] * f()[0]:\n    (n, s) = f()\n    (a, x) = (f(), [-1])\n    (l, b, e, t, w) = [0] * 5\n    while 1:\n        if w >= -s:\n            if e - b > l:\n                l = e - b\n                x = [b + 1, e]\n            if e >= n:\n                print(*x)\n                break\n            t += a[e]\n            w = min(w, t)\n            e += 1\n        else:\n            w = t = t - a[b]\n            b += 1", "f = lambda : [*map(int, input().split())]\nfor _ in [0] * f()[0]:\n    (n, s) = f()\n    (a, x) = (f(), [-1])\n    (l, b, e, t, w) = [0] * 5\n    while 1:\n        if w >= -s:\n            if e - b > l:\n                l = e - b\n                x = [b + 1, e]\n            if e >= n:\n                print(*x)\n                break\n            t += a[e]\n            w = min(w, t)\n            e += 1\n        else:\n            w = t = t - a[b]\n            b += 1", "t = int(input())\nfor _ in range(t):\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (left, right) = (0, 0)\n    for i in range(1, n):\n        a[i] += a[i - 1]\n    a = [0] + a\n    (i, j) = (0, 0)\n    while j <= n:\n        if a[j] - a[i] + s >= 0:\n            if j - i > right - left:\n                (left, right) = (i, j)\n            j += 1\n        else:\n            i += 1\n    if left == right:\n        print(-1)\n    else:\n        print(left + 1, right)", "from sys import stdin\n\ndef sng_int():\n    return int(stdin.readline())\n\ndef sng_str():\n    return stdin.readline()\n\ndef int_list():\n    return list(map(int, stdin.readline().split()))\nt = sng_int()\nfor _ in range(t):\n    (n, s) = map(int, sng_str().split())\n    arr = int_list()\n    i = 0\n    j = 0\n    (l, r) = (0, -1)\n    while j < n:\n        while j < n and s + arr[j] >= 0:\n            s += arr[j]\n            j += 1\n        if j - i > r - l:\n            l = i\n            r = j\n        if j < n:\n            while i <= j and s + arr[j] < 0:\n                s -= arr[i]\n                i += 1\n    if l + 1 <= r:\n        print(l + 1, r)\n    else:\n        print('-1')", "t = int(input())\nfor _ in range(t):\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = [-1]\n    (mxlen, i, j, cs, w) = [0] * 5\n    while 1:\n        if w >= -s:\n            if j - i > mxlen:\n                mxlen = j - i\n                ans = [i + 1, j]\n            if j >= n:\n                break\n            cs += a[j]\n            w = min(w, cs)\n            j += 1\n            continue\n        w = cs = cs - a[i]\n        i += 1\n    print(*ans)", "T = int(input())\nfor _ in range(T):\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (l, r, m) = (0, 0, 0)\n    add = 0\n    ans = [0, 0]\n    while r < n:\n        if s + add >= 0 and s + add + a[r] >= 0:\n            add += a[r]\n            if m < r - l + 1:\n                (ans[0], ans[1]) = (l, r)\n                m = r - l + 1\n            r += 1\n        elif l == r:\n            add = 0\n            l += 1\n            r += 1\n        else:\n            add -= a[l]\n            l += 1\n    if m == 0:\n        print('-1')\n    else:\n        print(f'{ans[0] + 1} {ans[1] + 1}')", "T = int(input())\nfor _ in range(T):\n    (n, s) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (l, r, m) = (0, 0, 0)\n    add = 0\n    ans = [0, 0]\n    while r < n:\n        if s + add >= 0 and s + add + a[r] >= 0:\n            add += a[r]\n            if m < r - l + 1:\n                (ans[0], ans[1]) = (l, r)\n                m = r - l + 1\n            r += 1\n        elif l == r:\n            add = 0\n            l += 1\n            r += 1\n        else:\n            add -= a[l]\n            l += 1\n    if m == 0:\n        print('-1')\n    else:\n        print(f'{ans[0] + 1} {ans[1] + 1}')", "f = lambda : [*map(int, input().split())]\nfor _ in range(f()[0]):\n    (n, s) = f()\n    (a, x) = (f(), [-1])\n    (l, b, e, t, w) = [0] * 5\n    while 1:\n        if w >= -s:\n            if e - b > l:\n                l = e - b\n                x = [b + 1, e]\n            if e >= n:\n                print(*x)\n                break\n            t += a[e]\n            w = min(w, t)\n            e += 1\n        else:\n            t -= a[b]\n            w -= a[b]\n            b += 1", "f = lambda : [*map(int, input().split())]\nfor _ in [0] * f()[0]:\n    (n, s) = f()\n    (a, x) = (f(), [-1])\n    (l, b, e, t, w) = [0] * 5\n    while 1:\n        if w >= -s:\n            if e - b > l:\n                l = e - b\n                x = [b + 1, e]\n            if e >= n:\n                print(*x)\n                break\n            t += a[e]\n            w = min(w, t)\n            e += 1\n        else:\n            t -= a[b]\n            w -= a[b]\n            b += 1", "n = int(input().split()[0])\nfor i in range(n):\n    (l, s) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    ans = ''\n    _maxlen = -1\n    i = 0\n    j = i\n    curr = s\n    while i < len(arr) and j < len(arr):\n        if arr[j] >= 0:\n            curr += arr[j]\n            j += 1\n        elif arr[j] < 0:\n            if curr >= abs(arr[j]):\n                curr -= abs(arr[j])\n                j += 1\n            elif curr < abs(arr[j]):\n                a = i + 1\n                b = j\n                if b - a > _maxlen:\n                    ans = str(a) + ' ' + str(b)\n                    _maxlen = b - a\n                curr -= arr[i]\n                i += 1\n    a = i + 1\n    b = j\n    if b - a > _maxlen:\n        ans = str(a) + ' ' + str(b)\n        _maxlen = b - a\n    if len(ans) > 0:\n        print(ans)\n    else:\n        print(-1)"]