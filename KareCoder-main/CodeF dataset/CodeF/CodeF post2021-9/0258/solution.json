["x = int(input())\nodg = []\nfor i in range(0, x):\n    l = input()\n    w = int(input())\n    ls = sorted(l)\n    price = 0\n    granica = None\n    for j in range(0, len(ls)):\n        price += ord(ls[j]) - 96\n        if price > w:\n            granica = j\n            break\n    if granica != None:\n        visak = ls[granica:]\n    else:\n        visak = []\n    y = 0\n    visak = ''.join(visak)\n    while visak != '':\n        l = l.replace(visak[0], '', visak.count(visak[0]))\n        visak = visak.replace(visak[0], '')\n    odg.append(l)\nfor e in odg:\n    print(e)", "from collections import defaultdict\nx = int(input())\nfor jj in range(x):\n    s = input()\n    c = int(input())\n    dic = defaultdict(list)\n    for (i, v) in enumerate(s):\n        dic[v].append(i)\n    ans = [''] * len(s)\n    for i in sorted(dic.keys()):\n        p = ord(i) - 96\n        if c >= len(dic[i]) * p:\n            for j in dic[i]:\n                ans[j] = i\n            c -= len(dic[i]) * p\n        else:\n            k = c // p\n            if k == 0:\n                break\n            else:\n                for m in range(k):\n                    ans[dic[i][m]] = i\n            break\n    print(''.join(ans))", "def solve():\n    e = list(input())\n    p = int(input())\n    s = sorted(e, reverse=True)\n    x = 0\n    for i in s:\n        x += ord(i) - 96\n    i = 0\n    while x > p:\n        x -= ord(s[i]) - 96\n        i += 1\n    t = ''\n    s = s[:i]\n    d = {}\n    for i in s:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in e:\n        if i in d and d[i] > 0:\n            d[i] -= 1\n        else:\n            t += i\n    print(t)\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "def inlt():\n    return list(map(int, input().split()))\nimport sys\nfrom collections import defaultdict\nfrom math import sqrt, ceil, floor, factorial, log\nfrom bisect import bisect_left, bisect_right\nfrom io import BytesIO, IOBase, StringIO\ninput = lambda : sys.stdin.readline().rstrip()\nt = int(input())\nwhile t:\n    t -= 1\n    s = input()\n    x = int(input())\n    tot = 0\n    dic = defaultdict(int)\n    for j in s:\n        tot = tot + ord(j) - 96\n        dic[j] += 1\n    p = tot - x\n    for j in range(ord('z'), ord('a') - 1, -1):\n        if p > 0:\n            if dic[chr(j)] > 0:\n                vayu = j - 96\n                if vayu * dic[chr(j)] >= p:\n                    h = ceil(p / vayu)\n                    dic[chr(j)] = dic[chr(j)] - h\n                    p = 0\n                else:\n                    p = p - vayu * dic[chr(j)]\n                    dic[chr(j)] = 0\n        else:\n            break\n    final = ''\n    for j in s:\n        if dic[j] > 0:\n            final += j\n            dic[j] -= 1\n        else:\n            pass\n    print(final)", "t = int(input())\nfor _ in range(t):\n    w = input()\n    p = int(input())\n    curr = 0\n    count = {}\n    for char in w:\n        if char not in count:\n            count[char] = 0\n        count[char] += 1\n        curr += 1 + ord(char) - ord('a')\n    if curr <= p:\n        print(w)\n        continue\n    left = curr - p\n    for char in sorted(count, reverse=True):\n        if left - count[char] * (1 + ord(char) - ord('a')) >= 0:\n            left -= count[char] * (1 + ord(char) - ord('a'))\n            count[char] = 0\n        else:\n            temp = (left + (ord(char) - ord('a'))) // (1 + ord(char) - ord('a'))\n            count[char] -= temp\n            left -= temp * (1 + ord(char) - ord('a'))\n            break\n    res = []\n    for char in w:\n        if count[char] > 0:\n            count[char] -= 1\n            res.append(char)\n    print(''.join(res))", "import sys\ninput = sys.stdin.readline\nalph = {i: j for (i, j) in zip([chr(i) for i in range(97, 123)], [i for i in range(1, 27)])}\nfor _ in range(int(input())):\n    s = input().rstrip()\n    p = int(input())\n    sd = sorted(zip(s, range(len(s))))\n    res = [''] * len(s)\n    for (i, j) in sd:\n        if alph[i] > p:\n            print(''.join(res))\n            break\n        else:\n            res[j] = i\n            p -= alph[i]\n    else:\n        print(''.join(res))", "def solve():\n    e = list(input())\n    p = int(input())\n    x = 0\n    for i in e:\n        x += ord(i) - 96\n    if x > p:\n        s = sorted(e, reverse=True)\n        i = 0\n        while x > p:\n            x -= ord(s[i]) - 96\n            i += 1\n        t = ''\n        s = s[:i]\n        d = {}\n        for i in s:\n            if i not in d:\n                d[i] = 1\n            else:\n                d[i] += 1\n        for i in e:\n            if i in d and d[i] > 0:\n                d[i] -= 1\n            else:\n                t += i\n        print(t)\n    else:\n        print(''.join(e))\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "def solve():\n    n = int(input())\n    for i in range(n):\n        s = str(input())\n        p = int(input())\n        v = [0] * 26\n        for letter in s:\n            v[ord(letter) - 97] += 1\n        for i in range(26):\n            if v[i] * (i + 1) < p:\n                p -= v[i] * (i + 1)\n                v[i] = 0\n            else:\n                c = p // (i + 1)\n                v[i] -= c\n                break\n        print(assembleString(s, v))\n\ndef assembleString(s, arr):\n    ns = ''\n    for l in s:\n        if arr[ord(l) - 97]:\n            arr[ord(l) - 97] -= 1\n        else:\n            ns += l\n    return ns\nsolve()", "import math\n\ndef solve():\n    s = input()\n    p = int(input())\n    arr = [0 for i in range(26)]\n    for x in s:\n        ind = ord(x) - 97\n        arr[ind] += ind + 1\n    summ = sum(arr)\n    if summ <= p:\n        print(s)\n        return\n    diff = summ - p\n    carr = dict()\n    for i in range(25, -1, -1):\n        if arr[i] == 0:\n            continue\n        dl = math.ceil(diff / (i + 1))\n        dl = min(dl, arr[i] // (i + 1))\n        carr[chr(97 + i)] = dl\n        diff -= (i + 1) * dl\n    ans = ''\n    for x in s:\n        if x in carr and carr[x] > 0:\n            carr[x] -= 1\n        else:\n            ans += x\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "from collections import Counter\n\ndef main():\n    s = list(input())\n    p = int(input())\n    curr = 0\n    for z in s:\n        curr += ord(z) - 96\n    if curr <= p:\n        return ''.join(s)\n    freq = Counter(s)\n    letters = list(freq.keys())\n    letters.sort()\n    letters = letters[::-1]\n    rem = {}\n    extra = curr - p\n    for let in letters:\n        f = freq[let]\n        o = ord(let) - 96\n        if f * o >= extra:\n            rem[let] = (extra + o - 1) // o\n            break\n        else:\n            rem[let] = f\n            extra -= o * f\n    for i in range(len(s)):\n        z = s[i]\n        if z in rem and rem[z] > 0:\n            s[i] = ''\n            rem[z] -= 1\n    return ''.join(s)\nfor _ in range(int(input())):\n    print(main())", "for t in range(int(input())):\n    s = input()\n    a = int(input())\n    t = [*range(len(s))]\n    d = [ord(e) - 96 for e in s]\n    t.sort(key=lambda x: s[x])\n    t = t[::-1]\n    c = sum(d)\n    k = 0\n    while c > a:\n        c -= d[t[k]]\n        d[t[k]] = 0\n        k += 1\n    print(''.join((chr(e + 96) for e in d if e != 0)))", "T = int(input())\nfor Ti in range(T):\n    s_letter = [i for i in input()]\n    s = [ord(i) - 96 for i in s_letter]\n    p = int(input())\n    s_i = sorted(range(len(s)), key=lambda k: s[k])\n    sum_s = 0\n    ans_l = []\n    for i in range(len(s)):\n        sum_s += s[s_i[i]]\n        if sum_s <= p:\n            ans_l.append(s_i[i])\n        else:\n            pass\n    ans = ''.join([s_letter[i] for i in sorted(ans_l)])\n    print(ans)", "for t in range(int(input())):\n    s = input()\n    a = int(input())\n    t = [*range(len(s))]\n    d = [ord(e) - 96 for e in s]\n    t.sort(key=lambda x: s[x])\n    t = t[::-1]\n    c = sum(d)\n    k = 0\n    while c > a:\n        c -= d[t[k]]\n        d[t[k]] = 0\n        k += 1\n    print(''.join((chr(e + 96) for e in d if e != 0)))", "for _ in range(int(input())):\n    niz = str(input())\n    p = int(input())\n    a = []\n    for i in niz:\n        a.append(ord(i) - 96)\n    a.sort()\n    suma = sum(a)\n    while suma > p:\n        l = a.pop()\n        suma -= l\n    kolikoKojihSlovaImamo = {chr(x): 0 for x in range(97, 97 + 26)}\n    for i in a:\n        kolikoKojihSlovaImamo[chr(i + 96)] += 1\n    novaRec = ''\n    for i in niz:\n        if kolikoKojihSlovaImamo[i] != 0:\n            novaRec += i\n            kolikoKojihSlovaImamo[i] -= 1\n    print(novaRec)", "for _ in range(int(input())):\n    w = input()\n    p = int(input())\n    y = []\n    for i in w:\n        y.append(ord(i) - 96)\n    y.sort()\n    m = sum(y)\n    while m > p:\n        l = y.pop()\n        m -= l\n    s = ''\n    o = {}\n    o = {chr(x): 0 for x in range(97, 123)}\n    for i in y:\n        o[chr(i + 96)] += 1\n    for i in w:\n        if o.get(i):\n            s += i\n            o[i] -= 1\n    print(s)", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n    s = [ord(i) & 31 for i in input()]\n    p = int(input())\n    d = {}\n    for (idx, i) in enumerate(s):\n        if i not in d:\n            d[i] = []\n        d[i].append(idx)\n    current = sum(s)\n    keys = sorted(d.keys(), reverse=True)\n    for key in keys:\n        while d[key] and current > p:\n            d[key].pop()\n            current -= key\n    ans = [0] * len(s)\n    for (k, v) in d.items():\n        for index in v:\n            ans[index] = k\n    final = ''\n    for i in ans:\n        if i:\n            final += chr(96 + i)\n    print(final)", "def cheap(s, p):\n    count = [0 for x in range(27)]\n    sum = 0\n    for i in range(0, len(s)):\n        sum += ord(s[i]) - 96\n        count[ord(s[i]) - 96] += 1\n    for i in reversed(range(27)):\n        while sum > p and count[i] > 0:\n            count[i] -= 1\n            sum -= i\n        if sum <= p:\n            break\n    ans = ''\n    for i in range(0, len(s)):\n        if count[ord(s[i]) - 96] > 0:\n            ans = ans + s[i]\n            count[ord(s[i]) - 96] -= 1\n    return ans\nt = int(input())\nfor j in range(t):\n    s = input()\n    p = int(input())\n    print(cheap(s, p))", "from collections import defaultdict\n\ndef solve(s, p):\n    alpha = 'zyxwvutsrqponmlkjihgfedcba'\n    removed = set()\n    counts = defaultdict(list)\n    price = 0\n    for (i, v) in enumerate(s):\n        counts[v].append(i)\n        price += ord(v) - 96\n    if price <= p:\n        return removed\n    for (i, c) in enumerate(alpha):\n        if c in counts:\n            while len(counts[c]) > 0:\n                price -= 26 - i\n                removed.add(counts[c].pop())\n                if price <= p:\n                    return removed\nfor _ in range(int(input())):\n    s = input()\n    p = int(input())\n    removed = solve(s, p)\n    ans = ''\n    for i in range(len(s)):\n        if i not in removed:\n            ans += s[i]\n    print(ans)", "def get_prices(w):\n    prices = []\n    sum_prices = 0\n    for (i, e) in enumerate(w):\n        price = ord(e) - ord('a') + 1\n        prices.append((i, price))\n        sum_prices += price\n    return (sorted(prices, key=lambda e: e[1]), sum_prices)\n\ndef solve(w, p):\n    (prices, sum_prices) = get_prices(w)\n    while sum_prices > p and len(prices) > 0:\n        sum_prices -= prices[-1][1]\n        prices.pop()\n    r = ''\n    prices = sorted(prices, key=lambda e: e[0])\n    for e in prices:\n        r += w[e[0]]\n    return r\nt = int(input())\nfor _ in range(t):\n    w = input()\n    p = int(input())\n    print(solve(w, p))", "test = int(input())\nfor i in range(test):\n    string = input()\n    target_sum = int(input())\n    a = ord('a') - 1\n    index_list = sorted(enumerate((ord(i) - a for i in string)), key=lambda x: x[1])\n    index_sum = sum(map(lambda x: x[1], index_list))\n    while index_sum > target_sum:\n        index_sum -= index_list.pop()[1]\n    index_list = sorted(index_list)\n    print(''.join(map(lambda x: chr(x[1] + a), index_list)))", "for t in range(int(input())):\n    a = input()\n    k = int(input())\n    e = []\n    for char in a:\n        e.append(ord(char) - 96)\n    e = sorted(e)\n    m = sum(e)\n    while m > k:\n        l = e.pop()\n        m -= l\n    o = {chr(x): 0 for x in range(96, 140)}\n    for item in e:\n        o[chr(item + 96)] += 1\n    new_string = ''\n    for char in a:\n        if o.get(char):\n            new_string += char\n            o[char] -= 1\n    print(new_string)", "import sys\nimport math\nfrom collections import defaultdict\nalph = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n\ndef run():\n    s = input()\n    p = int(input())\n    cost = 0\n    used = defaultdict(int)\n    for c in alph:\n        used[c] = 0\n    for c in s:\n        cost += alph[c]\n        used[c] += alph[c]\n    d = cost - p\n    for c in ''.join(alph)[::-1]:\n        if d > 0:\n            diff = min(d, used[c])\n            d -= diff\n            used[c] -= diff\n    new_s = []\n    for c in s:\n        if used[c] >= alph[c]:\n            new_s.append(c)\n            used[c] -= alph[c]\n    print(''.join(new_s))\nt = int(input())\nfor _ in range(t):\n    run()", "import string\nslovar = string.ascii_lowercase\ni = 1\nd = {}\nfor elem in slovar:\n    d[elem] = i\n    i += 1\n\ndef func(w, p, d):\n    sorted_w = sorted(w)\n    current_sum = 0\n    for elem in w:\n        current_sum += d[elem]\n    dif = p - current_sum\n    if dif >= 0:\n        return w\n    else:\n        d_del = {}\n        i = len(w) - 1\n        while i > -1 and current_sum > p:\n            current_sum -= d[sorted_w[i]]\n            if sorted_w[i] not in d_del:\n                d_del[sorted_w[i]] = 0\n            d_del[sorted_w[i]] += 1\n            i -= 1\n    res = ''\n    for elem in w:\n        if elem in d_del and d_del[elem] != 0:\n            d_del[elem] -= 1\n        else:\n            res += elem\n    return res\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        w = input()\n        p = int(input())\n        ans = func(w, p, d)\n        print(ans)\nmain()", "import bisect\nfrom collections import defaultdict, deque\nfrom functools import lru_cache\nimport heapq\nmod = 10 ** 9 + 7\nfrom sys import stdin, stdout\ninput = stdin.readline\nimport math\n\ndef ii():\n    return int(input())\n\ndef lii():\n    return list(map(int, stdin.readline().split()))\n\ndef ss():\n    x = stdin.readline()\n    if x[-1] == '\\n':\n        return x[:-1]\n    return x\n\ndef lss():\n    return list(map(str, stdin.readline().split()))\n\ndef yes():\n    stdout.write('YES\\n')\n\ndef no():\n    stdout.write('NO\\n')\nfor _ in range(ii()):\n    w = ss()\n    p = int(input())\n    a = [ord(i) - 96 for i in w]\n    s = sum(a)\n    b = sorted([(x, i) for (i, x) in enumerate(a)])\n    while s > p:\n        s -= b.pop()[0]\n    c = sorted([(i, x) for (x, i) in b])\n    print(''.join([chr(x + 96) for (i, x) in c]))", "import math\n\ndef solve():\n    s = input()\n    p = int(input())\n    d = {}\n    for i in s:\n        if i not in d:\n            d[i] = 0\n        d[i] += 1\n    curr_sum = 0\n    for i in d:\n        d[i] = (d[i], ord(i) - ord('a') + 1)\n        curr_sum += d[i][0] * d[i][1]\n    d = dict(sorted(d.items(), key=lambda x: -x[1][1]))\n    key = list(d.keys())\n    i = 0\n    while curr_sum > p:\n        if i >= len(key):\n            break\n        (k, val) = d[key[i]]\n        reqd = min(k, math.ceil((curr_sum - p) / val))\n        curr_sum -= reqd * val\n        d[key[i]] = (d[key[i]][0] - reqd, d[key[i]][1])\n        i += 1\n    for i in d:\n        d[i] = d[i][0]\n    ans = []\n    for i in s:\n        if d[i] > 0:\n            ans.append(i)\n            d[i] -= 1\n    print(''.join(ans))\nfor _ in range(int(input())):\n    solve()", "from collections import defaultdict\nimport math\ncases = int(input())\nfor _ in range(cases):\n    w = input()\n    p = int(input())\n    price = 0\n    count = defaultdict(lambda : 0)\n    for c in w:\n        letter = ord(c) - 96\n        count[letter] += 1\n        price += letter\n    for j in range(26, 0, -1):\n        if price <= p:\n            break\n        if count[j] == 0:\n            continue\n        diff = price - p\n        to_remove = math.ceil(diff / j)\n        to_remove = min(to_remove, count[j])\n        w = w.replace(chr(j + 96), '', to_remove)\n        price -= to_remove * j\n    print(w)", "T = int(input())\nfor t in range(T):\n    s = input()\n    l = list(s)\n    target = int(input())\n    marker = []\n    num = 0\n    for i in range(27):\n        marker.append([])\n    for i in range(len(s)):\n        marker[ord(s[i]) - 96].append(i)\n        num += ord(s[i]) - 96\n    while num > target:\n        for i in range(26, 0, -1):\n            if len(marker[i]) == 0:\n                pass\n            for j in marker[i]:\n                num -= i\n                l[j] = '.'\n                if num <= target:\n                    break\n            if num <= target:\n                break\n    ans = ''\n    for ch in l:\n        if ch != '.':\n            ans += ch\n    print(ans)", "import sys\nimport math\nfrom collections import Counter\n\ndef gi():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef gs():\n    return sys.stdin.readline().strip()\n\ndef fun(a, s):\n    l = len(a)\n    a = list(a)\n    d = {}\n    arr = sorted(a)\n    sm = 0\n    for i in range(l):\n        v = ord(arr[i]) - 96\n        if sm + v <= s:\n            if arr[i] in d:\n                d[arr[i]] += 1\n            else:\n                d[arr[i]] = 1\n            sm += v\n    ans = ''\n    for i in range(l):\n        if a[i] in d and d[a[i]] > 0:\n            ans += a[i]\n            d[a[i]] -= 1\n    return ans\nfor _ in range(int(input())):\n    n = gs()\n    x = int(input())\n    print(fun(n, x))", "test = int(input())\nfor i in range(test):\n    s = input()\n    target_sum = int(input())\n    a = ord('a') - 1\n    index_list = sorted(enumerate((ord(l) - a for l in s)), key=lambda x: x[1])\n    index_sum = sum(map(lambda x: x[1], index_list))\n    while index_sum > target_sum:\n        index_sum -= index_list.pop()[1]\n    index_list = sorted(index_list)\n    print(''.join(map(lambda x: chr(x[1] + a), index_list)))", "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    x = input().strip()\n    p = int(input())\n    d = defaultdict(lambda : 0)\n    curr = 0\n    for i in x:\n        d[i] += 1\n        curr += ord(i) - 97 + 1\n    for i in range(25, -1, -1):\n        if curr <= p:\n            break\n        sub = min(d[chr(i + 97)], (curr - p + (i + 1) - 1) // (i + 1))\n        d[chr(i + 97)] -= sub\n        curr -= sub * (i + 1)\n    st = []\n    for i in x:\n        if d[i] > 0:\n            d[i] -= 1\n            st.append(i)\n    print(''.join(st))", "for t in range(int(input())):\n    string = input()\n    n = int(input())\n    s = 0\n    d = dict.fromkeys(list(string), 0)\n    for i in string:\n        s += ord(i) - 96\n        d[i] += 1\n    if s <= n:\n        print(string)\n    else:\n        li = list(string)\n        li = sorted(li)[::-1]\n        for i in li:\n            s -= ord(i) - 96\n            d[i] -= 1\n            if s <= n:\n                break\n        ans = ''\n        for i in string:\n            if d[i] != 0:\n                ans += i\n                d[i] -= 1\n        print(ans)", "for t in range(int(input())):\n    s = input()\n    p = int(input())\n    a = [ord(x) - ord('a') + 1 for x in s]\n    m = sum(a)\n    b = sorted([(x, i) for (i, x) in enumerate(a)])\n    while m > p:\n        m -= b.pop()[0]\n    c = sorted([(i, x) for (x, i) in b])\n    print(''.join([chr(x + ord('a') - 1) for (i, x) in c]))", "import math\nfrom math import ceil\nfor t in range(int(input())):\n    w = input()\n    nn = int(input())\n    let = [0] * 27\n    out = []\n    d = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0, 'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    total = 0\n    for x in w:\n        let[ord(x) - 96] += 1\n        total += ord(x) - 96\n    n = total - nn\n    if n <= 0:\n        print(w)\n        continue\n    for x in range(len(let) - 1, 0, -1):\n        if let[x] == 0:\n            continue\n        if let[x] * x < n:\n            n -= let[x] * x\n            d[chr(x + 96)] = let[x]\n        else:\n            d[chr(x + 96)] = math.ceil(n / x)\n            break\n    for x in w:\n        if d[x] != 0:\n            d[x] -= 1\n        else:\n            out.append(x)\n    print(''.join(out))", "for t in range(int(input())):\n    s = input()\n    a = int(input())\n    t = [*range(len(s))]\n    d = [ord(e) - 96 for e in s]\n    t.sort(key=lambda x: s[x])\n    t = t[::-1]\n    c = sum(d)\n    k = 0\n    while c > a:\n        c -= d[t[k]]\n        d[t[k]] = 0\n        k += 1\n    print(''.join((chr(e + 96) for e in d if e != 0)))", "A = ord('a')\nget_cost = lambda x: ord(x) - A + 1\nfor _ in range(int(input())):\n    word = input()\n    max_cost = int(input())\n    indexes = sorted(range((l := len(word))), key=lambda i: word[i])\n    global_cost = sum((get_cost(x) for x in word))\n    while global_cost > max_cost:\n        global_cost -= get_cost(word[indexes.pop(-1)])\n    st = set(indexes)\n    print(''.join((word[i] for i in range(l) if i in st)))", "for _ in range(int(input())):\n    s = input()\n    p = int(input())\n    sum_ = 0\n    mp = {chr(i + 97): 0 for i in range(26)}\n    for c in s:\n        mp[c] += 1\n        sum_ += ord(c) - 96\n    for i in range(25, -1, -1):\n        while sum_ > p:\n            if mp[chr(i + 97)] > 0:\n                mp[chr(i + 97)] -= 1\n                sum_ -= i + 1\n            else:\n                break\n    ans = []\n    for c in s:\n        if mp[c] > 0:\n            ans.append(c)\n            mp[c] -= 1\n    print(''.join(ans))", "for _ in range(int(input())):\n    s = input()\n    n = int(input())\n    su = 0\n    for i in s:\n        su += ord(i) - 96\n    s1 = sorted(s, reverse=True)\n    mp = {}\n    for i in s1:\n        if su <= n:\n            break\n        su -= ord(i) - 96\n        if i in mp:\n            mp[i] += 1\n        else:\n            mp[i] = 1\n    ans = []\n    for i in s:\n        if i in mp:\n            mp[i] -= 1\n            if not mp[i]:\n                mp.pop(i)\n        else:\n            ans.append(i)\n    print(''.join(ans))", "for h in range(int(input())):\n    s = input()\n    p = int(input())\n    voec = []\n    ct = 0\n    temp = {}\n    for i in s:\n        voec.append(i)\n        temp[i] = 0\n        ct += ord(i) - 96\n    voec.sort(reverse=True)\n    c = 0\n    for i in voec:\n        if ct <= p:\n            break\n        c += 1\n        ct -= ord(i) - 96\n    voec = voec[c:]\n    for i in voec:\n        temp[i] += 1\n    vo = ''\n    for i in s:\n        if temp[i] > 0:\n            temp[i] -= 1\n            vo += i\n    print(vo)", "v = {}\nfor i in 'abcdefghijklmnopqrstuvwxyz':\n    v[i] = ord(i) - ord('a') + 1\nfor _ in range(int(input())):\n    w = input()\n    p = int(input())\n    price = sum([v[i] for i in w])\n    d = {}\n    sw = sorted(w, key=lambda x: v[x], reverse=True)\n    for i in sw:\n        if price <= p:\n            break\n        else:\n            price -= v[i]\n            if i not in d:\n                d[i] = 1\n            else:\n                d[i] += 1\n    res = []\n    for i in w:\n        if i in d and d[i] > 0:\n            d[i] -= 1\n        else:\n            res.append(i)\n    res = ''.join(res)\n    print(res)", "from collections import defaultdict\nd = {chr(i + 96): i for i in range(1, 27)}\nfor _ in range(int(input())):\n    s = input()\n    p = int(input())\n    z = defaultdict(list)\n    s = [x for x in s]\n    for x in range(len(s)):\n        z[s[x]].append(x)\n    k = sorted(s)\n    curr = sum([d[x] for x in s])\n    if curr <= p:\n        print(''.join(s))\n        continue\n    for x in k[::-1]:\n        if curr > p:\n            curr -= d[x]\n            ind = z[x].pop()\n            s[ind] = ''\n    print(''.join(s))", "from collections import defaultdict\nimport sys\n\ndef solve():\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    for _ in range(k):\n        (a, b) = map(int, input().split())\n        la = []\n        lb = []\n        if a not in l or b not in l:\n            print('NO')\n            return\n        for i in range(n):\n            if l[i] == a:\n                la.append(i)\n            if l[i] == b:\n                lb.append(i)\n        mi = min(la)\n        ma = max(lb)\n        if mi < ma:\n            print('YES')\n        else:\n            print('NO')\n\ndef solve1(w, p):\n    d = defaultdict(lambda : 0)\n    cp = 0\n    for i in w:\n        d[i] += 1\n        cp += ord(i) - 96\n    for i in range(25, -1, -1):\n        t = d[chr(i + 97)]\n        if cp <= p:\n            break\n        sub = min(d[chr(i + 97)], (cp - p + i) // (i + 1))\n        d[chr(i + 97)] -= sub\n        cp -= sub * (i + 1)\n    l = []\n    for i in w:\n        if d[i] > 0:\n            d[i] -= 1\n            l.append(i)\n    print(''.join(l))\n\ndef main():\n    for _ in range(int(input())):\n        w = input()\n        p = int(input())\n        solve1(w, p)\nmain()", "for _ in range(int(input())):\n    s = input()\n    n = int(input())\n    c = 0\n    l = [0] * 26\n    for i in s:\n        x = ord(i) - 97\n        l[x] += 1\n        c += x + 1\n    if c <= n:\n        print(s)\n    else:\n        for i in range(25, -1, -1):\n            le = l[i]\n            for j in range(le):\n                c -= i + 1\n                l[i] -= 1\n                if c <= n:\n                    break\n            if c <= n:\n                break\n        ans = ''\n        for i in s:\n            x = ord(i) - 97\n            if l[x] > 0:\n                ans += i\n                l[x] -= 1\n        print(ans)", "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nwhile n:\n    s = input().strip()\n    p = int(input())\n    ddef = defaultdict(lambda : 0)\n    d = ddef\n    c = 0\n    for i in s:\n        d[i] += 1\n        c += ord(i) - 97 + 1\n    for i in range(25, -1, -1):\n        present = d[chr(i + 97)]\n        if c <= p:\n            break\n        k = min(d[chr(i + 97)], (c - p + (i + 1) - 1) // (i + 1))\n        d[chr(i + 97)] -= k\n        c -= k * (i + 1)\n    news = []\n    for i in s:\n        if d[i] > 0:\n            d[i] -= 1\n            news.append(i)\n    print(''.join(news))\n    n -= 1", "from cmath import cos\nt = int(input())\nfor i in range(t):\n    str = input()\n    max = int(input())\n    counter = [0] * 26\n    ans = ''\n    cost = 0\n    for char in str:\n        counter[ord(char) - 97] += 1\n    index = 0\n    while cost <= max and index <= 25:\n        cost += counter[index] * (index + 1)\n        index += 1\n    index -= 1\n    while cost > max:\n        cost -= index + 1\n        counter[index] -= 1\n    chars = counter[:index + 1]\n    empty = [0] * 26\n    chars.extend(empty)\n    for char in str:\n        if chars[ord(char) - 97] != 0:\n            chars[ord(char) - 97] -= 1\n            ans += char\n    print(ans)", "import sys\nimport heapq\ninput = sys.stdin.readline\nfrom collections import Counter, defaultdict\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef main():\n    string = input().strip()\n    p = inp()\n    charMap = [0] * 26\n    totalSum = 0\n    for char in string:\n        charMap[ord(char) - ord('a')] += 1\n        totalSum += ord(char) - ord('a') + 1\n    pointer = 25\n    while totalSum > p and pointer >= 0:\n        if charMap[pointer] > 0:\n            charMap[pointer] -= 1\n            totalSum -= pointer + 1\n        else:\n            pointer -= 1\n    output = []\n    for char in string:\n        if charMap[ord(char) - ord('a')] > 0:\n            output.append(char)\n            charMap[ord(char) - ord('a')] -= 1\n    print(''.join(output))\nt = inp()\nfor _ in range(t):\n    main()", "from collections import Counter\nimport string\n\ndef sol():\n    s = input()\n    p = int(input())\n    count = Counter(s)\n    t = sum((ord(i) - 96 for i in s))\n    for i in string.ascii_lowercase[::-1]:\n        while p < t and count[i]:\n            t -= ord(i) - 96\n            count[i] -= 1\n    ans = ''\n    for i in s:\n        if count[i]:\n            ans += i\n            count[i] -= 1\n    return ans\nfor _ in range(int(input())):\n    print(sol())", "def od(s):\n    return ord(s) - 96\n\ndef k_(s):\n    K = 0\n    for se in s:\n        K += od(se)\n    return K\n\ndef op(s, p=''):\n    A = ''\n    for se in s:\n        A += str(se) + p\n    if p == '':\n        return A\n    else:\n        return A[:-len(p)]\n\ndef kil_(s, n):\n    s = list(s)\n    st = sorted(s, key=ord, reverse=True)\n    stu = k_(s)\n    d = dict().fromkeys(set(st), 0)\n    for i in range(len(s)):\n        if stu > n:\n            stu -= od(st[i])\n            d[st[i]] += 1\n        else:\n            break\n    S = ''\n    for i in range(len(s)):\n        if d[s[i]] > 0:\n            d[s[i]] -= 1\n        else:\n            S += s[i]\n    return S\n\ndef kil():\n    t = int(input())\n    A = ''\n    for i in range(t):\n        A += kil_(input(), int(input())) + '\\n'\n    print(A[:-1])\nkil()", "for k in range(int(input())):\n    s = input()\n    n = int(input())\n    su = 0\n    mp = {}\n    for i in s:\n        su += ord(i) - 96\n    s1 = sorted(s, reverse=True)\n    for i in s1:\n        if su <= n:\n            break\n        su -= ord(i) - 96\n        if i in mp:\n            mp[i] += 1\n        else:\n            mp[i] = 1\n    res = ''\n    for i in s:\n        if i in mp:\n            mp[i] -= 1\n            if mp[i] == 0:\n                mp.pop(i)\n        else:\n            res += i\n    print(res)", "from collections import Counter, defaultdict\nt = int(input())\nfor _ in range(t):\n    word = input()\n    p = int(input())\n    charsCount = Counter(word)\n    alphabets = charsCount.keys()\n    pickChar = defaultdict(int)\n    for key in sorted(alphabets):\n        if p > charsCount[key] * (ord(key) - 96):\n            pickChar[key] = charsCount[key]\n            p -= charsCount[key] * (ord(key) - 96)\n        else:\n            pickChar[key] = p // (ord(key) - 96)\n            p %= ord(key) - 96\n    constructStr = []\n    for char in word:\n        if pickChar[char] > 0:\n            constructStr.append(char)\n            pickChar[char] -= 1\n    print(''.join(constructStr))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    s = input()[:-1]\n    p = int(input())\n    w = sorted(enumerate([ord(i) - 96 for i in s]), key=lambda x: x[1])\n    d = set()\n    for (i, j) in w:\n        if p >= j:\n            d.add(i)\n            p -= j\n    q = ''\n    for i in sorted(d):\n        q += s[i]\n    print(q)", "t = int(input())\nimport string\nfrom collections import Counter\nlst = list(string.ascii_lowercase)\nh = {lst[i]: i + 1 for i in range(len(lst))}\n\ndef helper(s, p):\n    total = 0\n    h2 = Counter(s)\n    s2 = sorted(s, reverse=True)\n    for key in h2.keys():\n        total += h[key] * h2[key]\n    if total == p:\n        return s\n    if p == 0:\n        return ''\n    pt = 0\n    while total > p and pt < len(s2):\n        total -= h[s2[pt]]\n        h2[s2[pt]] -= 1\n        pt += 1\n    ans = ''\n    for i in range(len(s)):\n        if h2[s[i]] == 0:\n            continue\n        else:\n            h2[s[i]] -= 1\n            ans += s[i]\n    return ans\nfor i in range(t):\n    s = input()\n    p = int(input())\n    print(helper(s, p))", "def get_prices(w):\n    prices = []\n    sum_prices = 0\n    for (i, e) in enumerate(w):\n        price = ord(e) - ord('a') + 1\n        prices.append((i, price))\n        sum_prices += price\n    return (sorted(prices, key=lambda e: e[1]), sum_prices)\n\ndef solve(w, p):\n    (prices, sum_prices) = get_prices(w)\n    while sum_prices > p and len(prices) > 0:\n        sum_prices -= prices[-1][1]\n        prices.pop()\n    r = ''\n    prices = sorted(prices, key=lambda e: e[0])\n    for e in prices:\n        r += w[e[0]]\n    return r\nt = int(input())\nfor _ in range(t):\n    w = input()\n    p = int(input())\n    print(solve(w, p))", "for i in range(int(input())):\n    s = input()\n    p = int(input())\n    a = [ord(z) - ord('a') + 1 for z in s]\n    m = sum(a)\n    b = sorted([(x, i) for (i, x) in enumerate(a)])\n    while m > p:\n        m -= b.pop()[0]\n    c = sorted([(i, x) for (x, i) in b])\n    print(''.join([chr(x + ord('a') - 1) for (i, x) in c]))", "for h in range(int(input())):\n    s = input()\n    p = int(input())\n    x = []\n    d = {}\n    k = 0\n    for i in s:\n        x.append(i)\n        d[i] = 0\n        k += ord(i) - 96\n    x.sort(reverse=True)\n    c = 0\n    for i in x:\n        if k <= p:\n            break\n        c += 1\n        k -= ord(i) - 96\n    x = x[c:]\n    v = ''\n    for i in x:\n        d[i] += 1\n    for i in s:\n        if d[i] > 0:\n            d[i] -= 1\n            v += i\n    print(v)", "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    w = input().strip()\n    p = int(input())\n    d = defaultdict(lambda : 0)\n    currPrice = 0\n    for i in w:\n        d[i] += 1\n        currPrice += ord(i) - 97 + 1\n    for i in range(25, -1, -1):\n        present = d[chr(i + 97)]\n        if currPrice <= p:\n            break\n        kSub = min(d[chr(i + 97)], (currPrice - p + (i + 1) - 1) // (i + 1))\n        d[chr(i + 97)] -= kSub\n        currPrice -= kSub * (i + 1)\n    news = []\n    for i in w:\n        if d[i] > 0:\n            d[i] -= 1\n            news.append(i)\n    print(''.join(news))", "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nt = int(input())\nfor i in range(t):\n    w = input().strip()\n    p = int(input())\n    d = defaultdict(lambda : 0)\n    cp = 0\n    for i in w:\n        d[i] += 1\n        cp += ord(i) - 97 + 1\n    for i in range(25, -1, -1):\n        o = d[chr(i + 97)]\n        if cp <= p:\n            break\n        ks = min(d[chr(i + 97)], (cp - p + (i + 1) - 1) // (i + 1))\n        d[chr(i + 97)] -= ks\n        cp -= ks * (i + 1)\n    new = []\n    for i in w:\n        if d[i] > 0:\n            d[i] -= 1\n            new.append(i)\n    print(''.join(new))", "import sys\nfrom math import sqrt, ceil, floor, gcd\nfrom collections import Counter, defaultdict\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\n\ndef int_arr():\n    return list(map(int, input().split()))\n\ndef str_arr():\n    return list(map(str, input().split()))\n\ndef get_str():\n    return map(str, input().split())\n\ndef get_int():\n    return map(int, input().split())\n\ndef get_flo():\n    return map(float, input().split())\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nmod = 1000000007\n\ndef solve():\n    s = str(input())\n    p = int(input())\n    arr = [0 for i in range(26)]\n    tot = 0\n    for i in range(len(s)):\n        x = ord(s[i]) - 97\n        arr[x] += 1\n        tot += x + 1\n    for i in range(25, -1, -1):\n        if arr[i] > 0:\n            num = arr[i] * (i + 1)\n            if tot - num > p:\n                tot -= num\n                arr[i] = 0\n            else:\n                tot -= num\n                arr[i] = 0\n                while p >= tot + (i + 1):\n                    arr[i] += 1\n                    tot += i + 1\n    ans = ''\n    for i in range(len(s)):\n        x = ord(s[i]) - 97\n        if arr[x] > 0:\n            ans += s[i]\n            arr[x] -= 1\n    print(ans)\nT = 1\nT = int(input())\nwhile T:\n    solve()\n    T -= 1", "for _ in range(int(input())):\n    s = input()\n    p = int(input())\n    a = sorted([(ord(x) - 96, i) for (i, x) in enumerate(s)])\n    m = sum((x for (x, i) in a))\n    while m > p:\n        t = a.pop()\n        m -= t[0]\n    print(''.join((chr(x + 96) for (x, i) in sorted(a, key=lambda tup: tup[1]))))", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    s = inp().strip()\n    p = int(inp())\n    a = [None] * len(s)\n    z = ord('a') - 1\n    S = 0\n    for i in range(len(s)):\n        v = ord(s[i]) - z\n        S += v\n        a[i] = (v, i)\n    a.sort(reverse=True)\n    h = list(s)\n    if S > p:\n        for i in range(len(s)):\n            (v, j) = a[i]\n            h[j] = ''\n            S -= v\n            if S <= p:\n                break\n    print(''.join(h))\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "from collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    n = int(input())\n    z = Counter(s)\n    o = 0\n    for i in s:\n        o += ord(i) - 96\n    for i in range(122, 96, -1):\n        x = chr(i)\n        if o <= n:\n            break\n        if z[x]:\n            flag = 0\n            while z[x]:\n                o -= i - 96\n                z[x] -= 1\n                if o <= n:\n                    flag = 1\n                    break\n            if flag:\n                break\n    ans = ''\n    for i in s:\n        if z[i]:\n            ans += i\n            z[i] -= 1\n    print(ans)", "for _ in range(int(input())):\n    a = input()\n    b = sorted(list(a), reverse=True)\n    c = 0\n    for i in a:\n        c += ord(i) - 96\n    k = int(input())\n    d = {}\n    for i in b:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    i = 0\n    while c > k:\n        c -= ord(b[i]) - 96\n        d[b[i]] -= 1\n        i += 1\n    f = ''\n    for i in a:\n        if d[i] != 0:\n            f += i\n            d[i] -= 1\n    print(f)", "t = int(input())\nfor i in range(t):\n    w = input()\n    p = int(input())\n    a = []\n    for j in range(len(w)):\n        a.append(ord(w[j]) - 96)\n    a.sort()\n    c = sum(a) - p\n    while c > 0:\n        c -= a[-1]\n        a.pop()\n    le = [0] * 26\n    for j in range(len(a)):\n        le[a[j] - 1] += 1\n    ans = ''\n    for j in range(len(w)):\n        if le[ord(w[j]) - 97] > 0:\n            le[ord(w[j]) - 97] -= 1\n            ans += w[j]\n    print(ans)", "for _ in range(int(input())):\n    a = input()\n    s = sorted(a)\n    p = int(input())\n    dt = {}\n    cnt = 0\n    for i in range(len(s)):\n        cnt += ord(s[i]) - ord('a') + 1\n        if cnt > p:\n            break\n        dt[s[i]] = dt.get(s[i], 0) + 1\n    ans = ''\n    for elem in a:\n        try:\n            if dt[elem] > 0:\n                dt[elem] -= 1\n                ans += elem\n        except:\n            pass\n    print(ans)", "from collections import Counter\n\ndef price(c):\n    return ord(c) - 96\nt = int(input())\nfor _ in range(t):\n    w = list(input())\n    C = Counter(w)\n    alph = list(C.keys())\n    alph.sort()\n    alph.reverse()\n    D = dict()\n    p = int(input())\n    pr = sum((price(c) for c in w))\n    for a in alph:\n        if pr <= p:\n            break\n        elif pr - C[a] * price(a) >= p:\n            pr -= C[a] * price(a)\n            D[a] = C[a]\n        else:\n            remove = -((p - pr) // price(a))\n            pr -= remove * price(a)\n            D[a] = remove\n    for (i, x) in enumerate(w):\n        if x in D and D[x] > 0:\n            w[i] = ''\n            D[x] -= 1\n    print(''.join((x for x in w)))", "def fn(s, p):\n    arr = list(s)\n    letters = sorted(list(s), reverse=True)\n    sm = sum((ord(letters[i]) - ord('a') for i in range(len(letters))))\n    sm += len(letters)\n    deletion = sm - p\n    del_set = {}\n    i = 0\n    while i < len(letters) and deletion > 0:\n        deletion -= ord(letters[i]) - ord('a') + 1\n        del_set[letters[i]] = 1 + del_set.get(letters[i], 0)\n        i += 1\n    for (i, ele) in enumerate(arr):\n        if ele in del_set:\n            del_set[ele] -= 1\n            if del_set[ele] == 0:\n                del del_set[ele]\n            arr[i] = ''\n    return ''.join(arr)\nimport collections\nt = int(input())\nfor i in range(t):\n    s = input()\n    p = int(input())\n    st = fn(s, p)\n    print(st)", "from collections import Counter\n\ndef main():\n    length = int(input())\n    for _ in range(length):\n        string = input()\n        num = int(input())\n        ans = solver(string, num)\n        print(''.join(ans))\n\ndef solver(string, num):\n    value = 0\n    for letter in string:\n        v = ord(letter) - ord('a') + 1\n        value += v\n    counter = Counter(string)\n    keys = sorted((key for key in counter.keys()))\n    if value <= num:\n        return list(string)\n    for k in reversed(keys):\n        for _ in range(counter[k]):\n            v = ord(k) - ord('a') + 1\n            value -= v\n            counter[k] -= 1\n            if value <= num:\n                return toArr(counter, string)\n\ndef toArr(d, string):\n    arr = []\n    for letter in string:\n        if d[letter] > 0:\n            arr.append(letter)\n            d[letter] -= 1\n    return arr\nmain()", "test = int(input())\nfor t in range(test):\n    s = input().rstrip()\n    p = int(input().rstrip())\n    base = ord('a') - 1\n    lst = [(ord(s[i]) - base, i) for i in range(len(s))]\n    lst.sort(key=lambda x: x[0])\n    sum1 = sum([el[0] for el in lst])\n    while sum1 > p:\n        (max1, i) = lst.pop()\n        sum1 -= max1\n    lst.sort(key=lambda x: x[1])\n    print(''.join([chr(base + el[0]) for el in lst]))", "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nfor testcases in range(int(input())):\n    weight = input().strip()\n    pvar = int(input())\n    darray = defaultdict(lambda : 0)\n    result = 0\n    for i in weight:\n        darray[i] += 1\n        result += ord(i) - 97 + 1\n    for i in range(25, -1, -1):\n        curr = darray[chr(i + 97)]\n        if result <= pvar:\n            break\n        extraVar = min(darray[chr(i + 97)], (result - pvar + (i + 1) - 1) // (i + 1))\n        darray[chr(i + 97)] -= extraVar\n        result -= extraVar * (i + 1)\n    helper = []\n    for i in weight:\n        if darray[i] > 0:\n            darray[i] -= 1\n            helper.append(i)\n    print(''.join(helper))", "for p in range(int(input())):\n    s = str(input())\n    n = int(input())\n    a = []\n    for i in s:\n        a.append(ord(i) - 96)\n    a.sort()\n    m = sum(a)\n    while m > n:\n        l = a.pop()\n        m -= l\n    o = {chr(x): 0 for x in range(96, 140)}\n    for i in a:\n        o[chr(i + 96)] += 1\n    v = ''\n    for i in s:\n        if o.get(i):\n            v += i\n            o[i] -= 1\n    print(v)", "def sol(arr, k):\n    weights = [[ord(arr[i]) - ord('a') + 1, i] for i in range(len(arr))]\n    weights = sorted(weights)\n    final = []\n    for (w, i) in weights:\n        if w <= k:\n            final.append(i)\n            k -= w\n        else:\n            break\n    return ''.join([arr[i] for i in sorted(final)])\nx = int(input())\nfor _ in range(x):\n    arr = input()\n    k = int(input())\n    print(sol(arr, k))", "def solve(s, p):\n    alphas = 'abcdefghijklmnopqrstuvwxyz'\n    val = {alphas[i]: i + 1 for i in range(26)}\n    cur_val = 0\n    for i in s:\n        cur_val += val[i]\n    if cur_val <= p:\n        return s\n    c = {alphas[i]: 0 for i in range(26)}\n    for i in s:\n        c[i] += 1\n    cur_dif = cur_val - p\n    rev_alphas = alphas[::-1]\n    rem_d = dict()\n    for i in rev_alphas:\n        if c[i] == 0:\n            continue\n        if cur_dif == 0:\n            break\n        this_val = val[i]\n        if this_val * c[i] <= cur_dif:\n            cur_dif -= this_val * c[i]\n            rem_d.update({i: c[i]})\n            continue\n        else:\n            count = cur_dif // this_val\n            rem = cur_dif % this_val\n            if rem != 0:\n                count += 1\n            rem_d.update({i: count})\n            cur_dif = 0\n    i = 0\n    ans = ''\n    while i < len(s):\n        if s[i] in rem_d and rem_d[s[i]] > 0:\n            rem_d[s[i]] -= 1\n        else:\n            ans += s[i]\n        i += 1\n    return ans\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        s = input()\n        p = int(input())\n        res = solve(s, p)\n        print(res)\n    return\nmain()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    w = list(input().rstrip())\n    length = len(w)\n    p = int(input())\n    list_ord = [ord(s) - 96 for s in w]\n    list_ord.sort()\n    check = length\n    for idx in range(length):\n        p -= list_ord[idx]\n        if p < 0:\n            check = idx\n            break\n    dict_chr = {chr(x): 0 for x in range(97, 123)}\n    for idx in range(check):\n        dict_chr[chr(list_ord[idx] + 96)] += 1\n    answer = ''\n    for s in w:\n        if dict_chr[s] != 0:\n            answer += s\n            dict_chr[s] -= 1\n    print(answer)", "for iii in range(int(input())):\n    s = input()\n    n = int(input())\n    q1 = {}\n    for i in range(1, 27, 1):\n        q1[i] = 0\n    s1 = list(s)\n    s1.sort()\n    summ = 0\n    for i in range(len(s1)):\n        x = ord(s1[i]) - 96\n        if summ + x <= n:\n            summ += x\n            q1[x] += 1\n        else:\n            break\n    s2 = ''\n    for i in range(len(s)):\n        x = ord(s[i]) - 96\n        if q1[x] > 0:\n            s2 = s2 + s[i]\n            q1[x] -= 1\n    print(s2)", "for _ in range(int(input())):\n    s = input()\n    p = int(input())\n    arr = [0 for i in range(27)]\n    current = 0\n    for c in s:\n        z = ord(c) - 96\n        arr[z] += 1\n        current += z\n    i = 26\n    while current > p and i > 0:\n        if arr[i] == 0:\n            i -= 1\n            continue\n        current -= i\n        arr[i] -= 1\n    ans = ''\n    for c in s:\n        z = ord(c) - 96\n        if arr[z] > 0:\n            ans += c\n            arr[z] -= 1\n    print(ans)", "def Solver(st, k):\n    arr = []\n    su = 0\n    for (i, char) in enumerate(st):\n        arr.append((ord(char) - 96, i))\n        su += ord(char) - 96\n    sorted_arr = sorted(arr)\n    while su > k:\n        (nu, i) = sorted_arr.pop(-1)\n        su -= nu\n        arr[i] = 0\n    return ''.join([st[i] for i in range(len(st)) if arr[i]])\nfor _ in range(int(input())):\n    st = input()\n    k = int(input())\n    print(Solver(st, k))", "for test in range(int(input())):\n    s = input()\n    p = int(input())\n    a = [0] * 26\n    cs = 0\n    for ii in s:\n        a[ord(ii) - 97] += 1\n        cs += ord(ii) - 96\n    pointer = 25\n    while pointer >= 0 and cs > p:\n        maxp = (cs - p) // (pointer + 1)\n        maxp = min(maxp, a[pointer])\n        cs = cs - maxp * (pointer + 1)\n        a[pointer] -= maxp\n        if a[pointer] > 0 and cs - p < pointer + 1 and (cs > p):\n            a[pointer] -= 1\n            cs -= pointer + 1\n        pointer -= 1\n    ss = ''\n    for ii in s:\n        if a[ord(ii) - 97] > 0:\n            ss += ii\n            a[ord(ii) - 97] -= 1\n    print(ss)", "t = int(input())\nfor i in range(t):\n    w = input()\n    p = int(input())\n    nums = []\n    for k in w:\n        nums.append(ord(k) - 96)\n    nums = sorted(nums)\n    count = sum(nums)\n    while count > p:\n        a = nums.pop()\n        count -= a\n    nums1 = {chr(b): 0 for b in range(96, 140)}\n    for d in nums:\n        nums1[chr(d + 96)] += 1\n    e = ''\n    for r in w:\n        if nums1.get(r):\n            e += r\n            nums1[r] -= 1\n    print(e)", "import math\nfrom collections import Counter, deque\nfrom sys import stdout\nimport time\nfrom math import factorial, log, gcd\nimport sys\nfrom decimal import Decimal\nimport heapq\n\ndef S():\n    return sys.stdin.readline().split()\n\ndef I():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef IS():\n    return sys.stdin.readline().replace('\\n', '')\n\ndef main():\n    s = IS()\n    n = len(s)\n    list_s = []\n    total = 0\n    a = ord('a') - 1\n    for i in range(n):\n        el = ord(s[i]) - a\n        total += el\n        list_s.append((el, i))\n    list_s = list(sorted(list_s, key=lambda x: x[0]))\n    p = II()\n    idxs = set()\n    if total > p:\n        for i in range(n - 1, -1, -1):\n            (el, idx) = list_s[i]\n            total -= el\n            idxs.add(idx)\n            if total <= p:\n                break\n    ans = ''\n    for i in range(n):\n        if i not in idxs:\n            ans += s[i]\n    print(ans)\nfor _ in range(II()):\n    main()", "t = int(input())\nfor _ in range(0, t):\n    s = input()\n    p = int(input())\n    larr = [0 for i in range(0, 26)]\n    len1 = len(s)\n    c = 0\n    for i in range(0, len1):\n        larr[ord(s[i]) - 97] += 1\n        c += ord(s[i]) - 96\n    if c <= p:\n        print(s)\n    else:\n        for i in range(25, -1, -1):\n            diff = c - p\n            if diff % (i + 1) == 0:\n                req = diff // (i + 1)\n            else:\n                req = diff // (i + 1) + 1\n            if larr[i] >= req:\n                larr[i] -= req\n                c -= req * (i + 1)\n            else:\n                c -= larr[i] * (i + 1)\n                larr[i] = 0\n            if c <= p:\n                break\n        s1 = ''\n        for i in range(0, len1):\n            if larr[ord(s[i]) - 97] > 0:\n                larr[ord(s[i]) - 97] -= 1\n                s1 += s[i]\n        print(s1)", "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    w = input().strip()\n    p = int(input())\n    d = defaultdict(lambda : 0)\n    cur = 0\n    for i in w:\n        d[i] += 1\n        cur += ord(i) - 97 + 1\n    for i in range(25, -1, -1):\n        present = d[chr(i + 97)]\n        if cur <= p:\n            break\n        sub = min(d[chr(i + 97)], (cur - p + (i + 1) - 1) // (i + 1))\n        d[chr(i + 97)] -= sub\n        cur -= sub * (i + 1)\n    n = []\n    for i in w:\n        if d[i] > 0:\n            d[i] -= 1\n            n.append(i)\n    print(''.join(n))", "from collections import defaultdict\nimport sys\nimport math\ninput = sys.stdin.readline\nfor i in range(int(input())):\n    w = input().strip()\n    p = int(input())\n    d = defaultdict(lambda : 0)\n    curPrice = 0\n    for i in w:\n        d[i] += 1\n        curPrice += ord(i) - 97 + 1\n    for i in range(25, -1, -1):\n        present = d[chr(i + 97)]\n        if curPrice <= p:\n            break\n        mat = min(d[chr(i + 97)], (curPrice - p + (i + 1) - 1) // (i + 1))\n        d[chr(i + 97)] -= mat\n        curPrice -= mat * (i + 1)\n    new = []\n    for i in w:\n        if d[i] > 0:\n            d[i] -= 1\n            new.append(i)\n    print(''.join(new))", "t = int(input())\nfor _ in range(t):\n    s = input()\n    k = int(input())\n    char = ' abcdefghijklmnopqrstuvwxyz'\n    index = {}\n    for i in range(1, len(char)):\n        index[char[i]] = i\n    res = 0\n    check = [0] * 27\n    for i in s:\n        check[index[i]] += 1\n        res += index[i]\n    i = 26\n    while i > 0:\n        x = (res - k) // i\n        y = (res - k) % i\n        if check[i] > 0:\n            if y:\n                if check[i] * i <= i * (x + 1):\n                    res -= check[i] * i\n                    check[i] = check[i] - check[i]\n                else:\n                    res -= i * (x + 1)\n                    check[i] -= x + 1\n            elif check[i] * i <= i * x:\n                res -= check[i] * i\n                check[i] = check[i] - check[i]\n            else:\n                res -= i * x\n                check[i] -= x\n        i -= 1\n        if res <= k:\n            break\n    ans = ''\n    for i in s:\n        x = index[i]\n        if check[x] > 0:\n            ans += i\n            check[x] -= 1\n    print(ans)", "t = int(input())\nwhile t:\n    w = input()\n    p = int(input())\n    total_cost = sum([ord(e) - ord('a') + 1 for e in w])\n    if total_cost <= p:\n        print(w)\n    else:\n        to_remove = {}\n        for c in sorted(w)[::-1]:\n            total_cost = total_cost - (ord(c) - ord('a') + 1)\n            if c not in to_remove:\n                to_remove[c] = 0\n            to_remove[c] += 1\n            if total_cost <= p:\n                break\n        ans = ''\n        for c in w:\n            if c in to_remove and to_remove[c] > 0:\n                to_remove[c] -= 1\n                continue\n            ans += c\n        print(ans)\n    t -= 1", "d = {}\nd1 = {}\nq = 'abcdefghijklmnopqrstuvwxyz'\nfor r in range(0, len(q)):\n    d[q[r]] = r + 1\nfor f in q:\n    d1[f] = 0\nfor j in range(0, int(input())):\n    s = input()\n    n = int(input())\n    sum = 0\n    for x in s:\n        sum = sum + d[x]\n    if sum <= n:\n        print(s, end='')\n    else:\n        l = []\n        l = list(s)\n        l.sort(reverse=True)\n        l1 = []\n        z = 0\n        while sum > n:\n            sum = sum - d[l[z]]\n            d1[l[z]] += 1\n            z = z + 1\n        for m in s:\n            if d1[m] == 0:\n                print(m, end='')\n            else:\n                d1[m] -= 1\n    print()", "d = {}\nd1 = {}\nq = 'abcdefghijklmnopqrstuvwxyz'\nfor r in range(0, len(q)):\n    d[q[r]] = r + 1\nfor f in q:\n    d1[f] = 0\nfor j in range(0, int(input())):\n    s = input()\n    n = int(input())\n    sum = 0\n    for x in s:\n        sum = sum + d[x]\n    if sum <= n:\n        print(s, end='')\n    else:\n        l = []\n        l = list(s)\n        l.sort(reverse=True)\n        l1 = []\n        z = 0\n        while sum > n:\n            sum = sum - d[l[z]]\n            d1[l[z]] += 1\n            z = z + 1\n        for m in s:\n            if d1[m] == 0:\n                print(m, end='')\n            else:\n                d1[m] -= 1\n    print()", "import sys\nfrom math import sqrt, ceil, floor, gcd\nfrom collections import Counter, defaultdict\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\n\ndef int_arr():\n    return list(map(int, input().split()))\n\ndef str_arr():\n    return list(map(str, input().split()))\n\ndef get_str():\n    return map(str, input().split())\n\ndef get_int():\n    return map(int, input().split())\n\ndef get_flo():\n    return map(float, input().split())\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nmod = 1000000007\n\ndef solve():\n    s = str(input())\n    p = int(input())\n    arr = defaultdict(int)\n    tot = 0\n    tmp = []\n    for i in range(len(s)):\n        x = ord(s[i]) - 97\n        arr[s[i]] += 1\n        if arr[s[i]] == 1:\n            tmp.append(s[i])\n        tot += x + 1\n    tmp.sort(reverse=True)\n    ct = 0\n    for i in tmp:\n        x = ord(i) - 97\n        num = arr[i] * (x + 1)\n        if tot - num > p:\n            tot -= num\n            arr[i] = 0\n        else:\n            tot -= num\n            while ct < arr[i]:\n                if tot + x + 1 <= p:\n                    ct += 1\n                    tot += x + 1\n                else:\n                    break\n            arr[i] = ct\n    ans = ''\n    for i in range(len(s)):\n        if arr[s[i]] > 0:\n            ans += s[i]\n            arr[s[i]] -= 1\n    print(ans)\nT = 1\nT = int(input())\nwhile T:\n    solve()\n    T -= 1", "def solve(s, n):\n    freq = [0 for i in range(26)]\n    for ch in s:\n        freq[ord(ch) - 97] += 1\n    val = 0\n    for i in range(26):\n        if freq[i] > 0:\n            val += (i + 1) * freq[i]\n    fi = 25\n    while val > n:\n        x = (val - n) // (fi + 1)\n        val -= min(freq[fi], x) * (fi + 1)\n        freq[fi] -= min(freq[fi], x)\n        if freq[fi] != 0 and val > n:\n            val -= fi + 1\n            freq[fi] -= 1\n        fi -= 1\n    res = ''\n    for ch in s:\n        ind = ord(ch) - 97\n        if freq[ind] > 0:\n            res += ch\n            freq[ind] -= 1\n    return res\nfor _ in range(int(input())):\n    s = input()\n    n = int(input())\n    print(solve(s, n))", "t = int(input())\nfor i1 in range(t):\n    w = list(input())\n    p = int(input())\n    d = {'a': [1, 0], 'b': [2, 0], 'c': [3, 0], 'd': [4, 0], 'e': [5, 0], 'f': [6, 0], 'g': [7, 0], 'h': [8, 0], 'i': [9, 0], 'j': [10, 0], 'k': [11, 0], 'l': [12, 0], 'm': [13, 0], 'n': [14, 0], 'o': [15, 0], 'p': [16, 0], 'q': [17, 0], 'r': [18, 0], 's': [19, 0], 't': [20, 0], 'u': [21, 0], 'v': [22, 0], 'w': [23, 0], 'x': [24, 0], 'y': [25, 0], 'z': [26, 0]}\n    for i in w:\n        d[i][1] += 1\n    letters = []\n    for i in d:\n        if d[i][1] != 0:\n            letters.append(i)\n    l = [ord(i) - 96 for i in w]\n    n = sum(l)\n    while n > p:\n        n1 = n - p\n        if n1 <= d[letters[-1]][0] * d[letters[-1]][1]:\n            while n > p:\n                n -= d[letters[-1]][0]\n                d[letters[-1]][1] -= 1\n        else:\n            n -= d[letters[-1]][0] * d[letters[-1]][1]\n            letters.pop()\n    l1 = []\n    for i in range(len(w)):\n        if w[i] in letters:\n            if d[w[i]][1] != 0:\n                l1.append(w[i])\n                d[w[i]][1] -= 1\n    print(''.join(l1))", "from collections import Counter\nfrom math import ceil\nt = int(input())\nfor _ in range(t):\n    s = input()\n    p = int(input())\n    freq = Counter(list(s))\n    letters = set(freq.keys())\n    tot_sum = sum([(ord(u) - 96) * v for (u, v) in freq.items()])\n    for i in range(26, 0, -1):\n        if tot_sum <= p:\n            break\n        char = chr(i + 96)\n        if char not in letters:\n            continue\n        x = freq[char]\n        y = ceil((tot_sum - p) / i)\n        freq[char] -= min(x, y)\n        tot_sum -= i * min(x, y)\n    new_s = ''\n    for i in s:\n        if freq[i] > 0:\n            new_s += i\n            freq[i] -= 1\n    print(new_s)", "t = int(input())\nfor i in range(t):\n    mat = [[] for i in range(26)]\n    s = input()\n    p = int(input())\n    arr = list(s)\n    val = 0\n    for (i, c) in enumerate(arr):\n        ind = ord(c) - ord('a')\n        mat[ind].append(i)\n        val += ind + 1\n    i = 25\n    while i >= 0 and val > p:\n        if len(mat[i]) == 0:\n            i -= 1\n            continue\n        ind = mat[i].pop()\n        val -= i + 1\n        arr[ind] = ''\n    print(''.join(arr))", "from collections import defaultdict\n\ndef solveThis():\n    dd = defaultdict(lambda : 0)\n    ss = input().strip()\n    n = int(input())\n    price = 0\n    for j in ss:\n        dd[j] += 1\n        price += ord(j) - 96\n    for i in range(25, -1, -1):\n        pre = dd[chr(i + 97)]\n        if price <= n:\n            break\n        sub = min(dd[chr(i + 97)], (price - n + (i + 1) - 1) // (i + 1))\n        dd[chr(i + 97)] -= sub\n        price -= sub * (i + 1)\n    ans = []\n    for k in ss:\n        if dd[k] > 0:\n            dd[k] -= 1\n            ans.append(k)\n    print(''.join(ans))\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solveThis()\nmain()", "import sys\n\ndef input_int():\n    return int(sys.stdin.readline())\n\ndef input_str():\n    return sys.stdin.readline().strip()\n\ndef input_int_arr():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef print_ln(num):\n    sys.stdout.write(str(num) + '\\n')\n\ndef print_only(num):\n    sys.stdout.write(str(num))\n\ndef solve():\n    inp_str = input_str()\n    p = input_int()\n    chars_counter = [0] * 27\n    total_price = 0\n    for char in inp_str:\n        char_index = ord(char) - 96\n        total_price += char_index\n        chars_counter[char_index] += 1\n    for i in range(26, 0, -1):\n        while chars_counter[i] > 0:\n            if total_price > p:\n                total_price -= i\n                chars_counter[i] -= 1\n            else:\n                break\n    for char in inp_str:\n        char_index = ord(char) - 96\n        if chars_counter[char_index] > 0:\n            print_only(char)\n            chars_counter[char_index] -= 1\n    print_ln('')\n\ndef main():\n    t = input_int()\n    for _ in range(t):\n        solve()\nmain()", "import math\nt = int(input())\nfor _ in range(t):\n    s = input()\n    p = int(input())\n    a = [0] * 26\n    n = len(s)\n    S = 0\n    for i in range(n):\n        S += ord(s[i]) - 96\n        a[ord(s[i]) - 97] += 1\n    b = []\n    for i in range(26):\n        if a[i] != 0:\n            b.append([i + 1, a[i]])\n    if p < b[0][0]:\n        print('')\n        continue\n    b = b[::-1]\n    i = 0\n    while S > p:\n        d = S - p\n        x = math.ceil(d / b[0][0])\n        if x >= b[i][1]:\n            S -= b[i][1] * b[i][0]\n            b[i][1] = 0\n            i += 1\n        else:\n            S -= b[i][0] * x\n            b[i][1] -= x\n    d = dict(b)\n    s_new = ''\n    for i in s:\n        if d[ord(i) - 96] > 0:\n            s_new = s_new + i\n            d[ord(i) - 96] -= 1\n    print(s_new)", "from collections import defaultdict\nimport math\nfor _ in range(int(input())):\n    s = input()\n    p = int(input())\n    su = 0\n    d = defaultdict(lambda : [])\n    cd = defaultdict(int)\n    for (i, k) in enumerate(s):\n        su += ord(k) - 96\n        d[k].append(i)\n        cd[k] += 1\n    a = su - p\n    if a <= 0:\n        print(s)\n        continue\n    keys = list(d.keys())\n    keys.sort(reverse=True)\n    indexs = []\n    i = 0\n    while a > 0:\n        val = ord(keys[i]) - 96\n        m = cd[keys[i]] * val\n        if m > a:\n            possible = math.ceil(a / val)\n            indexs.extend(d[keys[i]][:possible])\n            a -= a\n        else:\n            indexs.extend(d[keys[i]])\n            a -= m\n        i += 1\n    not_take = {}\n    for i in indexs:\n        not_take[i] = True\n    ans = ''\n    for (index, val) in enumerate(s):\n        if index not in not_take:\n            ans += val\n    print(ans)", "def solve():\n    t = input()\n    p = int(input())\n    n = len(t)\n    w = lambda i: ord(t[i]) - ord('a') + 1\n    inds = sorted(range(n), key=lambda i: w(i))\n    s = sum(map(w, range(n)))\n    res = [t[i] for i in range(n)]\n    while s > p:\n        i = inds[-1]\n        inds.pop()\n        res[i] = ''\n        s -= w(i)\n    print(''.join(res))\ntn = int(input())\nfor _ in range(tn):\n    solve()"]