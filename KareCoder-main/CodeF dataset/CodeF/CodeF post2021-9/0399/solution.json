["import math\n\ndef getcount(n, k):\n    res = n >> k + 1 << k\n    if n >> k & 1:\n        res += n & (1 << k) - 1\n    return res\nt = int(input())\nfor _ in range(t):\n    (l, r) = list(map(int, input().split()))\n    k = int(math.log(l, 2))\n    print(min(r - l + 1 - getcount(r + 1, k) + getcount(l, k), r - l + 1 - getcount(r + 1, k + 1) + getcount(l, k + 1)))", "def count_ones(elems, cycle_len):\n    ret = elems // cycle_len * cycle_len // 2\n    left = elems % cycle_len\n    if left > cycle_len // 2:\n        ret += left - cycle_len // 2\n    return ret\n\ndef solve():\n    (l, r) = [int(x) for x in input().split()]\n    ret = 0\n    cycle_len = 2\n    for _ in range(20):\n        ones = count_ones(r + 1, cycle_len) - count_ones(l, cycle_len)\n        ret = max(ret, ones)\n        cycle_len *= 2\n    return r - l + 1 - ret\nt = int(input())\nfor _ in range(t):\n    print(solve())", "T = int(input())\n\ndef stupid(frm, to):\n    bits = [0 for i in range(20)]\n    for x in range(frm, to + 1):\n        for bit in range(20):\n            if x & 1 << bit == 0:\n                bits[bit] += 1\n    return bits\n\ndef solve(frm, to):\n    best = to + frm + 1000\n    res = []\n    for bit in range(20):\n        fromBlockPos = frm % (1 << bit)\n        toBlockPos = to % (1 << bit)\n        from1 = frm & 1 << bit > 0\n        to1 = to & 1 << bit > 0\n        zeroes = 0\n        newFrom = frm - fromBlockPos\n        newTo = to - toBlockPos - 1\n        if not to1:\n            zeroes += toBlockPos + 1\n        if not from1:\n            zeroes -= fromBlockPos\n        blockSize = 1 << bit\n        blockCount = (newTo - newFrom + 1) // blockSize\n        zeroes += blockCount // 2 * blockSize\n        if blockCount % 2 == 1 and (not from1):\n            zeroes += blockSize\n        res.append(zeroes)\n    return res\nfor _ in range(T):\n    (frm, to) = map(int, input().split())\n    print(min(solve(frm, to)))", "def solve(tg, b):\n    na = b % (tg * 2)\n    mok = b - na\n    return mok // 2 + na // tg * (na % tg + 1)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    tg = 1\n    ans = 0\n    while tg <= b:\n        ans = max(ans, solve(tg, b) - solve(tg, a - 1))\n        tg *= 2\n    print(b - a + 1 - ans)", "def solve(tg, b):\n    na = b % (tg * 2)\n    mok = b - na\n    return mok // 2 + na // tg * (na % tg + 1)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    tg = 1\n    ans = 0\n    while tg <= b:\n        ans = max(ans, solve(tg, b) - solve(tg, a - 1))\n        tg *= 2\n    print(b - a + 1 - ans)", "for _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    m = float('inf')\n    two = 2\n    while two // 2 <= r:\n        lp = two * (l // two)\n        rp = two * (r // two)\n        mm = (rp - lp) // 2\n        mm -= min(two // 2, l - lp)\n        mm += min(two // 2, r - rp + 1)\n        m = min(m, mm)\n        two *= 2\n    print(m)", "def getcount(n, k):\n    res = n >> k + 1 << k\n    if n >> k & 1:\n        res += n & (1 << k) - 1\n    return res\nfor _ in range(int(input())):\n    (l, r) = list(map(int, input().split()))\n    n = r - l + 1\n    if l == 1:\n        m = 0\n        for i in range(0, 32):\n            m = max(m, getcount(r + 1, i))\n        print(n - m)\n        continue\n    bits = [0] * 32\n    for i in range(0, 32):\n        bits[i - 1] = getcount(r + 1, i) - getcount(l, i)\n    print(n - max(bits))", "def fun(x, n):\n    p = [0] * n\n    for i in range(1, n + 1):\n        p[i - 1] = x // a[i] * a[i - 1] + max(0, x % a[i] - a[i - 1])\n    return p\nt = int(input())\na = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144]\nn = len(a) - 1\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    x = fun(r + 1, n)\n    y = fun(l, n)\n    for i in range(n):\n        x[i] -= y[i]\n    print(r - l + 1 - max(x))", "def func(a, b):\n    bin_a = bin(a)[2:]\n    bin_b = bin(b)[2:]\n    max_len = len(bin_b)\n    res1 = []\n    b += 1\n    for x in range(max_len):\n        base = 2 ** (x + 1)\n        num = a // base * (base // 2) + max(a % base - base // 2, 0)\n        res1.append(num)\n    res2 = []\n    for x in range(max_len):\n        base = 2 ** (x + 1)\n        num = b // base * (base // 2) + max(b % base - base // 2, 0)\n        res2.append(num)\n    final = [x2 - x1 for (x1, x2) in zip(res1, res2)]\n    max_num = max(final)\n    print(b - a - max_num)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (m, n) = map(int, input().split())\n    func(m, n)", "def c0(n, len):\n    cnt = n // len\n    return cnt * (len // 2) + min(n - cnt * len, len // 2)\n\ndef solve():\n    (l, r) = [int(x) for x in input().split()]\n    mz = r + 1\n    for bit in range(19):\n        len = 2 ** (bit + 1)\n        z = c0(r + 1, len)\n        if l > 0:\n            z -= c0(l, len)\n        mz = min(mz, z)\n    print(mz)\nfor i in range(int(input())):\n    solve()", "def calOnes(n, k):\n    res = n >> k + 1 << k\n    if n >> k & 1:\n        res += n & (1 << k) - 1\n    return res\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    maxOnes = 0\n    for j in range(32):\n        maxOnes = max(calOnes(r + 1, j) - calOnes(l, j), maxOnes)\n    print(r - l + 1 - maxOnes)", "t = int(input())\n\ndef getcount(n, k):\n    res = n >> k + 1 << k\n    if n >> k & 1:\n        res += n & (1 << k) - 1\n    return res\nfor _ in range(t):\n    (l, r) = list(map(int, input().strip().split()))\n    n = r - l + 1\n    arr = [n] * 32\n    for k in range(32):\n        arr[k] -= getcount(r + 1, k) - getcount(l, k)\n    print(min(arr))", "def nonZero(arr):\n    l = len(bin(arr[1])) - 2\n    bit_count = [0] * l\n    for i in range(l):\n        zero = 0\n        r = (arr[1] - arr[0]) // 2 ** (i + 1)\n        zero += r * 2 ** i\n        idx1 = arr[0] % 2 ** (i + 1)\n        val1 = idx1 // 2 ** i\n        idx2 = arr[1] % 2 ** (i + 1)\n        val2 = idx2 // 2 ** i\n        if val1 == 0 and val2 == 1:\n            zero += 2 ** i - idx1\n        elif val2 == 0 and val1 == 1:\n            zero += idx2 + 1\n        elif val2 == val1:\n            if val2 == 1:\n                if arr[1] - arr[0] > 2 ** i and idx2 < idx1:\n                    zero += 2 ** i\n            elif arr[1] - arr[0] > 2 ** i:\n                zero += 2 ** i - idx1 + idx2 + 1\n            else:\n                zero += arr[1] - arr[0] + 1\n        bit_count[i] = zero\n    return min(bit_count)\nr = int(input())\nres = []\nfor i in range(r):\n    arr = list(map(int, input().split()))\n    res.append(nonZero(arr))\nfor i in res:\n    print(i)", "import math\n\ndef main_function():\n    test_cases = range(int(input()))\n    for test_case in test_cases:\n        (l, r) = [int(i) for i in input().split(' ')]\n        l = max(0, l - 1)\n        collector = []\n        s = 2\n        x = 0\n        while True:\n            if s ** x <= r:\n                collector.append(x)\n            else:\n                break\n            x += 1\n        min_val = 1000000000000000000000000000\n        for i in range(len(collector)):\n            period = 2 ** (collector[i] + 1)\n            starting_period = 2 ** collector[i] - 1\n            target = 2 ** collector[i]\n            new_l = l - starting_period\n            new_r = r - starting_period\n            if new_r <= 0:\n                new_r = 0\n            if new_l <= 0:\n                new_l = 0\n            remainder_r = new_r % period\n            counter_period = new_r // period\n            real_r_counter = counter_period * target\n            real_r_counter += min(remainder_r, target)\n            remainder_l = new_l % period\n            counter_period_l = new_l // period\n            real_l_counter = counter_period_l * target\n            real_l_counter += min(remainder_l, target)\n            total_counter_m = r - l - (real_r_counter - real_l_counter)\n            if total_counter_m < min_val:\n                min_val = total_counter_m\n        print(min_val)\nmain_function()", "def h(n, k):\n    return max(0, n - (1 << k) + 1)\n\ndef g(l, r, k):\n    res_l = l & (1 << k + 1) - 1\n    res_r = r & (1 << k + 1) - 1\n    q_l = l >> k + 1\n    q_r = r >> k + 1\n    val = (q_r - q_l) * (1 << k)\n    val += h(res_r, k)\n    val -= h(res_l, k)\n    if l & 1 << k:\n        val += 1\n    return val\n\ndef f(l, r):\n    score = 0\n    for k in range(20):\n        score = max(score, g(l, r, k))\n    return r - l + 1 - score\nt = int(input())\nfor i in range(t):\n    (l, r) = map(int, input().split())\n    print(f(l, r))", "for _ in [*open(0)][1:]:\n    (l, r) = map(int, _.split())\n    k = len(bin(r)) - 2\n    print(min((r // 2 ** i * 2 ** (i - 1) + min(2 ** (i - 1) - 1, r % 2 ** i) - (l - 1) // 2 ** i * 2 ** (i - 1) - min(2 ** (i - 1) - 1, (l - 1) % 2 ** i) for i in range(1, k + 1))))", "def find(l, r):\n    if l == r:\n        return 0\n    big = 0\n    while 2 ** big <= r:\n        big += 1\n    if 2 ** big <= l:\n        return 0\n    biggest = 0\n    for i in range(big):\n        gap = 2 ** (i + 1)\n        q1 = int(l / gap)\n        x1 = l % gap\n        y1 = int(max(0, x1 - gap / 2))\n        z1 = int(gap / 2 * q1 + y1)\n        q2 = int((r + 1) / gap)\n        x2 = (r + 1) % gap\n        y2 = int(max(0, x2 - gap / 2))\n        z2 = int(gap / 2 * q2 + y2)\n        biggest = max(biggest, z2 - z1)\n    return r - l + 1 - biggest\ncases = int(input())\nfor _ in range(cases):\n    line = input().split()\n    l = int(line[0])\n    r = int(line[1])\n    print(find(l, r))", "from math import log2\nfor _ in range(int(input())):\n    (least, large) = map(int, input().strip().split())\n    leastbin = bin(least)[2:]\n    best = 1\n    b = int(log2(large))\n    for i in range(b, -1, -1):\n        power = 2 ** i\n        firstone = int(leastbin[:len(leastbin) - i - 1] + '1' + '0' * i, 2)\n        if least < power:\n            firstone = power\n        dif = large - firstone + 1\n        if firstone > large:\n            continue\n        ans = dif // (power * 2) * power + min(power, dif % (power * 2))\n        if firstone <= least:\n            ans -= least - firstone\n        best = max(best, ans)\n    print(large - least - best + 1)", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    (l, r) = map(int, input().split())\n    L1 = [0] * 18\n    L2 = [0] * 18\n    for i in range(18):\n        (a, b) = divmod(l, 2 ** (i + 1))\n        L1[i] = a * 2 ** i + max(0, b - 2 ** i)\n    for i in range(18):\n        (a, b) = divmod(r + 1, 2 ** (i + 1))\n        L2[i] = a * 2 ** i + max(0, b - 2 ** i)\n    m = 1000000\n    for i in range(18):\n        k = r - l + 1 - (L2[i] - L1[i])\n        if k < m:\n            m = k\n    print(m)", "def andItsNonZero(l, r):\n    a = len(bin(r)[2:])\n    m = float('inf')\n    for i in range(a):\n        x = 2 ** i * ((r + 1) // 2 ** (i + 1)) + min((r + 1) % 2 ** (i + 1), 2 ** i)\n        y = 2 ** i * (l // 2 ** (i + 1)) + min(l % 2 ** (i + 1), 2 ** i)\n        if x - y < m:\n            m = x - y\n    return m\nt = int(input())\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    print(andItsNonZero(l, r))", "t = int(input())\nfor _ in range(t):\n    (l, r) = input().split(' ')\n    l = int(l)\n    r = int(r)\n    length = r - l + 1\n    l -= 1\n    i = 2\n    ans = 0\n    while r * 2 // i != 0:\n        temp1 = l // i * i / 2\n        if l * 2 // i == 0:\n            temp1 = 0\n        if int(temp1) != temp1:\n            temp1 = int(temp1 + 0.5)\n        temp2 = r // i * i / 2\n        if int(temp2) != temp2:\n            temp2 = int(temp2 + 0.5)\n        if r % i != 0 and r * 2 >= i:\n            temp = r - (r // i * i + i / 2) + 1\n            if temp > 0:\n                temp2 += temp\n        if l % i != 0 and l * 2 >= i:\n            temp = l - (l // i * i + i / 2) + 1\n            if temp > 0:\n                temp1 += temp\n        tep = temp2 - temp1\n        if tep > ans:\n            ans = tep\n        i = i * 2\n    print(int(length - ans))", "import math\n\ndef count(n, i):\n    return (n + 1) // 2 ** (i + 1) * 2 ** i + max(0, (n + 1) % 2 ** (i + 1) - 2 ** i)\n\ndef solve(l, r):\n    ans = 0\n    m = int(math.log(r, 2))\n    for i in range(m + 1):\n        ans = max(ans, count(r, i) - count(l - 1, i))\n    print(r - l + 1 - ans)\nt = int(input())\nwhile t > 0:\n    arr = [int(k) for k in input().split()]\n    (l, r) = arr\n    solve(l, r)\n    t -= 1", "import math\nproblem_num = int(input())\nfor problem in range(problem_num):\n    arr = list(map(int, input().split()))\n    (low, high) = arr\n    num_0_lst = []\n    num_1_lst = []\n    ran = int(math.log2(high))\n    for i in range(0, ran + 1):\n        x = high // 2 ** (i + 1) * 2 ** (i + 1) - 1\n        y = low // 2 ** (i + 1) * 2 ** (i + 1)\n        length = x - y + 1\n        count_0 = length // 2\n        count_1 = length // 2\n        count_to_high = high - x\n        count_to_low = low - y\n        if count_to_high // 2 ** i >= 1:\n            count_0 += 2 ** i\n            count_1 += count_to_high % 2 ** i\n        else:\n            count_0 += count_to_high\n        if count_to_low // 2 ** i >= 1:\n            count_0 -= 2 ** i\n            count_1 -= count_to_low % 2 ** i\n        else:\n            count_0 -= count_to_low\n        num_0_lst.append(count_0)\n        num_1_lst.append(count_1)\n    print(min(num_0_lst))", "def calc_set_bits(n):\n    array = []\n    for i in range(1, 23, 1):\n        if i == 1:\n            tmp = n % 2\n        else:\n            tmp = n % 2 ** i - 2 ** (i - 1) + 1\n            if tmp < 0:\n                tmp = 0\n        temp = 2 ** (i - 1) * (n // 2 ** i)\n        array.append(temp + tmp)\n    return array\nt = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    set_bits_for_b = calc_set_bits(b)\n    set_bits_for_a = calc_set_bits(a - 1)\n    max_val = 0\n    for i in range(len(set_bits_for_b)):\n        max_val = max(max_val, set_bits_for_b[i] - set_bits_for_a[i])\n    print(b - a + 1 - max_val)", "from collections import Counter\nfrom queue import Queue\nimport math\n\ndef func2(m, n):\n    if m < 1 << n:\n        return 0\n    if m == 1 << n:\n        return 1\n    if m & 1 << n != 0:\n        k = (m | (1 << n) - 1) - ((1 << n) - 1)\n        if k == 1 << n:\n            return m - k + 1\n        else:\n            M = m - k + 1 + (k - (1 << n)) // 2\n            return M\n    else:\n        for k in range(n + 1, m):\n            if m & 1 << k != 0:\n                kk = (m | (1 << k) - 1) - (1 << k)\n                if kk >= m:\n                    raise Exception\n                return func2(kk, n)\nT = int(input())\nfor t in range(T):\n    (l, r) = [int(a) for a in input().split()]\n    ans = r\n    for n in range(r):\n        if 1 << n > r:\n            break\n        (ll, rr) = (func2(l - 1, n), func2(r, n))\n        ans = min(ans, r - l + 1 - (rr - ll))\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (l, r) = map(int, input().split())\n    r += 1\n    m = 99999999999\n    for j in range(25):\n        a = l // 2 ** (j + 1) * 2 ** j + min(l % 2 ** (j + 1), 2 ** j)\n        b = r // 2 ** (j + 1) * 2 ** j + min(r % 2 ** (j + 1), 2 ** j)\n        m = min(b - a, m)\n    print(m)", "t = int(input())\nfor i in range(t):\n    (l, r) = map(int, input().split())\n    r += 1\n    m = 99999999999\n    for j in range(25):\n        a = l // 2 ** (j + 1) * 2 ** j + min(l % 2 ** (j + 1), 2 ** j)\n        b = r // 2 ** (j + 1) * 2 ** j + min(r % 2 ** (j + 1), 2 ** j)\n        m = min(b - a, m)\n    print(m)", "t = int(input())\nfor i in range(t):\n    (l, r) = map(int, input().split())\n    r += 1\n    m = 99999999999\n    for j in range(25):\n        a = l // 2 ** (j + 1) * 2 ** j + min(l % 2 ** (j + 1), 2 ** j)\n        b = r // 2 ** (j + 1) * 2 ** j + min(r % 2 ** (j + 1), 2 ** j)\n        m = min(b - a, m)\n    print(m)", "import sys\n\ndef readnum():\n    input = sys.stdin.readline\n    a = list(map(int, input().split()))\n    return a\n\ndef printf(val):\n    sys.stdout.write(str(val) + '\\n')\n\ndef power(a, b, mod):\n    if b == 1:\n        return a\n    if b == 0:\n        return 1\n    ans = power(a, b // 2, mod)\n    ans *= ans\n    if b % 2:\n        ans *= a\n    ans = ans % mod\n    return ans\n\ndef factorial(n, start=1, skip=None):\n    res = start\n    for i in range(1, n + 1):\n        if i == skip:\n            continue\n        res *= i\n    return res\n\ndef make_deg(l):\n    deg = {}\n    for i in l:\n        if not i in deg:\n            deg[i] = 0\n        deg[i] += 1\n    return deg\n\ndef get_num_of_bits(n):\n    res = []\n    for i in range(1, 31):\n        res.append(2 ** (i - 1) * (n // 2 ** i) + max(0, n % 2 ** i - 2 ** (i - 1)))\n    return res\n\ndef minus(l, r):\n    res = []\n    for i in range(len(l)):\n        res.append(r[i] - l[i])\n    return res\nfor _ in range(readnum()[0]):\n    (l, r) = readnum()\n    res = minus(get_num_of_bits(l), get_num_of_bits(r + 1))\n    print(r - l - max(res) + 1)", "d = {}\nl = [0 for i in range(18)]\nfor i in range(2 * 10 ** 5 + 1):\n    bi = bin(i)[2:].zfill(18)\n    for x in range(18):\n        if bi[x] == '0':\n            l[x] += 1\n    d[i] = (*(num for num in l),)\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    print(min((dr - dl for (dl, dr) in zip(d[l - 1], d[r]))))", "import sys\ninput = sys.stdin.readline\nmax_n = 2 * 10 ** 5\nnum_digits = len(bin(max_n)) - 2\ncumulative_one_counts = [[0 for i in range(num_digits)]]\nfor n in range(1, max_n + 1):\n    cumulative_one_counts += [cumulative_one_counts[-1].copy()]\n    binary = bin(n)\n    for j in range(len(binary) - 2):\n        if binary[~j] == '1':\n            cumulative_one_counts[-1][~j] += 1\nnum_test_cases = int(input())\nfor test_case_ittr in range(num_test_cases):\n    (left, right) = [int(x) for x in input().split()]\n    max_num_ones = max((a - b for (a, b) in zip(cumulative_one_counts[right], cumulative_one_counts[left - 1])))\n    ans = right - left + 1 - max_num_ones\n    print(ans)", "lm = {}\nq = [0] * 18\nfor i in range(10 ** 5 * 2 + 1):\n    s = bin(i)[2:][::-1]\n    s += '0' * (18 - len(s))\n    for j in range(len(s)):\n        if s[j] == '0':\n            q[j] += 1\n    lm[i] = q.copy()\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    m = 2 ** 31\n    for (i, j) in zip(lm[a - 1], lm[b]):\n        m = min(m, j - i)\n    print(m)", "d = {}\nl = [0 for i in range(18)]\nfor i in range(2 * 10 ** 5 + 1):\n    bi = bin(i)[2:].zfill(18)\n    for x in range(18):\n        if bi[x] == '0':\n            l[x] += 1\n    d[i] = (*(num for num in l),)\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    print(min((dr - dl for (dl, dr) in zip(d[l - 1], d[r]))))", "import sys\n\ndef and_its_non_zero(l, r):\n    counts_l = count_ones(l - 1)\n    counts_r = count_ones(r)\n    max_ones = 0\n    for pos in counts_r:\n        max_ones = max(max_ones, counts_r[pos] - counts_l.get(pos, 0))\n    return r - l + 1 - max_ones\n\ndef count_ones(up_to):\n    if up_to == 0:\n        return {0: 0}\n    i = 1\n    while True:\n        if up_to < 2 ** i:\n            break\n        i += 1\n    i -= 1\n    counts = {i: 1}\n    for j in range(i):\n        counts[j] = 2 ** (i - 1)\n    up_to -= 2 ** i\n    counts[i] += up_to\n    for (pos, count) in count_ones(up_to).items():\n        counts[pos] += count\n    return counts\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    sys.stdout.write(f'{and_its_non_zero(l, r)}\\n')", "d = {}\nl = [0 for i in range(18)]\nfor i in range(2 * 10 ** 5 + 1):\n    bi = bin(i)[2:].zfill(18)\n    for x in range(18):\n        if bi[x] == '0':\n            l[x] += 1\n    d[i] = (*(num for num in l),)\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    print(min((dr - dl for (dl, dr) in zip(d[l - 1], d[r]))))", "arr = []\nlength = len(bin(200001).replace('0b', ''))\narr.append([0] * length)\nfor i in range(1, 200001):\n    x = bin(i).replace('0b', '')\n    x = '0' * (length - len(x)) + x\n    m = arr[i - 1].copy()\n    for j in range(len(x)):\n        if x[j] == '0':\n            m[j] += 1\n    arr.append(m)\nt = int(input())\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    x = arr[l - 1]\n    y = arr[r]\n    z = []\n    mini = 1000000000\n    for i in range(len(x)):\n        mini = min(y[i] - x[i], mini)\n    print(mini)", "a = []\nc = 1\nfor rr in range(1, 20):\n    a1 = [0] * (2 * 10 ** 5 + 1)\n    b = 0\n    for r in range(1, 2 * 10 ** 5 + 1):\n        if r & c != 0:\n            b += 1\n        a1[r] += b\n    c *= 2\n    a.append(a1)\nt = int(input())\nfor ttt in range(t):\n    (x, y) = map(int, input().split())\n    m = -1 * 10 ** 6\n    for u in range(0, 19):\n        mm = a[u][y] - a[u][x - 1]\n        m = max(mm, m)\n    print(y - x + 1 - m)", "import sys, math\nbit_count = [0] * 32\ninput = sys.stdin.readline\n\ndef find(n):\n    count = 0\n    while n >= 1:\n        n //= 2\n        count += 1\n    return count\n\ndef solve(l, r):\n    for i in range(l, r + 1):\n        bit(i)\n    return max(bit_count)\n\ndef bit(a):\n    temp = a\n    n = 0\n    while temp > 0:\n        bit_count[n] += temp % 2\n        temp = temp // 2\n        n += 1\n\ndef bit_make():\n    bit_map = [[0 for _ in range(200001)] for _ in range(18)]\n    for i in range(18):\n        for j in range(1, 200001):\n            bit_map[i][j] = bit_map[i][j - 1] + (1 if j & 1 << i else 0)\n    return bit_map\nt = int(input())\nbit_map = bit_make()\nfor _ in range(t):\n    (l, r) = map(int, input().split(' '))\n    b = [bit_map[j][r] - bit_map[j][l - 1] for j in range(18)]\n    answer = max(b)\n    print(r - l + 1 - answer)", "dp = [[0] * 19 for i in range(200001)]\nfor i in range(1, 200001):\n    t = bin(i)[2:]\n    n = len(t)\n    for j in range(-1, -n - 1, -1):\n        if t[j] == '1':\n            dp[i][j] = dp[i - 1][j] + 1\n        else:\n            dp[i][j] = dp[i - 1][j]\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    t = 0\n    for i in range(19):\n        t = max(t, dp[r][i] - dp[l - 1][i])\n    ans = r - l + 1 - t\n    print(ans)", "n = 2 * 10 ** 5 + 1\nk = 18\ndp = [[0 for i in range(n + 1)] for j in range(18)]\nfor i in range(k):\n    for j in range(1, n + 1):\n        if j & 1 << i:\n            dp[i][j] = dp[i][j - 1] + 1\n        else:\n            dp[i][j] = dp[i][j - 1]\n\ndef func():\n    (l, r) = map(int, input().split())\n    req = -1\n    for i in range(k):\n        req = max(req, dp[i][r] - dp[i][l - 1])\n    return r - l + 1 - req\nt = int(input())\nfor i in range(t):\n    print(func())", "lis = []\nk = 25\nmp = {}\nfor i in range(2 * 10 ** 5 + 3):\n    s = bin(i)[2:][::-1]\n    s += '0' * (k - len(s))\n    for i in range(len(s)):\n        if i not in mp:\n            mp[i] = 0\n        if s[i] == '0':\n            mp[i] += 1\n    lis.append(mp.copy())\nfor p in range(int(input())):\n    (l, r) = map(int, input().split())\n    ans = 2 ** 31\n    for i in range(k):\n        ans = min(ans, lis[r][i] - lis[l - 1][i])\n    print(ans)", "import sys\nimport bisect\ninp = sys.stdin.readline\n\ndef print(s):\n    sys.stdout.write('{}\\n'.format(s))\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\na = [[0] * 20 for i in range(200005)]\nfor i in range(1, 200005):\n    for (idx, j) in enumerate(bin(i)[2:][::-1]):\n        a[i][idx] = a[i - 1][idx] + (j == '1')\nfor _ in range(int(inp())):\n    (l, r) = map(int, inp().split())\n    t = 0\n    for i in range(20):\n        t = max(t, a[r][i] - a[l - 1][i])\n    print(r - l + 1 - t)", "a = [[0 for _ in range(200001)] for _ in range(18)]\nfor j in range(18):\n    for i in range(1, 200001):\n        a[j][i] = a[j][i - 1] + (1 if i & 1 << j else 0)\nt = int(input())\nwhile t:\n    (l, r) = [int(x) for x in input().split()]\n    b = [a[j][r] - a[j][l - 1] for j in range(18)]\n    print(r - l + 1 - max(b))\n    t -= 1", "lis = []\nk = 25\nmp = {}\nfor i in range(2 * 10 ** 5 + 3):\n    s = bin(i)[2:][::-1]\n    s += '0' * (k - len(s))\n    for i in range(len(s)):\n        if i not in mp:\n            mp[i] = 0\n        if s[i] == '0':\n            mp[i] += 1\n    lis.append(mp.copy())\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    ans = 2 ** 31\n    for i in range(k):\n        ans = min(ans, lis[r][i] - lis[l - 1][i])\n    print(ans)", "n = 2 * 10 ** 5 + 1\nk = 18\ndp = [[0 for i in range(n + 1)] for j in range(18)]\nfor i in range(k):\n    for j in range(1, n + 1):\n        if j & 1 << i:\n            dp[i][j] = dp[i][j - 1] + 1\n        else:\n            dp[i][j] = dp[i][j - 1]\n\ndef func():\n    (l, r) = map(int, input().split())\n    req = -1\n    for i in range(k):\n        req = max(req, dp[i][r] - dp[i][l - 1])\n    return r - l + 1 - req\nt = int(input())\nfor i in range(t):\n    print(func())"]