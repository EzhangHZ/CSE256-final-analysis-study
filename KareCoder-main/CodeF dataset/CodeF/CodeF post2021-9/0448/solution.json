["import sys\nimport bisect\n\ndef solve():\n    inp = sys.stdin.readline\n    bs = bisect.bisect\n    n = int(inp())\n    a = list(map(int, inp().split()))\n    b = list(map(int, inp().split()))\n    c = [0]\n    for i in range(1, n):\n        if b[i - 1] < a[i]:\n            c.append(i)\n    c.append(n)\n    print(' '.join((str(b[bs(b, a[i] - 1)] - a[i]) for i in range(n))))\n    print(' '.join((str(b[c[bs(c, i)] - 1] - a[i]) for i in range(n))))\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "def solve_min(a, b):\n    d_min = [0] * len(a)\n    b_index = 0\n    for d_index in range(len(a)):\n        while a[d_index] > b[b_index]:\n            b_index += 1\n        d_min[d_index] = b[b_index] - a[d_index]\n    return d_min\n\ndef solve_max(a, b):\n    d_max = [0] * len(a)\n    stack = []\n    b_index = len(a) - 1\n    for d_index in range(len(a) - 1, -1, -1):\n        while b_index >= 0 and b[b_index] >= a[d_index]:\n            stack.append(b[b_index])\n            b_index -= 1\n        d_max[d_index] = stack[0] - a[d_index]\n        stack.pop()\n    return d_max\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(comp) for comp in input().split(' ')]\n    b = [int(comp) for comp in input().split(' ')]\n    print(' '.join((str(k) for k in solve_min(a, b))))\n    print(' '.join((str(k) for k in solve_max(a, b))))", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    j = 0\n    d = []\n    g = [0] * n\n    for i in range(n):\n        while a[i] > b[j]:\n            j += 1\n        d.append(b[j] - a[i])\n    g[n - 1] = b[n - 1] - a[n - 1]\n    j = n - 1\n    for i in range(n - 2, -1, -1):\n        if a[i + 1] <= b[i]:\n            g[i] = b[j] - a[i]\n        else:\n            g[i] = b[i] - a[i]\n            j = i\n    print(' '.join(list(map(str, d))))\n    print(' '.join(list(map(str, g))))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    As = input().split()\n    As = [int(i) for i in As]\n    Bs = input().split()\n    Bs = [int(i) for i in Bs]\n    min_ds = []\n    idx = 0\n    for (i, a) in enumerate(As):\n        while Bs[idx] < a:\n            idx += 1\n        min_ds.append(Bs[idx] - a)\n    max_ds = []\n    non_xies = [-1]\n    for i in range(n - 1):\n        if As[i + 1] > Bs[i]:\n            non_xies.append(i)\n    non_xies.append(n - 1)\n    for i in range(1, len(non_xies)):\n        for idx in range(non_xies[i - 1] + 1, non_xies[i] + 1):\n            max_ds.append(Bs[non_xies[i]] - As[idx])\n    print(' '.join([str(i) for i in min_ds]))\n    print(' '.join([str(i) for i in max_ds]))", "from collections import Counter\n\ndef main():\n    t = int(input())\n    for t in range(1, t + 1):\n        n = int(input())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        dmin = [0] * n\n        dmax = [0] * n\n        j = 0\n        for i in range(n):\n            while b[j] < a[i]:\n                j += 1\n            dmin[i] = b[j] - a[i]\n        j = 0\n        for i in range(n):\n            j = max(i, j)\n            while j + 1 < n and a[j + 1] <= b[j]:\n                j += 1\n            dmax[i] = b[j] - a[i]\n        print(' '.join(list(map(str, dmin))))\n        print(' '.join(list(map(str, dmax))))\nmain()", "import bisect\n\ndef solve(S, A, B):\n    MIN = []\n    MAX = []\n    dp = []\n    for x in A:\n        i = bisect.bisect_left(B, x)\n        MIN.append(B[i] - x)\n    idx = 0\n    dp.append([])\n    P = [0] * S\n    for i in range(S - 1):\n        dp[idx].append(i)\n        P[i] = idx\n        if B[i] < A[i + 1]:\n            dp.append([])\n            idx += 1\n    dp[idx].append(S - 1)\n    P[S - 1] = idx\n    M1 = []\n    for items in dp:\n        M1.append(max([B[i] for i in items]))\n    for i in range(S):\n        MAX.append(M1[P[i]] - A[i])\n    return ' '.join([str(x) for x in MIN]) + '\\n' + ' '.join([str(x) for x in MAX])\nn = int(input())\nfor _ in range(n):\n    S = int(input())\n    A = [int(x) for x in input().split(' ')]\n    B = [int(x) for x in input().split(' ')]\n    res = solve(S, A, B)\n    print(res)", "t = int(input())\nwhile t:\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d1 = [0] * n\n    d2 = [0] * n\n    j = n - 1\n    res = []\n    for i in range(n - 1, -1, -1):\n        while j >= 0 and b[j] >= a[i]:\n            res.append(b[j])\n            j -= 1\n        d1[i] = res[-1] - a[i]\n        d2[i] = res[0] - a[i]\n        c = n - i\n        h = n - (j + 1)\n        if c == h:\n            res = []\n    print(' '.join(map(str, d1)))\n    print(' '.join(map(str, d2)))\n    t -= 1", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    (mi, ma) = ([], [])\n    f = 0\n    for i in range(n - 1):\n        if A[i + 1] > B[i]:\n            val = B[i]\n            for j in range(f, i + 1):\n                ma.append(val - A[j])\n            f = i + 1\n    for j in range(f, n):\n        ma.append(B[-1] - A[j])\n    j = 0\n    for i in range(n):\n        while j < n and B[j] < A[i]:\n            j += 1\n        mi.append(B[j] - A[i])\n    print(*mi)\n    print(*ma)\n    return\nfor _ in range(int(input())):\n    solve()", "from bisect import bisect_left\nimport sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef solve():\n    n = inp()\n    a = inlt()\n    b = inlt()\n    mins = []\n    maxs = []\n    j = 0\n    for i in range(n):\n        while b[j] < a[i]:\n            j += 1\n        mins.append(b[j] - a[i])\n    j = 0\n    for i in range(n):\n        j = max(i, j)\n        while j + 1 < n and a[j + 1] <= b[j]:\n            j += 1\n        maxs.append(b[j] - a[i])\n    print(*mins)\n    print(*maxs)\nfor _ in range(inp()):\n    solve()", "def solve():\n    num = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    ans1 = []\n    ans2 = [0] * num\n    pointer = 0\n    for i in l1:\n        while l2[pointer] < i:\n            pointer += 1\n        ans1.append(l2[pointer] - i)\n    maxx = []\n    for i in range(num - 1, -1, -1):\n        x = l1[i]\n        while len(l2) and l2[-1] >= x:\n            maxx.append(l2.pop())\n        ans2[i] = maxx[0] - x\n        maxx.pop()\n    print(*ans1)\n    print(*ans2)\nn = int(input())\nfor i in range(n):\n    solve()", "import sys\nimport collections\nfrom math import ceil, gcd, sqrt, log\nimport bisect\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    Dmin = [0] * n\n    Dmax = [0] * n\n    bptr = n - 1\n    (acount, bcount) = (0, 0)\n    net = []\n    for i in range(n - 1, -1, -1):\n        while bptr >= 0 and B[bptr] >= A[i]:\n            bcount += 1\n            net.append(B[bptr])\n            bptr -= 1\n        Dmin[i] = net[-1] - A[i]\n        Dmax[i] = net[0] - A[i]\n        acount += 1\n        if acount == bcount:\n            net = []\n    print(*Dmin)\n    print(*Dmax)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    (dp1, dp2) = ([0] * n, [0] * n)\n    j = 0\n    for i in range(n):\n        while b[j] < a[i]:\n            j += 1\n        dp1[i] = b[j] - a[i]\n    j = n - 1\n    for i in reversed(range(n)):\n        dp2[i] = b[j] - a[i]\n        if b[i - 1] < a[i]:\n            j = i - 1\n    print(*dp1)\n    print(*dp2)", "from bisect import bisect_left\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = 0\n    (mn, mx) = ([], [])\n    y = n - 1\n    for u in range(n - 1, -1, -1):\n        x = bisect_left(b, a[u])\n        mn.append(b[x] - a[u])\n        mx.append(b[y] - a[u])\n        if x == u:\n            y = x - 1\n    print(*mn[::-1])\n    print(*mx[::-1])", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    arr1 = [0] * n\n    arr2 = [0] * n\n    mx = n - 1\n    for i in range(n - 1, -1, -1):\n        mn = bisect.bisect_left(b, a[i])\n        arr1[i] = b[mn] - a[i]\n        arr2[i] = b[mx] - a[i]\n        if i == mn:\n            mx = i - 1\n    print(*arr1)\n    print(*arr2)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    arr1 = [0] * n\n    arr2 = [0] * n\n    mx = n - 1\n    for i in range(n - 1, -1, -1):\n        mn = bisect.bisect_left(b, a[i])\n        arr1[i] = b[mn] - a[i]\n        arr2[i] = b[mx] - a[i]\n        if i == mn:\n            mx = i - 1\n    print(*arr1)\n    print(*arr2)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    (dp1, dp2) = ([0] * n, [0] * n)\n    j = 0\n    for i in range(n):\n        while b[j] < a[i]:\n            j += 1\n        dp1[i] = b[j] - a[i]\n    j = n - 1\n    for i in reversed(range(n)):\n        dp2[i] = b[j] - a[i]\n        if b[i - 1] < a[i]:\n            j = i - 1\n    print(*dp1)\n    print(*dp2)", "t = int(input())\nresult = []\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    f = 0\n    s = 0\n    res1 = []\n    res2 = []\n    while f != n:\n        if b[s] < a[f]:\n            s += 1\n            continue\n        res1.append(b[s] - a[f])\n        f += 1\n    f = n - 1\n    s = n - 1\n    while f != -1:\n        res2.append(b[s] - a[f])\n        if b[f - 1] < a[f]:\n            s = f - 1\n        f -= 1\n    result.append(res1)\n    res2.reverse()\n    result.append(res2)\nfor s in result:\n    print(*s)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    di = [0] * n\n    da = [0] * n\n    ss = n\n    for i in range(n - 1, -1, -1):\n        t = bisect.bisect_left(b, a[i])\n        di[i] = b[t] - a[i]\n        da[i] = b[ss - 1] - a[i]\n        if t == i:\n            ss = i\n    print(*di)\n    print(*da)", "from bisect import bisect_left\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    brr = list(map(int, input().split()))\n    res = []\n    ans = []\n    for el in arr:\n        idx = bisect_left(brr, el)\n        res.append(brr[idx] - el)\n    start = n - 1\n    p = n - 1\n    ans = [brr[-1] - arr[-1]]\n    for i in range(len(arr) - 2, -1, -1):\n        if arr[start] <= brr[i]:\n            ans.append(brr[p] - arr[i])\n            start -= 1\n        else:\n            ans.append(brr[i] - arr[i])\n            start = i\n            p = i\n    print(*res)\n    ans = ans[::-1]\n    print(*ans)", "import bisect\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    if a == b:\n        ans1 = [0] * n\n        print(*ans1)\n        print(*ans1)\n        continue\n    ans1 = []\n    ans2 = []\n    mx = n - 1\n    for i in range(n - 1, -1, -1):\n        mn = bisect.bisect_left(b, a[i])\n        ans1.append(b[mn] - a[i])\n        ans2.append(b[mx] - a[i])\n        if i == mn:\n            mx = i - 1\n    print(*ans1[::-1])\n    print(*ans2[::-1])", "from bisect import bisect_left\n\ndef solve():\n    n = int(input())\n    arr = [-10] + list(map(int, input().split()))\n    brr = [-10] + list(map(int, input().split()))\n    for i in range(1, n + 1):\n        print(brr[bisect_left(brr, arr[i])] - arr[i], end=' ')\n    print()\n    j = 2\n    for i in range(1, n + 1):\n        j = max(j, i + 1)\n        while j <= n and arr[j] <= brr[j - 1]:\n            j += 1\n        print(brr[j - 1] - arr[i], end=' ')\n    print()\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    i = 0\n    first = 0\n    last = n - 1\n    dmin = []\n    dmax = []\n    while i < n:\n        if a[i] <= b[first]:\n            dmin.append(b[first] - a[i])\n            i += 1\n        else:\n            first += 1\n    j = n - 1\n    while j >= 0:\n        if j == n - 1:\n            dmax.append(b[last] - a[j])\n            j -= 1\n        elif b[j] < a[j + 1]:\n            last = j\n            dmax.append(b[last] - a[j])\n            j -= 1\n        else:\n            dmax.append(b[last] - a[j])\n            j -= 1\n    print(*dmin)\n    print(*dmax[::-1])", "def main():\n    for t in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        (d1, d2) = ([], [])\n        j = 0\n        for i in range(n):\n            while b[j] < a[i]:\n                j += 1\n            print(b[j] - a[i], end=' ')\n        print()\n        j = 0\n        for i in range(n):\n            j = max(j, i)\n            while j + 1 < n and a[j + 1] <= b[j]:\n                j += 1\n            print(b[j] - a[i], end=' ')\n        print()\nmain()", "for _ in range(int(input())):\n    yun = int(input())\n    yu = list(map(int, input().split()))\n    hu = list(map(int, input().split()))\n    hiup = lodow = yun - 1\n    (low, high) = ([], [])\n    for i in range(yun - 1, -1, -1):\n        high.append(hu[hiup] - yu[i])\n        while lodow > -1 and hu[lodow] >= yu[i]:\n            lodow -= 1\n        low.append(hu[lodow + 1] - yu[i])\n        if lodow + 1 == i:\n            hiup = lodow\n    print(*low[::-1])\n    print(*high[::-1])", "import sys\nfrom math import ceil\nls = []\nfor l in sys.stdin:\n    lst = l.rstrip('\\n')\n    if len(lst) > 0:\n        ls.append(lst)\nfor l in ls:\n    sys.stderr.write(l + '\\n')\nsys.stderr.write('-- output --\\n')\n\ndef at_least(L, x):\n    for i in range(len(L)):\n        if L[i] >= x:\n            return i\n    return len(L) - 1\n\ndef at_most(L, x):\n    for i in range(len(L) - 1, -1, -1):\n        if L[i] <= x:\n            return i\n    return 0\n\ndef solve(n, a, b):\n    (dmin, dmax) = ([-1] * n, [-1] * n)\n    (imin, imax) = (0, n - 1)\n    for i in range(n):\n        while b[imin] < a[i]:\n            imin += 1\n        dmin[i] = b[imin] - a[i]\n        dmax[n - 1 - i] = b[imax] - a[n - 1 - i]\n        if i < n - 1:\n            if b[n - i - 2] < a[n - i - 1]:\n                imax = n - i - 2\n    return (dmin, dmax)\nfor i in range(1, len(ls) - 1, 3):\n    n = int(ls[i])\n    a = [int(x) for x in ls[i + 1].split(' ')]\n    b = [int(x) for x in ls[i + 2].split(' ')]\n    (dmin, dmax) = solve(n, a, b)\n    print(*dmin)\n    print(*dmax)", "import bisect\nfor jj in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    di = [0] * n\n    da = [0] * n\n    ss = n\n    for i in range(n - 1, -1, -1):\n        t = bisect.bisect_left(b, a[i])\n        di[i] = b[t] - a[i]\n        da[i] = b[ss - 1] - a[i]\n        if t == i:\n            ss = i\n    print(*di)\n    print(*da)", "from bisect import bisect_left as lb, bisect_right as ub\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = [0] * n\n    for i in range(n):\n        pos = lb(b, a[i])\n        d[i] = b[pos] - a[i]\n    print(*d)\n    d = [0] * n\n    i = 0\n    while i < n - 1:\n        j = i\n        while j < n - 1 and a[j + 1] <= b[j]:\n            j += 1\n        for k in range(i, j + 1):\n            d[k] = b[j] - a[k]\n        i = j + 1\n    d[-1] = b[-1] - a[-1]\n    print(*d)", "from collections import defaultdict\ntc = int(input())\nfor i in range(tc):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    br = list(map(int, input().split()))\n    abr = sorted(br)\n    dbr = sorted(br, reverse=True)\n    dar = sorted(ar, reverse=True)\n    c = []\n    p = 0\n    q = 0\n    while p < n and q < n:\n        if br[q] >= ar[p]:\n            c.append(br[q] - ar[p])\n            p += 1\n        else:\n            q += 1\n    d = []\n    p = 0\n    q = 0\n    d.append(dbr[q] - dar[p])\n    q += 1\n    chk = 0\n    while p < n and q < n:\n        if dbr[q] < dar[p]:\n            chk = q\n            p += 1\n            d.append(dbr[chk] - dar[p])\n            q += 1\n        else:\n            p += 1\n            d.append(dbr[chk] - dar[p])\n            q += 1\n    print(*c)\n    d.reverse()\n    print(*d)", "from bisect import bisect_left\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    ns = int(n)\n    ans1 = [0] * ns\n    ans = [0] * ns\n    for i in range(n - 1, -1, -1):\n        iter = bisect_left(b, a[i])\n        ans1[i] = b[iter] - a[i]\n        ans[i] = b[ns - 1] - a[i]\n        if iter == i:\n            ns = i\n    print(*ans1)\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    j = n - 1\n    l = []\n    (dmin, dmax) = ([], [])\n    for i in range(n - 1, -1, -1):\n        while j >= 0 and b[j] >= a[i]:\n            l.append(b[j])\n            j -= 1\n        dmin.append(l[-1] - a[i])\n        dmax.append(l[0] - a[i])\n        c1 = n - i\n        c2 = n - (j + 1)\n        if c1 == c2:\n            l = []\n    print(*dmin[::-1])\n    print(*dmax[::-1])", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    dmin = []\n    dmax = []\n    check = []\n    j = 0\n    for i in range(n):\n        while a[i] > b[j]:\n            j += 1\n        check.append(n - j)\n        dmin.append(b[j] - a[i])\n        dmax.append(0)\n    x = 1\n    m = b[-1]\n    for i in range(n - 1, -1, -1):\n        dmax[i] = m - a[i]\n        if check[i] - x == 0:\n            m = b[n - check[i] - 1]\n        x += 1\n    for i in dmin:\n        print(i, end=' ')\n    print()\n    for i in dmax:\n        print(i, end=' ')\n    print()\n    t -= 1", "from sys import stdin, stdout, setrecursionlimit as srl\nfrom threading import stack_size\nfrom collections import deque, defaultdict as dd\nfrom math import gcd, ceil, sqrt\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\nflush = stdout.flush\np = int(1000000000.0 + 7)\ntc = 1\ntc = int(input())\nfor _ in range(1, tc + 1):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    mn = []\n    j = 0\n    for i in range(n):\n        while j < n and a[i] > b[j]:\n            j += 1\n        mn.append(b[min(j, n - 1)] - a[i])\n    mx = [b[-1] - a[-1]]\n    val = b[-1]\n    for i in range(n - 2, -1, -1):\n        if b[i] < a[i + 1]:\n            val = b[i]\n        mx.append(val - a[i])\n    mx.reverse()\n    print(*mn)\n    print(*mx)", "def get_min(a, b, n):\n    mins = [0] * n\n    i = n - 1\n    min_ind = n - 1\n    while i >= 0:\n        while b[min_ind] >= a[i] and min_ind >= 0:\n            min_ind -= 1\n        min_ind += 1\n        mins[i] = b[min_ind] - a[i]\n        i -= 1\n    return mins\n\ndef get_max(a, b, n):\n    maxs = [0] * n\n    high = n - 1\n    maxs[high] = b[high] - a[high]\n    i = n - 2\n    while i >= 0:\n        if b[i] < a[i + 1]:\n            high = i\n        maxs[i] = b[high] - a[i]\n        i -= 1\n    return maxs\ntest_cases = int(input())\nfor i in range(test_cases):\n    arr_len = int(input())\n    a = [int(x) for x in input().split(' ')]\n    b = [int(x) for x in input().split(' ')]\n    mins = get_min(a, b, arr_len)\n    maxs = get_max(a, b, arr_len)\n    ans = ''\n    for x in mins:\n        ans += str(x) + ' '\n    print(ans)\n    ans = ''\n    for x in maxs:\n        ans += str(x) + ' '\n    print(ans)", "t = int(input())\nfor e in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    dmn = [0] * n\n    dmx = [0] * n\n    ia = 0\n    ib = 0\n    while ia < n and ib < n:\n        if a[ia] <= b[ib]:\n            dmn[ia] = b[ib] - a[ia]\n            ia += 1\n        else:\n            ib += 1\n    ia = n - 1\n    ib = n - 2\n    tb = ib + 1\n    ta = ia\n    while ia >= 0 and ib >= 0:\n        if ib == ia:\n            ib -= 1\n        while ib >= 0 and a[ia] <= b[ib]:\n            ib -= 1\n            ia -= 1\n        while ta >= 0 and ta > ib:\n            dmx[ta] = b[tb] - a[ta]\n            ta -= 1\n        tb = ib\n        ia = ta\n    if n == 1:\n        dmx[0] = b[0] - a[0]\n    print(*dmn)\n    print(*dmx)", "from bisect import bisect_left\nfrom bisect import bisect_right\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    D1 = [0] * n\n    D2 = [0] * n\n    m1 = max(B)\n    j = n - 1\n    f = 1\n    while j >= 0:\n        if j >= 1:\n            if A[j] > B[j - 1]:\n                D2[j] = m1 - A[j]\n                j -= 1\n                m1 = B[j]\n            else:\n                D2[j] = m1 - A[j]\n                j -= 1\n        else:\n            D2[j] = m1 - A[j]\n            j -= 1\n    for i in range(n):\n        a = bisect_right(B, A[i])\n        if a == n or B[a - 1] == A[i]:\n            D1[i] = B[a - 1] - A[i]\n        else:\n            D1[i] = B[a] - A[i]\n    print(*D1)\n    print(*D2)", "def num():\n    c = int(input())\n    return c\n\ndef stri():\n    c = str(input())\n    return c\n\ndef vector():\n    c = list(map(int, input().split()))\n    return c\n\ndef strvector():\n    c = list(map(str, input().split()))\n    return c\nimport math\nimport bisect\nfrom collections import defaultdict\n\ndef isprime(num):\n    a = 2\n    while a <= math.sqrt(num):\n        if num % a < 1:\n            return False\n        a = a + 1\n    return num > 1\nt = num()\nwhile t > 0:\n    t -= 1\n    n = num()\n    arr = vector()\n    fin = vector()\n    res1 = []\n    res2 = [0 for i in range(n)]\n    for i in range(0, n):\n        x = bisect.bisect_left(fin, arr[i])\n        res1.append(fin[x] - arr[i])\n    l = n - 1\n    for i in range(n - 1, -1, -1):\n        if i == n - 1:\n            res2[i] = fin[i] - arr[i]\n        elif fin[i] >= arr[i + 1]:\n            res2[i] = fin[l] - arr[i]\n        else:\n            l = i\n            res2[i] = fin[l] - arr[i]\n    for i in res1:\n        print(i, end=' ')\n    print()\n    for i in res2:\n        print(i, end=' ')\n    print()", "from bisect import *\nfor _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    b = [*map(int, input().split())]\n    l = []\n    v = []\n    j = n - 1\n    r = []\n    for i in range(n):\n        o = bisect_left(b, a[i])\n        l += [b[o] - a[i]]\n    for i in range(n - 1, -1, -1):\n        while j >= 0 and b[j] >= a[i]:\n            v += [b[j]]\n            j -= 1\n        r += [v[0] - a[i]]\n        v.pop()\n    r = r[::-1]\n    print(*l)\n    print(*r)", "def solve():\n    n = int(input())\n    a = list(map(int, input().split())) + [10 ** 10]\n    b = list(map(int, input().split())) + [10 ** 10]\n    min_ = n * [0]\n    max_ = n * [0]\n    r = -1\n    for i in range(n):\n        while r < n and a[i] > b[r + 1]:\n            r += 1\n        min_[i] = r + 1\n    ind = 0\n    cur = n\n    for i in range(1, n + 1):\n        max_[n - i] = max(cur - 1, 0)\n        if min_[n - i] == n - i:\n            cur = n - i\n    for i in range(n):\n        print(b[min_[i]] - a[i], end=' ')\n    print()\n    for i in range(n):\n        print(b[max_[i]] - a[i], end=' ')\n    print()\nt = int(input())\nfor i in range(t):\n    solve()", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    j = n - 1\n    l = []\n    d_min = []\n    d_max = []\n    for i in range(n - 1, -1, -1):\n        while b[j] >= a[i] and j >= 0:\n            l.append(b[j])\n            j -= 1\n        a_count = n - i\n        b_count = n - (j + 1)\n        d_min.append(l[-1] - a[i])\n        d_max.append(l[0] - a[i])\n        if a_count == b_count:\n            l = []\n    for i in range(n - 1, -1, -1):\n        print(d_min[i], end=' ')\n    print()\n    for i in range(n - 1, -1, -1):\n        print(d_max[i], end=' ')\n    print()", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    start = end = n - 1\n    m = []\n    M = []\n    for i in range(n - 1, -1, -1):\n        while b[start] >= a[i] and start >= 0:\n            start -= 1\n        start += 1\n        m.append(b[start] - a[i])\n        M.append(b[end] - a[i])\n        if start == i:\n            start -= 1\n            end = start\n    ans1 = ''\n    ans2 = ''\n    for i in range(n - 1, 0, -1):\n        ans1 += str(m[i]) + ' '\n        ans2 += str(M[i]) + ' '\n    ans1 += str(m[0])\n    ans2 += str(M[0])\n    print(ans1)\n    print(ans2)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    maxis = []\n    minis = []\n    for i in a:\n        v = bisect.bisect_left(b, i)\n        minis.append(max(0, b[v] - i))\n    mx = [i for i in b]\n    for i in range(n - 2, -1, -1):\n        v = bisect.bisect_left(b, a[i + 1])\n        if i + 1 != v:\n            mx[i] = mx[i + 1]\n        else:\n            mx[i] = b[i]\n    for i in range(n):\n        maxis.append(mx[i] - a[i])\n    print(*minis)\n    print(*maxis)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    maxis = []\n    minis = []\n    for i in a:\n        v = bisect.bisect_left(b, i)\n        minis.append(max(0, b[v] - i))\n    mx = [i for i in b]\n    for i in range(n - 2, -1, -1):\n        v = bisect.bisect_left(b, a[i + 1])\n        if i + 1 != v:\n            mx[i] = mx[i + 1]\n        else:\n            mx[i] = b[i]\n    for i in range(n):\n        maxis.append(mx[i] - a[i])\n    print(*minis)\n    print(*maxis)", "import bisect\n\ndef resolve(list_a, list_b):\n    min_list = []\n    max_list = []\n    for item in list_a:\n        insert_index = bisect.bisect_left(list_b, item)\n        min_list.append(list_b[insert_index] - item)\n    interval = []\n    for index in range(1, len(list_a)):\n        if list_a[index] > list_b[index - 1]:\n            interval.append(index)\n    last = 0\n    for item in interval:\n        for index in range(last, item):\n            max_list.append(list_b[item - 1] - list_a[index])\n        last = item\n    for index in range(last, len(list_a)):\n        max_list.append(list_b[len(list_a) - 1] - list_a[index])\n    return (min_list, max_list)\n\ndef read_input():\n    lines_1 = input()\n    lines_2 = input().split(' ')\n    list_a = []\n    list_b = []\n    for item in lines_2:\n        list_a.append(int(item))\n    lines_3 = input().split(' ')\n    for item in lines_3:\n        list_b.append(int(item))\n    return (list_a, list_b)\ncase_num = int(input())\nif not case_num == 0:\n    for index in range(case_num):\n        (list_a, list_b) = read_input()\n        (res1, res2) = resolve(list_a, list_b)\n        for item in res1:\n            print(str(item) + ' ', end='')\n        print()\n        for item_2 in res2:\n            print(str(item_2) + ' ', end='')\n        print()", "testcases = int(input())\nfor t in range(testcases):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    mini = []\n    i = 0\n    for x in a:\n        while x > b[i]:\n            i += 1\n        mini.append(b[i] - x)\n    maxi = []\n    j = 0\n    for k in range(n - 1):\n        j = max(j, k)\n        while j + 1 < n and a[j + 1] <= b[j]:\n            j += 1\n        maxi.append(b[j] - a[k])\n    maxi.append(b[n - 1] - a[n - 1])\n    for x in mini:\n        print(x, end=' ')\n    print()\n    for x in maxi:\n        print(x, end=' ')\n    print()", "standard_input = '4\\n3\\n2 3 5\\n7 11 13\\n1\\n1000\\n5000\\n4\\n1 2 3 4\\n1 2 3 4\\n4\\n10 20 30 40\\n22 33 33 55\\n'\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    greaterThan = [0 for _ in range(n)]\n    k = n - 1\n    for i in range(n - 1, -1, -1):\n        while k > 0 and b[k - 1] >= a[i]:\n            k -= 1\n        greaterThan[i] = k\n    print(*(b[greaterThan[i]] - a[i] for i in range(n)))\n    bestSpot = [0 for _ in range(n)]\n    highestSpot = n - 1\n    maximum = [0 for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        while bestSpot[highestSpot]:\n            highestSpot -= 1\n        ans = b[highestSpot] - a[i]\n        maximum[i] = ans\n        k = greaterThan[i]\n        while bestSpot[k]:\n            k = bestSpot[k]\n        bestSpot[k] = k + 1\n        bestSpot[greaterThan[i]] = k + 1\n    print(*maximum)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    bptr = n - 1\n    aptr = n - 1\n    store = []\n    dmin = [0] * n\n    dmax = [0] * n\n    a_used = 0\n    while aptr >= 0:\n        while bptr >= 0 and b[bptr] >= a[aptr]:\n            store.append(b[bptr])\n            bptr -= 1\n        dmin[aptr] = store[-1] - a[aptr]\n        dmax[aptr] = store[0] - a[aptr]\n        a_used += 1\n        if a_used == len(store):\n            store = []\n            a_used = 0\n        aptr -= 1\n    for i in range(n):\n        if i < n - 1:\n            print(dmin[i], end=' ')\n        else:\n            print(dmin[i])\n    for i in range(n):\n        if i < n - 1:\n            print(dmax[i], end=' ')\n        else:\n            print(dmax[i])\n    t -= 1", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    q = deque()\n    ans1 = [0] * n\n    s = 0\n    for i in range(n):\n        while s < n:\n            if a[i] <= b[s]:\n                break\n            s += 1\n        ans1[i] = abs(a[i] - b[s])\n    print(*ans1)\n    for i in range(n - 1, -1, -1):\n        if b[i] >= a[-1]:\n            q.appendleft(b[i])\n            b.pop()\n        else:\n            break\n    ans = [0] * n\n    for i in range(n - 1, -1, -1):\n        ans[i] = q[-1] - a[i]\n        q.popleft()\n        for j in range(len(b) - 1, -1, -1):\n            if b[j] >= a[i - 1]:\n                q.appendleft(b[j])\n                b.pop()\n            else:\n                break\n    print(*ans)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    min_list = [0] * n\n    max_list = [0] * n\n    k = 0\n    for j in range(n):\n        mi = 10000000000\n        while True:\n            if b[k] < a[j]:\n                k += 1\n            else:\n                break\n        while True:\n            if k < n and b[k] - a[j] <= mi and (a[j] <= b[k]):\n                mi = b[k] - a[j]\n                k += 1\n            else:\n                k -= 1\n                break\n        min_list[j] = mi\n    flag = 0\n    end = n - 1\n    for j in range(n - 1, 0, -1):\n        max_list[j] = b[end] - a[j]\n        if b[j - 1] - a[j] < 0:\n            end = j - 1\n    else:\n        max_list[0] = b[0] - a[0]\n        for j in range(1, end + 1):\n            if b[j - 1] >= a[j]:\n                max_list[0] = b[j] - a[0]\n            else:\n                break\n    for j in min_list:\n        print(j, end=' ')\n    print()\n    for j in max_list:\n        print(j, end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    mini = [0] * n\n    maxi = [0] * n\n    up = 0\n    down = 0\n    while up < n and down < n:\n        if b[down] < a[up]:\n            down += 1\n        else:\n            maxi[up] = b[down] - a[up]\n            if down + 1 < n and a[down + 1] <= b[down]:\n                down += 1\n            else:\n                up += 1\n    up = n - 1\n    down = n - 1\n    while up >= 0 and down >= 0:\n        mini[up] = b[down] - a[up]\n        if down - 1 >= 0 and b[down - 1] >= a[up]:\n            down -= 1\n        else:\n            up -= 1\n    print(*mini)\n    print(*maxi)", "def min_in_gr(arr, target):\n    l = -1\n    r = len(arr) - 1\n    while l + 1 < r:\n        mid = (l + r) // 2\n        if arr[mid] >= target:\n            r = mid\n        else:\n            l = mid\n    return r\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    d_min = [0] * n\n    cnt = [0] * n\n    for i in range(n):\n        idx = min_in_gr(b, a[i])\n        d_min[i] = b[idx] - a[i]\n        cnt[idx] += 1\n    d_max = [0] * n\n    slotted = 0\n    top = n - 1\n    cur = n - 1\n    while cur >= 0:\n        d_max[cur] = b[top] - a[cur]\n        if cnt[cur]:\n            slotted += cnt[cur]\n        if slotted == n - cur:\n            top = cur - 1\n        cur -= 1\n    return (d_min, d_max)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        (d_min, d_max) = solve()\n        print(*d_min, sep=' ')\n        print(*d_max, sep=' ')\nmain()", "def binary(a, x):\n    n = len(a)\n    l = 0\n    r = n - 1\n    res = -1\n    while l <= r:\n        mid = (l + r) // 2\n        if x > a[mid]:\n            l = mid + 1\n        else:\n            res = mid\n            r = mid - 1\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    di = [0] * n\n    da = [0] * n\n    ss = n\n    for i in range(n - 1, -1, -1):\n        t = binary(b, a[i])\n        di[i] = b[t] - a[i]\n        da[i] = b[ss - 1] - a[i]\n        if t == i:\n            ss = i\n    print(*di)\n    print(*da)", "import sys\n\ndef findleastgreater(lst, end, num):\n    (l, r) = (1, end)\n    if lst[0] >= num:\n        return 0\n    while l < r:\n        mid = l + r >> 1\n        if lst[mid] >= num and lst[mid - 1] < num:\n            return mid\n        elif lst[mid] >= num:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return l\nepoch = int(sys.stdin.readline())\nfor _ in range(epoch):\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    d = list(map(int, sys.stdin.readline().strip().split()))\n    (mi, ma) = ([], [])\n    end = n - 1\n    block = n\n    for i in range(n - 1, -1, -1):\n        num = a[i]\n        idx = findleastgreater(d, end, num)\n        end = idx\n        ma.append(d[block - 1] - num)\n        if i <= idx:\n            block = idx\n        mi.append(d[idx] - num)\n    for i in mi[::-1]:\n        print(i, end=' ')\n    print('')\n    for i in ma[::-1]:\n        print(i, end=' ')\n    print('')", "def binary(a, x):\n    n = len(a)\n    l = 0\n    r = n - 1\n    res = -1\n    while l <= r:\n        mid = (l + r) // 2\n        if a[mid] == x:\n            return mid\n        elif x > a[mid]:\n            l = mid + 1\n        else:\n            res = mid\n            r = mid - 1\n    return res\n\ndef d_min(l, a):\n    n = len(l)\n    res = []\n    for x in l:\n        res.append(a[binary(a, x)] - x)\n    return res\n\ndef d_max(a, b):\n    x = 0\n    n = len(a)\n    d = [True for _ in range(n)]\n    for i in range(n - 1, 0, -1):\n        if a[i] <= b[i - 1]:\n            d[i] = True\n        else:\n            d[i] = False\n    dd = list(range(n))\n    last = n\n    for i in range(n - 1, -1, -1):\n        dd[i] = last - 1\n        if d[i] == False:\n            last = i\n    res = []\n    for i in range(n):\n        res.append(b[dd[i]] - a[i])\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    res1 = d_min(a, b)\n    print(*res1)\n    res2 = d_max(a, b)\n    print(*res2)", "def ss_min(l, a):\n    n = len(l)\n\n    def ceiling_of_element(x):\n        start = 0\n        end = n - 1\n        res = -1\n        while start <= end:\n            mid = (start + end) // 2\n            if a[mid] == x:\n                return a[mid]\n            elif x > a[mid]:\n                start = mid + 1\n            else:\n                res = mid\n                end = mid - 1\n        return a[res]\n    ans = []\n    for x in l:\n        ans.append(ceiling_of_element(x) - x)\n    return ans\n\ndef ss_max(a, b):\n    n = len(a)\n    t = [True for _ in range(n)]\n    for i in range(n - 1, 0, -1):\n        if a[i] <= b[i - 1]:\n            t[i] = True\n        else:\n            t[i] = False\n    t_t = [i for i in range(n)]\n    last_f = n\n    for i in range(n - 1, -1, -1):\n        t_t[i] = last_f - 1\n        if t[i] == False:\n            last_f = i\n    ans = []\n    for i in range(n):\n        ans.append(b[t_t[i]] - a[i])\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans_min = ss_min(a, b)\n    ans_max = ss_max(a, b)\n    print(*ans_min)\n    print(*ans_max)"]