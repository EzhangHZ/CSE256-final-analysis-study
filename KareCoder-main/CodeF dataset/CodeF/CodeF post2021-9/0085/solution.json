["s = []\nfor i in range(int(input())):\n    a = [str(j) for j in range(1, int(input()) + 1)]\n    if len(a) == 1 or len(a) == 3:\n        s.append('-1')\n    else:\n        if len(a) % 2 == 0:\n            a.reverse()\n        else:\n            a = a[2:] + a[:2]\n        s.append(' '.join(a))\nprint('\\n'.join(s))", "output = []\nfor caseno in range(int(input())):\n    answer = ''\n    n = int(input())\n    if n == 3:\n        answer = '-1'\n    else:\n        answer = [str(n), str(n - 1)] + [str(i + 1) for i in range(n - 2)]\n        answer = ' '.join(answer)\n    output.append(answer)\nprint('\\n'.join(output))", "n = int(input())\nnums = []\nfor i in range(n):\n    nums.append(int(input()))\nans = []\nfor i in nums:\n    if i & 1:\n        if i == 3:\n            ans.append([-1])\n        else:\n            res = []\n            mid = (i + 1) // 2\n            for x in range(mid, i + 1):\n                res.append(x)\n            for x in range(mid - 1, 0, -1):\n                res.append(x)\n            ans.append(res)\n    else:\n        ans.append([x for x in range(i, 0, -1)])\nfor i in ans:\n    res = ' '.join((str(x) for x in i))\n    print(res)", "import sys\nfrom collections import *\nsys.setrecursionlimit(10 ** 5)\nitr = (line for line in sys.stdin.read().strip().split('\\n'))\nINP = lambda : next(itr)\n\ndef ni():\n    return int(INP())\n\ndef nl():\n    return [int(_) for _ in INP().split()]\n\ndef solve(a):\n    if a == 1 or a == 3:\n        print(-1)\n        return\n    out = []\n    out.append(a)\n    out.append(a - 1)\n    for i in range(1, a - 1):\n        out.append(i)\n    print(' '.join(list(map(str, out))))\nt = ni()\nfor case in range(t):\n    a = ni()\n    solve(a)", "for _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(' '.join(list(map(str, list(range(n, 0, -1))))))\n    elif n > 5:\n        sc2 = list(range(n, 0, -1))\n        (sc2[n // 2], sc2[n // 2 + 1]) = (sc2[n // 2 + 1], sc2[n // 2])\n        print(' '.join(list(map(str, sc2))))\n    elif n == 5:\n        print('5 4 1 2 3')\n    else:\n        print('-1')", "output = ''\nfor caseno in range(int(input())):\n    answer = ''\n    n = int(input())\n    if n == 3:\n        answer = -1\n    else:\n        answer = [str(n), str(n - 1)] + [str(i + 1) for i in range(n - 2)]\n        answer = ' '.join(answer)\n    output += str(answer) + '\\n'\nprint(output)", "def funny_seq(number):\n    if number == 3:\n        return -1\n    seq = list(map(lambda x: str(x), range(1, number + 1)))\n    return ' '.join([seq[-1], seq[-2]] + seq[:-2])\nnumbers = [int(input()) for _ in range(int(input()))]\nfor num in numbers:\n    print(funny_seq(num))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 3 or n == 1:\n        print(-1)\n        continue\n    if n == 2:\n        print('2 1')\n        continue\n    if n == 4:\n        print('3 4 2 1')\n        continue\n    if n == 5:\n        print('5 4 1 2 3')\n    else:\n        a = [n - 1, n] + list(range(1, n - 1))\n        a = [str(x) for x in a]\n        print(' '.join(a))\n        continue", "def prob_826B():\n\n    def rotate(l, n):\n        return l[n:] + l[:n]\n    m = int(input())\n    list1 = []\n    for i in range(m):\n        n = int(input())\n        if n == 2:\n            list1.append('2 1')\n        elif n == 3:\n            list1.append(-1)\n        else:\n            test = [i for i in range(1, n + 1)]\n            test = rotate(test, 2)\n            string_list = [str(j) for j in test]\n            list1.append(' '.join(string_list))\n    for i in list1:\n        print(i)\nprob_826B()", "n = int(input())\nkq = []\nfor i in range(n):\n    p = int(input())\n    ls = list(range(1, p + 1))\n    if len(ls) % 2 == 0:\n        kq.append(list(reversed(ls)))\n    elif len(ls) == 3:\n        kq.append([-1])\n    else:\n        ls = list(reversed(ls))\n        kq.append(ls[:len(ls) // 2] + list(reversed(ls[len(ls) // 2:])))\nfor i in kq:\n    i = list(map(str, i))\n    print(' '.join(i))", "def funny_seq(number):\n    if number == 3:\n        return -1\n    seq = list(map(lambda x: str(x), range(1, number + 1)))\n    return ' '.join([seq[-1], seq[-2]] + seq[:-2])\nnumbers = [int(input()) for _ in range(int(input()))]\nfor num in numbers:\n    print(funny_seq(num))", "def funny_seq(number):\n    if number == 3:\n        return -1\n    seq = list(map(lambda x: str(x), range(1, number + 1)))\n    return ' '.join([seq[-1], seq[-2]] + seq[:-2])\nnumbers = [int(input()) for _ in range(int(input()))]\nfor num in numbers:\n    print(funny_seq(num))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(' '.join([str(x) for x in range(n, 0, -1)]))\n    elif n == 3:\n        print('-1')\n    else:\n        a = [n - 1, n] + [x for x in range(1, n - 1)]\n        print(' '.join([str(x) for x in a]))", "def get_funny_permutation(n):\n    if n == 3:\n        return -1\n    elif n % 2 == 0:\n        temp = [x for x in range(n, 0, -1)]\n        return ' '.join(map(str, temp))\n    else:\n        temp = [x for x in range(n, 0, -1)]\n        temp[-len(temp) // 2:] = temp[-len(temp) // 2:][::-1]\n        return ' '.join(map(str, temp))\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        f = int(input())\n        ans = get_funny_permutation(f)\n        print(ans)\nmain()", "for i in range(int(input())):\n    x = int(input())\n    if x % 2 == 0:\n        print(' '.join([str(i) for i in range(x, 0, -1)]))\n    elif x == 3:\n        print(-1)\n    elif x == 5:\n        print('5 4 1 2 3')\n    else:\n        m = [str(i) for i in range(x, 0, -1)]\n        (m[len(m) // 2], m[len(m) // 2 + 1]) = (m[len(m) // 2 + 1], m[len(m) // 2])\n        print(' '.join(m))", "n = int(input())\nA = []\nres = []\nres1 = []\nfor i in range(n):\n    a = int(input())\n    A.append(a)\nfor i in range(len(A)):\n    ans = ''\n    res = []\n    if A[i] == 3:\n        print(-1)\n    elif A[i] % 2 == 0:\n        for i in range(1, A[i] + 1):\n            res.append(i)\n        res = res[::-1]\n        ans = ' '.join(map(str, res))\n        print(ans)\n    else:\n        ans1 = ''\n        ans1 += str(A[i]) + ' ' + str(A[i] - 1) + ' '\n        for i in range(1, A[i] - 1):\n            ans1 += str(i) + ' '\n        print(ans1)", "t = int(input())\n\ndef funny_per(n):\n    lista = [i + 1 for i in reversed(range(n))]\n    lon = len(lista)\n    if lon == 3:\n        value = [-1]\n    elif lon % 2 == 0:\n        value = lista\n    elif lon == 5:\n        a = (lista[0], lista[2])\n        lista[2] = a[0]\n        lista[0] = a[1]\n        value = lista\n    else:\n        item = lon // 2\n        a = (lista[item], lista[item - 1])\n        lista[item - 1] = a[0]\n        lista[item] = a[1]\n        value = lista\n    return value\nfor i in range(t):\n    n = int(input())\n    result = funny_per(n)\n    print(' '.join(map(str, result)))", "def main():\n    tests = int(input())\n    for _ in range(tests):\n        current = int(input())\n        per = []\n        if current == 3:\n            print(-1)\n            continue\n        for i in range(3, current + 1):\n            per.append(str(i))\n        per += ['2', '1']\n        string = ' '.join(per)\n        print(string)\nmain()", "import itertools\nfor _ in range(int(input())):\n    n = int(input())\n    if n in [1, 3]:\n        print(-1)\n    elif n % 2 == 0:\n        print(' '.join(map(str, range(n, 0, -1))))\n    else:\n        print(' '.join(map(str, itertools.chain(range(n, n // 2 + 1, -1), range(1, n // 2 + 2)))))", "for i in range(int(input())):\n    n = int(input())\n    ans = []\n    if n == 3:\n        print(-1)\n    else:\n        if n % 2 == 0:\n            ans = [i for i in range(n, 0, -1)]\n        else:\n            for i in range(n, n // 2 + 1, -1):\n                ans.append(i)\n            for i in range(1, n // 2 + 2):\n                ans.append(i)\n        print(' '.join(map(str, ans)))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = [i for i in range(1, n + 1)]\n    if n == 1 or n == 3:\n        print(-1)\n    elif n == 2:\n        print(' '.join([str(l[1]), str(l[0])]))\n    else:\n        l1 = []\n        l1 = l[2:] + l[:2]\n        l1 = [str(i) for i in l1]\n        print(' '.join(l1))", "from math import gcd\n\ndef main():\n    n_tests = int(input())\n    for _ in range(n_tests):\n        n = int(input())\n        if n == 3:\n            print(-1)\n            continue\n        if n % 2 == 0:\n            print(' '.join(map(str, reversed(range(1, n + 1)))))\n            continue\n        data = list(range(1, n + 1))\n        start = [data[-1], data[-2]] + data[:len(data) - 2]\n        print(' '.join(map(str, start)))\nmain()", "l = int(input())\nfor i in range(l):\n    n = int(input())\n    if n == 3:\n        print(-1)\n    elif n == 1:\n        print(-1)\n    elif n == 5:\n        print('4 5 1 2 3')\n    elif n % 2 == 0:\n        list_n = [str(x) for x in list(range(n, 0, -1))]\n        print(' '.join(list_n))\n    else:\n        list_n = [str(x) for x in list(range(n, 0, -1))]\n        popnum = list_n.pop(int(n / 2))\n        list_n.insert(int(n / 2 - 1), popnum)\n        print(' '.join(list_n))", "n = int(input())\nnn = []\nfor i in range(n):\n    nn.append(int(input()))\nfor i in range(n):\n    x = nn[i]\n    if x == 1:\n        print(1)\n    elif x == 2:\n        print('2 1')\n    elif x == 3:\n        print(-1)\n    elif x % 2 == 0:\n        print(''.join([f'{i} ' for i in range(x, 0, -1)])[:-1])\n    else:\n        m = x // 2\n        l = list(range(1, x + 1))[::-1]\n        print(''.join((f'{i} ' for i in l[:m] + l[m:][::-1])))", "def main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n > 3:\n            l = [str(n - 1), str(n)]\n            for j in range(1, n - 1):\n                l.append(str(j))\n            print(' '.join(l))\n        elif n == 2:\n            print('2 1')\n        elif n == 3:\n            print('-1')\nmain()", "import os\nimport math\nimport collections\nimport bisect\nimport functools\nimport itertools\nimport heapq\n\ndef solve(n):\n    if n == 2:\n        return [2, 1]\n    if n == 3:\n        return [-1]\n    if n % 2 == 0:\n        return list(range(n, 0, -1))\n    m = (n + 1) // 2\n    return list(range(n, m, -1)) + list(range(1, m + 1))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(' '.join((str(x) for x in solve(n))))", "def perm(n: int):\n    if n == 3:\n        return (-1,)\n    if n % 2:\n        return (n, n - 1, *tuple(range(1, n - 1, 1)))\n    else:\n        return tuple(range(n, 0, -1))\nfor _ in range(int(input())):\n    n = int(input())\n    print(' '.join(map(str, perm(n))))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 3:\n        print(-1)\n    elif n % 2 == 0:\n        out = [x for x in range(n, 0, -1)]\n        print(' '.join(list(map(str, out))))\n    else:\n        out = [x for x in range(n, n // 2 + 1, -1)] + [x for x in range(1, n // 2 + 2)]\n        print(' '.join(list(map(str, out))))", "n = int(input())\nfor _ in range(n):\n    t = int(input())\n    if t % 2 == 0:\n        print(' '.join(list(map(str, list(range(1, t + 1))[::-1]))))\n    elif t == 3:\n        print(-1)\n    else:\n        print(' '.join(list(map(str, list(range(4, t + 1)) + [1, 2, 3]))))", "import math\nimport re\n\ndef solve():\n    n = int(input())\n    if n == 3:\n        return -1\n    ans = [n - x for x in range(n)]\n    if n % 2 == 0:\n        pass\n    elif n == 5:\n        (ans[(n + 1 >> 1) - 1], ans[(n + 1 >> 1) + 1]) = (ans[(n + 1 >> 1) + 1], ans[(n + 1 >> 1) - 1])\n    else:\n        (ans[(n + 1 >> 1) - 1], ans[n + 1 >> 1]) = (ans[n + 1 >> 1], ans[(n + 1 >> 1) - 1])\n    return ' '.join(map(str, ans))\nfor _ in range(int(input())):\n    print(solve())", "def solve2():\n    n = int(input())\n    ans = []\n    for i in range(n, 0, -1):\n        ans.append(i)\n    if n % 2 == 0:\n        return ' '.join([str(i) for i in ans])\n    if n == 3:\n        return -1\n    else:\n        al = n // 2\n        new = ans[:al]\n        for x in ans[al:][::-1]:\n            new.append(x)\n        return ' '.join([str(i) for i in new])\ntest = int(input())\nfor _ in range(test):\n    ans = solve2()\n    print(ans)", "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        print(str(' '.join(map(str, get_answ(n)))))\n\ndef get_answ(n):\n    answ = []\n    if n == 2:\n        answ = [2, 1]\n        return answ\n    elif n == 3:\n        answ = [-1]\n        return answ\n    else:\n        answ = [n, n - 1]\n        for i in range(1, n - 1):\n            answ.append(i)\n        return answ\nmain()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1 or n == 3:\n        print(-1)\n        continue\n    b = [str(i) for i in range(n, 0, -1)]\n    if n % 2 == 0:\n        print(' '.join(b))\n        continue\n    s = b[len(b) // 2:len(b)]\n    s.reverse()\n    s = b[0:len(b) // 2] + s\n    print(' '.join(s))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 3:\n        print(-1)\n        continue\n    if n == 2:\n        print('2 1')\n        continue\n    pref = list(range(n, n - n // 2, -1))\n    suff = list(range(1, n // 2 + 1 + n % 2))\n    print(' '.join(map(str, pref)), end=' ')\n    print(' '.join(map(str, suff)))", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    if N == 3:\n        print(-1)\n    elif N == 5:\n        print('5 4 1 2 3')\n    elif N % 2 == 0:\n        res = [str(x) for x in range(N, 0, -1)]\n        print(' '.join(res))\n    else:\n        res = [str(x) for x in range(N, 0, -1)]\n        (res[N // 2], res[N // 2 + 1]) = (res[N // 2 + 1], res[N // 2])\n        print(' '.join(res))", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    if n == 1 or n == 3:\n        print(-1)\n    else:\n        half = math.ceil(n / 2)\n        res = []\n        for i in range(n, half, -1):\n            res.append(i)\n        for i in range(1, half + 1):\n            res.append(i)\n        print(' '.join(map(str, res)))\n    t -= 1", "def f(n):\n    l = []\n    for i in range(3, n + 1):\n        l.append(i)\n    l.append(1)\n    l.append(2)\n    return l\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    if n == 3:\n        print(-1)\n    elif n == 2:\n        print(2, 1)\n    else:\n        m = ' '\n        print(m.join(map(str, f(n))))\n    t -= 1", "nbTest = int(input())\nfor testN in range(nbTest):\n    n = int(input())\n    res = []\n    if n == 2:\n        res = ['2', '1']\n    elif n == 3:\n        res = ['-1']\n    else:\n        res.append(str(n))\n        res.append(str(n - 1))\n        for i in range(1, n - 1):\n            res.append(str(i))\n    print(' '.join(res))", "for _ in range(int(input())):\n    n = int(input())\n    if n == 3:\n        print(-1)\n        continue\n    out1 = []\n    for x in range(n, n - 2, -1):\n        out1.append(str(x))\n    for x in range(1, n - 1):\n        out1.append(str(x))\n    print(' '.join(out1))", "def sol(n):\n    l = [str(_) for _ in range(1, n + 1)]\n    if n == 3:\n        return '-1'\n    else:\n        p = ' '.join(l[n // 2:]) + ' ' + ' '.join(l[:n // 2])\n        return p\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(sol(n))", "x = int(input())\nfor i in range(x):\n    a = int(input())\n    if a == 2:\n        print('2 1')\n    elif a == 3:\n        print(-1)\n    else:\n        res = []\n        if a % 2:\n            srt = 4\n        else:\n            srt = 3\n        for i in range(srt, a + 1):\n            res.append(str(i))\n        for i in range(1, srt):\n            res.append(str(i))\n        print(' '.join(res))", "test = int(input())\nfor i in range(0, test):\n    state = []\n    n = int(input())\n    if n == 1 or n == 3:\n        state.append(-1)\n    elif n == 2:\n        state.append(2)\n        state.append(1)\n    else:\n        state.append(n - 1)\n        state.append(n)\n        for j in range(1, n - 1):\n            state.append(j)\n    state = ' '.join(map(str, state))\n    print(state)", "size = input()\nfor i in range(int(size)):\n    n = int(input())\n    if n == 2:\n        print(2, 1)\n        continue\n    if n == 3:\n        print(-1)\n        continue\n    if n == 5:\n        print(5, 4, 1, 2, 3)\n        continue\n    if n % 2 == 0:\n        print(' '.join([str(i) for i in range(n, 0, -1)]))\n    else:\n        print(' '.join([str(i) for i in range(n, (n + 1) // 2, -1)] + [str((n + 1) // 2 - 1), str((n + 1) // 2)] + [str(i) for i in range((n + 1) // 2 - 2, 0, -1)]))", "import sys\nimport threading\nfrom functools import lru_cache\nfrom collections import defaultdict, deque\n\ndef main():\n    t = int(input())\n    for k in range(t):\n        n = int(input())\n        if n == 3:\n            print(-1)\n            continue\n        ans = deque()\n        if n % 2 == 0:\n            print(' '.join(map(str, range(n, 0, -1))))\n        else:\n            ans = []\n            mid = n // 2\n            for i in range(mid + 1, n + 1):\n                ans.append(str(i))\n            for i in range(1, mid + 1):\n                ans.append(str(i))\n            print(' '.join(ans))\nsys.setrecursionlimit(1 << 30)\nthreading.stack_size(1 << 27)\nmain_thread = threading.Thread(target=main)\nmain_thread.start()\nmain_thread.join()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 3:\n        print(-1)\n    elif n % 2 == 0:\n        r = list(range(1, n + 1))\n        r.reverse()\n        print(' '.join(map(str, r)))\n    else:\n        r = list(reversed(list(range(1, n + 1))[n // 2 + 1:])) + list(range(1, n + 1))[0:n // 2 + 1]\n        print(' '.join(map(str, r)))", "for i in range(int(input())):\n    n = int(input())\n    if n == 3:\n        print(-1)\n    elif n % 2 == 0:\n        r = list(range(1, n + 1))\n        r.reverse()\n        print(' '.join(map(str, r)))\n    else:\n        r = list(reversed(list(range(1, n + 1))[n // 2 + 1:])) + list(range(1, n + 1))[0:n // 2 + 1]\n        print(' '.join(map(str, r)))", "import math\n\ndef permutation(num):\n    lst = []\n    if num % 2 == 0:\n        for i in range(1, num + 1):\n            lst.append(str(i))\n        lst.reverse()\n    else:\n        for i in range(int(math.floor(num / 2)) + 1, num + 1):\n            lst.append(str(i))\n        for i in range(1, int(math.floor(num / 2)) + 1):\n            lst.append(str(i))\n    print(' '.join((i for i in lst)))\n    return\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1 or n == 3:\n        print('-1')\n    else:\n        permutation(int(n))", "def solve():\n    n = int(input())\n    if n == 1:\n        print('1')\n        return\n    if n == 2:\n        print('2 1')\n        return\n    if n == 3:\n        print('-1')\n        return\n    s = []\n    for i in range(1, n + 1):\n        s.append(str(i))\n    s = s[-2:] + s[:n - 2]\n    print(' '.join(s))\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    list = [x for x in range(1, n + 1)]\n    if n == 3:\n        print('-1')\n    else:\n        a = list.pop(0)\n        a = list.pop(0)\n        list.append(2)\n        list.append(1)\n        print(' '.join([str(x) for x in list]))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 3:\n        print(-1)\n    else:\n        a = [str(i) for i in range(1, n + 1)]\n        if n % 2 == 0:\n            a = a[::-1]\n        else:\n            a = a[::-1][:2] + a[:-2]\n        print(' '.join(a))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 3:\n        print(-1)\n        continue\n    ans = [str(n), str(n - 1)]\n    for i in range(1, n - 1):\n        ans.append(str(i))\n    print(' '.join(ans))", "t = int(input())\nfor l in range(t):\n    olist = []\n    n = int(input())\n    if n == 3:\n        print('-1')\n    else:\n        for j in range(3, n + 1):\n            olist.append(j)\n        if n % 2 == 0:\n            olist.append(2)\n            olist.append(1)\n            olist.sort(reverse=True)\n            print(' '.join(map(str, olist)))\n        else:\n            olist.append(2)\n            olist.append(1)\n            print(' '.join(map(str, olist)))", "t = int(input())\nfor ncase in range(1, t + 1):\n    n = int(input())\n    if n == 2:\n        ans = '2 1'\n    elif n == 3:\n        ans = '-1'\n    elif n % 2 == 0:\n        ans = ' '.join([str(i) for i in range(n, 0, -1)])\n    else:\n        ans = ' '.join([str(i) for i in range(n, int((n + 1) / 2), -1)] + [str(i) for i in range(1, int((n + 3) / 2))])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    if n == 3 or n == 1:\n        print(-1)\n    else:\n        ans = [str(i) for i in range(1, n + 1)]\n        if n % 2:\n            print(' '.join(ans[n // 2:n] + ans[:n // 2]))\n        else:\n            print(' '.join(ans[::-1]))", "for _ in range(int(input())):\n    n = int(input())\n    if n == 3:\n        print(-1)\n    elif n % 2 == 0:\n        print(' '.join(map(str, [i + 1 for i in reversed(range(n))])))\n    else:\n        out = [n, n - 1]\n        out += [i + 1 for i in range(n - 2)]\n        print(' '.join(map(str, out)))", "time = int(input())\nfor i in range(time):\n    n = int(input())\n    if n == 1 or n == 3:\n        print(-1)\n    elif n == 2:\n        print('2 1')\n    else:\n        l = [str(n - 1), str(n)] + [str(x) for x in range(1, n - 1)]\n        print(' '.join(l))", "for _ in range(int(input())):\n    s = list(map(str, range(1, 1 + int(input()))))\n    print(-1 if len(s) == 3 else ' '.join(s[2:] + list(reversed(s[:2]))))", "t = int(input())\nfor h in range(t):\n    arr = []\n    n = int(input())\n    if n == 3 or n == 1:\n        print('-1')\n    else:\n        arr.append(str(n))\n        arr.append(str(n - 1))\n        for i in range(1, n - 1):\n            arr.append(str(i))\n        st = ' '.join(arr)\n        print(st)", "from functools import lru_cache as cache\nfrom collections import Counter, defaultdict, deque\nimport math\nimport bisect\nimport string\nfrom heapq import *\nimport sys\n\ndef get_int():\n    return int(input())\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_str():\n    return sys.stdin.readline().strip()\n\ndef main():\n    testcases = get_int()\n    for _ in range(testcases):\n        n = get_int()\n        print(solve(n))\n\ndef solve(n):\n    if n == 3:\n        return -1\n    if n == 2:\n        return '2 1'\n    result = [i for i in range(3, n + 1)]\n    result += [2, 1]\n    return ' '.join(map(str, result))\nmain()", "testcases = int(input())\n\ndef reverse(n):\n    newList = []\n    for x in range(0, len(n)):\n        newList.append(n[len(n) - x - 1])\n    return newList\nfor i in range(testcases):\n    t = int(input())\n    perm = []\n    for j in range(1, t + 1):\n        perm.append(str(j))\n    perm.reverse()\n    if t == 3:\n        print(-1)\n        continue\n    if t % 2 == 1:\n        rev = reverse(perm[int(t / 2):t])\n        for j in range(int(t / 2), t):\n            perm[j] = rev[j - int(t / 2)]\n    print(' '.join(perm))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 3:\n        print('-1')\n    if n % 2 == 0:\n        lis = []\n        for j in range(1, n + 1):\n            lis.append(str(n - j + 1))\n        print(' '.join(lis))\n    if n % 2 != 0 and n != 3:\n        count = (n + 1) // 2\n        lis = []\n        for j in range(count, n + 1):\n            lis.append(str(j))\n        for j in range(n - count):\n            lis.append(str(j + 1))\n        print(' '.join(lis))", "for i in range(int(input())):\n    n = int(input())\n    if n == 1 or n == 3:\n        print(-1)\n    elif n == 2:\n        print('2 1')\n    else:\n        print(str(n - 1), str(n), ' '.join(map(str, range(1, n - 1))))", "def make_funny_permutation(n):\n    if n == 3:\n        return -1\n    x = [str(i) for i in range(n // 2 + 1, n + 1)]\n    y = [str(i) for i in range(1, n // 2 + 1)]\n    x.extend(y)\n    return ' '.join(x)\nnum = int(input())\nfor i in range(num):\n    n = int(input())\n    print(make_funny_permutation(n))", "n = int(input())\nfor i in range(n):\n    j = int(input())\n    if j % 2 == 0:\n        arr = [k for k in range(1, j + 1)]\n        print(' '.join(map(str, arr[::-1])))\n    elif j == 3:\n        print(-1)\n    else:\n        arr = [k for k in range(1, j + 1 - 2)]\n        arr.insert(0, j - 1)\n        arr.insert(1, j)\n        print(' '.join(map(str, arr)))", "def f(n):\n    if n == 1 or n == 3:\n        return -1\n    if n == 2:\n        return '2 1'\n    res = [(i + n - 2) % n + 1 for i in range(n)]\n    return ' '.join(map(str, res))\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(f(n))", "class Solution:\n\n    def produceValid(n: int):\n        nums = [j for j in range(n, n - 2, -1)] + [i for i in range(1, n - 1)]\n        for k in range(n):\n            if k + 1 == nums[k]:\n                return -1\n        str_nums = [str(num) for num in nums]\n        return ' '.join(str_nums)\n\n    def funnyPermutation():\n        n = int(input())\n        for length in range(n):\n            length = int(input())\n            print(Solution.produceValid(length))\nSolution.funnyPermutation()", "for _ in range(int(input())):\n    P = int(input())\n    if P == 3:\n        print(-1)\n    else:\n        print(P, P - 1, ' '.join(map(str, range(1, P - 1))))", "tmp = [str(i) for i in range(3, 200001)]\nfor i in range(int(input())):\n    n = int(input())\n    if n == 3:\n        print(-1)\n    else:\n        print(' '.join(tmp[:n - 2]) + ' 2 1')", "import string\nletters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        A = [i + 1 for i in range(n)]\n        A.reverse()\n        print(' '.join(map(str, A)))\n    elif n == 3:\n        print(-1)\n    else:\n        A = [i + 1 for i in range(n)]\n        A1 = A[-2:]\n        A2 = A[:-2]\n        A = A1 + A2\n        print(' '.join(map(str, A)))", "m = 998244353\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    if n == 3:\n        print(-1)\n    elif n % 2 == 0:\n        out = ''\n        for i in range(n // 2):\n            out += str(n - i) + ' '\n        for i in range(n // 2):\n            out += str(i + 1) + ' '\n        print(out)\n    else:\n        out = ''\n        for i in range(n // 2):\n            out += str(n - i) + ' '\n        for i in range(n // 2):\n            out += str(i + 1) + ' '\n        out += str((n + 1) // 2)\n        print(out)", "def gcd(y, z):\n    while z:\n        (y, z) = (z, y % z)\n    return abs(y)\n\ndef solve():\n    n = int(input())\n    if n == 1 or n == 3:\n        print(-1)\n        return\n    res = ''\n    if n % 2:\n        for i in range(n // 2):\n            res += str(n - i) + ' '\n        for i in range(n // 2 + 1):\n            res += str(i + 1) + ' '\n        print(res[:len(res) - 1])\n    else:\n        for i in range(n, 0, -1):\n            res += str(i) + ' '\n        print(res[:len(res) - 1])\nt = int(input())\nfor _ in range(t):\n    solve()", "def helper(n):\n    p = [i for i in range(1, n + 1)]\n    p = p[::-1]\n    for i in range(1, len(p)):\n        if p[i] == i + 1 and i > 1:\n            p[i:] = p[i:][::-1]\n        elif p[i] == i + 1 and i == 1:\n            return -1\n    return ' '.join(list(map(str, p)))\nfor i in range(int(input())):\n    n = int(input())\n    res = helper(n)\n    print(res)", "tmp = [str(i) for i in range(200000, 0, -1)]\nfor i in range(int(input())):\n    n = int(input())\n    if n % 2:\n        if n == 3:\n            print(-1)\n        else:\n            print(' '.join(tmp[-n:-(n // 2 + 1)]) + ' ' + ' '.join(tmp[-(n // 2 + 1):][::-1]))\n    else:\n        print(' '.join(tmp[-n:]))", "def N():\n    return int(input())\n\ndef A():\n    return [x for x in input().split()]\n\ndef S():\n    return input()\nfor _ in range(N()):\n    if 'er9fj48gh48gh4' == 14194665565:\n        print('Tanmay')\n    n = N()\n    if n == 3:\n        print(-1)\n        continue\n    ans = ''\n    if n % 2:\n        ans = str(n - 1) + ' ' + str(n) + ' '\n        for i in range(1, n - 1):\n            ans += str(i) + ' '\n    else:\n        for i in range(n, 0, -1):\n            ans += str(i) + ' '\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 3:\n        print(-1)\n        continue\n    k = n // 2\n    out = [str(i) for i in range(k + 1, n + 1)] + [str(j) for j in range(1, k + 1)]\n    print(' '.join(out))", "n = int(input())\nwhile n > 0:\n    n = n - 1\n    k = int(input())\n    L = []\n    K = []\n    if k == 3:\n        print(-1)\n    else:\n        for i in range(1, k + 1):\n            L.append(i)\n            K.append(i)\n        L.reverse()\n        if k % 2 == 0:\n            print(' '.join(map(str, L)))\n        else:\n            print(' '.join(map(str, L[:k // 2])) + ' ' + ' '.join(map(str, K[:k // 2 + 1])))", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    if n == 2:\n        print(f'2 1')\n    elif n == 3:\n        print('-1')\n    elif n % 2 == 0:\n        s = ''\n        for i in range(n, 0, -1):\n            s += str(i) + ' '\n        print(s)\n    else:\n        s = str(n) + ' ' + str(n - 1) + ' '\n        for i in range(1, n - 1):\n            s += str(i) + ' '\n        print(s)", "def solve():\n    n = int(input())\n    a = []\n    for i in range(0, n):\n        a.append(i + 1)\n    mid = n // 2\n    if n % 2 != 0:\n        mid += 1\n    aa = a[:mid]\n    bb = a[mid:]\n    bb.reverse()\n    bb.extend(aa)\n    flag = 0\n    for i in range(0, n):\n        if bb[i] == i + 1:\n            flag = 1\n            break\n    if flag or n == 3:\n        print(-1)\n    else:\n        print(' '.join((str(x) for x in bb)))\nfor t in range(0, int(input())):\n    solve()", "t = int(input())\nfor c in range(t):\n    n = int(input())\n    s = ''\n    if n == 3:\n        print(-1)\n    else:\n        for i in range(n):\n            if i < 2:\n                s += str(n - i) + ' '\n            else:\n                s += str(i - 1) + ' '\n        print(s)", "for i in range(int(input())):\n    n = int(input())\n    if n == 3:\n        print(-1)\n        continue\n    s = str(n) + ' ' + str(n - 1) + ' '\n    for i in range(1, n - 1):\n        s += str(i) + ' '\n    print(s)", "n = int(input())\nfor _ in range(n):\n    a = int(input())\n    if a == 3:\n        print(-1)\n    elif a == 2:\n        print('2 1')\n    else:\n        s = ' '\n        for i in range(1, a - 1):\n            s += str(i) + ' '\n        s = str(a - 1) + ' ' + str(a) + s\n        print(s)", "for i in range(int(input())):\n    n = int(input())\n    str = ''\n    if n == 3:\n        print(-1)\n    else:\n        if n % 2 == 0:\n            for i in range(n, 0, -1):\n                str += f'{i} '\n        else:\n            for i in range(n, n // 2 + 1, -1):\n                str += f'{i} '\n            for i in range(1, n - n // 2 + 1):\n                str += f'{i} '\n        print(str)", "def permute(array):\n    text = ''\n    new = []\n    if len(array) > 3:\n        half = int(len(array) / 2)\n        new = [array[half:], array[:half]]\n        new = [el for first in new for el in first]\n    else:\n        reversed = array[::-1]\n        for (i, x) in enumerate(reversed):\n            if i + 1 == x:\n                return '-1'\n            else:\n                continue\n        new = reversed.copy()\n    for elem in new:\n        text += str(elem) + ' '\n    return text\nfor _ in range(int(input())):\n    n = int(input())\n    if n < 2:\n        print(-1)\n    else:\n        funny = permute(list(range(1, n + 1)))\n        print(funny)", "num = int(input())\nfor i in range(num):\n    n = int(input())\n    if n == 2:\n        print('2 1')\n    elif n == 3:\n        print(-1)\n    elif n == 5:\n        print('4 5 1 2 3')\n    else:\n        j = n\n        ans = ''\n        while j > 3:\n            if j - 1 > 3:\n                if (j - 1) * 2 == n:\n                    ans += f'{j} {j - 1} '\n                else:\n                    ans += f'{j - 1} {j} '\n            else:\n                ans += f'{j} '\n            j -= 2\n        ans += '3 2 1'\n        print(ans)", "def check_is_fun(l):\n    state = True\n    for i in range(1, len(l) - 1):\n        if not (l[i] + 1 == l[i + 1] or l[i] - 1 == l[i + 1] or l[i] + 1 == l[i - 1] or (l[i] - 1 == l[i - 1])):\n            state = False\n    if not (l[-1] + 1 == l[-2] or l[-1] - 1 == l[-2]):\n        state = False\n    return state\nn = int(input())\nfor i in range(n):\n    a = []\n    cur_len = int(input())\n    if cur_len == 2:\n        print('2 1')\n    elif cur_len == 3:\n        print(-1)\n    else:\n        for i in range(3, cur_len + 1):\n            a.append(i)\n        res = a + [2, 1]\n        if check_is_fun(res):\n            print(' '.join((str(elem) for elem in res)))\n        else:\n            print(-1)", "def solution(n):\n    if n == 3:\n        s = '-1 '\n    elif n == 2:\n        s = '2 1 '\n    else:\n        res = [n - 1, n]\n        res += [i for i in range(1, n - 1)]\n        s = ''\n        for x in res:\n            s += str(x) + ' '\n    print(s[:-1])\nt = int(input())\nfor i in range(t):\n    z = int(input())\n    solution(z)", "t = int(input(''))\nfor i in range(0, t):\n    n = int(input(''))\n    if n == 3:\n        print(-1)\n    elif n % 2 == 0:\n        l = ''\n        for i in range(n, 0, -1):\n            l += str(i) + ' '\n        print(l)\n    elif n % 2 != 0:\n        l = ''\n        for i in range((n + 1) // 2, n):\n            l += str(i + 1) + ' '\n        for i in range(0, (n + 1) // 2):\n            l += str(i + 1) + ' '\n        print(l)", "for _ in range(int(input())):\n    n = int(input())\n    s = ''\n    if n != 3 and n != 1 and (n != 5):\n        if n % 2 == 0:\n            for i in range(n, 0, -1):\n                s += str(i) + ' '\n            print(s)\n        else:\n            S = []\n            for i in range(n, 0, -1):\n                S.append(i)\n            temp = S[n // 2 - 1]\n            S[n // 2 - 1] = S[n // 2]\n            S[n // 2] = temp\n            for ele in S:\n                s += str(ele) + ' '\n            print(s)\n    elif n == 5:\n        print('5 4 1 2 3')\n    else:\n        print(-1)", "n = int(input())\nfor i in range(n):\n    m = int(input())\n    if m == 3 or m == 1:\n        print(-1)\n    elif m % 2:\n        ans = ''\n        for e in range(m, 3, -2):\n            ans += str(e - 1) + ' ' + str(e) + ' '\n        ans += '1 2 3'\n        print(ans)\n    else:\n        print(*range(m, 0, -1))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = ''\n    a = ''\n    if n == 1 or n == 3:\n        print(-1)\n    elif n % 2 == 0:\n        for j in range(n, 0, -1):\n            s += str(j) + ' '\n        print(s)\n    elif n % 2 != 0:\n        a = a + str(n - 1) + ' ' + str(n) + ' '\n        for j in range(1, n - 1):\n            a += str(j) + ' '\n        print(a)", "for i in range(int(input())):\n    n = int(input())\n    if n == 3 or n == 1:\n        print(-1)\n    else:\n        print(n, n - 1, *range(1, n - 1))", "for i in range(int(input())):\n    n = int(input())\n    if n == 3 or n == 1:\n        print(-1)\n    else:\n        print(n, n - 1, *range(1, n - 1))", "t = int(input())\nout = ''\nfor _ in range(t):\n    n = int(input())\n    if n == 3:\n        out += '-1\\n'\n        continue\n    ans = str(n) + ' ' + str(n - 1) + ' '\n    for x in range(1, n - 1):\n        ans += str(x) + ' '\n    out += ans + '\\n'\nprint(out)", "def fast_sum(a, b, s):\n    b -= (b - a) % s\n    return int((a + b) / 2 * ((b - a) / s + 1))\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        if n == 3:\n            print(-1)\n            continue\n        if n % 2 == 0:\n            print(*list(range(1, n + 1))[::-1])\n        else:\n            r = [n - 1, n] + list(range(1, n - 1))\n            print(*r)\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 2:\n        print('2 1')\n    elif n == 3:\n        print(-1)\n    else:\n        print(n, n - 1, end=' ')\n        print(*[i for i in range(1, n - 1)])", "(n, ans) = (int(input()), [])\nfor i in range(n):\n    s = int(input())\n    if s != 3 and s != 1:\n        ans.append([m for m in range(s // 2 + 1, s + 1)] + [l for l in range(1, s // 2 + 1)])\n    else:\n        ans.append([-1])\nfor n in ans:\n    print(*n)", "t = int(input())\nresult = []\nfor i in range(t):\n    n = int(input())\n    if n == 2:\n        result.append('2 1')\n    elif n == 3:\n        result.append('-1')\n    else:\n        ch = ''\n        if n % 2 == 1:\n            for j in range(n, 3, -2):\n                ch += str(j - 1) + ' ' + str(j) + ' '\n            ch += '1 2 3'\n        else:\n            for j in range(n, 2, -1):\n                ch += str(j) + ' '\n            ch += '1 2'\n        result.append(ch)\nfor i in result:\n    print(i)", "import string\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1 or n == 3:\n        print(-1)\n    elif n == 2:\n        print('2 1')\n    else:\n        a = ''\n        for i in range(3, n + 1):\n            a += str(i) + ' '\n            if i == n:\n                a += '2 1 '\n        print(a)", "def permute(N):\n    if N == 3 or N == 1:\n        return [-1]\n    if N == 5:\n        return [5, 4, 1, 2, 3]\n    if N % 2 == 0:\n        return list(range(1, N + 1))[::-1]\n    else:\n        lt = list(range(1, N + 1))[::-1]\n        temp = lt[N // 2]\n        lt[N // 2] = lt[N // 2 - 1]\n        lt[N // 2 - 1] = temp\n        return lt\nOUTPUT = []\nfor _ in range(int(input())):\n    N = int(input())\n    OUTPUT.append(permute(N))\nfor _ in OUTPUT:\n    print(*_)"]