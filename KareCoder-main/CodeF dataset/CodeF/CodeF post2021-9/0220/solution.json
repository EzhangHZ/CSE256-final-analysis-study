["from array import array\nfrom math import log\n\ndef solve() -> int:\n    n = int(input())\n    arr = array('Q', map(int, input().split()))\n    counter = 0\n    for i in range(n - 2, -1, -1):\n        if arr[i] >= arr[i + 1]:\n            if arr[i + 1] == 0:\n                return -1\n            d = int(1 + log(arr[i] / arr[i + 1], 2))\n            counter += d\n            arr[i] >>= d\n    return counter\nresults = []\nfor _ in range(int(input())):\n    results.append(solve())\nprint('\\n'.join((str(r) for r in results)))", "from math import log\n\ndef solve() -> int:\n    n = int(input())\n    array = list(map(int, input().split()))\n    counter = 0\n    for i in range(n - 2, -1, -1):\n        if array[i] >= array[i + 1]:\n            if array[i + 1] == 0:\n                return -1\n            d = int(1 + log(array[i] / array[i + 1], 2))\n            counter += d\n            array[i] >>= d\n    return counter\nfor _ in range(int(input())):\n    print(solve())", "from math import log\n\ndef solve() -> int:\n    n = int(input())\n    array = list(map(int, input().split()))\n    counter = 0\n    for i in range(n - 2, -1, -1):\n        if array[i] >= array[i + 1]:\n            if array[i + 1] == 0:\n                return -1\n            d = int(1 + log(array[i] / array[i + 1], 2))\n            counter += d\n            array[i] >>= d\n    return counter\nfor _ in range(int(input())):\n    print(solve())", "from math import log\n\ndef solve() -> int:\n    n = int(input())\n    array = list(map(int, input().split()))\n    counter = 0\n    for i in range(n - 2, -1, -1):\n        if array[i] >= array[i + 1]:\n            if array[i + 1] == 0:\n                return -1\n            d = int(1 + log(array[i] / array[i + 1], 2))\n            counter += d\n            array[i] >>= d\n    return counter\nfor _ in range(int(input())):\n    print(solve())", "from math import log\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 0\n    for i in range(n - 2, -1, -1):\n        if a[i] >= a[i + 1]:\n            if a[i + 1] == 0:\n                return -1\n            d = int(1 + log(a[i] / a[i + 1], 2))\n            cnt += d\n            a[i] >>= d\n    return cnt\nfor _ in range(int(input())):\n    print(solve())", "from array import array\nfrom math import log\n\ndef solve() -> int:\n    n = int(input())\n    arr = array('Q', map(int, input().split()))\n    counter = 0\n    for i in range(n - 2, -1, -1):\n        if arr[i] >= arr[i + 1]:\n            if arr[i + 1] == 0:\n                return -1\n            d = int(1 + log(arr[i] / arr[i + 1], 2))\n            counter += d\n            arr[i] >>= d\n    return counter\nfor _ in range(int(input())):\n    print(solve())", "import math\nfrom typing import List\n\ndef solve(a: List[int]) -> int:\n    res = 0\n    for i in range(len(a) - 2, -1, -1):\n        if a[i + 1] == 0:\n            return -1\n        s = math.ceil(math.log2(a[i] // a[i + 1] + 1))\n        res += s\n        a[i] >>= s\n    return res\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(a))", "xx = int(input())\n\ndef cal(n, arr):\n    if n == 1:\n        return 0\n    if arr[-1] < n - 1:\n        return -1\n    ans = 0\n    for i in range(n - 2, -1, -1):\n        if arr[i + 1] == 0:\n            return -1\n        if arr[i] >= arr[i + 1]:\n            t = len(bin(arr[i])) - len(bin(arr[i + 1]))\n            ans += t\n            arr[i] = arr[i] >> t\n            if arr[i] >= arr[i + 1]:\n                ans += 1\n                arr[i] = arr[i] >> 1\n    return ans\nfor jj in range(xx):\n    n = int(input())\n    arr = [int(i) for i in input().split(' ')]\n    print(cal(n, arr))", "from math import log2\nt = int(input())\n\ndef solve():\n    n = int(input())\n    lst = list(map(int, input().split()))\n    ans = 0\n    up_limit = lst[-1]\n    for i in range(n - 2, -1, -1):\n        if up_limit == 0:\n            print(-1)\n            return\n        if up_limit > lst[i]:\n            up_limit = lst[i]\n            continue\n        ans += int(log2(lst[i] / up_limit)) + 1\n        up_limit = lst[i] // pow(2, 1 + int(log2(lst[i] / up_limit)))\n    print(ans)\nwhile t:\n    solve()\n    t -= 1", "import math\n\ndef solve():\n    ops = 0\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    for idx in range(n - 2, -1, -1):\n        if arr[idx] >= arr[idx + 1]:\n            if arr[idx + 1] == 0:\n                return -1\n            two_pow = int(math.log2(arr[idx] / arr[idx + 1])) + 1\n            arr[idx] //= math.pow(2, two_pow)\n            ops += two_pow\n    return ops\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        print(solve())\nmain()", "from math import log2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    output = 0\n    for i in range(n - 1, 0, -1):\n        if nums[i] == 0:\n            output = -1\n            break\n        elif nums[i] <= nums[i - 1]:\n            temp = int(log2(nums[i - 1] / nums[i])) + 1\n            output += temp\n            nums[i - 1] = nums[i - 1] // 2 ** temp\n    print(output)", "import math\n\ndef chk(z):\n    for i in range(len(z) - 1):\n        if z[i] >= z[i + 1]:\n            return 0\n    return 1\n\ndef fun(ans):\n    ans = ans[::-1]\n    c = 0\n    for i in range(1, len(ans)):\n        if ans[i] >= ans[i - 1] and ans[i - 1]:\n            x = ans[i] // ans[i - 1]\n            x = int(math.log2(x)) + 1\n            ans[i] //= 2 ** x\n            c += x\n    if chk(ans[::-1]):\n        return [c]\n    return [-1]\nn = int(input())\nfor _ in range(n):\n    _ = input()\n    arr = input().split()\n    arr = list(map(int, arr))\n    x = fun(arr)\n    for i in x:\n        print(i, end=' ')\n    print()", "from math import log\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    cnt = 0\n    f = True\n    for i in range(n - 1, 0, -1):\n        if arr[i] == 0:\n            f = False\n            break\n        if arr[i - 1] >= arr[i]:\n            v = int(1 + log(arr[i - 1] // arr[i], 2))\n            arr[i - 1] >>= v\n            cnt += v\n    print(cnt if f else -1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    out = 0\n    c = 0\n    for i in range(n - 2, -1, -1):\n        if a[i] >= a[i + 1]:\n            if a[i + 1] < i + 1:\n                out = 1\n                print(-1)\n                break\n            d_shift = int(1 + math.log(a[i] / a[i + 1], 2))\n            a[i] = a[i] >> d_shift\n            c += d_shift\n    if not out:\n        print(c)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    out = 0\n    c = 0\n    for i in range(n - 2, -1, -1):\n        if a[i] >= a[i + 1]:\n            if a[i + 1] < i + 1:\n                out = 1\n                print(-1)\n                break\n            d_shift = int(1 + math.log(a[i] / a[i + 1], 2))\n            a[i] = a[i] >> d_shift\n            c += d_shift\n    if not out:\n        print(c)", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\n\ndef get_print_int_same(x):\n    sys.stdout.write(str(x) + ' ')\n\ndef get_print_same(x):\n    sys.stdout.write(x + ' ')\nfrom math import ceil, log2\n\ndef solve():\n    for _ in range(get_int()):\n        n = get_int()\n        arr = get_list()\n        i = n - 2\n        ans = 0\n        while i >= 0:\n            if arr[i] == arr[i + 1]:\n                if arr[i] == 0:\n                    ans = -1\n                    break\n                arr[i] //= 2\n                ans += 1\n            elif arr[i] > arr[i + 1]:\n                if arr[i + 1] == 0:\n                    ans = -1\n                    break\n                y = log2(arr[i] / arr[i + 1])\n                if y == ceil(y):\n                    y = ceil(y) + 1\n                else:\n                    y = ceil(y)\n                arr[i] = arr[i] // pow(2, y)\n                ans += y\n            i -= 1\n        get_print_int(ans)\nsolve()", "from math import log\nfor case in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[::-1]\n    res = 0\n    curr = arr[0]\n    try:\n        for i in range(1, n):\n            if arr[i] < curr:\n                curr = arr[i]\n                continue\n            p = int(1 + log(curr / arr[i], 0.5))\n            res += p\n            curr = int(arr[i] // 2 ** p)\n        print(res)\n    except:\n        print(-1)", "def solve():\n    flag = True\n    n = len(a)\n    k = 0\n    while flag:\n        flag = False\n        for i in range(n - 1, 0, -1):\n            if a[i] == 0:\n                return -1\n            if a[i] <= a[i - 1]:\n                cur = int(math.log2(a[i - 1] / a[i])) + 1\n                a[i - 1] //= 2 ** cur\n                k += cur\n                flag = True\n    return k\nimport math\nimport sys\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(solve())", "import math\n\ndef func():\n    n = int(input())\n    l = input().split(' ')\n    l = [int(i) for i in l]\n    if l[n - 1] < n - 1:\n        return -1\n    j = n - 1\n    c = 0\n    for i in range(n - 2, -1, -1):\n        no = l[i]\n        if no < 0:\n            return -1\n        if no == 0 and i != 0:\n            return -1\n        if no == 0 and i == 0:\n            break\n        if no >= l[i + 1]:\n            k = int(math.log(no / l[i + 1], 2)) + 1\n            c += k\n            no = int(no / pow(2, k))\n        l[i] = no\n        if no < 0:\n            return -1\n        if no == 0 and i != 0:\n            return -1\n        if no == 0 and i == 0:\n            break\n    return c\nt = int(input())\nfor i in range(t):\n    out = func()\n    print(out)", "from math import log\nfor case in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[::-1]\n    res = 0\n    curr = arr[0]\n    try:\n        for i in range(1, n):\n            if arr[i] < curr:\n                curr = arr[i]\n                continue\n            p = int(1 + log(curr / arr[i], 0.5))\n            res += p\n            curr = int(arr[i] // 2 ** p)\n        print(res)\n    except:\n        print(-1)", "from math import log2 as lo\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (p, c) = (1, 0)\n    for i in range(n - 2, -1, -1):\n        if l[i + 1] == 0:\n            p = 0\n            break\n        if l[i] >= l[i + 1]:\n            e = int(lo(l[i] // l[i + 1])) + 1\n            l[i] = l[i] // pow(2, e)\n            c += e\n    print(c) if p == 1 else print(-1)", "import math\nt = int(input())\nans = []\nfor c in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ops = 0\n    possible = True\n    for i in range(n - 2, -1, -1):\n        if a[i] >= a[i + 1]:\n            if a[i + 1] == 0:\n                possible = False\n            else:\n                div = a[i] / a[i + 1]\n                log = math.log(div, 2)\n                power = int(log) + 1\n                a[i] = a[i] // pow(2, power)\n                ops += power\n                if a[i] >= a[i + 1]:\n                    possible = False\n        if not possible:\n            break\n    if possible:\n        ans.append(ops)\n    else:\n        ans.append(-1)\nfor e in ans:\n    print(e)", "from math import log\nfor _ in range(int(input())):\n    num = int(input())\n    a = list(map(int, input().split(' ')))\n    count = 0\n    for i in range(1, num)[::-1]:\n        if a[i] == 0:\n            print(-1)\n            break\n        elif a[i - 1] >= a[i]:\n            k = int(log(a[i - 1] / a[i], 2)) + 1\n            count += k\n            a[i - 1] = a[i - 1] // 2 ** k\n    else:\n        print(count)", "from math import floor, log2\nnum_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()\nt = num_inp()\nfor _ in range(t):\n    n = num_inp()\n    l = arr_inp()\n    count = 0\n    for i in range(n - 2, -1, -1):\n        if l[i + 1] == 0:\n            print(-1)\n            break\n        if l[i + 1] <= l[i]:\n            val = floor(log2(l[i] / l[i + 1])) + 1\n            count += val\n            l[i] = floor(l[i] / 2 ** val)\n    else:\n        print(count)", "import math\nfor i in range(int(input())):\n    len = int(input())\n    arr = [int(i) for i in input().split()]\n    moves = 0\n    for i in range(len - 1, 0, -1):\n        if arr[i] == 1 and i > i or (arr[i] == 0 and i != 0):\n            moves = -1\n            break\n        elif arr[i - 1] >= arr[i]:\n            temp = int(math.log2(arr[i - 1] // arr[i])) + 1\n            moves += temp\n            arr[i - 1] = arr[i - 1] // 2 ** temp\n    print(int(moves))", "import math\nfor i in range(int(input())):\n    len = int(input())\n    arr = [int(i) for i in input().split()]\n    moves = 0\n    for i in range(len - 1, 0, -1):\n        if arr[i] == 1 and i > i or (arr[i] == 0 and i != 0):\n            moves = -1\n            break\n        elif arr[i - 1] >= arr[i]:\n            temp = int(math.log2(arr[i - 1] // arr[i])) + 1\n            moves += temp\n            arr[i - 1] = arr[i - 1] // 2 ** temp\n    print(int(moves))", "from math import floor, log\nfor _ in range(int(input())):\n    n = int(input())\n    sequence = list(map(int, input().split()))\n    ops = 0\n    impossible = False\n    for i in range(n - 2, -1, -1):\n        if sequence[i] >= sequence[i + 1]:\n            if sequence[i + 1] == 0:\n                impossible = True\n                break\n            divide_ops = floor(log(sequence[i] // sequence[i + 1], 2)) + 1\n            ops += divide_ops\n            sequence[i] = sequence[i] // 2 ** divide_ops\n        if impossible:\n            break\n    if impossible:\n        print(-1)\n    else:\n        print(ops)", "from math import floor, log\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    b = False\n    for k in range(len(a) - 2, -1, -1):\n        if a[k] >= a[k + 1]:\n            if a[k + 1] == 0:\n                b = True\n                break\n            d = floor(log(a[k] // a[k + 1], 2)) + 1\n            count += d\n            a[k] = a[k] // 2 ** d\n        if b:\n            break\n    if b:\n        print(-1)\n    else:\n        print(count)", "import math\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    elif a[-1] < n - 1:\n        print(-1)\n    else:\n        ans = 0\n        start = n - 1\n        while start > 0:\n            if a[start - 1] >= a[start]:\n                mark = int(math.log2(a[start - 1] // a[start])) + 1\n                ans += mark\n                a[start - 1] = a[start - 1] // 2 ** mark\n            if a[start - 1] == 0 and start > 1:\n                ans = -1\n                break\n            start -= 1\n        print(ans)", "from math import log2, ceil\nn = int(input())\nfor i in range(n):\n    cnt = 0\n    c = int(input())\n    a = list(map(int, input().split()))\n    for i in range(c - 1, 0, -1):\n        if a[i] == 0:\n            cnt = -1\n            break\n        if a[i] <= a[i - 1]:\n            t = ceil(log2(a[i - 1] / a[i]))\n            a[i - 1] = a[i - 1] >> t\n            cnt += t\n            if a[i] == a[i - 1]:\n                cnt += 1\n                a[i - 1] = a[i - 1] >> 1\n    print(cnt)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    x = 0\n    y = 0\n    for i in range(n - 1, 0, -1):\n        a = lst[i]\n        b = lst[i - 1]\n        if a == 0:\n            print(-1)\n            x = x + 1\n            break\n        if a > b:\n            continue\n        else:\n            a = math.log(b / a, 2)\n            a = a // 1\n            a = a + 1\n            y = y + a\n            lst[i - 1] = b // 2 ** a\n        if lst[i - 1] == 0 and i - 1 != 0:\n            x = x + 1\n            print(-1)\n            break\n        else:\n            continue\n    if x == 0:\n        print(int(y // 1))", "import math\nfor i in range(int(input())):\n    len = int(input())\n    arr = [int(i) for i in input().split()]\n    moves = 0\n    for i in range(len - 1, 0, -1):\n        if arr[i] == 1 and i > i or (arr[i] == 0 and i != 0):\n            moves = -1\n            break\n        elif arr[i - 1] >= arr[i]:\n            temp = int(math.log2(arr[i - 1] // arr[i])) + 1\n            moves += temp\n            arr[i - 1] = arr[i - 1] // 2 ** temp\n    print(int(moves))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    count = 0\n    for i in range(n - 1):\n        if a[-i - 1] == 0:\n            count = -1\n            break\n        elif a[-i - 2] >= a[-i - 1]:\n            d = int(math.log2(a[-i - 2] / a[-i - 1])) + 1\n            count += d\n            a[-i - 2] = int(a[-i - 2] / 2 ** d)\n    print(count)", "from math import log\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    maxel = a[-1]\n    res = 0\n    for i in range(len(a) - 2, -1, -1):\n        if maxel == 0:\n            res = -1\n            break\n        elif a[i] >= maxel:\n            res += 1 + int(log(a[i] // maxel, 2))\n            maxel = a[i] // 2 ** (int(log(a[i] // maxel, 2)) + 1)\n        else:\n            maxel = a[i]\n    print(res)", "import math\nx = int(input())\nfor i in range(x):\n    n = int(input())\n    s = input()\n    arr = [int(l) for l in s.split(' ')]\n    y = 0\n    z = 0\n    if n > 1:\n        for j in range(n - 1, 0, -1):\n            if arr[j] == 0:\n                z = -1\n                break\n            elif arr[j - 1] >= arr[j]:\n                y = int(math.log(arr[j - 1] / arr[j], 2)) + 1\n                arr[j - 1] = arr[j - 1] // 2 ** y\n                z += y\n                if arr[j - 1] == 0 and j != 1:\n                    z = -1\n                    break\n            else:\n                pass\n    else:\n        pass\n    print(z)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    flag = True\n    count = 0\n    for i in range(n - 2, -1, -1):\n        if a[i] > a[i + 1]:\n            if a[i + 1] == 0:\n                print(-1)\n                break\n            temp = math.ceil(math.log2(a[i] / a[i + 1]))\n            count += temp\n            a[i] = a[i] // 2 ** temp\n        if a[i] == a[i + 1]:\n            a[i] = a[i] // 2\n            count += 1\n        if a[i] < i:\n            print(-1)\n            break\n    else:\n        print(count)", "import sys\nsys.setrecursionlimit(2 * 10 ** 5)\ninput = sys.stdin.readline\nimport math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    f = 0\n    op = 0\n    arr.reverse()\n    for j in range(1, n):\n        if arr[j] >= arr[j - 1]:\n            if arr[j - 1] == 0:\n                f = 1\n                break\n            ex = arr[j] // arr[j - 1]\n            op += int(math.log(ex, 2)) + 1\n            arr[j] = arr[j] // 2 ** (int(math.log(ex, 2)) + 1)\n    if f == 1:\n        print(-1)\n    else:\n        print(int(op))", "import math\nn = int(input())\nwhile n != 0:\n    n -= 1\n    size = input()\n    arr = [int(item) for item in input().split()]\n    res = 0\n    for i in range(len(arr) - 2, -1, -1):\n        if arr[i] < arr[i + 1]:\n            continue\n        if arr[i + 1] == 0:\n            res = -1\n            break\n        t = math.log(arr[i + 1] / arr[i], 0.5)\n        t = int(t) + 1\n        res += t\n        arr[i] = int(arr[i] / 2 ** t)\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    ans = 0\n    for i in range(n - 2, -1, -1):\n        if a[i] >= a[i + 1]:\n            m = len(bin(a[i])) - len(bin(a[i + 1]))\n            a[i] //= 2 ** m\n            if a[i] >= a[i + 1]:\n                a[i] //= 2\n                ans += 1\n            ans += m\n    print(ans if a.count(0) <= 1 else -1)", "import math\n\ndef solve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        l = list(map(int, input().split()))\n        ans = 0\n        if l[-1] == 0 and len(l) > 1:\n            print(-1)\n            continue\n        for i in range(n - 2, -1, -1):\n            if l[i] == 0:\n                if i != 0:\n                    ans = -1\n                break\n            if l[i] < l[i + 1]:\n                continue\n            x = math.floor(math.log(l[i] / l[i + 1], 2)) + 1\n            l[i] = math.floor(l[i] / 2 ** x)\n            if l[i] < i:\n                ans = -1\n                break\n            ans += x\n        print(ans)\nsolve()", "import math\nt = int(input())\nfor vvod in range(t):\n    n = int(input())\n    v = list(map(int, input().split()))\n    ans = 0\n    pok = 0\n    if n == 1:\n        print(ans)\n        continue\n    v.reverse()\n    for i in range(n):\n        if i > 0:\n            if v[i - 1] == 0:\n                ans = -1\n                break\n            if v[i] > v[i - 1]:\n                koks = math.ceil(math.log2(v[i] / v[i - 1]))\n                ans += koks\n                v[i] //= 2 ** koks\n            if v[i] == v[i - 1]:\n                ans += 1\n                v[i] //= 2\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = 0\n    ans = True\n    for i in range(n - 2, -1, -1):\n        if a[i] < a[i + 1]:\n            continue\n        if a[i + 1] == 0:\n            ans = False\n            break\n        x = len(bin(a[i])) - len(bin(a[i + 1]))\n        a[i] = a[i] // 2 ** x\n        c += x\n        if a[i] >= a[i + 1]:\n            a[i] //= 2\n            c += 1\n    if ans:\n        print(c)\n    else:\n        print(-1)", "import math\nfor _ in range(int(input())):\n    length = int(input())\n    l = list(map(int, input().split()))\n    l.reverse()\n    compare = l[0]\n    count = 0\n    for i in range(1, length):\n        if compare == 0:\n            count = -1\n            break\n        temp = 0\n        if compare < l[i]:\n            temp = math.ceil(math.log2(l[i] / compare))\n        elif compare == l[i]:\n            temp = 1\n        if l[i] == 2 ** temp * compare:\n            temp += 1\n        l[i] = l[i] // 2 ** temp\n        count += temp\n        compare = l[i]\n    print(count)", "import math\n\ndef solution(ns):\n    prev = float('inf')\n    count = 0\n    for i in range(len(ns) - 1, -1, -1):\n        ops = 0\n        if ns[i] >= prev:\n            ops = math.ceil(math.log(ns[i], 2) - math.log(prev, 2))\n        if ns[i] // math.pow(2, ops) == prev:\n            ops += 1\n        prev = math.floor(ns[i] / math.pow(2, ops))\n        if prev == 0 and i != 0:\n            return -1\n        count += ops\n    return count\nT = int(input())\nresults = []\nfor n in range(T):\n    _ = int(input())\n    ns = list(map(int, input().split(' ')))\n    results.append(solution(ns))\nfor r in results:\n    print(r)", "import math\nfor _ in range(int(input())):\n    length = int(input())\n    l = list(map(int, input().split()))\n    l.reverse()\n    compare = l[0]\n    count = 0\n    for i in range(1, length):\n        if compare == 0:\n            count = -1\n            break\n        temp = 0\n        if compare < l[i]:\n            temp = math.ceil(math.log2(l[i] / compare))\n        elif compare == l[i]:\n            temp = 1\n        if l[i] == 2 ** temp * compare:\n            temp += 1\n        l[i] = l[i] // 2 ** temp\n        count += temp\n        compare = l[i]\n    print(count)", "import math\ncases = int(input())\nfor k in range(cases):\n    operat = 0\n    n = int(input())\n    seq = input().split(' ')\n    last = int(seq[n - 1])\n    for i in range(n - 2, -1, -1):\n        curr = int(seq[i])\n        next = int(seq[i + 1])\n        if next == 0:\n            operat = -1\n            break\n        if curr >= next:\n            inoperat = int(math.log(curr / next, 2) + 1)\n            if inoperat == 0:\n                inoperat = 1\n            operat += inoperat\n            seq[i] = curr // 2 ** inoperat\n    print(operat)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    res = True\n    ans = 0\n    for i in range(n - 2, -1, -1):\n        if a[i] >= a[i + 1]:\n            if a[i] == 0 or a[i + 1] == 0:\n                res = False\n                break\n            cnt = math.ceil(math.log(a[i] / a[i + 1], 2))\n            if cnt == 0:\n                cnt = 1\n            ans += cnt\n            a[i] //= 2 ** cnt\n            if a[i] == a[i + 1]:\n                ans += 1\n                a[i] //= 2\n    if res:\n        print(ans)\n    else:\n        print(-1)", "import math\n\ndef result(arr):\n    count = 0\n    for i in range(len(arr) - 1, -1, -1):\n        if i == 0:\n            break\n        elif arr[i - 1] >= arr[i]:\n            if arr[i] == 0 and i != 0:\n                return -1\n            elif arr[i - 1] >= arr[i]:\n                temp = math.ceil(math.log(arr[i - 1] / arr[i], 2))\n                arr[i - 1] = arr[i - 1] // math.pow(2, temp)\n                if arr[i - 1] >= arr[i]:\n                    arr[i - 1] //= 2\n                    temp += 1\n                count += temp\n        else:\n            continue\n    return count\nt = int(input())\nwhile t >= 1:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(result(arr))\n    t -= 1", "import math\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    operations = 0\n    try:\n        for j in range(n - 1, 0, -1):\n            if l[j] == 0:\n                break\n            if l[j - 1] == 0:\n                continue\n            log = math.log(l[j - 1] / l[j], 2) + 1\n            if log >= 1:\n                operations += int(log)\n                divison = 2 ** int(log)\n                l[j - 1] = l[j - 1] / divison\n                l[j - 1] = int(l[j - 1])\n    except Exception as e:\n        print(e)\n    if n != 1:\n        res = all((a < j for (a, j) in zip(l, l[1:])))\n    else:\n        res = True\n    if res:\n        print(operations)\n    else:\n        print(-1)", "import math\nt = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    count = 0\n    for i in range(len(arr) - 2, -1, -1):\n        if arr[i] >= arr[i + 1]:\n            if arr[i + 1] == 0:\n                count = -1\n                break\n            a = arr[i] // arr[i + 1]\n            div = math.log(a, 2) // math.log(2, 2) + 1\n            count += div\n            arr[i] = int(arr[i] // 2 ** div)\n    print(int(count))\n    t -= 1", "n = int(input())\nimport math\nfor i in range(0, n):\n    sum = 0\n    d = 0\n    v = int(input())\n    a = input().split()\n    for k in range(0, v):\n        a[k] = int(a[k])\n    for j in range(v - 2, -1, -1):\n        if a[j + 1] == 0:\n            d = 1\n            break\n        else:\n            if a[j] >= a[j + 1]:\n                c = math.log(a[j] / a[j + 1], 2) // 1 + 1\n                a[j] = a[j] // pow(2, c)\n            else:\n                c = 0\n            sum = sum + c\n    if d == 0:\n        print(int(sum))\n    else:\n        print(-1)", "import math\nimport copy\nfor tc in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a[n - 1] < n - 1:\n        print(-1)\n        continue\n    c = 0\n    x = n - 2\n    tracker = False\n    while x >= 0:\n        if a[x] < x:\n            print(-1)\n            tracker = True\n            break\n        if a[x + 1] <= a[x]:\n            y = a[x] // a[x + 1]\n            z = int(math.log2(y)) + 1\n            a[x] //= pow(2, z)\n            c += z\n        else:\n            x -= 1\n    if not tracker:\n        print(c)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l1 = [int(a) for a in input().split()]\n    f = 0\n    op = 0\n    for i in range(1, n):\n        if l1[-i] == 0:\n            f = 1\n            break\n        if l1[-1 - i] >= l1[-i]:\n            x1 = math.ceil(math.log2(l1[-i - 1] / l1[-i]))\n            op += x1\n            l1[-1 - i] //= 2 ** x1\n        if l1[-1 - i] == l1[-i]:\n            l1[-1 - i] //= 2\n            op += 1\n        if l1[-1 - i] == 0 and i != n - 1:\n            f = 1\n            break\n    if f:\n        print(-1)\n    else:\n        print(op)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    flag = True\n    for i in range(n - 2, -1, -1):\n        if a[i] > a[i + 1]:\n            if a[i + 1] == 0:\n                print(-1)\n                break\n            temp = math.ceil(math.log2(a[i] / a[i + 1]))\n            count += temp\n            a[i] = a[i] // 2 ** temp\n        if a[i] == a[i + 1]:\n            a[i] = a[i] // 2\n            count += 1\n        if a[i] < i:\n            print(-1)\n            break\n    else:\n        print(count)", "import math\ntest_cases = int(input())\nwhile test_cases:\n    curr_len = int(input())\n    num = list(map(int, input().split()))\n    count = 0\n    flag = False\n    if curr_len == 1 or curr_len == 0:\n        test_cases -= 1\n        print(0)\n        continue\n    for i in range(curr_len - 2, -1, -1):\n        if num[i + 1] == 0:\n            flag = True\n            print(-1)\n            break\n        if num[i] < num[i + 1]:\n            continue\n        curr_div = math.floor(math.log(int(num[i] // num[i + 1]), 2)) + 1\n        count += curr_div\n        num[i] = int(num[i] // pow(2, curr_div))\n    if not flag:\n        print(count)\n    test_cases -= 1", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if arr[n - 1] < n - 1:\n        print('-1')\n        continue\n    ptr = n - 2\n    count = 0\n    imp = False\n    while ptr >= 0:\n        if arr[ptr] < ptr:\n            print('-1')\n            imp = True\n            break\n        if arr[ptr] >= arr[ptr + 1]:\n            diff = arr[ptr] // arr[ptr + 1]\n            lg = int(math.log2(diff)) + 1\n            arr[ptr] //= pow(2, lg)\n            count += lg\n        else:\n            ptr -= 1\n    if not imp:\n        print(count)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    res = True\n    ans = 0\n    for i in range(n - 2, -1, -1):\n        if a[i] >= a[i + 1]:\n            if a[i] == 0 or a[i + 1] == 0:\n                res = False\n                break\n            cnt = math.ceil(math.log(a[i] / a[i + 1], 2))\n            if cnt == 0:\n                cnt = 1\n            ans += cnt\n            a[i] //= 2 ** cnt\n            if a[i] == a[i + 1]:\n                ans += 1\n                a[i] //= 2\n    if res:\n        print(ans)\n    else:\n        print(-1)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 0\n    prev = l[-1] + 1\n    br = False\n    for i in range(n - 1, -1, -1):\n        if l[i] >= prev:\n            if prev == 0:\n                br = True\n                break\n            l1 = int(math.log2(l[i]))\n            l2 = int(math.log2(prev))\n            tmp = l1 - l2\n            if l[i] // 2 ** tmp >= prev:\n                l[i] //= 2\n                c += tmp + 1\n            else:\n                c += tmp\n            l[i] //= 2 ** tmp\n        prev = l[i]\n    if br:\n        print(-1)\n    else:\n        print(c)", "import math\nt = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    i = n - 2\n    ans = 0\n    while i >= 0:\n        if a[i] == a[i + 1]:\n            if a[i] == 0:\n                ans = -1\n                break\n            a[i] //= 2\n            ans += 1\n        elif a[i] > a[i + 1]:\n            if a[i + 1] == 0:\n                ans = -1\n                break\n            y = math.log(a[i] / a[i + 1], 2)\n            if y == math.ceil(y):\n                y = math.ceil(y) + 1\n            else:\n                y = math.ceil(y)\n            a[i] = a[i] // 2 ** y\n            ans += y\n        i -= 1\n    print(ans)", "import math\nfor j in range(0, int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 0\n    if n == 1:\n        print(0)\n    else:\n        for i in range(n - 1, 0, -1):\n            if l[i] == 0:\n                c = -1\n                break\n            d = l[i - 1] // l[i]\n            if d != 0 and d != 1:\n                p = math.ceil(math.log(d, 2))\n                l[i - 1] = l[i - 1] // 2 ** p\n                c = c + p\n                if l[i - 1] >= l[i]:\n                    c += 1\n                    l[i - 1] = l[i - 1] // 2\n                if l[i - 1] == 0 and i - 1 != 0:\n                    c = -1\n                    break\n            if d == 1:\n                l[i - 1] = l[i - 1] // 2\n                c += 1\n                if l[i - 1] == 0 and i - 1 != 0:\n                    c = -1\n                    break\n        print(c)", "import math\nfor j in range(0, int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 0\n    if n == 1:\n        print(0)\n    else:\n        for i in range(n - 1, 0, -1):\n            if l[i] == 0:\n                c = -1\n                break\n            d = l[i - 1] // l[i]\n            if d != 0 and d != 1:\n                p = math.ceil(math.log(d, 2))\n                l[i - 1] = l[i - 1] // 2 ** p\n                c = c + p\n                if l[i - 1] >= l[i]:\n                    c += 1\n                    l[i - 1] = l[i - 1] // 2\n                if l[i - 1] == 0 and i - 1 != 0:\n                    c = -1\n                    break\n            if d == 1:\n                l[i - 1] = l[i - 1] // 2\n                c += 1\n                if l[i - 1] == 0 and i - 1 != 0:\n                    c = -1\n                    break\n        print(c)", "t = int(input())\nimport math\nfor i in range(0, t):\n    n = int(input())\n    string = input().split()\n    lst = []\n    ans = 0\n    for j in string:\n        lst.append(int(j))\n    bl = True\n    for k in range(n - 2, -1, -1):\n        if lst[k + 1] == 0:\n            print(-1)\n            bl = False\n            break\n        elif lst[k] >= lst[k + 1]:\n            c = math.log(lst[k] / lst[k + 1], 2) // 1 + 1\n            lst[k] = lst[k] // pow(2, math.log(lst[k] / lst[k + 1], 2) // 1 + 1)\n            ans = ans + c\n    if bl:\n        print(int(ans))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    count = 0\n    for i in range(n - 2, -1, -1):\n        if lst[i] >= lst[i + 1]:\n            if lst[i + 1] == 0:\n                count = -1\n                break\n            d = math.ceil(lst[i] / lst[i + 1])\n            if d <= 1:\n                count += 1\n                lst[i] //= 2\n            else:\n                k = math.ceil(math.log2(d))\n                if lst[i] // 2 ** k == lst[i + 1]:\n                    k += 1\n                count += k\n                lst[i] //= 2 ** k\n            if lst[i] == 1 and lst[i + 1] == 1 and (i == 0):\n                count += 1\n    print(count)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    o = j = 0\n    i = n - 1\n    while i > 0:\n        if A[i] == 0:\n            print('-1')\n            break\n        k = 0\n        if A[i] == A[i - 1]:\n            k = 1\n        elif A[i] < A[i - 1]:\n            k = math.ceil(math.log2(A[i - 1]) - math.log2(A[i]))\n            if int(int(A[i - 1] / 2 ** k) == A[i]):\n                k += 1\n        A[i - 1] = int(A[i - 1] / 2 ** k)\n        o += k\n        i -= 1\n    else:\n        print(o)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    tmp = 0\n    for i in reversed(range(n)):\n        if i <= n - 2 and a[i] >= a[i + 1]:\n            tmp += int(math.log(a[i], 2) - math.log(a[i + 1], 2) + 1)\n            a[i] = a[i] // 2 ** int(math.log(a[i], 2) - math.log(a[i + 1], 2) + 1)\n            if a[i] >= a[i + 1]:\n                tmp += 1\n                a[i] = a[i] // 2\n        if a[i] < i:\n            tmp = -1\n            break\n    print(tmp)", "def solve():\n    N = int(input())\n    A = list(map(int, input().split()))\n    before = 10 ** 18\n    cnt = 0\n    for a in A[::-1]:\n        if before == 0:\n            return -1\n        while a >= before:\n            a //= 2\n            cnt += 1\n        before = a\n    return cnt\nt = int(input())\nfor _ in range(t):\n    print(solve())", "import math\nt = int(input().strip())\nfor _ in range(t):\n    length = int(input())\n    data = list(map(int, input().split()))\n    ans = 0\n    poss = True\n    for i in range(len(data) - 2, -1, -1):\n        if data[i + 1] == 0:\n            poss = False\n            break\n        elif data[i + 1] == data[i]:\n            ans += 1\n            data[i] = data[i] // 2\n        elif data[i + 1] <= data[i]:\n            ans = ans + int(math.log(float(data[i]) / float(data[i + 1])) / math.log(2)) + 1\n            data[i] = data[i] // 2 ** (int(math.log(float(data[i]) / float(data[i + 1])) / math.log(2)) + 1)\n    if poss:\n        print(ans)\n    else:\n        print(-1)", "import math\nfrom typing import Callable, List\n\ndef solve(a: List[int]):\n    operations = 0\n    previous = a[-1]\n    for current in a[-2::-1]:\n        if not current < previous:\n            if previous == 0:\n                return -1\n            k = 0\n            while not current < previous:\n                current //= 2\n                k += 1\n            operations += k\n        previous = current\n    return operations\n\ndef solution(input_method: Callable):\n    t = int(input_method())\n    for _ in range(t):\n        n = input_method()\n        a = list(map(int, input_method().split()))\n        print(solve(a))\n\ndef main(test: bool=False) -> None:\n    if test:\n        with open('b.txt', 'r') as f:\n            solution(f.readline)\n            return\n    solution(input)\nmain()", "def solve(arr, n):\n    ans = 0\n    curr = arr.pop()\n    while arr:\n        if curr == 0:\n            return -1\n        a = arr.pop()\n        while a >= curr:\n            a //= 2\n            ans += 1\n        curr = a\n    return ans\n    for i in range(n - 2, -1, -1):\n        if arr[i + 1] == 0:\n            return -1\n        while arr[i] and arr[i] >= arr[i + 1]:\n            arr[i] //= 2\n            ans += 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(solve(arr, n))", "from collections import Counter, deque\nimport math\nfrom random import randint\nfrom bisect import bisect\nimport sys\nimport re\nMOD = 10 ** 9 + 7\nMAX = sys.maxsize\nMIN = -sys.maxsize\n\nclass get:\n\n    def int():\n        return list(map(int, input().split()))\n\n    def str():\n        return input().split()\n\n    def float():\n        return list(map(float, input().split()))\n\n    def map():\n        return map(int, input().split())\n\ndef sqrt(x):\n    return int(math.sqrt(x)) + 1\n\ndef gcd(*args):\n    result = args[0]\n    for item in args:\n        result = math.gcd(result, item)\n    return result\n\ndef LCM(a, b):\n    return a * b // math.gcd(a, b)\n\ndef isPrime(n):\n    if n == 1:\n        return False\n    for i in range(2, sqrt(n)):\n        if n % i == 0:\n            return False\n    return True\n\ndef find(n, target):\n    if target == 0:\n        return (0, 0)\n    c = 0\n    while n >= target:\n        c += 1\n        n = n // 2\n    return (c, n)\n\ndef solve():\n    n = int(input())\n    arr = get.int()\n    res = 0\n    for i in range(n - 1, 0, -1):\n        if arr[i - 1] >= arr[i]:\n            (c, val) = find(arr[i - 1], arr[i])\n            if val == arr[i]:\n                print(-1)\n                return\n            res += c\n            arr[i - 1] = val\n    print(res)\nfor _ in range(int(input())):\n    solve()", "from typing import List\n\nclass Solution:\n\n    def makeItIncreasing(self, nums: List) -> int:\n        ans = 0\n        for i in range(len(nums) - 2, -1, -1):\n            num1 = nums[i + 1]\n            if nums[i + 1] == 0:\n                return -1\n            num = nums[i]\n            if num >= num1:\n                while num >= num1:\n                    num = num // 2\n                    ans += 1\n                nums[i] = num\n        return ans\n\n    def init(self):\n        testCases: int = int(input())\n        for testCase in range(testCases):\n            num = int(input())\n            nums = [int(x) for x in input().split(' ')]\n            if num == 1:\n                print(0)\n                continue\n            ans = self.makeItIncreasing(nums)\n            print(ans)\nobj = Solution()\nobj.init()", "from locale import currency\n\ndef solve(A):\n    last = A[-1]\n    count = 0\n    for i in range(len(A) - 2, -1, -1):\n        if last == 0:\n            return -1\n        current = A[i]\n        while current >= last:\n            current //= 2\n            count += 1\n        last = current\n    return count\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    print(solve(A))", "def value(array):\n    count = 0\n    i = len(array) - 1\n    min_a = array[-1]\n    while i > 0:\n        if min_a == 0:\n            return -1\n        elif array[i - 1] >= min_a:\n            temp = array[i - 1] // 2\n            count += 1\n            while temp >= min_a and temp > 0:\n                temp = temp // 2\n                count += 1\n            min_a = temp\n        elif array[i - 1] < min_a:\n            min_a = array[i - 1]\n        i -= 1\n    return count\n\ndef main():\n    n = int(input())\n    data = []\n    for i in range(n):\n        k = input()\n        temp = list(map(int, input().split()))\n        data.append(temp)\n    for temp in data:\n        print(value(temp))\nmain()", "import math\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    a = input().split()\n    j = n - 1\n    count = 0\n    for i in range(0, n):\n        a[i] = int(a[i])\n    while j >= 1:\n        if a[j] == 0:\n            count = -1\n            break\n        if a[j] > a[j - 1]:\n            j -= 1\n        else:\n            temp = math.ceil(math.log(int(a[j - 1]) / int(a[j]), 2))\n            if math.floor(a[j - 1] / pow(2, temp)) == a[j]:\n                count += temp + 1\n                a[j - 1] = math.floor(a[j - 1] / pow(2, temp + 1))\n            else:\n                count += temp\n                a[j - 1] = math.floor(a[j - 1] / pow(2, temp))\n            if j != 1 and a[j - 1] == 0:\n                count = -1\n                break\n    print(count)", "for s in [*open(0)][2::2]:\n    (*a,) = map(int, s.split())\n    r = 1\n    p = 3000000000.0\n    while a and p:\n        q = a.pop()\n        while q >= p:\n            r += 1\n            q >>= 1\n        p = q\n    print(r * (a == []) - 1)", "for s in [*open(0)][2::2]:\n    (*a,) = map(int, s.split())\n    r = 1\n    p = 3000000000.0\n    while a and p:\n        q = a.pop()\n        while q >= p:\n            r += 1\n            q >>= 1\n        p = q\n    print(r * (a == []) - 1)", "for s in [*open(0)][2::2]:\n    (*a,) = map(int, s.split())\n    r = 1\n    p = 3000000000.0\n    while a and p:\n        q = a.pop()\n        while q >= p:\n            r += 1\n            q >>= 1\n        p = q\n    print(r * (a == []) - 1)", "for n in [*open(0)][2::2]:\n    (*a,) = map(int, n.split())\n    r = 1\n    p = 3000000000.0\n    while a and p:\n        q = a.pop()\n        while q >= p:\n            r += 1\n            q >>= 1\n        p = q\n    print(r * (a == []) - 1)", "for n in [*open(0)][2::2]:\n    (*a,) = map(int, n.split())\n    r = 1\n    p = 3000000000.0\n    while a and p:\n        q = a.pop()\n        while q >= p:\n            r += 1\n            q >>= 1\n        p = q\n    print(r * (a == []) - 1)", "from math import log2\nfor t in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    cnt = 0\n    p = a[-1]\n    for i in range(n - 2, -1, -1):\n        q = a[i]\n        if p == 0:\n            cnt = -1\n            break\n        while q >= p:\n            cnt += 1\n            q >>= 1\n        p = q\n    print(cnt)", "def solution():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    max_element = a[n - 1]\n    ans = 0\n    for i in range(n - 2, -1, -1):\n        if max_element == 0:\n            return -1\n        while a[i] >= max_element:\n            a[i] //= 2\n            ans += 1\n        max_element = a[i]\n    return ans\nt = int(input())\nfor _ in range(t):\n    print(solution())", "def solve():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    max_element = a[n - 1]\n    ans = 0\n    for i in range(n - 2, -1, -1):\n        if max_element == 0:\n            return -1\n        while a[i] >= max_element:\n            a[i] //= 2\n            ans += 1\n        max_element = a[i]\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "import math\n\ndef checkPreviousNumber(testcase, length):\n    max_elem = testcase[length - 1]\n    operation = 0\n    for i in range(length - 2, -1, -1):\n        if max_elem == 0:\n            return -1\n        while testcase[i] >= max_elem:\n            testcase[i] //= 2\n            operation += 1\n        max_elem = testcase[i]\n    return operation\nfor _ in range(int(input())):\n    length = int(input())\n    testcase = list(map(int, input().split()))\n    print(checkPreviousNumber(testcase, length))", "def solve():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    max_element = a[n - 1]\n    ans = 0\n    for i in range(n - 2, -1, -1):\n        if max_element == 0:\n            return -1\n        while a[i] >= max_element:\n            a[i] //= 2\n            ans += 1\n        max_element = a[i]\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "def u():\n    n = int(input())\n    a = list(map(int, input().split()))\n    un = 0\n    last = a[-1]\n    for j in range(n - 2, -1, -1):\n        if last == 0:\n            return -1\n        while a[j] >= last:\n            a[j] //= 2\n            un += 1\n        last = a[j]\n    return un\nfor i in range(int(input())):\n    print(u())", "def d():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    last = arr[-1]\n    step = 0\n    for i in range(n - 2, -1, -1):\n        if last == 0:\n            return -1\n        while arr[i] >= last:\n            arr[i] //= 2\n            step += 1\n        last = arr[i]\n    return step\nt = int(input())\nfor _ in range(t):\n    print(d())", "def solve():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    max_element = a[n - 1]\n    ans = 0\n    for i in range(n - 2, -1, -1):\n        if max_element == 0:\n            return -1\n        while a[i] >= max_element:\n            a[i] //= 2\n            ans += 1\n        max_element = a[i]\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = 0\n    b = a[-1]\n    for i in range(n - 2, -1, -1):\n        if b == 0:\n            return -1\n        while a[i] >= b:\n            a[i] //= 2\n            c += 1\n        b = a[i]\n    return c\nfor pratyush in range(int(input())):\n    print(solve())", "def solution():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    max_element = a[n - 1]\n    ans = 0\n    for i in range(n - 2, -1, -1):\n        if max_element == 0:\n            return -1\n        while a[i] >= max_element:\n            a[i] //= 2\n            ans += 1\n        max_element = a[i]\n    return ans\nt = int(input())\nfor _ in range(t):\n    print(solution())", "for s in [*open(0)][2::2]:\n    (*a,) = map(int, s.split())\n    r = 1\n    p = 3000000000.0\n    while a and p:\n        q = a.pop()\n        while q >= p:\n            r += 1\n            q >>= 1\n        p = q\n    print(r * (a == []) - 1)", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 0\n    last = a[-1]\n    for i in range(n - 2, -1, -1):\n        if last == 0:\n            return -1\n        while a[i] >= last:\n            a[i] //= 2\n            cnt += 1\n        last = a[i]\n    return cnt\nfor _ in range(int(input())):\n    print(solve())", "for s in [*open(0)][2::2]:\n    (*a,) = map(int, s.split())\n    r = 1\n    p = 3000000000.0\n    while a and p:\n        q = a.pop()\n        while q >= p:\n            r += 1\n            q >>= 1\n        p = q\n    print(r * (a == []) - 1)", "def makeItDecreasing(arr, n):\n    max_element = arr[n - 1]\n    ans = 0\n    for i in range(n - 2, -1, -1):\n        if max_element == 0:\n            return -1\n        while arr[i] >= max_element:\n            arr[i] //= 2\n            ans += 1\n        max_element = arr[i]\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    ans = makeItDecreasing(arr, n)\n    print(ans)", "def solve(a, n):\n    b = a[-1]\n    c = 0\n    if n == 1:\n        return 0\n    if b < n - 1:\n        return -1\n    for x in range(n - 2, -1, -1):\n        if b == 0:\n            return -1\n        while a[x] >= b:\n            a[x] //= 2\n            c += 1\n        b = a[x]\n    return c\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = solve(a, n)\n    print(d)", "def solution():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    max_element = a[n - 1]\n    ans = 0\n    for i in range(n - 2, -1, -1):\n        if max_element == 0:\n            return -1\n        while a[i] >= max_element:\n            a[i] //= 2\n            ans += 1\n        max_element = a[i]\n    return ans\nt = int(input())\nfor _ in range(t):\n    print(solution())", "for s in [*open(0)][2::2]:\n    (*a,) = map(int, s.split())\n    r = 1\n    p = 3000000000.0\n    while a and p:\n        q = a.pop()\n        while q >= p:\n            r += 1\n            q >>= 1\n        p = q\n    print(r * (a == []) - 1)", "for t in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())][::-1]\n    cnt = 0\n    p = a[0]\n    for i in a[1:]:\n        if p == 0:\n            cnt = -1\n            break\n        while i >= p:\n            cnt += 1\n            i >>= 1\n        p = i\n    print(cnt)", "t = int(input())\nn = []\nk = []\nfor i in range(t):\n    n.append(int(input()))\n    k.append([])\n    k[i] = input().split()\nfor j in range(t):\n    sum = 0\n    possible = True\n    for u in range(n[j] - 1):\n        i = n[j] - 1 - u\n        p = int(k[j][i])\n        q = int(k[j][i - 1])\n        if p < i:\n            possible = False\n            break\n        while p <= q:\n            q = q // 2\n            sum += 1\n        k[j][i - 1] = q\n    if possible:\n        print(sum)\n    else:\n        print(-1)", "for s in [*open(0)][2::2]:\n    (*a,) = map(int, s.split())\n    r = 1\n    p = 3000000000.0\n    while a and p:\n        q = a.pop()\n        while q >= p:\n            r += 1\n            q >>= 1\n        p = q\n    print(r * (a == []) - 1)"]