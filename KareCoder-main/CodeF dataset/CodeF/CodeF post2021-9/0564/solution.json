["(n, k) = map(int, input().split())\ncards = [tuple(map(int, input().split())) for _ in range(n)]\n(cards_lookup, counter) = ({card: i for (i, card) in enumerate(cards)}, [0] * (n + 1))\nfor i in range(len(cards) - 1):\n    for j in range(i + 1, len(cards)):\n        counter[cards_lookup.get(tuple((x if x == y else (x + 1 ^ y + 1) - 1 for (x, y) in zip(cards[i], cards[j]))), -1)] += 1\nprint(sum((x * (x - 1) // 2 for x in counter[:-1])))", "(o, kk) = map(int, input().split())\ncards = [tuple(map(int, input().split())) for _ in range(o)]\n(cards_lookup, counter) = ({card: i for (i, card) in enumerate(cards)}, [0] * (o + 1))\nfor i in range(len(cards) - 1):\n    for j in range(i + 1, len(cards)):\n        counter[cards_lookup.get(tuple((x if x == y else (x + 1 ^ y + 1) - 1 for (x, y) in zip(cards[i], cards[j]))), -1)] += 1\nprint(sum((x * (x - 1) // 2 for x in counter[:-1])))", "(n, k) = map(int, input().split())\ncards = [tuple(map(int, input().split())) for _ in range(n)]\n(cards_lookup, counter) = ({card: i for (i, card) in enumerate(cards)}, [0] * (n + 1))\nfor i in range(len(cards) - 1):\n    for j in range(i + 1, len(cards)):\n        counter[cards_lookup.get(tuple((x if x == y else (x + 1 ^ y + 1) - 1 for (x, y) in zip(cards[i], cards[j]))), -1)] += 1\nprint(sum((x * (x - 1) // 2 for x in counter[:-1])))", "(n, k) = map(int, input().split())\ncards = [tuple(map(int, input().split())) for _ in range(n)]\n(cards_lookup, counter) = ({card: i for (i, card) in enumerate(cards)}, [0] * (n + 1))\nfor i in range(len(cards) - 1):\n    for j in range(i + 1, len(cards)):\n        counter[cards_lookup.get(tuple((x if x == y else (x + 1 ^ y + 1) - 1 for (x, y) in zip(cards[i], cards[j]))), -1)] += 1\nprint(sum((x * (x - 1) // 2 for x in counter[:-1])))", "(n, k) = map(int, input().split())\ncards = [tuple(map(int, input().split())) for _ in range(n)]\n(cards_lookup, counter) = ({card: i for (i, card) in enumerate(cards)}, [0] * (n + 1))\nfor i in range(len(cards) - 1):\n    for j in range(i + 1, len(cards)):\n        counter[cards_lookup.get(tuple((x if x == y else (x + 1 ^ y + 1) - 1 for (x, y) in zip(cards[i], cards[j]))), -1)] += 1\nprint(sum((x * (x - 1) // 2 for x in counter[:-1])))", "(n, k) = map(int, input().split())\ncards = [tuple(map(int, input().split())) for _ in range(n)]\n(cards_lookup, counter) = ({card: i for (i, card) in enumerate(cards)}, [0] * (n + 1))\nfor i in range(len(cards) - 1):\n    for j in range(i + 1, len(cards)):\n        counter[cards_lookup.get(tuple((x if x == y else (x + 1 ^ y + 1) - 1 for (x, y) in zip(cards[i], cards[j]))), -1)] += 1\nprint(sum((x * (x - 1) // 2 for x in counter[:-1])))", "(n, k) = map(int, input().split())\ncards = [tuple(map(int, input().split())) for _ in range(n)]\n(cards_lookup, counter) = ({card: i for (i, card) in enumerate(cards)}, [0] * (n + 1))\nfor i in range(len(cards) - 1):\n    for j in range(i + 1, len(cards)):\n        counter[cards_lookup.get(tuple((x if x == y else (x + 1 ^ y + 1) - 1 for (x, y) in zip(cards[i], cards[j]))), -1)] += 1\nprint(sum((x * (x - 1) // 2 for x in counter[:-1])))", "(ndfeagbb, dfeagbbk) = map(int, input().split())\ncards = [tuple(map(int, input().split())) for _ in range(ndfeagbb)]\n(cards_lookup, counter) = ({card: i for (i, card) in enumerate(cards)}, [0] * (ndfeagbb + 1))\nfor i in range(len(cards) - 1):\n    for j in range(i + 1, len(cards)):\n        counter[cards_lookup.get(tuple((x if x == y else (x + 1 ^ y + 1) - 1 for (x, y) in zip(cards[i], cards[j]))), -1)] += 1\nprint(sum((x * (x - 1) // 2 for x in counter[:-1])))", "(n, k) = map(int, input().split())\ncards = [tuple(map(int, input().split())) for _ in range(n)]\n(cards_lookup, counter) = ({card: i for (i, card) in enumerate(cards)}, [0] * (n + 1))\nfor i in range(len(cards) - 1):\n    for j in range(i + 1, len(cards)):\n        counter[cards_lookup.get(tuple((x if x == y else (x + 1 ^ y + 1) - 1 for (x, y) in zip(cards[i], cards[j]))), -1)] += 1\nprint(sum((x * (x - 1) // 2 for x in counter[:-1])))", "(n, k) = map(int, input().split())\ncards = [tuple(map(int, input().split())) for _ in range(n)]\n(cards_lookup, counter) = ({card: i for (i, card) in enumerate(cards)}, [0] * (n + 1))\nfor i in range(len(cards) - 1):\n    for j in range(i + 1, len(cards)):\n        counter[cards_lookup.get(tuple((x if x == y else (x + 1 ^ y + 1) - 1 for (x, y) in zip(cards[i], cards[j]))), -1)] += 1\nprint(sum((x * (x - 1) // 2 for x in counter[:-1])))", "from collections import defaultdict\nimport sys\ninput = lambda : sys.stdin.readline().rstrip()\nin_il = lambda : list(map(int, input().split()))\nin_sl = lambda : input().split()\nin_i = lambda : int(input())\nMAX_INT = float('inf')\n\ndef solve():\n    (n, k) = in_il()\n    cards = []\n    cards_set = set()\n    card_part_of_sets = defaultdict(set)\n    for _ in range(n):\n        card = in_il()\n        cards.append(card)\n        cards_set.add(tuple(card))\n\n    def get_third(a, b):\n        third = [None] * k\n        for i in range(k):\n            if a[i] == b[i]:\n                third[i] = a[i]\n            else:\n                third[i] = 3 - a[i] - b[i]\n        third = tuple(third)\n        return third if third in cards_set else None\n    for i in range(n):\n        for j in range(i + 1, n):\n            third = get_third(cards[i], cards[j])\n            if third != None:\n                cardset = [tuple(cards[i]), tuple(cards[j]), third]\n                cardset.sort()\n                cardset = tuple(cardset)\n                card_part_of_sets[tuple(cards[i])].add(cardset)\n                card_part_of_sets[tuple(cards[j])].add(cardset)\n                card_part_of_sets[third].add(cardset)\n    meta = 0\n    for v in card_part_of_sets.values():\n        count = len(v)\n        meta += count * (count - 1) // 2\n    print(meta)\nsolve()"]