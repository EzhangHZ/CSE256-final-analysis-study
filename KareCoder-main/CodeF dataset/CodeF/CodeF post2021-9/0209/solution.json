["(n, m) = map(int, input().split())\nif m == 1:\n    print(n - 1)\nelse:\n    print((m - 1) * n)", "(n, m) = map(int, input().split())\nif m - 1 == 0:\n    print(n - 1)\nelse:\n    print(n * (m - 1))", "value = input()\nnums = value.split(' ')\nN = int(nums[0])\nM = int(nums[1])\nres = 0\nif M >= 2:\n    res += (M - 1) * N\nelif M == 1 and N > 1:\n    res = N - 1\nelse:\n    res = 0\nprint(res)", "(r, c) = map(int, input().split())\nif c == 1:\n    print(r - 1)\nelse:\n    print((c - 1) * r)", "(n, m) = input().split(' ')\nn = int(n)\nm = int(m)\nc = (m - 1) * n\nif m == 1:\n    c += (n - 1) * m\nif m <= 0 or n <= 0:\n    c = 0\nprint(c)", "temp = input()\ntemp1 = temp.split()\na = int(temp1[0])\nb = int(temp1[1])\nif b == 1:\n    print((a - 1) * b)\nelse:\n    print((b - 1) * a)", "(N, M) = map(int, input().split())\nif M > 1:\n    print(N * (M // 2 + (M - 1) // 2))\nelse:\n    print(N // 2 + (N - 1) // 2)", "(a, b) = [int(i) for i in input().split()]\nif b == 1:\n    print(a - 1)\nelse:\n    print(a * (b - 1))", "(row, column) = input().split()\nrow = int(row)\ncolumn = int(column)\nif column == 1:\n    print(row - 1)\nelse:\n    print((column - 1) * row)", "def solve():\n    (n, m) = map(int, input().split())\n    print(n * (m - 1)) if n != 1 and m != 1 else print(m * n - 1)\nsolve()", "(a, b) = map(int, input().split())\nif b == 1:\n    print(a - 1)\nelse:\n    print(a * (b - 1))", "(n, m) = map(int, input().split())\nprint(n * (m - 1) + (n - 1) * (m == 1))", "(a, b) = map(int, input().split())\nif b == 1:\n    print(a - 1)\nelse:\n    print(a * (b - 1))", "(a, b) = map(int, input().split())\nif b == 1:\n    print(a - 1)\nelse:\n    print(a * (b - 1))", "(N, M) = input().split()\nN = int(N)\nM = int(M)\nx = ''\nif M > 1:\n    x = N * (M - 1)\nelif M == 1:\n    x = N - 1\nelse:\n    pass\nprint(x)", "(n, m) = map(int, input().split())\nif m > 1:\n    print(n * (m - 1))\nelse:\n    print(n - 1)", "(n, m) = map(int, input().split())\nif m != 1:\n    print(n * (m - 1))\nelse:\n    print(n - 1)", "(n, m) = map(int, input().split())\nif n == m == 1:\n    print(0)\nelif m == 1:\n    print(n - 1)\nelif n == 1:\n    print(m - 1)\nelse:\n    print((m - 1) * n)", "(y, x) = map(int, input().split())\nprint(y - 1 if x == 1 else y * (x - 1))", "(n, m) = map(int, input().split())\nif m == 1:\n    print((n - 1) * m)\nelse:\n    print(n * (m - 1))", "(x, y) = list(map(int, input().split()))\nif x >= y:\n    if x % 2 == 0 and y % 2 == 0 or (x % 2 == 1 and y % 2 == 0):\n        print(x * (y - 1))\n    else:\n        print((x - 1) * y)\nelif x < y:\n    print(x * (y - 1))\nelse:\n    print(x * (x - 1))", "(n, m) = map(int, input().split())\nprint(n - 1) if m == 1 else print((m - 1) * n)", "(n, m) = map(int, input().split())\nif m == 1:\n    print(n - 1)\nelse:\n    print((m - 1) * n)", "(n, k) = map(int, input().split())\na = 0\nif n > k and k == 1:\n    a = (n - 1) * 1\nelif n > k and k != 1:\n    a = (k - 1) * n\nelif k > n:\n    a = (k - 1) * n\nif n == k:\n    a = (k - 1) * n\nprint(a)", "(n, m) = (int(i) for i in input().split())\nif m > 1:\n    print(n * (m - 1))\nelse:\n    print(n - 1)", "(n, m) = map(int, input().split())\nif n == 1:\n    print(m - 1)\nelif m == 1:\n    print(n - 1)\nelse:\n    print(n * (m - 1))", "(n, m) = [int(x) for x in input().split()]\nif m == 1:\n    print(n - 1)\nelse:\n    print(n * (m - 1))", "(n, m) = input().split()\n(n, m) = (int(n), int(m))\nif m == 1:\n    print(n - 1)\nelse:\n    print(n * (m - 1))", "(n, m) = map(int, input().split())\nif m == 1:\n    print(n - 1)\nelif m == 2:\n    print(n)\nelse:\n    print((m - 1) * n)", "(n, m) = map(int, input().split())\nans = 0\nif m == 1:\n    ans = (n - 1) * m\nelse:\n    ans = (m - 1) * n\nprint(ans)", "(n, m) = map(int, input().split())\nif m == 1:\n    print(n - 1)\nelif n == 1:\n    print(m - 1)\nelse:\n    print(n * (m - 1))", "NM = input()\nN = int(NM.split(' ')[0])\nM = int(NM.split(' ')[1])\nif M == 1:\n    print(N - 1)\nelse:\n    print(N * (M - 1))", "a = input('')\nb = a.split()\nc = map(int, b)\nn = int(b[0])\nm = int(b[1])\nif m == 1:\n    print(n - 1)\nelse:\n    print(n * (m - 1))", "(N, M) = map(int, input().split())\nif M != 1:\n    count = (M - 1) * N\nelse:\n    count = N - 1\nprint(count)", "(n, m) = map(int, input().split())\nprint(max(n - 1, n * (m - 1)))", "(n, m) = map(int, input().split())\nrowdom = m - 1\ncolumndom = 0\nif m == 1:\n    columndom = n - 1\nres = rowdom * n + m * columndom\nprint(res)", "(row, col) = map(int, input().split())\nif col > 1:\n    print(row * (col - 1))\nelse:\n    print(row - 1)", "(n, m) = map(int, input().split(' '))\nif m == 1:\n    print(n - 1)\nelse:\n    print((m - 1) * n)", "(n, m) = map(int, input().split())\nprint(n * (m - 1) if m > 1 else (n - 1) * m)", "(n, m) = input().split()\nn = int(n)\nm = int(m)\nif n == 1 and m == 1:\n    print(n - 1)\nelif n == 1:\n    print(m - 1)\nelif m == 1:\n    print(n - 1)\nelse:\n    print((m - 1) * n)", "(n, m) = map(int, input().split())\nprint(max(n - 1, n * (m - 1)))", "def tight_dominos(m, n):\n    if m == 1 and n == 1:\n        return 0\n    elif m == 1:\n        return n - 1\n    elif n == 1:\n        return m - 1\n    else:\n        return (n - 1) * m\n(x, y) = input('').split()\na = int(x)\nb = int(y)\nprint(tight_dominos(a, b))", "(n, m) = map(int, input().split())\nif m == 1:\n    print(n - 1)\nelse:\n    print(n * (m - 1))", "(n, m) = map(int, input().split())\nif m == 1:\n    result = n - 1\nelse:\n    result = (m - 1) * n\nprint(result)", "(n, m) = map(int, input().split())\nprint(max(n - 1, n * (m - 1)))", "(x, y) = map(int, input().split())\nif y == 1:\n    print(x - 1)\nelse:\n    print(x * (y - 1))", "(n, m) = map(int, input().split())\nprint(max(n - 1, n * (m - 1)))", "(n, m) = list(map(int, input().split()))\nif m == 1:\n    print(n - 1)\nelse:\n    print(n * (m - 1))", "(n, m) = map(int, input().split())\nprint(max(n - 1, n * (m - 1)))", "(n, m) = map(int, input().split())\nprint(max(n - 1, n * (m - 1)))", "(n, m) = map(int, input().split())\nif m >= 2:\n    print(n * (m - 1))\nelse:\n    print(n - 1)", "(n, m) = map(int, input().split())\nif m != 1:\n    print((m - 1) * n)\nelse:\n    print(n - 1)", "(n, m) = [int(i) for i in input().split()]\nif m >= 2:\n    print(n * (m - 1))\nelse:\n    print(n - 1)", "(n, m) = [int(i) for i in input().split()]\nif m == 1:\n    print(n - 1)\nelse:\n    print(n * (m - 1))", "(n, m) = [int(x) for x in input().split()]\nif m == 1:\n    print(n - 1)\nelse:\n    print((m - 1) * n)", "(n, m) = map(int, input().split())\nif m == 1:\n    print(n - 1)\nelse:\n    print(n * (m - 1))", "import sys\n(n, m) = map(int, sys.stdin.readline().split())\nif n == 1:\n    print(m - 1)\nelif m == 1:\n    print(n - 1)\nelse:\n    print((m - 1) * n)", "(a, b) = map(int, input().split())\nif b > 1:\n    print((b - 1) * a)\nelse:\n    print(a - 1)", "(n, m) = map(int, input().split())\nif m == 1:\n    print(n - 1)\nelse:\n    print((m - 1) * n)", "a = list(map(int, input().split()))\nif a[1] == 1:\n    print(a[0] - 1)\nelse:\n    print(a[0] * (a[1] - 1))", "(n, m) = list(map(int, input().split()))\nif m == 1:\n    print(n - 1)\nelse:\n    print(n * (m - 1))", "l = list(map(int, input().split()))\nif l[1] > 1:\n    print((l[1] - 1) * l[0])\nelse:\n    print(l[0] - 1)", "data = input()\n(row, col) = data.split(' ')\nrow = int(row)\ncol = int(col)\nif col == 1:\n    print(row - 1)\nelse:\n    print((col - 1) * row)", "from functools import lru_cache\n(n, m) = [int(i) for i in input().split()]\nprint((m - 1) * n if m != 1 else n - 1)", "(a, b) = map(int, input().split())\nif b == 1:\n    print(a - 1)\nelse:\n    print(a * (b - 1))", "(n, m) = map(int, input().split())\nif m == 1:\n    print(n - 1)\nelse:\n    print((m - 1) * n)", "(n, m) = list(map(int, input().split()))\nif m == 1:\n    print(n - 1)\nelse:\n    print(n * (m - 1))", "(n, m) = map(int, input().split())\nif n == m == 1:\n    print(0)\nelif m == 1:\n    print(n - 1)\nelse:\n    print(n * (m - 1))", "(a, b) = map(int, input().split())\nprint(max((b == 1) * (a - 1), (b - 1) * a))", "infor = input().split()\nrows = int(infor[0])\ncolumns = int(infor[1])\nif columns > 2:\n    nums = columns - 1\n    final = nums * rows\n    print(final)\nelif columns == 2:\n    final = rows\n    print(final)\nelse:\n    final = rows - 1\n    print(final)", "(n, m) = map(int, input().split())\nif m != 1:\n    print((m - 1) * n)\nelse:\n    print(n - 1)", "import sys\nimport heapq\nfrom collections import defaultdict\nfrom functools import lru_cache\nimport threading\n\ndef Iinput():\n    return int(input())\n\ndef Lsinput():\n    return list(input().split())\n\ndef Linput():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef two():\n    return map(int, input().split())\n(m, n) = two()\nif m == 1 or n == 1:\n    print(max(m, n) - 1)\nelse:\n    print((n - 1) * m)", "import sys\n\ndef input(type=str):\n    return type(sys.stdin.readline().strip())\n\ndef input_n(type=str):\n    return list(map(type, input().split()))\n(N, M) = input_n(int)\nif M > 1:\n    print((M - 1) * N)\nelse:\n    print(N - 1)", "(n, m) = input().split(' ')\nn = int(n)\nm = int(m)\nlines = []\nc = (m - 1) * n\nif m == 1:\n    c += (n - 1) * m\nif m <= 0 or n <= 0:\n    c = 0\nprint(c)", "(r, c) = map(int, input().split())\nans = 0\nans += r * (c - 1)\nif c == 1:\n    ans += r - 1\nprint(ans)", "(n, m) = input().split(' ')\nn = int(n)\nm = int(m)\nc = (m - 1) * n\nif m <= 0 or n <= 0:\n    c = 0\nif m == 1:\n    c += (n - 1) * m\nprint(c)", "(n, m) = map(int, input().split())\nif n == 1 and m == 1:\n    print('0')\nelif m == 1 and n > m:\n    print(n - 1)\nelse:\n    print((m - 1) * n)", "(m, n) = map(int, input().split())\nif n == 1:\n    print(m - 1)\nelif m == 1:\n    print(n - 1)\nelse:\n    print((n - 1) * m)", "(N, M) = input().split()\nif int(M) != 1:\n    print((int(M) - 1) * int(N))\nelse:\n    print(int(N) - 1)", "(n, m) = map(int, input().split())\nif m == 1:\n    print(n - 1)\nelse:\n    row = m - 1\n    rows = n * row\n    print(rows)", "s = input()\ns_lst = s.split()\ny = 0\nn = int(s_lst[0])\nm = int(s_lst[-1])\nif n == 1 and m == 2 or (n == 2 and m == 1):\n    y = 1\nelif m == 1 and n != 2 or (n == 1 and m != 2):\n    y = max([n, m]) - 1\nelse:\n    y = n * (m - 1)\nprint(y)", "x = input().split(' ')\n(n, m) = (int(x[0]), int(x[1]))\nif m > 1:\n    print((m - 1) * n)\nelse:\n    print(n - 1)", "(n, m) = map(int, input().split())\nif m == 1:\n    print(n - 1)\nelse:\n    print(n * (m - 1))", "(N, M) = map(int, input().split(' '))\nif M > 1:\n    print((M - 1) * N)\nelif M == 1:\n    print(N - 1)", "x = list(map(int, input().split()))\nif x[1] == 1:\n    print(x[0] - 1)\nelse:\n    print((x[1] - 1) * x[0])", "(n, m) = [int(x) for x in input().split()]\nif not m == 1:\n    print(n * (m - 1))\nelse:\n    print(n - 1)", "(n, m) = map(int, input().split())\nif m == 1:\n    print(n - 1)\nelse:\n    print(n * (m - 1))", "(n, m) = map(int, input().split())\nif m == 1:\n    print(n - 1)\nelse:\n    print(n * (m - 1))", "(a, q) = map(int, input().split())\nif q == 1:\n    print(a - 1)\nelse:\n    print((q - 1) * a)", "import math\n(n, m) = map(int, input().split())\nif m > 1:\n    print((m - 1) * n)\nelse:\n    print(n - 1)", "(n, m) = map(int, input().split())\nif m > 1:\n    print((m - 1) * n)\nelse:\n    print(n - 1)", "grid = input().split()\nif int(grid[1]) == 1:\n    print(int(grid[0]) - 1)\nelif int(grid[1]) < 1:\n    print(0)\nelse:\n    print((int(grid[1]) - 1) * int(grid[0]))", "(n, m) = map(int, input().split())\nans = n - 1 if m == 1 else n * (m - 1)\nprint(ans)", "a = list(map(int, input().split()))\n(b, c) = (a[0], a[1])\nif c == 1:\n    print(b - 1)\nelse:\n    print(b * (c - 1))", "(n, m) = [int(x) for x in input().split()]\nif m == 1 and n == 1:\n    res = 0\nelif m > 1:\n    res = (m - 1) * n\nelse:\n    res = (n - 1) * m\nprint(res)", "(n, m) = map(int, input().split())\nif m == 1:\n    print((n - 1) * m)\nelse:\n    print((m - 1) * n)", "(n, m) = map(int, input().split())\nif n == 1 or m == 1:\n    print(n * m - 1)\nelse:\n    print((m - 1) * n)", "(n, m) = map(int, input().split())\nif m == 1:\n    print(n - 1)\nelse:\n    print(n * (m - 1))", "(n, m) = map(int, input().split())\nif not n and (not m):\n    print(0)\nelif m == 1:\n    print(n - 1)\nelse:\n    print(n * (m - 1))", "(N, M) = map(int, input().split())\nif M > 1:\n    print((M - 1) * N)\nelse:\n    print(N - 1)"]