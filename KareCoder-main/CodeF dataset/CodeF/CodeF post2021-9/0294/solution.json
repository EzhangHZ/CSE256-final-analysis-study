["from sys import stdin\n\ndef solve():\n    for _ in range(int(stdin.readline().strip())):\n        n = int(stdin.readline().rstrip())\n        A = list(map(int, stdin.readline().rstrip().split()))\n        B = [0] * (n + 1)\n        C = []\n        ans = 'YES'\n        for x in A:\n            if x <= n:\n                if B[x] == 0:\n                    B[x] = 1\n                else:\n                    while B[x] == 1 and x > 0:\n                        x //= 2\n                    if x == 0 or B[x] == 1:\n                        ans = 'NO'\n                        break\n                    B[x] = 1\n            else:\n                C.append(x)\n        if ans == 'YES':\n            for x in C:\n                while x > n:\n                    x = x // 2\n                if B[x] == 0:\n                    B[x] = 1\n                else:\n                    while B[x] == 1 and x > 0:\n                        x = x // 2\n                    if x == 0 or B[x] == 1:\n                        ans = 'NO'\n                        break\n                    B[x] = 1\n        if ans == 'YES':\n            for i in range(1, n + 1):\n                if B[i] != 1:\n                    ans = 'NO'\n                    break\n        print(ans)\nsolve()", "import math, os, io, heapq\nfrom functools import reduce\nfrom sys import stdin, stdout\nfrom collections import Counter, deque, defaultdict\nfrom itertools import product\nimport bisect\n\ndef getList(method=int):\n    return list(map(method, input().split()))\n\ndef getInt():\n    return int(input())\n\ndef checkMod(a, b):\n    return a > 0 and a % b == 0\n\ndef solve():\n    (n, a) = (getInt(), getList())\n    a.sort(reverse=True)\n    added = [False for _ in range(n + 1)]\n    for v in a:\n        while v > n or added[v]:\n            v //= 2\n        if v == 0:\n            return 'NO'\n        added[v] = True\n    return 'YES'\nfor _ in range(getInt()):\n    print(solve())", "import os\nimport math\nimport statistics\ntrue = True\nfalse = False\nfrom functools import reduce\nis_dev = 'vscode' in os.environ\nif is_dev:\n    inF = open('in.txt', 'r')\n    outF = open('out.txt', 'w')\n\ndef ins():\n    return list(map(int, input_().split(' ')))\n\ndef inss():\n    return list(input_().split(' '))\n\ndef input_():\n    if is_dev:\n        return inF.readline()[:-1]\n    else:\n        return input()\n\ndef ranin():\n    return range(int(input_()))\n\ndef print_(data):\n    if is_dev:\n        outF.write(str(data) + '\\n')\n    else:\n        print(data)\nepsilon = 1e-07\nfor _ in ranin():\n    lx = int(input_())\n    x = ins()\n    counters = [0] * (lx + 1)\n    impossible = False\n    for i in range(lx):\n        while x[i] > 1048576:\n            x[i] >>= 10\n        while x[i] > 4096:\n            x[i] >>= 6\n        while x[i] > lx:\n            x[i] >>= 1\n        counters[x[i]] += 1\n    for i in range(lx, 0, -1):\n        if counters[i] == 0:\n            impossible = True\n            break\n        if counters[i] > 1:\n            counters[i // 2] += counters[i] - 1\n            counters[i] = 1\n    if impossible:\n        print_('NO')\n    else:\n        print_('YES')\nif is_dev:\n    outF.close()\n\n    def compare_file():\n        print(open('out.txt', 'r').read() == open('outactual.txt', 'r').read())\n    compare_file()", "def solve(n, l):\n    numbs = [False] * (n + 1)\n    for i in l:\n        while i > n:\n            i //= 2\n        while numbs[i]:\n            i //= 2\n        numbs[i] = 1\n        if numbs[0]:\n            return 'NO'\n    return 'YES'\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(solve(n, l))", "def solve():\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        ok = False\n        per = [False] * (n + 1)\n        for ele in a:\n            while ele > n or per[ele]:\n                ele = ele // 2\n            if ele == 0:\n                ok = True\n            else:\n                per[ele] = True\n        if ok:\n            print('NO')\n        else:\n            print('YES')\nsolve()", "func = lambda x: bin(int(x))\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(func, input().split()))\n    x = []\n    ll = len(bin(n))\n    for i in a:\n        p = min(ll, len(i))\n        if int(i[:p], 2) > n:\n            p = p - 1\n        while p > 2 and i[:p] in x:\n            p = p - 1\n        if p == 2:\n            break\n        else:\n            x.append(i[:p])\n    print('YNEOS'[int(len(x) != n)::2])", "def func():\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {i: 0 for i in range(0, n + 1)}\n    new_l = []\n    for i in l:\n        if i > n:\n            while i > n:\n                i = i // 2\n            new_l.append(i)\n            d[i] += 1\n        else:\n            new_l.append(i)\n            d[i] += 1\n    for i in range(n, 0, -1):\n        if d[i] == 0:\n            return 'NO'\n        else:\n            d[i // 2] += d[i] - 1\n    return 'YES'\nt = int(input())\nfor i in range(t):\n    print(func())", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    array = list(map(int, input().split()))\n    gotten = set()\n    maxNeeded = n\n    found = [False] * n\n    for i in range(n):\n        num = array[i]\n        if num > 63:\n            num = int(str(bin(num))[2:8], base=2)\n        while (num > maxNeeded or num in gotten) and num > 0:\n            num = num // 2\n        if num == maxNeeded:\n            gotten.add(num)\n            found[-num] = True\n            if False in found:\n                maxNeeded = n - found.index(False)\n        elif num > 0:\n            gotten.add(num)\n            found[-num] = True\n        else:\n            break\n    if False in found:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\n\ndef calc():\n    n = int(input())\n    l = list(map(int, input().split()))\n    for j in range(n):\n        val = l[j]\n        while val > n:\n            val = val // 2\n        l[j] = val\n    arr = [0 for k in range(n)]\n    for j in range(n):\n        while l[j] > 0:\n            if arr[l[j] - 1] == 0:\n                arr[l[j] - 1] = 1\n                break\n            else:\n                l[j] = l[j] // 2\n        if l[j] == 0:\n            return 'NO'\n    return 'YES'\nfor i in range(t):\n    print(calc())", "import math\nfor _ in range(int(input())):\n    num = int(input())\n    all = list(map(int, input().split()))\n    dic = {}\n    for i in range(num):\n        dic[i + 1] = 0\n    rest = []\n    for i in all:\n        if i > num:\n            rest.append(i)\n        elif dic[i] == 0:\n            dic[i] = 1\n        else:\n            rest.append(i)\n    long = len(rest)\n    if long == 0:\n        print('YES')\n    else:\n        flag = 0\n        for j in range(long):\n            re = rest[j]\n            if rest[j] > num:\n                temp = math.ceil(rest[j] / num)\n                ci = math.floor(math.log(temp, 2))\n                t = rest[j] // 2 ** ci\n            else:\n                t = rest[j]\n            if t > num:\n                t = t // 2\n            while dic[t] != 0:\n                t = t // 2\n                if t == 0:\n                    flag = 1\n                    break\n            if t != 0:\n                if dic[t] == 0:\n                    dic[t] = 1\n            if flag == 1:\n                break\n        if flag == 0:\n            print('YES')\n        else:\n            print('NO')", "import heapq\n\ndef solve(n, a):\n    b = []\n    for x in a:\n        while x > n:\n            x >>= 1\n        b.append(-x)\n    heapq.heapify(b)\n    for i in range(-n, 0):\n        x = heapq.heappop(b)\n        while x < i:\n            y = -(-x >> 1)\n            x = heapq.heappushpop(b, y)\n        if x > i:\n            return 'NO'\n    return 'YES'\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    result = solve(n, a)\n    print(result)", "import sys\ninput = sys.stdin.readline\n\ndef print(*args, end='\\n', sep=' ') -> None:\n    sys.stdout.write(sep.join(map(str, args)) + end)\n\ndef func(x):\n    global n, cl\n    x = int(x)\n    while x > n:\n        x //= 2\n    while x in cl:\n        x //= 2\n        if x == 1 and 1 in cl:\n            return False\n    else:\n        cl.append(x)\n    return x\n\ndef Solve():\n    global n, cl\n    for t in range(int(input())):\n        e = True\n        cl = []\n        n = int(input())\n        l = input().split()\n        for i in l:\n            if func(i) == False:\n                e = False\n                break\n        if e:\n            print('YES')\n        else:\n            print('NO')\nSolve()", "def solve():\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    found = [False] * (n + 1)\n    for x in A:\n        while x > n or found[x]:\n            x //= 2\n            if x == 0:\n                return 'NO'\n        found[x] = True\n    return 'YES'\nt = int(input())\nfor _ in range(t):\n    print(solve())", "def check_perm(n, arr):\n    arr.sort(reverse=True)\n    arr_set = set()\n    ans = 'YES'\n    for num in arr:\n        x = num\n        while x > n or x in arr_set:\n            x = x // 2\n        if x > 0:\n            arr_set.add(x)\n        else:\n            ans = 'NO'\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(check_perm(n, arr))", "def func(x):\n    global n, cl\n    x = int(x)\n    while x > n:\n        x //= 2\n    while x in cl:\n        x //= 2\n        if x == 1 and 1 in cl:\n            return False\n    else:\n        cl.append(x)\n    return x\n\ndef Solve():\n    global n, cl\n    for t in range(int(input())):\n        e = True\n        cl = []\n        n = int(input())\n        l = input().split()\n        for i in l:\n            if func(i) == False:\n                e = False\n                break\n        if e:\n            print('YES')\n        else:\n            print('NO')\nSolve()", "from collections import Counter, deque\nfrom collections import OrderedDict\nimport math\nfrom random import randint\nfrom bisect import bisect, bisect_left\nimport sys\nimport re\nMOD = 10 ** 9 + 7\nMAX = -sys.maxsize\nMIN = sys.maxsize\n\nclass get:\n\n    def int():\n        return list(map(int, input().split()))\n\n    def str():\n        return input().split()\n\n    def float():\n        return list(map(float, input().split()))\n\n    def map():\n        return map(int, input().split())\n\ndef sqrt(x):\n    return int(math.sqrt(x)) + 1\n\ndef gcd(*args):\n    result = args[0]\n    for item in args:\n        result = math.gcd(result, item)\n    return result\n\ndef LCM(a, b):\n    return a * b // math.gcd(a, b)\n\ndef isPrime(n):\n    if n == 1:\n        return False\n    for i in range(2, sqrt(n)):\n        if n % i == 0:\n            return False\n    return True\n\ndef solve():\n    n = int(input())\n    a = get.int()\n    a.sort(reverse=True)\n    s = set([i for i in range(1, n + 1)])\n    for item in a:\n        if item in s:\n            s.remove(item)\n            continue\n        while item > 0:\n            item = item // 2\n            if item in s:\n                s.remove(item)\n                break\n        if item == 0:\n            print('NO')\n            return\n    print('YES')\nt = int(input())\nfor tt in range(t):\n    solve()", "def solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    seen = [False] * (n + 1)\n    flag = True\n    for i in l:\n        x = i\n        while x > n or seen[x] == True:\n            x //= 2\n        if x > 0:\n            seen[x] = True\n        else:\n            flag = False\n    if flag:\n        return 'YES'\n    else:\n        return 'NO'\nT = int(input())\nfor _ in range(T):\n    print(solve())", "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    visited = [False for i in range(n + 1)]\n    for i in range(n):\n        x = arr[i]\n        if x <= n and visited[x] == False:\n            visited[x] = True\n            arr[i] = -1\n    for i in range(n):\n        if arr[i] != -1:\n            x = arr[i]\n            flag = 0\n            while x > 0:\n                if x <= n and visited[x] == False:\n                    visited[x] = True\n                    flag = 1\n                    break\n                x = x // 2\n            if flag == 0:\n                return 'NO'\n    for i in range(1, n + 1):\n        if visited[i] == False:\n            return 'NO'\n    return 'YES'\nt = int(input())\nfor i in range(t):\n    print(solve())", "t = int(input())\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    arr = list(range(n + 1))\n    for i in range(n + 1):\n        arr[i] = 0\n    for i in a:\n        while i > n:\n            i = i // 2\n        while arr[i] == 1 and i != 0:\n            i = i // 2\n        arr[i] = 1\n    answer = True\n    for i in range(n + 1):\n        if arr[i] == 0 and i != 0:\n            answer = False\n    if answer:\n        print('YES')\n    else:\n        print('NO')\nfor i in range(t):\n    solve()", "def divBy2AndPermutaton(n, a):\n    b = [False for _ in range(n + 1)]\n    b[0] = True\n    for x in a:\n        while x > n or (x > 0 and b[x] == True):\n            x //= 2\n        b[x] = True\n    if False in b:\n        return 'NO'\n    return 'YES'\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().rstrip().split()))\n    print(divBy2AndPermutaton(n, a))", "def f(a, n):\n    while a > n:\n        a = a // 2\n    return a\nT = int(input())\nfor tc in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        t = a[i]\n        a[i] = f(t, n)\n    d = {i: False for i in range(1, n + 1)}\n    a.sort()\n    i = n - 1\n    while i >= 0 and a[i] != 0:\n        if d[a[i]] == False:\n            d[a[i]] = True\n            i = i - 1\n        else:\n            a[i] = a[i] // 2\n    if a[i] == 0:\n        print('NO')\n    if i == -1:\n        print('YES')", "import sys\ninput = sys.stdin.readline\n\ndef print(*args, end='\\n', sep=' ') -> None:\n    sys.stdout.write(sep.join(map(str, args)) + end)\n\ndef func(x):\n    global n, cl\n    k = len(x)\n    if k > 6:\n        x = int(x) // 2 ** (k // 3)\n    x = int(x)\n    while x > n:\n        x //= 2\n    while x in cl:\n        x //= 2\n        if x == 1 and 1 in cl:\n            return False\n    else:\n        cl.append(x)\n    return x\n\ndef Solve():\n    global n, cl\n    for t in range(int(input())):\n        e = True\n        cl = []\n        n = int(input())\n        l = input().split()\n        for i in l:\n            if func(i) == False:\n                e = False\n                break\n        if e:\n            print('YES')\n        else:\n            print('NO')\nSolve()", "def func(x):\n    global n, cl\n    if len(x) > 6:\n        x = int(x) // 2 ** (len(x) // 2)\n    x = int(x)\n    while x > n:\n        x //= 2\n    while x in cl:\n        x //= 2\n        if x == 1 and 1 in cl:\n            return False\n    else:\n        cl.append(x)\n    return x\n\ndef Solve():\n    global n, cl\n    for t in range(int(input())):\n        e = True\n        cl = []\n        n = int(input())\n        l = input().split()\n        for i in l:\n            if func(i) == False:\n                e = False\n                break\n        if e:\n            print('YES')\n        else:\n            print('NO')\nSolve()", "def calc(arr, n):\n    perm = [0 for i in range(n)]\n    for a in arr:\n        placed = False\n        while a > 0 and (not placed):\n            if a > n or perm[a - 1] == 1:\n                a = a // 2\n            elif perm[a - 1] == 0:\n                placed = True\n                perm[a - 1] = 1\n        if a == 0:\n            print('NO')\n            return\n    print('YES')\n    return\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [int(a) for a in input().split()]\n    calc(arr, n)", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    n = int(inp())\n    q = list(map(int, inp().split()))\n    while q:\n        w = []\n        ok = False\n        for x in q:\n            while x > n:\n                x //= 2\n            if x == n:\n                ok = True\n                n -= 1\n            else:\n                w.append(x)\n        if not ok:\n            break\n        q = w\n    print(['NO', 'YES'][len(q) == 0])\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "def reduceby2(val, n):\n    if val <= n:\n        return val\n    while val > n:\n        val = val // 2\n    return val\nt = int(input())\nfor _ in range(t):\n    result = 'YES'\n    n = int(input())\n    b = []\n    a = list(map(int, input().split()))\n    for i in range(len(a)):\n        val = reduceby2(a[i], n)\n        while val > 0:\n            if not val in b:\n                b.append(val)\n                break\n            val = val // 2\n        if val == 0:\n            result = 'NO'\n            break\n    print(result)", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        (*arr,) = map(int, input().split())\n        while arr:\n            tmp = []\n            ok = False\n            for x in arr:\n                while x > n:\n                    x //= 2\n                if x == n:\n                    ok = True\n                    n -= 1\n                else:\n                    tmp.append(x)\n            if not ok:\n                break\n            arr = tmp\n        print('YES' if n == 0 else 'NO')\nmain()", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_ls():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        st = set()\n        ls = get_ls()\n        for x in ls:\n            while (x > n or x in st) and x > 1:\n                x >>= 1\n            st.add(x)\n        print('YES' if len(st) == n else 'NO')\nmain()", "def solve():\n    n = int(input())\n    li = list(map(int, input().split()))\n    visited = [0] * (n + 1)\n    k = []\n    for i in li:\n        if i <= n and visited[i] == 0:\n            visited[i] = 1\n        else:\n            k.append(i)\n    for i in k:\n        while i > 0:\n            if i <= n and visited[i] == 0:\n                visited[i] = 1\n                break\n            i = i // 2\n    visited[0] = 0\n    return 'YES' if sum(visited) == n else 'NO'\nt = int(input())\nwhile t > 0:\n    print(solve())\n    t -= 1", "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if max(arr) < n:\n        print('NO')\n        return\n    l = []\n    for i in arr:\n        while i > 0:\n            if i <= n and i not in l:\n                l.append(i)\n                break\n            i = i // 2\n    if len(l) == n:\n        print('YES')\n    else:\n        print('NO')\nfor x in range(int(input())):\n    solve()", "def main():\n    t = int(input())\n    while t:\n        t -= 1\n        n = int(input())\n        a = sorted([int(x) for x in input().split()], reverse=True)\n        s = set()\n        for i in a:\n            while (i > n or i in s) and i > 1:\n                i >>= 1\n            s.add(i)\n        print(['NO', 'YES'][len(s) == n])\nmain()", "def canI(arr, n):\n    perm = []\n    for i in arr:\n        while i > 0:\n            if i <= n:\n                if i not in perm:\n                    perm.append(i)\n                    break\n            i = i // 2\n    if len(perm) == n:\n        print('YES')\n    else:\n        print('NO')\nfor t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    canI(arr, n)", "def ans(a, n):\n    used = set()\n    for i in a:\n        while (i > n or i in used) and i > 1:\n            i = i // 2\n        used.add(i)\n    if len(used) == n:\n        print('YES')\n    else:\n        print('NO')\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans(a, n)", "def ans(a, n):\n    used = set()\n    for i in a:\n        while (i > n or i in used) and i > 1:\n            i = i // 2\n        used.add(i)\n    if len(used) == n:\n        print('YES')\n    else:\n        print('NO')\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans(a, n)", "def fun(i, n):\n    while i > n:\n        i = i // 2\n    return i\n\ndef Fun(i, c):\n    j = len(c) - 1\n    while c[j] > i:\n        x = c.pop(j)\n        x = fun(x, i)\n        c.append(x)\n        j -= 1\n    c.sort()\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] != i + 1:\n            break\n        i += 1\n    b = a[:i]\n    a = a[i:]\n    c = []\n    X = []\n    for i in a:\n        c.append(fun(i, n))\n    c.sort()\n    for i in range(n, len(b), -1):\n        Fun(i, c)\n        if i != c[-1]:\n            print('NO')\n            break\n        c.pop()\n    else:\n        print('YES')", "def soluciona():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if max(arr) < n:\n        print('NO')\n        return\n    permutacao = []\n    for i in arr:\n        while i > 0:\n            if i <= n and i not in permutacao:\n                permutacao.append(i)\n                break\n            i = i // 2\n    print('YES') if len(permutacao) == n else print('NO')\nfor _ in range(int(input())):\n    soluciona()", "def ispossible(arr, n):\n    lis = []\n    lis = set(lis)\n    arr.sort()\n    for i in arr:\n        while (i > n or i in lis) and i > 1:\n            i //= 2\n        lis.add(i)\n    if len(lis) == n:\n        print('YES')\n    else:\n        print('NO')\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ispossible(arr, n)", "def C(a, n):\n    p = []\n    for i in a:\n        while i > 0:\n            if i <= n:\n                if i not in p:\n                    p.append(i)\n                    break\n            i = i // 2\n    if len(p) == n:\n        print('YES')\n    else:\n        print('NO')\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    C(a, n)", "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if max(arr) < n:\n        print('NO')\n        return\n    permutacao = []\n    for i in arr:\n        while i > 0:\n            if i <= n and i not in permutacao:\n                permutacao.append(i)\n                break\n            i = i // 2\n    print('YES') if len(permutacao) == n else print('NO')\nfor x in range(int(input())):\n    solve()", "def solve():\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    if max(arr) < n:\n        print('NO')\n        return\n    l = []\n    for i in arr:\n        while i > 0:\n            if i <= n and i not in l:\n                l.append(i)\n                break\n            i = i // 2\n    if len(l) == n:\n        print('YES')\n    else:\n        print('NO')\nfor x in range(int(input())):\n    solve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(i) for i in input().strip().split()]\n    s = {i + 1 for i in range(n)}\n    check = True\n    for x in l:\n        y = x\n        while x > n:\n            x = x // 2\n        if x in s:\n            s.remove(x)\n        else:\n            while x > 0:\n                x = x // 2\n                if x in s:\n                    s.remove(x)\n                    break\n            if x == 0:\n                check = False\n        if check == False:\n            break\n    if check:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef solve(n, lst):\n    lst.sort()\n    already_have = set(lst)\n    dct = {}\n    for ele in lst:\n        dct[ele] = dct.get(ele, 0) + 1\n    missing = set()\n    for i in range(1, n + 1):\n        if i not in already_have:\n            missing.add(i)\n    extra = []\n    for ele in lst:\n        if dct[ele] > 1 or ele > n:\n            dct[ele] = dct[ele] - 1\n            extra.append(ele)\n    extra.sort()\n    for ele in extra:\n        x = 2\n        temp = ele\n        while temp not in missing:\n            temp = temp // 2\n            if temp == 0:\n                break\n        if temp in missing:\n            missing.remove(temp)\n        else:\n            print('NO')\n            return\n    if len(missing) == 0:\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    solve(n, lst)", "def soluciona():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if max(arr) < n:\n        print('NO')\n        return\n    permutacao = []\n    for i in arr:\n        while i > 0:\n            if i <= n and i not in permutacao:\n                permutacao.append(i)\n                break\n            i = i // 2\n    print('YES') if len(permutacao) == n else print('NO')\nfor _ in range(int(input())):\n    soluciona()", "def find(arr, n):\n    p = []\n    for i in arr:\n        while i > 0:\n            if i <= n:\n                if i not in p:\n                    p.append(i)\n                    break\n            i = i // 2\n    if len(p) == n:\n        print('YES')\n    else:\n        print('NO')\nfor t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    find(arr, n)", "def solve():\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    if max(arr) < n:\n        print('NO')\n        return\n    l = []\n    for i in arr:\n        while i > 0:\n            if i <= n and i not in l:\n                l.append(i)\n                break\n            i = i // 2\n    if len(l) == n:\n        print('YES')\n    else:\n        print('NO')\nfor x in range(int(input())):\n    solve()", "def solve():\n    n = int(input())\n    l = []\n    arr = [int(i) for i in input().split()]\n    if max(arr) < n:\n        print('NO')\n        return\n    for i in arr:\n        while i > 0:\n            if i <= n and i not in l:\n                l.append(i)\n                break\n            i //= 2\n    if len(l) == n:\n        print('YES')\n        return\n    print('NO')\n    return\nfor x in range(int(input())):\n    solve()", "def solve():\n    n = int(input())\n    l = []\n    arr = [int(i) for i in input().split()]\n    if max(arr) < n:\n        print('NO')\n        return\n    for i in arr:\n        while i > 0:\n            if i <= n and i not in l:\n                l.append(i)\n                break\n            i //= 2\n    if len(l) == n:\n        print('YES')\n        return\n    print('NO')\n    return\nfor x in range(int(input())):\n    solve()", "def C(a, n):\n    li = []\n    for i in a:\n        while i > 0:\n            if i <= n:\n                if i not in li:\n                    li.append(i)\n                    break\n            i = i // 2\n    if len(li) == n:\n        print('YES')\n    else:\n        print('NO')\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    C(a, n)", "def C(a, n):\n    li = []\n    for i in a:\n        while i > 0:\n            if i <= n:\n                if i not in li:\n                    li.append(i)\n                    break\n            i = i // 2\n    if len(li) == n:\n        print('YES')\n    else:\n        print('NO')\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    C(a, n)", "def solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    perm = set((x + 1 for x in range(n)))\n    for el in l:\n        if el in perm:\n            perm.remove(el)\n        else:\n            while el > 0:\n                el //= 2\n                if el in perm:\n                    perm.remove(el)\n                    break\n    print('YES' if len(perm) == 0 else 'NO')\nfor _ in range(int(input())):\n    solve()", "c = int(input())\nfor i in range(c):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    index_array = [0] * n\n    total_counter = 0\n    res = 'YES'\n    for v in arr:\n        while v > n:\n            v //= 2\n        while index_array[v - 1] > 0:\n            v //= 2\n            if v == 0:\n                break\n        if v == 0:\n            res = 'NO'\n            break\n        else:\n            total_counter += 1\n            index_array[v - 1] = 1\n    print(res)", "def canI(arr, n):\n    perm = []\n    for i in arr:\n        while i > 0:\n            if i <= n:\n                if i not in perm:\n                    perm.append(i)\n                    break\n            i = i // 2\n    if len(perm) == n:\n        print('YES')\n    else:\n        print('NO')\nfor t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    canI(arr, n)", "N_LIMIT = 50\n\ndef solve():\n    t = int(input())\n    for _ in range(t):\n        solve_one(construct_convert_map(N_LIMIT))\n\ndef construct_convert_map(limit: int):\n    convert_map = {}\n    for i in range(1, limit + 1):\n        convert_map[i] = {1, i}\n        cur_val = i\n        while cur_val != 1:\n            cur_val = cur_val // 2\n            convert_map[i].add(cur_val)\n    return convert_map\n\ndef solve_one(convert_map: dict):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    assert len(a) == n\n    b = []\n    for e in a:\n        b.append(boil_down(e, N_LIMIT))\n    cur_n = n\n    sorted_b = sorted(b, reverse=True)\n    while cur_n > 0:\n        for e in sorted_b:\n            if cur_n in convert_map[e]:\n                break\n        else:\n            print('NO')\n            return\n        cur_n -= 1\n        sorted_b.remove(e)\n    print('YES')\n\ndef boil_down(val: int, limit: int):\n    cur_val = val\n    while cur_val > limit:\n        cur_val //= 2\n    return cur_val\nsolve()", "import sys\ninput = sys.stdin.readline\ntests = int(input())\nfor test in range(tests):\n    n = int(input())\n    an = list(map(int, input().split()))\n    done = [False] * (n + 1)\n    doable = True\n    for a in an:\n        this_a = a\n        while this_a > n:\n            this_a = this_a // 2\n        while done[this_a]:\n            this_a = this_a // 2\n        if this_a:\n            done[this_a] = True\n        else:\n            print('NO')\n            doable = False\n            break\n    if doable:\n        print('YES')", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    a = list(map(int, input().split()))[:n]\n    a.sort(reverse=True)\n    net = [0] * (n + 1)\n    yes = 1\n    for i in a:\n        x = i\n        while x > n or net[x]:\n            x = x // 2\n        if x > 0:\n            net[x] = 1\n        else:\n            yes = 0\n            break\n    if yes == 1:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    ai = list(map(int, input().split()))\n    ai.sort()\n    ai.reverse()\n    m = min(ai)\n    k = 0\n    if m > n:\n        k = int(math.log(m, 2) - math.log(n, 2))\n        ai = [int(i / 2 ** k) for i in ai]\n    output = []\n    for i in ai:\n        while i > 0:\n            if i <= n and i not in output:\n                output.append(i)\n                break\n            else:\n                i = int(i / 2)\n    if len(output) == n:\n        print('YES')\n    else:\n        print('NO')", "def main():\n    n = int(input())\n    arr = list(map(int, input().strip().split(' ')))\n    arr.sort()\n    vis = set()\n    for num in arr:\n        while num > 1 and (num in vis or num > n):\n            num //= 2\n        if num in vis:\n            print('NO')\n            return\n        vis.add(num)\n    print('YES')\nt = int(input())\nwhile t != 0:\n    main()\n    t -= 1", "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if max(arr) < n:\n        print('NO')\n        return\n    l = []\n    for i in arr:\n        while i > 0:\n            if i <= n and i not in l:\n                l.append(i)\n                break\n            i = i // 2\n    print('YES') if len(l) == n else print('NO')\nfor x in range(int(input())):\n    solve()", "def q(x, y):\n    o = set()\n    for i in range(len(y)):\n        f = y[i]\n        while True:\n            if 0 == f:\n                if 9 + 1 == 10:\n                    return 'NO'\n            if f not in o and f <= x:\n                if 0 + 0 == 0:\n                    o.add(f)\n                    break\n            elif 1 + 1 == 2:\n                f = f // 2\n    l = len(o)\n    if x == l:\n        if 2 + 3 == 5:\n            return 'YES'\n    if 4 + 4 == 8:\n        return 'NO'\nz = int(input())\nfor t in range(z):\n    x = int(input())\n    y = list(map(int, input().split()))\n    if 2 * 8 == 16:\n        print(q(x, y))", "for _ in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    used = [False] * n\n    flag = True\n    for num in l:\n        while num > n:\n            num //= 2\n        while used[num - 1] and num > 0:\n            num //= 2\n        if num == 0:\n            flag = False\n            break\n        else:\n            used[num - 1] = True\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    d = [*map(int, input().split())]\n    r = 'YES'\n    v = [False] * (n + 1)\n    for i in d:\n        while i > n or v[i]:\n            i //= 2\n        if i:\n            v[i] = True\n        else:\n            r = 'NO'\n            break\n    print(r)", "for _ in range(int(input())):\n    n = int(input())\n    c = [0] * 99\n    for v in map(int, input().split()):\n        while v > n:\n            v //= 2\n        c[v] += 1\n    for i in range(n, 0, -1):\n        if c[i]:\n            c[i // 2] += c[i] - 1\n        else:\n            break\n    else:\n        print('YES')\n        continue\n    print('NO')", "def main():\n    n = int(input())\n    arr = list(map(int, input().strip().split(' ')))\n    arr.sort()\n    vis = set()\n    for num in arr:\n        while num > 1 and (num in vis or num > n):\n            num //= 2\n        if num in vis:\n            print('NO')\n            return\n        vis.add(num)\n    print('YES')\nt = int(input())\nwhile t != 0:\n    main()\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    used = [False] * (n + 1)\n    flag = True\n    for v in a:\n        while v > n or used[v] == True:\n            v //= 2\n        if v != 0:\n            used[v] = True\n        else:\n            flag = False\n            break\n    print('YES' if flag else 'NO')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    a = a[::-1]\n    used = (n + 1) * [False]\n    impossible = False\n    for b in a:\n        while b > n:\n            b //= 2\n        while used[b]:\n            b //= 2\n        if b:\n            used[b] = True\n        else:\n            impossible = True\n            break\n    if impossible:\n        print('NO')\n    else:\n        print('YES')", "c = int(input())\nfor i in range(c):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    index_array = [0] * n\n    total_counter = 0\n    res = 'YES'\n    for v in arr:\n        while v > n:\n            v //= 2\n        while index_array[v - 1] > 0:\n            v //= 2\n            if v == 0:\n                break\n        if v == 0:\n            res = 'NO'\n            break\n        else:\n            total_counter += 1\n            index_array[v - 1] = 1\n    print(res)", "def find(k, n):\n    a = []\n    while k > n:\n        k //= 2\n    while k >= 1:\n        a.append(k)\n        k //= 2\n    return a\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [find(a[i], n) for i in range(n)]\n    f = []\n    for i in b:\n        for j in i:\n            if j not in f:\n                f.append(j)\n                break\n    print('YES' if len(set(f)) == n else 'NO')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    ai = list(map(int, input().split()))\n    ai.sort()\n    ai.reverse()\n    m = min(ai)\n    k = 0\n    if m > n:\n        k = int(math.log(m, 2) - math.log(n, 2))\n        ai = [int(i / 2 ** k) for i in ai]\n    output = []\n    x = 0\n    for i in ai:\n        while i > 0:\n            if i <= n and i not in output:\n                output.append(i)\n                break\n            else:\n                i = int(i / 2)\n                if i == 0:\n                    x += 1\n                    break\n        if x == 1:\n            break\n    if len(output) == n:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    a = list(map(int, input().split()))[:n]\n    net = [0] * (n + 1)\n    yes = 1\n    for i in a:\n        x = i\n        while x > n or net[x]:\n            x = x // 2\n        if x > 0:\n            net[x] = 1\n        else:\n            yes = 0\n            break\n    if yes == 1:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "def func(x):\n    global n, cl\n    k = len(x)\n    if k > 6:\n        x = int(x) // 2 ** (k // 3)\n    x = int(x)\n    while x > n:\n        x //= 2\n    while x in cl:\n        x //= 2\n        if x == 1 and 1 in cl:\n            return False\n    else:\n        cl.append(x)\n    return x\n\ndef Solve():\n    global n, cl\n    for t in range(int(input())):\n        e = True\n        cl = []\n        n = int(input())\n        l = input().split()\n        for i in l:\n            if func(i) == False:\n                e = False\n                break\n        if e:\n            print('YES')\n        else:\n            print('NO')\nSolve()", "def cal(lst, num):\n    d = {}\n    ma = 0\n    lst.sort()\n    l1 = []\n    p = 1\n    for i in range(num):\n        if lst[i] != p:\n            d[p] = 1\n            l1.append(l[i])\n        p += 1\n    for i in l1:\n        while i >= 1:\n            if i in d and d[i] > 0:\n                d[i] = 0\n                break\n            else:\n                i = i // 2\n    c = 1\n    for i in d:\n        if d[i] == 1:\n            c = 0\n            break\n    if c == 0:\n        print('NO')\n    else:\n        print('YES')\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    cal(l, n)", "def check(a, n):\n    b = [0] * (n + 1)\n    a.sort()\n    for i in range(n):\n        if a[i] <= n:\n            if b[a[i]] == 0:\n                b[a[i]] = a[i]\n            else:\n                s = 1\n                val = a[i]\n                while s != 0:\n                    val = val // 2\n                    if b[val] == 0:\n                        b[val] = val\n                        s = 0\n                    if val == 0:\n                        s = 0\n        else:\n            s = 1\n            val = a[i]\n            while s != 0:\n                val = val // 2\n                if val <= n:\n                    if b[val] == 0:\n                        b[val] = val\n                        s = 0\n                    if val == 0:\n                        s = 0\n    if b.count(0) > 1:\n        return 'NO'\n    else:\n        return 'YES'\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(check(a, n))", "from typing import Counter\nimport sys\ninput = sys.stdin.readline\n\ndef print(*args, end='\\n', sep=' ') -> None:\n    sys.stdout.write(sep.join(map(str, args)) + end)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        for i in range(n):\n            while a[i] > n:\n                a[i] //= 2\n        a = Counter(a)\n        for i in reversed(range(1, n + 1)):\n            if a[i] == 1:\n                continue\n            if a[i] == 0:\n                print('NO')\n                break\n            a[i // 2] += a[i] - 1\n            a[i] = 1\n        else:\n            print('YES')\nmain()", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    v = {}\n    for i in range(n):\n        while a[i] > n:\n            a[i] //= 2\n        while a[i] in v:\n            a[i] //= 2\n        if a[i] == 0:\n            print('NO')\n            return\n        v[a[i]] = 1\n    print('YES')\nt = int(input())\nfor _ in range(t):\n    solve()", "def tperm(a, n):\n    mx = n\n    for i in range(n):\n        while a[i] > n:\n            a[i] //= 2\n    a.sort()\n    while a:\n        if mx != a.pop():\n            return False\n        if mx == 1:\n            return True\n        i = mx - 2\n        while i >= 0 and a[i] == mx:\n            a[i] //= 2\n            i -= 1\n        a.sort()\n        mx -= 1\nt = int(input())\ntests = [False for i in range(t)]\nn = 0\nfor i in range(t):\n    n = int(input())\n    if tperm(list(map(int, input().split())), n):\n        tests[i] = True\nfor test in tests:\n    if test:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\ntt = [list(map(int, input().split())) for i in range(2 * t)]\nfor i in range(1, len(tt), 2):\n    ti = tt[i]\n    n = tt[i - 1][0]\n    done = set()\n    for j in ti:\n        while j > n or j in done:\n            j //= 2\n        if j == 0:\n            break\n        else:\n            done.add(j)\n    if len(done) == n:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    sel = {}\n    i = 0\n    s = 0\n    while i < n:\n        ai = a[i]\n        while ai > n:\n            ai = ai // 2\n        if ai not in sel:\n            s += 1\n            sel[ai] = True\n        else:\n            teste = True\n            ai = ai // 2\n            while ai > 0:\n                if ai not in sel:\n                    sel[ai] = True\n                    s += 1\n                    teste = False\n                    break\n                ai = ai // 2\n            if teste:\n                break\n        i += 1\n    if s == n:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "def problem3(arr, n):\n    found = set()\n    for num in arr:\n        while num > 0:\n            if num not in found and 1 <= num <= n:\n                found.add(num)\n                break\n            num //= 2\n        if num == 0:\n            print('NO')\n            return\n    if len(found) == n:\n        print('YES')\n    else:\n        print('NO')\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(num) for num in input().split(' ')]\n    problem3(arr, n)", "c = int(input())\nfor i in range(c):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    index_array = [0] * n\n    total_count = 0\n    res = 'YES'\n    for v in arr:\n        while v > n:\n            v //= 2\n        while index_array[v - 1] > 0:\n            v //= 2\n            if v == 0:\n                break\n        if v == 0:\n            res = 'NO'\n            break\n        else:\n            total_count += 1\n            index_array[v - 1] = 1\n    print(res)", "def find(k, n):\n    a = []\n    while k > n:\n        k //= 2\n    while k >= 1:\n        a.append(k)\n        k //= 2\n    return a\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [find(a[i], n) for i in range(n)]\n    f = []\n    for i in b:\n        for j in i:\n            if j not in f:\n                f.append(j)\n                break\n    print('YES' if len(set(f)) == n else 'NO')", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = sorted(list(map(int, input().split())), reverse=True)\n    check = [False] * (n + 1)\n    flag = False\n    for num in lst:\n        while num > n:\n            num //= 2\n        while check[num]:\n            if num == 1 and check[num] == True:\n                flag = True\n                check[1] = False\n            num //= 2\n        if flag:\n            break\n        check[num] = True\n    if False in check[1:]:\n        print('NO')\n    else:\n        print('YES')", "from functools import lru_cache as cache\nimport math\nfrom heapq import *\nimport sys\n\ndef get_int():\n    return int(input())\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef main():\n    testcases = get_int()\n    for i in range(testcases):\n        n = get_int()\n        arr = get_list()\n        if solve(arr, n):\n            print('YES')\n        else:\n            print('NO')\n\ndef solve(arr, n):\n    count = [0 for i in range(n + 1)]\n    for i in range(n):\n        num = arr[i]\n        while num > 0:\n            if num <= n:\n                count[num] += 1\n            num >>= 1\n    for i in range(n, 0, -1):\n        num = i\n        if count[num] == 0:\n            return False\n        while num > 0:\n            count[num] -= 1\n            num >>= 1\n    return True\nmain()", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = sorted(list(map(int, input().split())), reverse=True)\n    check = [False] * (n + 1)\n    flag = False\n    for num in lst:\n        while num > n:\n            num //= 2\n        while check[num]:\n            if num == 1 and check[num] == True:\n                flag = True\n                check[1] = False\n            num //= 2\n        if flag:\n            break\n        check[num] = True\n    if False in check[1:]:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    hashTable = [0 for i in range(n + 1)]\n    flag = 1\n    for i in range(n):\n        t = arr[i]\n        while t > n:\n            t = t // 2\n        hashTable[t] += 1\n    for i in range(n, 1, -1):\n        if hashTable[i] > 1:\n            hashTable[i // 2] += hashTable[i] - 1\n            hashTable[i] = 1\n    for i in range(1, n + 1):\n        if hashTable[i] == 0:\n            print('NO')\n            flag = 0\n            break\n    if flag:\n        print('YES')", "for ii in range(int(input())):\n    n = int(input())\n    st = set(range(1, 1 + n))\n    l = list((int(i) for i in input().split()))\n    ps = 1\n    for e in l:\n        while e > 0 and e not in st:\n            e >>= 1\n        if e == 0:\n            ps = 0\n            break\n        else:\n            st.remove(e)\n    print(['NO', 'YES'][ps])", "def solver(arr):\n    n = len(arr)\n    freq = [0] * (n + 1)\n    for i in range(n):\n        while arr[i] > n:\n            arr[i] //= 2\n        freq[arr[i]] += 1\n    flag = True\n    for i in range(n, 0, -1):\n        if freq[i] == 0:\n            flag = False\n            break\n        freq[i // 2] += freq[i] - 1\n    if flag:\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    solver(arr)\n    t -= 1", "def solution():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    used = [False] * n\n    for i in range(n):\n        while a[i] > n or (1 <= a[i] <= n and used[a[i] - 1]):\n            a[i] //= 2\n        if a[i] == 0:\n            return 'NO'\n        used[a[i] - 1] = True\n    return 'YES'\nt = int(input())\nfor _ in range(t):\n    print(solution())", "def f(a):\n    n = len(a)\n    used = [0] * (n + 1)\n    a.sort(key=lambda el: -el)\n    for i in range(n):\n        while a[i] > n or used[a[i]]:\n            a[i] //= 2\n        if a[i] > 0:\n            used[a[i]] = 1\n        else:\n            return 'NO'\n    return 'YES'\ninp = lambda : list(map(int, input().split()))\nt = int(input())\nr = []\nfor _ in range(t):\n    n = int(input())\n    a = inp()\n    print(f(a))", "def solve():\n    size = int(input())\n    array = list(map(int, input().split()))\n    count = [0 for i in range(size + 1)]\n    for i in range(size):\n        if array[i] <= size:\n            count[array[i]] += 1\n        else:\n            while array[i] > size:\n                array[i] = array[i] // 2\n            count[array[i]] += 1\n    j = size\n    while j > 0:\n        if j == 1:\n            if count[j] > 1:\n                return False\n        if j == size:\n            if count[j] <= 0:\n                return False\n        if count[j] > 1:\n            count[j // 2] += count[j] - 1\n            count[j] = 1\n        j -= 1\n    for i in range(1, size + 1):\n        if count[i] == 0:\n            return False\n    return True\nremained_test_cases = 1\nremained_test_cases = int(input())\nwhile remained_test_cases > 0:\n    if solve():\n        print('YES')\n    else:\n        print('NO')\n    remained_test_cases -= 1", "c = int(input())\nfor i in range(c):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    res = 'YES'\n    arr_sub = [False] * n\n    for a in arr:\n        if a <= n and arr_sub[a - 1] == False:\n            arr_sub[a - 1] = True\n        else:\n            while a > n:\n                a //= 2\n            while arr_sub[a - 1] == True and a != 0:\n                a //= 2\n        if a == 0:\n            res = 'NO'\n            break\n        else:\n            arr_sub[a - 1] = True\n    print(res)", "def solve():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    s = set()\n    for j in range(n):\n        while arr[j] > n or arr[j] in s:\n            arr[j] = arr[j] // 2\n        if arr[j]:\n            s.add(arr[j])\n        else:\n            print('NO')\n            return\n    print('YES')\nfor i in range(int(input())):\n    solve()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = set([k for k in range(1, n + 1)])\n    a = list(map(int, input().split()))\n    flag = True\n    for j in a:\n        if j in s:\n            s.remove(j)\n        else:\n            while True:\n                j = j // 2\n                if j in s:\n                    s.remove(j)\n                    break\n                elif j == 0:\n                    flag = False\n                    break\n        if flag == False:\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    correct = set(range(1, n + 1))\n    b = []\n    stop = False\n    for item in a:\n        if stop:\n            break\n        while item > n:\n            item = item // 2\n        if item in b:\n            while item in b:\n                item = item // 2\n                if item == 0:\n                    stop = True\n                    break\n        b.append(item)\n    if set(b) == correct:\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    values = list(map(int, input().split()))\n    values.sort()\n    permutation = set()\n    for val in values:\n        while val > n:\n            val = val // 2\n        while val:\n            if val not in permutation:\n                permutation.add(val)\n                break\n            val = val // 2\n    if len(permutation) == n:\n        print('YES')\n    else:\n        print('NO')", "tst = int(input())\nfor i in range(tst):\n    n = int(input())\n    a = sorted([int(i) for i in input().split()])\n    temp = [i for i in range(1, n + 1)]\n    ans = []\n    flag = True\n    for i in a:\n        if not flag:\n            break\n        while i > n:\n            i = i >> 1\n        while i in ans:\n            i = i >> 1\n            if i == 0:\n                flag = False\n                break\n        ans.append(i)\n    if set(ans) == set(range(1, n + 1)):\n        print('YES')\n    else:\n        print('NO')"]