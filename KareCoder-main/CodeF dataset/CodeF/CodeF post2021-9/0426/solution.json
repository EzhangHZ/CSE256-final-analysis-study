["import math\nf = lambda x: 3 * (i := math.isqrt(x)) + (i * i + i <= x) + (i * (i + 2) <= x)\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\nf = lambda x: 3 * (i := math.isqrt(x)) + (i and x // i or 2) - i\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\nf = lambda x: x and (i := math.isqrt(x)) * 2 + x // i or 2\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\nf = lambda x: x < 1 or (i := math.isqrt(x)) * 2 + x // i - 1\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\nf = lambda x: 2 * (x < 1) or (i := math.isqrt(x)) * 2 + x // i\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\nf = lambda x: 2 * (x < 1) or (i := math.isqrt(x)) * 2 + x // i\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\nq = math.isqrt\n\ndef f(x):\n    i = j = q(x)\n    while j * j + j > x:\n        j -= 1\n    return i + j + q(x + 1)\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\nf = lambda x: 2 * (i := math.isqrt(x)) + (i and x // i or 2)\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\nf = lambda x: x and x // (i := math.isqrt(x)) + i * 2 or 2\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\nf = lambda x: 2 * (x < 1) or (i := math.isqrt(x)) * 2 + x // i\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\nm = lambda x: 3 * (i := math.isqrt(x)) + (i * i + i <= x) + (i * (i + 2) <= x)\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(m(r) - m(l - 1))", "import math\nf = lambda x: x < 1 or (i := math.isqrt(x)) * 2 + x // i - 1\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\nf = lambda x: 2 * (x < 1) or (i := math.isqrt(x)) * 2 + x // i\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\nf = lambda x: x < 1 or (i := math.isqrt(x)) * 2 + x // i - 1\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\nf = lambda x: x < 1 or (i := math.isqrt(x)) * 2 + x // i - 1\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\nf = lambda x: x < 1 or (i := math.isqrt(x)) * 2 + x // i - 1\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\na = lambda z: z < 1 or (i := math.isqrt(z)) * 2 + z // i - 1\nfor s in [*open(0)][1:]:\n    (p, g) = map(int, s.split())\n    print(a(g) - a(p - 1))", "import math\nf = lambda x: x < 1 or (i := math.isqrt(x)) * 2 + x // i - 1\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\na = lambda z: z < 1 or (i := math.isqrt(z)) * 2 + z // i - 1\nfor s in [*open(0)][1:]:\n    (p, g) = map(int, s.split())\n    print(a(g) - a(p - 1))", "import math\nf = lambda x: x < 1 or (i := math.isqrt(x)) * 2 + x // i - 1\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\nf = lambda x: x < 1 or (i := math.isqrt(x)) * 2 + x // i - 1\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\nf = lambda x: x < 1 or (i := math.isqrt(x)) * 2 + x // i - 1\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\nf = lambda x: x < 1 or (i := math.isqrt(x)) * 2 + x // i - 1\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\nf = lambda x: x < 1 or (i := math.isqrt(x)) * 2 + x // i - 1\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\nj = lambda x: x < 1 or (i := math.isqrt(x)) * 2 + x // i - 1\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(j(r) - j(l - 1))", "import math\nf = lambda x: x < 1 or (i := math.isqrt(x)) * 2 + x // i - 1\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\nf = lambda x: x < 1 or (i := math.isqrt(x)) * 2 + x // i - 1\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import sys\nimport math\nt = int(sys.stdin.readline())\n\ndef f(x):\n    y = math.floor(x ** 0.5)\n    while y * y + y * 2 + 1 <= x:\n        y += 1\n    while y * y > x:\n        y -= 1\n    res = y * 3\n    if y * y + y > x:\n        res -= 1\n    if y * y + y + y > x:\n        res -= 1\n    return res\nfor _ in range(t):\n    (l, r) = map(int, sys.stdin.readline().split())\n    print(f(r) - f(l - 1))", "import math\nf = lambda x: 3 * (i := math.isqrt(x)) + (i and x // i or 2) - i\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\nf = lambda x: x < 1 or (i := math.isqrt(x)) * 2 + x // i - 1\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import math\nq = math.isqrt\nf = lambda x: q(x) + int((x + 0.25) ** 0.5 - 0.5) + q(x + 1)\nfor s in [*open(0)][1:]:\n    (l, r) = map(int, s.split())\n    print(f(r) - f(l - 1))", "import sys, math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    a = math.isqrt(l)\n    b = math.isqrt(r)\n    ans = 0\n    if a == b:\n        if r >= a ** 2 >= l:\n            ans += 1\n        if r >= a ** 2 + 2 * a >= l:\n            ans += 1\n        if r >= a ** 2 + a >= l:\n            ans += 1\n    else:\n        if a + 1 <= b - 1:\n            ans += 3 * (b - 1 - a)\n        if a ** 2 >= l:\n            ans += 1\n        if a ** 2 + 2 * a >= l:\n            ans += 1\n        if a ** 2 + a >= l:\n            ans += 1\n        if b ** 2 <= r:\n            ans += 1\n        if b ** 2 + 2 * b <= r:\n            ans += 1\n        if b ** 2 + b <= r:\n            ans += 1\n    print(ans)", "import sys\nimport math\nfor _ in range(int(sys.stdin.readline())):\n    (l, r) = map(int, sys.stdin.readline().split())\n    l1 = int(math.isqrt(l))\n    r1 = int(math.isqrt(r))\n    lcount = 0\n    for k in range(3):\n        if l1 * l1 + k * l1 >= l and l1 * l1 + k * l1 <= r:\n            lcount += 1\n    rcount = 0\n    if r1 * r1 > l1 * l1 + 2 * l1:\n        for k in range(3):\n            if r1 * r1 + k * r1 <= r:\n                rcount += 1\n    mid = 0\n    if r1 > l1 + 1:\n        mid = r1 - l1 - 1\n    print(lcount + rcount + mid * 3)", "t = int(input())\nimport math\nfor _ in range(t):\n    [l, r] = list(map(int, input().strip().split()))\n    temp = math.isqrt(r)\n    a = (temp - 1) * 3 + 1 + (r - temp * temp) // temp\n    ans = a\n    if l > 1:\n        temp = math.isqrt(l - 1)\n        b = (temp - 1) * 3 + 1 + (l - 1 - temp * temp) // temp\n        ans -= b\n    print(ans)", "import math\n\ndef count_luxurious_numbers(n):\n    if n == 0:\n        return 0\n    i_sqrt = math.isqrt(n)\n    count = (i_sqrt - 1) * 3\n    d = n - i_sqrt * i_sqrt\n    count += d // i_sqrt\n    return count + 1\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        (n1, n2) = map(int, input().split())\n        c1 = count_luxurious_numbers(n1 - 1)\n        c2 = count_luxurious_numbers(n2)\n        print(c2 - c1)\nmain()", "from math import isqrt\n\ndef numtaghsim(x, y):\n    x1 = isqrt(x)\n    y1 = isqrt(y)\n    count = (y1 - x1 + 1) * 3\n    if x > x1 * x1:\n        count -= 1\n    if x > x1 * x1 + x1:\n        count -= 1\n    if x > x1 * x1 + 2 * x1:\n        count -= 1\n    if y < y1 * y1:\n        count -= 1\n    if y < y1 * y1 + y1:\n        count -= 1\n    if y < y1 * y1 + 2 * y1:\n        count -= 1\n    print(count)\nt = int(input())\nfor i in range(t):\n    (x, y) = [int(i) for i in input().split()]\n    numtaghsim(x, y)", "import math\n\ndef ira(w):\n    if w <= 4:\n        return w\n    else:\n        stop = int(w ** 0.5)\n        if w - stop ** 2 < 0:\n            stop -= 1\n        return 3 + (stop - 2) * 3 + 1 + (w - stop ** 2) // stop\nt = int(input())\nfor _ in range(t):\n    (l, r) = [int(i) for i in input().split()]\n    print(ira(r) - ira(l - 1))", "import math\nfor _ in range(int(input())):\n    (a, b) = input().split(' ')\n    (a, b) = (int(a), int(b))\n\n    def f(a):\n        if a == 0:\n            return 0\n        ans = math.sqrt(a + 0.1)\n        ans = int(ans)\n        if a < ans * ans:\n            ans -= 1\n        ans2 = a - ans * ans\n        return (ans - 1) * 3 + 1 + ans2 // ans\n    print(f(b) - f(max(0, a - 1)))", "from math import *\n\ndef ff(x):\n    if x == 0:\n        return 0\n    a = isqrt(x)\n    ans = (a - 1) * 3 + (x - a * a) // a\n    ans += 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    print(ff(r) - ff(l - 1))", "import math\nt = int(input())\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    ll = math.isqrt(l)\n    rr = math.isqrt(r)\n    al = 0\n    ar = 0\n    for i in range(3):\n        if ll * (ll + i) >= l:\n            al += 1\n        if rr * (rr + i) <= r:\n            ar += 1\n    ans = al + 3 * (rr - ll - 1) + ar\n    print(ans)", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\nfrom math import ceil\nimport math\n\ndef solve(n):\n    if n == 0:\n        return 0\n    i_sqrt = math.isqrt(n)\n    count = (i_sqrt - 1) * 3\n    d = n - i_sqrt * i_sqrt\n    count += d // i_sqrt\n    return count + 1\nfor _ in range(int(input())):\n    (l, r) = mi()\n    if l == r and pow(l, 0.5) == int(pow(l, 0.5)):\n        print(1)\n        continue\n    print(int(solve(r) - solve(l - 1)))", "import math\nt = int(input())\nfor i in range(t):\n    (l, r) = map(int, input().strip().split())\n    l -= 1\n    count = 0\n    xl = math.floor(math.isqrt(l))\n    xr = math.floor(math.isqrt(r))\n    if r != 0:\n        count = count + (xr - 1) * 3 + (r - xr * xr) // xr\n    if l != 0:\n        count = count - (l - xl * xl) // xl - (xl - 1) * 3\n    if l == 0 and r != 0:\n        print(count + 1)\n    else:\n        print(count)", "from math import isqrt\n\ndef luxury_number(l, r):\n    r_l = isqrt(l)\n    r_r = isqrt(r)\n    r_l = r_l + 1\n    ans = 0\n    ans += (r_r - r_l) * 3\n    if (r_l - 1) ** 2 == l:\n        ans += 3\n    elif l <= r_l ** 2 - r_l:\n        ans += 2\n    else:\n        ans += 1\n    if r == (r_r + 1) ** 2 - 1:\n        ans += 3\n    elif r >= r_r ** 2 + r_r:\n        ans += 2\n    else:\n        ans += 1\n    return ans\nfor i in range(int(input())):\n    [l, r] = list(map(int, input().split()))\n    print(luxury_number(l, r))", "import math\nt = int(input())\n\ndef f(x) -> int:\n    if x == 0:\n        return 0\n    k = math.floor(math.sqrt(x))\n    if x < k * k:\n        k -= 1\n    if x >= (k + 1) * (k + 1):\n        k += 1\n    ans = 3 * (k - 1)\n    if x >= k * k:\n        ans += 1\n    if x >= k * (k + 1):\n        ans += 1\n    if x >= k * (k + 2):\n        ans += 1\n    return ans\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    print(f(r) - f(l - 1))", "def f(x):\n    s = int(x ** 0.5)\n    if s * s > x:\n        s -= 1\n    if s * s + 2 * s + 1 <= x:\n        s += 1\n    if s * s + 2 * s <= x:\n        return s * 3\n    if s * s + s <= x:\n        return s * 3 - 1\n    return s * 3 - 2\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    print(f(r) - f(l - 1))", "import os\nimport math\nimport collections\nimport bisect\nimport functools\nimport itertools\nimport heapq\n\ndef solve(l, r):\n\n    def count(x):\n        if x == 0:\n            return 0\n        y = int(x ** 0.5)\n        while y * y > x:\n            y -= 1\n        while (y + 1) * (y + 1) <= x:\n            y += 1\n        res = (y - 1) * 3\n        return res + (x - y ** 2) // y + 1\n    return count(r) - count(l - 1)\nt = int(input())\nfor _ in range(t):\n    arr = input().split(' ')\n    (l, r) = (int(arr[0].strip()), int(arr[1].strip()))\n    print(solve(l, r))", "from math import ceil, floor, gcd, exp, log, isqrt\nfrom functools import lru_cache, reduce\nfrom itertools import combinations, permutations, product, combinations_with_replacement, count, cycle, tee, islice\nfrom collections import Counter\nfor t in range(int(input())):\n    (l, r) = [int(a) for a in input().split()]\n    if l == r:\n        if l % isqrt(l) == 0:\n            print('1')\n        else:\n            print('0')\n        continue\n    ll = isqrt(l)\n    rr = isqrt(r) + 1\n    o = (rr - ll) * 3\n    if (rr - 1) ** 2 + (rr - 1) > r:\n        o -= 2\n    elif (rr - 1) ** 2 + (rr - 1) * 2 > r:\n        o -= 1\n    if ll ** 2 + ll < l:\n        o -= 2\n    elif ll ** 2 < l:\n        o -= 1\n    print(o)", "from math import isqrt\n\ndef cal(a):\n    if a == 0:\n        return 0\n    if a < 4:\n        return a\n    t = isqrt(a)\n    ans = 3 * (t - 1)\n    i = 0\n    while t ** 2 + t * i <= a:\n        i += 1\n    return ans + i\nfor jj in range(int(input())):\n    (l, r) = [int(i) for i in input().split()]\n    print(cal(r) - cal(l - 1))", "from math import isqrt\n\ndef f(n):\n    if n == 0:\n        return 0\n    q = isqrt(n)\n    ans = (q - 1) * 3\n    i = 0\n    while q ** 2 + q * i <= n:\n        i += 1\n    return ans + i\nfor _ in range(int(input())):\n    (x, y) = [int(i) for i in input().split()]\n    print(f(y) - f(x - 1))", "from math import isqrt\n\ndef f(n):\n    if n == 0:\n        return 0\n    q = isqrt(n)\n    ans = (q - 1) * 3\n    i = 0\n    while q ** 2 + q * i <= n:\n        i += 1\n    return ans + i\nfor i in range(int(input())):\n    x = 0\n    (r, n) = input().split()\n    (r, n) = (int(r), int(n))\n    print(f(n) - f(r - 1))", "from math import isqrt\n\ndef check(x):\n    if x == 0:\n        return 0\n    ans = (isqrt(x) - 1) * 3 + (x - isqrt(x) * isqrt(x)) // isqrt(x)\n    ans += 1\n    return ans\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    print(check(r) - check(l - 1))", "from math import isqrt\n\ndef check(x):\n    if x == 0:\n        return 0\n    ans = (isqrt(x) - 1) * 3 + (x - isqrt(x) * isqrt(x)) // isqrt(x)\n    ans += 1\n    return ans\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    print(check(r) - check(l - 1))", "from math import isqrt\n\ndef checkEdgesDown(l, r):\n    jump = isqrt(r) - 1\n    diff = r - l\n    if diff == 0:\n        return 1\n    if diff < 1 + jump:\n        return 2\n    return 3\n\ndef checkEdgesUp(l, r):\n    jump = isqrt(l)\n    diff = r - l\n    if diff < jump:\n        return 1\n    if diff < 2 * jump:\n        return 2\n    return 3\n\ndef func1():\n    (l, r) = map(int, input().split())\n    ans = 0\n    above_i = isqrt(l)\n    if above_i ** 2 != l:\n        above_i += 1\n    above_l = above_i ** 2\n    under_i = isqrt(r)\n    under_r = under_i ** 2\n    ans += checkEdgesDown(l, above_l) + checkEdgesUp(under_r, r)\n    ans += 2 * (under_i - above_i)\n    ans += under_i - above_i - 1\n    return ans\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        print(func1())\nmain()", "from math import isqrt\n\ndef f(na):\n    if na == 0:\n        return 0\n    q = isqrt(na)\n    ans = (q - 1) * 3\n    i = 0\n    while q ** 2 + q * i <= na:\n        i += 1\n    return ans + i\nfor _ in range(int(input())):\n    (x, y) = [int(i) for i in input().split()]\n    print(f(y) - f(x - 1))", "def f(n: int):\n    t = int(n ** 0.5)\n    if t * t > n:\n        t = t - 1\n    res = (t - 1) * 3\n    if n >= t * t:\n        res = res + 1\n    if n >= t * t + t:\n        res = res + 1\n    if n >= t * t + 2 * t:\n        res = res + 1\n    return res\nT = int(input())\nfor _ in range(T):\n    (l, r) = map(int, input().split())\n    print(f(r) - f(l - 1))", "import math\n\ndef f(n):\n    if n == 0:\n        return 0\n    q = math.isqrt(n)\n    ans = (q - 1) * 3\n    i = 0\n    while q ** 2 + q * i <= n:\n        i += 1\n    return ans + i\nt = int(input())\nwhile t:\n    t -= 1\n    (l, r) = map(int, input().split())\n    print(f(r) - f(l - 1))", "from math import isqrt\n\ndef f(n):\n    if n == 0:\n        return 0\n    q = isqrt(n)\n    ans = (q - 1) * 3\n    i = 0\n    while q ** 2 + q * i <= n:\n        i += 1\n    return ans + i\nfor _ in range(int(input())):\n    (x, y) = [int(i) for i in input().split()]\n    print(f(y) - f(x - 1))", "import math\nt = int(input())\nfor i in range(t):\n    (m, n) = list(map(int, input().split()))\n    rangem = math.isqrt(m)\n    rangen = math.isqrt(n)\n    if m == rangem ** 2:\n        start = 3\n    elif rangem ** 2 < m <= rangem ** 2 + rangem:\n        start = 2\n    elif rangem ** 2 + rangem < m <= rangem ** 2 + 2 * rangem:\n        start = 1\n    if rangen ** 2 <= n < rangen ** 2 + rangen:\n        end = 1\n    elif rangen ** 2 + rangen <= n < rangen ** 2 + 2 * rangen:\n        end = 2\n    elif rangen ** 2 + 2 * rangen == n:\n        end = 3\n    if rangem == rangen:\n        print(end + start - 3)\n    else:\n        print(end + start + 3 * (rangen - rangem - 1))", "def mysqr(n):\n    m = int(n ** 0.5)\n    if m * m <= n:\n        return m\n    return m - 1\n\ndef func(n):\n    if n == 0:\n        return 0\n    sn = mysqr(n)\n    total = sn * 3 - 2\n    if sn * (sn + 1) <= n:\n        total += 1\n    if sn * (sn + 2) <= n:\n        total += 1\n    return total\nt = int(input())\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    ans = func(r) - func(l - 1)\n    print(ans)", "import os\nimport math\nimport collections\nimport bisect\nimport functools\nimport itertools\nimport heapq\n\ndef solve(l, r):\n\n    def count(x):\n        if x == 0:\n            return 0\n        y = int(x ** 0.5)\n        while y * y > x:\n            y -= 1\n        while (y + 1) * (y + 1) <= x:\n            y += 1\n        res = (y - 1) * 3\n        return res + (x - y ** 2) // y + 1\n    return 0 if l > r else count(r) - count(l - 1)\nt = int(input())\nfor _ in range(t):\n    arr = input().split(' ')\n    (l, r) = (int(arr[0].strip()), int(arr[1].strip()))\n    print(solve(l, r))", "import math\n\ndef fn(x):\n    t = math.floor(x ** 0.5)\n    while (t + 1) ** 2 <= x:\n        t += 1\n    while t ** 2 > x:\n        t -= 1\n    ans = t * 3\n    if t * t + t > x:\n        ans -= 1\n    if t * t + 2 * t > x:\n        ans -= 1\n    return ans\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    print(fn(r) - fn(l - 1))", "import math\n\ndef sol(l, r):\n    (f, s) = (int(math.isqrt(l)), int(math.isqrt(r)))\n    c = (s - f - 1) * 3\n    c *= c > 0\n    if f == s:\n        for i in range(3):\n            if l <= f * (f + i) <= r:\n                c += 1\n        return c\n    for i in range(3):\n        if f * (f + i) >= l:\n            c += 1\n        if r >= s * (s + i):\n            c += 1\n    return c\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    print(sol(l, r))", "from math import isqrt\n\ndef luxury_number(n):\n    if n == 0:\n        return 0\n    r = isqrt(n)\n    ans = (r - 1) * 3\n    i = 0\n    while r ** 2 + i * r <= n:\n        i += 1\n    ans += i\n    return ans\nfor i in range(int(input())):\n    [l, r] = list(map(int, input().split()))\n    print(luxury_number(r) - luxury_number(l - 1))", "import math\n\ndef intsqrt(n):\n    isq = int(math.sqrt(n))\n    if isq * isq > n:\n        return isq - 1\n    else:\n        return isq\nt = int(input())\nfor i in range(t):\n    (l, r) = input().split()\n    l = int(l)\n    r = int(r)\n    if l == r:\n        if l % intsqrt(l) == 0:\n            res = 1\n        else:\n            res = 0\n    else:\n        a = intsqrt(l)\n        b = intsqrt(r)\n        res = 0\n        if a == b:\n            i = a * a\n            while i <= r:\n                if i >= l:\n                    res += 1\n                i += a\n        else:\n            aa = a + 1\n            bb = b\n            res += (bb - aa) * 3\n            i = a * a\n            while i < (a + 1) ** 2:\n                if i >= l:\n                    res += 1\n                i += a\n            i = b * b\n            while i <= r:\n                res += 1\n                i += b\n    print(res)", "import math\n\ndef intsqrt(n):\n    isq = int(math.sqrt(n))\n    if isq * isq > n:\n        return isq - 1\n    else:\n        return isq\nt = int(input())\nfor i in range(t):\n    (l, r) = input().split()\n    l = int(l)\n    r = int(r)\n    if l == r:\n        if l % intsqrt(l) == 0:\n            res = 1\n        else:\n            res = 0\n    else:\n        a = intsqrt(l)\n        b = intsqrt(r)\n        res = 0\n        if a == b:\n            i = a * a\n            while i <= r:\n                if i >= l:\n                    res += 1\n                i += a\n        else:\n            aa = a + 1\n            bb = b\n            res += (bb - aa) * 3\n            i = a * a\n            while i < (a + 1) ** 2:\n                if i >= l:\n                    res += 1\n                i += a\n            i = b * b\n            while i <= r:\n                res += 1\n                i += b\n    print(res)", "from math import isqrt\nf = lambda x, r: r * 3 + (x >= (r + 1) * r) + (x >= (r + 2) * r) - 2\nfor _ in range(int(input())):\n    print(sum(((-1) ** i * f(x - i, isqrt(x - i)) for (i, x) in enumerate(map(int, reversed(input().split()))))))", "from math import isqrt\n\ndef f(n):\n    if n == 0:\n        return 0\n    q = isqrt(n)\n    ans = (q - 1) * 3\n    i = 0\n    while q ** 2 + q * i <= n:\n        i += 1\n    return ans + i\nfor _ in range(int(input())):\n    (x, y) = [int(i) for i in input().split()]\n    print(f(y) - f(x - 1))", "from math import isqrt\n\ndef f(n):\n    if n == 0:\n        return 0\n    q = isqrt(n)\n    ans = (q - 1) * 3\n    i = 0\n    while q ** 2 + q * i <= n:\n        i += 1\n    return ans + i\nfor _ in range(int(input())):\n    (x, y) = [int(i) for i in input().split()]\n    print(f(y) - f(x - 1))", "t = eval(input())\nimport math\nfor i in range(t):\n    (l, r) = map(int, input().split())\n    (l1, r1) = (math.floor(math.sqrt(l)), math.floor(math.sqrt(r)))\n    if l1 ** 2 > l:\n        l1 -= 1\n    if r1 ** 2 > r:\n        r1 -= 1\n    sum = (r1 - l1) * 3\n    for i in range(l1 ** 2, l, l1):\n        if i % l1 == 0:\n            sum -= 1\n    for i in range(r1 ** 2, r + 1, r1):\n        if i % r1 == 0:\n            sum += 1\n    print(sum)", "def solve(x):\n    aa = int(x ** 0.5)\n    if aa * aa > x:\n        aa -= 1\n    if aa * aa + 2 * aa + 1 <= x:\n        aa += 1\n    if aa * aa + 2 * aa <= x:\n        return aa * 3\n    if aa * aa + aa <= x:\n        return aa * 3 - 1\n    return aa * 3 - 2\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    print(solve(r) - solve(l - 1))", "from math import isqrt\n\ndef f(x):\n    if x == 0:\n        return 0\n    y = isqrt(x)\n    return 3 * (y - 1) + 1 + (x - y ** 2) // y\n\ndef solution():\n    (l, r) = map(int, input().split())\n    return f(r) - f(l - 1)\nfor case in range(int(input())):\n    print('%s' % solution())", "import math\n\ndef intsqrt(n):\n    isq = int(math.sqrt(n))\n    if isq * isq > n:\n        return isq - 1\n    else:\n        return isq\nt = int(input())\nfor i in range(t):\n    (l, r) = input().split()\n    l = int(l)\n    r = int(r)\n    if l == r:\n        if l % intsqrt(l) == 0:\n            res = 1\n        else:\n            res = 0\n    else:\n        a = intsqrt(l)\n        b = intsqrt(r)\n        res = 0\n        if a == b:\n            i = a * a\n            while i <= r:\n                if i >= l:\n                    res += 1\n                i += a\n        elif b - a == 1:\n            i = a * a\n            while i < b * b:\n                if i >= l:\n                    res += 1\n                i += a\n            i = b * b\n            while i <= r:\n                res += 1\n                i += b\n        else:\n            aa = a + 1\n            bb = b\n            res += (bb - aa) * 3\n            i = a * a\n            while i < (a + 1) ** 2:\n                if i >= l:\n                    res += 1\n                i += a\n            i = b * b\n            while i <= r:\n                res += 1\n                i += b\n    print(res)", "def solve(ele):\n    ref = int(ele ** 0.5)\n    for i in range(ref - 3, ref + 3):\n        if i * i <= ele and (i + 1) ** 2 > ele:\n            ref = i\n    r = -1 if ref * (ref + 1) > ele else 0\n    r -= 1 if ref * (ref + 2) > ele else 0\n    return ref * 3 + r\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(solve(b) - solve(a - 1))", "def solve(ele):\n    ref = int(ele ** 0.5)\n    for i in range(ref - 3, ref + 3):\n        if i * i <= ele and (i + 1) ** 2 > ele:\n            ref = i\n    r = -1 if ref * (ref + 1) > ele else 0\n    r -= 1 if ref * (ref + 2) > ele else 0\n    return ref * 3 + r\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(solve(b) - solve(a - 1))", "import math\n\ndef floor_sqrt(x):\n    r = int(math.floor(math.sqrt(x)))\n    r -= 1\n    while r * r <= x:\n        r += 1\n    return r - 1\nfor t in range(int(input())):\n    (l, r) = map(int, input().split())\n    (ls, rs) = map(floor_sqrt, [l, r])\n    s = [ls ** 2, ls ** 2 + ls, ls ** 2 + 2 * ls, rs ** 2, rs ** 2 + rs, rs ** 2 + 2 * rs]\n    s = [si for si in s if l <= si <= r]\n    n = len(set(s))\n    if rs - ls - 1 > 0:\n        n += (rs - ls - 1) * 3\n    print(n)", "import math\n\ndef count(a):\n    if a == 0:\n        return 0\n    if a == 1:\n        return 1\n    if a == 2:\n        return 2\n    if a == 3:\n        return 3\n    if a == 4:\n        return 4\n    thing = math.floor(math.sqrt(a))\n    while (thing + 1) ** 2 <= a:\n        thing += 1\n    while thing ** 2 > a:\n        thing -= 1\n    ans = thing ** 2 - max(0, (thing - 2) * (thing - 1))\n    if (a - thing ** 2) // thing > 2:\n        a = 1 / 0\n    ans += (a - thing ** 2) // thing\n    return ans\nfor i in range(int(input())):\n    (q, w) = map(int, input().split())\n    print(count(w) - count(q - 1))", "import math\n\ndef f(n):\n    if n < 1:\n        return 0\n    a = max(math.floor(n ** 0.5) - 10, 0)\n    while a ** 2 <= n:\n        a += 1\n    a -= 1\n    ans = 3 * a - 2\n    if n >= a ** 2 + a:\n        ans += 1\n    if n >= a ** 2 + a * 2:\n        ans += 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    print(f(r) - f(l - 1))", "from decimal import *\ngetcontext().prec = 20\nnum_testcases = int(input())\nfor _ in range(num_testcases):\n    (left, right) = list(map(int, input().split()))\n    ans = 0\n    k_l = int(Decimal(left).sqrt())\n    k_l_squared = k_l ** 2\n    if k_l_squared >= left:\n        ans += 3\n    elif k_l_squared + k_l >= left:\n        ans += 2\n    else:\n        ans += 1\n    k_r = int(Decimal(right).sqrt())\n    ans += 3 * (k_r - k_l - 1)\n    k_r_squared = k_r * k_r\n    if k_r_squared + k_r + k_r <= right:\n        ans += 3\n    elif k_r_squared + k_r <= right:\n        ans += 2\n    else:\n        ans += 1\n    print(ans)", "import sys\nimport math\n\ndef sqrt(x):\n    l = 0\n    r = 1000000002\n    while r - l > 1:\n        c = (l + r) // 2\n        if c * c > x:\n            r = c\n        else:\n            l = c\n    return l\n\ndef f(x):\n    if x <= 0:\n        return 0\n    v = sqrt(x)\n    r = v * 3 - 2\n    if v * (v + 1) <= x:\n        r += 1\n        if v * (v + 2) <= x:\n            r += 1\n    return r\n\ndef solve():\n    inp = sys.stdin.readline\n    (l, r) = map(int, inp().split())\n    print(f(r) - f(l - 1))\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "from math import sqrt, floor\nfrom decimal import Decimal\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        (l, r) = map(int, input().split())\n        k = floor(Decimal(l).sqrt())\n        p = floor(Decimal(r).sqrt())\n        if k != p:\n            s = 3 * (p - k - 1)\n            if k ** 2 >= l:\n                s += 1\n            if k * (k + 1) >= l:\n                s += 1\n            if k * (k + 2) >= l:\n                s += 1\n            if p ** 2 <= r:\n                s += 1\n            if p * (p + 1) <= r:\n                s += 1\n            if p * (p + 2) <= r:\n                s += 1\n        else:\n            s = 0\n            if r >= k ** 2 >= l:\n                s += 1\n            if r >= k * (k + 1) >= l:\n                s += 1\n            if r >= k * (k + 2) >= l:\n                s += 1\n        print(s)\nmain()", "import math\nt = eval(input())\n\ndef countdays(s):\n    if s == 0:\n        return 0\n    s1 = math.isqrt(s)\n    count = 3 * s1 - 2 + s // s1 - s1\n    return count\nfor i in range(t):\n    lb = input().split()\n    r = eval(lb[0])\n    l = eval(lb[1])\n    print(countdays(l) - countdays(r - 1))", "import math\nt = eval(input())\n\ndef countdays(s):\n    if s == 0:\n        return 0\n    s1 = int(math.sqrt(s))\n    if (s1 + 1) ** 2 <= s:\n        s1 += 1\n    if s1 ** 2 > s:\n        s1 -= 1\n    count = 3 * s1 - 2 + s // s1 - s1\n    return count\nfor i in range(t):\n    lb = input().split()\n    r = eval(lb[0])\n    l = eval(lb[1])\n    print(countdays(l) - countdays(r - 1))", "from math import sqrt, floor\n\ndef get_sqrt(n):\n    (l, r) = (1, 10 ** 9)\n    while l < r:\n        mid = (l + r) // 2\n        if mid * mid <= n:\n            l = mid + 1\n        else:\n            r = mid - 1\n    if l * l <= n:\n        return l\n    else:\n        return l - 1\n\ndef get_num(n):\n    nn = get_sqrt(n)\n    if nn * (nn + 1) > n:\n        return (nn - 1) * 3 + 1\n    elif nn * (nn + 2) > n:\n        return (nn - 1) * 3 + 2\n    else:\n        return nn * 3\nt = int(input())\nfor _ in range(t):\n    (l, r) = input().split()\n    (l, r) = (int(l), int(r))\n    _sum = get_num(r)\n    if l > 1:\n        _sum -= get_num(l - 1)\n    print(_sum)", "def count1(N):\n    s = 0\n    for n in range(1, N + 1):\n        r = int(n ** 0.5)\n        if n % r == 0:\n            s += 1\n    return s\n\ndef intsqrt(n):\n    if n == 0:\n        return 0\n    x = n\n    while True:\n        y = x + n // x >> 1\n        if x == y or y == x + 1:\n            break\n        x = y\n    x = min(x, y)\n    assert x ** 2 <= n < (x + 1) ** 2\n    return x\n\ndef count2(N):\n    k = intsqrt(N)\n    if N >= k * (k + 2):\n        return 3 * k\n    if N >= k * (k + 1):\n        return 3 * k - 1\n    return 3 * k - 2\nt = int(input())\nfor i in range(t):\n    (l, r) = [int(x) for x in input().split()]\n    print(count2(r) - count2(l - 1))", "def root(n):\n    (left, right) = (0, 10 ** 10)\n    ans = 0\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid <= n:\n            ans = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n    return ans\nfor t in range(int(input())):\n    (a, b) = map(int, input().split())\n    if a == 1:\n        left = 0\n    else:\n        left_root = root(a - 1)\n        left = left_root + 2 * (left_root - 1)\n        left += (a - 1 - left_root ** 2) // left_root\n    right_root = root(b)\n    right = right_root + 2 * (right_root - 1)\n    right += (b - right_root ** 2) // right_root\n    print(right - left)", "t = int(input())\nm = 1000000000.0 + 7\n\ndef sqrAns(n):\n    l = int(0)\n    r = int(1000000000.0 + 10)\n    while r - l > 1:\n        mid = (l + r) // 2\n        if mid * mid > n:\n            r = mid\n        else:\n            l = mid\n    ans = l * 3 - 2\n    for i in range(0, 3):\n        if l * (l + i) <= n:\n            ans += 1\n    return ans\n\ndef solve():\n    (l, r) = map(int, input().split())\n    print(sqrAns(r) - sqrAns(l - 1))\nfor _ in range(t):\n    solve()", "import math\n\ndef fff(x):\n    (l, r) = (1, 1000000001)\n    while l < r:\n        m = (l + r + 1) // 2\n        if m * m <= x:\n            l = m\n        else:\n            r = m - 1\n    return l\n\ndef ff(x):\n    if x == 0:\n        return 0\n    y = fff(x)\n    yy = y * y\n    a = (y - 1) * 3 + 1\n    if x == yy:\n        return a\n    elif x < yy + y:\n        return a\n    elif x != yy + y + y:\n        return a + 1\n    else:\n        return a + 2\nt = int(input())\nfor _ in range(t):\n    lr = [int(ii) for ii in input().split()]\n    (l, r) = (lr[0], lr[1])\n    print(ff(r) - ff(l - 1))", "import math\n\ndef sqrt(n: int) -> int:\n    x = math.floor(math.sqrt(n))\n    delta = math.inf\n    for i in range(x - 1, x + 1):\n        if abs(i * i - n) < delta and i * i <= n:\n            delta = abs(i * i - n)\n            res = i\n    return res\n\ndef count(n: int) -> int:\n    i = int(sqrt(n) ** 2)\n    k = 0\n    for _ in range(3):\n        if i > n:\n            k += 1\n        i += sqrt(n)\n    return sqrt(n) * 3 - k\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(count(b) - count(a - 1))", "import math\n\ndef binary_search(x):\n    left = 0\n    right = 2000000123\n    while right > left:\n        mid = (left + right) // 2\n        if mid * mid > x:\n            right = mid\n        else:\n            left = mid + 1\n    return left - 1\n\ndef luxury_numbers(l, r):\n    left = binary_search(l)\n    right = binary_search(r)\n    ans = 0\n    if left != right:\n        ans += (right - left - 1) * 3\n    for i in range(3):\n        if left * (left + i) >= l and left * (left + i) <= r:\n            ans += 1\n        if left != right:\n            if right * (right + i) >= l and right * (right + i) <= r:\n                ans += 1\n    print(ans)\nT = int(input())\nfor _ in range(T):\n    (l, r) = tuple(map(int, input().split()))\n    luxury_numbers(l, r)", "import math\n\ndef sqrt(n: int) -> int:\n    x = math.floor(math.sqrt(n))\n    delta = math.inf\n    for i in range(x - 1, x + 2):\n        if abs(i * i - n) < delta and i * i <= n:\n            delta = abs(i * i - n)\n            res = i\n    return res\n\ndef count(n: int) -> int:\n    i = int(sqrt(n) ** 2)\n    k = 0\n    for _ in range(3):\n        if i > n:\n            k += 1\n        i += sqrt(n)\n    return sqrt(n) * 3 - k\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(count(b) - count(a - 1))", "import math\n\ndef sqrt(n: int) -> int:\n    x = math.floor(math.sqrt(n))\n    delta = math.inf\n    for i in range(x - 1, x + 1):\n        if abs(i * i - n) < delta and i * i <= n:\n            delta = abs(i * i - n)\n            res = i\n    return res\n\ndef count(n: int) -> int:\n    i = int(sqrt(n) ** 2)\n    k = 0\n    for _ in range(3):\n        if i > n:\n            k += 1\n        i += sqrt(n)\n    return sqrt(n) * 3 - k\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(count(b) - count(a - 1))", "import math\n\ndef sqrt(n):\n    (i, j) = (1, min(n, 1000000000.0 + 1))\n    r = 1\n    while i < j:\n        m = int((i + j) // 2)\n        if m * m > n:\n            j = m\n        else:\n            r = m\n            i = m + 1\n    return r\n\ndef solve():\n    t = int(input())\n    for _ in range(t):\n        (I, J) = map(int, input().split())\n        i = sqrt(I)\n        j = sqrt(J)\n        ans = (j - i + 1) * 3\n        for k in range(3):\n            aux = i * (i + k)\n            if aux < I:\n                ans -= 1\n        for k in range(2, -1, -1):\n            aux = j * (j + k)\n            if aux > J:\n                ans -= 1\n        print(ans)\nsolve()", "def sq_root(x):\n    (left, right) = (0, 2000000100)\n    while right > left:\n        mid = left + (right - left) // 2\n        if mid * mid > x:\n            right = mid\n        else:\n            left = mid + 1\n    return left - 1\ntest = int(input())\nwhile test:\n    (l, r) = map(int, input().split())\n    (left, right) = (sq_root(l), sq_root(r))\n    range_l = [max(l, left * left), (left + 1) * (left + 1) - 1]\n    range_r = [right * right, min(r, (right + 1) * (right + 1))]\n    ans = (right - left - 1) * 3\n    for i in range(left, left + 3):\n        if range_l[0] <= left * i <= range_l[1]:\n            ans += 1\n    for i in range(right, right + 3):\n        if range_r[0] <= right * i <= range_r[1]:\n            ans += 1\n    print(ans)\n    test -= 1", "for _ in range(int(input())):\n    (l, r) = map(int, input().split())\n\n    def get(x):\n        (l, r) = (0, 10 ** 9)\n        while l < r:\n            mid = (l + r + 1) // 2\n            if (mid + 1) * (mid + 1) - 1 <= x:\n                l = mid\n            else:\n                r = mid - 1\n        res = 3 * l\n        l += 1\n        if l * l <= x:\n            res += 1\n            if l * l + l <= x:\n                res += 1\n        return res\n    print(get(r) - get(l - 1))", "import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nimport math\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef sqrt1(n):\n    a = 1\n    b = n\n    while a <= b:\n        m = a + (b - a) // 2\n        if m * m <= n:\n            ans = m\n            a = m + 1\n        else:\n            b = m - 1\n    return ans\nt = inp()\nfor i in range(t):\n    (l, r) = mp()\n    l1 = int(sqrt1(l))\n    r1 = int(sqrt1(r))\n    s = (r1 - l1 - 1) * 3\n    if l1 * l1 >= l:\n        s += 1\n    if l1 * l1 + l1 >= l:\n        s += 1\n    if l1 * l1 + 2 * l1 >= l:\n        s += 1\n    if r1 * r1 <= r:\n        s += 1\n    if r1 * r1 + r1 <= r:\n        s += 1\n    if r1 * r1 + 2 * r1 <= r:\n        s += 1\n    print(s)", "import sys\ninput = sys.stdin.readline\n\ndef g(x):\n    (l, r) = (1, 10 ** 10)\n    ans = 0\n    while l <= r:\n        mid = (l + r) // 2\n        if mid ** 2 <= x:\n            l = mid + 1\n            ans = mid\n        else:\n            r = mid - 1\n    p = 3 * ans\n    if x < ans * ans + 2 * ans:\n        p -= 1\n    if x < ans * ans + ans:\n        p -= 1\n    return p\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    l -= 1\n    print(g(r) - g(l))", "from math import comb, perm\nimport sys\ninput = sys.stdin.readline\n\ndef f(x):\n    (l, r) = (1, 10 ** 10)\n    ans = 0\n    while l <= r:\n        mid = (l + r) // 2\n        if mid ** 2 <= x:\n            l = mid + 1\n            ans = mid\n        else:\n            r = mid - 1\n    p = 3 * ans\n    if x < ans * ans + 2 * ans:\n        p -= 1\n    if x < ans * ans + ans:\n        p -= 1\n    return p\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    print(f(r) - f(l - 1))", "import math\n\ndef mySqrt(l):\n    low = 0\n    high = 10000000000\n    while low < high:\n        mid = int((low + high) / 2)\n        if mid * mid > l:\n            high = mid\n        else:\n            low = mid + 1\n    return low - 1\n\ndef solve(l, r):\n    if l == r:\n        temp = mySqrt(l)\n        if l % temp == 0:\n            print(1)\n        else:\n            print(0)\n    else:\n        low = mySqrt(l)\n        high = mySqrt(r)\n        cnt = 0\n        if high == low:\n            for i in range(3):\n                if low * (low + i) >= l and low * (low + i) <= r:\n                    cnt = cnt + 1\n        else:\n            dif = high - low - 1\n            for i in range(3):\n                if low * (low + i) >= l and low * (low + i) <= r:\n                    cnt = cnt + 1\n            for i in range(3):\n                if high * (high + i) >= l and high * (high + i) <= r:\n                    cnt = cnt + 1\n            cnt = cnt + dif * 3\n        print(cnt)\nt = int(input())\nfor i in range(t):\n    l = list(map(int, input().split()))\n    solve(l[0], l[1])"]