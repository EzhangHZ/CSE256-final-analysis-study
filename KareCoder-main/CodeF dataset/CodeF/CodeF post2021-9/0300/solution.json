["import sys\n\ndef run():\n    n = int(input())\n    line = sys.stdin.readline().strip()\n    count = len(line) - 1\n    value = 0\n    for i in range(len(line)):\n        if line[i] == 'L':\n            value += i\n        if line[i] == 'R':\n            value += count - i\n    values = []\n    l = 0\n    r = len(line) - 1\n    while l < r:\n        if line[l] == 'L':\n            value -= l\n            value += count - l\n            values.append(value)\n        if line[r] == 'R':\n            value += r\n            value -= count - r\n            values.append(value)\n        l += 1\n        r -= 1\n    values.extend([value for _ in range(n - len(values))])\n    print(' '.join((str(x) for x in values)))\nt = int(input())\nfor _ in range(t):\n    run()", "def line_score(s_len, s):\n    biggest_change_earn = []\n    for (i, direction) in enumerate(s):\n        (left, right) = (i, s_len - i - 1)\n        if direction == 'L':\n            biggest_change_earn.append(right - left)\n        else:\n            biggest_change_earn.append(left - right)\n    biggest_change_earn.sort()\n    curr_score = 0\n    for (i, direction) in enumerate(s):\n        if direction == 'L':\n            curr_score += i\n        else:\n            curr_score += s_len - i - 1\n    scores = []\n    while biggest_change_earn and biggest_change_earn[-1] > 0:\n        curr_score += biggest_change_earn.pop()\n        scores.append(curr_score)\n    scores.extend([curr_score] * len(biggest_change_earn))\n    return scores\nnum_test_cases = int(input())\nfor test_case in range(num_test_cases):\n    s_len = int(input())\n    s = input()\n    print(' '.join(list(map(str, line_score(s_len, s)))))", "t = int(input())\n\ndef solve(n, dirs):\n    counts = []\n    m = n - 1\n    for i in range(n):\n        if dirs[i] == 'L':\n            counts.append(i)\n        else:\n            counts.append(m - i)\n    counts.sort()\n    k = sum(counts)\n    opts = []\n    for i in range(n):\n        u = counts[i]\n        v = m - u\n        if v > u:\n            k -= u\n            k += v\n        opts.append(str(k))\n    print(' '.join(opts))\nfor i in range(t):\n    n = int(input())\n    dirs = input()\n    solve(n, dirs)", "def solve():\n    k = int(input())\n    a = input()\n    sum_a = 0\n    n = len(a)\n    for i in range(n):\n        if a[i] == 'R':\n            sum_a += n - i - 1\n        else:\n            sum_a += i\n    s = []\n    for i in range(n // 2 + 1):\n        if i == n // 2 and n % 2 == 1:\n            r = a[i]\n            if r == 'L':\n                o = sum_a - i + (n - i - 1)\n                sum_a = max(sum_a, o)\n                s.append(sum_a)\n        else:\n            r = a[i]\n            l = a[-(i + 1)]\n            if r == 'L':\n                o = sum_a - i + (n - i - 1)\n                sum_a = max(sum_a, o)\n                s.append(sum_a)\n            if l == 'R':\n                o = sum_a - i + (n - i - 1)\n                sum_a = max(sum_a, o)\n                s.append(sum_a)\n    s += [sum_a] * (n - len(s))\n    return ' '.join([str(i) for i in s])\nt = int(input())\nans = []\nwhile t:\n    ans.append(solve())\n    t -= 1\nprint('\\n'.join(ans))", "import math\n\ndef solve():\n    k = int(input())\n    s = list(input())\n    n = len(s)\n    val = 0\n    for i in range(len(s)):\n        if s[i] == 'L':\n            val += i\n        else:\n            val += n - 1 - i\n    l = 0\n    h = n - 1\n    ans = []\n    while k > 0 and l < h:\n        if s[l] == 'L' and l <= n // 2:\n            k -= 1\n            val += n - 1 - 2 * l\n            l += 1\n            ans.append(val)\n        else:\n            l += 1\n        if k < 0:\n            break\n        if s[h] == 'R' and h >= n // 2:\n            k -= 1\n            val += 2 * h - n + 1\n            ans.append(val)\n            h -= 1\n        else:\n            h -= 1\n    while k > 0:\n        ans.append(val)\n        k -= 1\n    print(' '.join(map(str, ans)))\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1", "def solve(n, s):\n    value = []\n    origional = 0\n    for (i, string) in enumerate(s):\n        if string == 'L':\n            value.append(n - i - 1 - i)\n            origional += i\n        else:\n            value.append(i - (n - i - 1))\n            origional += n - i - 1\n    value = sorted(value)[::-1]\n    ans = []\n    i = 0\n    while i < n:\n        if value[i] > 0:\n            origional += value[i]\n        ans.append(origional)\n        i += 1\n    return ' '.join([str(i) for i in ans])\nt = int(input())\nfor T in range(t):\n    n = int(input())\n    s = input()\n    print(solve(n, s))", "N = int(input())\nfor k in range(N):\n    len_s = int(input())\n    s = input()\n    res = []\n    cur_res = 0\n    list_analog = []\n    for i in range(len_s):\n        if s[i] == 'L':\n            cur_res += i\n            analog = len_s - 2 * i - 1\n            if analog > 0:\n                list_analog.append(analog)\n        else:\n            cur_res += len_s - i - 1\n            analog = 2 * i - len_s + 1\n            if analog > 0:\n                list_analog.append(analog)\n    list_analog.sort()\n    res = []\n    if len(list_analog) == 0:\n        res.append(cur_res)\n    for el in list_analog[::-1]:\n        cur_res += el\n        res.append(cur_res)\n    while len(res) != len_s:\n        res.append(res[-1])\n    print(' '.join(map(str, res)))", "def solve(num, line):\n    count = []\n    for i in range(num):\n        if line[i] == 'L':\n            count.append(i)\n        else:\n            count.append(num - i - 1)\n    count.sort()\n    current_sum = sum(count)\n    sums = []\n    for i in range(num):\n        current_num = count[i]\n        reversed_num = num - current_num - 1\n        if reversed_num > current_num:\n            current_sum = current_sum - current_num + reversed_num\n        sums.append(str(current_sum))\n    print(' '.join(sums))\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    dirs = input()\n    solve(n, dirs)", "import sys\n\ndef input(type=str):\n    return type(sys.stdin.readline().strip())\n\ndef input_n(type=str):\n    return list(map(type, input().split()))\nt = input(int)\nfor _ in range(t):\n    n = input(int)\n    cmds = input()\n    n = len(cmds)\n    sum = 0\n    for (i, cmd) in enumerate(cmds):\n        if cmd == 'L':\n            sum += i\n        elif cmd == 'R':\n            sum += n - 1 - i\n    sums = []\n    start = 0\n    end = len(cmds) - 1\n    while 0 <= start <= end < n:\n        if cmds[start] == 'L':\n            sum += -start + (n - 1 - start)\n            sums.append(sum)\n        start += 1\n        if cmds[end] == 'R':\n            sum += -(n - 1 - end) + end\n            sums.append(sum)\n        end -= 1\n    if len(sums) == 0:\n        sums.append(sum)\n    while len(sums) < n:\n        sums.append(sums[-1])\n    print(' '.join(list(map(str, sums))))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    total = 0\n    p = 0\n    stack = []\n    result = []\n    for i in range(n):\n        if i < n // 2:\n            if s[i] == 'L':\n                total += i\n                stack.append(n - 1 - i * 2)\n            else:\n                total += n - 1 - i\n        elif s[i] == 'R':\n            total += n - 1 - i\n            stack.append(i - (n - 1 - i))\n        else:\n            total += i\n    stack.sort()\n    while stack:\n        total += stack.pop()\n        result.append(total)\n    m = len(result)\n    if m < n:\n        for i in range(n - m):\n            result.append(total)\n    print(' '.join(map(str, result)))", "from sys import stdin\nrd = stdin.readline\nfor _ in range(int(rd())):\n    n = int(rd())\n    s = rd().strip()\n    res = []\n    init = 0\n    for i in range(n):\n        if s[i] == 'R':\n            init += n - i - 1\n        else:\n            init += i\n    for i in range(n // 2):\n        if s[i] == 'L':\n            init += n - i - 1 - i\n            res.append(str(init))\n        if s[n - i - 1] == 'R':\n            init += n - 1 - 2 * i\n            res.append(str(init))\n    while len(res) < n:\n        res.append(str(init))\n    print(' '.join(res))", "import random\n\ndef sol(A):\n    curr = 0\n    for i in range(len(A)):\n        if A[i] == 'L':\n            curr += i\n        else:\n            curr += len(A) - i - 1\n    i = 0\n    j = len(A) - 1\n    count = 0\n    ans = []\n    while i <= j and count < len(A):\n        if i == len(A) - j - 1:\n            if A[i] == 'L':\n                curr += len(A) - i - 1 - i\n                ans.append(curr)\n                count += 1\n            i += 1\n        else:\n            if A[j] == 'R':\n                curr += j - (len(A) - j - 1)\n                ans.append(curr)\n                count += 1\n            j -= 1\n    ans = ans + [ans[-1]] * (len(A) - count) if count > 0 else [curr] * len(A)\n    return ' '.join(map(str, ans))\nx = int(input())\nfor _ in range(x):\n    n = int(input())\n    A = input()\n    print(sol(A))", "from operator import le\n\ndef solution(n, t):\n    if n == 1:\n        return 0\n    person = []\n    s = 1\n    for i in t:\n        if i == 'L':\n            person.append(s - 1)\n        else:\n            person.append(n - s)\n        s += 1\n    total = sum(person)\n    mid = n // 2\n    left = [person[i] for i in range(n // 2) if t[i] == 'L']\n    right = [person[i] for i in range(n // 2 + n % 2, n) if t[i] == 'R']\n    left = left[::-1]\n    res = []\n    while len(right) + len(left):\n        try:\n            if left[-1] < right[-1]:\n                total += n - 2 * left.pop() - 1\n            else:\n                total += n - 2 * right.pop() - 1\n        except:\n            if right:\n                total += n - 2 * right.pop() - 1\n            else:\n                total += n - 2 * left.pop() - 1\n        res.append(str(total))\n    if len(res) == 0:\n        return ' '.join([str(total)] * n)\n    if len(res) != n:\n        res = res + [res[-1]] * (n - len(res))\n    return ' '.join(res)\nN = int(input())\nfor _ in range(N):\n    n = int(input())\n    t = list(input())\n    print(solution(n, t))", "N = int(input())\nfor k in range(N):\n    len_s = int(input())\n    s = input()\n    res = []\n    cur_res = 0\n    list_analog = []\n    for i in range(len_s):\n        if s[i] == 'L':\n            cur_res += i\n            analog = len_s - 2 * i - 1\n            if analog > 0:\n                list_analog.append(analog)\n        else:\n            cur_res += len_s - i - 1\n            analog = 2 * i - len_s + 1\n            if analog > 0:\n                list_analog.append(analog)\n    list_analog.sort()\n    res = []\n    if len(list_analog) == 0:\n        res.append(cur_res)\n    for el in list_analog[::-1]:\n        cur_res += el\n        res.append(cur_res)\n    while len(res) != len_s:\n        res.append(res[-1])\n    print(' '.join(map(str, res)))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    line = input()\n    first_value = []\n    m = n - 1\n    for i in range(n):\n        if line[i] == 'L':\n            first_value.append(i)\n        else:\n            first_value.append(m - i)\n    first_value.sort()\n    k = sum(first_value)\n    values = []\n    for i in range(n):\n        v1 = first_value[i]\n        v2 = m - v1\n        if v2 > v1:\n            k -= v1\n            k += v2\n        values.append(str(k))\n    print(' '.join(values))", "from collections import defaultdict\nt = int(input())\n\ndef solve():\n    n = int(input())\n    s = input()\n    k = n // 2\n    arr = []\n    for i in range(n - 1, k - 1, -1):\n        arr += [i]\n    if n % 2 == 0:\n        for i in range(k, n):\n            arr += [i]\n    else:\n        for i in range(k + 1, n):\n            arr += [i]\n    brr = []\n    for i in range(n):\n        if s[i] == 'L':\n            score = i\n        else:\n            score = n - 1 - i\n        brr += [score]\n    initial_score = sum(brr)\n    crr = []\n    for i in range(n):\n        crr += [arr[i] - brr[i]]\n    crr.sort(reverse=True)\n    ans = []\n    for i in range(n):\n        ans += [crr[i] + initial_score]\n        initial_score = ans[-1]\n    print(' '.join((str(ele) for ele in ans)))\nwhile t:\n    solve()\n    t -= 1", "t = int(input())\nresult = []\nfor i in range(t):\n    n = int(input())\n    ch = input()\n    test = []\n    if n % 2 == 1:\n        optimal = 'R' * (n // 2) + ch[n // 2] + 'L' * (n // 2)\n    else:\n        optimal = 'R' * (n // 2) + 'L' * (n // 2)\n    sum = 0\n    for j in range(len(ch)):\n        if ch[j] == 'L':\n            sum += j\n        else:\n            sum += n - 1 - j\n    for j in range(len(ch) // 2):\n        if ch[j] != optimal[j]:\n            difference = n - 1 - 2 * j\n            sum += difference\n            test.append(str(sum))\n        if ch[n - 1 - j] != optimal[n - 1 - j]:\n            difference = n - 1 - j - j\n            sum += difference\n            test.append(str(sum))\n    h = n - len(test)\n    test = test + h * [str(sum)]\n    result.append(' '.join(test))\nfor i in result:\n    print(i)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    sum = 0\n    a = []\n    for i in range(n):\n        if s[i] == 'L':\n            cur = i\n        else:\n            cur = n - 1 - i\n        sum += cur\n        a.append(max(i, n - 1 - i) - cur)\n    a.sort(reverse=True)\n    ans = []\n    for i in range(n):\n        sum += a[i]\n        ans.append(str(sum))\n    print(' '.join(ans))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    arr = []\n    cur = 0\n    for i in range(len(s)):\n        if s[i] == 'L':\n            arr.append(i)\n        else:\n            arr.append(len(s) - 1 - i)\n        cur += arr[-1]\n    arr.sort()\n    res = []\n    for i in range(len(arr)):\n        new = len(s) - arr[i] - 1\n        if new > arr[i]:\n            cur += new - arr[i]\n        res.append(str(cur))\n    print(' '.join(res))", "import sys\n\ndef helper(s, n):\n    arr = []\n    ssum = 0\n    for i in range(n):\n        if s[i] == 'L':\n            arr.append(n - 1 - 2 * i)\n            ssum += i\n        else:\n            ssum += n - 1 - i\n            arr.append(2 * i + 1 - n)\n    arr.sort(reverse=True)\n    for i in range(1, n):\n        arr[i] += arr[i - 1]\n    ans = []\n    for i in range(n):\n        if i == 0:\n            if arr[i] <= 0:\n                ans.append(str(ssum))\n            else:\n                ans.append(str(ssum + arr[i]))\n        elif arr[i] - arr[i - 1] <= 0:\n            ans.append(str(ans[-1]))\n        else:\n            ans.append(str(ssum + arr[i]))\n    return ans\ninput = sys.stdin.readline\n\ndef inp():\n    print('Enter integer input here: ')\n    return int(input())\n\ndef inlt():\n    print('Enter list input here: ')\n    return list(map(int, input().split()))\n\ndef insr():\n    print('Enter string input here: ')\n    return str(input())\n\ndef invr():\n    print('Enter multiple integer input here: ')\n    return map(int, input().split())\nT = int(input())\nfor i in range(T):\n    l = int(input())\n    s = str(input())\n    ans = helper(s, l)\n    x = ' '.join(ans)\n    print(x)", "num_cases = int(input())\nfor i in range(num_cases):\n    word_length = int(input())\n    word = input()\n    add_list = []\n    score = 0\n    for (j, dir) in enumerate(list(word)):\n        to_left = j\n        to_right = word_length - j - 1\n        if dir == 'L':\n            new = to_left\n        if dir == 'R':\n            new = to_right\n        score += new\n        add_list.append(max(to_left, to_right) - new)\n    add_list.sort(reverse=True)\n    out_list = []\n    for j in add_list:\n        score += j\n        out_list.append(str(score))\n    print(' '.join(out_list))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input().strip()\n    _sum = 0\n    deltas = []\n    for i in range(n):\n        if s[i] == 'L':\n            _sum += i\n            deltas.append(max(0, n - 1 - 2 * i))\n        else:\n            _sum += n - 1 - i\n            deltas.append(max(0, 2 * i + 1 - n))\n    deltas.sort(reverse=True)\n    _ans = [_sum]\n    for delta in deltas:\n        _ans.append(_ans[-1] + delta)\n    print(' '.join([str(i) for i in _ans[1:]]))", "T = int(input())\nfor _ in range(T):\n    l = int(input())\n    a = input()\n    current = 0\n    for i in range(l):\n        if a[i] == 'L':\n            current += i\n        else:\n            current += l - i - 1\n    if l % 2 == 1:\n        i = l // 2\n        j = 0\n        arr = []\n        while j < i:\n            if a[j] == 'L':\n                arr.append(j)\n            if a[l - j - 1] == 'R':\n                arr.append(l - j - 1)\n            j += 1\n    else:\n        i = l // 2 - 1\n        j = 0\n        arr = []\n        while j <= i:\n            if a[j] == 'L':\n                arr.append(j)\n            if a[l - j - 1] == 'R':\n                arr.append(l - j - 1)\n            j += 1\n    ans = []\n    for i in arr:\n        if i <= (l - 1) // 2:\n            current += l - i - 1 - i\n        else:\n            current += i - l + i + 1\n        ans.append(current)\n    ans += [current] * (l - len(ans))\n    print(' '.join(map(str, ans)))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    delta = []\n    value = 0\n    answer = []\n    for (i, x) in enumerate(s):\n        current = i if x == 'L' else n - 1 - i\n        value += current\n        best = max(i, n - 1 - i)\n        delta.append(best - current)\n    delta.sort(reverse=True)\n    for k in range(n):\n        value += delta[k]\n        answer.append(value)\n    print(' '.join([str(x) for x in answer]))", "def f(n, s):\n    numbers = []\n    sum = 0\n    for i in range(n):\n        if s[i] == 'L':\n            sum += i\n        if s[i] == 'R':\n            sum += n - 1 - i\n    i = 0\n    for k in range(1, n + 1):\n        while i < n and s[i // 2 if i % 2 == 0 else n - 1 - i // 2] == ('R' if i % 2 == 0 else 'L'):\n            i += 1\n        if i == n:\n            numbers.append(str(sum))\n            continue\n        if i % 2 == 0:\n            sum += n - 1 - i // 2 - i // 2\n        else:\n            j = n - 1 - i // 2\n            sum += j - (n - 1 - j)\n        i += 1\n        numbers.append(str(sum))\n    return numbers\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    nums = f(n, s)\n    print(' '.join(nums))", "def cal(n, s):\n    tot = 0\n    p = []\n    for i in range(n):\n        if s[i] == 'L':\n            tot += i\n            p.append(n - i - 1 - i)\n        else:\n            tot += n - i - 1\n            p.append(i - (n - i - 1))\n    p.sort(reverse=True)\n    ans = []\n    for i in p:\n        if i > 0:\n            tot += i\n            ans.append(tot)\n        else:\n            ans += [tot] * (n - len(ans))\n            break\n    return ans\nfor jj in range(int(input())):\n    n = int(input())\n    s = input()\n    print(*cal(n, s))", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    cnt = 0\n    res = []\n    for i in range(n):\n        if s[i] == 'L':\n            cnt += i\n        else:\n            cnt += n - i - 1\n    for i in range(n // 2):\n        if s[i] == 'L':\n            cnt = cnt + (n - i - 1 - i)\n            res.append(cnt)\n        if s[n - i - 1] == 'R':\n            cnt = cnt + (n - i - 1 - i)\n            res.append(cnt)\n    if res:\n        i = len(res)\n        j = res[i - 1]\n        while i < n:\n            res.append(j)\n            i += 1\n    else:\n        res = [cnt] * n\n    print(*res)", "def solve(s):\n\n    def check_is_ideal(s):\n        n = len(s)\n        h = n // 2\n        return s[:h] == 'R' * h and s[h + n % 2:] == 'L' * h\n\n    def calc(s):\n        ans = 0\n        n = len(s)\n        for i in range(len(s)):\n            ans += i if s[i] == 'L' else n - i - 1\n        return ans\n    n = len(s)\n    k = 0\n    cur = calc(s)\n    for i in range(n // 2):\n        if s[i] == 'L':\n            cur = cur - i + n - i - 1\n            print(cur, end=' ')\n            k += 1\n        if s[n - i - 1] == 'R':\n            cur = cur - i + n - i - 1\n            print(cur, end=' ')\n            k += 1\n    print(((str(cur) + ' ') * (n - k))[:-1])\nfor _ in range(int(input())):\n    input()\n    solve(input())", "for _ in range(int(input())):\n    n = int(input())\n    line = input()\n    out_init = 0\n    out = []\n    for x in range(n):\n        if line[x] == 'L':\n            out_init += x\n        if line[x] == 'R':\n            out_init += n - x - 1\n    for x in range(n):\n        if line[x] == 'L':\n            tmp1 = x\n            tmp2 = n - x - 1\n            if tmp2 > tmp1:\n                out.append(tmp2 - tmp1)\n        if line[x] == 'R':\n            tmp2 = x\n            tmp1 = n - x - 1\n            if tmp2 > tmp1:\n                out.append(tmp2 - tmp1)\n    out = sorted(out, reverse=True)\n    out2 = []\n    for x in out:\n        out2.append(out_init + x)\n        out_init += x\n    if not out:\n        for x in range(n):\n            out.append(out_init)\n        print(' '.join([str(x) for x in out]))\n        continue\n    for x in range(n - len(out2)):\n        out2.append(out2[-1])\n    print(' '.join([str(x) for x in out2]))", "__author__ = 'vipli'\nt = int(input())\nout = []\nfor i in range(t):\n    n = int(input())\n    line = str(input())\n    this_count_sum = 0\n    n_change_add = []\n    for j in range(n):\n        now_dir = line[j]\n        now_count = j\n        if now_dir == 'R':\n            now_count = n - 1 - j\n        this_count_sum += now_count\n        now_max_c = max(j, n - 1 - j)\n        n_change_add.append(now_max_c - now_count)\n    n_change_add.sort(reverse=True)\n    n_change_add[0] += this_count_sum\n    for j in range(1, n):\n        n_change_add[j] += n_change_add[j - 1]\n    out.append(n_change_add)\nfor data in out:\n    line = [str(v) for v in data]\n    line = ' '.join(line)\n    print(line)", "import math\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, list(input().split(' '))))\n\ndef insr():\n    s = input()\n    return s\nt = inp()\nfor _ in range(t):\n    n = inp()\n    people = insr()\n    ans = []\n    total = 0\n    changes = []\n    for i in range(n):\n        direc = people[i]\n        left = i\n        right = n - i - 1\n        if direc == 'L':\n            total += left\n            changes.append(right - left)\n        else:\n            total += right\n            changes.append(left - right)\n    changes.sort()\n    ans = []\n    prev = 0\n    for i in range(1, n + 1):\n        plus = max(0, changes[n - i])\n        prev += plus\n        ans.append(str(total + prev))\n    print(' '.join(ans))", "def val(a):\n    ans = []\n    for i in range(len(a)):\n        if a[i] == 'L':\n            ans.append(i)\n        else:\n            ans.append(len(a) - i - 1)\n    return ans\n\ndef fun(a, k):\n    an = []\n    a = list(a)\n    s = val(a)\n    ln = len(a)\n    sm = sum(s)\n    i = 0\n    j = len(a) - 1\n    while i <= j:\n        if a[i] == 'L':\n            a[i] = 'r'\n            sm += ln - i - 1\n            sm -= s[i]\n            an.append(sm)\n        i += 1\n        if a[j] == 'R':\n            a[j] = 'l'\n            sm += j\n            sm -= s[j]\n            an.append(sm)\n        j -= 1\n    if len(an) == 0:\n        an = [sm]\n    lna = len(an)\n    for k in range(ln - lna):\n        an.append(an[-1])\n    return an\nfor _ in range(int(input())):\n    l = int(input())\n    n = input()\n    print(*fun(n, l))", "for _ in range(int(input())):\n    n = int(input())\n    line = input()\n    out_init = 0\n    out = []\n    for x in range(n):\n        if line[x] == 'L':\n            out_init += x\n        if line[x] == 'R':\n            out_init += n - x - 1\n    for x in range(n):\n        if line[x] == 'L':\n            tmp1 = x\n            tmp2 = n - x - 1\n            if tmp2 > tmp1:\n                out.append(tmp2 - tmp1)\n        if line[x] == 'R':\n            tmp2 = x\n            tmp1 = n - x - 1\n            if tmp2 > tmp1:\n                out.append(tmp2 - tmp1)\n    out = sorted(out, reverse=True)\n    out2 = []\n    for x in out:\n        out2.append(out_init + x)\n        out_init += x\n    if not out:\n        for x in range(n):\n            out.append(out_init)\n        print(' '.join([str(x) for x in out]))\n        continue\n    for x in range(n - len(out2)):\n        out2.append(out2[-1])\n    print(' '.join([str(x) for x in out2]))", "t = int(input())\nfor ncase in range(1, t + 1):\n    n = int(input())\n    s = input()\n    diff = []\n    score = []\n    s0 = 0\n    for i in range(n):\n        if s[i] == 'L':\n            diff.append(n - i - 1 - i)\n            s0 += i\n        else:\n            diff.append(i - (n - i - 1))\n            s0 += n - 1 - i\n        if diff[i] < 0:\n            diff[i] = 0\n        else:\n            diff[i] = diff[i]\n    diff.sort(reverse=True)\n    score.append(s0)\n    for i in range(1, n + 1):\n        score.append(score[i - 1] + diff[i - 1])\n    print(' '.join((str(s) for s in score[1:])))", "import heapq\n\ndef solve():\n    x = int(input())\n    for __ in range(x):\n        n = int(input())\n        st = list(str(input()))\n        arr = [0] * len(st)\n        hp = []\n        s = 0\n        for i in range(len(st)):\n            if st[i] == 'L':\n                arr[i] = i\n                if i < n - i - 1:\n                    heapq.heappush(hp, -1 * (n - i - 1 - i))\n            else:\n                arr[i] = n - i - 1\n                if n - i - 1 < i:\n                    heapq.heappush(hp, -1 * (i - (n - i - 1)))\n            s += arr[i]\n        count = 0\n        res = []\n        while hp and count < n:\n            s -= heapq.heappop(hp)\n            count += 1\n            res.append(str(s))\n        while count < n:\n            count += 1\n            res.append(str(s))\n        print(' '.join(res))\nsolve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    score = 0\n    for (i, c) in enumerate(s):\n        if c == 'L':\n            score += i\n        else:\n            score += n - 1 - i\n    scores = []\n    (i, j) = (0, n - 1)\n    for k in range(n):\n        while s[i] == 'R' and i < n // 2:\n            i += 1\n        while s[j] == 'L' and j >= n // 2:\n            j -= 1\n        if i < n // 2 and i <= n - 1 - j:\n            score += n - 2 * i - 1\n            i += 1\n        elif j >= n // 2 and i >= n - 1 - j:\n            score += 2 * j - n + 1\n            j -= 1\n        scores.append(score)\n    print(' '.join(map(str, scores)))", "def val(a):\n    ans = []\n    for i in range(len(a)):\n        if a[i] == 'L':\n            ans.append(i)\n        else:\n            ans.append(len(a) - i - 1)\n    return ans\n\ndef fun(a, k):\n    an = []\n    a = list(a)\n    s = val(a)\n    ln = len(a)\n    sm = sum(s)\n    i = 0\n    j = len(a) - 1\n    while i <= j:\n        if a[i] == 'L':\n            a[i] = 'r'\n            sm += ln - i - 1\n            sm -= s[i]\n            an.append(sm)\n        i += 1\n        if a[j] == 'R':\n            a[j] = 'l'\n            sm += j\n            sm -= s[j]\n            an.append(sm)\n        j -= 1\n    if not an:\n        an = [sm]\n    lna = len(an)\n    for i in range(ln - lna):\n        an.append(an[-1])\n    return an\nfor _ in range(int(input())):\n    l = int(input())\n    n = input()\n    print(*fun(n, l))", "def count(peop):\n    res = 0\n    for p in range(len(peop)):\n        if peop[p] == 'L':\n            res += p\n        else:\n            res += len(peop) - p - 1\n    return res\nfor _ in range(int(input())):\n    length = int(input())\n    people = input()\n    results = []\n    for i in range(length // 2):\n        if people[i] == 'L':\n            if results:\n                results.append(results[-1] + length - 1 - i * 2)\n            else:\n                results.append(count(people) + length - 1 - i * 2)\n        if people[(i + 1) * -1] == 'R':\n            if results:\n                results.append(results[-1] + length - 1 - i * 2)\n            else:\n                results.append(count(people) + length - 1 - i * 2)\n    if len(results) == 0:\n        results.append(count(people))\n    while len(results) < len(people):\n        results.append(results[-1])\n    print(*results)", "import heapq\noutput = []\nt = int(input())\nfor i in range(t):\n    cur = []\n    (n, l) = (int(input()), input())\n    count = 0\n    h = []\n    for j in range(n):\n        if l[j] == 'L':\n            count += j\n            h.append(-(n - j - 1 - j))\n        else:\n            count += n - j - 1\n            h.append(-(j - (n - j - 1)))\n    heapq.heapify(h)\n    while h:\n        cv = -heapq.heappop(h)\n        if cv > 0:\n            count += cv\n        cur.append(str(count))\n    output.append('\\t'.join(cur))\nprint('\\n'.join(output))", "def solve():\n    n = int(input())\n    s = input()\n    l = []\n    curSum = 0\n    ret = []\n    for i in range(0, n):\n        if s[i] == 'L':\n            curSum += i\n            l.append(n - 1 - i - i)\n        else:\n            curSum += n - 1 - i\n            l.append(i - (n - 1 - i))\n    l.sort()\n    for i in range(n - 1, -1, -1):\n        if l[i] > 0:\n            curSum += l[i]\n        ret.append(curSum)\n    print(*ret)\nfor _ in range(int(input())):\n    solve()", "T = int(input())\n\ndef solve():\n    N = int(input())\n    S = input()\n    L = []\n    for (i, s) in enumerate(S):\n        if s == 'L':\n            L.append(i)\n        else:\n            L.append(N - 1 - i)\n    L.sort()\n    cnt = sum(L)\n    ret = []\n    for i in range(N):\n        cnt = max(cnt, cnt + N - 1 - L[i] - L[i])\n        ret.append(cnt)\n    print(*ret)\nfor _ in range(T):\n    solve()", "import sys\ninput = sys.stdin.readline\ntests = int(input())\nfor test in range(tests):\n    n = int(input())\n    a = input().rstrip()\n    if n % 2:\n        value = n // 2\n    else:\n        value = 0\n    deltas = []\n    for idx in range(n // 2):\n        if a[idx] == 'L':\n            deltas.append(n - 1 - 2 * idx)\n            value += idx\n        else:\n            value += n - 1 - idx\n        if a[-(idx + 1)] == 'R':\n            deltas.append(n - 1 - 2 * idx)\n            value += idx\n        else:\n            value += n - 1 - idx\n    if deltas:\n        deltas.reverse()\n    for k in range(n):\n        if deltas:\n            value += deltas.pop()\n        print(value, end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = 0\n    for i in range(n):\n        if s[i] == 'L':\n            ans += i\n        else:\n            ans += n - i - 1\n    i = 0\n    j = n - 1\n    l = []\n    k = 0\n    while i < j:\n        if s[i] == 'L':\n            ans = ans - i + (n - i - 1)\n            k += 1\n            l.append(ans)\n        if s[j] == 'R':\n            ans = ans - (n - j - 1) + j\n            k += 1\n            l.append(ans)\n        i += 1\n        j -= 1\n    ind = len(l) - 1\n    for i in range(n - (ind + 1)):\n        l.append(ans)\n    print(*l)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    k = 0\n    s = 0\n    z = []\n    for i in range(n):\n        if a[i] == 'L':\n            s += i\n        else:\n            s += n - i - 1\n    for i in range(n // 2):\n        if a[i] == 'L':\n            s = s - i + (n - i - 1)\n            z.append(s)\n            k += 1\n        if a[n - i - 1] == 'R':\n            s = s - i + (n - i - 1)\n            z.append(s)\n            k += 1\n    for i in range(k, n):\n        z.append(s)\n    print(*z)", "def cnt_line(seq):\n    cnt = 0\n    for i in range(len(seq)):\n        if seq[i] == 'R':\n            cnt += len(seq) - i - 1\n        else:\n            cnt += i\n    return cnt\nn = int(input())\nfor i in range(n):\n    m = int(input())\n    s = input()\n    init_cnt = cnt_line(s)\n    left = 0\n    right = m - 1\n    k = 0\n    while left < right:\n        if s[left] == 'R':\n            left += 1\n        else:\n            init_cnt = init_cnt - left + (m - left - 1)\n            print(init_cnt, end=' ')\n            left += 1\n            k += 1\n        if left > right:\n            break\n        if s[right] == 'L':\n            right -= 1\n        else:\n            init_cnt = init_cnt - (m - right - 1) + right\n            print(init_cnt, end=' ')\n            right -= 1\n            k += 1\n    while k < m:\n        print(init_cnt, end=' ')\n        k += 1\n    print()", "import math\n\ndef solve():\n    n = int(input())\n    lst = list(input())\n    lst1 = []\n    if n % 2:\n        for i in reversed(range(n // 2 + 1, n)):\n            lst1.append(i)\n        lst1 = lst1 + [n // 2] + lst1[::-1]\n    else:\n        for i in reversed(range(n // 2, n)):\n            lst1.append(i)\n        lst1 = lst1 + lst1[::-1]\n    lst2 = []\n    for i in range(n):\n        if lst[i] == 'R':\n            lst2.append(n - i - 1)\n        else:\n            lst2.append(i)\n    s1 = sum(lst1)\n    s2 = sum(lst2)\n    lst3 = []\n    for i in range(n):\n        lst3.append(lst1[i] - lst2[i])\n    lst3.sort(reverse=True)\n    for i in range(n):\n        s2 += lst3[i]\n        print(s2, end=' ')\n    print()\nt = int(input())\nwhile t:\n    t -= 1\n    solve()", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    line = input()\n    score = 0\n    possiblity = []\n    for i in range(n // 2):\n        if line[i] == 'L':\n            score += i\n            if i < n // 2:\n                possiblity.append(n - 1 - 2 * i)\n        else:\n            score += n - 1 - i\n    ind = n // 2\n    if n % 2 == 1:\n        ind += 1\n        score += n // 2\n    for i in range(ind, n):\n        if line[i] == 'R':\n            possiblity.append(2 * i + 1 - n)\n            score += n - i - 1\n        else:\n            score += i\n    possiblity.sort(reverse=True)\n    diff = n - len(possiblity)\n    for i in range(len(possiblity)):\n        score += possiblity[i]\n        print(score, end=' ')\n    for i in range(diff):\n        print(score, end=' ')\n    print()", "def main():\n    for t in range(int(input())):\n        n = int(input())\n        s = input()\n        a = []\n        ans = 0\n        for i in range(n):\n            (x, y) = (0, 0)\n            if s[i] == 'L':\n                x = i\n                y = n - 1 - i\n            else:\n                x = n - 1 - i\n                y = i\n            ans += x\n            a.append(max(0, y - x))\n        a.sort(reverse=True)\n        for i in range(n):\n            ans += a[i]\n            print(ans, end=' ')\n        print()\nmain()", "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    q = int(input())\n    temp = arr[0]\n    for i in range(1, n):\n        temp &= arr[i]\n        arr[i] = temp\n    for _ in range(q):\n        arr1 = input().split()\n        if len(arr1) == 1:\n            continue\n        (a, l, r, x) = map(int, arr1)\n        ele = -1\n        for i in range(l - 1, r):\n            if arr[i] <= x:\n                ele = max(ele, arr[i])\n        print(ele)\n\ndef solve1():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        s = input()\n        (l, r) = (0, n - 1)\n        totalSum = 0\n        arr = [0] * n\n        for i in range(n):\n            if s[i] == 'L':\n                totalSum += l\n                arr[i] = max(0, r - l)\n            else:\n                totalSum += r\n                arr[i] = max(0, l - r)\n            l += 1\n            r -= 1\n        arr.sort()\n        re = [0] * n\n        a = -1\n        for i in range(n - 1, -1, -1):\n            a += 1\n            if arr[i] == 0:\n                re[a] = totalSum\n            else:\n                totalSum += arr[i]\n                re[a] = totalSum\n        print(*re)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nsolve1()", "for i in range(int(input())):\n    n = int(input())\n    string = list(input())\n    summ = 0\n    for i in range(n):\n        if string[i] == 'L':\n            summ += i\n        else:\n            summ += n - i - 1\n    count = 0\n    for i in range(n // 2):\n        if string[i] == 'L':\n            summ = summ - i + n - i - 1\n            print(summ, end=' ')\n        else:\n            count += 1\n        if string[n - i - 1] == 'R':\n            summ = summ - i + n - i - 1\n            print(summ, end=' ')\n        else:\n            count += 1\n    for i in range(count):\n        print(summ, end=' ')\n    if n % 2 != 0:\n        print(summ, end=' ')\n    print()", "for _ in range(int(input())):\n    lis = []\n    leng = int(input())\n    inp = list(input())\n    lis2 = [0] * leng\n\n    def L(y):\n        return y\n\n    def R(y):\n        return leng - i - 1\n    counter = 0\n    for i in range(leng):\n        x = inp[i]\n        if x == 'L':\n            counter += L(i)\n            lis2[i] = L(i)\n            lis.append(R(i) - lis2[i] if R(i) > lis2[i] else 0)\n        elif x == 'R':\n            counter += R(i)\n            lis2[i] = R(i)\n            lis.append(L(i) - lis2[i] if L(i) > lis2[i] else 0)\n    lis3 = []\n    for i in reversed(sorted(lis)):\n        counter += i\n        lis3.append(str(counter))\n    print(' '.join(lis3))", "for i in range(int(input())):\n    n = int(input())\n    stand = input()\n    arr = []\n    p1 = 0\n    p2 = -1\n    summ = 0\n    for j in range(n // 2):\n        if stand[p1] == 'R':\n            summ += n - j - 1\n        elif stand[p1] == 'L':\n            summ += p1\n            arr.append(n - 2 * j - 1)\n        if stand[p2] == 'R':\n            arr.append(n + p2 - (abs(p2) - 1))\n            summ += -p2 - 1\n        else:\n            summ += n + p2\n        p1 += 1\n        p2 -= 1\n    if n % 2 == 1:\n        summ += n // 2\n    arr.sort(reverse=True)\n    arr2 = []\n    for i in arr:\n        summ += i\n        arr2.append(summ)\n    if len(arr2) == 0:\n        arr2 = [summ] * n\n    else:\n        arr2 += (n - len(arr2)) * [arr2[-1]]\n    print(*arr2)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    L = input()\n    mid = n // 2\n    des = [0] * n\n    curr = 0\n    v_des = 0\n    for i in range(n):\n        if i < n // 2:\n            des[i] = 'R'\n            v_des += n - i - 1\n        else:\n            des[i] = 'L'\n            v_des += i\n    if n % 2 == 1:\n        des[mid] = L[mid]\n    change = []\n    for i in range(n):\n        if L[i] == 'L':\n            curr += i\n        if L[i] == 'L' and L[i] != des[i]:\n            change.append(n - 1 - 2 * i)\n        if L[i] == 'R':\n            curr += n - i - 1\n        if L[i] == 'R' and L[i] != des[i]:\n            change.append(-n + 1 + 2 * i)\n    change = sorted(change, reverse=True)\n    ans = [v_des] * n\n    for i in range(len(change) - 1):\n        curr = curr + change[i]\n        ans[i] = curr\n    res = ' '.join([str(e) for e in ans])\n    print(res)", "t = int(input())\nwhile t:\n    n = int(input())\n    s = input()\n    insum = 0\n    c = 0\n    for i in range(0, n):\n        if s[i] == 'L' and i > 0:\n            insum = insum + i\n        elif s[i] == 'R' and i != n - 1:\n            insum = insum + (n - i - 1)\n    for i in range(0, n // 2):\n        if s[i] == 'L':\n            insum = insum - i + (n - i - 1)\n            print(insum, end=' ')\n            c = c + 1\n        if s[n - 1 - i] == 'R':\n            insum = insum - i + (n - i - 1)\n            print(insum, end=' ')\n            c = c + 1\n    if c != n:\n        for i in range(0, n - c):\n            print(insum, end=' ')\n    print()\n    t = t - 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    line = input()\n    initial_score = 0\n    scores = []\n    for j in range(n):\n        if line[j] == 'L':\n            initial_score += j\n            scores.append(n - 2 * j - 1)\n        elif line[j] == 'R':\n            initial_score += n - j - 1\n            scores.append(2 * j - n + 1)\n    scores.sort(reverse=True)\n    val = prev_val = initial_score\n    for score in scores:\n        val += score\n        if val > prev_val:\n            prev_val = val\n        else:\n            val = prev_val\n        print(val, end=' ')\n    print('\\r')", "def solve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(input())\n        c = []\n        tot = 0\n        for i in range(1, n + 1):\n            if a[i - 1] == 'R':\n                tot += n - i\n            else:\n                tot += i - 1\n        for i in range(1, n + 1):\n            if a[i - 1] == 'L':\n                c.append(n - i - (i - 1))\n            else:\n                c.append(i - 1 - (n - i))\n        c.sort()\n        c.reverse()\n        for i in range(n):\n            if c[i] > 0:\n                tot += c[i]\n            print(tot, end=' ')\n        print()\nsolve()", "for _ in range(int(input())):\n    n = int(input())\n    string = input()\n    change = []\n    sum = 0\n    for i in range(n):\n        if string[i] == 'L':\n            change.append(n - 1 - i - i)\n            sum += i\n        else:\n            change.append(i - (n - i - 1))\n            sum += n - i - 1\n    change.sort(reverse=True)\n    for i in change:\n        if i > 0:\n            sum += i\n        print(sum, end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    res = []\n    total = 0\n    for i in range(n):\n        if s[i] == 'L':\n            res.append(n - 2 * i - 1)\n            total += i\n        else:\n            res.append(2 * i - n + 1)\n            total += n - i - 1\n    res.sort(reverse=True)\n    for v in res:\n        if v > 0:\n            total += v\n        print(total, end=' ')\n    print()", "from heapq import *\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arrang = input()\n    heap = []\n    total = 0\n    for (idx, a) in enumerate(arrang):\n        (cur, poss) = (0, 0)\n        if a == 'L':\n            cur = idx\n            poss = n - idx - 1\n        else:\n            cur = n - idx - 1\n            poss = idx\n        total += cur\n        if poss > cur:\n            heappush(heap, cur - poss)\n    ans = []\n    for change in range(1, n + 1):\n        inc = 0\n        if heap:\n            inc += -heappop(heap)\n            change -= 1\n        total += inc\n        ans.append(total)\n    print(' '.join((str(val) for val in ans)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    val = 0\n    for i in range(n):\n        if s[i] == 'L':\n            val += i\n        else:\n            val += n - i - 1\n    k = n\n    (l, r) = (0, len(s) - 1)\n    while k >= 0 and l <= r:\n        if s[l] == 'L':\n            k -= 1\n            val += n - l - 1 - l\n            print(val, end=' ')\n        l += 1\n        if s[r] == 'R':\n            k -= 1\n            val += r - (n - r - 1)\n            print(val, end=' ')\n        r -= 1\n    for i in range(k):\n        print(val, end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(input())\n    cur_val = 0\n    for i in range(n // 2):\n        if arr[i] == 'L':\n            cur_val += i\n        elif arr[i] == 'R':\n            cur_val += n - i - 1\n        if arr[-i - 1] == 'R':\n            cur_val += i\n        elif arr[-i - 1] == 'L':\n            cur_val += n - i - 1\n    if n % 2:\n        cur_val += n // 2\n    mis_vals = []\n    for i in range(n // 2):\n        if arr[i] == 'L':\n            mis_vals.append(n - i - 1 - i)\n        if arr[-i - 1] == 'R':\n            mis_vals.append(n - i - 1 - i)\n    rem = n - len(mis_vals)\n    mis_vals.sort(reverse=True)\n    res = []\n    for x in mis_vals:\n        cur_val += x\n        res.append(cur_val)\n    if res:\n        res.extend(rem * [res[-1]])\n    else:\n        res.extend(rem * [cur_val])\n    print(*res)", "def summ(s, n):\n    total = 0\n    for i in range(n):\n        if s[i] == 'L':\n            total += i\n        else:\n            total += n - 1 - i\n    return total\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    s = input()\n    total = summ(s, n)\n    k = n\n    ans = []\n    for i in range(int(n / 2)):\n        if s[i] != 'R' and k != 0:\n            total -= i\n            total += n - 1 - i\n            ans.append(total)\n            k -= 1\n        if s[n - 1 - i] != 'L' and k != 0:\n            total -= i\n            total += n - 1 - i\n            ans.append(total)\n            k -= 1\n    while k != 0:\n        ans.append(total)\n        k -= 1\n    print(*ans)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input().strip()\n    su = 0\n    b = []\n    a = []\n    for i in range(n):\n        if s[i] == 'L':\n            su += i\n            a.append(n - i - 1 - i)\n        else:\n            su = su + (n - i - 1)\n            a.append(i - (n - 1 - i))\n    a.sort(reverse=True)\n    for i in range(n):\n        if a[i] > 0:\n            su = su + a[i]\n            b.append(su)\n        else:\n            b.append(su)\n    print(*b)", "test = int(input())\nfor t in range(test):\n    n = int(input())\n    s = input()\n    s = [*s]\n    score = 0\n    score_list = list()\n    for i in range(n):\n        if s[i] == 'R':\n            score += n - (1 + i)\n            score_list.append(n - (1 + i))\n        else:\n            score += i\n            score_list.append(i)\n    ind = 1\n    score_p = list()\n    for i in range(1, n + 1):\n        while ind <= n // 2:\n            if s[ind - 1] == 'L':\n                s[ind - 1] = 'R'\n                score += n - (ind + score_list[ind - 1])\n                score_list[ind - 1] = n - ind\n                break\n            elif s[-ind] == 'R':\n                s[-ind] = 'L'\n                score += n - (ind + score_list[-ind])\n                score_list[-ind] = n - ind\n                break\n            ind += 1\n        score_p.append(str(score))\n    to_p = ' '.join(score_p)\n    print(to_p)", "def solve():\n    n = int(input())\n    str = input()\n    count = []\n    count1 = []\n    sum = 0\n    for i in range(n):\n        if str[i] == 'R':\n            sum += n - i - 1\n        else:\n            sum += i\n        if i < n - i - 1 and str[i] == 'L':\n            count.append(n - 1 - i - i)\n        elif i > n - i - 1 and str[i] == 'R':\n            count.append(i + i + 1 - n)\n    count = sorted(count)[::-1]\n    sm = 0\n    for i in range(len(count)):\n        sm += count[i]\n        count1.append(sm + sum)\n    for i in range(len(count), n):\n        count1.append(sm + sum)\n    for i in range(len(count1)):\n        print(count1[i], end=' ')\n    print()\nt = int(input())\nfor i in range(t):\n    solve()", "for i in range(int(input())):\n    n = int(input())\n    row = input()\n    dif = []\n    mid = n / 2 - 1 + 0.1\n    s = 0\n    for j in range(n):\n        if j < mid:\n            if row[j] == 'R':\n                s += n - 1 - j\n                dif.append(0)\n            else:\n                s += j\n                dif.append(n - 1 - j - j)\n        elif row[j] == 'R':\n            s += n - 1 - j\n            dif.append(j - (n - 1 - j))\n        else:\n            s += j\n            dif.append(0)\n    dif = sorted(dif, reverse=True)\n    for i in dif:\n        s += i\n        print(s, end=' ')\n    print('\\n')", "class Line:\n\n    def solve(self, N, arrangement):\n        value = 0\n        updates = []\n        for i in range(N):\n            if arrangement[i] == 'L':\n                if N - i - 1 > i:\n                    updates.append(N - 2 * i - 1)\n                value += i\n            else:\n                if i > N - i - 1:\n                    updates.append(2 * i - N + 1)\n                value += N - i - 1\n        updates.sort()\n        for i in range(1, N + 1):\n            if len(updates) > 0:\n                value += updates.pop()\n            print(value, end=' ')\n        print()\n        return\nT = int(input())\nwhile T:\n    T -= 1\n    N = int(input())\n    arrangement = list(input())\n    Line().solve(N, arrangement)", "t = int(input())\nfor t in range(t):\n    (n, s) = (int(input()), input())\n    (tot, opt) = (0, [])\n    for i in range(n):\n        r = n - i - 1\n        if s[i] == 'R':\n            tot += r\n            opt.append(i - r if r < i else 0)\n        else:\n            tot += i\n            opt.append(r - i if i < r else 0)\n    sums = []\n    i = 0\n    opt.sort()\n    while i < n:\n        o = opt.pop()\n        tot += o\n        sums.append(tot)\n        i += 1\n    print(*sums)", "t = int(input())\nfor _ in range(t):\n    (n, s) = (int(input()), input())\n    (tot, opt) = (0, [])\n    for i in range(n):\n        r = n - i - 1\n        if s[i] == 'R':\n            tot += r\n            opt.append(i - r if r < i else 0)\n        else:\n            tot += i\n            opt.append(r - i if i < r else 0)\n    sums = []\n    opt.sort()\n    for i in range(n - 1, -1, -1):\n        tot += opt[i]\n        sums.append(tot)\n    print(*sums)", "t = int(input())\nfor _ in range(t):\n    (n, s) = (int(input()), input())\n    (tot, opt) = (0, [])\n    for i in range(n):\n        r = n - i - 1\n        if s[i] == 'R':\n            tot += r\n            opt.append(i - r if r < i else 0)\n        else:\n            tot += i\n            opt.append(r - i if i < r else 0)\n    sums = []\n    i = 0\n    opt.sort()\n    while i < n:\n        tot += opt.pop()\n        sums.append(tot)\n        i += 1\n    print(*sums)", "for _ in range(int(input())):\n    n = int(input())\n    s = str(input())\n    new_arr = []\n    ans = 0\n    for i in range(n):\n        if s[i] == 'L':\n            new_arr.append(n - 1 - i - i)\n            ans += i\n        else:\n            new_arr.append(i - (n - 1 - i))\n            ans += n - 1 - i\n    new_arr.sort()\n    for i in new_arr[::-1]:\n        if i >= 0:\n            ans += i\n            print(ans, end=' ')\n        else:\n            print(ans, end=' ')\n    print()", "from collections import Counter\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        string = input()\n        half = n // 2\n        arr = []\n        for i in range(n):\n            if string[i] == 'L':\n                arr.append(i)\n            else:\n                arr.append(n - i - 1)\n        arr.sort()\n        sm = sum(arr)\n        ans = []\n        for i in range(n):\n            if arr[i] < half:\n                sm -= arr[i]\n                sm += n - arr[i] - 1\n                ans.append(sm)\n            else:\n                ans.append(sm)\n        for i in ans:\n            print(i, end=' ')\n        print()\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    l = 0\n    r = n - 1\n    cur = 0\n    for i in range(n):\n        if s[i] == 'L':\n            cur += i\n        else:\n            cur += n - i - 1\n    result = [0 for i in range(n + 1)]\n    result[0] = cur\n    k = 1\n    for i in range(n // 2):\n        if s[i] == 'L' or s[n - i - 1] == 'R':\n            if s[i] == 'L':\n                result[k] = result[k - 1] - i + n - i - 1\n                k += 1\n            if s[n - i - 1] == 'R':\n                result[k] = result[k - 1] - i + n - i - 1\n                k += 1\n    while k <= n:\n        result[k] = result[k - 1]\n        k += 1\n    print(*result[1:])", "for caseno in range(int(input())):\n    n = int(input())\n    s = input()\n    values = []\n    for i in range(n):\n        if s[i] == 'L':\n            values += [i]\n        else:\n            values += [n - 1 - i]\n    values = sorted(values)\n    total = sum(values)\n    answers = []\n    curr_answer = total\n    for i in range(n):\n        curr = values[i]\n        mod_curr = n - 1 - curr\n        if mod_curr > curr:\n            curr_answer = curr_answer - curr + mod_curr\n        answers += [curr_answer]\n    print(*answers)", "for x in range(int(input())):\n    n = int(input())\n    s = input()\n    sm = 0\n    for x in range(len(s)):\n        if s[x] == 'R':\n            sm += n - (x + 1)\n        else:\n            sm += x\n    l = 0\n    r = n - 1\n    arr = []\n    k = n\n    while l <= r and k > 0:\n        c = 1\n        if s[l] == 'L' and k > 0:\n            k -= 1\n            sm += n - 2 * l - 1\n            arr.append(sm)\n        if s[r] == 'R' and k > 0:\n            k -= 1\n            sm += r - (n - (r + 1))\n            arr.append(sm)\n        l += 1\n        r -= 1\n    if len(arr) == 0:\n        arr = [sm] * n\n    else:\n        a = [arr[-1]] * (n - len(arr))\n        arr += a\n    print(*arr)", "def find_best_dir(s1, n):\n    ans = []\n    for i in range(n // 2):\n        if s1[i] == 'L':\n            ans.append(n - i - 1 - i)\n        if s1[-i - 1] == 'R':\n            j = n - i - 1\n            ans.append(j - (n - j - 1))\n    return ans\n\ndef res(s1, n):\n    ans = []\n    cur_sum = 0\n    for i in range(n):\n        if s1[i] == 'R':\n            cur_sum += n - i - 1\n        else:\n            cur_sum += i\n    best_extr_s = find_best_dir(s1, n)\n    for j in range(n):\n        if j < len(best_extr_s):\n            extra_sum = best_extr_s[j]\n        else:\n            extra_sum = 0\n        ans.append(cur_sum + extra_sum)\n        cur_sum = cur_sum + extra_sum\n    return ans\nn = int(input())\nfor _ in range(n):\n    n1 = int(input())\n    s1 = input()\n    print(*res(s1, n1))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    sum = 0\n    cng = []\n    for i in range(n):\n        if s[i] == 'L':\n            sum += i\n            cng.append(n - i - 1 - i)\n        else:\n            sum += n - i - 1\n            cng.append(i - (n - i - 1))\n    cng.sort(reverse=True)\n    impr = []\n    for k in range(n):\n        if cng[k] > 0:\n            sum += cng[k]\n        impr.append(sum)\n    print(*impr)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    id = 'R' * (n // 2)\n    if n & 1:\n        id += 'R'\n    id += 'L' * (n // 2)\n    intial = 0\n    for i in range(n):\n        if s[i] == 'R':\n            intial += n - i - 1\n        else:\n            intial += i\n    (i, j) = (0, n - 1)\n    ans = []\n    for k in range(n):\n        if k % 2 == 0:\n            if s[i] == 'L':\n                intial = intial - i + n - i - 1\n                ans.append(intial)\n            i += 1\n        else:\n            if s[j] == 'R':\n                intial = intial - (n - j - 1) + j\n                ans.append(intial)\n            j -= 1\n    x = intial\n    for i in range(len(ans), n):\n        ans.append(x)\n    print(*ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    q = input()\n    l = len(q)\n    m = l // 2\n    it = 0\n    for k in range(l):\n        if q[k] == 'L':\n            it += k\n        else:\n            it += l - k - 1\n    c = 0\n    for k in range(m):\n        if q[k] == 'L':\n            it += l - k - 1 - k\n            print(it, end=' ')\n            c += 1\n        if q[l - k - 1] == 'R':\n            it += l - k - 1 - (l - (l - k - 1) - 1)\n            print(it, end=' ')\n            c += 1\n    for ee in range(l - c):\n        print(it, end=' ')\n    print()", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    line = input()\n    ans = 0\n    change = [0] * n\n    for i in range(n):\n        if line[i] == 'L':\n            ans += i\n            change[i] = n - i - 1 - i\n        else:\n            ans += n - i - 1\n            change[i] = i - (n - i - 1)\n    change.sort()\n    for i in range(n - 1, -1, -1):\n        if change[i] > 0:\n            ans += change[i]\n        print(ans, end=' ')\n    print()\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = 0\n    for i in range(n):\n        if s[i] == 'L':\n            ans += i\n        else:\n            ans += n - i - 1\n    a = []\n    for i in range(n // 2):\n        if s[i] == 'L':\n            a.append(n - i - i - 1)\n        else:\n            a.append(0)\n    if n % 2 != 0:\n        a.append(0)\n    for i in range((n + 1) // 2, n):\n        if s[i] == 'R':\n            a.append(i - n + i + 1)\n        else:\n            a.append(0)\n    a.sort(reverse=True)\n    for x in a:\n        ans += x\n        print(ans, end=' ')\n    print('')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    arr = []\n    sum = 0\n    for j in range(n):\n        if s[j] == 'L':\n            c = n - 2 * j - 1\n            sum += j\n        else:\n            c = 2 * j + 1 - n\n            sum += n - 1 - j\n        arr.append(c)\n    arr.sort(reverse=True)\n    res = []\n    k = sum\n    for j in range(n):\n        if arr[j] > 0:\n            k += arr[j]\n        res.append(k)\n    print(*res)", "for Pythonic__Python in range(int(input())):\n    n = int(input())\n    d = input()\n    l = []\n    ans = 0\n    for i in range(n):\n        if d[i] == 'L':\n            l.append(n - 1 - i - i)\n            ans += i\n        else:\n            l.append(i - (n - 1 - i))\n            ans += n - 1 - i\n    l.sort()\n    for i in l[::-1]:\n        if i >= 0:\n            ans += i\n            print(ans, end=' ')\n        else:\n            print(ans, end=' ')\n    print()", "testcase = int(input())\nfor _ in range(testcase):\n    n = int(input())\n    line = input()\n    turnaround = list()\n    originalsum = 0\n    for i in range(n):\n        if line[i] == 'L':\n            turnaround.append(n - 1 - i - i)\n            originalsum += i\n        else:\n            turnaround.append(i - (n - 1 - i))\n            originalsum += n - 1 - i\n    turnaround.sort(reverse=True)\n    for i in range(n):\n        if turnaround[i] > 0:\n            originalsum += turnaround[i]\n        print(originalsum, end=' ')\n    print()", "t = int(input())\nfor o in range(t):\n    n = int(input())\n    a = [0 for i in range(n)]\n    s = input()\n    (num, idx, ans) = (0, -1, 0)\n    for j in range(n):\n        if s[j] == 'L':\n            num += j\n            a[j] = n - j * 2 - 1\n        else:\n            num += n - j - 1\n            a[j] = j * 2 + 1 - n\n    a.sort()\n    for i in range(n - 1, -1, -1):\n        if a[i] > 0:\n            num += a[i]\n        print(num, end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    line = 'R' * (n // 2) + ('R' if n % 2 == 1 else '') + 'L' * (n // 2)\n    (b, e) = (0, len(s) - 1)\n    k = 1\n    res = sum([i if c == 'L' else n - i - 1 for (i, c) in enumerate(s)])\n    while b < e:\n        if (s[b], s[e]) == ('L', 'R'):\n            res += n - 2 * b - 1\n            b += 1\n            print(res, end=' ')\n            k += 1\n            res += 2 * e - n + 1\n            e -= 1\n            print(res, end=' ')\n            k += 1\n        elif (s[b], s[e]) == ('R', 'R'):\n            res += 2 * e - n + 1\n            print(res, end=' ')\n            b += 1\n            e -= 1\n            k += 1\n        elif (s[b], s[e]) == ('L', 'L'):\n            res += n - 2 * b - 1\n            print(res, end=' ')\n            b += 1\n            e -= 1\n            k += 1\n        else:\n            b += 1\n            e -= 1\n    for _ in range(n - k + 1):\n        print(res, end=' ')\n    print()", "t = int(input())\nl = []\ns = []\nfor i in range(t):\n    l.append(int(input()))\n    s.append(input())\nfor i in range(t):\n    if l[i] % 2 == 0:\n        k = 0\n        sum = 0\n        mas = []\n        for j in range(l[i]):\n            if s[i][j] == 'R':\n                sum += l[i] - (j + 1)\n            else:\n                sum += j\n        for j in range(l[i] // 2):\n            if s[i][j] == 'L':\n                k += 1\n                sum += -2 * j - 1 + l[i]\n                mas.append(sum)\n            j1 = l[i] - 1 - j\n            if s[i][j1] == 'R':\n                k += 1\n                sum += 2 * j1 + 1 - l[i]\n                mas.append(sum)\n        while k < l[i]:\n            k += 1\n            mas.append(sum)\n        print(*mas)\n    else:\n        k = 0\n        sum = 0\n        mas = []\n        for j in range(l[i]):\n            if s[i][j] == 'R':\n                sum += l[i] - (j + 1)\n            else:\n                sum += j\n        for j in range(l[i] // 2):\n            if s[i][j] == 'L':\n                k += 1\n                sum += -2 * j - 1 + l[i]\n                mas.append(sum)\n            j1 = l[i] - 1 - j\n            if s[i][j1] == 'R':\n                k += 1\n                sum += 2 * j1 + 1 - l[i]\n                mas.append(sum)\n        while k < l[i]:\n            k += 1\n            mas.append(sum)\n        print(*mas)", "def getDifference(people):\n    n = len(people)\n    result = []\n    for (index, person) in enumerate(people):\n        if person == 'L':\n            result.append(n - index - 1 - index)\n        else:\n            result.append(index - (n - index - 1))\n    result.sort(reverse=True)\n    return result\n\ndef getCurrentSum(people):\n    n = len(people)\n    totalSum = 0\n    for (index, person) in enumerate(people):\n        if person == 'L':\n            totalSum += index\n        else:\n            totalSum += n - index - 1\n    return totalSum\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    people = list(input())\n    oldSum = getCurrentSum(people=people)\n    diffList = getDifference(people=people)\n    for k in range(n):\n        if diffList[k] > 0:\n            currSum = oldSum + diffList[k]\n        else:\n            currSum = oldSum\n        print(currSum, end=' ')\n        oldSum = currSum\n    print('')", "def implementation(length, data):\n    if length == 1:\n        print(0)\n        return\n    line = []\n    for i in range(length):\n        if data[i] == 'L':\n            line.append(i)\n        else:\n            line.append(length - i - 1)\n    line.sort()\n    final = sum(line)\n    for i in range(0, length):\n        if length - 1 - line[i] >= line[i]:\n            final -= line[i]\n            final += length - 1 - line[i]\n        print(final, end=' ')\n    print()\nt = int(input())\nfor i in range(t):\n    length = int(input())\n    data = input()\n    implementation(length, data)", "for t in range(int(input())):\n    n = int(input())\n    s = list(input())\n    i = 0\n    j = n - 1\n    summ = 0\n    for i in range(n):\n        if s[i] == 'L':\n            summ += i\n        else:\n            summ += n - i - 1\n    ans = []\n    i = 0\n    j = n - 1\n    while i < j:\n        if i < n // 2:\n            if s[i] == 'L':\n                prev_value = i\n                next_value = n - i - 1\n                summ = summ - prev_value + next_value\n                ans.append(summ)\n            i += 1\n        if j >= n // 2:\n            if s[j] == 'R':\n                prev_value = n - j - 1\n                next_value = j\n                summ = summ - prev_value + next_value\n                ans.append(summ)\n            j -= 1\n    rem = [summ] * (n - len(ans))\n    ans += rem\n    print(*ans)", "for t in range(int(input())):\n    n = int(input())\n    s = input()\n    a = []\n    count = 0\n    for i in range(n):\n        l = i\n        r = n - i - 1\n        if s[i] == 'L':\n            a.append(r - l)\n            count += l\n        else:\n            a.append(l - r)\n            count += r\n    a = sorted(a, reverse=True)\n    for i in range(n):\n        if a[i] > 0:\n            count += a[i]\n        print(count, end=' ')\n    print()", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    s = list(input())\n    a = 0\n    b = 0\n    for j in range(0, n):\n        if s[j] == 'L':\n            a += j\n        else:\n            a += n - 1 - j\n    if n % 2 != 0:\n        for j in range(0, n // 2):\n            if s[j] == 'L':\n                s[j] = 'R'\n                a = a + n - 1 - 2 * j\n                print(a, end=' ')\n                b += 1\n            if s[n - 1 - j] == 'R':\n                s[j] = 'L'\n                a = a + n - 1 - 2 * j\n                print(a, end=' ')\n                b += 1\n        while b < n:\n            print(a, end=' ')\n            b += 1\n    else:\n        for j in range(0, n // 2):\n            if s[j] == 'L':\n                s[j] = 'R'\n                a = a + n - 1 - 2 * j\n                b += 1\n                print(a, end=' ')\n            if s[n - j - 1] == 'R':\n                s[j] = 'L'\n                a = a + n - 1 - 2 * j\n                print(a, end=' ')\n                b += 1\n        while b < n:\n            print(a, end=' ')\n            b += 1\n    print(' ')", "from math import floor, ceil\nnum_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()\n\ndef change(n, i):\n    return abs(n - 2 * i - 1)\nt = num_inp()\nfor _ in range(t):\n    n = num_inp()\n    s = str_inp()\n    ind = []\n    val = floor(n / 2)\n    req = ['R' for _ in range(val)]\n    req += ['L' for _ in range(n - val)]\n    if n % 2 == 1:\n        req[val] = s[val]\n    initial = 0\n    for i in range(n):\n        if s[i] == 'R':\n            initial += n - i - 1\n        else:\n            initial += i\n    count = 0\n    ind = []\n    for i in range(n):\n        if s[i] != req[i]:\n            ind.append(i)\n    p1 = 0\n    p2 = len(ind) - 1\n    l = []\n    while p1 <= p2:\n        v1 = change(n, ind[p1])\n        v2 = change(n, ind[p2])\n        if v1 > v2:\n            initial += v1\n            l.append(initial)\n            p1 += 1\n        else:\n            initial += v2\n            l.append(initial)\n            p2 -= 1\n    print(' '.join(map(str, l)), end=' ')\n    for i in range(n - len(l)):\n        print(initial, end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    c = 0\n    x = []\n    for i in range(n):\n        if a[i] == 'L':\n            c += i\n            if n - i - 1 > i:\n                x.append(n - 2 * i - 1)\n        else:\n            c += n - i - 1\n            if i > n - i - 1:\n                x.append(2 * i - n + 1)\n    x.sort(reverse=True)\n    k = len(x)\n    y = []\n    for i in range(n):\n        if i < k:\n            c += x[i]\n        y.append(c)\n    print(*y)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    string = str(input())\n    lst = []\n    curr_score = 0\n    for i in range(len(string)):\n        if string[i] == 'L':\n            curr_score += i\n            itm = n - i - 1 - i\n        else:\n            curr_score += n - i - 1\n            itm = i - n + i + 1\n        if n % 2 != 0 and i == int(n / 2):\n            lst.append(0)\n        else:\n            lst.append(itm)\n    lst.sort(reverse=True)\n    for i in range(n):\n        if lst[i] > 0:\n            curr_score += lst[i]\n        print(curr_score, end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    a = []\n    y = 0\n    for i in range(n):\n        if s[i] == 'L':\n            y += i\n            a.append(n - i - 1 - i)\n        else:\n            y += n - i - 1\n            a.append(i - (n - i - 1))\n    a.sort(reverse=True)\n    b = []\n    for i in range(n):\n        y += max(a[i], 0)\n        b.append(y)\n    print(*b)", "for _ in range(int(input())):\n    l = int(input())\n    st = input()\n    sch = 0\n    izm = []\n    for i in range(l):\n        if st[i] == 'L':\n            sch += i\n            izm.append(l - i - 1 - i)\n        else:\n            sch += l - i - 1\n            izm.append(i - (l - i - 1))\n    izm.sort(reverse=True)\n    otv = [0] * l\n    otv[0] = max(sch, sch + izm[0])\n    for i in range(1, l):\n        if izm[i] > 0:\n            otv[i] = otv[i - 1] + izm[i]\n        else:\n            otv[i] = otv[i - 1]\n    print(*otv)"]