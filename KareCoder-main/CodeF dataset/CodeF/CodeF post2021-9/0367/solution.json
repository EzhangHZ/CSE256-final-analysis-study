["import sys\ninput = sys.stdin.readline\n\ndef solution(n):\n    current = n - 1\n    r = int(current ** 0.5)\n    if r ** 2 < current:\n        r += 1\n    first = r ** 2 - current\n    if first == 0:\n        return list(range(n))\n    return list(range(first, n)) + solution(first)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    result = solution(n)\n    print(' '.join(map(str, result[::-1])))", "import sys, math\nINPUT = sys.stdin.readline\n\ndef ii():\n    return int(INPUT())\n\ndef iit(strip=False):\n    s = INPUT().strip('[]\\n').split(',') if strip else INPUT().split()\n    return map(int, s)\n\ndef iil(strip=False):\n    s = INPUT().strip('[]\\n').split(',') if strip else INPUT().split()\n    return list(map(int, s))\n\ndef si():\n    return INPUT()[:-1]\n\ndef rec(n):\n    m = n - 1\n    ma = int(math.sqrt(m))\n    if ma ** 2 == m:\n        return list(reversed(range(n)))\n    mb = ma + 1\n    nn = mb ** 2 - m\n    return rec(nn) + list(reversed(range(nn, n)))\n\ndef solve():\n    n = ii()\n    r = rec(n)\n    print(' '.join([str(x) for x in r]))\nCASES = True\nFROM_FILE = False\nif FROM_FILE:\n    FILE = open('input.txt', 'r')\n    INPUT = FILE.readline\nif CASES:\n    t = ii()\n    for i in range(t):\n        solve()\nelse:\n    solve()\nif FROM_FILE:\n    FILE.close()", "squares = [x ** 2 for x in range(1000)]\n\ndef find_border(x):\n    index = 0\n    while x > squares[index]:\n        index += 1\n    return squares[index]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = []\n    current = n - 1\n    while current >= 0:\n        border = find_border(current)\n        lst.extend(list(range(border - current, current + 1)))\n        current = border - current - 1\n    print(' '.join(map(str, reversed(lst))))", "import bisect\n\ndef main():\n    t = int(input())\n    mem = [i ** 2 for i in range(449)]\n    while t:\n        t -= 1\n        n = int(input())\n        output = [0] * n\n        max_el = n - 1\n        curr_n = n\n        while max_el > 0:\n            indx = bisect.bisect_left(mem, max_el)\n            if mem[indx] == max_el:\n                put_idx = 0\n            else:\n                put_idx = mem[indx] - max_el\n            for i in range(put_idx, curr_n):\n                output[i] = curr_n - (i - put_idx + 1)\n            curr_n = put_idx\n            max_el = curr_n - 1\n        print(' '.join(map(str, output)))\nmain()", "import math as m\n\ndef div(n):\n    if n == 0 or n == 1:\n        return [0]\n    if n == 2:\n        return [1, 0]\n    if n == 5:\n        return list(range(4, -1, -1))\n    q = m.ceil(m.sqrt(n)) ** 2\n    return div(q - n + 1) + list(range(n - 1, q - n, -1))\nc = int(input())\nwhile c:\n    n = int(input())\n    print(' '.join((str(i) for i in div(n))))\n    c -= 1", "import math\n\ndef solve(n):\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [1, 0]\n    if n == 3:\n        return [1, 0, 2]\n    q = int(math.ceil((n - 1) ** 0.5))\n    Q = q * q\n    k = Q - (n - 1)\n    if k > 0:\n        return solve(k) + [i for i in range(n - 1, k - 1, -1)]\n    else:\n        return [i for i in range(n - 1, k - 1, -1)]\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        n = int(input())\n        print(' '.join([str(x) for x in solve(n)]))\n        pass\n    pass\nmain()", "import math\n\ndef solve():\n    n = int(input())\n    ls = []\n    curr = math.ceil(math.sqrt(n - 1)) ** 2 - n + 1\n    i = n - 1\n    while curr >= 0:\n        temp = []\n        while i >= curr:\n            temp.append(i)\n            i -= 1\n        ls = temp + ls\n        if curr >= 1:\n            curr = math.ceil(math.sqrt(curr - 1)) ** 2 - curr + 1\n        else:\n            break\n    print(' '.join(map(str, ls)))\nt = int(input())\nfor _ in range(t):\n    solve()", "from math import ceil, sqrt\n\ndef rec(n):\n    square = ceil(sqrt(n - 1)) ** 2\n    num = n - (square - (n - 1))\n    s = ''\n    n -= 1\n    for i in range(num):\n        s += str(n) + ' '\n        n -= 1\n    return (s, n + 1)\niter = int(input())\nfor z in range(iter):\n    n = int(input())\n    ans = ''\n    while n:\n        (tp, n) = rec(n)\n        ans = tp + ans\n    print(ans)", "from math import floor, sqrt\nt = int(input())\nsol = []\n\ndef solve(n):\n    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [1, 0]\n    n -= 1\n    if floor(sqrt(n)) ** 2 == n:\n        square = n\n    else:\n        square = (floor(sqrt(n)) + 1) ** 2\n    if square > 2 * n:\n        return -1\n    if square - n < 0:\n        return -1\n    sol = []\n    for i in range(square - n, n + 1):\n        sol.append(square - i)\n    rest = solve(square - n)\n    if rest == -1:\n        return -1\n    return rest + sol\n    return\nfor _ in range(t):\n    sol.append(solve(int(input())))\nfor s in sol:\n    if s == -1:\n        print(-1)\n    else:\n        print(' '.join([str(x) for x in s]))", "def find(n, answer):\n    i = 0\n    while i * i < n:\n        i += 1\n    start = i * i - n\n    for x in range(start, n + 1):\n        answer[x] = i * i - x\n    if start == 0:\n        return answer\n    else:\n        return find(start - 1, answer)\n\ndef solve():\n    n = int(input())\n    answer = {}\n    find(n - 1, answer)\n    print(' '.join((str(answer[i]) for i in range(n))))\nT = int(input())\nfor _ in range(T):\n    solve()", "def sqt(n):\n    ind = 0\n    while ind * ind <= 2 * n - 2:\n        ind += 1\n    return ind - 1\n\ndef cf(n):\n    occ = [-1 for i in range(n)]\n    end = n\n    ind = sqt(n)\n    ink = ind * ind - (n - 1)\n    store = ink\n    i = n - 1\n    while i >= 0:\n        if ink < end:\n            occ[i] = ink\n            ink += 1\n            i -= 1\n        else:\n            ind -= 1\n            ink = ind * ind - i\n            end = store\n            store = min(ink, store)\n    return occ\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = ' '.join(map(str, cf(n)))\n    print(s)", "for _ in range(int(input())):\n    n = int(input())\n    array = [0] * n\n    p = n - 1\n    while p >= 0:\n        m = 0\n        while m * m < p:\n            m += 1\n        d = m * m - p\n        for idx in range(d, p + 1):\n            array[idx] = p + d - idx\n        p = d - 1\n    print(' '.join(map(str, array)))", "def find(n, answer):\n    i = 0\n    while i * i < n:\n        i += 1\n    start = i * i - n\n    for x in range(start, n + 1):\n        answer[x] = i * i - x\n    if start == 0:\n        return answer\n    else:\n        return find(start - 1, answer)\n\ndef solve():\n    n = int(input())\n    answer = {}\n    find(n - 1, answer)\n    print(' '.join((str(answer[i]) for i in range(n))))\nT = int(input())\nfor _ in range(T):\n    solve()", "t = int(input())\nfor tries in range(t):\n    n = int(input())\n\n    def pi(n):\n        if n > 1:\n            if int(n ** 0.5) ** 2 == n:\n                return '0 ' + ' '.join([str(x) for x in range(n - 1, 0, -1)])\n            elif int((n - 1) ** 0.5) ** 2 == n - 1:\n                return ' '.join([str(x) for x in range(n - 1, -1, -1)])\n            else:\n                sqr = (int(n ** 0.5) + 1) ** 2\n                ans = pi(sqr - n + 1) + ' ' + ' '.join([str(x) for x in range(n - 1, sqr - n, -1)])\n                return ans\n        else:\n            return '0 '\n    print(pi(n))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    r = ''\n    k = math.floor(math.sqrt(2 * (n - 1)))\n    while k > 1:\n        r1 = ''\n        for i in range(n - 1, k * k - n, -1):\n            r1 = r1 + str(i) + ' '\n        n = k * k - n + 1\n        r = r1 + r\n        if n < 3:\n            break\n        else:\n            k = math.floor(math.sqrt(2 * (n - 1)))\n    if n == 2:\n        r = '1 0 ' + r\n    elif n == 1:\n        r = '0 ' + r\n    print(r)", "import math\n\ndef nextsqr(x):\n    sqr = math.floor(math.sqrt(x))\n    if sqr * sqr == x:\n        return x\n    return (sqr + 1) ** 2\n\ndef solve(x):\n    if x < 0:\n        return []\n    if x == 0:\n        return [0]\n    if x == 1:\n        return [1, 0]\n    sq = nextsqr(x)\n    if sq - x > x:\n        print('??', sq, x)\n        return None\n    y = sq - x\n    re = solve(y - 1)\n    if re is None:\n        return None\n    z = [sq - z for z in range(y, x + 1)]\n    return re + z\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    out = solve(n - 1)\n    if out is None:\n        print(-1)\n    else:\n        print(' '.join([str(x) for x in out]))", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    or_n = n\n    biggest_square = ceil((n - 1) ** 0.5) ** 2\n    out = []\n    used_min = biggest_square - n + 1\n    while n >= 0:\n        for x in range(used_min, biggest_square - used_min + 1):\n            n -= 1\n            out.append(x)\n        if n == 0:\n            break\n        biggest_square = ceil((n - 1) ** 0.5) ** 2\n        used_min = biggest_square - n\n        used_min += 1\n        if biggest_square == 0:\n            break\n    if 0 not in out:\n        out.append(0)\n    print(' '.join((str(x) for x in out[::-1])))", "from math import sqrt, ceil, inf\n\ndef solve(n):\n    perm = [0] * n\n\n    def least_above_sq(q):\n        return ceil(sqrt(q)) ** 2\n    star = least_above_sq(len(perm) - 1)\n    used = set()\n    for k in range(len(perm) - 1, -1, -1):\n        if star - k >= len(perm) or star - k in used:\n            star = least_above_sq(k)\n        used.add(star - k)\n        perm[k] = star - k\n    return ' '.join((str(c) for c in perm))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(solve(n))", "t = int(input())\nsquare_nums = [a * a for a in range(1000)]\nnoless_squares_nums_dict = {0: 0, 1: 1}\nidx = 2\nfor i in range(2, 100000 + 5):\n    if i > square_nums[idx]:\n        idx += 1\n    noless_squares_nums_dict[i] = square_nums[idx]\nfor _ in range(t):\n    n = int(input())\n    permuatation = [-1] * n\n    concerned_num = n - 1\n    while True:\n        if concerned_num <= 0:\n            for i in range(concerned_num + 1):\n                permuatation[i] = i\n            break\n        pair_num = noless_squares_nums_dict[concerned_num] - concerned_num\n        for i in range(concerned_num - pair_num + 1):\n            permuatation[pair_num + i] = concerned_num - i\n        concerned_num = pair_num - 1\n    print(' '.join([str(i) for i in permuatation]))", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    arr = [i for i in range(n)]\n    ans = [-1 for i in range(n)]\n    last_done = n - 1\n    while last_done > -1:\n        x = int(last_done ** 0.5)\n        while x * x < last_done:\n            x += 1\n        num_to_make = x * x\n        start = x * x - last_done\n        for i in range(start, last_done + 1):\n            ans[i] = last_done\n            last_done -= 1\n        print\n    ans = list(map(str, ans))\n    print(' '.join(ans))", "import functools\nxx = int(input())\n\n@functools.lru_cache(None)\ndef cal(n):\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [1, 0]\n    if n == 3:\n        return [1, 0, 2]\n    p = int((n - 1) ** 0.5)\n    if p * p == n - 1:\n        return list(range(n))[::-1]\n    k = (p + 1) ** 2 - n + 1\n    return cal(k) + list(range(k, n))[::-1]\nfor jj in range(xx):\n    n = int(input())\n    t = cal(n)\n    print(' '.join([str(i) for i in t]))", "MemLis = [None] * 100001\n\ndef MS(n):\n    if not MemLis[n]:\n        MemLis[n] = MemorySearch(n)\n    return MemLis[n]\n\ndef MemorySearch(n: int):\n    square = int(n ** 0.5)\n    if n == square ** 2:\n        return [0] + list(range(n - 1, 0, -1))\n    if n == square ** 2 + 1:\n        return list(range(n - 1, -1, -1))\n    key = (square + 1) ** 2 - n + 1\n    return MS(key) + list(range(n - 1, key - 1, -1))\nfor _ in range(int(input())):\n    print(*MemorySearch(int(input())))", "import math\nfor _ in range(int(input())):\n    l = int(input()) - 1\n    nearest_square = lambda x: int(math.sqrt(x) + 1) ** 2\n    perms = [l]\n    while math.sqrt(l) != int(math.sqrt(l)):\n        l = nearest_square(l) - l - 1\n        perms.append(l)\n    perms.append(-1)\n    lis = []\n    perms = list(reversed(perms))\n    for x in range(1, len(perms)):\n        lis = lis + list(reversed(list(range(perms[x - 1] + 1, perms[x] + 1))))\n    print(' '.join([str(x) for x in lis]))", "t = int(input())\nfor case in range(t):\n    n = int(input())\n    largest_square = (2 * n) ** 0.5 // 1\n    if (2 * n) ** 0.5 % 1 == 0:\n        largest_square -= 1\n    min_val = n\n    current = largest_square ** 2 - (n - 1)\n    started = current\n    out = []\n    i = n - 1\n    while i >= 0:\n        if current >= min_val:\n            min_val = started\n            while current >= started:\n                current -= 2 * largest_square - 1\n                largest_square -= 1\n            started = current\n        out.append(str(int(current)))\n        current += 1\n        i -= 1\n    print(' '.join(out[::-1]))", "from itertools import permutations\nimport math\n\ndef find_good0(n, debug=False):\n    for p in permutations(range(0, int(n))):\n        if all((math.sqrt(a + i) % 1 == 0 for (a, i) in enumerate(p))):\n            if debug:\n                print(' '.join(map(str, p)))\n            if debug:\n                print(' '.join(map(str, [math.sqrt(n + i) for (n, i) in enumerate(p)])))\n            return p\n    return -1\n\ndef find_good(n):\n    original = range(n)\n    new = [None for _ in original]\n    upper_root = math.floor(math.sqrt(2 * (n - 1)))\n    for i in range(len(original) - 1, -1, -1):\n        pos = None\n        extra = 0\n        while True:\n            root = upper_root - extra\n            if root < 0:\n                return -1\n            pos = root ** 2 - original[i]\n            if pos < len(new) and new[pos] == None:\n                new[pos] = original[i]\n                break\n            extra += 1\n        upper_root -= extra\n    return new\nfor _ in range(int(input())):\n    n = int(input())\n    print(' '.join(map(str, find_good(n))))", "import math\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    l = list(range(0, n))\n    i = n - 1\n    while i > 0:\n        k = math.ceil(math.sqrt(i)) ** 2 - l[i]\n        if k == 0:\n            l = l[:i + 1][::-1] + l[i + 1:]\n            break\n        elif k == 1:\n            l = [l[0]] + l[1:i + 1][::-1] + l[i + 1:]\n            break\n        elif k == 2:\n            l = [1, 0] + l[2:i + 1][::-1] + l[i + 1:]\n            break\n        else:\n            l = l[:k] + l[k:i + 1][::-1] + l[i + 1:]\n            i = k - 1\n            continue\n    print(*l)", "MemLis = [None] * 100001\n\ndef MS(n):\n    if not MemLis[n]:\n        MemLis[n] = MemorySearch(n)\n    return MemLis[n]\n\ndef MemorySearch(n: int):\n    square = int(n ** 0.5)\n    if n == square ** 2:\n        return [0] + list(range(n - 1, 0, -1))\n    if n == square ** 2 + 1:\n        return list(range(n - 1, -1, -1))\n    key = (square + 1) ** 2 - n + 1\n    return MS(key) + list(range(n - 1, key - 1, -1))\nfor _ in range(int(input())):\n    print(*MemorySearch(int(input())))", "import sys\nn = int(input())\nans = []\nfor _ in range(n):\n    n = int(input())\n    a = [0] * n\n    p = n - 1\n    while p >= 0:\n        i = 0\n        while i * i < p:\n            i += 1\n        l = i * i - p\n        for k in range(l, p + 1):\n            a[k] = p + l - k\n        p = l - 1\n    ans.append(a)\nfor i in ans:\n    print(*i)", "import sys\nnum = int(input())\nanswer = []\nfor _ in range(num):\n    num = int(input())\n    a = [0] * num\n    p = num - 1\n    while p >= 0:\n        i = 0\n        while i * i < p:\n            i += 1\n        l = i * i - p\n        for k in range(l, p + 1):\n            a[k] = p + l - k\n        p = l - 1\n    answer.append(a)\nfor i in answer:\n    print(*i)", "I = input\n(R, G) = (lambda : int(I()), range)\n\ndef f(k):\n    if k < 0:\n        return\n    s = int((2 * k) ** 0.5)\n    s *= s\n    l = s - k\n    f(l - 1)\n    while l <= k:\n        z[l] = k\n        z[k] = l\n        l += 1\n        k -= 1\nfor _ in G(R()):\n    n = R()\n    z = [0] * n\n    f(n - 1)\n    print(*z)", "t = int(input())\nfor i in range(t):\n    n = int(input()) - 1\n    ans = []\n    while n >= 0:\n        k = int((2 * n) ** (1 / 2)) ** 2\n        ans = list(reversed(range(k - n, n + 1))) + ans\n        n = k - n - 1\n    print(*ans)", "t = int(input())\nfor rep in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n        continue\n    sq = 1\n    while sq ** 2 < n - 1:\n        sq += 1\n    if sq ** 2 - (n - 1) > n - 1:\n        print(-1)\n        continue\n    ans = [-1 for x in range(n)]\n    mn = sq ** 2 - (n - 1)\n    mx = n - 1\n    ans[-1] = mn\n    for x in range(n - 2, -1, -1):\n        if sq ** 2 - x > mx:\n            while sq ** 2 - x >= mn:\n                sq -= 1\n                if sq < 0:\n                    break\n            if sq < 0:\n                break\n            (mx, mn) = (mn - 1, sq ** 2 - x)\n        ans[x] = sq ** 2 - x\n    if -1 in ans:\n        print(-1)\n        continue\n    print(' '.join([str(i) for i in ans]))", "import math\nfor t in range(int(input())):\n    n = int(input())\n    t = n - 1\n    rslt = [0] * n\n    ns = math.ceil(math.sqrt(t)) ** 2\n    if n ** 0.5 != ns:\n        while True:\n            ns = math.ceil(math.sqrt(t)) ** 2\n            for i in range(ns - t, t + 1):\n                rslt[i] = ns - i\n            t = ns - t - 1\n            if t < 0:\n                break\n        print(*rslt)\n    else:\n        print(*[x for x in range(t, -1, -1)])", "import sys\nn = int(input())\nans = []\nfor _ in range(n):\n    n = int(input())\n    a = [0] * n\n    p = n - 1\n    while p >= 0:\n        i = 0\n        while i * i < p:\n            i += 1\n        l = i * i - p\n        for k in range(l, p + 1):\n            a[k] = p + l - k\n        p = l - 1\n    ans.append(a)\nfor i in ans:\n    print(*i)", "import sys\nn = int(input())\nans = []\nfor _ in range(n):\n    n = int(input())\n    a = [0] * n\n    p = n - 1\n    while p >= 0:\n        i = 0\n        while i * i < p:\n            i += 1\n        l = i * i - p\n        for k in range(l, p + 1):\n            a[k] = p + l - k\n        p = l - 1\n    ans.append(a)\nfor i in ans:\n    print(*i)", "import sys\nn = int(input())\nans = []\nfor _ in range(n):\n    n = int(input())\n    a = [0] * n\n    p = n - 1\n    while p >= 0:\n        i = 0\n        while i * i < p:\n            i += 1\n        l = i * i - p\n        for k in range(l, p + 1):\n            a[k] = p + l - k\n        p = l - 1\n    ans.append(a)\nfor i in ans:\n    print(*i)", "import math\n\ndef calc(x):\n    if x >= 0:\n        res = math.ceil(x ** 0.5) ** 2 - x\n        calc(res - 1)\n        for i in range(x, res - 1, -1):\n            print(i, end=' ')\nT = int(input())\nwhile T > 0:\n    n = int(input())\n    if n == 0:\n        print(0, end='\\n')\n        continue\n    calc(n - 1)\n    print(end='\\n')\n    T -= 1", "for _ in range(int(input())):\n    n = int(input())\n    a = [0] * n\n    p = n - 1\n    while p >= 0:\n        i = 0\n        while i * i < p:\n            i = i + 1\n        x = i * i - p\n        for k in range(x, p + 1):\n            a[k] = p + x - k\n        p = x - 1\n    print(*a)", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef find_permutation(arr, n):\n    if arr[n] != math.inf:\n        return arr[n]\n    else:\n        check = math.floor(math.sqrt((n - 1) * 2))\n        return find_permutation(arr, check ** 2 - (n - 1)) + list(range(n - 1, check ** 2 - (n - 1) - 1, -1))\ndp = [math.inf for _ in range(10 ** 5 + 1)]\ndp[0] = []\ndp[1] = [0]\ndp[2] = [1, 0]\nfor _ in range(int(input())):\n    n = int(input())\n    answer = find_permutation(dp, n)\n    for num in answer:\n        print(num, end=' ')\n    print()", "import math\n\ndef solve(n):\n    x = math.sqrt(n)\n    if int(x) == x:\n        for i in range(n, -1, -1):\n            print(i, end=' ')\n    else:\n        y = math.ceil(x)\n        y = y * y - n\n        solve(y - 1)\n        for j in range(n, y - 1, -1):\n            print(j, end=' ')\nfor _ in range(int(input())):\n    n = int(input())\n    solve(n - 1)\n    print()", "import math\nfor _ in range(int(input())):\n    t = int(input())\n    a = [0] * t\n    curr = t - 1\n    while curr >= 0:\n        rem = math.ceil(math.sqrt(curr)) ** 2\n        for x in range(rem - curr, curr + 1):\n            a[x] = rem - x\n        curr = rem - curr - 1\n    print(*a)", "import math\nfor i in range(int(input())):\n    a = int(input())\n    index = a - 1\n    point = a - 1\n    li = [0] * a\n    while index > 0:\n        x = pow(math.ceil(math.sqrt(index)), 2) - index\n        for i in range(index + 1 - x):\n            li[i + x] = point\n            point -= 1\n        index = x - 1\n    print(*li)", "from math import ceil\n\ndef issquare(n):\n    return int(n ** 0.5) == n ** 0.5\n\ndef good(n):\n    if n == 1:\n        return [0]\n    elif n == 2:\n        return [1, 0]\n    if issquare(n - 1):\n        return list(range(n - 1, -1, -1))\n    ns = ceil(n ** 0.5) ** 2\n    diff = ns - n + 1\n    return good(diff) + list(range(n - 1, diff - 1, -1))\nfor _ in range(int(input())):\n    print(*good(int(input())), sep=' ')", "from array import array\nimport collections\nimport sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nfor _ in range(inp()):\n    n = inp()\n\n    def solve(n: int):\n        squares = []\n        num = 0\n        while num * num <= 2 * (n - 1):\n            squares.append(num * num)\n            num += 1\n        ans = [0 for _ in range(n)]\n        used = set()\n        for i in range(n - 1, -1, -1):\n            if not squares:\n                break\n            while squares[-1] - i in used or squares[-1] - i >= n:\n                squares.pop()\n            v = squares[-1] - i\n            ans[i] = v\n            used.add(v)\n        return ans\n    ans = solve(n)\n    print(*ans)", "def solve(n, A):\n    if n < 0:\n        return\n    a = int((2 * n) ** 0.5)\n    a = a * a\n    b = a - n\n    solve(b - 1, A)\n    while b <= n:\n        A[b] = n\n        A[n] = b\n        b += 1\n        n -= 1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = [0] * n\n    solve(n - 1, A)\n    print(*A)", "from math import sqrt, ceil\nimport sys\nsys.setrecursionlimit(10 ** 8)\n\ndef function(end):\n    if end < 0:\n        return []\n    if end == 0:\n        return [0]\n    temp = int(ceil(sqrt(end)))\n    return function(temp * temp - end - 1) + [x for x in range(end, temp * temp - end - 1, -1)]\nt = int(input())\nfor _ in range(t):\n    m = int(input())\n    arr = function(m - 1)\n    for i in arr:\n        print(i, end=' ')\n    print()", "import math\n\ndef solve(r):\n    if r < 0:\n        return\n    s = int(math.sqrt(2 * r))\n    s *= s\n    l = s - r\n    solve(l - 1)\n    while l <= r:\n        ans[l] = r\n        ans[r] = l\n        l += 1\n        r -= 1\nfor _ in range(int(input())):\n    n = int(input())\n    ans = [0] * n\n    solve(n - 1)\n    print(*ans, end=' ')\n    print()", "def f(n):\n    if n == 1:\n        p = []\n        p.append(0)\n        return p\n    if n == 2:\n        p = []\n        p.append(1)\n        p.append(0)\n        return p\n    if n == 3:\n        p = []\n        p.append(1)\n        p.append(0)\n        p.append(2)\n        return p\n    if n == 4:\n        p = []\n        p.append(0)\n        p.append(3)\n        p.append(2)\n        p.append(1)\n        return p\n    if n == 5:\n        p = []\n        p.append(4)\n        p.append(3)\n        p.append(2)\n        p.append(1)\n        p.append(0)\n        return p\n    maxim = n - 1\n    if int(maxim ** 0.5) ** 2 == maxim:\n        y = int(maxim ** 0.5)\n    y = int(maxim ** 0.5 + 1)\n    y *= y\n    mas = []\n    for i in range(n - 1, y - maxim - 1, -1):\n        mas.append(i)\n    g = []\n    g = f(y - maxim)\n    for i in range(len(mas)):\n        g.append(mas[i])\n    return g\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    print(*f(n))", "from math import *\n\ndef solve(n):\n    x = sqrt(n)\n    if int(x) == x:\n        for i in range(n, -1, -1):\n            print(i, end=' ')\n    else:\n        y = ceil(x)\n        y = y * y - n\n        solve(y - 1)\n        for j in range(n, y - 1, -1):\n            print(j, end=' ')\nfor _ in range(int(input())):\n    n = int(input())\n    solve(n - 1)\n    print()", "cas = int(input())\nfor j in range(cas):\n    n = int(input())\n    a = [0] * n\n    p = n - 1\n    while p >= 0:\n        i = 0\n        while i * i < p:\n            i = i + 1\n        x = i * i - p\n        for k in range(x, p + 1):\n            a[k] = p + x - k\n        p = x - 1\n    print(*a)", "test_case = int(input())\nfor ele in range(test_case):\n    n = int(input())\n    p = n - 1\n    ans = [0] * n\n    while p >= 0:\n        i = 0\n        while i * i < p:\n            i = i + 1\n        perfect_square_wanted = i * i\n        start = perfect_square_wanted - p\n        for j in range(start, p + 1):\n            ans[j] = perfect_square_wanted - j\n        p = start - 1\n    print(*ans)", "import math\n\ndef calc(x):\n    if x >= 0:\n        res = math.ceil(x ** 0.5) ** 2 - x\n        calc(res - 1)\n        for i in range(x, res - 1, -1):\n            print(i, end=' ')\nT = int(input())\nwhile T > 0:\n    n = int(input())\n    if n == 0:\n        print(0, end='\\n')\n        continue\n    calc(n - 1)\n    print(end='\\n')\n    T -= 1", "def isqrt(n):\n    x_0 = n >> 1\n    if not x_0:\n        return n\n    x_1 = x_0 + n // x_0 >> 1\n    while x_1 < x_0:\n        x_0 = x_1\n        x_1 = x_0 + n // x_0 >> 1\n    return x_0\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = [0] * n\n    while n > 2:\n        m = isqrt(n - 1)\n        m += m * m != n - 1\n        x = m * m - n\n        A[x + 1:n] = range(n - 1, x, -1)\n        n = x + 1\n    A[:n] = list(range(n))[::-1]\n    print(*A)", "for _ in range(int(input())):\n    n = int(input())\n    m = n - 1\n    p = int(pow(m, 1 / 2))\n    if p * p == m:\n        print(*list(range(m + 1))[::-1])\n        continue\n    elif 2 * m + 1 < (p + 1) * (p + 1):\n        print(-1)\n        continue\n    interval = []\n    i = n - 1\n    while i > 0:\n        p = int(pow(i, 1 / 2))\n        q = p + 1\n        if p * p == i:\n            interval.append((i, p * p - i))\n            i = p * p - i\n        elif q ** 2 > 2 * i + 1:\n            print(-1)\n            break\n        else:\n            interval.append((i, q * q - i))\n            i = q * q - i - 1\n    else:\n        lst = interval[::-1]\n        res = []\n        for (x, y) in lst:\n            res += list(range(x, y - 1, -1))\n        if 0 not in res:\n            res = [0] + res\n        print(*res)", "import math\n\ndef get_max_square(n):\n    if n <= 0:\n        return 0\n    else:\n        return math.ceil(math.sqrt(n)) ** 2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    max_square = get_max_square(n - 1)\n    ans = []\n    p = 100\n    maxdex = n - 1\n    while p > 0:\n        p = max(0, max_square - maxdex)\n        ans = [x for x in range(maxdex, p - 1, -1)] + ans\n        max_square = get_max_square(p - 1)\n        maxdex = p - 1\n    print(*ans)", "t = int(input())\n\ndef find(n, arr):\n    if n == 1:\n        arr[0] = 0\n        return arr\n    diff = (n - 1) ** 0.5 - int((n - 1) ** 0.5)\n    if diff == 0.0:\n        k = int(n - 1)\n    else:\n        k = int((n - 1) ** 0.5 + 1) ** 2\n    a = k - (n - 1)\n    i = n - 1\n    while a < n:\n        arr[i] = a\n        i -= 1\n        a += 1\n    if i == -1:\n        return arr\n    else:\n        find(i + 1, arr)\nfor j in range(t):\n    n = int(input())\n    arr = [0] * n\n    find(n, arr)\n    print(*arr)", "import math\nn = int(input(''))\nfor i in range(n):\n    n2 = int(input(''))\n    list_nums = list(range(n2))\n    l2 = list('0' * n2)\n    n3 = math.ceil((n2 - 1) ** 0.5) ** 2\n    g = n2 - 1\n    if n2 - 1 == n3:\n        print(*list_nums[::-1], sep=' ')\n    else:\n        for i in range(n2 - 1, -1, -1):\n            diff = n3 - i\n            if diff > g:\n                n3 = math.ceil(i ** 0.5) ** 2\n                diff = n3 - i\n                g = i\n            l2[i] = diff\n        print(*l2, sep=' ')", "import math\n\ndef solve(n, permutation):\n    if n < 0:\n        return permutation\n    x = math.sqrt(n)\n    if x == int(x):\n        for i in range(n + 1):\n            permutation[i] = n - i\n        return permutation\n    else:\n        x = int(x) + 1\n        x = int(math.pow(x, 2))\n        for i in range(x - n, n + 1):\n            permutation[i] = n - (i - (x - n))\n        return solve(x - n - 1, permutation)\nfor _ in range(int(input())):\n    n = int(input())\n    n -= 1\n    permutations = [-1 for i in range(n + 1)]\n    a = solve(n, permutations)\n    print(*a)", "from sys import stdin\nrd = stdin.readline\n\ndef rec(n):\n    if n <= -1:\n        return\n    s = int((2 * n) ** 0.5) ** 2\n    l = s - n\n    rec(l - 1)\n    while l <= n:\n        ans[l] = n\n        ans[n] = l\n        l += 1\n        n -= 1\nfor _ in range(int(rd())):\n    n = int(rd())\n    ans = [0] * n\n    rec(n - 1)\n    for i in range(n):\n        print(ans[i], end=' ')\n    print()", "import math\ntestCase = int(input())\n\ndef sortPerm(arr, x):\n    if x < 0:\n        return\n    last = arr[x - 1]\n    for j in range(x):\n        if math.floor(math.sqrt(last + j)) == math.ceil(math.sqrt(last + j)):\n            z = 0\n            for k in range(j, x):\n                arr[k] = last - z\n                z += 1\n            return sortPerm(arr, j)\nfor i in range(testCase):\n    n = int(input())\n    arr = [x for x in range(n)]\n    curr = n\n    sortPerm(arr, curr)\n    arr = [str(x) for x in arr]\n    print(' '.join(arr))", "import sys\nimport math\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfor i in range(int(input())):\n    n = int(input())\n    idx = math.ceil((n - 1) ** 0.5)\n    a = [-1] * n\n    mnt = [0] * n\n    cnt = True\n    for i in range(n - 1, -1, -1):\n        while idx >= 0:\n            p = idx ** 2 - i\n            if p < n:\n                if mnt[p] == 0:\n                    a[i] = p\n                    mnt[p] = 10 ** 9\n                    break\n            idx -= 1\n        if a[i] == -1:\n            print(-1)\n            cnt = False\n            continue\n    if cnt == True:\n        print(*a)", "import math\nfrom collections import *\n\ndef solve():\n    n = int(input())\n    ans = [0] * n\n    a = []\n    for i in range(1, n):\n        if i ** 2 >= n - 1:\n            a.append(i ** 2)\n            break\n        else:\n            a.append(i ** 2)\n    l = {}\n    for i in range(len(a) - 1, -1, -1):\n        d = a[i] - (n - 1)\n        if d not in l:\n            for i in range(d, n):\n                ans[i] = n - 1\n                l[ans[i]] = 1\n                n -= 1\n            n = d\n        if n == 1:\n            break\n    print(*ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    a = [0] * n\n    p = n - 1\n    while p >= 0:\n        i = 0\n        while i * i < p:\n            i = i + 1\n        x = i * i - p\n        for k in range(x, p + 1):\n            a[k] = p + x - k\n        p = x - 1\n    print(*a)", "def next_square(num):\n    if num == 0:\n        return 0\n    a = 0\n    b = num\n    while b - a > 1:\n        g = (a + b) // 2\n        if g ** 2 == num:\n            return num\n        elif g ** 2 > num:\n            b = g\n        else:\n            a = g\n    return b ** 2\n\ndef make(num):\n    if num == 0:\n        return []\n    k = next_square(num - 1)\n    p = 2 * num - k - 1\n    ans = make(num - p) + [i for i in range(num - 1, num - p - 1, -1)]\n    return ans\ntestcase = int(input())\nfor _ in range(testcase):\n    n = int(input())\n    ans = make(n)\n    print(*ans)", "import sys\nimport collections\nfrom math import ceil, gcd, sqrt, log, floor\nimport bisect\nINF = float('inf')\nmod = 1000000007\n\ndef cat(c):\n    i = c\n    while i * i > c:\n        i -= 1\n    return i * i\n\ndef solve():\n    n = int(input())\n    ans = [0] * n\n    i = n - 1\n    while i >= 0:\n        for j in range(i + 1):\n            p = i + j\n            sq = floor(sqrt(p))\n            if sq * sq == p:\n                k1 = j\n                k2 = i\n                while k1 <= k2:\n                    ans[k1] = k2\n                    ans[k2] = k1\n                    k1 += 1\n                    k2 -= 1\n                i = j - 1\n                break\n    print(*ans)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = []\n    l = 0\n    h = n - 1\n    m = math.ceil(math.sqrt(n - 1))\n    while m >= 0:\n        l = m ** 2 - h\n        for j in range(l, h + 1):\n            arr.append(j)\n        if l == 0:\n            break\n        h = l - 1\n        m = math.ceil(math.sqrt(l - 1))\n    arr.reverse()\n    for i in arr:\n        print(i, end=' ')\n    print()", "import math\nt = int(input())\nfor i in range(t):\n    tn = int(input())\n    n = tn - 1\n    A = []\n    while n > 0:\n        k = math.ceil(math.sqrt(n)) ** 2\n        l = k - n\n        A = [n - i for i in range(n - l + 1)] + A\n        n = l - 1\n    if len(A) < tn:\n        A = [0] + A\n    for i in A:\n        print(i, end=' ')\n    print()", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    ans = [0] * n\n    i = n - 1\n    while i >= 0:\n        for j in range(0, i + 1):\n            val = (i + j) ** 0.5\n            if int(val) == val:\n                break\n        for k in range(j, i + 1):\n            ans[k] = i + j - k\n        i = j - 1\n    print(*ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    p = [-1 for i in range(n)]\n    while n > 0:\n        a = int(math.sqrt(n - 1))\n        if a * a == n - 1:\n            for i in range(n):\n                p[i] = n - i - 1\n            break\n        else:\n            q = (a + 1) * (a + 1)\n            for i in range(q - n + 1, n):\n                p[i] = q - i\n            n = q - n + 1\n    print(*p)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    max_square = math.floor(math.sqrt(2 * n - 1))\n    arr = [a for a in range(n)]\n    j = n - 1\n    solved = True\n    while j > 0 and max_square >= 0:\n        req_idx = max_square * max_square - arr[j]\n        if req_idx > n:\n            solved = False\n            break\n        elif req_idx < 0 or req_idx > j:\n            max_square -= 1\n        elif req_idx >= 0:\n            dist = (j + 1 - req_idx) // 2\n            for k in range(dist):\n                temp = arr[req_idx + k]\n                arr[req_idx + k] = arr[j - k]\n                arr[j - k] = temp\n            max_square = max_square - 1\n            j = req_idx - 1\n    if solved == False:\n        print(-1)\n    else:\n        for num in arr:\n            print(num, end=' ')\n        print()", "from math import sqrt, floor\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    i = n - 1\n    perm = []\n    while i >= 0:\n        nearst_square = floor(sqrt(2 * i)) ** 2\n        if 2 * i == nearst_square:\n            perm = [i] + perm\n            i -= 1\n            continue\n        diff = nearst_square - i\n        perm = [x for x in range(i, diff - 1, -1)] + perm\n        i = diff - 1\n    for el in perm:\n        print(el, end=' ')\n    print()", "import math\n\ndef perfect(n):\n    x = math.floor(math.sqrt(n - 1))\n    l = [0] * n\n    y = x ** 2\n    if y == n - 1:\n        x = x\n    else:\n        x = x + 1\n        y = x ** 2\n    for i in range(n - 1, -1, -1):\n        f = 0\n        while f == 0:\n            if y - i <= n - 1 and l[y - i] == 0:\n                l[y - i] = i\n                f = 1\n            else:\n                y = (x - 1) ** 2\n                x = x - 1\n    return l\nfor i in range(int(input())):\n    n = int(input())\n    a = perfect(n)\n    print(*a)", "try:\n    d = {}\n    for i in range(1000):\n        d[i * i] = 1\n    for _ in range(int(input())):\n        n = int(input())\n        n = n - 1\n        l = [0] * (n + 1)\n        while n > -1:\n            for i in d:\n                if n <= i:\n                    l[n] = i - n\n                    l[i - n] = n\n                    n = i - n - 1\n                    break\n        if l[0] == 0:\n            k = 1\n        else:\n            k = 0\n        for i in range(k, len(l)):\n            if l[i] == 0:\n                l[i] = l[i - 1] - 1\n        for i in range(len(l)):\n            print(l[i], end=' ')\n        print()\nexcept:\n    pass", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = [0] * n\n    v = int((n - 1) ** 0.5)\n    if v * v == n - 1:\n        p = v\n    else:\n        p = v + 1\n    for j in range(n - 1, -1, -1):\n        f = 0\n        while f == 0:\n            if p * p - j <= n - 1 and l[p * p - j] == 0:\n                l[p * p - j] = j\n                f = 1\n            else:\n                p -= 1\n    print(*l)", "def perfsqr(a):\n    if int(a ** 0.5) == a ** 0.5:\n        return True\n    else:\n        return False\n\ndef recur(n, l):\n    if perfsqr(n) == True:\n        for i in range(n + 1):\n            l.append(i)\n    else:\n        t = int(n ** 0.5) + 1\n        diff = t ** 2 - n\n        for i in range(diff, n + 1):\n            l.append(i)\n        return recur(diff - 1, l)\n    return l\nfor _ in range(int(input())):\n    num = int(input())\n    l = []\n    recur(num - 1, l)\n    for i in l[::-1]:\n        print(i, end=' ')\n    print()", "t = int(input())\nq = [i ** 2 for i in range(318)]\nfor _ in range(t):\n    n = int(input())\n    a = [0] * n\n    flag = True\n    while n > 0:\n        qq = -1\n        for i in range(318):\n            if q[i] >= n - 1 and q[i] - n + 1 <= n - 1:\n                qq = q[i]\n                break\n            elif q[i] - n + 1 > n - 1:\n                flag = False\n                break\n        if not flag:\n            break\n        if qq > n - 1:\n            for i in range(n - 1, qq - n, -1):\n                a[i] = qq - i\n        else:\n            for i in range(n):\n                a[i] = n - 1 - i\n        n = qq - n + 1\n    if not flag:\n        print(-1)\n    else:\n        print(*a)", "from math import sqrt\nfor t in range(int(input())):\n    n = int(input())\n    a = [*(x for x in range(n))]\n    e = n - 1\n    b = []\n    while e > -1:\n        r = e\n        while True:\n            if sqrt(r) != round(sqrt(r)):\n                r += 1\n            else:\n                b.append((r - e, e))\n                break\n        e = r - e - 1\n    for i in b:\n        x = i[0]\n        y = i[1]\n        while x < y:\n            tm = a[x]\n            a[x] = a[y]\n            a[y] = tm\n            x += 1\n            y -= 1\n    print(*a)", "from math import sqrt\nfor t in range(int(input())):\n    n = int(input())\n    a = [*(x for x in range(n))]\n    e = n - 1\n    while e > -1:\n        r = e\n        while True:\n            if sqrt(r) != round(sqrt(r)):\n                r += 1\n            else:\n                break\n        x = r - e\n        y = e\n        while x < y:\n            tm = a[x]\n            a[x] = a[y]\n            a[y] = tm\n            x += 1\n            y -= 1\n        e = r - e - 1\n    print(*a)", "import math\n\ndef sq(num):\n    if math.sqrt(num).is_integer():\n        return int(math.sqrt(num))\n    else:\n        x = int(math.sqrt(num))\n        return x\nfor _ in range(int(input())):\n    n = int(input())\n    ans = [0] * n\n    lst = list(range(n - 1, -1, -1))\n    num = 2 * n - 2\n    sqq = sq(num)\n    d = dict()\n    for i in range(n - 1, -1, -1):\n        tnum = sqq ** 2 - i\n        if tnum <= n - 1 and d.get(tnum, 'Nan') == 'Nan':\n            ans[i] = tnum\n            d[tnum] = 1\n        else:\n            f = True\n            while f:\n                sqq -= 1\n                tnum = sqq ** 2 - i\n                if tnum <= n - 1 and d.get(tnum, 'Nan') == 'Nan':\n                    d[tnum] = 1\n                    f = False\n                    ans[i] = tnum\n    print(*ans)", "from math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    ans = int(sqrt((n - 1) * 2))\n    s = set()\n    l = [0] * n\n    for i in range(n - 1, -1, -1):\n        while ans * ans - i > n - 1 or ans * ans - i in s:\n            ans -= 1\n        x = ans * ans - i\n        s.add(x)\n        l[i] = x\n    if len(l) == n:\n        print(*l)\n    else:\n        print(-1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = [0] * n\n    v = int((n - 1) ** 0.5)\n    if v * v == n - 1:\n        p = v\n    else:\n        p = v + 1\n    for j in range(n - 1, -1, -1):\n        f = 0\n        while f == 0:\n            if p * p - j <= n - 1 and l[p * p - j] == 0:\n                l[p * p - j] = j\n                f = 1\n            else:\n                p -= 1\n    print(*l)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    l = [i for i in range(n)]\n    sq = [i * i for i in range(n)]\n    j = [-1] * n\n    m = n - 1\n    s = set()\n    pui = 0\n    res = []\n    for i in sq:\n        if i >= m:\n            break\n        else:\n            pui += 1\n    res = sq[:pui + 2]\n    res = res[::-1]\n    l = l[::-1]\n    q = 0\n    v = n - 1\n    i = 0\n    while v >= 0:\n        x = res[q] - v\n        a = x\n        if a > n - 1 or j[a] > -1:\n            q += 1\n            continue\n        else:\n            j[x] = v\n        v -= 1\n    print(*j)", "import math\n\ndef solve(n):\n    if n == 1:\n        return [0]\n    elif n == 2:\n        return [1, 0]\n    last = n - 1\n    sqrt = math.sqrt(last)\n    if sqrt == int(sqrt):\n        return [x for x in range(last, -1, -1)]\n    sqrt = int(sqrt) + 1\n    nearest_psqr = sqrt * sqrt\n    new_n = nearest_psqr - last\n    res = solve(new_n)\n    res.extend([x for x in range(last, new_n - 1, -1)])\n    return res\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    res = solve(n)\n    for val in res:\n        print(val, end=' ')\n    print()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = [0] * n\n    v = int((n - 1) ** 0.5)\n    if v * v == n - 1:\n        p = v\n    else:\n        p = v + 1\n    for j in range(n - 1, -1, -1):\n        f = 0\n        while f == 0:\n            if p * p - j <= n - 1 and l[p * p - j] == 0:\n                l[p * p - j] = j\n                f = 1\n            else:\n                p -= 1\n    print(*l)", "import sys\nimport math\nfrom collections import Counter\n\ndef gi():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef gs():\n    return sys.stdin.readline().strip()\n\ndef fun(a):\n    ans = [-1] * a\n    sq = []\n    c = 0\n    while c ** 2 <= 2 * a - 2:\n        sq.append(c ** 2)\n        c += 1\n    l = len(sq)\n    i = l - 1\n    j = a - 1\n    while j >= 0:\n        if ans[j] != -1:\n            j -= 1\n        elif sq[i] - j < 0 or sq[i] - j > a - 1:\n            i -= 1\n        elif ans[sq[i] - j] != -1:\n            i -= 1\n        else:\n            ans[sq[i] - j] = j\n            ans[j] = sq[i] - j\n            j -= 1\n    return ans\nfor _ in range(int(input())):\n    a = int(input())\n    print(*fun(a))", "testnum = int(input())\nfor testcount in range(testnum):\n    n = int(input()) - 1\n    l = []\n    while n >= 0:\n        l.append(n)\n        nn = int(n ** 0.5)\n        if nn ** 2 < n:\n            nn += 1\n        n = nn ** 2 - n - 1\n    print(*range(l[-1], -1, -1), end='')\n    for i in range(len(l) - 1, 0, -1):\n        print('', *range(l[i - 1], l[i], -1), end='')\n    print()", "import math\n\ndef n_d(n):\n    w = math.ceil(n ** 0.5) ** 2\n    if n >= w // 2:\n        return math.ceil(n ** 0.5) ** 2\n    else:\n        return -1\nfor _ in range(int(input())):\n    n = int(input()) - 1\n    a = []\n    w0 = 100000000\n    while n >= 0:\n        w = n_d(n)\n        if w == 1:\n            a.append(0)\n            a.append(1)\n            n -= 2\n        elif w == 0:\n            a.append(0)\n            n -= 1\n        else:\n            for i in range(w - n, n + 1):\n                a.append(i)\n            n = w - n - 1\n    if 0 >= n:\n        for i in range(len(a)):\n            print(a[-1 - i], end=' ')\n        print()\n    else:\n        print(-1)", "c = int(input())\nfor i in range(c):\n    n = int(input()) - 1\n    arr = [0] * (n + 1)\n    sq = (2 * n) ** (1 / 2) // 1\n    j = n\n    while j >= 0:\n        if arr[j] == 0:\n            x = int(sq ** 2 - j)\n            if 0 <= x <= n and arr[x] == 0:\n                arr[j] = x\n                arr[x] = j\n            else:\n                sq = sq - 1\n                j = j + 1\n        j = j - 1\n    for i in arr:\n        print(i, end=' ')\n    print()", "def solve(n):\n    if n < 2:\n        L.append(n)\n        return 1\n    for i in range(n + 1):\n        a = (n + i) ** 0.5\n        if int(a) == a:\n            if solve(i - 1):\n                L.append(n)\n                return 1\n    else:\n        return 0\nfor t in range(int(input())):\n    n = int(input())\n    L = []\n    if solve(n - 1):\n        cur = -1\n        for i in L:\n            for j in range(i, cur, -1):\n                print(j, end=' ')\n            cur = i\n        print()\n    else:\n        print(-1)", "import math\n\ndef swap(permutation: list, index_1, index_2):\n    temp = permutation[index_1]\n    permutation[index_1] = permutation[index_2]\n    permutation[index_2] = temp\n\ndef good_checker(perm):\n    for (i, value) in enumerate(perm):\n        if math.sqrt(i + value) != math.ceil(math.sqrt(i + value)):\n            return False\n    return True\n\ndef build(n):\n    if n == 0:\n        return permutation\n    next_perfect_square = math.ceil(math.sqrt(n - 1)) ** 2\n    next_n = next_perfect_square - (n - 1)\n    for i in range(n - 1, next_n, -1):\n        solution = next_perfect_square - i\n        permutation[solution] = i\n        permutation[i] = solution\n    return build(next_n)\ntest_cases = int(input())\nns = []\nfor test_case in range(test_cases):\n    ns.append(int(input()))\nfor test_case in range(test_cases):\n    n = ns[test_case]\n    permutation = [x for x in range(n)]\n    new_permutation = build(n)\n    if good_checker(new_permutation):\n        [print(x, end=' ') for x in new_permutation]\n    else:\n        print(-1)\n    print()", "from math import sqrt\n\nclass Sol:\n\n    def __init__(self):\n        self.d = {}\n\n    def ans(self, n):\n        if n in self.d:\n            return self.d[n]\n        else:\n            x = sqrt(n - 1)\n            if int(x) == x:\n                self.d[n] = list(range(n - 1, -1, -1))\n            else:\n                y = (int(x) + 1) ** 2 - n + 1\n                self.d[n] = self.ans(y) + list(range(n - 1, y - 1, -1))\n            return self.d[n]\nsol = Sol()\nfor _ in range(int(input())):\n    n = int(input())\n    print(*sol.ans(n))", "from bisect import bisect_left as bl\n\ndef next_(num):\n    return sq[bl(sq, num)]\nsq = []\ni = 0\nwhile i * i <= 10 ** 6:\n    sq.append(i * i)\n    i += 1\nfor _ in range(int(input())):\n    n = int(input())\n    n -= 1\n    ans = []\n    while n >= 0:\n        t = next_(n)\n        diff = t - n\n        for i in range(diff, n + 1):\n            ans.append(i)\n        n = diff - 1\n    print(*ans[::-1])", "def lb(x):\n    l = -1\n    r = len(sq)\n    while r - l > 1:\n        m = (l + r) // 2\n        if sq[m] < x:\n            l = m\n        else:\n            r = m\n    return r\nout = []\nsq = []\ni = 0\nwhile i ** 2 <= 10 ** 5:\n    sq.append(i ** 2)\n    i += 1\nsq.append(i ** 2)\nfor _ in range(int(input())):\n    n = int(input())\n    a = [0] * n\n    m = n - 1\n    while m > 0:\n        s = sq[lb(m)]\n        i = s - m\n        while i < n and a[i] == 0:\n            a[i] = m\n            m -= 1\n            i += 1\n    out.append(a)\nfor i in out:\n    print(*i)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = [j for j in range(n)]\n    ed = n - 1\n    while ed >= 0:\n        tmp = int(math.ceil(math.sqrt(ed)))\n        st = tmp * tmp - ed\n        i1 = st\n        i2 = ed\n        while i1 < i2:\n            (lst[i1], lst[i2]) = (lst[i2], lst[i1])\n            i1 += 1\n            i2 += -1\n        ed = st - 1\n    for i in lst:\n        print(i, end=' ')\n    print('\\n')", "from math import sqrt, ceil\n\ndef checker(permutation):\n    for (i, value) in enumerate(permutation):\n        if sqrt(value + i) != ceil(sqrt(i + value)):\n            return False\n    return True\n\ndef build(num, permutation):\n    if num == 0:\n        return permutation\n    square = ceil(sqrt(num - 1)) ** 2\n    next_n = square - (num - 1)\n    for i in range(num - 1, next_n, -1):\n        solution = square - i\n        permutation[solution] = i\n        permutation[i] = solution\n    return build(next_n, permutation)\nfor _ in range(int(input())):\n    n = int(input())\n    perm = list(range(n))\n    perm = build(n, perm)\n    if checker(perm):\n        print(*perm)\n    else:\n        print(-1)"]