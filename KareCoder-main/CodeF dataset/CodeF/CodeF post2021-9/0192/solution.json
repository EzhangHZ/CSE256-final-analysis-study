["from sys import stdin\nfrom math import log, floor, ceil, gcd\nfrom collections import defaultdict as dd\ninput = stdin.readline\ninp = lambda : int(stdin.readline())\nrs = lambda : stdin.readline().strip()\n\ndef ra(typ):\n    return list(map(typ, stdin.readline().split()))\n\ndef rv(typ):\n    return map(typ, stdin.readline().split())\n\ndef main():\n    for _ in range(inp()):\n        d = dd(int)\n        s = rs()\n        for i in s:\n            d[i] += 1\n        for i in range(len(s)):\n            if d[s[i]] == 1:\n                x = i\n                break\n            d[s[i]] -= 1\n        print(s[x:])\nmain()", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    s = inp().strip()\n    d = dict()\n    for i in s:\n        d[i] = d.get(i, 0) + 1\n    for i in range(len(s)):\n        c = s[i]\n        if d[c] == 1:\n            print(s[i:])\n            return\n        d[c] -= 1\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "def solve():\n    d = {}\n    for i in x:\n        d[i] = 0\n    s = len(d)\n    s2 = 0\n    n = x[:]\n    for i in range(len(x) - 1, -1, -1):\n        if d[x[i]] == 0 or s2 != s:\n            s2 -= d[x[i]]\n            d[x[i]] = 1\n            s2 += d[x[i]]\n        else:\n            n = x[i + 1:]\n            break\n    return n\nfrom sys import stdin\ninput = stdin.readline\nt = int(input())\nfor i in range(t):\n    x = input().strip()\n    print(solve())", "from sys import stdin\nans = []\nfor _ in range(int(input())):\n    s = list(input())\n    st = set(s)\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] in st:\n            st.remove(s[i])\n            if len(st) == 0:\n                ans.append(''.join(s[i:]))\n                break\nprint('\\n'.join(ans))", "cases = []\nfor i in range(int(input())):\n    cases.append(input())\nfor case in cases:\n    dict = {}\n    ind = len(case) - 1\n    for i in range(len(case) - 1, -1, -1):\n        if case[i] in dict:\n            dict[case[i]] = dict[case[i]] + 1\n        else:\n            dict[case[i]] = 1\n            ind = i\n    print(case[ind:])", "def main():\n    from sys import stdin, stdout\n    rl = stdin.readline\n    wl = stdout.write\n    for _ in range(int(rl())):\n        s = rl().strip()\n        a = [-1] * 26\n        for (i, x) in enumerate(s[::-1]):\n            if a[ord(x) - ord('a')] == -1:\n                a[ord(x) - ord('a')] = i\n        m = max(a)\n        wl(s[len(s) - m - 1:] + '\\n')\nmain()", "t = int(input())\nfor _ in range(t):\n    s = input()\n    p = {c: i for (i, c) in enumerate(s)}\n    res = s[min(p.values()):]\n    print(res)", "import sys\nimport math\nfrom collections import deque\nimport heapq\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\ndef mpp():\n    return map(int, inp().split())\n\ndef lis():\n    return list(mpp())\n\ndef pr(obj):\n    sys.stdout.write(obj + '\\n')\n\ndef sol(s):\n    di = {}\n    for i in s:\n        if di.get(i):\n            di[i] += 1\n        else:\n            di[i] = 1\n    j = 0\n    while j < len(s):\n        di[s[j]] -= 1\n        if di[s[j]] == 0:\n            return s[j:]\n        j += 1\n    return ''\n\ndef main():\n    t = int(inp())\n    for _ in range(t):\n        s = inp()\n        pr(sol(s))\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef solve(s):\n    n = len(s)\n    cnt = {}\n    for i in range(n):\n        if s[i] not in cnt:\n            cnt[s[i]] = 0\n        cnt[s[i]] += 1\n    for i in range(n):\n        if cnt[s[i]] == 1:\n            print(s[i:])\n            return\n        cnt[s[i]] -= 1\nfor _ in range(int(input())):\n    s = input().strip()\n    solve(s)", "def test(arr):\n    mp = {}\n    for i in arr:\n        if i not in mp:\n            mp[i] = 1\n        else:\n            mp[i] += 1\n    index = -1\n    for i in range(len(arr)):\n        index = i\n        if mp[arr[i]] > 1:\n            mp[arr[i]] -= 1\n        else:\n            break\n    return arr[index:]\nt = int(input())\nfor i in range(t):\n    s = input()\n    print(test(s))", "from collections import deque, Counter\nimport sys\ndic_temp = {}\niT = int(input())\nfor _ in range(iT):\n    s = sys.stdin.readline().strip()\n    dic_temp = dict(Counter(s))\n    for i in range(len(s)):\n        if dic_temp[s[i]] == 1:\n            print(s[i:])\n            break\n        else:\n            dic_temp[s[i]] -= 1", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_ls():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef main():\n    for _ in range(int(input())):\n        s = input()\n        d = dict()\n        for c in s:\n            if c not in d:\n                d[c] = 1\n            else:\n                d[c] += 1\n        i = 0\n        for c in s:\n            if d[c] >= 2:\n                d[c] -= 1\n                i += 1\n            else:\n                break\n        print(s[i:])\nmain()", "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nM = int(1000000000.0) + 7\n\ndef solve():\n    s = input().strip('\\n')\n    n = len(s)\n    if n == 1:\n        return s\n    l = Counter(s)\n    for i in range(n):\n        if l[s[i]] > 1:\n            l[s[i]] -= 1\n        else:\n            return s[i:]\n    return s\nfor _ in range(int(input())):\n    print(solve())", "for _ in range(int(input())):\n    s = input()\n    l = len(s)\n    for i in range(l):\n        if s.find(s[i], i + 1) == -1:\n            print(s[i:])\n            break", "for _ in range(int(input())):\n    s = input()\n    x = set(s)\n    print(s[min((s.rindex(y) for y in x)):])", "for _ in range(int(input())):\n    s = input()\n    hashset = set(s)\n    l = len(hashset)\n    n = len(s)\n    x = set()\n    for i in range(n - 1, -1, -1):\n        x.add(s[i])\n        if len(x) == l:\n            print(s[i:])\n            break", "def prefix_removal(s):\n    freq = dict()\n    for ele in s:\n        if ele in freq:\n            freq[ele] += 1\n        else:\n            freq[ele] = 1\n    i = 0\n    while i < len(s):\n        if freq[s[i]] == 1:\n            break\n        freq[s[i]] -= 1\n        i += 1\n    print(s[i:])\ntest = int(input())\nwhile test:\n    s = input()\n    prefix_removal(s)\n    test -= 1", "from collections import defaultdict\n\ndef solve():\n    s = input()\n    d = defaultdict(set)\n    for (i, v) in enumerate(s):\n        d[v].add(i)\n    for (i, v) in enumerate(s):\n        d[v].remove(i)\n        if not d[v]:\n            return s[i:]\n\ndef main():\n    for _ in range(int(input())):\n        print(solve())\nmain()", "t = int(input())\nwhile t:\n    t -= 1\n    s = input()\n    l = list(s)\n    rev = l[::-1]\n    s1 = set(l)\n    m = 0\n    for i in s1:\n        temp = rev.index(i)\n        if temp > m:\n            m = temp\n    print(s[len(s) - m - 1:])", "def solve(s):\n    mp = {}\n    for i in s:\n        if i in mp:\n            mp[i] += 1\n        else:\n            mp[i] = 1\n    for i in range(len(s)):\n        if mp[s[i]] == 1:\n            return s[i:]\n        else:\n            mp[s[i]] -= 1\nT = int(input())\nfor i in range(T):\n    s = input()\n    print(solve(s))", "from collections import defaultdict\nt = int(input())\n\ndef recur(s):\n    (n, cnt) = (len(s), defaultdict(int))\n    for c in s:\n        cnt[c] += 1\n    for i in range(n):\n        if cnt[s[i]] == 1:\n            return s[i:]\n        cnt[s[i]] -= 1\nfor _ in range(t):\n    s = input()\n    print(recur(s))", "for _ in range(int(input())):\n    s = input()\n    d = {}\n    for i in s:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in range(len(s)):\n        d[s[i]] -= 1\n        if d[s[i]] == 0:\n            print(s[i:])\n            break", "t = int(input())\nwhile t > 0:\n    t -= 1\n    s = input()[::-1]\n    p = 0\n    for c in set(s):\n        p = max(p, s.index(c))\n    print(s[:p + 1][::-1])", "import math\nfor k in range(int(input())):\n    s = input()\n    if len(s) == 1:\n        print(s)\n    else:\n        d = dict()\n        for k in range(len(s)):\n            d[s[k]] = k\n        l = []\n        for k in d:\n            l.append(d[k])\n        m = min(l)\n        print(s[m:])", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    d = {}\n    for i in s:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    j = 0\n    for j in range(n):\n        if d[s[j]] == 1:\n            break\n        else:\n            d[s[j]] -= 1\n    print(s[j:])", "def solve(x):\n    n = len(x)\n    set_x = set(x)\n    count = 0\n    for i in range(n - 1, -1, -1):\n        a = x[i]\n        count += 1\n        if a in set_x:\n            set_x -= {a}\n            if set_x == set():\n                break\n    print(x[n - count:n])\n\ndef main():\n    t = int(input())\n    for cases in range(t):\n        eins = input()\n        solve(eins)\nmain()", "import math\nimport sys\nimport itertools\nimport fractions\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\nfor t in wtf[1:]:\n    S = t\n    N = len(S)\n    Fs = dict()\n    for s in S:\n        if s not in Fs:\n            Fs[s] = 1\n        else:\n            Fs[s] += 1\n    for i in range(N):\n        if Fs[S[i]] - 1 == 0:\n            print(S[i:])\n            break\n        Fs[S[i]] -= 1", "def main():\n    times = int(input())\n    for _ in range(times):\n        data = input()\n        size = len(data)\n        flat = {}\n        for i in range(size):\n            if data[i] in flat:\n                flat[data[i]] += 1\n            else:\n                flat[data[i]] = 1\n        ans = 0\n        for i in range(size):\n            if flat[data[i]] == 1:\n                ans = i\n                break\n            else:\n                flat[data[i]] -= 1\n        print(data[ans:])\nmain()", "for inh in range(int(input())):\n    s = input()\n    n = len(s) - 1\n    k = set()\n    while n >= 0:\n        if s[n] not in k:\n            ans = n\n            k.add(s[n])\n        n -= 1\n    print(s[ans:])", "t = int(input())\nfor _ in range(t):\n    string = input()\n    char_dict = {}\n    for item in string:\n        if char_dict.get(item) is None:\n            char_dict[item] = 1\n        else:\n            char_dict[item] += 1\n    count = 0\n    while char_dict[string[count]] >= 2:\n        char_dict[string[count]] -= 1\n        count += 1\n    print(string[count:])", "from collections import defaultdict\nt = int(input())\nfor test in range(t):\n    s = input().strip()\n    freq = defaultdict(int)\n    for i in s:\n        freq[i] += 1\n    res = 0\n    for i in s:\n        if freq[i] == 1:\n            break\n        freq[i] -= 1\n        res += 1\n    print(s[res:])", "for _ in range(int(input())):\n    s = input()\n    l = len(s)\n    d = set()\n    for i in range(l - 1, -1, -1):\n        if s[i] not in d:\n            ans = s[i:]\n            d.add(s[i])\n    print(ans)", "def solve(s):\n    string_array = list(s)\n    char_list = list(set(string_array))\n    occ_list = []\n    for char in char_list:\n        occ_list.append(s.rfind(char))\n    min_index = min(occ_list)\n    return s[min_index:]\nn = int(input().strip())\nfor i in range(n):\n    s = input().replace('\\n', '')\n    print(solve(s))", "t = int(input())\nfor _ in range(0, t):\n    a = input()\n    b = {}\n    for ele in a:\n        if ele in b:\n            b[ele] += 1\n        else:\n            b[ele] = 1\n    f = ''\n    for ele in range(len(a)):\n        if b[a[ele]] == 1:\n            f = a[ele:]\n            break\n        else:\n            b[a[ele]] -= 1\n    print(f)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    dic = {}\n    for c in s:\n        dic[c] = dic.get(c, 0) + 1\n    i = 0\n    while dic[s[i]] > 1:\n        dic[s[i]] -= 1\n        i += 1\n    print(s[i:])", "t = int(input())\nfor _ in range(t):\n    s = input()\n    dic = {}\n    for c in s:\n        dic[c] = dic.get(c, 0) + 1\n    i = 0\n    while dic[s[i]] > 1:\n        dic[s[i]] -= 1\n        i += 1\n    print(s[i:])", "for i in range(int(input())):\n    s = input()\n    mp = {}\n    for x in s:\n        if x in mp:\n            mp[x] += 1\n        else:\n            mp[x] = 1\n    i = 0\n    while mp[s[i]] > 1:\n        mp[s[i]] -= 1\n        i += 1\n    print(s[i:])", "def inp():\n    return int(input())\nfor _ in range(inp()):\n    s = input()\n    d = {}\n    idx = len(s) - 1\n    for c in s[::-1]:\n        if d.get(c, None) is None:\n            d[c] = idx\n        idx -= 1\n    print(s[min(d.values()):])", "def find(s):\n    sdict = {}\n    for e in s:\n        if sdict.get(e, 0) > 0:\n            sdict[e] += 1\n        else:\n            sdict[e] = 1\n    lists = list(s)\n    lists.reverse()\n    while sdict[lists[-1]] > 1:\n        x = lists.pop()\n        sdict[x] -= 1\n    lists.reverse()\n    return ''.join(lists)\ncases = int(input())\nfor _ in range(cases):\n    s = input()\n    print(find(s))", "t = int(input())\nfor _ in range(t):\n    s = input()\n    av = ord('a')\n    n = [0] * 26\n    for i in range(len(s)):\n        n[ord(s[i]) - 97] = i\n    for j in range(len(s)):\n        if j == n[ord(s[j]) - 97]:\n            break\n    print(s[j:])", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nimport heapq\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nmod = 998244353\n\ndef func():\n    s = strng()\n    n = len(s)\n    d = {}\n    for i in range(n):\n        if s[i] in d:\n            d[s[i]] += 1\n        else:\n            d[s[i]] = 1\n    for i in range(n):\n        if d[s[i]] == 1:\n            return s[i:]\n        d[s[i]] -= 1\nt = inp()\nfor i in range(t):\n    print(func())", "t = int(input())\nwhile t:\n    s = input()\n    curr = 0\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    curr = 0\n    for i in s:\n        if d[i] > 1:\n            d[i] -= 1\n            curr += 1\n        else:\n            break\n    print(s[curr:])\n    t -= 1", "for _ in range(int(input())):\n    S = input()\n    k = len(S)\n    A = []\n    L = k\n    for i in range(L - 1, -1, -1):\n        if S[i] not in A:\n            A.append(S[i])\n            k = i\n    print(S[k:])", "t = int(input())\nfor k in range(t):\n    st = input()\n    ans = ''\n    d = {}\n    n = len(st)\n    for ele in st:\n        d[ele] = d.get(ele, 0) + 1\n    for i in range(n):\n        if d[st[i]] == 1:\n            ans = st[i:]\n            break\n        else:\n            d[st[i]] -= 1\n    print(ans)", "for iii in range(int(input())):\n    s = input()\n    e = {i: 0 for i in s}\n    a = len(s)\n    for i in s:\n        e[i] += 1\n    for i in range(len(s)):\n        if e[s[i]] == 1:\n            a = i\n            break\n        e[s[i]] -= 1\n    print(s[a:len(s)])", "def f():\n    s = input()\n    if len(set(s)) == 0:\n        return s[0]\n    d = {}\n    for i in s:\n        d[i] = d.get(i, 0) + 1\n    for i in range(len(s)):\n        if d[s[i]] == 1:\n            return s[i:]\n        d[s[i]] -= 1\nn = int(input())\nfor _ in range(n):\n    print(f())", "from collections import defaultdict\nfor _ in range(int(input())):\n    s = input()\n    d = defaultdict(int)\n    for i in s:\n        d[i] += 1\n    c = 0\n    for i in s:\n        if d[i] == 1:\n            break\n        else:\n            d[i] -= 1\n            c += 1\n    print(s[c:])", "def solve():\n    s = input()\n    x = set(s)\n    lowest = len(s) - max([s[::-1].index(y) for y in x]) - 1\n    print(s[lowest:])\nfor tc in range(int(input())):\n    solve()", "def solve():\n    n = input()\n    dic = {i: n.count(i) for i in set(list(n))}\n    i = 0\n    for i in range(len(n)):\n        if dic[n[i]] > 1:\n            dic[n[i]] -= 1\n            i += 1\n        else:\n            break\n    print(n[i:])\ntst = int(input())\nfor i in range(tst):\n    solve()", "def solve():\n    s = input()\n    d = dict()\n    for i in s:\n        if i not in d:\n            d[i] = 0\n        d[i] += 1\n    fl = 1\n    ans = []\n    for i in s:\n        d[i] -= 1\n        if fl and d[i] != 0:\n            continue\n        else:\n            ans.append(i)\n            fl = 0\n    print(''.join(ans))\n\ndef main():\n    n = int(input())\n    while n:\n        n -= 1\n        solve()\nmain()", "t = int(input())\nfor _ in range(0, t):\n    s = input()\n    dict1 = {}\n    for i in range(0, len(s)):\n        ch = s[i]\n        if ch in dict1:\n            dict1[ch] += 1\n        else:\n            dict1[ch] = 1\n    ind = 0\n    for i in range(0, len(s)):\n        ch = s[i]\n        if dict1[ch] > 1:\n            dict1[ch] -= 1\n        else:\n            ind = i\n            break\n    s1 = s[i:]\n    print(s1)", "for _ in range(int(input())):\n    s = input()\n    d = {}\n    for i in s:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    ans = ''\n    f = 0\n    pos = 0\n    for i in s:\n        if d[i] > 1:\n            d[i] -= 1\n            pos = pos + 1\n        elif d[i] == 1:\n            print(s[pos:])\n            break", "def solve():\n    n = input()\n    dic = {i: n.count(i) for i in set(list(n))}\n    i = 0\n    for i in range(len(n)):\n        if dic[n[i]] > 1:\n            dic[n[i]] -= 1\n            i += 1\n        else:\n            break\n    print(n[i:])\ntst = int(input())\nfor i in range(tst):\n    solve()", "def solve():\n    n = input()\n    dic = {i: n.count(i) for i in set(list(n))}\n    i = 0\n    for i in range(len(n)):\n        if dic[n[i]] > 1:\n            dic[n[i]] -= 1\n            i += 1\n        else:\n            break\n    print(n[i:])\ntst = int(input())\nfor i in range(tst):\n    solve()", "def prefixRemoval(targetStr):\n    temp = targetStr\n    charList = [len(targetStr) for i in range(26)]\n    for i in range(0, len(targetStr)):\n        charList[ord(targetStr[i]) - 97] = i\n    return targetStr[min(charList):]\nfor i in range(int(input())):\n    targetStr = str(input())\n    print(prefixRemoval(targetStr))", "for el in range(int(input())):\n    (s, l) = (input(), [])\n    for i in range(1, len(s) + 1):\n        if s[-i] not in l:\n            last_up = i\n            l.append(s[-i])\n    print(s[len(s) - last_up:])", "t = int(input(''))\nfor z in range(t):\n    s = input('')\n    b = set(s)\n    d = dict()\n    for i in b:\n        if i not in d:\n            d[i] = s.rindex(i)\n    c = 1000000\n    for j in d:\n        if d[j] < c:\n            c = d[j]\n    print(s[c:])", "def solution(string):\n    counter = {_: 0 for _ in 'abcdefghijklmnopqrstuvwxyz'}\n    for ch in string:\n        counter[ch] += 1\n    for i in range(len(string)):\n        if counter[string[i]] == 1:\n            return string[i:]\n        elif counter[string[i]] > 1:\n            counter[string[i]] -= 1\nfor _ in range(int(input())):\n    string = input()\n    print(solution(string))", "tc = int(input())\nfor _ in range(tc):\n    s = input()\n    counter = dict.fromkeys(list('abcdefghijklmnopqrstuvwxyz'), 0)\n    for c in s:\n        counter[c] += 1\n    i = 0\n    while i < len(s) and counter[s[i]] > 1:\n        counter[s[i]] -= 1\n        i += 1\n    print(s[i:])", "for i in range(int(input())):\n    s = input()\n    dct = dict()\n    num = 0\n    for i in s:\n        num += 1\n        dct[i] = num\n    arr = []\n    for i in dct.keys():\n        arr.append([i, dct[i]])\n    arr.sort(key=lambda x: x[1])\n    print(s[arr[0][1] - 1:])", "t = int(input())\nfor i in range(t):\n    s = input()\n    d = {}\n    for i in range(len(s)):\n        d[s[i]] = d.get(s[i], 0) + 1\n    o = ''\n    for i in range(len(s)):\n        if d[s[i]] > 1:\n            d[s[i]] -= 1\n        else:\n            o += s[i:len(s)]\n            break\n    print(o)", "def haha(s):\n    l = list(s)\n    sl = l[::-1]\n    se = list(set(l))\n    r = l[::-1]\n    d = {}\n    for i in se:\n        d[i] = r.index(i)\n    t = max(d.values())\n    mg = sl[:t + 1]\n    gm = mg[::-1]\n    return ''.join(gm)\nfor i in range(int(input())):\n    n = input()\n    x = haha(n)\n    print(x)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    has = {}\n    for i in s:\n        if i not in has:\n            has[i] = 1\n        else:\n            has[i] += 1\n    res = ''\n    i = 0\n    while i < len(s):\n        if has[s[i]] > 1:\n            has[s[i]] -= 1\n        else:\n            break\n        i += 1\n    res = res + s[i:]\n    print(res)", "for _ in range(int(input())):\n    a = input()\n    dic = {}\n    for i in a:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    idx = -1\n    for i in range(len(a)):\n        if dic[a[i]] > 1:\n            dic[a[i]] -= 1\n            idx = i\n        else:\n            break\n    s = ''\n    for i in range(idx + 1, len(a), 1):\n        s += a[i]\n    print(s)", "t = int(input())\nfor i in range(t):\n    s = list(input())\n    d = {}\n    k = 0\n    for i in s:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in s:\n        if d[i] > 1:\n            k = k + 1\n            d[i] -= 1\n        else:\n            break\n    if k == len(s):\n        print(s[0])\n    else:\n        print(''.join(s[k:]))", "for _ in range(int(input())):\n    inp = input()\n    count = {x: 0 for x in inp}\n    for item in inp:\n        count[item] += 1\n    for (i, char) in enumerate(inp):\n        if count[char] > 1:\n            count[char] -= 1\n        else:\n            break\n    print(inp[i:])", "for _ in range(int(input())):\n    s = input()\n    c = {}\n    for x in s:\n        c[x] = c.get(x, 0) + 1\n    i = 0\n    while i < len(s):\n        if c[s[i]] > 1:\n            c[s[i]] -= 1\n            i += 1\n        else:\n            break\n    print(s[i:])", "t = int(input())\nfor i in range(t):\n    s = input()\n    d = {}\n    for i in range(len(s)):\n        d[s[i]] = i\n    m = float('inf')\n    for i in d.values():\n        m = min(i, m)\n    print(s[m:])", "import string\nt = int(input())\nfor i in range(t):\n    rpos = dict.fromkeys(string.ascii_lowercase, 0)\n    text = input()\n    for i in range(len(text)):\n        rpos[text[i]] = i + 1\n    pos = min([i for i in rpos.values() if i != 0])\n    print(text[pos - 1:])", "for _ in range(int(input())):\n    a = input()\n    n = len(a)\n    d = {}\n    for i in range(n):\n        try:\n            d[a[i]] += 1\n        except:\n            d[a[i]] = 1\n    for i in range(n):\n        if d[a[i]] == 1:\n            print(a[i:])\n            break\n        else:\n            d[a[i]] -= 1", "for _ in range(int(input())):\n    s = input()\n    idx = 0\n    mp = {}\n    for i in range(len(s)):\n        if s[i] in mp:\n            mp[s[i]] += 1\n        else:\n            mp[s[i]] = 1\n    for i in range(len(s)):\n        if mp[s[i]] == 1:\n            idx = i\n            break\n        else:\n            mp[s[i]] -= 1\n    print(s[idx:])", "t = int(input())\nfor _ in range(t):\n    s = input()\n    amounts = {}\n    for ch in s:\n        amounts[ch] = amounts.get(ch, 0) + 1\n    for i in range(len(s)):\n        if amounts[s[i]] == 1:\n            print(s[i:])\n            break\n        amounts[s[i]] -= 1", "t = int(input())\nalfa = 'abcdefghijklmnopqrstuvwxyz'\nfor _ in range(t):\n    s = input()\n    las = len(s)\n    for i in alfa:\n        k = s.rfind(i)\n        if k < las and k != -1:\n            las = k\n    print(s[las:])", "from collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    freq = Counter(s)\n    for i in range(len(s)):\n        if freq[s[i]] == 1:\n            print(s[i:])\n            break\n        freq[s[i]] -= 1", "from collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    f = Counter(s)\n    i = 0\n    for item in s:\n        if f[item] <= 1:\n            break\n        f[item] -= 1\n        i += 1\n    print(s[i:])", "def solve(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    a = dict(zip(alphabet, [s.count(i) for i in alphabet]))\n    for (i, j) in enumerate(s):\n        if a[j] <= 1:\n            return s[i:]\n        else:\n            a[j] -= 1\nfor _ in range(int(input())):\n    print(solve(input()))", "n = int(input())\nfor i in range(n):\n    t = input()\n    lis = list(t)\n    g = {}\n    for j in lis:\n        if j not in g:\n            g[j] = 1\n        else:\n            g[j] = g[j] + 1\n    tin = 0\n    for k in range(len(lis)):\n        if g[lis[k]] > 1:\n            g[lis[k]] = g[lis[k]] - 1\n        else:\n            tin = k\n            break\n    print(t[tin:])", "t = int(input())\nfor i in range(0, t):\n    s = input()\n    freq = [0] * 26\n    index = 0\n    for i in s:\n        freq[ord(i) - 97] += 1\n    for i in s:\n        if freq[ord(i) - 97] == 1:\n            break\n        else:\n            freq[ord(i) - 97] -= 1\n            index += 1\n    print(s[index:])", "for _ in range(int(input())):\n    s = input()\n    d = {}\n    for i in s:\n        d[i] = d.get(i, 0) + 1\n    i = 0\n    while i < len(s):\n        if d[s[i]] > 1:\n            d[s[i]] -= 1\n            i += 1\n        else:\n            break\n    print(s[i:])", "from collections import defaultdict as dd\nfor _ in range(int(input())):\n    string = input().strip()\n    dk = dd(int)\n    for x in string:\n        dk[x] += 1\n    y = 0\n    for x in string:\n        if dk[x] == 1:\n            break\n        dk[x] -= 1\n        y += 1\n    print(string[y:])", "import sys\nfrom math import *\nfor _ in range(int(input())):\n    s = input()\n    h = {}\n    k = -1\n    for i in s:\n        h[i] = h.get(i, 0) + 1\n    for i in range(len(s)):\n        if h[s[i]] >= 2:\n            h[s[i]] -= 1\n        else:\n            print(s[i:])\n            break", "for _ in range(int(input())):\n    s = list(str(input()))\n    dict = {}\n    for i in s:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    for i in range(len(s)):\n        if dict[s[i]] > 1:\n            dict[s[i]] -= 1\n            s[i] = ''\n        else:\n            break\n    print(''.join(s))", "import math\n\ndef Solve():\n    s = input()\n    a = [0 for i in range(len(s))]\n    dic = {}\n    for i in range(len(a) - 1, -1, -1):\n        if dic.get(s[i]) == None:\n            dic[s[i]] = 1\n        else:\n            dic[s[i]] = dic[s[i]] + 1\n        a[i] = dic[s[i]]\n    for i in range(len(a)):\n        if a[i] == 1:\n            break\n    print(s[i:])\nq = int(input())\nwhile q > 0:\n    Solve()\n    q = q - 1", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    x = set([])\n    j = 0\n    for i in range(n):\n        if s[n - i - 1] not in x:\n            j = n - i - 1\n        x.add(s[n - i - 1])\n    print(s[j:])", "l1 = [chr(i) for i in range(97, 123)]\nl2 = [0] * 26\nfor _ in range(int(input())):\n    d = dict(zip(l1, l2))\n    s = input()\n    k = len(s)\n    for i in range(k):\n        d[s[i]] += 1\n    a = 0\n    for i in range(k):\n        if d[s[i]] > 1:\n            d[s[i]] -= 1\n        else:\n            a = i\n            break\n    print(s[a:])", "import sys, bisect, collections, itertools\nfor _ in range(int(input())):\n    x = input()\n    y = collections.Counter(x)\n    for (i, a) in enumerate(x):\n        if y[a] == 1:\n            print(x[i:])\n            break\n        else:\n            y[a] -= 1", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    ch = [0] * 26\n    ans = s[-1]\n    for i in range(n - 1, -1, -1):\n        pos = ord(s[i]) - ord('a')\n        ch[pos] += 1\n        if ch[pos] == 1:\n            ans = s[i:]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    a = {}\n    for i in range(len(s)):\n        if s[i] in a:\n            a[s[i]] += 1\n        else:\n            a[s[i]] = 1\n    for i in range(len(s)):\n        a[s[i]] -= 1\n        if a[s[i]] == 0:\n            print(s[i:])\n            break", "t = eval(input())\nfor _ in range(t):\n    s = input()\n    s1 = s[::-1]\n    k = []\n    d = []\n    for i in range(len(s)):\n        if s1[i] not in k:\n            k.append(s1[i])\n            d.append(1)\n        else:\n            d.append(0)\n    d = d[::-1]\n    for i in range(len(d)):\n        if d[i] == 1:\n            print(s[i:])\n            break\n    else:\n        print(s)", "t = int(input())\nwhile t:\n    s = input()\n    ans = 0\n    l = list(s)\n    from collections import Counter\n    d = Counter(l)\n    for i in l:\n        if d[i] != 1:\n            ans = ans + 1\n            d[i] = d[i] - 1\n        else:\n            print(''.join(s[ans:]))\n            break\n    t = t - 1", "from collections import Counter, deque\n\ndef prefixRemoval(s):\n    count = Counter(s)\n    temp = deque(s)\n    for word in s:\n        if count[word] > 1:\n            count[word] -= 1\n            temp.popleft()\n        else:\n            break\n    return ''.join(temp)\nt = int(input())\nfor i in range(t):\n    s = input()\n    print(prefixRemoval(s))", "from collections import Counter\nfor _ in range(int(input())):\n    s = str(input())\n    n = len(s)\n    x = Counter(s)\n    i = 0\n    while i < n:\n        if x[s[i]] > 1:\n            x[s[i]] -= 1\n            i += 1\n        else:\n            break\n    print(s[i:])", "for _ in range(int(input())):\n    string = input()\n    from collections import Counter\n    freq = Counter(string)\n    i = 0\n    while string:\n        if freq[string[i]] > 1:\n            freq[string[i]] -= 1\n            i += 1\n        else:\n            break\n    print(string[i:])", "from collections import Counter\nfor _ in range(int(input())):\n    l = input()\n    str = list(l)\n    m = Counter(l)\n    for i in range(len(str)):\n        if m[str[i]] != 1:\n            m[str[i]] -= 1\n        else:\n            print(''.join(str[i:]))\n            break", "t = int(input())\nwhile t:\n    s = input()\n    l = [0] * 26\n    a = 0\n    for i in range(len(s)):\n        l[ord(s[i]) - 97] += 1\n    for i in range(len(s)):\n        if l[ord(s[i]) - 97] == 1:\n            a = i\n            break\n        else:\n            l[ord(s[i]) - 97] -= 1\n    print(s[a:])\n    t -= 1"]