["import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    s = input()\n    a = s.count('B')\n    b = n - a\n    if k == 1 and a == 0:\n        print(1)\n    elif k == 1:\n        print(0)\n    elif k == n:\n        print(b)\n    else:\n        co = s[:k].count('W')\n        a = co\n        for i in range(k, n):\n            if s[i] == s[i - k]:\n                continue\n            elif s[i] == 'B':\n                a -= 1\n                co = min(co, a)\n            else:\n                a += 1\n        print(co)", "def main():\n    for _ in range(int(input())):\n        problem()\n\ndef problem():\n    (n, k) = map(int, input().split())\n    strip = input().rstrip()\n    (i, j) = (0, k)\n    window_white = strip[:k].count('W')\n    answer = window_white\n    while j < n:\n        i += 1\n        j += 1\n        if strip[i - 1] == 'W':\n            window_white -= 1\n        if strip[j - 1] == 'W':\n            window_white += 1\n        if window_white < answer:\n            answer = window_white\n    print(answer)\nimport sys\ninput = sys.stdin.readline\nexit(main())", "ct = int(input())\nanswer = []\n\ndef resolve(s, n, k):\n    l = 0\n    r = k - 1\n    w = 0\n    for i in s[:k]:\n        if i == 'W':\n            w += 1\n    m_w = w\n    for i in range(n - k):\n        l += 1\n        r += 1\n        if s[l - 1] == 'W':\n            m_w -= 1\n        if s[r] == 'W':\n            m_w += 1\n        if m_w < w:\n            w = m_w\n    return w\nfor i in range(ct):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    answer.append(resolve(s, n, k))\nfor i in answer:\n    print(i)", "from sys import stdin, stdout, setrecursionlimit\nimport collections\nimport math\nfrom collections import deque\n\ndef test():\n    return\n\ndef solve():\n    return\n\ndef main():\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        s = input().strip()\n        d = deque(s[:k])\n        m = d.count('W')\n        c = d.count('W')\n        for i in range(k, n):\n            add = s[i]\n            rem = d.popleft()\n            if rem == 'W':\n                c -= 1\n            d.append(add)\n            if add == 'W':\n                c += 1\n            m = min(c, m)\n        print(m)\n    return\ninput = stdin.readline\nmain()", "from sys import stdin, stdout\nimport sys\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 6)\n\ndef main():\n    t = int(stdin.readline().strip())\n    for tc in range(1, t + 1):\n        (n, k) = map(int, stdin.readline().split())\n        strip = stdin.readline().strip()\n        white = 0\n        minwhite = 10000000000\n        for i in range(k):\n            if strip[i] == 'W':\n                white += 1\n        minwhite = white\n        i = 0\n        j = k - 1\n        while j + 1 < n:\n            if strip[i] == 'W':\n                white -= 1\n            i += 1\n            j += 1\n            if strip[j] == 'W':\n                white += 1\n            minwhite = min(minwhite, white)\n        print(minwhite)\nmain()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    w = input()[:-1]\n    s = w[:k]\n    c = s.count('W')\n    d = c\n    for i in range(n - k):\n        if w[i] == 'W':\n            c -= 1\n        if w[i + k] == 'W':\n            c += 1\n        d = min(d, c)\n    print(d)", "from sys import stdin\nfrom collections import Counter\nfrom bisect import bisect_left as bl\nfrom collections import defaultdict\ninput = stdin.readline\nfor test in range(int(input())):\n    (n, k) = map(int, input().split())\n    stripe = input().strip()\n    curr = s = stripe[:k].count('W')\n    for i in range(k, n):\n        if stripe[i] == 'B' and stripe[i - k] == 'W':\n            s -= 1\n        elif stripe[i] == 'W' and stripe[i - k] == 'B':\n            s += 1\n        curr = min(curr, s)\n    print(curr)", "from random import getrandbits\nRANDOM = getrandbits(32)\n\nclass Wrapper(int):\n\n    def __init__(self, x):\n        int.__init__(x)\n\n    def __hash__(self):\n        return super(Wrapper, self).__hash__() ^ RANDOM\nT = int(input())\nq = []\nfor i in range(T):\n    a = input().split()\n    (n, k) = (int(a[0]), int(a[1]))\n    data = input()\n    q.append((n, k, data))\n\ndef solve(n, k, data):\n    accum = []\n    summ = 0\n    for i in range(n):\n        accum.append(summ)\n        if data[i] == 'W':\n            summ += 1\n    accum.append(summ)\n    ans = 2000000.0\n    for i in range(k, n + 1):\n        ans = min(ans, accum[i] - accum[i - k])\n    print(ans)\nfor (n, k, data) in q:\n    solve(n, k, data)", "ans = ''\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    bCount = 0\n    for i in range(k):\n        if s[i] == 'B':\n            bCount += 1\n    res = min(n, k - bCount)\n    for i in range(k, n):\n        if s[i - k] == 'B':\n            bCount -= 1\n        if s[i] == 'B':\n            bCount += 1\n        res = min(res, k - bCount)\n    ans += str(res) + '\\n'\nprint(ans)", "def solve(b, k):\n    w = 0\n    bb = 0\n    for i in range(k):\n        if b[i] == 'W':\n            w += 1\n        else:\n            bb += 1\n    ans = w\n    for i in range(k, len(b)):\n        if b[i - k] == 'W':\n            w -= 1\n        else:\n            bb -= 1\n        if b[i] == 'W':\n            w += 1\n        else:\n            bb += 1\n        if w < ans:\n            ans = w\n    return ans\nt = int(input())\nfor i in range(t):\n    a = input().split(' ')\n    n = int(a[0])\n    k = int(a[1])\n    b = input()\n    c = solve(b, k)\n    print(c)", "def sol(n, k, s):\n    s = list(s)\n    w = 0\n    for i in range(k):\n        if s[i] == 'W':\n            w = w + 1\n    w1 = w\n    for i in range(1, n - k + 1):\n        if s[i - 1] == 'W':\n            w1 = w1 - 1\n        if s[i + k - 1] == 'W':\n            w1 = w1 + 1\n        if w1 < w:\n            w = w1\n    return w\nt = int(input())\nfor ii in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(sol(n, k, s))", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor i in range(T):\n    (n, k) = map(int, input().split())\n    stripe = input()\n    cnt = 0\n    for j in range(k):\n        if stripe[j] == 'W':\n            cnt += 1\n    mn = cnt\n    for i in range(1, n - k + 1):\n        if stripe[i - 1] == 'W':\n            cnt -= 1\n        if stripe[i + k - 1] == 'W':\n            cnt += 1\n        mn = min(cnt, mn)\n    print(mn)", "tc = int(input())\nfor t in range(tc):\n    (n, k) = map(int, input().split())\n    ar = input()\n    net = ar.count('B')\n    if k == 1 and net == 0:\n        print(1)\n    elif k == 1:\n        print(0)\n    elif k == n:\n        print(n - net)\n    else:\n        net = ar[:k].count('W')\n        co = net\n        for i in range(k, n):\n            if ar[i] != ar[i - k]:\n                if ar[i] == 'W':\n                    net += 1\n                else:\n                    net -= 1\n                    co = min(co, net)\n        print(co)", "def func(n, k, col):\n    i = 0\n    j = k\n    min_len = 0\n    if len(col) == 1:\n        if col[0] == 'B':\n            return 0\n        else:\n            return 1\n    for elem in range(i, j):\n        if col[elem] == 'W':\n            min_len += 1\n    cur = min_len\n    while j < n:\n        deleted_elem = col[i]\n        new_elem = col[j]\n        i += 1\n        j += 1\n        if deleted_elem == new_elem:\n            continue\n        elif deleted_elem == 'B':\n            cur += 1\n        elif deleted_elem == 'W':\n            cur -= 1\n            if cur < min_len:\n                min_len = cur\n    return min_len\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        s = list(map(int, input().split()))\n        n = s[0]\n        k = s[1]\n        col = input()\n        ans = func(n, k, col)\n        print(ans)\nmain()", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    f = s[:k]\n    c = f.count('W')\n    mini = c\n    for i in range(1, n - k + 1):\n        if s[i - 1] == 'W':\n            c -= 1\n        if s[i + k - 1] == 'W':\n            c += 1\n        if c < mini:\n            mini = c\n    print(mini)", "t = int(input())\notvet = []\nfor i in range(t):\n    s0 = input().split()\n    n = int(s0[0])\n    k = int(s0[1])\n    s = input()\n    w = ans = s[:k].count('W')\n    for j in range(1, n - k + 1):\n        if s[j - 1] == 'W':\n            w -= 1\n        if s[j + k - 1] == 'W':\n            w += 1\n        ans = min(ans, w)\n    otvet.append(ans)\nfor m in range(len(otvet)):\n    print(otvet[m])", "t = int(input())\notvet = []\nfor i in range(t):\n    s0 = input().split()\n    n = int(s0[0])\n    k = int(s0[1])\n    s = input()\n    w = ans = s[:k].count('W')\n    for j in range(1, n - k + 1):\n        if s[j - 1] == 'W':\n            w -= 1\n        if s[j + k - 1] == 'W':\n            w += 1\n        ans = min(ans, w)\n    otvet.append(ans)\nfor m in range(len(otvet)):\n    print(otvet[m])", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    c = 0\n    for j in range(k):\n        if s[j] == 'W':\n            c += 1\n    m = c\n    for j in range(k, n):\n        if s[j - k] == 'W' and s[j] == 'B':\n            c -= 1\n            if c < m:\n                m = c\n        elif s[j - k] == 'B' and s[j] == 'W':\n            c += 1\n    print(m)", "def f():\n    nk = list(input().split())\n    n = int(nk[0])\n    k = int(nk[1])\n    a = input()\n    zeros_number = 0\n    result = n\n    for j in range(k):\n        if a[j] == 'W':\n            zeros_number += 1\n    result = zeros_number\n    for i in range(1, n - k + 1):\n        zeros_number += 1 if a[i + k - 1] == 'W' else 0\n        zeros_number -= 1 if a[i - 1] == 'W' else 0\n        result = min(result, zeros_number)\n    return result\nt = input()\nfor i in range(int(t)):\n    print(f())", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    wc = s[:k].count('W')\n    initial = 0\n    final = k - 1\n    value = wc\n    while final < n:\n        if s[initial] == 'W':\n            wc -= 1\n        initial += 1\n        if final + 1 < n:\n            final += 1\n        else:\n            break\n        if s[final] == 'W':\n            wc += 1\n        if wc < value:\n            value = wc\n    print(value)", "x = int(input())\n\ndef cal(n, m, s):\n    b = s[:m].count('B')\n    w = m - b\n    if w == 0:\n        return 0\n    res = w\n    for i in range(n - m):\n        if s[i] == 'W':\n            w -= 1\n        else:\n            b -= 1\n        if s[i + m] == 'W':\n            w += 1\n        else:\n            b += 1\n        res = min(res, w)\n        if res == 0:\n            return 0\n    return res\nfor jj in range(x):\n    (n, m) = [int(i) for i in input().split(' ')]\n    s = input()\n    print(cal(n, m, s))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = input()\n    b = a[0:k]\n    c = b.count('W')\n    mn = c\n    j = 0\n    for i in range(k, n):\n        if a[j] == 'W':\n            c -= 1\n        if a[i] == 'W':\n            c += 1\n        if c < mn:\n            mn = c\n        if mn == 0:\n            break\n        j += 1\n    print(mn)", "def check_str(n, k, s):\n    mini = k\n    count = 0\n    first = 0\n    i = 0\n    while i < k:\n        if s[i] == 'W':\n            count += 1\n        i += 1\n    if count < mini:\n        mini = count\n    for i in range(k, n):\n        if s[first] == 'W':\n            count -= 1\n        if s[i] == 'W':\n            count += 1\n        first += 1\n        if count < mini:\n            mini = count\n    print(mini)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        (n, k) = map(int, input().split())\n        s = input()\n        check_str(n, k, s)\nmain()", "for i in range(int(input())):\n    (a, b) = map(int, input().split())\n    x = input()\n    l = 0\n    r = b\n    v = x[:b].count('W')\n    d = v\n    while True:\n        if r == a:\n            break\n        if x[l] == 'W':\n            v -= 1\n        if x[r] == 'W':\n            v += 1\n        if v < d:\n            d = v\n        r += 1\n        l += 1\n    print(d)", "from collections import Counter\nfrom functools import lru_cache\nimport heapq\nfrom itertools import combinations\nimport math\nimport sys\nsys.setrecursionlimit(2 * 10 ** 5 + 5)\nresult = []\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    string = input().rstrip()\n\n    def solve(k):\n        count = 0\n        startIdx = 0\n        currentMin = float('inf')\n        for (endIdx, char) in enumerate(string):\n            if char == 'W':\n                count += 1\n            if endIdx - startIdx + 1 == k:\n                currentMin = min(currentMin, count)\n            elif endIdx - startIdx + 1 > k:\n                if string[startIdx] == 'W':\n                    count -= 1\n                startIdx += 1\n                currentMin = min(currentMin, count)\n        return currentMin\n    print(solve(k))", "nlines = int(input())\nfor i in range(nlines):\n    (n, k) = map(int, input().split())\n    stripe = input()\n    ans = k\n    ans = 0\n    for x in range(k):\n        if stripe[x] == 'W':\n            ans = ans + 1\n    i = k\n    curr_ans = ans\n    while i < n and ans > 0:\n        if stripe[i] == 'W':\n            curr_ans = curr_ans + 1\n        if stripe[i - k] == 'W':\n            curr_ans = curr_ans - 1\n        if curr_ans < ans:\n            ans = curr_ans\n        i = i + 1\n    print(ans)", "def resi():\n    (n, k) = map(int, input().split())\n    a = input()\n    br = 0\n    for i in range(k):\n        if a[i] == 'W':\n            br += 1\n    mn = br\n    for i in range(k, n):\n        if a[i] == 'W':\n            br += 1\n        if a[i - k] == 'W':\n            br -= 1\n        if mn > br:\n            mn = br\n    print(mn)\n    return\nfor _ in range(int(input())):\n    resi()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = [1 if x == 'B' else 0 for x in input()]\n    first = sum(arr[:k])\n    ans = k - first\n    for i in range(k, n):\n        first += arr[i]\n        first -= arr[i - k]\n        ans = min(ans, k - first)\n    print(ans)", "def solve(s, k):\n    (left, right) = (0, k)\n    cnt = 0\n    for i in range(k):\n        if s[i] == 'W':\n            cnt += 1\n    ans = cnt\n    while right < len(s):\n        if s[right] == 'W':\n            cnt += 1\n        if s[left] == 'W':\n            cnt -= 1\n        ans = min(ans, cnt)\n        right += 1\n        left += 1\n    return ans\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        (n, k) = list(map(int, input().split()))\n        s = input()\n        print(solve(s, k))\nmain()", "def exe():\n    l = []\n    c = s[0:k].count('W')\n    l.append(c)\n    for i in range(1, n - (k - 1)):\n        if s[i - 1] == 'W':\n            c = c - 1\n        if s[i + k - 1] == 'W':\n            c += 1\n        l.append(c)\n    return min(l)\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(exe())", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = s[0:k].count('W')\n    x = ans\n    for i in range(1, n - k + 1):\n        if s[i - 1] == 'W':\n            x -= 1\n        if s[i + k - 1] == 'W':\n            x += 1\n        if x < ans:\n            ans = x\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    m = s[:k].count('W')\n    w = m\n    for i in range(1, n - k + 1):\n        if s[i - 1] == 'W':\n            w -= 1\n        if s[i + k - 1] == 'W':\n            w += 1\n        if w < m:\n            m = w\n    print(m if m >= 0 else 0)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    temp = ctr = s[:k].count('W')\n    for i in range(n - k):\n        if s[i] == 'W':\n            ctr -= 1\n        if s[i + k] == 'W':\n            ctr += 1\n        temp = min(ctr, temp)\n    print(temp)", "def fun(ans, x):\n    s = 0\n    for i in range(len(ans)):\n        if ans[i] == 'W':\n            s += 1\n        ans[i] = s\n    m = ans[x]\n    for i in range(1, len(ans) - x):\n        if m > ans[i + x] - ans[i - 1]:\n            m = ans[i + x] - ans[i - 1]\n    return m\nn = int(input())\nfor _ in range(n):\n    (_, n) = input().split()\n    arr = input()\n    arr = list(arr)\n    print(fun(arr, int(n) - 1))", "Tc = int(input())\nfor _ in range(Tc):\n    (length, k) = map(int, input().split())\n    stripe = input()\n    ans = k\n    white = 0\n    for x in range(k):\n        if stripe[x] == 'W':\n            white = white + 1\n    ans = white\n    for x in range(1, length - k + 1):\n        if stripe[x + k - 1] == 'W':\n            white = white + 1\n        if stripe[x - 1] == 'W':\n            white = white - 1\n        if white == 0:\n            ans = white\n            break\n        if white < ans:\n            ans = white\n    print(ans)", "def f():\n    (n, k) = map(int, input().split())\n    a = input()\n    m = a[:k].count('W')\n    ans = m\n    for i in range(n - k):\n        m -= 1 if a[i] == 'W' else 0\n        m += 1 if a[i + k] == 'W' else 0\n        ans = min(ans, m)\n    print(ans)\nfor _ in range(int(input())):\n    f()", "t = int(input())\nfor tt in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    mins = 0\n    for i in range(k):\n        if s[i] == 'W':\n            mins += 1\n    curs = mins\n    for j in range(n - k):\n        if s[j] == 'W':\n            curs -= 1\n        if s[j + k] == 'W':\n            curs += 1\n        if curs < mins:\n            mins = curs\n    print(mins)", "def BWcheck(string, k):\n    count = 0\n    for i in range(k):\n        if string[i] != 'B':\n            count += 1\n    minimum = count\n    sofar = count\n    for i in range(k, len(string)):\n        if string[i] == string[i - k]:\n            continue\n        elif string[i] == 'B' and string[i - k] == 'W':\n            sofar -= 1\n            minimum = min(minimum, sofar)\n        elif string[i] == 'W' and string[i - k] == 'B':\n            sofar += 1\n    return minimum\nn = int(input())\nfor i in range(n):\n    k = int(input().split(' ')[1])\n    string = input()\n    print(BWcheck(string, k))", "def solve():\n    (n, k) = map(int, input().split())\n    s = input()\n    res = s[:k].count('W')\n    curr = res\n    for i in range(n - k):\n        if s[i + k] == 'W':\n            curr += 1\n        if s[i] == 'W':\n            curr -= 1\n        res = min(res, curr)\n    return res\n\ndef main():\n    for _ in range(int(input())):\n        print(solve())\n    return\nmain()", "t = int(input())\nfor j in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    sm = 'B' * k\n    numbl = 0\n    for i in range(k):\n        if s[i] == 'B':\n            numbl += 1\n    maxnumbl = numbl\n    q = k\n    while maxnumbl < k and q < n:\n        if s[q - k] == 'B':\n            numbl -= 1\n        if s[q] == 'B':\n            numbl += 1\n        if numbl > maxnumbl:\n            maxnumbl = numbl\n        q += 1\n    print(k - maxnumbl)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    s = input()\n    w = 0\n    for i in range(k):\n        if s[i] == 'W':\n            w += 1\n    if w == 0:\n        print(0)\n        continue\n    wt = w\n    for i in range(1, n - k + 1):\n        if s[i - 1] == 'W':\n            wt -= 1\n        if s[i + k - 1] == 'W':\n            wt += 1\n        if wt < w:\n            w = wt\n    print(w)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    a = sum([s[i] == 'B' for i in range(k)])\n    if a == k:\n        print(0)\n    else:\n        b = int(a)\n        for i in range(k, n):\n            a = a + (s[i] == 'B') - (s[i - k] == 'B')\n            if a > b:\n                b = int(a)\n        print(k - b)", "asdasf = int(input())\nfor test in range(asdasf):\n    (n, k) = map(int, input().split())\n    s = input()\n    c = f = 0\n    for i in range(k):\n        if s[i] == 'W':\n            c += 1\n    f = c\n    for i in range(k, n):\n        if s[i] == 'W':\n            c = c + 1\n        if s[i - k] == 'W':\n            c = c - 1\n        if c < f:\n            f = c\n    print(f)", "def solve():\n    (n, k) = map(int, input().split())\n    s = input()\n    s2 = s[0:k]\n    prev = 0\n    countW = s2.count('W')\n    ans = countW\n    for i in range(1, len(s) - k + 1):\n        if s[prev] == 'W' and s[i + k - 1] == 'B':\n            countW -= 1\n        elif s[prev] == 'B' and s[i + k - 1] == 'W':\n            countW += 1\n        prev += 1\n        ans = min(ans, countW)\n    print(ans)\n    return\nfor i in range(int(input())):\n    solve()", "t = int(input())\nfor j in range(t):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    p = input()\n    numb = 0\n    numw = 0\n    for i in range(0, k):\n        if p[i] == 'B':\n            numb += 1\n        else:\n            numw += 1\n    if numb >= k:\n        print(0)\n        continue\n    ans = numw\n    for i in range(k, n):\n        if p[i - k] == 'B':\n            numb -= 1\n        else:\n            numw -= 1\n        if p[i] == 'B':\n            numb += 1\n        else:\n            numw += 1\n        ans = min(ans, numw)\n    print(ans)", "for _ in range(int(input())):\n    a = input().split()\n    (n, k) = (int(a[0]), int(a[1]))\n    x = input()\n    mini = 10 ** 18\n    mini = min(x[:k].count('W'), mini)\n    curr = mini\n    for i in range(k, len(x)):\n        if x[i] == 'W':\n            curr += 1\n        if x[i - k] == 'W':\n            curr -= 1\n        mini = min(mini, curr)\n    print(mini)", "import sys\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    if n == k:\n        print(s.count('W'))\n    else:\n        j = 0\n        x = s[0:k].count('W')\n        mini = x\n        for i in range(k, len(s)):\n            if s[i] == 'W' and s[j] == 'B':\n                x += 1\n                mini = min(mini, x)\n                j = j + 1\n            elif s[i] == 'B' and s[j] == 'W':\n                x -= 1\n                mini = min(mini, x)\n                j = j + 1\n            else:\n                j = j + 1\n        print(mini)", "def solve(n, k):\n    s = input()\n    c = 0\n    m = 200001\n    for i in range(k):\n        if s[i] == 'W':\n            c += 1\n    m = min(m, c)\n    for i in range(0, n - k):\n        if s[i] == 'W':\n            c -= 1\n        if s[k + i] == 'W':\n            c += 1\n        m = min(m, c)\n    print(m)\nt = int(input())\nfor i in range(t):\n    (n, k) = [int(x) for x in input().split(' ')]\n    solve(n, k)", "t = int(input())\nwhile t:\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    curr_answ = s[:k].count('W')\n    answ = curr_answ\n    for i in range(k, n):\n        if s[i - k] == 'W':\n            curr_answ -= 1\n        if s[i] == 'W':\n            curr_answ += 1\n        answ = min(answ, curr_answ)\n    print(max(answ, 0))\n    t -= 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    cnt = s[:k].count('W')\n    mn = cnt\n    for i in range(k, n):\n        cnt += (s[i] == 'W') - (s[i - k] == 'W')\n        mn = min(mn, cnt)\n    print(mn)", "t = int(input())\nfor i in range(t):\n    (n, k) = list(map(int, input().split()))\n    s = list(input())\n    len = s[0:k].count('B')\n    tmp = len\n    for i in range(1, n - k + 1):\n        if s[i - 1] != s[i + k - 1]:\n            if s[i + k - 1] == 'B':\n                tmp += 1\n            else:\n                tmp -= 1\n        if tmp > len:\n            len = tmp\n        if len == k:\n            break\n    print(k - len)", "for _ in [0] * int(input()):\n    (n, k) = map(int, input().split())\n    s = input()\n    a = s[:k].count('W')\n    mini = a\n    for i in range(1, n - k + 1):\n        a += (s[k + i - 1] == 'W') - (s[i - 1] == 'W')\n        mini = min(mini, a)\n    print(mini)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    max_sum = 0\n    for i in range(k):\n        if s[i] == 'B':\n            max_sum += 1\n    temp_sum = max_sum\n    for i in range(1, len(s) - k + 1):\n        if s[i - 1] == 'B':\n            temp_sum -= 1\n        if s[i + k - 1] == 'B':\n            temp_sum += 1\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    answer = k - max_sum\n    if answer < 0:\n        print(0)\n    else:\n        print(answer)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    arr = input()\n    count = 0\n    for i in arr[:k]:\n        if i == 'W':\n            count += 1\n    if count == 0:\n        print(0)\n        continue\n    result = count\n    for i in range(k, n):\n        if arr[i] == 'W':\n            count += 1\n        if arr[i - k] == 'W':\n            count -= 1\n        if result > count:\n            result = count\n    print(result)", "def solve():\n    (n, k) = map(int, input().split())\n    cells = input()\n    color = 0\n    min_col = 0\n    for i in range(k):\n        if cells[i] == 'W':\n            color += 1\n            min_col += 1\n    for i in range(k, n):\n        idx_before = i - k\n        idx_now = i\n        if cells[idx_before] == 'W':\n            color -= 1\n        if cells[idx_now] == 'W':\n            color += 1\n        min_col = min(min_col, color)\n    return min_col\ntt = int(input())\nfor _ in range(tt):\n    print(solve())", "import math\nt = int(input())\nchar_to = {'B': 0, 'W': 1}\nfor i in range(t):\n    (n, m) = list(map(int, input().split()))\n    text = input()\n    win = text[:m]\n    count = win.count('W')\n    counter = [count]\n    if m == 1:\n        if text.count('B') > 0:\n            print(0)\n        else:\n            print(1)\n        continue\n    for i in range(m, n):\n        count += char_to[text[i]] - char_to[text[i - m]]\n        counter.append(count)\n    print(min(counter))", "n = int(input())\nwhile n > 0:\n    (tam, k) = input().split()\n    s = input()\n    tam = int(tam)\n    k = int(k)\n    w = 0\n    i = 0\n    while i < k:\n        if s[i] == 'W':\n            w += 1\n        i += 1\n    menor = w\n    j = 0\n    while w != 0 and i < tam:\n        if s[i] != s[j]:\n            if s[i] == 'W':\n                w += 1\n            else:\n                w -= 1\n                if menor > w:\n                    menor = w\n        i += 1\n        j += 1\n    print(menor)\n    n -= 1", "cases = int(input())\nfor i in range(cases):\n    strNsubStrSize = list(map(int, input().split()))\n    str = input()\n    min = str[:strNsubStrSize[1]].count('W')\n    w = min\n    for i in range(1, strNsubStrSize[0] - strNsubStrSize[1] + 1):\n        if str[i - 1] == 'W':\n            w -= 1\n        if str[i + strNsubStrSize[1] - 1] == 'W':\n            w += 1\n        if w < min:\n            min = w\n    print(min)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = float('inf')\n    pr = [0] * (n + 1)\n    if s[0] == 'W':\n        pr[0] = 1\n    for i in range(1, n + 1):\n        pr[i] = pr[i - 1] + int(s[i - 1] == 'W')\n    for i in range(k, n + 1):\n        ans = min(ans, pr[i] - pr[i - k])\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    (a, b) = input().split()\n    a = int(a)\n    b = int(b)\n    s = list(input())\n    k = 0\n    x = s[:b]\n    k = x.count('B')\n    km = k\n    for i in range(0, a - b):\n        if s[b + i] == s[i]:\n            continue\n        elif s[b + i] == 'B' and s[i] == 'W':\n            k += 1\n            km = max(k, km)\n        else:\n            k -= 1\n    print(b - km)", "import sys\nimport sys, threading\nfrom heapq import heapify, heappop, heappush\nfrom math import log10, floor, pow, gcd, sqrt, inf, log2, ceil\nfrom collections import defaultdict, deque, Counter\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef main():\n    tests = inp()\n    for _ in range(tests):\n        (length, k) = inlt()\n        board = insr()\n        left = 0\n        right = 0\n        convert = inf\n        whiteCount = 0\n        while right < length:\n            while right < length and right - left < k:\n                whiteCount += 1 if board[right] == 'W' else 0\n                right += 1\n            if left < right and right - left == k:\n                convert = min(convert, whiteCount)\n                whiteCount -= 1 if board[left] == 'W' else 0\n                left += 1\n        print(convert)\nmain()", "def runCase():\n    (n, k) = map(int, input().split())\n    paper = input()\n    blacks = 0\n    for i in range(k):\n        if paper[i] == 'B':\n            blacks += 1\n    left = 1\n    right = k\n    maxBlacks = blacks\n    while right < n:\n        if paper[right] == 'B':\n            blacks += 1\n        if paper[left - 1] == 'B':\n            blacks -= 1\n        right += 1\n        left += 1\n        maxBlacks = max(maxBlacks, blacks)\n    print(k - maxBlacks)\ntests = int(input())\nfor _ in range(tests):\n    runCase()", "t = int(input())\nfor i in range(t):\n    first = input().split(' ')\n    n = int(first[0])\n    k = int(first[1])\n    p = input()\n    smallest = 0\n    curr = 0\n    for j in range(k):\n        if p[j] == 'W':\n            smallest += 1\n    curr = smallest\n    for j in range(1, n - k + 1):\n        curr = curr + (p[j + k - 1] == 'W') - (p[j - 1] == 'W')\n        if curr < smallest:\n            smallest = curr\n    print(smallest)", "t = int(input())\nanswers = []\nfor _ in range(t):\n    (n, k) = [int(x) for x in str(input()).split()]\n    bw_string = input()\n    prefix_sum = [0]\n    for chr in bw_string:\n        value = 0 if chr == 'B' else 1\n        prefix_sum.append(prefix_sum[-1] + value)\n    min_sum = n + 1\n    for j in range(0, n - k + 1):\n        min_sum = min(min_sum, prefix_sum[j + k] - prefix_sum[j])\n    answers.append(min_sum)\nfor ans in answers:\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input().strip()\n    c = s[:k].count('W')\n    m = c\n    for i in range(k, n):\n        c += (s[i] == 'W') - (s[i - k] == 'W')\n        m = min(m, c)\n    print(m)", "t = int(input())\nfor p in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    c = 0\n    for i in range(k):\n        if s[i] == 'W':\n            c += 1\n    i = 0\n    new_c = c\n    while i < n - k and c != 0:\n        if s[i] == 'W' and s[i + k] == 'B':\n            new_c -= 1\n        elif s[i] == 'B' and s[i + k] == 'W':\n            new_c += 1\n        c = min(c, new_c)\n        i += 1\n    print(c)", "from posixpath import split\nt = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    a = input()\n    p = a[0:k]\n    no = 0\n    for i in p:\n        if i == 'B':\n            no += 1\n    temp = no\n    for i in range(k, n):\n        if a[i - k] == 'B':\n            no -= 1\n        if a[i] == 'B':\n            no += 1\n        temp = max(temp, no)\n    print(k - temp)", "from itertools import accumulate\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    accumulation = tuple(accumulate(input(), lambda a, b: a + (b == 'W'), initial=0))\n    print(min((accumulation[j + k] - accumulation[j] for j in range(n - k + 1))))", "def fun(n, k, s):\n    cnt = 0\n    for i in range(k):\n        if s[i] == 'W':\n            cnt += 1\n    L = [cnt]\n    for i in range(1, n - k + 1):\n        if s[i - 1] == 'W':\n            cnt -= 1\n        if s[i + k - 1] == 'W':\n            cnt += 1\n        L.append(cnt)\n    return min(L)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    cnt = fun(n, k, s)\n    print(cnt)", "def solve():\n    l = list(map(int, input().split()))\n    s = input()\n    n = l[0]\n    k = l[1]\n    i = 0\n    j = k - 1\n    m = s[i:j + 1].count('W')\n    i += 1\n    j += 1\n    c = m\n    while i < n and j < n:\n        if s[i - 1] == 'W':\n            c -= 1\n        if s[j] == 'W':\n            c += 1\n        m = min(c, m)\n        i += 1\n        j += 1\n    print(m)\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    c = 100000000\n    d = 0\n    for i in range(k):\n        if s[i] == 'W':\n            d += 1\n    c = min(c, d)\n    for i in range(k, n):\n        if s[i - k] == 'W':\n            d -= 1\n        if s[i] == 'W':\n            d += 1\n        c = min(c, d)\n    print(c)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    prev = min(s[:k].count('W'), 10 ** 18)\n    curr = prev\n    for i in range(k, n):\n        if s[i] == 'W':\n            curr += 1\n        if s[i - k] == 'W':\n            curr -= 1\n        prev = min(prev, curr)\n    print(prev)", "T = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = 0\n    r = l + k\n    c = [s[l:r].count('W')]\n    t = c[0]\n    f = 1\n    while r < n:\n        if t == 0:\n            print(0)\n            f = 0\n            break\n        if s[l] == 'W':\n            t -= 1\n        if s[r] == 'W':\n            t += 1\n        l += 1\n        r += 1\n        c.append(t)\n    c.append(t)\n    if f:\n        print(min(c))", "for __ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    c = 0\n    ans = 0\n    for i in range(k):\n        if s[i] == 'W':\n            c = c + 1\n    ans = c\n    for i in range(k, n):\n        if s[i] == 'W':\n            c = c + 1\n        if s[i - k] == 'W':\n            c = c - 1\n        if ans > c:\n            ans = c\n    print(ans)", "import sys\n\ndef func():\n    (n, k) = map(int, input().split())\n    s = input('')\n    ans = 0\n    for i in range(k):\n        if s[i] == 'W':\n            ans += 1\n    j = i\n    i = 0\n    c = ans\n    while j != len(s) - 1:\n        j += 1\n        if s[j] == 'W':\n            c += 1\n        if s[i] == 'W':\n            c -= 1\n        i += 1\n        ans = min(c, ans)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    func()", "for j in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    min_white = s[0:k].count('W')\n    count_white = min_white\n    count_black = k - count_white\n    cool = 0\n    for i in range(n - k):\n        if s[i + k] == 'W':\n            count_white += 1\n        else:\n            count_black += 1\n        if s[i] == 'W':\n            count_white -= 1\n        else:\n            count_black -= 1\n        if count_white < min_white:\n            min_white = count_white\n        if count_black == k:\n            print('0')\n            cool = 1\n            break\n    if cool == 0:\n        print(min_white)", "def minNumber(strip, n, k):\n    replace = 0\n    count = 0\n    index = 0\n    wObject = {}\n    for i in strip:\n        if i == 'W':\n            replace += 1\n            wObject[index] = True\n        else:\n            wObject[index] = False\n        if index - k >= 0 and wObject[index - k]:\n            replace -= 1\n        if index >= k:\n            if count > replace:\n                count = replace\n        else:\n            count = replace\n        index += 1\n    print(count)\nt = int(input())\nfor i in range(t):\n    (n, k) = list(map(int, input().split()))\n    strip = input()\n    minNumber(strip, n, k)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    (l, r) = (0, m - 1)\n    w_count = s[:m].count('W')\n    B_count = s[:m].count('B')\n    min_w = w_count\n    (l, r) = (1, m)\n    flag = False\n    while r < n:\n        if min_w == 0:\n            print(0)\n            flag = True\n            break\n        if s[l - 1] == 'W':\n            w_count -= 1\n        if s[r] == 'W':\n            w_count += 1\n        min_w = min(min_w, w_count)\n        l += 1\n        r += 1\n    if flag == False:\n        print(min_w)", "for _ in range(int(input())):\n    (n, k) = tuple(map(int, input().split()))\n    string = list(input())\n    if n == 1:\n        if string[0] == 'B':\n            print(0)\n        else:\n            print(1)\n    elif string.count('B') == 0:\n        print(k)\n    elif string.count('B') == 1:\n        print(k - 1)\n    else:\n        mini = k\n        Wcount = 0\n        for i in range(0, n):\n            if string[i] == 'W':\n                Wcount += 1\n            if i >= k - 1:\n                if mini > Wcount:\n                    mini = Wcount\n                if string[i - k + 1] == 'W':\n                    Wcount -= 1\n        print(mini)", "for _ in range(int(input())):\n    (n, k) = tuple(map(int, input().split()))\n    string = input()\n    if n == 1:\n        if string[0] == 'B':\n            print(0)\n        else:\n            print(1)\n    elif string.count('B') == 0:\n        print(k)\n    elif string.count('B') == 1:\n        print(k - 1)\n    else:\n        mini = k\n        Wcount = 0\n        for i in range(0, n):\n            if string[i] == 'W':\n                Wcount += 1\n            if i >= k - 1:\n                if mini > Wcount:\n                    mini = Wcount\n                if string[i - k + 1] == 'W':\n                    Wcount -= 1\n        print(mini)", "t = int(input())\nn = []\nk = []\nline = []\nfor i in range(t):\n    nn = kk = linee = 0\n    (nn, kk) = map(int, input().split())\n    n.append(nn)\n    k.append(kk)\n    linee = input()\n    line.append(linee)\nfor j in range(t):\n    answer = line[j][0:k[j]].count('W')\n    curr = answer\n    i = k[j]\n    while i < n[j]:\n        if line[j][i - k[j]] == 'W':\n            curr -= 1\n        if line[j][i] == 'W':\n            curr += 1\n        answer = min(answer, curr)\n        i += 1\n    print(answer)", "t = int(input())\nfor i in range(t):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    a = input()\n    u = 1\n    v = m\n    mini = 0\n    pt = 0\n    for j in a[:m]:\n        if j == 'W':\n            mini += 1\n    pt = mini\n    pre = a[m - 1]\n    for j in range(m, n):\n        if a[u - 1] == 'W' and a[j] == 'B':\n            pt = pt - 1\n        elif a[u - 1] == 'B' and a[j] == 'W':\n            pt = pt + 1\n        if pt < mini:\n            mini = pt\n        u += 1\n        pre = a[j]\n    print(mini)", "for time in range(int(input())):\n    (n, k) = map(int, input().split())\n    colors = input()\n    s = 0\n    for j in range(k):\n        if colors[j] == 'W':\n            s += 1\n    mini = s\n    for j in range(n - k):\n        if colors[j] == 'W':\n            s -= 1\n        if colors[j + k] == 'W':\n            s += 1\n        mini = min(mini, s)\n    print(mini)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    kb = sum([s[i] == 'B' for i in range(k)])\n    z = kb\n    for i in range(k, n):\n        z += (s[i] == 'B') - (s[i - k] == 'B')\n        kb = max(z, kb)\n    print(k - kb)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = input()\n    c = x[:k].count('W')\n    m = c\n    for i in range(n - k):\n        c += (x[i + k] == 'W') - (x[i] == 'W')\n        m = min(m, c)\n    print(m)", "num_of_cases = int(input())\nfor _ in range(num_of_cases):\n    (_, target) = [int(x) for x in input().split(' ')]\n    stripes = input()\n    count = {'B': 0, 'W': 0}\n    for stripe in stripes[:target]:\n        count[stripe] += 1\n    res = target\n    has_found = False\n    for idx in range(target, len(stripes)):\n        res = min(res, count['W'])\n        if res == 0:\n            has_found = True\n            print(0)\n            break\n        else:\n            count[stripes[idx]] += 1\n            count[stripes[idx - target]] -= 1\n    if not has_found:\n        print(min(res, count['W']))", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    stripe = input().strip()\n    (l, r) = (0, K - 1)\n    ans = 0\n    for i in range(K):\n        if stripe[i] == 'W':\n            ans += 1\n    tmp_ans = ans\n    while True:\n        l += 1\n        r += 1\n        if r >= N:\n            break\n        if stripe[l - 1] == 'W':\n            tmp_ans -= 1\n        if stripe[r] == 'W':\n            tmp_ans += 1\n        ans = min(tmp_ans, ans)\n    print(ans)", "def main():\n    t = int(input())\n    for i in range(t):\n        (n, k) = [int(i) for i in input().split(' ')]\n        string = input()\n        print(str(Solution(n, k, string)))\n\ndef Solution(n, k, string):\n    whites = 0\n    minimum = 0\n    for i in range(k):\n        if string[i] == 'W':\n            whites += 1\n    if whites == 0:\n        return 0\n    minimum = whites\n    for i in range(k, n):\n        if string[i] == 'W':\n            whites += 1\n        if string[i - k] == 'W':\n            whites -= 1\n        if whites == 0:\n            return 0\n        minimum = min(minimum, whites)\n    return minimum\nmain()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    boo = s[:k].count('W')\n    var = boo\n    for i in range(1, n - k + 1):\n        if s[i - 1] == 'W':\n            var -= 1\n        if s[i + k - 1] == 'W':\n            var += 1\n        if var < boo:\n            boo = var\n    print(boo if boo >= 0 else 0)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list((0 if char == 'B' else 1 for char in input()))\n    ans = sum(s[:k])\n    current = ans\n    for i in range(k, n):\n        current -= s[i - k]\n        current += s[i]\n        ans = min(ans, current)\n    print(ans)", "t = int(input())\nfor i in range(0, t):\n    (n, k) = map(int, input().split())\n    str1 = str(input())\n    if n == k:\n        count = 0\n        for i in range(0, n):\n            if str1[i] == 'W':\n                count += 1\n        print(count)\n    else:\n        white = 0\n        for i in range(0, k):\n            if str1[i] == 'W':\n                white += 1\n        min1 = white\n        if white == 0:\n            print(0)\n        else:\n            for i in range(k, n):\n                if str1[i] == 'W':\n                    white += 1\n                if str1[i - k] == 'W':\n                    white -= 1\n                min1 = min(white, min1)\n            print(min1)", "for _ in range(0, int(input())):\n    (n, k) = map(int, input().split())\n    v = input()\n    c = sum([x == 'W' for x in v[:k]])\n    m = c\n    for i in range(k, n):\n        c += (v[i] == 'W') - (v[i - k] == 'W')\n        m = min(m, c)\n    print(m)", "def solve():\n    (n, k) = map(int, input().split())\n    s = input()\n    black = 0\n    for i in range(k):\n        if s[i] == 'B':\n            black += 1\n    maxb = black\n    for i in range(1, n - k + 1):\n        if s[i - 1] == 'B':\n            black -= 1\n        if s[i + k - 1] == 'B':\n            black += 1\n        maxb = max(maxb, black)\n    print(k - maxb)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    wc = s[:k].count('W')\n    mini = wc\n    for j in range(1, n - k + 1):\n        if s[j - 1] == 'W':\n            wc -= 1\n        if s[j + k - 1] == 'W':\n            wc += 1\n        mini = min(mini, wc)\n    print(mini)", "def res(n, s, k):\n    w = 0\n    for i in range(k):\n        if s[i] == 'W':\n            w += 1\n    b = k - w\n    _min = w\n    for i in range(k, n):\n        if s[i] == 'B':\n            b += 1\n        else:\n            w += 1\n        if s[i - k] == 'B':\n            b -= 1\n        else:\n            w -= 1\n        _min = min(_min, w)\n    return _min\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(res(n, s, k))"]