["import sys\nI = lambda : [*map(int, sys.stdin.readline().split())]\n(t,) = I()\nfor _ in range(t):\n    I()\n    (n, m) = I()\n    (s, t) = I()\n    M = 10 ** 9 + 7\n    s -= 1\n    t -= 1\n    g = [[] for i in range(n)]\n    for i in range(m):\n        (u, v) = I()\n        g[u - 1].append(v - 1)\n        g[v - 1].append(u - 1)\n    distances = [M] * n\n    distances[s] = 0\n    i = 0\n    paths = {s: 1}\n    tot = 0\n    while i <= distances[t]:\n        i += 1\n        newpaths = {}\n        for v in paths:\n            for w in g[v]:\n                if distances[w] >= i - 1:\n                    distances[w] = min(distances[w], i)\n                    if w in newpaths:\n                        newpaths[w] = (newpaths[w] + paths[v]) % M\n                    else:\n                        newpaths[w] = paths[v]\n        paths = newpaths\n        if t in paths:\n            tot += paths[t]\n    print(tot % M)", "from collections import deque\nmod = 10 ** 9 + 7\n\ndef add(a, b):\n    return (a % mod + b % mod) % mod\n\ndef answer():\n    whichlevel = [-1 for i in range(n + 1)]\n    whichlevel[s] = 0\n    q = deque([s])\n    while len(q):\n        p = q.popleft()\n        for i in adj[p]:\n            if whichlevel[i] != -1:\n                continue\n            whichlevel[i] = whichlevel[p] + 1\n            q.append(i)\n    dp = [[0, 0] for i in range(n + 1)]\n    dp[s][0] = 1\n    v = [[False, False] for i in range(n + 1)]\n    q = deque([[s, 0]])\n    while len(q):\n        (p, lvl) = q.popleft()\n        parentlvldiff = lvl - whichlevel[p]\n        if v[p][parentlvldiff]:\n            continue\n        v[p][parentlvldiff] = True\n        for i in adj[p]:\n            if lvl + 1 - whichlevel[i] > 1:\n                continue\n            childlvldiff = lvl + 1 - whichlevel[i]\n            dp[i][childlvldiff] = add(dp[i][childlvldiff], dp[p][parentlvldiff])\n            q.append([i, lvl + 1])\n    ans = add(dp[t][0], dp[t][1])\n    return ans\nfor T in range(int(input())):\n    input().strip()\n    (n, m) = map(int, input().split())\n    (s, t) = map(int, input().split())\n    adj = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n    print(answer())", "from collections import deque\nmod = 10 ** 9 + 7\n\ndef add(a, b):\n    return (a % mod + b % mod) % mod\n\ndef answer():\n    whichlevel = [-1 for i in range(n + 1)]\n    whichlevel[s] = 0\n    q = deque([s])\n    while len(q):\n        p = q.popleft()\n        for i in adj[p]:\n            if whichlevel[i] != -1:\n                continue\n            whichlevel[i] = whichlevel[p] + 1\n            q.append(i)\n    dp = [[0, 0] for i in range(n + 1)]\n    dp[s][0] = 1\n    v = [[False, False] for i in range(n + 1)]\n    q = deque([[s, 0]])\n    while len(q):\n        (p, lvl) = q.popleft()\n        parentlvldiff = lvl - whichlevel[p]\n        if v[p][parentlvldiff]:\n            continue\n        v[p][parentlvldiff] = True\n        for i in adj[p]:\n            if lvl + 1 - whichlevel[i] > 1:\n                continue\n            childlvldiff = lvl + 1 - whichlevel[i]\n            dp[i][childlvldiff] = add(dp[i][childlvldiff], dp[p][parentlvldiff])\n            q.append([i, lvl + 1])\n    ans = add(dp[t][0], dp[t][1])\n    return ans\nfor T in range(int(input())):\n    input().strip()\n    (n, m) = map(int, input().split())\n    (s, t) = map(int, input().split())\n    adj = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n    print(answer())"]