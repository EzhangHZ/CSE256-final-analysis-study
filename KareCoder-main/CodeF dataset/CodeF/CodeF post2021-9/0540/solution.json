["from sys import stdin\ninput = stdin.readline\n\ndef ii():\n    return int(input())\n\ndef li():\n    return list(map(int, input().split()))\nfor _ in range(ii()):\n    n = ii()\n    l_t = []\n    for i in range(2 * n):\n        t = input().strip()\n        l_t.append(t)\n    s = input().strip()\n    st = ''.join(l_t) + s\n    ans = ''\n    for i in range(ord('a'), ord('z') + 1):\n        ch = chr(i)\n        if st.count(ch) % 2:\n            ans = ch\n            break\n    print(ans)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    cnt = [0] * 26\n    n = int(input())\n    arr = list((input().strip() for _ in range(2 * n)))\n    arr.append(input().strip())\n    for i in range(len(arr)):\n        for c in arr[i]:\n            cnt[ord(c) - ord('a')] += 1\n    for i in range(26):\n        if cnt[i] % 2:\n            return list('abcdefghijklmnopqrstuvwxyz')[i]\n    return -1\nfor _ in range(int(input())):\n    print(solve())", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    count = [0] * 26\n    for i in range(2 * n + 1):\n        t = input().strip()\n        for c in t:\n            count[ord(c) - ord('a')] ^= 1\n    for k in range(26):\n        if count[k]:\n            print(chr(k + ord('a')))\n            break", "for _ in range(int(input())):\n    n = int(input())\n    s = ''.join((input() for _ in range(2 * n + 1)))\n    for ch in s:\n        if s.count(ch) % 2:\n            print(ch)\n            break", "for _ in range(int(input())):\n    n = int(input())\n    s = ''.join((input() for _ in range(2 * n + 1)))\n    for ch in s:\n        if s.count(ch) % 2:\n            print(ch)\n            break", "for _ in range(int(input())):\n    n = int(input())\n    s = ''.join((input() for _ in range(2 * n + 1)))\n    for ch in s:\n        if s.count(ch) % 2:\n            print(ch)\n            break", "for _ in range(int(input())):\n    n = int(input())\n    s = ''.join((input() for _ in range(2 * n + 1)))\n    for ch in s:\n        if s.count(ch) % 2:\n            print(ch)\n            break", "for _ in range(int(input())):\n    n = int(input())\n    s = ''.join((input() for _ in range(2 * n + 1)))\n    for ch in s:\n        if s.count(ch) % 2:\n            print(ch)\n            break", "for j in range(int(input())):\n    n = int(input())\n    s = ''.join((input() for i in range(2 * n + 1)))\n    for c in s:\n        if s.count(c) % 2:\n            print(c)\n            break", "for _ in range(int(input())):\n    n = int(input())\n    s = ''.join((input() for _ in range(2 * n + 1)))\n    for ch in s:\n        if s.count(ch) % 2:\n            print(ch)\n            break", "for _ in range(int(input())):\n    n = int(input())\n    s = ''.join((input() for _ in range(2 * n + 1)))\n    for ch in s:\n        if s.count(ch) % 2:\n            print(ch)\n            break", "for _ in range(int(input())):\n    n = int(input())\n    s = ''.join((input() for _ in range(2 * n + 1)))\n    for ch in s:\n        if s.count(ch) % 2:\n            print(ch)\n            break", "for _ in range(int(input())):\n    n = int(input())\n    s = ''.join((input() for _ in range(2 * n + 1)))\n    for ch in s:\n        if s.count(ch) % 2:\n            print(ch)\n            break", "for _ in range(int(input())):\n    n = int(input())\n    s = ''.join((input() for _ in range(2 * n + 1)))\n    for ch in s:\n        if s.count(ch) % 2:\n            print(ch)\n            break", "for t in range(int(input())):\n    s = ''.join([*(input() for x in '_' * (int(input()) * 2 + 1))])\n    for i in s:\n        if s.count(i) % 2:\n            print(i)\n            break", "from collections import Counter\n\ndef solve():\n    n = int(input())\n    arr = []\n    for _ in range(2 * n):\n        arr.append(input())\n    out = list(input())\n    newarr = list(''.join(arr))\n    count_arr = Counter(newarr)\n    count_out = Counter(out)\n    count_arr.subtract(count_out)\n    for (i, j) in count_arr.items():\n        if j % 2 != 0:\n            print(i)\ncases = int(input())\nfor i in range(cases):\n    solve()", "import collections\n\ndef solve():\n    n = int(input())\n    cnt = collections.defaultdict(int)\n    for i in range(2 * n + 1):\n        inp = input()\n        for c in inp:\n            cnt[c] = (cnt[c] + 1) % 2\n    res = 0\n    for i in range(26):\n        ch = chr(ord('`') + i + 1)\n        if cnt[ch] == 1:\n            print(ch)\n            res += 1\n    if res != 1:\n        assert True\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        solve()\n    return 0\nmain()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = [0 for i in range(26)]\n    for i in range(2 * n + 1):\n        s = input()[:-1]\n        l = len(s)\n        for i in range(l):\n            c = s[i]\n            ind = ord(c) - ord('a')\n            a[ind] += 1\n    for i in range(26):\n        if a[i] % 2:\n            ans = chr(i + ord('a'))\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    res = 0\n    d = defaultdict(int)\n    for _ in range(2 * n + 1):\n        s = input()\n        for el in s:\n            d[el] += 1\n    for el in sorted(d):\n        if d[el] % 2:\n            print(el)\n            break", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    res = 1\n    res = 0\n    d = defaultdict(int)\n    for _ in range(2 * n + 1):\n        s = input()\n        for el in s:\n            d[el] += 1\n    for el in sorted(d):\n        if d[el] % 2:\n            print(el)\n            break", "import sys\nimport collections\nfrom math import ceil, gcd, sqrt, log\nimport bisect\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    net = [0] * 26\n    for i in range(2 * n):\n        s = input()\n        for c in s:\n            net[ord(c) - 97] += 1\n    s = input()\n    for j in s:\n        net[ord(j) - 97] += 1\n    for i in range(26):\n        if net[i] % 2 == 1:\n            ans = chr(97 + i)\n            break\n    print(ans)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    res = 0\n    d = defaultdict(int)\n    for _ in range(2 * n + 1):\n        s = input()\n        for el in s:\n            d[el] += 1\n    for el in sorted(d):\n        if d[el] % 2:\n            print(el)\n            break", "for _ in range(int(input())):\n    n = int(input())\n    a = {}\n    for i in range(2 * n + 1):\n        for j in input():\n            a[j] = a.get(j, 0) + 1\n    for i in a:\n        if a[i] % 2:\n            print(i)\n            break", "for _ in range(int(input())):\n    ltrs = {}\n    n = int(input())\n    for _ in range(2 * n + 1):\n        for elem in input():\n            ltrs[elem] = ltrs.get(elem, 0) + 1\n    for letter in ltrs:\n        if ltrs[letter] % 2:\n            print(letter)\n            break", "from collections import Counter\nT = int(input())\nwhile T:\n    T -= 1\n    n = int(input())\n    s = ''\n    for i in range(2 * n + 1):\n        s += input()\n    cnt = Counter(s)\n    for (key, val) in cnt.items():\n        if val % 2 == 1:\n            print(key)\n            break", "def solve():\n    n = int(input())\n    freq = [0] * 26\n    for i in range(2 * n + 1):\n        s = input()\n        for ch in s:\n            freq[ord(ch) - ord('a')] += 1\n    for i in range(26):\n        if freq[i] % 2:\n            print(chr(97 + i))\n            return\nfor _ in range(int(input())):\n    solve()", "alpha = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    dic = [0 for i in range(26)]\n    for i in range(2 * n):\n        s = input()\n        for j in s:\n            dic[alpha[j]] += 1\n    s = input()\n    for j in s:\n        dic[alpha[j]] += 1\n    st = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(26):\n        if dic[i] % 2 != 0:\n            print(st[i])\n            break", "t = int(input())\nfor e in range(t):\n    a = []\n    h = {}\n    alp = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for i in alp:\n        h[i] = 0\n    n = int(input())\n    for i in range(2 * n + 1):\n        s = input()\n        for t in s:\n            h[t] += 1\n    for k in h:\n        if h[k] % 2 != 0:\n            print(k)\n            break", "for test in range(int(input())):\n    n = int(input())\n    freq = [0] * 26\n    for __ in range(2 * n + 1):\n        s = input()\n        for ch in s:\n            freq[ord(ch) - 97] += 1\n    ans = 'a'\n    for i in range(26):\n        if freq[i] % 2 == 1:\n            print(chr(97 + i))\n            break", "from random import getrandbits\nRANDOM = getrandbits(32)\n\nclass Wrapper(int):\n\n    def __init__(self, x):\n        int.__init__(x)\n\n    def __hash__(self):\n        return super(Wrapper, self).__hash__() ^ RANDOM\nT = int(input())\nq = []\nfor i in range(T):\n    n = int(input())\n    data = []\n    for i in range(n * 2):\n        data.append(input())\n    s = input()\n    q.append((n, data, s))\n\ndef solve(n, data, s):\n    chars = dict()\n    for d in data:\n        for c in d:\n            if c not in chars:\n                chars[c] = 0\n            chars[c] += 1\n    for c in s:\n        chars[c] -= 1\n    for c in chars:\n        if chars[c] % 2:\n            print(c)\n            break\nfor (n, data, s) in q:\n    solve(n, data, s)", "for _ in range(int(input())):\n    n = int(input())\n    l = [0 for i in range(26)]\n    for i in range(2 * n + 1):\n        for val in input():\n            l[ord(val) - 97] ^= 1\n    for i in range(26):\n        if l[i] == 1:\n            print(chr(97 + i))", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    d = {}\n    (n,) = R()\n    x = ''\n    for i in range(2 * n + 1):\n        s = input()\n        x += s\n    s1 = set(x)\n    for j in s1:\n        c = x.count(j)\n        if c % 2 != 0:\n            print(j)\n            break", "from collections import Counter\nT = int(input())\nwhile T:\n    T -= 1\n    n = int(input())\n    s = ''\n    for i in range(2 * n + 1):\n        s += input()\n    cnt = Counter(s)\n    for (key, val) in cnt.items():\n        if val % 2 == 1:\n            print(key)\n            break", "from collections import Counter\nfor t in range(int(input())):\n    n = int(input())\n    s = ''\n    for i in range(2 * n + 1):\n        s += input()\n    s = Counter(s)\n    for (x, y) in s.items():\n        if y % 2:\n            print(x)\n            break", "import io, os\n\ndef ri():\n    return int(input().strip())\n\ndef rl():\n    return list(map(int, input().strip().split()))\n\ndef Solve():\n    n = ri()\n    cnt = [0] * 256\n    for i in range(2 * n + 1):\n        s = input()\n        for c in s:\n            cnt[ord(c)] += 1\n    for i in range(256):\n        if cnt[i] & 1:\n            print(chr(i))\n            return\nT = ri()\nwhile T:\n    T -= 1\n    Solve()", "import string\nalphabet_string = string.ascii_lowercase\nalphabet = list(alphabet_string)\nT = int(input())\nfor testcase in range(1, T + 1):\n    c = {}\n    for letter in alphabet:\n        c[letter] = False\n    n = int(input())\n    for i in range(2 * n + 1):\n        s = input()\n        for letter in s:\n            c[letter] = not c[letter]\n    for letter in alphabet:\n        if c[letter]:\n            print(letter)\n            break", "for i in range(int(input())):\n    n = int(input())\n    occurances = {}\n    for z in range(2 * n):\n        s = input()\n        for x in s:\n            if x in occurances:\n                occurances[x] += 1\n            else:\n                occurances[x] = 1\n    s = input()\n    for ele in s:\n        if ele in occurances:\n            occurances[ele] += 1\n    for x in occurances:\n        if occurances[x] % 2 != 0:\n            print(x)", "import collections\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    freq = {}\n    for i in range(2 * n + 1):\n        s = input()\n        for ch in s:\n            if ch not in freq:\n                freq[ch] = 0\n            freq[ch] += 1\n    ans = ''\n    for ch in freq:\n        if freq[ch] % 2 == 1:\n            ans = ch\n            break\n    print(ans)", "import collections\nimport math\nimport sys\nfrom queue import PriorityQueue\nfrom random import randint\nRANDOM = randint(1, 10 ** 9)\n\ndef main(testnumber):\n    n = int(input())\n    t = []\n    for i in range(2 * n):\n        t.append(input())\n    s = input()\n    cnt = collections.Counter(s + ''.join(t))\n    for (k, v) in cnt.items():\n        if v % 2 == 1:\n            print(k)\nt = int(input())\ncnt = 1\nwhile t > 0:\n    main(cnt)\n    cnt += 1\n    t -= 1", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (n,) = map(int, input().split())\n    d = defaultdict(int)\n    for _ in range(2 * n + 1):\n        x = input()\n        for i in x:\n            d[i] += 1\n    for i in d:\n        if d[i] & 1:\n            print(i)\n            break", "import sys\nnput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    dat = {}\n    for i in range(2 * n + 1):\n        s = input()\n        for j in s:\n            if j in dat:\n                dat[j] += 1\n            else:\n                dat[j] = 1\n    for i in dat:\n        if dat[i] % 2:\n            print(i)\n            break", "from collections import defaultdict as DD\nfrom collections import OrderedDict\nfrom bisect import bisect_right\nfrom heapq import heapify, heappush, heappop\nfrom functools import lru_cache\nimport operator\nMOD = 10 ** 9 + 7\nMOD2 = 998244353\nalice = 'Alice'\nbob = 'Bob'\n_T = 1\n\ndef pr(temp):\n    print(temp)\n\ndef prnl(temp):\n    for w in temp:\n        pr(w)\n\ndef ri():\n    temp = int(input())\n    return temp\n\ndef rl():\n    temp = list(map(int, input().split()))\n    return temp\n\ndef zipList(*args):\n    return list(zip(*args))\n\ndef sortMultiList(temp, *indices):\n    return sorted(temp, key=operator.itemgetter(*indices))\n\ndef getSlice(temp, index):\n    return [temp[i][index] for i in range(len(temp))]\n\ndef swap(array, ind1, ind2):\n    temp = array[ind1]\n    array[ind1] = array[ind2]\n    array[ind2] = temp\n\ndef kvFromDict(_d):\n    return [(k, v) for (k, v) in _d.items()]\nfrom math import gcd\n\ndef lcm(a, b):\n    return abs(a * b) // gcd(a, b)\nfrom collections import Counter\nfrom itertools import accumulate\n\ndef t_solution(t):\n    for _ in range(t):\n        solution()\n\ndef solution():\n    n = ri()\n    c = Counter()\n    for _ in range(2 * n):\n        s = input()\n        for l in s:\n            c[l] += 1\n    final = input()\n    for l in final:\n        c[l] -= 1\n    for k in c:\n        if c[k] % 2:\n            print(k)\n            return\n_T = ri()\nt_solution(_T)", "for t in range(int(input())):\n    n = int(input())\n    arr = []\n    counts = {}\n    for i in range(2 * n):\n        arr.append(input())\n    arr.append(input())\n    for i in arr:\n        for j in i:\n            if j in counts:\n                counts[j] = counts[j] + 1\n            else:\n                counts[j] = 1\n    for i in counts:\n        if counts[i] & 1:\n            print(i)\n            break", "_ = int(input())\nfor __ in range(_):\n    n = 2 * int(input()) + 1\n    a = [0 for i in range(26)]\n    for i in range(n):\n        s = input()\n        for c in s:\n            a[ord(c) - ord('a')] += 1\n    cnt = 0\n    for i in range(26):\n        if a[i] % 2 == 1:\n            print(chr(i + ord('a')))\n            cnt += 1\n    if cnt != 1:\n        print('fake problem')", "_ = int(input())\nfor __ in range(_):\n    n = 2 * int(input()) + 1\n    a = [0 for i in range(26)]\n    for i in range(n):\n        s = input()\n        for c in s:\n            a[ord(c) - ord('a')] += 1\n    cnt = 0\n    for i in range(26):\n        if a[i] % 2 == 1:\n            print(chr(i + ord('a')))\n            cnt += 1\n    if cnt != 1:\n        print('fake problem')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    freq = [0] * 26\n    for __ in range(2 * n + 1):\n        s = input()\n        for ch in s:\n            freq[ord(ch) - 97] += 1\n    ans = 'a'\n    for i in range(26):\n        if freq[i] % 2 == 1:\n            print(chr(97 + i))\n            break", "t = int(input())\nfor i in range(t):\n    n = 2 * int(input()) + 1\n    a = [0 for i in range(26)]\n    for i in range(n):\n        z = input()\n        for i in z:\n            a[ord(i) - ord('a')] += 1\n    for i in range(26):\n        if a[i] % 2 == 1:\n            print(chr(ord('a') + i))\n            break", "t = int(input())\nfor it in range(1, t + 1):\n    d = {}\n    for i in range(1, 2 * int(input()) + 1):\n        s = input()\n        for ok in s:\n            if ok in d.keys():\n                d[ok] += 1\n            else:\n                d[ok] = 1\n    org = input()\n    for ok in org:\n        if ok in d.keys():\n            d[ok] += 1\n        else:\n            d[ok] = 1\n    for i in d.keys():\n        if d[i] % 2 != 0:\n            print(i)\n            break", "for _ in range(int(input())):\n    ltrs = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0, 'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    n = int(input())\n    s = ''\n    for _ in range(2 * n + 1):\n        s += input()\n    for elem in s:\n        ltrs[elem] += 1\n    for letter in ltrs:\n        if ltrs[letter] % 2 == 1:\n            print(letter)\n            break", "_ = int(input())\nfor __ in range(_):\n    n = 2 * int(input()) + 1\n    a = [0 for i in range(26)]\n    for i in range(n):\n        s = input()\n        for c in s:\n            a[ord(c) - ord('a')] += 1\n    cnt = 0\n    for i in range(26):\n        if a[i] % 2 == 1:\n            print(chr(i + ord('a')))\n            cnt += 1\n    if cnt != 1:\n        print('fake problem')", "_ = int(input())\nfor __ in range(_):\n    n = 2 * int(input()) + 1\n    a = [0 for i in range(26)]\n    for i in range(n):\n        s = input()\n        for c in s:\n            a[ord(c) - ord('a')] += 1\n    cnt = 0\n    for i in range(26):\n        if a[i] % 2 == 1:\n            print(chr(i + ord('a')))\n            cnt += 1\n    if cnt != 1:\n        print('fake problem')", "for t in range(int(input())):\n    n = int(input())\n    arr = []\n    counts = {}\n    for i in range(2 * n):\n        arr.append(input())\n    arr.append(input())\n    for i in arr:\n        for j in i:\n            if j in counts:\n                counts[j] = counts[j] + 1\n            else:\n                counts[j] = 1\n    for i in counts:\n        if counts[i] & 1:\n            print(i)\n            break", "from collections import *\nfor _ in range(int(input())):\n    n = int(input())\n    z = Counter([])\n    for i in range(2 * n):\n        s = input()\n        for i in s:\n            z[i] += 1\n    t = input()\n    for i in t:\n        z[i] += 1\n    for i in z:\n        if z[i] % 2:\n            print(i)\n            break", "_ = int(input())\nfor __ in range(_):\n    n = 2 * int(input()) + 1\n    a = [0 for i in range(26)]\n    for i in range(n):\n        s = input()\n        for c in s:\n            a[ord(c) - ord('a')] += 1\n    cnt = 0\n    for i in range(26):\n        if a[i] % 2 == 1:\n            print(chr(i + ord('a')))\n            cnt += 1\n    if cnt != 1:\n        print('fake problem')", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    s_total = ''\n    t = [''] * (2 * n)\n    for i in range(2 * n):\n        t[i] = input()\n        s_total += t[i]\n    s_final = input()\n    s_total += s_final\n    c = Counter(s_total)\n    for key in c:\n        if c[key] % 2 == 1:\n            print(key)\n            break", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    S = set()\n    for i in range(2 * n):\n        s = str(input())\n        for x in s:\n            if x in S:\n                S.remove(x)\n            else:\n                S.add(x)\n    s = str(input())\n    for x in s:\n        if x in S:\n            S.remove(x)\n        else:\n            S.add(x)\n    print(S.pop())", "T = int(input())\nfor _ in range(T):\n    cnt = [0] * 26\n    n = int(input())\n    for i in range(n * 2):\n        t = input()\n        for c in t:\n            cnt[ord(c) - ord('a')] ^= 1\n    s = input()\n    for c in s:\n        cnt[ord(c) - ord('a')] ^= 1\n    ans = None\n    for i in range(26):\n        if cnt[i] == 1:\n            ans = chr(ord('a') + i)\n            break\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = (int(input()), [0] * 30)\n    for _ in range(n * 2 + 1):\n        s = input()\n        for x in s:\n            m[ord(x) - ord('a')] += 1\n    for i in range(30):\n        if m[i] % 2 == 1:\n            print(chr(i + ord('a')))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [0 for _ in range(26)]\n    for i in range(2 * n + 1):\n        l = input()\n        for c in l:\n            arr[ord(c) - ord('a')] += 1\n    for i in range(26):\n        if arr[i] % 2 != 0:\n            print(chr(i + ord('a')))\n            break", "for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    dp = {}\n    for i in range(26):\n        dp[i] = 0\n    for i in range(2 * n):\n        x = input()\n        arr.append(x)\n        for j in x:\n            dp[ord(j) - 97] += 1\n    s = input()\n    for j in s:\n        dp[ord(j) - 97] += 1\n    for i in range(26):\n        if dp[i] % 2 == 1:\n            ans = i\n            break\n    print(chr(ans + 97))", "t = int(input())\nwhile t > 0:\n    t -= 1\n    dict = [0] * 26\n    n = int(input())\n    s = ''\n    for i in range(2 * n + 1):\n        s += input()\n    for i in range(len(s)):\n        dict[ord(s[i]) - 97] += 1\n    for i in range(26):\n        if dict[i] % 2 != 0:\n            print(chr(i + 97))\n            break", "tc = int(input())\nfor t in range(tc):\n    n = int(input())\n    arr = [0] * 256\n    for j in range(n):\n        s = input()\n        st = input()\n        a = s + st\n        for i in a:\n            arr[ord(i)] += 1\n    lst = input()\n    for i in lst:\n        arr[ord(i)] += 1\n    for i in range(256):\n        if arr[i] % 2 == 1:\n            print(chr(i))\n            break", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [0] * 26\n    for j in range(2 * n + 1):\n        s = input()\n        for ch in s:\n            a[ord(ch) - ord('a')] ^= 1\n    print(chr(a.index(1) + ord('a')))", "_ = int(input())\nfor __ in range(_):\n    n = 2 * int(input()) + 1\n    a = [0 for i in range(26)]\n    for i in range(n):\n        s = input()\n        for c in s:\n            a[ord(c) - ord('a')] += 1\n    cnt = 0\n    for i in range(26):\n        if a[i] % 2 == 1:\n            print(chr(i + ord('a')))\n            cnt += 1\n    if cnt != 1:\n        print('fake problem')", "for _ in range(int(input())):\n    n = int(input())\n    count = [0] * 26\n    for i in range(2 * n + 1):\n        t = input().strip()\n        for c in t:\n            count[ord(c) - ord('a')] ^= 1\n    for k in range(26):\n        if count[k]:\n            print(chr(k + ord('a')))\n            break", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    li = []\n    for i in range(2 * n):\n        s = input()\n        li.append(s)\n    s = input()\n    d = dict()\n    for i in s:\n        if i in d:\n            if d[i] == 0:\n                d[i] = 1\n            else:\n                d[i] = 0\n        else:\n            d[i] = 1\n    for i in range(2 * n):\n        ns = li[i]\n        for j in ns:\n            if j in d:\n                if d[j] == 0:\n                    d[j] = 1\n                else:\n                    d[j] = 0\n            else:\n                d[j] = 1\n    y = 0\n    for i in d:\n        if d[i] == 1:\n            y = 1\n            print(i)\n            break\n    if y == 0:\n        print('a')", "for _ in range(int(input())):\n    n = int(input())\n    l = [0] * 26\n    for i in range(2 * n + 1):\n        x = input()\n        for i in x:\n            p = ord(i) - ord('a')\n            l[p] = (l[p] + 1) % 2\n    for i in range(26):\n        if l[i] == 1:\n            print(chr(ord('a') + i))\n            break", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    t = []\n    for i in range(2 * n):\n        t.append(input())\n    fs = input()\n    ics = set()\n    sall = ''\n    for x in t:\n        sall += x\n        if len(x) == 1:\n            ics.add(x)\n    (dall, dfs) = (defaultdict(int), defaultdict(int))\n    if len(ics) == 1:\n        print(ics.pop())\n    else:\n        for x in sall:\n            dall[x] += 1\n        for x in fs:\n            dfs[x] += 1\n        for x in ics:\n            if (dall[x] - dfs[x]) % 2 != 0:\n                print(x)\n                break", "import sys\nfrom os import path\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef solve():\n    n = int(input())\n    n = n * 2 + 1\n    dict = {}\n    for i in range(n):\n        s = input()\n        for j in range(len(s)):\n            if dict.get(s[j]) == None:\n                dict[s[j]] = 1\n            else:\n                dict[s[j]] += 1\n    for elem in dict:\n        if dict[elem] % 2:\n            print(elem)\n            return\nq = 1\nq = int(input())\nfor i in range(q):\n    solve()", "_ = int(input())\nfor __ in range(_):\n    n = 2 * int(input()) + 1\n    a = [0 for i in range(26)]\n    for i in range(n):\n        s = input()\n        for c in s:\n            a[ord(c) - ord('a')] += 1\n    cnt = 0\n    for i in range(26):\n        if a[i] % 2 == 1:\n            print(chr(i + ord('a')))\n            cnt += 1\n    if cnt != 1:\n        print('fake problem')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = []\n    for _ in range(2 * n):\n        s = input()\n        l.append(s)\n    p = input()\n    k = ''.join(l)\n    k += p\n    d = dict()\n    for i in range(len(k)):\n        if k[i] not in d:\n            d[k[i]] = 1\n        elif d[k[i]] == 0:\n            d[k[i]] += 1\n        else:\n            d[k[i]] -= 1\n    f = ''\n    for (k, v) in d.items():\n        if v > 0:\n            f += k * v\n    print(f)", "for _ in range(int(input())):\n    n = int(input())\n    ll = [0] * (2 * n)\n    for i in range(2 * n):\n        ll[i] = input()\n    s = input()\n    m = {}\n    for i in range(len(s)):\n        if s[i] in m:\n            m[s[i]] += 1\n        else:\n            m[s[i]] = 1\n    for i in range(2 * n):\n        for j in range(len(ll[i])):\n            if ll[i][j] in m:\n                m[ll[i][j]] += 1\n            else:\n                m[ll[i][j]] = 1\n    ans = 0\n    for key in m:\n        if m[key] % 2 != 0:\n            ans = key\n    print(ans)", "T = int(input())\nfor i in range(0, T):\n    n = int(input())\n    a = [0] * 26\n    for j in range(0, 2 * n + 1):\n        temp = input()\n        for k in temp:\n            a[ord(k) - ord('a')] = (a[ord(k) - ord('a')] + 1) % 2\n    for j in range(0, 26):\n        if a[j] == 1:\n            print(chr(j + ord('a')))\n            break", "t = int(input())\nwhile t:\n    n = int(input())\n    l = [0] * 26\n    for i in range(2 * n + 1):\n        s = input()\n        for j in range(len(s)):\n            l[ord(s[j]) - 97] += 1\n    for i in range(26):\n        if l[i] % 2 == 1:\n            print(chr(i + 97))\n    t -= 1", "import math\npow2 = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912]\n\ndef p2(x):\n    return pow2[x]\n\ndef std(word):\n    ans = 0\n    for i in list(word):\n        ans = ans ^ p2(ord(i) - 97)\n    return ans\nx = int(input())\nfor i in range(x):\n    a = int(input())\n    sets = 0\n    for j in range(2 * a + 1):\n        word = input()\n        sets = std(word) ^ sets\n    print(chr(97 + int(math.log(sets, 2))))", "T = int(input())\nfor i in range(0, T):\n    n = int(input())\n    a = [0] * 26\n    for j in range(0, 2 * n + 1):\n        temp = input()\n        for k in temp:\n            a[ord(k) - ord('a')] = (a[ord(k) - ord('a')] + 1) % 2\n    for j in range(0, 26):\n        if a[j] == 1:\n            print(chr(j + ord('a')))\n            break", "T = int(input())\nfor i in range(0, T):\n    n = int(input())\n    a = [0] * 26\n    for j in range(0, 2 * n + 1):\n        temp = input()\n        for k in temp:\n            a[ord(k) - ord('a')] = (a[ord(k) - ord('a')] + 1) % 2\n    for j in range(0, 26):\n        if a[j] == 1:\n            print(chr(j + ord('a')))\n            break", "T = int(input())\nfor i in range(T):\n    n = int(input())\n    d = {}\n    for j in range(2 * n):\n        s = input()\n        for k in range(len(s)):\n            if s[k] not in d:\n                d[s[k]] = 0\n            d[s[k]] += 1\n            d[s[k]] %= 2\n    s = input()\n    d1 = {}\n    for j in range(len(s)):\n        if s[j] not in d1:\n            d1[s[j]] = 0\n        d1[s[j]] += 1\n        d1[s[j]] %= 2\n    for key in d1:\n        if d1[key] == 0:\n            if key in d and d[key] == 1:\n                ans = key\n        elif key in d and d[key] == 0:\n            ans = key\n    for key in d:\n        if key not in d1:\n            if d[key] == 1:\n                ans = key\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    letters = [[0, 0] for i in range(26)]\n    n = int(input())\n    for _ in range(2 * n + 1):\n        s = input()\n        if len(s) == 1:\n            letters[ord(s) - ord('a')][1] = 1\n        for c in s:\n            letters[ord(c) - ord('a')][0] += 1\n    for (i, l) in enumerate(letters):\n        if l[1] == 1 and l[0] % 2 == 1:\n            print(chr(ord('a') + i))\n            break", "from collections import defaultdict as dd\nfor _ in range(int(input())):\n    n = int(input())\n    l1 = []\n    for x in range(2 * n):\n        l1.append(input())\n    l1.append(input())\n    l2 = [0] * 26\n    for x in range(2 * n + 1):\n        for y in range(len(l1[x])):\n            l2[ord(l1[x][y]) - 97] += 1\n    for x in range(26):\n        if l2[x] % 2 == 1:\n            print(chr(97 + x))\n            break", "from collections import Counter as mset\nfor _ in range(int(input())):\n    n = int(input())\n    slot = mset()\n    for _ in range(2 * n):\n        slot.update(mset(input()))\n    last = mset(input())\n    ret = slot - last\n    for (ch, c) in ret.items():\n        if c & 1:\n            print(ch)\n            break", "from collections import Counter\n\ndef solve(arr, x):\n    d = Counter()\n    for i in arr:\n        d.update(Counter(i))\n    d.update(Counter(x))\n    for i in d:\n        if d[i] % 2 == 1:\n            return i\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [list(input().strip()) for _ in range(2 * n)]\n    x = input().strip()\n    print(str(solve(arr, x)))", "from sys import stdin, stdout\nfrom collections import defaultdict, Counter\nimport threading\n\ndef solve(arr, x):\n    d = Counter()\n    for i in arr:\n        d.update(Counter(i))\n    d.update(Counter(x))\n    for i in d:\n        if d[i] % 2 == 1:\n            return i\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [list(input().strip()) for _ in range(2 * n)]\n    x = input().strip()\n    print(str(solve(arr, x)))", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = Counter()\n    for _ in range(2 * n):\n        c += Counter(input())\n    s = input()\n    f = c - Counter(s)\n    for x in f:\n        if f[x] % 2:\n            print(x)\n            break"]