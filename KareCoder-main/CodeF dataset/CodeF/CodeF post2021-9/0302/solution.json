["import sys\ninput = sys.stdin.readline\n\ndef solve():\n    for n in range(0, k + 1):\n        m = k - n\n        up_hc = hc + n * a\n        up_dc = dc + m * w\n        t = up_hc // dm\n        if up_hc % dm == 0 and t > 0:\n            t -= 1\n        if hm - up_dc * (t + 1) <= 0:\n            print('YES')\n            return\n    print('NO')\nfor _ in range(int(input().strip())):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    solve()", "import sys, collections\n\ndef solve(hc, dc, hm, dm, coins, hp, dp):\n    for hcoin in range(coins + 1):\n        dcoin = coins - hcoin\n        newhc = hc + hcoin * hp\n        newdc = dc + dcoin * dp\n        mr = hm // newdc + 1 if hm % newdc else hm // newdc\n        cr = newhc // dm + 1 if newhc % dm else newhc // dm\n        if mr <= cr:\n            return 'YES'\n    return 'NO'\ninput = sys.stdin.readline\ntests = int(input()[:-1])\nfor test in range(tests):\n    (hc, dc) = [int(s) for s in input()[:-1].split()]\n    (hm, dm) = [int(s) for s in input()[:-1].split()]\n    (coins, dcup, hcup) = [int(s) for s in input()[:-1].split()]\n    print(solve(hc, dc, hm, dm, coins, hcup, dcup))", "import sys\ninput = sys.stdin.readline\n\ndef solution() -> str:\n    for num_h_up in range(k + 1):\n        num_d_up = k - num_h_up\n        total_dc = dc + num_d_up * w\n        total_hc = hc + num_h_up * a\n        c_lifetime = total_hc // dm\n        if total_hc % dm > 0:\n            c_lifetime += 1\n        m_lifetime = hm // total_dc\n        if hm % total_dc > 0:\n            m_lifetime += 1\n        if c_lifetime >= m_lifetime:\n            return 'YES'\n    return 'NO'\nt = int(input())\nfor tc in range(t):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    sol = solution()\n    print(sol)", "import sys\ninput = sys.stdin.readline\nnum_test_cases = int(input())\nfor test_case_ittr in range(num_test_cases):\n    (health, damage) = [int(x) for x in input().split()]\n    (monster_health, monster_damage) = [int(x) for x in input().split()]\n    (budget, delta_damage, delta_health) = [int(x) for x in input().split()]\n    answer = 'NO'\n    health += budget * delta_health\n    for i in range(budget + 1):\n        num_hits_to_kill_monster = monster_health // damage\n        if monster_health % damage:\n            num_hits_to_kill_monster += 1\n        num_hits_to_die = health // monster_damage\n        if health % monster_damage:\n            num_hits_to_die += 1\n        if num_hits_to_kill_monster <= num_hits_to_die:\n            answer = 'YES'\n            break\n        health -= delta_health\n        damage += delta_damage\n    print(answer)", "import sys, math\ninput = sys.stdin.readline\na = input()\nwhile True:\n    try:\n        (hc, dc) = map(int, input().split())\n        (hm, dm) = map(int, input().split())\n        (kmax, w, a) = map(int, input().split())\n    except:\n        break\n    wins = False\n    for k in range(kmax + 1):\n        if hc + (kmax - k) * a - dm * (math.ceil(hm / (dc + k * w)) - 1) > 0:\n            wins = True\n            break\n    if wins:\n        print('YES')\n    else:\n        print('NO')", "import sys, collections\n\ndef solve(hc, dc, hm, dm, coins, hp, dp):\n    for hcoin in range(coins + 1):\n        dcoin = coins - hcoin\n        newhc = hc + hcoin * hp\n        newdc = dc + dcoin * dp\n        mr = hm // newdc + 1 if hm % newdc else hm // newdc\n        cr = newhc // dm + 1 if newhc % dm else newhc // dm\n        if mr <= cr:\n            return 'YES'\n    return 'NO'\ninput = sys.stdin.readline\ntests = int(input()[:-1])\nfor test in range(tests):\n    (hc, dc) = [int(s) for s in input()[:-1].split()]\n    (hm, dm) = [int(s) for s in input()[:-1].split()]\n    (coins, dcup, hcup) = [int(s) for s in input()[:-1].split()]\n    print(solve(hc, dc, hm, dm, coins, hcup, dcup))", "from math import ceil\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    f = 0\n    for i in range(0, k + 1):\n        c = ceil(hm / (dc + w * i))\n        d = ceil((hc + a * (k - i)) / dm)\n        if c <= d:\n            f = 1\n            break\n    if f:\n        print('YES')\n    else:\n        print('NO')", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\n\ndef main():\n    for _ in range(int(input())):\n        (hc, dc) = [int(item) for item in input().split()]\n        (hm, dm) = [int(item) for item in input().split()]\n        (k, w, a) = [int(item) for item in input().split()]\n        initC = hc // dm\n        if hc % dm != 0:\n            initC += 1\n        initM = hm // dc\n        if hm % dc != 0:\n            initM += 1\n        bisa = False\n        if initC > initM:\n            print('YES')\n            bisa = True\n        else:\n            for i in range(0, k + 1):\n                hc += (k - i) * a\n                dc += i * w\n                initC = hc // dm\n                if hc % dm != 0:\n                    initC += 1\n                initM = hm // dc\n                if hm % dc != 0:\n                    initM += 1\n                bisa = False\n                if initC >= initM:\n                    print('YES')\n                    bisa = True\n                    break\n                hc -= (k - i) * a\n                dc -= i * w\n            if not bisa:\n                print('NO')\nmain()", "import sys\nfrom sys import stdin, stdout\nfrom math import ceil, floor, sqrt, log, log2, log10\nfrom collections import Counter\nint_max = float('inf')\nint_min = -float('inf')\nmod = 10 ** 9 + 7\nANS = []\ninput = stdin.readline\n\ndef decimalToBinary(n):\n    return bin(n).replace('0b', '')\n\ndef solve():\n    pass\nt = int(input())\nfor i in range(t):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    f = 0\n    for i in range(k + 1):\n        aa = i\n        ww = k - i\n        newHC = hc + a * aa\n        newDC = dc + w * ww\n        if ceil(hm / newDC) <= ceil(newHC / dm):\n            f = 1\n            break\n    if f == 1:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nr = [0] * t\nfor j in range(t):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    for i in range(k + 1):\n        nhc = hc + i * a\n        ndc = dc + (k - i) * w\n        if (hm + ndc - 1) // ndc <= (nhc + dm - 1) // dm:\n            r[j] = 'YES'\n            break\n    else:\n        r[j] = 'NO'\nprint('\\n'.join(r))", "import sys\ninput = sys.stdin.readline\nimport math\nfor _ in range(int(input())):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    x = k\n    while x >= 0:\n        if math.ceil((a * x + hc) / dm) >= math.ceil(hm / (dc + w * (k - x))):\n            print('YES')\n            break\n        x -= 1\n    if x < 0:\n        print('NO')", "import math\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (hc, dc) = [int(i) for i in input().split()]\n    (hm, dm) = [int(i) for i in input().split()]\n    (k, w, a) = [int(i) for i in input().split()]\n    flag = 0\n    for i in range(k + 1):\n        b = i\n        v = k - i\n        newH = hc + a * b\n        newD = dc + w * v\n        if math.ceil(hm / newD) <= math.ceil(newH / dm):\n            flag = 1\n            break\n    if flag == 0:\n        print('NO')\n    else:\n        print('YES')", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    (p, q) = map(int, sys.stdin.readline().split())\n    (x, y) = map(int, sys.stdin.readline().split())\n    (k, w, a) = map(int, sys.stdin.readline().split())\n    for i in range(0, k + 1):\n        if (p + i * a) % y == 0:\n            n1 = (p + i * a) / y\n        else:\n            n1 = (p + i * a) // y + 1\n        if x % (q + (k - i) * w) == 0:\n            n2 = x / (q + (k - i) * w)\n        else:\n            n2 = x // (q + (k - i) * w) + 1\n        if n1 >= n2:\n            print('YES')\n            break\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\nfrom math import ceil\n\ndef check(a, b, c, d):\n    p = ceil(c / b)\n    q = ceil(a / d)\n    if p <= q:\n        return True\n    return False\nt = int(input())\nfor _ in range(t):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    flag = True\n    for i in range(k + 1):\n        if check(hc + i * a, dc + (k - i) * w, hm, dm):\n            print('YES')\n            flag = False\n            break\n    if flag:\n        print('NO')", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    (x, y) = map(int, input().split())\n    (n, j, k) = map(int, input().split())\n    f = 0\n    for i in range(n + 1):\n        l = (a + i * k) // y\n        if (a + i * k) % y:\n            l += 1\n        l1 = x // (b + j * (n - i))\n        if x % (b + j * (n - i)):\n            l1 += 1\n        if l >= l1:\n            f = 1\n            break\n    if f:\n        print('YES')\n    else:\n        print('NO')", "import sys\nfrom sys import stdin, stdout\nfrom math import ceil, floor, sqrt, log, log2, log10\nfrom collections import Counter\nint_max = float('inf')\nint_min = -float('inf')\nmod = 10 ** 9 + 7\nANS = []\ninput = stdin.readline\n\ndef decimalToBinary(n):\n    return bin(n).replace('0b', '')\n\ndef solve():\n    pass\nt = int(input())\nfor i in range(t):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    f = 0\n    for i in range(k + 1):\n        aa = i\n        ww = k - i\n        newHC = hc + a * aa\n        newDC = dc + w * ww\n        if ceil(hm / newDC) <= ceil(newHC / dm):\n            f = 1\n            break\n    if f == 1:\n        print('YES')\n    else:\n        print('NO')", "import sys\nimport math\n\ndef willWin(h, d, h_m, d_m):\n    myHits = math.ceil(h_m / d)\n    monsterHits = math.ceil(h / d_m)\n    if myHits > monsterHits:\n        return False\n    return True\n\ndef upgrade(coin, weapon, armor, h, d, h_m, d_m):\n    for i in range(coin + 1):\n        health = i * armor + h\n        attack = (coin - i) * weapon + d\n        if willWin(health, attack, h_m, d_m):\n            return 'YES'\n    return 'NO'\nfirst = True\ncount = 0\nfor line in sys.stdin:\n    if first:\n        first = False\n        count += 1\n        continue\n    arr = line.split()\n    if count % 3 == 1:\n        h = int(arr[0])\n        d = int(arr[1])\n    if count % 3 == 2:\n        h_m = int(arr[0])\n        d_m = int(arr[1])\n    if count % 3 == 0:\n        coin = int(arr[0])\n        weapon = int(arr[1])\n        armor = int(arr[2])\n        if willWin(h, d, h_m, d_m):\n            print('YES')\n        else:\n            print(upgrade(coin, weapon, armor, h, d, h_m, d_m))\n    count += 1", "from math import ceil\n\ndef Solve():\n    T = []\n    for t in range(int(input())):\n        (hc, dc) = map(int, input().split())\n        (hm, dm) = map(int, input().split())\n        (k, w, a) = map(int, input().split())\n        T.append([hc, dc, hm, dm, k, w, a])\n    for (hc, dc, hm, dm, k, w, a) in T:\n        for i in range(0, k + 1):\n            if ceil((hc + (k - i) * a) / dm) * (i * w + dc) >= hm:\n                print('YES')\n                break\n        else:\n            print('NO')\nSolve()", "from math import ceil\n\ndef Solve():\n    T = []\n    for t in range(int(input())):\n        j = []\n        j += map(int, input().split())\n        j += map(int, input().split())\n        j += map(int, input().split())\n        T.append(j)\n    for (hc, dc, hm, dm, k, w, a) in T:\n        for i in range(0, k + 1):\n            if ceil((hc + (k - i) * a) / dm) * (i * w + dc) >= hm:\n                print('YES')\n                break\n        else:\n            print('NO')\nSolve()", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    f = 0\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    for i in range(k + 1):\n        h = hc + a * i\n        d = dc + w * (k - i)\n        c1 = (h + dm - 1) // dm\n        c2 = (hm + d - 1) // d\n        if c1 >= c2:\n            f = 1\n    print('YES' if f == 1 else 'NO')", "import sys\nimport math\nfrom bisect import bisect_right as br\nfrom collections import deque\nfrom itertools import combinations as cb\n\ndef int_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef str_arr():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    (ch, cd) = int_arr()\n    (mh, md) = int_arr()\n    (k, w, a) = int_arr()\n    for i in range(k + 1):\n        atack = cd + w * i\n        x = k - i\n        hel = ch + a * x\n        if mh // atack + min(1, mh % atack) <= hel // md + min(1, hel % md):\n            print('YES')\n            break\n    else:\n        print('NO')", "import math\nans = ''\nfor _ in range(int(input())):\n    (hc, dc) = list(map(int, input().split()))\n    (hm, dm) = list(map(int, input().split()))\n    (k, w, a) = list(map(int, input().split()))\n    for i in range(k + 1):\n        if math.ceil((hc + i * a) / dm) >= math.ceil(hm / (dc + w * (k - i))):\n            ans += 'YES\\n'\n            break\n    else:\n        ans += 'NO\\n'\nprint(ans)", "import math\nn = int(input())\nresults = [0 for i in range(n)]\nfor i in range(n):\n    (hc, dc) = input().split()\n    (hc, dc) = (int(hc), int(dc))\n    (hm, dm) = input().split()\n    (hm, dm) = (int(hm), int(dm))\n    (k, w, a) = input().split()\n    (k, w, a) = (int(k), int(w), int(a))\n    for j in range(0, k + 1):\n        dc_ = dc + w * j\n        hc_ = hc + a * (k - j)\n        t1 = math.ceil(hc_ / dm)\n        t2 = math.ceil(hm / dc_)\n        if t2 <= t1:\n            results[i] = 1\n            break\nfor e in results:\n    print('YES' if e else 'NO')", "from math import ceil\nresults = []\nfor _ in range(int(input())):\n    (healt, damage) = [int(x) for x in input().split()]\n    (monster, mondmg) = [int(x) for x in input().split()]\n    (money, weapon, armor) = [int(x) for x in input().split()]\n    if ceil(monster / damage) <= ceil(healt / mondmg):\n        results.append('YES')\n    else:\n        found = False\n        for for_ammo in range(money + 1):\n            for_armor = money - for_ammo\n            v_health = healt + for_armor * armor\n            v_damage = damage + for_ammo * weapon\n            if ceil(monster / v_damage) <= ceil(v_health / mondmg):\n                results.append('YES')\n                found = True\n                break\n        if not found:\n            results.append('NO')\nprint(*results, sep='\\n')", "from sys import stdin, maxsize\nfrom collections import defaultdict, Counter\nfrom math import ceil\n\ndef rei():\n    return list(map(int, stdin.readline().strip().split(' ')))\n\ndef res():\n    return stdin.readline().rstrip()\n\ndef prno():\n    print('NO')\n\ndef pryes():\n    print('YES')\n\ndef find(hc, dc, hm, dm):\n    tc = ceil(hm / dc)\n    tm = ceil(hc / dm)\n    if tc <= tm:\n        return True\n    return False\n\ndef solve():\n    (hc, dc) = rei()\n    (hm, dm) = rei()\n    (k, w, a) = rei()\n    hcdc = []\n    for i in range(k + 1):\n        (hhc, ddc) = (hc + i * a, dc + (k - i) * w)\n        if find(hhc, ddc, hm, dm):\n            pryes()\n            return\n    prno()\nt = rei()[0]\nfor _ in range(t):\n    solve()", "import math\nt = int(input())\nListA = []\nfor i in range(t):\n    hc = input()\n    (hc, ac) = [int(i) for i in hc.split(' ')]\n    hm = input()\n    (hm, am) = [int(i) for i in hm.split(' ')]\n    k = input()\n    (k, a, w) = [int(i) for i in k.split(' ')]\n    diff = math.ceil(hm / ac) - math.ceil(hc / am)\n    if diff > 0:\n        count = 0\n        for i in range(k + 1):\n            attack = ac + i * a\n            health = hc + (k - i) * w\n            diff = math.ceil(hm / attack) - math.ceil(health / am)\n            if diff <= 0:\n                count += 1\n                break\n        if count == 1:\n            ListA.append('YES')\n        else:\n            ListA.append('NO')\n    else:\n        ListA.append('YES')\nfor i in ListA:\n    print(i)", "num_test = int(input())\nres = []\n\ndef is_char_winner_it(test):\n    for coind in range(0, test['coin'] + 1):\n        (num_move_m, mod_m) = divmod(test['hc'] + test['hi'] * (test['coin'] - coind), test['dm'])\n        (num_move_c, mod_c) = divmod(test['hm'], test['dc'] + test['di'] * coind)\n        if mod_c > 0:\n            num_move_c += 1\n        if mod_m > 0:\n            num_move_m += 1\n        if num_move_c <= num_move_m:\n            return True\n    return False\nfor i in range(0, num_test):\n    test = {}\n    (test['hc'], test['dc']) = (int(x) for x in input().split())\n    (test['hm'], test['dm']) = (int(x) for x in input().split())\n    (test['coin'], test['di'], test['hi']) = (int(x) for x in input().split())\n    res.append(is_char_winner_it(test))\nfor el in res:\n    print('YES' if el else 'NO')", "ans = []\nfor _ in range(int(input())):\n    character = input().split(' ')\n    monster = input().split(' ')\n    supplements = input().split(' ')\n    coins = int(supplements[0])\n    for i in range(coins + 1):\n        charhealth = int(character[0])\n        charattack = int(character[1])\n        charhealth += i * int(supplements[2])\n        charattack += (coins - i) * int(supplements[1])\n        if (charhealth - 1) // int(monster[1]) >= (int(monster[0]) - 1) // charattack:\n            ans.append('YES')\n            break\n    else:\n        ans.append('NO')\nfor i in ans:\n    print(i)", "import math\nT = input()\nT = int(T)\nhealth_me = [0] * T\ndamage_me = [0] * T\nhealth_monster = [0] * T\ndamage_monster = [0] * T\nweapon = [0] * T\narmor = [0] * T\ncoins = [0] * T\nfor i in range(T):\n    (health_me[i], damage_me[i]) = [int(x) for x in input().split()]\n    (health_monster[i], damage_monster[i]) = [int(x) for x in input().split()]\n    (coins[i], weapon[i], armor[i]) = [int(x) for x in input().split()]\n\ndef collect(health_me, damage_me, health_monster, damage_monster, weapon, armor, coins):\n    yes = False\n    for i in range(coins + 1):\n        health_me += armor * i\n        damage_me += weapon * (coins - i)\n        me_win = health_me / damage_monster\n        monster_win = health_monster / damage_me\n        me_win = math.ceil(me_win)\n        monster_win = math.ceil(monster_win)\n        health_me -= armor * i\n        damage_me -= weapon * (coins - i)\n        if me_win >= monster_win:\n            print('YES')\n            return\n    print('NO')\n    return\nfor i in range(T):\n    collect(health_me[i], damage_me[i], health_monster[i], damage_monster[i], weapon[i], armor[i], coins[i])", "import sys\nfrom math import ceil\ninput = sys.stdin.readline\nMAX = sys.maxsize\nsys.setrecursionlimit(10 ** 9)\n\ndef inp():\n    return int(input())\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\ndef read_list():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef read_int_map():\n    return map(int, input().split())\n\ndef compute_number_hits(dmg, armor):\n    return int(ceil(armor / dmg))\n\ndef solve(hc, dc, hm, dm, coins, weapon, armor):\n    die = compute_number_hits(dm, hc)\n    hits = compute_number_hits(dc, hm)\n    if hits <= die:\n        return 'YES'\n    for spent in range(coins):\n        new_dc = dc + spent * weapon\n        new_hc = hc + (coins - spent) * armor\n        die = compute_number_hits(dm, new_hc)\n        hits = compute_number_hits(new_dc, hm)\n        if hits <= die:\n            return 'YES'\n        new_dc = dc + (coins - spent) * weapon\n        new_hc = hc + spent * armor\n        die = compute_number_hits(dm, new_hc)\n        hits = compute_number_hits(new_dc, hm)\n        if hits <= die:\n            return 'YES'\n    return 'NO'\nfor _ in range(inp()):\n    (hc, dc) = read_int_list()\n    (hm, dm) = read_int_list()\n    (k, w, a) = read_int_list()\n    print(solve(hc, dc, hm, dm, k, w, a))", "import sys\nfrom math import ceil\ninput = sys.stdin.readline\nMAX = sys.maxsize\nsys.setrecursionlimit(10 ** 9)\n\ndef inp():\n    return int(input())\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\ndef read_list():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef read_int_map():\n    return map(int, input().split())\n\ndef compute_number_hits(dmg, armor):\n    return int(ceil(armor / dmg))\n\ndef is_dead(hc, dc, hm, dm):\n    die = compute_number_hits(dm, hc)\n    hits = compute_number_hits(dc, hm)\n    return hits <= die\n\ndef solve(hc, dc, hm, dm, coins, weapon, armor):\n    if is_dead(hc, dc, hm, dm):\n        return 'YES'\n    for spent in range(coins):\n        if is_dead(hc + (coins - spent) * armor, dc + spent * weapon, hm, dm):\n            return 'YES'\n        if is_dead(hc + spent * armor, dc + (coins - spent) * weapon, hm, dm):\n            return 'YES'\n    return 'NO'\nfor _ in range(inp()):\n    (hc, dc) = read_int_list()\n    (hm, dm) = read_int_list()\n    (k, w, a) = read_int_list()\n    print(solve(hc, dc, hm, dm, k, w, a))", "def Input():\n    (hC, dC, hM, dM, k, a, w) = (0, 0, 0, 0, 0, 0, 0)\n    player = input()\n    player = player.split(' ')\n    monster = input()\n    monster = monster.split(' ')\n    Data = input()\n    Data = Data.split(' ')\n    return (int(player[0]), int(player[1]), int(monster[0]), int(monster[1]), int(Data[0]), int(Data[1]), int(Data[2]))\n\ndef Solve(hC, dC, hM, dM, k, a, w):\n    for curK in range(0, k + 1):\n        curMoves = (hC + curK * a) // dM\n        if (hC + curK * a) % dM != 0:\n            curMoves += 1\n        if curMoves * (dC + (k - curK) * w) >= hM:\n            return 'YES'\n    return 'NO'\n\ndef main():\n    T = int(input())\n    while T > 0:\n        (hC, dC, hM, dM, k, w, a) = Input()\n        print(Solve(hC, dC, hM, dM, k, a, w))\n        T = T - 1\nmain()", "import sys\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (hc, dc) = map(int, input().split())\n        (hm, dm) = map(int, input().split())\n        (k, w, a) = map(int, input().split())\n        for i in range(k + 1):\n            nhc = hc + i * a\n            ndc = dc + (k - i) * w\n            if (hm + ndc - 1) // ndc <= (nhc + dm - 1) // dm:\n                sys.stdout.write('YES\\n')\n                break\n        else:\n            sys.stdout.write('NO\\n')\nmain()", "def tList():\n    a = map(int, input().split())\n    return a\nimport math\n\ndef solve():\n    for _ in range(int(input())):\n        (hc, dc) = tList()\n        (hm, dm) = tList()\n        (k, m, a) = tList()\n        for i in range(k + 1):\n            h = hc + a * i\n            d = dc + m * (k - i)\n            r = [(hm + d - 1) // d, (h + dm - 1) // dm]\n            if r[0] <= r[1]:\n                print('YES')\n                break\n        else:\n            print('NO')\nsolve()", "t = int(input())\nfor i in range(t):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    win = False\n    for j in range(k + 1):\n        monster_die = (hm - 1) // (dc + j * w) + 1\n        char_die = (hc + (k - j) * a - 1) // dm + 1\n        if monster_die <= char_die:\n            win = True\n            break\n    if win:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    dc += w * k\n    for m_h in range(k + 1):\n        if (hc + dm - 1) // dm >= (hm + dc - 1) // dc:\n            print('YES')\n            break\n        hc += a\n        dc -= w\n    else:\n        print('NO')", "def help(a, b, x, y, k, at, h, spend):\n    t1 = a + h * spend\n    t2 = b + at * (k - spend)\n    if x % t2 == 0:\n        temp1 = x // t2\n    else:\n        temp1 = x // t2 + 1\n    if t1 % y == 0:\n        temp2 = t1 // y\n    else:\n        temp2 = t1 // y + 1\n    if temp1 <= temp2:\n        return True\n    return False\nt = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    (x, y) = map(int, input().split())\n    (k, at, h) = map(int, input().split())\n    if x % b == 0:\n        player = x // b\n    else:\n        player = x // b + 1\n    if a % y == 0:\n        monster = a // y\n    else:\n        monster = a // y + 1\n    if player <= monster:\n        print('YES')\n    else:\n        flag = 0\n        for i in range(k + 1):\n            if help(a, b, x, y, k, at, h, i):\n                flag = 1\n                break\n        if flag == 1:\n            print('YES')\n        else:\n            print('NO')", "from math import ceil\n\ndef solve():\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    for i in range(k + 1):\n        nhc = hc + a * (k - i)\n        ndc = dc + w * i\n        if ceil(nhc / dm) >= ceil(hm / ndc):\n            print('YES')\n            return\n    print('NO')\nt = int(input())\nwhile t:\n    solve()\n    t = t - 1", "import math\n\ndef ans(h1, a1, h, a, k, h2, a2):\n    i = 0\n    j = 11\n    while i <= k:\n        if math.ceil(h2 / (a1 + (k - i) * a)) <= math.ceil((h1 + h * i) / a2):\n            j = 10\n            break\n        else:\n            j = 12\n            i = i + 1\n    if j == 12:\n        print('NO')\n    elif j == 10:\n        print('YES')\nt = 0\nyy = int(input())\nwhile t < yy:\n    (h1, a1) = input().split()\n    (h2, a2) = input().split()\n    (k, a, h) = input().split()\n    ans(int(h1), int(a1), int(h), int(a), int(k), int(h2), int(a2))\n    t = t + 1", "from math import ceil\n\ndef Solve():\n    for t in range(int(input())):\n        (hc, dc) = map(int, input().split())\n        (hm, dm) = map(int, input().split())\n        (k, w, a) = map(int, input().split())\n        for i in range(0, k + 1):\n            if ceil((hc + (k - i) * a) / dm) * (i * w + dc) >= hm:\n                print('YES')\n                break\n        else:\n            print('NO')\nSolve()", "tc = int(input())\nfor i in range(tc):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    AA = hm // dc + (hm % dc != 0)\n    bb = hc // dm + (hc % dm != 0)\n    if AA <= bb:\n        print('YES')\n        continue\n    ok = False\n    for i in range(k + 1):\n        A = hm // (dc + w * i) + (hm % (dc + w * i) != 0)\n        b = (hc + a * (k - i)) // dm + ((hc + a * (k - i)) % dm != 0)\n        if A <= b:\n            print('YES')\n            ok = True\n            break\n    if ok:\n        continue\n    print('NO')", "test = int(input())\nfor _ in range(test):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    ans = 'NO'\n    for i in range(k + 1):\n        nhc = hc + i * a\n        ndc = dc + (k - i) * w\n        if -(-hm // ndc) <= -(-nhc // dm):\n            ans = 'YES'\n            break\n    print(ans)", "def canwin(hc, dc, hm, dm):\n    mshots = hc // dm\n    if hc % dm > 0:\n        mshots += 1\n    if mshots * dc >= hm:\n        return True\n    return False\nnrI = int(input())\nfor i in range(nrI):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    wins = False\n    for buya in range(k + 1):\n        if canwin(hc + buya * a, dc + (k - buya) * w, hm, dm):\n            wins = True\n            break\n    if wins:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    for x in range(k + 1):\n        if (hc + a * x - 1) // dm + 1 >= (hm - 1) // (dc + w * (k - x)) + 1:\n            print('YES')\n            break\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    for i in range(k + 1):\n        nhc = hc + i * a\n        ndc = dc + (k - i) * w\n        if (hm + ndc - 1) // ndc <= (nhc + dm - 1) // dm:\n            print('YES')\n            break\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    for i in range(k + 1):\n        nhc = hc + i * a\n        ndc = dc + (k - i) * w\n        if (hm + ndc - 1) // ndc <= (nhc + dm - 1) // dm:\n            print('YES')\n            break\n    else:\n        print('NO')", "def fun(t):\n    for i in range(t):\n        (hc, dc) = map(int, input().split())\n        (hm, dm) = map(int, input().split())\n        (k, w, a) = map(int, input().split())\n        done = 0\n        for i in range(k + 1):\n            if hm // (w * i + dc) + (hm % (w * i + dc) != 0) <= (hc + a * (k - i)) // dm + ((hc + a * (k - i)) % dm != 0):\n                done = 1\n                print('YES')\n                break\n        if done == 0:\n            print('NO')\nt = int(input())\nfun(t)", "for _ in range(int(input())):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    if hm * dm <= hc * dc:\n        print('YES')\n    else:\n        f = 0\n        for i in range(k + 1):\n            s = dc + i * w\n            c = hc + (k - i) * a\n            if hm % s == 0:\n                s1 = hm // s\n            else:\n                s1 = hm // s + 1\n            if c % dm == 0:\n                c1 = c // dm\n            else:\n                c1 = c // dm + 1\n            if s1 <= c1:\n                f = 1\n                break\n        if f == 1:\n            print('YES')\n        else:\n            print('NO')", "def wins(dc, hc, dm, hm):\n    surv_m = (hm + dc - 1) // dc\n    surv_c = (hc + dm - 1) // dm\n    return surv_c >= surv_m\n\ndef solve():\n    (hc, dc) = [int(x) for x in input().split()]\n    (hm, dm) = [int(x) for x in input().split()]\n    (k, w, a) = [int(x) for x in input().split()]\n    for kk in range(0, k + 1):\n        if wins(dc + kk * w, hc + (k - kk) * a, dm, hm):\n            return 'YES'\n    return 'NO'\nt = int(input())\nfor _ in range(t):\n    print(solve())", "def mata_monstro(hc, hm, dc, dm, moedas, atkUp, defUp):\n    mortec = -(-hc // dm)\n    mortem = -(-hm // dc)\n    if mortec >= mortem:\n        return True\n    for j in range(moedas + 1):\n        mortecnova = -(-(hc + j * defUp) // dm)\n        mortemnova = -(-hm // (dc + (moedas - j) * atkUp))\n        if mortecnova >= mortemnova:\n            return True\n    return False\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        entrada = input().split()\n        hc = int(entrada[0])\n        dc = int(entrada[1])\n        entrada = input().split()\n        hm = int(entrada[0])\n        dm = int(entrada[1])\n        entrada = input().split()\n        moedas = int(entrada[0])\n        atkUp = int(entrada[1])\n        defUp = int(entrada[2])\n        if mata_monstro(hc, hm, dc, dm, moedas, atkUp, defUp):\n            print('YES')\n        else:\n            print('NO')\nmain()", "for _ in range(int(input())):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    for i in range(k + 1):\n        nhc = hc + i * a\n        ndc = dc + (k - i) * w\n        if (hm + ndc - 1) // ndc <= (nhc + dm - 1) // dm:\n            print('YES')\n            break\n    else:\n        print('NO')", "def fight(hc, dc, hm, dm):\n    character = (hm + dc - 1) // dc\n    monster = (hc + dm - 1) // dm\n    return character <= monster\n\ndef main():\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    for i in range(k + 1):\n        if fight(hc + i * a, dc + (k - i) * w, hm, dm):\n            print('YES')\n            return\n    print('NO')\nt = int(input())\nfor _ in range(t):\n    main()", "def solve():\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    for i in range(k + 1):\n        ch = hc + a * i\n        cd = dc + w * (k - i)\n        if ch - dm * ((hm + cd - 1) // cd - 1) > 0:\n            print('YES')\n            return\n    print('NO')\nt = int(input())\nwhile t:\n    t -= 1\n    solve()", "t = int(input())\nfor _ in range(t):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    f = False\n    for i in range(k + 1):\n        udc = i * w + dc\n        uhc = (k - i) * a + hc\n        turns = (hm + udc - 1) // udc\n        turns1 = (uhc + dm - 1) // dm\n        if turns <= turns1:\n            f = True\n            break\n    if f:\n        print('YES')\n    else:\n        print('NO')", "from math import ceil\nfor _ in range(int(input())):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    flag = 0\n    for i in range(k + 1):\n        hc1 = hc + i * a\n        dc1 = dc + (k - i) * w\n        step1 = ceil(hm / dc1)\n        step2 = ceil(hc1 / dm)\n        if step1 <= step2:\n            flag = 1\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor q in range(t):\n    (H, D) = map(int, input().split())\n    (h, d) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    turns_p = (h + D - 1) // D\n    turns_m = (H + d - 1) // d\n    if turns_p <= turns_m:\n        print('YES')\n    else:\n        flag = True\n        for x in range(k + 1):\n            y = k - x\n            n = (h + (D + x * w) - 1) // (D + x * w)\n            m = (H + y * a + d - 1) // d\n            if n <= m:\n                print('YES')\n                flag = False\n                break\n        if flag:\n            print('NO')", "for _ in range(int(input())):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    b = 0\n    for i in range(k + 1):\n        x = (hm - 1) // (dc + w * i)\n        y = (hc - 1 + a * (k - i)) // dm\n        if x <= y:\n            print('YES')\n            b = 1\n            break\n    if b == 0:\n        print('NO')", "for i in range(int(input())):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n\n    def battle(hc, dc, hm, dm, k, a, w):\n        for i in range(0, k + 1):\n            (hc1, dc1) = (hc + i * w, dc + (k - i) * a)\n            h = -(-hm // dc1)\n            m = -(-hc1 // dm)\n            if m >= h:\n                return 'YES'\n        return 'NO'\n    print(battle(hc, dc, hm, dm, k, w, a))", "for _ in range(int(input())):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (coin, weapon, armor) = map(int, input().split())\n    flag = 0\n    for i in range(coin + 1):\n        tdc = dc + i * weapon\n        thc = hc + (coin - i) * armor\n        v1 = -(-hm // tdc)\n        v2 = -(-thc // dm)\n        if v1 <= v2:\n            flag = 1\n            break\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')", "def solve():\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (coin, weap, armor) = map(int, input().split())\n    fl = 0\n    for i in range(coin + 1):\n        tdc = dc + i * weap\n        thc = hc + (coin - i) * armor\n        v1 = -(-hm // tdc)\n        v2 = -(-thc // dm)\n        if v1 <= v2:\n            fl = 1\n            break\n    if fl == 1:\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "for _ in range(int(input())):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    for i in range(k + 1):\n        h = hc + i * a\n        d = dc + (k - i) * w\n        cnt = hm // d\n        if hm % d:\n            cnt += 1\n        if (cnt - 1) * dm < h:\n            print('YES')\n            break\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    res = 'NO'\n    for i in range(k + 1):\n        if ((hc + i * a - 1) // dm + 1) * (dc + (k - i) * w) >= hm:\n            res = 'YES'\n            break\n    print(res)", "t = int(input())\nfor _ in range(t):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    for i in range(k + 1):\n        nhc = hc + i * a\n        ndc = dc + (k - i) * w\n        if (hm + ndc - 1) // ndc <= (nhc + dm - 1) // dm:\n            print('YES')\n            break\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    s = 0\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    if k == 0:\n        if dc * -(-hc // dm) >= hm:\n            print('YES')\n            s = 1\n            continue\n        else:\n            k = -1\n    for j in range(k + 1):\n        if (dc + (k - j) * w) * int((hc + j * a) / dm + 0.999) >= hm:\n            print('YES')\n            s = 1\n            break\n    if s == 0:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    ans = 'NO'\n    for i in range(k + 1):\n        hcn = hc + i * a\n        dcn = dc + (k - i) * w\n        if (hm + dcn - 1) // dcn <= (hcn - 1 + dm) // dm:\n            ans = 'YES'\n            break\n    print(ans)", "def floorDiv(a, b):\n    if a % b == 0:\n        return a // b\n    else:\n        return a // b + 1\nfor T in range(int(input())):\n    (h_c, d_c) = map(int, input().split(' '))\n    (h_m, d_m) = map(int, input().split(' '))\n    (k, a, w) = map(int, input().split(' '))\n    d_c += a * k\n    while k >= 0:\n        if floorDiv(h_m, d_c) <= floorDiv(h_c, d_m):\n            print('YES')\n            break\n        else:\n            d_c -= a\n            h_c += w\n        k -= 1\n    if k < 0:\n        print('NO')", "z = int(input())\nfrom math import ceil\nfor i in range(z):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    p = ceil(hc / dm)\n    m = ceil(hm / dc)\n    if p >= m:\n        print('YES')\n    else:\n        t = True\n        for i in range(0, k + 1):\n            if ceil((hc + i * a) / dm) >= ceil(hm / (dc + (k - i) * w)):\n                t = False\n                break\n        if t == True:\n            print('NO')\n        else:\n            print('YES')", "t = int(input())\nfor _ in range(t):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    is_ans = False\n    for i in range(k + 1):\n        ndc = dc + i * w\n        nhc = hc + (k - i) * a\n        if (hm + ndc - 1) // ndc <= (nhc + dm - 1) // dm:\n            is_ans = True\n            break\n    if is_ans:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    for i in range(k + 1):\n        nhc = hc + i * a\n        ndc = dc + (k - i) * w\n        if (hm + ndc - 1) // ndc <= (nhc + dm - 1) // dm:\n            print('YES')\n            break\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    for i in range(k + 1):\n        nhc = hc + i * a\n        ndc = dc + (k - i) * w\n        if (hm + ndc - 1) // ndc <= (nhc + dm - 1) // dm:\n            print('YES')\n            break\n    else:\n        print('NO')", "from math import ceil\nR = lambda : map(int, input().split())\nfor j in range(int(input())):\n    (hc, dc) = R()\n    (hm, dm) = R()\n    (k, w, a) = R()\n    for i in range(k + 1):\n        if ceil(hm / (dc + (k - i) * w)) <= ceil((hc + i * a) / dm):\n            print('YES')\n            break\n    else:\n        print('NO')", "import sys\nimport math\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_ls():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef test_ok(ok):\n    print('YES' if ok else 'NO')\n\ndef main():\n    for _ in range(int(input())):\n        (hc, dc) = map(int, input().split())\n        (hm, dm) = map(int, input().split())\n        (k, w, a) = map(int, input().split())\n        ok = False\n        for i in range(k + 1):\n            new_hc = hc + i * a\n            new_dc = dc + (k - i) * w\n            x = hm // new_dc\n            if hm % new_dc > 0:\n                x += 1\n            y = new_hc // dm\n            if new_hc % dm > 0:\n                y += 1\n            if x <= y:\n                ok = True\n                break\n        test_ok(ok)\nmain()", "for _ in range(int(input())):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    for i in range(k + 1):\n        nhc = hc + i * a\n        ndc = dc + (k - i) * w\n        if (hm + ndc - 1) // ndc <= (nhc + dm - 1) // dm:\n            print('YES')\n            break\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    for i in range(k + 1):\n        nhc = hc + i * a\n        ndc = dc + (k - i) * w\n        if (hm + ndc - 1) // ndc <= (nhc + dm - 1) // dm:\n            print('YES')\n            break\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    for i in range(k + 1):\n        nhc = hc + i * a\n        ndc = dc + (k - i) * w\n        if (hm + ndc - 1) // ndc <= (nhc + dm - 1) // dm:\n            print('YES')\n            break\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    for i in range(k + 1):\n        nhc = hc + i * a\n        ndc = dc + (k - i) * w\n        if (hm + ndc - 1) // ndc <= (nhc + dm - 1) // dm:\n            print('YES')\n            break\n    else:\n        print('NO')", "from sys import stdin\nfrom math import ceil\n\ndef check(hc, hm, dc, dm, k, w, a):\n    for i in range(k + 1):\n        val1 = ceil((hc + (k - i) * a) / dm)\n        val2 = ceil(hm / (dc + i * w))\n        if val1 >= val2:\n            return 'YES'\n    return 'NO'\nt = int(input())\nfor _ in range(t):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    print(check(hc, hm, dc, dm, k, w, a))", "t = int(input())\nwhile t:\n    test = 0\n    t -= 1\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    for i in range(0, k + 1):\n        weap = i * w\n        arm = (k - i) * a\n        newhc = hc + arm\n        newdc = dc + weap\n        attacks = hm // newdc\n        if hm % newdc != 0:\n            attacks += 1\n        att_m = attacks - 1\n        if newhc - dm * att_m > 0:\n            print('YES')\n            test = 1\n            break\n    if test == 0:\n        print('NO')", "import math\nT = int(input())\n\ndef solve(i):\n    (hc, dc) = list(map(int, input().split(' ')))\n    (hm, dm) = list(map(int, input().split(' ')))\n    (c, du, hu) = list(map(int, input().split(' ')))\n    for i in range(c + 1):\n        nhc = hc + i * hu\n        ndc = dc + (c - i) * du\n        if (hm + ndc - 1) // ndc <= (nhc + dm - 1) // dm:\n            print('YES')\n            return\n    print('NO')\nfor i in range(T):\n    solve(i)", "from math import ceil\n\ndef turns(attack, health):\n    if health % attack == 0:\n        return health // attack\n    return ceil(health / attack)\n\ndef does_win(ha, hh, ma, mh):\n    hturns = turns(ha, mh)\n    mturns = turns(ma, hh)\n    return hturns <= mturns\n\ndef can_spend(ha, hh, ma, mh, k, w, a):\n    for wk in range(k + 1):\n        if does_win(ha + wk * w, hh + (k - wk) * a, ma, mh):\n            return True\n    return False\n\ndef main():\n    ncases = int(input())\n    for i in range(ncases):\n        (hh, ha) = input().split()\n        (mh, ma) = input().split()\n        (k, w, a) = input().split()\n        if can_spend(int(ha), int(hh), int(ma), int(mh), int(k), int(w), int(a)):\n            print('YES')\n        else:\n            print('NO')\nmain()", "for _ in range(int(input())):\n    (hc, dc) = [int(i) for i in input().split()]\n    (hm, dm) = [int(i) for i in input().split()]\n    (k, w, a) = [int(i) for i in input().split()]\n    flag = 0\n    for i in range(k + 1):\n        if (hm - 1) // (dc + i * w) <= (hc + (k - i) * a - 1) // dm:\n            flag = 1\n            break\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    raw = input().split()\n    (A, B) = (int(raw[0]), int(raw[1]))\n    raw = input().split()\n    (C, D) = (int(raw[0]), int(raw[1]))\n    raw = input().split()\n    (k, w, a) = (int(raw[0]), int(raw[1]), int(raw[2]))\n    ok = False\n    for i in range(k + 1):\n        x = A + i * a\n        y = B + (k - i) * w\n        if (C + y - 1) // y <= (x + D - 1) // D:\n            ok = True\n            break\n    print('YES' if ok else 'NO')", "from math import ceil\nfor i in range(int(input())):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    for x in range(k + 1):\n        if ceil(hm / (dc + (k - x) * w)) <= ceil((hc + x * a) / dm):\n            print('YES')\n            break\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    flag = 0\n    for k1 in range(k + 1):\n        k2 = k - k1\n        if (hc + k1 * a + dm - 1) // dm * (dc + k2 * w) >= hm:\n            flag = 1\n            break\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')", "import math\nT = int(input())\nfor i in range(T):\n    (h_c, d_c) = map(int, input().split())\n    (h_m, d_m) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    for i in range(k + 1):\n        if math.ceil(h_m / (d_c + (k - i) * w)) <= math.ceil((h_c + i * a) / d_m):\n            print('YES')\n            break\n        elif i == k:\n            print('NO')", "t = int(input())\nfor T in range(t):\n    (hc, dc) = [int(x) for x in input().split()]\n    (hm, dm) = [int(x) for x in input().split()]\n    (k, w, a) = [int(x) for x in input().split()]\n    ans = 'NO'\n    k1 = k\n    while k1 >= 0:\n        hc1 = hc + (k - k1) * a\n        dc1 = dc + k1 * w\n        ce = hc1 // dm\n        if hc1 % dm != 0:\n            ce += 1\n        me = hm // dc1\n        if hm % dc1 != 0:\n            me += 1\n        if ce >= me:\n            ans = 'YES'\n            break\n        k1 -= 1\n    print(ans)", "import math\nfor t in range(int(input())):\n    (ch, cd) = map(int, input().split())\n    (mh, md) = map(int, input().split())\n    (k, a, d) = map(int, input().split())\n    flag = False\n    for i in range(k + 1):\n        rounds = math.ceil((i * d + ch) / md)\n        atk = cd + (k - i) * a\n        if rounds * atk >= mh:\n            print('YES')\n            flag = True\n            break\n    if not flag:\n        print('NO')", "from math import ceil\nfor _ in range(int(input())):\n    (hc, dc) = map(int, input().split())\n    (hm, dm) = map(int, input().split())\n    (k, w, a) = map(int, input().split())\n    ans = 'NO'\n    for i in range(0, k + 1):\n        chr = ceil((hc + (k - i) * a) / dm)\n        mon = ceil(hm / (dc + i * w))\n        if chr >= mon:\n            ans = 'YES'\n            break\n    print(ans)"]