["for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    pinv = [0] * n\n    for i in range(n):\n        pinv[p[i]] = i\n    (idxmin, idxmax) = (pinv[0], pinv[0])\n    ans = 1\n    for w in range(2, n + 1):\n        if w % 2 == 1:\n            (idxmin, idxmax) = (min(idxmin, pinv[w // 2]), max(idxmax, pinv[w // 2]))\n        ans += max(0, min(idxmin, n - w) - max(idxmax + 1 - w, 0) + 1)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    pinv = [0] * n\n    for i in range(n):\n        pinv[p[i]] = i\n    (idxmin, idxmax) = (pinv[0], pinv[0])\n    ans = 1\n    for w in range(2, n + 1):\n        if w % 2 == 1:\n            (idxmin, idxmax) = (min(idxmin, pinv[w // 2]), max(idxmax, pinv[w // 2]))\n        ans += max(0, min(idxmin, n - w) - max(idxmax + 1 - w, 0) + 1)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    pinv = [0] * n\n    for i in range(n):\n        pinv[p[i]] = i\n    (idxmin, idxmax) = (pinv[0], pinv[0])\n    ans = 1\n    for w in range(2, n + 1):\n        if w % 2 == 1:\n            (idxmin, idxmax) = (min(idxmin, pinv[w // 2]), max(idxmax, pinv[w // 2]))\n        ans += max(0, min(idxmin, n - w) - max(idxmax + 1 - w, 0) + 1)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    t = list(map(int, input().split()))\n    tinv = [0] * n\n    for i in range(n):\n        tinv[t[i]] = i\n    (idxmin, idxmax) = (tinv[0], tinv[0])\n    ans = 1\n    for w in range(2, n + 1):\n        if w % 2 == 1:\n            (idxmin, idxmax) = (min(idxmin, tinv[w // 2]), max(idxmax, tinv[w // 2]))\n        ans += max(0, min(idxmin, n - w) - max(idxmax + 1 - w, 0) + 1)\n    print(ans)", "import math\nimport heapq as hq\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    inv_arr = [0] * n\n    ans = 0\n    for i in range(n):\n        inv_arr[arr[i]] = i\n    (l, r) = (n + 10, -1)\n    for w in range(1, n + 1):\n        if w % 2 == 1:\n            (l, r) = (min(l, inv_arr[w // 2]), max(r, inv_arr[w // 2]))\n        ans += max(0, min(l, n - w) - max(0, r + 1 - w) + 1)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    pinv = [0] * n\n    for i in range(n):\n        pinv[p[i]] = i\n    (idxmin, idxmax) = (pinv[0], pinv[0])\n    ans = 1\n    for w in range(2, n + 1):\n        if w % 2 == 1:\n            (idxmin, idxmax) = (min(idxmin, pinv[w // 2]), max(idxmax, pinv[w // 2]))\n        ans += max(0, min(idxmin, n - w) - max(idxmax + 1 - w, 0) + 1)\n    print(ans)", "def onec(n, l, r, k):\n    if r - l + 1 > k:\n        return 0\n    f = max(0, r - k + 1)\n    s = min(n - 1, l + k - 1)\n    return s - f - k + 2\n\ndef one():\n    n = int(input())\n    p = list(map(int, input().split()))\n    d = [None] * n\n    for (i, e) in enumerate(p):\n        d[e] = i\n    l = d[0]\n    r = d[0]\n    s = 0\n    for i in range(n):\n        k = i + 1\n        w = -(-k // 2)\n        l = min(l, d[w - 1])\n        r = max(r, d[w - 1])\n        s += onec(n, l, r, k)\n    print(s)\nt = int(input())\nfor i in range(t):\n    one()", "def onec(n, l, r, k):\n    if r - l + 1 > k:\n        return 0\n    f = max(0, r - k + 1)\n    s = min(n - 1, l + k - 1)\n    return s - f - k + 2\n\ndef one():\n    n = int(input())\n    p = list(map(int, input().split()))\n    d = [None] * n\n    for (i, e) in enumerate(p):\n        d[e] = i\n    l = d[0]\n    r = d[0]\n    s = 0\n    for i in range(n):\n        k = i + 1\n        w = -(-k // 2)\n        l = min(l, d[w - 1])\n        r = max(r, d[w - 1])\n        s += onec(n, l, r, k)\n    print(s)\nt = int(input())\nfor i in range(t):\n    one()", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    pinv = [0] * n\n    for i in range(n):\n        pinv[p[i]] = i\n    (idxmin, idxmax) = (pinv[0], pinv[0])\n    ans = 1\n    for w in range(2, n + 1):\n        if w % 2 == 1:\n            (idxmin, idxmax) = (min(idxmin, pinv[w // 2]), max(idxmax, pinv[w // 2]))\n        ans += max(0, min(idxmin, n - w) - max(idxmax + 1 - w, 0) + 1)\n    print(ans)", "import math\nimport heapq as hq\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    inv_arr = [0] * n\n    ans = 0\n    for i in range(n):\n        inv_arr[arr[i]] = i\n    (l, r) = (n + 10, -1)\n    for w in range(1, n + 1):\n        if w % 2 == 1:\n            (l, r) = (min(l, inv_arr[w // 2]), max(r, inv_arr[w // 2]))\n        ans += max(0, min(l, n - w) - max(0, r + 1 - w) + 1)\n    print(ans)", "import math\nimport heapq as hq\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    inv_arr = [0] * n\n    ans = 0\n    for i in range(n):\n        inv_arr[arr[i]] = i\n    (l, r) = (n + 10, -1)\n    for w in range(1, n + 1):\n        if w % 2 == 1:\n            (l, r) = (min(l, inv_arr[w // 2]), max(r, inv_arr[w // 2]))\n        ans += max(0, min(l, n - w) - max(0, r + 1 - w) + 1)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    pinv = [0] * n\n    for i in range(n):\n        pinv[p[i]] = i\n    (idxmin, idxmax) = (pinv[0], pinv[0])\n    ans = 1\n    for w in range(2, n + 1):\n        if w % 2 == 1:\n            (idxmin, idxmax) = (min(idxmin, pinv[w // 2]), max(idxmax, pinv[w // 2]))\n        ans += max(0, min(idxmin, n - w) - max(idxmax + 1 - w, 0) + 1)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    pinv = [0] * n\n    for i in range(n):\n        pinv[p[i]] = i\n    (idxmin, idxmax) = (pinv[0], pinv[0])\n    ans = 1\n    for w in range(2, n + 1):\n        if w % 2 == 1:\n            (idxmin, idxmax) = (min(idxmin, pinv[w // 2]), max(idxmax, pinv[w // 2]))\n        ans += max(0, min(idxmin, n - w) - max(idxmax + 1 - w, 0) + 1)\n    print(ans)", "def onec(n, l, r, k):\n    if r - l + 1 > k:\n        return 0\n    f = max(0, r - k + 1)\n    s = min(n - 1, l + k - 1)\n    return s - f - k + 2\n\ndef one():\n    n = int(input())\n    p = list(map(int, input().split()))\n    d = [None] * n\n    for (i, e) in enumerate(p):\n        d[e] = i\n    l = d[0]\n    r = d[0]\n    s = 0\n    for i in range(n):\n        k = i + 1\n        w = -(-k // 2)\n        l = min(l, d[w - 1])\n        r = max(r, d[w - 1])\n        s += onec(n, l, r, k)\n    print(s)\nt = int(input())\nfor i in range(t):\n    one()", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    pos = {}\n    for i in range(len(a)):\n        pos[a[i]] = i\n    leftmost_number = pos[0]\n    rightmost_number = pos[0]\n    ans = 0\n    for length in range(1, len(a) + 1):\n        leftmost_number = min(leftmost_number, pos[(length - 1) // 2])\n        rightmost_number = max(rightmost_number, pos[(length - 1) // 2])\n        leftmost_start = max(0, rightmost_number - length + 1)\n        rightmost_start = min(leftmost_number, n - length)\n        ans += max(0, rightmost_start - leftmost_start + 1)\n    print(ans)"]