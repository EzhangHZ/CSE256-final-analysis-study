["from collections import Counter\nfor li in [*open(0)][2::2]:\n    n = len((li := li.split()))\n    m = max(Counter(li).values())\n    ans = n - m\n    while m < n:\n        ans += 1\n        m = 2 * m\n    print(ans)", "from collections import *\nfor a in [*open(0)][2::2]:\n    n = len((a := a.split()))\n    m = max(Counter(a).values())\n    r = n - m\n    while m < n:\n        r += 1\n        m *= 2\n    print(r)", "from collections import *\nfor a in [*open(0)][2::2]:\n    b = len((a := a.split()))\n    m = max(Counter(a).values())\n    r = b - m\n    while m < b:\n        r += 1\n        m *= 2\n    print(r)", "from collections import *\nfor a in [*open(0)][2::2]:\n    n = len((a := a.split()))\n    m = max(Counter(a).values())\n    r = n - m\n    while m < n:\n        r += 1\n        m *= 2\n    print(r)", "from collections import *\nfor a in [*open(0)][2::2]:\n    n = len((a := a.split()))\n    m = max(Counter(a).values())\n    r = n - m\n    while m < n:\n        r += 1\n        m *= 2\n    print(r)", "from sys import stdin\nfrom collections import defaultdict\n\ndef main():\n    sr = stdin.readline\n    t = int(sr())\n    for _ in range(t):\n        n = int(sr())\n        l = list(map(int, sr().split()))\n        c = defaultdict(int)\n        for num in l:\n            c[num] += 1\n        v = max(c.values())\n        ret = n - v\n        while v < n:\n            v <<= 1\n            ret += 1\n        print(ret)\nmain()", "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    w = input().split()\n    s = max(Counter(w).values())\n    a = n - s\n    while s < n:\n        a += 1\n        s *= 2\n    print(a)", "from collections import *\nfor a in [*open(0)][2::2]:\n    n = len((a := a.split()))\n    m = max(Counter(a).values())\n    r = n - m\n    while m < n:\n        r += 1\n        m *= 2\n    print(r)", "from collections import *\nfor a in [*open(0)][2::2]:\n    n = len((a := a.split()))\n    m = max(Counter(a).values())\n    r = n - m\n    while m < n:\n        r += 1\n        m *= 2\n    print(r)", "from collections import *\nfor i in [*open(0)][2::2]:\n    a = len((i := i.split()))\n    b = max(Counter(i).values())\n    s = a - b\n    while a > b:\n        s += 1\n        b *= 2\n    print(s)", "from collections import *\nfor a in [*open(0)][2::2]:\n    n = len((a := a.split()))\n    m = max(Counter(a).values())\n    r = n - m\n    while m < n:\n        r += 1\n        m *= 2\n    print(r)", "from collections import *\nfor a in [*open(0)][2::2]:\n    n = len((a := a.split()))\n    m = max(Counter(a).values())\n    r = n - m\n    while m < n:\n        r += 1\n        m *= 2\n    print(r)", "from collections import *\nfor a in [*open(0)][2::2]:\n    n = len((a := a.split()))\n    m = max(Counter(a).values())\n    r = n - m\n    while m < n:\n        r += 1\n        m *= 2\n    print(r)", "from collections import *\nfor a in [*open(0)][2::2]:\n    n = len((a := a.split()))\n    m = max(Counter(a).values())\n    r = n - m\n    while m < n:\n        r += 1\n        m *= 2\n    print(r)", "from collections import *\nfor a in [*open(0)][2::2]:\n    n = len((a := a.split()))\n    m = max(Counter(a).values())\n    r = n - m\n    while m < n:\n        r += 1\n        m *= 2\n    print(r)", "from collections import *\nfor a in [*open(0)][2::2]:\n    n = len((a := a.split()))\n    m = max(Counter(a).values())\n    r = n - m\n    while m < n:\n        r += 1\n        m *= 2\n    print(r)", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(0, t):\n    n = int(sys.stdin.readline())\n    arr = list(map(int, sys.stdin.readline().strip().split()))\n    b = dict()\n    for i in arr:\n        if i in b:\n            b[i] += 1\n        else:\n            b[i] = 1\n    c = b[max(b, key=b.get)]\n    count = 0\n    if n == 1:\n        count = 0\n    else:\n        while c <= n:\n            if c == n:\n                break\n            if 2 * c <= n:\n                count = count + c + 1\n                c = 2 * c\n            elif 2 * c > n:\n                count = count + c - (2 * c - n) + 1\n                c = c + (c - (2 * c - n))\n    print(count)", "import sys\ninput = sys.stdin.readline\nfor iiiabcd in range(int(input())):\n    n = int(input())\n    d = {}\n    ans = 0\n    for i in map(int, input().split()):\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    s = max(d.values())\n    while s < n:\n        if s <= int(n / 2):\n            ans += 1 + s\n        else:\n            ans += 1 + n - s\n        s += s\n    print(ans)", "from collections import *\nfor a in [*open(0)][2::2]:\n    n = len((a := a.split()))\n    m = max(Counter(a).values())\n    r = n - m\n    while m < n:\n        r += 1\n        m *= 2\n    print(r)", "from collections import Counter\nfor a in [*open(0)][2::2]:\n    n = len((a := a.split()))\n    b = max(Counter(a).values())\n    cnt = n - b\n    while b < n:\n        b *= 2\n        cnt += 1\n    res = cnt\n    print(res)", "import sys\n\ndef nextline():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef min_number_of_doublings(max_occ, array_len):\n    min_num = 0\n    while max_occ < array_len:\n        min_num += 1\n        max_occ *= 2\n    return min_num\ntest_cases = int(nextline())\nfor i in range(test_cases):\n    array_len = int(nextline())\n    array = nextline().split()\n    element_frequencies = dict()\n    for i in range(len(array)):\n        element_frequencies[array[i]] = element_frequencies.get(array[i], 0) + 1\n    max_occurrence = 0\n    for key in element_frequencies.keys():\n        if element_frequencies[key] > max_occurrence:\n            max_occurrence = element_frequencies[key]\n    print(min_number_of_doublings(max_occurrence, array_len) + array_len - max_occurrence)", "from collections import *\nfor a in [*open(0)][2::2]:\n    n = len((a := a.split()))\n    m = max(Counter(a).values())\n    r = n - m\n    while m < n:\n        r += 1\n        m *= 2\n    print(r)", "from collections import *\nfor a in [*open(0)][2::2]:\n    n = len((a := a.split()))\n    m = max(Counter(a).values())\n    r = n - m\n    while m < n:\n        r += 1\n        m *= 2\n    print(r)", "def solve():\n    d = {}\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    mx = 0\n    for i in d:\n        mx = max(mx, d[i])\n    for i in d:\n        if d[i] == mx:\n            key = i\n            break\n    ans = n - d[key]\n    if ans == 0:\n        return 0\n    while d[key] < n:\n        ans += 1\n        d[key] *= 2\n    return ans\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    print(solve())", "import sys\nnumber_of_data = int(sys.stdin.readline())\nfor i in range(number_of_data):\n    n = int(sys.stdin.readline())\n    my_list = sys.stdin.readline().split()\n    my_list = [int(x) for x in my_list]\n    my_list.sort()\n    max_count = 1\n    max_now = 1\n    for j in range(n - 1):\n        if my_list[j + 1] == my_list[j]:\n            max_now += 1\n            if max_count < max_now:\n                max_count = max_now\n        else:\n            if max_count < max_now:\n                max_count = max_now\n            max_now = 1\n    k = 0\n    while 2 ** k * max_count < n:\n        k += 1\n    print(k + n - max_count)", "import sys\ninput = sys.stdin.readline\nfor iiiabcd in range(int(input())):\n    n = int(input())\n    d = {}\n    ans = 0\n    for i in map(int, input().split()):\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    s = max(d.values())\n    while s < n:\n        ans += 1 + min(s, n - s)\n        s += s\n    print(ans)", "import sys, math\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nfor _ in range(inp()):\n    n = inp()\n    nums = inlt()\n    d = {}\n    for num in nums:\n        d[num] = d.get(num, 0) + 1\n    y = max(d.values())\n    print(n - y + math.ceil(math.log2(math.ceil(n / y))))", "def q(n, s):\n    s.sort()\n    qw = 1\n    m = 1\n    for i in range(n - 1):\n        if s[i] < s[i + 1]:\n            if qw < m:\n                qw = m\n            m = 1\n        else:\n            m += 1\n    qw = max(m, qw)\n    w = 0\n    g = n - qw\n    while g > 0:\n        w += 1 + min(qw, g)\n        g -= min(qw, g)\n        qw *= 2\n    return w\nn = int(input())\nw = []\nfor i in range(n):\n    a = int(input())\n    s = list(map(int, input().split()))\n    w.append(q(a, s))\nfor i in range(n):\n    print(w[i])", "from sys import stdin\nt = int(stdin.readline())\nwhile t > 0:\n    t -= 1\n    n = int(stdin.readline())\n    a = sorted(list(map(int, stdin.readline().split())))\n    M = 1\n    temp = 1\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            temp = 1\n        else:\n            temp += 1\n        M = max(M, temp)\n    ind = 0\n    temp = M\n    while temp < n:\n        ind += 1\n        temp *= 2\n    print(n - M + ind)", "from collections import *\nfor a in [*open(0)][2::2]:\n    n = len((a := a.split()))\n    m = max(Counter(a).values())\n    r = 0\n    while m < n:\n        r += min(m, n - m) + 1\n        m *= 2\n    print(r)", "from collections import Counter\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        print(solve(n, arr))\n\ndef solve(n, arr):\n    k = Counter(arr).most_common(1)[0][1]\n    count = 0\n    m = k\n    while m < n:\n        count += 1\n        moved = min(n - m, m)\n        m += moved\n        count += moved\n    return count\nimport sys\ninput = sys.stdin.readline\nexit(main())", "from itertools import groupby\nfrom math import ceil, log2\nfrom sys import stdin, stdout\nread = stdin.readline\nwrite = stdout.write\nfor _ in range(int(read())):\n    n = int(read())\n    arr = sorted(list(map(int, read().split())))\n    freq = [(len(list(k)), g) for (g, k) in groupby(arr)]\n    freq.sort(reverse=True)\n    try:\n        print(ceil(log2(n / freq[0][0])) + n - freq[0][0])\n    except:\n        print(0)", "def main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        A = list(input().split())\n        counter = dict()\n        max_count = 0\n        for k in A:\n            if k not in counter:\n                counter[k] = 0\n            counter[k] += 1\n            if counter[k] > max_count:\n                max_count = counter[k]\n        swap_count = n - max_count\n        copy_count = 0\n        a = max_count\n        while a < n:\n            a = a * 2\n            copy_count += 1\n        print(swap_count + copy_count)\nmain()", "import collections\nimport sys\ninput = sys.stdin.readline\nfor k in range(int(input())):\n    n = int(input())\n    v = list(map(int, input().split()))\n    m = max(collections.Counter(v).values())\n    if n == m:\n        print(0)\n    else:\n        s = 0\n        res = 0\n        while m * 2 ** (s + 1) < n:\n            s += 1\n        res = 0\n        for j in range(s):\n            res += 1\n            res += m * 2 ** j\n        res += n - m * 2 ** s\n        print(res + 1)", "import sys\nimport math\ninput = sys.stdin.readline\nfrom collections import Counter\nimport statistics\nfrom statistics import mode\n\ndef max_dup(a, n):\n    a.sort()\n    cnt = 1\n    mx = 0\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            cnt += 1\n        else:\n            mx = max(mx, cnt)\n            cnt = 1\n    mx = max(mx, cnt)\n    return mx\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_dupl = max_dup(a, n)\n    step = n - max_dupl\n    if n / max_dupl == 2:\n        step += 1\n    else:\n        step += math.ceil(math.log(n, 2) - math.log(max_dupl, 2))\n    print(step)", "import sys\nfrom collections import *\n\ndef prin(a):\n    sys.stdout.write(str(a) + '\\n')\n\ndef input():\n    return sys.stdin.readline().strip()\nmod = int(1000000000.0 + 7)\nx8 = [-1, -1, 0, 1, 1, 1, 0, -1]\ny8 = [0, 1, 1, 1, 0, -1, -1, -1]\nfor _ in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    d = {}\n    q = w = -1000000000.0\n    for i in l:\n        d.setdefault(i, 0)\n        d[i] += 1\n    for i in d:\n        if d[i] <= w:\n            continue\n        q = i\n        w = d[i]\n    r = n - w\n    ct = 0\n    while r:\n        ct += 1\n        if w < r:\n            r -= w\n            ct += w\n            w *= 2\n        else:\n            ct += r\n            break\n    print(ct)", "def ans(ar, n):\n    dict = {}\n    for i in ar:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    ls = []\n    for i in dict:\n        ls.append(dict[i])\n    ls.sort()\n    max = ls[-1]\n    ans = max\n    count = 0\n    while max < n:\n        max *= 2\n        count += 1\n    print(n + count - ans)\n\ndef solve():\n    n = int(input())\n    ar = input().split(' ')\n    ans(ar, n)\nt = int(input())\nfor i in range(t):\n    solve()", "import math\nimport sys\nfrom collections import deque\nimport heapq\nfrom collections import Counter\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\ndef mpp():\n    return map(int, inp().split())\n\ndef lis():\n    return list(mpp())\n\ndef sol(arr, n):\n    di = Counter(arr)\n    key = 0\n    for i in di:\n        key = max(key, di[i])\n    count = n - key\n    sum = key\n    while sum < n:\n        count += 1\n        sum = sum * 2\n    return count\n\ndef main():\n    t = int(inp())\n    for _ in range(t):\n        n = int(inp())\n        arr = lis()\n        print(sol(arr, n))\nmain()", "from collections import Counter\nfor i in range(int(input())):\n    n = int(input())\n    t_max = max(Counter(input().split()).values())\n    cnt = 0\n    probe = t_max\n    while probe < n:\n        probe *= 2\n        cnt += 1\n    res = n - t_max + cnt\n    print(res)", "for t in range(int(input())):\n    n = int(input())\n    c = {}\n    for i in input().split():\n        if c.get(i, 0):\n            c[i] += 1\n        else:\n            c[i] = 1\n    m = max(c.values())\n    c = n - m\n    while m < n:\n        c += 1\n        m *= 2\n    print(c)", "import sys\nimport math\ninput = sys.stdin.readline\nfrom collections import Counter\nimport statistics\nfrom statistics import mode\n\ndef max_dup(List):\n    dict = {}\n    (count, itm) = (0, '')\n    for item in reversed(List):\n        dict[item] = dict.get(item, 0) + 1\n        if dict[item] >= count:\n            (count, itm) = (dict[item], item)\n    return itm\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_dupl = a.count(max_dup(a))\n    step = n - max_dupl\n    if n / max_dupl == 2:\n        step += 1\n    else:\n        step += math.ceil(math.log(n, 2) - math.log(max_dupl, 2))\n    print(step)", "for _ in range(int(input())):\n    n = int(input())\n    dic = {}\n    for i in input().split():\n        if dic.get(i, 0):\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    most = max(dic.values())\n    copies = n - most\n    while most < n:\n        copies += 1\n        most *= 2\n    print(copies)", "def solve(n, max_num):\n    left_num = n - max_num\n    base = 1\n    i = 0\n    for i in range(1, 35):\n        if base * max_num >= left_num:\n            return i\n        left_num = left_num - base * max_num\n        base = base * 2\n    return i\nN = int(input())\nfor _ in range(N):\n    n = int(input())\n    list_num = input().split(' ')\n    if n == 1:\n        print('0')\n        continue\n    d = dict()\n    for num in list_num:\n        if num in d:\n            d[num] = d[num] + 1\n        else:\n            d[num] = 1\n    max_num = max(d.values())\n    if n == max_num:\n        print('0')\n        continue\n    time = solve(n, max_num)\n    ans = n - max_num + time\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    numbers = list(map(int, input().split(' ')))\n    len_nb = len(numbers)\n    nb_dict = dict()\n    for nb in numbers:\n        if nb in nb_dict:\n            nb_dict[nb] += 1\n        else:\n            nb_dict[nb] = 1\n    max_val = max(nb_dict.values())\n    ans = n - max_val\n    while max_val < n:\n        ans += 1\n        max_val *= 2\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    w = input().split()\n    s = max(Counter(w).values())\n    a = n - s\n    while s < n:\n        a += 1\n        s *= 2\n    print(a)", "from collections import Counter\n\ndef solve():\n    n = int(input())\n    freq = max(Counter(input().split()).values())\n    left = n - freq\n    ans = 0\n    while left:\n        ans += 1 + min(left, freq)\n        left = left - min(left, freq)\n        freq = 2 * freq\n    print(ans)\nwhile True:\n    try:\n        test = int(input())\n    except EOFError:\n        break\n    for i in range(test):\n        solve()", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    m = max(Counter(input().split()).values())\n    ans = n - m\n    while m < n:\n        ans += 1\n        m *= 2\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    w = input().split()\n    s = max(Counter(w).values())\n    a = n - s\n    while s < n:\n        a += 1\n        s *= 2\n    print(a)", "from collections import Counter\nfor t in range(int(input())):\n    n = int(input())\n    m = max(Counter(input().split()).values())\n    c = n - m\n    while m < n:\n        c += 1\n        m *= 2\n    print(c)", "import sys\nfrom collections import Counter\ninp = sys.stdin.readline()\ntest = int(inp.strip('\\n'))\nresult = ''\nfor i in range(test):\n    inp = sys.stdin.readline()\n    n = int(inp.strip('\\n'))\n    inp = sys.stdin.readline()\n    l = list(map(int, inp.strip('\\n').split()))\n    counted = Counter(l)\n    steps = 0\n    high = max(counted.values())\n    while True:\n        if high == n:\n            break\n        steps += 1\n        if high <= n // 2:\n            steps += high\n            high <<= 1\n        else:\n            steps += n - high\n            high = n\n    sys.stdout.write(str(steps) + '\\n')", "from collections import Counter\n\ndef calculate(arr):\n    (elem, count) = Counter(arr).most_common(1)[0]\n    swaps = len(arr) - count\n    copies = 0\n    while True:\n        if count >= len(arr):\n            print(swaps + copies)\n            return\n        count *= 2\n        copies += 1\ncases = int(input())\nfor i in range(cases):\n    input()\n    calculate(input().split(' '))", "t = int(input())\nres = []\nfor _ in range(t):\n    input()\n    a = [int(x) for x in input().split(' ')]\n    d = {}\n    for v in a:\n        if v in d:\n            d[v] += 1\n        else:\n            d[v] = 1\n    mx = float('-inf')\n    for k in d:\n        mx = max(mx, d[k])\n    (needed, ans) = (len(a) - mx, 0)\n    while needed:\n        tf = min(mx, needed)\n        ans += tf + 1\n        mx += tf\n        needed -= tf\n    res.append(ans)\nfor i in range(t):\n    print(res[i])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    duplicates = {}\n    a = input().split()\n    for j in range(n):\n        if a[j] not in duplicates:\n            duplicates[a[j]] = 1\n        else:\n            duplicates[a[j]] += 1\n    count = 0\n    if len(duplicates) > 1:\n        mx = max(duplicates.values())\n        while mx * 2 < n:\n            count += 1 + mx\n            mx *= 2\n        count += n - mx + 1\n    print(int(count))", "x = int(input())\nfrom collections import Counter\nfor i in range(x):\n    a = int(input().strip())\n    b = max(Counter(map(int, input().split())).values())\n    sum1 = a - b\n    while a > b:\n        b *= 2\n        sum1 += 1\n    print(sum1)", "from collections import Counter\nfor i in range(int(input())):\n    a = int(input())\n    b = max(Counter(input().split()).values())\n    sum1 = a - b\n    while a > b:\n        sum1 += 1\n        b *= 2\n    print(sum1)", "from collections import *\nfor i in range(int(input())):\n    a = int(input())\n    b = max(Counter(input().split()).values())\n    sum1 = a - b\n    while a > b:\n        sum1 += 1\n        b *= 2\n    print(sum1)", "def main():\n    n = int(input())\n    array = [s for s in input().split(' ')]\n    freq = {}\n    for x in array:\n        if x in freq:\n            freq[x] += 1\n        else:\n            freq[x] = 1\n    target = max(freq, key=freq.get)\n    target_freq = freq[target]\n    operations = 0\n    remaining_count = len(array) - target_freq\n    while target_freq < len(array):\n        swapped = min(target_freq, remaining_count)\n        target_freq += swapped\n        remaining_count -= swapped\n        operations += swapped + 1\n    return operations\nT = int(input())\nfor t in range(1, T + 1):\n    print(main())", "from collections import Counter\nimport math\n\ndef fun(ans):\n    l = len(ans)\n    if l == 1:\n        return 0\n    d = Counter(ans)\n    m = 0\n    mc = -1\n    for i in d:\n        if d[i] > m:\n            m = d[i]\n    x = l - m\n    c = x\n    while x > 0:\n        x -= m\n        m *= 2\n        c += 1\n    return c\nn = int(input())\nfor _ in range(n):\n    _ = input()\n    arr = input().split()\n    print(fun(arr))", "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = dict()\n    for x in arr:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    mx = 0\n    for x in arr:\n        if d[x] > mx:\n            mx = d[x]\n    ans = 0\n    while True:\n        if mx < n:\n            if mx + mx <= n:\n                ans += mx\n                mx = mx + mx\n            else:\n                ans += n - mx\n                mx = n\n            ans += 1\n        else:\n            break\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "T = int(input())\nfor j in range(T):\n    tmp1 = input()\n    goal_array = list(map(int, input().split(' ')))\n    goal_array.sort()\n    elements = len(goal_array)\n    tmp = 1\n    max_answer = 1\n    for i in range(1, len(goal_array)):\n        if goal_array[i] == goal_array[i - 1]:\n            tmp = tmp + 1\n        else:\n            if tmp > max_answer:\n                max_answer = tmp\n            tmp = 1\n    if tmp > max_answer:\n        max_answer = tmp\n    extra_number = max_answer\n    for k in range(100):\n        if extra_number >= elements:\n            print(k + elements - max_answer)\n            break\n        else:\n            extra_number = extra_number * 2", "import math\nt = int(input())\nfor xx in range(t):\n    n = int(input())\n    b = input().split()\n    a = [int(j) for j in b]\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    mz = 0\n    for (i, j) in d.items():\n        if j > mz:\n            mz = j\n    c = 0\n    while mz < n:\n        c += 1 + min(mz, n - mz)\n        mz *= 2\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    q = {}\n    for i in a:\n        q[i] = q.get(i, 0) + 1\n    w = max(q.values())\n    ans = n - w\n    while w < n:\n        ans += 1\n        w *= 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dict = {}\n    for i in a:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    p = max(dict.values())\n    t = n - p\n    count = 0\n    while t > 0:\n        if t >= p:\n            t -= p\n            count += p + 1\n        else:\n            count += t + 1\n            t = 0\n            break\n        p *= 2\n    print(count)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    d = defaultdict(int)\n    for a in map(int, input().split()):\n        d[a] += 1\n    m = max(d.values())\n    c = n - m\n    while m < n:\n        c += 1\n        m <<= 1\n    print(c)", "def solve(n, l):\n    if n == 1:\n        print(0)\n    else:\n        d = {}\n        ma = 0\n        for i in l:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n            ma = max(ma, d[i])\n        c = 0\n        n -= ma\n        if n == 0:\n            print(0)\n        else:\n            while n - ma >= 0:\n                n -= ma\n                c += ma + 1\n                ma = 2 * ma\n            if n > 0:\n                c += n + 1\n            print(c)\nt = int(input())\nfor test in range(t):\n    num = int(input())\n    lst = list(map(int, input().split()))\n    solve(num, lst)", "import sys\nimport math\nfrom sys import stdin, stdout\n\ndef get_ints_in_variables():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_int():\n    return int(input())\n\ndef get_ints_in_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_of_list(n):\n    return [list(map(int, sys.stdin.readline().strip().split())) for _ in range(n)]\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef main():\n    for t in range(get_int()):\n        n = int(input())\n        arr = get_ints_in_list()\n        mp = {}\n        for i in range(0, n):\n            if arr[i] not in mp:\n                mp[arr[i]] = 1\n            else:\n                mp[arr[i]] += 1\n        mx = 0\n        for (key, val) in mp.items():\n            if val > mx:\n                mx = val\n        change = n - mx\n        if change == 0:\n            print(0)\n        else:\n            res = 0\n            while change != 0 and mx != n:\n                res += 1\n                tmp = mx\n                res += min(change, tmp)\n                change -= min(change, tmp)\n                mx += tmp\n            print(res)\nmain()", "import math\nt = int(input())\nres = []\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    (m, j) = (0, 0)\n    for x in a:\n        d[x] = d[x] + 1 if d.get(x) else 1\n        if d[x] > m:\n            (m, j) = (d[x], x)\n    r = 0\n    raz = len(a) - m\n    r += raz\n    r += int(math.ceil(math.log2(1 + raz / m)))\n    res.append(r)\nfor el in res:\n    print(el)", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = len(set(a))\n    a.sort()\n    x = 1\n    y = 1\n    for r in range(1, n):\n        if a[r - 1] == a[r]:\n            x += 1\n        else:\n            if x > y:\n                y = x\n            x = 1\n    if x > y:\n        y = x\n    ans = 0\n    while y < n:\n        if 2 * y < n:\n            ans += y + 1\n            y *= 2\n        else:\n            ans += n - y + 1\n            y = n\n    print(ans)", "import sys\nimport math\nimport itertools\nmod = 998244353\n\ndef ri():\n    return int(input())\n\ndef rl():\n    return list(map(int, input().split()))\n\ndef rls():\n    return list(map(str, input().split()))\n\ndef rm():\n    return map(int, input().split())\n\ndef isPowerOfTwo(x):\n    return x and (not x & x - 1)\n\ndef decimalToBinary(n):\n    return bin(n).replace('0b', '')\n\ndef nextPowerOf2(n):\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n\n\ndef highestPowerof2(x):\n    x |= x >> 1\n    x |= x >> 2\n    x |= x >> 4\n    x |= x >> 8\n    x |= x >> 16\n    return x ^ x >> 1\nfor _ in range(ri()):\n    n = ri()\n    a = rl()\n    if n == 1:\n        print(0)\n        continue\n    d = {}\n    for i in a:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    m = max(d.values())\n    i = 2 * m\n    ans = 1\n    if a.count(a[0]) == n:\n        ans = 0\n    while i < n:\n        ans += 1\n        i = i * 2\n    print(ans + n - m)", "from sys import stdin, stdout\nfrom collections import Counter, defaultdict\ninput = stdin.readline\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split()))\n    if min(arr) == max(arr):\n        print(0)\n        continue\n    d = Counter(arr)\n    maxi = 0\n    for key in d:\n        maxi = max(maxi, d[key])\n    k = 2 * maxi\n    cnt1 = 0\n    cnt2 = 0\n    while k < n:\n        cnt1 += 1\n        cnt2 += k // 2\n        k = k * 2\n    if k >= n:\n        cnt2 += n - k // 2 + 1\n    print(cnt1 + cnt2)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    min1 = 0\n    s = 0\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in d:\n        if d[i] > min1:\n            min1 = d[i]\n            m = i\n    s = n - d[m]\n    c2 = s\n    while d[m] < n:\n        s += 1\n        d[m] *= 2\n    print(s)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    dict = {}\n    (count, itm) = (0, '')\n    for item in a:\n        dict[item] = dict.get(item, 0) + 1\n    count = max(dict.values())\n    ans = n - count\n    while count < n:\n        ans += 1\n        count *= 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    q = {}\n    for i in a:\n        q[i] = q.get(i, 0) + 1\n    w = max(q.values())\n    ans = n - w\n    while w < n:\n        ans += 1\n        w *= 2\n    print(ans)", "N = int(input())\nfor _ in range(N):\n    n = int(input())\n    list_num = input().split(' ')\n    d = dict()\n    for num in list_num:\n        if num in d:\n            d[num] = d[num] + 1\n        else:\n            d[num] = 1\n    max_num = max(d.values())\n    now = max_num\n    ans = 0\n    copy = 0\n    while now < n:\n        if copy > 0:\n            ans += 1\n            copy -= 1\n            now += 1\n        else:\n            ans += 1\n            copy = now\n    print(ans)", "from collections import Counter\ntestcases = input()\n\ndef solve():\n    n = int(input().strip())\n    c = Counter(map(int, input().strip().split(' ')))\n    max_rep = max(c.values())\n    swap_op = n - max_rep\n    copy_op = 0\n    ans = swap_op\n    while swap_op > 0:\n        swap_op -= max_rep\n        max_rep *= 2\n        ans += 1\n    return ans\nfor caseNr in range(1, int(testcases) + 1):\n    print('%s' % solve())", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n        continue\n    C = Counter(A)\n    maxnum = max(C.values())\n    if maxnum == n:\n        print(0)\n        continue\n    ope = n - maxnum\n    while maxnum < n:\n        ope += 1\n        maxnum *= 2\n    print(ope)", "def func(n, k):\n    if n == k:\n        return 0\n    i = n - k\n    if i <= k:\n        return 1 + i\n    else:\n        return 1 + k + func(n, 2 * k)\n\ndef mf(a):\n    p = len(a)\n    d = {}\n    for i in a:\n        d[i] = 0\n    for i in a:\n        d[i] += 1\n    max = 0\n    for i in a:\n        if d[i] > max:\n            max = d[i]\n    return max\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = input().split(' ')\n    l = [int(i) for i in l]\n    k = mf(l)\n    out = func(n, k)\n    print(out)", "x = int(input())\nfrom collections import Counter\nfor i in range(x):\n    a = int(input().strip())\n    b = max(Counter(list(map(int, input().split()))).values())\n    sum1 = a - b\n    while a > b:\n        b *= 2\n        sum1 += 1\n    print(sum1)", "from collections import Counter\nfor i in range(int(input())):\n    a = int(input())\n    b = max(Counter(map(int, input().split())).values())\n    sum1 = a - b\n    while a > b:\n        sum1 += 1\n        b *= 2\n    print(sum1)", "from collections import *\nfor i in range(int(input())):\n    a = int(input())\n    b = max(Counter(input().split()).values())\n    s = a - b\n    while a > b:\n        s += 1\n        b *= 2\n    print(s)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(set(a)) == 1:\n        print(0)\n        continue\n    d = dict()\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    s = 0\n    c = max(d.values())\n    k = 0\n    while c < n:\n        k += 1\n        c = c * 2\n    print(n - max(d.values()) + k)", "t = int(input())\nfor qwer in range(t):\n    n = int(input())\n    sp = list(map(int, input().split()))\n    d = dict()\n    m = 0\n    for el in sp:\n        if el not in d:\n            d[el] = 1\n        else:\n            d[el] += 1\n    m = max(d.values())\n    ans = 0\n    r = n - m\n    colvo = 0\n    sm = 0\n    k = 1\n    while sm < r:\n        colvo += 1\n        k *= 2\n        sm = m * (k - 1)\n    print(colvo + r)", "from collections import Counter\nt = int(input())\nfor qwer in range(t):\n    n = int(input())\n    sp = list(map(int, input().split()))\n    m = 0\n    d = Counter(sp)\n    m = max(d.values())\n    ans = 0\n    r = n - m\n    colvo = 0\n    sm = 0\n    k = 1\n    while sm < r:\n        colvo += 1\n        k *= 2\n        sm = m * (k - 1)\n    print(colvo + r)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = {x: 0 for x in a}\n    for item in a:\n        count[item] += 1\n    count = list(count.values())\n    chose = max(count)\n    others = sum(count) - chose\n    operations = 0\n    while others > 0:\n        operations += 1\n        if chose > others:\n            operations += others\n            break\n        else:\n            others -= chose\n            operations += chose\n            chose *= 2\n    print(operations)", "from collections import Counter\nfor i in range(int(input())):\n    n = int(input())\n    t_max = max(Counter(input().split()).values())\n    cnt = 0\n    probe = t_max\n    while probe < n:\n        probe *= 2\n        cnt += 1\n    res = n - t_max + cnt\n    print(res)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    L = input().split()\n    count = {}\n    for i in L:\n        try:\n            count[i] += 1\n        except:\n            count[i] = 1\n    m = max(list(count.values()))\n    print(int(n - m + math.ceil(math.log(n / m, 2))))", "from collections import Counter\nt = int(input())\nresult = []\nfor _ in range(t):\n    n = int(input())\n    array = input().split()\n    currentMax = max(Counter(array).values())\n    currentElems = currentMax\n    count = 0\n    while currentElems < n:\n        diff = min(n - currentElems, currentElems)\n        count += 1 + diff\n        currentElems += diff\n    ans = count\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    arr1 = list(map(int, input().split()))\n    arr1.sort()\n    c = arr1[0]\n    cc = 1\n    mx = 1\n    for i in range(1, n):\n        if arr1[i] == c:\n            cc += 1\n        else:\n            c = arr1[i]\n            if mx < cc:\n                mx = cc\n            cc = 1\n    if mx < cc:\n        mx = cc\n    cc = 0\n    if mx == n:\n        print(0)\n    else:\n        z = mx\n        while mx < n:\n            cc += 1\n            mx *= 2\n        print(n - z + cc)", "from collections import Counter\nfor t in range(int(input())):\n    n = int(input())\n    c = Counter(input().split())\n    m = max(c.values())\n    cnt = n - m\n    while m < n:\n        m = 2 * m\n        cnt += 1\n    print(cnt)", "def mostFrequent(arr, n):\n    arr.sort()\n    max_count = 1\n    res = arr[0]\n    curr_count = 1\n    for i in range(1, n):\n        if arr[i] == arr[i - 1]:\n            curr_count += 1\n        else:\n            curr_count = 1\n        if curr_count > max_count:\n            max_count = curr_count\n            res = arr[i - 1]\n    return max_count\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    c = mostFrequent(arr, n)\n    step = 0\n    while c < n:\n        d = min(c, n - c)\n        step += 1 + d\n        c += d\n    print(step)", "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    d = dict()\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    now = 0\n    for i in d:\n        now = max(now, d[i])\n    r = 0\n    while now < n:\n        w = min(now, n - now)\n        now += w\n        r += 1 + w\n    print(r)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()"]