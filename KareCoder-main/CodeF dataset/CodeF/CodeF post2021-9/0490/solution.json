["from heapq import *\nt = int(input())\nfor _ in range(t):\n    N = int(input())\n    tea = list(map(int, input().split()))\n    tasters = list(map(int, input().split()))\n    ret = []\n    pre = []\n    total = 0\n    for i in range(N):\n        count = 0\n        while pre and pre[0] <= tasters[i] + total:\n            count += heappop(pre) - total\n        count += len(pre) * tasters[i]\n        if tea[i] < tasters[i]:\n            count += tea[i]\n        else:\n            count += tasters[i]\n            heappush(pre, tea[i] + total)\n        total += tasters[i]\n        ret.append(count)\n    print(*ret)", "from heapq import *\nt = int(input())\nfor _ in range(t):\n    N = int(input())\n    tea = list(map(int, input().split()))\n    tasters = list(map(int, input().split()))\n    ret = []\n    pre = []\n    total = 0\n    for i in range(N):\n        count = 0\n        while pre and pre[0] <= tasters[i] + total:\n            count += heappop(pre) - total\n        count += len(pre) * tasters[i]\n        if tea[i] < tasters[i]:\n            count += tea[i]\n        else:\n            count += tasters[i]\n            heappush(pre, tea[i] + total)\n        total += tasters[i]\n        ret.append(count)\n    print(*ret)", "import sys\nfrom bisect import bisect_left\nfrom collections import defaultdict\nfrom itertools import accumulate\nDEBUG = False\n\ndef solution():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    b_cum = [0] + list(accumulate(b))\n    last_cup_count = [0] * (n + 1)\n    final_drink = [0] * (n + 1)\n    for idx in range(n):\n        expert = bisect_left(b_cum, a[idx] + b_cum[idx]) - 1\n        if expert >= idx:\n            last_cup_count[expert] += 1\n            final_drink[expert] += a[idx] - (b_cum[expert] - b_cum[idx])\n    full_not_last_cups = [idx + 1 - empty for (idx, empty) in enumerate(accumulate(last_cup_count))]\n    res = [full_not_last_cups[idx] * b[idx] + final_drink[idx] for idx in range(n)]\n    return res\nif DEBUG:\n    sys.stdin = open('C-test.txt')\nt = int(input())\nans = []\nif DEBUG:\n    with open('C-ans.txt') as f:\n        for _ in range(t):\n            ans.append(list(map(int, f.readline().strip().split())))\nfor idx in range(t):\n    res = solution()\n    print(*res)\n    if DEBUG:\n        assert res == ans[idx]", "from bisect import bisect_left, bisect_right\nfrom itertools import accumulate\nimport sys\ninput = lambda : sys.stdin.readline().strip()\nmod = 7 + 10 ** 9\n\ndef solve():\n    n = int(input())\n    tea = [int(i) for i in input().split()]\n    test = [int(i) for i in input().split()]\n    dptot = [0] * (n + 2)\n    rem = [0] * (n + 1)\n    ans = [0] * (n + 1)\n    dptest = [0] + list(accumulate(test))\n    for i in range(n):\n        idx = bisect_right(dptest, tea[i] + dptest[i]) - 1\n        if idx > n + 1:\n            idx -= 1\n        dptot[i + 1] += 1\n        dptot[idx + 1] -= 1\n        if idx < n:\n            rem[idx + 1] += tea[i] - (dptest[idx] - dptest[i])\n    s = list(accumulate(dptot))\n    for i in range(1, n + 1):\n        ans[i - 1] = s[i] * test[i - 1] + rem[i]\n    print(*ans[:-1])\nfor i in range(int(input())):\n    solve()", "import os\nimport math\nimport collections\nimport bisect\nimport functools\nimport itertools\nimport heapq\n\ndef solve1(a, b, n):\n    ans = [0] * n\n    for i in range(n):\n        for d in range(n - i):\n            j = i + d\n            v = min(a[i], b[j])\n            ans[j] += v\n            a[i] -= v\n    return ans\n\ndef solve(a, b, n):\n    count = [0] * (n + 1)\n    pre = [0] * (n + 1)\n    for i in range(n):\n        pre[i + 1] = pre[i] + b[i]\n    subtract = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if pre[n] - pre[i - 1] <= a[i - 1]:\n            count[i - 1] += 1\n            count[n] -= 1\n        else:\n            j = bisect.bisect_left(pre, pre[i - 1] + a[i - 1])\n            count[i - 1] += 1\n            count[j] -= 1\n            subtract[j - 1] += pre[j] - pre[i - 1] - a[i - 1]\n    for i in range(1, n):\n        count[i] += count[i - 1]\n    ans = [0] * n\n    for i in range(n):\n        ans[i] = count[i] * b[i] - subtract[i]\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    res = solve(a, b, n)\n    print(' '.join(map(str, res)))", "from bisect import bisect_left\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    pre = [0] * (n + 1)\n    for i in range(n):\n        pre[i + 1] = pre[i] + b[i]\n    diff = [0] * (n + 2)\n    left = [0] * (n + 2)\n    for i in range(1, n + 1):\n        x = a[i - 1] + pre[i - 1]\n        id = bisect_left(pre, x)\n        left[id] += a[i - 1] - (pre[id - 1] - pre[i - 1])\n        diff[i] += 1\n        diff[id] -= 1\n    for i in range(1, n + 1):\n        diff[i] += diff[i - 1]\n    ans = [0] * (n + 1)\n    for i in range(1, n + 1):\n        ans[i] = diff[i] * b[i - 1] + left[i]\n    print(*ans[1:])\nt = int(input())\nfor _ in range(t):\n    solve()", "from bisect import *\nR = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n,) = R()\n    m = n + 1\n    a = R()\n    b = R()\n    c = [0]\n    d = [0] * m\n    e = [0] * m\n    i = 0\n    for x in b:\n        c += (c[-1] + x,)\n    for (x, y) in zip(a, c):\n        x += y\n        j = bisect(c, x) - 1\n        d[i] += 1\n        d[j] -= 1\n        e[j] += x - c[j]\n        i += 1\n    for i in range(n):\n        d[i + 1] += d[i]\n    print(*(x * y + z for (x, y, z) in zip(b, d, e)))", "from bisect import *\nR = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (n,) = R()\n    m = n + 1\n    a = R()\n    b = R()\n    c = [0]\n    d = [0] * m\n    e = [0] * m\n    i = 0\n    for x in b:\n        c += (c[-1] + x,)\n    for (x, y) in zip(a, c):\n        x += y\n        j = bisect(c, x) - 1\n        d[i] += 1\n        d[j] -= 1\n        e[j] += x - c[j]\n        i += 1\n    for i in range(n):\n        d[i + 1] += d[i]\n    print(*(x * y + z for (x, y, z) in zip(b, d, e)))", "def helper(a, b):\n    from collections import Counter\n    h = {i: 0 for i in range(len(b))}\n    import bisect\n    pref = []\n    curr = 0\n    for i in range(len(b)):\n        curr += b[i]\n        pref.append(curr)\n    curr = 0\n    lst = [0 for i in range(len(b) + 1)]\n    og = a[:]\n    for i in range(len(a)):\n        a[i] += curr\n        idx = bisect.bisect_right(pref, a[i])\n        if 1 <= idx < len(pref) and a[i] - pref[idx - 1] >= 1 and (idx - 1 > i - 1):\n            h[idx] += a[i] - pref[idx - 1]\n        lst[i] += 1\n        lst[idx] -= 1\n        if i == idx:\n            h[i] += og[i]\n        curr += b[i]\n    for i in range(1, len(lst)):\n        if i < len(b):\n            lst[i] += lst[i - 1]\n        else:\n            lst[i] += lst[i - 1]\n    ans = []\n    for i in range(len(lst) - 1):\n        ans.append(b[i] * lst[i] + h[i])\n    return ' '.join(list(map(str, ans)))\nfor i in range(int(input())):\n    n = int(input())\n    (a, b) = (list(map(int, input().split())), list(map(int, input().split())))\n    print(helper(a, b))", "import bisect\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    sum = [0] * (n + 1)\n    for i in range(n):\n        sum[i + 1] = sum[i] + b[i]\n    cnt = [0] * (n + 1)\n    add = [0] * (n + 1)\n    for i in range(n):\n        j = bisect.bisect_right(sum, a[i] + sum[i]) - 1\n        cnt[i] += 1\n        cnt[j] -= 1\n        add[j] += a[i] - sum[j] + sum[i]\n    cum_cnt = 0\n    for i in range(n):\n        cum_cnt += cnt[i]\n        print(cum_cnt * b[i] + add[i], end=' ')\n    print()", "import bisect\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    tea = list(map(int, input().split(' ')))\n    tasters = list(map(int, input().split(' ')))\n    diff = [0] * (n + 1)\n    extra = [0] * (n + 1)\n    psum = [0] * n\n    psum[0] = tasters[0]\n    prefixSumLt = 0\n    prefixSumRt = 0\n    for i in range(1, n):\n        psum[i] = psum[i - 1] + tasters[i]\n    for i in range(n):\n        if i > 0:\n            prefixSumLt = psum[i - 1]\n        j = bisect.bisect_right(psum, tea[i] + prefixSumLt)\n        if j > 0:\n            prefixSumRt = psum[j - 1]\n        diff[j] -= 1\n        diff[i] += 1\n        extra[j] += tea[i] - (prefixSumRt - prefixSumLt)\n    for i in range(1, n):\n        diff[i] += diff[i - 1]\n    for i in range(0, n):\n        print(extra[i] + diff[i] * tasters[i], end=' ')\n    print()", "from bisect import bisect_right\ntc = int(input())\nfor case in range(tc):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    if n == 1:\n        print(min(a[0], b[0]))\n    else:\n        pref = [0 for i in range(n)]\n        pref[0] = b[0]\n        for i in range(1, n):\n            pref[i] = pref[i - 1] + b[i]\n        ends = [0 for i in range(n)]\n        resultados = [0 for i in range(n)]\n        sumar = 0\n        for i in range(n):\n            pos = bisect_right(pref, a[i] + sumar)\n            ends[i] = pos\n            if pos < n and pos > 0:\n                resultados[pos] += a[i] + sumar - pref[pos - 1]\n            elif pos == 0:\n                resultados[pos] += min(a[i], b[i])\n            sumar = pref[i]\n        part_sum = [0 for i in range(n + 1)]\n        for i in range(n):\n            part_sum[i] -= 1\n            part_sum[ends[i]] += 1\n        contador = part_sum[-1]\n        for i in range(n - 1, -1, -1):\n            resultados[i] += b[i] * contador\n            contador += part_sum[i]\n        print(*resultados)", "import os\nimport math\nimport collections\nimport bisect\nimport functools\nimport itertools\nimport heapq\n\ndef solve1(a, b, n):\n    ans = [0] * n\n    for i in range(n):\n        for d in range(n - i):\n            j = i + d\n            v = min(a[i], b[j])\n            ans[j] += v\n            a[i] -= v\n    return ans\n\ndef solve(a, b, n):\n    count = [0] * (n + 1)\n    segment = []\n    pre = [0] * (n + 1)\n    for i in range(n):\n        pre[i + 1] = pre[i] + b[i]\n    subtract = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if pre[n] - pre[i - 1] <= a[i - 1]:\n            segment.append([i - 1, n - 1])\n        else:\n            j = bisect.bisect_left(pre, pre[i - 1] + a[i - 1])\n            segment.append([i - 1, j - 1])\n            subtract[j - 1] += pre[j] - pre[i - 1] - a[i - 1]\n    for (l, r) in segment:\n        count[l] += 1\n        count[r + 1] -= 1\n    for i in range(1, n):\n        count[i] += count[i - 1]\n    ans = [0] * n\n    for i in range(n):\n        ans[i] = count[i] * b[i] - subtract[i]\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    res = solve(a, b, n)\n    print(' '.join(map(str, res)))", "import bisect\nres = []\nk = int(input())\nwhile k > 0:\n    cur_res = []\n    _ = input()\n    x = input().split(' ')\n    tea = []\n    for num in x:\n        tea.append(int(num))\n    x = input().split(' ')\n    taster = []\n    for num in x:\n        taster.append(int(num))\n    prefix = [0]\n    segments = []\n    inc = [0] * (len(taster) + 10)\n    c = [0] * (len(taster) + 10)\n    arr = [0] * (len(taster) + 10)\n    for i in range(len(taster)):\n        prefix.append(prefix[-1] + taster[i])\n    for i in range(len(tea)):\n        target = tea[i] + prefix[i]\n        index = min(len(prefix) - 1, bisect.bisect_left(prefix, target, lo=i + 1))\n        if target < prefix[index]:\n            index -= 1\n            if index < 0:\n                c[i + 1] += tea[i]\n                continue\n        segments.append((i + 1, index))\n        c[index + 1] += target - prefix[index]\n    for (left, right) in segments:\n        inc[left] += 1\n        inc[right + 1] -= 1\n    cur = 0\n    for i in range(1, len(arr)):\n        cur += inc[i]\n        arr[i] += cur\n    s = ''\n    for i in range(1, len(taster) + 1):\n        arr[i] = arr[i] * taster[i - 1] + c[i]\n        s += str(arr[i])\n        if i < len(taster):\n            s += ' '\n    res.append(s)\n    k -= 1\nfor x in res:\n    print(x)", "import sys\ninput = sys.stdin.readline\n\ndef solve(n, a, b):\n    pref = []\n    cur = 0\n    for x in b:\n        cur += x\n        pref.append(cur)\n    pref.append(0)\n    res = [0] * n\n    diff = [0] * n\n    for i in range(n):\n        y = a[i] + pref[i - 1]\n        (l, r) = (i, n - 1)\n        temp = -1\n        left = y - pref[i - 1]\n        while l <= r:\n            m = (l + r) // 2\n            if pref[m] <= y:\n                temp = m\n                left = y - pref[m]\n                l = m + 1\n            else:\n                r = m - 1\n        if temp == -1:\n            res[i] += left\n        elif temp == n - 1:\n            diff[i] += 1\n        else:\n            diff[i] += 1\n            diff[temp + 1] -= 1\n            res[temp + 1] += left\n    cur = 0\n    for i in range(n):\n        cur += diff[i]\n        res[i] += cur * b[i]\n    print(*res)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    solve(n, a, b)", "import sys\ninput = sys.stdin.readline\n\ndef sol(n, a, b):\n    b = b[::-1]\n    a = a[::-1]\n    pre = [0]\n    res = [0] * n\n    plus = [0] * (n + 2)\n    for i in b:\n        pre.append(pre[-1] + i)\n    for i in range(n):\n        l = 0\n        r = i + 1\n        while l <= r:\n            mid = l + r >> 1\n            if pre[i + 1] - pre[mid] <= a[i]:\n                r = mid - 1\n            else:\n                l = mid + 1\n        plus[i + 1] -= 1\n        plus[l] += 1\n        if l:\n            res[l - 1] += a[i] - (pre[i + 1] - pre[l])\n    pre2 = [0]\n    for i in plus:\n        pre2.append(pre2[-1] + i)\n    for i in range(n):\n        res[i] += b[i] * pre2[i + 1]\n    for i in res[::-1]:\n        print(i, end=' ')\n    print()\nt = int(input())\nfor case in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    sol(n, a, b)", "class solution(object):\n\n    def solve(n):\n        a = input().split()\n        for i in range(n):\n            a[i] = int(a[i])\n        b = input().split()\n        for i in range(n):\n            b[i] = int(b[i])\n        Sum = [b[i] for i in range(n)]\n        for i in range(1, n):\n            Sum[i] = Sum[i - 1] + b[i]\n        ans = [0] * n\n        tag = [0] * n\n        lpos = 0\n        rpos = 0\n        mid = 0\n        Base = 0\n        res = 0\n        for i in range(n):\n            lpos = i\n            rpos = n - 1\n            mid = i\n            res = 0\n            pos = i - 1\n            while lpos <= rpos:\n                mid = (lpos + rpos) // 2\n                if Sum[mid] - Base < a[i]:\n                    lpos = mid + 1\n                    pos = mid\n                else:\n                    rpos = mid - 1\n            if pos >= 0:\n                res = a[i] - (Sum[pos] - Base)\n            else:\n                res = a[i]\n            if pos < n - 1:\n                ans[pos + 1] += res\n                tag[pos + 1] += 1\n            Base = Sum[i]\n        nw = 0\n        for i in range(n):\n            nw += 1 - tag[i]\n            ans[i] += nw * b[i]\n        for i in range(n):\n            print(ans[i], end=' ')\n        print('')\n        return\nT = int(input())\nfor t in range(T):\n    solution.solve(int(input()))"]