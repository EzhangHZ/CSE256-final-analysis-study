["for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [input() for row in range(n)]\n\n    def ind(i, j):\n        return (i - 1) * m + j\n\n    def cnt(i, j):\n        return [a[i][j], a[i][j + 1], a[i + 1][j], a[i + 1][j + 1]].count('1')\n    flag = False\n    for i in range(n - 1):\n        if flag:\n            break\n        for j in range(m - 1):\n            if cnt(i, j) == 3:\n                flag = True\n                break\n    print('NO' if flag else 'YES')", "import sys\nfrom math import *\ninf = 10 ** 9\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(input())\n\n    def m1(i, j):\n        if j < m - 1 and a[i][j + 1] == '1' and (i < n - 1) and (a[i + 1][j] == '1') and (a[i + 1][j + 1] != '1') or (j < m - 1 and a[i][j + 1] == '1' and (i > 0) and (a[i - 1][j] == '1') and (a[i - 1][j + 1] != '1')) or (j > 0 and a[i][j - 1] == '1' and (i < n - 1) and (a[i + 1][j] == '1') and (a[i + 1][j - 1] != '1')) or (j > 0 and a[i][j - 1] == '1' and (i > 0) and (a[i - 1][j] == '1') and (a[i - 1][j - 1] != '1')):\n            return True\n        return False\n    f = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '1' and m1(i, j):\n                f = 1\n                print('NO')\n                break\n        if f:\n            break\n    else:\n        print('YES')", "def check(s1, s2):\n    f = True\n    cnt = 0\n    h = True\n    for i in range(len(s1)):\n        if s1[i] == s2[i] or h:\n            h = True\n            f = False\n            cnt += 1\n            if s1[i] == s2[i] and s1[i] == '1':\n                h = False\n                if i - 1 >= 0:\n                    if s1[i - 1] != s2[i - 1]:\n                        cnt = -100\n    if cnt == len(s1):\n        f = True\n    return f\n\ndef rotate(s):\n    return [[s[j][i] for j in range(len(s))] for i in range(len(s[0]) - 1, -1, -1)]\nimport sys\ninput = sys.stdin.readline\nprint = sys.stdout.write\n\ndef main():\n    for _ in range(int(input())):\n        f = True\n        (x, y) = map(int, input().split())\n        s = [list(str(input())[:-1]) for _ in range(x)]\n        ss = rotate(s)\n        for i in range(x - 1):\n            f = check(s[i], s[i + 1])\n            if not f:\n                break\n        for i in range(y - 1):\n            if not f:\n                break\n            f = check(ss[i], ss[i + 1])\n        if f:\n            print(f'YES\\n')\n        else:\n            print(f'NO\\n')\nmain()", "case = int(input())\nfor i in range(case):\n    tables = input().split(' ')\n    n = int(tables[0])\n    m = int(tables[1])\n    lines = []\n    for j in range(n):\n        line = input()\n        lines.append(line)\n    if n == 1 or m == 1:\n        print('YES')\n        continue\n    for j in range(n - 1):\n        line1 = lines[j]\n        line2 = lines[j + 1]\n        printed_flag = False\n        state = 0\n        for k in range(m):\n            temp_state = 0\n            same_is = line1[k] == line2[k]\n            if not same_is:\n                temp_state = 2\n            elif line1[k] == '1':\n                temp_state = 1\n            if temp_state + state == 3:\n                print('NO')\n                printed_flag = True\n                break\n            state = temp_state\n        if printed_flag:\n            break\n    if not printed_flag:\n        print('YES')", "def solve():\n    (N, M) = map(int, input().split())\n    arr = []\n    for i in range(N):\n        a1 = input()\n        arr.append(a1)\n    i = 0\n    while i < N - 1:\n        j = 0\n        while j < M - 1:\n            a1 = arr[i][j]\n            a2 = arr[i][j + 1]\n            a3 = arr[i + 1][j]\n            a4 = arr[i + 1][j + 1]\n            if a1 == '1' and a2 == '0' and (a3 == '1') and (a4 == '1'):\n                return 'NO'\n            elif a1 == '0' and a2 == '1' and (a3 == '1') and (a4 == '1'):\n                return 'NO'\n            elif a1 == '1' and a2 == '1' and (a3 == '1') and (a4 == '0'):\n                return 'NO'\n            elif a1 == '1' and a2 == '1' and (a3 == '0') and (a4 == '1'):\n                return 'NO'\n            j += 1\n        i += 1\n    return 'YES'\nremained_test_Cases = 1\nremained_test_Cases = int(input())\nwhile remained_test_Cases > 0:\n    print(solve())\n    remained_test_Cases -= 1", "for _ in range(int(input())):\n    matrix = []\n    (m, n) = map(int, input().split())\n    for iii in range(m):\n        matrix.append(input())\n    if n == 1 or m == 1:\n        print('YES')\n    else:\n        res = True\n        k = ''\n        for i in range(m - 1):\n            for j in range(n - 1):\n                k += matrix[i][j:j + 2] + matrix[i + 1][j:j + 2]\n                if k.count('0') == 1 and k.count('1') == 3:\n                    res = False\n                    break\n                k = ''\n            else:\n                continue\n            break\n        if res == False:\n            print('NO')\n        else:\n            print('YES')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = []\n    for z in range(n):\n        s = input().rstrip()\n        a.append(s)\n    f = 0\n    for i in range(0, n):\n        for j in range(0, m):\n            if a[i][j] == '1':\n                if j >= 1:\n                    if a[i][j - 1] == '1':\n                        if i < n - 1:\n                            if a[i + 1][j - 1] != a[i + 1][j]:\n                                f = 1\n                                break\n                    elif i < n - 1:\n                        if a[i + 1][j - 1] == '1' and a[i + 1][j] == '1':\n                            f = 1\n                            break\n            elif j >= 1:\n                if a[i][j - 1] == '1':\n                    if i < n - 1:\n                        if a[i + 1][j - 1] == '1' and a[i + 1][j] == '1':\n                            f = 1\n                            break\n        if f == 1:\n            break\n    if f == 1:\n        print('NO')\n    else:\n        for j in range(1, m):\n            if a[n - 1][j] == '1':\n                if a[n - 1][j - 1] == '1':\n                    if a[n - 2][j - 1] != a[n - 2][j]:\n                        f = 1\n                        break\n        if f == 1:\n            print('NO')\n        else:\n            print('YES')", "def sum(x, y):\n    ans = ''\n    for i in range(len(x)):\n        ans += str(int(x[i]) + int(y[i]))\n    return ans\n\ndef func(x):\n    if len(x) == 1:\n        return False\n    cur = x[0]\n    for i in range(1, len(x)):\n        if x[i] != cur:\n            if x[i] == '1' and cur == '2' or (x[i] == '2' and cur == '1'):\n                return True\n            cur = x[i]\n    return False\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    for _ in range(n):\n        l.append(input())\n    for i in range(n - 1):\n        ans = sum(l[i], l[i + 1])\n        if func(ans):\n            print('NO')\n            break\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(0, t):\n    (n, m) = map(int, input().split())\n    a = []\n    for j in range(0, n):\n        s = input()\n        a.append(s)\n    flag = 0\n    for i in range(0, n):\n        for j in range(0, m):\n            if a[i][j] == '1':\n                if i + 1 < n and a[i + 1][j] == '1' and (j + 1 < m) and (a[i][j + 1] == '1') and (a[i + 1][j + 1] == '0'):\n                    flag = 1\n                if i + 1 < n and a[i + 1][j] == '1' and (j - 1 >= 0) and (a[i][j - 1] == '1') and (a[i + 1][j - 1] == '0'):\n                    flag = 1\n                if i - 1 >= 0 and a[i - 1][j] == '1' and (j + 1 < m) and (a[i][j + 1] == '1') and (a[i - 1][j + 1] == '0'):\n                    flag = 1\n                if i - 1 >= 0 and a[i - 1][j] == '1' and (j - 1 >= 0) and (a[i][j - 1] == '1') and (a[i - 1][j - 1] == '0'):\n                    flag = 1\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    g = []\n    czy = True\n    for i in range(n):\n        g.append(input())\n    for i in range(n):\n        if not czy:\n            break\n        for j in range(m):\n            if g[i][j] == '1':\n                if i != 0 and j != 0:\n                    if g[i - 1][j] == '1' and g[i][j - 1] == '1' and (g[i - 1][j - 1] == '0'):\n                        czy = False\n                        break\n                if i != 0 and j != m - 1:\n                    if g[i - 1][j] == '1' and g[i][j + 1] == '1' and (g[i - 1][j + 1] == '0'):\n                        czy = False\n                        break\n                if i != n - 1 and j != 0:\n                    if g[i + 1][j] == '1' and g[i][j - 1] == '1' and (g[i + 1][j - 1] == '0'):\n                        czy = False\n                        break\n                if i != n - 1 and j != m - 1:\n                    if g[i + 1][j] == '1' and g[i][j + 1] == '1' and (g[i + 1][j + 1] == '0'):\n                        czy = False\n                        break\n    if czy:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = []\n    for k in range(n):\n        Q = []\n        for j in input():\n            Q.append(int(j))\n        d.append(Q)\n    br = 0\n    if n == 1:\n        print('YES')\n    else:\n        for k in range(n - 1):\n            for j in range(m - 1):\n                z = d[k + 1][j] + d[k][j] + d[k + 1][j + 1] + d[k][j + 1]\n                if z == 3:\n                    print('NO')\n                    br = 1\n                if br == 1:\n                    break\n            if br == 1:\n                break\n        if br == 0:\n            print('YES')", "def solve():\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if a[i][j] + a[i + 1][j] + a[i][j + 1] + a[i + 1][j + 1] == 3:\n                return 'NO'\n    return 'YES'\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split(' '))\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input())))\n    print(solve())", "def solve():\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if a[i][j] + a[i + 1][j] + a[i][j + 1] + a[i + 1][j + 1] == 3:\n                return 'NO'\n    return 'YES'\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split(' '))\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input())))\n    print(solve())", "number_tests = int(input())\n\ndef checkResult(list_table, n_rows, m_cols):\n    if n_rows > 1 and m_cols > 1:\n        for row in range(n_rows - 1):\n            for col in range(m_cols - 1):\n                count = 0\n                if list_table[row][col] == '1':\n                    count += 1\n                if list_table[row + 1][col] == '1':\n                    count += 1\n                if list_table[row][col + 1] == '1':\n                    count += 1\n                if list_table[row + 1][col + 1] == '1':\n                    count += 1\n                if count == 3:\n                    return 'NO'\n    return 'YES'\nfor test in range(number_tests):\n    rowcol = input().split()\n    n_rows = int(rowcol[0])\n    m_cols = int(rowcol[1])\n    list_table = []\n    for row in range(n_rows):\n        list_table.append(input())\n    print(checkResult(list_table, n_rows, m_cols))", "def main():\n    t = int(input())\n    while t:\n        t -= 1\n        (n, m) = list(map(int, input().split()))\n        arr = [[0 for _ in range(m)] for _ in range(n)]\n        for i in range(n):\n            s = input()\n            for (j, c) in enumerate(s):\n                arr[i][j] = int(c)\n        if check(arr, n, m):\n            print('YES')\n        else:\n            print('NO')\n\ndef check(arr, n, m):\n    for i in range(n - 1):\n        for j in range(m - 1):\n            sum = arr[i][j] + arr[i][j + 1] + arr[i + 1][j] + arr[i + 1][j + 1]\n            if sum == 3:\n                return False\n    return True\nmain()", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    arr = []\n    for i in range(n):\n        s = input()\n        arr.append(s)\n    found = False\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if [arr[i][j], arr[i][j + 1], arr[i + 1][j + 1], arr[i + 1][j]].count('0') == 1:\n                found = True\n                break\n        if found:\n            print('NO')\n            break\n    else:\n        print('YES')", "for g in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        l += [input()]\n    f = 1\n    for x in range(n - 1):\n        for y in range(m - 1):\n            if [l[x][y], l[x + 1][y + 1], l[x][y + 1], l[x + 1][y]].count('0') == 1:\n                f = 0\n                break\n    if f:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    l = [input() for j in range(n)]\n    flag = 0\n    for j in range(n):\n        for k in range(m):\n            if l[j][k] == '1':\n                if j - 1 >= 0 and k - 1 >= 0 and (l[j - 1][k] == '1') and (l[j][k - 1] == '1') and (l[j - 1][k - 1] == '0'):\n                    print('NO')\n                    flag = -1\n                    break\n                if j - 1 >= 0 and k + 1 <= m - 1 and (l[j - 1][k] == '1') and (l[j][k + 1] == '1') and (l[j - 1][k + 1] == '0'):\n                    print('NO')\n                    flag = -1\n                    break\n                if j + 1 <= n - 1 and k + 1 <= m - 1 and (l[j + 1][k] == '1') and (l[j][k + 1] == '1') and (l[j + 1][k + 1] == '0'):\n                    print('NO')\n                    flag = -1\n                    break\n                if j + 1 <= n - 1 and k - 1 >= 0 and (l[j + 1][k] == '1') and (l[j][k - 1] == '1') and (l[j + 1][k - 1] == '0'):\n                    print('NO')\n                    flag = -1\n                    break\n        if flag == -1:\n            break\n    if flag == 0:\n        print('YES')", "t = int(input())\nfor g in range(t):\n    a = []\n    b = []\n    f = 0\n    (n, m) = map(int, input().split())\n    for j in range(n):\n        a.append(input())\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if a[i][j] == '1':\n                if a[i][j + 1] == '1' and a[i + 1][j] == '1':\n                    if a[i + 1][j + 1] != '1':\n                        f = 1\n                        break\n                if a[i][j + 1] == '1' and a[i + 1][j] != '1':\n                    if a[i + 1][j + 1] == '1':\n                        f = 1\n                        break\n                if a[i][j + 1] != '1' and a[i + 1][j] == '1':\n                    if a[i + 1][j + 1] == '1':\n                        f = 1\n                        break\n            if a[i][j] == '0':\n                if a[i][j + 1] == '1' and a[i + 1][j] == '1':\n                    if a[i + 1][j + 1] == '1':\n                        f = 1\n                        break\n        if f == 1:\n            break\n    if f == 0:\n        print('YES')\n    else:\n        print('NO')", "import math\nt = int(input())\nfor test in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input())))\n    su = 0\n    ans = 'YES'\n    for i in range(n - 1):\n        for j in range(m - 1):\n            su = l[i][j] + l[i + 1][j] + l[i][j + 1] + l[i + 1][j + 1]\n            if su == 3:\n                ans = 'NO'\n                break\n        if ans == 'NO':\n            break\n    print(ans)", "from re import L\nimport sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\n\ndef func():\n    (n, m) = mul()\n    gp = []\n    for i in range(n):\n        gp.append([int(i) for i in strng()])\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if gp[i][j] + gp[i + 1][j] + gp[i][j + 1] + gp[i + 1][j + 1] == 3:\n                return 'NO'\n    return 'YES'\nt = inp()\nfor i in range(t):\n    print(func())", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = []\n    for i in range(n):\n        d.append(list(map(int, input())))\n    res = 'YES'\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if d[i][j] + d[i + 1][j] + d[i][j + 1] + d[i + 1][j + 1] == 3:\n                res = 'NO'\n                break\n    print(res)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input())))\n    ans = 'YES'\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if a[i][j] + a[i + 1][j] + a[i][j + 1] + a[i + 1][j + 1] == 3:\n                ans = 'NO'\n                break\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input())))\n    ans = 'YES'\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if a[i][j] + a[i + 1][j] + a[i][j + 1] + a[i + 1][j + 1] == 3:\n                ans = 'NO'\n                break\n    print(ans)", "t = int(input())\n\ndef verify_no_bad_edge(arr, n, m):\n    i = 0\n    j = 0\n    seen = set()\n    while i < n:\n        if (i, j) not in seen:\n            seen.add((i, j))\n            if arr[i][j] == '1':\n                x = i\n                y = j\n                while x < n and y < m and (arr[x][y] == '1'):\n                    seen.add((x, y))\n                    y += 1\n                mx_col = y\n                x += 1\n                y = j\n                while x < n:\n                    if arr[x][y] == '1':\n                        if y != 0 and arr[x][y - 1] != '0':\n                            return False\n                        while y < mx_col and arr[x][y] == '1':\n                            seen.add((x, y))\n                            y += 1\n                        if y < mx_col or (mx_col < m and arr[x][y] == '1'):\n                            return False\n                        x += 1\n                        y = j\n                    else:\n                        while y < mx_col and arr[x][y] == '0':\n                            seen.add((x, y))\n                            y += 1\n                        if y < mx_col:\n                            return False\n                        break\n        j += 1\n        if j >= m:\n            j = 0\n            i += 1\n    return True\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    arr = []\n    for _ in range(n):\n        arr.append(input())\n    if verify_no_bad_edge(arr, n, m):\n        print('YES')\n    else:\n        print('NO')", "for g in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        l += [input()]\n    f = 1\n    for x in range(n - 1):\n        for y in range(m - 1):\n            if [l[x][y], l[x + 1][y + 1], l[x][y + 1], l[x + 1][y]].count('0') == 1:\n                f = 0\n                break\n    if f:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    g = []\n    for i in range(n):\n        g.append(input())\n    if n == 1 or m == 1:\n        print('YES')\n    else:\n        f = False\n        for i in range(n - 1):\n            for j in range(m - 1):\n                c = 0\n                if g[i][j] == '1':\n                    c += 1\n                if g[i + 1][j] == '1':\n                    c += 1\n                if g[i][j + 1] == '1':\n                    c += 1\n                if g[i + 1][j + 1] == '1':\n                    c += 1\n                if c == 3:\n                    f = True\n                    break\n            if f:\n                break\n        if f:\n            print('NO')\n        else:\n            print('YES')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, list(str(input())))))\n    flag = 0\n    for i in range(1, n):\n        for j in range(1, m):\n            if arr[i - 1][j - 1] + arr[i][j] == 2 and arr[i - 1][j] + arr[i][j - 1] == 1 or (arr[i - 1][j - 1] + arr[i][j] == 1 and arr[i - 1][j] + arr[i][j - 1] == 2):\n                flag = 1\n                print('NO')\n                break\n        if flag == 1:\n            break\n    else:\n        print('YES')", "t = int(input())\nfor u in range(t):\n    (n, m) = list(map(int, input().split()))\n    arr = []\n    tot = 0\n    for i in range(n):\n        arr.append([int(l) for l in input()])\n    for i in arr:\n        for k in i:\n            tot += k\n    if n == 1 or m == 1:\n        print('YES')\n        continue\n    start = arr[0][0] + arr[0][1] + arr[1][0] + arr[1][1]\n    if start == 3:\n        print('NO')\n        continue\n    ans = 'YES'\n    for i in range(0, n - 1):\n        for k in range(0, m - 1):\n            if arr[i][k] + arr[i][k + 1] + arr[i + 1][k] + arr[i + 1][k + 1] == 3:\n                ans = 'NO'\n                break\n    print(ans)", "def dfs(n, m, mat, arr1, arr2, count):\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    for (i, j) in directions:\n        x = n + i\n        y = m + j\n        if 0 <= x < len(mat) and 0 <= y < len(mat[0]) and (mat[x][y] == '1') and ((x, y) not in visited):\n            arr1.add(x)\n            arr2.add(y)\n            count[0] += 1\n            visited.add((x, y))\n            dfs(x, y, mat, arr1, arr2, count)\n\ndef dfsUtil(r, c, mat):\n    for i in range(r):\n        for j in range(c):\n            count = [1]\n            if mat[i][j] == '1' and (i, j) not in visited:\n                arr1 = {i}\n                arr2 = {j}\n                visited.add((i, j))\n                dfs(i, j, mat, arr1, arr2, count)\n                if len(arr1) * len(arr2) != count[0]:\n                    return False\n    return True\nt = int(input())\nfor _ in range(t):\n    (r, c) = list(map(int, input().split()))\n    mat = []\n    for i in range(r):\n        mat.append(list(input()))\n    visited = set()\n    if dfsUtil(r, c, mat):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().strip().split())\n    s = input()\n    co = True\n    for z in range(n - 1):\n        sp = input()\n        if co:\n            for i in range(m - 1):\n                if s[i:i + 2] == '11' and sp[i] != sp[i + 1]:\n                    co = False\n                    break\n                elif s[i] != s[i + 1] and sp[i:i + 2] == '11':\n                    co = False\n                    break\n        s = sp\n    if co:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, list(input()))))\n    done = True\n    for (i, row) in enumerate(matrix):\n        t_b = None\n        for (j, item) in enumerate(row):\n            if item == 1:\n                if t_b != None:\n                    if i:\n                        if i == n - 1:\n                            if matrix[i - 1][j] != t_b:\n                                done = False\n                        elif (matrix[i - 1][j], matrix[i + 1][j]) != t_b:\n                            done = False\n                    elif matrix[i + 1][j] != t_b:\n                        done = False\n                elif i:\n                    if i == n - 1:\n                        t_b = matrix[i - 1][j]\n                    else:\n                        t_b = (matrix[i - 1][j], matrix[i + 1][j])\n                else:\n                    try:\n                        t_b = matrix[i + 1][j]\n                    except IndexError:\n                        pass\n            else:\n                t_b = None\n    if done:\n        print('YES')\n    else:\n        print('NO')", "def check(rows):\n    previous_row = [0] * m\n    for row in rows:\n        for i in range(m - 1):\n            if previous_row[i] + previous_row[i + 1] == 2 and row[i] + row[i + 1] == 1:\n                return 'NO'\n            elif previous_row[i] + previous_row[i + 1] == 1 and row[i] + row[i + 1] == 2:\n                return 'NO'\n        previous_row = row\n    return 'YES'\nnum_tests = int(input())\nfor _ in range(num_tests):\n    (n, m) = [int(num) for num in input().split(' ')]\n    rows = []\n    for _ in range(n):\n        rows.append([int(el) for el in input()])\n    print(check(rows))", "def solve():\n    (n, m) = map(int, input().split())\n    arr = []\n    flag = 0\n    for i in range(n):\n        arr.append([int(i) for i in input()])\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if arr[i][j] + arr[i][j + 1] + arr[i + 1][j] + arr[i + 1][j + 1] == 3:\n                flag = 1\n                break\n    print('YES' if not flag else 'NO')\ntst = int(input())\nfor i in range(tst):\n    solve()", "I = lambda : list(map(int, input()))\nfor _ in [0] * int(input()):\n    (n, m) = map(int, input().split())\n    a = []\n    e = 1\n    for _ in [0] * n:\n        a.append(I())\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if a[i][j] + a[i][j + 1] + a[i + 1][j] + a[i + 1][j + 1] == 3:\n                e = 0\n                break\n    print('YNEOS'[int(e == 0)::2])", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        arr = list(map(int, list(input())))\n        grid.append(arr)\n    ans = 'YES'\n    flag = True\n    for row in range(n - 1):\n        if not flag:\n            break\n        for col in range(m - 1):\n            s = grid[row][col] + grid[row + 1][col] + grid[row][col + 1] + grid[row + 1][col + 1]\n            if s == 3:\n                flag = False\n                ans = 'NO'\n                break\n    print(ans)", "import math\nfrom collections import *\n\ndef solve():\n    (n, m) = map(int, input().split())\n    a = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        s = input()\n        for j in range(m):\n            a[i][j] = int(s[j])\n    for i in range(n - 1):\n        for j in range(m - 1):\n            s = a[i][j] + a[i][j + 1] + a[i + 1][j] + a[i + 1][j + 1]\n            if s == 3:\n                print('NO')\n                return\n    print('YES')\nt = int(input())\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    table = []\n    for i in range(n):\n        temp = input()\n        table.append(temp)\n    ans = 'YES'\n    for i in range(n - 1):\n        for j in range(m - 1):\n            count = 0\n            if table[i][j] == '1':\n                count += 1\n            if table[i + 1][j] == '1':\n                count += 1\n            if table[i][j + 1] == '1':\n                count += 1\n            if table[i + 1][j + 1] == '1':\n                count += 1\n            if count == 3:\n                ans = 'NO'\n                break\n    print(ans)", "for t in range(int(input())):\n    (n, m) = input().split()\n    (n, m) = (int(n), int(m))\n    arr = [[]] * n\n    for i in range(n):\n        line = input()\n        arr[i] = [0] * m\n        for j in range(m):\n            arr[i][j] = int(line[j])\n    isYes = True\n    for i in range(1, n):\n        for j in range(1, m):\n            if arr[i][j] + arr[i - 1][j] + arr[i - 1][j - 1] + arr[i][j - 1] == 3:\n                isYes = False\n                break\n        if not isYes:\n            break\n    if isYes:\n        print('YES')\n    else:\n        print('NO')", "tc = int(input())\nfor _ in range(tc):\n    (r, c) = map(int, input().split())\n    table = [input() for _ in range(r)]\n    false = False\n    true = True\n    flag = false\n    for i in range(r):\n        for j in range(c):\n            if table[i][j] == '0':\n                if i > 0 and j > 0 and (table[i - 1][j] == '1') and (table[i - 1][j - 1] == '1') and (table[i][j - 1] == '1'):\n                    flag = true\n                elif i > 0 and j < c - 1 and (table[i - 1][j] == '1') and (table[i - 1][j + 1] == '1') and (table[i][j + 1] == '1'):\n                    flag = true\n                elif i < r - 1 and j < c - 1 and (table[i + 1][j] == '1') and (table[i + 1][j + 1] == '1') and (table[i][j + 1] == '1'):\n                    flag = true\n                elif i < r - 1 and j > 0 and (table[i + 1][j] == '1') and (table[i + 1][j - 1] == '1') and (table[i][j - 1] == '1'):\n                    flag = true\n            if flag:\n                break\n        if flag:\n            break\n    if flag:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    t = []\n    (n, m) = map(int, input().split())\n    s = 0\n    for i in range(n):\n        a = list((int(char) for char in input()))\n        s += sum(a)\n        t.append(a)\n    if m == 1 or (n == 1 and s >= 1):\n        print('YES')\n    else:\n        ans = 'YES'\n        for j in range(n - 1):\n            for k in range(m - 1):\n                if t[j][k] + t[j + 1][k] + t[j][k + 1] + t[j + 1][k + 1] == 3:\n                    ans = 'NO'\n                    break\n        print(ans)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = [input().strip() for _ in range(n)]\n    r = False\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if int(d[i][j]) + int(d[i][j + 1]) + int(d[i + 1][j]) + int(d[i + 1][j + 1]) == 3:\n                r = True\n                break\n        if r:\n            break\n    print('NO' if r else 'YES')", "t = int(input())\nfor i in range(t):\n    (n, m) = [int(j) for j in input().split()]\n    field = []\n    for j in range(n):\n        string = [int(k) for k in input()]\n        field.append(string)\n    is_elegant = True\n    for y in range(1, n):\n        for x in range(1, m):\n            if field[y][x] + field[y - 1][x] + field[y][x - 1] + field[y - 1][x - 1] == 3:\n                is_elegant = False\n            if not is_elegant:\n                break\n        if not is_elegant:\n            break\n    if is_elegant:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    t = []\n    (n, m) = map(int, input().split())\n    s = 0\n    for i in range(n):\n        a = list((int(char) for char in input()))\n        s += sum(a)\n        t.append(a)\n    if m == 1 or (n == 1 and s >= 1):\n        print('YES')\n    else:\n        ans = 'YES'\n        for j in range(n - 1):\n            for k in range(m - 1):\n                if t[j][k] + t[j + 1][k] + t[j][k + 1] + t[j + 1][k + 1] == 3:\n                    ans = 'NO'\n                    break\n        print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input())))\n    ans = 'YES'\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if a[i][j] + a[i + 1][j] + a[i][j + 1] + a[i + 1][j + 1] == 3:\n                ans = 'NO'\n                break\n    print(ans)", "def check(n, m, a):\n    for i in range(n - 1):\n        for j in range(m - 1):\n            s = sum(map(int, (a[i][j], a[i][j + 1], a[i + 1][j], a[i + 1][j + 1])))\n            if s == 3:\n                print('NO')\n                return\n    print('YES')\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [[i for i in input()] for _ in range(n)]\n    check(n, m, a)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input())))\n    ans = 'YES'\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if a[i][j] + a[i + 1][j] + a[i][j + 1] + a[i + 1][j + 1] == 3:\n                ans = 'NO'\n                break\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    d = {'0': 0, '1': 1}\n    for i in range(n):\n        a.append(input())\n    ans = 'YES'\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if d[a[i][j]] + d[a[i][j + 1]] + d[a[i + 1][j]] + d[a[i + 1][j + 1]] == 3:\n                ans = 'NO'\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    ans = 'YES'\n    a = []\n    for i in range(n):\n        a.append(input())\n    for i in range(1, n):\n        for j in range(m - 1):\n            if a[i][j] == '1' and (a[i - 1][j] == '1' and a[i][j + 1] == '0' and (a[i - 1][j + 1] == '1') or (a[i - 1][j] == '0' and a[i][j + 1] == '1' and (a[i - 1][j + 1] == '1'))):\n                ans = 'NO'\n                break\n        if ans == 'NO':\n            break\n    if ans == 'YES':\n        for i in range(n):\n            a[i] = a[i][::-1]\n        for i in range(1, n):\n            for j in range(m - 1):\n                if a[i][j] == '1' and (a[i - 1][j] == '1' and a[i][j + 1] == '0' and (a[i - 1][j + 1] == '1') or (a[i - 1][j] == '0' and a[i][j + 1] == '1' and (a[i - 1][j + 1] == '1'))):\n                    ans = 'NO'\n                    break\n            if ans == 'NO':\n                break\n    print(ans)", "def result():\n    (n, m) = map(int, input().split())\n    table = [None] * n\n    for i in range(n):\n        a = input()\n        a = list(a)\n        table[i] = a\n    flag = 'YES'\n    for i in range(1, n):\n        for j in range(1, m):\n            if int(table[i - 1][j]) + int(table[i][j]) + int(table[i][j - 1]) + int(table[i - 1][j - 1]) == 3:\n                flag = 'NO'\n    return flag\nt = int(input())\nfor i in range(t):\n    print(result())", "lst = []\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input())))\n    ans = 'YES'\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if a[i][j] + a[i + 1][j] + a[i][j + 1] + a[i + 1][j + 1] == 3:\n                ans = 'NO'\n                break\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input())))\n    ans = 'YES'\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if a[i][j] + a[i + 1][j] + a[i][j + 1] + a[i + 1][j + 1] == 3:\n                ans = 'NO'\n                break\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input())))\n    ans = 'YES'\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if a[i][j] + a[i + 1][j] + a[i][j + 1] + a[i + 1][j + 1] == 3:\n                ans = 'NO'\n                break\n    print(ans)", "def pro(arr):\n    n = len(arr)\n    m = len(arr[0])\n    for i in range(n):\n        for j in range(m):\n            c = 0\n            if arr[i][j]:\n                c += 1\n            if i + 1 < n and arr[i + 1][j]:\n                c += 1\n            if j + 1 < m and arr[i][j + 1]:\n                c += 1\n            if i + 1 < n and j + 1 < m and arr[i + 1][j + 1]:\n                c += 1\n            if c == 3:\n                print('NO')\n                return\n    print('YES')\nn = int(input())\nfor i in range(n):\n    (n, m) = list(map(int, input().split()))\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, list(input()))))\n    pro(arr)", "def solve():\n    for i in range(n - 1):\n        for j in range(m - 1):\n            s = arr[i][j] + arr[i + 1][j] + arr[i][j + 1] + arr[i + 1][j + 1]\n            if s == 3:\n                return 'NO'\n    return 'YES'\nfrom sys import stdin\ninput = stdin.readline\nt = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    arr = []\n    for i in range(n):\n        arr.append([int(x) for x in input().strip()])\n    print(solve())", "import sys\nttime = int(input())\nfor ccount in range(ttime):\n    (n, m) = map(int, sys.stdin.readline().split())\n    board = []\n    for i in range(n):\n        board.append(input())\n    bad = False\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if (board[i][j] == '1') + (board[i + 1][j] == '1') + (board[i][j + 1] == '1') + (board[i + 1][j + 1] == '1') == 3:\n                bad = True\n    if bad:\n        print('NO')\n    else:\n        print('YES')", "for g in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        l += [input()]\n    f = 1\n    for x in range(n - 1):\n        for y in range(m - 1):\n            if [l[x][y], l[x + 1][y + 1], l[x][y + 1], l[x + 1][y]].count('0') == 1:\n                f = 0\n                break\n    if f:\n        print('YES')\n    else:\n        print('NO')", "for g in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        l += [input()]\n    f = 1\n    for x in range(n - 1):\n        for y in range(m - 1):\n            if [l[x][y], l[x + 1][y + 1], l[x][y + 1], l[x + 1][y]].count('0') == 1:\n                f = 0\n                break\n    if f:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    a = [[int(x) for x in input()] for y in range(n)]\n    ok = True\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if a[i][j] + a[i][j + 1] + a[i + 1][j] + a[i + 1][j + 1] == 3:\n                ok = False\n    print('YES' if ok else 'NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    d = {'0': 0, '1': 1}\n    for i in range(n):\n        a.append(input())\n    ans = 'YES'\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if d[a[i][j]] + d[a[i][j + 1]] + d[a[i + 1][j]] + d[a[i + 1][j + 1]] == 3:\n                ans = 'NO'\n    print(ans)", "for g in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        l += [input()]\n    f = 1\n    for x in range(n - 1):\n        for y in range(m - 1):\n            if [l[x][y], l[x + 1][y + 1], l[x][y + 1], l[x + 1][y]].count('0') == 1:\n                f = 0\n                break\n    if f:\n        print('YES')\n    else:\n        print('NO')", "def is_elegant():\n    for i in range(n - 1):\n        for j in range(m - 1):\n            down = {mat[i + 1][j], mat[i + 1][j + 1]}\n            cur = {mat[i][j], mat[i][j + 1]}\n            if cur == {'1', '0'} and set(down) == {'1', '1'} or (cur == {'1', '1'} and down == {'1', '0'}):\n                return False\n    return True\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mat = [list(input()) for i in range(n)]\n    print(['NO', 'YES'][is_elegant()])", "import sys\nimport collections\nimport itertools\nimport heapq\ndy = [1, 0, -1, 0]\ndx = [0, 1, 0, -1]\nR = lambda : sys.stdin.readline().rstrip()\nMIS = lambda : map(int, R().split())\nmod = 1000000007\nfor _ in range(int(R())):\n    (N, M) = MIS()\n    L = []\n    for _ in range(N):\n        L.append(list(map(int, list(R()))))\n    flag = 1\n    for i in range(N - 1):\n        for j in range(M - 1):\n            cnt = L[i][j] + L[i][j + 1] + L[i + 1][j] + L[i + 1][j + 1]\n            if cnt == 3:\n                flag = 0\n                break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor case in range(t):\n    (n, m) = map(int, input().split())\n    M = []\n    r = []\n    for i in range(n):\n        M.append(input())\n        r.append([])\n        now = 0\n        sta = 0\n        for j in range(m):\n            if M[-1][j] == '1' and now == 0:\n                now = 1\n                sta = j\n            if M[-1][j] == '0' and now == 1:\n                now = 0\n                end = j - 1\n                r[-1].append((sta, end))\n        if now == 1:\n            end = m - 1\n            r[-1].append((sta, end))\n    flag = True\n    for i in range(n - 1):\n        a = 0\n        b = 0\n        while a < len(r[i]) and b < len(r[i + 1]) and flag:\n            if r[i][a][1] < r[i + 1][b][0]:\n                a += 1\n            elif r[i][a][0] > r[i + 1][b][1]:\n                b += 1\n            elif r[i][a] == r[i + 1][b]:\n                a += 1\n                b += 1\n            else:\n                flag = False\n        if not flag:\n            break\n    print('YES' if flag else 'NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mat = []\n    for w in range(n):\n        row = list(map(int, input()))\n        mat.append(row)\n    stop = 0\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if mat[i][j] + mat[i + 1][j] == 2 and mat[i][j + 1] + mat[i + 1][j + 1] == 1:\n                stop = 1\n                break\n            if mat[i][j] + mat[i + 1][j] == 1 and mat[i][j + 1] + mat[i + 1][j + 1] == 2:\n                stop = 1\n                break\n        if stop == 1:\n            break\n    for i in range(m - 1):\n        for j in range(n - 1):\n            if mat[j][i] + mat[j][i + 1] == 2 and mat[j + 1][i] + mat[j + 1][i + 1] == 1:\n                stop = 1\n                break\n            if mat[j][i] + mat[j][i + 1] == 1 and mat[j + 1][i] + mat[j + 1][i + 1] == 2:\n                stop = 1\n                break\n        if stop == 1:\n            break\n    if stop == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(0, t):\n    inputs = [int(num) for num in input().split()]\n    n = inputs[0]\n    m = inputs[1]\n    grid = []\n    i = 0\n    for i in range(0, n):\n        grid.append([num for num in input()])\n    i = 0\n    flag = 0\n    for i in range(0, n):\n        for j in range(0, m):\n            if grid[i][j] == '0':\n                try:\n                    if i + 1 >= 0 and j + 1 >= 0:\n                        if grid[i + 1][j] == '1' and grid[i][j + 1] == '1' and (grid[i + 1][j + 1] == '1'):\n                            flag = 1\n                            break\n                except IndexError:\n                    pass\n                try:\n                    if i + 1 >= 0 and j - 1 >= 0:\n                        if grid[i + 1][j] == '1' and grid[i][j - 1] == '1' and (grid[i + 1][j - 1] == '1'):\n                            flag = 1\n                            break\n                except IndexError:\n                    pass\n                try:\n                    if i - 1 >= 0 and j + 1 >= 0:\n                        if grid[i - 1][j] == '1' and grid[i][j + 1] == '1' and (grid[i - 1][j + 1] == '1'):\n                            flag = 1\n                            break\n                except IndexError:\n                    pass\n                try:\n                    if i - 1 >= 0 and j - 1 >= 0:\n                        if grid[i - 1][j] == '1' and grid[i][j - 1] == '1' and (grid[i - 1][j - 1] == '1'):\n                            flag = 1\n                            break\n                except IndexError:\n                    pass\n        if flag == 1:\n            break\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')", "def find_cube(ara, x, y):\n    for i in range(0, x - 1):\n        for j in range(y - 1):\n            num = int(ara[i][j]) + int(ara[i + 1][j + 1]) + int(ara[i][j + 1]) + int(ara[i + 1][j])\n            if num == 3:\n                return False\n    return True\nt = int(input())\nara = list()\nfor l in range(t):\n    x = input()\n    x = x.split(' ')\n    y = int(x[1])\n    x = int(x[0])\n    for i in range(x):\n        temp = input()\n        ara.append(temp)\n    if x > 1 and y > 1:\n        sw = find_cube(ara, x, y)\n        if sw:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('YES')\n    ara.clear()", "import collections\nfrom math import ceil, gcd, sqrt, log\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    (n, m) = map(int, input().split())\n    table = []\n    for i in range(n):\n        s = input()[:m]\n        table.append(list(s))\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if int(table[i][j]) + int(table[i + 1][j]) + int(table[i][j + 1]) + int(table[i + 1][j + 1]) == 3:\n                print('NO')\n                return\n    print('YES')\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "def pr(a):\n    for i in range(n - 1):\n        for j in range(m - 1):\n            s = int(a[i][j]) + int(a[i][j + 1]) + int(a[i + 1][j]) + int(a[i + 1][j + 1])\n            if s == 3:\n                return 'NO'\n    return 'YES'\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(str(input()))\n    print(pr(a))", "s = []\nt = int(input())\nfor test in range(t):\n    tabella = []\n    v = 0\n    n_m = input().split()\n    n = int(n_m[0])\n    m = int(n_m[-1])\n    for row in range(n):\n        riga = input()\n        riga_da_appendere = []\n        for c in riga:\n            riga_da_appendere.append(int(c))\n        tabella.append(riga_da_appendere)\n    for i in range(n - 1):\n        for j in range(m - 1):\n            somma = tabella[i][j] + tabella[i][j + 1] + tabella[i + 1][j] + tabella[i + 1][j + 1]\n            if somma == 3:\n                v = -1\n    if v == -1:\n        s.append('NO')\n    else:\n        s.append('YES')\nfor ss in s:\n    print(ss)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        temp = list(input())\n        l.append(temp)\n    key = 0\n    for i in range(n):\n        for j in range(m):\n            if l[i][j] == '0':\n                if j - 1 >= 0 and i - 1 >= 0:\n                    if l[i - 1][j] == '1' and l[i][j - 1] == '1' and (l[i - 1][j - 1] == '1'):\n                        key = 1\n                        break\n                if j + 1 < m and i - 1 >= 0:\n                    if l[i - 1][j] == '1' and l[i][j + 1] == '1' and (l[i - 1][j + 1] == '1'):\n                        key = 1\n                        break\n                if j + 1 < m and i + 1 < n:\n                    if l[i + 1][j] == '1' and l[i][j + 1] == '1' and (l[i + 1][j + 1] == '1'):\n                        key = 1\n                        break\n                if j - 1 >= 0 and i + 1 < n:\n                    if l[i + 1][j] == '1' and l[i][j - 1] == '1' and (l[i + 1][j - 1] == '1'):\n                        key = 1\n                        break\n    if key:\n        print('NO')\n    else:\n        print('YES')", "def task():\n    (n, m) = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(input())\n    result = True\n    for i in range(n - 1):\n        for j in range(m - 1):\n            sum = int(matrix[i][j]) + int(matrix[i + 1][j]) + int(matrix[i][j + 1]) + int(matrix[i + 1][j + 1])\n            if sum == 3:\n                result = False\n                break\n    if result:\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nfor _ in range(t):\n    task()", "def solve(m, n, s):\n    res = 'YES'\n    a = 0\n    for i in range(1, m):\n        for j in range(1, n):\n            a = int(s[i][j]) + int(s[i - 1][j]) + int(s[i][j - 1]) + int(s[i - 1][j - 1])\n            if a == 3:\n                print('NO')\n                return\n    print(res)\n    return\ntest = int(input())\nfor te in range(0, test):\n    (m, n) = list(map(int, input().split()))\n    s = []\n    for i in range(0, m):\n        s.append(input())\n    solve(m, n, s)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    A = []\n    for i in range(n):\n        A.append(input())\n    answer = 'YES'\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == '0':\n                if i != n - 1 and j != m - 1 and (A[i + 1][j + 1] == A[i][j + 1] == A[i + 1][j] == '1'):\n                    answer = 'NO'\n                elif i != 0 and j != 0 and (A[i - 1][j - 1] == A[i][j - 1] == A[i - 1][j] == '1'):\n                    answer = 'NO'\n                elif i != n - 1 and j != 0 and (A[i + 1][j - 1] == A[i][j - 1] == A[i + 1][j] == '1'):\n                    answer = 'NO'\n                elif i != 0 and j != m - 1 and (A[i - 1][j + 1] == A[i - 1][j] == A[i][j + 1] == '1'):\n                    answer = 'NO'\n    print(answer)", "t = int(input())\nfor tt in range(t):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append([int(j) for j in input()])\n    s = 0\n    x = 0\n    for i in range(1, n):\n        for j in range(1, m):\n            s = a[i][j] + a[i - 1][j - 1] + a[i - 1][j] + a[i][j - 1]\n            if s == 3:\n                x = 1\n                break\n    if x == 1:\n        print('NO')\n    else:\n        print('YES')", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    g = []\n    for i in range(n):\n        g.append(input())\n    ans = 'YES'\n    if n == 1 == m:\n        print(ans)\n        continue\n    for (x, y) in zip(g, g[1:]):\n        for (a, b, c, d) in zip(x, x[1:], y, y[1:]):\n            if int(a) + int(b) + int(c) + int(d) == 3:\n                ans = 'NO'\n                break\n        if ans == 'NO':\n            break\n    print(ans)", "for i in range(int(input())):\n    (n, m) = list(map(int, input().split(' ')))\n    arr = []\n    for i in range(n):\n        temp = []\n        for i in input():\n            temp.append(int(i))\n        arr.append(temp)\n    res = 'YES'\n    for i in range(n):\n        for j in range(m):\n            try:\n                count = arr[i + 1][j] + arr[i][j + 1] + arr[i + 1][j + 1] + arr[i][j]\n                if count == 3:\n                    res = 'NO'\n            except:\n                pass\n    print(res)", "T = int(input())\nfor t in range(T):\n    (n, m) = map(int, input().split())\n    L = []\n    for i in range(n):\n        L.append(list(map(int, list(input()))))\n    flag = True\n    if n == 1 or m == 1:\n        print('YES')\n        continue\n    for i in range(n):\n        z = L[i]\n        j = 0\n        while j < m:\n            if z[j] == 0:\n                j += 1\n                continue\n            else:\n                k = j\n                while k + 1 < m:\n                    if z[k + 1] == 1:\n                        k += 1\n                        continue\n                    else:\n                        break\n                if i == 0:\n                    if L[i + 1][j:k + 1] != [0 for i in range(k - j + 1)] and L[i + 1][j:k + 1] != [1 for i in range(k - j + 1)]:\n                        flag = False\n                        break\n                elif i == n - 1:\n                    if L[i - 1][j:k + 1] != [0 for i in range(k - j + 1)] and L[i - 1][j:k + 1] != [1 for i in range(k - j + 1)]:\n                        flag = False\n                        break\n                else:\n                    if L[i + 1][j:k + 1] != [0 for i in range(k - j + 1)] and L[i + 1][j:k + 1] != [1 for i in range(k - j + 1)]:\n                        flag = False\n                        break\n                    if L[i - 1][j:k + 1] != [0 for i in range(k - j + 1)] and L[i - 1][j:k + 1] != [1 for i in range(k - j + 1)]:\n                        flag = False\n                        break\n                j = k + 1\n        if flag == False:\n            break\n    if flag == False:\n        print('NO')\n    else:\n        print('YES')", "import os\nimport sys\nimport os.path\nfrom math import *\nfrom copy import deepcopy\nif os.path.exists('in.txt'):\n    sys.stdin = open('in.txt', 'r')\n    sys.stdout = open('ot.txt', 'w')\n\ndef main():\n    for ttt in range(int(input())):\n        (n, m) = map(int, input().split())\n        mat = []\n        for i in range(n):\n            s = input()\n            mat.append(s)\n        ans = 1\n        for i in range(n - 1):\n            for j in range(m - 1):\n                if int(mat[i][j]) + int(mat[i + 1][j]) + int(mat[i][j + 1]) + int(mat[i + 1][j + 1]) == 3:\n                    ans = 0\n        if ans == 0:\n            print('NO')\n        else:\n            print('YES')\nmain()", "for _ in range(int(input())):\n    sq = []\n    (n, m) = map(int, input().split())\n    for i in range(n):\n        sq.append(list(map(int, list(input()))))\n    ans = 'YES'\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if sum(sq[i:i + 2][0][j:j + 2] + sq[i:i + 2][1][j:j + 2]) == 3:\n                ans = 'NO'\n                break\n    print(ans)", "def solve():\n    (x, y) = map(int, input().split())\n    a = []\n    ans = 'YES'\n    for i in range(x):\n        a.append(input())\n    check = 0\n    for i in range(x - 1):\n        for j in range(y - 1):\n            check = int(a[i][j]) + int(a[i + 1][j]) + int(a[i][j + 1]) + int(a[i + 1][j + 1])\n            if check == 3:\n                ans = 'NO'\n                break\n    print(ans)\nfor i in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = []\n    for i in range(n):\n        st = input()\n        s.append(st)\n    ans = 'YES'\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if int(s[i][j]) + int(s[i + 1][j]) + int(s[i][j + 1]) + int(s[i + 1][j + 1]) == 3:\n                ans = 'NO'\n                break\n    print(ans)", "from math import inf\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(str(input()))\n    test = 'YES'\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if int(l[i][j]) + int(l[i][j + 1]) + int(l[i + 1][j]) + int(l[i + 1][j + 1]) == 3:\n                test = 'NO'\n    print(test)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    matrix = []\n    for j in range(n):\n        s = input()\n        lst = []\n        for k in s:\n            lst.append(int(k))\n        matrix.append(lst)\n    err = 0\n    for a in range(n - 1):\n        for b in range(m - 1):\n            c1 = 0\n            if matrix[a][b] == 1:\n                c1 += 1\n            if matrix[a][b + 1] == 1:\n                c1 += 1\n            if matrix[a + 1][b] == 1:\n                c1 += 1\n            if matrix[a + 1][b + 1] == 1:\n                c1 += 1\n            if c1 == 3:\n                err += 1\n                break\n    if err > 0:\n        print('NO')\n    else:\n        print('YES')", "for i in range(int(input())):\n    (rows, cols) = map(int, input().split())\n    row_wise = []\n    col_wise = []\n    for i in range(rows):\n        row_wise.append(input())\n    for i in range(cols):\n        string = ''\n        for j in range(rows):\n            string += row_wise[j][i]\n        col_wise.append(string)\n    output = 'ok'\n    for i in range(rows - 1):\n        if output != 'ok':\n            break\n        for j in range(cols - 1):\n            if (row_wise[i][j] + row_wise[i][j + 1] + row_wise[i + 1][j] + row_wise[i + 1][j + 1]).count('0') == 1:\n                output = 'YES'\n                break\n    if output == 'ok':\n        print('YES')\n    else:\n        print('NO')", "x = int(input())\nfor k in range(x):\n    (a, b) = list(map(int, input().split()))\n    c = []\n    for ll in range(a):\n        y = input()\n        flag = 0\n        d = []\n        count1 = 0\n        count2 = 0\n        for kk in range(b):\n            if flag == 0 and y[kk] == '1':\n                count1 += 1\n                d.append(count1)\n                count2 = 0\n            else:\n                count1 = 0\n                flag = 0\n                d.append(count2)\n        c.append(d)\n    ans = 1\n    for ll in range(1, a):\n        ii = 0\n        while ii < b:\n            if c[ll][ii] == c[ll - 1][ii]:\n                ans = 1\n                ii += 1\n            elif c[ll][ii] == 0 and c[ll - 1][ii] == 1:\n                z = ii\n                while z < b and c[ll - 1][z] != 0:\n                    if c[ll][z] == 0:\n                        ans = 1\n                    else:\n                        ans = 0\n                        break\n                    z += 1\n                ii = z\n            elif c[ll - 1][ii] == 0 and c[ll][ii] == 1:\n                z = ii\n                while z < b and c[ll][z] != 0:\n                    if c[ll - 1][z] == 0:\n                        ans = 1\n                    else:\n                        ans = 0\n                        break\n                    z += 1\n                ii = z\n            else:\n                ans = 0\n                break\n        if ans == 0:\n            break\n    if ans == 1:\n        print('YES')\n    else:\n        print('NO')", "def IsElegant(lst):\n    elegant = True\n    if len(lst) > 1 and len(lst[0]) > 1:\n        for i in range(len(lst) - 1):\n            for j in range(len(lst[i]) - 1):\n                s3 = int(lst[i][j]) + int(lst[i + 1][j]) + int(lst[i][j + 1]) + int(lst[i + 1][j + 1])\n                if s3 == 3:\n                    elegant = False\n    return elegant\ntests = int(input())\nans = []\nfor i in range(tests):\n    (n, m) = map(int, input().split())\n    lst = []\n    for j in range(n):\n        lst.append(str(input()))\n    ans.append(IsElegant(lst))\nfor i in range(tests):\n    if ans[i] == True:\n        print('YES')\n    else:\n        print('NO')"]