["t = input()\nt = int(t)\nm = [0] * t\nn = [0] * t\nfor i in range(t):\n    (m[i], n[i]) = map(int, input().split(' '))\nfor i in range(t):\n    temp = n[i] % 4\n    if m[i] & 1:\n        if temp == 0:\n            print(m[i])\n        elif temp == 1:\n            print(n[i] + m[i])\n        elif temp == 2:\n            print(m[i] - 1)\n        elif temp == 3:\n            print(m[i] - n[i] - 1)\n    elif temp == 0:\n        print(m[i])\n    elif temp == 1:\n        print(m[i] - n[i])\n    elif temp == 2:\n        print(m[i] + 1)\n    elif temp == 3:\n        print(m[i] + n[i] + 1)", "for s in [*open(0)][1:]:\n    (x, n) = map(int, s.split())\n    m = n % 4 - n\n    print(x + (1 - x % 2 * 2) * (0, m - 1, 1, 4 - m)[n % 4])", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\n\ndef get_print_int_same(x):\n    sys.stdout.write(str(x) + ' ')\n\ndef get_print_same(x):\n    sys.stdout.write(x + ' ')\nfrom sys import maxsize\n\ndef solve():\n    for _ in range(get_int()):\n        (x0, n) = get_ints()\n        m = n % 4\n        mul = n // 4\n        if m == 0:\n            get_print_int(x0)\n        elif m == 1:\n            if x0 % 2 == 0:\n                get_print_int(x0 - 1 - mul * 4)\n            else:\n                get_print_int(x0 + 1 + mul * 4)\n        elif m == 2:\n            if x0 % 2 == 0:\n                get_print_int(x0 + 1)\n            else:\n                get_print_int(x0 - 1)\n        elif x0 % 2 == 0:\n            get_print_int(x0 + (mul + 1) * 4)\n        else:\n            get_print_int(x0 - (mul + 1) * 4)\nsolve()", "import sys\ninput = sys.stdin.readline\n\ndef isEven(num):\n    return num % 2 == 0\n\ndef main():\n    test = inp()\n    while test:\n        test -= 1\n        (initPos, numJump) = list_inp()\n        result = initPos\n        module = numJump % 4\n        if not isEven(initPos):\n            if module == 1:\n                result += numJump\n            elif module == 2:\n                result -= 1\n            elif module == 3:\n                result -= numJump + 1\n        elif module == 1:\n            result -= numJump\n        elif module == 2:\n            result += 1\n        elif module == 3:\n            result += numJump + 1\n        print(result)\n\ndef inp():\n    return int(input())\n\ndef list_inp():\n    return list(map(int, input().split()))\nmain()", "t = int(input())\nend_result = ''\nfor _t in range(t):\n    (c, n) = map(int, input().split())\n    k = n\n    while True:\n        if k % 4 == 0:\n            break\n        else:\n            k -= 1\n    k += 1\n    for i in range(k, n + 1):\n        if c % 2 == 0:\n            c -= i\n        else:\n            c += i\n    end_result += str(c) + '\\n'\nprint(end_result.strip())", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\nt = int(input())\nfor _ in range(t):\n    (x, n) = map(int, input().split())\n    if x % 2 == 0:\n        odd = False\n    else:\n        odd = True\n    if n == 1:\n        if odd:\n            print(x + 1)\n        else:\n            print(x - 1)\n    else:\n        tmp = (n - 2) % 4\n        if tmp == 0:\n            if odd:\n                print(x + 1 - 2)\n            else:\n                print(x - 1 + 2)\n        if tmp == 2:\n            print(x)\n        if tmp == 1:\n            if odd:\n                print(x + 1 - n - 2)\n            else:\n                print(x - 1 + n + 2)\n        if tmp == 3:\n            if odd:\n                print(x + 1 + n - 1)\n            else:\n                print(x - 1 - n + 1)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nt = inp()\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    if a % 2 == 0:\n        if b % 4 == 0:\n            print(a)\n        elif b % 4 == 1:\n            print(a - b)\n        elif b % 4 == 2:\n            print(a + 1)\n        elif b % 4 == 3:\n            print(a + b + 1)\n    elif a % 2 == 1:\n        if b % 4 == 0:\n            print(a)\n        elif b % 4 == 1:\n            print(a + b)\n        elif b % 4 == 2:\n            print(a - 1)\n        elif b % 4 == 3:\n            print(a - b - 1)", "import sys\ninput = sys.stdin.readline\nT = int(input())\nresult = []\n\ndef func(t, n):\n\n    def __even_func(t, n):\n        (c, x) = divmod(n, 4)\n        if x == 0:\n            return t\n        elif x == 1:\n            return t - (1 + c * 4)\n        elif x == 2:\n            return t + 1\n        else:\n            return t + (c + 1) * 4\n\n    def __odd_func(t, n):\n        (c, x) = divmod(n, 4)\n        if x == 0:\n            return t\n        elif x == 1:\n            return t + (1 + c * 4)\n        elif x == 2:\n            return t - 1\n        else:\n            return t - (c + 1) * 4\n    if t % 2 == 0:\n        return __even_func(t, n)\n    else:\n        return __odd_func(t, n)\nfor _ in range(T):\n    (t, n) = list(map(int, input()[:-1].split()))\n    if n == 0:\n        result.append(str(t))\n        continue\n    result.append(str(func(t, n)))\nprint('\\n'.join(result))", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (x, n) = map(int, input().split())\n    r = 0\n    a = n % 4\n    b = n // 4\n    if x % 2 == 1:\n        if a == 1:\n            r = x + 1 + 4 * b\n        elif a == 2:\n            r = x - 1\n        elif a == 3:\n            r = x - 4 - 4 * b\n        else:\n            r = x\n    elif a == 1:\n        r = x - 1 - 4 * b\n    elif a == 2:\n        r = x + 1\n    elif a == 3:\n        r = x + 4 + 4 * b\n    else:\n        r = x\n    print(r)", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    (a, n) = map(int, sys.stdin.readline().split())\n    if a % 2 == 1:\n        if n % 4 == 0:\n            print(a + 0)\n        elif n % 4 == 1:\n            print(a + n)\n        elif n % 4 == 2:\n            print(a - 1)\n        elif n % 4 == 3:\n            print(a - 1 * n - 1)\n    elif n % 4 == 0:\n        print(a + 0)\n    elif n % 4 == 1:\n        print(a - n)\n    elif n % 4 == 2:\n        print(a + 1)\n    elif n % 4 == 3:\n        print(a + n + 1)", "t = int(input())\nx0 = []\ndistance = []\nfor i in range(t):\n    inp = input().split(' ')\n    x0.append(int(inp[0]))\n    distance.append(int(inp[1]))\nfor i in range(t):\n    t = distance[i] % 4\n    san = distance[i] - t + 1\n    q = 0\n    if x0[i] % 2 == 0:\n        q += x0[i]\n        if san <= distance[i]:\n            q -= san\n            san += 1\n        if san <= distance[i]:\n            q += san\n            san += 1\n        if san <= distance[i]:\n            q += san\n            san += 1\n    else:\n        q += x0[i]\n        if san <= distance[i]:\n            q += san\n            san += 1\n        if san <= distance[i]:\n            q -= san\n            san += 1\n        if san <= distance[i]:\n            q -= san\n            san += 1\n    print(q)", "import sys\n\ndef get_int():\n    return int(input())\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef solve(x0, n):\n    ans = x0\n    d = n // 4 * 4\n    for i in range(n % 4):\n        if abs(ans) & 1:\n            ans += d + 1\n        else:\n            ans -= d + 1\n        d += 1\n    return ans\nt = get_int()\nwhile t:\n    (x0, n) = get_ints()\n    print(solve(x0, n))\n    t -= 1", "T = int(input())\nout = []\nfor _ in range(T):\n    (x, n) = map(int, input().split())\n    if x % 2 == 0:\n        if n % 4 == 0:\n            ans = x\n        elif n % 4 == 2:\n            ans = x + 1\n        elif n % 4 == 1:\n            ans = x - n\n        else:\n            ans = x + n + 1\n    elif x > 0:\n        if n % 4 == 2:\n            ans = x - 1\n        elif n % 4 == 0:\n            ans = x\n        elif n % 4 == 3:\n            ans = x - n - 1\n        else:\n            ans = x + n\n    elif n % 4 == 1:\n        ans = x + n\n    elif n % 4 == 2:\n        ans = x - 1\n    elif n % 4 == 3:\n        ans = x - n - 1\n    else:\n        ans = x\n    out.append(ans)\nprint(*out, sep='\\n')", "def position(current, jump_value):\n    if current % 2 == 0:\n        return current - jump_value\n    else:\n        return current + jump_value\n\ndef grasshopper(initial, jumps):\n    if initial % 2 == 0:\n        if jumps % 4 == 0:\n            return initial\n        elif jumps % 4 == 1:\n            return initial - 1 + int(jumps / 4) * -4\n        elif jumps % 4 == 2:\n            return initial + 1\n        else:\n            return initial + 4 + int(jumps / 4) * 4\n    elif jumps % 4 == 2:\n        return initial - 1\n    elif jumps % 4 == 0:\n        return initial\n    elif jumps % 4 == 1:\n        return initial + 1 + int(jumps / 4) * 4\n    else:\n        return initial - 4 + int(jumps / 4) * -4\nl = []\nt = int(input())\nfor i in range(t):\n    key = input()\n    inp = key.split(' ')\n    l.append(grasshopper(int(inp[0]), int(inp[1])))\nfor ans in l:\n    print(ans)", "a = int(input())\nres = []\nfor i in range(a):\n    inp = input().split()\n    k = int(inp[0])\n    n = int(inp[1])\n    if n % 4 == 0:\n        res.append(k)\n    elif k % 2 == 1:\n        if n % 4 == 1:\n            res.append(k + n)\n        elif n % 4 == 2:\n            res.append(k - 1)\n        else:\n            res.append(k - n - 1)\n    elif n % 4 == 1:\n        res.append(k - n)\n    elif n % 4 == 2:\n        res.append(k + 1)\n    else:\n        res.append(k + n + 1)\nfor i in res:\n    print(i)", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\nnum_cases = int(input())\nlist = [None] * num_cases\nfor i in range(num_cases):\n    (x, time) = get_ints()\n    if time % 4 == 0:\n        add = 0\n    elif time % 4 == 1:\n        add = -1 * time\n    elif time % 4 == 2:\n        add = 1\n    else:\n        add = time + 1\n    if x % 2 == 0:\n        list[i] = x + add\n        print(x + add)\n    else:\n        list[i] = x - add\n        print(x - add)", "import time\nt = int(input())\ninp = []\nfor i in range(t):\n    (tmp1, tmp2) = input().split()\n    inp.append(int(tmp1))\n    inp.append(int(tmp2))\nfor i in range(t):\n    a = inp[2 * i + 1] % 4\n    ans = inp[2 * i]\n    if a == 1:\n        if inp[2 * i] % 2 == 0:\n            ans -= inp[2 * i + 1]\n        else:\n            ans += inp[2 * i + 1]\n    if a == 2:\n        if inp[2 * i] % 2 == 0:\n            ans += 1\n        else:\n            ans -= 1\n    if a == 3:\n        if inp[2 * i] % 2 == 0:\n            ans += inp[2 * i + 1] + 1\n        else:\n            ans = ans - inp[2 * i + 1] - 1\n    print(ans)", "for s in [*open(0)][1:]:\n    (x, n) = map(int, s.split())\n    m = n % 4 - n\n    print(x + (1 - x % 2 * 2) * (0, m - 1, 1, 4 - m)[n % 4])", "for s in [*open(0)][1:]:\n    (x, n) = map(int, s.split())\n    print(x + (1 - x % 2 * 2) * (0, (m := (n % 4 - n - 1)), 1, 3 - m)[n % 4])", "for s in [*open(0)][1:]:\n    (x, n) = map(int, s.split())\n    print(x + (1 - x % 2 * 2) * (0, (m := (n % 4 - n - 1)), 1, 3 - m)[n % 4])", "for s in [*open(0)][1:]:\n    (x, n) = map(int, s.split())\n    print(x + (1 - x % 2 * 2) * (0, (m := (n % 4 - n - 1)), 1, 3 - m)[n % 4])", "import sys\n\ndef rall():\n    return sys.stdin.readlines()\n\ndef rl():\n    return sys.stdin.readline().strip()\n\ndef rl_types(types):\n    str_list = [x for x in sys.stdin.readline().strip().split(' ')]\n    return [types[i](str_list[i]) for i in range(len(str_list))]\n\ndef pr(something=''):\n    sys.stdout.write(str(something) + '\\n')\n\ndef pra(array):\n    sys.stdout.write(' '.join([str(x) for x in array]) + '\\n')\n\ndef solve(array):\n    return array\nNT = int(rl())\nfor ti in range(NT):\n    (x0, n) = map(int, rl().split(' '))\n    if n % 4 == 0:\n        loc = x0\n    else:\n        loc = x0\n        if x0 % 2 == 1:\n            if n % 4 == 1:\n                loc += n\n            if n % 4 == 2:\n                loc -= 1\n            if n % 4 == 3:\n                loc -= n + 1\n        else:\n            if n % 4 == 1:\n                loc -= n\n            if n % 4 == 2:\n                loc += 1\n            if n % 4 == 3:\n                loc += n + 1\n    pr(loc)", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    (x0, n) = map(int, input().split())\n    if n % 4 == 0:\n        answer = 0\n    elif n % 4 == 1:\n        answer = -n\n    elif n % 4 == 2:\n        answer = 1\n    else:\n        answer = 1 + n\n    if x0 & 1:\n        answer *= -1\n    print(x0 + answer)", "import sys\ninput = sys.stdin.readline\nprint = sys.stdout.write\nfor _ in range(int(input())):\n    (x, n) = map(int, input().split())\n    d = [0, n, -1, -n - 1][n % 4] * (1 if x % 2 else -1)\n    print(str(x + d) + '\\n')", "t = eval(input())\nresult = []\nfor tt in range(t):\n    (init, num) = input().split()\n    init = int(init)\n    num = int(num)\n    f = 1\n    sum = 0\n    if init % 2 == 0:\n        f = 0\n    yu = num % 4\n    if yu == 1:\n        sum = -num\n    elif yu == 2:\n        sum = 1\n    elif yu == 3:\n        sum = 1 + num\n    elif yu == 0:\n        sum = 0\n    if f:\n        sum = -sum\n    re = int(sum + init)\n    result.append(re)\nfor tt in result:\n    print(tt)", "for s in [*open(0)][1:]:\n    (x, n) = map(int, s.split())\n    print(x + sum((i * ((i % 4 // 2 ^ x % 2) * 2 - 1) for i in range(n - n % 4 + 1, n + 1))))", "for s in [*open(0)][1:]:\n    (x, n) = map(int, s.split())\n    print(x + sum((i * ((i & 2 ^ x % 2 * 2) - 1) for i in range(n - n % 4 + 1, n + 1))))", "for s in [*open(0)][1:]:\n    (x, n) = map(int, s.split())\n    print(x + sum((i * ((i & 2 ^ x % 2 * 2) - 1) for i in range(n, n - n % 4, -1))))", "for s in [*open(0)][1:]:\n    (x, n) = map(int, s.split())\n    print(x + (1 - x % 2 * 2) * (0, (m := (n % 4 - n - 1)), 1, 3 - m)[n % 4])", "for s in [*open(0)][1:]:\n    (x, n) = map(int, s.split())\n    print(x + sum((i * ((i % 4 // 2 ^ x % 2) * 2 - 1) for i in range(n - n % 4 + 1, n + 1))))", "s = int(input())\nresult = []\nfor i in range(s):\n    (x, n) = [int(j) for j in input().split(' ')]\n    if x % 2 == 0:\n        if n % 4 == 0:\n            r = x\n        elif n % 4 == 1:\n            r = x - n\n        elif n % 4 == 2:\n            r = x + 1\n        else:\n            r = x + n + 1\n    elif n % 4 == 0:\n        r = x\n    elif n % 4 == 1:\n        r = x + n\n    elif n % 4 == 2:\n        r = x - 1\n    else:\n        r = x - n - 1\n    result.append(r)\nfor i in result:\n    print(i)", "for s in [*open(0)][1:]:\n    (x, n) = map(int, s.split())\n    m = n % 4 - n\n    print(x + (1 - x % 2 * 2) * (0, m - 1, 1, 4 - m)[n % 4])", "from sys import stdin\ncount = int(stdin.readline())\n\ndef helper(rate, i):\n    nums = (-1 + -4 * i, 1, 4 + 4 * i, 0) if not rate else (1 + 4 * i, -1, -4 + -4 * i, 0)\n    return nums\nfor _ in range(count):\n    (start, jumps) = tuple(map(lambda x: int(x), stdin.readline().split()))\n    rate = True if start % 2 else False\n    tmp = jumps // 4\n    index = jumps % 4\n    start += helper(rate, tmp)[index - 1 if index else 3]\n    print(start)", "import sys\n\ndef solve():\n    T = int(sys.stdin.readline().rstrip())\n    for _ in range(T):\n        (x, n) = list(map(int, sys.stdin.readline().rstrip().split(' ')))\n        a = n // 4 * 4 + 1\n        for i in range(n % 4):\n            if x % 2 == 0:\n                x -= i + a\n            else:\n                x += i + a\n        print(x)\nsolve()", "for s in [*open(0)][1:]:\n    (x, n) = map(int, s.split())\n    print(x + (1 - x % 2 * 2) * (0, (m := (n % 4 - n - 1)), 1, 3 - m)[n % 4])", "import sys\n\ndef solve():\n    T = int(sys.stdin.readline().rstrip())\n    for _ in range(T):\n        (x, n) = list(map(int, sys.stdin.readline().rstrip().split(' ')))\n        a = n // 4 * 4 + 1\n        for i in range(n % 4):\n            if x % 2 == 0:\n                x -= i + a\n            else:\n                x += i + a\n        print(x)\nsolve()", "t = int(input())\nQ = []\nfor i in range(t):\n    L = input().split()\n    x0 = int(L[0])\n    n = int(L[1])\n    L = [x0, n]\n    if n % 4 == 0:\n        Q.append(x0)\n    elif x0 % 2 == 0:\n        if n % 4 == 1:\n            Q.append(x0 - n)\n        elif n % 4 == 2:\n            Q.append(x0 + 1)\n        elif n % 4 == 3:\n            Q.append(x0 + 1 + n)\n    elif n % 4 == 1:\n        Q.append(x0 + n)\n    elif n % 4 == 2:\n        Q.append(x0 - 1)\n    elif n % 4 == 3:\n        Q.append(x0 - 1 - n)\nfor i in Q:\n    print(i)", "for s in [*open(0)][1:]:\n    (x, n) = map(int, s.split())\n    print(x + sum((i * ((i & 2 ^ x % 2 * 2) - 1) for i in range(n - n % 4 + 1, n + 1))))", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    (x, n) = map(int, sys.stdin.readline().split())\n    remain = n % 4\n    if remain == 0:\n        hop = 0\n    elif remain == 1:\n        hop = n * -1\n    elif remain == 2:\n        hop = 1\n    elif remain == 3:\n        hop = n + 1\n    if x % 2 == 0:\n        res = x + hop\n    else:\n        res = x - hop\n    print(res)", "for s in [*open(0)][1:]:\n    (x, n) = map(int, s.split())\n    m = n % 4 - n\n    print(x + (1 - x % 2 * 2) * (0, m - 1, 1, 4 - m)[n % 4])", "answers = []\nfor i in range(int(input())):\n    (x0, n) = list(map(int, input().split(' ')))\n    if n % 4 == 0:\n        answers.append(x0)\n    if x0 % 2 == 0:\n        if n % 4 == 1:\n            answers.append(x0 - n)\n        if n % 4 == 2:\n            answers.append(x0 + 1)\n        if n % 4 == 3:\n            answers.append(x0 + n + 1)\n    if x0 % 2 == 1:\n        if n % 4 == 1:\n            answers.append(x0 + n)\n        if n % 4 == 2:\n            answers.append(x0 - 1)\n        if n % 4 == 3:\n            answers.append(x0 - n - 1)\nprint('\\n'.join(list(map(str, answers))))", "for s in [*open(0)][1:]:\n    (x, n) = map(int, s.split())\n    m = n % 4 - n\n    print(x + (1 - x % 2 * 2) * (0, m - 1, 1, 4 - m)[n % 4])", "for s in [*open(0)][1:]:\n    (x, n) = map(int, s.split())\n    print(x + (1 - x % 2 * 2) * (0, (m := (n % 4 - n - 1)), 1, 3 - m)[n % 4])", "for s in [*open(0)][1:]:\n    (x, n) = map(int, s.split())\n    print(x + (1 - x % 2 * 2) * (0, (m := (n % 4 - n - 1)), 1, 3 - m)[n % 4])", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nH = 1000000000 + 7\nfor _ in range(I()):\n    (x, n) = M()\n    if x % 2 == 0:\n        if n % 4 == 0:\n            print(x)\n        elif n % 4 == 1:\n            print(x - n)\n        elif n % 4 == 2:\n            print(x + 1)\n        else:\n            print(x + n + 1)\n    elif n % 4 == 0:\n        print(x)\n    elif n % 4 == 1:\n        print(x + n)\n    elif n % 4 == 2:\n        print(x - 1)\n    else:\n        print(x - n - 1)", "from sys import stdin\n\ndef get_position(initial, step):\n    result = 0\n    if initial % 2 == 0:\n        (d, r) = divmod(step, 4)\n        if r == 0:\n            result = 0\n        elif r == 1:\n            result = -(d * 4 + 1)\n        elif r == 2:\n            result = 1\n        else:\n            result = (d + 1) * 4\n        result += initial\n    else:\n        if step == 1:\n            result = 2\n        else:\n            step -= 2\n            (d, r) = divmod(step, 4)\n            if r == 0:\n                result = 0\n            elif r == 1:\n                result = -(d * 4 + 3)\n            elif r == 2:\n                result = 1\n            else:\n                result = (d + 1) * 4 + 2\n        result += initial - 1\n    return result\nt = int(stdin.readline())\nfor _ in range(t):\n    parts = [int(d) for d in stdin.readline().strip().split()]\n    initial = parts[0]\n    step = parts[1]\n    result = get_position(initial, step)\n    print(result)", "t = int(input())\nans = []\nfor i in range(t):\n    (x, l) = map(int, input().split())\n    if x % 2 == 1:\n        x -= l // 2 // 2 + l // 2 % 2\n        x += l // 2 // 2\n        if x % 2 == 0:\n            x -= l * (l % 2)\n        else:\n            x += l * (l % 2)\n    else:\n        x += l // 2 // 2 + l // 2 % 2\n        x -= l // 2 // 2\n        if x % 2 == 0:\n            x -= l * (l % 2)\n        else:\n            x += l * (l % 2)\n    ans.append(x)\nfor i in ans:\n    print(i)", "def main(k, n):\n    if k % 2 == 0:\n        r = n % 4\n        if r == 0:\n            print(k)\n        elif r == 1:\n            print(k - n)\n        elif r == 2:\n            print(k + 1)\n        else:\n            print(k + n + 1)\n    else:\n        r = n % 4\n        if r == 0:\n            print(k)\n        elif r == 1:\n            print(k + n)\n        elif r == 2:\n            print(k - 1)\n        else:\n            print(k - n - 1)\narr = []\nt = int(input())\nfor i in range(t):\n    arr.append(list(map(int, input().split())))\nfor val in arr:\n    main(val[0], val[1])", "t = int(input())\nout = []\nfor i in range(t):\n    (x, n) = map(int, input().split())\n    tmp = x\n    if tmp % 2 == 0:\n        if n % 4 == 3:\n            x = tmp + n + 1\n        elif n % 4 == 1:\n            x = tmp - n\n        elif n % 4 == 2:\n            x = tmp + 1\n        elif n % 4 == 0:\n            x = tmp\n    elif n % 4 == 3:\n        x = tmp - n - 1\n    elif n % 4 == 1:\n        x = tmp + n\n    elif n % 4 == 2:\n        x = tmp - 1\n    elif n % 4 == 0:\n        x = tmp\n    if n == 0:\n        x = tmp\n    out.append(x)\nfor i in range(len(out)):\n    print(out[i])", "import sys\n\ndef function(x, n):\n    j = n % 4\n    if j == 0:\n        return x\n    if j == 1 and x % 2 == 1:\n        return x + n\n    if j == 2 and x % 2 == 1:\n        return x - 1\n    if j == 3 and x % 2 == 1:\n        return x - 1 - n\n    if j == 1 and x % 2 == 0:\n        return x - n\n    if j == 2 and x % 2 == 0:\n        return x + 1\n    if j == 3 and x % 2 == 0:\n        return x + 1 + n\n\ndef main():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        (x, n) = map(int, sys.stdin.readline().strip().split())\n        res = function(x, n)\n        print(res)\nmain()", "def func(x, y):\n    if y % 4 == 0:\n        return x\n    elif (y - 1) % 4 == 0 and x % 2 == 0:\n        return -y + x\n    elif (y - 1) % 4 == 0 and x % 2 == 1:\n        return y + x\n    elif (y - 2) % 4 == 0 and x % 2 == 0:\n        return 1 + x\n    elif (y - 2) % 4 == 0 and x % 2 == 1:\n        return -1 + x\n    elif (y - 3) % 4 == 0 and x % 2 == 0:\n        return 1 + x + y\n    elif (y - 3) % 4 == 0 and x % 2 == 1:\n        return -1 + x - y\nn = int(input())\nout = []\nfor i in range(n):\n    string = input().split()\n    start = int(string[0])\n    jumps = int(string[1])\n    out.append(func(start, jumps))\nfor i in out:\n    print(i)", "for s in [*open(0)][1:]:\n    (x, n) = map(int, s.split())\n    print(x + sum((i * ((i % 4 // 2 ^ x % 2) * 2 - 1) for i in range(n - n % 4 + 1, n + 1))))", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nt = inp()\nfor i in range(t):\n    [x, n] = inlt()\n    total = 1 + (n - 1) // 4 * 4\n    remainder = (n - 1) % 4\n    for i in range(remainder):\n        if (n - i) % 4 <= 1:\n            total += n - i\n        else:\n            total -= n - i\n    if x % 2 == 0:\n        print(x - total)\n    else:\n        print(x + total)", "T = int(input())\nOUTPUT = []\nfor testcase in range(T):\n    (x, n) = [int(a) for a in input().split()]\n    M = 4 * (n // 4)\n    R = n % 4\n    if R == 0:\n        OUTPUT.append(x)\n    elif x % 2 == 0:\n        if R == 1:\n            OUTPUT.append(x - (M + 1))\n        elif R == 2:\n            OUTPUT.append(x + 1)\n        else:\n            OUTPUT.append(x + (M + 4))\n    elif R == 1:\n        OUTPUT.append(x + (M + 1))\n    elif R == 2:\n        OUTPUT.append(x - 1)\n    else:\n        OUTPUT.append(x - (M + 4))\nfor r in OUTPUT:\n    print(r)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    (x, n) = map(int, input().split())\n    y = n % 4\n    if x % 2 == 0:\n        if y == 0:\n            ans = x\n        elif y == 1:\n            ans = x - n\n        elif y == 2:\n            ans = x + 1\n        elif y == 3:\n            ans = x + n + 1\n    elif y == 0:\n        ans = x\n    elif y == 1:\n        ans = x + n\n    elif y == 2:\n        ans = x - 1\n    elif y == 3:\n        ans = x - n - 1\n    print(ans)\n    t -= 1", "k = []\nfor i in range(int(input())):\n    (x, n) = map(int, input().split())\n    if n == 0:\n        k.append(x)\n    elif x % 2 == 0:\n        if n % 2 == 0:\n            if n / 2 % 2 != 0:\n                k.append(x + 1)\n            else:\n                k.append(x + (n - 1) + 1 - n)\n        elif (n + 1) / 2 % 2 != 0:\n            k.append(x - n)\n        else:\n            k.append(x + 1 + n)\n    elif n % 2 == 0:\n        if n / 2 % 2 != 0:\n            k.append(x + (n - 1) - n)\n        else:\n            k.append(x)\n    elif (n + 1) / 2 % 2 != 0:\n        k.append(x + n)\n    else:\n        k.append(x - 1 - n)\nfor t in k:\n    print(t)", "def distance_when_even_coordinate(number_jumps):\n    if number_jumps % 4 == 0:\n        return 0\n    elif number_jumps % 4 == 1:\n        return -1 * number_jumps\n    elif number_jumps % 4 == 2:\n        return 1\n    elif number_jumps % 4 == 3:\n        return number_jumps + 1\n\ndef distance_when_odd_coordinate(number_jumps):\n    if number_jumps % 4 == 0:\n        return 0\n    elif number_jumps % 4 == 1:\n        return number_jumps\n    elif number_jumps % 4 == 2:\n        return -1\n    elif number_jumps % 4 == 3:\n        return -1 * (number_jumps + 1)\n\ndef grasshoper(initial_position, number_jumps):\n    if initial_position % 2 == 0:\n        return initial_position + distance_when_even_coordinate(number_jumps)\n    else:\n        return initial_position + distance_when_odd_coordinate(number_jumps)\n\ndef parse_input():\n    number_tests = int(input())\n    tests = []\n    for _ in range(number_tests):\n        line = input()\n        (initial_coordinate, number_jumps) = line.split()\n        tests.append((int(initial_coordinate), int(number_jumps)))\n    return tests\n\ndef generate_output(results):\n    for result in results:\n        print(f'{result}')\n\ndef main():\n    tests = parse_input()\n    results = []\n    for test in tests:\n        results.append(grasshoper(test[0], test[1]))\n    generate_output(results)\nmain()", "for s in [*open(0)][1:]:\n    (x, k) = map(int, s.split())\n    k += 1\n    x += (1 - 2 * (x % 2)) * (k // 4 * 4)\n    for i in range(k // 4 * 4, k):\n        x += (2 * (x % 2) - 1) * i\n    print(x)", "from sys import stdin\nrl = stdin.readline\n\ndef f(x0, n):\n    multiplier = -1 if x0 & 1 else 1\n    if n % 4 == 0:\n        return x0\n    if n % 2 == 0:\n        return x0 + multiplier\n    if (n - 1) % 4 == 0:\n        return x0 - n * multiplier\n    if (n - 1) % 2 == 0:\n        return x0 + (n + 1) * multiplier\nt = int(rl())\nresults = []\nfor _ in range(t):\n    (x0, n) = map(int, rl().split(' '))\n    results.append(f(x0, n))\nfor r in results:\n    print(r)", "def counttrace(n):\n    resnum = n % 4\n    if resnum == 0:\n        return 0\n    elif resnum == 1:\n        return -n\n    elif resnum == 2:\n        return 1\n    else:\n        return n + 1\nt = int(input())\nx0 = []\nn = []\nfor i in range(t):\n    str1 = input()\n    x0.append(int(str1.split()[0]))\n    n.append(int(str1.split()[1]))\nfor i in range(t):\n    print(x0[i] + counttrace(n[i]) if x0[i] % 2 == 0 else x0[i] - counttrace(n[i]))", "for s in [*open(0)][1:]:\n    (x, n) = map(int, s.split())\n    m = n % 4 - n\n    print(x + (1 - x % 2 * 2) * (0, m - 1, 1, 4 - m)[n % 4])", "for s in [*open(0)][1:]:\n    (x, n) = map(int, s.split())\n    print(x + sum((i * ((i & 2 ^ x % 2 * 2) - 1) for i in range(n - n % 4 + 1, n + 1))))", "import math\nimport sys\nimport itertools\nimport fractions\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\nt = int(wtf[0])\nfor s in wtf[1:]:\n    (x0, n) = map(int, s.split())\n    if n % 4 == 0:\n        print(x0)\n    elif (n - 3) % 4 == 0:\n        print(x0 + n + 1 if x0 % 2 == 0 else x0 - n - 1)\n    elif (n - 2) % 4 == 0:\n        print(x0 + 1 if x0 % 2 == 0 else x0 - 1)\n    elif (n - 1) % 4 == 0:\n        print(x0 - n if x0 % 2 == 0 else x0 + n)", "t = int(input())\nl = []\nfor i in range(t):\n    (x, n) = map(int, input().split())\n    for i in range(n // 4 * 4 + 1, n + 1):\n        if x % 2 == 0:\n            x -= i\n        else:\n            x += i\n    l.append(x)\nfor i in l:\n    print(i)", "t = int(input())\nlst = []\nwhile t > 0:\n    (x, d) = input().split(' ')\n    (x, d) = (int(x), int(d))\n    if d == 0:\n        lst.append(x)\n    elif x % 2 == 0:\n        if d % 2 == 0 and d > 2:\n            if d % 4 == 0:\n                lst.append(x)\n            elif d % 2 == 0:\n                lst.append(x + 1)\n        elif d % 2 != 0 and d > 2:\n            if (d - 1) % 4 == 0:\n                lst.append(x - d)\n            else:\n                lst.append(x + d + 1)\n        elif d == 1:\n            lst.append(x - 1)\n        elif d == 2:\n            lst.append(x + 1)\n    elif d % 2 == 0 and d > 2:\n        if d % 4 == 0:\n            lst.append(x)\n        elif d % 2 == 0:\n            lst.append(x - 1)\n    elif d % 2 != 0 and d > 2:\n        if (d - 1) % 4 == 0:\n            lst.append(x + d)\n        else:\n            lst.append(x - d - 1)\n    elif d == 1:\n        lst.append(x + 1)\n    elif d == 2:\n        lst.append(x - 1)\n    t -= 1\nfor w in lst:\n    print(w)", "import sys\n\ndef get_int():\n    return int(sys.stdin.readline())\n\ndef get_string():\n    return sys.stdin.readline().strip()\nFILE = False\nif FILE:\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nt = get_int()\nanswer = []\nfor i in range(0, t):\n    values = get_string().split()\n    x0 = int(values[0])\n    n = int(values[1])\n    if x0 % 2 == 0:\n        if n % 4 == 0:\n            tot = x0\n        elif n % 4 == 1:\n            tot = -n + x0\n        elif n % 4 == 2:\n            tot = 1 + x0\n        else:\n            tot = n + 1 + x0\n    elif n % 4 == 0:\n        tot = x0\n    elif n % 4 == 1:\n        tot = n + x0\n    elif n % 4 == 2:\n        tot = x0 - 1\n    else:\n        tot = -(n + 1) + x0\n    answer.append(str(tot))\nfor item in answer:\n    sys.stdout.write(item)\n    sys.stdout.write('\\n')", "from collections import deque\nimport heapq\nfrom math import sqrt\nimport operator\nfrom operator import itemgetter\nimport sys\nimport time\nimport copy\ninf_var = 0\nif inf_var == 1:\n    inf = open('input.txt', 'r')\nelse:\n    inf = sys.stdin\ninput = inf.readline\n\ndef read_one_int():\n    return int(input().rstrip('\\n'))\n\ndef read_one_float():\n    return float(input().rstrip('\\n'))\n\ndef read_list_of_ints():\n    res = [int(val) for val in input().rstrip('\\n').split()]\n    return res\n\ndef read_list_of_ints_zero():\n    return [int(val) - 1 for val in input().rstrip('\\n').split()]\n\ndef read_str():\n    return input().rstrip()\n\ndef main():\n    tests = read_one_int()\n    for _ in range(tests):\n        (start, jumps) = read_list_of_ints()\n        pos = 0\n        if start % 2:\n            pos = start - jumps // 4 * 4\n        else:\n            pos = start + jumps // 4 * 4\n        for i in range(jumps // 4 * 4, jumps + 1):\n            if pos % 2:\n                pos += i\n            else:\n                pos -= i\n        print(pos)\nmain()", "def solutionB():\n    n = int(input())\n    cases = [[int(i) for i in input().split(' ')] for _ in range(n)]\n    for i in cases:\n        if i[0] % 2 == 0 and i[1] % 2 == 0:\n            if i[1] / 2 % 2 == 0:\n                print(i[0])\n            else:\n                print(i[0] + 1)\n        elif i[0] % 2 != 0 and i[1] % 2 != 0:\n            if (i[1] - 1) / 2 % 2 == 0:\n                print(i[0] + i[1])\n            else:\n                print(i[0] - i[1] - 1)\n        elif i[0] % 2 == 0 and i[1] % 2 != 0:\n            if (i[1] - 1) / 2 % 2 == 0:\n                print(i[0] - i[1])\n            else:\n                print(i[0] + i[1] + 1)\n        elif i[1] / 2 % 2 == 0:\n            print(i[0])\n        else:\n            print(i[0] - 1)\nsolutionB()", "from math import fmod\nt = int(input())\n\ndef find_pos(x0, n):\n    x = x0\n    four = n % 4\n    if four == 0:\n        return x0\n    else:\n        d = n - four + 1\n        for i in range(four):\n            if x % 2 == 0:\n                x -= d\n            else:\n                x += d\n            d += 1\n    return x\nmass = []\nfor i in range(t):\n    (x0, n) = map(int, input().split())\n    mass.append([x0, n])\nfor i in mass:\n    print(find_pos(i[0], i[1]))", "t = int(input())\nxn = []\nx = []\nn = []\nnj = 1\nwhile t > 0:\n    xn.append(input())\n    t = t - 1\nfor x in range(len(xn)):\n    xn[x] = xn[x].split(' ')\nfor x in xn:\n    if int(x[1]) % 4 == 0:\n        print(x[0])\n    if (int(x[1]) - 1) % 4 == 0:\n        if int(x[0]) % 2 == 0:\n            print(int(x[0]) - int(x[1]))\n        else:\n            print(int(x[0]) + int(x[1]))\n    if (int(x[1]) - 2) % 4 == 0:\n        if int(x[0]) % 2 == 0:\n            print(int(x[0]) + 1)\n        else:\n            print(int(x[0]) - 1)\n    if (int(x[1]) - 3) % 4 == 0:\n        if int(x[0]) % 2 == 0:\n            print(int(x[0]) + int(x[1]) + 1)\n        else:\n            print(int(x[0]) - int(x[1]) - 1)", "for s in [*open(0)][1:]:\n    (x, R) = map(int, s.split())\n    print(x + sum((i * ((i & 2 ^ x % 2 * 2) - 1) for i in range(R - R % 4 + 1, R + 1))))", "for s in [*open(0)][1:]:\n    (x, n) = map(int, s.split())\n    print(x + (1 - x % 2 * 2) * (0, (m := (n % 4 - n - 1)), 1, 3 - m)[n % 4])", "st = []\nn = []\nnoe = int(input())\nfor i in range(noe):\n    (x, y) = input().split()\n    st.append(x)\n    n.append(y)\nans = []\nfor c in range(noe):\n    pos = int(st[c])\n    if pos % 2 == 0:\n        if int(n[c]) % 4 == 0:\n            toadd = pos\n        elif int(n[c]) % 4 == 1:\n            toadd = pos - int(n[c])\n        elif int(n[c]) % 4 == 2:\n            toadd = pos + 1\n        elif int(n[c]) % 4 == 3:\n            toadd = pos + 1 + int(n[c])\n    elif int(n[c]) % 4 == 0:\n        toadd = pos\n    elif int(n[c]) % 4 == 1:\n        toadd = pos + int(n[c])\n    elif int(n[c]) % 4 == 2:\n        toadd = pos - 1\n    elif int(n[c]) % 4 == 3:\n        toadd = pos - 1 - int(n[c])\n    ans.append(toadd)\nprint(*ans, sep='\\n')", "def ans(a, b):\n    if a % 2 == 0:\n        if b % 4 == 1:\n            print(a - 1 - b // 4 * 4)\n        elif b % 4 == 2:\n            print(a + 1)\n        elif b % 4 == 3:\n            print(a + 4 + b // 4 * 4)\n        else:\n            print(a)\n    if a % 2 == 1:\n        if b % 4 == 1:\n            print(a + 1 + b // 4 * 4)\n        elif b % 4 == 2:\n            print(a - 1)\n        elif b % 4 == 3:\n            print(a - 4 - b // 4 * 4)\n        else:\n            print(a)\nl1 = []\nn = int(input())\nfor i in range(n):\n    l1.append([int(x) for x in input().split()])\nfor i in range(n):\n    ans(l1[i][0], l1[i][1])\nprint()", "n = int(input())\nfor i in range(n):\n    a_arr = input().split()\n    x = [int(i) for i in a_arr]\n    n = x[0]\n    m = x[1]\n    count = m % 4\n    if count == 0:\n        print(n)\n    elif count == 2:\n        if n % 2:\n            print(n - 1)\n        else:\n            print(n + 1)\n    elif count == 1:\n        if n % 2:\n            print(n + m)\n        else:\n            print(n - m)\n    elif n % 2 % 2:\n        print(n + (m - 2) - m - m + 1)\n    else:\n        print(n - (m - 2) + m + m - 1)", "T = int(input())\nfor t in range(T):\n    (x, d) = map(int, input().split())\n    if x % 2 == 1:\n        x = x - d // 2 % 2\n        if d % 2 == 1:\n            if d // 2 % 2 == 0:\n                x += d\n            else:\n                x -= d\n    else:\n        x = x + d // 2 % 2\n        if d % 2 == 1:\n            if d // 2 % 2 == 0:\n                x -= d\n            else:\n                x += d\n    print(x)", "t = int(input())\nfor i in range(t):\n    inp = input()\n    initial = int(inp.split()[0])\n    n = int(inp.split()[1])\n    rem = n % 4\n    q = n // 4\n    if rem == 0:\n        print(initial)\n        continue\n    if rem == 2:\n        for j in range(1, 3):\n            if initial % 2 == 0:\n                initial -= j\n            else:\n                initial += j\n        print(initial)\n        continue\n    if rem == 1:\n        if initial % 2 == 0:\n            print(initial - 1 - 4 * q)\n        else:\n            print(initial + 1 + 4 * q)\n    if rem == 3:\n        if initial % 2 == 0:\n            print(initial + 4 + 4 * q)\n        else:\n            print(initial - 4 - 4 * q)", "import math\ntest = int(input())\nfor i in range(test):\n    (a, b) = map(int, input().split())\n    if a % 2 == 0:\n        if b % 2 == 0:\n            if b // 2 % 2 == 0:\n                print(a)\n            else:\n                print(a + 1)\n        elif b // 2 % 2 == 0:\n            print(a - b)\n        else:\n            print(a + 1 + b)\n    elif b % 2 == 0:\n        if b // 2 % 2 == 0:\n            print(a)\n        else:\n            print(a - 1)\n    elif b // 2 % 2 == 0:\n        print(a + b)\n    else:\n        print(a - 1 - b)", "a = eval(input())\ne = []\nfor i in range(a):\n    (x, y) = map(int, input().split())\n    c = 0\n    if x % 2 == 0:\n        if y % 4 == 0:\n            e.append(x)\n        elif y % 4 == 1:\n            e.append(x - y)\n        elif y % 4 == 2:\n            e.append(x + 1)\n        elif y % 4 == 3:\n            e.append(x + y + 1)\n    elif y % 4 == 0:\n        e.append(x)\n    elif y % 4 == 1:\n        e.append(x + y)\n    elif y % 4 == 2:\n        e.append(x - 1)\n    elif y % 4 == 3:\n        e.append(x - y - 1)\nfor i in e:\n    print(i)", "def solve(start, jumps):\n    ost = jumps % 4\n    curr = start\n    sign = 0\n    if start % 2 == 0:\n        sign = -1\n    else:\n        sign = 1\n    for (i, num) in enumerate(range(jumps - ost + 1, jumps + 1)):\n        curr += sign * num\n        if i == 0 or i == 2:\n            sign = -sign\n    return curr\nn = int(input())\nout = []\nfor i in range(n):\n    input_data = str(input()).split(' ')\n    start = int(input_data[0])\n    jumps = int(input_data[1])\n    out.append(solve(start, jumps))\nfor i in out:\n    print(i)", "t = int(input())\nlist1 = []\nfor i in range(t):\n    list1.append([int(x) for x in input().split()])\nfor i in range(t):\n    s = list1[i][0]\n    if s % 2 == 0:\n        m = (list1[i][1] - 1) % 4\n        if m == 0:\n            s = s - 1 - 4 * ((list1[i][1] - 1) // 4)\n        elif m == 1:\n            s = s - 1 - 4 * ((list1[i][1] - 1) // 4) + list1[i][1]\n        elif m == 2:\n            s = s - 1 - 4 * ((list1[i][1] - 1) // 4) + 2 * list1[i][1] - 1\n        elif m == 3:\n            s = s - 1 - 4 * ((list1[i][1] - 1) // 4) + list1[i][1] - 3\n    else:\n        m = (list1[i][1] - 1) % 4\n        if m == 0:\n            s = s + 1 + 4 * ((list1[i][1] - 1) // 4)\n        elif m == 1:\n            s = s + 1 + 4 * ((list1[i][1] - 1) // 4) - list1[i][1]\n        elif m == 2:\n            s = s + 1 + 4 * ((list1[i][1] - 1) // 4) - 2 * list1[i][1] + 1\n        elif m == 3:\n            s = s + 1 + 4 * ((list1[i][1] - 1) // 4) - list1[i][1] + 3\n    print(s)", "k = int(input())\nresults = []\nfor i in range(k):\n    line = input().split()\n    x = int(line[0])\n    n = int(line[1])\n    if n > 4:\n        h = n % 4\n        jump = n - h + 1\n        for j in range(h):\n            if x % 2 == 0:\n                x -= jump\n                jump += 1\n            else:\n                x += jump\n                jump += 1\n    else:\n        jump = 1\n        for j in range(n):\n            if x % 2 == 0:\n                x -= jump\n                jump += 1\n            else:\n                x += jump\n                jump += 1\n    results.append(x)\nfor u in range(len(results)):\n    print(results[u])", "t = int(input())\nres = []\nfor j in range(t):\n    a = list(map(int, input().split()))\n    x0 = a[0]\n    n = a[1]\n    k = int(n // 4)\n    for i in range(n - k * 4):\n        if x0 % 2 == 0:\n            x0 -= i + 1 + k * 4\n        else:\n            x0 += i + 1 + k * 4\n    res.append(x0)\nfor index in range(t):\n    print(res[index])", "t = int(input())\nx = []\nn = []\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    x.append(a)\n    n.append(b)\nfor i in range(t):\n    if x[i] % 2 == 0:\n        a = n[i] % 4\n        n[i] = n[i] - a + 1\n        if a == 0:\n            print(x[i])\n        if a == 1:\n            x[i] -= n[i]\n            print(x[i])\n        if a == 2:\n            x[i] -= n[i]\n            x[i] += n[i] + 1\n            print(x[i])\n        if a == 3:\n            x[i] += 1\n            x[i] += n[i] + 2\n            print(x[i])\n    else:\n        a = n[i] % 4\n        n[i] = n[i] - a + 1\n        if a == 0:\n            print(x[i])\n        if a == 1:\n            x[i] += n[i]\n            print(x[i])\n        if a == 2:\n            x[i] += n[i]\n            x[i] -= n[i] + 1\n            print(x[i])\n        if a == 3:\n            x[i] -= 1\n            x[i] -= n[i] + 2\n            print(x[i])", "tc = int(input())\nfor t in range(tc):\n    arr = input().split()\n    i = int(arr[0])\n    n = int(arr[1])\n    t = n\n    if n % 4 == 0:\n        print(i)\n    elif n % 4 == 1:\n        if i & 1 == 0:\n            print(i - n)\n        else:\n            print(i + n)\n    elif n % 4 == 2:\n        if i & 1 == 0:\n            print(i + 1)\n        else:\n            print(i - 1)\n    elif i & 1 == 0:\n        print(i + n + 1)\n    else:\n        print(i - n - 1)", "def main():\n    (x, n) = map(int, input().split())\n    ans = 0\n    if abs(x) % 2 == 1:\n        extra = (n - 1) // 4\n        ans += 4 * extra\n        m = n % 4\n        if m == 1:\n            ans += 1\n            return x + ans\n        if m == 2:\n            ans -= n - 1\n            return x + ans\n        if m == 3:\n            ans -= 2 * n - 2\n            return x + ans\n        else:\n            ans -= n - 4\n            return x + ans\n    else:\n        extra = (n - 1) // 4\n        ans -= 4 * extra\n        m = n % 4\n        if m == 1:\n            ans -= 1\n            return x + ans\n        if m == 2:\n            ans += n - 1\n            return x + ans\n        if m == 3:\n            ans += 2 * n - 2\n            return x + ans\n        else:\n            ans += n - 4\n            return x + ans\n    return x + ans\nfor _ in range(int(input())):\n    print(main())", "def main():\n    (x, n) = map(int, input().split())\n    ans = 0\n    if abs(x) % 2 == 1:\n        extra = (n - 1) // 4\n        ans += 4 * extra\n        m = n % 4\n        if m == 1:\n            ans += 1\n        elif m == 2:\n            ans -= n - 1\n        elif m == 3:\n            ans -= 2 * n - 2\n        else:\n            ans -= n - 4\n    else:\n        extra = (n - 1) // 4\n        ans -= 4 * extra\n        m = n % 4\n        if m == 1:\n            ans -= 1\n        elif m == 2:\n            ans += n - 1\n        elif m == 3:\n            ans += 2 * n - 2\n        else:\n            ans += n - 4\n    return x + ans\nfor _ in range(int(input())):\n    print(main())", "def main():\n    (x, n) = map(int, input().split())\n    ans = 0\n    extra = (n - 1) // 4\n    ans += 4 * extra\n    m = n % 4\n    if m == 1:\n        ans += 1\n    elif m == 2:\n        ans -= n - 1\n    elif m == 3:\n        ans -= 2 * n - 2\n    else:\n        ans -= n - 4\n    if abs(x) % 2 == 1:\n        return x + ans\n    else:\n        return x - ans\nfor _ in range(int(input())):\n    print(main())", "t = int(input())\nfor j in range(t):\n    (xo, n) = map(int, input().split())\n    distance = 0\n    if n % 4 == 0:\n        distance = 0\n    elif n % 4 == 3:\n        distance = n + 1\n    elif n % 4 == 2:\n        distance = 1\n    elif n % 4 == 1:\n        distance = -n\n    if xo % 2 == 0:\n        print(xo + distance)\n    else:\n        print(xo - distance)", "t = int(input())\nmaps = [lambda x: 0, lambda x: x, lambda x: -1, lambda x: -x - 1]\nfor _ in range(t):\n    (x, n) = map(int, input().split())\n    d = maps[n % 4](n)\n    print(x - d if x % 2 == 0 else x + d)", "t = int(input())\nmaps = [lambda x: 0, lambda x: x, lambda x: -1, lambda x: -x - 1]\nfor _ in range(t):\n    (x0, n) = map(int, input().split())\n    d = maps[n % 4](n)\n    print(x0 - d if x0 % 2 == 0 else x0 + d)", "t = int(input())\nmaps = [lambda x: 0, lambda x: x, lambda x: -1, lambda x: -x - 1]\nfor _ in range(t):\n    (x0, n) = map(int, input().split())\n    d = maps[n % 4](n)\n    print(x0 - d if x0 % 2 == 0 else x0 + d)", "t = int(input())\nmaps = [lambda x: 0, lambda x: x, lambda x: -1, lambda x: -x - 1]\nfor _ in range(t):\n    (x0, n) = map(int, input().split())\n    d = maps[n % 4](n)\n    print(x0 - d if x0 % 2 == 0 else x0 + d)", "t = int(input())\nmaps = [lambda x: 0, lambda x: x, lambda x: -1, lambda x: -x - 1]\nfor _ in range(t):\n    (x0, n) = map(int, input().split())\n    d = maps[n % 4](n)\n    print(x0 - d if x0 % 2 == 0 else x0 + d)", "t = int(input())\nfor i in range(t):\n    n = list(map(int, input().split()))\n    z = 0\n    ans = 0\n    if n[1] % 4 == 1:\n        z = n[1]\n        if n[0] % 2 == 0:\n            ans = n[0] - z\n        else:\n            ans = n[0] + z\n    elif n[1] % 4 == 2:\n        z = 1\n        if n[0] % 2 == 0:\n            ans = n[0] + z\n        else:\n            ans = n[0] - z\n    elif n[1] % 4 == 3:\n        z = n[1] + 1\n        if n[0] % 2 == 0:\n            ans = n[0] + z\n        else:\n            ans = n[0] - z\n    else:\n        ans = n[0]\n    print(ans)", "def f(n, a):\n    i = n % 4\n    if i == 0:\n        return 0\n    if i == 1:\n        return -n * a\n    if i == 2:\n        return 1 * a\n    if i == 3:\n        return (n + 1) * a\nc = int(input())\nfor i in range(c):\n    (x, n) = map(int, input().split())\n    a = (-1) ** (x % 2)\n    print(x + f(n, a))"]