["import collections\nimport heapq\nimport sys\nimport math\nimport bisect\nimport os\nfrom io import BytesIO, IOBase\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m) = list(map(int, input().split()))\n    nn = n\n    while n % 10 == 0:\n        n //= 10\n    tot = 1\n    while n % 5 == 0 and tot * 2 <= m:\n        tot *= 2\n        n //= 5\n    while n % 2 == 0 and tot * 5 <= m:\n        tot *= 5\n        n //= 2\n    while tot * 10 <= m:\n        tot *= 10\n    print(nn * tot * (m // tot))\nfor i in range(int(input())):\n    solve()", "t = int(input(''))\nC = [0] * t\nfor i in range(t):\n    LRX = input('').split(' ')\n    n = int(LRX[0])\n    m = int(LRX[1])\n    n2 = 1\n    k = 1\n    while n % 10 == 0:\n        n //= 10\n        n2 *= 10\n    while n % 2 == 0:\n        if 5 * k <= m:\n            k = 5 * k\n        n //= 2\n        n2 *= 2\n    while n % 5 == 0:\n        if 2 * k <= m:\n            k = 2 * k\n        n //= 5\n        n2 *= 5\n    while 10 * k <= m:\n        k *= 10\n    k *= m // k\n    C[i] = k * n * n2\nfor j in C:\n    print(j)", "import sys\ninput = sys.stdin.readline\nt = int(input())\n\ndef maxi(n, m):\n    (two, five) = divide(n)\n    if two == five:\n        if m < 10:\n            return n * m\n        else:\n            return n * 10 ** (len(str(m)) - 1) * int(str(m)[0])\n    elif two > five:\n        two -= five\n        get_more = get_mores(5, m)\n        if get_more > two:\n            m = m // 5 ** two\n            n *= 5 ** two\n            return n * 10 ** (len(str(m)) - 1) * int(str(m)[0])\n        return n * 5 ** get_more * (m // 5 ** get_more)\n    else:\n        five -= two\n        get_more = get_mores(2, m)\n        if get_more > five:\n            m = m // 2 ** five\n            n *= 2 ** five\n            return n * 10 ** (len(str(m)) - 1) * int(str(m)[0])\n        return n * 2 ** get_more * (m // 2 ** get_more)\n\ndef get_mores(what, m):\n    tmp = what\n    get_more = 0\n    while True:\n        if m // tmp > 0:\n            get_more += 1\n            tmp *= what\n            continue\n        break\n    return get_more\n\ndef divide(n):\n    five = 0\n    tmp = 5\n    while True:\n        if n % tmp == 0:\n            five += 1\n            tmp *= 5\n            continue\n        break\n    two = 0\n    tmp = 2\n    while True:\n        if n % tmp == 0:\n            two += 1\n            tmp *= 2\n            continue\n        break\n    return (two, five)\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    print(maxi(n, m))", "t = int(input())\nanswers = []\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    (n_, m_) = (n, m)\n    (two, five) = (0, 0)\n    while n_ % 2 == 0:\n        n_ //= 2\n        two += 1\n    while n_ % 5 == 0:\n        n_ //= 5\n        five += 1\n    tmp = 1\n    if two > five:\n        for i in range(two - five):\n            if m_ < 5:\n                break\n            m_ //= 5\n            tmp *= 5\n    else:\n        for i in range(five - two):\n            if m_ < 2:\n                break\n            m_ //= 2\n            tmp *= 2\n    k = int(str(m_)[0]) * 10 ** (len(str(m_)) - 1) * tmp\n    answers.append(n * k)\nfor answer in answers:\n    print(answer)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    fiveCount = twoCount = 0\n    hold = n\n    while hold:\n        if hold % 2 == 0:\n            twoCount += 1\n            hold //= 2\n        elif hold % 5 == 0:\n            fiveCount += 1\n            hold //= 5\n        else:\n            break\n    if fiveCount == twoCount:\n        curr = 1\n        tmp = 10\n        while tmp > 1:\n            if tmp * curr <= m:\n                curr *= tmp\n            else:\n                tmp -= 1\n        print(curr * n)\n    elif fiveCount > twoCount:\n        fiveCount -= twoCount\n        curr = 1\n        while fiveCount and curr * 2 <= m:\n            curr *= 2\n            fiveCount -= 1\n        if fiveCount:\n            temp = 10\n            while temp > 1:\n                if curr * temp <= m:\n                    curr *= temp\n                else:\n                    temp -= 1\n            print(curr * n)\n        else:\n            tmp = 10\n            while tmp > 1:\n                if tmp * curr <= m:\n                    curr *= tmp\n                else:\n                    tmp -= 1\n            print(curr * n)\n    else:\n        twoCount -= fiveCount\n        curr = 1\n        while twoCount and curr * 5 <= m:\n            curr *= 5\n            twoCount -= 1\n        if twoCount:\n            temp = 10\n            while temp > 1:\n                if curr * temp <= m:\n                    curr *= temp\n                else:\n                    temp -= 1\n            print(curr * n)\n        else:\n            tmp = 10\n            while tmp > 1:\n                if tmp * curr <= m:\n                    curr *= tmp\n                else:\n                    tmp -= 1\n            print(curr * n)", "def solve():\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        cnt2 = cnt5 = 0\n        temp_n = n\n        while n and n % 2 == 0:\n            n //= 2\n            cnt2 += 1\n        while n and n % 5 == 0:\n            n //= 5\n            cnt5 += 1\n        k = 1\n        while cnt2 < cnt5 and k * 2 <= m:\n            cnt2 += 1\n            k *= 2\n        while cnt5 < cnt2 and k * 5 <= m:\n            cnt5 += 1\n            k *= 5\n        while 10 * k <= m:\n            k *= 10\n        if k == 1:\n            print(temp_n * m)\n        else:\n            k *= int(m / k)\n            print(temp_n * k)\nsolve()", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    (n, m) = map(int, sys.stdin.readline().split())\n    c2 = c5 = 0\n    nn = n\n    while nn % 2 == 0:\n        nn //= 2\n        c2 += 1\n    while nn % 5 == 0:\n        nn //= 5\n        c5 += 1\n    mm = m\n    zw = min(c2, c5)\n    if c2 > c5:\n        s5 = 0\n        while mm > 5 and s5 + c5 < c2:\n            s5 += 1\n            mm //= 5\n        while mm > 10:\n            mm //= 10\n            c2 += 1\n            c5 += 1\n        c5 += s5\n    elif c2 < c5:\n        s2 = 0\n        while mm > 2 and s2 + c2 < c5:\n            s2 += 1\n            mm //= 2\n        while mm > 10:\n            mm //= 10\n            c2 += 1\n            c5 += 1\n        c2 += s2\n    else:\n        while mm > 10:\n            mm //= 10\n            c2 += 1\n            c5 += 1\n    if zw >= min(c2, c5):\n        print(n * m)\n    else:\n        print(nn * 2 ** c2 * 5 ** c5 * mm)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, m) = map(int, input().split())\n    ans = n\n    k = 1\n    while n > 0 and n % 10 == 0:\n        n //= 10\n    while n > 0 and n % 5 == 0:\n        n //= 5\n        if k * 2 <= m:\n            k *= 2\n        else:\n            break\n    while n > 0 and n % 2 == 0:\n        n //= 2\n        if k * 5 <= m:\n            k *= 5\n        else:\n            break\n    while k * 10 <= m:\n        k *= 10\n    k = m // k * k\n    print(ans * k)", "K = lambda : [*map(int, input().split())]\nfor _ in ' ' * K()[0]:\n    (n, m) = K()\n    N = n\n    while n % 10 == 0:\n        n //= 10\n    c = 1\n    while n % 2 == 0 and c * 5 <= m:\n        c *= 5\n        n //= 2\n    while n % 5 == 0 and c * 2 <= m:\n        c *= 2\n        n //= 5\n    while c * 10 <= m:\n        c *= 10\n    print(N * c * (m // c))", "I = lambda : int(input())\nIs = lambda : map(int, input().split())\nLi = lambda : list(map(int, input().split()))\n\ndef solve():\n    (a, b) = Is()\n    res = 0\n    ans = 0\n    tt = a\n    while a % 10 == 0:\n        a //= 10\n    while not a & 1 and b >= 5:\n        tt *= 5\n        a //= 2\n        b //= 5\n    while a % 5 == 0 and b >= 2:\n        tt *= 2\n        a //= 5\n        b //= 2\n    while b >= 10:\n        tt *= 10\n        b //= 10\n    tt *= b\n    print(tt)\n    return 1\nt = I()\nwhile t:\n    solve()\n    t -= 1", "I = lambda : [*map(int, input().split())]\nfor _ in ' ' * I()[0]:\n    (n, m) = I()\n    N = n\n    while n % 10 == 0:\n        n //= 10\n    c = 1\n    while n % 2 == 0 and c * 5 <= m:\n        c *= 5\n        n //= 2\n    while n % 5 == 0 and c * 2 <= m:\n        c *= 2\n        n //= 5\n    while c * 10 <= m:\n        c *= 10\n    print(N * c * (m // c))", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    (n, m) = map(int, input().split())\n    z = n\n    c = 0\n    while n != 0 and n % 10 == 0:\n        n = n // 10\n    limit = 1\n    while n != 0 and n % 5 == 0 and (limit * 2 <= m):\n        n = n // 5\n        limit = limit * 2\n    while n != 0 and n % 2 == 0 and (limit * 5 <= m):\n        n = n // 2\n        limit = limit * 5\n    while limit * 10 <= m:\n        limit = limit * 10\n    limit = limit * int(m / limit)\n    print(limit * z)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    (n2, n5) = (0, 0)\n    nn = n\n    while not nn % 2:\n        n2 += 1\n        nn //= 2\n    while not nn % 5:\n        n5 += 1\n        nn //= 5\n    k = 1\n    if n2 > n5:\n        while k * 5 <= m and n2 > n5:\n            k *= 5\n            n5 += 1\n    elif n2 < n5:\n        while k * 2 <= m and n2 < n5:\n            k *= 2\n            n2 += 1\n    while k * 10 <= m:\n        k *= 10\n    k *= m // k\n    print(n * k)", "I = lambda : [*map(int, input().split())]\nfor _ in ' ' * I()[0]:\n    (n, m) = I()\n    N = n\n    while n % 10 == 0:\n        n //= 10\n    c = 1\n    while n % 2 == 0 and c * 5 <= m:\n        c *= 5\n        n //= 2\n    while n % 5 == 0 and c * 2 <= m:\n        c *= 2\n        n //= 5\n    while c * 10 <= m:\n        c *= 10\n    print(N * c * (m // c))", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = n\n    k = 1\n    while n % 10 == 0:\n        n = n / 10\n    while n % 5 == 0:\n        n = n / 5\n        if k * 2 <= m:\n            k *= 2\n        else:\n            break\n    while n % 2 == 0:\n        n = n / 2\n        if k * 5 <= m:\n            k *= 5\n        else:\n            break\n    while k * 10 <= m:\n        k *= 10\n    k = m // k * k\n    print(ans * k)", "t = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    temp = n\n    cnt2 = 0\n    while temp % 2 == 0:\n        cnt2 += 1\n        temp = temp // 2\n    cnt5 = 0\n    while temp % 5 == 0:\n        cnt5 += 1\n        temp = temp // 5\n    value = 1\n    if cnt5 > cnt2:\n        p = cnt5 - cnt2\n        while p > 0:\n            if value * 2 <= m:\n                value = value * 2\n            else:\n                break\n            p = p - 1\n    elif cnt2 > cnt5:\n        p = cnt2 - cnt5\n        while p > 0:\n            if value * 5 <= m:\n                value = value * 5\n            else:\n                break\n            p = p - 1\n    while True:\n        if value * 10 <= m:\n            value = value * 10\n        else:\n            break\n    u = m // value\n    res = u * value\n    ans = n * res\n    print(ans)\n    t = t - 1", "N = int(input())\n\ndef cal_2_5(x):\n    (count_2, count_5) = (0, 0)\n    while x % 2 == 0:\n        count_2 += 1\n        x /= 2\n    while x % 5 == 0:\n        count_5 += 1\n        x /= 5\n    return (count_2, count_5)\n\ndef solve():\n    (n, m) = [int(g) for g in input().split()]\n    (count_2, count_5) = cal_2_5(n)\n    count = 1\n    while count_2 < count_5:\n        if count * 2 <= m:\n            count_2 += 1\n            count *= 2\n        else:\n            break\n    while count_5 < count_2:\n        if count * 5 <= m:\n            count_5 += 1\n            count *= 5\n        else:\n            break\n    while count < m:\n        if count * 10 <= m:\n            count *= 10\n        else:\n            break\n    if count == 1:\n        return n * m\n    else:\n        count = m // count * count\n        return n * count\nfor _ in range(N):\n    print(solve())", "def degree(a, c):\n    ans = 0\n    while a % c == 0:\n        a //= c\n        ans += 1\n    return ans\nfor _ in range(int(input())):\n    (a, n) = map(int, input().split())\n    da2 = degree(a, 2)\n    da5 = degree(a, 5)\n    kaka = 1\n    while kaka < n and da5 != da2:\n        if da5 > da2:\n            if kaka * 2 > n:\n                break\n            kaka *= 2\n            da2 += 1\n        elif da2 > da5:\n            if kaka * 5 > n:\n                break\n            kaka *= 5\n            da5 += 1\n    s = str(n // kaka)\n    print(int(s[0]) * a * 10 ** (len(s) - 1) * kaka)", "number_of_tests = int(input())\nfor _ in range(number_of_tests):\n    (n, m) = map(int, input().split())\n    n_backup = n\n    m_backup = m\n    tens = 0\n    twos = 0\n    fives = 0\n    while n % 10 == 0:\n        n = n / 10\n        tens += 1\n    while n % 2 == 0 and 5 ** (twos + 1) <= m:\n        n = n / 2\n        twos += 1\n    while n % 5 == 0 and 2 ** (fives + 1) <= m:\n        n = n / 5\n        fives += 1\n    if fives > 0:\n        new_m = 2 ** fives * int(str(m // 2 ** fives)[0]) * 10 ** (len(str(m // 2 ** fives)) - 1)\n    elif twos > 0:\n        new_m = 5 ** twos * int(str(m // 5 ** twos)[0]) * 10 ** (len(str(m // 5 ** twos)) - 1)\n    elif len(str(m)) > 1:\n        new_m = int(str(m)[0]) * 10 ** (len(str(m)) - 1)\n    else:\n        new_m = m\n    print(n_backup * new_m)", "def run_task():\n    (n, m) = [int(x) for x in input().split()]\n    if m == 1:\n        return n\n    r = n\n    a = 0\n    while r % 2 == 0:\n        a += 1\n        r //= 2\n    b = 0\n    while r % 5 == 0:\n        b += 1\n        r //= 5\n    num = 2 if a < b else 5\n    k = 1\n    for i in range(abs(b - a)):\n        if k * num > m:\n            return k * (m // k) * n\n        k *= num\n    while True:\n        if k * 10 > m:\n            return k * (m // k) * n\n        k *= 10\nt = int(input())\nfor _ in range(t):\n    print(run_task())", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    (cnt2, cnt5) = (0, 0)\n    tempn = n\n    k = 1\n    while tempn % 2 == 0:\n        cnt2 += 1\n        tempn //= 2\n    while tempn % 5 == 0:\n        cnt5 += 1\n        tempn //= 5\n    while cnt2 < cnt5 and 2 * k <= m:\n        k *= 2\n        cnt2 += 1\n    while cnt2 > cnt5 and 5 * k <= m:\n        k *= 5\n        cnt5 += 1\n    while 10 * k <= m:\n        k *= 10\n    k = k * (m // k)\n    print(n * k)", "inp = []\nfor _ in range(int(input())):\n    inp.append([int(x) for x in input().split(' ')])\n\ndef f2(x):\n    c = 0\n    while x % 2 == 0:\n        c += 1\n        x = x // 2\n    return c\n\ndef f5(x):\n    c = 0\n    while x % 5 == 0:\n        c += 1\n        x = x // 5\n    return c\nfor (n, m) in inp:\n    (t, f) = (f2(n), f5(n))\n    (t1, f1) = (0, 0)\n    p = 1\n    while p < m:\n        if t + t1 == f + f1:\n            if p * 10 <= m:\n                p *= 10\n                t1 += 1\n                f1 += 1\n            else:\n                break\n        elif t + t1 < f + f1:\n            if p * 2 <= m:\n                p *= 2\n                t1 += 1\n            else:\n                break\n        elif p * 5 <= m:\n            p *= 5\n            f1 += 1\n        else:\n            break\n    if t1 + t > 0 and f1 + f > 0:\n        k = m // p\n        print(n * k * p)\n    else:\n        print(n * m)", "import os\nimport math\nimport collections\nimport bisect\nimport functools\nimport itertools\nimport heapq\nfrom collections import deque\n\ndef primeFactor(num):\n    i = 2\n    ans = set()\n    (c2, c5) = (0, 0)\n    while num % 2 == 0:\n        c2 += 1\n        num //= 2\n    while num % 5 == 0:\n        c5 += 1\n        num //= 5\n    return (c2, c5)\n\ndef solve(n, m):\n    (c2, c5) = primeFactor(n)\n    k = 1\n    while c2 < c5 and k * 2 <= m:\n        k *= 2\n        c2 += 1\n    while c2 > c5 and k * 5 <= m:\n        k *= 5\n        c5 += 1\n    while k * 10 <= m:\n        k *= 10\n        c2 += 1\n        c5 += 1\n    if k == 1:\n        return n * m\n    k = k * (m // k)\n    return n * k\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    print(solve(n, m))", "def zero(req, c, num):\n    temp = req\n    res = 0\n    while temp < num and res < c:\n        temp = temp * req\n        res += 1\n    return res\n\ndef solve(n, k):\n    temp = n\n    p = k\n    zerop = 0\n    while temp % 10 == 0:\n        temp = temp // 10\n    c2 = c5 = 0\n    while temp % 2 == 0:\n        temp = temp // 2\n        c2 += 1\n    while temp % 5 == 0:\n        temp = temp // 5\n        c5 += 1\n    if c2:\n        req = 5\n        res = zero(req, c2, k)\n    else:\n        req = 2\n        res = zero(req, c5, k)\n    p = p // req ** res\n    while p // 10:\n        p = p // 10\n        zerop += 1\n    answer = 10 ** zerop * req ** res\n    answer = k // answer * answer * n\n    if answer == 0:\n        print(n * k)\n        return\n    print(answer)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    solve(n, k)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split(' '))\n    k = 1\n    val = n\n    while n % 10 == 0:\n        n = n // 10\n    while n % 5 == 0:\n        n = n // 5\n        if k * 2 <= m:\n            k = k * 2\n        else:\n            break\n    while n % 2 == 0:\n        n = n // 2\n        if k * 5 <= m:\n            k = k * 5\n        else:\n            break\n    while k * 10 <= m:\n        k = k * 10\n    k = m // k * k\n    print(val * k)", "def digit(n):\n    ans = 0\n    while n > 0:\n        ans += 1\n        n = n // 10\n    return ans\n\ndef twos(n):\n    ans = 0\n    while n % 2 == 0 and n > 0:\n        ans += 1\n        n = n // 2\n    return ans\n\ndef fives(n):\n    ans = 0\n    while n % 5 == 0 and n > 0:\n        ans += 1\n        n = n // 5\n    return ans\n\ndef tens(n):\n    ans = 0\n    while n % 10 == 0 and n > 0:\n        ans += 1\n        n = n // 10\n    return ans\nfor _ in range(int(input())):\n    (m, k) = map(int, input().split())\n    c = tens(m)\n    m = m // 10 ** c\n    a = twos(m)\n    b = fives(m)\n    x = 2 ** b * 5 ** a\n    ans = 0\n    if k == x:\n        ans = m * 10 ** c * x\n    elif k > x:\n        y = k // x\n        di = digit(y)\n        y = y // 10 ** (di - 1)\n        ans = y * 10 ** (di - 1) * x * m * 10 ** c\n    elif a == 0:\n        while x > k:\n            x = x // 2\n        ans = m * 10 ** c * x\n    else:\n        while x > k:\n            x = x // 5\n        e = k // x\n        ans = m * 10 ** c * x * e\n    print(ans)", "from math import log\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    (two_count, five_count, p) = (0, 0, n)\n    while p % 2 == 0:\n        p //= 2\n        two_count += 1\n    while p % 5 == 0:\n        p //= 5\n        five_count += 1\n    ans = 1\n    k = min(two_count, five_count)\n    two_count -= k\n    five_count -= k\n    if two_count > 0:\n        ans = 5 ** min(int(log(m, 5)), two_count)\n    if five_count > 0:\n        ans = 2 ** min(int(log(m, 2)), five_count)\n    ans *= 10 ** int(log(m / ans, 10))\n    print(ans * n * max(m // ans, 1))", "from math import log\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    (two_count, five_count, p) = (0, 0, n)\n    while p % 2 == 0:\n        p //= 2\n        two_count += 1\n    while p % 5 == 0:\n        p //= 5\n        five_count += 1\n    ans = 1\n    k = min(two_count, five_count)\n    two_count -= k\n    five_count -= k\n    if two_count > 0:\n        ans = 5 ** min(int(log(m, 5)), two_count)\n    if five_count > 0:\n        ans = 2 ** min(int(log(m, 2)), five_count)\n    ans *= 10 ** int(log(m / ans, 10))\n    print(ans * n * max(m // ans, 1))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    x = n\n    div5 = 0\n    div2 = 0\n    while x % 5 == 0 and n > 0:\n        x //= 5\n        div5 += 1\n    while x % 2 == 0 and n > 0:\n        x //= 2\n        div2 += 1\n    k = 1\n    if div5 > div2:\n        while m >= k * 2 and div5 > div2:\n            k *= 2\n            div5 -= 1\n    elif div2 > div5:\n        while m >= k * 5 and div2 > div5:\n            k *= 5\n            div2 -= 1\n    if k == 1 and m < 10:\n        print(n * m)\n    else:\n        while m >= k * 10:\n            k *= 10\n        a = k\n        while m >= k + a:\n            k += a\n        print(n * k)", "n = int(input())\nfor _ in range(n):\n    (n, m) = map(int, input().split())\n    x = n\n    while x % 10 == 0:\n        x = x / 10\n    n5 = 0\n    while x % 5 == 0:\n        x = x / 5\n        n5 += 1\n    n2 = 0\n    while x % 2 == 0:\n        x = x / 2\n        n2 += 1\n    k = 1\n    p = 0\n    while k * 2 <= m and p < n5:\n        k *= 2\n        p += 1\n    p = 0\n    while k * 5 <= m and p < n2:\n        k *= 5\n        p += 1\n    while k * 10 <= m:\n        k *= 10\n    if k == 1:\n        print(n * m)\n    else:\n        for i in range(9, 1, -1):\n            if k * i <= m:\n                k *= i\n        print(n * k)", "def f(n, m):\n    val_2 = 0\n    val_5 = 0\n    k = n\n    while k % 2 == 0:\n        val_2 += 1\n        k //= 2\n    while k % 5 == 0:\n        val_5 += 1\n        k //= 5\n    total = 1\n    check_2 = False\n    while val_2 < val_5 and total <= m:\n        total *= 2\n        val_2 += 1\n        check_2 = True\n    if check_2 and total > m:\n        total //= 2\n        val_2 -= 1\n    check_5 = False\n    while val_5 < val_2 and total <= m:\n        total *= 5\n        val_5 += 1\n        check_5 = True\n    if check_5 and total > m:\n        total //= 5\n        val_5 -= 1\n    check_25 = False\n    while val_2 == val_5 and total <= m:\n        total *= 10\n        val_2 += 1\n        val_5 += 1\n        check_25 = True\n    if check_25 and total > m:\n        total //= 10\n        val_2 -= 1\n        val_5 -= 1\n    if m % total == 0:\n        total *= m // total\n    else:\n        total *= int(m / total)\n    return n * total\nt = int(input())\nfor i in range(t):\n    (n, m) = [int(el) for el in input().split(' ')]\n    print(f(n, m))", "def factor(g, h):\n    c = 0\n    while h % g == 0:\n        c += 1\n        h //= g\n    return c\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = factor(2, n)\n    b = factor(5, n)\n    if a == b:\n        if m >= 10:\n            k = 1\n            while k * 10 <= m:\n                k *= 10\n            i = 1\n            while k * i <= m:\n                i += 1\n            k *= i - 1\n            print(n * k)\n        else:\n            print(n * m)\n    elif a > b:\n        ct = a - b\n        if m >= 5:\n            k = 1\n            while k * 5 <= m and ct > 0:\n                k *= 5\n                ct -= 1\n            while k * 10 <= m:\n                k *= 10\n            i = 1\n            while k * i <= m:\n                i += 1\n            k *= i - 1\n            print(n * k)\n        else:\n            print(n * m)\n    elif a < b:\n        ct = b - a\n        if m >= 2:\n            k = 1\n            while k * 2 <= m and ct > 0:\n                k *= 2\n                ct -= 1\n            while k * 10 <= m:\n                k *= 10\n            i = 1\n            while k * i <= m:\n                i += 1\n            k *= i - 1\n            print(n * k)\n        else:\n            print(n * m)", "def find_2(x):\n    res = 0\n    while x % 2 == 0:\n        res += 1\n        x = x / 2\n    return res\n\ndef find_5(x):\n    res = 0\n    while x % 5 == 0:\n        res += 1\n        x = x / 5\n    return res\n\ndef balance_5(max_, x, n, m):\n    while x * 2 <= max_ and n != m:\n        x *= 2\n        n += 1\n    return x\n\ndef balance_2(max_, x, n, m):\n    while x * 5 <= max_ and n != m:\n        x *= 5\n        m += 1\n    return x\n\ndef cal_0(x):\n    res = 0\n    while x % 10 == 0:\n        res += 1\n        x /= 10\n    return res\nn = int(input())\nfor i in range(n):\n    (x, y) = map(int, input().split())\n    n = find_2(x)\n    m = find_5(x)\n    max_ = x * y\n    if n < m:\n        res = balance_5(max_, x, n, m)\n    elif n > m:\n        res = balance_2(max_, x, n, m)\n    else:\n        res = x\n    while max_ // res >= 10:\n        res *= 10\n    res = max_ // res * res\n    if res % 10 == 0:\n        print(res)\n    else:\n        print(max_)", "def get_factor_count(num, f):\n    c = 0\n    while num % f == 0:\n        num //= f\n        c += 1\n    return c\n\ndef roundest_int(cprice, m):\n    c2f = get_factor_count(cprice, 2)\n    c5f = get_factor_count(cprice, 5)\n    k = 1\n    if c2f > c5f:\n        diff = c2f - c5f\n        while diff > 0 and k * 5 <= m:\n            k *= 5\n            diff -= 1\n    elif c5f > c2f:\n        diff = c5f - c2f\n        while diff > 0 and k * 2 <= m:\n            k *= 2\n            diff -= 1\n    while True:\n        if 10 * k < m:\n            k *= 10\n        else:\n            last = m // k\n            if last > 0:\n                k *= last\n            break\n    return k * n\nt = int(input())\nfor _ in range(t):\n    (n, m) = [int(i) for i in input().split()]\n    print(roundest_int(n, m))", "def solve(n, m):\n    count_2 = 0\n    count_5 = 0\n    t = n\n    while t % 2 == 0:\n        count_2 += 1\n        t = t // 2\n    t = n\n    while t % 5 == 0:\n        count_5 += 1\n        t = t // 5\n    x = 1\n    cp_n = n\n    while count_5 > count_2 and x * 2 <= m:\n        x = x * 2\n        cp_n *= 2\n        count_2 += 1\n    while count_5 < count_2 and x * 5 <= m:\n        x = x * 5\n        cp_n *= 5\n        count_5 += 1\n    while x * 10 <= m:\n        cp_n *= 10\n        x = x * 10\n    cp_n = cp_n * (m // x)\n    return cp_n\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(solve(n, m))\npass", "t = int(input())\nfor tt in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    (n5, n2, m5, m2) = (0, 0, 0, 0)\n    nt = n\n    while nt % 5 == 0:\n        n5 += 1\n        nt //= 5\n    while nt % 2 == 0:\n        n2 += 1\n        nt //= 2\n    if n5 >= n2:\n        mul = 1\n        for i in range(1, n5 - n2 + 1):\n            if mul * 2 > m:\n                break\n            mul *= 2\n        while mul * 10 <= m:\n            mul *= 10\n        mul *= m // mul\n        print(n * mul)\n    else:\n        mul = 1\n        for i in range(1, n2 - n5 + 1):\n            if mul * 5 > m:\n                break\n            mul *= 5\n        while mul * 10 <= m:\n            mul *= 10\n        mul *= m // mul\n        print(n * mul)", "TT = int(input())\nwhile TT:\n    (n, m) = list(map(int, input().split()))\n    t = 1\n    left = m\n    s = str(n)\n    s = s.strip('0')\n    now = 0\n    while (s[-1] == '2' or s[-1] == '4' or s[-1] == '8' or (s[-1] == '5') or (s[-1] == '6')) and left >= 2:\n        if s[-1] == '5':\n            s = str(int(s) * 2)\n            k = left\n            left /= 2\n            t *= 2\n            s = s.strip('0')\n            now = 2\n        else:\n            if left < 5:\n                break\n            s = str(int(s) * 5)\n            k = left\n            left /= 5\n            t *= 5\n            s = s.strip('0')\n            now = 5\n    while left >= 10:\n        t *= 10\n        left /= 10\n    small = m // t\n    print(n * t * small)\n    TT -= 1", "t = int(input())\n\ndef get_count_of_p(n, p):\n    count = 0\n    while n % p == 0:\n        count += 1\n        n /= p\n    return count\nfor t0 in range(t):\n    (n, m) = list(map(int, input().split()))\n    count_of_2 = get_count_of_p(n, 2)\n    count_of_5 = get_count_of_p(n, 5)\n    mul = 1\n    while True:\n        if count_of_2 == count_of_5:\n            if 10 * mul <= m:\n                mul *= 10\n            else:\n                break\n        elif count_of_2 > count_of_5:\n            if 5 * mul <= m:\n                mul *= 5\n                count_of_5 += 1\n            else:\n                break\n        elif 2 * mul <= m:\n            mul *= 2\n            count_of_2 += 1\n        else:\n            break\n    mul *= int(m / mul)\n    print(n * mul)", "T = int(input())\n\ndef c(n, x):\n    ans = 0\n    while n % x == 0:\n        ans += 1\n        n //= x\n    return ans\nfor Ti in range(T):\n    t = input().split()\n    (n, m) = (int(t[0]), int(t[1]))\n    x = 1\n    (c2, c5) = (c(n, 2), c(n, 5))\n    if c2 > c5:\n        i = c2 - c5\n        while i > 0:\n            y = x * 5\n            if y <= m:\n                x = y\n                i -= 1\n            else:\n                break\n    elif c2 < c5:\n        i = c5 - c2\n        while i > 0:\n            y = x << 1\n            if y <= m:\n                x = y\n                i -= 1\n            else:\n                break\n    while 1:\n        y = x * 10\n        if y <= m:\n            x = y\n        else:\n            break\n    x = m // x * x\n    print(x * n)", "t = int(input())\nfor i in range(t):\n    (a, b) = list(map(int, input().split(' ')))\n    ina = a\n    a2 = 0\n    a5 = 0\n    while a % 5 == 0:\n        a5 += 1\n        a //= 5\n    while a % 2 == 0:\n        a2 += 1\n        a //= 2\n    target = 1\n    while a2 < a5 and target * 2 <= b or (a2 > a5 and target * 5 <= b) or target * 10 <= b:\n        if a2 < a5:\n            target *= 2\n            a2 += 1\n        elif a2 > a5:\n            target *= 5\n            a5 += 1\n        else:\n            a2 += 1\n            a5 += 1\n            target *= 10\n    assert target <= b\n    target = b // target * target\n    print(ina * target)", "t = input()\nfor tt in range(int(t)):\n    (n, m) = map(int, input().split())\n    c2 = 0\n    u = n\n    while u % 2 == 0:\n        u //= 2\n        c2 += 1\n    c5 = 0\n    u = n\n    while u % 5 == 0:\n        u //= 5\n        c5 += 1\n    while True:\n        if c2 > c5:\n            if m < 5:\n                n *= m\n                break\n            n *= 5\n            m //= 5\n            c5 += 1\n        elif c2 < c5:\n            if m < 2:\n                n *= m\n                break\n            n *= 2\n            m //= 2\n            c2 += 1\n        else:\n            if m < 10:\n                n *= m\n                break\n            n *= 10\n            m //= 10\n    print(n)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    st = n\n    two = 0\n    five = 0\n    k = 1\n    while n % 2 == 0:\n        n //= 2\n        two += 1\n    while n % 5 == 0:\n        n //= 5\n        five += 1\n    while two < five and k * 2 <= m:\n        two += 1\n        k *= 2\n    while five < two and k * 5 <= m:\n        five += 1\n        k *= 5\n    while k * 10 <= m:\n        k *= 10\n    if k == 1:\n        print(st * m)\n    else:\n        k *= m // k\n        print(st * k)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    fives = 0\n    n_copy = n\n    while n_copy % 5 == 0:\n        fives += 1\n        n_copy //= 5\n    twos = 0\n    n_copy = n\n    while n_copy % 2 == 0:\n        twos += 1\n        n_copy //= 2\n    sol = 1\n    diff = twos - fives\n    while diff > 0 and sol * 5 <= m:\n        sol *= 5\n        diff -= 1\n    while diff < 0 and sol * 2 <= m:\n        sol *= 2\n        diff += 1\n    while sol * 10 <= m:\n        sol *= 10\n    t_sol = sol\n    for i in range(1, 11):\n        if t_sol * i <= m:\n            sol = t_sol * i\n    print(sol * n)", "nb_test_case = int(input())\nfor i in range(0, nb_test_case):\n    lists = input().split()\n    n = int(lists[0])\n    m = int(lists[1])\n    stock = n\n    two_exposant = 0\n    five_exposant = 0\n    while stock % 2 == 0:\n        stock = stock // 2\n        two_exposant += 1\n    while stock % 5 == 0:\n        stock = stock // 5\n        five_exposant += 1\n    multiplicateur = 1\n    while two_exposant < five_exposant and multiplicateur * 2 <= m:\n        multiplicateur *= 2\n        two_exposant += 1\n    while five_exposant < two_exposant and multiplicateur * 5 <= m:\n        multiplicateur *= 5\n        five_exposant += 1\n    while multiplicateur * 10 <= m:\n        multiplicateur *= 10\n    for j in range(9, -1, -1):\n        if multiplicateur * j <= m:\n            multiplicateur *= j\n            break\n    print(n * multiplicateur)", "def log(a: int, x: int, p=1):\n    ans = 0\n    res = p\n    while res <= a:\n        res *= x\n        ans += 1\n    return ans - 1\n\ndef g(x: int):\n    ans = {2: 0, 5: 0}\n    while x % 2 == 0:\n        x //= 2\n        ans[2] += 1\n    while x % 5 == 0:\n        x //= 5\n        ans[5] += 1\n    return ans\n\ndef f():\n    (n, k) = map(int, input().split())\n    x = g(n)\n    ans = -1\n    if x[2] > x[5]:\n        x[2] -= x[5]\n        y = log(k, 5)\n        if y < x[2]:\n            ans = max(5 ** y * (k // 5 ** y) * n, ans)\n        else:\n            z = log(k, 10, p=5 ** x[2])\n            ans = max(5 ** x[2] * 10 ** z * n * (k // (5 ** x[2] * 10 ** z)), ans)\n    else:\n        x[5] -= x[2]\n        y = log(k, 2)\n        if y < x[5]:\n            ans = max(ans, 2 ** y * (k // 2 ** y) * n)\n        else:\n            z = log(k, 10, p=2 ** x[5])\n            ans = max(2 ** x[5] * 10 ** z * n * (k // (2 ** x[5] * 10 ** z)), ans)\n    return ans\nfor i in range(int(input())):\n    print(f())", "from math import log\n\ndef calcPow(n, k):\n    answer = 0\n    while n % k == 0:\n        answer += 1\n        n /= k\n    return answer\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    tens = calcPow(n, 10)\n    twos = calcPow(n, 2) - tens\n    fives = calcPow(n, 5) - tens\n    maxTwos = int(log(m, 2))\n    maxFives = int(log(m, 5))\n    curr = 1\n    if twos:\n        curr = pow(5, min(twos, maxFives))\n    elif fives:\n        curr = pow(2, min(fives, maxTwos))\n    while curr * 10 <= m:\n        curr *= 10\n    curr = curr * (m // curr)\n    print(n * curr)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    e = m\n    out = 1\n    twos = 0\n    fives = 0\n    l = []\n    ee = n\n    while ee % 2 == 0:\n        twos += 1\n        ee = ee // 2\n    while ee % 5 == 0:\n        fives += 1\n        ee = ee // 5\n    cond = False\n    while twos > fives and m // 5 > 0:\n        n *= 5\n        m = m // 5\n        fives += 1\n        cond = True\n    while fives > twos and m // 2 > 0:\n        n *= 2\n        m = m // 2\n        twos += 1\n        cond = True\n    while m // 10 > 0:\n        n *= 10\n        m = m // 10\n        cond = True\n    if cond:\n        print(n * m)\n    else:\n        print(n * m)", "import math\nt = int(input())\nfor x in range(t):\n    (n, m) = map(int, input().split(' '))\n    a = n\n    n_ = [0, 0]\n    while a % 2 == 0 or a % 5 == 0:\n        if a % 2 == 0:\n            a = a // 2\n            n_[0] += 1\n        if a % 5 == 0:\n            a = a // 5\n            n_[1] += 1\n    k = 1\n    while n_[0] < n_[1] and k * 2 <= m:\n        n_[0] += 1\n        k *= 2\n    while n_[0] > n_[1] and k * 5 <= m:\n        n_[1] += 1\n        k *= 5\n    while k * 10 <= m:\n        k *= 10\n    if k == 1:\n        k = m\n    else:\n        k *= m // k\n    print(n * k)", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    n0 = n\n    cnt2 = 0\n    cnt5 = 0\n    k = 1\n    while n > 0 and n % 2 == 0:\n        n //= 2\n        cnt2 += 1\n    while n > 0 and n % 5 == 0:\n        n //= 5\n        cnt5 += 1\n    while cnt2 < cnt5 and k * 2 <= m:\n        cnt2 += 1\n        k *= 2\n    while cnt5 < cnt2 and k * 5 <= m:\n        cnt5 += 1\n        k *= 5\n    while k * 10 <= m:\n        k *= 10\n    if k == 1:\n        print(n0 * m)\n    else:\n        k *= m // k\n        print(n0 * k)", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    n0 = n\n    cnt2 = 0\n    cnt5 = 0\n    k = 1\n    while n > 0 and n % 2 == 0:\n        n //= 2\n        cnt2 += 1\n    while n > 0 and n % 5 == 0:\n        n //= 5\n        cnt5 += 1\n    while cnt5 < cnt2 and k * 5 <= m:\n        cnt5 += 1\n        k *= 5\n    while cnt2 < cnt5 and k * 2 <= m:\n        cnt2 += 1\n        k *= 2\n    while k * 10 <= m:\n        k *= 10\n    if k == 1:\n        print(n0 * m)\n    else:\n        k *= m // k\n        print(n0 * k)", "def count(n, factor):\n    ct = 0\n    while n % factor == 0:\n        n = n // factor\n        ct += 1\n    return ct\nT = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    k = 1\n    two = count(n, 2)\n    five = count(n, 5)\n    zero = min(two, five)\n    while k <= m:\n        if zero < five:\n            if 2 * k < m:\n                k *= 2\n                zero += 1\n            else:\n                break\n        elif zero < two:\n            if 5 * k < m:\n                k *= 5\n                zero += 1\n            else:\n                break\n        elif 10 * k < m:\n            k *= 10\n            zero += 1\n        else:\n            break\n    print(n * (m // k) * k)", "t = int(input())\nfor i in range(t):\n    (n, m) = [int(j) for j in input().split()]\n    x = 0\n    n2 = n\n    while n2 % 2 == 0:\n        n2 //= 2\n        x += 1\n    y = 0\n    n5 = n\n    while n5 % 5 == 0:\n        n5 //= 5\n        y += 1\n    k = 1\n    if x > y:\n        count = 0\n        while k * 5 <= m and count < x - y:\n            k *= 5\n            count += 1\n    else:\n        count = 0\n        while k * 2 <= m and count < y - x:\n            k *= 2\n            count += 1\n    while k * 10 <= m:\n        k *= 10\n    for j in range(9, 0, -1):\n        if k * j <= m:\n            k *= j\n            break\n    print(n * k)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    k = n\n    ans = 1\n    while n % 10 == 0:\n        n //= 10\n    while n % 5 == 0:\n        n = n // 5\n        if ans * 2 <= m:\n            ans = ans * 2\n        else:\n            break\n    while n % 2 == 0:\n        n = n // 2\n        if ans * 5 <= m:\n            ans = ans * 5\n        else:\n            break\n    while ans * 10 <= m:\n        ans = ans * 10\n    ans = m // ans * ans\n    print(ans * k)", "from math import log\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    N = n\n    twos = fives = 0\n    while not n % 2 or not n % 5:\n        if not n % 2:\n            n //= 2\n            twos += 1\n        if not n % 5:\n            n //= 5\n            fives += 1\n    if twos > fives:\n        twos -= fives\n        fives = 0\n    else:\n        fives -= twos\n        twos = 0\n    currTwos = min(int(log(k, 2)), fives)\n    curr = 2 ** currTwos\n    currFives = 0\n    while curr * 5 < k and currFives < twos:\n        curr *= 5\n        currFives += 1\n    while curr * 10 < k:\n        curr *= 10\n    print(N * curr * (k // curr))", "def log(a: int, x: int, p=1):\n    ans = 0\n    res = p\n    while res <= a:\n        res *= x\n        ans += 1\n    return ans - 1\n\ndef g(x: int):\n    ans = {2: 0, 5: 0}\n    while x % 2 == 0:\n        x //= 2\n        ans[2] += 1\n    while x % 5 == 0:\n        x //= 5\n        ans[5] += 1\n    return ans\n\ndef f():\n    (n, k) = map(int, input().split())\n    x = g(n)\n    ans = -1\n    if x[2] > x[5]:\n        x[2] -= x[5]\n        y = log(k, 5)\n        if y < x[2]:\n            ans = max(5 ** y * (k // 5 ** y) * n, ans)\n        else:\n            z = log(k, 10, p=5 ** x[2])\n            ans = max(5 ** x[2] * 10 ** z * n * (k // (5 ** x[2] * 10 ** z)), ans)\n    else:\n        x[5] -= x[2]\n        y = log(k, 2)\n        if y < x[5]:\n            ans = max(ans, 2 ** y * (k // 2 ** y) * n)\n        else:\n            z = log(k, 10, p=2 ** x[5])\n            ans = max(2 ** x[5] * 10 ** z * n * (k // (2 ** x[5] * 10 ** z)), ans)\n    return ans\nfor i in range(int(input())):\n    print(f())", "def end_zeros(num):\n    n = 0\n    while num % 10 == 0:\n        n += 1\n        num = num / 10\n    return n\n\ndef solve(n, m):\n    max_const = 1\n    temp = n\n    while n % 10 == 0:\n        n //= 10\n    while n % 2 == 0 and max_const * 5 <= m:\n        max_const *= 5\n        n //= 2\n    while n % 5 == 0 and max_const * 2 <= m:\n        max_const *= 2\n        n //= 5\n    while max_const * 10 <= m:\n        max_const *= 10\n    return temp * (m // max_const) * max_const\nfor _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    print(solve(n, m))", "def find_2(x):\n    res = 0\n    tmp = x\n    while tmp % 2 == 0:\n        res += 1\n        tmp = tmp / 2\n    return res\n\ndef find_5(x):\n    res = 0\n    tmp = x\n    while tmp % 5 == 0:\n        res += 1\n        tmp = tmp / 5\n    return res\n\ndef balance_5(max_, x, n, m):\n    tmp = x\n    while tmp * 2 <= max_ and n != m:\n        tmp *= 2\n        n += 1\n    return tmp\n\ndef balance_2(max_, x, n, m):\n    tmp = x\n    while tmp * 5 <= max_ and n != m:\n        tmp *= 5\n        m += 1\n    return tmp\n\ndef cal_0(x):\n    res = 0\n    while x % 10 == 0:\n        res += 1\n        x /= 10\n    return res\nn = int(input())\nfor i in range(n):\n    (x, y) = map(int, input().split())\n    n = find_2(x)\n    m = find_5(x)\n    max_ = x * y\n    if n < m:\n        res = balance_5(max_, x, n, m)\n    elif n > m:\n        res = balance_2(max_, x, n, m)\n    else:\n        res = x\n    while max_ // res >= 10:\n        res *= 10\n    n_0 = cal_0(res)\n    t1 = res\n    t2 = max_ // res\n    if t2 > 1:\n        for i in range(t2 - 1):\n            res += t1\n    if res % 10 == 0:\n        print(res)\n    else:\n        print(max_)", "from sys import stdin, stdout\nt = int(stdin.readline().strip())\nfor _ in range(t):\n    (n, m) = map(int, stdin.readline().split())\n    max_2 = 0\n    max_5 = 0\n    curr = 2\n    while curr <= n:\n        if n % curr == 0:\n            max_2 += 1\n        curr *= 2\n    curr = 5\n    while curr <= n:\n        if n % curr == 0:\n            max_5 += 1\n        curr *= 5\n    (max_2, max_5) = (max_2 - min(max_2, max_5), max_5 - min(max_2, max_5))\n    multi = 1\n    added = False\n    while max_2 > 0 and multi * 5 <= m:\n        max_2 -= 1\n        multi *= 5\n        added = True\n    while max_5 > 0 and multi * 2 <= m:\n        max_5 -= 1\n        multi *= 2\n        added = True\n    while multi * 10 <= m:\n        multi *= 10\n        added = True\n    multi *= m // multi\n    if not added:\n        print(n * m)\n    else:\n        print(n * multi)", "for _ in range(0, int(input())):\n    (a, b) = map(int, input().split())\n    (c2, c5, s, t) = [0, 0, 0, 0]\n    while a % 2 == 0:\n        c2 += 1\n        a //= 2\n    while a % 5 == 0:\n        c5 += 1\n        a //= 5\n    while True:\n        if c2 > c5 and b >= 5:\n            b //= 5\n            c5 += 1\n        elif c2 > c5:\n            break\n        if c2 < c5 and b >= 2:\n            b //= 2\n            c2 += 1\n        elif c2 < c5:\n            break\n        if c2 == c5 and b >= 10:\n            b //= 10\n            c2 += 1\n            c5 += 1\n        elif c2 == c5:\n            break\n    print(a * b * 2 ** c2 * 5 ** c5)", "import math\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    f = 0\n    ans = -1\n    for j in range(18, 0, -1):\n        x = 10 ** j\n        g = math.gcd(n, x)\n        x = x // g\n        if x <= m:\n            ans = x\n            break\n    if ans == -1:\n        print(n * m)\n        continue\n    k = m // ans\n    print(ans * n * k)", "import math\nt = int(input())\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\nfor i in range(1, t + 1):\n    (n, m) = [int(v) for v in input().split()]\n    x = n * m\n    powers = len(str(x)) - 1\n    for i in range(powers, -1, -1):\n        z = 10 ** i\n        LCM = lcm(z, n)\n        kb = LCM // n\n        k = m // kb * kb\n        if k:\n            print(k * n)\n            break", "import math\nt = int(input())\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\nfor i in range(1, t + 1):\n    (n, m) = [int(v) for v in input().split()]\n    x = n * m\n    powers = len(str(x)) - 1\n    for i in range(powers, -1, -1):\n        z = 10 ** i\n        LCM = lcm(z, n)\n        kb = LCM // n\n        k = m // kb * kb\n        if k:\n            print(k * n)\n            break", "import math\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    f = 0\n    ans = -1\n    for j in range(18, 0, -1):\n        x = 10 ** j\n        g = math.gcd(n, x)\n        x = x // g\n        if x <= m:\n            ans = x\n            break\n    if ans == -1:\n        print(n * m)\n        continue\n    k = m // ans\n    print(ans * n * k)", "from io import BytesIO, IOBase\n\ndef end_zeros(num):\n    n = 0\n    while num % 10 == 0:\n        n += 1\n        num = num / 10\n    return n\n\ndef solve(n, m):\n    max_const = 1\n    temp = n\n    while n % 10 == 0:\n        n //= 10\n    while n % 2 == 0 and max_const * 5 <= m:\n        max_const *= 5\n        n //= 2\n    while n % 5 == 0 and max_const * 2 <= m:\n        max_const *= 2\n        n //= 5\n    while max_const * 10 <= m:\n        max_const *= 10\n    return temp * (m // max_const) * max_const\nfor _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    print(solve(n, m))", "import math\nimport sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\ndata = {'1': '10', '2': '5', '3': '10', '4': '5', '5': '2', '6': '5', '7': '10', '8': '5', '9': '10'}\nfor _ in range(int(input())):\n    (n, k) = invr()\n    i = 0\n    while True:\n        p = str(n)\n        if p[-1 - i] == '0':\n            i += 1\n            continue\n        hold = int(data[p[-1 - i]])\n        if hold > k:\n            n = n * k\n            break\n        else:\n            n = n * hold\n            k = k // hold\n    print(n)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    (cnt_two, cnt_five) = (0, 0)\n    n_ = n\n    k = 1\n    while n_ % 2 == 0:\n        cnt_two += 1\n        n_ /= 2\n    while n_ % 5 == 0:\n        cnt_five += 1\n        n_ /= 5\n    while cnt_two < cnt_five and 2 * k <= m:\n        cnt_two += 1\n        k *= 2\n    while cnt_two > cnt_five and 5 * k <= m:\n        cnt_five += 1\n        k *= 5\n    while k * 10 <= m:\n        k *= 10\n    k = k * (m // k)\n    print(n * k)", "def po(n, base):\n    out = 0\n    while n % base == 0:\n        n //= base\n        out += 1\n    return out\n\ndef solve():\n    (n, m) = map(int, input().split())\n    (po2, po5) = (po(n, 2), po(n, 5))\n    for tgt in range(18, 0, -1):\n        div = 2 ** max(0, tgt - po2) * 5 ** max(0, tgt - po5)\n        mul = m // div * div\n        if mul != 0:\n            return n * mul\n    return n * m\nfor _ in range(int(input())):\n    print(solve())", "for tst in range(int(input())):\n    (n, m) = map(int, input().split())\n    gener = lambda cn1, cn2, k: 2 ** max(0, k - cn1) * 5 ** max(0, k - cn2)\n    x1 = 0\n    x2 = 0\n    n1 = n\n    n2 = n\n    while n1 % 2 == 0:\n        n1 //= 2\n        x1 += 1\n    while n2 % 5 == 0:\n        n2 //= 5\n        x2 += 1\n    l = 0\n    r = 20\n    while r - l > 1:\n        mid = (r + l) // 2\n        x = gener(x1, x2, mid)\n        if x <= m:\n            l = mid\n        else:\n            r = mid\n    y = gener(x1, x2, l)\n    x3 = 1\n    for i in range(1, m + 1):\n        if i * y <= m:\n            x3 = i\n        else:\n            break\n    print(n * y * x3)", "from math import gcd\n\ndef f(n: int, m: int) -> int:\n    for power in reversed(range(0, 20)):\n        ten = 10 ** power\n        delta = ten // gcd(n, ten)\n        if delta <= m:\n            return m // delta * delta * n\nfor _ in range(int(input())):\n    print(f(*map(int, input().split())))", "def end_zeros(num):\n    n = 0\n    while num % 10 == 0:\n        n += 1\n        num = num / 10\n    return n\n\ndef solve(n, m):\n    max_const = 1\n    temp = n\n    while n % 10 == 0:\n        n //= 10\n    while n % 2 == 0 and max_const * 5 <= m:\n        max_const *= 5\n        n //= 2\n    while n % 5 == 0 and max_const * 2 <= m:\n        max_const *= 2\n        n //= 5\n    while max_const * 10 <= m:\n        max_const *= 10\n    return temp * (m // max_const) * max_const\nfor _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    print(solve(n, m))", "def fun(n):\n    a = 0\n    while n % 10 == 0:\n        a += 1\n        n /= 10\n    return a\n\ndef fun2(n):\n    a = 0\n    while n % 2 == 0:\n        a += 1\n        n /= 2\n    return a\n\ndef fun5(n):\n    a = 0\n    while n % 5 == 0:\n        a += 1\n        n /= 5\n    return a\nt = int(input())\nfor _ in range(t):\n    nm = [int(ii) for ii in input().split()]\n    (n, m) = (nm[0], nm[1])\n    a = fun(n)\n    a2 = fun2(n)\n    a5 = fun5(n)\n    k = 1\n    if a5 > a2:\n        while m >= k * 2 and a5 > a2:\n            k *= 2\n            a5 -= 1\n    elif a2 > a5:\n        while m >= k * 5 and a2 > a5:\n            k *= 5\n            a2 -= 1\n    if k == 1 and m < 10:\n        print(n * m)\n    else:\n        while m >= k * 10:\n            k *= 10\n        temp = k\n        while m >= k + temp:\n            k += temp\n        print(n * k)", "import math\n_ = int(input())\nfor i in range(_):\n    z = input().split(' ')\n    a = int(z[0])\n    cnt = 0\n    while a % 10 == 0:\n        a /= 10\n        a = int(a)\n        cnt += 1\n    b = int(z[1])\n    tmp1 = a\n    cnt1 = 0\n    cnt3 = 0\n    while a % 5 == 0:\n        a /= 5\n        a = int(a)\n        cnt1 += 1\n    while a % 2 == 0:\n        a /= 2\n        a = int(a)\n        cnt3 += 1\n    if cnt1 == cnt3:\n        while b >= 10:\n            cnt += 1\n            b = math.floor(b / 10)\n        print(int(tmp1 * b), end='')\n    else:\n        if cnt3 == 0:\n            t = 1\n            for j in range(cnt1):\n                t *= 2\n                if t > b:\n                    t /= 2\n                    break\n        else:\n            t = 1\n            for j in range(cnt3):\n                t *= 5\n                if t > b:\n                    t /= 5\n                    break\n        k = math.floor(b / t)\n        while k >= 10:\n            cnt += 1\n            k = math.floor(k / 10)\n        print(int(tmp1 * t * k), end='')\n    for j in range(cnt):\n        print(0, end='')\n    print('')", "t = int(input())\n\ndef gcd(a, b):\n    while b:\n        temp = a\n        a = b\n        b = temp % a\n    return a\nwhile t > 0:\n    t -= 1\n    (n, m) = map(int, input().split())\n    ans = n * m\n    i = 10 ** 18\n    while i >= 10:\n        lcm = i * n // gcd(i, n)\n        if lcm / n <= m:\n            k = lcm // n\n            k = m // k\n            ans = int(lcm * k)\n            break\n        i = i // 10\n    print(ans)", "t = int(input())\n\ndef gcd(a, b):\n    while b:\n        temp = a\n        a = b\n        b = temp % a\n    return a\nwhile t > 0:\n    t -= 1\n    (n, m) = map(int, input().split())\n    ans = n * m\n    i = 10 ** 18\n    while i >= 10:\n        lcm = i * n // gcd(i, n)\n        if lcm / n <= m:\n            k = lcm // n\n            k = m // k\n            ans = int(lcm * k)\n            break\n        i = i // 10\n    print(ans)", "t = int(input())\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    res = n * m\n    for l in range(20, 0, -1):\n        M = 10 ** l\n        curr = M // gcd(n, M)\n        if curr <= m:\n            res = n * curr * int(m // curr)\n            break\n    print(res)", "T = int(input())\nmp = {1: 10, 2: 5, 3: 10, 4: 5, 5: 2, 6: 5, 7: 10, 8: 5, 9: 10}\n\ndef matsubi(n):\n    (d, m) = divmod(n, 10)\n    if m != 0:\n        return m\n    return matsubi(d)\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    while True:\n        mt = matsubi(N)\n        if mp[mt] <= M:\n            N *= mp[mt]\n            M //= mp[mt]\n        else:\n            break\n    N *= M\n    print(N)", "t = int(input())\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    res = n * m\n    for l in range(20, 0, -1):\n        M = 10 ** l\n        curr = M // gcd(n, M)\n        if curr <= m:\n            res = n * curr * int(m // curr)\n            break\n    print(res)", "def sol(m, n):\n    mod = 10\n    num = n\n    k = 1\n    mult = 1\n    counter = 1\n    curr = n\n    while k <= m:\n        if n % mod == 0:\n            mult = counter * mult\n            mod = mod * 10\n            counter = 1\n            curr = n\n        else:\n            k += mult\n            counter += 1\n            n += num * mult\n            if counter * mult > mod:\n                if curr == num:\n                    return num * m\n                else:\n                    multi = (m - k) // mult\n                    if multi == 0:\n                        return n\n                    else:\n                        return n + num * multi\n    return n - mult * num\nT = int(input())\nfor test_case in range(1, T + 1):\n    (n, m) = [int(s) for s in input().split(' ')]\n    s = sol(m, n)\n    print(s)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a // gcd(a, b) * b\nt = int(input())\nwhile t > 0:\n    (n, m) = [int(x) for x in input().split()]\n    x = n * m\n    digs = 0\n    while x > 0:\n        x = x // 10\n        digs += 1\n    target = 10 ** digs\n    val = -1\n    while target > 1:\n        fin = lcm(n, target) // n\n        if fin > m:\n            target = target // 10\n        else:\n            org_fin = fin\n            while fin <= m:\n                val = n * fin\n                fin = fin + org_fin\n            break\n    if val == -1:\n        print(n * m)\n    else:\n        print(val)\n    t -= 1", "def calc(n):\n    cnt = 0\n    while n:\n        if n % 10 == 0:\n            cnt += 1\n        else:\n            break\n        n //= 10\n    return cnt\nt = int(input())\nfor test in range(t):\n    ma = -1\n    ans = 0\n    (n, m) = map(int, input().split())\n    needt = 1\n    was = n\n    x = n\n    cnt1 = 0\n    cnt2 = 0\n    while x % 2 == 0:\n        x //= 2\n        cnt1 += 1\n    while x % 5 == 0:\n        x //= 5\n        cnt2 += 1\n    if cnt1 > cnt2:\n        for b in range(0, 70):\n            tmp = 5 ** b\n            if tmp > m:\n                continue\n            ok = str(tmp * n)\n            xx = tmp * n\n            cnt = calc(xx)\n            if cnt > ma:\n                ma = cnt\n                ans = tmp * n\n                needt = tmp\n    elif cnt1 < cnt2:\n        for b in range(0, 70):\n            tmp = 2 ** b\n            if tmp > m:\n                continue\n            ok = str(tmp * n)\n            xx = tmp * n\n            cnt = calc(xx)\n            if cnt > ma:\n                ma = cnt\n                ans = tmp * n\n                needt = tmp\n    while needt * 10 <= m and needt:\n        needt *= 10\n    if needt:\n        n *= needt\n    l = 1\n    r = int(1000000000.0)\n    while r - l > 1:\n        mid = (l + r) // 2\n        if n * mid <= was * m:\n            l = mid\n        else:\n            r = mid\n    if n * l <= was * m:\n        n *= l\n    if calc(n) == 0 or n % was != 0 or n < was:\n        print(was * m)\n    else:\n        print(n)"]