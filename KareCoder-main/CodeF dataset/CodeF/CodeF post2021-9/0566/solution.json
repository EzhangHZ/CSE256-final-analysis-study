["import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    T = {}\n    A = []\n    for _ in range(n):\n        I = list(map(int, input().split()))\n        J = [0] * (m + 1)\n        for i in range(m):\n            J[I[i]] = i + 1\n        D = T\n        for num in J[1:]:\n            if not num in D:\n                D[num] = {}\n            D = D[num]\n        A.append(I)\n    Ans2 = []\n    for data in A:\n        Ans = 0\n        D = T\n        for num in data:\n            if num in D:\n                Ans += 1\n                D = D[num]\n            else:\n                break\n        Ans2.append(Ans)\n    print(*Ans2)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    T = {}\n    A = []\n    for _ in range(n):\n        I = list(map(int, input().split()))\n        J = [0] * (m + 1)\n        for i in range(m):\n            J[I[i]] = i + 1\n        D = T\n        for num in J[1:]:\n            if not num in D:\n                D[num] = {}\n            D = D[num]\n        A.append(I)\n    Ans2 = []\n    for data in A:\n        Ans = 0\n        D = T\n        for num in data:\n            if num in D:\n                Ans += 1\n                D = D[num]\n            else:\n                break\n        Ans2.append(Ans)\n    print(*Ans2)", "from bisect import bisect\n\ndef prefix_len(p, q, m):\n    i = 0\n    while i < m and p[i] == q[i]:\n        i += 1\n    return i\nt = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    ps = []\n    for _ in range(n):\n        p = list(map(int, input().split()))\n        ps.append(p)\n    qs = []\n    for p in ps:\n        q = [None] * len(p)\n        for (i, x) in enumerate(p, 1):\n            q[x - 1] = i\n        qs.append(q)\n    qs.sort()\n    for p in ps:\n        idx = bisect(qs, p)\n        cnt = 0\n        for j in (idx - 1, idx, idx + 1):\n            if 0 <= j < n:\n                cnt = max(cnt, prefix_len(p, qs[j], m))\n        print(cnt, end=' ')\n    print()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    t = {}\n    y = []\n    for _ in range(n):\n        z = list(map(int, input().split()))\n        q = [0] * (m + 1)\n        for i in range(m):\n            q[z[i]] = i + 1\n        x = t\n        for num in q[1:]:\n            if not num in x:\n                x[num] = {}\n            x = x[num]\n        y.append(z)\n    ans2 = []\n    for data in y:\n        ans = 0\n        x = t\n        for num in data:\n            if num in x:\n                ans += 1\n                x = x[num]\n            else:\n                break\n        ans2.append(ans)\n    print(*ans2)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n1, m1) = map(int, input().split())\n    T = {}\n    A = []\n    for _ in range(n1):\n        I = list(map(int, input().split()))\n        J = [0] * (m1 + 1)\n        for i in range(m1):\n            J[I[i]] = i + 1\n        D = T\n        for num in J[1:]:\n            if not num in D:\n                D[num] = {}\n            D = D[num]\n        A.append(I)\n    Ans2 = []\n    for data in A:\n        Ans = 0\n        D = T\n        for num in data:\n            if num in D:\n                Ans += 1\n                D = D[num]\n            else:\n                break\n        Ans2.append(Ans)\n    print(*Ans2)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    b = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            a[i][j] -= 1\n            b[i][a[i][j]] = j\n    c = [set() for _ in range(m)]\n    for i in range(n):\n        h = 0\n        for j in range(m):\n            h = h * 10 + b[i][j]\n            c[j].add(h)\n    ans = []\n    for i in range(n):\n        h = 0\n        t = 0\n        for j in range(m):\n            h = h * 10 + a[i][j]\n            if h in c[j]:\n                t = j + 1\n        ans += (t,)\n    print(*ans)", "import sys\n\ndef make_empty_dict(size):\n    return {idx: None for idx in range(1, size + 1)}\n\ndef make_tree(rev):\n    m = len(rev[0])\n    root = make_empty_dict(size=m)\n    for perm in rev:\n        tmp = root\n        for el in perm:\n            if tmp[el] is None:\n                tmp[el] = make_empty_dict(size=m)\n            tmp = tmp[el]\n    return root\n\ndef search_path(tree, perm):\n    lvl = 0\n    tmp = tree\n    for el in perm:\n        if tmp[el] is None:\n            break\n        else:\n            tmp = tmp[el]\n            lvl += 1\n    return lvl\n\ndef solution():\n    (n, m) = map(int, input().split())\n    data = []\n    rev = []\n    for _ in range(n):\n        data.append(list(map(int, input().split())))\n        perm = [0] * m\n        for (idx, el) in enumerate(data[-1]):\n            perm[el - 1] = idx + 1\n        rev.append(perm)\n    tree = make_tree(rev)\n    ans = [search_path(tree, perm) for perm in data]\n    print(*ans)\nt = int(input())\nfor _ in range(t):\n    solution()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    b = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            a[i][j] -= 1\n            b[i][a[i][j]] = j\n    c = [set() for _ in range(m)]\n    for i in range(n):\n        h = 0\n        for j in range(m):\n            h = h * 10 + b[i][j]\n            c[j].add(h)\n    ans = []\n    for i in range(n):\n        h = 0\n        t = 0\n        for j in range(m):\n            h = h * 10 + a[i][j]\n            if h in c[j]:\n                t = j + 1\n        ans += (t,)\n    print(*ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    all = set()\n    for i in range(n):\n        prefix = ''\n        for j in range(m):\n            prefix += str(a[i].index(j + 1) + 1)\n            all.add(prefix)\n    res = []\n    for i in range(n):\n        tmp = 0\n        prefix = ''\n        for j in range(m):\n            prefix += str(a[i][j])\n            if prefix in all:\n                tmp += 1\n            else:\n                break\n        res.append(tmp)\n    print(*res)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    all = set()\n    for i in range(n):\n        prefix = ''\n        for j in range(m):\n            prefix += str(a[i].index(j + 1) + 1)\n            all.add(prefix)\n    res = []\n    for i in range(n):\n        tmp = 0\n        prefix = ''\n        for j in range(m):\n            prefix += str(a[i][j])\n            if prefix in all:\n                tmp += 1\n            else:\n                break\n        res.append(tmp)\n    print(*res)", "import sys\ninput = sys.stdin.readline\n\nclass TrieNode:\n\n    def __init__(self, v=None):\n        self.children = {}\n        self.val = v\n        self.end = False\n\ndef readList():\n    return list(map(int, input().split()))\n\ndef readInt():\n    return int(input())\n\ndef readInts():\n    return map(int, input().split())\n\ndef readStr():\n    return input().strip()\n\ndef solve():\n    (n, m) = readInts()\n    arr = [readList() for _ in range(n)]\n    root = TrieNode()\n    for i in range(n):\n        node = root\n        inv = [0] * m\n        for j in range(m):\n            inv[arr[i][j] - 1] = j + 1\n        for j in range(m):\n            if inv[j] not in node.children:\n                node.children[inv[j]] = TrieNode(inv[j])\n            node = node.children[inv[j]]\n    ans = []\n    for i in range(n):\n        node = root\n        cnt = 0\n        for j in range(m):\n            if arr[i][j] in node.children:\n                node = node.children[arr[i][j]]\n                cnt += 1\n            else:\n                break\n        ans.append(cnt)\n    return ans\nfor _ in range(int(input())):\n    print(*solve())", "def getint():\n    return int(input())\n\ndef getfloat():\n    return float(input())\n\ndef getints():\n    return list(map(int, input().split()))\n\ndef getfloats():\n    return list(map(float, input().split()))\n\nclass TrieNode:\n\n    def __init__(self):\n        self.isWord = False\n        self.next = {}\n\nclass Trie:\n\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word):\n        n = self.root\n        for i in word:\n            if i not in n.next:\n                n.next[i] = TrieNode()\n            n = n.next[i]\n        n.isWord = True\n\n    def search(self, word):\n        n = self.root\n        ans = 0\n        for i in word:\n            if i not in n.next:\n                return ans\n            else:\n                ans += 1\n                n = n.next[i]\n        return ans\n\ndef inv(a):\n    c = [0 for i in range(len(a))]\n    for (i, k) in enumerate(a):\n        c[k - 1] = i + 1\n    return c\nfrom collections import deque\nT = getint()\nfor _t in range(T):\n    (n, m) = getints()\n    mat = [getints() for j in range(n)]\n    remains = deque(list(range(n)))\n    ans = [0 for i in range(n)]\n    trie = Trie()\n    for m in mat:\n        trie.insert(inv(m))\n    for i in range(n):\n        ans[i] = trie.search(mat[i])\n    print(' '.join(map(str, ans)))", "def getint():\n    return int(input())\n\ndef getfloat():\n    return float(input())\n\ndef getints():\n    return list(map(int, input().split()))\n\ndef getfloats():\n    return list(map(float, input().split()))\n\nclass TrieNode:\n\n    def __init__(self):\n        self.isWord = False\n        self.next = {}\n\nclass Trie:\n\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word):\n        n = self.root\n        for i in word:\n            if i not in n.next:\n                n.next[i] = TrieNode()\n            n = n.next[i]\n        n.isWord = True\n\n    def search(self, word):\n        n = self.root\n        ans = 0\n        for i in word:\n            if i not in n.next:\n                return ans\n            else:\n                ans += 1\n                n = n.next[i]\n        return ans\n\ndef inv(a):\n    c = [0 for i in range(len(a))]\n    for (i, k) in enumerate(a):\n        c[k - 1] = i + 1\n    return c\nfrom collections import deque\nT = getint()\nfor _t in range(T):\n    (n, m) = getints()\n    mat = [getints() for j in range(n)]\n    remains = deque(list(range(n)))\n    ans = [0 for i in range(n)]\n    trie = Trie()\n    for m in mat:\n        trie.insert(inv(m))\n    for i in range(n):\n        ans[i] = trie.search(mat[i])\n    print(' '.join(map(str, ans)))", "import sys\nfrom collections import defaultdict\ninput = sys.stdin.readline\ndebug = print if 'LOCAL' in sys.argv else lambda *_: None\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mp = defaultdict(list)\n    mx = {}\n    a = [[0] * m for _ in range(n)]\n    for i in range(n):\n        s = ''\n        for (j, val) in enumerate(map(int, input().split())):\n            a[i][j] = val - 1\n            s += str(a[i][j])\n            mp[s].append(i)\n        debug(a[i])\n    for i in range(n):\n        p = [0] * m\n        for j in range(m):\n            p[a[i][j]] = j\n        s = ''\n        for b in range(1, m + 1):\n            s += str(p[b - 1])\n            mx[s] = max(mx.get(s, 0), b)\n    ans = [0] * n\n    for (s, v) in mp.items():\n        val = mx.get(s, 0)\n        for x in v:\n            ans[x] = max(ans[x], val)\n    print(*ans)"]