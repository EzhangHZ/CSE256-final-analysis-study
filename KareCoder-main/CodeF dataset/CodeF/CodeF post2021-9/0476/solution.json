["import sys\nimport math\n\ndef input_parse_expression(input_lines, i):\n    (n, m, k) = map(int, input_lines[2 * i + 1].split())\n    a = map(int, input_lines[2 * i + 2].split())\n    return (n, m, k, a)\n\ndef solve(test_case_input):\n    (n, m, k, a) = test_case_input\n    if m < k:\n        return 'NO'\n    max_a_allowed = n // k\n    num_1_gt_allowed = n % k\n    for ai in a:\n        if ai - max_a_allowed > 1:\n            return 'NO'\n        if ai - max_a_allowed == 1:\n            num_1_gt_allowed -= 1\n        if num_1_gt_allowed < 0:\n            return 'NO'\n    return 'YES'\n\ndef main():\n    input_str = sys.stdin.read()\n    input_lines = input_str.strip().split('\\n')\n    n_cases = int(input_lines[0])\n    for i in range(n_cases):\n        test_case_input = input_parse_expression(input_lines, i)\n        solution = solve(test_case_input)\n        print(solution)\nmain()", "import sys\nt = int(sys.stdin.readline())\nfor i in range(t):\n    (n, m, k) = map(int, sys.stdin.readline().split())\n    lst = list(map(int, sys.stdin.readline().split()))\n    ma = max(lst)\n    if n % k == 0:\n        ele = n // k\n        ct = lst.count(ele)\n        if ma > ele or ct > k:\n            print('NO')\n        else:\n            print('YES')\n    else:\n        ele = n // k + 1\n        ct = lst.count(ele)\n        if ma > ele or ct > n % k:\n            print('NO')\n        else:\n            print('YES')", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, m, k) = map(int, inp().split())\n    a = list(map(int, inp().split()))\n    d = n // k\n    r = n % k\n    b = k - r\n    c = r\n    a.sort(reverse=True)\n    for v in a:\n        if v > d + 1:\n            print('NO')\n            return\n        if v == d + 1:\n            if c == 0:\n                print('NO')\n                return\n            c -= 1\n    print('YES')\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (N, M, K) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    D = N // K\n    R = N % K\n    for i in A:\n        if i > D + 1:\n            print('NO')\n            return\n        elif i == D + 1:\n            R -= 1\n    if R < 0:\n        print('NO')\n    else:\n        print('YES')\nfor _ in range(int(input())):\n    solve()", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s.strip())\n\ndef invr():\n    return map(int, input().split())\nfor _ in range(inp()):\n    (n, m, k) = invr()\n    arr = inlt()\n    arr.sort(reverse=True)\n    val = n // k\n    c = 0\n    for i in arr:\n        if i > val + 1:\n            c = -1\n            break\n        elif i == val + 1:\n            c += 1\n        else:\n            break\n    if c == -1:\n        print('NO')\n    elif c <= n % k:\n        print('YES')\n    else:\n        print('NO')", "from sys import stdin\n\ndef main():\n    for _ in range(int(stdin.readline().strip())):\n        (n, m, k) = list(map(int, stdin.readline().strip().split()))\n        colors = list(map(int, stdin.readline().strip().split()))\n        colors.sort()\n        x = n // k + (n % k != 0)\n        if max(colors) > x:\n            print('NO')\n        else:\n            count = 0\n            for i in colors:\n                if i == x:\n                    count += 1\n            if count > n % k and n % k != 0:\n                print('NO')\n            else:\n                print('YES')\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef readList():\n    return list(map(int, input().split()))\n\ndef readInt():\n    return int(input())\n\ndef readInts():\n    return map(int, input().split())\n\ndef readStr():\n    return input().strip()\n\ndef solve():\n    (n, m, k) = readInts()\n    arr = readList()\n    (val, r) = (n // k, n % k)\n    cnt = 0\n    for i in range(m):\n        if arr[i] <= val:\n            continue\n        if arr[i] > val + 1:\n            return 'NO'\n        cnt += 1\n    return 'YES' if cnt <= r else 'NO'\nfor _ in range(int(input())):\n    print(solve())", "import sys\nimport math\n\ndef fn(n, m, k, colors):\n    max_value = max(colors)\n    cap = math.ceil(n / k)\n    rem = n % k\n    count = 0\n    if max_value > cap:\n        return 'NO'\n    elif max_value < cap:\n        return 'YES'\n    if rem == 0:\n        return 'YES'\n    for item in colors:\n        if item == cap:\n            count += 1\n            if count > rem:\n                return 'NO'\n    return 'YES'\ninput = sys.stdin.readlines()\nfor i in range(int(input[0].strip('\\n'))):\n    (n, m, k) = tuple([int(x) for x in input[2 * i + 1].strip('\\n').split(' ')])\n    colors = [int(x) for x in input[2 * i + 2].strip('\\n').split(' ')]\n    print(fn(n, m, k, colors))", "n = int(input())\nout = []\nfor i in range(0, n):\n    t = list(map(int, input().split()))\n    data = list(map(int, input().split()))\n    w = data.sort()\n    o = True\n    j = t[1] - 1\n    d = t[0] % t[2]\n    r = t[0] // t[2]\n    while True:\n        if data[j] > r:\n            if d > 0 and data[j] - 1 == r:\n                d = d - 1\n                j = j - 1\n            else:\n                o = False\n                break\n        if data[j] <= r:\n            break\n    if o:\n        out.append('YES')\n    else:\n        out.append('NO')\nfor i in range(0, n):\n    print(out[i])", "t = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    key = 0\n    div = n // k\n    temp = n % k\n    c = 0\n    for j in arr:\n        if j == div + 1:\n            c += 1\n        elif j > div + 1:\n            key = 1\n            break\n    if c > temp:\n        key = 1\n    if key == 1:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    lst = list(map(int, input().split()))\n    lst1 = list(map(int, input().split()))\n    (n, m, k) = (lst[0], lst[1], lst[2])\n    maxf = 0\n    maxe = 0\n    if n % k:\n        maxf = n // k + 1\n        maxe = n % k\n    else:\n        maxf = n // k\n        maxe = k\n    for val in lst1:\n        if val > maxf:\n            maxe = -1\n            break\n        elif val == maxf:\n            maxe -= 1\n    if maxe < 0:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    (n, m, k) = [int(i) for i in input().strip().split()]\n    a = [int(i) for i in input().strip().split()]\n    if k == 1:\n        print('YES')\n    elif k > m:\n        print('NO')\n    else:\n        tot = n // k\n        val = n % k\n        check = True\n        for i in range(m):\n            if a[i] > tot:\n                if a[i] == tot + 1 and val:\n                    val -= 1\n                else:\n                    check = False\n                    break\n            else:\n                pass\n        if check:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    size = n // k\n    extra = n % k\n    flag = True\n    arr = list(map(int, input().split()))\n    for x in arr:\n        if x > size:\n            if x - size == 1:\n                if extra <= 0:\n                    flag = False\n                else:\n                    extra -= 1\n            else:\n                flag = False\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "a = int(input())\nfor _ in range(a):\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    s = 1\n    if c[2] > c[1]:\n        print('NO')\n    elif c[0] % c[2] == 0:\n        if max(d) > c[0] // c[2]:\n            print('NO')\n        else:\n            print('YES')\n    elif max(d) > c[0] // c[2] + 1:\n        print('NO')\n    elif max(d) == c[0] // c[2] + 1:\n        if d.count(max(d)) > c[0] % c[2]:\n            print('NO')\n        else:\n            print('YES')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (n, m, k) = tuple(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    (q, r) = (n // k, n % k)\n    res = True\n    for c in arr:\n        if c > q + 1:\n            res = False\n            break\n        elif c == q + 1:\n            if r > 0:\n                r -= 1\n            else:\n                res = False\n                break\n    print('YES' if res else 'NO')", "t = int(input())\nfor k in range(t):\n    (n, m, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if n % k == 0:\n        p = int(n / k)\n    else:\n        p = int(n / k) + 1\n    if n % k == 0:\n        if max(l) > p:\n            print('NO')\n        else:\n            print('YES')\n    else:\n        c = 0\n        if max(l) > p:\n            print('NO')\n        else:\n            for i in range(m):\n                if l[i] == p:\n                    c += 1\n                if c > n % k:\n                    print('NO')\n                    break\n            if c <= n % k:\n                print('YES')", "for _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = n // k\n    r = n % k\n    f = 'YES'\n    for i in l:\n        if i > d + 1:\n            f = 'NO'\n            break\n        elif i == d + 1:\n            r -= 1\n            if r < 0:\n                f = 'NO'\n                break\n    print(f)", "for i in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    z = max(arr)\n    if (z - 1) * k + arr.count(z) > n:\n        ans = 'NO'\n    else:\n        ans = 'YES'\n    print(ans)", "for _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if m < k:\n        print('NO')\n    else:\n        l.sort()\n        for i in range(n % k):\n            l[m - i - 1] -= 1\n        l.sort()\n        if n // k < l[m - 1]:\n            print('NO')\n        else:\n            print('YES')", "def main():\n    t = int(input())\n    for i in range(t):\n        (n, m, k) = map(int, input().split())\n        a = list(map(int, input().split()))\n        max_occ = (n + k - 1) // k\n        count_max_occ = 0\n        possible = True\n        for j in range(m):\n            if a[j] > max_occ:\n                possible = False\n                break\n            if a[j] == max_occ:\n                count_max_occ += 1\n        n_k = n % k\n        if n_k == 0:\n            n_k = k\n        if count_max_occ > n_k:\n            possible = False\n        if possible:\n            print('YES')\n        else:\n            print('NO')\nmain()", "def ceildiv(a, b):\n    return -(a // -b)\nfor _ in range(int(input())):\n    (n, m, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if k > m:\n        print('NO')\n        continue\n    a = sorted(a, reverse=True)\n    okay = True\n    max_idx = min(n % k, len(a))\n    for i in range(max_idx):\n        if a[i] > n // k + 1:\n            okay = False\n    for i in range(max_idx, len(a)):\n        if a[i] > n // k:\n            okay = False\n    if okay:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\ni = 0\nwhile i < t:\n    n_m_k = [int(b) for b in input().split()]\n    frequency = [int(c) for c in input().split()]\n    a_i = max(frequency)\n    n_a_i = frequency.count(max(frequency))\n    n = n_m_k[0]\n    k = n_m_k[2]\n    if n_m_k[2] == 1:\n        print('YES')\n    elif n == n_m_k[2]:\n        if a_i == 1:\n            print('YES')\n        else:\n            print('NO')\n    elif n % k == 0:\n        if a_i == n / k:\n            if n_a_i <= k:\n                print('YES')\n            else:\n                print('NO')\n        elif a_i < n / k:\n            print('YES')\n        else:\n            print('NO')\n    elif a_i == n // k + 1:\n        if n_a_i <= n % k:\n            print('YES')\n        else:\n            print('NO')\n    elif a_i < n // k + 1:\n        print('YES')\n    else:\n        print('NO')\n    i += 1", "t = int(input())\nfor _ in range(t):\n    (n, m, k) = map(int, input().split(' '))\n    vals = list(map(int, input().split(' ')))\n    res = 'YES'\n    for v in vals:\n        if not n % k and v > n / k:\n            res = 'NO'\n            break\n        if n % k and v > n // k + 1:\n            res = 'NO'\n            break\n        if n % k and v == n // k + 1:\n            res = 'YES'\n            if vals.count(v) > n % k:\n                res = 'NO'\n    print(res)", "for _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (x, y) = divmod(n, k)\n    if max(a) > x + 1 or a.count(x + 1) > y:\n        print('NO')\n    else:\n        print('YES')", "import math\nimport collections\nimport bisect\nimport heapq\nfrom collections import deque\nfrom math import sqrt, ceil, floor\n\ndef inp_arr():\n    return list(map(int, input().strip().split(' ')))\n\ndef inp_str_arr():\n    return list(input().strip().split(' '))\n\ndef inp_str():\n    return input()\n\ndef solve():\n    (n, m, k) = inp_arr()\n    a = inp_arr()\n    rem = n % k\n    maxx = n // k\n    maxx2 = maxx + 1\n    for x in a:\n        if x > maxx2:\n            print('NO')\n            return\n        if x == maxx2 and rem <= 0:\n            print('NO')\n            return\n        if x == maxx2:\n            rem -= 1\n    print('YES')\n(tt,) = inp_arr()\nfor t in range(tt):\n    solve()", "t = int(input())\nfor i in range(t):\n    s = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    if s[0] % s[2] == 0:\n        a = 0\n    else:\n        a = 1\n    b = a + s[0] // s[2]\n    count = 0\n    for j in x:\n        if j > b:\n            print('NO')\n            break\n        if j == b:\n            count += 1\n    else:\n        if s[0] % s[2] == 0:\n            print('YES')\n        elif count > s[0] % s[2]:\n            print('NO')\n        else:\n            print('YES')", "t = int(input())\nfor _ in range(t):\n    (n, m, k) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    ost = n % k\n    ost_s = set()\n    d = n // k\n    for i in a:\n        if i > d:\n            if ost <= 0 or i - d > 1:\n                print('NO')\n                break\n            else:\n                ost -= 1\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    if n % k == 0:\n        if a[0] > n // k:\n            print('NO')\n        else:\n            print('YES')\n    elif a[0] > n // k + 1 or a.count(n // k + 1) > n % k:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if (max(arr) - 1) * k + arr.count(max(arr)) > n:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    (n, m, k) = list(map(int, input().split(sep=' ')))\n    a = list(map(int, input().split(sep=' ')))\n    m = max(a)\n    x = n // k\n    count = a.count(m)\n    if n >= (m - 1) * k + count:\n        print('YES')\n    else:\n        print('NO')", "import math\nm = int(input())\nfor i in range(m):\n    (c, m, k) = input().split()\n    c = int(c)\n    k = int(k)\n    nums = [int(a) for a in input().split()]\n    e = math.ceil(c / k)\n    r = c % k if c % k != 0 else k\n    b = 0\n    for i in nums:\n        if i == e:\n            b += 1\n        if i > e:\n            b = -1\n            break\n    if b == -1:\n        print('NO')\n    elif b <= r:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor t_ in range(t):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    pos = True\n    c = min(n - n // k * k, m)\n    for i in range(c):\n        pos &= a[i] <= (n + k - 1) // k\n    for i in range(c, m):\n        pos &= a[i] <= n // k\n    if pos:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    (n, m, k) = list(map(int, input().split(sep=' ')))\n    a = list(map(int, input().split(sep=' ')))\n    m = max(a)\n    z = n // k\n    cnt = a.count(m)\n    if n < (m - 1) * k + cnt:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor i in range(0, t):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if n % k == 0:\n        max_f = n // k\n        max_e = k\n    else:\n        max_f = n // k + 1\n        max_e = n % k\n    for i in range(0, m):\n        if a[i] > max_f:\n            max_e = -1\n            break\n        elif a[i] == max_f:\n            max_e = max_e - 1\n    if max_e < 0:\n        print('NO')\n    else:\n        print('YES')", "test = int(input())\nwhile test:\n    (n, m, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    max_f = max_o = 0\n    found = 1\n    if n % k:\n        max_f = n // k + 1\n        max_o = n % k\n    else:\n        max_f = n // k\n        max_o = k\n    for i in a:\n        if i > max_f:\n            found = 0\n            break\n        elif i == max_f:\n            max_o -= 1\n        if max_o < 0:\n            found = 0\n            break\n    if found:\n        print('YES')\n    else:\n        print('NO')\n    test -= 1", "import math\nfrom collections import Counter\n\ndef li():\n    return list(map(int, input().split()))\n\ndef nt():\n    return int(input())\n\ndef st():\n    return input()\nyes = 'YES'\nno = 'NO'\neven = 'EVEN'\nodd = 'ODD'\n\ndef prefix(L):\n    size = len(L)\n    for i in range(1, size):\n        L[i] = L[i] + L[i - 1]\n    return L\nfor _ in range(int(input())):\n    (n, m, k) = li()\n    L = li()\n    m = max(L)\n    fre = L.count(m)\n    if m > math.ceil(n / k):\n        print(no)\n    elif m == math.ceil(n / k) and fre <= (n - 1) % k + 1:\n        print(yes)\n    elif m < math.ceil(n / k):\n        print(yes)\n    else:\n        print(no)", "for _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if m < k:\n        print('NO')\n    else:\n        l.sort()\n        for i in range(n % k):\n            l[m - i - 1] -= 1\n        l.sort()\n        if n // k < l[m - 1]:\n            print('NO')\n        else:\n            print('YES')", "for _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if m < k:\n        print('NO')\n    else:\n        l.sort()\n        for i in range(n % k):\n            l[m - i - 1] -= 1\n        l.sort()\n        if n // k < l[m - 1]:\n            print('NO')\n        else:\n            print('YES')", "import math\nfor i in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if (max(arr) - 1) * k + arr.count(max(arr)) > n:\n        ans = 'NO'\n    else:\n        ans = 'YES'\n    print(ans)", "t = int(input())\ni = 0\nwhile i < t:\n    n_m_k = [int(b) for b in input().split()]\n    frequency = [int(c) for c in input().split()]\n    a_i = max(frequency)\n    n_a_i = frequency.count(max(frequency))\n    n = n_m_k[0]\n    k = n_m_k[2]\n    if k == 1:\n        print('YES')\n    elif n == k:\n        if a_i == 1:\n            print('YES')\n        else:\n            print('NO')\n    elif n % k == 0:\n        if a_i <= n / k:\n            print('YES')\n        else:\n            print('NO')\n    elif a_i == n // k + 1:\n        if n_a_i <= n % k:\n            print('YES')\n        else:\n            print('NO')\n    elif a_i < n // k + 1:\n        print('YES')\n    else:\n        print('NO')\n    i += 1", "t = int(input())\nfor _ in range(t):\n    (n, m, k) = map(int, input().split(' '))\n    vals = list(map(int, input().split(' ')))\n    res = 'YES'\n    for v in vals:\n        if not n % k and v > n / k:\n            res = 'NO'\n            break\n        if n % k and v > n // k + 1:\n            res = 'NO'\n            break\n        if n % k and v == n // k + 1:\n            res = 'YES'\n            if vals.count(v) > n % k:\n                res = 'NO'\n    print(res)", "t = int(input())\nfor _ in range(t):\n    (n, m, k) = list(map(int, input().split(sep=' ')))\n    a = list(map(int, input().split(sep=' ')))\n    m = max(a)\n    x = n // k\n    count = a.count(m)\n    if n >= (m - 1) * k + count:\n        print('YES')\n    else:\n        print('NO')\n    del n, m, k, a, count", "import sys, os\nif os.getlogin() == 'arun':\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nfrom collections import defaultdict\nimport math\nimport heapq\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    lt = list(map(int, input().split()))\n    count = 0\n    valid = n % k if n % k else k\n    seg = math.ceil(n / k)\n    if m < k:\n        print('NO')\n        continue\n    for x in lt:\n        if x == seg:\n            count += 1\n        if x > seg or valid < count:\n            count = valid + 1\n    print('NO' if count > valid else 'YES')", "for _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if (max(arr) - 1) * k + arr.count(max(arr)) > n:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = n // k\n    r = n % k\n    f = 'YES'\n    for i in l:\n        if i > d + 1:\n            f = 'NO'\n            break\n        elif i == d + 1:\n            r -= 1\n            if r < 0:\n                f = 'NO'\n                break\n    print(f)", "def fun(n, k, m, l):\n    r = n % k\n    for i in range(m):\n        if l[i] > n // k:\n            if l[i] - n // k > 1:\n                return -1\n            else:\n                r = r - 1\n            if r < 0:\n                return -1\n    return 0\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if fun(n, k, m, l) == -1:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor i in range(t):\n    l = list(map(int, input().strip().split()))\n    m = list(map(int, input().strip().split()))\n    flag = False\n    d = 0\n    p = l[0] // l[2]\n    if l[0] % l[2] == 0:\n        for i in range(0, len(m)):\n            if m[i] > p:\n                d = 1\n                break\n    else:\n        c = l[0] % l[2]\n        for i in range(0, len(m)):\n            if m[i] == p + 1:\n                c -= 1\n            elif m[i] > p + 1:\n                d = 1\n                break\n            if c < 0:\n                d = 1\n                break\n    if d == 0:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    res = n % k\n    answer = 'YES'\n    a = list(map(int, input().split()))\n    for i in range(0, m):\n        if a[i] > n // k + 1:\n            answer = 'NO'\n        if a[i] == n // k + 1:\n            res -= 1\n    if res < 0:\n        answer = 'NO'\n    print(answer)", "from collections import defaultdict\n\ndef check(n, m, k, aa):\n    aa.sort()\n    max_count = aa[-1]\n    if max_count <= 1:\n        return True\n    n_max_count = sum([a == max_count for a in aa])\n    if (n - (n_max_count - 1) + k - 1) // k < max_count:\n        return False\n    return True\nn = int(input())\nfor test_n in range(n):\n    (n, m, k) = map(int, input().split(' '))\n    aa = list(map(int, input().split(' ')))\n    assert len(aa) == m\n    assert sum(aa) == n\n    is_valid = check(n, m, k, aa)\n    print('YES' if is_valid else 'NO')", "t = int(input())\nfor tc in range(t):\n    (n, m, k) = input().split()\n    (n, m, k) = (int(n), int(m), int(k))\n    c = input().split()\n    colors = []\n    for i in range(m):\n        colors.append(int(c[i]))\n    rem = n % k\n    cnt = 0\n    flag = True\n    mx = n // k if n % k == 0 else n // k + 1\n    for i in range(m):\n        if colors[i] > mx:\n            flag = False\n            break\n        if colors[i] == mx:\n            cnt += 1\n    if flag == False:\n        print('NO')\n        continue\n    if n % k == 0:\n        print('YES')\n    elif cnt <= rem:\n        print('YES')\n    else:\n        print('NO')", "testcases = int(input())\nfor a in range(testcases):\n    possible = True\n    nmk = input()\n    colors = input()\n    nmk = nmk.split()\n    n = int(nmk[0])\n    m = int(nmk[1])\n    k = int(nmk[2])\n    colors = colors.split()\n    colors = [int(a) for a in colors]\n    if max(colors) >= n // k + (n % k > 0):\n        if max(colors) > n // k + (n % k > 0):\n            possible = False\n        elif max(colors) == n // k + (n % k > 0):\n            if colors.count(max(colors)) > n % k > 0:\n                possible = False\n    print('YES' if possible else 'NO')", "for _ in range(int(input())):\n    (n, m, k) = list(map(int, input().split()))\n    freq = list(map(int, input().split()))\n    max_col = max(freq)\n    rem = n // k\n    count = freq.count(max_col)\n    if n >= (max_col - 1) * k + count:\n        print('YES')\n    else:\n        print('NO')", "def solve(N, M, K, arr):\n    arr.sort(reverse=True)\n    _max = arr[0]\n    i = 0\n    while i < M and arr[i] == _max:\n        i += 1\n    left = N - _max * i\n    need = (_max - 1) * (K - i)\n    if need > left:\n        return 'NO'\n    else:\n        return 'YES'\nT = int(input().strip())\nfor _ in range(T):\n    (N, M, K) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    ans = solve(N, M, K, arr)\n    print(ans)", "import heapq\nimport math\nt = int(input())\nwhile t:\n    (n, m, k) = input().split()\n    n = int(n)\n    m = int(m)\n    k = int(k)\n    heap = input().split()\n    good = True\n    heap = [int(ele) for ele in heap]\n    count = 0\n    lastSegment = n % k if n % k != 0 else k\n    for num in heap:\n        if num == math.ceil(n / k):\n            count += 1\n        if num > math.ceil(n / k):\n            good = False\n            break\n    if good and count <= lastSegment:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "def ceiling(a, b):\n    if a % b == 0:\n        return a // b\n    else:\n        return a // b + 1\n\ndef max_pos(n, k):\n    if n % k == 0:\n        return k\n    else:\n        return n % k\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = max(a)\n    co = a.count(b)\n    if b > ceiling(n, k):\n        print('NO')\n    elif b == ceiling(n, k):\n        if co > max_pos(n, k):\n            print('NO')\n        else:\n            print('YES')\n    else:\n        print('YES')", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (n, m, k) = list(map(int, input().split(' ')))\n    a = list(map(int, input().split(' ')))\n    if any([a_i > ceil(n / k) for a_i in a]) or m < k:\n        print('NO')\n        continue\n    elif sum([a_i == ceil(n / k) for a_i in a]) <= n % k or n % k == 0:\n        print('YES')\n        continue\n    else:\n        print('NO')\n        continue", "import math\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    L = list(map(int, input().split()))\n    count = 0\n    t = 0\n    for i in range(m):\n        if L[i] > math.ceil(n / k):\n            print('NO')\n            t = 1\n            break\n        elif L[i] == math.ceil(n / k) and L[i] != n // k:\n            count += 1\n    if t != 1:\n        if count <= n % k:\n            print('YES')\n        else:\n            print('NO')", "def f(P, k, n, m):\n    S = []\n    net = 0\n    p = n // k\n    c = n % k\n    L = sorted(P, reverse=True)\n    for i in range(m):\n        if L[i] > p:\n            net += p\n            L[i] -= p\n        else:\n            net += L[i]\n            L[i] = 0\n        if L[i] > 0:\n            if c > 0:\n                c -= 1\n                L[i] -= 1\n                net += 1\n    if net == n:\n        return 'YES'\n    else:\n        return 'NO'\nx = int(input())\nfor i in range(x):\n    (n, m, k) = map(int, input().split())\n    L = list(map(int, input().split()))\n    print(f(L, k, n, m))", "t = int(input())\nfor _ in range(t):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)[::-1]\n    res = 'YES'\n    if k > m:\n        res = 'NO'\n    full = n // k\n    rem = n % k\n    for i in range(m):\n        cur = a[i]\n        have_space = full + (rem > i)\n        if cur > have_space:\n            res = 'NO'\n    print(res)", "for _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    fl = 0\n    for i in range(m):\n        if a[i] == (n + k - 1) // k:\n            fl += 1\n        if a[i] > (n + k - 1) // k:\n            fl = 1 << 30\n    print('YES' if fl <= (n - 1) % k + 1 else 'NO')", "t = int(input())\nfor _ in range(t):\n    (n, m, k) = map(int, input().split())\n    (*a,) = map(int, input().split())\n    f = 0\n    for a_i in a:\n        if a_i == (n + k - 1) // k:\n            f += 1\n        elif a_i > (n + k - 1) // k:\n            f = 1e+30\n    if f <= (n - 1) % k + 1:\n        print('YES')\n    else:\n        print('NO')", "for asdasd in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    fl = 0\n    for i in a:\n        if i == (n + k - 1) // k:\n            fl += 1\n        if i > (n + k - 1) // k:\n            fl = 1 << 30\n    if fl <= (n - 1) % k + 1:\n        print('YES')\n    else:\n        print('NO')", "R = lambda : [*map(int, input().split())]\nexec(R()[0] * \"n,m,k=R();a=R();print('YNEOS'[a.count(m:=max(a))+k*m-k>n::2]);\")", "R = lambda : [*map(int, input().split())]\nexec(R()[0] * \"n,m,k=R();a=R();print('YNEOS'[a.count(m:=max(a))+k*m-k>n::2]);\")", "R = lambda : [*map(int, input().split())]\nexec(R()[0] * \"n,m,k=R();a=R();print('YNEOS'[a.count(m:=max(a))+k*m-k>n::2]);\")", "R = lambda : [*map(int, input().split())]\nexec(R()[0] * \"n,m,k=R();a=R();print('YNEOS'[a.count(m:=max(a))+k*m-k>n::2]);\")", "R = lambda : [*map(int, input().split())]\nexec(R()[0] * \"n,m,k=R();a=R();print('YNEOS'[a.count(m:=max(a))+k*m-k>n::2]);\")", "R = lambda : [*map(int, input().split())]\nexec(R()[0] * \"n,m,k=R();a=R();print('YNEOS'[a.count(m:=max(a))+k*m-k>n::2]);\")", "A = lambda : [*map(int, input().split())]\nexec(A()[0] * \"n,m,k=A();a=A();print('YNEOS'[a.count(m:=max(a))+k*m-k>n::2]);\")", "R = lambda : [*map(int, input().split())]\nexec(R()[0] * \"n,m,k=R();a=R();print('YNEOS'[a.count(m:=max(a))+k*m-k>n::2]);\")", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * \"n,m,k=R();a=*R(),;print('YNEOS'[a.count(m:=max(a))+k*m-k>n::2]);\")", "R = lambda : [*map(int, input().split())]\nexec(R()[0] * \"n,m,k=R();a=R();print('YNEOS'[a.count(m:=max(a))+k*m-k>n::2]);\")", "R = lambda : [*map(int, input().split())]\nexec(R()[0] * \"n,m,k=R();a=R();print('YNEOS'[a.count(m:=max(a))+k*m-k>n::2]);\")", "R = lambda : map(int, input().split())\n(t,) = R()\nexec(t * \"n,m,k=R();a=[*R()];print('YNEOS'[a.count(max(a))+k*max(a)-k>n::2]);\")", "R = lambda : [*map(int, input().split())]\nexec(R()[0] * \"n,m,k=R();a=R();print('YNEOS'[a.count(m:=max(a))+k*m-k>n::2]);\")"]