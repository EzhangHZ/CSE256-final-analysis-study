["T = int(input())\nfor i in range(T):\n    n = int(input())\n    P1 = set(input().split())\n    P2 = set(input().split())\n    P3 = set(input().split())\n    (S1, S2, S3) = (0, 0, 0)\n    I = P1.intersection(P2, P3)\n    P1.difference_update(I)\n    P2.difference_update(I)\n    P3.difference_update(I)\n    I12 = P1.intersection(P2)\n    I23 = P2.intersection(P3)\n    I31 = P3.intersection(P1)\n    S1 += len(I12) * 1 + len(I31) * 1\n    S2 += len(I23) * 1 + len(I12) * 1\n    S3 += len(I23) * 1 + len(I31) * 1\n    P1.difference_update(I12)\n    P2.difference_update(I12)\n    P2.difference_update(I23)\n    P3.difference_update(I23)\n    P3.difference_update(I31)\n    P1.difference_update(I31)\n    S1 += len(P1) * 3\n    S2 += len(P2) * 3\n    S3 += len(P3) * 3\n    print(S1, S2, S3)", "N = int(input())\nfor _ in range(N):\n    _ = input()\n    set_1 = set(input().split())\n    set_2 = set(input().split())\n    set_3 = set(input().split())\n    set_12 = set_1 & set_2\n    set_13 = set_1 & set_3\n    set_23 = set_2 & set_3\n    set_123 = set_12 & set_3\n    p1_1 = len(set_12) + len(set_13) - 2 * len(set_123)\n    p3_1 = len(set_1) - len(set_12) - len(set_13) + len(set_123)\n    p1_2 = len(set_12) + len(set_23) - 2 * len(set_123)\n    p3_2 = len(set_2) - len(set_12) - len(set_23) + len(set_123)\n    p1_3 = len(set_13) + len(set_23) - 2 * len(set_123)\n    p3_3 = len(set_3) - len(set_23) - len(set_13) + len(set_123)\n    print(p1_1 * 1 + p3_1 * 3, p1_2 * 1 + p3_2 * 3, p1_3 * 1 + p3_3 * 3)", "t = int(input())\nfor i in range(t):\n    (pl_1, pl_2, pl_3) = (list(), list(), list())\n    lst = [pl_1, pl_2, pl_3]\n    n = int(input())\n    for k in range(3):\n        inp = set(input().split())\n        lst[k].extend((inp, 3 * n))\n    a = pl_1[0].intersection(pl_2[0], pl_3[0])\n    if len(a) > 0:\n        pl_1[0].difference_update(a)\n        pl_2[0].difference_update(a)\n        pl_3[0].difference_update(a)\n        pl_1[1] -= 3 * len(a)\n        pl_2[1] -= 3 * len(a)\n        pl_3[1] -= 3 * len(a)\n    if len(pl_1[0].intersection(pl_2[0])) > 0:\n        pl_1[1] -= 2 * len(pl_1[0].intersection(pl_2[0]))\n        pl_2[1] -= 2 * len(pl_1[0].intersection(pl_2[0]))\n    if len(pl_1[0].intersection(pl_3[0])) > 0:\n        pl_1[1] -= 2 * len(pl_1[0].intersection(pl_3[0]))\n        pl_3[1] -= 2 * len(pl_1[0].intersection(pl_3[0]))\n    if len(pl_2[0].intersection(pl_3[0])) > 0:\n        pl_3[1] -= 2 * len(pl_2[0].intersection(pl_3[0]))\n        pl_2[1] -= 2 * len(pl_2[0].intersection(pl_3[0]))\n    print(pl_1[1], pl_2[1], pl_3[1])", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor t_item in range(t):\n    n = int(input())\n    a = set([i for i in input().split()])\n    b = set([i for i in input().split()])\n    c = set([i for i in input().split()])\n    used = []\n    x = 0\n    y = 0\n    z = 0\n    ab = a.intersection(b)\n    abc = ab.intersection(c)\n    ac = a.intersection(c)\n    bc = b.intersection(c)\n    x = (len(a) - (len(ab) + len(ac) - len(abc))) * 3 + (len(ab) + len(ac) - 2 * len(abc))\n    y = (len(b) - (len(ab) + len(bc) - len(abc))) * 3 + (len(ab) + len(bc) - 2 * len(abc))\n    z = (len(c) - (len(ac) + len(bc) - len(abc))) * 3 + (len(ac) + len(bc) - 2 * len(abc))\n    print(x, y, z)", "import sys\ninput = sys.stdin.readline\n\ndef print(*args, end='\\n', sep=' ') -> None:\n    sys.stdout.write(sep.join(map(str, args)) + end)\n\ndef Solve():\n    for t in range(int(input())):\n        n = int(input())\n        ans = [n * 3] * 3\n        a = set(input().split())\n        b = set(input().split())\n        c = set(input().split())\n        Abc = len(a.intersection(b, c))\n        ans[0] -= 3 * Abc\n        ans[0] -= 2 * (len(a.intersection(b)) + len(a.intersection(c)) - 2 * Abc)\n        ans[1] -= 3 * Abc\n        ans[1] -= 2 * (len(b.intersection(a)) + len(b.intersection(c)) - 2 * Abc)\n        ans[2] -= 3 * Abc\n        ans[2] -= 2 * (len(c.intersection(b)) + len(c.intersection(a)) - 2 * Abc)\n        print(*ans)\nSolve()", "t = int(input())\nfor i in range(0, t):\n    g = int(input())\n    arr1 = input()\n    arr1 = arr1.split(' ')\n    arr2 = input()\n    arr2 = arr2.split(' ')\n    arr3 = input()\n    arr3 = arr3.split(' ')\n    p1 = 0\n    p2 = 0\n    p3 = 0\n    s1 = set(arr1)\n    s2 = set(arr2)\n    s3 = set(arr3)\n    s12 = s1.intersection(s2)\n    s23 = s2.intersection(s3)\n    s13 = s1.intersection(s3)\n    s123 = s12.intersection(s3)\n    s12 = len(s12)\n    s13 = len(s13)\n    s23 = len(s23)\n    s1 = len(s1)\n    s2 = len(s2)\n    s3 = len(s3)\n    s123 = len(s123)\n    os1 = s1 - s12 - s13 + s123\n    os2 = s2 - s12 - s23 + s123\n    os3 = s3 - s23 - s13 + s123\n    s1score = 3 * os1 + s12 + s13 - 2 * s123\n    s2score = 3 * os2 + s23 + s12 - 2 * s123\n    s3score = 3 * os3 + s23 + s13 - 2 * s123\n    print(s1score, s2score, s3score)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    p1 = input().split()\n    p2 = input().split()\n    p3 = input().split()\n    s1 = 0\n    s2 = 0\n    s3 = 0\n    p12 = list(set(p1) & set(p2))\n    p23 = list(set(p2) & set(p3))\n    p13 = list(set(p1) & set(p3))\n    p123 = list(set(p12) & set(p23))\n    s1 = 3 * (len(p1) - len(p12) - len(p13) + len(p123)) + len(p12) + len(p13) - 2 * len(p123)\n    s2 = 3 * (len(p2) - len(p12) - len(p23) + len(p123)) + len(p12) + len(p23) - 2 * len(p123)\n    s3 = 3 * (len(p3) - len(p23) - len(p13) + len(p123)) + len(p23) + len(p13) - 2 * len(p123)\n    print(s1, s2, s3)\n    t -= 1", "for _ in range(int(input())):\n    x = int(input())\n    a = set(input().split())\n    b = set(input().split())\n    c = set(input().split())\n    (c1, c2, c3, c4) = (len(a & b), len(b & c), len(a & c), len(a & b & c))\n    first = 3 * x - 2 * (c1 + c3) + c4\n    second = 3 * x - 2 * (c1 + c2) + c4\n    third = 3 * x - 2 * (c2 + c3) + c4\n    print(first, second, third)", "for _ in range(int(input())):\n    n = int(input())\n    p1 = set(input().split())\n    p2 = set(input().split())\n    p3 = set(input().split())\n    (s1, s2, s3) = (0, 0, 0)\n    i3 = p1.intersection(p2, p3)\n    p1 = p1.difference(i3)\n    p2 = p2.difference(i3)\n    p3 = p3.difference(i3)\n    i3 = p1.intersection(p2)\n    p1 = p1.difference(i3)\n    p2 = p2.difference(i3)\n    s1 += len(i3)\n    s2 += len(i3)\n    i3 = p2.intersection(p3)\n    p2 = p2.difference(i3)\n    p3 = p3.difference(i3)\n    s2 += len(i3)\n    s3 += len(i3)\n    i3 = p3.intersection(p1)\n    p1 = p1.difference(i3)\n    p3 = p3.difference(i3)\n    s3 += len(i3)\n    s1 += len(i3)\n    s1 += len(p1) * 3\n    s2 += len(p2) * 3\n    s3 += len(p3) * 3\n    print(s1, s2, s3)", "def solution():\n    n = int(input())\n    (points1, points2, points3) = (0, 0, 0)\n    words1 = set(input().split())\n    words2 = set(input().split())\n    words3 = set(input().split())\n    union123 = words1 & words2 & words3\n    words1 -= union123\n    words2 -= union123\n    words3 -= union123\n    union12 = words1 & words2\n    points1 += len(union12)\n    points2 += len(union12)\n    words1 -= union12\n    words2 -= union12\n    union13 = words1 & words3\n    points1 += len(union13)\n    points3 += len(union13)\n    words1 -= union13\n    words3 -= union13\n    union23 = words2 & words3\n    points2 += len(union23)\n    points3 += len(union23)\n    words2 -= union23\n    words3 -= union23\n    points1 += 3 * len(words1)\n    points2 += 3 * len(words2)\n    points3 += 3 * len(words3)\n    print(points1, points2, points3)\n\ndef main():\n    t = int(input())\n    while t:\n        solution()\n        t -= 1\nmain()", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    L = set(input().split())\n    M = set(input().split())\n    N = set(input().split())\n    (a, b, c) = (0, 0, 0)\n    K = L & M & N\n    L = L - K\n    M = M - K\n    N = N - K\n    n = len(L)\n    C = L & M\n    D = L & N\n    E = M & N\n    L = L - C - D\n    M = M - C - E\n    N = N - D - E\n    a = 3 * len(L) + len(C) + len(D)\n    b = 3 * len(M) + len(C) + len(E)\n    c = 3 * len(N) + len(D) + len(E)\n    print(a, b, c)", "def solve():\n    n = int(input())\n    l1 = set(input().split())\n    l2 = set(input().split())\n    l3 = set(input().split())\n    a = 0\n    b = 0\n    c = 0\n    all = len(l1 & l2 & l3)\n    ab = len(l1 & l2) - all\n    bc = len(l2 & l3) - all\n    ac = len(l1 & l3) - all\n    a += ab + ac + 3 * (len(l1) - (all + ab + ac))\n    b += ab + bc + 3 * (len(l2) - (all + ab + bc))\n    c += bc + ac + 3 * (len(l3) - (all + bc + ac))\n    print(a, b, c)\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1", "def sp(la, all, ab, ac):\n    return (la - all - ab - ac) * 3 + ab + ac\nn = int(input())\nfor i in range(n):\n    p = int(input())\n    a = set(input().split())\n    b = set(input().split())\n    c = set(input().split())\n    la = len(a)\n    lb = len(b)\n    lc = len(c)\n    all = len(a.intersection(b).intersection(c))\n    ab = len(b.intersection(a)) - all\n    bc = len(b.intersection(c)) - all\n    ca = len(c.intersection(a)) - all\n    print(sp(la, all, ab, ca), sp(lb, all, bc, ab), sp(lc, all, ca, bc))", "import sys\n\ndef checkScore(num, w1, w2, w3):\n    w1 = set(w1.split())\n    w2 = set(w2.split())\n    w3 = set(w3.split())\n    s1 = 3 * num\n    s2 = 3 * num\n    s3 = 3 * num\n    for word in w1:\n        if word in w2:\n            if word in w3:\n                s1 -= 3\n                s2 -= 3\n                s3 -= 3\n                w2.remove(word)\n                w3.remove(word)\n            else:\n                s1 -= 2\n                s2 -= 2\n                w2.remove(word)\n        elif word in w3:\n            s1 -= 2\n            s3 -= 2\n            w3.remove(word)\n    for word in w2:\n        if word in w3:\n            s2 -= 2\n            s3 -= 2\n    print(s1, s2, s3)\n\ndef main():\n    num = int(sys.stdin.readline())\n    for line in range(num):\n        wordLength = int(sys.stdin.readline())\n        w1 = sys.stdin.readline()\n        w2 = sys.stdin.readline()\n        w3 = sys.stdin.readline()\n        checkScore(wordLength, w1, w2, w3)\nmain()", "x = int(input())\nfor k in range(x):\n    n = int(input())\n    first = input().split()\n    second = input().split()\n    third = input().split()\n    (res1, res2, res3) = (3 * n, 3 * n, 3 * n)\n    set1 = set(first)\n    set2 = set(second)\n    set3 = set(third)\n    allset = set1 & set2 & set3\n    res1 -= 3 * len(allset)\n    res2 -= 3 * len(allset)\n    res3 -= 3 * len(allset)\n    set1 -= allset\n    set2 -= allset\n    set3 -= allset\n    res1 -= 2 * (len(set1 & set2) + len(set1 & set3))\n    res2 -= 2 * (len(set1 & set2) + len(set2 & set3))\n    res3 -= 2 * (len(set3 & set2) + len(set1 & set3))\n    print(res1, ' ', res2, ' ', res3)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    c1 = 0\n    c2 = 0\n    c3 = 0\n    l1 = set(input().split())\n    l2 = set(input().split())\n    l3 = set(input().split())\n    cno1 = len(l1.difference(l2).difference(l3))\n    cno2 = len(l2.difference(l1).difference(l3))\n    cno6 = len(l3.difference(l1).difference(l2))\n    cno3 = len(l1.intersection(l2).difference(l3))\n    cno4 = len(l2.intersection(l3).difference(l1))\n    cno5 = len(l3.intersection(l1).difference(l2))\n    c1 += 3 * cno1 + cno3 + cno5\n    c2 += 3 * cno2 + cno3 + cno4\n    c3 += 3 * cno6 + cno4 + cno5\n    print(str(c1) + ' ' + str(c2) + ' ' + str(c3))", "def solve():\n    for _ in range(int(input())):\n        n = int(input())\n        x = set(input().split())\n        y = set(input().split())\n        z = set(input().split())\n        a = 0\n        b = 0\n        c = 0\n        temp = set(x)\n        for w in temp:\n            if w in y and w in z:\n                x.remove(w)\n                y.remove(w)\n                z.remove(w)\n            elif w in y:\n                a += 1\n                b += 1\n                x.remove(w)\n                y.remove(w)\n            elif w in z:\n                a += 1\n                c += 1\n                x.remove(w)\n                z.remove(w)\n        temp = set(y)\n        for w in temp:\n            if w in z:\n                b += 1\n                c += 1\n                y.remove(w)\n                z.remove(w)\n        a += 3 * len(x)\n        b += 3 * len(y)\n        c += 3 * len(z)\n        print(a, b, c)\nsolve()", "def get():\n    return set(input().split())\nfor _ in range(int(input())):\n    input()\n    a = get()\n    b = get()\n    c = get()\n    every = a & b & c\n    a -= every\n    b -= every\n    c -= every\n    ab = a & b\n    ac = a & c\n    bc = b & c\n    a = a - ab - ac\n    b = b - ab - bc\n    c = c - ac - bc\n    print(len(ab) + len(ac) + 3 * len(a), len(ab) + len(bc) + 3 * len(b), len(bc) + len(ac) + 3 * len(c))", "I = lambda : input().split(' ')\nfor i in range(int(*I())):\n    I()\n    (a, b, c) = ({*I()}, {*I()}, {*I()})\n    for i in range(3):\n        print(2 * len(a - b - c) + len(a) - len(a & b & c), end=' ')\n        (a, b, c) = (b, c, a)\n    print()", "def f(A, B, C, k):\n    (set_a, set_b, set_c) = (set(A), set(B), set(C))\n    x1 = len(set_a.intersection(set_b).intersection(set_c))\n    x2 = len(set_a.intersection(set_c) - set_b)\n    x4 = len(set_a.intersection(set_b) - set_c)\n    x3 = len(set_b.intersection(set_c) - set_a)\n    k1 = (k - x1 - x4 - x2) * 3 + x2 + x4\n    k2 = (k - x1 - x3 - x4) * 3 + x3 + x4\n    k3 = (k - x1 - x2 - x3) * 3 + x2 + x3\n    return f'{k1} {k2} {k3}'\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    A = input().split()\n    B = input().split()\n    C = input().split()\n    print(f(A, B, C, k))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = set(input().split(' '))\n    y = set(input().split(' '))\n    z = set(input().split(' '))\n    cp1 = cp2 = cp3 = n * 3\n    vse = x.intersection(y, z)\n    xy = x.intersection(y)\n    yz = z.intersection(y)\n    xz = x.intersection(z)\n    t = len(vse)\n    cxy = len(xy)\n    cyz = len(yz)\n    cxz = len(xz)\n    cp1 += -2 * cxy - 2 * cxz + t\n    cp2 += -2 * cxy - 2 * cyz + t\n    cp3 += -2 * cxz - 2 * cyz + t\n    print(cp1, cp2, cp3)", "for _ in range(int(input())):\n    n = int(input())\n    a = [i for i in input().split()]\n    b = [i for i in input().split()]\n    c = [i for i in input().split()]\n    a = set(a)\n    b = set(b)\n    c = set(c)\n    pa = pb = pc = 3 * n\n    z = a.intersection(b)\n    z2 = a.intersection(c)\n    z3 = b.intersection(c)\n    z4 = a.intersection(c).intersection(b)\n    p = len(z4)\n    if p:\n        pa -= p * 3\n        pb -= p * 3\n        pc -= p * 3\n    if z2:\n        z2 = len(z2) - p\n        pa -= z2 * 2\n        pc -= z2 * 2\n    if z3:\n        z3 = len(z3) - p\n        pc -= z3 * 2\n        pb -= z3 * 2\n    if z:\n        z = len(z) - p\n        pa -= z * 2\n        pb -= z * 2\n    print(pa, pb, pc)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s1 = input().split()\n    s2 = input().split()\n    s3 = input().split()\n    si12 = set(s1).intersection(set(s2))\n    si13 = set(s1).intersection(set(s3))\n    si23 = set(s2).intersection(set(s3))\n    sa = set(s2).intersection(si13)\n    sc1 = 3 * n - 2 * (len(si12) + len(si13) - 2 * len(sa)) - 3 * len(sa)\n    sc2 = 3 * n - 2 * (len(si12) + len(si23) - 2 * len(sa)) - 3 * len(sa)\n    sc3 = 3 * n - 2 * (len(si23) + len(si13) - 2 * len(sa)) - 3 * len(sa)\n    print(str(sc1) + ' ' + str(sc2) + ' ' + str(sc3))", "def check(s1, s2, s3, n):\n    l1 = s1.split()\n    l2 = s2.split()\n    l3 = s3.split()\n    p1 = list(set(l1) & set(l2))\n    p2 = list(set(l3) & set(l2))\n    p3 = list(set(l1) & set(l3))\n    p4 = list(set(p1) & set(l3))\n    a = 1 * len(p1) + len(p3) - 2 * len(p4) + 3 * (len(l1) - len(p1) - len(p3) + len(p4))\n    b = 1 * len(p1) + len(p2) - 2 * len(p4) + 3 * (len(l2) - len(p1) - len(p2) + len(p4))\n    c = 1 * len(p2) + len(p3) - 2 * len(p4) + 3 * (len(l3) - len(p2) - len(p3) + len(p4))\n    print(a, b, c)\nn = int(input())\nfor i in range(n):\n    l = int(input())\n    s1 = input()\n    s2 = input()\n    s3 = input()\n    check(s1, s2, s3, l)", "N = int(input())\nfor i in range(N):\n    len_s = int(input())\n    s_1 = set(input().split())\n    s_2 = set(input().split())\n    s_3 = set(input().split())\n    (res_1, res_2, res_3) = (0, 0, 0)\n    for el in s_1:\n        if el in s_2 or el in s_3:\n            if el in s_2 and el in s_3:\n                s_2.remove(el)\n                s_3.remove(el)\n                continue\n            elif el in s_2:\n                s_2.remove(el)\n                res_1 += 1\n                res_2 += 1\n            else:\n                s_3.remove(el)\n                res_1 += 1\n                res_3 += 1\n        else:\n            res_1 += 3\n    for el in s_2:\n        if el in s_3:\n            s_3.remove(el)\n            res_2 += 1\n            res_3 += 1\n        else:\n            res_2 += 3\n    res_3 += len(s_3) * 3\n    print(res_1, res_2, res_3)", "t = int(input())\nlst = []\nfor i in range(t):\n    n = int(input())\n    s1 = set(input().split())\n    s2 = set(input().split())\n    s3 = set(input().split())\n    m1 = s1 - s2 - s3\n    m2 = s2 - s1 - s3\n    m3 = s3 - s2 - s1\n    cnt1 = len(m1) * 3\n    cnt2 = len(m2) * 3\n    cnt3 = len(m3) * 3\n    m123 = s1 & s2 & s3\n    m12 = s1 & s2\n    m13 = s1 & s3\n    m23 = s2 & s3\n    m1213 = (m12 | m13) - m123\n    m2123 = (m12 | m23) - m123\n    m3132 = (m13 | m23) - m123\n    cnt1 += len(m1213)\n    cnt2 += len(m2123)\n    cnt3 += len(m3132)\n    lst.append([cnt1, cnt2, cnt3])\nfor l in lst:\n    print(' '.join(map(str, l)))", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef getscore(l, m, n):\n    lc = mc = nc = 0\n    dl = {}\n    dm = {}\n    dn = {}\n    for i in l:\n        dl[i] = 1\n        lc += 3\n    for i in m:\n        dm[i] = 1\n        if i in dl:\n            lc -= 2\n            mc += 1\n        else:\n            mc += 3\n    for i in n:\n        if i in dl and i in dm:\n            lc -= 1\n            mc -= 1\n        elif i in dl:\n            nc += 1\n            lc -= 2\n        elif i in dm:\n            mc -= 2\n            nc += 1\n        else:\n            nc += 3\n    print(lc, mc, nc)\nt = inp()\nfor _ in range(t):\n    n = int(input())\n    l = input().strip().split(' ')\n    m = input().strip().split(' ')\n    n = input().strip().split(' ')\n    getscore(l, m, n)", "for _ in range(int(input())):\n    n = int(input())\n    l1 = set(map(str, input().split()))\n    l2 = set(map(str, input().split()))\n    l3 = set(map(str, input().split()))\n    com1 = len(l1 & l2 & l3)\n    com2 = len(l1 & l2)\n    com3 = len(l1 & l3)\n    com4 = len(l2 & l3)\n    p1 = n * 3 - 2 * (com2 + com3 - 2 * com1) - 3 * com1\n    p2 = n * 3 - 2 * (com2 + com4 - 2 * com1) - 3 * com1\n    p3 = n * 3 - 2 * (com4 + com3 - 2 * com1) - 3 * com1\n    print(p1, p2, p3)", "for _ in range(int(input())):\n    n = int(input())\n    L1 = list(input().split())\n    L2 = list(input().split())\n    L3 = list(input().split())\n    L = L1 + L2 + L3\n    t = 0\n    Ls = set(L)\n    s = len(Ls)\n    com_L1_L2 = 2 * n - len(set(L1 + L2))\n    com_L1_L3 = 2 * n - len(set(L1 + L3))\n    com_L3_L2 = 2 * n - len(set(L3 + L2))\n    com_three = s + com_L1_L2 + com_L1_L3 + com_L3_L2 - 3 * n\n    t = com_three\n    uL12 = com_L1_L2 - com_three\n    uL13 = com_L1_L3 - com_three\n    uL32 = com_L3_L2 - com_three\n    x = 3 * (n - (com_L1_L2 + com_L1_L3 - t)) + uL12 + uL13\n    y = 3 * (n - (com_L1_L2 + com_L3_L2 - t)) + uL12 + uL32\n    z = 3 * (n - (com_L1_L3 + com_L3_L2 - t)) + uL13 + uL32\n    print(' '.join(list(map(str, [x, y, z]))))", "for _ in range(int(input())):\n    n = int(input())\n    s1 = set()\n    s2 = set()\n    s3 = set()\n    for i in range(3):\n        s = input().split()\n        if i == 0:\n            for x in s:\n                s1.add(x)\n        elif i == 1:\n            for x in s:\n                s2.add(x)\n        else:\n            for x in s:\n                s3.add(x)\n    s1s2 = len(s1.intersection(s2))\n    s2s3 = len(s2.intersection(s3))\n    s1s3 = len(s1.intersection(s3))\n    s1s2s3 = len(s1.intersection(s2, s3))\n    p1 = (s1s2 - s1s2s3) * 1 + (s1s3 - s1s2s3) * 1 + (n - s1s3 - s1s2 + s1s2s3) * 3\n    p2 = (s2s3 - s1s2s3) * 1 + (s1s2 - s1s2s3) * 1 + (n - s1s2 - s2s3 + s1s2s3) * 3\n    p3 = (s1s3 - s1s2s3) * 1 + (s2s3 - s1s2s3) * 1 + (n - s1s3 - s2s3 + s1s2s3) * 3\n    print(p1, p2, p3)", "def word(a, b, c):\n    result = 0\n    for j in a:\n        if j in b and j in c:\n            continue\n        elif j in b or j in c:\n            result += 1\n        else:\n            result += 3\n    return result\nfor i in range(int(input())):\n    n = int(input())\n    a = set(input().split())\n    b = set(input().split())\n    c = set(input().split())\n    print(word(a, b, c), word(b, c, a), word(c, a, b))", "def word(a, b, c):\n    g = 0\n    for j in a:\n        if j in b and j in c:\n            g += 0\n        elif j in b or j in c:\n            g += 1\n        else:\n            g += 3\n    return g\nfor i in range(int(input())):\n    n = int(input())\n    a = set(input().split())\n    b = set(input().split())\n    c = set(input().split())\n    d = []\n    l = word(a, b, c)\n    d.append(l)\n    l = word(b, c, a)\n    d.append(l)\n    l = word(c, a, b)\n    d.append(l)\n    print(*d)", "for _ in range(int(input())):\n    n = int(input())\n    list1 = set(input().split())\n    list2 = set(input().split())\n    list3 = set(input().split())\n    num1 = num2 = num3 = 0\n    num4 = 0\n    for i in list1:\n        if i in list2 and i in list3:\n            num4 += 1\n        elif i in list2:\n            num1 += 1\n            num2 += 1\n        elif i in list3:\n            num1 += 1\n            num3 += 1\n    for j in list2:\n        if j in list3 and j not in list1:\n            num2 += 1\n            num3 += 1\n    z = ''\n    z = z + str(3 * (n - num1 - num4) + num1) + ' ' + str(3 * (n - num2 - num4) + num2) + ' ' + str(3 * (n - num3 - num4) + num3)\n    print(z)", "def solve():\n    for _ in range(int(input())):\n        n = int(input())\n        x = set(input().split())\n        y = set(input().split())\n        z = set(input().split())\n        vis = set()\n        a = 0\n        b = 0\n        c = 0\n        count_a = count_b = count_c = 0\n        for w in x:\n            if w in y and w in z and (w not in vis):\n                count_c += 1\n                count_a += 1\n                count_b += 1\n            elif w in y and w not in vis:\n                a += 1\n                b += 1\n                count_a += 1\n                count_b += 1\n            elif w in z and w not in vis:\n                a += 1\n                c += 1\n                count_a += 1\n                count_c += 1\n            vis.add(w)\n        for w in y:\n            if w in z and w not in vis:\n                b += 1\n                c += 1\n                count_c += 1\n                count_b += 1\n                vis.add(w)\n        a += 3 * (n - count_a)\n        b += 3 * (n - count_b)\n        c += 3 * (n - count_c)\n        print(a, b, c)\nsolve()", "def getPoints(a, b, c):\n    ans = 0\n    for i in a:\n        if i in b and i in c:\n            continue\n        elif i in b or i in c:\n            ans += 1\n        else:\n            ans += 3\n    return ans\nfor i in range(int(input())):\n    n = int(input())\n    a = set(input().split())\n    b = set(input().split())\n    c = set(input().split())\n    print(getPoints(a, b, c), getPoints(b, a, c), getPoints(c, a, b))", "from math import *\nfrom collections import Counter\n\ndef solve():\n    n = int(input())\n    p1 = set(input().split())\n    p2 = set(input().split())\n    p3 = set(input().split())\n    s1 = 0\n    s2 = 0\n    s3 = 0\n    cnt = 0\n    for i in p1:\n        t2 = i in p2\n        t3 = i in p3\n        if t2 and t3:\n            cnt += 1\n            continue\n        elif t2:\n            s1 += 1\n            s2 += 1\n        elif t3:\n            s1 += 1\n            s3 += 1\n            cnt += 1\n        else:\n            s1 += 3\n    for i in p2:\n        t1 = i in p1\n        t3 = i in p3\n        if t1 and t3:\n            continue\n        elif t3:\n            cnt += 1\n            s2 += 1\n            s3 += 1\n        elif t1:\n            continue\n        else:\n            s2 += 3\n    for i in p3:\n        t1 = i in p1\n        t2 = i in p2\n        if t1 and t2:\n            continue\n        elif t1:\n            continue\n        elif t2:\n            continue\n        else:\n            s3 += 3\n    print(s1, s2, s3)\nfor _ in range(int(input())):\n    solve()", "def point_calculator(a, b, c):\n    ans = 0\n    for item in a:\n        if item in b and item in c:\n            continue\n        elif item in b or item in c:\n            ans += 1\n        else:\n            ans += 3\n    return ans\nn = int(input())\nfor _ in range(n):\n    l = int(input())\n    p1 = set(input().split(' '))\n    p2 = set(input().split(' '))\n    p3 = set(input().split(' '))\n    print(point_calculator(p1, p2, p3), point_calculator(p2, p1, p3), point_calculator(p3, p2, p1))", "def claculate(p, q, r):\n    ans = 0\n    for i in p:\n        if i in q and i in r:\n            continue\n        elif i in q or i in r:\n            ans += 1\n        else:\n            ans += 3\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    a = set(input().split(' '))\n    b = set(input().split(' '))\n    c = set(input().split(' '))\n    print(claculate(a, b, c), claculate(b, a, c), claculate(c, a, b))", "def C():\n    n = int(input())\n    score1 = 0\n    score2 = 0\n    score3 = 0\n    words1 = set(input().split())\n    words2 = set(input().split())\n    words3 = set(input().split())\n    for word in words1:\n        if word in words2:\n            words2.remove(word)\n            if word in words3:\n                words3.remove(word)\n                continue\n            score1 += 1\n            score2 += 1\n            continue\n        if word in words3:\n            words3.remove(word)\n            if word in words2:\n                words2.remove(word)\n                continue\n            score1 += 1\n            score3 += 1\n            continue\n        score1 += 3\n    for word in words2:\n        if word in words3:\n            words3.remove(word)\n            score2 += 1\n            score3 += 1\n            continue\n        score2 += 3\n    score3 += 3 * len(words3)\n    return (score1, score2, score3)\nt = int(input())\nanswers = []\nfor _ in range(t):\n    answers.append(C())\nfor answer in answers:\n    print(*answer)", "def solve(s1, s2, s3):\n    score = 0\n    for i in s1:\n        if i in s2 and i in s3:\n            score += 0\n        elif i in s2 or i in s3:\n            score += 1\n        else:\n            score += 3\n    return score\nfor T in range(int(input())):\n    N = input()\n    a = set(input().split())\n    b = set(input().split())\n    c = set(input().split())\n    print(solve(a, b, c), solve(b, c, a), solve(c, b, a))", "I = lambda : input().split(' ')\nfor i in range(int(*I())):\n    I()\n    (a, b, c) = ({*I()}, {*I()}, {*I()})\n    for i in range(3):\n        print(2 * len(a - b - c) + len(a) - len(a.intersection(b.intersection(c))), end=' ')\n        (a, b, c) = (b, c, a)\n    print()", "t = int(input())\n\ndef f(a, b, c):\n    ans = 0\n    m = {}\n    for x in a:\n        m[x] = 3\n    for x in b:\n        if x not in m:\n            m[x] = 3\n        else:\n            m[x] = 1\n    for x in c:\n        if x not in m:\n            m[x] = 3\n        elif m[x] == 3:\n            m[x] = 1\n        else:\n            m[x] = 0\n    ans1 = ans2 = ans3 = 0\n    for x in a:\n        ans1 += m[x]\n    for x in b:\n        ans2 += m[x]\n    for x in c:\n        ans3 += m[x]\n    print(ans1, ans2, ans3)\nfor i in range(t):\n    n = int(input())\n    p1 = input().split()\n    p2 = input().split()\n    p3 = input().split()\n    f(p1, p2, p3)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    count = 0\n    a = set(map(str, input().split()))\n    b = set(map(str, input().split()))\n    c = set(map(str, input().split()))\n    abc = a.intersection(b, c)\n    ab = a.intersection(b)\n    ac = a.intersection(c)\n    bc = b.intersection(c)\n    if abc.issubset(ab):\n        ab.difference_update(abc)\n    if abc.issubset(ac):\n        ac.difference_update(abc)\n    if abc.issubset(bc):\n        bc.difference_update(abc)\n    print(len(abc) * 0 + len(ab) * 1 + len(ac) * 1 + (n - len(abc) - len(ab) - len(ac)) * 3, end=' ')\n    print(len(abc) * 0 + len(bc) * 1 + len(ab) * 1 + (n - len(abc) - len(bc) - len(ab)) * 3, end=' ')\n    print(len(abc) * 0 + len(bc) * 1 + len(ac) * 1 + (n - len(abc) - len(bc) - len(ac)) * 3)", "for _ in range(int(input())):\n    n = int(input())\n    a = set(input().split())\n    b = set(input().split())\n    c = set(input().split())\n    x = len(a - b - c) * 3 + len((a & b) - c) + len((a & c) - b)\n    y = len(b - a - c) * 3 + len((b & a) - c) + len((b & c) - a)\n    z = len(c - a - b) * 3 + len((c & a) - b) + len((c & b) - a)\n    print(x, y, z)", "for i in range(int(input())):\n    n = int(input())\n    set1 = set(input().split())\n    set2 = set(input().split())\n    set3 = set(input().split())\n    all1 = set1.intersection(set2, set3)\n    set1 -= all1\n    set2 -= all1\n    set3 -= all1\n    set12 = set1.intersection(set2)\n    set13 = set1.intersection(set3)\n    set23 = set2.intersection(set3)\n    k1 = len(set12) + len(set13)\n    k2 = len(set12) + len(set23)\n    k3 = len(set13) + len(set23)\n    set1 -= set12.union(set13)\n    set2 -= set12.union(set23)\n    set3 -= set13.union(set23)\n    k1 += len(set1) * 3\n    k2 += len(set2) * 3\n    k3 += len(set3) * 3\n    print(k1, k2, k3)", "def solve(l1, l2, l3):\n    score = 0\n    for k in l1:\n        if k in l2 and k in l3:\n            score += 0\n        elif k in l2 or k in l3:\n            score += 1\n        else:\n            score += 3\n    return score\nfor i in range(int(input())):\n    n = int(input())\n    a = set(input().split(' '))\n    b = set(input().split(' '))\n    c = set(input().split(' '))\n    print(solve(a, b, c), solve(b, c, a), solve(c, b, a))", "def solve():\n    n = int(input())\n    a = set(input().split())\n    b = set(input().split())\n    c = set(input().split())\n    (a1, b1, c1) = (0, 0, 0)\n    for elem in a:\n        if elem in b and elem in c:\n            pass\n        elif elem in b or elem in c:\n            a1 = a1 + 1\n        else:\n            a1 = a1 + 3\n    for elem in b:\n        if elem in a and elem in c:\n            pass\n        elif elem in a or elem in c:\n            b1 = b1 + 1\n        else:\n            b1 = b1 + 3\n    for elem in c:\n        if elem in b and elem in a:\n            pass\n        elif elem in b or elem in a:\n            c1 = c1 + 1\n        else:\n            c1 = c1 + 3\n    print(a1, b1, c1)\ntests_nr = int(input())\nfor test in range(tests_nr):\n    solve()", "import sys\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        st1 = set(input().split())\n        st2 = set(input().split())\n        st3 = set(input().split())\n        a = len(st1 - (st2 | st3)) * 3\n        a += len((st1 & st2) - st3)\n        a += len((st1 & st3) - st2)\n        b = len(st2 - (st1 | st3)) * 3\n        b += len((st1 & st2) - st3)\n        b += len((st3 & st2) - st1)\n        c = len(st3 - (st1 | st2)) * 3\n        c += len((st1 & st3) - st2)\n        c += len((st3 & st2) - st1)\n        print(a, b, c)\nmain()", "for i in range(int(input())):\n    n = int(input())\n    p1 = input().split()\n    p2 = input().split()\n    p3 = input().split()\n    sp1 = set(p1)\n    sp2 = set(p2)\n    sp3 = set(p3)\n    a1 = 0\n    a2 = 0\n    a3 = 0\n    for j in p1:\n        if j not in sp2 and j not in sp3:\n            a1 += 3\n        elif j not in sp2 or j not in sp3:\n            a1 += 1\n    for j in p2:\n        if j not in sp1 and j not in sp3:\n            a2 += 3\n        elif j not in sp1 or j not in sp3:\n            a2 += 1\n    for j in p3:\n        if j not in sp2 and j not in sp1:\n            a3 += 3\n        elif j not in sp2 or j not in sp1:\n            a3 += 1\n    print(a1, a2, a3)", "I = input\nfor _ in [0] * int(I()):\n    I()\n    (a, b, c) = ({*I().split()} for _ in [0] * 3)\n    print(*(3 * len(x - y - z) + len(x & y - z) + len(x & z - y) for (x, y, z) in ((a, b, c), (b, a, c), (c, a, b))))", "for i in range(int(input())):\n    n = int(input())\n    c1 = c2 = c3 = 0\n    comp1 = set(input().split())\n    comp2 = set(input().split())\n    comp3 = set(input().split())\n    x = comp2 | comp3\n    c1 += 3 * len(comp1 - x)\n    c1 += len(comp2 & comp1 - comp3)\n    c1 += len(comp3 & comp1 - comp2)\n    x = comp1 | comp3\n    c2 += 3 * len(comp2 - x)\n    c2 += len(comp2 & comp1 - comp3)\n    c2 += len(comp2 & comp3 - comp1)\n    x = comp1 | comp2\n    c3 += 3 * len(comp3 - x)\n    c3 += len(comp3 & comp1 - comp2)\n    c3 += len(comp2 & comp3 - comp1)\n    print(c1, c2, c3)", "from xml.dom.expatbuilder import parseString\nfor i in range(int(input())):\n    input()\n    res1 = 0\n    res2 = 0\n    res3 = 0\n    a = set(input().split())\n    b = set(input().split())\n    c = set(input().split())\n    set1 = a.intersection(b)\n    res = set1.intersection(c)\n    a = a - set(res)\n    b = b - set(res)\n    c = c - set(res)\n    temp = a.intersection(b)\n    res1 += len(temp)\n    res2 += len(temp)\n    a = a - set(temp)\n    b = b - set(temp)\n    temp = a.intersection(c)\n    res1 += len(temp)\n    res3 += len(temp)\n    a = a - set(temp)\n    c = c - set(temp)\n    temp = b.intersection(c)\n    res2 += len(temp)\n    res3 += len(temp)\n    c = c - set(temp)\n    b = b - set(temp)\n    print(res1 + len(a) * 3, end=' ')\n    print(res2 + len(b) * 3, end=' ')\n    print(res3 + len(c) * 3, end='')\n    print()", "for _ in range(int(input())):\n    c_word = int(input())\n    (line1, line2, line3) = (set(input().split()), set(input().split()), set(input().split()))\n    print(3 * len(line1.difference(line3.union(line2))) + len(line1.intersection(line3.symmetric_difference(line2))), end=' ')\n    print(3 * len(line2.difference(line3.union(line1))) + len(line2.intersection(line3.symmetric_difference(line1))), end=' ')\n    print(3 * len(line3.difference(line1.union(line2))) + len(line3.intersection(line1.symmetric_difference(line2))), end=' ')\n    print()", "from itertools import chain\n\ndef solution(w1, w2, w3):\n    res = [0, 0, 0]\n    m = {}\n    for word in list(chain(w1, w2, w3)):\n        if word in m:\n            m[word] += 1\n        else:\n            m[word] = 1\n    for w in w1:\n        if m[w] == 3:\n            continue\n        elif m[w] == 2:\n            res[0] += 1\n        else:\n            res[0] += 3\n    for w in w2:\n        if m[w] == 3:\n            continue\n        elif m[w] == 2:\n            res[1] += 1\n        else:\n            res[1] += 3\n    for w in w3:\n        if m[w] == 3:\n            continue\n        elif m[w] == 2:\n            res[2] += 1\n        else:\n            res[2] += 3\n    return res\nn = int(input())\nfor _ in range(n):\n    a = int(input())\n    w1 = list(input().strip().split())\n    w2 = list(input().strip().split())\n    w3 = list(input().strip().split())\n    print(*solution(w1, w2, w3))", "def main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        words = {}\n        score = [0, 0, 0]\n        player_input = [[], [], []]\n        for player in range(3):\n            player_input[player] = input().split(' ')\n            for w in player_input[player]:\n                if not w in words:\n                    words[w] = 3\n                elif words[w] == 3:\n                    words[w] = 1\n                else:\n                    words[w] = 0\n        for player in range(3):\n            for w in player_input[player]:\n                score[player] += words[w]\n        print('{0} {1} {2}'.format(*score))\nmain()", "I = input\nfor _ in [0] * int(I()):\n    I()\n    (a, b, c) = ({*I().split()} for _ in [0] * 3)\n    print(*(3 * len(x - y - z) + len(x & y - z) + len(x & z - y) for (x, y, z) in ((a, b, c), (b, a, c), (c, a, b))))", "t = int(input())\nwhile t:\n    first = second = third = 0\n    n = int(input())\n    u = {}\n    d = {}\n    words = list(input().split())\n    for word in words:\n        u[word] = 1\n        first += 3\n    words = list(input().split())\n    for word in words:\n        d[word] = 1\n        if word in u:\n            first -= 2\n            second += 1\n        else:\n            second += 3\n    words = list(input().split())\n    for word in words:\n        if word in d:\n            if word in u:\n                first -= 1\n                second -= 1\n            else:\n                second -= 2\n                third += 1\n        elif word in u:\n            first -= 2\n            third += 1\n        else:\n            third += 3\n    print(first, second, third)\n    t -= 1", "def solve(s1, s2, s3):\n    score = 0\n    for i in s1:\n        if i in s2 and i in s3:\n            score += 0\n        elif i in s2 or i in s3:\n            score += 1\n        else:\n            score += 3\n    return score\nfor T in range(int(input())):\n    N = input()\n    a = set(input().split())\n    b = set(input().split())\n    c = set(input().split())\n    print(solve(a, b, c), solve(b, c, a), solve(c, b, a))", "import sys\nfrom collections import Counter\n\ndef run():\n    n = int(sys.stdin.readline().strip())\n    guy1 = sys.stdin.readline().split()\n    guy2 = sys.stdin.readline().split()\n    guy3 = sys.stdin.readline().split()\n    cnt = Counter()\n    cnt.update(guy1)\n    cnt.update(guy2)\n    cnt.update(guy3)\n    s1 = s2 = s3 = 0\n    for w in guy1:\n        if cnt[w] == 1:\n            s1 += 3\n        if cnt[w] == 2:\n            s1 += 1\n    for w in guy2:\n        if cnt[w] == 1:\n            s2 += 3\n        if cnt[w] == 2:\n            s2 += 1\n    for w in guy3:\n        if cnt[w] == 1:\n            s3 += 3\n        if cnt[w] == 2:\n            s3 += 1\n    print(f'{s1} {s2} {s3}')\nt = int(input())\nfor _ in range(t):\n    run()", "def ft_calcul(l, di):\n    s = 0\n    for x in l:\n        if di[x] == 1:\n            s += 3\n        elif di[x] == 2:\n            s += 1\n        else:\n            s += 0\n    return s\nfor i in range(int(input())):\n    n = int(input())\n    l1 = list(input().split())\n    l2 = list(input().split())\n    l3 = list(input().split())\n    l4 = l1 + l2 + l3\n    di = {}\n    for x in l4:\n        if x in di:\n            di[x] += 1\n        else:\n            di[x] = 1\n    s1 = ft_calcul(l1, di)\n    s2 = ft_calcul(l2, di)\n    s3 = ft_calcul(l3, di)\n    print(s1, s2, s3)", "for _ in ' ' * int(input()):\n    x = {}\n    y = set()\n    _ = input()\n    p = q = r = 0\n    for a in input().split():\n        x[a] = 1\n        p += 3\n    for b in input().split():\n        if b in x:\n            x[b] += 1\n            p -= 2\n            q += 1\n        else:\n            y.add(b)\n            x[b] = 1\n            q += 3\n    for c in input().split():\n        if c in x:\n            if x[c] == 2:\n                p -= 1\n                q -= 1\n            else:\n                if c in y:\n                    q -= 2\n                else:\n                    p -= 2\n                r += 1\n        else:\n            r += 3\n    print(p, q, r)", "def getScore(data):\n    counts = {}\n    for person in data:\n        for name in person:\n            counts[name] = counts.get(name, 0) + 1\n    ans = []\n    for person in data:\n        score = 0\n        for name in person:\n            if counts[name] == 1:\n                score += 3\n            elif counts[name] == 2:\n                score += 1\n        ans.append(score)\n    return ' '.join(map(str, ans))\nt = int(input())\ndata = []\nfor i in range(t):\n    n = int(input())\n    for _ in range(3):\n        data.append(input().split())\n    print(getScore(data))\n    data = []", "def calculateScores(person1, person2, person3):\n    p1_s = set(person1)\n    p2_s = set(person2)\n    p3_s = set(person3)\n    score = 0\n    for word in p1_s:\n        if word in p2_s and word in p3_s:\n            score += 0\n        elif word in p2_s or word in p3_s:\n            score += 1\n        else:\n            score += 3\n    return str(score)\ntest_cases = int(input())\nfor i in range(test_cases):\n    columns = input()\n    person1 = input().split(' ')\n    person2 = input().split(' ')\n    person3 = input().split(' ')\n    output = ''\n    output += calculateScores(person1, person2, person3) + ' '\n    output += calculateScores(person2, person1, person3) + ' '\n    output += calculateScores(person3, person2, person1) + ' '\n    print(output)", "num_games = int(input())\nfor i in range(num_games):\n    num_words = int(input())\n    first_words = set(input().split(' '))\n    second_words = set(input().split(' '))\n    third_words = set(input().split(' '))\n    first_score = 0\n    second_score = 0\n    third_score = 0\n    for num in first_words:\n        if num in second_words and num in third_words:\n            second_words.remove(num)\n            third_words.remove(num)\n        elif num in second_words:\n            second_words.remove(num)\n            first_score += 1\n            second_score += 1\n        elif num in third_words:\n            first_score += 1\n            third_score += 1\n            third_words.remove(num)\n        else:\n            first_score += 3\n    for num in second_words:\n        if num in third_words:\n            second_score += 1\n            third_score += 1\n            third_words.remove(num)\n        else:\n            second_score += 3\n    for num in third_words:\n        third_score += 3\n    print(first_score, second_score, third_score)", "def solve():\n    n = int(input())\n    s1 = input().split()\n    s2 = input().split()\n    s3 = input().split()\n    s = (s1, s2, s3)\n    count = {}\n    for string in s:\n        for word in string:\n            if word not in count:\n                count[word] = 1\n                continue\n            count[word] += 1\n    output_str = ''\n    for string in s:\n        points = 0\n        for word in string:\n            if count[word] == 1:\n                points += 3\n            elif count[word] == 2:\n                points += 1\n        output_str += str(points) + ' '\n    print(output_str)\n\ndef main():\n    for i in range(int(input())):\n        solve()\nmain()", "I = input\nfor _ in [0] * int(I()):\n    I()\n    (a, b, c) = ({*I().split()} for _ in [0] * 3)\n    print(*(3 * len(x - y - z) + len(x & y - z) + len(x & z - y) for (x, y, z) in ((a, b, c), (b, a, c), (c, a, b))))", "I = input\nfor _ in [0] * int(I()):\n    I()\n    (a, b, c) = ({*I().split()} for _ in [0] * 3)\n    print(*(3 * len(x - y - z) + len(x & y - z) + len(x & z - y) for (x, y, z) in ((a, b, c), (b, a, c), (c, a, b))))", "def gg(aa, b, c):\n    v = aa & b & c\n    vv = aa & b - v\n    vvv = aa & c - v\n    return len(aa - b & aa - c) * 3 + len(vv) + len(vvv)\nfor _ in range(int(input())):\n    n = int(input())\n    aa = set(input().split())\n    b = set(input().split())\n    c = set(input().split())\n    print(gg(aa, b, c), gg(b, aa, c), gg(c, aa, b))", "n = int(input())\nfor i in range(n):\n    m = int(input())\n    a = {x for x in input().split(' ')}\n    b = {x for x in input().split(' ')}\n    c = {x for x in input().split(' ')}\n    na = 3 * len(a - (b | c)) + len(a & b.symmetric_difference(c))\n    nb = 3 * len(b - (a | c)) + len(b & a.symmetric_difference(c))\n    nc = 3 * len(c - (b | a)) + len(c & b.symmetric_difference(a))\n    print(na, ' ', nb, ' ', nc, ' ')", "numero = int(input())\nfor i in range(numero):\n    soyMarvin = int(input())\n    a = {x for x in input().split(' ')}\n    b = {x for x in input().split(' ')}\n    c = {x for x in input().split(' ')}\n    na = 3 * len(a - (b | c)) + len(a & b.symmetric_difference(c))\n    nb = 3 * len(b - (a | c)) + len(b & a.symmetric_difference(c))\n    nc = 3 * len(c - (b | a)) + len(c & b.symmetric_difference(a))\n    print(na + 1 - 1, ' ', nb, ' ', nc + 10 - 10, ' ')", "for _ in range(int(input())):\n    n = int(input())\n    aa = set(input().split())\n    bb = set(input().split())\n    cc = set(input().split())\n    x = len(aa - bb - cc) * 3 + len((aa & bb) - cc) + len((aa & cc) - bb)\n    y = len(bb - aa - cc) * 3 + len((bb & aa) - cc) + len((bb & cc) - aa)\n    z = len(cc - aa - bb) * 3 + len((cc & aa) - bb) + len((cc & bb) - aa)\n    print(x, y, z)", "for i in range(int(input())):\n    n = int(input())\n    a = set(input().split())\n    b = set(input().split())\n    c = set(input().split())\n    d = a & b & c\n    x = 3 * len(a - b & a - c) + len((a & b) - d) + len((a & c) - d)\n    y = 3 * len(b - a & b - c) + len((a & b) - d) + len((c & b) - d)\n    z = 3 * len(c - b & c - a) + len((c & b) - d) + len((a & c) - d)\n    print(x, y, z)", "n = int(input())\nresult = []\nfor i in range(n):\n    x = int(input())\n    first = input().split()\n    second = input().split()\n    third = input().split()\n    dct = {}\n    fscore = sscore = tscore = 3 * x\n    for i in first:\n        dct[i] = 1\n    for i in second:\n        if i in dct:\n            dct[i] += 5\n            fscore -= 2\n            sscore -= 2\n        else:\n            dct[i] = 5\n    for i in third:\n        if i in dct:\n            if dct[i] == 1:\n                fscore -= 2\n                tscore -= 2\n            elif dct[i] == 5:\n                sscore -= 2\n                tscore -= 2\n            else:\n                fscore -= 1\n                tscore -= 3\n                sscore -= 1\n    result.append([fscore, sscore, tscore])\nfor i in result:\n    print(i[0], i[1], i[2])", "for _ in range(int(input())):\n    n = int(input())\n    f = list(map(str, input().split()))\n    s = list(map(str, input().split()))\n    l = list(map(str, input().split()))\n    f = set(f)\n    s = set(s)\n    l = set(l)\n    one = 0\n    two = 0\n    tree = 0\n    one = len(f.difference(s, l)) * 3\n    two = len(s.difference(f, l)) * 3\n    tree = len(l.difference(f, s)) * 3\n    common = len(f.intersection(s, l))\n    one += len(f.intersection(s)) - common\n    one += len(f.intersection(l)) - common\n    two += len(s.intersection(f)) - common\n    two += len(s.intersection(l)) - common\n    tree += len(l.intersection(f)) - common\n    tree += len(l.intersection(s)) - common\n    print(one, two, tree)", "num = int(input())\nfor i in range(num):\n    num = int(input())\n    p = set(input().split())\n    q = set(input().split())\n    r = set(input().split())\n    a = 3 * len(p - q - r) + len(p & q - r) + len(p & r - q)\n    b = 3 * len(q - p - r) + len(p & q - r) + len(q & r - p)\n    c = 3 * len(r - q - p) + len(p & r - q) + len(q & r - p)\n    print(a, b, c)", "I = input\nfor _ in [0] * int(I()):\n    I()\n    (a, b, c) = ({*I().split()} for _ in [0] * 3)\n    print(*(3 * len(x - y - z) + len(x & y - z) + len(x & z - y) for (x, y, z) in ((a, b, c), (b, a, c), (c, a, b))))", "import math\n\ndef solve():\n    n = int(input())\n    lst1 = list(input().split(' '))\n    lst2 = list(input().split(' '))\n    lst3 = list(input().split(' '))\n    a = 0\n    b = 0\n    c = 0\n    dct = {}\n    for i in lst1:\n        dct[i] = dct.get(i, 0) + 1\n    for i in lst2:\n        dct[i] = dct.get(i, 0) + 1\n    for i in lst3:\n        dct[i] = dct.get(i, 0) + 1\n    for i in lst1:\n        if dct[i] == 1:\n            a += 3\n        elif dct[i] == 2:\n            a += 1\n    for i in lst2:\n        if dct[i] == 1:\n            b += 3\n        elif dct[i] == 2:\n            b += 1\n    for i in lst3:\n        if dct[i] == 1:\n            c += 3\n        elif dct[i] == 2:\n            c += 1\n    print(a, b, c)\nt = int(input())\nwhile t:\n    t -= 1\n    solve()", "import sys\nimport heapq\ninput = sys.stdin.readline\nfrom collections import Counter, defaultdict\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(str, input().split()))\n\ndef check(first, second, third):\n    score = 0\n    for word in first:\n        if word in second and word in third:\n            score += 0\n        elif word in second or word in third:\n            score += 1\n        else:\n            score += 3\n    return score\n\ndef main():\n    length = inp()\n    (first, second, third) = (inlt(), inlt(), inlt())\n    first = set(first)\n    second = set(second)\n    third = set(third)\n    scores = [check(first, second, third), check(second, first, third), check(third, first, second)]\n    print(*scores)\nt = inp()\nfor _ in range(t):\n    main()", "def f(n, a, b, c):\n    s1 = set(a)\n    s2 = set(b)\n    s3 = set(c)\n    x1 = g(n, s2, s3, a)\n    x2 = g(n, s1, s3, b)\n    x3 = g(n, s1, s2, c)\n    return (x1, x2, x3)\n\ndef g(n, s1, s2, l):\n    sum = 0\n    for i in range(n):\n        if l[i] in s1 and l[i] in s2:\n            pass\n        elif l[i] in s1 or l[i] in s2:\n            sum += 1\n        else:\n            sum += 3\n    return sum\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = input().split()\n    b = input().split()\n    c = input().split()\n    (x1, x2, x3) = f(n, a, b, c)\n    print(f'{x1} {x2} {x3}')", "I = input\nfor _ in [0] * int(I()):\n    I()\n    (a, b, c) = ({*I().split()} for _ in [0] * 3)\n    x = len(a & b - c)\n    y = len(a & c - b)\n    z = len(b & c - a)\n    print(3 * len(a - b - c) + x + y, 3 * len(b - a - c) + x + z, 3 * len(c - a - b) + y + z)", "def get_res():\n    memo = dict()\n    word = []\n    res = []\n    for i in range(3):\n        x = input().split(' ')\n        word.append(x)\n        for s in x:\n            if s in memo:\n                memo[s] += 1\n            else:\n                memo[s] = 1\n    for i in range(3):\n        total = 0\n        for s in word[i]:\n            if memo[s] == 1:\n                total += 3\n            if memo[s] == 2:\n                total += 1\n        res.append(total)\n    return res\nt = int(input())\nres = []\nfor i in range(t):\n    x = input()\n    res.append(get_res())\nfor k in res:\n    print(str(k[0]) + ' ' + str(k[1]) + ' ' + str(k[2]))", "t = int(input())\nfor m in range(0, t):\n    n = int(input())\n    mydict = {}\n    a1str = input()\n    a2str = input()\n    a3str = input()\n    a1 = a1str.split()\n    a2 = a2str.split()\n    a3 = a3str.split()\n    p1 = 0\n    p2 = 0\n    p3 = 0\n    for i in a1:\n        mydict[i] = 1\n        p1 += 3\n    for i in a2:\n        if i in mydict.keys():\n            mydict[i] += 2\n            p1 -= 2\n            p2 += 1\n        else:\n            mydict[i] = 2\n            p2 += 3\n    for i in a3:\n        if i in mydict.keys():\n            if mydict[i] == 3:\n                p1 -= 1\n                p2 -= 1\n            elif mydict[i] == 2:\n                p2 -= 2\n                p3 += 1\n            elif mydict[i] == 1:\n                p1 -= 2\n                p3 += 1\n        else:\n            p3 += 3\n    print(p1, p2, p3)", "t = int(input())\nfor k in range(0, t):\n    n = int(input())\n    (x, y, z) = (0, 0, 0)\n    l1 = [str(x) for x in input().split()]\n    l2 = [str(x) for x in input().split()]\n    l3 = [str(x) for x in input().split()]\n    s1 = set(l1)\n    s2 = set(l2)\n    s3 = set(l3)\n    l4 = s1.intersection(s2)\n    l5 = s2.intersection(s3)\n    l6 = s3.intersection(s1)\n    l7 = l4.intersection(s3)\n    x += 3 * (len(l1) - len(l4) - len(l6) + len(l7))\n    x += len(l4) + len(l6) - 2 * len(l7)\n    y += 3 * (len(l2) - len(l4) - len(l5) + len(l7))\n    y += len(l4) + len(l5) - 2 * len(l7)\n    z += 3 * (len(l1) - len(l5) - len(l6) + len(l7))\n    z += len(l5) + len(l6) - 2 * len(l7)\n    print(x, y, z)", "def count_score(first, second, third):\n    counts = {}\n    for word in first + second + third:\n        counts.setdefault(word, 0)\n        counts[word] += 1\n    score = []\n    for player in (first, second, third):\n        current = 0\n        for word in player:\n            if counts[word] == 1:\n                current += 3\n            elif counts[word] == 2:\n                current += 1\n        score.append(current)\n    return tuple(score)\nfor _ in range(int(input())):\n    input()\n    first = input().split()\n    second = input().split()\n    third = input().split()\n    score = count_score(first, second, third)\n    print(' '.join(map(str, score)))", "for _ in ' ' * int(input()):\n    x = {}\n    y = set()\n    _ = input()\n    p = q = r = 0\n    for a in input().split():\n        x[a] = 1\n        p += 3\n    for b in input().split():\n        if b in x:\n            x[b] += 1\n            p -= 2\n            q += 1\n        else:\n            y.add(b)\n            x[b] = 1\n            q += 3\n    for c in input().split():\n        if c in x:\n            if x[c] == 2:\n                p -= 1\n                q -= 1\n            else:\n                if c in y:\n                    q -= 2\n                else:\n                    p -= 2\n                r += 1\n        else:\n            r += 3\n    print(p, q, r)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef inls():\n    return list(map(str, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nn = inp()\nfor i in range(n):\n    cnt = inp()\n    s1 = set(input().split())\n    s2 = set(input().split())\n    s3 = set(input().split())\n    score_1 = 0\n    for x in s1:\n        if x in s2 and x in s3:\n            score_1 += 0\n        elif x in s3:\n            score_1 += 1\n        elif x in s2:\n            score_1 += 1\n        else:\n            score_1 += 3\n    score_2 = 0\n    for x in s2:\n        if x in s3 and x in s1:\n            score_2 += 0\n        elif x in s1:\n            score_2 += 1\n        elif x in s3:\n            score_2 += 1\n        else:\n            score_2 += 3\n    score_3 = 0\n    for x in s3:\n        if x in s1 and x in s2:\n            score_3 += 0\n        elif x in s1:\n            score_3 += 1\n        elif x in s2:\n            score_3 += 1\n        else:\n            score_3 += 3\n    print(f'{score_1} {score_2} {score_3}')", "n = int(input())\npoint = []\nwhile n != 0:\n    dic = []\n    (q1, q2, q3) = (0, 0, 0)\n    n -= 1\n    a = int(input())\n    s = input()\n    p1 = s.split(' ')\n    p4 = set(p1)\n    s = input()\n    p2 = s.split(' ')\n    p5 = set(p2)\n    s = input()\n    p3 = s.split(' ')\n    p6 = set(p3)\n    p7 = p4.intersection(p5, p6)\n    p8 = p4.intersection(p5)\n    p9 = p5.intersection(p6)\n    p10 = p6.intersection(p4)\n    for i in p4:\n        if i in p7:\n            q1 += 0\n        elif i in p8 or i in p10:\n            q1 += 1\n        else:\n            q1 += 3\n    for i in p5:\n        if i in p7:\n            q2 += 0\n        elif i in p8 or i in p9:\n            q2 += 1\n        else:\n            q2 += 3\n    for i in p6:\n        if i in p7:\n            q3 += 0\n        elif i in p9 or i in p10:\n            q3 += 1\n        else:\n            q3 += 3\n    (point.append(q1), point.append(q2), point.append(q3))\nfor i in range(len(point) // 3):\n    print(point[i * 3], point[i * 3 + 1], point[i * 3 + 2])", "def save(word, wordsDic):\n    for i in word:\n        wordsDic[i] = wordsDic.get(i, 0) + 1\n\ndef solve(n, word1, word2, word3, wordsDic):\n    save(word1, wordsDic)\n    save(word2, wordsDic)\n    save(word3, wordsDic)\n    scores = []\n    score = 0\n    for i in word1:\n        if wordsDic[i] == 2:\n            score += 1\n        elif wordsDic[i] == 1:\n            score += 3\n    scores.append(score)\n    score = 0\n    for i in word2:\n        if wordsDic[i] == 2:\n            score += 1\n        elif wordsDic[i] == 1:\n            score += 3\n    scores.append(score)\n    score = 0\n    for i in word3:\n        if wordsDic[i] == 2:\n            score += 1\n        elif wordsDic[i] == 1:\n            score += 3\n    scores.append(score)\n    return ' '.join([str(i) for i in scores])\nt = int(input())\nfor T in range(t):\n    n = int(input())\n    word1 = input().split(' ')\n    word2 = input().split(' ')\n    word3 = input().split(' ')\n    words = {}\n    print(solve(n, word1, word2, word3, words))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s1 = set(map(str, input().split()))\n    s2 = set(map(str, input().split()))\n    s3 = set(map(str, input().split()))\n    zero = len(s1.intersection(s2.intersection(s3)))\n    n -= zero\n    ans1 = (n - len(s1.intersection(s2)) - len(s1.intersection(s3)) + 2 * zero) * 3 + len(s1.intersection(s2)) + len(s1.intersection(s3)) - 2 * zero\n    ans2 = (n - len(s2.intersection(s1)) - len(s2.intersection(s3)) + 2 * zero) * 3 + len(s2.intersection(s1)) + len(s2.intersection(s3)) - 2 * zero\n    ans3 = (n - len(s3.intersection(s2)) - len(s3.intersection(s1)) + 2 * zero) * 3 + len(s3.intersection(s2)) + len(s3.intersection(s1)) - 2 * zero\n    print(ans1, ans2, ans3)", "num = int(input())\nfor i in range(num):\n    num = int(input())\n    p = set(input().split())\n    q = set(input().split())\n    r = set(input().split())\n    a = 3 * len(p - q - r) + len(p & q - r) + len(p & r - q)\n    b = 3 * len(q - p - r) + len(p & q - r) + len(q & r - p)\n    c = 3 * len(r - q - p) + len(p & r - q) + len(q & r - p)\n    print(a, b, c)", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    a = set(input().split())\n    b = set(input().split())\n    c = set(input().split())\n    ans1 = ans2 = ans3 = 0\n    for el in a:\n        if el in b and el in c:\n            continue\n        elif el in b or el in c:\n            ans1 += 1\n        else:\n            ans1 += 3\n    for el in b:\n        if el in a and el in c:\n            continue\n        elif el in a or el in c:\n            ans2 += 1\n        else:\n            ans2 += 3\n    for el in c:\n        if el in b and el in a:\n            continue\n        elif el in b or el in a:\n            ans3 += 1\n        else:\n            ans3 += 3\n    print(ans1, ans2, ans3)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = set(input().split())\n    b = set(input().split())\n    c = set(input().split())\n    sa = sb = sc = 0\n    for w in set.intersection(a, b):\n        if w not in c:\n            sa += 1\n            sb += 1\n    for w in set.intersection(b, c):\n        if w not in a:\n            sb += 1\n            sc += 1\n    for w in set.intersection(c, a):\n        if w not in b:\n            sc += 1\n            sa += 1\n    for w in set.difference(a, set.union(b, c)):\n        sa += 3\n    for w in set.difference(b, set.union(a, c)):\n        sb += 3\n    for w in set.difference(c, set.union(a, b)):\n        sc += 3\n    print(sa, sb, sc)", "def solve(s1, s2, s3):\n    (ans1, ans2, ans3) = (0, 0, 0)\n    for i in s1.union(s2).union(s3):\n        if i in s1 and i not in s2 and (i not in s3):\n            ans1 += 3\n        elif i not in s1 and i in s2 and (i not in s3):\n            ans2 += 3\n        elif i not in s1 and i not in s2 and (i in s3):\n            ans3 += 3\n        elif i in s1 and i in s2 and (i not in s3):\n            ans1 += 1\n            ans2 += 1\n        elif i in s1 and i not in s2 and (i in s3):\n            ans1 += 1\n            ans3 += 1\n        elif i not in s1 and i in s2 and (i in s3):\n            ans2 += 1\n            ans3 += 1\n    return (ans1, ans2, ans3)\nfor _ in range(int(input())):\n    input()\n    print(*solve(set(input().split()), set(input().split()), set(input().split())))", "from itertools import count\nimport math\nfrom collections import Counter\nints = lambda : list(map(int, input().split()))\nalpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nmx = 10 ** 5\ninp = lambda : int(input())\nfor _ in range(inp()):\n    n = inp()\n    s1 = input().split()\n    s2 = input().split()\n    s3 = input().split()\n    counts = Counter(s1 + s2 + s3)\n    v1 = v2 = v3 = 0\n    for x in s1:\n        if counts[x] == 1:\n            v1 += 3\n        elif counts[x] == 2:\n            v1 += 1\n    for x in s2:\n        if counts[x] == 1:\n            v2 += 3\n        elif counts[x] == 2:\n            v2 += 1\n    for x in s3:\n        if counts[x] == 1:\n            v3 += 3\n        elif counts[x] == 2:\n            v3 += 1\n    print(v1, v2, v3)", "def res(s1, s2, s3):\n    ans = {}\n    p = {1: 3, 2: 1, 3: 0}\n    rs = [0, 0, 0]\n    for s in s1 + s2 + s3:\n        if s in ans:\n            ans[s] += 1\n        else:\n            ans[s] = 1\n    for s in s1:\n        rs[0] += p[ans[s]]\n    for s in s2:\n        rs[1] += p[ans[s]]\n    for s in s3:\n        rs[2] += p[ans[s]]\n    return rs\nn = int(input())\nfor _ in range(n):\n    n1 = int(input())\n    s1 = input().split()\n    s2 = input().split()\n    s3 = input().split()\n    print(*res(s1, s2, s3))", "for _ in range(int(input())):\n    n = int(input())\n    s1 = [x for x in input().split()]\n    if 'eht7834ht8hr' == 434323243:\n        print('Tanmay')\n    s2 = [x for x in input().split()]\n    p1 = p2 = p3 = n * 3\n    s3 = [x for x in input().split()]\n    se2 = set()\n    se3c = set()\n    se1 = set()\n    for i in s1:\n        se1.add(i)\n    for i in s2:\n        if i in se1:\n            p1 -= 2\n            p2 -= 2\n            se3c.add(i)\n        se2.add(i)\n    for i in s3:\n        if i in se3c:\n            p1 -= 1\n            p2 -= 1\n            p3 -= 3\n            continue\n        if i in se1:\n            p1 -= 2\n            p3 -= 2\n        elif i in se2:\n            p2 -= 2\n            p3 -= 2\n    print(p1, p2, p3)", "import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    d = {}\n    for _ in range(n):\n        sys.stdin.readline()\n        s = sys.stdin.readline().strip().split()\n        s2 = sys.stdin.readline().strip().split()\n        s3 = sys.stdin.readline().strip().split()\n        asnl = []\n        for (i, j, k) in zip(s, s2, s3):\n            if i not in d:\n                d[i] = 1\n            else:\n                d[i] = d[i] + 1\n            if j not in d:\n                d[j] = 1\n            else:\n                d[j] = d[j] + 1\n            if k not in d:\n                d[k] = 1\n            else:\n                d[k] = d[k] + 1\n        ans = 0\n        ansl = []\n        for m in s:\n            if d[m] == 1:\n                ans += 3\n            elif d[m] == 2:\n                ans += 1\n        ansl.append(ans)\n        ans = 0\n        for m in s2:\n            if d[m] == 1:\n                ans += 3\n            elif d[m] == 2:\n                ans += 1\n        ansl.append(ans)\n        ans = 0\n        for m in s3:\n            if d[m] == 1:\n                ans += 3\n            elif d[m] == 2:\n                ans += 1\n        ansl.append(ans)\n        for c in ansl:\n            sys.stdout.write(str(c) + ' ')\n        sys.stdout.write('\\n')\n        d.clear()\nmain()", "def get_answer(a, b, c):\n    counters = {}\n    for i in [*a, *b, *c]:\n        if i not in counters:\n            counters[i] = 0\n        counters[i] += 1\n    result_scores = [0, 0, 0]\n    for (index, elems) in enumerate([a, b, c]):\n        for elem in elems:\n            score_for_this_elem = 0\n            if counters[elem] == 1:\n                score_for_this_elem = 3\n            elif counters[elem] == 2:\n                score_for_this_elem = 1\n            result_scores[index] += score_for_this_elem\n    return f'{result_scores[0]} {result_scores[1]} {result_scores[2]}'\nfor _ in range(int(input())):\n    input()\n    (a, b, c) = [input().split() for i in range(3)]\n    print(get_answer(a, b, c))", "for _ in range(int(input())):\n    n = int(input())\n    w1 = input().split()\n    w2 = input().split()\n    w3 = input().split()\n    w1 = set(w1)\n    w2 = set(w2)\n    w3 = set(w3)\n    p1 = 0\n    for x in w1:\n        if x in w2 and x in w3:\n            pass\n        elif x in w2 or x in w3:\n            p1 += 1\n        else:\n            p1 += 3\n    p2 = 0\n    for x in w2:\n        if x in w1 and x in w3:\n            pass\n        elif x in w1 or x in w3:\n            p2 += 1\n        else:\n            p2 += 3\n    p3 = 0\n    for x in w3:\n        if x in w2 and x in w1:\n            pass\n        elif x in w2 or x in w1:\n            p3 += 1\n        else:\n            p3 += 3\n    print(p1, p2, p3)", "for _ in range(int(input())):\n    n = int(input())\n    s = set(input().split())\n    s1 = set(input().split())\n    s2 = set(input().split())\n    c = 0\n    c1 = 0\n    c2 = 0\n    for i in s:\n        if i in s1 and i in s2:\n            s1.remove(i)\n            s2.remove(i)\n        elif i in s2 and i not in s1 or (i in s1 and i not in s2):\n            c += 1\n            if i in s1:\n                c1 += 1\n                s1.remove(i)\n            else:\n                c2 += 1\n                s2.remove(i)\n        else:\n            c += 3\n    for i in s1:\n        if i in s and i in s2:\n            s.remove(i)\n            s2.remove(i)\n        elif i in s2 and i not in s or (i in s and i not in s2):\n            c1 += 1\n            if i in s:\n                c += 1\n                s.remove(i)\n            else:\n                c2 += 1\n                s2.remove(i)\n        else:\n            c1 += 3\n    for i in s2:\n        if i in s1 and i in s:\n            s1.remove(i)\n            s.remove(i)\n        elif i in s and i not in s1 or (i in s1 and i not in s):\n            c2 += 1\n            if i in s1:\n                c1 += 1\n                s1.remove(i)\n            else:\n                c += 1\n                s.remove(i)\n        else:\n            c2 += 3\n    print(c, c1, c2)"]