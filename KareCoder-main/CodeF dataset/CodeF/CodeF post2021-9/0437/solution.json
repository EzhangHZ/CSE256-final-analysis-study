["def ss(a, n):\n    count = 0\n    for i in range(1, n - 1, 2):\n        x = max(a[i - 1], a[i + 1])\n        if a[i] <= x:\n            count += x - a[i] + 1\n    return count\n\ndef ff(s, n):\n    lst1 = []\n    lst2 = []\n    for i in range(1, n - 1):\n        x = max(a[i - 1], a[i + 1])\n        cost = 0\n        if a[i] <= x:\n            cost = x - a[i] + 1\n        if i % 2 == 0:\n            lst1.append(cost)\n        else:\n            lst2.append(cost)\n    x = sum(lst1)\n    c = x\n    for i in range(len(lst1)):\n        x += lst2[i] - lst1[i]\n        c = min(c, x)\n    return c\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n % 2 == 1:\n        print(ss(a, n))\n    else:\n        print(ff(a, n))", "def ss(a, n):\n    count = 0\n    for i in range(1, n - 1, 2):\n        x = max(a[i - 1], a[i + 1])\n        if a[i] <= x:\n            count += x - a[i] + 1\n    return count\n\ndef ff(s, n):\n    lst1 = []\n    lst2 = []\n    for i in range(1, n - 1):\n        x = max(a[i - 1], a[i + 1])\n        cost = 0\n        if a[i] <= x:\n            cost = x - a[i] + 1\n        if i % 2 == 1:\n            lst1.append(cost)\n        else:\n            lst2.append(cost)\n    x = sum(lst2)\n    z = x\n    y = x\n    x = 0\n    mx = z\n    for i in range(len(lst1)):\n        x += lst1[i]\n        y -= lst2[i]\n        mx = min(mx, x + y)\n    return mx\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n % 2 == 1:\n        print(ss(a, n))\n    else:\n        print(ff(a, n))", "def logic(n, arr):\n    if n % 2 == 0:\n        a = [0] * (n - 2)\n        for i in range(1, n - 1):\n            a[i - 1] = max(0, 1 + max(arr[i + 1], arr[i - 1]) - arr[i])\n        n = n - 2\n        s = 0\n        for i in range(0, n, 2):\n            s += a[i]\n        m = s\n        for j in range(n - 2, -2, -2):\n            s += a[j + 1] - a[j]\n            if s < m:\n                m = s\n        return m\n    s = 0\n    for i in range(1, n, 2):\n        s += max(0, 1 + max(arr[i + 1], arr[i - 1]) - arr[i])\n    return s\nfor w in range(0, int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    print(logic(n, arr))", "standard_input = '6\\n3\\n2 1 2\\n5\\n1 2 1 4 3\\n6\\n3 1 4 5 5 2\\n8\\n4 2 1 3 5 3 6 1\\n6\\n1 10 1 1 10 1\\n8\\n1 10 11 1 10 11 10 1\\n'\n\ndef calcOdd(arr):\n    total = 0\n    for i in range(1, len(arr) - 1, 2):\n        v = arr[i]\n        m = max(arr[i - 1], arr[i + 1])\n        if v <= m:\n            total += m + 1 - v\n    return total\n\ndef calcEven(arr):\n    arrBackward = []\n    for i in range(len(arr) - 2, 0, -2):\n        v = arr[i]\n        m = max(arr[i - 1], arr[i + 1])\n        amount = 0\n        if v <= m:\n            amount = m + 1 - v\n        arrBackward.append(amount)\n    arrForward = []\n    total = 0\n    for i in range(1, len(arr) - 1, 2):\n        v = arr[i]\n        m = max(arr[i - 1], arr[i + 1])\n        amount = 0\n        if v <= m:\n            amount = m + 1 - v\n            total += amount\n        arrForward.append(amount)\n    length = len(arrForward)\n    best = total\n    for i in range(0, length):\n        total += arrBackward[i] - arrForward[length - i - 1]\n        if total < best:\n            best = total\n    return best\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n % 2 == 1:\n        print(calcOdd(a))\n    else:\n        print(calcEven(a))", "import itertools\n\ndef solve_odd(n, h):\n    return sum((max(0, max(h[i - 1], h[i + 1]) + 1 - h[i]) for i in range(1, n, 2)))\n\ndef solve_even(n, h):\n    f = [max(0, max(h[i - 1], h[i + 1]) + 1 - h[i]) for i in range(1, n - 1, 2)]\n    b = [max(0, max(h[i - 1], h[i + 1]) + 1 - h[i]) for i in range(-2, -n, -2)]\n    f = itertools.accumulate(f, initial=0)\n    b = list(itertools.accumulate(b, initial=0))\n    return min((x + y for (x, y) in zip(f, reversed(b))))\nfor _ in range(int(input())):\n    n = int(input())\n    h = list(map(int, input().split()))\n    print(solve_odd(n, h) if n % 2 == 1 else solve_even(n, h))", "def res_odd(n, ls):\n    i = 1\n    h = 0\n    while i < n:\n        m = max(ls[i - 1], ls[i + 1])\n        if m >= ls[i]:\n            h += m - ls[i] + 1\n        i += 2\n    return h\n\ndef res_even(n, ls):\n    o = []\n    i = 1\n    while i < n - 1:\n        o.append(max(0, max(ls[i - 1], ls[i + 1]) - ls[i] + 1))\n        i += 2\n    e = []\n    j = 2\n    while j < n - 1:\n        e.append(max(0, max(ls[j - 1], ls[j + 1]) - ls[j] + 1))\n        j += 2\n    ee = sum(e)\n    mn = min(sum(o), ee)\n    oo = 0\n    for i in range(0, len(e)):\n        ee -= e[i]\n        oo += o[i]\n        mn = min(mn, ee + oo)\n    return mn\nfor _ in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    if n % 2 != 0:\n        print(res_odd(n, ls))\n    else:\n        print(res_even(n, ls))", "for i in range(int(input())):\n    n = int(input())\n    values = list(map(int, input().split()))\n    pref = []\n    suf = []\n    if n % 2 != 0:\n        count = 0\n        for k in range(1, n - 1, 2):\n            sh = values[k] - max(values[k - 1], values[k + 1]) - 1\n            if sh <= 0:\n                count -= values[k] - max(values[k - 1], values[k + 1]) - 1\n        print(count)\n    else:\n        pre = 0\n        su = 0\n        for k in range(1, n - 1, 2):\n            ch = values[k] - max(values[k - 1], values[k + 1]) - 1\n            if ch <= 0:\n                pre -= ch\n                pref.append(pre)\n            else:\n                pref.append(pre)\n        for k in range(n - 2, 1, -2):\n            ch = values[k] - max(values[k - 1], values[k + 1]) - 1\n            if ch <= 0:\n                su -= ch\n                suf.append(su)\n            else:\n                suf.append(su)\n        ans = pref[n // 2 - 2]\n        ch = n // 2 - 2\n        for k in range(0, ch + 1):\n            ans = min(ans, pref[ch - k - 1] + suf[k])\n        ans = min(ans, suf[ch])\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = (*map(int, input().split()),)\n    if n & 1:\n        print(sum((max(max(arr[i - 1], arr[i + 1]) + 1 - arr[i], 0) for i in range(1, n - 1, 2))))\n    else:\n        presum = [0]\n        for i in range(1, n - 1, 2):\n            presum.append(presum[-1] + max(max(arr[i - 1], arr[i + 1]) + 1 - arr[i], 0))\n        postsum = [0]\n        for i in range(n - 2, 0, -2):\n            postsum.append(postsum[-1] + max(max(arr[i - 1], arr[i + 1]) + 1 - arr[i], 0))\n        print(min((presum[i] + postsum[-i - 1] for i in range(len(presum)))))", "def resi():\n    n = int(input())\n    h = list(map(int, input().split()))\n    if n % 2 == 1:\n        fali = 0\n        for i in range(1, n, 2):\n            fali += max(0, max(h[i - 1], h[i + 1]) - h[i] + 1)\n        print(fali)\n    else:\n        fali = 0\n        for i in range(1, n - 1, 2):\n            fali += max(0, max(h[i - 1], h[i + 1]) - h[i] + 1)\n        mn = fali\n        i = n - 2\n        while i >= 2:\n            fali += max(0, max(h[i - 1], h[i + 1]) - h[i] + 1) - max(0, max(h[i - 2], h[i]) - h[i - 1] + 1)\n            if mn > fali:\n                mn = fali\n            i -= 2\n        print(mn)\nfor _ in range(int(input())):\n    resi()", "t = int(input())\nsolution = []\nfor _ in range(t):\n    n = int(input())\n    h = [int(x) for x in input().split()]\n    if n % 2 == 1:\n        sol = 0\n        for i in range(1, n - 1, 2):\n            a = max(h[i - 1], h[i + 1])\n            if h[i] > a:\n                continue\n            sol += a - h[i] + 1\n        solution.append(sol)\n    else:\n        sol1 = 0\n        sol1v = []\n        sol1v.append(sol1)\n        for i in range(1, n - 2, 2):\n            a = max(h[i - 1], h[i + 1])\n            if h[i] > a:\n                sol1v.append(sol1)\n                continue\n            sol1 += a - h[i] + 1\n            sol1v.append(sol1)\n        sol2 = 0\n        sol2v = []\n        sol2v.append(sol2)\n        for i in range(2, n - 1, 2):\n            a = max(h[i - 1], h[i + 1])\n            if h[i] > a:\n                sol2v.append(sol2)\n                continue\n            sol2 += a - h[i] + 1\n            sol2v.append(sol2)\n        sol = min(sol2, sol1)\n        for i in range(n // 2):\n            sol = min(sol, sol1v[i] + sol2 - sol2v[i])\n        solution.append(sol)\nfor sol in solution:\n    print(sol)", "def solve(heights):\n    if len(heights) <= 2:\n        return 0\n    if len(heights) % 2 == 1:\n        ans = 0\n        for i in range(1, len(heights) - 1, 2):\n            ans += max(max(heights[i - 1], heights[i + 1]) - heights[i] + 1, 0)\n        return ans\n    else:\n        curr_floor = 0\n        for i in range(len(heights) - 2, 1, -2):\n            curr_floor += max(max(heights[i - 1], heights[i + 1]) - heights[i] + 1, 0)\n        ans = curr_floor\n        for i in range(1, len(heights) - 2, 2):\n            curr_floor += max(max(heights[i - 1], heights[i + 1]) - heights[i] + 1, 0) - max(max(heights[i], heights[i + 2]) - heights[i + 1] + 1, 0)\n            ans = min(ans, curr_floor)\n        return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    heights = list(map(int, input().split()))\n    print(solve(heights))", "for _ in range(int(input())):\n    n = int(input())\n    h = list(map(int, input().split()))\n    c = [max(0, max(h[i - 1], h[i + 1]) + 1 - h[i]) for i in range(1, n - 1)]\n    if n % 2 == 1:\n        print(sum(c[::2]))\n        continue\n    opt = cost = sum(c[1::2])\n    for i in range(0, len(c), 2):\n        cost = cost + c[i] - c[i + 1]\n        opt = min(opt, cost)\n    print(opt)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    h = list(map(int, input().split()))\n    cool_mod = [max(0, max(h[i - 1], h[i + 1]) + 1 - h[i]) for i in range(1, n - 1)]\n    if n % 2 == 1:\n        print(sum(cool_mod[::2]))\n    else:\n        left = 0\n        right = sum(cool_mod[1::2])\n        m = left + right\n        for i in range(0, n - 2, 2):\n            left += cool_mod[i]\n            right -= cool_mod[i + 1]\n            m = min(m, left + right)\n        print(m)", "import sys\n\ndef adding(th0, th1, th2):\n    pivot = max(th0, th2) + 1\n    return pivot - th1 if pivot > th1 else 0\n\ndef iterate(start, data):\n    temp = 0\n    for idx in range(start, len(data) - 1, 2):\n        temp += adding(data[idx - 1], data[idx], data[idx + 1])\n    return temp\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    data = list(map(int, sys.stdin.readline().split()))\n    ans = iterate(1, data)\n    if len(data) % 2:\n        print(ans)\n        continue\n    temp = ans\n    for i in range(n - 2, 0, -2):\n        temp += adding(data[i - 1], data[i], data[i + 1])\n        temp -= adding(data[i - 2], data[i - 1], data[i])\n        ans = min(temp, ans)\n    print(ans)", "def problem(n, b):\n    res = 0\n    if n % 2 == 1:\n        for i in range(1, n - 1, 2):\n            res += needToShine(b, i)\n    else:\n        for i in range(1, n - 1, 2):\n            res += needToShine(b, i)\n        last = res\n        for i in range(n - 3, 0, -2):\n            last = last - needToShine(b, i) + needToShine(b, i + 1)\n            res = min(res, last)\n    print(res)\n\ndef needToShine(b, i):\n    return max(max(b[i + 1], b[i - 1]) - b[i] + 1, 0)\ncases = int(input())\nfor c in range(cases):\n    n = int(input())\n    buildings = list(map(int, input().split()))\n    problem(n, buildings)", "import sys\nimport math\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = 10 ** 9\n    lst = [0] * n\n    for i in range(1, n - 1):\n        lst[i] = max(max(a[i - 1], a[i + 1]) - a[i] + 1, 0)\n    if n % 2 == 1:\n        m = 0\n        for i in range(1, n, 2):\n            m += lst[i]\n        print(m)\n    else:\n        cnt = 0\n        for i in range(2, n, 2):\n            cnt += lst[i]\n        k = cnt\n        for i in range(1, n - 1, 2):\n            cnt += lst[i]\n            cnt -= lst[i + 1]\n            k = min(cnt, k)\n        print(k)", "def dp(n):\n    ans[0] = 0\n    for i in range(1, n - 1):\n        m = max(l[i - 1], l[i + 1]) - l[i] + 1\n        if m < 0:\n            m = 0\n        if i == 1:\n            ans[i] = m\n            continue\n        if i == 2:\n            ans[i] = m\n            continue\n        if i % 2 == 1:\n            t = ans[i - 2] + m\n            ans[i] = t\n        if i % 2 == 0:\n            if flag[i - 3]:\n                t = ans[i - 2] + m\n                ans[i] = t\n            else:\n                if ans[i - 3] < ans[i - 2]:\n                    flag[i] = True\n                    t = ans[i - 3] + m\n                else:\n                    t = ans[i - 2] + m\n                ans[i] = t\n\ndef run():\n    global l, ans, flag\n    n = int(input())\n    flag = [False] * n\n    ans = [-1] * n\n    l = list(map(int, input().split()))\n    dp(n)\n    if n % 2 != 0:\n        print(ans[n - 2])\n    else:\n        print(min(ans[n - 2], ans[n - 3]))\nfor _ in range(int(input())):\n    run()", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    low = 1\n    high = n - 2\n    ans = 0\n    d1 = defaultdict(int)\n    d2 = defaultdict(int)\n    if n % 2:\n        for i in range(1, n, 2):\n            ans += max(0, max(l[i - 1], l[i + 1]) - l[i] + 1)\n    else:\n        suf = [0] * (n + 3)\n        k = 0\n        ans = float('inf')\n        tt = 0\n        for i in range(n - 2, 1, -2):\n            k += max(0, max(l[i - 1], l[i + 1]) - l[i] + 1)\n            suf[i] = k\n            tt = k\n        k = 0\n        for i in range(1, n - 1, 2):\n            k += max(0, max(l[i - 1], l[i + 1]) - l[i] + 1)\n            ans = min(ans, k + suf[i + 3])\n        k = 0\n        ans = min(ans, tt)\n    print(ans)", "import sys\nmaxSize = sys.maxsize\nt = int(input())\nwhile t:\n    p = int(input())\n    h = list(map(int, input().split()))\n    cool_mod = [max(0, max(h[i - 1], h[i + 1]) + 1 - h[i]) for i in range(1, p - 1)]\n    if p % 2 == 1:\n        print(sum(cool_mod[::2]))\n    else:\n        left = 0\n        right = sum(cool_mod[1::2])\n        m = left + right\n        for i in range(0, p - 2, 2):\n            left += cool_mod[i]\n            right -= cool_mod[i + 1]\n            m = min(m, left + right)\n        print(m)\n    t -= 1", "t = int(input())\n\ndef solve():\n    n = int(input())\n    lst = list(map(int, input().split()))\n    ans = 0\n    if n & 1:\n        for i in range(1, n, 2):\n            ans += max(0, max(lst[i + 1] - lst[i] + 1, lst[i - 1] - lst[i] + 1))\n    else:\n        prefix = [0] * n\n        suffix = [0] * n\n        for i in range(1, n - 1, 2):\n            prefix[i] = max(0, max(lst[i + 1] - lst[i] + 1, lst[i - 1] - lst[i] + 1))\n        for i in range(n - 2, 0, -2):\n            suffix[i] = max(0, max(lst[i + 1] - lst[i] + 1, lst[i - 1] - lst[i] + 1))\n        for i in range(3, n - 1, 2):\n            prefix[i] += prefix[i - 2]\n        for i in range(n - 4, 0, -2):\n            suffix[i] += suffix[i + 2]\n        ans = -1\n        for i in range(0, n, 2):\n            if i == 0:\n                sum = suffix[2]\n            elif i == n - 2:\n                sum = prefix[n - 3]\n            else:\n                sum = suffix[i + 2] + prefix[i - 1]\n            if ans == -1:\n                ans = sum\n            else:\n                ans = min(ans, sum)\n    print(ans)\nwhile t:\n    solve()\n    t -= 1", "t = int(input())\nfor T in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n % 2 != 0:\n        ans = 0\n        for i in range(1, n, 2):\n            q = max(arr[i - 1], arr[i + 1])\n            ans += max(0, q - arr[i] + 1)\n        print(ans)\n    else:\n        dp = [0] * n\n        dp[1] = max(0, max(arr[0], arr[2]) - arr[1] + 1)\n        if n > 3:\n            dp[2] = max(0, max(arr[1], arr[3]) - arr[2] + 1)\n        for i in range(3, n - 1, 2):\n            q = max(arr[i - 1], arr[i + 1])\n            dp[i] = dp[i - 2] + max(0, q - arr[i] + 1)\n        for i in range(4, n - 1, 2):\n            q = max(arr[i - 1], arr[i + 1])\n            v = min(dp[i - 2], dp[i - 3])\n            dp[i] = v + max(0, q - arr[i] + 1)\n        print(min(dp[n - 2], dp[n - 3]))", "def helper(i):\n    return max(1 + max(l[i - 1], l[i + 1]) - l[i], 0)\nfor caseno in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n % 2:\n        answer = 0\n        for i in range(1, n - 1, 2):\n            answer += helper(i)\n    else:\n        (a, b) = (0, 0)\n        for i in range(1, n - 1, 2):\n            (c, d) = (helper(i), helper(i + 1))\n            (a, b) = (c + a, min(a, b) + d)\n        answer = min(a, b)\n    print(answer)", "def p(s):\n    pass\n\ndef f(h):\n    l = len(h)\n    c = [0 for _ in h]\n    i = 1\n    best = 0\n    while i < l - 1:\n        x = max(h[i - 1], h[i + 1])\n        if h[i] <= x:\n            c[i] = x - h[i] + 1\n        if i % 2:\n            best += c[i]\n        i += 1\n    p(best)\n    p(c)\n    if l % 2:\n        p(f'--best:{best}')\n        print(best)\n        return\n    cur = best\n    while i > 0:\n        cur = cur - c[i - 2] + c[i - 1]\n        if cur < best:\n            best = cur\n        i -= 2\n    p(f'best:{best}')\n    print(best)\nfor _ in range(int(input())):\n    n = int(input())\n    h = [int(_) for _ in input().split()]\n    f(h)", "out = []\nfor _ in range(int(input())):\n    n = int(input())\n    h = [int(i) for i in input().split()]\n    ans = 0\n    if n % 2 == 1:\n        for i in range(1, n - 1, 2):\n            ans += max(0, max(h[i - 1], h[i + 1]) + 1 - h[i])\n    else:\n        ev = [0]\n        od = [0]\n        for i in range(1, n - 1, 2):\n            ev.append(ev[-1] + max(0, max(h[i - 1], h[i + 1]) + 1 - h[i]))\n        for i in range(2, n, 2):\n            od.append(od[-1] + max(0, max(h[i - 1], h[i + 1]) + 1 - h[i]))\n        ans = ev[-1]\n        for i in range(len(ev)):\n            ans = min(ans, ev[i] + od[-1] - od[i])\n    out.append(ans)\nfor i in out:\n    print(i)", "for _ in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    ans = 0\n    for i in range(1, n - 1, 2):\n        ma = max(nums[i - 1], nums[i + 1])\n        if nums[i] <= ma:\n            ans += ma - nums[i] + 1\n    if not n % 2:\n        su = ans\n        for i in range(n - 2, 0, -2):\n            ma = max(nums[i], nums[i - 2])\n            if nums[i - 1] <= ma:\n                su -= ma - nums[i - 1] + 1\n            ma1 = max(nums[i - 1], nums[i + 1])\n            if nums[i] <= ma1:\n                su += ma1 - nums[i] + 1\n            ans = min(ans, su)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    h = list(map(int, input().split()))\n    if n % 2 == 1:\n        temp = 0\n        for i in range(1, n, 2):\n            temp += max(max(h[i - 1], h[i + 1]) + 1 - h[i], 0)\n        print(temp)\n    else:\n        lgap = [max(max(h[i - 1], h[i + 1]) + 1 - h[i], 0) for i in range(1, n - 1, 2)]\n        rgap = [max(max(h[i - 1], h[i + 1]) + 1 - h[i], 0) for i in range(2, n, 2)]\n        k = len(rgap)\n        for i in range(1, k):\n            lgap[i] += lgap[i - 1]\n            rgap[k - 1 - i] += rgap[k - i]\n        temp = min(lgap[-1], rgap[0])\n        for i in range(0, k - 1):\n            temp = min(temp, lgap[i] + rgap[i + 1])\n        print(temp)", "t = int(input())\nfor vvod in range(t):\n    n = int(input())\n    v = list(map(int, input().split()))\n    ans = 0\n    ans1 = 0\n    ans2 = 0\n    m = [0 for i in range(n)]\n    if n % 2 == 1:\n        for i in range(1, n - 1, 2):\n            maxim = max(v[i - 1], v[i + 1])\n            if v[i] <= maxim:\n                ans += maxim - v[i] + 1\n        print(ans)\n    else:\n        ansl = list()\n        for i in range(2, n - 1, 2):\n            maxim = max(v[i - 1], v[i + 1])\n            if v[i] <= maxim:\n                m[i] = maxim - v[i] + 1\n                ans += m[i]\n        ans1 = ans\n        ans2 = ans\n        for i in range(1, n - 1, 2):\n            maxim = max(v[i - 1], v[i + 1])\n            if v[i] <= maxim:\n                ans1 += maxim - v[i] + 1 - m[i + 1]\n                ans2 = min(ans2, ans1)\n            else:\n                ans1 -= m[i + 1]\n                ans2 = min(ans2, ans1)\n        print(ans2)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n % 2:\n        ans = 0\n        for i in range(1, n - 1, 2):\n            m = max(a[i - 1], a[i + 1])\n            if m >= a[i]:\n                ans += m - a[i] + 1\n        print(ans)\n    else:\n        temp = [i for i in a]\n        start = [0]\n        end = [0]\n        for i in range(1, n - 1, 2):\n            x = 0\n            m = max(a[i - 1], a[i + 1])\n            if m >= a[i]:\n                x = m - a[i] + 1\n            start.append(start[-1] + x)\n        a = [i for i in temp]\n        for i in range(n - 2, 1, -2):\n            x = 0\n            m = max(a[i - 1], a[i + 1])\n            if m >= a[i]:\n                x = m - a[i] + 1\n            end.append(end[-1] + x)\n        end = end[::-1]\n        ans = float('inf')\n        for i in range(len(start)):\n            ans = min(ans, start[i] + end[i])\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    h = list(map(int, input().split()))\n    ans = 0\n    if n % 2 == 1:\n        for i in range(1, n - 1, 2):\n            ans += max(h[i - 1] - h[i] + 1, h[i + 1] - h[i] + 1, 0)\n    else:\n        prefix_odd = [0] * (n // 2)\n        prefix_even = [0] * (n // 2)\n        for i in range(1, n - 1, 2):\n            prefix_odd[(i + 1) // 2] = prefix_odd[i // 2] + max(h[i - 1] - h[i] + 1, h[i + 1] - h[i] + 1, 0)\n        for i in range(n - 2, 0, -2):\n            prefix_even[i // 2 - 1] = prefix_even[i // 2] + max(h[i - 1] - h[i] + 1, h[i + 1] - h[i] + 1, 0)\n        ans = float('inf')\n        for i in range(n // 2):\n            ans = min(ans, prefix_even[i] + prefix_odd[i])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    h = list(map(int, input().split()))\n    if n % 2 == 0:\n        x = int(n / 2) - 1\n        temp = list(map(int, [0] * n))\n        for i in range(1, n - 1):\n            temp[i] = max(0, max(h[i - 1], h[i + 1]) - h[i] + 1)\n        cnt = 0\n        for i in range(1, x * 2, 2):\n            cnt += temp[i]\n        tt = cnt\n        for k in range(n - 3, -1, -2):\n            tt += temp[k + 1] - temp[k]\n            cnt = min(tt, cnt)\n        print(cnt)\n    else:\n        x = n // 2\n        cnt = 0\n        for i in range(1, 2 * x, 2):\n            cnt += max(max(h[i - 1], h[i + 1]) - h[i] + 1, 0)\n        print(cnt)", "t = int(input())\nfor jj in range(t):\n    n = int(input())\n    p = [int(i) for i in input().split(' ')]\n    if n % 2 == 1:\n        ans = 0\n        for i in range(1, n, 2):\n            ans += max(max(p[i - 1], p[i + 1]) + 1 - p[i], 0)\n    else:\n        pre = [0] * n\n        for i in range(1, n - 1, 2):\n            if i == 1:\n                pre[i] = max(max(p[i - 1], p[i + 1]) + 1 - p[i], 0)\n            else:\n                pre[i] = pre[i - 2] + max(max(p[i - 1], p[i + 1]) + 1 - p[i], 0)\n        ans = pre[n - 3]\n        t = 0\n        for i in range(n - 2, 0, -2):\n            t += max(max(p[i - 1], p[i + 1]) + 1 - p[i], 0)\n            if i > 2:\n                ans = min(ans, t + pre[i - 3])\n            else:\n                ans = min(ans, t)\n    print(ans)", "def get(arr, i):\n    return max(0, max(arr[i + 1], arr[i - 1]) - arr[i] + 1)\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        n = int(input())\n        a = [int(i) for i in input().split()]\n        a.append(0)\n        count = 0\n        if n % 2 != 0:\n            for i in range(1, n - 1, 2):\n                count += get(a, i)\n        else:\n            total = 0\n            for i in range(1, n - 1, 2):\n                total += get(a, i)\n            count = total\n            for i in range(n - 2, 0, -2):\n                total -= get(a, i - 1)\n                total += get(a, i)\n                count = min(count, total)\n        print(count)\nmain()", "def solve(n, heights):\n    if n % 2 == 1:\n        cnt = 0\n        for i in range(1, n - 1, 2):\n            cnt += max(max(heights[i - 1], heights[i + 1]) - heights[i] + 1, 0)\n        return cnt\n    else:\n        m = n // 2 - 1\n        blocks = [0] * m\n        shifted_blocks = [0] * m\n        for i in range(m):\n            j = 1 + 2 * i\n            k = 2 + 2 * i\n            if heights[j] > heights[j - 1] and heights[j] > heights[j + 1]:\n                pass\n            else:\n                blocks[i] = max(heights[j - 1], heights[j + 1]) - heights[j] + 1\n            if heights[k] > heights[k - 1] and heights[k] > heights[k + 1]:\n                pass\n            else:\n                shifted_blocks[i] = max(heights[k - 1], heights[k + 1]) - heights[k] + 1\n        current = solve(n - 1, heights[:-1])\n        min_cost = current\n        for i in reversed(range(m)):\n            delta = -blocks[i] + shifted_blocks[i]\n            current += delta\n            if current < min_cost:\n                min_cost = current\n        return min_cost\ntests = int(input())\nfor _ in range(tests):\n    n = int(input())\n    array = list(map(int, input().split()))\n    a = solve(n, array)\n    print(a)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = []\n    for i in range(1, n - 1):\n        l1.append(max(0, max(l[i - 1], l[i + 1]) + 1 - l[i]))\n    if n % 2 == 1:\n        print(sum(l1[::2]))\n        continue\n    a = sum(l1[1::2])\n    b = a\n    for i in range(0, len(l1), 2):\n        b += l1[i] - l1[i + 1]\n        a = min(a, b)\n    print(a)", "for t in range(int(input())):\n    n = int(input())\n    s = [*map(int, input().split())]\n    l = []\n    for i in range(1, n - 1):\n        l.append(max(0, max(s[i - 1], s[i + 1]) + 1 - s[i]))\n    if n % 2 == 1:\n        print(sum(l[::2]))\n        continue\n    a = sum(l[1::2])\n    b = a\n    for i in range(0, len(l), 2):\n        b += l[i] - l[i + 1]\n        a = min(a, b)\n    print(a)", "for t in range(int(input())):\n    n = int(input())\n    s = [*map(int, input().split())]\n    l = []\n    for i in range(1, n - 1):\n        l.append(max(0, max(s[i - 1], s[i + 1]) + 1 - s[i]))\n    if n % 2 == 1:\n        print(sum(l[::2]))\n        continue\n    a = sum(l[1::2])\n    b = a\n    for i in range(0, len(l), 2):\n        b += l[i] - l[i + 1]\n        a = min(a, b)\n    print(a)", "for t in range(int(input())):\n    n = int(input())\n    s = [*map(int, input().split())]\n    l = []\n    for i in range(1, n - 1):\n        l.append(max(0, max(s[i - 1], s[i + 1]) + 1 - s[i]))\n    if n % 2 == 1:\n        print(sum(l[::2]))\n        continue\n    a = sum(l[1::2])\n    b = a\n    for i in range(0, len(l), 2):\n        b += l[i] - l[i + 1]\n        a = min(a, b)\n    print(a)", "for _ in range(int(input())):\n    n = int(input())\n    arr = input().split(' ')\n    arr = [int(i) for i in arr]\n    if n % 2:\n        ind = 1\n        ans = 0\n        while ind <= n - 2:\n            ans += max(0, 1 + max(arr[ind - 1], arr[ind + 1]) - arr[ind])\n            ind += 2\n        print(ans)\n        continue\n    else:\n        (b, c) = ([], [])\n        for i in range(1, n - 1):\n            if i % 2:\n                b.append(max(0, 1 + max(arr[i - 1], arr[i + 1]) - arr[i]))\n            else:\n                c.append(max(0, 1 + max(arr[i - 1], arr[i + 1]) - arr[i]))\n        ans = sum(c)\n        ansmax = ans\n        for i in range(len(b)):\n            ans = ans + b[i] - c[i]\n            ansmax = min(ans, ansmax)\n        print(ansmax)", "from math import inf\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n % 2 == 1:\n        ans = 0\n        for i in range(1, len(a) - 1, 2):\n            ans += max(0, 1 + max(a[i - 1], a[i + 1]) - a[i])\n        print(ans)\n    else:\n        ans = inf\n        b = [0]\n        for i in range(1, n - 1):\n            b.append(max(0, 1 + max(a[i - 1], a[i + 1]) - a[i]))\n        b.append(0)\n        pre = [0]\n        for i in range(1, n - 1, 2):\n            pre.append(pre[-1] + b[i])\n        suf = [0]\n        for i in range(n - 2, 0, -2):\n            suf.append(suf[-1] + b[i])\n        suf.reverse()\n        total = n // 2\n        total -= 1\n        for i in range(0, len(pre)):\n            ans = min(ans, pre[i] + suf[i])\n        print(ans)", "def add(i):\n    mark1 = 0\n    mark2 = 0\n    if h[i - 1] >= h[i]:\n        mark1 = h[i - 1] - h[i] + 1\n    if h[i + 1] >= h[i]:\n        mark2 = h[i + 1] - h[i] + 1\n    return max(mark1, mark2)\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    h = list(map(int, input().split()))\n    if n % 2 == 1:\n        ans = 0\n        for i in range(1, n - 1, 2):\n            ans += add(i)\n        print(ans)\n    else:\n        left = [0]\n        right = [0]\n        start_left = 0\n        start_right = 0\n        for i in range(1, n - 1, 2):\n            start_left += add(i)\n            left.append(start_left)\n        for i in range(2, n - 1, 2):\n            start_right += add(i)\n            right.append(start_right)\n        total_left = left[-1]\n        total_right = right[-1]\n        ans = left[0] + total_right - right[0]\n        for i in range(len(left)):\n            ans = min(ans, left[i] + total_right - right[i])\n        print(ans)", "def rebuild(x, l):\n\n    def floor(v):\n        s = max(l[v - 1] - l[v], l[v + 1] - l[v])\n        if s >= 0:\n            return s + 1\n        else:\n            return 0\n    if x % 2 == 1:\n        ans = 0\n        for i in range(x // 2):\n            ans += floor(2 * i + 1)\n        return ans\n    else:\n        N = x // 2 - 1\n        dp = 0\n        for j in range(N):\n            dp += floor(2 * (j + 1))\n        ans = dp\n        for k in range(N):\n            dp += floor(2 * k + 1) - floor(2 * k + 2)\n            ans = min(ans, dp)\n        return ans\nnCases = int(input())\nfor _ in range(nCases):\n    n = int(input())\n    h = list(map(int, input().split()))\n    print(rebuild(n, h))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    h = list(map(int, input().split()))\n    if n % 2 == 0:\n        x = int(n / 2) - 1\n        temp = list(map(int, [0] * n))\n        for i in range(1, n - 1):\n            temp[i] = max(0, max(h[i - 1], h[i + 1]) - h[i] + 1)\n        cnt = 0\n        for i in range(1, x * 2, 2):\n            cnt += temp[i]\n        tt = cnt\n        for k in range(-3, -(x * 2 + 2), -2):\n            tt += temp[k + 1] - temp[k]\n            cnt = min(tt, cnt)\n        print(cnt)\n    else:\n        x = n // 2\n        cnt = 0\n        for i in range(1, 2 * x, 2):\n            cnt += max(max(h[i - 1], h[i + 1]) - h[i] + 1, 0)\n        print(cnt)", "t = int(input())\n\ndef addFloor(i: int) -> int:\n    return max(h[i - 1] + 1 - h[i], h[i + 1] + 1 - h[i], 0)\nfor _ in range(t):\n    n = int(input())\n    h = list(map(int, input().split()))\n    ans = 10 ** 9 * 10 ** 5\n    dp = [0] * n\n    for i in range(2, n):\n        dp[i] = dp[i - 2] + addFloor(i - 1)\n    if n & 1:\n        ans = dp[n - 1]\n    else:\n        for i in range(0, n, 2):\n            ans = min(ans, dp[n - 1] + dp[i] - dp[i + 1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = []\n    for i in range(1, n - 1):\n        l1.append(max(0, max(l[i - 1], l[i + 1]) + 1 - l[i]))\n    if n % 2 == 1:\n        print(sum(l1[::2]))\n        continue\n    a = sum(l1[1::2])\n    b = a\n    for i in range(0, len(l1), 2):\n        b += l1[i] - l1[i + 1]\n        a = min(a, b)\n    print(a)", "def rebuild(x, l):\n\n    def floor(v):\n        s = max(l[v - 1] - l[v], l[v + 1] - l[v])\n        if s >= 0:\n            return s + 1\n        else:\n            return 0\n    if x % 2 == 1:\n        ans = 0\n        for i in range(x // 2):\n            ans += floor(2 * i + 1)\n        return ans\n    else:\n        N = x // 2 - 1\n        dp = []\n        count = 0\n        for j in range(N):\n            count += floor(2 * (j + 1))\n        dp.append(count)\n        ans = dp[0]\n        for k in range(N):\n            dp.append(dp[-1] + floor(2 * k + 1) - floor(2 * k + 2))\n            ans = min(ans, dp[-1])\n        return ans\nnCases = int(input())\nfor _ in range(nCases):\n    n = int(input())\n    h = list(map(int, input().split()))\n    print(rebuild(n, h))", "def miis():\n    return map(int, input().split())\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(miis())\n    if n % 2:\n        ans = 0\n        for i in range(1, n, 2):\n            ans += max(0, max(a[i + 1], a[i - 1]) + 1 - a[i])\n        print(ans)\n    else:\n        dp = [0 for i in range(n)]\n        for i in range(1, n - 1):\n            dp[i] = dp[i - 2] + max(0, max(a[i + 1], a[i - 1]) + 1 - a[i])\n        ans = min(dp[-2], dp[-3])\n        for i in range(1, n - 3, 2):\n            ans = min(ans, dp[i] + dp[-2] - dp[i + 1])\n        print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    height = [int(i) for i in input().split()]\n    if n % 2 == 1:\n        ans = 0\n        for j in range(1, n, 2):\n            ans += max(height[j - 1] - height[j] + 1, height[j + 1] - height[j] + 1, 0)\n        print(ans)\n    else:\n        ans = 0\n        for j in range(1, n - 1, 2):\n            ans += max(height[j - 1] - height[j] + 1, height[j + 1] - height[j] + 1, 0)\n        arr = [ans]\n        k = 0\n        for j in range(n - 3, 0, -2):\n            temp = arr[k] - max(height[j - 1] - height[j] + 1, height[j + 1] - height[j] + 1, 0) + max(height[j] - height[j + 1] + 1, height[j + 2] - height[j + 1] + 1, 0)\n            arr.append(temp)\n            k += 1\n        print(min(arr))", "for t in range(int(input())):\n    n = int(input())\n    s = [*map(int, input().split())]\n    l = []\n    for i in range(1, n - 1):\n        l.append(max(0, max(s[i - 1], s[i + 1]) + 1 - s[i]))\n    if n % 2 == 1:\n        print(sum(l[::2]))\n        continue\n    a = sum(l[1::2])\n    b = a\n    for i in range(0, len(l), 2):\n        b += l[i] - l[i + 1]\n        a = min(a, b)\n    print(a)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    odd = [float('inf')] * math.ceil((n - 1) // 2)\n    even = [float('inf')] * math.ceil((n - 1) // 2)\n    j = 0\n    for i in range(1, n - 1, 2):\n        odd[j] = max(0, 1 + max(arr[i - 1], arr[i + 1]) - arr[i])\n        j += 1\n    if n % 2 == 0:\n        j = 0\n        for i in range(2, n - 1, 2):\n            even[j] = max(0, 1 + max(arr[i - 1], arr[i + 1]) - arr[i])\n            j += 1\n    for i in range(len(odd) - 2, -1, -1):\n        odd[i] += min(odd[i + 1], even[i + 1])\n        even[i] += even[i + 1]\n    print(min(odd[0], even[0]))", "def increase_tower_height(num):\n    new_floors = max(towers_heights[num - 1], towers_heights[num + 1]) - towers_heights[num] + 1\n    if new_floors > 0:\n        return new_floors\n    else:\n        return 0\nfor _ in range(int(input())):\n    n = int(input())\n    towers_heights = [int(i) for i in input().split()]\n    if n % 2 == 0:\n        dict = {}\n        min_sum_even = 0\n        for i in range(1, n - 1, 2):\n            min_sum_even += increase_tower_height(i)\n        i = n - 2\n        sum_even = min_sum_even\n        while i > 0:\n            sum_even += increase_tower_height(i)\n            sum_even -= increase_tower_height(i - 1)\n            i -= 2\n            min_sum_even = min(sum_even, min_sum_even)\n        print(min_sum_even)\n    else:\n        sum = 0\n        i = 1\n        while i < n - 1:\n            sum += increase_tower_height(i)\n            i += 2\n        print(sum)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = []\n    for i in range(1, n - 1):\n        l1.append(max(0, max(l[i - 1], l[i + 1]) + 1 - l[i]))\n    if n % 2 == 1:\n        print(sum(l1[::2]))\n        continue\n    a = sum(l1[1::2])\n    b = a\n    for i in range(0, len(l1), 2):\n        b += l1[i] - l1[i + 1]\n        a = min(a, b)\n    print(a)", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    h = [int(x) for x in input().split()]\n    arr = [0] * n\n    flag0 = 0\n    flag1 = 0\n    for i in range(n - 2, 0, -1):\n        if i % 2 == 0:\n            if flag0 == 0:\n                arr[i] = max(h[i - 1] - h[i] + 1, h[i + 1] - h[i] + 1, 0)\n                flag0 = 1\n            else:\n                arr[i] = arr[i + 2] + max(h[i - 1] - h[i] + 1, h[i + 1] - h[i] + 1, 0)\n        elif flag1 == 0:\n            arr[i] = max(h[i - 1] - h[i] + 1, h[i + 1] - h[i] + 1, 0)\n            flag1 = 1\n        else:\n            arr[i] = arr[i + 2] + max(h[i - 1] - h[i] + 1, h[i + 1] - h[i] + 1, 0)\n    if len(h) % 2 == 0:\n        ans = arr[1]\n        for i in range(1, n - 1, 2):\n            ans = min(ans, arr[1] - arr[i] + arr[i + 1])\n    else:\n        ans = arr[1]\n    print(ans)", "in_il = lambda : list(map(lambda x: int(x), input().split(' ')))\nin_sl = lambda : input().split(' ')\nin_i = lambda : int(input())\n\ndef cost(buildings, i):\n    if buildings[i - 1] < buildings[i] and buildings[i + 1] < buildings[i]:\n        return 0\n    return max(buildings[i - 1], buildings[i + 1]) - buildings[i] + 1\nfor _ in range(in_i()):\n    n = in_i()\n    buildings = in_il()\n    if n % 2 != 0:\n        ops = 0\n        for i in range(1, n - 1)[::2]:\n            if buildings[i - 1] >= buildings[i] or buildings[i + 1] >= buildings[i]:\n                ops += max(buildings[i - 1], buildings[i + 1]) - buildings[i] + 1\n        print(ops)\n    else:\n        prefix = [0] * n\n        sufix = [0] * n\n        i = 2\n        while i + 1 < n:\n            prefix[i] = prefix[i - 2] + cost(buildings, i - 1)\n            i += 2\n        i = n - 3\n        while i - 1 >= 0:\n            sufix[i] = sufix[i + 2] + cost(buildings, i + 1)\n            i -= 2\n        ops = float('inf')\n        for i in range(0, n, 2):\n            ops = min(ops, prefix[i] + sufix[i + 1])\n        print(ops)", "for t in range(int(input())):\n    n = int(input())\n    s = [*map(int, input().split())]\n    l = []\n    for i in range(1, n - 1):\n        l.append(max(0, max(s[i - 1], s[i + 1]) + 1 - s[i]))\n    if n % 2 == 1:\n        print(sum(l[::2]))\n        continue\n    a = sum(l[1::2])\n    b = a\n    for i in range(0, len(l), 2):\n        b += l[i] - l[i + 1]\n        a = min(a, b)\n    print(a)", "from sys import prefix\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    h = [int(x) for x in input().split()]\n    if n % 2:\n        sol = 0\n        for i in range(1, n, 2):\n            (a, b, c) = (h[i - 1], h[i], h[i + 1])\n            if b <= a or b <= c:\n                sol += max(a, c) - b + 1\n    else:\n        sol = -1\n        count = int((n - 1) / 2)\n        costs = {0: 0, n - 1: 0}\n        for i in range(1, n - 1):\n            (a, b, c) = (h[i - 1], h[i], h[i + 1])\n            if b <= a or b <= c:\n                costs[i] = max(a, c) - b + 1\n            else:\n                costs[i] = 0\n        prefix_sums = [0]\n        for i in range(count):\n            prefix_sums.append(prefix_sums[-1] + costs[2 * i + 1])\n        suffix_sums = [sum((costs[n - 2 * i] for i in range(1, count + 1)))]\n        for i in range(count, 0, -1):\n            suffix_sums.append(suffix_sums[-1] - costs[n - 2 * i])\n        for i in range(0, int(n / 2)):\n            curr = prefix_sums[i] + suffix_sums[i]\n            if sol == -1 or sol > curr:\n                sol = curr\n    print(sol)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n % 2 != 0:\n        sol = 0\n        for i in range(1, n - 1):\n            if i % 2 == 0:\n                continue\n            sol += max(0, max(a[i - 1], a[i + 1]) + 1 - a[i])\n        print(sol)\n    else:\n        sol = 0\n        for i in range(1, n - 2):\n            if i % 2 == 0:\n                continue\n            sol += max(0, max(a[i - 1], a[i + 1]) + 1 - a[i])\n        ans = sol\n        for i in range(n - 3, -1, -2):\n            sol += a[i] - max(a[i - 1] + 1, a[i + 1] + 1, a[i]) + (max(a[i + 2] + 1, a[i] + 1, a[i + 1]) - a[i + 1])\n            ans = min(ans, sol)\n        print(ans)", "N = int(input())\nfor _ in range(N):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n % 2:\n        ans = 0\n        for i in range(1, n - 1, 2):\n            ans += max(max(a[i - 1], a[i + 1]) + 1 - a[i], 0)\n        print(ans)\n    else:\n        ans = float('inf')\n        j = 1\n        pr1 = [0] * n\n        pr2 = [0] * n\n        for i in range(1, n - 1, 2):\n            r = max(max(a[i - 1], a[i + 1]) + 1 - a[i], 0)\n            pr1[j] = pr1[j - 1] + r\n            j += 1\n        j = 1\n        for i in range(2, n - 1, 2):\n            r = max(max(a[i - 1], a[i + 1]) + 1 - a[i], 0)\n            pr2[j] = pr2[j - 1] + r\n            j += 1\n        for i in range(n // 2):\n            ans = min(ans, pr1[i] + pr2[n // 2 - 1] - pr2[i])\n        print(ans)", "for i in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    diff_arr = []\n    for i in range(1, n - 1):\n        diff_arr.append(max(0, max(arr[i - 1] - arr[i] + 1, arr[i + 1] - arr[i] + 1)))\n    if n % 2 == 1:\n        res = 0\n        for i in range(0, len(diff_arr), 2):\n            res += diff_arr[i]\n        print(res)\n    else:\n        pos_res = []\n        half = len(diff_arr) // 2\n        green = [diff_arr[i] for i in range(len(diff_arr)) if i % 2 == 0]\n        red = [diff_arr[i] for i in range(len(diff_arr)) if i % 2 == 1]\n        green_sum = 0\n        red_sum = sum(red)\n        for i in range(half + 1):\n            pos_res.append(green_sum + red_sum)\n            if i < half:\n                red_sum -= red[i]\n                green_sum += green[i]\n        print(min(pos_res))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n % 2:\n        ans = 0\n        for j in range(1, n, 2):\n            ans += 0 if arr[j] > arr[j - 1] and arr[j] > arr[j + 1] else 1 + max(arr[j - 1], arr[j + 1]) - arr[j]\n        print(ans)\n    else:\n        pref = [0] * (n // 2)\n        suf = [0] * (n // 2)\n        for j in range(n // 2 - 1):\n            ind = j * 2 + 1\n            pref[j + 1] = pref[j] + (0 if arr[ind] > arr[ind - 1] and arr[ind] > arr[ind + 1] else 1 + max(arr[ind - 1], arr[ind + 1]) - arr[ind])\n        for j in range(n // 2 - 1):\n            ind = n - (j * 2 + 2)\n            suf[j + 1] = suf[j] + (0 if arr[ind] > arr[ind - 1] and arr[ind] > arr[ind + 1] else 1 + max(arr[ind - 1], arr[ind + 1]) - arr[ind])\n        ans = 10 ** 20\n        for j in range(n // 2):\n            ans = min(ans, pref[j] + suf[n // 2 - j - 1])\n        print(ans)", "import sys\nfrom heapq import heappop, heappush\ninput = sys.stdin.readline\nfor t in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    if n & 1:\n        ans = 0\n        for i in range(1, n - 1, 2):\n            m = max(0, a[i - 1] + 1 - a[i], a[i + 1] + 1 - a[i])\n            ans += m\n        print(ans)\n    else:\n        ans = 10 ** 9\n        pops = []\n        (odd, even) = ([], [])\n        for i in range(1, n - 1):\n            m = max(0, a[i - 1] + 1 - a[i], a[i + 1] + 1 - a[i])\n            if i & 1:\n                odd.append(m)\n            else:\n                even.append(m)\n        for i in range(1, len(odd)):\n            odd[i] += odd[i - 1]\n            even[len(odd) - i - 1] += even[len(odd) - i]\n        ans = min(odd[-1], even[0])\n        for i in range(len(odd) - 1):\n            ans = min(ans, odd[i] + even[i + 1])\n        print(ans)", "t = int(input())\nfor asd in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n % 2 == 1:\n        i = 1\n        cost = 0\n        while i < n - 1:\n            if max(arr[i - 1], arr[i + 1]) >= arr[i]:\n                cost += max(arr[i - 1], arr[i + 1]) - arr[i] + 1\n            i += 2\n        print(cost)\n    else:\n        i = 1\n        cost1 = {}\n        cost = 0\n        while i < n - 1:\n            if max(arr[i - 1], arr[i + 1]) >= arr[i]:\n                cost += max(arr[i - 1], arr[i + 1]) - arr[i] + 1\n            cost1[i] = cost\n            i += 2\n        i = n - 2\n        cost2 = {}\n        cost = 0\n        while i > 0:\n            if max(arr[i - 1], arr[i + 1]) >= arr[i]:\n                cost += max(arr[i - 1], arr[i + 1]) - arr[i] + 1\n            cost2[i] = cost\n            i -= 2\n        final = max(cost2.values())\n        for i in cost1:\n            if i + 3 in cost2:\n                final = min(final, cost1[i] + cost2[i + 3])\n            else:\n                final = min(final, cost1[i])\n        print(final)", "import sys\nt = int(sys.stdin.readline())\nfor i in range(t):\n    n = int(sys.stdin.readline())\n    lst = list(map(int, sys.stdin.readline().split()))\n    lst1 = []\n    for j in range(1, n - 1):\n        ele = max(lst[j - 1], lst[j + 1]) + 1\n        if lst[j] >= ele:\n            lst1.append(0)\n        else:\n            lst1.append(ele - lst[j])\n    lst1.append(0)\n    lst1 = [0] + lst1\n    pre = [lst1[0], lst1[1], lst1[2]]\n    for j in range(3, n):\n        pre.append(pre[-2] + lst1[j])\n    dp = [1e+18] * n\n    for i in range(1, n - 1):\n        if i % 2 != 0:\n            dp[i] = pre[i]\n        elif i - 2 == 0:\n            dp[i] = min(lst1[i], pre[i - 1])\n        else:\n            dp[i] = min(lst1[i] + dp[i - 2], pre[i - 1])\n    print(dp[n - 2])", "test = int(input())\nwhile test:\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    if n % 2:\n        ans = 0\n        for i in range(1, n, 2):\n            ans += max(0, max(a[i - 1] - a[i] + 1, a[i + 1] - a[i] + 1))\n    else:\n        ans = float('inf')\n        prefix_odd = [0] * n\n        suffix_even = [0] * n\n        prefix_odd[1] = max(0, max(a[0] - a[1] + 1, a[2] - a[1] + 1))\n        suffix_even[n - 2] = max(0, max(a[n - 3] - a[n - 2] + 1, a[n - 1] - a[n - 2] + 1))\n        for i in range(3, n - 1, 2):\n            prefix_odd[i] = prefix_odd[i - 2] + max(0, max(a[i - 1] - a[i] + 1, a[i + 1] - a[i] + 1))\n            suffix_even[n - i - 1] = suffix_even[n - i + 1] + max(0, max(a[n - i - 2] - a[n - i - 1] + 1, a[n - i] - a[n - i - 1] + 1))\n        for i in range(0, n, 2):\n            if i == 0:\n                ans = min(ans, suffix_even[i + 2])\n            elif i == n - 2:\n                ans = min(ans, prefix_odd[i - 1])\n            else:\n                ans = min(ans, suffix_even[i + 2] + prefix_odd[i - 1])\n    print(ans)\n    test -= 1", "t = int(input())\nwhile t >= 1:\n    n = int(input())\n    a = list(map(int, input().split()))\n    left = []\n    right = []\n    if n % 2 == 0:\n        for i in range(1, len(a) - 1, 2):\n            if a[i] > a[i - 1] and a[i] > a[i + 1]:\n                left.append(0)\n            else:\n                floors = max(a[i - 1], a[i + 1]) - a[i] + 1\n                left.append(floors)\n        for i in range(2, len(a) - 1, 2):\n            if a[i] > a[i - 1] and a[i] > a[i + 1]:\n                right.append(0)\n            else:\n                floors = max(a[i - 1], a[i + 1]) - a[i] + 1\n                right.append(floors)\n        for i in range(1, len(left)):\n            left[i] += left[i - 1]\n            right[i] += right[i - 1]\n        ans = min(left[-1], right[-1])\n        for i in range(len(left) - 1):\n            ans = min(ans, left[i] + (right[-1] - right[i]))\n        print(ans)\n    else:\n        ans = 0\n        for i in range(1, len(a) - 1, 2):\n            if a[i] > a[i - 1] and a[i] > a[i + 1]:\n                ans += 0\n            else:\n                floors = max(a[i - 1], a[i + 1]) - a[i] + 1\n                ans += floors\n        print(ans)\n    t -= 1", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c1 = 0\n    c2 = 0\n    c = [[0] * n for i in range(2)]\n    for i in range(n):\n        if i % 2 == 1 and i != n - 1 and (i != 0):\n            c1 += max(0, max(a[i - 1] - a[i], a[i + 1] - a[i]) + 1)\n        c[0][i] = c1\n    if n % 2:\n        print(c1)\n        continue\n    for i in range(n - 1, -1, -1):\n        if i % 2 == 0 and i != 0 and (i != n - 1):\n            c2 += max(0, max(a[i - 1] - a[i], a[i + 1] - a[i]) + 1)\n        c[1][i] = c2\n    ans = min(c1, c2)\n    for i in range(2, n - 3, 2):\n        ans = min(ans, c[0][i - 1] + c[1][i + 2])\n    print(ans)", "import sys\nfrom collections import defaultdict, Counter, OrderedDict, deque\nfrom heapq import heapify, heappop, heappush\n\ndef func():\n    n = int(input())\n    arr = [0]\n    arr += list(map(int, input().split()))\n    ans = sys.maxsize\n    num = 0\n    f_tmp = [0] * (n + 6)\n    g_tmp = [0] * (n + 6)\n    for i in range(2, n):\n        tmp = max(arr[i - 1], arr[i + 1])\n        f_tmp[i] = f_tmp[i - 2]\n        if tmp >= arr[i]:\n            f_tmp[i] += tmp - arr[i] + 1\n    for i in range(n - 1, 1, -1):\n        tmp = max(arr[i - 1], arr[i + 1])\n        g_tmp[i] = g_tmp[i + 2]\n        if tmp >= arr[i]:\n            g_tmp[i] += tmp - arr[i] + 1\n    if n & 1:\n        ans = f_tmp[n - 1]\n    else:\n        ans = min(f_tmp[n - 2], f_tmp[n - 1])\n        for i in range(0, n, 2):\n            if i + 3 < n:\n                ans = min(ans, f_tmp[i] + g_tmp[i + 3])\n    print(ans)\ntc = int(input())\nwhile tc > 0:\n    func()\n    tc -= 1", "for q in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    lis = [0]\n    odd = []\n    even = []\n    cnta = 0\n    cntb = 0\n    for i in range(1, n - 1):\n        if i % 2:\n            if arr[i] > max(arr[i - 1], arr[i + 1]):\n                odd.append(0)\n                cnta += 1\n            else:\n                odd.append(max(arr[i + 1], arr[i - 1]) - arr[i] + 1)\n        elif arr[i] > max(arr[i - 1], arr[i + 1]):\n            even.append(0)\n            cntb += 1\n        else:\n            even.append(max(arr[i + 1], arr[i - 1]) - arr[i] + 1)\n    if n % 2:\n        print(sum(odd))\n        continue\n    op = [odd[0]]\n    ep = [even[0]]\n    for i in range(1, n // 2 - 1):\n        op.append(op[-1] + odd[i])\n        ep.append(ep[-1] + even[i])\n    ans = min(sum(odd), sum(even))\n    for i in range(n // 2 - 1):\n        ans = min(ans, op[i] + ep[-1] - ep[i])\n    print(ans)", "from collections import defaultdict\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ld = []\n    odd = 0\n    even = 0\n    lans = []\n    for j in range(1, n - 1):\n        lv = l[j + 1] - l[j]\n        rv = l[j - 1] - l[j]\n        if lv < 0:\n            lv = -1\n        if rv < 0:\n            rv = -1\n        ld.append(max(lv + 1, rv + 1))\n        if j % 2 == 1:\n            odd += ld[j - 1]\n        else:\n            even += ld[j - 1]\n    lans.append(even)\n    lans.append(odd)\n    su = even\n    for j in range((n - 2) // 2):\n        su = su - ld[2 * j + 1] + ld[2 * j]\n        lans.append(su)\n    if n % 2 == 0:\n        print(min(lans))\n    else:\n        print(odd)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    h = list(map(int, input().split()))\n    ans = 0\n    if n % 2 == 1:\n        for i in range(1, n, 2):\n            ans += max(0, max(h[i - 1], h[i + 1]) + 1 - h[i])\n    else:\n        a = [0] * n\n        b = [0] * n\n        for i in range(1, n - 1):\n            d = max(0, max(h[i - 1], h[i + 1]) + 1 - h[i])\n            if i % 2 == 1:\n                a[i] = d\n            else:\n                b[i] = d\n        ans = 10 ** 20\n        for i in range(n - 1):\n            a[i + 1] += a[i]\n        for i in range(n - 1, 0, -1):\n            b[i - 1] += b[i]\n        for i in range(0, n, 2):\n            ans = min(ans, a[i] + b[i + 1])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    L = list(map(int, input().split()))\n    ans1 = 0\n    for i in range(1, n - 1, 2):\n        ans1 += max(0, max(L[i - 1], L[i + 1]) + 1 - L[i])\n    if n % 2 == 1:\n        print(ans1)\n        continue\n    M = []\n    for i in range(1, n - 1, 2):\n        M.append(max(0, max(L[i - 1], L[i + 1]) + 1 - L[i]))\n    N = []\n    for i in range(2, n - 1, 2):\n        N.append(max(0, max(L[i - 1], L[i + 1]) + 1 - L[i]))\n    P1 = [M[0]]\n    for i in range(1, len(M)):\n        P1.append(P1[-1] + M[i])\n    P2 = [N[-1]]\n    for i in range(len(N) - 2, -1, -1):\n        P2.append(P2[-1] + N[i])\n    ans = min(P1[-1], P2[-1])\n    j = len(P1)\n    for i in range(0, len(P1) - 1):\n        ans = min(ans, P1[j - i - 2] + P2[i])\n    print(ans)", "def cnt(x):\n    return max(max(li[x - 1], li[x + 1]) + 1 - li[x], 0)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    li = list(map(int, input().split()))\n    ans = 0\n    for i in range(1, len(li) - 1, 2):\n        ans += cnt(i)\n    if n % 2 == 1:\n        print(ans)\n        continue\n    cur = 0\n    for i in range(2, len(li) - 1, 2):\n        cur += cnt(i)\n    ans = min(ans, cur)\n    for i in range(2, len(li) - 1, 2):\n        cur += cnt(i - 1)\n        cur -= cnt(i)\n        ans = min(ans, cur)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    h = [*map(int, input().split())]\n    if n & 1:\n        ans = 0\n        for i in range(1, n - 1, 2):\n            ans += max(0, max(h[i - 1], h[i + 1]) + 1 - h[i])\n        print(ans)\n    else:\n        ans = [10 ** 9 * 2] * n\n        ans[0] = ans[-1] = 0\n        for j in range(2):\n            for i in range(1 + j, n - 1, 2):\n                ans[i] = max(0, max(h[i - 1], h[i + 1]) + 1 - h[i])\n        ANS = min(sum(ans[1:-1:2]), sum(ans[2:-1:2]))\n        (p, s) = ([0] * n, [0] * n)\n        for j in range(2):\n            for i in range(1 + j, n - 1, 2):\n                p[i] = ans[i] + (p[i - 2] if i >= 2 else 0)\n        for j in range(2):\n            for i in range(n - 2 - j, 0, -2):\n                s[i] = ans[i] + (s[i + 2] if i + 2 < n else 0)\n        for i in range(1, n - 4, 2):\n            ANS = min(ANS, p[i] + s[i + 3])\n        print(ANS)", "import sys\nt = int(input())\nresult = []\nfor _ in range(t):\n    n = int(input())\n    array = list(map(int, input().split()))\n\n    def solve():\n        suffixSum = [float('inf') for i in range(n)]\n        suffixSum[n - 2] = max(max(array[n - 1], array[n - 3]) + 1 - array[n - 2], 0)\n        if len(suffixSum) > 3:\n            suffixSum[n - 3] = max(max(array[n - 4], array[n - 2]) + 1 - array[n - 3], 0)\n        for i in reversed(range(1, n - 2)):\n            currentMax = max(array[i - 1], array[i + 1]) + 1\n            suffixSum[i] = max(currentMax - array[i], 0) + suffixSum[i + 2]\n        (currentSum, currentMin) = (0, float('inf'))\n        for i in range(1, n - 1, 2):\n            if i + 2 < len(array):\n                currentMin = min(currentMin, currentSum + suffixSum[i + 1])\n            currentMax = max(array[i - 1], array[i + 1]) + 1\n            currentSum += max(currentMax - array[i], 0)\n        return min(currentMin, currentSum)\n    ans = solve()\n    print(ans)", "def cnt(x):\n    return max(max(li[x - 1], li[x + 1]) + 1 - li[x], 0)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    li = list(map(int, input().split()))\n    ans = 0\n    for i in range(1, len(li) - 1, 2):\n        ans += cnt(i)\n    if n % 2 == 1:\n        print(ans)\n        continue\n    cur = 0\n    for i in range(2, len(li) - 1, 2):\n        cur += cnt(i)\n    ans = min(ans, cur)\n    for i in range(2, len(li) - 1, 2):\n        cur += cnt(i - 1)\n        cur -= cnt(i)\n        ans = min(ans, cur)\n    print(ans)", "def main():\n    for t in range(int(input())):\n        n = int(input())\n        h = list(map(int, input().split()))\n        if n % 2 == 1:\n            ans = 0\n            for i in range(1, n, 2):\n                if h[i] > h[i - 1] and h[i] > h[i + 1]:\n                    continue\n                ans += max(h[i - 1], h[i + 1]) + 1 - h[i]\n            print(ans)\n        else:\n            (ans1, ans2) = (0, 0)\n            (c1, c2) = ([0 for i in range(n + 1)], [0 for i in range(n + 1)])\n            for i in range(1, n - 2, 2):\n                if h[i] > h[i - 1] and h[i] > h[i + 1]:\n                    continue\n                ans1 += max(h[i - 1], h[i + 1]) + 1 - h[i]\n                c1[i] = max(h[i - 1], h[i + 1]) + 1 - h[i]\n            for i in range(2, n - 1, 2):\n                if h[i] > h[i - 1] and h[i] > h[i + 1]:\n                    continue\n                ans2 += max(h[i - 1], h[i + 1]) + 1 - h[i]\n                c2[i] = max(h[i - 1], h[i + 1]) + 1 - h[i]\n            for i in range(1, n):\n                c1[i] += c1[i - 1]\n                c2[i] += c2[i - 1]\n            ans = min(ans1, ans2)\n            for i in range(1, n - 2, 2):\n                ans = min(ans, c2[n - 1] - c2[i] + c1[i - 1])\n            print(ans)\nmain()", "from collections import deque\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    res = 0\n    dp = [float('inf')] * n\n    for i in range(1, n - 1):\n        dp[i] = max(0, 1 + max(arr[i - 1], arr[i + 1]) - arr[i])\n    if n % 2:\n        for i in range(1, n - 1, 2):\n            res += dp[i]\n    else:\n        (last_odd, last_even) = (0, 0)\n        even = deque()\n        odd = deque()\n        i = 1\n        while i < n - 1:\n            last_odd += dp[i]\n            last_even += dp[i + 1]\n            odd.append(last_odd)\n            even.append(last_even)\n            i += 2\n        res = min(odd[-1], even[-1])\n        m = (n - 1) // 2\n        pos = 0\n        for j in range(m):\n            res = min(res, odd[pos] + even[-1] - even[pos])\n            pos += 1\n    print(res)", "import sys\ninp = sys.stdin.readline\nfor _ in range(int(inp())):\n    n = int(inp())\n    h = list(map(int, inp().split()))\n    res = 0\n    if n % 2 == 1:\n        for i in range(1, n - 1, 2):\n            a = h[i - 1] - h[i] + 1\n            b = h[i + 1] - h[i] + 1\n            res += max(0, max(a, b))\n    else:\n        pref = [0] * n\n        suff = [0] * n\n        for i in range(1, n - 1):\n            a = h[i - 1] - h[i] + 1\n            b = h[i + 1] - h[i] + 1\n            if i % 2 == 1:\n                pref[i] = max(0, max(a, b))\n            else:\n                suff[i] = max(0, max(a, b))\n        for i in range(n - 1):\n            pref[i + 1] += pref[i]\n            suff[n - 2 - i] += suff[n - i - 1]\n        res = pref[0] + suff[1]\n        for i in range(0, n, 2):\n            res = min(res, pref[i] + suff[i + 1])\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    x = (n - 1) // 2\n    w = []\n    for i in range(1, n - 1):\n        w += [max(0, max(a[i - 1], a[i + 1]) + 1 - a[i])]\n    if n % 2:\n        ans = 0\n        for i in range(0, n - 2, 2):\n            ans += w[i]\n        print(ans)\n    else:\n        m = n - 2\n        a1 = 0\n        a2 = 0\n        for i in range(0, m, 2):\n            a1 += w[i]\n        for i in range(1, m, 2):\n            a2 += w[i]\n        if n > 5:\n            r = list(w)\n            for i in range(m - 3, -1, -1):\n                w[i] += w[i + 2]\n            x = 0\n            for i in range(0, m, 2):\n                x += r[i]\n                a1 = min(a1, x - r[i] + w[i + 1])\n            r = r[::-1]\n            k = list(r)\n            x = 0\n            for i in range(m - 3, -1, -1):\n                r[i] += r[i + 2]\n            for i in range(0, m, 2):\n                x += k[i]\n                a2 = min(a2, x - k[i] + r[i + 1])\n        print(min(a1, a2))", "for tt in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    arr = []\n    for i in range(1, n - 1):\n        arr += [max(0, max(a[i - 1], a[i + 1]) + 1 - a[i])]\n    if n % 2:\n        ans = 0\n        for i in range(0, n - 2, 2):\n            ans += arr[i]\n        print(ans)\n    else:\n        lem = n - 2\n        ans1 = sum((arr[i] for i in range(0, lem, 2)))\n        ans2 = sum((arr[i] for i in range(1, lem, 2)))\n        if n > 5:\n            r = list(arr)\n            for i in range(lem - 3, -1, -1):\n                arr[i] += arr[i + 2]\n            x = 0\n            for i in range(0, lem, 2):\n                x += r[i]\n                ans1 = min(ans1, x - r[i] + arr[i + 1])\n            r = r[::-1]\n            k = list(r)\n            for i in range(lem - 3, -1, -1):\n                r[i] += r[i + 2]\n            x = 0\n            for i in range(0, lem, 2):\n                x += k[i]\n                ans2 = min(ans2, x - k[i] + r[i + 1])\n        print(min(ans1, ans2))", "import sys\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\n\ndef f(i, toggle):\n    if i >= n - 1:\n        return 0\n    if dp[i][toggle] != -1:\n        return dp[i][toggle]\n    k = max(max(a[i - 1], a[i + 1]) - a[i] + 1, 0)\n    if toggle:\n        dp[i][toggle] = k + f(i + 2, toggle)\n        return dp[i][toggle]\n    dp[i][toggle] = k + min(f(i + 2, toggle), f(i + 3, 1))\n    return dp[i][toggle]\n\ndef get(i):\n    ans = 0\n    for i in range(i, n, 2):\n        if i == n - 1:\n            continue\n        ans += max(max(a[i + 1], a[i - 1]) - a[i] + 1, 0)\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [[-1, -1] for _ in range(n)]\n    d = [[0, 0] for _ in range(n + 2)]\n    if n % 2 == 0:\n        for i in range(n - 2, -0, -1):\n            k = max(max(a[i - 1], a[i + 1]) - a[i] + 1, 0)\n            d[i][1] = k + d[i + 2][1]\n            d[i][0] = k + min(d[i + 2][0], d[i + 3][1])\n    if n % 2:\n        print(get(1))\n    else:\n        print(min(d[1][0], d[1][1], get(2)))", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    in_data = list(map(int, input().split()))\n    dp = [[10 ** 18 for i in range(n + 1)], [10 ** 18 for i in range(n + 1)]]\n    dp[0][1] = 0\n    for i in range(1, n - 1):\n        for j in range(2):\n            if j == 0:\n                dp[1][i + 1] = min(dp[1][i + 1], dp[0][i])\n                gr = max(0, max(in_data[i - 1] - in_data[i] + 1, in_data[i + 1] - in_data[i] + 1))\n                dp[0][i + 2] = min(dp[0][i + 2], dp[0][i] + gr)\n            else:\n                gr = max(0, max(in_data[i - 1] - in_data[i] + 1, in_data[i + 1] - in_data[i] + 1))\n                dp[1][i + 2] = min(dp[1][i + 2], dp[1][i] + gr)\n    if len(in_data) % 2 == 1:\n        print(dp[0][n])\n    else:\n        print(min(dp[0][n - 1], dp[1][n]))"]