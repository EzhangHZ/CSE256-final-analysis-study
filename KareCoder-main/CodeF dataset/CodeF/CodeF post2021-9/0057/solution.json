["import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(int(math.pow(2, n) - 1))", "tests = int(input())\nfor t in range(tests):\n    n = int(input())\n    players = 2 ** n\n    if n == 1:\n        print(1)\n    else:\n        print(2 ** n - 1)", "testcs = int(input())\nfor _ in range(testcs):\n    jk = int(input())\n    if jk != 1:\n        solu = 2 ** jk - 1\n    else:\n        solu = jk\n    print(solu)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    print(2 ** n - 1)\n    t -= 1", "for inh in range(int(input())):\n    n = int(input())\n    print(2 ** n - 1)", "n = int(input())\nresult = []\nfor i in range(n):\n    x = int(input())\n    result.append(2 ** x - 1)\nprint(*result, sep='\\n')", "import sys\nlinesPerTest = 1\ntestArguments = []\ni = 0\ntotalLines = 1\nwhile i <= totalLines:\n    line = sys.stdin.readline().rstrip('\\n')\n    if i == 0:\n        totalLines = linesPerTest * int(line)\n    else:\n        testArguments.append(line)\n    i += 1\ntestCases = []\nfor j in range(0, len(testArguments), linesPerTest):\n    testCases.append(testArguments[j:j + linesPerTest])\n\ndef f(testArguments):\n    n = int(testArguments[0])\n    if n == 1:\n        return 1\n    else:\n        return 2 ** n - 1\nfor testCase in testCases:\n    print(f(testCase))", "t = int(input())\nfor x in range(t):\n    a = int(input())\n    print(2 ** a - 1)", "import math\nfrom bisect import bisect_left\n\ndef binarySearch(a, x):\n    i = bisect_left(a, x)\n    if i != len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n\ndef maxSum(a):\n    (max_val, curr_max, start, end, max_start, max_end) = (a[0], a[0], 0, 0, 0, 0)\n    for i in range(1, len(a)):\n        if curr_max + a[i] > a[i]:\n            curr_max += a[i]\n            end = i\n        else:\n            curr_max = a[i]\n            start = i\n            end = i\n        if max_val < curr_max:\n            max_val = curr_max\n            max_start = start\n            max_end = end\n    return [max_val, max_start, max_end]\n\ndef modFact(n, p):\n    if n >= p:\n        return 0\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i % p\n    return result\n\ndef input_int():\n    return int(input())\n\ndef input_multiple():\n    return map(int, input().split())\nt = input_int()\nwhile t > 0:\n    n = input_int()\n    print(2 ** n - 1)\n    t -= 1", "def main():\n    n = int(input())\n    return pow(2, n) - 1\nfor _ in range(int(input())):\n    print(main())", "for _ in range(int(input())):\n    n = int(input())\n    print(2 ** n - 1)", "for h in range(int(input())):\n    n = int(input())\n    k = 2 ** n - 1\n    print(k)", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    print(pow(2, n) - 1)", "for _ in [0] * int(input()):\n    print(2 ** int(input()) - 1)", "a = int(input())\nfor i in range(a):\n    b = int(input())\n    print(2 ** b - 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(2 ** n - 1)", "x = int(input())\nfor i in range(x):\n    a = int(input())\n    print(2 ** a - 1)", "n = int(input())\nfor i in range(n):\n    a = int(input())\n    print(2 ** a - 1)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    print(2 ** n - 1)\n    t -= 1", "n = int(input())\nfor i in range(n):\n    a = int(input())\n    print(2 ** a - 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(2 ** n - 1)", "for _ in range(int(input())):\n    n = int(input())\n    num = 2 ** n\n    print(num - 1)", "for _ in range(int(input())):\n    print(2 ** int(input()) - 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(2 ** n - 1)", "n = int(input())\nfor i in range(n):\n    x = int(input())\n    print(2 ** x - 1)", "for i in range(int(input())):\n    n = int(input())\n    print(2 ** n - 1)", "for t in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n    else:\n        print(2 ** n - 1)", "for i in range(int(input())):\n    n = int(input())\n    print(2 ** n - 1)", "for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(n)\n    else:\n        a = 2 ** n - 1\n        print(a)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(2 ** n - 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(2 ** n - 1)", "t = int(input())\np = []\nfor i in range(t):\n    a = int(input())\n    p.append(2 ** a - 1)\nprint(*p, sep='\\n')", "T = int(input())\nfor z in range(0, T):\n    N = int(input())\n    print(2 ** N - 1)", "x = int(input())\nfor i in range(x):\n    n = int(input())\n    res = 2 ** n - 1\n    print(res)", "for i in range(int(input())):\n    n = int(input())\n    print(2 ** n - 1)", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    print(2 ** n - 1)", "for _ in range(int(input())):\n    nyy = int(input())\n    print(2 ** nyy - 1)", "for _ in range(int(input())):\n    n = int(input())\n    val = 2 ** n\n    print(val - 1)", "for _ in range(int(input())):\n    n = 2 ** int(input())\n    print(n - 1)", "def winner(n):\n    ans = pow(2, n)\n    print(ans - 1)\nfor _ in range(int(input())):\n    n = int(input())\n    winner(n)", "def solve():\n    n = int(input())\n    if n == 1:\n        return 1\n    p = 2 ** n\n    return p - 1\nt = int(input())\nwhile t != 0:\n    print(solve())\n    t -= 1", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n > 1:\n        x = math.floor(math.pow(2, n) - 1)\n        print(x)\n    else:\n        print(n)", "T = int(input())\nfor i in range(T):\n    n = int(input())\n    p = 2 ** n\n    print(p - 1)", "testcase = int(input())\ngame = []\nfor i in range(testcase):\n    temp = int(input())\n    game.append(temp)\nfor i in game:\n    win = 2 ** i - 1\n    print(win)", "for _ in range(int(input())):\n    l = int(input())\n    print(2 ** l - 1)", "for i in range(int(input())):\n    print(2 ** int(input()) - 1)", "t = int(input())\nfor i in range(t):\n    t = int(input())\n    print(2 ** t - 1)", "def result(n):\n    ans = 2 ** n\n    return ans - 1\n\ndef solve():\n    for _ in range(int(input())):\n        n = int(input())\n        print(result(n))\nsolve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = 2 ** n\n    print(a - 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(2 ** n - 1)", "d = {1: 1, 2: 3, 3: 7, 4: 15, 5: 31, 6: 63, 7: 127, 8: 255, 9: 511, 10: 1023, 11: 2047, 12: 4095, 13: 8191, 14: 16383, 15: 32767, 16: 65535, 17: 131071, 18: 262143, 19: 524287, 20: 1048575, 21: 2097151, 22: 4194303, 23: 8388607, 24: 16777215, 25: 33554431, 26: 67108863, 27: 134217727, 28: 268435455, 29: 536870911, 30: 1073741823}\nfor _ in range(int(input())):\n    print(d[int(input())])", "def solve():\n    n = int(input())\n    print(2 ** n - 1)\nt = int(input())\nwhile t:\n    solve()\n    t = t - 1", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(2 ** n - 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(2 ** n - 1)", "num = int(input())\nfor i in range(num):\n    n = int(input())\n    print(2 ** n - 1)", "n = int(input())\nfor i in range(n):\n    print(2 ** int(input()) - 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(2 ** n - 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(2 ** n - 1)", "for n in [*open(0)][1:]:\n    print(2 ** int(n) - 1)", "for _ in range(int(input())):\n    a = int(input())\n    print(2 ** a - 1)", "for _ in range(int(input())):\n    print(2 ** int(input()) - 1)", "n = int(input())\na = []\nfor i in range(n):\n    t = int(input())\n    a.append(2 ** t - 1)\nfor i in a:\n    print(i)", "for _ in range(int(input())):\n    n = int(input())\n    ans = 2\n    while n > 1:\n        n -= 1\n        ans *= 2\n    print(ans - 1)", "import sys\nlinesPerTest = 1\ntestArguments = []\ni = 0\ntotalLines = 1\nwhile i <= totalLines:\n    line = sys.stdin.readline().rstrip('\\n')\n    if i == 0:\n        totalLines = linesPerTest * int(line)\n    else:\n        testArguments.append(line)\n    i += 1\ntestCases = []\nfor j in range(0, len(testArguments), linesPerTest):\n    testCases.append(testArguments[j:j + linesPerTest])\n\ndef f(testArguments):\n    n = int(testArguments[0])\n    return 2 ** n - 1\nfor testCase in testCases:\n    print(f(testCase))", "for n in [*open(0)][1:]:\n    print(2 ** int(n) - 1)", "test_cases = int(input())\nfor i in range(test_cases):\n    n = int(input())\n    print(2 ** n - 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(2 ** n - 1)", "n = int(input())\nfor _ in range(n):\n    x = int(input())\n    print(2 ** x - 1)", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    print(pow(2, n) - 1)", "for _ in range(int(input())):\n    n = int(input())\n    answer = pow(2, n) - 1\n    print(answer)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(2 ** n - 1)", "for _ in range(int(input())):\n    print(2 ** int(input()) - 1)", "for _ in range(int(input())):\n    print(2 ** int(input()) - 1)", "import sys\nimport math\n\ndef inpu():\n    return sys.stdin.readline()\nlets = 'abcdefghijklmnopqrstuvwxyz'\nkey = {lets[i]: i for i in range(26)}\nT = int(input())\nfor t in range(T):\n    n = int(inpu())\n    done = False\n    a = 1\n    for i in range(n):\n        a *= 2\n    print(a - 1)", "n = int(input())\nfor i in range(n):\n    print(2 ** int(input()) - 1)", "import sys\ninput = sys.stdin.readline\n\ndef yes():\n    print('YES')\n\ndef no():\n    print('NO')\nfor _ in range(int(input())):\n    print(2 ** int(input()) - 1)", "from math import *\nfrom sys import *\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\ninput = stdin.readline\ninp = lambda : int(input())\nli = lambda : list(map(int, input().split()))\nlb = lambda : list(map(int, input()))\nls = lambda : list(input())\nbi = lambda n: bin(n).replace('0b', '')\nyn = lambda f: print('NYOE S'[f::2])\nsrp = lambda s, i, c: s[:i] + c + s[i + 1:]\n\ndef solve(__=1):\n    for _ in range(__):\n        n = inp()\n        print(2 ** n - 1)\nsolve(inp())", "t = int(input())\nfor tc in range(t):\n    n = int(input())\n    print(2 ** n - 1)", "for _ in range(int(input())):\n    n = int(input())\n    print(2 ** n - 1)", "t = int(input())\nwhile t:\n    n = int(input())\n    if n == 1:\n        print(1)\n    else:\n        print(2 ** n - 1)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(2 ** n - 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(2 ** n - 1)", "for _ in range(int(input())):\n    n = int(input())\n    print(2 ** n - 1)", "for _ in range(int(input())):\n    n = int(input())\n    print(pow(2, n) - 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(2 ** n - 1)", "for iters in range(int(input())):\n    n = int(input())\n    print(2 ** n - 1)", "t = int(input())\nfor i in range(t):\n    print(2 ** int(input()) - 1)", "def solve():\n    n = int(input())\n    print(2 ** n - 1)\nt = int(input())\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    print(2 ** int(input()) - 1)", "for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n    else:\n        print(2 ** n - 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(2 ** n - 1)", "for _ in range(int(input())):\n    n = int(input())\n    print(2 ** n - 1)", "for _ in range(int(input())):\n    n = int(input())\n    print(2 ** n - 1)", "import math\n\ndef Solve():\n    n = int(input())\n    if n == 2:\n        print(3)\n    else:\n        print(int(math.pow(2, n) - 1))\nn = int(input())\nwhile n > 0:\n    Solve()\n    n = n - 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(3)\n    else:\n        print(2 ** n - 1)", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    print(2 ** n - 1)", "def solve():\n    n = int(input())\n    if n == 1:\n        print(1)\n        return\n    print(2 ** n - 1)\ntt = int(input())\nfor _ in range(tt):\n    solve()", "for tst in range(int(input())):\n    n = int(input())\n    print(2 ** n - 1)", "t = int(input())\nwhile t != 0:\n    t -= 1\n    n = int(input())\n    ans = 2 ** n - 1\n    print(ans)"]