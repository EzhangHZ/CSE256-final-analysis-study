["from sys import stdin\nimport math\nfrom collections import deque\nfrom heapq import heapify, heappop, heappush\nfrom bisect import bisect_left, bisect_right\ninput = stdin.readline\n\ndef log(n, m):\n    (res, val) = (0, 1)\n    while True:\n        if n == val:\n            return res\n        elif n > val:\n            return res - 1\n        res += 1\n        val *= m\n\ndef ceil(m, n):\n    val = m // n\n    if m % n != 0:\n        return val + 1\n    return val\n\ndef square(a, p, low, high):\n    while low < high:\n        mid = (low + high) // 2\n        val = mid ** p\n        if a > val:\n            low = mid + 1\n        elif a == val:\n            return mid\n        else:\n            high = mid\n    if low ** p > a:\n        return low - 1\n    else:\n        return low\nfor _ in range(int(input())):\n    input()\n    (m, n) = map(int, input().split())\n    (arr, seconds, fvals) = ([], 0, [0] * n)\n    for _ in range(m):\n        row = list(map(int, input().split()))\n        for i in range(n):\n            fvals[i] = max(row[i], fvals[i])\n        row.sort()\n        seconds = max(seconds, row[-2])\n    print(min(seconds, min(fvals)))", "import sys\n\ndef read_line():\n    return sys.stdin.readline().strip()\n\ndef get_max_2_value(arr):\n    max_0 = -1\n    max_1 = -1\n    for i in range(len(arr)):\n        if max_0 == -1 or arr[i] >= arr[max_0]:\n            max_1 = max_0\n            max_0 = i\n        elif max_1 == -1 or arr[i] >= arr[max_1]:\n            max_1 = i\n    return arr[max_1]\nt = int(read_line())\nfor _ in range(t):\n    read_line()\n    nm = read_line().split()\n    m = int(nm[0])\n    n = int(nm[1])\n    p = [list(map(lambda x: int(x), read_line().split())) for _ in range(m)]\n    max_possible = [max([p[i][x] for i in range(m)]) for x in range(n)]\n    best_result = min(max_possible)\n    if m < n:\n        print(best_result)\n    else:\n        best_reduction = max([get_max_2_value(p[i]) for i in range(m)])\n        print(min([best_reduction, best_result]))", "def func():\n    emp = input()\n    (m, n) = map(int, input().split())\n    inp = []\n    for i in range(m):\n        inp.append(list(map(int, input().split())))\n    bdp = [-1 for i in range(n)]\n    for i in range(m):\n        for j in range(n):\n            bdp[j] = max(bdp[j], inp[i][j])\n    ans = min(bdp)\n    if m < n:\n        return ans\n    req = -1\n    for i in range(m):\n        inp[i].sort(reverse=True)\n        req = max(req, min(ans, inp[i][1]))\n    return req\nt = int(input())\nfor i in range(t):\n    print(func())", "q = int(input())\nfor qwerty in range(q):\n    kpz70 = input()\n    (x, y) = map(int, input().split())\n    a = [0 for i in range(y)]\n    b = 0\n    for i in range(x):\n        z = list(map(int, input().split()))\n        for j in range(y):\n            if z[j] > a[j]:\n                a[j] = z[j]\n        if x > y - 1:\n            z.sort()\n            if z[y - 2] > b:\n                b = z[y - 2]\n    if b > 0:\n        a.append(b)\n    print(min(a))", "numeroTestes = int(input())\nresults = []\nfor a in range(numeroTestes):\n    input()\n    (lojas, amigos) = [int(t) for t in input().split()]\n    presentesPorLojas = []\n    for i in range(lojas):\n        pesentes = [int(x) for x in input().split()]\n        presentesPorLojas.append(pesentes)\n    res = 0\n    for i in range(lojas):\n        res = max(res, sorted(presentesPorLojas[i])[-2])\n    result = float('inf')\n    for i in range(amigos):\n        maioDiversao = 0\n        for j in range(lojas):\n            maioDiversao = max(presentesPorLojas[j][i], maioDiversao)\n        result = min(result, maioDiversao)\n    results.append(min(res, result))\nfor r in results:\n    print(r)", "def nypb(m, n, l2):\n    ms = n - 1\n    mv = [0] * n\n    for i in range(m):\n        cm = 0\n        for j in range(n):\n            mv[j] = max(mv[j], l2[i][j])\n    ans = mv[0]\n    for x in range(len(mv)):\n        ans = min(ans, mv[x])\n    if m <= n - 1:\n        return ans\n    cmm = 0\n    mx1 = []\n    mx2 = []\n    for i in range(m):\n        l5 = l2[i].copy()\n        l5.sort()\n        mx1.append(l5[-1])\n        mx2.append(l5[-2])\n    ans = min(ans, max(mx1), max(mx2))\n    return ans\nt = int(input())\nls = []\nl = []\n_ = str(input())\nfor x in range(t):\n    s = str(input())\n    ls.append(s)\n    l1 = []\n    for y in range(int(s.split(' ')[0])):\n        s1 = str(input())\n        l1.append(s1)\n    l.append(l1)\n    if x == t - 1:\n        break\n    _ = str(input())\nla = []\nfor i in range(len(l)):\n    (m, n) = (int(ls[i].split(' ')[0]), int(ls[i].split(' ')[1]))\n    l2 = []\n    for x in l[i]:\n        y = x.split(' ')\n        l3 = []\n        for z in y:\n            l3.append(int(z))\n        l2.append(l3)\n    ans = nypb(m, n, l2)\n    la.append(ans)\nfor x in la:\n    print(x)", "def func():\n    emp = input()\n    (m, n) = map(int, input().split())\n    inp = []\n    for i in range(m):\n        inp.append(list(map(int, input().split())))\n    bdp = [-1 for i in range(n)]\n    for i in range(m):\n        for j in range(n):\n            bdp[j] = max(bdp[j], inp[i][j])\n    ans = min(bdp)\n    if m < n:\n        return ans\n    req = -1\n    for i in range(m):\n        inp[i].sort(reverse=True)\n        req = max(req, min(ans, inp[i][1]))\n    return req\nt = int(input())\nfor i in range(t):\n    print(func())", "q = int(input())\nfor qwerty in range(q):\n    kpz70 = input()\n    (x, y) = map(int, input().split())\n    a = [0 for i in range(y)]\n    b = 0\n    for i in range(x):\n        z = list(map(int, input().split()))\n        for j in range(y):\n            if z[j] > a[j]:\n                a[j] = z[j]\n        if x > y - 1:\n            z.sort()\n            if z[y - 2] > b:\n                b = z[y - 2]\n    if b > 0:\n        a.append(b)\n    print(min(a))", "q = int(input())\nfor qwerty in range(q):\n    kpz70 = input()\n    (x, y) = map(int, input().split())\n    a = [0 for i in range(y)]\n    b = 0\n    for i in range(x):\n        z = list(map(int, input().split()))\n        for j in range(y):\n            if z[j] > a[j]:\n                a[j] = z[j]\n        if x > y - 1:\n            z.sort()\n            if z[y - 2] > b:\n                b = z[y - 2]\n    if b > 0:\n        a.append(b)\n    print(min(a))", "def func():\n    emp = input()\n    (m, n) = map(int, input().split())\n    inp = []\n    for i in range(m):\n        inp.append(list(map(int, input().split())))\n    bdp = [-1 for i in range(n)]\n    for i in range(m):\n        for j in range(n):\n            bdp[j] = max(bdp[j], inp[i][j])\n    ans = min(bdp)\n    if m < n:\n        return ans\n    req = -1\n    for i in range(m):\n        inp[i].sort(reverse=True)\n        req = max(req, min(ans, inp[i][1]))\n    return req\nt = int(input())\nfor i in range(t):\n    print(func())", "def func():\n    emp = input()\n    (m, n) = map(int, input().split())\n    inp = []\n    for i in range(m):\n        inp.append(list(map(int, input().split())))\n    bdp = [-1 for i in range(n)]\n    for i in range(m):\n        for j in range(n):\n            bdp[j] = max(bdp[j], inp[i][j])\n    ans = min(bdp)\n    if m < n:\n        return ans\n    req = -1\n    for i in range(m):\n        inp[i].sort(reverse=True)\n        req = max(req, min(ans, inp[i][1]))\n    return req\nt = int(input())\nfor i in range(t):\n    print(func())", "import sys\n\ndef new_years_problem(m, n, joy_by_shop):\n    best_present_by_friend = [0] * n\n    for i in range(m):\n        for j in range(n):\n            best_present_by_friend[j] = max(best_present_by_friend[j], joy_by_shop[i][j])\n    best_present_with_min_joy = min(best_present_by_friend)\n    optimal_joy = 0\n    if n > m:\n        return best_present_with_min_joy\n    for i in range(m):\n        joys = sorted(zip(joy_by_shop[i], range(n)), key=lambda x: -x[0])\n        optimal_joy = max(optimal_joy, min(best_present_with_min_joy, joys[1][0]))\n    return optimal_joy\nfor _ in range(int(input())):\n    input()\n    (m, n) = map(int, input().split())\n    joy_by_shop = [None] * m\n    for i in range(m):\n        joy_by_shop[i] = list(map(int, input().split()))\n    sys.stdout.write(f'{new_years_problem(m, n, joy_by_shop)}\\n')", "for _ in range(int(input())):\n    input()\n    (m, n) = map(int, input().split())\n    happiness = [[int(x) for x in input().split()] for _ in range(m)]\n    max_happiness_by_friend = [max((hap[i] for hap in happiness)) for i in range(n)]\n    max_happiness_by_shop = [0] * m\n    for (i, hap) in enumerate(happiness):\n        hap.sort()\n        max_happiness_by_shop[i] = hap[-2]\n    mmhbs = max(max_happiness_by_shop)\n    mmhbf = min(max_happiness_by_friend)\n    print(min(mmhbs, mmhbf))", "t = int(input())\nfor _ in range(t):\n    input()\n    (m, n) = [int(x) for x in input().split()]\n    max_joy = [0] * n\n    alfa = 0\n    for i in range(m):\n        shop = [int(joy) for joy in input().split()]\n        for j in range(n):\n            max_joy[j] = max(max_joy[j], shop[j])\n        shop.sort()\n        alfa = max(alfa, shop[n - 2])\n    alfa = min(alfa, min(max_joy))\n    print(alfa)", "def solve(m, n, lst):\n    temp = []\n    res = 0\n    for i in range(m):\n        res = max(res, sorted(lst[i])[-2])\n    result = 10 ** 9\n    for i in range(n):\n        x = 0\n        for j in range(m):\n            x = max(lst[j][i], x)\n        result = min(result, x)\n    print(min(result, res))\nt = int(input())\nfor i in range(t):\n    x = input()\n    (m, n) = map(int, input().split())\n    lst = []\n    for i in range(m):\n        temp = list(map(int, input().split()))\n        lst.append(temp)\n    solve(m, n, lst)", "for _ in range(int(input())):\n    input()\n    (n, m) = map(int, input().split())\n    rd = []\n    for i in range(m):\n        rd.append(0)\n    top2 = []\n    for i in range(n):\n        fr = list(map(int, input().split()))\n        tt = [0, 0]\n        for f in range(m):\n            if fr[f] > rd[f]:\n                rd[f] = fr[f]\n            if fr[f] > tt[1]:\n                if fr[f] >= tt[0]:\n                    tt[1] = tt[0]\n                    tt[0] = fr[f]\n                else:\n                    tt[1] = fr[f]\n        top2.append(tt[1])\n    a = min((rd[i] for i in range(m)))\n    b = max(top2)\n    print(min(a, b))", "tests = int(input())\nfor _ in range(tests):\n    input()\n    (m, n) = [int(x) for x in input().split()]\n    list = []\n    for i in range(m):\n        x = [int(x) for x in input().split()]\n        list.append(x)\n    temp = []\n    res = 0\n    for i in range(m):\n        res = max(res, sorted(list[i])[-2])\n    result = float('inf')\n    for i in range(n):\n        x = 0\n        for j in range(m):\n            x = max(list[j][i], x)\n        result = min(result, x)\n    print(min(result, res))", "from itertools import permutations as per\nfrom math import factorial as fact\nfrom difflib import SequenceMatcher\nimport bisect\nt = int(input())\nfor _ in range(t):\n    input()\n    (m, n) = map(int, input().split())\n    a = []\n    for i in range(m):\n        a.append([int(i) for i in input().split()])\n    (sm, idx) = (-1, -1)\n    for v in a:\n        if v[0] > v[1]:\n            (smx, mx) = (1, 0)\n        else:\n            (smx, mx) = (0, 1)\n        for i in range(2, n):\n            if v[i] > v[mx]:\n                (smx, mx) = (mx, i)\n            elif v[i] > v[smx]:\n                smx = i\n        if v[smx] > sm:\n            (sm, idx) = (v[smx], smx)\n    ans = sm\n    for i in range(n):\n        if i != idx:\n            t = 0\n            for j in range(m):\n                t = max(t, a[j][i])\n            ans = min(ans, t)\n    print(ans)", "import collections\n\ndef max_two(array):\n    (i, j) = (0, 1)\n    if array[0] < array[1]:\n        (i, j) = (1, 0)\n    for k in range(2, len(array)):\n        if array[k] >= array[i]:\n            (i, j) = (k, i)\n        elif array[k] >= array[j]:\n            (i, j) = (i, k)\n    return (i, j)\n\ndef solve():\n    input()\n    (m, n) = list(map(int, input().split()))\n    p = []\n    for _ in range(m):\n        p += [list(map(int, input().split()))]\n    max_joy = collections.defaultdict(int)\n    for shop in range(m):\n        for friend in range(n):\n            max_joy[friend] = max(max_joy[friend], p[shop][friend])\n    ans = 0\n    for shop in range(m):\n        (i, j) = max_two(p[shop])\n        min_joy = p[shop][j]\n        for friend in range(n):\n            if friend == i or friend == j:\n                continue\n            min_joy = min(min_joy, max_joy[friend])\n        ans = max(ans, min_joy)\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor i in range(t):\n    input()\n    (x, y) = ([], [])\n    (n, m) = map(int, input().split())\n    for j in range(n):\n        x.append(list(map(int, input().split())))\n    for j in range(n):\n        for g in range(m):\n            y.append([x[j][g], j, g])\n    y.sort()\n    y.reverse()\n    found = [0 for i in range(m)]\n    deg = [0 for j in range(n)]\n    deg2 = False\n    rem = m\n    for [v, i, j] in y:\n        deg[i] += 1\n        if deg[i] >= 2:\n            deg2 = True\n        if found[j] == 0:\n            rem -= 1\n            found[j] = 1\n        if deg2 and rem == 0:\n            print(v)\n            break", "t = int(input())\nfor i in range(t):\n    input()\n    (x, y) = ([], [])\n    (n, m) = map(int, input().split())\n    for j in range(n):\n        x.append(list(map(int, input().split())))\n    for j in range(n):\n        for g in range(m):\n            y.append([x[j][g], j, g])\n    y.sort()\n    y.reverse()\n    found = [0 for i in range(m)]\n    deg = [0 for j in range(n)]\n    deg2 = False\n    rem = m\n    for [v, i, j] in y:\n        deg[i] += 1\n        if deg[i] >= 2:\n            deg2 = True\n        if found[j] == 0:\n            rem -= 1\n            found[j] = 1\n        if deg2 and rem == 0:\n            print(v)\n            break", "t = int(input())\nfor i in range(t):\n    input()\n    (x, y) = ([], [])\n    (n, m) = map(int, input().split())\n    for j in range(n):\n        x.append(list(map(int, input().split())))\n    for j in range(n):\n        for g in range(m):\n            y.append([x[j][g], j, g])\n    y.sort()\n    y.reverse()\n    found = [0 for i in range(m)]\n    deg = [0 for j in range(n)]\n    deg2 = False\n    rem = m\n    for [v, i, j] in y:\n        deg[i] += 1\n        if deg[i] >= 2:\n            deg2 = True\n        if found[j] == 0:\n            rem -= 1\n            found[j] = 1\n        if deg2 and rem == 0:\n            print(v)\n            break", "for _ in range(int(input())):\n    input()\n    (m, n) = map(int, input().split())\n    p = []\n    for i in range(m):\n        a = list(map(int, input().split()))\n        for j in range(n):\n            p.append([a[j], i, j])\n    p.sort()\n    got = False\n    sf = set()\n    ss = set()\n    for i in range(m * n - 1, -1, -1):\n        sf.add(p[i][2])\n        if p[i][1] in ss:\n            got = True\n        ss.add(p[i][1])\n        if len(sf) == n and got:\n            ans = p[i][0]\n            break\n    print(ans)", "t = int(input())\nfor i in range(t):\n    input()\n    (x, y) = ([], [])\n    (n, m) = map(int, input().split())\n    for j in range(n):\n        x.append(list(map(int, input().split())))\n    for j in range(n):\n        for g in range(m):\n            y.append([x[j][g], j, g])\n    y.sort()\n    y.reverse()\n    found = [0 for i in range(m)]\n    deg = [0 for j in range(n)]\n    deg2 = False\n    rem = m\n    for [v, i, j] in y:\n        deg[i] += 1\n        if deg[i] >= 2:\n            deg2 = True\n        if found[j] == 0:\n            rem -= 1\n            found[j] = 1\n        if deg2 and rem == 0:\n            print(v)\n            break", "t = int(input())\nfor i in range(t):\n    input()\n    (x, y) = ([], [])\n    (n, m) = map(int, input().split())\n    for j in range(n):\n        x.append(list(map(int, input().split())))\n    for j in range(n):\n        for g in range(m):\n            y.append([x[j][g], j, g])\n    y.sort()\n    y.reverse()\n    found = [0 for i in range(m)]\n    deg = [0 for j in range(n)]\n    deg2 = False\n    rem = m\n    for [v, i, j] in y:\n        deg[i] += 1\n        if deg[i] >= 2:\n            deg2 = True\n        if found[j] == 0:\n            rem -= 1\n            found[j] = 1\n        if deg2 and rem == 0:\n            print(v)\n            break", "t = int(input())\nfor i in range(t):\n    input()\n    (x, y) = ([], [])\n    (n, m) = map(int, input().split())\n    for j in range(n):\n        x.append(list(map(int, input().split())))\n    for j in range(n):\n        for g in range(m):\n            y.append([x[j][g], j, g])\n    y.sort()\n    y.reverse()\n    found = [0 for i in range(m)]\n    deg = [0 for j in range(n)]\n    deg2 = False\n    rem = m\n    for [v, i, j] in y:\n        deg[i] += 1\n        if deg[i] >= 2:\n            deg2 = True\n        if found[j] == 0:\n            rem -= 1\n            found[j] = 1\n        if deg2 and rem == 0:\n            print(v)\n            break", "def check(b, c, m, n, k):\n    if m <= n - 1:\n        return min(*b) >= k\n    return min(*b) >= k and max(*c) >= k\n\ndef solve():\n    input()\n    a = list(map(int, input().split(' ')))\n    m = a[0]\n    n = a[1]\n    a = [list(map(int, input().split(' '))) for i in range(m)]\n    b = [0 for i in range(n)]\n    c = [0 for i in range(m)]\n    r = 0\n    for i in range(m):\n        for j in range(n):\n            r = max(r, a[i][j])\n            b[j] = max(b[j], a[i][j])\n        a[i].sort()\n        c[i] = a[i][n - 2]\n    l = 1\n    ans = r\n    while l <= r:\n        mid = l + r >> 1\n        if check(b, c, m, n, mid):\n            ans = mid\n            l = mid + 1\n        else:\n            r = mid - 1\n    print(ans)\nfor t in range(int(input())):\n    solve()", "def find(arr, m, n):\n    maxArr = [0] * n\n    for j in range(n):\n        for i in range(m):\n            if arr[i][j] > maxArr[j]:\n                maxArr[j] = arr[i][j]\n    r = min(maxArr)\n    l = 0\n    ans = 0\n    while r >= l:\n        mid = (r + l) // 2\n        for i in range(m):\n            count = 0\n            for j in range(n):\n                if arr[i][j] >= mid:\n                    count += 1\n            if count > 1:\n                ans = mid\n                l = mid + 1\n                break\n        if count < 2:\n            r = mid - 1\n    return ans\nres = []\nr = int(input())\nfor i in range(r):\n    input()\n    [m, n] = list(map(int, input().split()))\n    arr = []\n    for i in range(m):\n        arr.append(list(map(int, input().split())))\n    res.append(find(arr, m, n))\nfor i in res:\n    print(i)", "import math\nresult = []\n\ndef check(x, shops, friends):\n    if min(map(max, friends)) < x:\n        return False\n    for shop in shops:\n        status = ''\n        for value in shop:\n            if value >= x:\n                status += 'x'\n        if len(status) >= 2:\n            return True\n    return False\n\ndef binary_search(func, l, r, *args, **kwargs):\n    if l == r:\n        return l\n    c = math.ceil((l + r) / 2)\n    if check(c, *args, **kwargs):\n        return binary_search(func, c, r, *args, **kwargs)\n    else:\n        return binary_search(func, l, c - 1, *args, **kwargs)\nfor _ in range(int(input())):\n    input()\n    (m, n) = list(map(int, input().split()))\n    shops = [list(map(int, input().split())) for i in range(m)]\n    friends = [[shops[i][j] for i in range(m)] for j in range(n)]\n    answer = binary_search(check, 0, 10 ** 9, shops, friends)\n    result.append(answer)\nprint('\\n'.join(map(str, result)))", "def check(x, mat, n, m):\n    flag = False\n    pair = [False] * m\n    for i in range(n):\n        c = 0\n        for j in range(m):\n            if mat[i][j] >= x:\n                pair[j] = True\n                c += 1\n        if c > 1:\n            flag = True\n    if not flag and m > 1:\n        return False\n    ans = sum(pair)\n    if ans == m:\n        return True\n    return False\nimport sys\n\ndef solve():\n    for t in range(1):\n        s = input()\n        (n, m) = map(int, input().split())\n        arr = []\n        mx = sys.maxsize * -1\n        for i in range(n):\n            a = list(map(int, input().split()))\n            mx = max(mx, max(a))\n            arr.append(a)\n        start = 1\n        end = mx\n        ans = None\n        while start <= end:\n            mid = (start + end) // 2\n            if check(mid, arr, n, m):\n                ans = mid\n                start = mid + 1\n            else:\n                end = mid - 1\n        print(ans)\nfor _ in range(int(input())):\n    solve()", "def solve(mid, p, m, n):\n    for i in range(n):\n        flag = 1\n        for j in range(m):\n            if p[j][i] >= mid:\n                flag = 0\n                break\n        if flag == 1:\n            return False\n    for i in range(m):\n        count = 0\n        for j in range(n):\n            if p[i][j] >= mid:\n                count += 1\n            if count >= 2:\n                return True\n    return False\nt = int(input())\nfor _ in range(t):\n    input()\n    (m, n) = map(int, input().split())\n    p = []\n    mini = 10 ** 8\n    maxi = 0\n    mid = (mini + maxi) // 2\n    for i in range(m):\n        arr = list(map(int, input().split()))\n        mini = min(mini, min(arr))\n        maxi = max(maxi, max(arr))\n        p.append(arr)\n    ans = 0\n    while mini <= maxi:\n        mid = (mini + maxi) // 2\n        if solve(mid, p, m, n):\n            mini = mid + 1\n            ans = max(ans, mid)\n        else:\n            maxi = mid - 1\n    print(ans)", "def check(lst, val):\n    visited = set()\n    Flag = False\n    ck = set()\n    for i in range(n):\n        can = False\n        for j in range(m):\n            if lst[j][i] >= val:\n                can = True\n                if j in visited:\n                    Flag = True\n                visited.add(j)\n        if not can:\n            return False\n    if Flag:\n        return True\n    return False\n\ndef solve(m, n, lst):\n    lo = 1\n    hi = 10 ** 9 + 1\n    mid = (lo + hi) // 2\n    ans = 0\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if check(lst, mid):\n            ans = mid\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    print(ans)\nt = int(input())\nfor i in range(t):\n    x = input()\n    (m, n) = map(int, input().split())\n    lst = []\n    for i in range(m):\n        temp = list(map(int, input().split()))\n        lst.append(temp)\n    solve(m, n, lst)", "def solve():\n\n    def possible(k):\n        a = [0 for i in range(n)]\n        max_v = 0\n        for i in range(m):\n            c = 0\n            for j in range(n):\n                if arr[i][j] >= k:\n                    a[j] = 1\n                    c += 1\n            max_v = max(max_v, c)\n        return all(a) and max_v > 1\n    input()\n    (m, n) = map(int, input().split())\n    arr = [list(map(int, input().split())) for _ in range(m)]\n    (low, high) = (1, 10 ** 9 + 1)\n    while low <= high:\n        mid = low + high >> 1\n        if possible(mid):\n            ans = mid\n            low = mid + 1\n        else:\n            high = mid - 1\n    return ans\nt = int(input())\nwhile t:\n    print(solve())\n    t -= 1", "def czy_sie_da(x, sklepy, iloS, iloO):\n    osoTmp = [False] * iloO\n    for i in range(iloO):\n        for j in range(iloS):\n            if sklepy[j][i] >= x:\n                osoTmp[i] = True\n    if False in osoTmp:\n        return False\n    for i in range(iloS):\n        tmp = 0\n        for j in range(iloO):\n            if sklepy[i][j] >= x:\n                tmp += 1\n                if tmp == 2:\n                    return True\n    return False\n\ndef main():\n    iloP = int(input())\n    for i in range(iloP):\n        input()\n        (iloS, iloO) = list(map(int, input().split()))\n        sklepy = [0] * iloS\n        for j in range(iloS):\n            sklepy[j] = list(map(int, input().split()))\n        pocz = 0\n        kon = 10 ** 9\n        wyn = 0\n        while pocz < kon:\n            mid = (pocz + kon + 1) // 2\n            if czy_sie_da(mid, sklepy, iloS, iloO):\n                pocz = mid\n                wyn = max(mid, wyn)\n            else:\n                kon = mid - 1\n        print(wyn)\nmain()", "t = int(input())\np = []\n(m, n) = (0, 0)\n\ndef check(mid):\n    flag = False\n    person = [False] * n\n    for i in range(m):\n        c = 0\n        for j in range(n):\n            if p[i][j] >= mid:\n                person[j] = True\n                c = c + 1\n        if c > 1:\n            flag = True\n    if not flag and n > 1:\n        return False\n    ans = True\n    for i in range(n):\n        ans = ans & person[i]\n    return ans\nfor _ in range(t):\n    input()\n    p = []\n    (m, n) = map(int, input().split(' '))\n    for _ in range(m):\n        p.append(list(map(int, input().split(' '))))\n    (l, r) = (0, 10 ** 9)\n    while l < r:\n        mid = (l + r + 1) // 2\n        if check(mid):\n            l = mid\n        else:\n            r = mid - 1\n    print(l)", "def check(r):\n    flag = False\n    cols = [False for i in range(n)]\n    for i in range(m):\n        kolvo = 0\n        for j in range(n):\n            if d[i][j] >= r:\n                cols[j] = True\n                kolvo += 1\n        if kolvo >= 2:\n            flag = True\n    if flag and False not in cols:\n        return True\n    else:\n        return False\nt = int(input())\nfor i in range(t):\n    input()\n    (m, n) = map(int, input().split())\n    d = []\n    for j in range(m):\n        d.append(list(map(int, input().split())))\n    lev = 1\n    prav = 10 ** 10\n    u = (lev + prav) // 2\n    while lev + 1 < prav:\n        if check(u):\n            lev = u\n        else:\n            prav = u\n        u = (lev + prav) // 2\n    print(lev)", "def OK(x):\n    a = [0 for i in range(n)]\n    max_c = 0\n    for i in range(m):\n        c = 0\n        for j in range(n):\n            if s[i][j] >= x:\n                a[j] = 1\n                c += 1\n        max_c = max(c, max_c)\n    return all(a) and max_c > 1\nfor _ in range(int(input())):\n    input()\n    (m, n) = map(int, input().split())\n    s = [list(map(int, input().split())) for i in range(m)]\n    L = 1\n    R = 10 ** 9 + 1\n    while R - L > 1:\n        M = (R + L) // 2\n        if OK(M):\n            L = M\n        else:\n            R = M\n    print(L)", "def check(lst, val):\n    visited = set()\n    Flag = False\n    ck = set()\n    for i in range(n):\n        can = False\n        for j in range(m):\n            if lst[j][i] >= val:\n                can = True\n                ck.add(i)\n                if j in visited:\n                    Flag = True\n                visited.add(j)\n        if not can:\n            break\n    if len(ck) < n:\n        return False\n    if Flag:\n        return True\n    return False\n\ndef solve(m, n, lst):\n    lo = 1\n    hi = 10 ** 9 + 1\n    mid = (lo + hi) // 2\n    ans = 0\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if check(lst, mid):\n            ans = mid\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    print(ans)\nt = int(input())\nfor i in range(t):\n    x = input()\n    (m, n) = map(int, input().split())\n    lst = []\n    for i in range(m):\n        temp = list(map(int, input().split()))\n        lst.append(temp)\n    solve(m, n, lst)", "for _ in range(int(input())):\n    aaa = input()\n    (m, n) = map(int, input().split())\n    A = []\n    for i in range(m):\n        an = list(map(int, input().split()))\n        A.append(an)\n    l = 1\n    ans = 1\n    h = 10 ** 9\n    last = -1\n    while l <= h:\n        mid = (l + h) // 2\n        s = set()\n        (can, can2) = (True, False)\n        for j in range(n):\n            can = False\n            for i in range(m):\n                if A[i][j] >= mid:\n                    can = True\n                    if i in s:\n                        can2 = True\n                    s.add(i)\n            if not can:\n                break\n        if can and can2:\n            l = mid + 1\n            ans = mid\n        else:\n            h = mid - 1\n    print(ans)", "for _ in range(int(input())):\n    aaa = input()\n    (m, n) = map(int, input().split())\n    A = []\n    for i in range(m):\n        an = list(map(int, input().split()))\n        A.append(an)\n    l = 1\n    ans = 1\n    h = 10 ** 9 + 1\n    last = -1\n    while l <= h:\n        mid = (l + h) // 2\n        s = set()\n        (can, can2) = (True, False)\n        for j in range(n):\n            can = False\n            for i in range(m):\n                if A[i][j] >= mid:\n                    can = True\n                    if i in s:\n                        can2 = True\n                    s.add(i)\n            if not can:\n                break\n        if can and can2:\n            l = mid + 1\n            ans = mid\n        else:\n            h = mid - 1\n    print(ans)", "for _ in range(int(input())):\n    input()\n    (m, n) = list(map(int, input().split()))\n    l = []\n    maxx = 0\n    for i in range(m):\n        l.append(list(map(int, input().split())))\n        maxx = max(maxx, max(l[-1]))\n    (lft, rig) = (1, maxx + 1)\n    l.sort(reverse=True)\n    while lft < rig:\n        (pos, ct, mid, vis) = (0, 0, (lft + rig + 1) // 2, [0] * n)\n        for i in range(m):\n            ct = 0\n            for j in range(n):\n                if l[i][j] >= mid:\n                    vis[j] = 1\n                    ct += 1\n            if ct > 1:\n                pos = 1\n        pos = sum(vis) == n and pos\n        if pos:\n            lft = mid\n        else:\n            rig = mid - 1\n    print(lft)", "def happywith(x):\n    happy = [False] * friends\n    possible = False\n    for shop in range(shops):\n        count = 0\n        for friend in range(friends):\n            if mat[shop][friend] >= x:\n                happy[friend] = True\n                count += 1\n        if count > 1:\n            possible = True\n    return possible and all(happy)\nfor _ in range(int(input())):\n    _ = input()\n    (shops, friends) = map(int, input().strip().split())\n    mat = (*((*map(int, input().split()),) for i in range(shops)),)\n    if shops < friends:\n        print(min((max((mat[shop][friend] for shop in range(shops))) for friend in range(friends))))\n    else:\n        right = 1\n        while happywith(right):\n            right *= 2\n        left = right // 2\n        while left < right - 1:\n            mid = (left + right) // 2\n            if happywith(mid):\n                left = mid\n            else:\n                right = mid\n        print(left)", "t = int(input())\nwhile t:\n\n    def fun(num, n, m, li):\n        arr = [False] * m\n        flag = 0\n        for i in range(n):\n            c = 0\n            for j in range(m):\n                if li[i][j] >= num:\n                    arr[j] = True\n                    c += 1\n            if c > 1:\n                flag = 1\n        if not flag and m > 1:\n            return False\n        ans = True\n        for i in arr:\n            ans = ans and i\n        return ans\n    space = input()\n    (n, m) = map(int, input().split())\n    li = []\n    for i in range(n):\n        a = list(map(int, input().split()))\n        li.append(a)\n    low = 1\n    high = 2\n    while fun(high, n, m, li):\n        high *= 2\n    while high - low > 1:\n        mid = (low + high) // 2\n        if fun(mid, n, m, li):\n            low = mid\n        else:\n            high = mid\n    print(low)\n    t -= 1", "for _ in range(int(input())):\n    input()\n    arr = [int(x) for x in input().split()]\n    (m, n) = (arr[0], arr[1])\n    arr = []\n    for i in range(m):\n        li = [int(x) for x in input().split()]\n        arr.append(li)\n    (high, low) = (10 ** 14, 0)\n    ans = 0\n    while low <= high:\n        mid = (low + high) // 2\n        s = set()\n        can2 = False\n        for j in range(n):\n            can = False\n            for i in range(m):\n                if arr[i][j] >= mid:\n                    can = True\n                    if i in s:\n                        can2 = True\n                    else:\n                        s.add(i)\n            if can == False:\n                break\n        if can and can2:\n            ans = mid\n            low = mid + 1\n        else:\n            high = mid - 1\n    print(ans)", "import io, os\nfrom sys import stdin, stdout\nfor _ in range(int(stdin.readline())):\n    xxx = stdin.readline()\n    (n, m) = map(int, stdin.readline().split())\n    ar = []\n    for i in range(n):\n        ar.append(list(map(int, stdin.readline().split())))\n    a = [[] for i in range(m)]\n    for i in range(m):\n        for j in range(n):\n            a[i].append([ar[j][i], j])\n        a[i].sort()\n    mx = 0\n    for i in range(n):\n        mx = max(mx, max(ar[i]))\n    l = 1\n    r = mx\n    ans = 0\n    while l <= r:\n        mid = l + (r - l) // 2\n        d = {}\n        check = False\n        check1 = False\n        for i in range(m):\n            for j in range(n):\n                if a[i][j][0] >= mid:\n                    if a[i][j][1] not in d:\n                        d[a[i][j][1]] = True\n                    else:\n                        check = True\n                        break\n            if a[i][-1][0] < mid:\n                check1 = True\n                break\n        if check1 or not check:\n            r = mid - 1\n        else:\n            ans = mid\n            l = mid + 1\n    print(ans)"]