["import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m, k) = map(int, input().split())\n    a = [list(input().strip()) for i in range(n)]\n    b = [['.'] * m for i in range(n)]\n    for x in range(n):\n        for y in range(m):\n            if a[x][y] == '*':\n                d = 0\n                for i in range(1, x + 1):\n                    if y - i >= 0 and y + i < m and (a[x - i][y - i] == '*') and (a[x - i][y + i] == '*'):\n                        d = i\n                    else:\n                        break\n                if d >= k:\n                    for i in range(d + 1):\n                        b[x - i][y - i] = '*'\n                        b[x - i][y + i] = '*'\n    print(['NO', 'YES'][a == b])\nfor i in range(int(input())):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m, k) = map(int, input().split())\n    a = [list(input().strip()) for i in range(n)]\n    b = [['.'] * m for i in range(n)]\n    for x in range(n):\n        for y in range(m):\n            if a[x][y] == '*':\n                d = 0\n                for i in range(1, x + 1):\n                    if y - i >= 0 and y + i < m and (a[x - i][y - i] == '*') and (a[x - i][y + i] == '*'):\n                        d = i\n                    else:\n                        break\n                if d >= k:\n                    for i in range(d + 1):\n                        b[x - i][y - i] = '*'\n                        b[x - i][y + i] = '*'\n    print(['NO', 'YES'][a == b])\nfor i in range(int(input())):\n    solve()", "def max_k(arr, x, y, n, m):\n    (i, j1, j2) = (x, y, y)\n    k = 0\n    while 0 <= i - k < n and 0 <= j1 - k < m and (0 <= j2 + k < m) and (arr[i - k][j1 - k] == '*') and (arr[i - k][j2 + k] == '*'):\n        k += 1\n    return k - 1\n\ndef solve():\n    (n, m, k) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(input())\n    colored = [[0 for j in range(m)] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '.':\n                continue\n            mk = max_k(a, i, j, n, m)\n            if mk < k:\n                continue\n            for delta in range(mk + 1):\n                colored[i - delta][j - delta] = 1\n                colored[i - delta][j + delta] = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '*' and (not colored[i][j]):\n                print('NO')\n                return\n    print('YES')\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, m, k) = map(int, input().split())\n    vis = []\n    grid = []\n    flag = 1\n    for i in range(n):\n        vis.append([-1] * m)\n    for i in range(n):\n        grid.append(list(input()))\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if grid[i][j] == '*':\n                l = 1\n                count = 0\n                x = i - 1\n                while j - l >= 0 and j + l < m and (x >= 0):\n                    if grid[x][j + l] == '*' and grid[x][j - l] == '*':\n                        count += 1\n                        x -= 1\n                        l += 1\n                    else:\n                        break\n                if count >= k:\n                    l = 1\n                    x = i - 1\n                    while j - l >= 0 and j + l < m and (x >= 0):\n                        if grid[x][j + l] == '*' and grid[x][j - l] == '*':\n                            vis[x][j + l] = 1\n                            vis[x][j - l] = 1\n                            x -= 1\n                            l += 1\n                        else:\n                            break\n                elif vis[i][j] == 1:\n                    pass\n                else:\n                    flag = 0\n                    break\n        if flag == 0:\n            break\n    if flag == 0:\n        print('NO')\n    else:\n        print('YES')", "from itertools import product\ninputArray = lambda t: list(map(t, input().split(' ')))\n\ndef tickSize(board, i, j, m, k):\n    sz = 0\n    ub = min(m - j - 1, i, j)\n    if ub < k:\n        return 0\n    while sz <= ub and board[i - sz][j - sz] == '*' and (board[i - sz][j + sz] == '*'):\n        sz += 1\n    return sz - 1\n\ndef drawTick(mask, i, j, size):\n    mask[i][j] = '*'\n    for h in range(1, size + 1):\n        mask[i - h][j - h] = '*'\n        mask[i - h][j + h] = '*'\n    return mask\n\ndef generateMask(board, n, m, k):\n    mask = []\n    for _ in range(n):\n        mask.append([])\n        for _ in range(m):\n            mask[-1].append('.')\n    for (i, j) in product(range(n), range(m)):\n        if board[i][j] == '*':\n            size = tickSize(board, i, j, m, k)\n            if size >= k:\n                mask = drawTick(mask, i, j, size)\n    return mask\n\ndef main():\n    t = int(input())\n    while t > 0:\n        t -= 1\n        (n, m, k) = inputArray(int)\n        board = []\n        for _ in range(n):\n            board.append(list(input()))\n        print('YES') if board == generateMask(board, n, m, k) else print('NO')\nmain()", "def shape_len(matr, x, y, m):\n    len = 0\n    (x, ay, by) = (x - 1, y - 1, y + 1)\n    while x >= 0 and ay >= 0 and (by < m) and (matr[x][ay] == '*') and (matr[x][by] == '*'):\n        len += 1\n        x = x - 1\n        ay = ay - 1\n        by = by + 1\n    return len\n\ndef print_shape(matr, x, y, d):\n    for i in range(d + 1):\n        matr[x - i][y - i] = '*'\n        matr[x - i][y + i] = '*'\n    return matr\n\ndef solve():\n    (n, m, k) = [int(x) for x in input().split()]\n    lst = []\n    for _ in range(n):\n        lst.append([e for e in input()])\n    result = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(k, n):\n        for j in range(k, m):\n            if lst[i][j] == '*':\n                sz = shape_len(lst, i, j, m)\n                if sz >= k:\n                    result = print_shape(result, i, j, sz)\n    if lst != result:\n        print('NO')\n    else:\n        print('YES')\nfor _ in range(int(input())):\n    solve()", "def shape_len(matr, x, y):\n    d = 0\n    m = len(matr[0])\n    (x, ay, by) = (x - 1, y - 1, y + 1)\n    while x >= 0 and ay >= 0 and (by < m) and (matr[x][ay] == '*') and (matr[x][by] == '*'):\n        d += 1\n        x = x - 1\n        ay = ay - 1\n        by = by + 1\n    return d\n\ndef print_shape(matr, x, y, d):\n    for i in range(d + 1):\n        matr[x - i][y - i] = '*'\n        matr[x - i][y + i] = '*'\n    return matr\n\ndef solve():\n    (n, m, k) = [int(x) for x in input().split()]\n    lst = []\n    for _ in range(n):\n        lst.append([e for e in input()])\n    result = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(k, n):\n        for j in range(k, m):\n            if lst[i][j] == '*':\n                sz = shape_len(lst, i, j)\n                if sz >= k:\n                    result = print_shape(result, i, j, sz)\n    if lst != result:\n        print('NO')\n    else:\n        print('YES')\nfor _ in range(int(input())):\n    solve()", "def marcar(ls, i, j, n, m, k):\n    num = 1\n    while num <= i:\n        if j - num < 0 or j + num >= m:\n            break\n        elif ls[i - num][j - num] == '.' or ls[i - num][j + num] == '.':\n            break\n        else:\n            ls[i - num][j - num] = '#'\n            ls[i - num][j + num] = '#'\n        num += 1\n    if num <= k:\n        return False\n    else:\n        return True\n\ndef marcardos(ls, i, j, n, m, k):\n    num = 1\n    while num <= i:\n        if j - num < 0 or j + num >= m:\n            break\n        elif ls[i - num][j - num] == '.' or ls[i - num][j + num] == '.':\n            break\n        num += 1\n    if num > k:\n        for num2 in range(1, num, 1):\n            ls[i - num2][j - num2] = '#'\n            ls[i - num2][j + num2] = '#'\nt = int(input())\nfor q in range(t):\n    (n, m, k) = map(int, input().split())\n    ls = []\n    for i in range(n):\n        ls.append(list(input()))\n    correcto = True\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if ls[i][j] == '*':\n                correcto = marcar(ls, i, j, n, m, k)\n                if correcto == False:\n                    break\n            elif ls[i][j] == '#':\n                marcardos(ls, i, j, n, m, k)\n        if correcto == False:\n            break\n    if correcto == False:\n        print('NO')\n    else:\n        print('YES')", "def solve():\n    (n, m, k) = map(int, input().split())\n    a = [list(input()) for _ in range(n)]\n    for i in reversed(range(n)):\n        for j in reversed(range(m)):\n            d = 0\n            while d <= min(i, j, m - 1 - j) and a[i - d][j - d] != '.' and (a[i - d][j + d] != '.'):\n                d += 1\n            if d > k:\n                for d in range(d):\n                    a[i - d][j - d] = a[i - d][j + d] = '#'\n            if a[i][j] == '*':\n                return False\n    return True\nfor _ in range(int(input())):\n    print('YES' if solve() else 'NO')", "import sys\nN = int(200000.0 + 5)\nsys.setrecursionlimit(N)\n\ndef charming():\n    (n, m, k) = map(int, input().split())\n    s = list((list() for i in range(n + 1)))\n    ok = list(([0] * (m + 1) for i in range(n + 1)))\n    for i in range(1, n + 1):\n        s[i] = '#' + input()\n    for i in range(k, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(i + 1, m - i + 1):\n                flag = True\n                for h in range(i + 1):\n                    if s[j - h][k - h] != '*' or s[j - h][k + h] != '*':\n                        flag = False\n                        break\n                if flag == False:\n                    continue\n                for h in range(i + 1):\n                    ok[j - h][k - h] = 1\n                    ok[j - h][k + h] = 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if ok[i][j] == 0 and s[i][j] == '*':\n                print('NO')\n                return\n    print('YES')\nfor t in range(int(input())):\n    charming()", "def f(i, j, k):\n    if x[i][j] == '.':\n        return\n    p = i\n    c = 0\n    z = [[i, j]]\n    (a, b) = (j - 1, j + 1)\n    i -= 1\n    while i >= 0 and a >= 0 and (b < len(x[0])):\n        if x[i][a] == '*' and x[i][b] == '*':\n            c += 1\n            z.append([i, a])\n            z.append([i, b])\n        else:\n            break\n        i -= 1\n        a -= 1\n        b += 1\n    if c >= k:\n        for i in z:\n            v[i[0]][i[1]] = 1\n    return\nfor t in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    v = []\n    x = []\n    for i in range(n):\n        v.append([0] * m)\n        x.append(list(input()))\n    for i in range(n):\n        for j in range(m):\n            f(i, j, k)\n    R = True\n    for i in range(n):\n        for j in range(m):\n            if v[i][j] != 1 and x[i][j] == '*':\n                R = False\n    if R:\n        print('YES')\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\n\ndef myfun(a, visited, n, m):\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '*' and visited[i][j] == False:\n                return False\n            elif a[i][j] == '.' and visited[i][j] == True:\n                return False\n    return True\n\ndef main():\n    (n, m, k) = map(int, input().split())\n    a = []\n    visited = []\n    for _ in range(n):\n        a.append(input())\n        visited.append([False] * m)\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '*':\n                (k1, k2, k3, k4) = (i, j, j, -1)\n                while k1 >= 0 and k2 >= 0 and (k3 <= m):\n                    if a[k1][k2] == '*' and a[k1][k3] == '*':\n                        k4 += 1\n                    else:\n                        break\n                    (k1, k2, k3) = (k1 - 1, k2 - 1, k3 + 1)\n                if k4 >= k:\n                    (k1, k2, k3) = (i, j, j)\n                    while k1 >= 0 and k2 >= 0 and (k3 <= m):\n                        if a[k1][k2] == '*' and a[k1][k3] == '*':\n                            visited[k1][k2] = True\n                            visited[k1][k3] = True\n                        else:\n                            break\n                        (k1, k2, k3) = (k1 - 1, k2 - 1, k3 + 1)\n    if myfun(a, visited, n, m):\n        print('YES')\n    else:\n        print('NO')\nfor _t in range(int(input())):\n    main()", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m, k) = map(int, input().split())\n    a = [list(input().strip()) for i in range(n)]\n    b = [['.'] * m for i in range(n)]\n    for x in range(n):\n        for y in range(m):\n            if a[x][y] == '*':\n                d = 0\n                for i in range(1, x + 1):\n                    if y - i >= 0 and y + i < m and (a[x - i][y - i] == '*') and (a[x - i][y + i] == '*'):\n                        d = i\n                    else:\n                        break\n                if d >= k:\n                    for i in range(d + 1):\n                        b[x - i][y - i] = '*'\n                        b[x - i][y + i] = '*'\n    print(['NO', 'YES'][a == b])\nfor i in range(int(input())):\n    solve()", "I = input\nfor _ in [0] * int(I()):\n    (n, m, k) = map(int, I().split())\n    a = [[*I()] for _ in [0] * n]\n    f = 0\n    while n:\n        n -= 1\n        for i in range(m):\n            j = 0\n            while j <= min(i, m - i - 1, n) and (t := a[n - j])[i - j] < '.' > t[i + j]:\n                j += 1\n            if j > k:\n                while j:\n                    j -= 1\n                    t = a[n - j]\n                    t[i - j] = t[i + j] = '#'\n            else:\n                f |= a[n][i] == '*'\n    print('YNEOS'[f::2])", "for _ in range(int(input())):\n    (n, m, k) = list(map(int, input().split()))\n    arr = []\n    for i in range(n):\n        x = input()\n        for j in range(m):\n            if x[j] == '*':\n                arr.append((i, j))\n    arr = sorted(arr, key=lambda x: (-x[0], x[1]))\n    arrset = set(arr)\n    seen = set()\n    for xy in arr:\n        cout = 0\n        r = xy[0]\n        cr = xy[1]\n        cl = xy[1]\n        f = True\n        temp = set()\n        while f:\n            if (r - 1, cr + 1) in arrset and (r - 1, cl - 1) in arrset:\n                cout += 1\n                temp.add((r - 1, cr + 1))\n                temp.add((r - 1, cl - 1))\n                cr += 1\n                cl -= 1\n                r -= 1\n            else:\n                f = False\n        if cout >= k:\n            seen.add(xy)\n            seen.update(temp)\n    if len(seen) == len(arr):\n        print('YES')\n    else:\n        print('NO')", "def check(i, j, k, matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    d = 0\n    while i + d < n and j + d < m and (j - d > -1):\n        if matrix[i + d][j + d] == matrix[i + d][j - d]:\n            if matrix[i + d][j + d]:\n                d += 1\n            else:\n                break\n        else:\n            break\n    d -= 1\n    return d if d >= k else -1\n\ndef main():\n    (n, m, k) = map(int, input().split())\n    matrix = [[0] * m for _ in range(n)]\n    checked = [[0] * m for _ in range(n)]\n    for i in range(n):\n        s = input()\n        for (j, c) in enumerate(s):\n            if c == '*':\n                checked[i][j] = matrix[i][j] = 1\n    matrix.reverse()\n    checked.reverse()\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j]:\n                d = check(i, j, k, matrix)\n                while d > -1:\n                    checked[i + d][j + d] = checked[i + d][j - d] = 0\n                    d -= 1\n    for i in range(n):\n        for j in range(m):\n            if checked[i][j]:\n                return False\n    return True\nfor _ in range(int(input())):\n    print('YES' if main() else 'NO')", "for _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    field = [input() for i in range(n)]\n    res = [['.'] * m for i in range(n)]\n    for i in range(1, n):\n        for j in range(1, m - 1):\n            if field[i][j] == '.':\n                continue\n            if field[i - 1][j - 1] == '.' or field[i - 1][j + 1] == '.':\n                continue\n            res[i][j] = '*'\n            mini = 0\n            for x in range(1, n + 1):\n                if i - x < 0 or j - x < 0 or j + x >= m:\n                    break\n                if field[i - x][j - x] == '.' or field[i - x][j + x] == '.':\n                    break\n                mini = x\n            if mini < k:\n                continue\n            for x in range(1, mini + 1):\n                res[i - x][j - x] = '*'\n                res[i - x][j + x] = '*'\n    can = True\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] != res[i][j]:\n                can = False\n                break\n            if not can:\n                break\n    if can:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    T = [[s == '*' for s in input()] for y in range(n)]\n    Q = [[b for b in l] for l in T]\n    b = 1\n    for i in range(n):\n        for j in range(m):\n            if Q[i][j]:\n                d = 0\n                while j - d >= 0 and j + d < m and (i - d >= 0) and T[i - d][j - d] and T[i - d][j + d]:\n                    d += 1\n                if d - 1 >= k:\n                    for s in range(d):\n                        Q[i - s][j - s] = 0\n                        Q[i - s][j + s] = 0\n                else:\n                    b = False\n    if not any((any(l) for l in Q)):\n        print('YES')\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\n\ndef read(c):\n    if c == '*':\n        return 1\n    if c == '.':\n        return 0\n\ndef check(a, i, j, m):\n    if a[i][j] == 0:\n        return -1\n    d = 0\n    while True:\n        h = d + 1\n        if i - h < 0 or j - h < 0 or j + h >= m or (a[i - h][j - h] == 0) or (a[i - h][j + h] == 0):\n            return d\n        else:\n            d = h\n\ndef checkoff(a, i, j, d):\n    for h in range(d + 1):\n        a[i - h][j - h] = 2\n        a[i - h][j + h] = 2\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(read, input())))\n    for i in range(n):\n        for j in range(m):\n            d = check(a, i, j, m)\n            if d >= k:\n                checkoff(a, i, j, d)\n    ok = True\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                ok = False\n    print('YES' if ok else 'NO')", "import sys\nINF = 10 ** 20\nMOD = 10 ** 9 + 7\nI = lambda : list(map(int, input().split()))\nfrom math import gcd\nfrom math import ceil\nfrom collections import defaultdict as dd, Counter\nfrom bisect import bisect_left as bl, bisect_right as br\n\ndef solve():\n    (n, m, k) = I()\n    a = []\n    centres = []\n    for i in range(n):\n        a.append(input())\n        if i:\n            for j in range(1, m - 1):\n                if a[i][j] == a[i - 1][j - 1] == a[i - 1][j + 1] == '*':\n                    centres.append((i, j))\n    visited = [[0] * m for i in range(n)]\n    for (A, B) in centres:\n        if A < k or B < k:\n            continue\n        cur = 1\n        while A - cur >= 0 and B - cur >= 0 and (B + cur < m):\n            if a[A - cur][B - cur] == '.' or a[A - cur][B + cur] == '.':\n                break\n            cur += 1\n        if cur > k:\n            visited[A][B] = 1\n            cur = 1\n            while A - cur >= 0 and B - cur >= 0 and (B + cur < m):\n                if a[A - cur][B - cur] == '.' or a[A - cur][B + cur] == '.':\n                    break\n                visited[A - cur][B - cur] = visited[A - cur][B + cur] = 1\n                cur += 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '*' and (not visited[i][j]):\n                print('NO')\n                return\n    print('YES')\n(t,) = I()\nwhile t:\n    solve()\n    t -= 1", "def verify(n, m, k, grid, i, j, visited):\n    height = 0\n    startj = j\n    endj = j\n    row = i\n    while startj >= 0 and endj < m and (i >= 0):\n        if grid[i][startj] != grid[i][endj]:\n            break\n        if grid[i][startj] == '.':\n            break\n        i -= 1\n        startj -= 1\n        endj += 1\n        height += 1\n    height -= 1\n    if height < k:\n        return\n    startj = j\n    endj = j\n    i = row\n    while startj >= 0 and endj < m and (i >= 0):\n        if grid[i][startj] != grid[i][endj]:\n            break\n        if grid[i][startj] == '.':\n            break\n        visited[i][startj] = True\n        visited[i][endj] = True\n        i -= 1\n        startj -= 1\n        endj += 1\n\ndef solve(n, m, k, grid):\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] != '*':\n                continue\n            verify(n, m, k, grid, i, j, visited)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and visited[i][j] is False:\n                return 'NO'\n    return 'YES'\nt = int(input().strip())\ninputs = []\nfor _ in range(t):\n    (n, m, k) = map(int, input().strip().split())\n    grid = []\n    for _ in range(n):\n        grid.append(input().strip())\n    inputs.append((n, m, k, grid))\nfor (n, m, k, grid) in inputs:\n    print(solve(n, m, k, grid))", "def check_con(a, n, m, x, y, k):\n    X = x\n    Y = y\n    cnt1 = 0\n    cnt2 = 0\n    x -= 1\n    y -= 1\n    while x >= 0 and y >= 0:\n        if a[x][y] == '*':\n            cnt1 += 1\n        else:\n            break\n        x -= 1\n        y -= 1\n    X -= 1\n    Y += 1\n    while X >= 0 and Y < m:\n        if a[X][Y] == '*':\n            cnt2 += 1\n        else:\n            break\n        X -= 1\n        Y += 1\n    return min(cnt1, cnt2)\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    K = k\n    a = []\n    for i in range(n):\n        x = input()\n        a.append([])\n        for j in x:\n            a[-1].append(j)\n    check = [[False for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '*':\n                cnt = check_con(a, n, m, i, j, K)\n                if cnt >= K:\n                    check[i][j] = True\n                    for k in range(cnt):\n                        check[i - k - 1][j - k - 1] = True\n                        check[i - k - 1][j + k + 1] = True\n    fcheck = False\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '*' and (not check[i][j]):\n                fcheck = True\n                break\n            elif a[i][j] != '*' and check[i][j]:\n                fcheck = True\n                break\n        if fcheck:\n            break\n    if fcheck:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    flag = True\n    (n, m, k) = map(int, input().split())\n    a = [[-1] * m for i in range(n)]\n    for i in range(n):\n        s = input()\n        for j in range(m):\n            if s[j] == '*':\n                a[i][j] = 1\n    for row in range(n - 1, -1, -1):\n        for col in range(m):\n            if a[row][col] == 1:\n                mx = 0\n                while col - mx >= 0 and col + mx <= m - 1 and (row - mx >= 0) and (a[row - mx][col - mx] >= 0) and (a[row - mx][col + mx] >= 0):\n                    mx += 1\n                mx -= 1\n                if mx < k:\n                    print('NO')\n                    flag = False\n                else:\n                    for i in range(mx + 1):\n                        a[row - i][col - i] = 0\n                        a[row - i][col + i] = 0\n            elif a[row][col] == 0:\n                mx = 0\n                while col - mx >= 0 and col + mx <= m - 1 and (row - mx >= 0) and (a[row - mx][col - mx] >= 0) and (a[row - mx][col + mx] >= 0):\n                    mx += 1\n                mx -= 1\n                if mx >= k:\n                    for i in range(mx + 1):\n                        a[row - i][col - i] = 0\n                        a[row - i][col + i] = 0\n            if not flag:\n                break\n        if not flag:\n            break\n    if flag:\n        print('YES')", "for i in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = [list(input().strip()) for i in range(n)]\n    b = [['.'] * m for i in range(n)]\n    for x in range(n):\n        for y in range(m):\n            if a[x][y] == '*':\n                d = 0\n                for i in range(1, x + 1):\n                    if y - i >= 0 and y + i < m and (a[x - i][y - i] == '*') and (a[x - i][y + i] == '*'):\n                        d = i\n                    else:\n                        break\n                if d >= k:\n                    for i in range(d + 1):\n                        b[x - i][y - i] = '*'\n                        b[x - i][y + i] = '*'\n    print(['NO', 'YES'][a == b])", "import copy\nt = int(input())\nfor _ in range(t):\n    (n, m, k) = list(map(int, input().split()))\n    ls = [list(input()) for _ in range(n)]\n    lc = copy.deepcopy(ls)\n    for i in range(n):\n        for j in range(m):\n            if ls[i][j] == '*':\n                f = True\n                for d in range(k + 1):\n                    if i - d < 0 or j + d >= m or j - d < 0 or (ls[i - d][j + d] != ls[i - d][j - d]) or (ls[i - d][j - d] != '*'):\n                        f = False\n                        break\n                if f:\n                    lc[i][j] = '.'\n                    for d in range(1, n):\n                        if (i - d >= 0 and j + d < m and (ls[i - d + 1][j + d - 1] == '*') and (ls[i - d][j + d] == '*')) and (i - d >= 0 and j - d >= 0 and (ls[i - d + 1][j - d + 1] == '*') and (ls[i - d][j - d] == '*')):\n                            lc[i - d][j + d] = '.'\n                            lc[i - d][j - d] = '.'\n                        else:\n                            break\n    ans = True\n    for i in range(n):\n        for j in range(m):\n            if lc[i][j] != '.':\n                ans = False\n                break\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "def check(field, n, m):\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                return False\n    return True\nt = int(input())\nfor p in range(t):\n    (n, m, k) = [int(n) for n in input().split()]\n    field = [['.' for j in range(m)] for i in range(n)]\n    for i in range(n):\n        field[i] = list(input())\n    last = n - 1\n    start = -1\n    for i in range(n - 1, -1, -1):\n        for j in range(0, m):\n            if field[i][j] == '.':\n                continue\n            len = 0\n            while i - len > 0 and j - len > 0 and (j + len + 1 < m):\n                if field[i - len - 1][j - len - 1] == '.' or field[i - len - 1][j + len + 1] == '.':\n                    break\n                len += 1\n            if len >= k:\n                for p in range(len + 1):\n                    field[i - p][j - p] = '-'\n                    field[i - p][j + p] = '-'\n    print('YES') if check(field, n, m) else print('NO')", "t = int(input())\n\ndef node(x, y, dis):\n    for i in range(1, dis + 1):\n        if a[x - i][y - i] == 0 or a[x - i][y + i] == 0:\n            return 0\n    boo[x][y] = 1\n    for i in range(1, dis + 1):\n        boo[x - i][y - i] = 1\n        boo[x - i][y + i] = 1\n    return 1\n\ndef check(x, y):\n    c = 0\n    for dis in range(k, n - x):\n        if y + dis >= m or y + dis * 2 >= m:\n            return\n        if a[x + dis][y + dis] == 1:\n            if node(x + dis, y + dis, dis) == 0:\n                continue\n            else:\n                c = 1\n                continue\n    return c\n\ndef f():\n    for x in range(n):\n        for y in range(m):\n            if a[x][y]:\n                if check(x, y) == 0 and boo[x][y] == 0:\n                    print('NO')\n                    return\n    for x in range(n):\n        for y in range(m):\n            if a[x][y] != boo[x][y]:\n                print('NO')\n                return\n    print('YES')\nwhile t:\n    (n, m, k) = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        s = [1 if j == '*' else 0 for j in input()]\n        a.append(s)\n    boo = [[0 for i in a[j]] for j in range(n)]\n    f()\n    t -= 1", "for _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    grid = [[0] * m for i in range(n)]\n    ok = True\n    for i in range(n):\n        s = input()\n        for j in range(m):\n            grid[i][j] = 1 if s[j] == '*' else 0\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if grid[i][j] == 0:\n                continue\n            l = 0\n            while j > l and i > l and (j + l + 1 < m):\n                if grid[i - l - 1][j - l - 1] == 0 or grid[i - l - 1][j + l + 1] == 0:\n                    break\n                l += 1\n            if l >= k:\n                for d in range(1 + l):\n                    grid[i - d][j - d] = 2\n                    grid[i - d][j + d] = 2\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                ok = False\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "I = input\nfor _ in [0] * int(I()):\n    (n, m, k) = map(int, I().split())\n    (*a,) = ''.join((I() for _ in [0] * n))\n    n *= m\n    f = 0\n    while n:\n        n -= 1\n        l = 0\n        j = n\n        while l <= min(n % m, m - n % m - 1, n // m) and a[j - l] < '.' > a[j + l]:\n            l += 1\n            j -= m\n        if l > k:\n            while l:\n                l -= 1\n                j += m\n                a[j - l] = a[j + l] = '!'\n        f |= a[n] == '*'\n    print('YNEOS'[f::2])", "import sys\nimport math\nboard = []\nmark = []\nn = 0\nm = 0\nk = 0\n\ndef perform(x, y):\n    nm = 1\n    pointer = x\n    while nm <= x and y - nm >= 0 and (y + nm < m) and (board[x - nm][y - nm] == '*') and (board[x - nm][y + nm] == '*'):\n        nm = nm + 1\n    if nm > k:\n        for i in range(nm):\n            mark[x - i][y + i] = True\n            mark[x - i][y - i] = True\nttime = int(input())\nfor ccount in range(ttime):\n    (n, m, k) = map(int, input().split())\n    mark = [[False for j in range(m)] for i in range(n)]\n    board = []\n    for i in range(n):\n        board.append(input())\n    for i in range(n - 1, -1, -1):\n        for j in range(0, m):\n            if board[i][j] == '*':\n                perform(i, j)\n    bad = False\n    for i in range(n):\n        for j in range(m):\n            if mark[i][j] == False and board[i][j] == '*':\n                bad = True\n    if bad:\n        print('NO')\n    else:\n        print('YES')", "from collections import Counter, deque\nfrom sys import stdout\nimport time\nfrom math import factorial, log\n\ndef main():\n    (n, m, k) = [int(i) for i in input().split()]\n    matrix = [input() for i in range(n)]\n    _all = 0\n    _b = set()\n    for y in range(n):\n        for x in range(m):\n            flag = False\n            b = set()\n            element = matrix[y][x]\n            if element == '*':\n                _all += 1\n                if x >= k and y >= k:\n                    for d in range(1, y + 1):\n                        el1 = matrix[y - d][x - d] if x >= d and y - d >= 0 else False\n                        el2 = matrix[y - d][x + d] if x + d < m and y - d >= 0 else False\n                        (el1, el2) = map(lambda z: False if not z or z == '.' else True, [el1, el2])\n                        if el1 and el2:\n                            if d >= k:\n                                flag = True\n                            b.add((y - d, x + d))\n                            b.add((y - d, x - d))\n                        else:\n                            break\n                    if flag:\n                        _b.add((y, x))\n                        _b |= b\n    if len(_b) == _all:\n        print('YES')\n    else:\n        print('NO')\nfor t in range(int(input())):\n    main()", "t = int(input())\n\ndef check(arr, ans, m, i, j, k):\n    a = i - 1\n    b = j - 1\n    d = j + 1\n    size = 0\n    while a >= 0 and b >= 0 and (d < m):\n        if arr[a][b] == '*' and arr[a][d] == '*':\n            size += 1\n            a -= 1\n            b -= 1\n            d += 1\n        else:\n            break\n    if size >= k:\n        ans[i][j] = '*'\n        a = i - 1\n        b = j - 1\n        d = j + 1\n        while size > 0 and a >= 0 and (b >= 0) and (d < m):\n            size -= 1\n            ans[a][b] = '*'\n            ans[a][d] = '*'\n            a -= 1\n            b -= 1\n            d += 1\n\ndef solve():\n    (n, m, k) = map(int, input().split())\n    lst = []\n    for i in range(n):\n        lst += [input()]\n    ans = [['.' for i in range(m)] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if lst[i][j] == '*':\n                check(lst, ans, m, i, j, k)\n    w = 0\n    for i in range(n):\n        for j in range(m):\n            if lst[i][j] == '*':\n                if ans[i][j] != '*':\n                    w = 1\n                    break\n        if w == 1:\n            break\n    if w == 1:\n        print('NO')\n    else:\n        print('YES')\nwhile t:\n    solve()\n    t -= 1", "import sys\nimport math\nimport collections\ndy = [1, 0, -1, 0]\ndx = [0, 1, 0, -1]\nr = sys.stdin.readline\nfor _ in range(int(r())):\n    (N, M, K) = map(int, r().split())\n    L = []\n    for _ in range(N):\n        L.append(list(r().rstrip()))\n    visited = [[0] * (M + 1) for _ in range(N + 1)]\n    for i in range(N):\n        for j in range(M):\n            cnt = 1\n            if L[i][j] == '*':\n                visited[i][j] = 1\n            else:\n                continue\n            while 1:\n                if i - cnt >= 0 and j + cnt < M and (j - cnt >= 0):\n                    if L[i - cnt][j + cnt] == L[i - cnt][j - cnt] == '*':\n                        cnt += 1\n                    else:\n                        break\n                else:\n                    break\n            cnt -= 1\n            if cnt >= K:\n                visited[i][j] = 0\n                for k in range(1, cnt + 1):\n                    visited[i - k][j + k] = visited[i - k][j - k] = 0\n    ans = 0\n    for i in visited:\n        ans += sum(i)\n    if ans:\n        print('NO')\n    else:\n        print('YES')", "from sys import stdin\nfrom io import StringIO\ninput = lambda : stdin.readline().strip()\nlinput = lambda : [*map(int, input().split())]\noutput = StringIO()\n\ndef lprint(*x):\n    output.writelines((str(v) + ' ' for v in x))\n    output.write('\\n')\n\ndef main():\n    (n, m, k) = linput()\n    a = [[*input()] for _ in ' ' * n]\n    v = [['.'] * m for _ in ' ' * n]\n\n    def check(i, j):\n        c = 0\n        j1 = j2 = j\n        while i > 0 and j1 > 0 and (j2 < m - 1):\n            i -= 1\n            j1 -= 1\n            j2 += 1\n            if a[i][j1] != '*' or a[i][j2] != '*':\n                return c\n            c += 1\n        return c\n    for j in range(m):\n        for i in range(n):\n            if a[i][j] == '*':\n                d = check(i, j)\n                if d >= k:\n                    for c in range(d + 1):\n                        v[i - c][j - c] = '*'\n                        v[i - c][j + c] = '*'\n    lprint('YES' if a == v else 'NO')\nfor _ in ' ' * int(input()):\n    main()\nprint(output.getvalue())", "import math\nt = int(input())\nfor _ in range(t):\n    (n, m, k) = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(input())\n    marked = set()\n    visited = set()\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                marked.add((i, j))\n    for (r, c) in marked:\n        temp = set()\n        (lrow, lcol) = (r - 1, c - 1)\n        (rrow, rcol) = (r - 1, c + 1)\n        s = 0\n        while lrow >= 0 and lcol >= 0 and (rcol < m) and ((lrow, lcol) in marked) and ((rrow, rcol) in marked):\n            temp.add((lrow, lcol))\n            temp.add((rrow, rcol))\n            s += 1\n            rrow -= 1\n            lrow -= 1\n            rcol += 1\n            lcol -= 1\n        if s >= k:\n            visited = visited.union(temp)\n            visited.add((r, c))\n    if len(visited) == len(marked):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = []\n    ans = []\n    for _ in range(n):\n        a.append(input())\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '*':\n                if i >= k and j >= k:\n                    h = 0\n                    while i - h - 1 >= 0 and j - h - 1 >= 0 and (j + h + 1 <= m - 1) and (a[i - h - 1][j - h - 1] == '*') and (a[i - h - 1][j + h + 1] == '*'):\n                        h += 1\n                    if h >= k:\n                        temp = h\n                        while temp > 0:\n                            if (i - temp) * 100 + (j - temp) in ans:\n                                ans.remove((i - temp) * 100 + (j - temp))\n                            if (i - temp) * 100 + (j + temp) in ans:\n                                ans.remove((i - temp) * 100 + (j + temp))\n                            temp -= 1\n                    else:\n                        ans.append(i * 100 + j)\n                else:\n                    ans.append(i * 100 + j)\n    if len(ans) == 0:\n        print('YES')\n    else:\n        print('NO')", "I = input\nfor _ in [0] * int(I()):\n    (n, m, k) = map(int, I().split())\n    (*a,) = ''.join((I() for _ in [0] * n))\n    n *= m\n    f = 0\n    while n:\n        n -= 1\n        l = 0\n        while l <= min(n % m, m - n % m - 1, n // m) and a[n - l * m - l] < '.' > a[n - l * m + l]:\n            l += 1\n        if l > k:\n            while l:\n                l -= 1\n                j = n - l * m\n                a[j - l] = a[j + l] = '#'\n        else:\n            f |= a[n] == '*'\n    print('YNEOS'[f::2])", "for _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(input())\n    d = {}\n    for i in range(n):\n        for j in range(m):\n            if l[i][j] == '*':\n                (x, y) = (i, j)\n                c = 1\n                p = 0\n                t = [(i, j)]\n                while x - c >= 0 and y + c < m and (y - c >= 0):\n                    if l[x - c][y + c] == '*' and l[x - c][y - c] == '*':\n                        t.append((x - c, j + c))\n                        t.append((x - c, j - c))\n                        p += 1\n                        c += 1\n                    else:\n                        break\n                if p >= k:\n                    for z in t:\n                        d[z] = 1\n    f = 0\n    for i in range(n):\n        for j in range(m):\n            if l[i][j] == '*':\n                if (i, j) not in d:\n                    f = 1\n                    break\n    if f == 0:\n        print('YES')\n    else:\n        print('NO')", "I = input\nfor _ in [0] * int(I()):\n    (n, m, k) = map(int, I().split())\n    (*a,) = ''.join((I() for _ in [0] * n))\n    n *= m\n    f = 0\n    while n:\n        n -= 1\n        l = 0\n        j = n\n        while l <= min(n % m, m - n % m - 1, n // m) and a[j - l] < '.' > a[j + l]:\n            l += 1\n            j -= m\n        if l > k:\n            while l:\n                l -= 1\n                j += m\n                a[j - l] = a[j + l] = '#'\n        f |= a[n] == '*'\n    print('YNEOS'[f::2])", "I = input\nfor _ in [0] * int(I()):\n    (n, m, k) = map(int, I().split())\n    (*a,) = ''.join((I() for _ in [0] * n))\n    n *= m\n    f = 0\n    while n:\n        n -= 1\n        l = 0\n        j = n\n        while l <= min(n % m, m - n % m - 1, n // m) and a[j - l] < '.' > a[j + l]:\n            l += 1\n            j -= m\n        if l > k:\n            while l:\n                l -= 1\n                j += m\n                a[j - l] = a[j + l] = '!'\n        f |= a[n] == '*'\n    print('YNEOS'[f::2])", "t = int(input())\nfor _ in range(t):\n    (n, m, k) = map(int, input().split())\n    c = [''] * n\n    for i in range(n):\n        c[i] = list(input())\n    a = [['.'] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if c[i][j] == '*':\n                ok = 1\n                for h in range(k + 1):\n                    ok &= i >= h and j >= h and (c[i - h][j - h] == '*')\n                    ok &= i >= h and j + h < m and (c[i - h][j + h] == '*')\n                if ok:\n                    for h in range(i + 1):\n                        if j >= h and c[i - h][j - h] == '*' and (j + h < m) and (c[i - h][j + h] == '*'):\n                            a[i - h][j - h] = a[i - h][j + h] = '*'\n                        else:\n                            break\n    if a == c:\n        print('YES')\n    else:\n        print('NO')", "def check(board, ticks, k):\n    painted = set()\n    for (row, col) in ticks:\n        tmp = set()\n        leg = 0\n        while True:\n            if 0 <= row - leg and 0 <= col - leg and (col + leg <= m - 1) and (board[row - leg][col - leg] == '*') and (board[row - leg][col + leg] == '*'):\n                tmp.add((row - leg, col - leg))\n                tmp.add((row - leg, col + leg))\n                leg += 1\n            else:\n                if leg - 1 >= k:\n                    painted = painted.union(tmp)\n                break\n    for coord in ticks:\n        if coord not in painted:\n            return False\n    return True\nfor case in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    board = [[] for _ in range(n)]\n    ticks_removed = set()\n    ticks = []\n    for i in range(n):\n        tmp = input()\n        for (idx, letter) in enumerate(tmp):\n            if letter == '*':\n                ticks.append((i, idx))\n            board[i].append(letter)\n    print('YES' if check(board, ticks, k) else 'NO')", "for cycle in range(int(input())):\n    (n, m, k) = [int(x) for x in input().split()]\n    a = []\n    for i in range(n):\n        a.append([x == '*' for x in input()])\n    b = [[0] * m for x in range(n)]\n    for x in range(m):\n        for y in range(n):\n            if a[y][x]:\n                depth = 0\n                while depth < n:\n                    if y - depth < 0 or x - depth < 0 or x + depth >= m:\n                        break\n                    if not (a[y - depth][x - depth] and a[y - depth][x + depth]):\n                        break\n                    depth += 1\n                if depth > k:\n                    for i in range(0, depth):\n                        b[y - i][x - i] = b[y - i][x + i] = 1\n    print('YNEOS'[a != b::2])", "I = input\nfor _ in [0] * int(I()):\n    (n, m, k) = map(int, I().split())\n    (*a,) = ''.join((I() for _ in [0] * n))\n    n *= m\n    f = 0\n    while n:\n        n -= 1\n        l = 0\n        j = n\n        while l <= min(n % m, m - n % m - 1, n // m) and a[j - l] < '.' > a[j + l]:\n            l += 1\n            j -= m\n        if l > k:\n            while l:\n                l -= 1\n                j += m\n                a[j - l] = a[j + l] = '!'\n        f |= a[n] == '*'\n    print('YNEOS'[f::2])", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, m, k) = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(input().rstrip())\n    vis = [[False for _ in range(m)] for _ in range(n)]\n    for i in range(n - 1, 0, -1):\n        for j in range(1, m - 1):\n            if grid[i][j] == '*':\n                d = 1\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if grid[i - d][j - d] == '.' or grid[i - d][j + d] == '.':\n                        break\n                    d += 1\n                d -= 1\n                if d >= k:\n                    vis[i][j] = True\n                    for h in range(1, d + 1):\n                        vis[i - h][j - h] = True\n                        vis[i - h][j + h] = True\n    flag = True\n    for a in range(n):\n        for b in range(m):\n            if grid[a][b] == '*' and (not vis[a][b]):\n                flag = False\n                break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "import math\nimport collections\nfrom functools import lru_cache\nimport heapq\n\ndef process(case, n, m, k, G):\n    verified = [[0 for _ in range(m)] for _ in range(n)]\n\n    def check(x, y, G, k, verified):\n        c = 0\n        for d in range(m + n):\n            if 0 <= x - d <= n - 1 and 0 <= y - d <= m - 1 and (0 <= y + d <= m - 1) and (G[x - d][y - d] == '*') and (G[x - d][y + d] == '*'):\n                c += 1\n            else:\n                break\n        if c > k:\n            for d in range(m + n):\n                if 0 <= x - d <= n - 1 and 0 <= y - d <= m - 1 and (0 <= y + d <= m - 1) and (G[x - d][y - d] == '*') and (G[x - d][y + d] == '*'):\n                    verified[x - d][y - d] = 1\n                    verified[x - d][y + d] = 1\n                else:\n                    break\n    for i in range(n):\n        for j in range(m):\n            if G[i][j] == '*':\n                check(i, j, G, k, verified)\n    for i in range(n):\n        for j in range(m):\n            if G[i][j] == '*' and verified[i][j] != 1:\n                print('NO')\n                return\n    print('YES')\ntcs = int(input())\nfor tc in range(tcs):\n    (n, m, k) = list(map(int, input().split()))\n    G = []\n    for _ in range(n):\n        G.append(input().rstrip())\n    process(tc + 1, n, m, k, G)", "from sys import stdin\n\ndef read_input():\n    (n, m, k) = map(int, stdin.readline().split())\n    a = ['.' * (m + 2)]\n    for _ in range(1, n + 1):\n        a.append('.' + stdin.readline().rstrip() + '.')\n    return (n, m, k, a)\n\ndef solve(n, m, k, a):\n    check = [[False] * (m + 2) for _ in range(n + 1)]\n    for i in range(n, 0, -1):\n        for j in range(1, m + 1):\n            if a[i][j] == '*':\n                d = 0\n                while a[i - d - 1][j - d - 1] == '*' and a[i - d - 1][j + d + 1] == '*':\n                    d += 1\n                if d >= k:\n                    d = 0\n                    check[i][j] = True\n                    while a[i - d - 1][j - d - 1] == '*' and a[i - d - 1][j + d + 1] == '*':\n                        check[i - d - 1][j - d - 1] = check[i - d - 1][j + d + 1] = True\n                        d += 1\n    for i in range(n, 0, -1):\n        for j in range(1, m + 1):\n            if a[i][j] == '*' and check[i][j] == False:\n                return 'NO'\n    return 'YES'\n\ndef main():\n    t = int(stdin.readline())\n    for _ in range(t):\n        (n, m, k, a) = read_input()\n        answer = solve(n, m, k, a)\n        print(answer)\nmain()", "def solve():\n    (n, m, k) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(list(input()))\n    for i in range(k - 1, n):\n        for j in range(m):\n            if l[i][j] == '*' or l[i][j] == '!':\n                h = 1\n                uu = 1\n                for r in range(i - 1, -1, -1):\n                    if j + h < m and j - h > -1 and (l[r][j + h] == '*' or l[r][j + h] == '!') and (l[r][j - h] == '*' or l[r][j - h] == '!'):\n                        uu += 1\n                        h += 1\n                    else:\n                        break\n                if uu > k:\n                    h = 1\n                    for r in range(i - 1, -1, -1):\n                        if j + h < m and j - h > -1 and (l[r][j + h] == '*' or l[r][j + h] == '!') and (l[r][j - h] == '*' or l[r][j - h] == '!'):\n                            l[r][j + h] = '!'\n                            l[i][j] = '!'\n                            l[r][j - h] = '!'\n                            h += 1\n                        else:\n                            break\n    c = 0\n    for ii in l:\n        for i in ii:\n            if i == '*':\n                c = 1\n                break\n    if c == 0:\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "I = input\nfor _ in [0] * int(I()):\n    (n, m, k) = map(int, I().split())\n    (*a,) = ''.join((I() for _ in [0] * n))\n    n *= m\n    f = 0\n    while n:\n        i = j = n = n - 1\n        l = 0\n        while l <= min(n % m, m - n % m - 1, n // m) and a[i] < '.' > a[j]:\n            i -= m + 1\n            j -= m - 1\n            l += 1\n        if l > k:\n            while l:\n                l -= 1\n                j += m - 1\n                i += m + 1\n                a[i] = a[j] = '#'\n        else:\n            f |= a[n] == '*'\n    print('YNEOS'[f::2])", "t = int(input())\nfor _ in range(t):\n    (n, m, k) = map(int, input().split())\n    vis = []\n    grid = []\n    flag = 1\n    for i in range(n):\n        vis.append([-1] * m)\n    for i in range(n):\n        grid.append(list(input()))\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if grid[i][j] == '*':\n                l = 1\n                count = 0\n                x = i - 1\n                while j - l >= 0 and j + l < m and (x >= 0):\n                    if grid[x][j + l] == '*' and grid[x][j - l] == '*':\n                        count += 1\n                        x -= 1\n                        l += 1\n                    else:\n                        break\n                if count >= k:\n                    l = 1\n                    x = i - 1\n                    while j - l >= 0 and j + l < m and (x >= 0):\n                        if grid[x][j + l] == '*' and grid[x][j - l] == '*':\n                            vis[x][j + l] = 1\n                            vis[x][j - l] = 1\n                            x -= 1\n                            l += 1\n                        else:\n                            break\n                elif vis[i][j] == 1:\n                    pass\n                else:\n                    flag = 0\n                    break\n        if flag == 0:\n            break\n    if flag == 0:\n        print('NO')\n    else:\n        print('YES')", "import math\nfrom collections import Counter, defaultdict\nfrom functools import lru_cache\n\ndef check(r, c, matrix):\n    count = 0\n    (r1, c1) = (r, c)\n    start = 1\n    while True:\n        if 0 <= r - start < n and 0 <= c + start < m and (0 <= c - start < m):\n            if matrix[r - start][c - start] in ['*', -1] and matrix[r - start][c + start] in ['*', -1]:\n                count += 1\n                start += 1\n            else:\n                break\n        else:\n            break\n    if count >= k:\n        (r, c) = (r1, c1)\n        start = 1\n        matrix[r][c] = -1\n        while True:\n            if 0 <= r - start < n and 0 <= c + start < m and (0 <= c - start < m):\n                if matrix[r - start][c - start] in ['*', -1] and matrix[r - start][c + start] in ['*', -1]:\n                    matrix[r - start][c - start] = -1\n                    matrix[r - start][c + start] = -1\n                    start += 1\n                else:\n                    break\n            else:\n                break\nt = int(input())\nfor _ in range(t):\n    (n, m, k) = [int(i) for i in input().split()]\n    matrix = []\n    for i in range(n):\n        matrix.append([i for i in input()])\n    for i in range(k, n):\n        for j in range(k, m - k + 1):\n            if matrix[i][j] == '*':\n                check(i, j, matrix)\n    ans = 'YES'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '*':\n                ans = 'NO'\n                break\n    print(ans)", "I = input\nfor _ in [0] * int(I()):\n    (n, m, k) = map(int, I().split())\n    (*a,) = ''.join((I() for _ in [0] * n))\n    n *= m\n    f = 0\n    while n:\n        n -= 1\n        l = 0\n        j = n\n        while l <= min(n % m, m - n % m - 1, n // m) and a[j - l] < '.' > a[j + l]:\n            l += 1\n            j -= m\n        if l > k:\n            while l:\n                l -= 1\n                j += m\n                a[j - l] = a[j + l] = '!'\n        f |= a[n] == '*'\n    print('YNEOS'[f::2])", "I = input\nfor _ in [0] * int(I()):\n    (n, m, k) = map(int, I().split())\n    (*a,) = ''.join((I() for _ in [0] * n))\n    n *= m\n    f = 0\n    while n:\n        n -= 1\n        l = 0\n        j = n\n        while l <= min(n % m, m - n % m - 1, n // m) and a[j - l] < '.' > a[j + l]:\n            l += 1\n            j -= m\n        if l > k:\n            while l:\n                l -= 1\n                j += m\n                a[j - l] = a[j + l] = '!'\n        f |= a[n] == '*'\n    print('YNEOS'[f::2])", "t = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    matrix = [list(input()) for _ in range(n)]\n    seen = {'*', '1'}\n    for i in range(1, n):\n        for j in range(m):\n            if matrix[i][j] == '*' or matrix[i][j] == '1':\n                u = 1\n                h = 1\n                for s in range(i - 1, -1, -1):\n                    if j - h >= 0 and j + h < m and (matrix[s][j - h] in seen and matrix[s][j + h] in seen):\n                        h += 1\n                        u += 1\n                    else:\n                        break\n                if u > k:\n                    h = 1\n                    for s in range(i - 1, -1, -1):\n                        if j - h >= 0 and j + h < m and (matrix[s][j - h] in seen and matrix[s][j + h] in seen):\n                            matrix[i][j] = '1'\n                            matrix[s][j - h] = '1'\n                            matrix[s][j + h] = '1'\n                            h += 1\n                        else:\n                            break\n    f = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '*':\n                f = 1\n                break\n    if f == 0:\n        print('YES')\n    else:\n        print('NO')", "def draw(c, k):\n    l = [['.'] * m for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if c[i][j] >= k:\n                l[i][j] = '*'\n                for z in range(1, c[i][j] + 1):\n                    l[i - z][j - z] = '*'\n                    l[i - z][j + z] = '*'\n    return l\n\ndef comp(l, l1):\n    return l == l1\nt = int(input())\nfor _ in range(t):\n    (n, m, k) = map(int, input().split())\n    l = [list(input()) for i in range(n)]\n    a = [[0 for j in range(m)] for i in range(n)]\n    b = [[0 for j in range(m)] for i in range(n)]\n    c = [[0 for j in range(m)] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if l[i][j] == '*' and i > 0 and (j > 0):\n                a[i][j] = a[i - 1][j - 1] + 1\n                if l[i - 1][j - 1] == '.':\n                    a[i][j] = 0\n            if l[i][j] == '*' and i > 0 and (j < m - 1):\n                b[i][j] = b[i - 1][j + 1] + 1\n                if l[i - 1][j + 1] == '.':\n                    b[i][j] = 0\n            c[i][j] = min(a[i][j], b[i][j])\n    l1 = draw(c, k)\n    if comp(l, l1):\n        print('YES')\n    else:\n        print('NO')", "from heapq import heappush, heappop\nfrom collections import deque\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    mat = []\n    for i in range(n):\n        s = input()\n        mat.append(s)\n    vis = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if mat[i][j] == '*':\n                x = i - 1\n                y = j - 1\n                c = 0\n                while x >= 0 and y >= 0 and (mat[x][y] == '*'):\n                    c += 1\n                    x -= 1\n                    y -= 1\n                x = i - 1\n                y = j + 1\n                d = 0\n                while x >= 0 and y < m and (mat[x][y] == '*'):\n                    d += 1\n                    x -= 1\n                    y += 1\n                if min(c, d) >= k:\n                    mn = min(c, d)\n                    vis[i][j] = 1\n                    x = i - 1\n                    y = j - 1\n                    c = 1\n                    while c <= mn and x >= 0 and (y >= 0):\n                        vis[x][y] = 1\n                        c += 1\n                        x -= 1\n                        y -= 1\n                    x = i - 1\n                    y = j + 1\n                    d = 1\n                    while d <= mn and x >= 0 and (y < m):\n                        vis[x][y] = 1\n                        d += 1\n                        x -= 1\n                        y += 1\n    b = 1\n    for i in range(n):\n        for j in range(m):\n            if mat[i][j] == '*':\n                if vis[i][j] == 0:\n                    b = 0\n                    break\n    if b == 1:\n        print('YES')\n    else:\n        print('NO')", "I = input\nfor _ in [0] * int(I()):\n    (n, m, k) = map(int, I().split())\n    a = [[*I()] for _ in [0] * n]\n    f = 0\n    while n:\n        n -= 1\n        for i in range(m):\n            j = 0\n            while j <= min(i, m - i - 1, n) and (t := a[n - j])[i - j] < '.' > t[i + j]:\n                j += 1\n            f |= a[n][i] == '*' and j <= k\n            if j > k:\n                while j:\n                    j -= 1\n                    t = a[n - j]\n                    t[i - j] = t[i + j] = '#'\n    print('YNEOS'[f::2])", "I = input\nfor _ in [0] * int(I()):\n    (n, m, k) = map(int, I().split())\n    (*a,) = ''.join((I() for _ in [0] * n))\n    n *= m\n    f = 0\n    while n:\n        n -= 1\n        l = 0\n        while l <= min(n % m, m - n % m - 1, n // m) and a[n - l * m - l] < '.' > a[n - l * m + l]:\n            l += 1\n        if l > k:\n            while l:\n                l -= 1\n                j = n - l * m\n                a[j - l] = a[j + l] = '#'\n        f |= a[n] == '*'\n    print('YNEOS'[f::2])", "I = input\nfor _ in [0] * int(I()):\n    (n, m, k) = map(int, I().split())\n    (*a,) = ''.join((I() for _ in [0] * n))\n    n *= m\n    f = 0\n    while n:\n        n -= 1\n        l = 0\n        j = n\n        while l <= min(n % m, m - n % m - 1, n // m) and a[j - l] < '.' > a[j + l]:\n            l += 1\n            j -= m\n        if l > k:\n            while l:\n                l -= 1\n                j += m\n                a[j - l] = a[j + l] = '!'\n        f |= a[n] == '*'\n    print('YNEOS'[f::2])", "I = input\nfor _ in [0] * int(I()):\n    (n, m, k) = map(int, I().split())\n    (*a,) = ''.join((I() for _ in [0] * n))\n    n *= m\n    f = 0\n    while n:\n        n -= 1\n        l = 0\n        j = n\n        while l <= min(n % m, m - n % m - 1, n // m) and a[j - l] < '.' > a[j + l]:\n            l += 1\n            j -= m\n        if l > k:\n            while l:\n                l -= 1\n                j += m\n                a[j - l] = a[j + l] = '!'\n        f |= a[n] == '*'\n    print('YNEOS'[f::2])", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    mat = []\n    start = set()\n    for i in range(r):\n        temp = []\n        for (j, ch) in enumerate(input()):\n            if ch == '*':\n                temp.append(1)\n                start.add((i, j))\n            else:\n                temp.append(0)\n        mat.append(temp)\n    seen = []\n    for i in range(r):\n        for j in range(c):\n            if (i, j) in start:\n                temp = []\n                (a, b) = (i, j)\n                (o, d) = (i, j)\n                p = -1\n                while a >= 0 and b >= 0 and (o >= 0) and (d < c) and mat[a][b] and mat[o][d]:\n                    p += 1\n                    temp.append((a, b))\n                    temp.append((o, d))\n                    a -= 1\n                    o -= 1\n                    b -= 1\n                    d += 1\n                if p >= k:\n                    seen += temp\n    if len(set(seen)) == len(start):\n        print('YES')\n    else:\n        print('NO')", "import math\nimport heapq\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nH = 1000000000 + 7\nfor _ in range(I()):\n    (n, m, k) = M()\n    l = []\n    d = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n):\n        l.append(S())\n    for i in range(n):\n        for j in range(m):\n            if l[i][j] == '*':\n                h = 1\n                while i - h >= 0 and j - h >= 0 and (j + h < m) and (l[i - h][j - h] == '*') and (l[i - h][j + h] == '*'):\n                    h += 1\n                if h - 1 >= k:\n                    for t in range(h):\n                        d[i - t][j - t] = 1\n                        d[i - t][j + t] = 1\n    f = 0\n    for i in range(n):\n        for j in range(m):\n            if d[i][j] == 0 and l[i][j] == '*':\n                f = 1\n                break\n        if f == 1:\n            break\n    if f == 1:\n        print('NO')\n    else:\n        print('YES')", "I = input\nfor _ in [0] * int(I()):\n    (n, m, k) = map(int, I().split())\n    a = [[*I()] for _ in [0] * n]\n    f = 0\n    while n:\n        n -= 1\n        i = m\n        while i:\n            i -= 1\n            j = 0\n            while j <= min(i, m - i - 1, n) and (t := a[n - j])[i - j] < '.' > t[i + j]:\n                j += 1\n            if j > k:\n                while j:\n                    j -= 1\n                    t = a[n - j]\n                    t[i - j] = t[i + j] = '#'\n            else:\n                f |= a[n][i] == '*'\n    print('YNEOS'[f::2])", "for _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    k += 1\n    a = []\n    b = []\n    for i in range(n):\n        s = input()\n        for j in range(m):\n            if s[j] == '*':\n                a.append((j, i))\n    for y in range(n, -1, -1):\n        for x in range(m, -1, -1):\n            bb = []\n            i = 0\n            while True:\n                if (x + i, y - i) in a:\n                    bb.append((x + i, y - i))\n                else:\n                    break\n                if (x - i, y - i) in a:\n                    bb.append((x - i, y - i))\n                else:\n                    break\n                if i >= k - 1:\n                    b += bb\n                i += 1\n    if set(a) == set(b):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    matrix = [list(input()) for _ in range(n)]\n    clr = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            flag = True\n            for d in range(k, min(i, j, m - j - 1) + 1):\n                for h in range(0, d + 1):\n                    if matrix[i - h][j + h] != '*' or matrix[i - h][j - h] != '*':\n                        flag = False\n                if flag:\n                    for h in range(0, d + 1):\n                        (clr[i - h][j - h], clr[i - h][j + h]) = (1, 1)\n    print('YES' if all((all(((matrix[i][j] == '*') == clr[i][j] for j in range(m))) for i in range(n))) else 'NO')"]