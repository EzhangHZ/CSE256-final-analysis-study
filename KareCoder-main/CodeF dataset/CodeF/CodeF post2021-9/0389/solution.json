["from collections import Counter\nfrom itertools import combinations\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    d = Counter(map(lambda x: x[-1], input().split()))\n    s = []\n    for (key, value) in d.items():\n        s += [int(key)] * min(value, 2)\n    if d['1'] >= 3:\n        s += [1]\n    fl = False\n    for combo in combinations(s, 3):\n        if sum(combo) % 10 == 3:\n            fl = True\n            break\n    print('YES') if fl else print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(input().split())\n    arr_t = ['003', '012', '049', '058', '067', '111', '139', '148', '157', '166', '229', '238', '247', '256', '337', '346', '355', '445', '599', '689', '779', '788']\n    arr = []\n    for x in a:\n        arr.append(x[-1])\n    arr = ''.join(sorted(arr))\n    hit = False\n    for x in arr_t:\n        a = False\n        b = False\n        if x[0] == x[1] and x[0] == x[2]:\n            if x[0] in arr and arr.count(x[0]) >= 3:\n                hit = True\n                break\n            else:\n                continue\n        elif x[0] == x[1]:\n            if x[0] in arr and arr.count(x[0]) >= 2 and (x[2] in arr):\n                hit = True\n                break\n            else:\n                continue\n        elif x[1] == x[2]:\n            if x[1] in arr and arr.count(x[1]) >= 2 and (x[0] in arr):\n                hit = True\n                break\n            else:\n                continue\n        elif x[1] in arr and x[2] in arr and (x[0] in arr):\n            hit = True\n            break\n    if hit:\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\nfrom itertools import combinations\nfor _ in range(int(input())):\n    n = int(input())\n    d = Counter(map(lambda x: x[-1], input().split()))\n    s = []\n    for (key, value) in d.items():\n        s += [int(key)] * min(value, 2)\n    if d['1'] >= 3:\n        s += [1]\n    fl = False\n    for combo in combinations(s, 3):\n        if sum(combo) % 10 == 3:\n            fl = True\n            break\n    print('YES') if fl else print('NO')", "from itertools import combinations_with_replacement\ncomb = [(x, y, z) for (x, y, z) in combinations_with_replacement([i for i in range(0, 10)], 3) if (x + y + z) % 10 == 3]\nm2 = []\nfor i in comb:\n    m3 = [0] * 10\n    for j in range(3):\n        m3[i[j] % 10] += 1\n    m2.append(m3)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = map(int, input().split())\n    m1 = [0] * 10\n    for i in a:\n        m1[i % 10] += 1\n    f = False\n    for i in m2:\n        fl = True\n        for j in range(10):\n            if m1[j] < i[j]:\n                fl = False\n        if fl:\n            f = True\n            break\n    if f:\n        print('YES')\n    else:\n        print('NO')", "import sys\nfrom collections import Counter\nfrom itertools import product\nsys.setrecursionlimit(2 * 10 ** 6)\n\ndef test():\n    pass\n\ndef main():\n    ns = list(range(10))\n    s3 = set()\n    for (a, b, c) in product(ns, ns, ns):\n        if (a + b + c) % 10 == 3:\n            s3.add(tuple(sorted([a, b, c])))\n    s3 = [Counter(ss3) for ss3 in s3]\n    N = int(input())\n    for _ in range(N):\n        _ = map(int, input().split())\n        arr = list(map(int, input().split()))\n        sa = Counter((n % 10 for n in arr))\n        for ss3 in s3:\n            for k in ss3.keys():\n                if sa[k] < ss3[k]:\n                    break\n            else:\n                print('YES')\n                break\n        else:\n            print('NO')\n\ndef init():\n    import sys\n    import os\n    if 'DOCKER_HOST' in os.environ:\n        test()\n        sys.stdin = open('test.txt')\ninit()\nmain()", "def f(arr, i, tm):\n    ans = False\n    for j in range(i + 1, n):\n        for k in range(j + 1, n):\n            tmp = arr[j] + arr[k]\n            tmp = tm % 10\n            if tmp == tm:\n                ans = True\n                break\n        if ans:\n            break\n    return ans\nt = int(input())\nfor _ in range(t):\n    ans = False\n    n = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ar = [0 for i in range(10)]\n    for ele in arr:\n        tm = ele % 10\n        ar[tm] += 1\n    ans = False\n    for i in range(10):\n        if ar[i] > 0:\n            ar[i] -= 1\n            for j in range(10):\n                if ar[j] > 0:\n                    ar[j] -= 1\n                    tm = 23 - i - j\n                    tm = tm % 10\n                    if ar[tm] > 0:\n                        ans = True\n                        break\n                    ar[j] += 1\n            ar[i] += 1\n            if ans:\n                break\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "def solve():\n    n = input()\n    arr = list(map(int, input().split()))\n    temp = [0] * 10\n    for i in arr:\n        temp[i % 10] += 1\n    for i in range(10):\n        if temp[i] > 0:\n            temp[i] -= 1\n            for j in range(10):\n                if temp[j] > 0:\n                    temp[j] -= 1\n                    for k in range(10):\n                        if temp[k] > 0:\n                            if (i + j + k) % 10 == 3:\n                                print('YES')\n                                return\n                    temp[j] += 1\n            temp[i] += 1\n    print('NO')\nfor T in range(int(input())):\n    solve()", "from collections import Counter\npatterns = []\nfor i in range(10):\n    for j in range(i, 10):\n        for k in range(j, 10):\n            if (i + j + k) % 10 == 3:\n                patterns.append(Counter([i, j, k]))\n\ndef check(d: dict):\n    for p in patterns:\n        if all((d[k] >= p[k] for k in p)):\n            return True\n    return False\n\ndef f():\n    n = int(input())\n    nums = map(int, input().split())\n    d = Counter((a % 10 for a in nums))\n    print('YES' if check(d) else 'NO')\nfor _ in range(int(input())):\n    f()", "def thething(data, sfreq):\n    freq = [0] * 10\n    for i in data:\n        freq[i % 10] += 1\n    for a in sfreq:\n        yes = True\n        for b in range(10):\n            if freq[b] - a[b] < 0:\n                yes = False\n        if yes:\n            print('YES')\n            return\n    print('NO')\nsfreq = []\nfor i in range(10):\n    for j in range(i, 10):\n        for k in range(j, 10):\n            if (i + j + k) % 10 == 3:\n                t1 = [0] * 10\n                t1[i] += 1\n                t1[j] += 1\n                t1[k] += 1\n                sfreq.append(t1)\nnum = int(input())\nfor n in range(num):\n    _num = int(input())\n    arr = [int(a) for a in input().split(' ')]\n    thething(arr, sfreq)", "from random import randint\nl = []\nfor i in range(10):\n    for j in range(i + 1):\n        for k in range(j + 1):\n            if (i + j + k) % 10 == 3:\n                l.append((i, j, k))\nfl = []\nfor (i, j, k) in l:\n    f = [0] * 10\n    f[i] += 1\n    f[j] += 1\n    f[k] += 1\n    fl.append(f)\nfor _ in range(int(input())):\n    n = int(input())\n    f = [0] * 10\n    for num in input().split():\n        d = int(num[-1])\n        f[d] += 1\n    ans = 'NO'\n    for pos in fl:\n        if all((x >= y for (x, y) in zip(f, pos))):\n            ans = 'YES'\n            break\n    print(ans)", "import math as m\ni = input()\ninp = []\nfor a in range(0, int(i)):\n    input()\n    inp.append([int(x) for x in input().split()])\n\ndef logic(arr):\n    counts = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    for n in arr:\n        counts[n % 10] += 1\n    arr = []\n    found = False\n    for i in range(10):\n        freq = counts[i]\n        if freq >= 3:\n            if i == 1:\n                return 'YES'\n            else:\n                arr += 2 * [i]\n        else:\n            arr += freq * [i]\n    n = len(arr)\n    for i in range(n - 2):\n        a = arr[i]\n        for j in range(i + 1, n - 1):\n            b = arr[j]\n            for k in range(j + 1, n):\n                if (a + b + arr[k]) % 10 == 3:\n                    return 'YES'\n    return 'NO'\nfor arr in inp:\n    print(logic(arr))", "filters = [0, 0, 3, 0, 1, 2, 0, 4, 9, 0, 5, 8, 0, 6, 7, 1, 1, 1, 1, 3, 9, 1, 4, 8, 1, 5, 7, 1, 6, 6, 2, 2, 9, 2, 3, 8, 2, 4, 7, 2, 5, 6, 3, 3, 7, 3, 4, 6, 3, 5, 5, 4, 4, 5, 5, 9, 9, 6, 8, 9, 7, 7, 9, 7, 8, 8]\nrules = []\none_to_ten = [_ for _ in range(10)]\nfor i in range(int(len(filters) / 3)):\n    _filter = filters[i * 3:i * 3 + 3]\n    _rule = {i: _filter.count(i) for i in one_to_ten}\n    rules.append({key: val for (key, val) in _rule.items() if val != 0})\n\ndef rule_applies(_counter, _rule):\n    for key in _rule.keys():\n        if _counter[key] < _rule[key]:\n            return False\n    return True\nfor i in range(int(input())):\n    n = int(input())\n    counter = [0] * 10\n    for num in input().split():\n        counter[int(num) % 10] += 1\n    for rule in rules:\n        if rule_applies(counter, rule):\n            print('YES')\n            break\n    else:\n        print('NO')", "from collections import defaultdict\n\ndef main():\n    t = int(input())\n    memo = [[0, 0, 3], [0, 1, 2], [0, 4, 9], [0, 5, 8], [0, 6, 7], [1, 1, 1], [1, 3, 9], [1, 4, 8], [1, 5, 7], [1, 6, 6], [2, 2, 9], [2, 3, 8], [2, 4, 7], [2, 5, 6], [3, 3, 7], [3, 4, 6], [3, 5, 5], [4, 4, 5], [5, 9, 9], [6, 8, 9], [7, 7, 9], [7, 8, 8]]\n    while t:\n        t -= 1\n        n = int(input())\n        arr = list(map(int, input().split()))\n        last = defaultdict(int)\n        for e in arr:\n            last[e % 10] += 1\n        unique = last.keys()\n        n = len(unique)\n        check(last, memo)\n\ndef check(last, memo):\n    for e in memo:\n        (i, j, k) = e\n        if i == 1 and j == 1 and (k == 1) and (last[1] >= 3):\n            print('YES')\n            return\n        if i == j and j != k and (last[i] >= 2) and (last[k] > 0):\n            print('YES')\n            return\n        if j == k and k != i and (last[j] >= 2) and (last[i] > 0):\n            print('YES')\n            return\n        if i != j and j != k and (last[i] > 0) and (last[j] > 0) and (last[k] > 0):\n            print('YES')\n            return\n    print('NO')\nmain()", "for t in range(int(input())):\n    n = int(input())\n    data = {i: 0 for i in range(10)}\n    for num in input().split():\n        a = int(num) % 10\n        data[a] += 1\n    in_use = {i: 0 for i in range(10)}\n    for i in range(10):\n        if data[i] == 0:\n            continue\n        in_use[i] += 1\n        check = False\n        for j in range(10):\n            if data[j] - in_use[j] == 0:\n                continue\n            in_use[j] += 1\n            sm = i + j\n            need = 10 * (sm // 10) + 3 - sm\n            if need < 0:\n                need += 10\n            if data[need] - in_use[need] != 0:\n                print('YES')\n                check = True\n                in_use[j] -= 1\n                break\n            in_use[j] -= 1\n        in_use[i] -= 1\n        if check:\n            break\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    old_nums = [int(x) % 10 for x in input().split()]\n    count = [0] * 10\n    nums = []\n    for i in old_nums:\n        if count[i] < 3:\n            count[i] += 1\n            nums.append(i)\n    pos = {}\n    for i in range(len(nums)):\n        if nums[i] not in pos:\n            pos[nums[i]] = i\n\n    def solve():\n        for i in range(2, len(nums)):\n            for j in range(1, i):\n                nums_k = (3 - nums[i] - nums[j]) % 10\n                if pos.get(nums_k, j) < j:\n                    print('YES')\n                    return\n        print('NO')\n    solve()", "from collections import Counter\n\ndef solve():\n    n = int(input())\n    arr = [int(i) % 10 for i in input().split()]\n    c = Counter(arr)\n    for i in range(10):\n        for j in range(i, 10):\n            for k in range(j, 10):\n                if (i + j + k) % 10 == 3:\n                    if i == j == k:\n                        if c[i] > 2:\n                            return 'YES'\n                    elif i == j:\n                        if c[i] > 1 and c[k] > 0:\n                            return 'YES'\n                    elif j == k:\n                        if c[j] > 1 and c[i] > 0:\n                            return 'YES'\n                    elif c[i] > 0 and c[j] > 0 and (c[k] > 0):\n                        return 'YES'\n    return 'NO'\n\ndef main():\n    for _ in range(int(input())):\n        print(solve())\n    return\nmain()", "l = []\nfor i in range(10):\n    for j in range(10):\n        for k in range(10):\n            if (i + j + k) % 10 == 3:\n                dic = {}\n                dic[i] = 1 + dic.get(i, 0)\n                dic[j] = 1 + dic.get(j, 0)\n                dic[k] = 1 + dic.get(k, 0)\n                l += [dic]\nfor i in range(int(input())):\n    n = int(input())\n    d = {}\n    for j in range(10):\n        d[j] = 0\n    arr = [int(I) % 10 for I in input().split()]\n    for i in arr:\n        d[i] += 1\n    for t in l:\n        flag2 = True\n        for i in t:\n            if t[i] > d[i]:\n                flag2 = False\n                break\n        if flag2:\n            break\n    if flag2:\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\nl = [i for i in range(10)]\ndp = []\nfor i in range(10):\n    for j in range(i, 10):\n        for k in range(j, 10):\n            if (i + j + k) % 10 == 3:\n                if i == j and j == k:\n                    dp.append([(i, 3)])\n                elif i == j:\n                    dp.append([(i, 2), (k, 1)])\n                elif j == k:\n                    dp.append([(i, 1), (k, 2)])\n                else:\n                    dp.append([(i, 1), (j, 1), (k, 1)])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    narr = list(map(lambda x: x % 10, arr))\n    d = defaultdict(int)\n    for x in narr:\n        d[x] += 1\n    flag = True\n    for per in dp:\n        ft = True\n        for req in per:\n            if d[req[0]] < req[1]:\n                ft = False\n                break\n        if ft:\n            print('YES')\n            flag = False\n            break\n    if flag:\n        print('NO')", "for i in range(int(input())):\n    n = int(input())\n    arr = [int(x) % 10 for x in input().split()]\n    data = [0 for x in range(10)]\n    for x in arr:\n        data[x] += 1\n    flag = False\n    l = 10\n    for a in range(l):\n        if data[a] < 1:\n            continue\n        for b in range(a, l):\n            if data[b] < 1:\n                continue\n            if a == b and data[a] < 2:\n                continue\n            for c in range(b, l):\n                if data[c] < 1:\n                    continue\n                if a == b and b == c and (data[a] < 3):\n                    continue\n                if b == c and data[b] < 2:\n                    continue\n                if (a + b + c) % 10 == 3:\n                    print('YES')\n                    flag = True\n                    break\n            if flag:\n                break\n        if flag:\n            break\n    if not flag:\n        print('NO')", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    num_list = [0] * 10\n    for i in a:\n        num_list[i % 10] += 1\n    for i in range(10):\n        for j in range(10):\n            num_list[i] -= 1\n            num_list[j] -= 1\n            if num_list[i] >= 0 and num_list[j] >= 0 and (num_list[(3 - (i + j)) % 10] >= 1):\n                print('YES')\n                break\n            num_list[i] += 1\n            num_list[j] += 1\n        else:\n            continue\n        break\n    else:\n        print('NO')", "sets = [{0, 1, 2}, {0, 9, 4}, {0, 8, 5}, {0, 6, 7}, {1, 3, 9}, {8, 1, 4}, {1, 5, 7}, {8, 2, 3}, {2, 4, 7}, {2, 5, 6}, {3, 4, 6}, {8, 9, 6}]\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(lambda x: int(x[-1]), input().split()))\n    cnt = [arr.count(i) for i in range(10)]\n    arr_set = set(arr)\n    if arr.count(1) >= 3:\n        print('YES')\n        continue\n    if cnt[0] >= 2 and cnt[3] >= 1 or (cnt[6] >= 2 and cnt[1] >= 1) or (cnt[2] >= 2 and cnt[9] >= 1) or (cnt[3] >= 2 and cnt[7] >= 1) or (cnt[5] >= 2 and cnt[3] >= 1) or (cnt[4] >= 2 and cnt[5] >= 1) or (cnt[9] >= 2 and cnt[5] >= 1) or (cnt[7] >= 2 and cnt[9] >= 1) or (cnt[8] >= 2 and cnt[7] >= 1):\n        print('YES')\n        continue\n    for subset in sets:\n        if subset.issubset(arr_set):\n            print('YES')\n            break\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(a) % 10 for a in input().split()]\n    count = {}\n    for a in arr:\n        count[a] = count.get(a, 0) + 1\n    flag = True\n    for (k1, v1) in count.items():\n        if 3 * k1 % 10 == 3 and v1 >= 3:\n            print('YES')\n            flag = False\n            break\n        for (k2, v2) in count.items():\n            if k1 != k2:\n                if (2 * k1 + k2) % 10 == 3 and v1 >= 2 or ((k1 + 2 * k2) % 10 == 3 and v2 >= 2):\n                    print('YES')\n                    flag = False\n                    break\n                for k3 in count:\n                    if k3 not in [k1, k2] and (k1 + k2 + k3) % 10 == 3:\n                        print('YES')\n                        flag = False\n                        break\n                if not flag:\n                    break\n        if not flag:\n            break\n    if flag:\n        print('NO')", "import sys\nimport collections\nimport bisect\nimport math\nfrom functools import lru_cache\nsys.setrecursionlimit(10 ** 6)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = sys.stdin.readline().split()\n    dic = {}\n    for num in arr:\n        x = int(num[-1])\n        if x not in dic:\n            dic[x] = 0\n        dic[x] += 1\n    flag = False\n    res = [[0, 0, 3], [0, 1, 2], [1, 1, 1], [0, 4, 9], [0, 5, 8], [0, 6, 7], [1, 3, 9], [1, 4, 8], [1, 5, 7], [1, 6, 6], [2, 2, 9], [2, 3, 8], [2, 4, 7], [2, 5, 6], [3, 3, 7], [3, 4, 6], [3, 5, 5], [4, 4, 5], [5, 9, 9], [6, 8, 9], [7, 7, 9], [7, 8, 8]]\n    ans = False\n    for l in res:\n        flag = True\n        for num in set(l):\n            if num not in dic or dic[num] < l.count(num):\n                flag = False\n                break\n        if flag:\n            ans = True\n            break\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [{0: 2, 3: 1}, {0: 1, 1: 1, 2: 1}, {0: 1, 4: 1, 9: 1}, {0: 1, 5: 1, 8: 1}, {0: 1, 6: 1, 7: 1}, {1: 3}, {1: 1, 3: 1, 9: 1}, {1: 1, 4: 1, 8: 1}, {1: 1, 5: 1, 7: 1}, {1: 1, 6: 2}, {2: 2, 9: 1}, {2: 1, 3: 1, 8: 1}, {2: 1, 4: 1, 7: 1}, {2: 1, 5: 1, 6: 1}, {3: 2, 7: 1}, {3: 1, 4: 1, 6: 1}, {3: 1, 5: 2}, {4: 2, 5: 1}, {5: 1, 9: 2}, {6: 1, 8: 1, 9: 1}, {7: 2, 9: 1}, {7: 1, 8: 2}]\n    a = [int(i) % 10 for i in input().strip().split()]\n    d = {}\n    for i in range(n):\n        d[a[i]] = d.get(a[i], 0) + 1\n    check = False\n    for ds in l:\n        check = True\n        for k in ds:\n            if d.get(k, 0) < ds[k]:\n                check = False\n                break\n        if check:\n            break\n    if check:\n        print('YES')\n    else:\n        print('NO')", "prs = [{0: 2, 3: 1}, {0: 1, 1: 1, 2: 1}, {0: 1, 4: 1, 9: 1}, {0: 1, 5: 1, 8: 1}, {0: 1, 6: 1, 7: 1}, {1: 3}, {1: 1, 3: 1, 9: 1}, {1: 1, 4: 1, 8: 1}, {1: 1, 5: 1, 7: 1}, {1: 1, 6: 2}, {2: 2, 9: 1}, {2: 1, 3: 1, 8: 1}, {2: 1, 4: 1, 7: 1}, {2: 1, 5: 1, 6: 1}, {3: 2, 7: 1}, {3: 1, 4: 1, 6: 1}, {3: 1, 5: 2}, {4: 2, 5: 1}, {5: 1, 9: 2}, {6: 1, 8: 1, 9: 1}, {7: 2, 9: 1}, {7: 1, 8: 2}]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    sl = {}\n    for x in a:\n        os = x % 10\n        if os not in sl:\n            sl[os] = 1\n        else:\n            sl[os] += 1\n    w = False\n    for pr in prs:\n        q = True\n        for r in pr.keys():\n            if r not in sl or pr[r] > sl[r]:\n                q = False\n                break\n        if q:\n            w = True\n            break\n    if w:\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\n\ndef makecondititions():\n    conditions = []\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                if (a + b + c) % 10 == 3:\n                    condition = defaultdict(int)\n                    for val in (a, b, c):\n                        condition[val] += 1\n                    conditions.append(condition)\n    return conditions\n\ndef check(mapping, conditions):\n    for condition in conditions:\n        if all([mapping[key] >= condition[key] for key in condition]):\n            return 'YES'\n    return 'NO'\nconditions = makecondititions()\nfor _ in range(int(input())):\n    n = int(input())\n    array = map(int, input().split(' '))\n    mapping = defaultdict(int)\n    for item in array:\n        mapping[item % 10] += 1\n    print(check(mapping, conditions))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    for i in range(n):\n        d[a[i] % 10] += 1\n    fl = False\n    for x in range(10):\n        for y in range(10):\n            z = (10 - (x + y) % 10) % 10\n            z = (z + 3) % 10\n            d[x] -= 1\n            d[z] -= 1\n            d[y] -= 1\n            if d[x] >= 0 and d[z] >= 0 and (d[y] >= 0):\n                fl = True\n                break\n            else:\n                d[x] += 1\n                d[y] += 1\n                d[z] += 1\n    if fl:\n        print('YES')\n    else:\n        print('NO')", "from itertools import combinations\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = [int(i) % 10 for i in input().split()]\n        a_set = set(a)\n        a_pair = []\n        for element in a_set:\n            for i in range(min(3, a.count(element))):\n                a_pair.append(element)\n        found = False\n        for combination in combinations(a_pair, 3):\n            if sum(combination) % 10 == 3:\n                found = True\n                break\n        if found:\n            print('YES')\n        else:\n            print('NO')\nmain()", "import sys\nfrom os import path\nfrom typing import List\n\ndef get_int():\n    if path.exists('input.txt'):\n        sys.stdin = open('input.txt', 'r')\n    input = int(sys.stdin.readline())\n    return input\n\ndef compute():\n    table: List[dict] = []\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                s = a + b + c\n                if s % 10 == 3:\n                    t = {}\n                    t[a] = 1\n                    if b not in t:\n                        t[b] = 1\n                    else:\n                        t[b] += 1\n                    if c not in t:\n                        t[c] = 1\n                    else:\n                        t[c] += 1\n                    table.append(t)\n    return table\nLOOKUP = compute()\n\ndef is_sat(buckets, solution: dict):\n    for (b, n) in solution.items():\n        if len(buckets[b]) < n:\n            return False\n    return True\n\ndef is_solved(buckets):\n    for solution in LOOKUP:\n        if is_sat(buckets, solution):\n            return True\n    return False\n\ndef solve(a):\n    buckets = {}\n    for i in range(10):\n        buckets[i] = []\n    for n in a:\n        b = n % 10\n        buckets[b].append(n)\n    if is_solved(buckets):\n        print('YES')\n        return\n    print('NO')\nnum_lines = get_int() if path.exists('input.txt') else int(sys.stdin.readline())\nwhile num_lines > 0:\n    sys.stdin.readline()\n    a = [int(t) for t in sys.stdin.readline().replace('\\n', '').split(' ')]\n    solve(a)\n    num_lines -= 1", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = [aa % 10 for aa in a]\n    numDict = defaultdict(int)\n    for aa in a:\n        numDict[aa] += 1\n    flag = False\n    for i in range(10):\n        for j in range(i, 10):\n            for k in range(j, 10):\n                if (i + j + k) % 10 == 3:\n                    if i != j and j != k and (k != i):\n                        if numDict[i] >= 1 and numDict[j] >= 1 and (numDict[k] >= 1):\n                            flag = True\n                    elif i == j and j != k:\n                        if numDict[i] >= 2 and numDict[k] >= 1:\n                            flag = True\n                    elif i != j and j == k:\n                        if numDict[j] >= 2 and numDict[i] >= 1:\n                            flag = True\n                    elif i == j and j == k:\n                        if numDict[i] >= 3:\n                            flag = True\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = [0 for i in range(10)]\n    for i in a:\n        q[i % 10] += 1\n    s = list(q)\n    c = False\n    for i in range(len(q)):\n        if q[i] == 0:\n            continue\n        q = list(s)\n        q[i] -= 1\n        t = list(q)\n        for j in range(len(q)):\n            if q[j] == 0:\n                continue\n            q = list(t)\n            q[j] -= 1\n            for k in range(len(q)):\n                if q[k] == 0:\n                    continue\n                if (i + j + k) % 10 == 3:\n                    print('YES')\n                    c = True\n                    break\n            if c:\n                break\n        if c:\n            break\n    if not c:\n        print('NO')", "import sys\ntry:\n    sys.stdin = open('input.txt')\nexcept FileNotFoundError:\n    pass\nq = []\nfor i in range(10):\n    for j in range(i, 10):\n        for k in range(j, 10):\n            if (i + j + k) % 10 == 3:\n                qq = [0 for i in range(10)]\n                qq[i] += 1\n                qq[j] += 1\n                qq[k] += 1\n                q.append(qq)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(j) % 10 for j in input().split()]\n    b = [0 for i in range(10)]\n    for j in a:\n        b[j] += 1\n    ww = 0\n    for j in q:\n        for k in range(10):\n            if b[k] < j[k]:\n                ww += 1\n                break\n    print('YES' if ww < len(q) else 'NO')", "sample = [[0, 0, 3], [0, 1, 2], [0, 4, 9], [0, 5, 8], [0, 6, 7], [1, 1, 1], [1, 3, 9], [1, 4, 8], [1, 5, 7], [1, 6, 6], [2, 2, 9], [2, 3, 8], [2, 4, 7], [2, 5, 6], [3, 3, 7], [3, 4, 6], [3, 5, 5], [4, 4, 5], [5, 9, 9], [6, 8, 9], [7, 7, 9], [7, 8, 8]]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = [el % 10 for el in a]\n    a.sort()\n    dic = {}\n    for el in a:\n        dic[el] = 0\n    for el in a:\n        dic[el] += 1\n    flag = False\n    for temp in sample:\n        if temp[0] in dic and temp[1] in dic and (temp[2] in dic):\n            dic[temp[0]] -= 1\n            dic[temp[1]] -= 1\n            dic[temp[2]] -= 1\n            if dic[temp[0]] >= 0 and dic[temp[1]] >= 0 and (dic[temp[2]] >= 0):\n                flag = True\n            dic[temp[0]] += 1\n            dic[temp[1]] += 1\n            dic[temp[2]] += 1\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\nfrom itertools import combinations\nfor _ in range(int(input())):\n    n = int(input())\n    counter = Counter((int(x) % 10 for x in input().split()))\n    for x in counter:\n        counter[x] = min(counter[x], 3)\n    if any((sum(x) % 10 == 3 for x in combinations(counter.elements(), 3))):\n        print('YES')\n    else:\n        print('NO')", "data = []\nfor i in range(10):\n    for j in range(10):\n        for k in range(10):\n            if (i + j + k) % 10 == 3:\n                data.append(str(i) + str(j) + str(k))\nfor i in range(int(input())):\n    yes = False\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for j in range(len(arr)):\n        arr[j] = str(arr[j] % 10)\n    s = ''.join(arr)\n    for j in data:\n        if all((k in s for k in j)) and j.count(j[0]) <= s.count(j[0]) and (j.count(j[1]) <= s.count(j[1])) and (j.count(j[2]) <= s.count(j[2])):\n            print('YES')\n            yes = True\n            break\n    if not yes:\n        print('NO')", "import collections\nimport itertools\nfor i in range(int(input())):\n    input()\n    counter = collections.Counter((int(x) % 10 for x in input().split()))\n    for x in counter:\n        counter[x] = min(3, counter[x])\n    print('YES' if any((sum(x) % 10 == 3 for x in itertools.combinations(counter.elements(), 3))) else 'NO')", "from collections import Counter\n\ndef sum_generator(total, num):\n    if num == 1:\n        yield (total,)\n    else:\n        for digit in range((total - 1) // num + 1, min(total, 9) + 1):\n            for way in sum_generator(total - digit, num - 1):\n                yield (way + (digit,))\n\ndef plans():\n    for t in range(3, 33, 10):\n        for way in sum_generator(t, 3):\n            yield Counter(way)\nnum_of_cases = int(input())\nfor case in range(num_of_cases):\n    input()\n    numbers = map(lambda s: int(s[-1]), input().split())\n    num_count = Counter(numbers)\n    for aplan in plans():\n        if all((aplan[dig] <= num_count[dig] for dig in aplan)):\n            print('YES')\n            break\n    else:\n        print('NO')", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (n,) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = defaultdict(int)\n    for i in a:\n        s[i % 10] += 1\n    f = False\n    c = [0] * 10\n    for i in range(10):\n        if c[i] == s[i]:\n            continue\n        c[i] += 1\n        for j in range(10):\n            if c[j] == s[j]:\n                continue\n            c[j] += 1\n            for k in range(10):\n                if c[k] == s[k]:\n                    continue\n                c[k] += 1\n                if (i + j + k) % 10 == 3:\n                    print('YES')\n                    f = True\n                    break\n                c[k] -= 1\n            if f:\n                break\n            c[j] -= 1\n        if f:\n            break\n        c[i] -= 1\n    if not f:\n        print('NO')", "import collections\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] = a[i] % 10\n    v = [[0, 0, 3], [0, 1, 2], [0, 4, 9], [0, 5, 8], [0, 6, 7], [1, 1, 1], [1, 3, 9], [1, 4, 8], [1, 5, 7], [1, 6, 6], [2, 2, 9], [2, 3, 8], [2, 4, 7], [2, 5, 6], [3, 3, 7], [3, 4, 6], [3, 5, 5], [4, 4, 5], [5, 9, 9], [6, 8, 9], [7, 7, 9], [7, 8, 8]]\n    d = collections.Counter(a)\n    find = False\n    for i in v:\n        c = collections.Counter(i)\n        ok = True\n        for j in c.keys():\n            if d[j] < c[j]:\n                ok = False\n        find = find or ok\n    if find:\n        print('YES')\n    else:\n        print('NO')", "ans = []\nfor i in range(10):\n    for j in range(10):\n        for k in range(10):\n            if (i + j + k) % 10 == 3:\n                ans.append([i, j, k])\nn = int(input())\nfor i in range(n):\n    z = int(input())\n    a = list(map(int, input().split()))\n    d = dict()\n    for k in range(z):\n        a[k] = a[k] % 10\n        if a[k] in d:\n            d[a[k]] += 1\n        else:\n            d[a[k]] = 1\n    flag = 0\n    for j in range(len(ans)):\n        if ans[j][0] in d and ans[j][1] in d and (ans[j][2] in d):\n            d[ans[j][0]] -= 1\n            d[ans[j][1]] -= 1\n            d[ans[j][2]] -= 1\n            if d[ans[j][0]] > -1 and d[ans[j][1]] > -1 and (d[ans[j][2]] > -1):\n                flag = 1\n                break\n            else:\n                d[ans[j][0]] += 1\n                d[ans[j][1]] += 1\n                d[ans[j][2]] += 1\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = get_list()\n    hm = [0 for _ in range(10)]\n    for i in range(n):\n        hm[arr[i] % 10] += 1\n    flag = 0\n    for i in range(10):\n        if hm[i] > 0:\n            hm[i] -= 1\n            for j in range(10):\n                if hm[j] > 0:\n                    hm[j] -= 1\n                    for k in range(10):\n                        if hm[k] > 0:\n                            hm[k] -= 1\n                            if (i + j + k) % 10 == 3:\n                                flag = 1\n                                break\n                            hm[k] += 1\n                    hm[j] += 1\n                    if flag == 1:\n                        break\n            if flag == 1:\n                break\n            hm[i] += 1\n    if flag == 1:\n        print('YES')\n        continue\n    print('NO')", "def findTriple(r):\n    for a in range(0, 10):\n        for b in range(0, 10):\n            c = (23 - a - b) % 10\n            if r[a] != 0 and r[b] != 0 and (r[c] != 0):\n                if a == b and b == c and (r[a] < 3):\n                    continue\n                if (a == b or b == c) and r[b] < 2:\n                    continue\n                if a == c and r[a] < 2:\n                    continue\n                print('YES')\n                return\n    print('NO')\n    return\nn = int(input())\nfor i in range(0, n):\n    amount = int(input())\n    rem = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    for j in input().split():\n        rem[int(j) % 10] = rem[int(j) % 10] + 1\n    findTriple(rem)", "import sys\nI = sys.stdin.readline\nO = sys.stdout.write\n\ndef three_sum(arr, n):\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (arr[i] + arr[j] + arr[k]) % 10 == 3:\n                    return 'YES'\n    return 'NO'\nt = int(I())\nfor _ in range(t):\n    n = int(I())\n    arr = list(map(int, I().split()))\n    d = dict()\n    for each in arr:\n        if each % 10 not in d:\n            d[each % 10] = 1\n        elif d[each % 10] < 3:\n            d[each % 10] += 1\n    set_arr = []\n    for (k, v) in d.items():\n        set_arr.extend([k] * v)\n    O(str(three_sum(set_arr, len(set_arr))) + '\\n')", "def solve():\n    n = int(input())\n    lis = list(map(int, input().split()))\n    cnt = [0] * 10\n    li = list()\n    for i in lis:\n        above = i % 10\n        cnt[above] += 1\n        if cnt[above] <= 3:\n            li.append(i)\n    m = len(li)\n    for i in range(m):\n        for j in range(i + 1, m):\n            for k in range(j + 1, m):\n                cur_val = li[i] + li[j] + li[k]\n                if cur_val % 10 == 3:\n                    print('YES')\n                    return\n    print('NO')\nfor _ in range(int(input())):\n    solve()", "def solve():\n    n = int(input())\n    lis = list(map(int, input().split()))\n    cnt = [0] * 10\n    li = list()\n    for i in lis:\n        above = i % 10\n        cnt[above] += 1\n        if cnt[above] <= 3:\n            li.append(i)\n    m = len(li)\n    for i in range(m):\n        for j in range(i + 1, m):\n            for k in range(j + 1, m):\n                cur_val = li[i] + li[j] + li[k]\n                if cur_val % 10 == 3:\n                    print('YES')\n                    return\n    print('NO')\nfor _ in range(int(input())):\n    solve()", "def find_3sum():\n    n = int(input())\n    a = [int(x) % 10 for x in input().split()]\n    freqDict = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0}\n    modList = []\n    mlLength = 0\n    for j in range(n):\n        if freqDict[a[j]] < 3:\n            freqDict[a[j]] += 1\n            modList.append(a[j])\n            mlLength += 1\n    for j in range(mlLength - 2):\n        for k in range(j + 1, mlLength - 1):\n            for l in range(k + 1, mlLength):\n                if (modList[j] + modList[k] + modList[l]) % 10 == 3:\n                    return 'YES'\n    return 'NO'\nt = int(input())\nfor i in range(t):\n    print(find_3sum())", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dp = [0] * 10\n    for x in arr:\n        dp[x % 10] += 1\n    flag = False\n    for i in range(10):\n        for j in range(10):\n            dp[i] -= 1\n            dp[j] -= 1\n            if dp[i] >= 0 and dp[j] >= 0 and (dp[(3 - (i + j)) % 10] >= 1):\n                flag = True\n            dp[i] += 1\n            dp[j] += 1\n    print('YES' if flag else 'NO')", "import collections\nimport itertools\nfor _ in range(int(input())):\n    input()\n    counter = collections.Counter((int(x) % 10 for x in input().split()))\n    for x in counter:\n        counter[x] = min(3, counter[x])\n    print('YES' if any((sum(x) % 10 == 3 for x in itertools.combinations(counter.elements(), 3))) else 'NO')", "p = lambda : map(int, input().split())\n\ndef solve():\n    n = int(input())\n    a = [k % 10 for k in p()]\n    cnt = [0] * 10\n    for k in a:\n        cnt[k] += 1\n    b = []\n    for i in range(10):\n        for j in range(min(cnt[i], 3)):\n            b += (i,)\n    for i in range(len(b)):\n        for j in range(i):\n            for k in range(j):\n                if (b[i] + b[j] + b[k]) % 10 == 3:\n                    print('YES')\n                    return\n    print('NO')\n    return\nt = int(input())\nfor _ in range(t):\n    solve()", "sample = [[0, 0, 3], [0, 1, 2], [0, 4, 9], [0, 5, 8], [0, 6, 7], [1, 1, 1], [1, 3, 9], [1, 4, 8], [1, 5, 7], [1, 6, 6], [2, 2, 9], [2, 3, 8], [2, 4, 7], [2, 5, 6], [3, 3, 7], [3, 4, 6], [3, 5, 5], [4, 4, 5], [5, 9, 9], [6, 8, 9], [7, 7, 9], [7, 8, 8]]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = [el % 10 for el in a]\n    a.sort()\n    dic = {}\n    for el in a:\n        dic[el] = 0\n    for el in a:\n        dic[el] += 1\n    flag = False\n    for temp in sample:\n        if temp[0] in dic and temp[1] in dic and (temp[2] in dic):\n            dic[temp[0]] -= 1\n            dic[temp[1]] -= 1\n            dic[temp[2]] -= 1\n            if dic[temp[0]] >= 0 and dic[temp[1]] >= 0 and (dic[temp[2]] >= 0):\n                flag = True\n            dic[temp[0]] += 1\n            dic[temp[1]] += 1\n            dic[temp[2]] += 1\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    n = int(input())\n    a = [int(i) % 10 for i in input().split()]\n    d = dict()\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    found = False\n    for i in range(10):\n        if d.get(i, 0) < 1:\n            continue\n        d[i] -= 1\n        for j in range(10):\n            if d.get(j, 0) < 1:\n                continue\n            d[j] -= 1\n            for k in range(10):\n                if d.get(k, 0) < 1:\n                    continue\n                d[k] -= 1\n                if (i + j + k) % 10 == 3:\n                    print('YES')\n                    found = True\n                    break\n                d[k] += 1\n            if found:\n                break\n            d[j] += 1\n        if found:\n            break\n        d[i] += 1\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    k = [0] * 10\n    a = list(map(int, input().split()))\n    for i in a:\n        k[i % 10] += 1\n    ans = 0\n    for i in range(10):\n        sm = 0\n        if k[i]:\n            k[i] -= 1\n            sm += i\n            for j in range(10):\n                sm = i\n                if k[j]:\n                    k[j] -= 1\n                    sm += j\n                    for l in range(10):\n                        sm = i + j\n                        if k[l]:\n                            k[l] -= 1\n                            sm += l\n                            if sm % 10 == 3:\n                                ans = 1\n                                break\n                            k[l] += 1\n                        if ans:\n                            break\n                    k[j] += 1\n                if ans:\n                    break\n            k[i] += 1\n        if ans:\n            break\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    x = int(input())\n    a = input().split()\n    k = 0\n    for i in range(8):\n        k += i\n    b = []\n    for i in a:\n        b.append(int(i[-1]))\n    d = {}\n    for i in b:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    e = 0\n    if 1 in d.keys():\n        if d[1] >= 3:\n            e = 1\n            print('YES')\n    if e == 0 and 3 in d.keys() and (0 in d.keys()):\n        if d[3] >= 1 and d[0] >= 2:\n            e = 1\n            print('YES')\n    op = 0\n    for i in range(8):\n        op += 1\n    if e == 0:\n        lor = []\n        for i in d.keys():\n            if d[i] == 1:\n                lor.append(i)\n            if d[i] >= 2:\n                lor.append(i)\n                lor.append(i)\n                d[i] = 0\n        badam = len(lor)\n        for i in range(badam):\n            if e == 1:\n                break\n            for j in range(i + 1, badam):\n                if e == 1:\n                    break\n                for k in range(j + 1, badam):\n                    f = lor[i] + lor[j] + lor[k]\n                    if str(f)[-1] == '3':\n                        print('YES')\n                        e = 1\n                        break\n    if e == 0:\n        print('NO')", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = [aa % 10 for aa in a]\n    numDict = defaultdict(int)\n    for aa in a:\n        numDict[aa] += 1\n    flag = False\n    for i in range(10):\n        for j in range(i, 10):\n            for k in range(j, 10):\n                if (i + j + k) % 10 == 3:\n                    if i != j and j != k and (k != i):\n                        if numDict[i] >= 1 and numDict[j] >= 1 and (numDict[k] >= 1):\n                            flag = True\n                    elif i == j and j != k:\n                        if numDict[i] >= 2 and numDict[k] >= 1:\n                            flag = True\n                    elif i != j and j == k:\n                        if numDict[j] >= 2 and numDict[i] >= 1:\n                            flag = True\n                    elif i == j and j == k:\n                        if numDict[i] >= 3:\n                            flag = True\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dp = [0] * 10\n    for x in arr:\n        dp[x % 10] += 1\n    flag = False\n    for i in range(10):\n        for j in range(10):\n            dp[i] -= 1\n            dp[j] -= 1\n            if dp[i] >= 0 and dp[j] >= 0 and (dp[(3 - (i + j)) % 10] >= 1):\n                flag = True\n            dp[i] += 1\n            dp[j] += 1\n    print('YES' if flag else 'NO')", "res = []\n\ndef Sum(nums, n):\n    c = [0] * 10\n    arr = []\n    for n in nums:\n        n %= 10\n        if c[n] + 1 <= 3:\n            c[n] += 1\n            arr.append(n)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if (arr[i] + arr[j] + arr[k]) % 10 == 3:\n                    res.append('YES')\n                    return\n    res.append('NO')\n    return\nt = int(input())\nwhile t:\n    m = int(input())\n    A = list(map(int, input().split()))\n    Sum(A, m)\n    t -= 1\nfor x in res:\n    print(x)", "t = int(input())\n\ndef threeSum(a, n):\n    newArr = []\n    count = [0] * 10\n    for item in a:\n        count[item] += 1\n    for i in range(10):\n        for j in range(min(count[i], 3)):\n            newArr.append(i)\n    m = len(newArr)\n    for i in range(m):\n        for j in range(i + 1, m):\n            for k in range(j + 1, m):\n                if (newArr[i] + newArr[j] + newArr[k]) % 10 == 3:\n                    return 'YES'\n    return 'NO'\nwhile t != 0:\n    a = []\n    n = int(input())\n    temp = input()\n    a = temp.split(' ')\n    a = list(map(lambda x: int(x) % 10, a))\n    print(threeSum(a, n))\n    t -= 1", "import collections\nimport itertools\nfor _ in range(int(input())):\n    input()\n    counter = collections.Counter((int(x) % 10 for x in input().split()))\n    for x in counter:\n        counter[x] = min(3, counter[x])\n    print('YES' if any((sum(x) % 10 == 3 for x in itertools.combinations(counter.elements(), 3))) else 'NO')", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dp = [0] * 10\n    for x in arr:\n        dp[x % 10] += 1\n    flag = False\n    for i in range(10):\n        for j in range(10):\n            dp[i] -= 1\n            dp[j] -= 1\n            if dp[i] >= 0 and dp[j] >= 0 and (dp[(3 - (i + j)) % 10] >= 1):\n                flag = True\n            dp[i] += 1\n            dp[j] += 1\n    print('YES' if flag else 'NO')", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    freq = [0] * 10\n    for i in arr:\n        freq[i % 10] += 1\n    flag = False\n    for i in range(10):\n        for j in range(10):\n            freq[i] -= 1\n            freq[j] -= 1\n            if freq[i] >= 0 and freq[j] >= 0 and (freq[(3 - (i + j)) % 10] >= 1):\n                flag = True\n            freq[i] += 1\n            freq[j] += 1\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    temp = input().split()\n    lasts = [int(i[-1]) for i in temp]\n    d = {}\n    for i in lasts:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    res = 0\n    if 1 in d.keys():\n        if d[1] >= 3:\n            res = 1\n            print('YES')\n    if res == 0 and 3 in d.keys() and (0 in d.keys()):\n        if d[3] >= 1 and d[0] >= 2:\n            res = 1\n            print('YES')\n    if res == 0:\n        newnums = []\n        for i in d.keys():\n            if d[i] == 1:\n                newnums.append(i)\n            if d[i] >= 2:\n                newnums.append(i)\n                newnums.append(i)\n                d[i] = 0\n        for i in range(len(newnums)):\n            if res == 1:\n                break\n            for j in range(i + 1, len(newnums)):\n                if res == 1:\n                    break\n                for k in range(j + 1, len(newnums)):\n                    su = newnums[i] + newnums[j] + newnums[k]\n                    if str(su)[-1] == '3':\n                        print('YES')\n                        res = 1\n                        break\n    if res == 0:\n        print('NO')", "from collections import Counter\n\ndef solve(n, a):\n    a = [ele % 10 for ele in a]\n    c = Counter(a)\n    new_a = []\n    for ele in c:\n        if c[ele] >= 3:\n            new_a.extend([ele, ele, ele])\n        elif c[ele] == 2:\n            new_a.extend([ele, ele])\n        else:\n            new_a.append(ele)\n    for i in range(len(new_a)):\n        for j in range(i + 1, len(new_a)):\n            for k in range(j + 1, len(new_a)):\n                if (new_a[i] + new_a[j] + new_a[k]) % 10 == 3:\n                    return 'YES'\n    return 'NO'\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(component) for component in input().split(' ')]\n    print(solve(n, a))", "t = int(input())\nwhile t:\n    n = int(input())\n    a = [int(x) % 10 for x in input().split()]\n    d = dict.fromkeys(a, 0)\n    li = []\n    for i in a:\n        d[i] += 1\n        if i == 1:\n            if d[i] <= 3:\n                li.append(i)\n        elif d[i] < 3:\n            li.append(i)\n    n = len(li)\n    ok = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (li[i] + li[j] + li[k]) % 10 == 3:\n                    print('YES')\n                    ok = 1\n                    break\n            if ok:\n                break\n        if ok:\n            break\n    else:\n        print('NO')\n    t -= 1", "def func(x):\n    return int(x) % 10\nfor _ in range(int(input())):\n    n = int(input())\n    a = [0 for i in range(10)]\n    l = list(map(func, input().split()))\n    for i in l:\n        a[i] += 1\n    t = []\n    t += a\n    flag = 0\n    for i in range(10):\n        if flag == 1:\n            break\n        t = []\n        t += a\n        ans = 0\n        if t[i] == 0:\n            continue\n        for j in range(10):\n            if flag == 1:\n                break\n            t = []\n            t += a\n            t[i] -= 1\n            if t[j] == 0:\n                continue\n            ans = i + j\n            t[j] -= 1\n            for k in range(10):\n                if t[k] == 0:\n                    continue\n                if (ans + k - 3) % 10 == 0:\n                    flag = 1\n                    break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "def solve(b):\n    for i in range(len(b)):\n        for j in range(i):\n            for k in range(j):\n                if (b[i] + b[j] + b[k]) % 10 == 3:\n                    return True\n    return False\nT = int(input())\nfor test in range(T):\n    N = int(input())\n    array = list(map(int, input().split()))\n    for i in range(N):\n        array[i] = array[i] % 10\n    b = []\n    for i in range(10):\n        for j in range(min(array.count(i), 3)):\n            b.append(i)\n    if solve(b):\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\nimport sys\nipt = sys.stdin.readline\nfor _ in range(int(input())):\n    n = ipt()\n    f = list(map(lambda x: int(x) % 10, ipt().split()))\n    c = Counter(f)\n    r = []\n    for (k, v) in c.items():\n        r += min(v, 3) * [k]\n    answ = 'NO'\n    for i in range(len(r) - 2):\n        if answ == 'YES':\n            break\n        for j in range(i + 1, len(r) - 1):\n            if answ == 'YES':\n                break\n            for k in range(j + 1, len(r)):\n                if (r[i] + r[j] + r[k]) % 10 == 3:\n                    answ = 'YES'\n                    break\n    print(answ)", "from collections import Counter, defaultdict\nfrom email.policy import default\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    modCounts = defaultdict(int)\n    for i in arr:\n        modCounts[i % 10] += 1\n    v = [[0, 0, 3], [0, 1, 2], [0, 4, 9], [0, 5, 8], [0, 6, 7], [1, 1, 1], [1, 3, 9], [1, 4, 8], [1, 5, 7], [1, 6, 6], [2, 2, 9], [2, 3, 8], [2, 4, 7], [2, 5, 6], [3, 3, 7], [3, 4, 6], [3, 5, 5], [4, 4, 5], [5, 9, 9], [6, 8, 9], [7, 7, 9], [7, 8, 8]]\n    bflag = 0\n    for c in v:\n        ll = Counter(c)\n        flag = 0\n        for (j, m) in ll.items():\n            if modCounts[j] < m:\n                flag = 1\n                break\n        if flag == 0:\n            bflag = 1\n            print('YES')\n            break\n    if bflag == 0:\n        print('NO')", "def find_3sum():\n    n = int(input())\n    a = [int(x) % 10 for x in input().split()]\n    arr = []\n    for x in a:\n        if arr.count(x) < 3:\n            arr.append(x)\n    l = len(arr)\n    cnt = 0\n    for i in range(l - 2):\n        for j in range(i + 1, l - 1):\n            for k in range(j + 1, l):\n                if (arr[i] + arr[j] + arr[k]) % 10 == 3:\n                    return 'YES'\n    return 'NO'\nt = int(input())\nfor _ in range(t):\n    print(find_3sum())", "t = int(input())\n\ndef solve():\n    n = int(input())\n    nums = input()\n    nums = [int(x) for x in nums.split()]\n    dict = {}\n    for i in range(0, 10):\n        dict[i] = 0\n    for i in range(len(nums)):\n        dict[nums[i] % 10] += 1\n    lista = []\n    for i in range(0, 10):\n        for j in range(min(3, dict[i])):\n            lista.append(i)\n    for i in range(len(lista)):\n        for j in range(i + 1, len(lista)):\n            for k in range(j + 1, len(lista)):\n                if (lista[i] + lista[j] + lista[k]) % 10 == 3:\n                    print('YES')\n                    return\n    print('NO')\nwhile t:\n    t = t - 1\n    solve()", "def solve():\n    n = int(input())\n    s = list(map(int, input().split()))\n    a = []\n    for x in s:\n        z = x % 10\n        if a.count(z) < 3:\n            a.append(z)\n    for i in range(len(a)):\n        for j in range(i):\n            for k in range(j):\n                if (a[i] + a[j] + a[k]) % 10 == 3:\n                    return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    print(solve())", "import sys\nimport collections\nfrom math import ceil, gcd, sqrt, log\nimport bisect\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    for i in range(n):\n        A[i] = A[i] % 10\n    A.sort()\n    B = [A[0]]\n    c = 1\n    for i in range(1, n):\n        if A[i] == B[-1] and c == 3:\n            continue\n        if A[i] == B[-1]:\n            B.append(A[i])\n            c += 1\n        else:\n            B.append(A[i])\n            c = 1\n    m = len(B)\n    for i in range(m - 2):\n        for j in range(i + 1, m - 1):\n            for k in range(j + 1, m):\n                if (B[i] + B[j] + B[k]) % 10 == 3:\n                    print('YES')\n                    return\n    print('NO')\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "def find_3sum():\n    n = int(input())\n    a = [int(x) % 10 for x in input().split()]\n    arr = []\n    for x in a:\n        if arr.count(x) < 3:\n            arr.append(x)\n    l = len(arr)\n    cnt = 0\n    for i in range(l - 2):\n        for j in range(i + 1, l - 1):\n            for k in range(j + 1, l):\n                if (arr[i] + arr[j] + arr[k]) % 10 == 3:\n                    return 'YES'\n    return 'NO'\nt = int(input())\nfor _ in range(t):\n    print(find_3sum())", "from collections import Counter\nt = int(input())\nfor k in range(t):\n    n = int(input())\n    arr = [int(i) % 10 for i in input().split()]\n    ct = Counter(arr)\n    out = []\n    kk = list(ct.keys())\n    kk.sort()\n    for key in kk:\n        maxRep = min(ct[key], 3)\n        for j in range(maxRep):\n            out.append(key)\n    l = len(out)\n    flag = False\n    for a in range(l):\n        for b in range(a + 1, l):\n            for c in range(b + 1, l):\n                if (out[a] + out[b] + out[c]) % 10 == 3:\n                    flag = True\n                    break\n            if flag:\n                break\n        if flag:\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "import collections\nt = int(input())\nfor _ in range(t):\n    input()\n    counts = collections.Counter([v[-1] for v in input().split()])\n    els = []\n    for (d, c) in counts.items():\n        for _ in range(min(c, 3)):\n            els.append(int(d))\n    res = False\n    for i in range(len(els)):\n        for j in range(i + 1, len(els)):\n            for k in range(j + 1, len(els)):\n                if (els[i] + els[j] + els[k]) % 10 == 3:\n                    res = True\n                    break\n            if res:\n                break\n        if res:\n            break\n    if res:\n        print('YES')\n    else:\n        print('NO')", "for t in range(int(input())):\n    input()\n    s = (*(x % 10 for x in [*map(int, input().split())]),)\n    l = []\n    cnt = 0\n    for i in range(10):\n        l.append(s.count(i))\n    for i in range(10):\n        l[i] -= 1\n        for j in range(i, 10):\n            l[j] -= 1\n            for k in range(j, 10):\n                l[k] -= 1\n                if l[i] >= 0 and l[j] >= 0 and (l[k] >= 0):\n                    if (i + j + k) % 10 == 3:\n                        cnt = 1\n                        break\n                l[k] += 1\n            if cnt:\n                break\n            l[j] += 1\n        if cnt:\n            break\n        l[i] += 1\n    print('YNEOS'[cnt != 1::2])", "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = dict()\n    for i in range(10):\n        d[i] = 0\n    for x in arr:\n        d[x % 10] += 1\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                if (i + j + k) % 10 == 3:\n                    if d[i] > 0:\n                        d[i] -= 1\n                        if d[j] > 0:\n                            d[j] -= 1\n                            if d[k] > 0:\n                                d[k] -= 1\n                                print('YES')\n                                return\n                            d[j] += 1\n                        d[i] += 1\n    print('NO')\nt = int(input())\nfor i in range(t):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                if (i + j + k) % 10 == 3:\n                    if i == j == k:\n                        if check[i] >= 3:\n                            return True\n                    elif i == j:\n                        if check[i] >= 2 and check[k] >= 1:\n                            return True\n                    elif j == k:\n                        if check[j] >= 2 and check[i] >= 1:\n                            return True\n                    elif i == k:\n                        if check[i] >= 2 and check[j] >= 1:\n                            return True\n                    elif check[i] >= 1 and check[j] >= 1 and (check[k] >= 1):\n                        return True\n    return False\nfor _ in range(int(input())):\n    n = int(input())\n    nums = [*map(lambda x: int(x) % 10, input().split())]\n    check = [0] * 10\n    for num in nums:\n        check[num] += 1\n    print('YES' if solve() else 'NO')", "class T:\n\n    def __init__(self):\n        self.l = [int(el) for el in input().split()]\n        self.a = [[0, 4, 9], [0, 5, 8], [0, 6, 7], [1, 3, 9], [1, 4, 8], [1, 5, 7], [1, 6, 6], [2, 2, 9], [2, 3, 8], [2, 4, 7], [2, 5, 6], [3, 3, 7], [3, 4, 6], [3, 5, 5], [4, 4, 5], [5, 9, 9], [6, 8, 9], [7, 7, 9], [7, 8, 8], [0, 1, 2], [1, 1, 1], [0, 0, 3]]\n        for i in range(len(self.l)):\n            self.l[i] = self.l[i] % 10\n\n    def mycheck(self):\n        for i in range(len(self.a)):\n            if self.l.count(self.a[i][0]) >= self.a[i].count(self.a[i][0]) and self.l.count(self.a[i][1]) >= self.a[i].count(self.a[i][1]) and (self.l.count(self.a[i][2]) >= self.a[i].count(self.a[i][2])):\n                return 'YES'\n        return 'NO'\n\n    def __repr__(self):\n        print(self.l)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a2 = T()\n    print(a2.mycheck())", "for t in range(int(input())):\n    n = int(input())\n    d2c = {}\n    for i in input().split():\n        d2c[int(i) % 10] = d2c.get(int(i) % 10, 0) + 1\n    i = 0\n    flag = 0\n    while flag == 0 and i < 10:\n        j = i\n        while flag == 0 and j < 10:\n            k = j\n            while flag == 0 and k < 10:\n                if (i + j + k) % 10 == 3:\n                    t2c = {}\n                    for t in (i, j, k):\n                        t2c[t] = t2c.get(t, 0) + 1\n                    if t2c[i] <= d2c.get(i, 0) and t2c[j] <= d2c.get(j, 0) and (t2c[k] <= d2c.get(k, 0)):\n                        flag = 1\n                k += 1\n            j += 1\n        i += 1\n    print('YES' if flag else 'NO')", "from collections import defaultdict\nfor _ in [0] * int(input()):\n    n = int(input())\n    a = [*map(int, input().split())]\n    d = defaultdict(lambda : 0)\n    ans = 'NO'\n    for i in a:\n        d[i % 10] += 1\n    for i in range(10):\n        for j in range(10):\n            k = (3 - i - j) % 10\n            if i == j == k and d[i] >= 3:\n                ans = 'YES'\n            if i == j != k and d[i] >= 2 and (d[k] >= 1):\n                ans = 'YES'\n            if i == k != j and d[i] >= 2 and (d[j] >= 1):\n                ans = 'YES'\n            if j == k != i and d[j] >= 2 and (d[i] >= 1):\n                ans = 'YES'\n            if i != j and j != k and (k != i) and (d[i] >= 1) and (d[j] >= 1) and (d[k] >= 1):\n                ans = 'YES'\n    print(ans)", "from collections import Counter\n\ndef solve():\n    input()\n    r = Counter()\n    a = []\n    for x in input().split():\n        x = int(x) % 10\n        r[x] += 1\n        if r[x] <= 3:\n            a.append(x)\n    for i in range(len(a)):\n        for j in range(i):\n            for k in range(j):\n                if (a[i] + a[j] + a[k]) % 10 == 3:\n                    return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    print(solve())", "from collections import defaultdict, deque, Counter\nfrom functools import lru_cache\nfrom heapq import heappush, heappop\nfrom bisect import bisect_right, bisect_left\n\ndef inpNum():\n    return int(input())\n\ndef inpStr():\n    return input()\n\ndef inpSepNum():\n    return map(int, input().split())\n\ndef inpNumList():\n    return list(map(int, input().split()))\n\ndef inpChList():\n    return list(input().split())\n\ndef find3Sum(unitDigitMap):\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                if (i + j + k) % 10 == 3:\n                    if i == j == k:\n                        if unitDigitMap[i] >= 3:\n                            return True\n                    elif i == j:\n                        if unitDigitMap[i] >= 2 and unitDigitMap[k] > 0:\n                            return True\n                    elif i == k:\n                        if unitDigitMap[i] >= 2 and unitDigitMap[j] > 0:\n                            return True\n                    elif j == k:\n                        if unitDigitMap[j] >= 2 and unitDigitMap[i] > 0:\n                            return True\n                    elif unitDigitMap[i] > 0 and unitDigitMap[j] > 0 and (unitDigitMap[k] > 0):\n                        return True\n    return False\ntc = inpNum()\nfor _ in range(tc):\n    n = inpNum()\n    nums = inpNumList()\n    unitDigitMap = defaultdict(int)\n    for i in nums:\n        unitDigitMap[i % 10] += 1\n    if find3Sum(unitDigitMap):\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\n\ndef solver():\n    n = int(input())\n    li2 = []\n    c = Counter()\n    for a in input().split():\n        a = int(a) % 10\n        c[a] += 1\n        if c[a] <= 3:\n            li2.append(a)\n    for j in range(len(li2)):\n        for k in range(j):\n            for l in range(k):\n                if (li2[j] + li2[k] + li2[l]) % 10 == 3:\n                    return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    print(solver())", "def read():\n    return list(map(int, input().split()))\n\ndef solve():\n    n = int(input())\n    a = read()\n    h = [0] * 10\n    for e in a:\n        h[e % 10] += 1\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                if (i + j + k) % 10 != 3:\n                    continue\n                h[i] -= 1\n                h[j] -= 1\n                h[k] -= 1\n                if h[i] >= 0 and h[j] >= 0 and (h[k] >= 0):\n                    print('YES')\n                    return\n                h[i] += 1\n                h[j] += 1\n                h[k] += 1\n    print('NO')\nt = int(input())\nfor i in range(t):\n    solve()", "a = []\nfor i in range(0, 10):\n    for j in range(0, 10):\n        for k in range(0, 10):\n            num = i + j + k\n            if num % 10 == 3:\n                a.append([i, j, k])\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    li = list(map(int, input().split()))\n    d = dict()\n    for i in range(n):\n        num = li[i] % 10\n        if num in d:\n            d[num] += 1\n        else:\n            d[num] = 1\n    y = 0\n    for i in range(len(a)):\n        tp = dict()\n        num1 = a[i][0]\n        num2 = a[i][1]\n        num3 = a[i][2]\n        if num1 in tp:\n            tp[num1] += 1\n        else:\n            tp[num1] = 1\n        if num2 in tp:\n            tp[num2] += 1\n        else:\n            tp[num2] = 1\n        if num3 in tp:\n            tp[num3] += 1\n        else:\n            tp[num3] = 1\n        c = 0\n        for j in tp:\n            if j in d:\n                if d[j] >= tp[j]:\n                    c += tp[j]\n        if c == 3:\n            y = 1\n            break\n    if y == 1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    cnt = [0] * 10\n    for i in input().split():\n        cnt[int(i[-1])] += 1\n    arr = []\n    for i in range(10):\n        arr = arr + [i] * min(cnt[i], 3)\n    m = len(arr)\n    flag = False\n    for i in range(m):\n        for j in range(i + 1, m):\n            for k in range(j + 1, m):\n                if (arr[i] + arr[j] + arr[k]) % 10 == 3:\n                    flag = True\n                    break\n            if flag:\n                break\n        if flag:\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = Counter(map(lambda x: x[-1], input().split()))\n    l = []\n    f = False\n    for (k, v) in d.items():\n        if v > 3:\n            l += [int(k)] * 3\n        else:\n            l += [int(k)] * v\n    f = False\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if (l[i] + l[j] + l[k]) % 10 == 3:\n                    f = True\n                    break\n            if f:\n                break\n        if f:\n            break\n    print('YES' if f else 'NO')", "from collections import Counter\n\ndef solve():\n    input()\n    r = Counter()\n    a = []\n    for x in input().split():\n        x = int(x) % 10\n        r[x] += 1\n        if r[x] <= 3:\n            a.append(x)\n    for i in range(len(a)):\n        for j in range(i):\n            for k in range(j):\n                if (a[i] + a[j] + a[k]) % 10 == 3:\n                    return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    print(solve())", "ret = []\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = dict()\n    for i in l:\n        k = i % 10\n        if k not in d:\n            d[k] = 0\n        d[k] += 1\n    for z in d:\n        x = min(3, d[z])\n        d[z] = x\n    li = []\n    for z in d:\n        for y in range(d[z]):\n            li.append(z)\n    l1 = len(li)\n    zzz = 0\n    for i in range(l1):\n        if zzz == 1:\n            break\n        for j in range(i + 1, l1):\n            if zzz == 1:\n                break\n            for k in range(j + 1, l1):\n                if (li[i] + li[j] + li[k]) % 10 == 3:\n                    ret.append('YES')\n                    zzz = 1\n                    break\n    if zzz == 0:\n        ret.append('NO')\nfor y in ret:\n    print(y)", "from collections import Counter\ni = int(input())\nfor x in range(i):\n    n = int(input())\n    l = list(map(int, input().split()))\n    arr = [x % 10 for x in l]\n    c = Counter(arr)\n    v = []\n    flag = False\n    for x in c:\n        v += [x] * min(3, c[x])\n    for i in range(len(v) - 2):\n        for j in range(i + 1, len(v) - 1):\n            for k in range(j + 1, len(v)):\n                if (v[i] + v[j] + v[k]) % 10 == 3:\n                    flag = True\n                    break\n                if flag:\n                    break\n            if flag:\n                break\n        if flag:\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "ans = []\nfor d1 in range(10):\n    for d2 in range(10):\n        for d3 in range(10):\n            if (d1 + d2 + d3) % 10 == 3:\n                s = [d1, d2, d3]\n                s.sort()\n                ans.append(s)\nans.sort()\nans2 = [ans[0]]\nfor i in range(1, len(ans)):\n    if ans[i] == ans[i - 1]:\n        continue\n    else:\n        ans2.append(ans[i])\nt = int(input())\nfor ooo in range(t):\n    N = int(input())\n    a = [int(i) % 10 for i in input().split()]\n    a.sort()\n    key = False\n    for i in ans2:\n        count = 0\n        for digit in i:\n            if i.count(digit) <= a.count(digit):\n                count += 1\n        if count == 3:\n            key = True\n            print('YES')\n            break\n    if key == False:\n        print('NO')", "from collections import Counter\n\ndef solve():\n    input()\n    r = Counter()\n    a = []\n    for x in input().split():\n        x = int(x) % 10\n        r[x] += 1\n        if r[x] <= 3:\n            a.append(x)\n    for i in range(len(a)):\n        for j in range(i):\n            for k in range(j):\n                if (a[i] + a[j] + a[k]) % 10 == 3:\n                    return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    print(solve())", "def determiner(counts):\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                if (i + j + k) % 10 == 3:\n                    if i == j == k and counts[i] > 2:\n                        return True\n                    elif i == j != k and counts[i] > 1 and (counts[k] > 0):\n                        return True\n                    elif i != j == k and counts[i] > 0 and (counts[k] > 1):\n                        return True\n                    elif i != j != k != i and counts[i] > 0 and (counts[j] > 0) and (counts[k] > 0):\n                        return True\n    return False\ntests = int(input())\nfor _ in range(tests):\n    length = int(input())\n    nums = list(map(int, input().split()))\n    counts = [0] * 10\n    for i in nums:\n        counts[i % 10] += 1\n    if determiner(counts):\n        print('YES')\n    else:\n        print('NO')"]