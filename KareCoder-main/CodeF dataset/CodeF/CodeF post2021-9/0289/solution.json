["import sys\nfrom math import gcd\nrd = sys.stdin.readline\nfor _ in range(int(rd())):\n    n = int(rd())\n    l = list(map(int, rd().split()))\n    g = l[0]\n    for i in l:\n        g = gcd(i, g)\n    if g == 1:\n        print(0)\n    else:\n        x = gcd(l[-1], n)\n        try:\n            y = gcd(l[-2], n - 1)\n        except:\n            pass\n        if gcd(g, x) == 1:\n            print(1)\n        elif gcd(g, y) == 1:\n            print(2)\n        else:\n            print(3)", "import sys\ninput = sys.stdin.readline\nfrom math import ceil, comb, gcd\nlist_input = lambda x=int: list(map(x, input().strip().split()))\nmult_input = lambda x=int: map(x, input().strip().split())\n\ndef solve():\n    n = int(input())\n    a = list_input()\n    k = a[0]\n    for i in a:\n        k = gcd(k, i)\n    if k == 1:\n        return 0\n    l = a[-1]\n    x = gcd(l, n)\n    k1 = gcd(k, x)\n    if k1 == 1:\n        return 1\n    l2 = a[-2]\n    x = gcd(l2, n - 1)\n    k = gcd(x, k)\n    if k == 1:\n        return 2\n    return 3\nfor _ in range(int(input())):\n    print(solve())", "import math\n\ndef fuc(n, lis):\n    g = lis[0]\n    for i in lis:\n        g = math.gcd(g, i)\n    if g == 1:\n        return 0\n    if math.gcd(n, g) == 1:\n        return 1\n    elif math.gcd(n - 1, g) == 1:\n        return 2\n    else:\n        return 3\nn = int(input())\nlis = []\nres = []\nfor _ in range(n):\n    i = int(input())\n    lis = list(map(int, input().split()))\n    res.append(fuc(i, lis))\nfor re in res:\n    print(re)", "def main():\n\n    def main():\n        T = readInt()\n        for _ in range(T):\n            N = readInt()\n            A = readInts()\n            print(solve(A, N))\n\n    def solve(A, N):\n        g = 0\n        for x in A:\n            g = gcd(g, x)\n        if g == 1:\n            return 0\n        if gcd(g, gcd(A[-1], N)) == 1:\n            return 1\n        if gcd(g, gcd(A[-2], N - 1)) == 1:\n            return 2\n        if gcd(gcd(g, gcd(A[-1], N)), gcd(A[-2], N - 1)) == 1:\n            return 3\n        else:\n            1 / 0\n    main()\nMOD = 10 ** 9 + 7\nimport sys\nfrom math import ceil, gcd\nfrom itertools import product\nfrom collections import deque, Counter, defaultdict\nfrom bisect import bisect_left, bisect_right, insort\nfrom pprint import pprint\nread = sys.stdin.readline\nreadString = lambda : read().strip()\nreadInt = lambda : int(readString())\nreadStrings = lambda delim=' ': readString().split(delim)\nreadInts = lambda delim=' ': [int(_) for _ in readStrings(delim)]\nmain()", "import sys, math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    gd = lst[0]\n    for i in lst[1:]:\n        gd = math.gcd(gd, i)\n    if gd == 1:\n        print(0)\n    elif math.gcd(gd, n) == 1:\n        print(1)\n    elif math.gcd(gd, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "from math import gcd\nt = int(input())\nanswers = []\nfor i in range(t):\n    n = int(input())\n    list = [int(i) for i in input().split()]\n    answer = 0\n    g = 0\n    for i in range(len(list)):\n        g = gcd(g, list[i])\n    if g == 1:\n        answer = 0\n    elif gcd(g, gcd(n, list[n - 1])) == 1:\n        answer = 1\n    elif gcd(g, gcd(n - 1, list[n - 2])) == 1:\n        answer = 2\n    else:\n        answer = 3\n    answers.append(answer)\nfor i in answers:\n    print(i)", "import sys\nimport math\n\ndef solve():\n    inp = sys.stdin.readline\n    n = int(inp())\n    a = list(map(int, inp().split()))\n    g = a[0]\n    for i in range(1, n):\n        g = math.gcd(g, a[i])\n    ans = 3\n    if math.gcd(g, n - 1) == 1:\n        ans = 2\n    if math.gcd(g, n) == 1:\n        ans = 1\n    if g == 1:\n        ans = 0\n    print(ans)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "from math import gcd\n\ndef GCD(a):\n    x = a[0]\n    for y in a[1:]:\n        x = gcd(x, y)\n    return x\nfor s in [*open(0)][2::2]:\n    a = [*map(int, s.split())]\n    if GCD(a) == 1:\n        print(0)\n    elif GCD(a[:-1] + [gcd(a[-1], len(a))]) == 1:\n        print(1)\n    elif GCD(a[:-2] + [gcd(a[-2], len(a) - 1)] + a[-1:]) == 1:\n        print(2)\n    else:\n        print(3)", "import sys\nimport math\n\ndef solve():\n    inp = sys.stdin.readline\n    n = int(inp())\n    a = list(map(int, inp().split()))\n    g = 0\n    for v in a:\n        g = math.gcd(g, v)\n    if g == 1:\n        ans = 0\n    else:\n        g = 0\n        for v in a[:n - 1]:\n            g = math.gcd(g, v)\n        g = math.gcd(g, math.gcd(a[-1], n))\n        if g == 1:\n            ans = 1\n        elif n > 1:\n            a[n - 2] = math.gcd(a[n - 2], n - 1)\n            g = 0\n            for v in a:\n                g = math.gcd(g, v)\n            if g == 1:\n                ans = 2\n            else:\n                ans = 3\n        else:\n            ans = 1\n    print(ans)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "import math\nimport sys\ninput = sys.stdin.readline\n\ndef readList():\n    return list(map(int, input().split()))\n\ndef readInt():\n    return int(input())\n\ndef readInts():\n    return map(int, input().split())\n\ndef readStr():\n    return input().strip()\n\ndef solve():\n    n = readInt()\n    arr = readList()\n    v = arr[0]\n    for i in range(1, n):\n        v = math.gcd(v, arr[i])\n    if v == 1:\n        return 0\n    (v1, v2) = (math.gcd(v, n), math.gcd(v, n - 1))\n    if v1 == 1:\n        return 1\n    elif v2 == 1:\n        return 2\n    else:\n        return 3\nfor _ in range(int(input())):\n    print(solve())", "import sys\nimport sys\nimport threading\nfrom math import *\nfrom bisect import *\nfrom collections import *\nfrom heapq import *\nfrom functools import lru_cache\n\ndef gl():\n    return list(map(int, input().split()))\n\ndef gi():\n    return int(input())\n\ndef gc():\n    return input()\ndd = defaultdict\ndq = deque\nhp = heappush\nhpp = heappop\nhpf = heapify\n\ndef solution():\n    n = gi()\n    arr = gl()\n    cur = arr[0]\n    for i in arr:\n        cur = gcd(i, cur)\n    if cur == 1:\n        return print(0)\n    if gcd(n, cur) == 1:\n        return print(1)\n    if gcd(n - 1, cur) == 1:\n        return print(2)\n    return print(3)\n\ndef main():\n    t = gi()\n    for i in range(t):\n        solution()\nmain()", "import sys\nfrom math import gcd\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = 0\n    b = []\n    for i in a:\n        g = gcd(g, i)\n        b.append(g)\n    if g == 1:\n        print(0)\n        continue\n    if n == 1:\n        print(1)\n        continue\n    if n == 2:\n        if gcd(gcd(n, a[n - 1]), a[n - 2]) == 1:\n            print(1)\n        elif gcd(gcd(n - 1, a[n - 2]), a[n - 1]) == 1:\n            print(2)\n        else:\n            print(3)\n        continue\n    if gcd(gcd(n, a[n - 1]), b[n - 2]) == 1:\n        print(1)\n    elif gcd(gcd(gcd(n - 1, a[n - 2]), b[n - 3]), a[n - 1]) == 1:\n        print(2)\n    else:\n        print(3)", "k = int(input())\nresult = []\n\ndef gcd(x, y):\n    if x < y:\n        (x, y) = (y, x)\n    while y != 0:\n        r = x % y\n        x = y\n        y = r\n    return x\nfor i in range(k):\n    n = int(input())\n    list = [int(x) for x in input().split()]\n    g = list[0]\n    for j in range(0, n):\n        g = gcd(g, list[j])\n        if g == 1:\n            cost = 0\n            result.append(cost)\n            break\n    if g != 1:\n        if gcd(g, n) == 1:\n            cost = 1\n            result.append(cost)\n        elif gcd(g, n - 1) == 1:\n            cost = 2\n            result.append(cost)\n        else:\n            cost = 3\n            result.append(cost)\nfor i in range(len(result)):\n    print(result[i])", "from math import gcd\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = a[0]\n    for i in a:\n        g = gcd(g, i)\n    if g == 1:\n        print(0)\n    elif gcd(g, n) == 1:\n        print(1)\n    elif gcd(g, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "import math\nimport functools\n\ndef gcd_list(l):\n    return functools.reduce(math.gcd, l)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if gcd_list(a) == 1:\n        print(0)\n    else:\n        b = gcd_list(a)\n        if math.gcd(b, n) == 1:\n            print(1)\n        elif math.gcd(b, n - 1) == 1:\n            print(2)\n        else:\n            print(3)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = 0\n    for i in l:\n        d = math.gcd(d, i)\n    if d == 1:\n        print(0)\n    elif math.gcd(d, n) == 1:\n        print(1)\n    elif math.gcd(d, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "import math\nt = int(input())\nfor t in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = arr[0]\n    if n == 1:\n        if arr[0] == 1:\n            print(0)\n        else:\n            print(1)\n    else:\n        for i in range(1, n):\n            x = math.gcd(arr[i], x)\n        if x == 1:\n            print(0)\n        elif math.gcd(x, n) == 1:\n            print(1)\n        elif math.gcd(x, n - 1) == 1:\n            print(2)\n        else:\n            print(3)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = 0\n    for i in a:\n        g = math.gcd(g, i)\n    if g == 1:\n        print(0)\n    elif math.gcd(g, n) == 1:\n        print(1)\n    elif n - 2 >= 0 and math.gcd(g, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "fl = 'input.txt'\n\ndef gcd(my_list):\n    result = my_list[0]\n    for x in my_list[1:]:\n        if result < x:\n            temp = result\n            result = x\n            x = temp\n        while x != 0:\n            temp = x\n            x = result % x\n            result = temp\n    return result\nimport sys\nimport math\nflh = sys.stdin\ntest_cases = int(flh.readline())\nres = []\nfor case in range(test_cases):\n    n = int(flh.readline())\n    a = [int(x) for x in flh.readline().strip().split()]\n    gcd1 = gcd(a)\n    if gcd1 == 1:\n        print(0)\n    elif gcd([gcd1, a[n - 1], n]) == 1:\n        print(1)\n    elif gcd([gcd1, a[n - 2], n - 1]) == 1:\n        print(2)\n    else:\n        print(3)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    g = arr[0]\n    for i in range(1, n):\n        g = math.gcd(arr[i], g)\n    if g == 1:\n        print(0)\n    elif n == 1:\n        print(1)\n    elif math.gcd(g, n) == 1:\n        print(1)\n    elif math.gcd(g, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = 0\n    for i in l:\n        d = math.gcd(d, i)\n    if d == 1:\n        print(0)\n    elif math.gcd(d, n) == 1:\n        print(1)\n    elif math.gcd(d, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "from math import gcd\nt = int(input())\nwhile t:\n    n = int(input())\n    nums = list(map(int, input().split()))\n    d = nums[0]\n    for i in range(1, len(nums)):\n        d = gcd(d, nums[i])\n    if d == 1:\n        print('0')\n    elif gcd(n, d) == 1:\n        print('1')\n    elif gcd(n - 1, d) == 1:\n        print('2')\n    else:\n        print('3')\n    t -= 1", "from math import gcd\n\ndef codeforces(a):\n    x = a[0]\n    ind = 1\n    n = len(a)\n    for i in a:\n        x = gcd(x, i)\n    if x == 1:\n        return 0\n    for i in a:\n        if gcd(ind, x) == 1:\n            ans = ind\n        ind += 1\n    return min(n - ans + 1, 3)\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    print(codeforces(a))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = 0\n    for i in l:\n        d = math.gcd(d, i)\n    if d == 1:\n        print(0)\n    elif math.gcd(d, n) == 1:\n        print(1)\n    elif math.gcd(d, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    d = 0\n    for i in s:\n        d = math.gcd(d, i)\n    if d == 1:\n        print(0)\n    elif math.gcd(d, n) == 1:\n        print(1)\n    elif math.gcd(d, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "T = int(input())\nfrom math import gcd\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    total = a[0]\n    for i in a:\n        total = gcd(total, i)\n    if total == 1:\n        print(0)\n        continue\n    prev = total\n    cost = 0\n    for i in range(n - 1, -1, -1):\n        if gcd(total, i + 1) == 1:\n            cost = n - i\n            break\n        curr = gcd(prev, i + 1)\n        if curr == 1:\n            cost = cost + n - i\n            break\n        if curr < prev:\n            cost = cost + n - i\n        prev = curr\n    print(cost)", "from math import gcd\nfor jj in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    if n == 1:\n        if arr[0] == 1:\n            print(0)\n        else:\n            print(1)\n    else:\n        t = arr[0]\n        for i in range(1, n):\n            t = gcd(t, arr[i])\n        if t == 1:\n            print(0)\n        elif gcd(t, n) == 1:\n            print(1)\n        elif gcd(t, n - 1) == 1:\n            print(2)\n        else:\n            print(3)", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    d = [*map(int, input().split())]\n    g = d[0]\n    for i in d:\n        g = math.gcd(g, i)\n    if g == 1:\n        print(0)\n        continue\n    if math.gcd(g, n) == 1:\n        print(1)\n    elif math.gcd(g, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    t = arr[0]\n    for el in arr:\n        t = gcd(t, el)\n    if t == 1:\n        print(0)\n    elif gcd(t, n) == 1:\n        print(1)\n    elif gcd(t, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "from math import *\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = [int(x) for x in input().split()]\n    gcd_arr = lst[0]\n    for i in range(1, n):\n        gcd_arr = gcd(gcd_arr, lst[i])\n    if gcd_arr == 1:\n        print(0)\n        continue\n    if n == 1:\n        print(1)\n        continue\n    last_gcd = gcd(lst[n - 1], n)\n    secondlast_gcd = gcd(lst[n - 2], n - 1)\n    if gcd(last_gcd, gcd_arr) == 1:\n        print(1)\n        continue\n    if gcd(secondlast_gcd, gcd_arr) == 1:\n        print(2)\n        continue\n    print(3)", "from math import gcd\n\ndef gcd_list(a):\n    t = a[0]\n    for x in a:\n        t = gcd(t, x)\n    return t\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if gcd_list(a) == 1:\n        print(0)\n    else:\n        t = a[-1]\n        a[-1] = gcd(a[-1], n)\n        if gcd_list(a) == 1:\n            print(1)\n        else:\n            a[-1] = t\n            a[-2] = gcd(a[-2], n - 1)\n            if gcd_list(a) == 1:\n                print(2)\n            else:\n                print(3)\nfor _ in range(int(input())):\n    solve()", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    d = [*map(int, input().split())]\n    g = d[0]\n    for i in d:\n        g = math.gcd(g, i)\n    if g == 1:\n        print(0)\n        continue\n    if math.gcd(g, n) == 1:\n        print(1)\n    elif math.gcd(g, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "import math\n\ndef solve(res):\n    g = res[0]\n    for i in range(1, len(res)):\n        g = math.gcd(g, res[i])\n    if g == 1:\n        return 0\n    elif math.gcd(g, len(res)) == 1:\n        return 1\n    elif math.gcd(g, len(res) - 1) == 1:\n        return 2\n    else:\n        return 3\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    res = list(map(int, input().split()))\n    print(solve(res))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    g = 0\n    for i in a:\n        g = math.gcd(g, i)\n    if g == 1:\n        print(0)\n    elif math.gcd(g, n) == 1:\n        print(1)\n    elif math.gcd(g, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "from math import *\n_ = int(input())\nfor i in range(_):\n    k = int(input())\n    lst = list(map(int, input().split()))\n    vgcd = lst[0]\n    for j in range(len(lst)):\n        vgcd = gcd(vgcd, lst[j])\n    if vgcd == 1:\n        print(0)\n    elif gcd(vgcd, k) == 1:\n        print(1)\n    elif gcd(vgcd, k - 1) == 1:\n        print(2)\n    else:\n        print(3)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = 0\n    for i in l:\n        d = math.gcd(d, i)\n    if d == 1:\n        print(0)\n    elif math.gcd(d, n) == 1:\n        print(1)\n    elif math.gcd(d, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    t = a[0]\n    for val in a:\n        t = gcd(val, t)\n    if t == 1:\n        print(0)\n    else:\n        c_t = t\n        t = gcd(n, t)\n        if t == 1:\n            print(1)\n        else:\n            c_t = gcd(n - 1, c_t)\n            if c_t == 1:\n                print(2)\n            else:\n                print(3)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = a[0]\n    for i in range(1, n):\n        g = math.gcd(g, a[i])\n    if g == 1:\n        print(0)\n        continue\n    g1 = math.gcd(g, n)\n    if g1 == 1:\n        print(1)\n        continue\n    g1 = math.gcd(g, n - 1)\n    if g1 == 1:\n        print(2)\n        continue\n    else:\n        print(3)\n        continue", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    d = [*map(int, input().split())]\n    g = d[0]\n    for i in d:\n        g = math.gcd(g, i)\n    if g == 1:\n        print(0)\n        continue\n    if math.gcd(g, n) == 1:\n        print(1)\n    elif math.gcd(g, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "import math\n\ndef solve():\n    n = int(input())\n    lst = list(map(int, input().split()))\n    GCD = lst[0]\n    for i in range(1, n):\n        GCD = math.gcd(lst[i], GCD)\n    if GCD == 1:\n        print(0)\n    elif math.gcd(n, lst[n - 1]) == 1 or math.gcd(GCD, math.gcd(n, lst[n - 1])) == 1:\n        print(1)\n    elif math.gcd(n - 1, lst[n - 2]) == 1 or math.gcd(GCD, math.gcd(n - 1, lst[n - 2])) == 1:\n        print(2)\n    else:\n        print(3)\nt = int(input())\nwhile t:\n    solve()\n    t = t - 1", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    g = 0\n    for i in range(n):\n        g = math.gcd(g, arr[i])\n    if g == 1:\n        print(0)\n        continue\n    if math.gcd(g, n) == 1:\n        print(1)\n    elif math.gcd(g, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "from math import gcd\nfor _ in range(int(input())):\n    a = int(input())\n    l = list(map(int, input().split()))\n    g = 0\n    for i in l:\n        g = gcd(g, i)\n    if g == 1:\n        print(0)\n    elif gcd(g, a) == 1:\n        print(1)\n    elif gcd(g, a - 1) == 1:\n        print(2)\n    else:\n        print(3)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = 0\n    for i in l:\n        d = math.gcd(d, i)\n    if d == 1:\n        print(0)\n    elif math.gcd(d, n) == 1:\n        print(1)\n    elif math.gcd(d, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = 0\n    for i in l:\n        d = math.gcd(d, i)\n    if d == 1:\n        print(0)\n    elif math.gcd(d, n) == 1:\n        print(1)\n    elif math.gcd(d, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        if a[0] == 1:\n            print(0)\n        else:\n            print(1)\n        continue\n    res = gcd(a[0], a[1])\n    for i in range(2, n):\n        res = gcd(res, a[i])\n    if res == 1:\n        print(0)\n    elif gcd(res, gcd(a[n - 1], n)) == 1:\n        print(1)\n    elif gcd(res, gcd(a[n - 2], n - 1)) == 1:\n        print(2)\n    else:\n        print(3)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    g = 0\n    for i in range(n):\n        g = gcd(g, s[i])\n    if g == 1:\n        print(0)\n    elif gcd(g, n) == 1:\n        print(1)\n    elif gcd(g, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = 0\n    for i in arr:\n        d = math.gcd(d, i)\n    if d == 1:\n        print(0)\n    elif math.gcd(d, n) == 1:\n        print(1)\n    elif math.gcd(d, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = 0\n    for i in arr:\n        d = math.gcd(d, i)\n    if d == 1:\n        print(0)\n    elif math.gcd(d, n) == 1:\n        print(1)\n    elif math.gcd(d, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "import math\n\ndef gcd_f(res):\n    g = res[0]\n    for i in range(1, len(res)):\n        g = math.gcd(g, res[i])\n    if g == 1:\n        return 0\n    elif math.gcd(g, len(res)) == 1:\n        return 1\n    elif math.gcd(g, len(res) - 1) == 1:\n        return 2\n    return 3\nfor _ in range(int(input())):\n    n = int(input())\n    a_arr = list(map(int, input().split()))\n    print(gcd_f(res=a_arr))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    ans = A[0]\n    for i in range(n):\n        ans = math.gcd(ans, A[i])\n    if ans == 1:\n        print(0)\n    elif math.gcd(ans, n) == 1:\n        print(1)\n    elif math.gcd(ans, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "from math import gcd\n\ndef gcd_arr(arr):\n    answer = arr[0]\n    for i in arr[1:]:\n        answer = gcd(answer, i)\n    return answer\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = list(map(int, input().split(' ')))\n    if gcd_arr(nums) == 1:\n        print(0)\n    elif gcd_arr(nums[:n - 1] + [gcd(nums[-1], n)]) == 1:\n        print(1)\n    elif gcd_arr(nums[:n - 2] + [gcd(nums[-2], n - 1)] + [nums[-1]]) == 1:\n        print(2)\n    else:\n        print(3)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = 0\n    for i in l:\n        d = math.gcd(d, i)\n    if d == 1:\n        print(0)\n    elif math.gcd(d, n) == 1:\n        print(1)\n    elif math.gcd(d, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    answer = l[0]\n    for i in range(n):\n        answer = math.gcd(answer, l[i])\n    if answer == 1:\n        print(0)\n    elif math.gcd(answer, n) == 1:\n        print(1)\n    elif math.gcd(answer, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "import math\nimport bisect\nfrom collections import Counter\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in l:\n        ans = math.gcd(ans, i)\n    if ans == 1:\n        print(0)\n    elif math.gcd(ans, n) == 1:\n        print(1)\n    elif math.gcd(ans, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = 0\n    for i in a:\n        g = math.gcd(g, i)\n    ans = 0\n    if g == 1:\n        ans = 0\n    elif math.gcd(g, n) == 1:\n        ans = 1\n    elif math.gcd(g, n - 1) == 1:\n        ans = 2\n    else:\n        ans = 3\n    print(ans)", "import sys, math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = 0\n    for i in range(n):\n        c = math.gcd(a[i], c)\n    if c == 1:\n        print(0)\n    elif n == 1 or math.gcd(n, c) == 1:\n        print(1)\n    elif math.gcd(n - 1, c) == 1:\n        print(2)\n    else:\n        print(3)", "from math import gcd\nprimes = [1, 2, 3, 5, 7, 11, 13, 17, 19]\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = a[0]\n    for x in a[1:]:\n        g = gcd(g, x)\n    if g == 1:\n        print(0)\n        return\n    if gcd(g, n) == 1:\n        print(1)\n        return\n    if gcd(g, n - 1) == 1:\n        print(2)\n        return\n    print(3)\nfor _ in range(int(input())):\n    main()", "from math import gcd\ntest = int(input())\nfor t in range(test):\n    n = int(input())\n    A = list(map(int, input().split()))\n    s = 0\n    for i in A:\n        s = gcd(s, i)\n    if s == 1:\n        print(0)\n    elif gcd(s, n) == 1:\n        print(1)\n    elif gcd(s, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "import math\nt = int(input())\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = arr[0]\n    for i in range(1, n):\n        x = math.gcd(x, arr[i])\n    if x == 1:\n        print(0)\n    elif n == 1:\n        print(1)\n    else:\n        k = arr[-1]\n        arr[-1] = math.gcd(n, k)\n        y = arr[0]\n        for i in range(1, n):\n            y = math.gcd(y, arr[i])\n        if y == 1:\n            print(1)\n            return\n        arr[-1] = k\n        k = arr[-2]\n        arr[-2] = math.gcd(n - 1, k)\n        y = arr[0]\n        for i in range(1, n):\n            y = math.gcd(y, arr[i])\n        if y == 1:\n            print(2)\n            return\n        arr[-2] = k\n        print(3)\nwhile t:\n    solve()\n    t -= 1", "import math\nN = 100010\na = [0] * N\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a[1:n + 1] = list(map(int, input().split()))\n    gcd = a[1]\n    for i in range(1, n + 1):\n        gcd = math.gcd(gcd, a[i])\n    if gcd == 1:\n        print(0)\n    elif math.gcd(math.gcd(n, a[n]), gcd) == 1:\n        print(1)\n    elif math.gcd(math.gcd(n - 1, a[n - 1]), gcd) == 1:\n        print(2)\n    else:\n        print(3)", "def helper(arr):\n    ans = 0\n    import math\n\n    def checker(arr):\n        g = arr[-1]\n        for i in range(len(arr) - 1, -1, -1):\n            g = math.gcd(g, arr[i])\n        return g\n    res = checker(arr)\n    if res == 1:\n        return 0\n    if len(arr) == 1:\n        return 1\n    t1 = math.gcd(arr[-1], len(arr))\n    arr1 = arr[:]\n    arr1[-1] = t1\n    t2 = math.gcd(arr[-2], len(arr) - 1)\n    arr2 = arr[:]\n    arr2[-2] = t2\n    if checker(arr1) == 1:\n        return 1\n    if checker(arr2) == 1:\n        return 2\n    else:\n        return 3\nfor i in range(int(input())):\n    n = int(input())\n    print(helper(list(map(int, input().split()))))", "from math import *\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = a[0]\n    for j in range(1, n):\n        g = gcd(g, a[j])\n    if g == 1:\n        print(0)\n    elif gcd(g, n) == 1:\n        print(1)\n    elif gcd(g, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "def gcd(a: int, b: int):\n    while a != 0 and b != 0:\n        if a >= b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n\ndef gcd_a(a: list):\n    res = a[0]\n    for i in range(1, len(a)):\n        res = gcd(res, a[i])\n    return res\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = gcd_a(a)\n    if g == 1:\n        print(0)\n    elif gcd(g, n) == 1:\n        print(1)\n    elif gcd(g, n - 1) == 1:\n        print(2)\n    else:\n        print(3)\n\ndef main():\n    k = int(input())\n    for _ in range(k):\n        solve()\nmain()", "from typing import *\nfrom collections import *\nfrom math import *\nfrom functools import *\nINF = 1061109567\n\ndef RI():\n    return int(input())\n\ndef RAI():\n    return [int(i) for i in input().split()]\n\ndef RAI_1():\n    return [INF] + RAI()\n\ndef slove():\n    n = RI()\n    a = RAI()\n    s = reduce(gcd, a)\n    if s == 1:\n        print(0)\n        return\n    if gcd(s, gcd(n, a[n - 1])) == 1:\n        print(1)\n        return\n    if gcd(s, gcd(n - 1, a[n - 2])) == 1:\n        print(2)\n        return\n    print(3)\n\ndef main():\n    t = 1\n    t = RI()\n    for _ in range(t):\n        slove()\nmain()", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    A = [int(i) for i in input().split()]\n    from math import gcd\n    g = A[0]\n    for i in A:\n        g = gcd(i, g)\n    if g == 1:\n        print(0)\n        continue\n    elif gcd(g, gcd(n, A[n - 1])) == 1:\n        print(1)\n    elif gcd(g, gcd(gcd(n, A[n - 1]), A[n - 2])) == 1:\n        print(1)\n    elif gcd(g, gcd(n - 1, A[n - 2])) == 1:\n        print(2)\n    elif gcd(g, gcd(gcd(n - 1, A[n - 2]), A[n - 1])) == 1:\n        print(2)\n    else:\n        print(3)", "from math import gcd\nt = int(input(''))\nfor j in range(t):\n    n = int(input(''))\n    l = list(map(int, input('').split()))\n    g = l[0]\n    if n == 1:\n        if l[0] == 1:\n            print(0)\n        else:\n            print(1)\n        continue\n    if n == 2:\n        if gcd(l[0], l[1]) == 1:\n            print(0)\n            continue\n        a = gcd(l[1], 2)\n        if gcd(g, a) == 1:\n            print(1)\n        else:\n            print(2)\n        continue\n    for i in range(0, n - 1):\n        g = gcd(g, l[i + 1])\n    c = 0\n    e = 0\n    if g == 1:\n        print(0)\n        continue\n    for i in range(n - 1, n - 4, -1):\n        a = gcd(l[i], i + 1)\n        if gcd(a, g) == 1:\n            print(n - i)\n            e = 1\n            break\n    if e == 0:\n        print(3)", "import math\nT = int(input())\nfor aa in range(T):\n    input()\n    ques = list(map(int, input().split()))\n    if ques == [1]:\n        print(0)\n        continue\n    if len(ques) == 1:\n        print(1)\n        continue\n    all_gcd = math.gcd(ques[0], ques[1])\n    for i in range(2, len(ques)):\n        all_gcd = math.gcd(all_gcd, ques[i])\n        if all_gcd == 1:\n            break\n    if all_gcd == 1:\n        print(0)\n        continue\n    gcd_ai = math.gcd(ques[-1], len(ques))\n    gcd_ai_1 = math.gcd(ques[-2], len(ques) - 1)\n    if math.gcd(all_gcd, gcd_ai) == 1:\n        print(1)\n        continue\n    if math.gcd(all_gcd, gcd_ai_1) == 1:\n        print(2)\n        continue\n    print(3)", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return abs(x)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        if l[0] == 1:\n            print(0)\n        else:\n            print(1)\n        continue\n    g = gcd(l[0], l[1])\n    for i in range(2, len(l)):\n        g = gcd(g, l[i])\n    if g == 1:\n        print(0)\n    elif gcd(g, n) == 1:\n        print(1)\n    elif gcd(g, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "import math\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        g = arr[0]\n        for i in range(n):\n            g = math.gcd(g, arr[i])\n        print(str(get_answ(g, n)))\n\ndef get_answ(g, n):\n    rez = 0\n    if g == 1:\n        return rez\n    elif math.gcd(g, n) == 1:\n        rez = 1\n    elif math.gcd(g, n - 1) == 1:\n        rez = 2\n    else:\n        rez = 3\n    return rez\nmain()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    num = list(map(int, input().split()))\n    ans = num[0]\n    for i in range(n):\n        ans = math.gcd(ans, num[i])\n    if ans == 1:\n        print(0)\n    elif math.gcd(ans, n) == 1:\n        print(1)\n    elif math.gcd(ans, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "def find_gcd(my_list):\n    result = my_list[0]\n    for x in my_list[1:]:\n        if result < x:\n            temp = result\n            result = x\n            x = temp\n        while x != 0:\n            temp = x\n            x = result % x\n            result = temp\n    return result\nnum_tests = int(input())\nfor _ in range(num_tests):\n    L = int(input())\n    arr = list(map(int, input().split()))\n    cost = 0\n    gcd = find_gcd(arr)\n    if gcd == 1:\n        print('0')\n    elif find_gcd([find_gcd([arr[-1], L]), gcd]) == 1:\n        print('1')\n    elif find_gcd([find_gcd([arr[-2], L - 1]), gcd]) == 1:\n        print('2')\n    else:\n        print('3')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = 0\n    for i in l:\n        d = math.gcd(d, i)\n    if d == 1:\n        print(0)\n    elif math.gcd(d, n) == 1:\n        print(1)\n    elif math.gcd(d, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "import math\n\ndef gcd(arr):\n    ans = arr[0]\n    for i in arr:\n        ans = math.gcd(ans, i)\n    return ans\n\ndef fun(arr, n):\n    if gcd(arr) == 1:\n        return 0\n    temp = arr[-1]\n    arr[-1] = math.gcd(arr[-1], n)\n    if gcd(arr) == 1:\n        return 1\n    arr[-1] = temp\n    arr[-2] = math.gcd(arr[-2], n - 1)\n    if gcd(arr) == 1:\n        return 2\n    else:\n        return 3\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(fun(arr, n))\n    t = t - 1", "import math\nT = int(input())\nfor tc in range(T):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    ans = l1[0]\n    for i in range(1, len(l1)):\n        ans = math.gcd(ans, l1[i])\n    if ans == 1:\n        print(0)\n    elif math.gcd(ans, n) == 1:\n        print(1)\n    elif math.gcd(ans, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "def find_gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef find_gcd_arr(arr, lenarr):\n    result = arr[0]\n    for x in range(lenarr):\n        result = find_gcd(result, arr[x])\n    return result\nt = int(input())\nfor x in range(t):\n    arrLen = int(input())\n    arr = list(map(int, input().split()))\n    gcdArr = find_gcd_arr(arr, arrLen)\n    if gcdArr == 1:\n        print(0)\n    elif find_gcd(gcdArr, arrLen) == 1:\n        print(1)\n    elif find_gcd(gcdArr, arrLen - 1) == 1:\n        print(2)\n    else:\n        print(3)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = 0\n    for i in a:\n        x = gcd(x, i)\n    if x == 1:\n        print(0)\n    elif gcd(x, n) == 1:\n        print(1)\n    elif gcd(x, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    gcd = arr[0]\n    for i in arr:\n        gcd = find_gcd(gcd, i)\n    if gcd == 1:\n        print(0)\n    elif find_gcd(gcd, n) == 1:\n        print(1)\n    elif find_gcd(gcd, n - 1) == 1:\n        print(2)\n    else:\n        print(3)\n    t -= 1", "from math import gcd\nimport copy\n\ndef Gcd(L):\n    a = L[0]\n    n = len(L)\n    for i in range(1, n):\n        a = gcd(L[i], a)\n    return a\nfor _ in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split()))\n    if Gcd(L) == 1:\n        print(0)\n    elif gcd(Gcd(L), n) == 1:\n        print(1)\n    elif gcd(Gcd(L), n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = 0\n    for i in l:\n        d = math.gcd(d, i)\n    if d == 1:\n        print(0)\n    elif math.gcd(d, n) == 1:\n        print(1)\n    elif math.gcd(d, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "t = int(input())\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef isPrime(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    v = arr[0]\n    for el in arr:\n        v = gcd(v, el)\n    if v == 1:\n        print(0)\n    else:\n        res = None\n        for i in range(n, 0, -1):\n            if gcd(v, i) == 1:\n                res = n - i + 1\n                break\n        print(min(res, 3))", "from math import gcd\n\ndef gcdArray(arr, idx=0):\n    if idx == len(arr) - 1:\n        return arr[idx]\n    a = arr[idx]\n    b = gcdArray(arr, idx + 1)\n    return gcd(a, b)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        (*a,) = map(int, input().split())\n        g = gcdArray(a)\n        if g == 1:\n            print(0)\n        elif gcdArray([g, n]) == 1:\n            print(1)\n        elif gcdArray([g, n - 1]) == 1:\n            print(2)\n        else:\n            print(3)\nmain()", "def ii(a=False):\n    i = input().split()\n    try:\n        if len(i) == 1 and (not a):\n            return int(i[0])\n        return list(map(int, i))\n    except Exception:\n        if len(i) == 1 and (not a):\n            return i[0]\n        return i\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nfor _ in range(ii()):\n    n = ii()\n    a = ii(True)\n    g = a[0]\n    for i in a:\n        g = gcd(g, i)\n    if g == 1:\n        print(0)\n    elif gcd(g, n) == 1:\n        print(1)\n    elif gcd(g, n - 1) == 1:\n        print(2)\n    else:\n        print(3)\n    pass", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return abs(x)\n\ndef solve(a):\n    if len(a) == 1 and a[0] == 1:\n        return 0\n    gcd_ = a[0]\n    for i in range(1, len(a)):\n        if a[i] == 1:\n            return 0\n        gcd_ = gcd(gcd_, a[i])\n    if gcd_ == 1:\n        return 0\n    gcd_acum = gcd_\n    cost_acum = 0\n    for i in range(len(a) - 1, -1, -1):\n        gcd_ai = gcd(a[i], i + 1)\n        cur_cost = len(a) - i\n        if gcd_ai == 1:\n            return cur_cost\n        if gcd(gcd_, gcd_ai) == 1:\n            return cur_cost\n        gcd_acum = gcd(gcd_acum, gcd_ai)\n        cost_acum += cur_cost\n        if gcd_acum == 1:\n            return cost_acum\nt = int(input())\nfor _ in range(t):\n    n = input()\n    a = [int(e) for e in input().split()]\n    print(solve(a))", "import math\n\ndef gcd(x, y):\n    if x == 0:\n        return y\n    else:\n        return gcd(y % x, x)\nfor _ in range(int(input())):\n    n = int(input())\n    num = list(map(int, input().split()))\n    lst = num.copy()\n    d = 0\n    for i in range(n):\n        d = gcd(d, num[i])\n    if d == 1:\n        print(0)\n    elif gcd(d, n) == 1:\n        print(1)\n    elif gcd(d, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "from math import *\nfor _ in range(int(input())):\n    x = int(input())\n    l = list(map(int, input().split()))\n    c = l[0]\n    for i in range(x):\n        c = gcd(c, l[i])\n    if c == 1:\n        print(0)\n    else:\n        c = l[0]\n        m = l[-1]\n        l[-1] = gcd(x, l[-1])\n        for i in range(x):\n            c = gcd(c, l[i])\n        if c == 1:\n            print(1)\n        else:\n            c = l[0]\n            l[-1] = m\n            l[-2] = gcd(x - 1, l[-2])\n            for i in range(x):\n                c = gcd(c, l[i])\n            if c == 1:\n                print(2)\n            else:\n                print(3)", "def find_hcf(a, b):\n    while a != 0:\n        temp = b % a\n        b = a\n        a = temp\n    return b\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    if n == 1:\n        if arr[0] == 1:\n            print(0)\n        else:\n            print(1)\n        continue\n    hcf = find_hcf(arr[0], arr[1])\n    for j in range(2, n):\n        hcf = find_hcf(hcf, arr[j])\n    cost = 0\n    n_hcf = find_hcf(n, arr[n - 1])\n    n1_hcf = find_hcf(n - 1, arr[n - 2])\n    if hcf == 1:\n        cost = 0\n    elif n_hcf == 1 or find_hcf(n_hcf, hcf) == 1:\n        cost = 1\n    elif n1_hcf == 1 or find_hcf(n1_hcf, hcf) == 1:\n        cost = 2\n    else:\n        cost = 3\n    print(cost)", "import math\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = a[0]\n    for i in range(1, len(a)):\n        g = math.gcd(g, a[i])\n    if g == 1:\n        return 0\n    elif math.gcd(g, n) == 1:\n        return 1\n    elif len(a) > 1 and math.gcd(g, n - 1) == 1:\n        return 2\n    else:\n        return 3\nfor t in range(0, int(input())):\n    print(solve())", "from math import gcd\n\ndef check_gcd(a):\n    gcd_max = a[0]\n    for elem in a:\n        gcd_max = gcd(gcd_max, elem)\n    return gcd_max\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    if n == 1:\n        if a[0] == 1:\n            print(0)\n        else:\n            print(1)\n        continue\n    b = a[:]\n    c = a[:]\n    b[-1] = gcd(b[-1], n)\n    c[-2] = gcd(c[-2], n - 1)\n    if check_gcd(a) == 1:\n        print(0)\n    elif check_gcd(b) == 1:\n        print(1)\n    elif check_gcd(c) == 1:\n        print(2)\n    else:\n        print(3)", "import math\ncase = int(input())\nfor i in range(case):\n    n = int(input())\n    ll = list(map(int, input().split()))\n    cost = 0\n    g = ll[0]\n    t = 0\n    while t < n:\n        g = math.gcd(g, ll[t])\n        t += 1\n    if g == 1:\n        print(0)\n    elif math.gcd(g, n) == 1:\n        print(1)\n    elif math.gcd(g, n - 1) == 1:\n        print(2)\n    else:\n        print(3)", "import math\n\ndef check_gcd(a):\n    if len(a) == 1:\n        return a[0]\n    else:\n        num1 = a[0]\n        num2 = a[1]\n        gcd = math.gcd(num1, num2)\n        if len(a) > 2:\n            for i in range(2, len(a)):\n                gcd = math.gcd(gcd, a[i])\n        return gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    t = 0\n    t1 = 0\n    t2 = 0\n    while check_gcd(a) != 1:\n        t += 1\n        if t == 1:\n            t1 = a[n - 1]\n            a[n - 1] = math.gcd(a[n - 1], n)\n        elif t == 2:\n            a[n - 1] = t1\n            t2 = a[n - 2]\n            a[n - 2] = math.gcd(a[n - 2], n - 1)\n        elif t == 3:\n            a[n - 1] = math.gcd(a[n - 1], n)\n    print(t)", "def ucln(a, b):\n    if b == 0:\n        return a\n    return ucln(b, a % b)\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    gcd = a[0]\n    for i in a:\n        gcd = ucln(gcd, i)\n    if gcd == 1:\n        print(0)\n    elif ucln(gcd, n) == 1:\n        print(1)\n    elif ucln(gcd, n - 1) == 1:\n        print(2)\n    else:\n        print(3)\n    t -= 1", "import math\n\ndef func(arr, n):\n    if n == 1:\n        if arr[0] == 1:\n            return 0\n        else:\n            return 1\n    curr_gcd = 0\n    for i in range(n - 2):\n        curr_gcd = math.gcd(curr_gcd, arr[i])\n    if math.gcd(math.gcd(curr_gcd, arr[-2]), arr[-1]) == 1:\n        return 0\n    if math.gcd(math.gcd(curr_gcd, arr[-2]), math.gcd(arr[-1], n)) == 1:\n        return 1\n    if math.gcd(math.gcd(curr_gcd, arr[-1]), math.gcd(arr[-2], n - 1)) == 1:\n        return 2\n    return 3\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    arr = [int(x) for x in list(input().split(' '))]\n    print(func(arr, n))", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    nod = a[0]\n    for ai in a:\n        nod = gcd(nod, ai)\n    if nod == 1:\n        print(0)\n        return\n    if n == 1 or gcd(nod, n) == 1:\n        print(1)\n    elif n > 1 and gcd(nod, n - 1) == 1:\n        print(2)\n    else:\n        print(3)\nt = int(input())\nfor _ in range(t):\n    solve()", "import math\nfor i in range(int(input())):\n    k = int(input())\n    li = list(map(int, input().split()))\n    if len(li) == 1:\n        if li[0] == 1:\n            print(0)\n        else:\n            print(1)\n        continue\n    x = li[0]\n    gc = math.gcd(li[0], li[1])\n    f = 0\n    for i in li[1:]:\n        gc = math.gcd(gc, i)\n        if gc == 1:\n            print(0)\n            f = 1\n            break\n    if f:\n        continue\n    temp = li\n    temp2 = li.copy()\n    temp[-1] = math.gcd(temp[-1], k)\n    gc = math.gcd(temp[0], temp[1])\n    x = temp[0]\n    f = 0\n    for i in temp[1:]:\n        gc = math.gcd(gc, i)\n        if gc == 1:\n            print(1)\n            f = 1\n            break\n    if f:\n        continue\n    temp2[-2] = math.gcd(temp2[-2], k - 1)\n    gc = math.gcd(temp2[0], temp2[1])\n    x = temp2[0]\n    f = 0\n    for i in temp2[1:]:\n        gc = math.gcd(gc, i)\n        if gc == 1:\n            print(2)\n            f = 1\n            break\n    if f:\n        continue\n    print(3)", "import sys\nimport threading\nfrom functools import lru_cache\nfrom bisect import bisect_left\nimport math\nfrom collections import defaultdict, deque\nfrom heapq import *\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = [int(i) for i in input().split()]\n        g = a[0]\n        for index in range(1, n):\n            g = math.gcd(a[index], g)\n        if g == 1:\n            print(0)\n            continue\n        ans = float('inf')\n        for index in range(1, n + 1):\n            if math.gcd(index, g) == 1:\n                ans = min(ans, n - index + 1)\n        for index in range(1, n):\n            ans = min(ans, 2 * n - 2 * index + 1)\n        print(ans)\nsys.setrecursionlimit(1 << 30)\nthreading.stack_size(1 << 27)\nmain_thread = threading.Thread(target=main)\nmain_thread.start()\nmain_thread.join()", "def g(x, y):\n    return g(y % x, x) if x else y\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    d = 0\n    for i in range(n):\n        d = g(d, a[i])\n    if d == 1:\n        print('0')\n    elif g(d, n) == 1:\n        print('1')\n    elif g(d, n - 1) == 1:\n        print('2')\n    else:\n        print('3')", "from math import gcd\n\ndef ii():\n    return int(input())\n\ndef il():\n    return list(map(int, input().split()))\nt = ii()\nfor q in range(t):\n    n = ii()\n    a = il()\n    g = a[0]\n    for i in range(1, n):\n        g = gcd(min(g, a[i]), max(g, a[i]))\n    print(0 if g == 1 else 1 if gcd(g, n) == 1 else 2 if gcd(g, n - 1) == 1 else 3)", "def gcd(a, b):\n    while a != 0 and b != 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if len(l) == 1:\n        nod = l[0]\n    else:\n        a = l[0]\n        b = l[1]\n        nod = gcd(a, b)\n        for x in range(2, n):\n            a = nod\n            b = l[x]\n            nod = gcd(a, b)\n    if nod == 1:\n        print(0)\n        continue\n    elif gcd(nod, n) == 1:\n        print(1)\n    elif gcd(nod, n - 1) == 1:\n        print(2)\n    else:\n        print(3)"]