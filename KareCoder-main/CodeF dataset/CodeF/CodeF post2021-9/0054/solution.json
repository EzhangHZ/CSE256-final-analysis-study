["In = input\nfor _ in [0] * int(In()):\n    n = int(In().split()[0])\n    a = [[*map(ord, In())] for _ in [0] * n]\n    print(min((sum((abs(x - y) for (x, y) in zip(s, t))) for (i, s) in enumerate(a) for t in a[:i])))", "I = input\nfor _ in [0] * int(I()):\n    n = int(I().split()[0])\n    a = [[*map(ord, I())] for _ in [0] * n]\n    print(min((sum((abs(x - y) for (x, y) in zip(s, t))) for (i, s) in enumerate(a) for t in a[:i])))", "I = input\nfor _ in [0] * int(I()):\n    n = int(I().split()[0])\n    a = [[*map(ord, I())] for _ in [0] * n]\n    print(min((sum((abs(x - y) for (x, y) in zip(s, t))) for (i, s) in enumerate(a) for t in a[:i])))", "I = input\nfor _ in [0] * int(I()):\n    n = int(I().split()[0])\n    a = [[*map(ord, I())] for _ in [0] * n]\n    print(min((sum((abs(x - y) for (x, y) in zip(s, t))) for (i, s) in enumerate(a) for t in a[:i])))", "I = input\nfor _ in [0] * int(I()):\n    n = int(I().split()[0])\n    a = [[*map(ord, I())] for _ in [0] * n]\n    print(min((sum((abs(x - y) for (x, y) in zip(s, t))) for (i, s) in enumerate(a) for t in a[:i])))", "def l1(x, y):\n    d = 0\n    for i in range(len(x)):\n        d += abs(ord(x[i]) - ord(y[i]))\n    return d\n\ndef ch(x, y, t):\n    d = 0\n    for i in range(len(x)):\n        d += abs(ord(x[i]) - ord(y[i]))\n        if d > t:\n            return [d, False]\n    return [d, True]\n\ndef solve(l):\n    ans = l1(l[0], l[1])\n    n = len(l)\n    for i in range(2, n):\n        for j in range(i):\n            res = ch(l[i], l[j], ans)\n            if res[1]:\n                ans = res[0]\n    return ans\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    for _ in range(n):\n        l.append(input())\n    print(solve(l))", "t = int(input().strip())\n\ndef diff_1(w, j):\n    ans = 0\n    for (i, j) in zip(w, j):\n        ans += abs(i - j)\n    return ans\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    Ws = []\n    for _ in range(n):\n        Ws.append(list(map(ord, input().strip())))\n    cur_min = 10 ** 10\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            a = diff_1(Ws[i], Ws[j])\n            if cur_min > a:\n                cur_min = a\n    print(cur_min)", "I = input\nfor _ in [0] * int(I()):\n    n = int(I().split()[0])\n    a = [[*map(ord, I())] for _ in [0] * n]\n    print(min((sum((abs(x - y) for (x, y) in zip(s, t))) for (i, s) in enumerate(a) for t in a[:i])))", "I = input\nfor _ in [0] * int(I()):\n    n = int(I().split()[0])\n    a = [[*map(ord, I())] for _ in [0] * n]\n    print(min((sum((abs(x - y) for (x, y) in zip(s, t))) for (i, s) in enumerate(a) for t in a[:i])))", "I = input\nfor _ in [0] * int(I()):\n    n = int(I().split()[0])\n    a = [[*map(ord, I())] for _ in [0] * n]\n    print(min((sum((abs(x - y) for (x, y) in zip(s, t))) for (i, s) in enumerate(a) for t in a[:i])))", "I = input\nfor _ in [0] * int(I()):\n    n = int(I().split()[0])\n    a = [[*map(ord, I())] for _ in [0] * n]\n    print(min((sum((abs(x - y) for (x, y) in zip(s, t))) for (i, s) in enumerate(a) for t in a[:i])))", "I = input\nfor _ in [0] * int(I()):\n    n = int(I().split()[0])\n    a = [[*map(ord, I())] for _ in [0] * n]\n    print(min((sum((abs(x - y) for (x, y) in zip(s, t))) for (i, s) in enumerate(a) for t in a[:i])))", "I = input\nfor _ in [0] * int(I()):\n    n = int(I().split()[0])\n    a = [[*map(ord, I())] for _ in [0] * n]\n    print(min((sum((abs(x - y) for (x, y) in zip(s, t))) for (i, s) in enumerate(a) for t in a[:i])))", "for _ in range(int(input())):\n    (n, _) = map(int, input().split())\n    a = [list(map(ord, input())) for _ in range(n)]\n    min_diff = min((sum((abs(u - v) for (u, v) in zip(a[i], a[j]))) for i in range(n) for j in range(i + 1, n)))\n    print(min_diff)", "m = input\nfor i in [0] * int(m()):\n    n = int(m().split()[0])\n    a = [[*map(ord, m())] for j in [0] * n]\n    print(min((sum((abs(x - y) for (x, y) in zip(s, t))) for (i, s) in enumerate(a) for t in a[:i])))", "I = input\nfor s in [0] * int(I()):\n    n = int(I().split()[0])\n    a = [[*map(ord, I())] for k in [0] * n]\n    print(min((sum((abs(x - y) for (x, y) in zip(s, t))) for (i, s) in enumerate(a) for t in a[:i])))", "I = input\nfor _ in [0] * int(I()):\n    n = int(I().split()[0])\n    a = [[*map(ord, I())] for _ in [0] * n]\n    print(min((sum((abs(x - y) for (x, y) in zip(s, t))) for (i, s) in enumerate(a) for t in a[:i])))", "I = input\nfor _ in [0] * int(I()):\n    n = int(I().split()[0])\n    a = [[*map(ord, I())] for _ in [0] * n]\n    print(min((sum((abs(x - y) for (x, y) in zip(s, t))) for (i, s) in enumerate(a) for t in a[:i])))", "d = {'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108, 'm': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114, 's': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122}\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    l = []\n    flag = True\n    for _ in range(a):\n        s = input()\n        l.append(s)\n        if l.count(s) > 1:\n            flag = False\n    if flag:\n        c = 0\n        if len(l) == 2:\n            for (i, j) in zip(l[0], l[1]):\n                c += abs(d[i] - d[j])\n            print(c)\n        else:\n            m = 1000000\n            for i in range(a):\n                for j in range(0 + i, a):\n                    if i != j:\n                        n = 0\n                        for (q, w) in zip(l[i], l[j]):\n                            n += abs(d[q] - d[w])\n                            if n >= m:\n                                break\n                        if n < m:\n                            m = n\n            print(m)\n    else:\n        print(0)", "t = int(input())\nfor nabor in range(t):\n    (n, m) = map(int, input().split())\n    arr = tuple((tuple((ord(s) for s in input())) for i in range(n)))\n    Max = 200\n    for a in range(n - 1):\n        for b in range(a + 1, n):\n            (Str, str2) = (arr[a], arr[b])\n            Sum = 0\n            for i in range(m):\n                Sum += abs(Str[i] - str2[i])\n                if Sum > Max:\n                    Sum = Max\n                    break\n            Max = Sum\n    print(Max)", "def dist(s1, s2):\n    d = 0\n    for (letter1, letter2) in zip(s1, s2):\n        d += abs(ord(letter1) - ord(letter2))\n    return d\n\ndef min_dist(n, m, s):\n    ans = 1000000\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            d = dist(s[i], s[j])\n            if d < ans:\n                ans = d\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = []\n    for i in range(n):\n        s.append(input().strip())\n    print(min_dist(n, m, s))", "n = int(input())\n\ndef ordSum(s, s1):\n    res = 0\n    for (el, el1) in zip(s, s1):\n        res += abs(ord(el) - ord(el1))\n    return res\n\ndef f(list_, n):\n    min = 99999999\n    for i in range(n - 1):\n        el = list_[i]\n        for el1 in list_[i + 1:]:\n            a = ordSum(el, el1)\n            if min > a:\n                min = a\n    return min\nfor i in range(n):\n    (n, m) = list(map(int, input().split()))\n    s = [input() for x in range(n)]\n    print(f(s, n))", "t = int(input())\nfor _ in range(0, t):\n    nl = list(map(int, input().rstrip().split()))\n    n = nl[0]\n    m = nl[1]\n    brr = []\n    for i in range(0, n):\n        arr = list(map(ord, input()))\n        brr.append(arr)\n    minsum = 1000000\n    wsum = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            wsum = 0\n            for k in range(0, m):\n                wsum += abs(brr[i][k] - brr[j][k])\n                if wsum > minsum:\n                    break\n            if wsum <= minsum:\n                minsum = wsum\n    print(minsum)", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    words = []\n    min_diff = m * 26\n    for _ in range(n):\n        word = list(map(ord, input()))\n        for another in words:\n            diff = sum([abs(x - y) for (x, y) in zip(word, another)])\n            min_diff = min(min_diff, diff)\n        words.append(word)\n    print(min_diff)", "def f(symb):\n    return ord(symb) - 97\nT = int(input())\nfor t in range(T):\n    (n, m) = map(int, input().split())\n    a = []\n    h_min = m * 30\n    for i in range(n):\n        a.append(list(map(f, list(input()))))\n        for j in range(i):\n            h = 0\n            for ind in range(m):\n                h += abs(a[i][ind] - a[j][ind])\n                if h > h_min:\n                    break\n            else:\n                h_min = h\n    print(h_min)", "import math\nimport itertools\nimport heapq\nfrom math import floor, ceil\n\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef isSubsequence(s, t):\n    for i in range(0, len(s)):\n        try:\n            index = t.index(s[i])\n        except ValueError:\n            return False\n        t = t[index + 1:]\n    return True\n\ndef diff(a, b):\n    ans = 0\n    for i in range(len(a)):\n        ans += abs(a[i] - b[i])\n    return ans\nfor _ in range(int(input())):\n    (N, L) = map(int, input().split())\n    words = []\n    for i in range(N):\n        X = list(input())\n        words.append(X)\n    for x in range(N):\n        for i in range(L):\n            words[x][i] = ord(words[x][i]) - 97\n    s = float('inf')\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            s = min(s, diff(words[i], words[j]))\n    print(s)", "def solve(l):\n    n = len(l)\n    m = len(l[0])\n    min_diff = 1000000000000000000000\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = 0\n            for k in range(m):\n                diff += abs(l[i][k] - l[j][k])\n            if diff < min_diff:\n                min_diff = diff\n    print(min_diff)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        x = input()\n        l.append([ord(i) - ord('a') for i in x])\n    solve(l)", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, m) = map(int, inp().split())\n    a = [None] * n\n    for i in range(n):\n        a[i] = list(map(ord, inp().strip()))\n    res = 1000000000\n    for j in range(n):\n        for i in range(j):\n            cost = 0\n            for k in range(m):\n                cost += abs(a[i][k] - a[j][k])\n            res = min(res, cost)\n    print(res)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "def solve(arr, N, M):\n    rec = []\n    for i in range(N):\n        rec.append([ord(c) for c in arr[i]])\n    ans = float('inf')\n    for i in range(N):\n        si = rec[i]\n        for j in range(i + 1, N):\n            sj = rec[j]\n            diff = sum([abs(si[k] - sj[k]) for k in range(M)])\n            ans = min(ans, diff)\n    return ans\nT = int(input())\nfor _ in range(T):\n    (N, M) = list(map(int, input().split()))\n    arr = []\n    for _ in range(N):\n        arr.append(str(input()))\n    ans = solve(arr, N=N, M=M)\n    print(ans)", "from itertools import combinations\n\ndef calc(tup, m):\n    str1 = tup[0]\n    str2 = tup[1]\n    summ = 0\n    for i in range(m):\n        summ += abs(ord(str1[i]) - ord(str2[i]))\n    return summ\n\ndef solve():\n    (n, m) = map(int, input().split())\n    arr = list()\n    for i in range(n):\n        arr.append(input())\n    comb = combinations(arr, 2)\n    diff_list = list()\n    for i in comb:\n        diff_list.append(calc(i, m))\n    out = min(diff_list)\n    print(out)\ncases = int(input())\nfor i in range(cases):\n    solve()", "t = int(input())\n\ndef cost(x, y):\n    tmp = 0\n    for i in range(m):\n        tmp += abs(ord(x[i]) - ord(y[i]))\n    return tmp\n\ndef func(arr):\n    ans = 10 ** 5\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans = min(ans, cost(arr[i], arr[j]))\n    return ans\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    arr = [[i for i in input()] for _ in range(n)]\n    print(func(arr))", "def r(a, b):\n    s = 0\n    for i in range(m):\n        s += abs(ord(a[i]) - ord(b[i]))\n    return s\nt = int(input())\nfor qwer in range(t):\n    (n, m) = map(int, input().split())\n    sp = []\n    for i in range(n):\n        s = list(input())\n        sp.append(s)\n    ma = r(sp[0], sp[1])\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            f = r(sp[i], sp[j])\n            if ma > f:\n                ma = f\n    print(ma)", "import sys\ntest_cnt = int(sys.stdin.readline().rstrip())\n\ndef get_diff(word1, word2):\n    total = 0\n    for i in range(len(word1)):\n        total += abs(ord(word1[i]) - ord(word2[i]))\n    return total\n\ndef get_min(w_list, min_num=sys.maxsize):\n    if len(w_list) == 1:\n        return min_num\n    word = w_list.pop()\n    min_cnt = min([*[get_diff(word, w) for w in w_list], *[min_num]])\n    return get_min(w_list, min_cnt)\nfor _ in range(test_cnt):\n    min_cnt = 0\n    (n, m) = map(int, sys.stdin.readline().rstrip().split())\n    word_list = [sys.stdin.readline().rstrip() for _ in range(n)]\n    print(get_min(word_list))", "import sys\n\ndef razlika(m, string, s):\n    iz = 0\n    for i in range(m):\n        iz = iz + abs(ord(string[i]) - ord(s[i]))\n    return iz\n\ndef resi(n, m, lista):\n    maxx = sys.maxsize\n    for i in range(n):\n        for j in range(i + 1, n):\n            if maxx > razlika(m, lista[i], lista[j]):\n                maxx = razlika(m, lista[i], lista[j])\n    print(maxx)\n    return\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    lista = [input() for i in range(n)]\n    resi(n, m, lista)", "import math\n\ndef khoangcach(s, p):\n    S = 0\n    for i in range(len(s)):\n        S = S + abs(ord(s[i]) - ord(p[i]))\n    return S\n\ndef Solve():\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        g = input()\n        a.append(g)\n    MIN = 999999999999999\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            k = khoangcach(a[i], a[j])\n            if k < MIN:\n                MIN = k\n    print(MIN)\nq = int(input())\nwhile q > 0:\n    Solve()\n    q = q - 1", "def lis():\n    return list(map(int, input().split()))\n\ndef ma():\n    return map(int, input().split())\n\ndef exe():\n    minimun = 10 ** 20\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(n):\n        for j in range(i + 1, n):\n            count = 0\n            (s1, s2) = (lst[i], lst[j])\n            for k in range(m):\n                count += abs(alpha.index(s1[k]) - alpha.index(s2[k]))\n                if count > minimun:\n                    break\n            else:\n                minimun = count\n    return minimun\nfor i in range(int(input())):\n    (n, m) = ma()\n    lst = []\n    for i in range(n):\n        lst.append(input())\n    print(exe())", "count = int(input())\n\ndef distance(size, a: str, b: str):\n    dist = 0\n    for i in range(size):\n        dist += abs(ord(a[i]) - ord(b[i]))\n    return dist\n\ndef min_distance(size, words: list):\n    min_dist = distance(size, words[0], words[1])\n    for i in range(len(words) - 1):\n        for j in range(i + 1, len(words)):\n            dist = distance(size, words[i], words[j])\n            if dist < min_dist:\n                min_dist = dist\n    return min_dist\nfor i in range(count):\n    (number, size) = map(int, input().split())\n    words = []\n    for j in range(number):\n        words.append(input())\n    print(min_distance(size, words))", "import sys\nd = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n\ndef ck(w1, w2, m):\n    if w1 == w2:\n        return 0\n    res = 0\n    for i in range(m):\n        res += abs(d[w1[i]] - d[w2[i]])\n    return res\n\ndef cal(n, m, a):\n    ans = 26 * m\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            ans = min(ans, ck(a[i], a[j], m))\n    return ans\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [0] * n\n    for i in range(n):\n        l[i] = input()\n    print(cal(n, m, l))", "import math\n\ndef get_int():\n    return int(input())\n\ndef get_list():\n    return list(map(int, input().split()))\n\ndef out(ans):\n    if ans:\n        print('YES')\n    else:\n        print('NO')\n\ndef check(s, r):\n    x = 0\n    for i in range(len(s)):\n        x += abs(s[i] - r[i])\n    return x\nalphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nfor i in range(get_int()):\n    words = []\n    (n, m) = get_list()\n    for i in range(n):\n        words.append(list(map(alphabet.index, list(input()))))\n    if n == 1:\n        print(0)\n    else:\n        ans = -1\n        x = 0\n        while x < n:\n            y = x + 1\n            while y < n:\n                q = check(words[x], words[y])\n                if ans == -1 or q < ans:\n                    ans = q\n                y += 1\n            x += 1\n        print(ans)", "from sys import stdin, stdout\nimport collections\nimport math\n\ndef solve(a, b):\n    c = 0\n    for i in range(len(a)):\n        c += abs(ord(a[i]) - ord(b[i]))\n    return c\n\ndef main():\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        l = []\n        for i in range(n):\n            l.append(input().strip())\n        ans = float('inf')\n        for i in range(n):\n            for j in range(i + 1, n):\n                ans = min(ans, solve(l[i], l[j]))\n        print(ans)\n    return\ninput = stdin.readline\nmain()", "def dist(w1, w2):\n    d = 0\n    for (c1, c2) in zip(w1, w2):\n        d += abs(ord(c1) - ord(c2))\n    return d\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    words = [input() for _ in range(n)]\n    mindist = float('inf')\n    for i in range(n - 1):\n        w1 = words[i]\n        for j in range(i + 1, n):\n            mindist = min(mindist, dist(w1, words[j]))\n    print(mindist)", "def count_dist(s1, s2, length):\n    dist = 0\n    for i in range(length):\n        dist += abs(ord(s1[i]) - ord(s2[i]))\n    return dist\n\ndef solution(content, n, length):\n    mini = 26 * length\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = count_dist(content[i], content[j], length)\n            if dist < mini:\n                mini = dist\n    print(mini)\nt = int(input())\nfor i in range(t):\n    (n, length) = [int(i) for i in input().split()]\n    content = []\n    for _ in range(n):\n        content.append(input())\n    solution(content, n, length)", "def dif(s1, s2, m):\n    cont = 0\n    for i in range(m):\n        x = abs(ord(s1[i]) - ord(s2[i]))\n        cont = cont + x\n    return cont\n\ndef sol():\n    (n, m) = map(int, input().split())\n    words = [input() for i in range(n)]\n    ans = 1000000000\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans = min(ans, dif(words[i], words[j], m))\n    print(ans)\nfor tt in range(int(input())):\n    sol()", "def solve(s, t):\n    ans = 0\n    for i in range(len(s)):\n        ans += abs(ord(s[i]) - ord(t[i]))\n    return ans\ntry:\n    t = int(input())\n    while t:\n        (n, m) = map(int, input().split())\n        l = []\n        res = []\n        for i in range(n):\n            l.append(input())\n        for i in range(0, len(l)):\n            for j in range(i + 1, len(l)):\n                res.append(solve(l[i], l[j]))\n        print(min(res))\n        t -= 1\nexcept EOFError:\n    pass", "def difference(w1, w2, w_len):\n    res = 0\n    for i in range(w_len):\n        res += abs(ord(w1[i]) - ord(w2[i]))\n    return res\nt = int(input())\nfor _ in range(t):\n    (n, m) = [int(v) for v in input().split()]\n    w = [input() for _ in range(n)]\n    ans = float('inf')\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            diff = difference(w[i], w[j], m)\n            if diff < ans:\n                ans = diff\n    print(ans)", "def diff(a, b):\n    diff = 0\n    for k in range(m):\n        diff += abs(ord(a[k]) - ord(b[k]))\n    return diff\nfor i in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    strings = []\n    for j in range(n):\n        string = input()\n        strings.append(string)\n    dic = float('inf')\n    for l in range(n - 1):\n        for h in range(l + 1, n):\n            temp = diff(strings[l], strings[h])\n            if temp < dic:\n                dic = temp\n    print(dic)", "def diff_str(s1, s2, b):\n    diff = 0\n    for i in range(b):\n        diff = diff + abs(ord(s1[i]) - ord(s2[i]))\n    return diff\n\ndef minimum(l, b):\n    diff_list = []\n    for i in range(len(l)):\n        s1 = l[i]\n        for j in range(i + 1, len(l)):\n            s2 = l[j]\n            diff_list.append(diff_str(s1, s2, b))\n    return min(diff_list)\nn = int(input())\nfor i in range(n):\n    (a, b) = list(map(int, input().split()))\n    l = []\n    for j in range(a):\n        s = input()\n        l.append(s)\n    print(minimum(l, b))", "def get_distance(w1, w2, l):\n    distance = 0\n    for i in range(l):\n        tmp = ord(w1[i]) - ord(w2[i])\n        distance = distance + tmp if tmp > 0 else distance - tmp\n    return distance\nt = int(input())\nfor i in range(t):\n    (n, m) = list(map(int, input().split()))\n    words = []\n    for i in range(n):\n        words.append(input())\n    min_dist = 100000\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            curr_dist = get_distance(words[i], words[j], m)\n            if curr_dist < min_dist:\n                min_dist = curr_dist\n    print(min_dist)", "import math\n\ndef dif(a, b):\n    s = 0\n    for (i, j) in zip(a, b):\n        s += abs(ord(i) - ord(j))\n    return s\nfor _ in range(int(input())):\n    (n, l) = map(int, input().split())\n    r = [input() for i in range(n)]\n    m = math.inf\n    for i in range(n):\n        for j in range(i):\n            m = min(m, dif(r[i], r[j]))\n    print(m)", "def getINP():\n    (n, m) = map(int, input().split())\n    words = [input() for _ in range(n)]\n    return MinMove(words, n, m)\n\ndef MinMove(word: list, n: int, m: int):\n    diffs = []\n    for s1 in range(n - 1):\n        for s2 in range(s1 + 1, n):\n            diffs.append(countDiff(word[s1], word[s2]))\n    return min(diffs)\n\ndef countDiff(w1, w2):\n    cnt = 0\n    for i in range(len(w1)):\n        cnt += abs(ord(w1[i]) - ord(w2[i]))\n    return cnt\nt = int(input())\nwhile t:\n    print(getINP())\n    t -= 1", "def dst(s1, s2):\n    p = 0\n    for i in range(len(s1)):\n        p += abs(ord(s1[i]) - ord(s2[i]))\n    return p\nfor _ in range(int(input())):\n    rs = 0\n    p = 100000\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(input())\n        for j in range(i):\n            q = dst(a[i], a[j])\n            if q < p:\n                p = q\n    print(p)", "def func(s, t, m):\n    d = 0\n    for i in range(m):\n        d += abs(ord(s[i]) - ord(t[i]))\n    return d\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(input())\n    ans = 1000000\n    cur = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            cur = func(l[i], l[j], m)\n            if cur < ans:\n                ans = cur\n    print(ans)", "def num(s1, s2, m):\n    res = 0\n    for i in range(m):\n        res += abs(ord(s1[i]) - ord(s2[i]))\n    return res\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(input())\n    d = 10 ** 18\n    for i in range(n):\n        for j in range(i + 1, n):\n            temp = num(l[i], l[j], m)\n            if temp < d:\n                d = temp\n    print(d)", "def difference(a, b):\n    res = 0\n    for i in range(len(a)):\n        res += abs(ord(a[i]) - ord(b[i]))\n    return res\nn = int(input())\nfor _ in range(n):\n    res = 1 << 30\n    m = input().split()\n    m = int(m[0])\n    before = []\n    for _ in range(m):\n        cur = input()\n        for i in before:\n            res = min(res, difference(i, cur))\n        before.append(cur)\n    print(res)", "def caldiff(a, b, mm):\n    tempv = 0\n    for l in range(mm):\n        tempv = tempv + abs(ord(a[l]) - ord(b[l]))\n    return tempv\nt = int(input())\nfor i in range(t):\n    nm = str(input()).split(' ')\n    n = int(nm[0])\n    m = int(nm[1])\n    strings = []\n    for j in range(n):\n        strings.append(str(input()))\n    flag = 0\n    mindiff = 0\n    for j in range(n):\n        for k in range(j + 1, n):\n            if flag:\n                temp = caldiff(strings[j], strings[k], m)\n                if temp < mindiff:\n                    mindiff = temp\n            else:\n                flag = 1\n                mindiff = caldiff(strings[j], strings[k], m)\n    print(mindiff)", "def finddiff(s1, s2):\n    n = len(s1)\n    total = 0\n    for i in range(n):\n        diff = abs(ord(s1[i]) - ord(s2[i]))\n        total = total + diff\n    return total\nt = int(input())\nwhile t > 0:\n    lst = [int(x) for x in input().split()]\n    no_of_strings = lst[0]\n    lst1 = []\n    for i in range(no_of_strings):\n        k = input()\n        lst1.append(k)\n    minval = 10000000\n    for i in range(len(lst1)):\n        for j in range(i + 1, no_of_strings):\n            minval = min(minval, finddiff(lst1[i], lst1[j]))\n    print(minval)\n    t = t - 1", "t = int(input())\n\ndef word_diff(a, b):\n    diff = 0\n    for i in range(len(a)):\n        diff += abs(ord(a[i]) - ord(b[i]))\n    return diff\nfor i in range(t):\n    the_args = [int(c) for c in input().split()]\n    (n, m) = (the_args[0], the_args[1])\n    words = []\n    for j in range(n):\n        words.append(input())\n    min_diff = 1000000\n    for j in range(n - 1):\n        for k in range(j + 1, n):\n            min_diff = min(min_diff, word_diff(words[j], words[k]))\n    print(min_diff)", "def go(a, b):\n    s = 0\n    for j in range(len(a)):\n        s += abs(ord(a[j]) - ord(b[j]))\n    return s\nfor i in range(int(input())):\n    (a, b) = list(map(int, input().split()))\n    c = list((str(input()) for j in range(a)))\n    d = 1000000000\n    for j in range(a - 1):\n        for k in range(j + 1, a):\n            d = min(go(c[j], c[k]), d)\n    print(d)", "def diff(a, b):\n    sum = 0\n    for i in range(len(a)):\n        sum += abs(ord(a[i]) - ord(b[i]))\n    return sum\nt = int(input())\nfor i in range(t):\n    ls = []\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    for j in range(n):\n        s = input()\n        ls.append(s)\n    min = diff(ls[0], ls[1])\n    for k in range(n - 1):\n        for l in range(k + 1, n):\n            p = diff(ls[k], ls[l])\n            if p < min:\n                min = p\n    print(min)", "def solve(w1, w2, ln):\n    res = 0\n    for i in range(ln):\n        res += abs(ord(w1[i]) - ord(w2[i]))\n    return res\n\ndef choose(arr, ln):\n    if len(arr) == 2:\n        return solve(arr[0], arr[1], ln)\n    diff = 999\n    c = 1\n    for i in range(len(arr)):\n        for j in range(c, len(arr)):\n            df = solve(arr[i], arr[j], ln)\n            if df <= diff:\n                diff = df\n        c += 1\n    return diff\ninpt = int(input())\nfor x in range(inpt):\n    arr = [int(x) for x in input().split(' ')]\n    word = []\n    for i in range(arr[0]):\n        word.append(input())\n    print(choose(word, arr[1]))", "t = int(input())\n\ndef ordFinder(word1, word2):\n    output = 0\n    for (let1, let2) in zip(word1, word2):\n        output += abs(ord(let1) - ord(let2))\n    return output\nwhile t > 0:\n    (num, length) = list(map(int, input().split()))\n    output = []\n    while num:\n        string = input()\n        output.append(string)\n        num -= 1\n    min_val = 1000000000000000\n    for i in range(len(output)):\n        for j in range(i + 1, len(output)):\n            dff = abs(ordFinder(output[i], output[j]))\n            if dff < min_val:\n                min_val = dff\n    print(min_val)\n    t -= 1", "def findDiff(w1, w2):\n    diff = 0\n    for i in range(len(w1)):\n        diff += abs(ord(w1[i]) - ord(w2[i]))\n    return diff\nn = int(input())\nfor _ in range(n):\n    [n, m] = list(map(int, input().split(' ')))\n    words = []\n    for i in range(n):\n        words.append(input())\n    r = float('inf')\n    for j in range(len(words)):\n        for k in range(j + 1, len(words)):\n            r = min(r, findDiff(words[j], words[k]))\n    print(r)", "n = int(input())\nT = []\nB = []\nfor i in range(n):\n    t = list(map(int, input().split()))\n    T += [t]\n    A = []\n    for i in range(t[0]):\n        A += [str(input())]\n    B += [A]\nfor items in B:\n    C = []\n    for item in items:\n        c = []\n        for s in item:\n            c += [ord(s) - 97]\n        C += [c]\n    K = []\n    for i in range(len(C)):\n        for j in range(i + 1, len(C)):\n            Ck = 0\n            for (ci, cj) in zip(C[i], C[j]):\n                Ck += abs(ci - cj)\n            K += [Ck]\n    print(min(K))", "def steps_min(word1: str, word2: str):\n    the_sum = 0\n    for i in range(len(word1)):\n        the_sum += abs(ord(word1[i]) - ord(word2[i]))\n    return the_sum\nfor i in range(int(input())):\n    arr = list(map(int, input().split(' ')))\n    (n, m) = (arr[0], arr[1])\n    del arr\n    words = [input() for j in range(n)]\n    sum_all = []\n    for h in range(len(words)):\n        for j in range(h + 1, len(words)):\n            sum_all.append(steps_min(words[h], words[j]))\n    print(min(sum_all))", "from collections import Counter\nt = int(input())\nresult = []\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    array = []\n    for i in range(n):\n        array.append(input())\n    array.sort()\n\n    def solve(array):\n        currentMin = float('inf')\n        for i in range(len(array)):\n            firstString = array[i]\n            for x in range(i + 1, len(array)):\n                secondString = array[x]\n                count = 0\n                for (z, firstChar) in enumerate(firstString):\n                    secondChar = secondString[z]\n                    count += abs(ord(secondChar) - ord(firstChar))\n                currentMin = min(currentMin, count)\n        return currentMin\n    ans = solve(array)\n    print(ans)", "def solution():\n\n    def minimum(w1, w2):\n        k = 0\n        count = 0\n        for i in w1:\n            count += abs(ord(i) - ord(w2[k]))\n            k += 1\n        return count\n    result = []\n    n = int(input())\n    for i in range(n):\n        (n2, m) = input().split()\n        (n2, m) = (int(n2), int(m))\n        word_list = []\n        for i in range(n2):\n            word_list.append(input())\n        cost = [[0 for _ in range(n2)] for _ in range(n2)]\n        for i in range(n2):\n            res = float('inf')\n            only_once = True\n            res1 = []\n            for j in range(i + 1, n2):\n                cost[i][j] = minimum(word_list[i], word_list[j])\n        for i in range(n2):\n            for j in range(i + 1, n2):\n                res = min(res, cost[i][j])\n        result.append(res)\n    for i in result:\n        print(i)\nsolution()", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\n\ndef get_print_int_same(x):\n    sys.stdout.write(str(x) + ' ')\n\ndef get_print_same(x):\n    sys.stdout.write(x + ' ')\nfrom sys import maxsize\n\ndef helper(s1, s2):\n    diff = 0\n    for i in range(len(s1)):\n        diff += abs(ord(s1[i]) - ord(s2[i]))\n    return diff\n\ndef solve():\n    for _ in range(get_int()):\n        (n, m) = get_ints()\n        data = []\n        for i in range(n):\n            data.append(get_string())\n        ans = maxsize\n        for i in range(n):\n            for j in range(i + 1, n):\n                ans = min(ans, helper(data[i], data[j]))\n        get_print_int(ans)\nsolve()", "def f(x, y):\n    res = 0\n    for i in range(len(x)):\n        res += abs(ord(x[i]) - ord(y[i]))\n    return res\nfor t in '@' * int(input()):\n    (a, b) = [*map(int, input().split())]\n    w = []\n    res = []\n    for i in '@' * a:\n        w.append(input())\n    for i in range(len(w)):\n        for j in range(i + 1, len(w)):\n            res.append(f(w[i], w[j]))\n    print(min(res))", "def check(s1, s2):\n    val = 0\n    for i in range(len(s1)):\n        val += abs(ord(s1[i]) - ord(s2[i]))\n    return val\nfor _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    res = float('inf')\n    l = []\n    for i in range(m):\n        l += [input()]\n    for i in range(m):\n        for j in range(i + 1, m):\n            res = min(res, check(l[i], l[j]))\n    print(res)", "def diff(word1, word2):\n    result = 0\n    for i in range(len(word1)):\n        result += abs(ord(word1[i]) - ord(word2[i]))\n    return result\n\ndef main():\n    (n, m) = map(int, input().split())\n    words = [input() for _ in range(n)]\n    result = m * (ord('z') - ord('a') + 1)\n    for i in range(n):\n        for j in range(i + 1, n):\n            result = min(diff(words[i], words[j]), result)\n    print(result)\nt = int(input())\nfor _ in range(t):\n    main()", "def dist(a, b):\n    return sum((abs(ord(x) - ord(y)) for (x, y) in zip(a, b)))\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    x = [input() for _ in range(n)]\n    min_dist = float('inf')\n    for i in range(len(x)):\n        for j in range(i + 1, len(x)):\n            min_dist = min(min_dist, dist(x[i], x[j]))\n    print(min_dist)", "def sravnivanie(a, c):\n    s = 0\n    for i in range(m):\n        s += abs(ord(a[i]) - ord(c[i]))\n    return s\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    b = []\n    for g in range(n):\n        b.append(input())\n    mi = 100000000000001\n    for q in range(n - 1):\n        for w in range(q + 1, n):\n            if sravnivanie(b[q], b[w]) < mi:\n                mi = sravnivanie(b[q], b[w])\n    print(mi)", "t = int(input())\n\ndef calc(s, x):\n    res = 0\n    for i in range(len(s)):\n        res += abs(ord(s[i]) - ord(x[i]))\n    return res\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        arr.append(input())\n    mini = 2 ** 31\n    for i in range(n):\n        for j in range(i + 1, n):\n            mini = min(mini, calc(arr[i], arr[j]))\n    print(mini)", "p_nums = input()\n\ndef word_to_ascii(word):\n    return [ord(c) for c in word]\n\ndef get_diff(word_a, word_b, length):\n    return sum((abs(word_a[i] - word_b[i]) for i in range(length)))\nfor i in range(int(p_nums)):\n    (cnt, length) = [int(t) for t in input().split()]\n    words = []\n    for j in range(cnt):\n        word = input()\n        words.append(word_to_ascii(word))\n    curr_min = length * 25\n    for j in range(cnt):\n        for k in range(cnt - j - 1):\n            diff = get_diff(words[j], words[j + k + 1], length)\n            curr_min = min(diff, curr_min)\n    print(curr_min)", "w = list('abcdefghijklmnopqrstuvwxyz')\nw_dict = {}\nfor i in range(26):\n    w_dict[w[i]] = i + 1\n\ndef dist(s1, s2):\n    result = 0\n    for i in range(len(s1)):\n        result += abs(w_dict[s1[i]] - w_dict[s2[i]])\n    return result\nt = int(input())\nfor i in range(t):\n    (n, s) = list(map(int, input().split()))\n    strings = []\n    for j in range(n):\n        tmp = input()\n        strings.append(tmp)\n    ans = 9 * 26\n    for j in range(n):\n        for k in range(j + 1, n):\n            tmp = dist(strings[j], strings[k])\n            if tmp < ans:\n                ans = tmp\n    print(ans)", "for _ in range(int(input())):\n\n    def diff(a, b):\n        diff = 0\n        for i in range(len(a)):\n            x = a[i]\n            y = b[i]\n            diff += abs(ord(x) - ord(y))\n        return diff\n    (x, y) = map(int, input().split())\n    list1 = []\n    for i in range(x):\n        x1 = input()\n        list1.append(x1)\n    res = float('inf')\n    for i in range(0, x):\n        for j in range(i + 1, x):\n            res = min(res, diff(list1[i], list1[j]))\n    print(res)", "T = int(input())\n\ndef calc_diff(a, b):\n    return sum([abs(a[i] - b[i]) for i in range(len(a))])\nfor tc in range(T):\n    (a, b) = map(int, input().split(' '))\n    strings = []\n    nums = []\n    for i in range(a):\n        s = input()\n        n = []\n        for char in s:\n            n.append(ord(char) - 96)\n        nums.append(n)\n    mindiff = calc_diff(nums[0], nums[1])\n    for i in range(1, a):\n        for j in range(i):\n            diff = calc_diff(nums[i], nums[j])\n            mindiff = min(diff, mindiff)\n    print(mindiff)", "def fun(a, b, l):\n    s = 0\n    for i in range(l):\n        s += abs(ord(a[i]) - ord(b[i]))\n    return s\nt = int(input())\nfor _ in range(t):\n    (n, ll) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(input().strip())\n    m = 10 ** 9\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            m = min(m, fun(l[i], l[j], ll))\n    print(m)", "def cost(s, t):\n    sum = 0\n    for i in range(len(s)):\n        sum += abs(ord(s[i]) - ord(t[i]))\n    return sum\nn = int(input())\nfor i in range(n):\n    (num, length) = list(map(int, input().split()))[:2]\n    str = []\n    for i in range(num):\n        str.append(input())\n    ans = 1000\n    for i in range(len(str) - 1):\n        for j in range(i + 1, len(str)):\n            ans = min(cost(str[i], str[j]), ans)\n    print(ans)", "def diff(a, b, l):\n    diff = 0\n    for i in range(l):\n        diff += abs(ord(a[i]) - ord(b[i]))\n    return diff\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    res = 10 ** 5\n    a = []\n    for k in range(n):\n        a.append(input())\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            res = min(res, diff(a[i], a[j], m))\n    print(res)", "def diff(a, b):\n    d = 0\n    for i in range(len(a)):\n        d += abs(ord(a[i]) - ord(b[i]))\n    return d\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    k = []\n    for i in range(n):\n        k.append(input())\n    mini = 10 ** 9 + 7\n    for i in range(n):\n        for j in range(i + 1, n):\n            mini = min(mini, diff(k[i], k[j]))\n    print(mini)", "from itertools import combinations\n\ndef solve():\n    (n, m) = tuple(map(int, input().split()))\n    strings = []\n    values = []\n    for i in range(n):\n        strings.append(input())\n    for (str1, str2) in combinations(strings, 2):\n        sum = 0\n        for (char1, char2) in zip(str1, str2):\n            sum += abs(ord(char1) - ord(char2))\n        values.append(sum)\n    return min(values)\nt = int(input())\nfor _ in range(t):\n    result = solve()\n    print(result)", "for _ in range(int(input())):\n    minimum = 99999\n    (n, m) = input().split()\n    words = []\n    for _ in range(int(n)):\n        words.append(input())\n    for i in range(len(words)):\n        for j in range(i + 1, len(words)):\n            diff = sum([abs(ord(c1) - ord(c2)) for (c1, c2) in zip(words[i], words[j])])\n            if diff < minimum:\n                minimum = diff\n    print(minimum)", "import sys\n\ndef moves(src, target):\n    tot = 0\n    for i in range(len(src)):\n        tot += abs(ord(src[i]) - ord(target[i]))\n    return tot\n\ndef minmoves(l):\n    ans = sys.maxsize\n    res = 0\n    tot = 0\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            ans = min(ans, moves(l[i], l[j]))\n    print(ans)\nt = int(input())\nfor i in range(t):\n    (n, m) = input().split(' ')\n    n = int(n)\n    m = int(m)\n    l = [input() for i in range(n)]\n    minmoves(l)", "def transform(w1, w2):\n    n = len(w1)\n    res = 0\n    for i in range(n):\n        res += abs(ord(w1[i]) - ord(w2[i]))\n    return res\n\ndef solve():\n    (n, m) = map(int, input().split())\n    words = [input() for i in range(n)]\n    ans = 10000000000000000000\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans = min(ans, transform(words[i], words[j]))\n    print(ans)\nfor i in range(int(input())):\n    solve()", "def calc_cost(w1, w2, m):\n    if w1 == w2:\n        return 0\n    moves = 0\n    for i in range(m):\n        moves += abs(ord(w1[i]) - ord(w2[i]))\n    return moves\nt = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    words = n * [0]\n    for i in range(n):\n        word = input()\n        words[i] = word\n    minn = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            minn.append(calc_cost(words[i], words[j], m))\n    print(min(minn))\n    t -= 1", "t = int(input())\n\ndef cost(a, b):\n    s = 0\n    for i in range(len(a)):\n        s += abs(ord(a[i]) - ord(b[i]))\n    return s\n\ndef solve():\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        x = input()\n        a.append(x)\n    ans = 9999999\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans = min(ans, cost(a[i], a[j]))\n    print(ans)\nwhile t:\n    t = t - 1\n    solve()", "u = int(input())\n\ndef similarword(w1, w2, x):\n    if w1 == w2:\n        return 0\n    res = 0\n    for i in range(x):\n        res += abs(ord(w1[i]) - ord(w2[i]))\n    return res\n\ndef cal(y, x, a):\n    ans = 26 * x\n    for i in range(y - 1):\n        for j in range(i + 1, y):\n            ans = min(ans, similarword(a[i], a[j], x))\n    return ans\nfor jj in range(u):\n    (y, x) = [int(i) for i in input().split(' ')]\n    a = []\n    for i in range(y):\n        a.append(input())\n    print(cal(y, x, a))", "def distance(s1, s2, m):\n    dist = 0\n    for i in range(m):\n        dist += abs(ord(s1[i]) - ord(s2[i]))\n    return dist\nt = int(input())\nwhile t > 0:\n    (n, m) = list(map(int, input().split(' ')))\n    a = []\n    for i in range(n):\n        a.append(input())\n    result = 1000000000.0\n    for i in range(n):\n        for j in range(i + 1, n):\n            result = min(result, distance(a[i], a[j], m))\n    print(result)\n    t -= 1", "def dif(a, b, m):\n    s = 0\n    for i in range(m):\n        s += abs(ord(a[i]) - ord(b[i]))\n    return s\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [input() for i in [0] * n]\n    x = []\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            x.append(dif(l[i], l[j], m))\n    print(min(x))", "def cum(a, b):\n    res = 0\n    for i in range(0, len(a)):\n        res += abs(ord(a[i]) - ord(b[i]))\n    return res\nfor _ in range(0, int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(0, n):\n        s = input()\n        l.append(s)\n    res = m * 26\n    for i in range(0, len(l) - 1):\n        for j in range(i + 1, len(l)):\n            now = cum(l[i], l[j])\n            if now < res:\n                res = now\n    print(res)", "def dif(a: str, b: str) -> int:\n    return sum((abs(ord(x) - ord(y)) for (x, y) in zip(a, b)))\n\ndef solve():\n    (n, m) = map(int, input().split())\n    s = [input() for _ in range(n)]\n    ans = 10 ** 10\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans = min(ans, dif(s[i], s[j]))\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "def diff_str(str1, str2):\n    count = 0\n    for i in range(len(str1)):\n        count += abs(ord(str1[i]) - ord(str2[i]))\n    return count\nt = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    string_list = []\n    for _ in range(n):\n        string = input()\n        string_list.append(string)\n    min_num = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = diff_str(string_list[i], string_list[j])\n            if diff < min_num:\n                min_num = diff\n    print(min_num)", "def answer():\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(input())\n    a = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    ans = 10 ** 6\n    for i in range(n):\n        for j in range(i + 1, n):\n            s = 0\n            for k in range(m):\n                mn = abs(ord(l[i][k]) - ord(l[j][k]))\n                s += mn\n            ans = min(ans, s)\n    print(ans)\nfor _ in range(int(input())):\n    answer()", "import math\n\ndef inp():\n    return int(input())\n\ndef invr():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s)])\n\ndef min_diff_result(ls1, ls2):\n    min_diff = 0\n    if len(ls1) != len(ls2):\n        print('two word does not have the same lenth')\n    for k in range(len(ls1)):\n        min_diff += abs(ls1[k] - ls2[k])\n    return min_diff\nT = inp()\nfor _ in range(T):\n    (n_num, len_num) = invr()[:]\n    num_ls = []\n    min_num = 0\n    for i in range(n_num):\n        num_ls.append([])\n        s = insr()\n        for j in range(len_num):\n            num_tmp = ord(s[j]) - 96\n            num_ls[i].append(num_tmp)\n    min_diff = min_diff_result(num_ls[0], num_ls[1])\n    for i in range(n_num):\n        if min_diff == 0:\n            break\n        for j in range(n_num):\n            if j > i:\n                (ls1, ls2) = (num_ls[i], num_ls[j])\n                min_diff = min(min_diff, min_diff_result(ls1, ls2))\n    print(min_diff)", "def help(s1, s2):\n    res = 0\n    for i in range(len(s1)):\n        res += abs(ord(s1[i]) - ord(s2[i]))\n    return res\nfor _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        l.append(input())\n    ans = 1000000000000\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans = min(ans, help(l[i], l[j]))\n    print(ans)", "def strDiff(s1, s2):\n    total = 0\n    for i in range(len(s1)):\n        total += abs(ord(s1[i]) - ord(s2[i]))\n    return total\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m) = [int(num) for num in input().split(' ')]\n    words = []\n    for i in range(n):\n        words.append(input())\n    minDiff = 100 * 50\n    for i in range(n):\n        for j in range(i + 1, n):\n            minDiff = min(minDiff, strDiff(words[i], words[j]))\n    print(minDiff)", "t = int(input())\n\ndef solve(ar):\n    n = len(ar)\n\n    def cst(u, v):\n        ans = 0\n        for i in range(len(u)):\n            ft = abs(ord(u[i]) - ord(v[i]))\n            ans += ft\n        return ans\n    mn = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            mn = min(mn, cst(ar[i], ar[j]))\n    return mn\nfor _ in range(t):\n    lst = []\n    (w, l) = list(map(int, input().split()))\n    for i in range(w):\n        x = input()\n        lst.append(x)\n    print(solve(lst))", "import math\n\ndef inp():\n    return int(input())\n\ndef invr():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s)])\n\ndef min_diff_result(ls1, ls2):\n    min_diff = 0\n    if len(ls1) != len(ls2):\n        print('two word does not have the same lenth')\n    for k in range(len(ls1)):\n        min_diff += abs(ls1[k] - ls2[k])\n    return min_diff\nT = inp()\nfor _ in range(T):\n    (n_num, len_num) = invr()[:]\n    num_ls = []\n    min_num = 0\n    for i in range(n_num):\n        num_ls.append([])\n        s = insr()\n        for j in range(len_num):\n            num_tmp = ord(s[j]) - 96\n            num_ls[i].append(num_tmp)\n    min_diff = min_diff_result(num_ls[0], num_ls[1])\n    for i in range(n_num):\n        for j in range(n_num):\n            if j > i:\n                (ls1, ls2) = (num_ls[i], num_ls[j])\n                min_diff = min(min_diff, min_diff_result(ls1, ls2))\n    print(min_diff)", "def diff(s1, s2):\n    res = 0\n    for i in range(len(s1)):\n        res = res + abs(ord(s1[i]) - ord(s2[i]))\n    return res\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    words = []\n    for _ in range(n):\n        s = input()\n        words.append(s)\n    res = diff(words[0], words[1])\n    for i in range(n - 1):\n        for k in range(i + 1, n):\n            if k != i:\n                d = diff(words[i], words[k])\n                if d < res:\n                    res = d\n    print(res)"]