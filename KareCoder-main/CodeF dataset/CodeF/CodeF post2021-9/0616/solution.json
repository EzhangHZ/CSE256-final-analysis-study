["from sys import stdin, setrecursionlimit\ninput = stdin.readline\ninp = lambda : list(map(int, input().split()))\nsetrecursionlimit(3 * 10 ** 5)\nimport threading\n\ndef dfs(p, k):\n    if (p, k) in dp:\n        return dp[p, k]\n    (count, take) = (len(child[p]), [])\n    for i in child[p]:\n        if k % count:\n            v1 = dfs(i, k // count + 1)\n            v2 = dfs(i, k // count)\n            take.append([v1 - v2, v1, v2])\n        else:\n            v = dfs(i, k // count)\n            take.append([0, 0, v])\n    value = k * s[p - 1]\n    if len(take):\n        take.sort(reverse=True)\n        (d, extra) = (k // count, k % count)\n        for i in take:\n            if extra:\n                value += i[1]\n                extra -= 1\n            else:\n                value += i[2]\n    dp[p, k] = value\n    return value\n\ndef answer():\n    ans = dfs(1, k)\n    return ans\n\ndef main():\n    global child, n, k, p, s, dp\n    for T in range(int(input())):\n        (n, k) = inp()\n        p = inp()\n        child = [[] for i in range(n + 1)]\n        for i in range(n - 1):\n            child[p[i]].append(i + 2)\n        s = inp()\n        dp = dict()\n        print(answer())\nthreading.stack_size(10 ** 8)\nthreading.Thread(target=main).start()"]