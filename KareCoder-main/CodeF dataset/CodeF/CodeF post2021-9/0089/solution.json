["for s in [*open(0)][2::2]:\n    print(len((a := s.split())) - a.count('1') // 2)", "for s in [*open(0)][2::2]:\n    print(len((x := s.split())) - x.count('1') // 2)", "for s in [*open(0)][2::2]:\n    print(len((a := s.split())) - a.count('1') // 2)", "for s in [*open(0)][2::2]:\n    print(len((a := s.split())) - a.count('1') // 2)", "for s in [*open(0)][2::2]:\n    print(len((a := s.split())) - a.count('1') // 2)", "for s in [*open(0)][2::2]:\n    print(len((a := s.split())) - a.count('1') // 2)", "for s in [*open(0)][2::2]:\n    print(len((a := s.split())) - a.count('1') // 2)", "for s in [*open(0)][2::2]:\n    print(len((a := s.split())) - a.count('1') // 2)", "for s in [*open(0)][2::2]:\n    print(len((a := s.split())) - a.count('1') // 2)", "for k in [*open(0)][2::2]:\n    print(len((a := k.split())) - a.count('1') // 2)", "for k in [*open(0)][2::2]:\n    print(len((a := k.split())) - a.count('1') // 2)", "for s in [*open(0)][2::2]:\n    print(len((a := s.split())) - a.count('1') // 2)", "for s in [*open(0)][2::2]:\n    print(len((a := s.split())) - a.count('1') // 2)", "for s in [*open(0)][2::2]:\n    print(len((a := s.split())) - a.count('1') // 2)", "for s in [*open(0)][2::2]:\n    print(len((a := s.split())) - a.count('1') // 2)", "for s in [*open(0)][2::2]:\n    print(len((a := s.split())) - a.count('1') // 2)", "for s in [*open(0)][2::2]:\n    print(len((a := s.split())) - a.count('1') // 2)", "import sys\ninput = sys.stdin.readline\nout = []\nfor _ in range(int(input())):\n    n = int(input())\n    h = [int(i) for i in input().split()]\n    ans = h.count(1)\n    out.append(ans // 2 + n - ans // 2 * 2)\nfor i in out:\n    print(i)", "for s1 in [*open(0)][2::2]:\n    print(len((a := s1.split())) - a.count('1') // 2)", "for s in [*open(0)][2::2]:\n    print(len((a := s.split())) - a.count('1') // 2)", "for s in [*open(0)][2::2]:\n    print(len((a := s.split())) - a.count('1') // 2)", "for s in [*open(0)][2::2]:\n    a = s.split()\n    k = a.count('1')\n    print(len(a) - k - -k // 2)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    L = [*map(int, input().split())]\n    L.sort()\n    oneCount = L.count(1) // 2\n    return len(L) - oneCount\nT = int(input())\nfor i in range(T):\n    print(solve())", "import sys\nN = int(sys.stdin.readline())\nfor i in range(N):\n    M = int(sys.stdin.readline())\n    arvud = sys.stdin.readline().split()\n    i_arv = arvud.count('1')\n    tul = len(arvud)\n    if i_arv == 0:\n        print(tul)\n    elif i_arv % 2 == 0:\n        tul = tul - i_arv + i_arv / 2\n        print(int(tul))\n    else:\n        tul = tul - i_arv + i_arv / 2 + 1\n        print(int(tul))", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = a.count(1)\n    print((x + 1) // 2 + n - x)\nt = int(input())\nfor _ in range(t):\n    solve()", "for s in [*open(0)][2::2]:\n    a = s.split()\n    k = a.count('1')\n    print(len(a) - k - -k // 2)", "for s in [*open(0)][2::2]:\n    print(len((a := s.split())) - a.count('1') // 2)", "import sys\nput = sys.stdin.readline\nt = int(put())\nwhile t:\n    t -= 1\n    n = int(put())\n    h = list(map(int, put().split()))\n    cnt = h.count(1)\n    h = len(h) - cnt\n    print(h + cnt // 2 + 1 if cnt % 2 else h + cnt // 2)", "n = int(input())\nl = []\nj = 0\nfor _ in range(n):\n    k = input()\n    l.append(input())\nwhile j < n:\n    k = l[j].split(' ')\n    s1 = 0\n    s2 = 0\n    s3 = 0\n    for i in k:\n        if i == '1':\n            s1 += 1\n        elif i == '2':\n            s2 += 1\n        else:\n            s3 += 1\n    s1 = s1 - int(s1 / 2)\n    print(s1 + s2 + s3)\n    j += 1", "for k in [*open(0)][2::2]:\n    print(len((a := k.split())) - a.count('1') // 2)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nt = inp()\nfor i in range(t):\n    n = inp()\n    nlist = inlt()\n    b = []\n    out = 0\n    for i in range(n):\n        if nlist[i] == 1:\n            b.append(i)\n    if len(b) % 2 == 0:\n        out = n - len(b) / 2\n    else:\n        out = n - len(b) / 2 + 0.5\n    print(int(out))", "t = int(input())\nres = []\nwhile t > 0:\n    n = int(input())\n    h = input().split(' ')\n    number_of_ones = h.count('1')\n    if number_of_ones == len(h):\n        if len(h) % 2 == 0:\n            res.append(number_of_ones // 2)\n        else:\n            res.append(number_of_ones // 2 + 1)\n    elif number_of_ones > 1:\n        if number_of_ones % 2 == 0:\n            res.append(len(h) - number_of_ones + number_of_ones // 2)\n        else:\n            res.append(len(h) - number_of_ones + number_of_ones // 2 + 1)\n    else:\n        res.append(len(h))\n    t -= 1\nfor element in res:\n    print(element)", "for k in [*open(0)][2::2]:\n    print(len((a := k.split())) - a.count('1') // 2)", "for s in [*open(0)][2::2]:\n    a = s.split()\n    k = a.count('1')\n    print(len(a) - k - -k // 2)", "for s in [*open(0)][2::2]:\n    a = s.split()\n    k = a.count('1')\n    print(len(a) - k - -k // 2)", "import math\nk = int(input())\nres = []\nwhile k > 0:\n    n = input()\n    temp = input().split(' ')\n    arr = []\n    for num in temp:\n        arr.append(int(num))\n    total = 0\n    ones = 0\n    for num in arr:\n        if num == 1:\n            ones += 1\n    total = len(arr) - ones + math.ceil(ones / 2)\n    res.append(total)\n    k -= 1\nfor x in res:\n    print(x)", "for s in [*open(0)][2::2]:\n    print(len((a := s.split())) - a.count('1') // 2)", "import sys\nn = int(sys.stdin.readline())\nfor i in range(n):\n    k = int(sys.stdin.readline())\n    l = list(map(int, sys.stdin.readline().split()))\n    count = 0\n    count2 = 0\n    for j in range(k):\n        if l[j] > 1:\n            count += 1\n        else:\n            count2 += 1\n            if count2 > 1:\n                count2 = 0\n                count += 1\n    print(count + count2)", "import sys\nfor _ in range(int(sys.stdin.readline().strip())):\n    m = int(sys.stdin.readline().strip())\n    count1 = 0\n    for temp in map(int, sys.stdin.readline().strip().split()):\n        if temp == 1:\n            count1 += 1\n    print(m - count1 + (count1 + 1) // 2)", "import sys\nfor _ in range(int(sys.stdin.readline().strip())):\n    m = int(sys.stdin.readline().strip())\n    count1 = 0\n    for temp in map(int, sys.stdin.readline().strip().split()):\n        if temp == 1:\n            count1 += 1\n    print(m - count1 + (count1 + 1) // 2)", "for s in [*open(0)][2::2]:\n    print(len((a := s.split())) - a.count('1') // 2)", "for s in [*open(0)][2::2]:\n    print(len((a := s.split())) - a.count('1') // 2)", "from sys import stdin, stdout\nfrom math import gcd\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    if len(set(nums)) == 1 and nums[0] == 1:\n        print(n - n // 2)\n    else:\n        nums.sort()\n        count = 0\n        i = 0\n        while i <= n - 1:\n            if i == n - 1:\n                count += 1\n                break\n            elif i == n - 2:\n                count += 2\n                break\n            else:\n                k = nums[i]\n                if k >= 2:\n                    count += 2\n                    i += 2\n                else:\n                    count += k\n                    nums[i + 1] -= k\n                    if nums[i + 1] == 0:\n                        i += 2\n                    else:\n                        i += 1\n        print(count)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    x = a.count(1) // 2\n    print(x + n - x * 2)", "n = int(input())\na = [0 for i in range(n)]\nfor i in range(n):\n    li_len = int(input())\n    count = li_len\n    li = list(map(int, input().split()))\n    count -= li.count(1) // 2\n    a[i] = count\nfor i in range(n):\n    print(a[i])", "import sys, math, cmath, time\nfrom bisect import bisect_left\nstart_time = time.time()\n\ndef solve():\n    n = inp()\n    l = [int(k) for k in inps()]\n    l.sort()\n    c = 0\n    for i in l:\n        if i == 1:\n            c += 1\n    print(math.ceil(c / 2) + n - c)\n\ndef main():\n    testcases = 1\n    testcases = inp()\n    for each_testcase in range(testcases):\n        solve()\n\ndef inp():\n    return int(input())\n\ndef inps():\n    return input().split()\nONLINE_JUDGE = __debug__\nif ONLINE_JUDGE:\n    input = sys.stdin.readline\nmain()", "from sys import stdin\n\ndef readLine():\n    return stdin.readline().strip()\n\ndef readInt():\n    return int(readLine())\n\ndef readInts():\n    return list(map(int, readLine().split()))\n(T, N) = (0, 0)\n\ndef main():\n    T = readInt()\n    for i in range(T):\n        N = readInt()\n        ans = N\n        A = readInts()\n        A.sort()\n        if A[0] == 1:\n            j = 1\n            while j < N:\n                if A[j] == 1:\n                    ans -= 1\n                j += 2\n        print(ans)\nmain()", "t = int(input())\nl = []\nfor i in range(t):\n    n = int(input())\n    ch = input()\n    a = ch.split()\n    ar = [int(x) for x in a]\n    l.append(ar)\nfor i in range(t):\n    ar = l[i]\n    un = ar.count(1)\n    n = un // 2\n    n += len(ar) - un + un % 2\n    print(n)", "a = int(input())\nr = []\nfor i in range(a):\n    c = 0\n    n = int(input())\n    l = list(map(int, input().split()))\n    la = len(l)\n    a = l.count(1)\n    if a % 2 == 0:\n        c += a // 2\n        la -= a\n    else:\n        c += a // 2\n        la -= a - 1\n    c += la\n    r.append(c)\nfor i in r:\n    print(i)", "def main():\n    n = int(input())\n    results = []\n    for _ in range(n):\n        _ = input()\n        healths = list(map(int, input().split()))\n        health1_count = healths.count(1)\n        results.append(health1_count // 2 + int(health1_count % 2) + (len(healths) - health1_count))\n    for r in results:\n        print(r)\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef readList():\n    return list(map(int, input().split()))\n\ndef readInt():\n    return int(input())\n\ndef readInts():\n    return map(int, input().split())\n\ndef readStr():\n    return input().strip()\n\ndef solve():\n    n = readInt()\n    arr = readList()\n    cnt = sum([i == 1 for i in arr])\n    return n - cnt + (cnt + 1) // 2\nfor _ in range(int(input())):\n    print(solve())", "def solve():\n    t = int(input())\n    battles = [[]] * t\n    moves = [0] * t\n    for i in range(t):\n        input()\n        battle = list(map(int, input().split()))\n        battle.sort()\n        battles[i] = battle\n    for i in range(t):\n        moves[i] = len(battles[i])\n        one_hp_monsters = battles[i].count(1)\n        if one_hp_monsters > 1:\n            moves[i] += one_hp_monsters // 2 - one_hp_monsters + one_hp_monsters % 2\n    print('\\n'.join(list(map(str, moves))))\nsolve()", "trials = int(input())\nanswer_list = []\nfor _ in range(trials):\n    i = int(input())\n    lis = input().split(' ')\n    answer = 0\n    var = lis.count('1')\n    if var % 2 == 0:\n        ans = var / 2 + (i - var)\n    else:\n        ans = var // 2 + 1 + (i - var)\n    answer_list.append(int(ans))\nfor g in answer_list:\n    print(g)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    p = ls.count(1)\n    print(n - p + int((p + 1) / 2))", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    if len(arr) == 1:\n        print(1)\n        continue\n    c = 0\n    for i in range(N - 1):\n        if arr[i] == 0:\n            continue\n        if arr[i] == 1:\n            arr[i] -= 1\n            arr[i + 1] -= 1\n            c += 1\n        else:\n            arr[i] = 0\n            c += 1\n    if arr[-1] != 0:\n        c += 1\n    print(c)", "t = int(input())\narr = []\nfor i in range(t):\n    n = int(input())\n    nowl = list(map(int, input().split()))\n    arr.append(len(nowl) - nowl.count(1) // 2)\nfor i in arr:\n    print(i)", "import sys\nfrom math import *\nfrom collections import defaultdict, deque\ninput = sys.stdin.readline\nmod = 10 ** 9 + 7\nINF = 1061109567\nN = int(2 * 10 ** 5 + 5)\nLINF = 4557430888798830399\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 0\n    for i in range(n):\n        if a[i] == 1:\n            cnt = cnt + 1\n    print(n - int(cnt / 2))\nT = int(input())\nfor t in range(T):\n    solve()", "T = int(input())\nans = []\nfor i in range(T):\n    n = int(input())\n    H = input().split()\n    h = []\n    for j in H:\n        j = int(j)\n        h.append(j)\n    H = h\n    health_1 = []\n    health_not1 = []\n    for i in H:\n        if i == 1:\n            health_1.append(i)\n        elif i > 1:\n            health_not1.append(i)\n    if len(health_1) % 2 == 0:\n        ans.append(len(health_1) // 2 + len(health_not1))\n    else:\n        ans.append(len(health_1) // 2 + 1 + len(health_not1))\nfor i in ans:\n    print(i)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    input()\n    a = list(map(int, input().split()))\n    a.sort()\n    result = 0\n    n = 0\n    for (number, i) in enumerate(a):\n        if i == 1:\n            n += 1\n            result += 1\n        elif n >= i and i < 3:\n            n -= i\n        else:\n            result += len(a) - number\n            break\n    print(result - n // 2)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    nlist = list(map(int, input().split()))\n    b = []\n    out = 0\n    for i in range(n):\n        if nlist[i] == 1:\n            b.append(i)\n    if len(b) % 2 == 0:\n        out = n - len(b) / 2\n    else:\n        out = n - len(b) / 2 + 0.5\n    print(int(out))", "def foo(ls):\n    ls.sort()\n    count = 0\n    ones = 0\n    for i in range(len(ls)):\n        if ls[i] == 1:\n            ones += 1\n    rem = len(ls) - ones\n    if ones % 2 == 0:\n        count = int(ones // 2) + rem\n    else:\n        count = int(ones // 2) + 1 + rem\n    print(count)\nn = int(input())\nw = []\nfor _ in range(n):\n    x = int(input())\n    w.append(list(map(int, input().split())))\nfor ele in w:\n    foo(ele)", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\n\ndef get_print_int_same(x):\n    sys.stdout.write(str(x) + ' ')\n\ndef get_print_same(x):\n    sys.stdout.write(x + ' ')\nfrom sys import maxsize\nfrom math import ceil\n\ndef solve():\n    for _ in range(get_int()):\n        n = get_int()\n        arr = get_list()\n        ones = 0\n        for i in range(n):\n            if arr[i] == 1:\n                ones += 1\n        get_print_int(min(n, n - ones + ceil(ones / 2)))\nsolve()", "import sys\n\ndef read_input():\n    return int(sys.stdin.readline())\n\ndef read_multiple_input():\n    return list(map(int, sys.stdin.readline().split()))\nt = read_input()\nfor _ in range(t):\n    n = read_input()\n    h = read_multiple_input()\n    s = sum((1 for health in h if health > 1))\n    k = len([health for health in h if health == 1])\n    s += (k + 1) // 2\n    print(s)", "b = []\nx = int(input())\nfor i in range(x):\n    y = int(input())\n    c = input()\n    l = c.split()\n    a = l.count('1')\n    if a == 0:\n        b.append(int(y))\n    elif a % 2 == 0:\n        b.append(int(y - a / 2))\n    else:\n        b.append(int(y - a + a // 2 + 1))\nfor i in range(x):\n    print(b[i])", "t = int(input())\nls = []\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    a = lst.count(1) // 2\n    ls.append(n - a)\nfor i in range(t):\n    print(ls[i])", "import sys\nif sys.platform == 'ios':\n    import clipboard\n    a = clipboard.get()\n    a = a.split('\\n')\n    text = '\\n'.join(a)\n    with open('input_file.txt', 'w') as f:\n        f.write(text)\n    sys.stdin = open('input_file.txt')\nsys.setrecursionlimit(4100000)\nstdin = sys.stdin\nni = lambda : int(ns())\nna = lambda : list(map(int, stdin.readline().split()))\nns = lambda : stdin.readline().strip()\nt = ni()\nfor _ in range(t):\n    N = ni()\n    A = na()\n    res = 0\n    cnt = 0\n    for i in range(N):\n        if A[i] <= 2:\n            res += A[i]\n            cnt += 1\n    ans = (res + 1) // 2 + (N - cnt)\n    print(ans)", "import math\nn = input()\nOutput = []\nfor i in range(int(n)):\n    k = int(input())\n    arr = input().split()\n    ones = 0\n    for i in arr:\n        ones += int(i) == 1\n    Output.append(len(arr) - ones + ones // 2 + ones % 2)\nfor i in Output:\n    print(i)", "import math\nt = int(input())\nanswerList = list()\nfor i in range(t):\n    n = int(input())\n    test = list(map(int, input().split()))\n    numOnes = int(0)\n    fullHits = int(0)\n    for x in range(n):\n        if test[x] == 1:\n            numOnes += 1\n        if test[x] > 1:\n            fullHits += 1\n    numOnes = math.ceil(numOnes / 2)\n    answer = numOnes + fullHits\n    answerList.append(answer)\n[print(i) for i in answerList]", "y = int(input())\nh = []\nfor i in range(y):\n    u = int(input())\n    p = sorted([int(o) for o in input().split()])[::-1]\n    hh = 0\n    for uu in range(9999):\n        try:\n            if p[0] == 1 and p[1] == 1:\n                p.pop(0)\n                p.pop(1)\n                hh += 1\n            else:\n                p.pop(0)\n                hh += 1\n        except:\n            hh += len(p)\n            break\n    h.append(hh)\nprint(*h, sep='\\n')", "t = int(input())\nhl = []\nrl = []\nfor i in range(t):\n    n = int(input())\n    hl = [int(x) for x in input().split()]\n    cs = 0\n    c1 = 0\n    p = 0\n    for j in range(n):\n        if hl[j] == 1:\n            c1 += 1\n    if c1 == 1 or c1 == 0:\n        cs = n\n    elif c1 % 2 != 0:\n        p = c1 // 2\n        cs = n - c1 + p + 1\n    else:\n        p = c1 // 2\n        cs = n - c1 + p\n    rl.append(cs)\nfor i in range(t):\n    print(rl[i])", "n1 = int(input())\nans = []\nfor i in range(1, n1 + 1):\n    n2 = int(input())\n    ll = list(map(int, input().strip().split()))[:n2]\n    ll.sort()\n    c = 0\n    for j in range(n2):\n        if j == n2 - 1:\n            if ll[j] == 0:\n                break\n            else:\n                c += 1\n                break\n        elif ll[j] == 1:\n            ll[j] -= 1\n            ll[j + 1] -= 1\n            c += 1\n        elif ll[j] == 0:\n            continue\n        else:\n            c += 1\n    ans.append(c)\nfor k in ans:\n    print(k, end='\\n')", "import sys, heapq, itertools\nfrom copy import copy, deepcopy\nfrom collections import deque, namedtuple\nfrom itertools import *\nfrom math import *\nfrom random import *\nfrom functools import reduce, lru_cache\nsys.setrecursionlimit(10 ** 9)\n\ndef main():\n    (INF, LLINF) = (10 ** 9, 4 * 10 ** 18)\n    (MOD, MOD_EDU) = (10 ** 9 + 7, 998244353)\n    ID_FCT = lambda x: x\n    input = lambda : sys.stdin.readline().rstrip()\n    cache = lru_cache(maxsize=None)\n\n    def modul(n, mod=MOD):\n        return (n % mod + mod) % mod\n\n    def err_print(*args, end='\\n', sep=' '):\n        sys.stderr.write(' '.join(chain([str(a) for a in args], [end])))\n\n    def list_map(string, fct=int):\n        return list(map(fct, string.split()))\n\n    def read_matrix(n, f=ID_FCT):\n        return [list(map(f, sys.stdin.readline().strip().split())) for _ in range(n)]\n\n    def read_char_matrix(n):\n        return [sys.stdin.readline().strip() for _ in range(n)]\n    for t in range(int(sys.stdin.readline())):\n        n = int(sys.stdin.readline())\n        l = list(map(int, sys.stdin.readline().split()))\n        n1 = sum((x for x in l if x == 1)) // 2\n        print(n - n1)\nmain()", "userInput = []\nn = 0\nwhile True:\n    if n == 0:\n        limit = input()\n    elif n == int(limit) * 2 + 1:\n        break\n    else:\n        userInput.append(input())\n    n += 1\nfor i in range(int(limit)):\n    length = int(userInput[i * 2])\n    string = userInput[i * 2 + 1].split()\n    string = sorted([int(x) for x in string])\n    num_of_1s = 0\n    for j in string:\n        if j == 1:\n            num_of_1s += 1\n    length -= int(num_of_1s)\n    length += num_of_1s / 2\n    if num_of_1s % 2 == 1:\n        length += 1\n    print(int(length))", "def minspells(lst, index):\n    if len(lst) > 1 and lst[0] == 1 and (lst[1] == 1):\n        (hd, nxt, tl) = (lst[0], lst[1], lst[2:])\n        return minspells(tl, index + 1)\n    else:\n        return len(lst) + index\nN = int(input(''))\nmain = []\nfor i in range(1, N + 1):\n    n = int(input(''))\n    h = str(input(''))\n    life = list(map(int, h.split()))\n    life.sort()\n    main.append(life)\nfor j in range(0, N):\n    print(minspells(main[j], 0))", "def no_of_spells(list):\n    a = []\n    for i in range(0, len(list)):\n        if list[i] == 1:\n            a.append(1)\n        else:\n            continue\n    return len(list) - len(a) + len(a) // 2 + len(a) % 2\nn = int(input())\nk = []\nfor i in range(n):\n    temp1 = input()\n    temp2 = input()\n    lst = map(int, temp2.split())\n    k.append(no_of_spells(list(lst)))\nfor j in range(0, len(k)):\n    print(k[j])", "t = int(input())\ni = 0\nI = []\nwhile i < t:\n    n = int(input())\n    inp = list(map(int, input().split()))\n    I.append(inp)\n    i += 1\ni = 0\nwhile i < t:\n    inp = I[i]\n    count = 0\n    inp.sort()\n    if len(inp) % 2 == 1:\n        count += 1\n        inp.pop()\n    for j in range(len(inp) // 2):\n        if inp[2 * j] + inp[2 * j + 1] == 1 or inp[2 * j] + inp[2 * j + 1] == 2:\n            count += 1\n        else:\n            count += 2\n    print(count)\n    i += 1", "testcase = int(input(''))\ni = 0\nlst = []\n\ndef Minspellcast(healthlst):\n    count_1 = 0\n    for k in range(len(healthlst)):\n        if healthlst[k] == 1:\n            count_1 += 1\n    count_rest = n - count_1\n    if count_1 % 2 == 0:\n        min_spellcast = count_1 // 2 + count_rest\n    else:\n        min_spellcast = count_1 // 2 + count_rest + 1\n    return min_spellcast\nwhile i < testcase:\n    n = int(input(''))\n    health = input('')\n    health_list = health.split()\n    for j in range(len(health_list)):\n        health_list[j] = int(health_list[j])\n    lst.append(Minspellcast(health_list))\n    i += 1\nfor i in range(len(lst)):\n    print(lst[i])", "t = int(input())\nans1 = []\nfor i in range(t):\n    k = 0\n    sum = 0\n    n = int(input())\n    l = list(map(int, input().split()))\n    lst = []\n    for i in l:\n        if i == 1:\n            k += 1\n    if k % 2 == 0:\n        sum = sum + k / 2\n    else:\n        sum = sum + k / 2 + 1\n    sum = sum + (n - k)\n    ans1.append(int(sum))\nfor i in range(t):\n    print(ans1[i])", "import math\nt = int(input())\nA = []\nfor i in range(t):\n    n = int(input())\n    a = [int(p) for p in input().split()]\n    A.append(a)\nfor i in range(t):\n    arr = A[i]\n    lol = [y for y in arr if y == 1]\n    lmao = len(arr) - len(lol)\n    print(len(lol) // 2 + len(lol) % 2 + lmao)", "a = int(input())\nfor i in range(a):\n    n = 0\n    b = int(input())\n    c = list(map(int, input().split(' ')))\n    k = c.count(1)\n    if k > 1:\n        p = b - k\n        if k % 2 == 0:\n            n += k / 2\n        else:\n            n += k // 2 + 1\n        print(int(p + n))\n    else:\n        print(b)", "t = int(input())\nans = []\nfor i in range(t):\n    n = int(input())\n    arr = []\n    arr = list(map(int, input().split()))\n    mp = {}\n    for j in arr:\n        if mp.get(j, 0) == 0:\n            mp[j] = 1\n        else:\n            mp[j] += 1\n    tot = 0\n    tot += mp.get(1, 0) // 2\n    tot += len(arr) - mp.get(1, 0) // 2 * 2\n    ans.append(tot)\n[print(i) for i in ans]", "n = int(input())\nfor _ in range(n):\n    t = int(input())\n    l = list(input().split())\n    cnt = 0\n    for single in l:\n        if single == '1':\n            cnt += 1\n    print(t - cnt + (cnt + 1) // 2)", "for i in range(int(input())):\n    print(int(input()) - list(map(int, input().split())).count(1) // 2)", "for _ in range(int(input())):\n    nm = int(input())\n    c = input().split().count('1') // 2\n    print(nm - c)", "for _ in range(int(input())):\n    n = int(input())\n    x = input().split().count('1') // 2\n    print(n - x)", "for i in range(int(input())):\n    (n, ones) = (int(input()), input().split().count('1'))\n    print(n - ones // 2)", "for _ in range(int(input())):\n    n = int(input())\n    l = input().split()\n    print(n - l.count('1') // 2)", "for kadfk in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(n - a.count(1) // 2)", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    ans1 = 0\n    ans2 = 0\n    for i in input().split():\n        if i == '1':\n            ans2 += 1\n        else:\n            ans1 += 1\n    print(ans1 + ceil(ans2 / 2))", "def N():\n    return int(input())\n\ndef A():\n    return [int(x) for x in input().split()]\n\ndef S():\n    return input()\nfor _ in range(N()):\n    n = N()\n    if 'codeforces' == 28226329:\n        print('Tanmay')\n    a = A()\n    c1 = a.count(1)\n    print(c1 // 2 + (n - c1) + c1 % 2)", "import math\nfor _ in range(int(input())):\n    input()\n    x = input().split()\n    count = math.ceil(x.count('1') / 2)\n    print(len(x) - x.count('1') + count)", "t = int(input())\nwhile t:\n    t -= 1\n    a = int(input())\n    b = [int(i) for i in input().split()]\n    ans = b.count(1) // 2 + b.count(1) % 2\n    als = a - b.count(1)\n    print(ans + als)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    x = a.count(1) // 2\n    print(x + n - x * 2)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 0\n    for i in l:\n        if i == 1:\n            c += 1\n    print(n - c // 2)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    one = arr.count(1)\n    print(n - one // 2)", "def main():\n    t = int(input())\n    for _ in range(t):\n        res = alg()\n        print(res)\n\ndef alg():\n    n = int(input())\n    h = [int(x) for x in input().split()]\n    h.sort()\n    res = 0\n    ind = 0\n    while ind < n and h[ind] == 1:\n        ind += 1\n    res += int((ind + 1) / 2) + n - ind\n    return res\nmain()", "for test in range(int(input())):\n    size = int(input())\n    a = list(map(int, input().split()))\n    if a.count(1) != size:\n        print((a.count(1) + 1) // 2 + size - a.count(1))\n    else:\n        print((a.count(1) + 1) // 2)"]