["def newList(nums, m, newnums):\n    for num in nums:\n        x = num\n        while x % m == 0:\n            x //= m\n        if not newnums or newnums[-1][0] != x:\n            newnums.append([x, num // x])\n        else:\n            newnums[-1][1] += num // x\n    return newnums\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    k = int(input())\n    nums1 = list(map(int, input().split()))\n    if newList(nums, m, []) == newList(nums1, m, []):\n        print('Yes')\n    else:\n        print('No')", "def expand(a, m):\n    b = []\n    for x in a:\n        t = x\n        while t % m == 0:\n            t //= m\n        if b and b[-1][0] == t:\n            b[-1][1] += x // t\n        else:\n            b.append([t, x // t])\n    return b\nfor _ in range(int(input())):\n    (_, m) = map(int, input().split())\n    a = map(int, input().split())\n    input()\n    b = map(int, input().split())\n    print('Yes' if expand(a, m) == expand(b, m) else 'No')", "def int_input():\n    a = int(input())\n    return a\n\ndef int_list_input():\n    a = list(map(int, input().split()))\n    return a\n\ndef expand(a, m):\n    b = []\n    for i in a:\n        x = i\n        while x % m == 0:\n            x = x // m\n        if b and b[-1][0] == x:\n            b[-1][1] += i // x\n        else:\n            b.append([x, i // x])\n    return b\n\ndef solve():\n    (n, m) = int_list_input()\n    a = int_list_input()\n    k = int_input()\n    b = int_list_input()\n    print('Yes' if expand(a, m) == expand(b, m) else 'No')\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    k = int(input())\n    b = list(map(int, input().split()))\n    fl = True\n    (pointer_n, pointer_k) = (0, 0)\n    while pointer_n < n and pointer_k < k:\n        if a[pointer_n] == b[pointer_k]:\n            pointer_n += 1\n            pointer_k += 1\n        else:\n            (sum_n, sum_k) = (0, 0)\n            curr = a[pointer_n]\n            while curr % m == 0:\n                curr //= m\n            rem = curr\n            while pointer_n < n:\n                curr = a[pointer_n]\n                while curr % m == 0:\n                    curr //= m\n                if curr == rem:\n                    sum_n += a[pointer_n]\n                else:\n                    break\n                pointer_n += 1\n            while pointer_k < k:\n                curr = b[pointer_k]\n                while curr % m == 0:\n                    curr //= m\n                if curr == rem:\n                    sum_k += b[pointer_k]\n                else:\n                    break\n                pointer_k += 1\n            if sum_n != sum_k:\n                fl = False\n                print('No')\n                break\n    if fl:\n        if pointer_n == n and pointer_k == k:\n            print('Yes')\n        else:\n            print('No')", "def expand(a, m):\n    b = []\n    for x in a:\n        t = x\n        while t % m == 0:\n            t //= m\n        if b and b[-1][0] == t:\n            b[-1][1] += x // t\n        else:\n            b.append([t, x // t])\n    return b\nfor _ in range(int(input())):\n    (_, m) = map(int, input().split())\n    a = map(int, input().split())\n    input()\n    b = map(int, input().split())\n    print('Yes' if expand(a, m) == expand(b, m) else 'No')", "def expand(a, m):\n    b = []\n    for x in a:\n        t = x\n        while t % m == 0:\n            t //= m\n        if b and b[-1][0] == t:\n            b[-1][1] += x // t\n        else:\n            b.append([t, x // t])\n    return b\nfor _ in range(int(input())):\n    (_, m) = map(int, input().split())\n    a = map(int, input().split())\n    input()\n    b = map(int, input().split())\n    print('Yes' if expand(a, m) == expand(b, m) else 'No')", "def solve():\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    k = int(input())\n    brr = list(map(int, input().split()))\n    crr = []\n    for num in arr:\n        temp = num\n        while num % m == 0:\n            num //= m\n        ext = 0\n        if len(crr) > 0 and crr[-1][0] == num:\n            ext += crr[-1][1]\n            crr.pop()\n        crr.append([num, ext + temp // num])\n    drr = []\n    for num in brr:\n        temp = num\n        while num % m == 0:\n            num //= m\n        ext = 0\n        if len(drr) > 0 and drr[-1][0] == num:\n            ext += drr[-1][1]\n            drr.pop()\n        drr.append([num, ext + temp // num])\n    if crr == drr:\n        print('Yes')\n    else:\n        print('No')\nfor i in range(int(input())):\n    solve()", "def expand(a, m):\n    b = []\n    for x in a:\n        c = 1\n        while x % m == 0:\n            x //= m\n            c *= m\n        if b and b[-1][0] == x:\n            b[-1][1] += c\n        else:\n            b.append([x, c])\n    return b\nfor _ in range(int(input())):\n    (_, m) = map(int, input().split())\n    a = map(int, input().split())\n    input()\n    b = map(int, input().split())\n    print('Yes' if expand(a, m) == expand(b, m) else 'No')", "from os import remove\nimport sys\n\ndef expand_all(x, m):\n    cnt = 1\n    while x % m == 0:\n        cnt *= m\n        x //= m\n    return (x, cnt)\n\ndef extract(array: list, value: int):\n    res = []\n    for i in range(len(array)):\n        (x, y) = expand_all(array[i], value)\n        if i == 0:\n            res.append((x, y))\n        else:\n            (p, q) = res[-1]\n            if x == p:\n                res[-1] = (x, q + y)\n            else:\n                res.append((x, y))\n    return res\n\ndef solve():\n    input = sys.stdin.readline\n    t = int(input())\n    for _ in range(t):\n        line = input().split(' ')\n        n = int(line[0])\n        m = int(line[1])\n        a = list(map(int, input().split(' ')))\n        k = int(input())\n        b = list(map(int, input().split(' ')))\n        if extract(a, m) == extract(b, m):\n            print('Yes')\n        else:\n            print('No')\nsolve()", "import sys\n\ndef solve1(a, m):\n    r = []\n    for x in a:\n        z = 1\n        while x % m == 0:\n            z *= m\n            x //= m\n        if r and r[-1][0] == x:\n            r[-1][1] += z\n        else:\n            r.append([x, z])\n    return r\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, m) = map(int, inp().split())\n    a = list(map(int, inp().split()))\n    k = int(inp())\n    b = list(map(int, inp().split()))\n    if solve1(a, m) == solve1(b, m):\n        print('Yes')\n    else:\n        print('No')\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    k = int(input())\n    b = list(map(int, input().split()))\n\n    def expand(arr, z):\n        e = []\n        for x in arr:\n            c = 1\n            while x % z == 0:\n                c *= z\n                x = x // z\n            if len(e) != 0 and e[-1][0] == x:\n                e[-1][1] += c\n            else:\n                e.append([x, c])\n        return e\n    if expand(a, m) == expand(b, m):\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    k = int(input())\n    b = list(map(int, input().split()))\n\n    def expand(arr, z):\n        res = []\n        for x in arr:\n            c = 1\n            while x % z == 0:\n                c *= z\n                x //= z\n            if len(res) != 0 and res[-1][0] == x:\n                res[-1][1] += c\n            else:\n                res.append([x, c])\n        return res\n    if expand(a, m) == expand(b, m):\n        print('Yes')\n    else:\n        print('No')", "def convert(arr, m):\n    res = []\n    for val in arr:\n        num = 1\n        while val % m == 0:\n            val //= m\n            num *= m\n        if len(res) > 0 and res[-1][0] == val:\n            res[-1][1] += num\n        else:\n            res.append([val, num])\n    return res\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    k = int(input())\n    b = list(map(int, input().split()))\n    p = convert(a, m)\n    l = convert(b, m)\n    if p == l:\n        print('Yes')\n    else:\n        print('No')", "def listbreak(x, m):\n    nt = 1\n    while x % m == 0:\n        x //= m\n        nt *= m\n    return [x, nt]\nt = int(input())\nfor _ in range(t):\n    (n1, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    n2 = int(input())\n    b = list(map(int, input().split()))\n    (na, nb) = ([listbreak(a[0], m)], [listbreak(b[0], m)])\n    for i in range(1, n1):\n        ret = listbreak(a[i], m)\n        if ret[0] == na[-1][0]:\n            na[-1][1] += ret[1]\n        else:\n            na.append(ret)\n    for i in range(1, n2):\n        ret = listbreak(b[i], m)\n        if ret[0] == nb[-1][0]:\n            nb[-1][1] += ret[1]\n        else:\n            nb.append(ret)\n    if na == nb:\n        print('Yes')\n    else:\n        print('No')", "import sys\ninput = sys.stdin.readline\n\ndef expand(lst, m):\n    c = []\n    for num in lst:\n        cnt = 1\n        while num % m == 0:\n            num //= m\n            cnt *= m\n        if len(c) == 0:\n            c.append([num, cnt])\n        elif c[-1][0] == num:\n            c[-1][1] += cnt\n        else:\n            c.append([num, cnt])\n    return c\nfor _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    k = int(input())\n    b = list(map(int, input().split()))\n    a = expand(a, m)\n    b = expand(b, m)\n    if a == b:\n        print('Yes')\n    else:\n        print('No')", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\n\ndef find(x, m):\n    count = 0\n    while x % m == 0:\n        count += 1\n        x //= m\n    return (x, m ** count)\n\ndef check(a, m):\n    new = [[0, 0]]\n    for i in a:\n        temp = find(i, m)\n        if new[-1][0] != temp[0]:\n            new.append([temp[0], 0])\n        new[-1][1] += temp[1]\n    return new\nfor t in range(int(input())):\n    (n, m) = mi()\n    a = li()\n    k = ni()\n    b = li()\n    if check(a, m) == check(b, m):\n        print('Yes')\n    else:\n        print('No')", "def decom(a, m):\n    c = 1\n    while a % m == 0:\n        a = a // m\n        c = c * m\n    return (a, c)\nfor time in range(int(input())):\n    (t, m) = map(int, input().split())\n    a = [int(k) for k in input().split()]\n    t = input()\n    b = [int(k) for k in input().split()]\n    arep = ([], [])\n    brep = ([], [])\n    for j in a:\n        (d, c) = decom(j, m)\n        if len(arep[0]) > 0 and arep[0][-1] == d:\n            arep[1][-1] += c\n        else:\n            arep[0].append(d)\n            arep[1].append(c)\n    for j in b:\n        (d, c) = decom(j, m)\n        if len(brep[0]) > 0 and brep[0][-1] == d:\n            brep[1][-1] += c\n        else:\n            brep[0].append(d)\n            brep[1].append(c)\n    if brep == arep:\n        print('Yes')\n    else:\n        print('No')", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    (n, m) = map(int, input().split())\n    A = list(map(int, input().split()))\n    k = int(input())\n    B = list(map(int, input().split()))\n    if abs(n - k) % (m - 1) > 0:\n        return 'No'\n    arr1 = []\n    arr2 = []\n    for i in range(n):\n        v1 = A[i]\n        cnt = 0\n        while v1 > 0 and v1 % m == 0:\n            v1 //= m\n            cnt += 1\n        if not arr1:\n            arr1.append([v1, m ** cnt])\n        elif arr1[-1][0] == v1:\n            arr1[-1][1] += m ** cnt\n        else:\n            arr1.append([v1, m ** cnt])\n    for j in range(k):\n        v2 = B[j]\n        cnt = 0\n        while v2 > 0 and v2 % m == 0:\n            v2 //= m\n            cnt += 1\n        if not arr2:\n            arr2.append([v2, m ** cnt])\n        elif arr2[-1][0] == v2:\n            arr2[-1][1] += m ** cnt\n        else:\n            arr2.append([v2, m ** cnt])\n    (u, v) = (len(arr1), len(arr2))\n    if u != v:\n        return 'No'\n    for i in range(u):\n        if arr1[i] != arr2[i]:\n            return 'No'\n    return 'Yes'\nfor _ in range(int(input())):\n    print(solve())", "from itertools import repeat\n\ndef expand(l, m):\n    expL = []\n    for elm in l:\n        t = 1\n        while elm % m == 0:\n            t = t * m\n            elm = elm / m\n        if expL and expL[-1][0] == elm:\n            expL[-1][1] = expL[-1][1] + int(t)\n        else:\n            expL.append([int(elm), int(t)])\n    return expL\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    k = int(input())\n    b = list(map(int, input().split()))\n    expA = expand(a, m)\n    expB = expand(b, m)\n    if expA == expB:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [[1, int(x)] for x in input().split()]\n    k = int(input())\n    b = [[1, int(x)] for x in input().split()]\n    while True:\n        while a and b and (a[-1][1] == b[-1][1]):\n            t = min(a[-1][0], b[-1][0])\n            a[-1][0] -= t\n            b[-1][0] -= t\n            if not a[-1][0]:\n                a.pop()\n            if not b[-1][0]:\n                b.pop()\n        if not a or not b:\n            break\n        while (t := a[-1][1]) % m == 0:\n            if a[-1][0] > 1:\n                a[-1][0] -= 1\n            else:\n                a.pop()\n            a.append([m, t // m])\n        while (t := b[-1][1]) % m == 0:\n            if b[-1][0] > 1:\n                b[-1][0] -= 1\n            else:\n                b.pop()\n            b.append([m, t // m])\n        if a[-1][1] != b[-1][1]:\n            break\n    print('No' if a or b else 'Yes')", "for _ in range(int(input())):\n    (na, x) = map(int, input().split())\n    a = (*map(int, input().split()),)\n    nb = int(input())\n    b = (*map(int, input().split()),)\n    x_to_the = [1]\n    mx = max(max(a), max(b))\n    while x_to_the[-1] <= mx:\n        x_to_the.append(x_to_the[-1] * x)\n    m = len(x_to_the)\n    A = [[1, 0]]\n    for num in a:\n        for i in range(m):\n            if num % x_to_the[i]:\n                break\n        count = x_to_the[i - 1]\n        new = num // count\n        if new == A[-1][0]:\n            A[-1][-1] += count\n        else:\n            A.append([new, count])\n    B = [[1, 0]]\n    for num in b:\n        for i in range(m):\n            if num % x_to_the[i]:\n                break\n        count = x_to_the[i - 1]\n        new = num // count\n        if new == B[-1][0]:\n            B[-1][-1] += count\n        else:\n            B.append([new, count])\n    if A == B:\n        print('Yes')\n    else:\n        print('No')", "def f(arr, n, m):\n    ar = []\n    for i in range(n):\n        p = 1\n        x = arr[i]\n        while x % m == 0:\n            x = x // m\n            p *= m\n        tm = [x, p]\n        ar.append(tm)\n    li = []\n    i = 0\n    while i < len(ar):\n        li.append(ar[i])\n        j = i + 1\n        while j < len(ar) and ar[i][0] == ar[j][0]:\n            li[len(li) - 1][1] += ar[j][1]\n            j += 1\n        i = j\n    return li\nt = int(input())\nfor i in range(t):\n    (n, g) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    m = int(input())\n    ar = list(map(int, input().split()))\n    smarr = sum(arr)\n    smar = sum(ar)\n    if smarr != smar:\n        print('No')\n    else:\n        a = f(arr, n, g)\n        b = f(ar, m, g)\n        if a == b:\n            print('Yes')\n        else:\n            print('No')", "t = int(input())\n\ndef my_reduce(s, m):\n    extras = []\n    for k in s:\n        time = 1\n        while k % m == 0:\n            time *= m\n            k /= m\n        time = max(time, 1)\n        extras += [[int(k), time]]\n    i = 1\n    typer = extras[0][0]\n    prev = 0\n    while i < len(extras):\n        if extras[i][0] == typer:\n            extras[prev][1] += extras[i][1]\n            extras[i] = 0\n        else:\n            typer = extras[i][0]\n            prev = i\n        i += 1\n    return [x for x in extras if x]\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    k = int(input())\n    b = list(map(int, input().split()))\n    a = my_reduce(a, m)\n    b = my_reduce(b, m)\n    if a == b:\n        print('Yes')\n    else:\n        print('No')", "def cal(n, a, m):\n    (c, d) = ([], [])\n    for i in range(n):\n        e = 1\n        while a[i] % m == 0:\n            a[i] //= m\n            e *= m\n        if len(c) == len(d) and len(d) == 0 or c[len(c) - 1] != a[i]:\n            c.append(a[i])\n            d.append(e)\n        else:\n            d[len(d) - 1] += e\n    return (c, d)\nfor p in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    k = int(input())\n    b = list(map(int, input().split()))\n    (c, d) = cal(n, a, m)\n    (f, g) = cal(k, b, m)\n    if c == f and d == g:\n        print('Yes')\n    else:\n        print('No')", "def main():\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        a = list(map(int, input().split()))\n        k = int(input())\n        b = list(map(int, input().split()))\n        (aa, bb) = ([], [])\n        for i in range(n):\n            c = 1\n            while a[i] % m == 0:\n                a[i] //= m\n                c *= m\n            if len(aa) != 0 and aa[-1][0] == a[i]:\n                aa[-1][1] += c\n            else:\n                aa.append([a[i], c])\n        for i in range(k):\n            c = 1\n            while b[i] % m == 0:\n                b[i] //= m\n                c *= m\n            if len(bb) != 0 and bb[-1][0] == b[i]:\n                bb[-1][1] += c\n            else:\n                bb.append([b[i], c])\n        if aa == bb:\n            print('Yes')\n        else:\n            print('No')\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    arra = list(map(int, input().split()))\n    k = map(int, input().split())\n    arrb = list(map(int, input().split()))\n    v = []\n    for q in [arra, arrb]:\n        r = []\n        for i in q:\n            tms = 1\n            vl = i\n            while vl % m == 0:\n                tms *= m\n                vl //= m\n            if len(r) > 0 and r[-1][0] == vl:\n                r[-1][1] += tms\n            else:\n                r.append([vl, tms])\n        v.append(r)\n    print('Yes' if v[0] == v[1] else 'No')", "def spread(num):\n    times = 0\n    while num % m == 0:\n        times += 1\n        num = int(num / m)\n    return (num, m ** times)\n\ndef append(arr, x, times=1):\n    if not arr or arr[-1][0] != x:\n        arr.append([x, times])\n    else:\n        arr[-1][1] += times\n\ndef flatten(a):\n    new_a = []\n    for x in a:\n        if x % m == 0:\n            (num, times) = spread(x)\n            append(new_a, num, times)\n        else:\n            append(new_a, x, 1)\n    return new_a\ntests = int(input())\nfor _ in range(tests):\n    (n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    k = int(input())\n    b = list(map(int, input().split()))\n    a = flatten(a)\n    b = flatten(b)\n    print('Yes' if a == b else 'No')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    arra = list(map(int, input().split()))\n    k = map(int, input().split())\n    arrb = list(map(int, input().split()))\n    v = []\n    for q in [arra, arrb]:\n        r = []\n        for i in q:\n            tms = 1\n            vl = i\n            while vl % m == 0:\n                tms *= m\n                vl //= m\n            if len(r) > 0 and r[-1][0] == vl:\n                r[-1][1] += tms\n            else:\n                r.append([vl, tms])\n        v.append(r)\n    print('Yes' if v[0] == v[1] else 'No')", "T = int(input())\nfor i in range(T):\n    (n, m) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    arr_2 = arr.copy()\n    k = int(input())\n    brr = list(map(int, input().split()))\n    brr_2 = brr.copy()\n    for i in range(n):\n        while arr_2[i] % m == 0:\n            arr_2[i] //= m\n    for i in range(k):\n        while brr_2[i] % m == 0:\n            brr_2[i] //= m\n    pos_a = 0\n    stats_a = []\n    last = -1\n    for i in range(n):\n        if arr_2[i] != last:\n            last = arr_2[i]\n            stats_a.append([last, arr[i]])\n        else:\n            stats_a[-1][1] += arr[i]\n    stats_b = []\n    last = -1\n    for i in range(k):\n        if brr_2[i] != last:\n            last = brr_2[i]\n            stats_b.append([last, brr[i]])\n        else:\n            stats_b[-1][1] += brr[i]\n    if stats_b == stats_a:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    a0 = [int(x) for x in input().split()]\n    k = int(input())\n    b0 = [int(x) for x in input().split()]\n    a = []\n    b = []\n    for i in range(n):\n        q = a0[i]\n        j = 1\n        while q % m == 0:\n            j *= m\n            q //= m\n        if i > 0 and q == a[-1][0]:\n            a[-1][1] += j\n        else:\n            a.append([q, j])\n    for i in range(k):\n        q = b0[i]\n        j = 1\n        while q % m == 0:\n            j *= m\n            q //= m\n        if i > 0 and q == b[-1][0]:\n            b[-1][1] += j\n        else:\n            b.append([q, j])\n    if len(a) == len(b):\n        s = True\n        for i in range(len(a)):\n            if (a[i][0] == b[i][0] and a[i][1] == b[i][1]) == False:\n                s = False\n                break\n        if s:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    nls = []\n    top = -1\n    for i in lst:\n        cnt = 1\n        while i % m == 0:\n            i //= m\n            cnt *= m\n        if nls and nls[top][0] == i:\n            nls[top][1] += cnt\n        else:\n            top += 1\n            nls.append([i, cnt])\n    k = int(input())\n    lt = list(map(int, input().split()))\n    nl = []\n    top = -1\n    for i in lt:\n        cnt = 1\n        while i % m == 0:\n            i //= m\n            cnt *= m\n        if nl and nl[top][0] == i:\n            nl[top][1] += cnt\n        else:\n            top += 1\n            nl.append([i, cnt])\n    if nls == nl:\n        print('Yes')\n    else:\n        print('No')", "def reduce(l, m):\n    d = []\n    last = l[0]\n    c = 1\n    for i in l[1:]:\n        if i != last:\n            d.append([last, c])\n            last = i\n            c = 1\n        else:\n            c += 1\n    d.append([last, c])\n    for i in range(len(d)):\n        while d[i][0] % m == 0:\n            d[i] = [d[i][0] // m, d[i][1] * m]\n    r = [d[0]]\n    for i in range(1, len(d)):\n        if d[i][0] == r[-1][0]:\n            r[-1][1] += d[i][1]\n        else:\n            r.append(d[i])\n    return r\nfor case in range(int(input())):\n    (_, m) = [int(j) for j in input().split()]\n    a = [int(j) for j in input().split()]\n    input()\n    b = [int(j) for j in input().split()]\n    print(['No', 'Yes'][reduce(a, m) == reduce(b, m)])", "t = int(input())\nfor tt in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    k = int(input())\n    b = list(map(int, input().split()))\n    a1 = []\n    for i in range(n):\n        q = a[i]\n        x = 1\n        while q % m == 0:\n            x *= m\n            q //= m\n        a1 += [[q, x]]\n    b1 = []\n    for j in range(k):\n        p = b[j]\n        y = 1\n        while p % m == 0:\n            y *= m\n            p //= m\n        b1 += [[p, y]]\n    e = 0\n    f = 0\n    while e < n and f < k:\n        if a1[e] == b1[f]:\n            e += 1\n            f += 1\n        elif a1[e][0] == b1[f][0]:\n            if a1[e][1] > b1[f][1]:\n                a1[e][1] -= b1[f][1]\n                f += 1\n            else:\n                b1[f][1] -= a1[e][1]\n                e += 1\n        else:\n            print('No')\n            break\n    else:\n        if e == n and f == k:\n            print('Yes')\n        else:\n            print('No')", "t = int(input())\nfor jkjk in range(t):\n    (n, m) = tuple(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    k = int(input())\n    b = list(map(int, input().split()))\n    a_mod = []\n    b_mod = []\n    for i in range(len(arr)):\n        p = 1\n        while arr[i] % m == 0:\n            arr[i] = arr[i] // m\n            p = p * m\n        a_mod.append(p)\n    for i in range(len(b)):\n        p = 1\n        while b[i] % m == 0:\n            b[i] = b[i] // m\n            p = p * m\n        b_mod.append(p)\n    (i, j) = (0, 0)\n    while 1:\n        if i >= n and j >= k:\n            print('Yes')\n            break\n        if i >= n or j >= k:\n            print('No')\n            break\n        if arr[i] != b[j]:\n            print('No')\n            break\n        else:\n            jin = min(a_mod[i], b_mod[j])\n            a_mod[i] -= jin\n            b_mod[j] -= jin\n            if a_mod[i] == 0:\n                i += 1\n            if b_mod[j] == 0:\n                j += 1", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    k = int(input())\n    b = list(map(int, input().split()))\n    cpt = 0\n    crem = a[0]\n    ok = True\n    mstep = a.copy()\n    ac = [None] * n\n    bc = [None] * k\n    for i in range(n):\n        q = divmod(mstep[i], m)\n        cnt = 1\n        while not q[1]:\n            mstep[i] //= m\n            cnt *= m\n            q = divmod(mstep[i], m)\n        ac[i] = [mstep[i], cnt]\n    mstep = b.copy()\n    for i in range(k):\n        q = divmod(mstep[i], m)\n        cnt = 1\n        while not q[1]:\n            mstep[i] //= m\n            cnt *= m\n            q = divmod(mstep[i], m)\n        bc[i] = [mstep[i], cnt]\n    for i in range(len(ac) - 2, -1, -1):\n        if ac[i][0] == ac[i + 1][0]:\n            ac[i][1] += ac[i + 1][1]\n            ac[i + 1][0] = 0\n    ac = [x for x in ac if x[0]]\n    for i in range(len(bc) - 2, -1, -1):\n        if bc[i][0] == bc[i + 1][0]:\n            bc[i][1] += bc[i + 1][1]\n            bc[i + 1][0] = 0\n    bc = [x for x in bc if x[0]]\n    print('Yes' if ac == bc else 'No')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    k = int(input())\n    b = list(map(int, input().split()))\n    i = 0\n    c = [1] * n\n    while i < n:\n        if a[i] % m == 0:\n            temp = a[i] // m\n            a[i] = temp\n            c[i] = c[i] * m\n        else:\n            i += 1\n    i = 0\n    d = [1] * k\n    while i < k:\n        if b[i] % m == 0:\n            temp = b[i] // m\n            b[i] = temp\n            d[i] = d[i] * m\n        else:\n            i += 1\n    i = 1\n    while i < n:\n        if a[i] == a[i - 1]:\n            c[i] = c[i] + c[i - 1]\n            a.pop(i - 1)\n            c.pop(i - 1)\n            n -= 1\n        else:\n            i += 1\n    i = 1\n    while i < k:\n        if b[i] == b[i - 1]:\n            d[i] = d[i] + d[i - 1]\n            b.pop(i - 1)\n            d.pop(i - 1)\n            k -= 1\n        else:\n            i += 1\n    if n != k:\n        print('No')\n    else:\n        flag = True\n        for i in range(n):\n            if a[i] != b[i] or c[i] != d[i]:\n                flag = False\n                break\n        if flag:\n            print('Yes')\n        else:\n            print('No')"]