["from sys import stdin\nfrom math import log, floor, ceil, gcd\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\ninput = stdin.readline\ninp = lambda : int(stdin.readline())\nrs = lambda : stdin.readline().strip()\n\ndef ra(typ):\n    return list(map(typ, stdin.readline().split()))\n\ndef rv(typ):\n    return map(typ, stdin.readline().split())\n\ndef main():\n    for _ in range(inp()):\n        n = inp()\n        w = ra(int)\n        a = 0\n        b = n - 1\n        (ans, pre, pos) = (0, w[0], w[n - 1])\n        while a < b:\n            if pre == pos:\n                ans = a + 1 + (n - b)\n            if pre <= pos:\n                a += 1\n                pre += w[a]\n            else:\n                b -= 1\n                pos += w[b]\n        print(ans)\nmain()", "def eat_candies(n, weights):\n    left = 0\n    right = n - 1\n    left_sum = 0\n    right_sum = 0\n    result = 0\n    while left <= right:\n        if left_sum < right_sum:\n            left_sum += weights[left]\n            left += 1\n        elif left_sum > right_sum:\n            right_sum += weights[right]\n            right -= 1\n        else:\n            result = left + n - right - 1\n            if left == right:\n                break\n            left_sum += weights[left]\n            right_sum += weights[right]\n            left += 1\n            right -= 1\n    if left_sum == right_sum:\n        result = left + n - right - 1\n    return result\nt = int(input())\noutputs = []\nfor i in range(t):\n    n = int(input())\n    weights = [int(c) for c in input().split(' ')]\n    outputs.append(eat_candies(n, weights))\nfor o in outputs:\n    print(o)", "def solution(candies):\n    n = len(candies)\n    left = 0\n    right = n - 1\n    presum = 0\n    subsum = 0\n    candy_num = 0\n    max_num = 0\n    while left <= right:\n        if presum <= subsum:\n            presum += candies[left]\n            left += 1\n        else:\n            subsum += candies[right]\n            right -= 1\n        candy_num += 1\n        if presum == subsum:\n            max_num = candy_num\n    return max_num\ntest_cast_num = int(input())\ncandies = []\nfor _ in range(test_cast_num):\n    input()\n    candies.append(list(map(int, input().split())))\nfor candy in candies:\n    print(solution(candy))", "def solve(arr):\n    if len(arr) < 2:\n        return 0\n    ans = 0\n    count = 2\n    left = 0\n    right = len(arr) - 1\n    balance = arr[right] - arr[left]\n    if arr[left] - arr[right] == 0:\n        ans = count\n    while left != right - 1:\n        count += 1\n        if balance >= 0:\n            left += 1\n            balance -= arr[left]\n        else:\n            right -= 1\n            balance += arr[right]\n        if balance == 0:\n            ans = count\n    return ans\nt = int(input())\ncases = []\nfor i in range(t):\n    input()\n    cases.append(list(map(int, input().split(' '))))\nans = []\nfor case in cases:\n    ans.append(solve(case))\nfor answer in ans:\n    print(answer)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    number = 2\n    answer = 0\n    candy = list(map(int, input().split()))\n    left = 0\n    leftSum = candy[left]\n    right = n - 1\n    rightSum = candy[right]\n    while left < right:\n        if leftSum == rightSum:\n            answer = number\n            right -= 1\n            left += 1\n            rightSum += candy[right]\n            leftSum += candy[left]\n            number += 2\n        elif leftSum > rightSum:\n            right -= 1\n            rightSum += candy[right]\n            number += 1\n        elif rightSum > leftSum:\n            left += 1\n            leftSum += candy[left]\n            number += 1\n    print(answer)", "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 2:\n        if a[0] == a[1]:\n            print(2)\n        else:\n            print(0)\n        return\n    (index1, index2) = (0, 1)\n    (w1, w2) = (a[0], a[-1])\n    ans = 0\n    while index1 + index2 < n:\n        if w1 < w2:\n            index1 += 1\n            try:\n                w1 += a[index1]\n            except BaseException:\n                break\n        elif w1 > w2:\n            index2 += 1\n            try:\n                w2 += a[-index2]\n            except BaseException:\n                break\n        else:\n            ans = index1 + index2 + 1\n            index1 += 1\n            index2 += 1\n            try:\n                w1 += a[index1]\n                w2 += a[-index2]\n            except BaseException:\n                break\n    print(ans)\nfor i in range(int(input())):\n    main()", "def solve(N, candies):\n    half = sum(candies) // 2\n    s = 0\n    for j in range(N):\n        s += candies[j]\n        if s > half:\n            break\n    i = j - 1\n    (wa, wb) = (sum(candies[:i + 1]), sum(candies[j:]))\n    while wa != wb:\n        if i == -1 or j == N:\n            return 0\n        if wa > wb:\n            wa -= candies[i]\n            i -= 1\n        else:\n            wb -= candies[j]\n            j += 1\n    return i + 1 + N - j\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    candies = list(map(int, input().split()))\n    print(solve(N, candies))", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    i = 0\n    k = n - 1\n    a = arr[0]\n    b = arr[-1]\n    ans = 0\n    while i < k:\n        if a == b:\n            ans = i + 1 + (n - k)\n        if a >= b:\n            k -= 1\n            b += arr[k]\n        else:\n            i += 1\n            a += arr[i]\n    print(ans)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    alice = 0\n    alice_index = 0\n    bob = 0\n    bob_index = len(a) - 1\n    ans = 0\n    while alice_index <= bob_index:\n        if alice <= bob:\n            alice += a[alice_index]\n            alice_index += 1\n        else:\n            bob += a[bob_index]\n            bob_index -= 1\n        if alice == bob:\n            ans = alice_index + (len(a) - bob_index - 1)\n    print(ans)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    w = list(map(int, input().split()))\n    (l, r) = (0, n - 1)\n    (a, b) = (0, 0)\n    ans = 0\n    while l <= r:\n        if a < b:\n            a += w[l]\n            l += 1\n        else:\n            b += w[r]\n            r -= 1\n        if a == b:\n            ans = max(ans, l + n - 1 - r)\n    print(ans)\ntst = int(input())\nfor tt in range(tst):\n    solve()", "def value(array):\n    answer = 0\n    count = 0\n    mass1 = 0\n    mass2 = 0\n    j = len(array) - 1\n    for i in range(len(array)):\n        mass1 += array[i]\n        count += 1\n        while mass2 < mass1 and j > i:\n            mass2 += array[j]\n            j -= 1\n            count += 1\n        if mass1 == mass2 and count > answer:\n            answer = count\n    return answer\n\ndef main():\n    n = int(input())\n    data = []\n    for i in range(n):\n        count = int(input())\n        array = list(map(int, input().split()))\n        data.append(array)\n    for array in data:\n        print(value(array))\nmain()", "for ar in [*open(0)][2::2]:\n    ar = [*map(int, ar.strip().split())]\n    l = len(ar)\n    (i, j, c, ans) = (1, l - 1, 1, 0)\n    (ls, rs) = (ar[0], 0)\n    while i <= j:\n        if ls < rs:\n            ls += ar[i]\n            i += 1\n            c += 1\n        elif ls > rs:\n            rs += ar[j]\n            j -= 1\n            c += 1\n        if ls == rs:\n            ans = c\n            ls += ar[i]\n            i += 1\n            c += 1\n    print(ans)", "from random import getrandbits\nRANDOM = getrandbits(32)\n\nclass Wrapper(int):\n\n    def __init__(self, x):\n        int.__init__(x)\n\n    def __hash__(self):\n        return super(Wrapper, self).__hash__() ^ RANDOM\nT = int(input())\nq = []\nfor i in range(T):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    q.append((arr, n))\ntarget = 'abcdefghijk'\n\ndef solve(arr, n):\n    if n == 1:\n        print(0)\n        return\n    i = 0\n    j = n - 1\n    lastSum = 0\n    isum = arr[i]\n    jsum = arr[j]\n    while j - i > 1:\n        if isum == jsum:\n            lastSum = i + 1 + (n - j)\n        if isum < jsum:\n            i += 1\n            isum += arr[i]\n        else:\n            j -= 1\n            jsum += arr[j]\n    if isum == jsum:\n        lastSum = i + 1 + (n - j)\n    print(lastSum)\nfor (arr, n) in q:\n    solve(arr, n)", "def f():\n    n = int(input())\n    l = 0\n    r = n - 1\n    w = [int(i) for i in input().split()]\n    res = 0\n    while l <= r:\n        ce = 0\n        lw = 0\n        rw = 0\n        ce += 1\n        lw = w[l]\n        l += 1\n        while l <= r and lw != rw:\n            if lw > rw:\n                rw += w[r]\n                r -= 1\n                ce += 1\n            else:\n                lw += w[l]\n                l += 1\n                ce += 1\n        if lw == rw:\n            res += ce\n        else:\n            break\n    return res\nt = int(input())\nfor _ in range(t):\n    print(f())", "def solve(arr):\n    a = 0\n    b = 0\n    i = 0\n    j = len(arr) - 1\n    ans = 0\n    added = 0\n    while i <= j:\n        if a < b:\n            a += int(arr[i])\n            i += 1\n            added += 1\n        else:\n            if a == b:\n                ans = added\n            b += int(arr[j])\n            j -= 1\n            added += 1\n    return len(arr) if a == b else ans\nn = int(input())\nfor i in range(n):\n    m = int(input())\n    arr = input().split(' ')\n    print(solve(arr))", "a = []\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    si = l[0]\n    sj = l[-1]\n    i = 0\n    j = n - 1\n    k = 0\n    m = 0\n    while j - i > 0:\n        if si == sj:\n            i += 1\n            j -= 1\n            k += 2\n            m = k\n            si += l[i]\n            sj += l[j]\n        elif si > sj:\n            j -= 1\n            sj += l[j]\n            k += 1\n        else:\n            i += 1\n            si += l[i]\n            k += 1\n    a.append(str(m))\nprint('\\n'.join(a))", "t = int(input())\n\ndef f(candies):\n    ans = 0\n    (i, j) = (0, len(candies) - 1)\n    (lsum, rsum) = (candies[i], candies[j])\n    while j > i:\n        if lsum > rsum:\n            j -= 1\n            rsum += candies[j]\n        elif lsum < rsum:\n            i += 1\n            lsum += candies[i]\n        else:\n            ans = i + 1 + len(candies) - j\n            i += 1\n            j -= 1\n            lsum += candies[i]\n            rsum += candies[j]\n    return ans\nfor k in range(t):\n    n = input()\n    candies = [int(w) for w in input().split()]\n    print(f(candies))", "from bisect import bisect_left, bisect_right\nfrom operator import truediv\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        lst = list(map(int, input().split()))\n        cum = [0] * n\n        cum[0] = lst[0]\n        for i in range(1, n):\n            cum[i] = cum[i - 1] + lst[i]\n        spl = cum[n - 1] / 2\n        i = bisect_left(cum, spl)\n        j = bisect_right(cum, spl)\n        if i == j:\n            i -= 1\n            j += 1\n        if i < 0 or j >= n:\n            print(0)\n            continue\n        sum1 = cum[i]\n        sum2 = cum[n - 1] - cum[j - 1]\n        foo = False\n        while not (i < 0 or j >= n):\n            if sum1 == sum2:\n                foo = True\n                break\n            if sum1 < sum2:\n                j += 1\n            elif sum1 > sum2:\n                i -= 1\n            sum1 = cum[i]\n            sum2 = cum[n - 1] - cum[j - 1]\n        if foo:\n            print(i + n - j + 1)\n            continue\n        if i < 0 or j >= n:\n            print(0)\n            continue\n        print(i + n - 1 - j)\nmain()", "def solve(n, arr):\n    l = 0\n    r = n - 1\n    c = 2\n    res = 0\n    alice = arr[l]\n    bob = arr[r]\n    while l < r:\n        if alice == bob:\n            if l + 1 == r:\n                res += c\n                return res\n            elif l + 2 == r:\n                res += c\n                return res\n            else:\n                l += 1\n                r -= 1\n                alice += arr[l]\n                bob += arr[r]\n                res += c\n                c = 2\n        elif alice > bob:\n            r -= 1\n            bob += arr[r]\n            c += 1\n        else:\n            l += 1\n            alice += arr[l]\n            c += 1\n    return res\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(solve(n, arr))", "for i in range(int(input())):\n    number_of_candies = int(input())\n    candies_weights = list(map(int, input().split()))\n    alice_current_weight = sum(candies_weights)\n    bob_last_weight = 0\n    bob_weights = set()\n    for j in range(number_of_candies - 1, -1, -1):\n        current_candy_weight = candies_weights[j]\n        alice_current_weight -= current_candy_weight\n        bob_last_weight += current_candy_weight\n        bob_weights.add(bob_last_weight)\n        if alice_current_weight in bob_weights:\n            bob_calculated_candies_weight = 0\n            for k in range(number_of_candies - 1, -1, -1):\n                bob_calculated_candies_weight += candies_weights[k]\n                if bob_calculated_candies_weight == alice_current_weight:\n                    print(j + 1 + number_of_candies - k - 1)\n                    break\n            break\n    else:\n        print(0)", "for _ in range(int(input())):\n    N = int(input())\n    candies = list(map(int, input().split()))\n    (left, right) = (0, N - 1)\n    (alice, bob) = (0, 0)\n    while left <= right:\n        if alice < bob:\n            alice += candies[left]\n            left += 1\n        else:\n            bob += candies[right]\n            right -= 1\n    left -= 1\n    right += 1\n    while alice != bob:\n        if alice < bob:\n            bob -= candies[right]\n            right += 1\n        else:\n            alice -= candies[left]\n            left -= 1\n    print(left + 1 + (N - right))", "def calculate():\n    i = 0\n    j = N - 1\n    if i == j:\n        return 0\n    left = arr[i]\n    right = arr[j]\n    count = 2\n    equal = 0\n    while i < j:\n        if left < right:\n            if i + 1 < j:\n                i += 1\n                left += arr[i]\n                count += 1\n            else:\n                return equal\n        elif left > right:\n            if j - 1 > i:\n                j -= 1\n                right += arr[j]\n                count += 1\n            else:\n                return equal\n        else:\n            equal = count\n            if i + 1 < j - 1:\n                i += 1\n                j -= 1\n                left += arr[i]\n                right += arr[j]\n                count += 2\n            else:\n                return equal\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    print(calculate())", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nt = inp()\nfor test in range(t):\n    n = inp()\n    candies = inlt()\n    (lo, hi) = (0, n - 1)\n    (a, b, count) = (0, 0, 0)\n    while lo <= hi:\n        if a < b:\n            a += candies[lo]\n            lo += 1\n        elif b < a:\n            b += candies[hi]\n            hi -= 1\n        elif lo != hi:\n            a += candies[lo]\n            b += candies[hi]\n            lo += 1\n            hi -= 1\n        else:\n            break\n        if a == b:\n            count = lo + n - hi - 1\n    print(count)", "for n in [*open(0)][2::2]:\n    n = [*map(int, n.split())]\n    (a, b, l, f) = [0] * 4\n    r = len(n) - 1\n    while l <= r:\n        if a <= b:\n            a += n[l]\n            l += 1\n        elif b < a:\n            b += n[r]\n            r -= 1\n        if a == b:\n            f = len(n) - r + l - 1\n    print(f)", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    i = j = r = s = t = 0\n    while i - j < len(a):\n        if s <= t:\n            s += a[i]\n            i += 1\n        else:\n            j -= 1\n            t += a[j]\n        if s == t:\n            r = i - j\n    print(r)", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    i = j = r = s = t = 0\n    while i - j < len(a):\n        if s <= t:\n            s += a[i]\n            i += 1\n        else:\n            j -= 1\n            t += a[j]\n        if s == t:\n            r = i - j\n    print(r)", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    i = j = r = s = t = 0\n    while i - j < len(a):\n        if s <= t:\n            s += a[i]\n            i += 1\n        else:\n            j -= 1\n            t += a[j]\n        if s == t:\n            r = i - j\n    print(r)", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    i = j = r = s = t = 0\n    while i - j < len(a):\n        if s <= t:\n            s += a[i]\n            i += 1\n        else:\n            j -= 1\n            t += a[j]\n        if s == t:\n            r = i - j\n    print(r)", "def _get_res(arr):\n    (p1, p2) = (0, len(arr) - 1)\n    (sum1, sum2) = (0, 0)\n    res = 0\n    while p1 <= p2:\n        if sum1 >= sum2:\n            sum2 += arr[p2]\n            p2 -= 1\n        else:\n            sum1 += arr[p1]\n            p1 += 1\n        if sum1 == sum2:\n            res = p1 + (len(arr) - 1 - p2)\n    return res\nfor _ in range(int(input())):\n    input()\n    nums = list(map(int, input().split()))\n    print(_get_res(nums))", "def main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        li = [int(x) for x in input().split()]\n        (p1, p2) = (-1, n)\n        (s1, s2) = (0, 0)\n        ans = 0\n        while p1 < p2:\n            if s1 == s2:\n                ans = n - p2 + p1 + 1\n                try:\n                    p1 += 1\n                    s1 += li[p1]\n                except:\n                    p2 -= 1\n                    s2 += li[p2]\n            elif s1 < s2:\n                p1 += 1\n                s1 += li[p1]\n            else:\n                p2 -= 1\n                s2 += li[p2]\n        print(ans)\nmain()", "import math\nimport functools\nfrom collections import *\n\ndef Solve():\n    n = int(input())\n    ar = [int(i) for i in input().split()]\n    if n < 2:\n        print(0)\n        return\n    (l, r) = (0, n - 1)\n    res = 0\n    temp = 2\n    cur = ar[0] - ar[-1]\n    while l < r:\n        if cur < 0:\n            l += 1\n            cur += ar[l]\n            temp += 1\n        elif cur > 0:\n            r -= 1\n            cur -= ar[r]\n            temp += 1\n        else:\n            res += temp\n            temp = 2\n            l += 1\n            r -= 1\n            cur = ar[l] - ar[r]\n    print(res)\n\ndef main():\n    x = int(input(''))\n    for _ in range(x):\n        Solve()\nmain()", "def task(n, a):\n    start = 0\n    end = len(a) - 1\n    left = 0\n    right = 0\n    candies = 0\n    best = 0\n    while start <= end:\n        candies += 1\n        if left <= right:\n            left += a[start]\n            start += 1\n        else:\n            right += a[end]\n            end -= 1\n        if left == right:\n            best = candies\n    print(best)\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    task(n, a)", "import math\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = 0\n    l = 0\n    r = n - 1\n    left = 0\n    right = 0\n    while l <= r:\n        if left < right:\n            left += arr[l]\n            l += 1\n        else:\n            right += arr[r]\n            r -= 1\n        if left == right:\n            ans = max(ans, l + (n - r - 1))\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "def fun(l, n):\n    count = 2\n    i = 0\n    j = len(l) - 1\n    alice = l[0]\n    bob = l[-1]\n    max_yet = 0\n    while i < j:\n        if alice < bob:\n            i += 1\n            alice += l[i]\n            count += 1\n        elif alice > bob:\n            j -= 1\n            bob += l[j]\n            count += 1\n        elif alice == bob:\n            i += 1\n            j -= 1\n            alice += l[i]\n            bob += l[j]\n            max_yet = count\n            count += 2\n    return max_yet\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(fun(l, n))", "out = []\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    l = 0\n    r = N - 1\n    Alice = 0\n    Bob = 0\n    ans = 0\n    while l <= r:\n        if Alice <= Bob:\n            Alice += A[l]\n            if Alice == Bob:\n                ans = l + 1 + N - r - 1\n            l += 1\n        else:\n            Bob += A[r]\n            r -= 1\n            if Alice == Bob:\n                ans = l + N - r - 1\n    out.append(ans)\nprint(*out, sep='\\n')", "import math\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = 0\n    l = 0\n    r = n - 1\n    left = 0\n    right = 0\n    while l <= r:\n        if left < right:\n            left += arr[l]\n            l += 1\n        else:\n            right += arr[r]\n            r -= 1\n        if left == right:\n            ans = max(ans, l + (n - r - 1))\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    i = j = r = s = t = 0\n    while i - j < len(a):\n        if s <= t:\n            s += a[i]\n            i += 1\n        else:\n            j -= 1\n            t += a[j]\n        if s == t:\n            r = i - j\n    print(r)", "import collections\nfrom math import ceil, gcd, sqrt, log\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    maxCandies = 0\n    (i, j) = (0, n - 1)\n    (Alex, Bob) = (0, 0)\n    (c1, c2) = (0, 0)\n    while i <= j:\n        if Alex < Bob:\n            Alex += A[i]\n            i += 1\n            c1 += 1\n        elif Bob < Alex:\n            Bob += A[j]\n            j -= 1\n            c2 += 1\n        else:\n            maxCandies = c1 + c2\n            if i != j:\n                Alex += A[i]\n                Bob += A[j]\n                c1 += 1\n                c2 += 1\n            i += 1\n            j -= 1\n    if Alex == Bob:\n        maxCandies = max(maxCandies, c1 + c2)\n    print(maxCandies)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "for i in range(int(input())):\n    lenght = int(input())\n    array = [int(i) for i in input().split()]\n    prefix = array[0]\n    sufix = array[lenght - 1]\n    i = 0\n    j = lenght - 1\n    count = 0\n    ans = 0\n    while i < j:\n        if prefix == sufix:\n            count += 2\n            ans = count\n            i += 1\n            j -= 1\n            prefix += array[i]\n            sufix += array[j]\n        elif prefix > sufix:\n            j -= 1\n            sufix += array[j]\n            count += 1\n        else:\n            i += 1\n            prefix += array[i]\n            count += 1\n    print(ans)", "def eat():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        return 0\n    (left_index, right_index) = (0, n - 1)\n    (left_sum, right_sum) = (a[0], a[-1])\n    max_sum = 2 if left_sum == right_sum else 0\n    while left_index < right_index:\n        if left_sum == right_sum:\n            max_sum = left_index + 1 + n - right_index\n        if left_sum <= right_sum:\n            left_index += 1\n            left_sum += a[left_index]\n        else:\n            right_index -= 1\n            right_sum += a[right_index]\n    return max_sum\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        print(eat())\nmain()", "def solve(n, nums):\n    (left, right) = (0, n - 1)\n    (lSum, rSum) = (nums[left], nums[right])\n    ans = 0\n    while left < right:\n        while rSum < lSum:\n            right -= 1\n            rSum += nums[right]\n        if lSum == rSum and left != right:\n            ans = left + 1 + (n - right)\n        left += 1\n        lSum += nums[left]\n    if lSum == rSum and left != right and (left < right):\n        ans = left + 1 + (n - right - 1)\n    return ans\nt = int(input())\nfor T in range(t):\n    n = int(input())\n    nums = list(map(int, input().split(' ')))\n    print(solve(n, nums))", "import math as m\ni = input()\ninp = []\nfor a in range(0, int(i)):\n    inp += [[input(), input()]]\n\ndef maxx(arr):\n    if arr == []:\n        return 0\n    else:\n        return max(arr)\nfor s in inp:\n    n = int(s[0])\n    arr = [int(x) for x in s[1].split()]\n    i = 0\n    j = n - 1\n    lsum = arr[i]\n    rsum = arr[j]\n    best = 0\n    while i < j:\n        if lsum < rsum:\n            i += 1\n            lsum += arr[i]\n        elif rsum < lsum:\n            j -= 1\n            rsum += arr[j]\n        else:\n            best = i + (n - 1 - j) + 2\n            i += 1\n            lsum += arr[i]\n    print(best)", "answers = []\nfor _ in range(int(input())):\n    n = int(input())\n    w = [int(x) for x in input().split()]\n    i = 0\n    j = n - 1\n    a = 0\n    b = 0\n    ans = 0\n    while i <= j:\n        a += w[i]\n        i += 1\n        while a > b and i <= j:\n            b += w[j]\n            j -= 1\n        if a == b:\n            ans = i + (n - 1 - j)\n    answers.append(ans)\nfor ans in answers:\n    print(ans)", "def compute(n, a):\n    weights_right = 0\n    weights_left = 0\n    cntr_right = 0\n    cntr_left = 0\n    idx_right = n - 1\n    idx_left = 0\n    answers = 0\n    while idx_left <= idx_right:\n        if weights_left <= weights_right:\n            weights_left += a[idx_left]\n            idx_left += 1\n        elif weights_left > weights_right:\n            weights_right += a[idx_right]\n            idx_right -= 1\n        if weights_left == weights_right:\n            answers = n - idx_right + idx_left - 1\n    return answers\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input().split()\n    a = [int(i) for i in a]\n    print(compute(n, a))", "def Candies(arr, n):\n    if n < 2:\n        return 0\n    ans = 0\n    i = 0\n    j = n - 1\n    Alice = arr[0]\n    Bob = arr[n - 1]\n    while i < j:\n        if Alice == Bob:\n            ans = i + 1 + n - j\n            i += 1\n            j -= 1\n            Alice += arr[i]\n            Bob += arr[j]\n        elif Alice > Bob:\n            j -= 1\n            Bob += arr[j]\n        else:\n            i += 1\n            Alice += arr[i]\n    return ans\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(Candies(arr, n))", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    i = j = r = s = t = 0\n    while i - j < len(a):\n        if s <= t:\n            s += a[i]\n            i += 1\n        else:\n            j -= 1\n            t += a[j]\n        if s == t:\n            r = i - j\n    print(r)", "def verdict(n, a):\n    Alice_Tot = a[0]\n    Bob_Tot = a[-1]\n    l = 0\n    r = n - 1\n    res = 0\n    while l < r:\n        if Alice_Tot == Bob_Tot:\n            res = l + 1 + (n - r)\n            l += 1\n            Alice_Tot += a[l]\n        elif Alice_Tot < Bob_Tot:\n            l += 1\n            Alice_Tot += a[l]\n        else:\n            r -= 1\n            Bob_Tot += a[r]\n    return res\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(verdict(n, a))", "t = int(input())\nfor _ in range(t):\n\n    def solve():\n        n = int(input())\n        a = list(map(int, input().split()))\n        ans = 0\n        (suml, sumr) = (a[0], a[n - 1])\n        (l, r) = (0, n - 1)\n        while l < r:\n            if suml == sumr:\n                ans = max(ans, l + 1 + n - r)\n            if suml < sumr:\n                l += 1\n                suml += a[l]\n            else:\n                r -= 1\n                sumr += a[r]\n        print(ans)\n    solve()", "def resi():\n    n = int(input())\n    w = list(map(int, input().split()))\n    Bob = 0\n    Alice = 0\n    l = 0\n    d = n - 1\n    br = 0\n    while l - 1 <= d:\n        br += 1\n        if Bob == Alice:\n            res = l + (n - 1 - d)\n            Alice += w[l]\n            l += 1\n        if Bob > Alice:\n            Alice += w[l]\n            l += 1\n        if Bob < Alice:\n            Bob += w[d]\n            d -= 1\n    print(res)\n    return\nfor _ in range(int(input())):\n    resi()", "import math\n\ndef solve():\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    bob = arr[n - 1]\n    alice = arr[0]\n    r = n - 1\n    l = 0\n    ans = 0\n    while l < r:\n        if bob == alice:\n            ans = max(ans, l + n - r + 1)\n        if alice <= bob:\n            l += 1\n            alice += arr[l]\n        else:\n            r -= 1\n            bob += arr[r]\n    print(ans)\ntst = int(input())\nfor i in range(tst):\n    solve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    w = list(map(int, input().split()))\n    a = w[0]\n    b = w[-1]\n    i = 0\n    j = n - 1\n    t = 2\n    c = 0\n    while i < j:\n        if a == b:\n            c = t\n            j -= 1\n            b += w[j]\n            i += 1\n            a += w[i]\n            t += 2\n        elif a > b:\n            j -= 1\n            b += w[j]\n            t += 1\n        else:\n            i += 1\n            a += w[i]\n            t += 1\n    print(c)", "def inp(*, cf=lambda x: x):\n    return cf(input())\n\ndef inpint():\n    return inp(cf=int)\n\ndef inp_line(*, cf=lambda x: x, s=' '):\n    return list(map(cf, input().split(s)))\n\ndef inpints():\n    return inp_line(cf=int)\n\ndef test_case(case):\n    n = inpint()\n    w = inpints()\n    ai = 0\n    bi = len(w) - 1\n    suma = w[0]\n    sumb = w[len(w) - 1]\n    ans = 0\n    while ai < bi:\n        if suma == sumb:\n            ans = max(ans, ai + 1 + n - bi)\n        if suma <= sumb:\n            ai += 1\n            suma += w[ai]\n        elif suma > sumb:\n            bi -= 1\n            sumb += w[bi]\n    return ans\n\ndef main():\n    T = inpint()\n    for t in range(1, T + 1):\n        print(test_case(t))\nmain()", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_ls():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        ls = get_ls()\n        (i, j) = (0, n - 1)\n        (x, y) = (ls[0], ls[-1])\n        ans = 0\n        while i < j:\n            if x == y:\n                ans = max(ans, i + 1 + n - j)\n            if x <= y:\n                i += 1\n                x += ls[i]\n            else:\n                j -= 1\n                y += ls[j]\n        print(ans)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    s = [int(i) for i in input().split()]\n    (l, r) = (0, 0)\n    (a, b) = (0, 0)\n    ans = 0\n    while r + l <= n:\n        if a == b:\n            ans = r + l\n            a += s[l]\n            b += s[n - r - 1]\n            l += 1\n            r += 1\n        elif a > b:\n            b += s[n - r - 1]\n            r += 1\n        else:\n            a += s[l]\n            l += 1\n    print(ans)", "for size in range(int(input())):\n    n = int(input())\n    s = [int(i) for i in input().split()]\n    (l, r) = (0, 0)\n    (a, b) = (0, 0)\n    ans = 0\n    while r + l <= n:\n        if a == b:\n            ans = r + l\n            a += s[l]\n            b += s[n - r - 1]\n            l += 1\n            r += 1\n        elif a > b:\n            b += s[n - r - 1]\n            r += 1\n        else:\n            a += s[l]\n            l += 1\n    print(ans)", "import collections\nimport sys\nfrom collections import Counter, deque\nimport heapq\nimport bisect\nimport copy\nMOD = 1000000007\nNO = lambda : print('NO')\nYES = lambda : print('YES')\n_1 = lambda : print(-1)\nari = lambda : [int(_) for _ in input().split()]\ncin = lambda : int(input())\ncis = lambda : input()\nshow = lambda x: print(x)\nfast = lambda : sys.stdin.readline()\ntest_case = 1\ntest_case = int(input())\nsys.setrecursionlimit(10 ** 6)\n\ndef ans():\n    n = cin()\n    arr = ari()\n    i = 0\n    j = n - 1\n    left = 0\n    right = 0\n    ans = 0\n    while i <= j:\n        if left > right:\n            right += arr[j]\n            j -= 1\n        else:\n            left += arr[i]\n            i += 1\n        if left == right:\n            ans = max(ans, i + (n - (j + 1)))\n    print(ans)\n    return\nfor _ in range(test_case):\n    ans()", "t_num = int(input())\nfor i in range(t_num):\n    input()\n    line = input()\n    weights = [int(x) for x in line.split()]\n    candies = 0\n    i_alice = 0\n    i_bob = len(weights) - 1\n    alice_total = weights[i_alice]\n    bob_total = weights[i_bob]\n    answ = 0\n    a_num = 1\n    b_num = 1\n    while i_alice < i_bob:\n        if alice_total > bob_total:\n            i_bob -= 1\n            bob_total += weights[i_bob]\n            b_num += 1\n        elif alice_total < bob_total:\n            i_alice += 1\n            alice_total += weights[i_alice]\n            a_num += 1\n        if alice_total == bob_total:\n            answ = a_num + b_num\n            i_bob -= 1\n            bob_total += weights[i_bob]\n            b_num += 1\n            i_alice += 1\n            alice_total += weights[i_alice]\n            a_num += 1\n    print(answ)", "for _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    (i, j) = (0, n - 1)\n    ans = 0\n    (alice, bob) = (w[0], w[n - 1])\n    while i < j:\n        if alice < bob:\n            i += 1\n            alice += w[i]\n        elif alice > bob:\n            j -= 1\n            bob += w[j]\n        else:\n            ans = i + 1 + (n - j)\n            (i, j) = (i + 1, j - 1)\n            (alice, bob) = (alice + w[i], bob + w[j])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n        continue\n    i = 0\n    j = n - 1\n    (cl, cr) = (l[0], l[-1])\n    ans = 0\n    while i < j:\n        if cl > cr:\n            j -= 1\n            cr += l[j]\n        elif cl < cr:\n            i += 1\n            cl += l[i]\n        else:\n            ans = i + n - j + 1\n            i += 1\n            j -= 1\n            cl += l[i]\n            cr += l[j]\n    print(ans)", "from collections import deque\nfor _ in range(int(input())):\n    w1 = 0\n    w2 = 0\n    eaten = 0\n    n = int(input())\n    a = deque(map(int, input().split()))\n    try:\n        while len(a):\n            while w1 < w2:\n                w1 += a.popleft()\n                eaten += 1\n            if w1 == w2:\n                ans = eaten\n                w1 += a.popleft()\n                eaten += 1\n            while w2 < w1:\n                w2 += a.pop()\n                eaten += 1\n            if w1 == w2:\n                ans = eaten\n                w2 += a.pop()\n                eaten += 1\n    except IndexError:\n        pass\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    li = [int(i) for i in input().split()]\n    (a, b) = (0, 0)\n    cnt = 0\n    ans = 0\n    (i, j) = (0, n - 1)\n    while i < j:\n        if a == b:\n            ans = cnt\n            a += li[i]\n            i += 1\n            cnt += 1\n        elif a > b:\n            b += li[j]\n            j -= 1\n            cnt += 1\n        else:\n            a += li[i]\n            i += 1\n            cnt += 1\n    if a == b:\n        ans = cnt\n    elif a > b:\n        if i == j and a == b + li[j]:\n            ans = cnt + 1\n    elif i == j and b == a + li[j]:\n        ans = cnt + 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    weights = list(map(int, input().split()))\n    maxCandies = 0\n    alice = 0\n    aliceSum = 0\n    bobSum = 0\n    candies = 0\n    bob = len(weights) - 1\n    if len(weights) > 1:\n        aliceSum += weights[alice]\n        alice += 1\n        candies += 1\n        bobSum += weights[bob]\n        bob -= 1\n        candies += 1\n        if aliceSum == bobSum:\n            maxCandies = candies\n        while alice <= bob:\n            if aliceSum < bobSum:\n                aliceSum += weights[alice]\n                alice += 1\n                candies += 1\n            elif bobSum < aliceSum:\n                bobSum += weights[bob]\n                bob -= 1\n                candies += 1\n            if aliceSum == bobSum:\n                maxCandies = candies\n                aliceSum += weights[alice]\n                alice += 1\n                candies += 1\n    print(maxCandies)", "for _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split(' ')))\n    if N == 1:\n        print(0)\n        continue\n    else:\n        m = 0\n        i = 0\n        si = A[0]\n        j = N - 1\n        sj = A[N - 1]\n        while i < j:\n            if si == sj:\n                m = i + 1 + N - j\n                i += 1\n                j -= 1\n                sj += A[j]\n                si += A[i]\n            elif si > sj:\n                j -= 1\n                sj += A[j]\n            else:\n                i += 1\n                si += A[i]\n        print(m)", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    l = 0\n    r = n - 1\n    alice = 0\n    bob = 0\n    cnt = 0\n    ans = 0\n    while l <= r:\n        if alice == bob:\n            ans = cnt\n            if l == r:\n                break\n            alice += ar[l]\n            bob += ar[r]\n            l += 1\n            r -= 1\n            cnt += 2\n        elif alice > bob:\n            bob += ar[r]\n            r -= 1\n            cnt += 1\n        else:\n            alice += ar[l]\n            l += 1\n            cnt += 1\n    if alice == bob:\n        ans = cnt\n    print(ans)", "def sol(n, li):\n    l = 0\n    r = n - 1\n    le = 0\n    ri = 0\n    c = 0\n    while l <= r:\n        if le > ri:\n            ri = ri + li[r]\n            r = r - 1\n        elif le < ri:\n            le = le + li[l]\n            l = l + 1\n        elif le == ri:\n            if r == l:\n                break\n            c = l + n - r - 1\n            ri = ri + li[r]\n            r = r - 1\n            le = le + li[l]\n            l = l + 1\n    if le == ri:\n        c = l + n - r - 1\n    return c\nt = int(input())\nfor ii in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(sol(n, l))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    w = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    elif n == 2:\n        if w[0] == w[1]:\n            print(2)\n        else:\n            print(0)\n    else:\n        (i, j) = (0, n - 1)\n        (s1, s2) = (w[0], w[n - 1])\n        (ind1, ind2) = (-1, -1)\n        flag = 0\n        while i < j:\n            if s1 == s2:\n                (ind1, ind2) = (i, j)\n                flag = 1\n                i += 1\n                j -= 1\n                s1 += w[i]\n                s2 += w[j]\n            elif s1 < s2:\n                i += 1\n                s1 += w[i]\n            elif s1 > s2:\n                j -= 1\n                s2 += w[j]\n        if flag:\n            print(ind1 + 1 + (n - ind2))\n        else:\n            print(0)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = 0\n    r = n - 1\n    ans = 0\n    sum1 = 0\n    sum2 = 0\n    konf = 0\n    while r >= l:\n        if sum1 == sum2:\n            ans = konf\n        if sum1 > sum2:\n            sum2 += a[r]\n            r -= 1\n            konf += 1\n        else:\n            sum1 += a[l]\n            l += 1\n            konf += 1\n    if sum1 == sum2:\n        ans = konf\n    print(ans)", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    i = j = r = s = t = 0\n    while i - j < len(a):\n        if s <= t:\n            i += 1\n            s += a[i - 1]\n        elif s >= t:\n            j -= 1\n            t += a[j]\n        r = (r, i - j)[s == t]\n    print(r)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (ans, i, j, l, r) = (0, 0, n - 1, 0, 0)\n    while i < j:\n        if i == 0 and j == n - 1:\n            l += arr[0]\n            r += arr[-1]\n        if l == r:\n            ans = n - j + (i + 1)\n            i += 1\n            j -= 1\n            l += arr[i]\n            r += arr[j]\n        elif l < r:\n            i += 1\n            l += arr[i]\n        else:\n            j -= 1\n            r += arr[j]\n    print(ans)", "def solution():\n    n = int(input())\n    w = [int(i) for i in input().split()]\n    (a, b) = (w[0], w[n - 1])\n    (apos, bpos) = (0, n - 1)\n    ans = 0\n    while apos < bpos:\n        if a == b:\n            ans = apos + 1 + (n - bpos)\n        if a <= b:\n            apos += 1\n            a += w[apos]\n        else:\n            bpos -= 1\n            b += w[bpos]\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solution()", "def main():\n    t = int(input())\n    for _ in range(t):\n        N = int(input())\n        arr = list(map(int, input().split()))\n        bob_idx = N\n        alice_idx = -1\n        bobs_weight = 0\n        alice_weight = 0\n        answ = 0\n        while True:\n            if alice_weight == bobs_weight and alice_idx < bob_idx:\n                candies = alice_idx + 1 + (N - bob_idx)\n                if candies > answ:\n                    answ = candies\n            alice_idx += 1\n            if alice_idx >= bob_idx:\n                break\n            alice_weight += arr[alice_idx]\n            while alice_weight > bobs_weight and bob_idx > alice_idx:\n                bob_idx -= 1\n                bobs_weight += arr[bob_idx]\n        print(str(answ))\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    candies = list(map(int, input().split()))\n    l = -1\n    r = n\n    Alice = 0\n    Bob = 0\n    mx_cnt = 0\n    while l < r:\n        if Alice == Bob:\n            mx_cnt = l + 1 + n - r\n            l += 1\n            r -= 1\n            Alice += candies[l]\n            Bob += candies[r]\n        elif Alice < Bob:\n            l += 1\n            Alice += candies[l]\n        else:\n            r -= 1\n            Bob += candies[r]\n    print(mx_cnt)", "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        list1 = [int(i) for i in input().split()]\n        print(solve(list1, n))\n\ndef solve(list1, n):\n    if n == 1:\n        return 0\n    Right = list1[n - 1]\n    Left = list1[0]\n    if n == 2 and Right == Left:\n        return 2\n    Ltemp = 0\n    Rtemp = n - 1\n    count = 0\n    while n >= n - Rtemp + (Ltemp + 1):\n        if Right == Left:\n            count = n - Rtemp + (Ltemp + 1)\n        if Left >= Right:\n            Rtemp -= 1\n            Right += list1[Rtemp]\n        else:\n            Ltemp += 1\n            Left += list1[Ltemp]\n    return count\nmain()", "for _ in range(int(input())):\n    x = int(input())\n    arr = list(map(int, input().split()))\n    if x == 1:\n        print(0)\n        continue\n    ans = 0\n    l = 0\n    r = x - 1\n    cl = arr[l]\n    cr = arr[r]\n    coun = 2\n    while l < r:\n        if cl == cr:\n            ans += coun\n            coun = 0\n            if r - l > 2:\n                coun = 2\n                l += 1\n                r -= 1\n                cl = arr[l]\n                cr = arr[r]\n            else:\n                break\n            continue\n        if cl < cr:\n            l += 1\n            cl += arr[l]\n        else:\n            r -= 1\n            cr += arr[r]\n        coun += 1\n    if cl == cr:\n        ans += coun\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    index1 = 0\n    sum1 = 0\n    index2 = n - 1\n    sum2 = 0\n    checkpoint = 0\n    for i in range(n):\n        if sum1 == sum2:\n            checkpoint = i\n            sum1 += arr[index1]\n            index1 += 1\n        elif sum1 < sum2:\n            sum1 += arr[index1]\n            index1 += 1\n        else:\n            sum2 += arr[index2]\n            index2 -= 1\n    if sum1 == sum2:\n        checkpoint = n\n    print(checkpoint)", "for _ in range(int(input())):\n    n = int(input())\n    C = list(map(int, input().split()))\n    (l, r) = (0, n - 1)\n    (a, b) = (0, 0)\n    while l <= r:\n        if a < b:\n            a += C[l]\n            l += 1\n        else:\n            b += C[r]\n            r -= 1\n    while a != b:\n        if a > b:\n            l -= 1\n            a -= C[l]\n        else:\n            r += 1\n            b -= C[r]\n    print(l + (n - r) - 1)", "n_tests = int(input())\nans = [0] * n_tests\nfor i in range(n_tests):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    li = 0\n    ri = n - 1\n    sl = 0\n    sr = 0\n    sc = 0\n    c = 0\n    cc = 0\n    while ri >= li:\n        if sl < sr:\n            c += 1\n            sl += arr[li]\n            li += 1\n        else:\n            c += 1\n            sr += arr[ri]\n            ri -= 1\n        if sl == sr:\n            sc = sl\n            cc = c\n    ans[i] = cc\nfor i in range(n_tests):\n    print(ans[i])", "test_count = int(input())\nfor i in range(test_count):\n    result = 0\n    number_count = int(input())\n    numbers_list = list(map(int, input().split()))\n    start_sum = numbers_list[0]\n    end_sum = numbers_list[-1]\n    start_same_index = 0\n    end_same_index = number_count - 1\n    start_index = 0\n    end_index = number_count - 1\n    flag = True\n    while start_index < end_index:\n        if start_sum == end_sum:\n            flag = False\n            start_same_index = start_index\n            end_same_index = end_index\n            start_index += 1\n            end_index -= 1\n            start_sum += numbers_list[start_index]\n            end_sum += numbers_list[end_index]\n        elif start_sum > end_sum:\n            end_index -= 1\n            end_sum += numbers_list[end_index]\n        else:\n            start_index += 1\n            start_sum += numbers_list[start_index]\n    if flag:\n        result = 0\n    else:\n        result = start_same_index + 1 + len(numbers_list) - end_same_index\n    print(result)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    total = output = 0\n    alice = bob = 0\n    lb = 0\n    rb = n - 1\n    while lb <= rb:\n        if alice == bob:\n            if lb != rb:\n                output = total\n                alice += arr[lb]\n                lb += 1\n                bob += arr[rb]\n                rb -= 1\n                total += 2\n            else:\n                output = total\n                alice += arr[lb]\n                total += 1\n                lb += 1\n                rb -= 1\n        elif alice > bob:\n            bob += arr[rb]\n            rb -= 1\n            total += 1\n        elif alice < bob:\n            alice += arr[lb]\n            lb += 1\n            total += 1\n    if alice == bob:\n        output = total\n    print(output)", "for _ in range(int(input())):\n    n = int(input())\n    weight = list(map(int, input().split()))\n    (kanan, right) = (0, n)\n    (kiri, left) = (0, -1)\n    ans = 0\n    current = 0\n    while right > left:\n        if kiri == kanan:\n            ans = current\n            kiri += weight[left + 1]\n            left += 1\n            current += 1\n        elif kiri > kanan:\n            kanan += weight[right - 1]\n            right -= 1\n            current += 1\n        else:\n            kiri += weight[left + 1]\n            left += 1\n            current += 1\n    print(ans)", "T = int(input())\n\ndef solve(l):\n    st = 0\n    ed = len(l)\n    xcnt = 0\n    ycnt = 0\n    x = 0\n    y = 0\n    ret = 0\n    while st <= ed:\n        if x <= y:\n            if x == y:\n                ret = max(ret, xcnt + ycnt)\n            x += l[st]\n            st += 1\n            xcnt += 1\n        else:\n            y += l[ed - 1]\n            ed -= 1\n            ycnt += 1\n    return ret\nfor _ in range(T):\n    N = int(input())\n    l = list(map(int, input().split()))\n    print(solve(l))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(reversed(a))\n    ans = 0\n    i = 0\n    j = 0\n    p = 0\n    q = 0\n    while i + j <= n:\n        if p > q:\n            q += b[j]\n            j += 1\n        elif q > p:\n            p += a[i]\n            i += 1\n        if p == q:\n            ans = i + j\n            p += a[i]\n            q += b[j]\n            i += 1\n            j += 1\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    i = 0\n    j = n - 1\n    s1 = l[i]\n    s2 = l[j]\n    ans = 0\n    while i < j:\n        if s2 < s1:\n            j -= 1\n            s2 += l[j]\n        elif s1 < s2:\n            i += 1\n            s1 += l[i]\n        else:\n            ans = max(ans, i + 1 + (n - j))\n            i += 1\n            j -= 1\n            s1 += l[i]\n            s2 += l[j]\n    print(ans)", "t = int(input())\nwhile t:\n    n = int(input())\n    l = list(map(int, input().split()))\n    lans = [0]\n    ans = 2\n    i = 0\n    j = n - 1\n    a = l[i]\n    b = l[j]\n    if n == 1:\n        print(0)\n    else:\n        while ans < n:\n            if a == b:\n                lans.append(ans)\n                i += 1\n                a += l[i]\n                ans += 1\n            elif a > b:\n                j -= 1\n                b += l[j]\n                ans += 1\n            elif a < b:\n                i += 1\n                a += l[i]\n                ans += 1\n        if a == b:\n            lans.append(ans)\n        print(lans[-1])\n    t -= 1", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    res = 0\n    test1 = l[0]\n    test2 = l[n - 1]\n    i = 0\n    j = n - 1\n    while i < j:\n        if test1 == test2:\n            res = i + 1 + (n - j)\n            i += 1\n            j -= 1\n            test2 += l[j]\n            test1 += l[i]\n        elif test1 > test2:\n            j -= 1\n            test2 += l[j]\n        else:\n            i += 1\n            test1 += l[i]\n    print(res)", "test = int(input())\nfor t in range(test):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        i = -1\n        j = n\n        sum_left = 0\n        sum_right = 0\n        res = 0\n        count = 0\n        while j - i > 0:\n            if sum_right < sum_left:\n                j -= 1\n                sum_right += a[j]\n                count += 1\n            elif sum_left < sum_right:\n                i += 1\n                count += 1\n                sum_left += a[i]\n            else:\n                res = count\n                i += 1\n                count += 1\n                sum_left += a[i]\n        print(res)", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    lefts = arr[0]\n    rights = arr[-1]\n    i = 0\n    j = n - 1\n    (f, ans) = (0, 0)\n    while i < j:\n        if lefts == rights:\n            ans = max(ans, i + 1 + n - j)\n            i += 1\n            j -= 1\n            rights += arr[j]\n            lefts += arr[i]\n            f = 1\n        elif lefts > rights:\n            j -= 1\n            rights += arr[j]\n        else:\n            i += 1\n            lefts += arr[i]\n    if f == 0:\n        print(0)\n    else:\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (l, r) = (0, len(a) - 1)\n    ans = 0\n    (ls, rs) = (0, 0)\n    while l <= r:\n        if ls == rs:\n            ans = l + n - r - 1\n            ls += a[l]\n            l += 1\n        elif ls > rs:\n            rs += a[r]\n            r -= 1\n        else:\n            ls += a[l]\n            l += 1\n    if ls == rs:\n        ans = l + n - r - 1\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split()))\n    left = 0\n    right = n - 1\n    lsum = rsum = 0\n    maxpos = 0\n    while left <= right:\n        if lsum > rsum:\n            rsum += L[right]\n            right -= 1\n        elif lsum < rsum:\n            lsum += L[left]\n            left += 1\n        else:\n            maxpos = left + n - right - 1\n            lsum += L[left]\n            left += 1\n    if lsum == rsum:\n        maxpos = left + n - right - 1\n    print(maxpos)", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    i = j = r = s = t = 0\n    while i - j < len(a):\n        if s <= t:\n            s += a[i]\n            i += 1\n        elif s >= t:\n            j -= 1\n            t += a[j]\n        r = (r, i - j)[s == t]\n    print(r)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    cnt = 0\n    suma = a[0]\n    sumb = a[-1]\n    i = 0\n    j = n - 1\n    ct = 0\n    nt = 0\n    while i < j:\n        if suma == sumb:\n            i += 1\n            j -= 1\n            suma += a[i]\n            sumb += a[j]\n            ct += 1\n            nt += 1\n            cnt += ct + nt\n            (ct, nt) = (0, 0)\n        elif suma < sumb:\n            i += 1\n            suma += a[i]\n            ct += 1\n        elif suma > sumb:\n            j -= 1\n            sumb += a[j]\n            nt += 1\n    print(cnt)", "for _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    l = res = 0\n    r = n - 1\n    a = A[l]\n    b = A[r]\n    while l < r:\n        if a == b:\n            res = l + 1 + n - r\n        if a < b:\n            l += 1\n            a += A[l]\n        else:\n            r -= 1\n            b += A[r]\n    print(res)", "for t in range(int(input())):\n    n = int(input())\n    candy = list(map(int, input().split()))\n    a = 0\n    b = n - 1\n    sum_a = 0\n    sum_b = 0\n    candies_eaten = int\n    for i in range(n + 1):\n        if sum_a > sum_b:\n            sum_b += candy[b]\n            b -= 1\n        elif sum_a < sum_b:\n            sum_a += candy[a]\n            a += 1\n        else:\n            candies_eaten = i\n            sum_a += candy[a]\n            a += 1\n    print(candies_eaten)", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    L = list(map(int, input().split()))\n    (wA, wB) = (L[0], L[n - 1])\n    ans = 0\n    (k, j) = (0, n - 1)\n    while k < j:\n        if wA > wB:\n            j -= 1\n            wB += L[j]\n        elif wA < wB:\n            k += 1\n            wA += L[k]\n        else:\n            ans = k + 1 + n - j\n            k += 1\n            j -= 1\n            wA += L[k]\n            wB += L[j]\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    megaCount = count = 0\n    aage = 0\n    pichhe = n - 1\n    aageSum = pichheSum = 0\n    if n == 1:\n        print(0)\n        continue\n    if n >= 2:\n        aageSum = l[0]\n        pichheSum = l[-1]\n    for i in range(n):\n        if aage == pichhe or aage > pichhe:\n            break\n        if aageSum > pichheSum:\n            pichhe -= 1\n            count += 1\n            pichheSum += l[pichhe]\n        elif aageSum < pichheSum:\n            aage += 1\n            count += 1\n            aageSum += l[aage]\n        else:\n            aage += 1\n            pichhe -= 1\n            aageSum += l[aage]\n            pichheSum += l[pichhe]\n            count += 2\n            megaCount = count\n    print(megaCount)", "_ = int(input())\nfor __ in range(_):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    elif n == 2:\n        if arr[0] == arr[1]:\n            print(2)\n        else:\n            print(0)\n    else:\n        left_sum = arr[0]\n        right_sum = arr[n - 1]\n        left = 0\n        right = n - 1\n        out = 0\n        while True:\n            if left == right:\n                break\n            if left_sum == right_sum:\n                out = left + (n - right + 1)\n            if left_sum > right_sum:\n                right -= 1\n                right_sum += arr[right]\n            else:\n                left += 1\n                left_sum += arr[left]\n        print(out)"]