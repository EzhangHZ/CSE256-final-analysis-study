["import math\nimport sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nfor _ in range(int(input())):\n    n = inp()\n    print(n - 1)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    k = int(input())\n    print(k - 1)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    print(k - 1)", "for i in [*open(0)][1:]:\n    print(int(i) - 1)", "import sys, math, cmath, time\nfrom bisect import bisect_left\nstart_time = time.time()\n\ndef solve():\n    k = inp()\n    print(k - 1)\n\ndef main():\n    testcases = 1\n    testcases = inp()\n    for each_testcase in range(testcases):\n        solve()\n\ndef inp():\n    return int(input())\n\ndef inps():\n    return input().split()\nONLINE_JUDGE = __debug__\nif ONLINE_JUDGE:\n    input = sys.stdin.readline\nmain()", "for i in [*open(0)][1:]:\n    print(int(i) - 1)", "import sys\n\ndef solve():\n    input = sys.stdin.readline\n    k = int(input())\n    print(k - 1)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "import sys\nfor i in range(int(sys.stdin.readline())):\n    print(int(sys.stdin.readline()) - 1)", "for x in [*open(0)][1:]:\n    print(int(x) - 1)", "import sys\nfor i in range(int(sys.stdin.readline())):\n    print(int(sys.stdin.readline()) - 1)", "import sys\ninput = sys.stdin.readline\n\ndef readList():\n    return list(map(int, input().split()))\n\ndef readInt():\n    return int(input())\n\ndef readInts():\n    return map(int, input().split())\n\ndef readStr():\n    return input().strip()\n\ndef solve():\n    k = readInt()\n    return k - 1\nfor _ in range(int(input())):\n    print(solve())", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\ntest_cases = inp()\ninp_arr = []\nfor i in range(test_cases):\n    num = inp()\n    inp_arr.append(num)\n\ndef findResult(n):\n    return n - 1\nresult = [findResult(cheeses) for cheeses in inp_arr]\nfor m in result:\n    print(m)", "import sys\nt = int(sys.stdin.readline())\nfor i in range(t):\n    k = int(sys.stdin.readline())\n    sys.stdout.write(str(k - 1) + '\\n')", "from sys import stdin\n\ndef solve():\n    k = int(stdin.readline())\n    print(k - 1)\n\ndef main():\n    t = int(stdin.readline())\n    for _ in range(t):\n        solve()\nmain()", "from math import factorial\nimport sys\ninput = sys.stdin.readline\ninp = sys.stdin.readline\n\ndef input():\n    return inp().strip()\n\ndef ii():\n    return int(input())\n\ndef mi():\n    return map(int, input().split())\n\ndef li():\n    return list(map(int, input().split()))\n\ndef solve():\n    k = ii()\n    print(k - 1)\n\ndef main():\n    for _ in range(ii()):\n        solve()\nmain()", "for i in [*open(0)][1:]:\n    print(int(i) - 1)", "def main():\n    tn = int(input())\n    out = []\n    for i in range(tn):\n        n = int(input())\n        out.append(n - 1)\n    print(*out, sep='\\n')\nmain()", "import math\nt = int(input())\nl = []\nl1 = []\nfor i in range(t):\n    k = int(input())\n    l.append(k)\nfor i in l:\n    print(i - 1)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n    else:\n        print(n - 1)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    print(n - 1)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(n - 1)", "import sys\ninput = sys.stdin.readlines()\nfor i in range(int(input[0].strip('\\n'))):\n    k = int(input[i + 1].strip('\\n'))\n    print(k - 1)", "import sys\n\ndef in_int():\n    return int(sys.stdin.readline())\n\ndef in_str():\n    return sys.stdin.readline().rstrip()\n\ndef in_map_int():\n    return map(int, sys.stdin.readline().split())\n\ndef in_arr_int():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef in_arr_str():\n    return sys.stdin.readline().split()\n\ndef is_prime(n):\n    for i in range(2, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            return True\n    return False\n\ndef bin2dec(s):\n    n = 0\n    for i in range(len(s)):\n        n += int(s[len(s) - i - 1]) * 2 ** i\n    return n\n\ndef gcd(a, b):\n    (a, b) = (max(a, b), min(a, b))\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a\n\ndef dec2bin(n):\n    if n == 0:\n        return '0'\n    ans = ''\n    while n > 0:\n        ans += str(n % 2)\n        n //= 2\n    return ans[::-1]\n\ndef solve(n):\n    return n - 1\n\ndef main():\n    t = in_int()\n    for _ in range(t):\n        n = in_int()\n        print(solve(n))\nmain()", "t = int(input(''))\nA = []\nfor i in range(t):\n    n = int(input(''))\n    A.append(n)\nfor i in range(t):\n    print(A[i] - 1)", "for i in [*open(0)][1:]:\n    print(int(i) - 1)", "a = int(input())\nt = []\nfor i in range(a):\n    s = int(input())\n    t.append(s)\n\ndef main(no):\n    if no == 1:\n        return -1\n    else:\n        return no - 1\nfor z in t:\n    print(main(z))", "import math as m\nl = []\nfor i in range(int(input())):\n    k = int(input())\n    l.append(k - 1)\nfor i in l:\n    print(i)", "cases = int(input())\ninp = []\nfor _ in range(cases):\n    inp.append(int(input()))\nfor inpt in inp:\n    print(inpt - 1)", "n = int(input())\nI = []\nfor i in range(n):\n    I.append(int(input()))\n\ndef convex(k):\n    if k > 1:\n        return k - 1\n    else:\n        return -1\nfor e in I:\n    print(convex(e))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    print(int(input()) - 1)", "print('\\n'.join([str(int(it[:-1]) - 1) for it in [*open(0)][1:]]))", "t = int(input())\na = []\nfor i in range(t):\n    a.append(int(input()))\nfor i in a:\n    print(i - 1)", "def factorial(num):\n    fact = 1\n    for i in range(1, num + 1):\n        fact = fact * i\n    return fact\nn = int(input())\ntestCases = [None] * n\nresults = [None] * n\ni = 1\nx = 0\nfor j in range(0, n):\n    testCases[j] = int(input())\nfor j in range(0, n):\n    results[j] = testCases[j] - 1\nfor result in results:\n    print(result)", "for n in [*open(0)][1:]:\n    print(int(n) - 1)", "t = int(input())\ncheck = [int(input()) for i in range(t)]\nfor i in check:\n    x = i - 1\n    print(x)", "t = int(input())\ncheck = [int(input()) for i in range(t)]\nfor i in check:\n    x = i - 1\n    print(x)", "t = int(input())\nresult = []\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        result.append(1)\n    else:\n        result.append(n - 1)\nfor i in result:\n    print(i)", "for i in [*open(0)][1:]:\n    print(int(i) - 1)", "for i in [*open(0)][1:]:\n    print(int(i) - 1)", "for i in [*open(0)][1:]:\n    print(int(i) - 1)", "for i in [*open(0)][1:]:\n    print(int(i) - 1)", "out = []\nfor _ in range(int(input())):\n    k = int(input())\n    out.append(k - 1)\nfor i in out:\n    print(i)", "import sys\nimport itertools\nimport bisect\nimport math\nimport collections\nt = int(sys.stdin.readline())\nwhile t >= 1:\n    n = int(sys.stdin.readline())\n    sys.stdout.write(str(n - 1))\n    sys.stdout.write('\\n')\n    t -= 1", "t = int(input())\nres = []\nfor _ in range(t):\n    k = int(input())\n    res.append(k - 1)\nfor i in res:\n    print(i)", "def solve(n):\n    print(n - 1)\nno_of_tests = int(input())\nproblems = []\nfor _ in range(no_of_tests):\n    problems.append(int(input()))\nfor each in problems:\n    solve(each)", "a = int(input())\nli1 = []\nfor i in range(a):\n    li1.append(int(input()))\nfor i in li1:\n    print(i - 1)", "numtestcases = int(input())\noutput = []\nfor i in range(numtestcases):\n    output.append(int(input()) - 1)\nfor answer in output:\n    print(answer)", "import heapq\nimport sys\nimport math\nimport itertools\nimport os\ninput = lambda : sys.stdin.readline().strip()\n\ndef solve():\n    n = int(input())\n    print(n - 1)\nfor i in range(int(input())):\n    solve()", "a = int(input())\nl = []\nfor i in range(a):\n    l.append(int(input()) - 1)\nfor i in l:\n    print(i)", "n_sets = int(input())\nanswer = [int(input()) - 1 for testcase in range(n_sets)]\nfor x in answer:\n    print(x)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(n - 1)", "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    print(k - 1)", "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    print(k - 1)", "for _ in range(int(input())):\n    n = int(input())\n    print(n - 1)", "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    print(k - 1)", "for _ in range(int(input())):\n    a = int(input())\n    print(a - 1)", "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    print(k - 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(n - 1)", "test = int(input())\nfor t in range(test):\n    n = int(input())\n    print(n - 1)", "for _ in range(int(input())):\n    n = int(input())\n    print(n - 1)", "import math\n\ndef fact(a):\n    return math.factorial(a)\nt = int(input())\nwhile t:\n    a = int(input())\n    print(a - 1)\n    t = t - 1", "t = int(input())\nfor i in range(0, t):\n    k = int(input())\n    print(k - 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(n - 1)", "n = int(input())\nfor x in range(n):\n    k = int(input())\n    if k == 1:\n        print(-1)\n    else:\n        print(k - 1)", "t = int(input())\nfor i in range(t):\n    k = int(input())\n    print(k - 1)", "a = int(input())\nfor _ in range(a):\n    n = int(input())\n    print(n - 1)", "t = int(input())\nfor i in range(t):\n    x = int(input())\n    print(x - 1)", "from math import factorial as f\nt = int(input())\nfor i in range(t):\n    k = int(input())\n    if k == 1:\n        print(-1)\n    else:\n        print(k - 1)", "for a in range(int(input())):\n    print(int(input()) - 1)", "T = int(input())\nfor i in range(T):\n    k = int(input())\n    print(k - 1)", "answer = [print(int(input()) - 1) for testcase in range(int(input()))]", "answer = [print(int(input()) - 1) for testcase in range(int(input()))]", "for _ in range(int(input())):\n    print(int(input()) - 1)", "tst = int(input())\nfor i in range(tst):\n    num = int(input())\n    print(num - 1)", "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    if k == 0 or k == 1:\n        print(-1)\n    else:\n        n = k - 1\n        print(n)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    print(n - 1)", "for _ in range(int(input())):\n    print(int(input()) - 1)", "for _ in range(int(input())):\n    print(int(input()) - 1)", "answer = [print(int(input()) - 1) for testcase in range(int(input()))]", "t = int(input())\nwhile t > 0:\n    t -= 1\n    k = int(input())\n    print(k - 1)", "a = int(input())\nfor i in range(a):\n    print(int(input()) - 1)", "for _ in range(int(input())):\n    n = int(input())\n    print(n - 1)", "i = int(input())\nfor _ in range(i):\n    a = int(input())\n    print(a - 1)", "for _ in range(int(input())):\n    n = int(input())\n    print(n - 1)", "for _ in range(int(input())):\n    n = int(input())\n    print(n - 1)", "for _ in range(int(input())):\n    print(int(input()) - 1)", "for i in range(int(input())):\n    n = int(input())\n    print(n - 1)", "tests = int(input())\nfor _ in range(tests):\n    n = int(input())\n    print(n - 1)"]