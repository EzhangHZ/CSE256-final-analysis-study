["import sys\n\ndef N():\n    return int(sys.stdin.readline())\n\ndef S():\n    return sys.stdin.readline().rstrip()\n\ndef L():\n    return sorted(map(int, sys.stdin.readline().split()))\n\ndef M():\n    return map(int, sys.stdin.readline().split())\nfor _ in range(N()):\n    (n, m) = M()\n    subsegment = list(range(1, n + 1))\n    for _ in range(m):\n        (x, y) = M()\n        mini = min(x, y) - 1\n        maxi = max(x, y) - 1\n        subsegment[maxi] = min(maxi - mini, subsegment[maxi])\n    for i in range(1, n):\n        if subsegment[i] > subsegment[i - 1] + 1:\n            subsegment[i] = subsegment[i - 1] + 1\n    print(sum(subsegment))", "import sys\nT = int(sys.stdin.readline().strip())\nfor t in range(0, T):\n    (n, m) = list(map(int, sys.stdin.readline().strip().split()))\n    e = [0] * n\n    for i in range(0, m):\n        (x, y) = list(map(int, sys.stdin.readline().strip().split()))\n        if x > y:\n            (x, y) = (y - 1, x - 1)\n        else:\n            (x, y) = (x - 1, y - 1)\n        e[y] = max(e[y], x + 1)\n    for i in range(1, n):\n        e[i] = max(e[i], e[i - 1])\n    ans = 0\n    for i in range(0, n):\n        ans += i - e[i] + 1\n    print(ans)", "t = int(input())\nresult = []\nfor i in range(t):\n    (n, m) = list(map(int, input().split(' ')))\n    l = [n + 1 for j in range(n + 1)]\n    l[0] = 'start :'\n    for j in range(m):\n        xiyi = list(map(int, input().split(' ')))\n        xiyi.sort()\n        if xiyi[1] < l[xiyi[0]]:\n            l[xiyi[0]] = xiyi[1]\n    npairs = 0\n    for j in range(n - 1, 1, -1):\n        if l[j - 1] > l[j]:\n            l[j - 1] = l[j]\n        if l[j] - j - 1 > 0:\n            npairs += l[j] - j - 1\n    if l[1] - 2 > 0:\n        npairs += l[1] - 2\n    result.append(npairs + n)\nfor k in result:\n    print(k)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [0 for i in range(n + 1)]\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        if a > b:\n            (a, b) = (b, a)\n        if l[b] < a:\n            l[b] = a\n    ans = 1\n    p = 1\n    for i in range(2, n + 1):\n        if i - p - 1 < l[i] and (not l[i] == 0):\n            p = i - l[i]\n        else:\n            p += 1\n        ans += p\n    print(ans)", "def main():\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        l = [0 for i in range(n + 1)]\n        for i in range(m):\n            (a, b) = map(int, input().split())\n            if a > b:\n                (a, b) = (b, a)\n            if l[b] < a:\n                l[b] = a\n        ans = 1\n        p = 1\n        for i in range(2, n + 1):\n            if i - p - 1 < l[i] and (not l[i] == 0):\n                p = i - l[i]\n            else:\n                p += 1\n            ans += p\n        print(ans)\nmain()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [0 for i in range(n + 1)]\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        if a > b:\n            (a, b) = (b, a)\n        if l[b] < a:\n            l[b] = a\n    ans = 1\n    p = 1\n    for i in range(2, n + 1):\n        if i - p - 1 < l[i] and (not l[i] == 0):\n            p = i - l[i]\n        else:\n            p += 1\n        ans += p\n    print(ans)", "t = int(input())\nresult = []\nfor i in range(t):\n    (n, m) = list(map(int, input().split(' ')))\n    l = [n + 1 for j in range(n + 1)]\n    l[0] = 'start :'\n    for j in range(m):\n        xiyi = list(map(int, input().split(' ')))\n        xiyi.sort()\n        if xiyi[1] < l[xiyi[0]]:\n            l[xiyi[0]] = xiyi[1]\n    npairs = 0\n    for j in range(n - 1, 1, -1):\n        if l[j - 1] > l[j]:\n            l[j - 1] = l[j]\n    for j in range(1, len(l) - 1):\n        if l[j] - j - 1 > 0:\n            npairs += l[j] - j - 1\n    result.append(npairs + n)\nfor k in result:\n    print(k)", "from math import *\nfrom collections import deque\nfrom functools import lru_cache\nfrom collections import defaultdict\nMOD = 10 ** 9 + 7\nfrom sys import stdin, stdout\n\ndef solution():\n    (n, m) = map(int, input().split())\n    right_most = defaultdict(lambda : n + 1)\n    for _ in range(m):\n        (a, b) = map(int, input().split())\n        if a > b:\n            (a, b) = (b, a)\n        right_most[a] = min(right_most[a], b)\n    res = 0\n    min_run = n + 1\n    for i in range(1, n + 1)[::-1]:\n        min_run = min(min_run, right_most[i])\n        ans = min_run - i\n        res += ans\n    return print(res)\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solution()\nmain()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [0 for i in range(n + 1)]\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        if a > b:\n            (a, b) = (b, a)\n        if l[b] < a:\n            l[b] = a\n    res = 1\n    p = 1\n    for i in range(2, n + 1):\n        if i - p - 1 < l[i] and (not l[i] == 0):\n            p = i - l[i]\n        else:\n            p += 1\n        res += p\n    print(res)", "t = int(input())\nwhile t > 0:\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    prev = [1] * (n + 1)\n    while m > 0:\n        (x, y) = input().split()\n        x = int(x)\n        y = int(y)\n        if x == y:\n            continue\n        if x > y:\n            prev[x] = max(prev[x], y + 1)\n        else:\n            prev[y] = max(prev[y], x + 1)\n        m -= 1\n    ans = 0\n    for i in range(1, n + 1):\n        prev[i] = max(prev[i], prev[i - 1])\n        ans += i - prev[i] + 1\n    print(ans)\n    t -= 1", "t = int(input())\nfor tc in range(t):\n    (n, m) = map(int, input().split())\n    stranger = [n] * (n + 1)\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        if x > y:\n            (x, y) = (y, x)\n        stranger[x] = min(stranger[x], y - 1)\n    ans = 0\n    p = n\n    for i in range(n, 0, -1):\n        p = min(p, stranger[i])\n        ans += p - i + 1\n    print(ans)", "def b():\n    t = int(input())\n    for _ in range(t):\n        (n, m) = map(int, input().split())\n        adj = [i for i in range(n, 0, -1)]\n        for _ in range(m):\n            (x, y) = map(int, input().split())\n            mi = min(x, y) - 1\n            mx = max(x, y) - 1\n            adj[mi] = min(adj[mi], mx - mi)\n        for i in range(n - 2, -1, -1):\n            if adj[i] > adj[i + 1] + 1:\n                adj[i] = adj[i + 1] + 1\n        print(sum(adj))\nb()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = dict()\n    for i in range(m):\n        a = list(map(int, input().split()))\n        a.sort()\n        if a[1] in d:\n            d[a[1]] = max(d[a[1]], a[0])\n        else:\n            d[a[1]] = a[0]\n    ans = 0\n    c = 1\n    m = -1\n    for i in range(1, n + 1):\n        if i in d and m < d[i]:\n            c = i - d[i]\n            m = d[i]\n        ans += c\n        c += 1\n    print(ans)", "import sys\nimport threading\nfrom functools import lru_cache\nfrom collections import defaultdict, deque\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, m) = [int(i) for i in input().split()]\n        mapping = [set() for i in range(n + 1)]\n        for i in range(m):\n            (x, y) = [int(i) for i in input().split()]\n            mapping[x].add(y)\n            mapping[y].add(x)\n        ans = 0\n        left = 1\n        current = {left}\n        for right in range(1, n + 1):\n            current.add(right)\n            while mapping[right].intersection(current):\n                current.discard(left)\n                left += 1\n            window_size = right - left + 1\n            ans += window_size\n        print(ans)\nsys.setrecursionlimit(1 << 30)\nthreading.stack_size(1 << 27)\nmain_thread = threading.Thread(target=main)\nmain_thread.start()\nmain_thread.join()", "t = int(input())\nfor tc in range(t):\n    (n, m) = map(int, input().split())\n    stranger = [n] * (n + 1)\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        if x > y:\n            (x, y) = (y, x)\n        stranger[x] = min(stranger[x], y - 1)\n    ans = 0\n    p = n\n    for i in range(n, 0, -1):\n        p = min(p, stranger[i])\n        ans += p - i + 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    mins = [n + 1 for j in range(n)]\n    for i in range(m):\n        (l, r) = list(map(int, input().split()))\n        if r < l:\n            (l, r) = (r, l)\n        j = l\n        if r < mins[j - 1]:\n            mins[j - 1] = r\n    M = n + 1\n    for i in range(n):\n        k = n - 1 - i\n        if mins[k] > M:\n            mins[k] = M\n        M = mins[k]\n    answer = sum(mins) - n * (n + 1) // 2\n    print(answer)", "t = int(input())\nfor p in range(t):\n    (n, m) = map(int, input().split())\n    friends = [n] * n\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        x -= 1\n        y -= 1\n        if x < y:\n            friends[x] = min(friends[x], y)\n        else:\n            friends[y] = min(friends[y], x)\n    ans = 0\n    for i in range(n - 2, -1, -1):\n        friends[i] = min(friends[i + 1], friends[i])\n    for i in range(n):\n        ans += friends[i] - i\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    MIN = [n + 1 for _ in range(n + 1)]\n    for _ in range(m):\n        (x, y) = map(int, input().split())\n        if x > y:\n            (x, y) = (y, x)\n        MIN[x] = min(MIN[x], y)\n    for i in range(n, 1, -1):\n        MIN[i - 1] = min(MIN[i - 1], MIN[i])\n    ans = 0\n    for i in range(1, n + 1):\n        ans += MIN[i] - i\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    t = []\n    for _ in range(m):\n        (x, y) = map(int, input().split())\n        if x < y:\n            (x, y) = (y, x)\n        t.append((x, y))\n    t = list(sorted(t))\n    r = 0\n    j = 0\n    e = 0\n    for i in range(1, n + 1):\n        while j < m and t[j][0] == i:\n            e = max(e, t[j][1])\n            j += 1\n        r += i - e\n    print(r)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, m) = R()\n    a = [0] + [0] * n\n    r = k = i = 0\n    for _ in [0] * m:\n        (x, y) = sorted(R())\n        a[y] = max(a[y], x)\n    for x in a:\n        k = max(k, x)\n        r += i - k\n        i += 1\n    print(r)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mlnf = [0] * n\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        (a, b) = (min(a, b), max(a, b) - 1)\n        mlnf[b] = max(mlnf[b], a)\n    ans = 0\n    af = 0\n    for i in range(n):\n        af = max(af, mlnf[i])\n        ans += i - af + 1\n    print(ans)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, m) = R()\n    a = [0] + [0] * n\n    r = i = 0\n    for _ in [0] * m:\n        (x, y) = sorted(R())\n        a[y] = max(a[y], x)\n    while i < n:\n        i += 1\n        a[i] = max(a[i - 1], a[i])\n        r += i - a[i]\n    print(r)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split(' '))\n    f = [0] * (n + 2)\n    ans = 0\n    sum = 0\n    for _ in range(m):\n        a = list(map(int, input().split(' ')))\n        f[max(a)] = max(f[max(a)], min(a))\n    for i in range(1, n + 1):\n        ans = max(ans, f[i])\n        sum += i - ans\n    print(sum)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, m) = R()\n    a = [0] + [0] * n\n    r = i = 0\n    for _ in [0] * m:\n        (x, y) = sorted(R())\n        a[y] = max(a[y], x)\n    while i < n:\n        i += 1\n        a[i] = max(a[i - 1], a[i])\n        r += i - a[i]\n    print(r)", "for _ in range(int(input())):\n    (n, m) = [int(num) for num in input().split(' ')]\n    friends = [-1] * (n + 1)\n    for _ in range(m):\n        (i, j) = sorted([int(num) for num in input().split(' ')])\n        friends[j] = max(i + 1, friends[j])\n    subsegments = 0\n    j = 1\n    for i in range(1, n + 1):\n        while j <= n and friends[j] <= i:\n            j += 1\n        subsegments += j - i\n        i += 1\n    print(subsegments)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, m) = R()\n    a = [0] + [0] * n\n    r = k = i = 0\n    for _ in [0] * m:\n        (x, y) = sorted(R())\n        a[y] = max(a[y], x)\n    for x in a:\n        k = max(k, x)\n        r += i - k\n        i += 1\n    print(r)", "def N():\n    return int(input())\n\ndef A():\n    return [int(x) for x in input().split()]\n\ndef S():\n    return input()\nfor _ in range(N()):\n    (n, m) = A()\n    a = [0 for i in range(n + 1)]\n    maxi = c = 0\n    if 'codeforces' == 28226329:\n        print('Tanmay')\n    for __ in range(m):\n        (x, y) = A()\n        if y > x:\n            a[y] = max(a[y], x)\n            continue\n        a[x] = max(a[x], y)\n    for i in range(1, n + 1):\n        maxi = max(maxi, a[i])\n        a[i] = maxi\n    for i in range(1, n + 1):\n        c += i - a[i]\n    print(c)", "z = int(input())\nfor i in range(z):\n    s = input().split()\n    n = int(s[0])\n    m = int(s[1])\n    M = [[] for j in range(n)]\n    Ma = [-1 for i in range(n)]\n    for j in range(m):\n        line = input().split()\n        first = int(line[0]) - 1\n        second = int(line[1]) - 1\n        M[max(first, second)].append(min(first, second))\n    for j in range(n):\n        if len(M[j]) != 0:\n            ma = M[j][0]\n            for k in M[j]:\n                if ma < k:\n                    ma = k\n            Ma[j] = ma\n    l = 0\n    r = 0\n    sum = 1\n    while r < n - 1:\n        r = r + 1\n        if Ma[r] >= l:\n            l = Ma[r] + 1\n        sum = sum + r - l + 1\n    print(sum)", "t = int(input())\nfor i in range(t):\n    (n, m) = list(map(int, input().strip().split()))\n    if m == 0:\n        print(n * (n - 1) // 2 + n)\n    else:\n        dp = [float('inf')] * (n + 1)\n        ans = 0\n        for i in range(m):\n            (a, b) = list(map(int, input().strip().split()))\n            if a < b:\n                dp[a] = min(dp[a], b)\n            else:\n                dp[b] = min(dp[b], a)\n        mini = float('inf')\n        for i in range(n, 0, -1):\n            mini = min(dp[i], mini)\n            ans += mini - i if mini != float('inf') else n - i + 1\n        print(ans)", "R = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    (n, m) = R()\n    a = [0] + [0] * n\n    r = 0\n    for _ in [0] * m:\n        (x, y) = sorted(R())\n        a[y] = max(a[y], x)\n    for i in range(1, n + 1):\n        a[i] = max(a[i - 1], a[i])\n        r += i - a[i]\n    print(r)", "for _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    l = list([n] * (n + 1))\n    for _ in range(m):\n        (x, y) = [int(x) for x in input().split()]\n        (min_v, max_v) = (min(x, y), max(x, y))\n        l[min_v] = min(l[min_v], max_v - 1)\n    for i in range(n - 2, -1, -1):\n        l[i] = min(l[i], l[i + 1])\n    ans = 0\n    for i in range(1, n + 1):\n        ans += l[i] - i + 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    enemies = []\n    for _ in range(m):\n        enemies.append(sorted([int(x) - 1 for x in input().split()]))\n    new_left = [-1 for _ in range(n)]\n    for (l, r) in enemies:\n        new_left[r] = max(new_left[r], l)\n    left = 0\n    ssum = 0\n    for i in range(n):\n        left = max(left, new_left[i] + 1)\n        ssum += i - left + 1\n    print(ssum)", "import math\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    data = {}\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        k = min(a, b)\n        l = max(a, b)\n        if k in data and data[k] > l:\n            data[k] = l\n        elif k not in data:\n            data[k] = l\n    total = 0\n    k = n\n    for j in range(1, n + 1):\n        i = n + 1 - j\n        if i in data:\n            total += min(data[i] - i, k - i + 1)\n            if k > data[i] - 1:\n                k = data[i] - 1\n        else:\n            total += k - i + 1\n    print(total)", "test = int(input())\nwhile test > 0:\n    test -= 1\n    (n, m) = [int(i) for i in input().split()]\n    arr = [n + 1 for i in range(n + 1)]\n    for i in range(m):\n        edg = [int(i) for i in input().split()]\n        if edg[0] < edg[1]:\n            arr[edg[0]] = min(arr[edg[0]], edg[1])\n        else:\n            arr[edg[1]] = min(arr[edg[1]], edg[0])\n    countPair = 0\n    for i in range(n, 0, -1):\n        countPair += arr[i] - i\n        arr[i - 1] = min(arr[i - 1], arr[i])\n    print(countPair)", "testcase_no = int(input())\nfor _ in range(testcase_no):\n    (n, m) = map(int, input().split())\n    pairs = []\n    for i in range(m):\n        (L, R) = map(int, input().split())\n        pairs.append((min(L, R), max(L, R)))\n    pairs = sorted(pairs)\n    min_Rs = [0 for j in range(n + 1)]\n    minVal = 10 ** 18\n    for i in range(m - 1, -1, -1):\n        minVal = min(minVal, pairs[i][1])\n        min_Rs[pairs[i][0]] = minVal\n    min_Rs[n] = n + 1\n    for i in range(n - 1, 0, -1):\n        if min_Rs[i] == 0:\n            min_Rs[i] = min_Rs[i + 1]\n    count = 0\n    for iter in range(1, n + 1):\n        count += min_Rs[iter] - iter\n    print(count)", "def exe():\n    d = {}\n    arr = [0 for i in range(n + 1)]\n    for i in range(1, n + 1):\n        d[i] = n + 1\n    for i in range(m):\n        d[lst[i][0]] = min(d[lst[i][0]], lst[i][1])\n    ans = 0\n    mini = d[n]\n    for i in range(n, 0, -1):\n        mini = min(d[i], mini)\n        arr[i] = mini\n    for i in range(1, n + 1):\n        ans += arr[i] - i\n    return ans\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    lst = [sorted(list(map(int, input().split()))) for i in range(m)]\n    print(exe())", "t = int(input())\nfor x in range(t):\n    (n, m) = [int(i) for i in input().split(' ')]\n    arr = [0] * (n + 1)\n    for i in range(m):\n        (a, b) = [int(i) for i in input().split(' ')]\n        arr[max(a, b)] = max(arr[max(a, b)], min(a, b))\n    answer = 0\n    for i in range(1, n + 1):\n        arr[i] = max(arr[i], arr[i - 1])\n        answer += i - arr[i]\n    print(answer)", "for i in range(int(input())):\n    (x, y) = map(int, input().split())\n    z = list(range(1, x + 1))\n    aa = [0] * (1 + x)\n    for j in range(y):\n        (a, b) = map(int, input().split())\n        u = [a, b]\n        aa[max(u)] = max(min(u), aa[max(u)])\n    for k in range(1, x + 1):\n        aa[k] = max(aa[k], aa[k - 1])\n    print(sum(z) - sum(aa))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    nezn = [2 * 10 ** 9] * n\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        (x, y) = (min(x, y) - 1, max(x, y) - 1)\n        nezn[x] = min(y, nezn[x])\n    ogr = n\n    pri = -1\n    ans = 0\n    for i in range(n):\n        if i != pri + 1 and nezn[i] == 2 * 10 ** 9:\n            ans += ogr - i\n        elif i == pri + 1 and nezn[i] == 2 * 10 ** 9:\n            ogr = n\n            j = i + 1\n            while j < ogr:\n                if nezn[j] <= ogr:\n                    ogr = min(ogr, nezn[j])\n                    pri = j\n                j += 1\n            ans += ogr - i\n        elif i != pri + 1:\n            ans += ogr - i\n        elif i == pri + 1:\n            j = i + 1\n            ogr = nezn[i]\n            pri = i\n            while j < ogr:\n                if nezn[j] <= ogr:\n                    ogr = min(ogr, nezn[j])\n                    pri = j\n                j += 1\n            ans += ogr - i\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    lst = [n] * n\n    dct = {}\n    for i in range(m):\n        (a, b) = [int(x) for x in input().split()]\n        min_ = min(a, b)\n        max_ = max(a, b)\n        dct[min_] = min(dct.get(min_, n + 1), max_)\n    dct = {k: dct[k] for k in sorted(dct, reverse=True)}\n    right_border = n + 1\n    sum = 0\n    for pos in range(n, 0, -1):\n        right_border = min(dct.get(pos, n + 1), right_border)\n        sum += right_border - pos\n    print(sum)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [float('inf') for i in range(n + 1)]\n    count = 0\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        if x > y:\n            (x, y) = (y, x)\n        a[x] = min(a[x], y)\n    mx = float('inf')\n    for i in range(n - 1, 0, -1):\n        if mx == a[i] and mx == float('inf'):\n            count += n - i\n        else:\n            count += min(a[i], mx) - i - 1\n        mx = min(a[i], mx)\n    print(count + n)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [float('inf') for i in range(n + 1)]\n    count = 0\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        if x > y:\n            (x, y) = (y, x)\n        a[x] = min(a[x], y)\n    mx = float('inf')\n    for i in range(n - 1, 0, -1):\n        if mx == a[i] and mx == float('inf'):\n            count += n - i\n        else:\n            count += min(a[i], mx) - i - 1\n        mx = min(a[i], mx)\n    print(count + n)", "t = int(input())\nfor test in range(t):\n    www = input().split()\n    n = int(www[0])\n    m = int(www[1])\n    starts = []\n    for i in range(n + 1):\n        starts.append(0)\n    for i in range(m):\n        vvv = input().split()\n        vvv[0] = int(vvv[0])\n        vvv[1] = int(vvv[1])\n        vvv = sorted(vvv)\n        a = vvv[0]\n        b = vvv[1]\n        starts[b] = max(starts[b], a)\n    right = 1\n    ans = 0\n    for i in range(1, n + 1):\n        for j in range(right + 1, n + 1):\n            if i <= starts[j]:\n                break\n            right += 1\n        if right == n + 1:\n            right = n\n        kk = right - i + 1\n        ans += kk\n    print(ans)", "import math\nimport collections\nimport bisect\nimport heapq\nfrom collections import deque\nfrom math import sqrt, ceil, floor\n\ndef inp_arr():\n    return list(map(int, input().strip().split(' ')))\n\ndef inp_str_arr():\n    return list(input().strip().split(' '))\n\ndef inp_str():\n    return input()\n\ndef solve():\n    (n, m) = inp_arr()\n    a = []\n    for i in range(m):\n        (x, y) = inp_arr()\n        temp = min(x, y)\n        y = max(x, y)\n        x = temp\n        a.append([x, y])\n    mp = collections.defaultdict(list)\n    a.sort()\n    for x in a:\n        mp[x[0]].append(x[1])\n    ans = 0\n    new_a = []\n    for x in mp:\n        new_a.append([x, mp[x][0]])\n    new_a.sort(key=lambda x: x[1])\n    need = 1\n    for x in new_a:\n        y = x[1]\n        while need <= x[0]:\n            ans += y - need\n            need += 1\n    diff = n - need + 1\n    print(ans + diff * (diff + 1) // 2)\n(tt,) = inp_arr()\nfor t in range(tt):\n    solve()", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    if m == 0:\n        print(int(n * (n + 1) / 2))\n        t -= 1\n        continue\n    queries = []\n    for j in range(m):\n        (a, b) = map(int, input().split())\n        queries.append([min(a, b), max(a, b)])\n    ans = [n for u in range(n + 1)]\n    uniqq = []\n    queries.sort()\n    for i in range(m):\n        if i != 0 and queries[i][0] != queries[i - 1][0]:\n            uniqq.append(queries[i])\n        if i == 0:\n            uniqq.append(queries[i])\n    l = len(uniqq)\n    uptr = l - 1\n    for person in range(n, 0, -1):\n        while uptr > 0 and uniqq[uptr][0] > person:\n            uptr -= 1\n        if uniqq[uptr][0] == person:\n            if person != n:\n                ans[person] = min(ans[person + 1], uniqq[uptr][1] - 1)\n            else:\n                ans[person] = uniqq[uptr][1] - 1\n        elif person != n:\n            ans[person] = ans[person + 1]\n    res = 0\n    for k in range(1, n + 1):\n        res += ans[k] - k + 1\n    print(res)\n    t -= 1", "import sys\nimport re\nimport math\nfrom math import log2\nfrom math import log\nfrom math import ceil\nfrom math import gcd\nfrom decimal import *\nfrom collections import deque\nimport random\nimport heapq\nimport itertools\nimport datetime\nconst = 1000000007\nep = 1e-08\n\ndef get():\n    return list(map(int, input().split()))\nn = int(input())\nfor i in range(n):\n    line = get()\n    (m, k) = (line[0], line[1])\n    dd = {}\n    for j in range(k):\n        line = get()\n        (a, b) = (line[0], line[1])\n        (c, d) = (min(a, b), max(a, b))\n        if c not in dd:\n            dd[c] = d\n        dd[c] = min(dd[c], d)\n    total = 0\n    ends = [m + 1 for j in range(m + 1)]\n    smallest = m + 1\n    for j in range(m, 0, -1):\n        if j in dd:\n            smallest = min(smallest, dd[j])\n        ends[j] = smallest\n    for j in range(1, m + 1):\n        total += ends[j] - j\n    print(total)", "N = int(input())\nfor i in range(N):\n    num = list(map(eval, input().split()))\n    flag = [10000000.0 for i in range(num[0] + 1)]\n    tmp = []\n    for j in range(num[1]):\n        tmp.append(list(map(eval, input().split())))\n    for j in range(num[1]):\n        (a, b) = (tmp[j][0], tmp[j][1])\n        if a > b:\n            (a, b) = (b, a)\n        flag[a] = min(b, flag[a])\n    l = r = num[0]\n    ans = 0\n    while l > 0:\n        r = min(r, flag[l] - 1)\n        ans += r - l + 1\n        l -= 1\n    print(ans)", "N = int(input())\nfor i in range(N):\n    num = list(map(eval, input().split()))\n    flag = [10000000.0 for i in range(num[0] + 1)]\n    tmp = []\n    for j in range(num[1]):\n        tmp.append(list(map(eval, input().split())))\n    for j in range(num[1]):\n        if tmp[j][0] < flag[tmp[j][1]] and tmp[j][0] > tmp[j][1]:\n            flag[tmp[j][1]] = tmp[j][0]\n        if tmp[j][1] < flag[tmp[j][0]] and tmp[j][1] > tmp[j][0]:\n            flag[tmp[j][0]] = tmp[j][1]\n    l = r = num[0]\n    ans = 0\n    while l > 0:\n        if flag[l] < l or flag[l] == 10000000.0:\n            ans += r - l + 1\n        else:\n            r = min(r, flag[l] - 1)\n            ans += r - l + 1\n        l -= 1\n    print(ans)"]