["def solve():\n    (n, c) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    lst = [elem + i + 1 for (i, elem) in enumerate(lst)]\n    lst.sort()\n    ans = 0\n    for i in range(n):\n        if lst[i] <= c:\n            ans += 1\n            c -= lst[i]\n        else:\n            break\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "def tt(n, c, a):\n    for i in range(n):\n        a[i] += i + 1\n    a.sort()\n    ans = 0\n    for i in a:\n        if i > c:\n            break\n        else:\n            c -= i\n            ans += 1\n    return ans\nt = int(input())\nb = []\nfor i in range(t):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b.append(tt(n, c, a))\nfor i in b:\n    print(i)", "def oi():\n    return int(input())\n\ndef ti():\n    return map(int, input().split())\n\ndef mi():\n    return list(map(int, input().split()))\n\ndef solve():\n    (length, c) = ti()\n    arr = mi()\n    for (i, num) in enumerate(arr):\n        arr[i] = num + i + 1\n    arr.sort()\n    ans = 0\n    p = 0\n    while c > 0:\n        if len(arr) == p:\n            break\n        if c >= arr[p]:\n            c -= arr[p]\n            ans += 1\n            p += 1\n        else:\n            break\n    print(ans)\nfor _ in range(oi()):\n    solve()", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr1 = sorted([i + j for (i, j) in enumerate(arr, 1)])\n    ans = 0\n    i = 0\n    while i < n and 0 <= c - arr1[i]:\n        c -= arr1[i]\n        ans += 1\n        i += 1\n    print(ans)", "for i in range(int(input())):\n    (n, c) = map(int, input().split())\n    l = list(map(int, input().split()))\n    place = [x for x in range(1, n + 1)]\n    cost = [x + y for (x, y) in zip(l, place)]\n    cost.sort()\n    cnt = 0\n    sum = 0\n    for i in cost:\n        if sum + i <= c:\n            sum += i\n            cnt += 1\n        else:\n            break\n    print(cnt)", "def solve():\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] += i + 1\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if c >= a[i]:\n            c -= a[i]\n            ans += 1\n        else:\n            break\n    return ans\nfor t in range(int(input())):\n    print(solve())", "import sys, math, bisect, collections, itertools, heapq\nfrom collections import defaultdict, deque\nsys.setrecursionlimit(50000)\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    (n, c) = map(int, sys.stdin.readline().split())\n    l = list(map(int, sys.stdin.readline().split()))\n    for i in range(n):\n        l[i] += i + 1\n    l.sort()\n    ans = 0\n    for i in l:\n        c -= i\n        if c >= 0:\n            ans += 1\n        else:\n            break\n    print(ans)", "operations_amount = int(input())\nmax_amounts = []\nfor i in range(operations_amount):\n    (teleports_amount, money) = list(map(int, input().split(' ')))\n    teleport = tuple(map(int, input().split(' ')))\n    advanced_teleport = [num + elem + 1 for (num, elem) in enumerate(teleport)]\n    advanced_teleport.sort()\n    t = 0\n    money_spent = 0\n    for teleport_cost in advanced_teleport:\n        money_spent += teleport_cost\n        if money_spent > money:\n            break\n        t += 1\n    max_amounts.append(t)\nfor max_amount in max_amounts:\n    print(max_amount)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    costs = sorted([i + 1 + v for (i, v) in enumerate(a)])\n    for p in costs:\n        if c >= p:\n            ans += 1\n            c -= p\n        else:\n            break\n    print(ans)", "from typing import List\n\ndef pop() -> None:\n    (tty, uix) = map(int, input().split())\n    arr: List[int] = list(map(int, input().split()))\n    for i in range(tty):\n        arr[i] += i + 1\n    arr.sort()\n    op = 0\n    while op < tty:\n        if uix >= arr[op]:\n            uix -= arr[op]\n        else:\n            break\n        op += 1\n    print(op)\n\ndef main() -> None:\n    z = int(input())\n    for i in range(z):\n        pop()\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    x = list(map(int, input().split()))\n    x = [x[i] + i + 1 for i in range(n)]\n    x.sort()\n    i = 0\n    while i < n and x[i] <= m:\n        m -= x[i]\n        i += 1\n    print(i)", "def print_max_tele(n, c, arr):\n    arr = sorted(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] <= c:\n            count += 1\n            c = c - arr[i]\n        else:\n            break\n    print(count)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        (n, c) = map(int, input().split())\n        arr = input().split()\n        for i in range(n):\n            arr[i] = int(arr[i]) + i + 1\n        print_max_tele(n, c, arr)\nmain()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    bits = list(map(int, input().split()))\n    s = [bits[i] + i + 1 for i in range(n)]\n    s.sort()\n    c = 0\n    ct = 0\n    for i in range(n):\n        ct += s[i]\n        if ct > m:\n            break\n        else:\n            c += 1\n    print(c)", "def Teleporters(a, endvalue, coins):\n    i = 0\n    num_telep = 0\n    for (i, val) in enumerate(a):\n        a[i] = i + val + 1\n    a = sorted(a)\n    for i in a:\n        if coins - i >= 0:\n            coins -= i\n            num_telep += 1\n        else:\n            return num_telep\n    return num_telep\nval = int(input())\nresult = [] * val\nfor i in range(val):\n    (val2, coins) = map(int, input().split())\n    a = list(map(int, input().split()))\n    result.append(Teleporters(a, val2, coins))\nfor res in result:\n    print(res)", "def minimum_teleports(a, c, n):\n    actual_cost = [a[i] + i + 1 for i in range(n)]\n    actual_cost = sorted(actual_cost)\n    rem_cost = c\n    counter = 0\n    for cost in actual_cost:\n        if cost > rem_cost:\n            break\n        rem_cost -= cost\n        counter += 1\n    return counter\nt = int(input().strip())\nfor _ in range(t):\n    (n, c) = list(map(int, input().rstrip().split()))\n    a = list(map(int, input().rstrip().split()))\n    ans = minimum_teleports(a, c, n)\n    print(ans)", "def solve():\n    (n, c) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    for i in range(n):\n        a[i] += i + 1\n    a.sort()\n    a += [c]\n    ans = 0\n    while a[ans] <= c:\n        c -= a[ans]\n        ans += 1\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "from operator import add\nimport itertools\nt = input()\n\ndef solve(a, n, c):\n    p = [x + i + 1 for (i, x) in enumerate(a)]\n    p.sort()\n    s = itertools.accumulate(p, add)\n    for (i, v) in enumerate(s):\n        if v > c:\n            return i\n    return n\nfor _ in range(int(t)):\n    (n, c) = map(int, input().split(' '))\n    a = [*map(int, input().split(' '))]\n    print(solve(a, n, c))", "def solve(a, c):\n    a1 = a.copy()\n    for ni in range(len(a1)):\n        a1[ni] += 1 + ni\n    a1.sort()\n    res = 0\n    for ni in range(len(a1)):\n        if a1[ni] > c:\n            break\n        res += 1\n        c -= a1[ni]\n    return res\nt = int(input())\nans = []\nfor ti in range(t):\n    (n, c) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    ans.append(solve(a, c))\nfor a in ans:\n    print(a)", "def start():\n    (n, c) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    mass = [arr[i] + i + 1 for i in range(n)]\n    mass.sort()\n    ans = 0\n    while ans < n and c >= mass[ans]:\n        c = c - mass[ans]\n        ans = ans + 1\n    print(ans)\nt = int(input())\nwhile t != 0:\n    t -= 1\n    start()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    for i in range(n):\n        l[i] += i + 1\n    l1 = sorted(l)\n    ans = 0\n    for i in range(n):\n        if k >= l1[i]:\n            k -= l1[i]\n            ans += 1\n        else:\n            break\n    print(ans)", "for i in '0' * int(input()):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    for j in range(n):\n        l[j] += j + 1\n    l.sort()\n    f = 0\n    for j in l:\n        if j <= m:\n            m -= j\n            f += 1\n    print(f)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    elem = list(map(int, input().split()))\n    for i in range(n):\n        elem[i] = elem[i] + i + 1\n    elem.sort()\n    res = 0\n    cnt = 0\n    for i in range(n):\n        res += elem[i]\n        if res > c:\n            break\n        cnt += 1\n    print(cnt)", "t = int(input())\nfor _ in range(t):\n    (n, c) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    cost = [arr[i] + i + 1 for i in range(n)]\n    count = 0\n    for s in sorted(cost):\n        c -= s\n        if c < 0:\n            break\n        count += 1\n    print(count)", "t = int(input())\nfor _ in range(t):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] += i + 1\n    a = sorted(a)\n    answ = 0\n    i = 0\n    while c >= a[i]:\n        c -= a[i]\n        answ += 1\n        i += 1\n        if answ == n:\n            break\n    print(answ)", "n = int(input())\nwhile n > 0:\n    (m, c) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr = [arr[i] + i + 1 for i in range(m)]\n    arr.sort()\n    ans = 0\n    for i in arr:\n        c -= i\n        if c < 0:\n            break\n        else:\n            ans += 1\n    print(ans)\n    n -= 1", "import sys\nimport collections\nfrom math import ceil, gcd, sqrt, log\nimport bisect\nimport heapq\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    (n, c) = map(int, input().split())\n    A = list(map(int, input().split()))\n    minHeap = []\n    for i in range(n):\n        heapq.heappush(minHeap, A[i] + i + 1)\n    net = 0\n    while minHeap and c >= minHeap[0]:\n        c -= heapq.heappop(minHeap)\n        net += 1\n    print(net)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c2 = 1\n    for i in range(n):\n        a[i] += c2\n        c2 += 1\n    a.sort()\n    s = 0\n    c1 = 0\n    for j in range(n):\n        s += a[j]\n        if s <= c:\n            c1 += 1\n        else:\n            break\n    print(c1)", "for _ in range(int(input())):\n    (n, pre) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        arr[i] += i + 1\n    arr.sort()\n    i = 0\n    while i < n:\n        if pre < arr[i]:\n            break\n        pre -= arr[i]\n        i += 1\n    print(i)", "t = int(input())\nfor _ in range(t):\n    (n, money) = map(int, input().split())\n    costs = list(map(int, input().split()))\n    for i in range(n):\n        costs[i] += i + 1\n    flag = True\n    costs.sort()\n    gross = 0\n    for i in range(n):\n        gross += costs[i]\n        if gross > money:\n            flag = False\n            break\n    print(i + flag)", "t = int(input())\nfor _ in range(t):\n    (n, c) = map(int, input().split())\n    vet = list(map(int, input().split()))\n    for i in range(n):\n        vet[i] += i + 1\n    vet = sorted(vet)\n    port = 0\n    for i in range(n):\n        if c >= vet[i]:\n            c -= vet[i]\n            port += 1\n        else:\n            break\n    print(port)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    list1 = list(map(int, input().split()))\n    nums = []\n    for i in range(len(list1)):\n        nums.append(list1[i] + i + 1)\n    nums.sort()\n    count = 0\n    for i in range(len(nums)):\n        c -= nums[i]\n        if c >= 0:\n            count += 1\n        else:\n            break\n    print(count)", "for x in range(int(input())):\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for x in range(len(b)):\n        b[x] = b[x] + x + 1\n    b.sort()\n    c = 0\n    d = 0\n    k = True\n    for x in b:\n        e = c + x\n        if e > a[1]:\n            print(d)\n            k = False\n            break\n        else:\n            c = e\n            d += 1\n    if k:\n        print(d)", "import sys\n\ndef answer():\n    pass\n\ndef solution():\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] += i + 1\n    a.sort()\n    k = 0\n    for i in a:\n        if c < i:\n            print(k)\n            break\n        c -= i\n        k += 1\n    else:\n        print(n)\nt = int(input())\nfor _ in range(t):\n    solution()", "T = int(input())\nfor _ in range(T):\n    (a, b) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    for i in range(a):\n        arr[i] += i + 1\n    arr.sort()\n    sum_ = 0\n    counter = 0\n    for i in range(a):\n        if sum_ + arr[i] <= b:\n            sum_ += arr[i]\n            counter += 1\n        else:\n            break\n    print(counter)", "import sys\nfor _ in range(int(next(sys.stdin))):\n    input = next(sys.stdin).split(' ')\n    n = int(input[0])\n    c = int(input[1])\n    a = next(sys.stdin).strip().split(' ')\n    a = list((int(i) for i in a))\n    for i in range(n):\n        a[i] += i + 1\n    a.sort()\n    res = 0\n    for i in a:\n        c -= i\n        if c < 0:\n            break\n        res += 1\n    print(res)", "tasks = int(input())\nfor t in range(tasks):\n    (ts, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    for i in range(ts):\n        arr[i] += i + 1\n    arr.sort()\n    c = 0\n    flag = True\n    for i in range(ts):\n        m -= arr[i]\n        if m >= 0:\n            c += 1\n        else:\n            print(c)\n            flag = False\n            break\n    if flag:\n        print(c)", "def number(a, n, p, k):\n    a.sort()\n    pre = []\n    for i in range(n):\n        pre.append(0)\n    ans = 0\n    val = 0\n    i = 0\n    j = 0\n    pre[0] = a[0]\n    if pre[0] <= p:\n        ans = 1\n    for i in range(1, k - 1):\n        pre[i] = pre[i - 1] + a[i]\n        if pre[i] <= p:\n            ans = i + 1\n    pre[k - 1] = a[k - 1]\n    for i in range(k - 1, n):\n        if i >= k:\n            pre[i] += pre[i - k] + a[i]\n        if pre[i] <= p:\n            ans = i + 1\n    return ans\nfor t in range(int(input())):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] += i + 1\n    a.sort()\n    ans = 0\n    ct = 0\n    for i in a:\n        if i + ans > c:\n            break\n        ans += i\n        ct += 1\n    print(ct)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = [int(x) for x in input().split()]\n    for i in range(1, n + 1):\n        l[i - 1] += i\n    l.sort()\n    i = 0\n    while i < n:\n        k -= l[i]\n        if k < 0:\n            break\n        else:\n            i += 1\n    print(i)", "num_cases = int(input())\nfor _ in range(num_cases):\n    (num_elements, num_coins) = input().split()\n    (num_elements, num_coins) = (int(num_elements), int(num_coins))\n    arr = list(map(int, input().split()))\n    if num_elements == 0:\n        print(0)\n        break\n    for i in range(1, num_elements + 1):\n        arr[i - 1] += i\n    arr.sort()\n    i = 0\n    teles_used = 0\n    while i < num_elements and num_coins >= arr[i]:\n        num_coins -= arr[i]\n        i += 1\n        teles_used += 1\n    print(teles_used)", "for i in range(int(input())):\n    (n, c) = map(int, input().split())\n    l = list(map(int, input().split()))\n    for i in range(n):\n        l[i] = l[i] + i + 1\n    l = sorted(l)\n    ans = 0\n    for i in range(n):\n        if c >= l[i]:\n            c = c - l[i]\n            ans = ans + 1\n        else:\n            break\n    print(ans)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        a[i] += i + 1\n    a.sort()\n    for x in a:\n        if x <= c:\n            c -= x\n            count += 1\n        else:\n            break\n    print(count)", "n = int(input())\n\ndef check(c, arr):\n    res = 0\n    arr = [arr[i] + i + 1 for i in range(len(arr))]\n    arr.sort()\n    for i in arr:\n        if i <= c:\n            res += 1\n            c -= i\n        else:\n            break\n    return res\nfor i in range(n):\n    c = [int(i) for i in input().split(' ')][1]\n    arr = [int(i) for i in input().split(' ')]\n    print(check(c, arr))", "for i in range(int(input())):\n    (n, c) = map(int, input().split())\n    l = list(map(int, input().split()))\n    for j in range(n):\n        l[j] = l[j] + j + 1\n    l.sort()\n    cnt = 0\n    s = 0\n    while s <= c and cnt < n:\n        s += l[cnt]\n        cnt += 1\n    if s > c:\n        print(cnt - 1)\n    else:\n        print(cnt)", "def min_coins_to_reach_teleporter(arr, n, coins):\n    arr.sort(reverse=True)\n    teleporters = 0\n    while len(arr) > 0 and coins >= arr[-1]:\n        teleporters += 1\n        coins -= arr[-1]\n        arr.pop()\n    return teleporters\n\ndef teleporters(n, coins, arr):\n    cost = []\n    for i in range(n):\n        cost.append(arr[i] + i + 1)\n    return min_coins_to_reach_teleporter(cost, n, coins)\n\ndef main():\n    t = int(input().strip())\n    for i in range(t):\n        (n, coins) = map(int, input().strip().split())\n        arr = list(map(int, input().strip().split()))\n        print(teleporters(n, coins, arr))\nmain()", "t = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    mylist = list(map(int, input().split()))\n    for iamsuperman in range(a):\n        mylist[iamsuperman] += iamsuperman + 1\n    mylist.sort()\n    cnt = 0\n    for iamspiderman in range(a):\n        if b >= mylist[iamspiderman]:\n            b -= mylist[iamspiderman]\n            cnt += 1\n        else:\n            break\n    print(cnt)", "for _ in range(int(input())):\n    (n, c) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] += i + 1\n    a.sort()\n    r = 0\n    id = 0\n    while True:\n        if id > n - 1:\n            break\n        elif a[id] <= c:\n            r += 1\n            c -= a[id]\n            id += 1\n        else:\n            break\n    print(r)", "t = int(input())\nfor k in range(t):\n    (n, c) = map(int, input().split())\n    a = sorted([int(j) + i + 1 for (i, j) in enumerate(input().split())])\n    s = 0\n    for i in a:\n        if c >= i:\n            c -= i\n            s += 1\n        else:\n            break\n    print(s)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    print(len([(c := (c - j)) for j in sorted([int(i) + values + 1 for (values, i) in enumerate(input().split())]) if c - j >= 0]))", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    elements = list(map(int, input().split()))\n    for i in range(n):\n        elements[i] = elements[i] + i + 1\n    elements.sort()\n    res = 0\n    cnt = 0\n    for i in range(n):\n        res += elements[i]\n        if res > c:\n            break\n        cnt += 1\n    print(cnt)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    elements = list(map(int, input().split()))\n    for i in range(n):\n        elements[i] = elements[i] + i + 1\n    elements.sort()\n    res = 0\n    cnt = 0\n    for i in range(n):\n        res += elements[i]\n        if res > c:\n            break\n        cnt += 1\n    print(cnt)", "for i in '0' * int(input()):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    for j in range(n):\n        l[j] += j + 1\n    l.sort()\n    f = 0\n    for j in l:\n        if j <= m:\n            m -= j\n            f += 1\n    print(f)", "t = int(input())\nmaj = []\nfor i in range(t):\n    numb = [int(num) for num in input().split(' ', 1)]\n    mino = [int(num) for num in input().split(' ', numb[0] - 1)]\n    mas = []\n    mas.append(mino)\n    mas.append([numb[1]])\n    maj.append(mas)\n\ndef pri(c, l):\n    for i in range(len(l)):\n        l[i] = l[i] + (i + 1)\n    l = sorted(l)\n    p = 0\n    j = 0\n    count = 0\n    while p < c:\n        if j == len(l):\n            break\n        p += l[j]\n        j += 1\n        count += 1\n    if p <= c:\n        print(count)\n    else:\n        print(count - 1)\nfor i in maj:\n    l = i[0]\n    c = i[1][0]\n    pri(c, l)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, c) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    counter = 0\n    for y in sorted([a[i] + i + 1 for i in range(n)]):\n        if c - y >= 0:\n            counter = counter + 1\n            c -= y\n        else:\n            break\n    print(counter)", "t = int(input())\nfor i in range(t):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] += i + 1\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] <= c:\n            c -= a[i]\n            ans += 1\n        else:\n            break\n    print(ans)", "def minimum_teleports(a, c, n):\n    cost_list = [a[i] + i + 1 for i in range(n)]\n    cost_list = sorted(cost_list)\n    rem_cost = c\n    counter = 0\n    for cost in cost_list:\n        if cost > rem_cost:\n            break\n        rem_cost -= cost\n        counter += 1\n    return counter\nt = int(input().strip())\nfor _ in range(t):\n    (n, c) = list(map(int, input().rstrip().split()))\n    a = list(map(int, input().rstrip().split()))\n    ans = minimum_teleports(a, c, n)\n    print(ans)", "from sys import stdin\nfrom heapq import heappush, heappop\nt = int(stdin.readline())\nall_ans = []\nfor _ in range(t):\n    (n, c) = map(int, stdin.readline().split())\n    pq = []\n    for (idx, cost) in enumerate(stdin.readline().split()):\n        heappush(pq, int(cost) + idx + 1)\n    ans = 0\n    while pq and c >= pq[0]:\n        ans += 1\n        c -= heappop(pq)\n    all_ans.append(ans)\nprint('\\n'.join(map(str, all_ans)))", "t = int(input())\nfor t1 in range(t):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] += i + 1\n    count = 0\n    sum = 0\n    a.sort()\n    for i in range(n):\n        sum += a[i]\n        if sum <= c:\n            count += 1\n        else:\n            break\n    print(count)", "def solve():\n    num_tests = int(input())\n    for i in range(num_tests):\n        coin_input = input()\n        space_input = input()\n        coin_list = []\n        space_list = []\n        for j in coin_input.split(' '):\n            coin_list.append(int(j))\n        for j in space_input.split(' '):\n            space_list.append(int(j))\n        length = coin_list[0]\n        coins = coin_list[1]\n        for j in range(length):\n            space_list[j] += j + 1\n        space_list.sort()\n        count = 0\n        for j in space_list:\n            coins -= j\n            if coins >= 0:\n                count += 1\n        print(count)\nsolve()", "t = int(input())\nfor i in range(t):\n    (n, c) = map(int, input().split())\n    l = list(map(int, input().split()))\n    L = []\n    for i in range(len(l)):\n        L.append(i + 1 + l[i])\n    L.sort()\n    s = 0\n    result = 0\n    complete = -1\n    for k in range(len(L)):\n        complete = k\n        s += L[k]\n        if s >= c:\n            complete = -1\n            if s == c:\n                result = k + 1\n            else:\n                result = k\n            break\n    if result >= 0 and complete == -1:\n        print(result)\n    elif complete >= 0:\n        print(complete + 1)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    print(len([(c := (c - j)) for j in sorted([int(i) + values + 1 for (values, i) in enumerate(input().split())]) if c - j >= 0]))", "t = int(input())\nfor i in range(t):\n    (n, c) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        arr[i] += i + 1\n    arr.sort()\n    ans = 0\n    for j in arr:\n        if j <= c:\n            ans += 1\n            c -= j\n        else:\n            break\n    print(ans)", "out = []\nfor _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    for i in range(n):\n        a[i] += i + 1\n    a.sort()\n    ans = 0\n    for i in a:\n        if i <= c:\n            ans += 1\n            c -= i\n        else:\n            break\n    out.append(ans)\nfor i in out:\n    print(i)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    for x in range(1, 1 + n):\n        lst[x - 1] += x\n    lst.sort()\n    rslt = x = 0\n    while x < n and k - lst[x] >= 0:\n        k -= lst[x]\n        x += 1\n        rslt += 1\n    print(rslt)", "T = int(input())\nfor _ in range(T):\n    (n, c) = [int(_) for _ in input().split()]\n    a = [int(_) for _ in input().split()]\n    b = []\n    for i in range(n):\n        b.append(i + a[i] + 1)\n    b = sorted(b)\n    res = 0\n    for x in b:\n        if c < x:\n            break\n        c -= x\n        res += 1\n    print(res)", "def solve():\n    (n, c) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    real_cost = [0 for i in range(n)]\n    for i in range(n):\n        real_cost[i] = a[i] + i + 1\n    real_cost.sort()\n    ans = 0\n    for i in range(n):\n        if c - real_cost[i] < 0:\n            break\n        c -= real_cost[i]\n        ans += 1\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, c) = list(map(int, input().split()))\n    lis = list(map(int, input().split()))\n    lis = sorted([lis[i] + 1 + i for i in range(len(lis))])\n    k = 0\n    count = 0\n    while k <= c and count < len(lis):\n        k += lis[count]\n        count += 1\n    if k > c:\n        count -= 1\n    print(count)", "import sys\ninput = sys.stdin.readline\ntest_cases = int(input())\ninputs = []\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef actual_cost(arr):\n    res = []\n    for i in range(len(arr)):\n        res.append(i + 1 + arr[i])\n    return res\nfor i in range(test_cases):\n    line1 = inlt()\n    a_length = line1[0]\n    coins = line1[1]\n    arr = inlt()\n    inputs.append({'arr': arr, 'coins': coins})\nfor val in inputs:\n    cost_arr = actual_cost(val['arr'])\n    coins = val['coins']\n    cost_arr.sort()\n    ans = 0\n    for cost in cost_arr:\n        coins = coins - cost\n        if coins < 0:\n            break\n        else:\n            ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    a = list(map(lambda x: x[0] + int(x[1]), enumerate(input().split(), 1)))\n    a.sort()\n    cnt = 0\n    for i in a:\n        if c >= i:\n            cnt += 1\n            c -= i\n        else:\n            break\n    print(cnt)", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    lst = []\n    for i in range(n):\n        lst.append(i + 1 + a[i])\n    lst = sorted(lst)\n    c = 0\n    s = 0\n    for i in range(n):\n        s += lst[i]\n        if s <= q:\n            c += 1\n        else:\n            break\n    print(c)", "def solution(arr, length, q):\n    for i in range(length):\n        arr[i] += i + 1\n    arr.sort()\n    res = 0\n    for i in arr:\n        q -= i\n        if q >= 0:\n            res += 1\n        else:\n            break\n    return res\ncase = int(input())\nfor _ in range(case):\n    (length, queries) = list(map(int, input().split(' ')))\n    nums = list(map(int, input().split(' ')))\n    print(solution(nums, length, queries))", "t = int(input())\nwhile t:\n    t -= 1\n    (n, c) = map(int, input().split())\n    a = [0] + list(map(int, input().split()))\n    v = []\n    for i in range(1, n + 1):\n        v.append(a[i] + i)\n    v.sort()\n    cnt = 0\n    for i in range(n):\n        if c >= v[i]:\n            cnt += 1\n            c -= v[i]\n        else:\n            break\n    print(cnt)", "import heapq\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] += i + 1\n    heapq.heapify(a)\n    count = 0\n    while m >= 0:\n        if len(a) == 0:\n            count += 1\n            break\n        c = heapq.heappop(a)\n        m -= c\n        count += 1\n    print(count - 1)", "tests = int(input())\nfor _ in range(tests):\n    (lgth, my_coins) = map(int, input().split())\n    coins = list(map(int, input().split()))\n    for j in range(lgth):\n        coins[j] += j + 1\n    coins.sort()\n    _sum = 0\n    answer = -1\n    i = 0\n    while i < lgth:\n        _sum += coins[i]\n        if _sum > my_coins:\n            break\n        answer = i\n        i += 1\n    print(answer + 1)", "t = int(input())\nfor _ in range(t):\n    (n, c) = [int(x) for x in input().split()]\n    teleporters = [int(x) for x in input().split()]\n    moveTeleportCost = sorted([x + i + 1 for (i, x) in enumerate(teleporters)])\n    maxUse = 0\n    for t in moveTeleportCost:\n        c -= t\n        if c >= 0:\n            maxUse += 1\n        else:\n            break\n    print(maxUse)", "def solve():\n    (num_of_stops, fuel) = map(int, input().split())\n    stops = [int(x) for x in input().split()]\n    for i in range(num_of_stops):\n        stops[i] += i + 1\n    stops.sort()\n    num_of_stops_covered = 0\n    while num_of_stops_covered < num_of_stops and fuel >= stops[num_of_stops_covered]:\n        fuel -= stops[num_of_stops_covered]\n        num_of_stops_covered += 1\n    print(num_of_stops_covered)\nnum_of_test_cases = int(input().strip())\nfor _ in range(num_of_test_cases):\n    solve()", "for i in range(int(input())):\n    (x, y) = map(int, input().split())\n    l = list(map(int, input().split()))\n    for i in range(len(l)):\n        l[i] += i + 1\n    l.sort()\n    c = 0\n    for i in range(len(l)):\n        if y >= l[i]:\n            y -= l[i]\n            c += 1\n        else:\n            break\n    print(c)", "cantidad = int(input())\nfor casos in range(cantidad):\n    info = input().split(' ')\n    n = int(info[0])\n    c = int(info[1])\n    lista = input().split(' ')\n    precio = []\n    for i in range(n):\n        precio.append(1 + i + int(lista[i]))\n    precio.sort()\n    pagar = 0\n    contador = 0\n    while pagar <= c and contador < n:\n        pagar += precio[contador]\n        contador += 1\n    if contador == n and pagar <= c:\n        print(contador)\n    else:\n        print(contador - 1)", "import sys\nfrom typing import List\n\ndef main():\n    tt = int(input().strip())\n    while tt:\n        tt -= 1\n        (n, nums) = map(int, input().strip().split())\n        arr = [int(x) for x in input().strip().split()]\n        for i in range(n):\n            arr[i] += i + 1\n        arr.sort()\n        j = 0\n        for i in range(n):\n            if nums >= arr[i]:\n                nums -= arr[i]\n                j += 1\n            else:\n                break\n        print(j)\nsys.exit(main())", "for tcase in range(int(input())):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [i + 1 + a[i] for i in range(n)]\n    b.sort()\n    i = 0\n    while i < n and c >= b[i]:\n        c -= b[i]\n        i += 1\n    print(i)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, c) = map(int, input().split())\n    li = list(map(int, input().split()))\n    for i in range(n):\n        li[i] += i + 1\n    li.sort()\n    ans = 0\n    for i in li:\n        c -= i\n        if c >= 0:\n            ans += 1\n        else:\n            break\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, coins) = map(int, input().split())\n    costs = list(map(int, input().split()))\n    costs = [k + costs[k] + 1 for k in range(len(costs))]\n    costs.sort()\n    for k in range(len(costs)):\n        if coins >= costs[k]:\n            coins -= costs[k]\n        else:\n            coins -= costs[k]\n            break\n    if coins >= 0:\n        print(k + 1)\n    else:\n        print(k)", "tc = int(input())\nres = []\nfor i in range(tc):\n    nc = input().split(' ')\n    n = int(nc[0])\n    c = int(nc[1])\n    arr = input().split(' ')\n    arr = [int(arr[i]) + i + 1 for i in range(len(arr))]\n    arr = sorted(arr)\n    i = 0\n    count = 0\n    while c > 0 and i < n:\n        if c >= arr[i]:\n            c -= arr[i]\n            count += 1\n            i += 1\n        else:\n            break\n    res.append(count)\nfor i in res:\n    print(i)", "for _ in range(int(input())):\n    (n, p) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        arr[i] += i + 1\n    arr.sort()\n    ans = 0\n    for j in range(n):\n        if p >= arr[j]:\n            ans += 1\n            p -= arr[j]\n        else:\n            break\n    print(ans)", "ri = lambda : int(input())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input()\n\ndef solve():\n    (n, c) = rl()\n    a = rl()\n    a = [val + i + 1 for (i, val) in enumerate(a)]\n    a.sort()\n    ans = 0\n    for val in a:\n        if val <= c:\n            c -= val\n            ans += 1\n    return ans\n\ndef main():\n    for _ in range(ri()):\n        print(solve())\nmain()", "def solve():\n    t = 1\n    t = int(input())\n    while t:\n        t -= 1\n        (n, c) = [int(x) for x in input().split()]\n        a = [int(x) for x in input().split()]\n        b = []\n        t_count = 0\n        for i in range(n):\n            b.append(a[i] + i + 1)\n        b.sort()\n        for i in range(n):\n            if c >= b[i]:\n                c -= b[i]\n                t_count += 1\n            else:\n                break\n        print(t_count)\nsolve()", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, c) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    counter = 0\n    for y in sorted([a[i] + i + 1 for i in range(n)]):\n        if c - y >= 0:\n            counter = counter + 1\n            c -= y\n        else:\n            break\n    print(counter)", "n = int(input())\nfor i in range(n):\n    (a, c) = map(int, input().split())\n    b = list(map(int, input().split()))\n    for i in range(a):\n        b[i] += i + 1\n    b.sort()\n    ans = 0\n    i = 0\n    while i < a and c >= b[i]:\n        c -= b[i]\n        i += 1\n    print(i)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    a = sorted([x + i + 1 for (i, x) in enumerate(map(int, input().split()))])\n    ans = 0\n    for x in a:\n        if x <= c:\n            c -= x\n            ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] += i + 1\n    a.sort()\n    result = 0\n    for i in a:\n        if i > c:\n            break\n        else:\n            c -= i\n            result += 1\n    print(result)", "t = int(input())\nfor i in range(t):\n    (N, C) = list(map(int, input().split()))\n    vals = list(map(int, input().split()))\n    greedy = []\n    for i in range(N):\n        greedy.append(1 + i + vals[i])\n    greedy.sort()\n    current = 0\n    for i in range(len(greedy)):\n        current += greedy[i]\n        if current > C:\n            print(i)\n            break\n        if i == len(greedy) - 1:\n            print(len(greedy))", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] += i + 1\n    a.sort()\n    r = 0\n    for i in a:\n        if c >= i:\n            c -= i\n            r += 1\n        else:\n            break\n    print(r)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] = a[i] + i + 1\n    a = sorted(a)\n    ans = 0\n    i = 0\n    while i < n and c > 0:\n        if a[i] <= c:\n            c -= a[i]\n            ans += 1\n            i += 1\n        else:\n            break\n    print(ans)", "amount = int(input())\nfor i in range(amount):\n    line = input().split(' ')\n    newAmount = int(line[0])\n    money = int(line[1])\n    teleports = 0\n    line = input().split(' ')\n    paths = []\n    for j in range(len(line)):\n        num = int(line[j]) + j + 1\n        paths.append(num)\n    paths.sort()\n    for j in paths:\n        if money - j >= 0:\n            teleports += 1\n            money -= j\n        else:\n            break\n    print(teleports)", "for i in '0' * int(input()):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    for j in range(n):\n        l[j] += j + 1\n    l.sort()\n    f = 0\n    for j in l:\n        if j <= m:\n            m -= j\n            f += 1\n    print(f)", "q = int(input())\nfor i in range(q):\n    out = 0\n    xd = 0\n    (delka, prachy) = map(int, input().split())\n    lol = list(map(int, input().split()))\n    for i in range(delka):\n        lol[i] = lol[i] + 1 + i\n    lol.sort()\n    for i in range(len(lol)):\n        xd = xd + lol[i]\n        if xd > prachy:\n            break\n        out = out + 1\n    print(out)", "for i in '0' * int(input()):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    for j in range(n):\n        l[j] += j + 1\n    l.sort()\n    f = 0\n    for j in l:\n        if j <= m:\n            m -= j\n            f += 1\n    print(f)", "import math\nT = int(input(''))\nfor i in range(T):\n    str1 = input()\n    l1 = [int(c) for c in str1.split()]\n    str1 = input()\n    l2 = [int(c) for c in str1.split()]\n    coins = l1[1]\n    for j in range(len(l2)):\n        l2[j] += j + 1\n    l2.sort()\n    teleports = 0\n    for element in l2:\n        if element > coins:\n            break\n        else:\n            teleports += 1\n            coins -= element\n    print(teleports)", "for i in '0' * int(input()):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    for j in range(n):\n        l[j] += j + 1\n    l.sort()\n    f = 0\n    for j in l:\n        if j <= m:\n            m -= j\n            f += 1\n    print(f)", "for i in '0' * int(input()):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    for j in range(n):\n        l[j] += j + 1\n    l.sort()\n    f = 0\n    for j in l:\n        if j <= m:\n            m -= j\n            f += 1\n    print(f)"]