["import math\nfrom sys import stdin, stdout\ninput = stdin.readline\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m1 = math.ceil(n / 2)\n    t = []\n    flag = False\n    s = 0\n    for i in a:\n        if not t:\n            if i <= m1:\n                t.append(i)\n            if i == m1:\n                flag = True\n            continue\n        if i > t[-1] and i <= m1:\n            if i == m1:\n                flag = True\n            t.append(i)\n            if t[-1] - t[-2] > 1:\n                s = len(t) - 1\n        if flag and i - t[-1] == 1:\n            t.append(i)\n    maxi = max(t[s] - 1, n - t[-1])\n    if maxi > m1:\n        print(m1)\n    else:\n        print(maxi)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nt = inp()\nfor _ in range(t):\n    n = inp()\n    arr = inlt()\n    Sorted = [-1] * (n + 1)\n    for index in range(n):\n        Sorted[arr[index]] = index\n    left = (n + 1) // 2\n    right = (n + 2) // 2\n    while left > 0 and (left == right or (Sorted[left] < Sorted[left + 1] and Sorted[right - 1] < Sorted[right])):\n        left -= 1\n        right += 1\n    print(left)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input()) + 1\n    a = [0 for i in range(n)]\n    inp = list(map(int, input().split()))\n    for i in range(len(inp)):\n        a[inp[i]] = i\n    l = n // 2\n    r = (n + 1) // 2\n    while l > 0 and (l == r or (a[l + 1] > a[l] and a[r - 1] < a[r])):\n        l -= 1\n        r += 1\n    print((n - r + l + 1) // 2)", "for i in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    l = n // 2 + 1\n    for i in nums:\n        if i == l:\n            l += 1\n    nums.reverse()\n    r = 0\n    if n // 2 == 0:\n        r = n // 2\n    else:\n        r = n // 2 + 1\n    for i in nums:\n        if i == r:\n            r -= 1\n    print(min(max(n - l + 1, r), n // 2))", "for i in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    l = n // 2 + 1\n    for i in nums:\n        if i == l:\n            l += 1\n    nums.reverse()\n    r = 0\n    if n // 2 == 0:\n        r = n // 2\n    else:\n        r = n // 2 + 1\n    for i in nums:\n        if i == r:\n            r -= 1\n    print(min(max(n - l + 1, r), n // 2))", "def solve():\n    n = int(input())\n    v1 = list(map(int, input().split()))\n    v2 = [0] * (n + 1)\n    for x in v1:\n        v2[x] = v2[x - 1] + 1\n    for i in range(1, (n + 1) // 2 + 1):\n        ok = n - 2 * (i - 1)\n        if v2[n - i + 1] >= ok:\n            print(i - 1)\n            return\n    print((n + 1) // 2)\nt = int(input())\nfor _ in range(t):\n    solve()", "def main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n % 2 == 1:\n        m1 = (n + 1) // 2\n        i1 = arr.index(m1)\n        l = m1 - 1\n        r = m1 + 1\n        for i in range(i1):\n            if l == arr[i1 - i - 1]:\n                l = l - 1\n        for i in range(n - 1 - i1):\n            if r == arr[i1 + i + 1]:\n                r = r + 1\n        cnt = min(m1 - l, r - m1)\n        print((n - 2 * cnt + 1) // 2)\n    else:\n        m1 = n // 2\n        m2 = m1 + 1\n        i1 = arr.index(m1)\n        i2 = arr.index(m2)\n        if i1 > i2:\n            print(m1)\n            return\n        l = m1 - 1\n        r = m2 + 1\n        for i in range(i1):\n            if l == arr[i1 - i - 1]:\n                l = l - 1\n        for i in range(n - 1 - i2):\n            if r == arr[i2 + i + 1]:\n                r = r + 1\n        cnt = min(m1 - l, r - m2)\n        print((n - 2 * cnt) // 2)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    main()", "for _ in range(int(input())):\n    z = int(input())\n    t = list(map(int, input().split()))\n    q = [-1] * (z + 1)\n    for i in range(z):\n        q[t[i]] = i\n    l = (z + 1) // 2\n    r = (z + 2) // 2\n    while l > 0 and (l == r or (q[l] < q[l + 1] and q[r - 1] < q[r])):\n        l -= 1\n        r += 1\n    print(l)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = [-1] * (n + 1)\n    for i in range(n):\n        m[a[i]] = i\n    l = (n + 1) // 2\n    r = (n + 2) // 2\n    while l > 0 and (l == r or (m[l] < m[l + 1] and m[r - 1] < m[r])):\n        l -= 1\n        r += 1\n    print(l)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pos = [0] * (n + 1)\n    for i in range(n):\n        pos[a[i]] = i\n    i = (n + 1) // 2\n    j = (n + 2) // 2\n    while i > 0 and i == j or (pos[i] < pos[i + 1] and pos[j - 1] < pos[j]):\n        i -= 1\n        j += 1\n    print(i)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * (n + 1)\n    for i in range(n):\n        b[a[i]] = i\n    lr = (n + 1) // 2\n    hr = (n + 2) // 2\n    l = (n - 1) // 2\n    h = (n + 4) // 2\n    ans = 0\n    if b[lr] > b[hr]:\n        ans = 1\n    while l >= 1 and h <= n:\n        if b[l] < b[l + 1] <= b[h - 1] < b[h]:\n            pass\n        else:\n            ans += 1\n            b[l] = 0\n            b[h] = n - 1\n        l -= 1\n        h += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = [-1] * (n + 1)\n    for i in range(n):\n        m[a[i]] = i\n    l = (n + 1) // 2\n    r = (n + 2) // 2\n    while l > 0 and (l == r or (m[l] < m[l + 1] and m[r - 1] < m[r])):\n        l -= 1\n        r += 1\n    print(l)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = [-1] * (n + 1)\n    for i in range(n):\n        m[a[i]] = i\n    l = (n + 1) // 2\n    r = (n + 2) // 2\n    while l > 0 and (l == r or (m[l] < m[l + 1] and m[r - 1] < m[r])):\n        l -= 1\n        r += 1\n    print(l)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = [-1] * (n + 1)\n    for i in range(n):\n        m[a[i]] = i\n    l = (n + 1) // 2\n    r = (n + 2) // 2\n    while l > 0 and (l == r or (m[l] < m[l + 1] and m[r - 1] < m[r])):\n        l -= 1\n        r += 1\n    print(l)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    if n % 2 == 1:\n        mid = n // 2 + 1\n        mid_ind = p.index(mid)\n        (before, after) = (0, 0)\n        (tmp1, tmp2) = (mid - 1, mid + 1)\n        for i in range(mid_ind, -1, -1):\n            if p[i] == tmp1:\n                tmp1 -= 1\n                before += 1\n        for i in range(mid_ind, n):\n            if p[i] == tmp2:\n                tmp2 += 1\n                after += 1\n        res = n // 2 - min(before, after)\n        print(res)\n    else:\n        (mid1, mid2) = (n // 2, n // 2 + 1)\n        (mid1_ind, mid2_ind) = (p.index(mid1), p.index(mid2))\n        if mid2_ind < mid1_ind:\n            print(n // 2)\n            continue\n        (before, after) = (1, 1)\n        (tmp1, tmp2) = (mid1 - 1, mid2 + 1)\n        for i in range(mid1_ind - 1, -1, -1):\n            if p[i] == tmp1:\n                tmp1 -= 1\n                before += 1\n        for i in range(mid2_ind + 1, n):\n            if p[i] == tmp2:\n                tmp2 += 1\n                after += 1\n        res = n // 2 - min(before, after)\n        print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    m = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        my_set = set()\n        my_set.add(m[0])\n        positions = [0] * n\n        positions[0] = 1\n        for x in m[1:]:\n            if x - 1 in my_set:\n                positions[x - 1] = 1\n            my_set.add(x)\n        if n % 2 == 1 and positions[n // 2] == 0:\n            print(n // 2)\n            continue\n        if n % 2 == 0:\n            (i, j) = (n // 2, n // 2)\n        else:\n            (i, j) = (n // 2, n // 2 + 1)\n        while i > 0:\n            if positions[i] == 0 or positions[j] == 0:\n                break\n            i -= 1\n            j += 1\n        print(i)", "for _ in range(int(input())):\n    num = int(input())\n    X = list(map(int, input().split()))\n    m = [-1] * (num + 1)\n    for i in range(num):\n        m[X[i]] = i\n    L = (num + 1) // 2\n    R = (num + 2) // 2\n    while L > 0 and (L == R or (m[L] < m[L + 1] and m[R - 1] < m[R])):\n        L -= 1\n        R += 1\n    print(L)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pos = dict()\n    for i in range(n):\n        pos[a[i]] = i\n    cnt = n // 2\n    (l, r) = ((n + 2) // 2, (n + 1) // 2)\n    while 1 < l and r < n:\n        if pos[l - 1] < pos[l] and pos[r] < pos[r + 1]:\n            l -= 1\n            r += 1\n            cnt -= 1\n        else:\n            break\n    print(cnt)", "def getint():\n    return int(input())\n\ndef getfloat():\n    return float(input())\n\ndef getints():\n    return list(map(int, input().split()))\n\ndef getfloats():\n    return list(map(float, input().split()))\n\ndef getans(n, lis):\n    if n % 2 == 1:\n        indl = lis.index(n // 2 + 1)\n        indr = indl\n        tarl = n // 2\n        tarr = tarl + 2\n        found = 1\n    else:\n        for i in range(len(lis)):\n            if lis[i] == n // 2:\n                indl = i\n                break\n            if lis[i] == n // 2 + 1:\n                return n // 2\n        indr = lis.index(n // 2 + 1, indl)\n        tarl = n // 2 - 1\n        tarr = n // 2 + 2\n        found = 2\n    c1 = 0\n    c2 = 0\n    while indl >= 0:\n        if tarl == lis[indl]:\n            tarl -= 1\n            c1 += 1\n        indl -= 1\n    while indr < len(lis):\n        if tarr == lis[indr]:\n            tarr += 1\n            c2 += 1\n        indr += 1\n    return (n - found) // 2 - min(c1, c2)\nT = getint()\nfor i in range(T):\n    n = getint()\n    lis = getints()\n    print(getans(n, lis))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    m = math.ceil(n / 2)\n    l = -1\n    r = -1\n    c = False\n    moves = math.floor(n / 2)\n    if n % 2 == 1:\n        if n == 1:\n            moves = 0\n        elif p.index(m - 1) < p.index(m) and p.index(m + 1) > p.index(m):\n            l = m - 1\n            r = m + 1\n            moves -= 1\n            c = True\n    else:\n        l = n / 2\n        r = l + 1\n        if p.index(l) < p.index(r):\n            moves -= 1\n            c = True\n    if c and moves > 0:\n        r_count = 0\n        l_count = 0\n        for x in p[p.index(r):]:\n            if x - 1 == r:\n                r += 1\n                r_count += 1\n        v = p[:p.index(l) + 1]\n        v.reverse()\n        for x in v:\n            if x + 1 == l:\n                l -= 1\n                l_count += 1\n        moves -= min(l_count, r_count)\n    print(moves)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = [-1] * (n + 1)\n    for i in range(n):\n        m[a[i]] = i\n    l = (n + 1) // 2\n    r = (n + 2) // 2\n    while l > 0 and (l == r or (m[l] < m[l + 1] and m[r - 1] < m[r])):\n        l -= 1\n        r += 1\n    print(l)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = [-1] * (n + 1)\n    for i in range(n):\n        m[a[i]] = i\n    l = (n + 1) // 2\n    r = (n + 2) // 2\n    while l > 0 and (l == r or (m[l] < m[l + 1] and m[r - 1] < m[r])):\n        l -= 1\n        r += 1\n    print(l)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = [-1] * (n + 1)\n    for i in range(n):\n        m[a[i]] = i\n    l = (n + 1) // 2\n    r = (n + 2) // 2\n    while l > 0 and (l == r or (m[l] < m[l + 1] and m[r - 1] < m[r])):\n        l -= 1\n        r += 1\n    print(l)", "tests1 = int(input())\nfor _ in range(tests1):\n    n1 = int(input())\n    pos = [0] * n1\n    m = list(map(int, input().split()))\n    for (i, x) in enumerate(m, 1):\n        pos[x - 1] = i\n    if n1 % 2 == 0:\n        (i, j) = (n1 // 2 - 1, n1 // 2)\n    else:\n        (i, j) = (n1 // 2 - 1, n1 // 2 + 1)\n    while i > -1:\n        if pos[i] > pos[i + 1] or pos[j] < pos[j - 1]:\n            break\n        i -= 1\n        j += 1\n    print(i + 1)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    m = [-1] * (n + 1)\n    for i in range(n):\n        m[k[i]] = i\n    l = (n + 1) // 2\n    r = (n + 2) // 2\n    while l > 0 and (l == r or (m[l] < m[l + 1] and m[r - 1] < m[r])):\n        l -= 1\n        r += 1\n    print(l)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    m = math.ceil(n / 2)\n    m_it = -1\n    for i in range(len(p)):\n        if p[i] == m:\n            m_it = i\n    m_i = m + 1\n    c_i = 0\n    for i in range(m_it, len(p)):\n        if p[i] == m_i:\n            c_i += 1\n            m_i += 1\n    m_d = m - 1\n    c_d = 0\n    for i in range(m_it, -1, -1):\n        if p[i] == m_d:\n            c_d += 1\n            m_d -= 1\n    c_i = n - m - c_i\n    c_d = m - 1 - c_d\n    print(min(c_i, c_d) + abs(c_i - c_d))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pos = [0] * (n + 1)\n    for i in range(n):\n        pos[a[i]] = i\n    i = (n + 1) // 2\n    j = (n + 2) // 2\n    while i > 0 and i == j or (pos[i] < pos[i + 1] and pos[j - 1] < pos[j]):\n        i -= 1\n        j += 1\n    print(i)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pos = [0] * (n + 1)\n    for i in range(n):\n        pos[a[i]] = i\n    i = (n + 1) // 2\n    j = (n + 2) // 2\n    while i > 0 and i == j or (pos[i] < pos[i + 1] and pos[j - 1] < pos[j]):\n        i -= 1\n        j += 1\n    print(i)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pos = [0] * (n + 1)\n    for i in range(n):\n        pos[a[i]] = i\n    i = (n + 1) // 2\n    j = (n + 2) // 2\n    while i > 0 and i == j or (pos[i] < pos[i + 1] and pos[j - 1] < pos[j]):\n        i -= 1\n        j += 1\n    print(i)", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    pos = [0] * (n + 1)\n    for i in range(n):\n        pos[p[i]] = i\n    l = (n + 1) // 2\n    r = (n + 2) // 2\n    while l > 0 and (l == r or (pos[l] < pos[l + 1] and pos[r - 1] < pos[r])):\n        l -= 1\n        r += 1\n    print((n - r + l + 1) // 2)", "def f(n, l):\n    if n % 2 == 0:\n        max = n // 2 + 1\n        max_new = max\n        min_new = max\n        ind = l.index(max)\n        for i in range(ind + 1, n):\n            if l[i] == max_new + 1:\n                max_new = max_new + 1\n        for j in range(ind - 1, -1, -1):\n            r = l[j]\n            if l[j] == min_new - 1:\n                min_new = min_new - 1\n        k = min(max - min_new, max_new - max + 1)\n        print(n // 2 - k)\n    else:\n        max = n // 2 + 1\n        max_new = max\n        min_new = max\n        ind = l.index(max)\n        for i in range(ind + 1, n):\n            if l[i] == max_new + 1:\n                max_new = max_new + 1\n        for j in range(ind - 1, -1, -1):\n            r = l[j]\n            if l[j] == min_new - 1:\n                min_new = min_new - 1\n        k = min(max_new - max, max - min_new)\n        print(n // 2 - k)\nfor t in range(int(input())):\n    inp = int(input())\n    inp1 = list(map(int, input().split(' ')))\n    f(inp, inp1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    pos = [0] * (n + 2)\n    pos[-1] = n + 1\n    for i in range(n):\n        pos[a[i]] = i + 1\n    res = (n + 1) // 2\n    (l, r) = ((n + 1) // 2, (n + 2) // 2)\n    while l > 0 and (l == r or (pos[l] < pos[l + 1] and pos[r - 1] < pos[r])):\n        r += 1\n        l -= 1\n        res -= 1\n    print(res)", "import math\nk = int(input())\nres = []\nwhile k > 0:\n    n = int(input())\n    temp = input().split(' ')\n    arr = []\n    for num in temp:\n        arr.append(int(num))\n    total = math.ceil(n / 2)\n    left_mid = 0\n    right_mid = 0\n    (left, right) = (-1, -1)\n    if n % 2 == 0:\n        left_mid = int(n / 2)\n        right_mid = left_mid + 1\n    else:\n        left_mid = int(n / 2) + 1\n        right_mid = left_mid\n    for i in range(len(arr)):\n        if arr[i] == left_mid:\n            left = i\n        if arr[i] == right_mid:\n            right = i\n    if left <= right:\n        total -= 1\n        left_arrange = 0\n        left_next = left_mid\n        while left >= 0:\n            if arr[left] == left_next:\n                left_next -= 1\n            left -= 1\n        right_arrange = 0\n        right_next = right_mid\n        while right < n:\n            if arr[right] == right_next:\n                right_next += 1\n            right += 1\n        minus = min(left_mid - left_next - 1, right_next - right_mid - 1)\n        total -= minus\n    res.append(total)\n    k -= 1\nfor x in res:\n    print(x)", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    arr = [0] * (n + 1)\n    for i in range(n):\n        arr[p[i]] = i\n    l = (n + 1) // 2\n    r = (n + 2) // 2\n    while l > 0 and (l == r or (arr[l] < arr[l + 1] and arr[r - 1] < arr[r])):\n        l -= 1\n        r += 1\n    print(l)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    pos = [0] * n\n    m = list(map(int, input().split()))\n    for (i, x) in enumerate(m, 1):\n        pos[x - 1] = i\n    if n % 2 == 0:\n        (i, j) = (n // 2 - 1, n // 2)\n    else:\n        (i, j) = (n // 2 - 1, n // 2 + 1)\n    while i > -1:\n        if pos[i] > pos[i + 1] or pos[j] < pos[j - 1]:\n            break\n        i -= 1\n        j += 1\n    print(i + 1)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = [-1] * (n + 1)\n    for i in range(n):\n        m[a[i]] = i\n    l = (n + 1) // 2\n    r = (n + 2) // 2\n    while l > 0 and (l == r or (m[l] < m[l + 1] and m[r - 1] < m[r])):\n        l -= 1\n        r += 1\n    print(l)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = [-1] * (n + 1)\n    for i in range(n):\n        m[a[i]] = i\n    l = (n + 1) // 2\n    r = (n + 2) // 2\n    while l > 0 and (l == r or (m[l] < m[l + 1] and m[r - 1] < m[r])):\n        l -= 1\n        r += 1\n    print(l)", "for _ in range(int(input())):\n    num = int(input())\n    X = list(map(int, input().split()))\n    m = [-1] * (num + 1)\n    for i in range(num):\n        m[X[i]] = i\n    L = (num + 1) // 2\n    R = (num + 2) // 2\n    while L > 0 and (L == R or (m[L] < m[L + 1] and m[R - 1] < m[R])):\n        L -= 1\n        R += 1\n    print(L)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = [-1] * (n + 1)\n    for i in range(n):\n        m[a[i]] = i\n    l = (n + 1) // 2\n    r = (n + 2) // 2\n    while l > 0 and (l == r or (m[l] < m[l + 1] and m[r - 1] < m[r])):\n        l -= 1\n        r += 1\n    print(l)", "def isSorted(arr, ignore, idx1, idx2):\n    j = idx1\n    for i in range(idx1 + 1, idx2 + 1):\n        if i in ignore:\n            continue\n        if arr[j] + 1 == arr[i]:\n            j = i\n        else:\n            return False\n    return True\n\ndef main(arr):\n    numToIdx = {}\n    for (i, num) in enumerate(arr):\n        numToIdx[num] = i\n    (n1, n2) = (1, len(arr))\n    n = len(arr)\n    ans = 0\n    seen = set()\n    while n > 1:\n        idx1 = numToIdx[n1]\n        idx2 = numToIdx[n2]\n        if idx1 < idx2 and isSorted(arr, seen, idx1, idx2):\n            return ans\n        seen.add(idx1)\n        seen.add(idx2)\n        n1 += 1\n        n2 -= 1\n        ans += 1\n        n -= 2\n    return ans\ni = int(input())\nfor _ in range(i):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(main(arr))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    m = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        my_set = set()\n        my_set.add(m[0])\n        positions = [0] * n\n        positions[0] = 1\n        for x in m[1:]:\n            if x - 1 in my_set:\n                positions[x - 1] = 1\n            my_set.add(x)\n        if n % 2 == 1 and positions[n // 2] == 0:\n            print(n // 2)\n            continue\n        if n % 2 == 0:\n            (i, j) = (n // 2, n // 2)\n        else:\n            (i, j) = (n // 2, n // 2 + 1)\n        while i > 0:\n            if positions[i] == 0 or positions[j] == 0:\n                break\n            i -= 1\n            j += 1\n        print(i)", "from collections import defaultdict\n\ndef d():\n    return 0\nfor __ in range(int(input())):\n    n = int(input())\n    permutation = list(map(int, input().split()))\n    s = sorted(permutation)\n    dict = defaultdict(d)\n    if s == permutation:\n        print(0)\n    else:\n        for i in range(len(permutation)):\n            dict[permutation[i]] = i\n        for k in range(1, n):\n            flag = True\n            for m in range(k + 1, n - k):\n                if dict[m] < dict[m + 1]:\n                    continue\n                else:\n                    flag = False\n                    break\n            if flag:\n                print(k)\n                break", "from collections import defaultdict\nimport math\nfor j in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[l[i]] = i\n    if n % 2 == 0:\n        mid = n // 2\n        i = 0\n        dif = 1\n    else:\n        mid = n // 2 + 1\n        i = 1\n        dif = 0\n    count = 0\n    while i < mid:\n        s = mid - i\n        e = mid + i + dif\n        if d[s] < d[e] and d[s] < d[s + 1] and (d[e] > d[e - 1]):\n            count += 1\n        else:\n            break\n        i += 1\n    print(n // 2 - count)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    mp = {}\n    for i in range(len(arr)):\n        mp[arr[i]] = i\n    ans = (n + 1) // 2\n    (prel, prer) = (mp[(n + 1) // 2], mp[n + 1 - (n + 1) // 2])\n    for i in range((n + 1) // 2, 0, -1):\n        l = mp[i]\n        r = mp[n + 1 - i]\n        if l <= r and l <= prel and (r >= prer):\n            ans -= 1\n            prel = l\n            prer = r\n            continue\n        else:\n            break\n    print(ans)", "t = int(input())\nfor t1 in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    dict = {}\n    for i in range(n):\n        dict[p[i]] = i + 1\n    if n % 2 == 1:\n        mid = (n + 1) // 2\n        tmp = dict[mid]\n        rcount = 0\n        while mid < n and tmp < dict[mid + 1]:\n            tmp = dict[mid + 1]\n            mid += 1\n            rcount += 1\n        mid = (n + 1) // 2\n        tmp = dict[mid]\n        lcount = 0\n        while mid > 1 and tmp > dict[mid - 1]:\n            tmp = dict[mid - 1]\n            lcount += 1\n            mid -= 1\n        ans = n - 2 * min(lcount, rcount) - 1\n        print((ans + 1) // 2)\n        continue\n    else:\n        lmid = n // 2\n        rmid = lmid + 1\n        if dict[lmid] < dict[rmid]:\n            rcount = 0\n            lcount = 0\n            tmp = dict[rmid]\n            while rmid < n and tmp < dict[rmid + 1]:\n                tmp = dict[rmid + 1]\n                rmid += 1\n                rcount += 1\n            tmp = dict[lmid]\n            while lmid > 1 and tmp > dict[lmid - 1]:\n                tmp = dict[lmid - 1]\n                lmid -= 1\n                lcount += 1\n            ans = n - 2 * min(lcount, rcount) - 2\n            print((ans + 1) // 2)\n            continue\n        else:\n            print((n + 1) // 2)\n            continue", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    tab = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n        t -= 1\n        continue\n    idx = [0] * n\n    for i in range(n):\n        idx[tab[i] - 1] += i\n    m = n // 2\n    cont = False\n    if n % 2 == 0:\n        a = n // 2\n        b = a + 1\n        if idx[a - 1] < idx[b - 1]:\n            m -= 1\n            old_a = a\n            old_b = b\n            a = a - 1\n            b = b + 1\n            cont = True\n    else:\n        a = n // 2\n        b = a + 1\n        c = b + 1\n        if idx[a - 1] < idx[b - 1] and idx[b - 1] < idx[c - 1]:\n            m -= 1\n            old_a = a\n            old_b = c\n            a = a - 1\n            b = c + 1\n            cont = True\n    if cont:\n        while a >= 1 and b <= n and (idx[a - 1] < idx[old_a - 1]) and (idx[b - 1] > idx[old_b - 1]):\n            m -= 1\n            old_a = a\n            old_b = b\n            a = a - 1\n            b = b + 1\n    print(m)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    li = list(map(int, input().split()))\n    placement_li = [0 for i in range(n)]\n    for j in range(1, n + 1):\n        placement_li[li[j - 1] - 1] = j\n    total = int((n + 1) / 2)\n    if n == 1:\n        print(0)\n        continue\n    elif n % 2 == 0:\n        left = int(n / 2)\n        right = int(n / 2) + 1\n    else:\n        left = right = int((n + 1) / 2)\n    while left >= 1 and (left == right or (placement_li[left - 1] < placement_li[left] and placement_li[right - 2] < placement_li[right - 1])):\n        left -= 1\n        right += 1\n        total -= 1\n    print(total)", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    p = [int(i) for i in input().split()]\n    pos = [0 for i in range(n)]\n    for (it, el) in enumerate(p):\n        pos[el - 1] = it\n    ans = (n + 1) // 2\n    l = (n + 1) // 2 - 1\n    r = (n + 2) // 2 - 1\n    while l >= 0 and (l == r or (pos[l] < pos[l + 1] and pos[r] > pos[r - 1])):\n        ans -= 1\n        l -= 1\n        r += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [-1]\n    d = dict()\n    a = a + list(map(int, input().split()))\n    for i in range(1, n + 1):\n        d[a[i]] = i\n    bef = n // 2\n    aft = (n + 1) // 2 + 1\n    condtn = False\n    while not condtn and bef >= 1 and (aft <= n):\n        if d[bef] > d[aft]:\n            condtn = True\n            break\n        if bef != aft - 1:\n            if d[bef] > d[bef + 1] or d[aft] < d[aft - 1]:\n                condtn = True\n                break\n        bef -= 1\n        aft += 1\n    print(bef)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    pos = []\n    for i in range(n + 1):\n        pos.append(0)\n    arr = [int(x) for x in input().split()]\n    arr = [0] + arr\n    for i in range(1, n + 1):\n        pos[arr[i]] = i\n    if n % 2 == 0:\n        middle = n // 2\n        ans = 0\n        for i in range(middle):\n            if pos[middle - i] < pos[middle + 1 + i]:\n                if i == 0:\n                    continue\n                if pos[middle - i] < pos[middle - i + 1] and pos[middle + i + 1] > pos[middle + i]:\n                    continue\n                else:\n                    ans = middle - i\n                    break\n            else:\n                ans = middle - i\n                break\n        print(ans)\n    else:\n        if n == 1:\n            print(0)\n            continue\n        middle = n // 2 + 1\n        if pos[middle - 1] < pos[middle] < pos[middle + 1]:\n            pass\n        else:\n            ans = middle - 1\n            print(ans)\n            continue\n        ans = 0\n        for i in range(2, middle, 1):\n            if pos[middle - i] < pos[middle + i]:\n                if pos[middle - i] < pos[middle - i + 1] and pos[middle + i] > pos[middle + i - 1]:\n                    continue\n                else:\n                    ans = middle - i\n                    break\n            else:\n                ans = middle - i\n                break\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    idx = [-1 for _ in range(n + 1)]\n    final = 0\n    for (x, i) in enumerate(arr):\n        idx[i] = x\n    for i in range(1, n):\n        if idx[i] > idx[i + 1]:\n            final = max(final, min(i, n - i))\n    print(final)", "def freq(arr):\n    n = len(arr)\n    fr = {i: -1 for i in range(n)}\n    for i in range(n):\n        fr[arr[i] - 1] = i\n    return fr\n\ndef sol():\n    n = int(input())\n    p = [int(i) for i in input().split()]\n    a = [i - 1 for i in p]\n    mid = n // 2\n    fr = freq(p)\n    (ahead, back) = (0, 0)\n    fg = mid\n    for i in range(fr[mid], n):\n        if a[i] == fg + 1:\n            ahead += 1\n            fg = a[i]\n    fg = mid\n    for i in range(fr[mid] - 1, -1, -1):\n        if a[i] == fg - 1:\n            fg = a[i]\n            back += 1\n    if n % 2 != 0:\n        print(n // 2 - min(ahead, back))\n    else:\n        print(n // 2 - min(ahead + 1, back))\nt = int(input())\nfor i in range(t):\n    sol()", "from collections import defaultdict\n\ndef N():\n    return int(input())\n\ndef A():\n    return [int(x) for x in input().split()]\n\ndef S():\n    return input()\nfor _ in range(N()):\n    n = N()\n    f = True\n    d = defaultdict(int)\n    if 'codeforces' == 28226329:\n        print('Tanmay')\n    a = A()\n    if n == 1:\n        print(0)\n        continue\n    for i in range(n):\n        if i + 1 != a[i]:\n            f = False\n        d[a[i]] = i\n    if f:\n        print(0)\n        continue\n    l = c = (n + 1) // 2\n    r = l\n    if n % 2 == 0:\n        r += 1\n    while l > 0 and r <= n and (d[r] >= d[l]):\n        r += 1\n        c -= 1\n        l -= 1\n        if d[l] >= d[l + 1] or d[r] <= d[r - 1]:\n            break\n    print(c)", "def min_max_sort(n, p):\n    k = n >> 1\n    while k and p[k] < p[k + 1] and (p[n - k + 1] > p[n - k]):\n        k -= 1\n    print(k)\nt = eval(input())\nfor _ in range(t):\n    n = eval(input())\n    p = [0] * (n + 1)\n    x = list(map(int, input().split()))\n    for i in range(1, n + 1):\n        p[x[i - 1]] = i\n    min_max_sort(n, p)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    nums = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    ans = n // 2\n    for x in nums:\n        dp[x] = dp[x - 1] + 1\n        ans = min(ans, max(x - dp[x], n - x))\n    print(ans)", "a = int(input())\nwhile a:\n    a -= 1\n    n = int(input())\n    nums = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    ans = n // 2\n    for x in nums:\n        dp[x] = dp[x - 1] + 1\n        ans = min(ans, max(x - dp[x], n - x))\n    print(ans)", "a = int(input())\nwhile a:\n    a -= 1\n    n = int(input())\n    nums = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    ans = n // 2\n    for x in nums:\n        dp[x] = dp[x - 1] + 1\n        ans = min(ans, max(x - dp[x], n - x))\n    print(ans)", "a = int(input())\nwhile a:\n    a -= 1\n    n = int(input())\n    nums = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    ans = n // 2\n    for x in nums:\n        dp[x] = dp[x - 1] + 1\n        ans = min(ans, max(x - dp[x], n - x))\n    print(ans)", "a = int(input())\nwhile a:\n    a -= 1\n    n = int(input())\n    nums = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    ans = n // 2\n    for x in nums:\n        dp[x] = dp[x - 1] + 1\n        ans = min(ans, max(x - dp[x], n - x))\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    a = [(i, int(c)) for (i, c) in enumerate(input().split())]\n    a.sort(key=lambda x: x[1])\n    ans = n\n    start = 0\n    for i in range(1, n):\n        if a[i][0] < a[i - 1][0]:\n            ans = min(ans, max(start, n - i))\n            start = i\n    ans = min(ans, max(start, 0))\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    nums = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    ans = n // 2\n    for x in nums:\n        dp[x] = dp[x - 1] + 1\n        ans = min(ans, max(x - dp[x], n - x))\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    cont_memo = {arr[0]: 1}\n    index = {i: idx for (idx, i) in enumerate(arr)}\n    index[0] = float('inf')\n    for idx in range(1, n):\n        i = arr[idx]\n        cont_memo[i] = 1\n        if index[i - 1] < index[i]:\n            cont_memo[i] += cont_memo[i - 1]\n    res = float('inf')\n    for i in cont_memo:\n        last = n - i\n        first = i - cont_memo[i]\n        res = min(res, max(last, first))\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = [0] * (n + 1)\n    for i in range(n):\n        p[a[i]] = i\n    k = [0] * (n + 1)\n    k[n] = 1\n    for i in range(n - 1, 0, -1):\n        if p[i] < p[i + 1]:\n            k[i] = k[i + 1] + 1\n        else:\n            k[i] = 1\n    res = n\n    for i in range(1, n + 1):\n        res = min(res, max(i - 1, n - (i + k[i] - 1)))\n    print(res)", "import sys\nimport math\nimport itertools\n\ndef ok(a, x):\n    b = []\n    n = len(a)\n    for i in a:\n        if i > x and i < n - x + 1:\n            b.append(i)\n    return b == sorted(b)\n\ndef solution():\n    n = int(input())\n    a = list(map(int, input().split()))\n    r = n // 2\n    l = -1\n    while r - l > 1:\n        m = (r + l) // 2\n        if ok(a, m):\n            r = m\n        else:\n            l = m\n    print(r)\nt = int(input())\nfor i in range(t):\n    solution()", "import sys\n\ndef check(a):\n    holder = []\n    for i in numbers:\n        if i > a and i <= n - a:\n            holder.append(i)\n    if holder == []:\n        return True\n    return all((a <= b for (a, b) in zip(holder, holder[1:])))\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    numbers = [*map(int, input().split())]\n    left = 0\n    right = n // 2 + 1\n    while left < right:\n        mid = (left + right) // 2\n        if check(mid):\n            right = mid\n        else:\n            left = mid + 1\n    print(left)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = 0\n    r = n // 2\n    while l < r:\n        mid = (l + r) // 2\n        ele = -1\n        flag = False\n        for i in range(n):\n            if a[i] > mid and a[i] < n - mid + 1:\n                if a[i] <= ele:\n                    flag = True\n                    break\n                else:\n                    ele = a[i]\n        if l == r - 1:\n            if flag == False:\n                print(l)\n                return\n            else:\n                print(r)\n                return\n        elif flag == False:\n            r = mid\n        else:\n            l = mid + 1\n    print(l)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = 0\n    r = n // 2\n    while l < r:\n        mid = (l + r) // 2\n        ele = -1\n        flag = False\n        for i in range(n):\n            if a[i] > mid and a[i] < n - mid + 1:\n                if a[i] <= ele:\n                    flag = True\n                    break\n                else:\n                    ele = a[i]\n        if l == r - 1:\n            if flag == False:\n                print(l)\n                return\n            else:\n                print(r)\n                return\n        elif flag == False:\n            r = mid\n        else:\n            l = mid + 1\n    print(l)\nt = int(input())\nfor _ in range(t):\n    solve()", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = 0\n    r = n // 2\n    while l < r:\n        mid = (l + r) // 2\n        ele = -1\n        flag = False\n        for i in range(n):\n            if a[i] > mid and a[i] < n - mid + 1:\n                if a[i] <= ele:\n                    flag = True\n                    break\n                else:\n                    ele = a[i]\n        if l == r - 1:\n            if flag == False:\n                print(l)\n                return\n            else:\n                print(r)\n                return\n        elif flag == False:\n            r = mid\n        else:\n            l = mid + 1\n    print(l)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\n\ndef check(n, data):\n    if n * 2 + 1 >= len(data):\n        return True\n    order = dict()\n    for (idx, el) in enumerate(data):\n        order[el] = idx\n    begin = n + 1\n    end = len(data) - n\n    for el in range(begin, end):\n        if order[el] > order[el + 1]:\n            return False\n    return True\n\ndef solution():\n    n = int(input())\n    data = list(map(int, input().split()))\n    left = -1\n    right = n\n    while right - left > 1:\n        mid = (left + right + 1) // 2\n        if check(mid, data):\n            right = mid\n        else:\n            left = mid\n    print(right)\nt = int(input())\nfor _ in range(t):\n    solution()", "import sys\nt = int(sys.stdin.readline())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    ans = n // 2\n    l = 0\n    r = n // 2 + 1\n    while True:\n        if r < l:\n            break\n        mid = (l + r) // 2\n        vec = [0] * (n + 1)\n        st = mid + 1\n        en = n - mid\n        er = 0\n        for j in lst:\n            if j > st and j <= en and (vec[j - 1] == 0):\n                er += 1\n                break\n            vec[j] += 1\n        if er > 0:\n            l = mid + 1\n        else:\n            r = mid - 1\n            ans = min(ans, mid)\n    print(ans)", "def sor(a):\n    if len(a) == 0:\n        return True\n    last = a[0] - 1\n    for j in a:\n        if j != last + 1:\n            return False\n        last = j\n    return True\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    (*a,) = map(int, input().split())\n    ans = 0\n    nado = True\n    ma = n + 1\n    mi = 0\n    L = 0\n    R = n // 2 + n % 2\n    while L + 1 < R:\n        x = (L + R) // 2\n        b = []\n        for j in a:\n            if mi + x < j < ma - x:\n                b += [j]\n        if not sor(b):\n            L = x\n        else:\n            R = x\n    x = L\n    b = []\n    for j in a:\n        if mi + x < j < ma - x:\n            b += [j]\n    if not sor(b):\n        L += 1\n    print(L)"]