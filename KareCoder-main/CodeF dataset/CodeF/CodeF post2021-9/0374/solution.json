["def solveodd(a, n):\n    ans = 0\n    for j in range(int((n + 1) / 2)):\n        for k in range(int((n - 1) / 2)):\n            b = 0\n            if a[j][k] == '1':\n                b += 1\n            if a[n - 1 - k][j] == '1':\n                b += 1\n            if a[n - 1 - j][n - 1 - k] == '1':\n                b += 1\n            if a[k][n - 1 - j] == '1':\n                b += 1\n            if b == 1 or b == 3:\n                ans += 1\n            elif b == 2:\n                ans += 2\n    return ans\n\ndef solveeven(a, n):\n    ans = 0\n    for j in range(int(n / 2)):\n        for k in range(int(n / 2)):\n            b = 0\n            if a[j][k] == '1':\n                b += 1\n            if a[n - 1 - k][j] == '1':\n                b += 1\n            if a[n - 1 - j][n - 1 - k] == '1':\n                b += 1\n            if a[k][n - 1 - j] == '1':\n                b += 1\n            if b == 1 or b == 3:\n                ans += 1\n            elif b == 2:\n                ans += 2\n    return ans\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    for j in range(n):\n        a.append(input())\n    if n % 2 == 1:\n        print(solveodd(a, n))\n    else:\n        print(solveeven(a, n))", "def check(a1, a2, a3, a4):\n    k = 0\n    for i in range(len(a1)):\n        S = [a1[i], a2[i], a3[i], a4[i]]\n        k += min(S.count('0'), S.count('1'))\n    return k\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    M = []\n    for _ in range(n):\n        M.append(list(input()))\n    m = 0\n    (x, y) = (0, n)\n    while x < y - 1:\n        m += check(M[x][x:y - 1], M[y - 1][x + 1:y][::-1], [M[i][y - 1] for i in range(x, y - 1)], [M[i][x] for i in range(x + 1, y)][::-1])\n        x += 1\n        y -= 1\n    print(m)", "def main():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        arr = []\n        for _ in range(N):\n            arr.append(list(input()))\n        ans = 0\n        for i in range(N // 2 + 1):\n            k = 0\n            for j in range(i, N - i - 1):\n                countZeroes = 0\n                if arr[i][j] == '0':\n                    countZeroes += 1\n                if arr[i + k][N - i - 1] == '0':\n                    countZeroes += 1\n                if arr[N - i - 1][N - j - 1] == '0':\n                    countZeroes += 1\n                if arr[N - j - 1][i] == '0':\n                    countZeroes += 1\n                countOnes = 4 - countZeroes\n                if countZeroes <= countOnes:\n                    ans += countZeroes\n                else:\n                    ans += countOnes\n                k += 1\n        print(ans)\nmain()", "def solve():\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(input()))\n    if n == 1:\n        print(0)\n    else:\n        a = 0\n        b = n - 1\n        ans = 0\n        for i in range(n // 2):\n            for j in range(a, b):\n                one = 0\n                zero = 0\n                if l[a][j] == '0':\n                    zero += 1\n                else:\n                    one += 1\n                w = n - a - 1\n                if l[j][w] == '0':\n                    zero += 1\n                else:\n                    one += 1\n                if l[w][n - j - 1] == '0':\n                    zero += 1\n                else:\n                    one += 1\n                if l[n - j - 1][n - w - 1] == '0':\n                    zero += 1\n                else:\n                    one += 1\n                if one < zero:\n                    ans += one\n                else:\n                    ans += zero\n            a += 1\n            b -= 1\n        print(ans)\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "def main():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        arr = []\n        for _ in range(N):\n            arr.append(list(input()))\n        letter = 97\n        ans = 0\n        for i in range(N // 2 + 1):\n            k = 0\n            for j in range(i, N - i - 1):\n                countZeroes = 0\n                if arr[i][j] == '0':\n                    countZeroes += 1\n                if arr[i + k][N - i - 1] == '0':\n                    countZeroes += 1\n                if arr[N - i - 1][N - j - 1] == '0':\n                    countZeroes += 1\n                if arr[N - j - 1][i] == '0':\n                    countZeroes += 1\n                countOnes = 4 - countZeroes\n                if countZeroes <= countOnes:\n                    ans += countZeroes\n                else:\n                    ans += countOnes\n                k += 1\n        print(ans)\nmain()", "def main():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        arr = []\n        for _ in range(N):\n            arr.append(list(input()))\n        letter = 97\n        ans = 0\n        for i in range(N // 2 + 1):\n            k = 0\n            for j in range(i, N - i - 1):\n                countZeroes = 0\n                if arr[i][j] == '0':\n                    countZeroes += 1\n                if arr[i + k][N - i - 1] == '0':\n                    countZeroes += 1\n                if arr[N - i - 1][N - j - 1] == '0':\n                    countZeroes += 1\n                if arr[N - j - 1][i] == '0':\n                    countZeroes += 1\n                countOnes = 4 - countZeroes\n                if countZeroes <= countOnes:\n                    ans += countZeroes\n                else:\n                    ans += countOnes\n                k += 1\n        print(ans)\nmain()", "def solve_task():\n    grid_size = int(input())\n    grid = [input() for _ in range(grid_size)]\n    change_cnt = 0\n    for offset in range(grid_size // 2):\n        (top_left_row, top_left_col) = (offset, offset)\n        (top_right_row, top_right_col) = (offset, grid_size - offset - 1)\n        (bottom_right_row, bottom_right_col) = (grid_size - offset - 1, grid_size - offset - 1)\n        (bottom_left_row, bottom_left_col) = (grid_size - offset - 1, offset)\n        for _ in range(grid_size - offset * 2 - 1):\n            top_left_col += 1\n            top_right_row += 1\n            bottom_right_col -= 1\n            bottom_left_row -= 1\n            selected_cells = [grid[top_left_row][top_left_col], grid[top_right_row][top_right_col], grid[bottom_right_row][bottom_right_col], grid[bottom_left_row][bottom_left_col]]\n            zeroes = selected_cells.count('0')\n            ones = selected_cells.count('1')\n            change_cnt += 4 - max(zeroes, ones)\n    return change_cnt\ntestcases_cnt = int(input())\nwhile testcases_cnt:\n    print(solve_task())\n    testcases_cnt -= 1", "def simresh():\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(input())\n    ans = 0\n    for i in range(n // 2):\n        for j in range((n + 1) // 2):\n            k = l[i][j] + l[n - 1 - i][n - 1 - j] + l[j][n - 1 - i] + l[n - 1 - j][i]\n            u = k.count('1')\n            if u > 2:\n                u = 4 - u\n            ans += u\n    print(ans)\n    return\nn = int(input())\nfor i in range(n):\n    simresh()", "ans = []\ntest_cases = int(input(''))\nfor i in range(test_cases):\n    dim = int(input(''))\n    mat = []\n    for j in range(dim):\n        mat.append(list(input('')))\n    if dim == 1:\n        ans.append(0)\n        continue\n    elif dim == 2:\n        count = (mat[0].count('1') + mat[1].count('1')) % 4\n        if count == 3:\n            ans.append(1)\n        else:\n            ans.append(count)\n        continue\n    elif dim % 2 == 0:\n        (a, b) = (dim // 2, dim // 2)\n    else:\n        (a, b) = (dim // 2 + 1, dim // 2)\n    count = 0\n    for r in range(a):\n        for c in range(b):\n            temp_count = [mat[r][c], mat[dim - 1 - c][r], mat[dim - 1 - r][dim - 1 - c], mat[c][dim - 1 - r]].count('1') % 4\n            if temp_count == 3:\n                count += 1\n            else:\n                count += temp_count\n    ans.append(count)\nfor b in ans:\n    print(b)", "from math import ceil\ntest = int(input())\nwhile test:\n    n = int(input())\n    k = n\n    a = [input() for _ in range(n)]\n    ans = 0\n    n -= 1\n    row = 0\n    for j in range(ceil(n / 2)):\n        for i in range(row, k - 1):\n            ele = [a[row][i], a[n - row][n - i], a[i][n - row], a[n - i][row]]\n            zero = ele.count('0')\n            one = 4 - zero\n            if zero == 4 or one == 4:\n                ans += 0\n            elif zero == 3 or one == 3:\n                ans += 1\n            elif zero == 2 or one == 2:\n                ans += 2\n        row += 1\n        k -= 1\n    print(ans)\n    test -= 1", "def solve():\n    ans = 0\n    for i in range(n // 2):\n        for j in range(i, n - i - 1):\n            ones = 0\n            zeros = 0\n            if grid[i][j] == '0':\n                zeros += 1\n            else:\n                ones += 1\n            if grid[j][n - 1 - i] == '0':\n                zeros += 1\n            else:\n                ones += 1\n            if grid[n - 1 - i][n - 1 - j] == '0':\n                zeros += 1\n            else:\n                ones += 1\n            if grid[n - 1 - j][i] == '0':\n                zeros += 1\n            else:\n                ones += 1\n            ans += min(ones, zeros)\n    return ans\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    grid = []\n    for i in range(n):\n        grid.append(input())\n    ans = solve()\n    print(ans)", "def main():\n    for t in range(int(input())):\n        n = int(input())\n        g = [''] + ['0' + input() for i in range(n)]\n        ans = 0\n        for i in range(1, n // 2 + 1):\n            for j in range(1, n // 2 + 1):\n                (x, y) = (0, 0)\n                if g[i][j] == '0':\n                    x += 1\n                else:\n                    y += 1\n                if g[j][n - i + 1] == '0':\n                    x += 1\n                else:\n                    y += 1\n                if g[n - i + 1][n - j + 1] == '0':\n                    x += 1\n                else:\n                    y += 1\n                if g[n - j + 1][i] == '0':\n                    x += 1\n                else:\n                    y += 1\n                ans += min(x, y)\n        if n % 2 == 1:\n            for i in range(1, n // 2 + 1):\n                (x, y) = (0, 0)\n                if g[i][n // 2 + 1] == '0':\n                    x += 1\n                else:\n                    y += 1\n                if g[n // 2 + 1][n - i + 1] == '0':\n                    x += 1\n                else:\n                    y += 1\n                if g[n - i + 1][n // 2 + 1] == '0':\n                    x += 1\n                else:\n                    y += 1\n                if g[n // 2 + 1][i] == '0':\n                    x += 1\n                else:\n                    y += 1\n                ans += min(x, y)\n        print(ans)\nmain()", "from typing import List\nimport math\n\ndef get_input() -> List[List]:\n    n = int(input())\n    ret = []\n    for i in range(n):\n        c = int(input())\n        case = []\n        for j in range(c):\n            li = str(input())\n            case.append(li)\n        ret.append(case)\n    return ret\n\ndef get_mirror_elems(case):\n    n = len(case)\n    sub_n = math.ceil(n / 2)\n    sub_i = sub_n\n    if n % 2 != 0:\n        sub_i = sub_n - 1\n    elem_list = []\n    for i in range(sub_i):\n        for j in range(sub_n):\n            elem_list.append([case[i][j], case[n - i - 1][n - j - 1], case[n - j - 1][i], case[j][n - i - 1]])\n    return elem_list\n\ndef get_flip_number_of_list(li):\n    n0 = li.count('0')\n    n1 = len(li) - n0\n    return min(n1, n0)\n\ndef solve_one_case(case):\n    elem_lists = get_mirror_elems(case)\n    slip_count = 0\n    for li in elem_lists:\n        slip_count += get_flip_number_of_list(li)\n    return slip_count\n\ndef print_int(ans) -> None:\n    print(ans)\n\ndef print_list(ans: list) -> None:\n    for x in ans:\n        print(x)\ncases = get_input()\nfor case in cases:\n    result = solve_one_case(case)\n    print(result)", "def calc(top, bottom, left, right):\n    tmp_out = 0\n    for x in range(len(top) - 1):\n        tmp_arr = [top[x], right[x], bottom[x], left[x]]\n        tmp_out += min(tmp_arr.count('0'), tmp_arr.count('1'))\n    return tmp_out\nfor _ in range(int(input())):\n    n = int(input())\n    arr = []\n    out = 0\n    for __ in range(n):\n        arr.append(input())\n    for x in range(n // 2):\n        current_top = arr[x][x:n - x]\n        current_bottom = arr[n - x - 1][x:n - x]\n        current_left = []\n        current_right = []\n        for y in range(x, n - x):\n            current_left.append(arr[y][x])\n            current_right.append(arr[y][n - x - 1])\n        current_left = ''.join(current_left)\n        current_right = ''.join(current_right)\n        out += calc(current_top, current_bottom[::-1], current_left[::-1], current_right)\n    print(out)", "I = input\nfor _ in [0] * int(I()):\n    n = int(I())\n    a = [I() for _ in [0] * n]\n    print(sum((min(map([a[k][l] for (k, l) in ((i, j), (j, ~i), (~i, ~j), (~j, i))].count, '01')) for i in range(n + 1 >> 1) for j in range(n >> 1))))", "x = int(input())\n\ndef cal(n, arr):\n    if n % 2 == 0:\n        a = b = n // 2\n    else:\n        (a, b) = (n // 2, n // 2 + 1)\n    res = 0\n    for i in range(a):\n        for j in range(b):\n            t = arr[i][j] + arr[j][n - 1 - i] + arr[n - 1 - i][n - 1 - j] + arr[n - 1 - j][i]\n            if t == 1 or t == 3:\n                res += 1\n            elif t == 2:\n                res += 2\n    return res\nfor jj in range(x):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append([int(_) for _ in list(input())])\n    print(cal(n, arr))", "from sys import stdin\nimport math\n\ndef read():\n    return stdin.readline().strip()\nnum = [0, 1, 2, 1, 0]\nfor _ in range(int(read())):\n    n = int(read())\n    matrix = [list(map(int, read())) for _ in range(n)]\n    N = n - 1\n    s = 0\n    for i in range(math.ceil(n / 2.0)):\n        for j in range(math.floor(n / 2.0)):\n            sum = matrix[i][j] + matrix[N - j][i] + matrix[N - i][N - j] + matrix[j][N - i]\n            s += num[sum]\n    print(s)", "import math\n\ndef solve():\n    n = int(input())\n    l = []\n    ans = 0\n    for _ in range(n):\n        l.append(list(map(int, input())))\n    m = math.ceil(n / 2)\n    if n % 2 == 0:\n        (p, q) = (m, m)\n    else:\n        (p, q) = (m - 1, m)\n    for i in range(p):\n        for j in range(q):\n            s = l[i][j] + l[j][n - i - 1] + l[n - j - 1][i] + l[n - i - 1][n - j - 1]\n            if s == 0 or s == 1 or s == 2:\n                ans = ans + s\n            else:\n                ans = ans + 4 - s\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    s = list()\n    count = 0\n    for i in range(n):\n        s.append(input())\n    y = 0\n    while n // 2 + n % 2 - y - 1 >= 0:\n        for x in range(0 + y, n - y - 1):\n            unmatch = 0\n            if s[y][x] != s[x][n - y - 1]:\n                unmatch += 1\n            if s[y][x] != s[n - y - 1][n - x - 1]:\n                unmatch += 1\n            if s[y][x] != s[n - x - 1][y]:\n                unmatch += 1\n            if unmatch in (1, 3):\n                count += 1\n            elif unmatch in (2,):\n                count += 2\n        y += 1\n    print(count)", "def fn(arr):\n    n = len(arr)\n    c = 0\n    for i in range(n // 2):\n        for j in range((n + 1) // 2):\n            temp = arr[i][j] + arr[j][n - i - 1] + arr[n - i - 1][n - j - 1] + arr[n - j - 1][i]\n            c += min(temp, 4 - temp)\n    return c\nt = int(input())\nfor T in range(t):\n    n = int(input())\n    arr = [list(map(int, input())) for i in range(n)]\n    st = fn(arr)\n    print(st)", "for _ in range(int(input())):\n    n = int(input())\n    a = [input() for _ in range(n)]\n    counter = 0\n    for i in range(n // 2):\n        for j in range(i, n - i - 1):\n            x = (a[i][j] + a[j][n - i - 1] + a[n - i - 1][n - j - 1] + a[n - j - 1][i]).count('1')\n            counter += 2 - abs(x - 2)\n    print(counter)", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(list(input()))\n    ans = 0\n    for i in range(n // 2):\n        for j in range(i, n - i - 1):\n            count = 0\n            if a[i][j] == '1':\n                count += 1\n            if a[j][-(i + 1)] == '1':\n                count += 1\n            if a[-(i + 1)][n - 1 - j] == '1':\n                count += 1\n            if a[n - 1 - j][i] == '1':\n                count += 1\n            if count == 1 or count == 3:\n                ans += 1\n            elif count == 2:\n                ans += 2\n    print(ans)", "X = [0, 1, 2, 1, 0]\nfor t in range(int(input())):\n    n = int(input())\n    S = 0\n    A = []\n    for j in range(n):\n        A.append(list(map(int, list(input()))))\n    for i in range((n + 1) // 2):\n        for j in range(n // 2):\n            s = A[i][j] + A[j][n - i - 1] + A[n - j - 1][i] + A[n - i - 1][n - j - 1]\n            S += X[s]\n    print(S)", "s = ''\nfor _ in range(int(input())):\n    n = int(input())\n    sp = [input() for _ in range(n)]\n    k = 0\n    for y in range(n // 2 + n % 2):\n        for x in range(n // 2):\n            a = sp[x][y] + sp[n - 1 - y][x] + sp[y][n - 1 - x] + sp[n - 1 - x][n - 1 - y]\n            k += min(a.count('0'), a.count('1'))\n    s += str(k) + '\\n'\nprint(s)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    for __ in range(n):\n        a.append(input())\n    m = 0\n    for i in range(math.ceil(n / 2)):\n        for j in range(i, n - i - 1):\n            c = 0\n            if a[i][j] != a[j][n - i - 1]:\n                c += 1\n            if a[i][j] != a[n - i - 1][n - j - 1]:\n                c += 1\n            if a[i][j] != a[n - j - 1][i]:\n                c += 1\n            if c == 3:\n                m += 1\n            else:\n                m += c\n    print(m)", "I = input\nfor _ in [0] * int(I()):\n    n = int(I())\n    a = [I() for _ in [0] * n]\n    print(sum((min(map([a[k][l] for (k, l) in ((i, j), (j, ~i), (~i, ~j), (~j, i))].count, '01')) for i in range(n + 1 >> 1) for j in range(n >> 1))))", "case = int(input().strip())\nfor i in range(case):\n    n = int(input().strip())\n    l = []\n    a = 0\n    for j in range(n):\n        line = input().strip()\n        l.append(list(line))\n    n2 = len(l[0]) - 1\n    for i in range(len(l) - 1):\n        for j in range(i, n2):\n            new = [l[i][j], l[n - i - 1][n - j - 1], l[n - j - 1][i], l[j][n - i - 1]]\n            flip = min(new.count('0'), new.count('1'))\n            a += flip\n        n2 = n2 - 1\n    print(a)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    matrix = []\n    for i in range(0, n):\n        temp = input()\n        matrix.append(temp)\n    i = 0\n    m = n - 1\n    flip = 0\n    for k in range(n - 1, 0, -2):\n        for j in range(0, k):\n            count1 = 0\n            if matrix[i][j + i] == '1':\n                count1 += 1\n            if matrix[j + i][m] == '1':\n                count1 += 1\n            if matrix[m][m - j] == '1':\n                count1 += 1\n            if matrix[m - j][i] == '1':\n                count1 += 1\n            flip += min(count1, abs(4 - count1))\n        i += 1\n        m -= 1\n    print(flip)", "def solve():\n    n = int(input())\n    arr = [[0] for _ in range(n)]\n    for i in range(n):\n        row = list(map(int, list(input())))\n        arr[i] = row\n    res = 0\n    for i in range((n + 1) // 2):\n        for j in range(n // 2):\n            count = arr[i][j]\n            count += arr[j][n - i - 1]\n            count += arr[n - i - 1][n - j - 1]\n            count += arr[n - j - 1][i]\n            res += min(count, 4 - count)\n    print(res)\nn_testcase = int(input())\nfor _ in range(n_testcase):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    a = [input() for _ in range(n)]\n    kq = 0\n    for i in range((n + 1) // 2):\n        for j in range(n // 2):\n            cur = (a[i][j] + a[n - j - 1][i] + a[j][n - i - 1] + a[n - i - 1][n - j - 1]).count('1')\n            cur = min(cur, 4 - cur)\n            kq += cur\n    print(kq)", "def solve(mtx):\n    m = len(mtx) - 1\n    i = 0\n    min_ops = 0\n    while i < len(mtx) // 2:\n        for k in range(i, len(mtx) - 1 - i):\n            tmp = [int(mtx[i][k]), int(mtx[k][m - i]), int(mtx[m - i][m - k]), int(mtx[m - k][i])]\n            min_ops += min(4 - sum(tmp), sum(tmp))\n        i += 1\n    return min_ops\nt = int(input())\nres = []\nfor _ in range(t):\n    n = int(input())\n    matrix = []\n    for _ in range(n):\n        matrix.append(input())\n    res.append(solve(matrix))\nfor i in res:\n    print(i)", "for _ in range(int(input())):\n    n = int(input())\n    a = [list(map(int, input())) for _ in range(n)]\n    total = 0\n    for i in range(n // 2):\n        for j in range((n + 1) // 2):\n            total += 2 - abs(a[i][j] + a[j][n - 1 - i] + a[n - 1 - i][n - 1 - j] + a[n - 1 - j][i] - 2)\n    print(total)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    L = []\n    for i in range(n):\n        L.append(input())\n    (l, r) = (0, n - 1)\n    cnt = 0\n    while l < r:\n        for i in range(l, r):\n            (ones, zeros) = (0, 0)\n            if L[l][i] == '0':\n                zeros += 1\n            else:\n                ones += 1\n            if L[i][n - 1 - l] == '0':\n                zeros += 1\n            else:\n                ones += 1\n            if L[n - 1 - l][n - i - 1] == '0':\n                zeros += 1\n            else:\n                ones += 1\n            if L[n - 1 - i][l] == '0':\n                zeros += 1\n            else:\n                ones += 1\n            cnt += min(zeros, ones)\n        l += 1\n        r -= 1\n    print(cnt)", "q = int(input())\nfor p in range(q):\n    n = int(input())\n    m = []\n    res = 0\n    for i in range(n):\n        m.append(input())\n    dop_n = n\n    n -= 1\n    for i in range(dop_n // 2):\n        for j in range(i, n - i):\n            s = int(m[i][j]) + int(m[n - i][n - j]) + int(m[j][n - i]) + int(m[n - j][i])\n            if s % 4 == 0:\n                continue\n            res += min(s, 4 - s)\n    print(res)", "def solve(m, x, y):\n    n = len(m)\n    sm = m[y][x] + m[n - 1 - x][y] + m[n - 1 - y][n - 1 - x] + m[x][n - 1 - y]\n    return sm if sm <= 2 else 4 - sm\nfor t in range(int(input())):\n    n = int(input())\n    m = [list(map(int, list(input()))) for _ in range(n)]\n    res = 0\n    for y in range(n // 2):\n        for x in range(y, n - y - 1, 1):\n            res = res + solve(m, x, y)\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    mat = []\n    for i in range(n):\n        mat.append(list(map(int, [j for j in input()])))\n    ans = 0\n    for i in range(n // 2):\n        for j in range(i, n - 1 - i):\n            s = mat[i][j] + mat[j][n - 1 - i] + mat[n - 1 - i][n - 1 - j] + mat[n - 1 - j][i]\n            if s == 1 or s == 3:\n                ans += 1\n            elif s == 2:\n                ans += 2\n    print(ans)", "out = []\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(input())\n    ans = 0\n    for i in range((n - 1) // 2 + 2):\n        for j in range(i, n - i - 1):\n            c = []\n            c.append(a[i][j])\n            c.append(a[j][n - i - 1])\n            c.append(a[n - i - 1][n - j - 1])\n            c.append(a[n - j - 1][i])\n            ans += min(c.count('0'), c.count('1'))\n    out.append(ans)\nfor i in out:\n    print(i)", "t = int(input())\nfor q in range(t):\n    n = int(input())\n    a = [list(input()) for i in range(n)]\n    count = 0\n    for i in range(n // 2):\n        for j in range(i, n - i - 1):\n            now = a[i][j] + a[j][n - i - 1] + a[n - i - 1][n - j - 1] + a[n - j - 1][i]\n            count += min(now.count('0'), now.count('1'))\n    print(count)", "def chan():\n    s = 0\n    for i in range(n // 2):\n        for j in range(n // 2):\n            g = int(a[i][j]) + int(a[j][n - i - 1]) + int(a[n - i - 1][n - j - 1]) + int(a[n - j - 1][i])\n            s += min(g, 4 - g)\n    return s\n\ndef le():\n    s = 0\n    for i in range(n // 2):\n        for j in range(n // 2 + 1):\n            g = int(a[i][j]) + int(a[j][n - i - 1]) + int(a[n - i - 1][n - j - 1]) + int(a[n - j - 1][i])\n            s += min(g, 4 - g)\n    return s\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(input())\n    if n % 2:\n        print(le())\n    else:\n        print(chan())", "t = int(input())\nfor qqq in range(t):\n    n = int(input())\n    matr2 = list()\n    for str1 in range(n):\n        str2 = list(map(int, list(input())))\n        matr2.append(str2)\n    n2 = n // 2\n    sumResult = 0\n    for i in range(n2):\n        for j in range(n2):\n            sum2 = matr2[i][j] + matr2[j][n - i - 1] + matr2[n - i - 1][n - j - 1] + matr2[n - j - 1][i]\n            if sum2 == 3:\n                sum2 = 1\n            elif sum2 == 4:\n                sum2 = 0\n            sumResult = sumResult + sum2\n    if n % 2 != 0:\n        for i in range(n2):\n            sum2 = matr2[i][n2] + matr2[n2][i] + matr2[n2][n - i - 1] + matr2[n - i - 1][n2]\n            if sum2 == 3:\n                sum2 = 1\n            elif sum2 == 4:\n                sum2 = 0\n            sumResult = sumResult + sum2\n    print(sumResult)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(input())\n    cnt = 0\n    for i in range(0, n - 1):\n        for j in range(i, n - 1 - i):\n            x = int(arr[i][j]) + int(arr[j][n - 1 - i]) + int(arr[n - 1 - i][n - 1 - j]) + int(arr[n - 1 - j][i])\n            if x == 1:\n                cnt += 1\n            elif x == 2:\n                cnt += 2\n            elif x == 3:\n                cnt += 1\n    print(cnt)", "def solution(a, n):\n    answer = 0\n    for i in range((n + 1) // 2):\n        for j in range(n // 2):\n            total = a[i][j] + a[n - 1 - i][n - 1 - j] + a[j][n - 1 - i] + a[n - 1 - j][i]\n            answer += min(total, 4 - total)\n    return answer\nt = int(input())\nanswer = [0] * t\nfor i in range(t):\n    n = int(input())\n    a = [None] * n\n    for j in range(n):\n        a[j] = list(map(int, list(input())))\n    answer[i] = solution(a, n)\nprint(*answer, sep='\\n')", "for _ in range(int(input())):\n    n = int(input())\n    g = [''] + ['0' + input() for i in range(n)]\n    ans = 0\n    for i in range(1, n // 2 + 1):\n        for j in range(1, n // 2 + 1):\n            (x, y) = (0, 0)\n            if g[i][j] == '0':\n                x += 1\n            else:\n                y += 1\n            if g[j][n - i + 1] == '0':\n                x += 1\n            else:\n                y += 1\n            if g[n - i + 1][n - j + 1] == '0':\n                x += 1\n            else:\n                y += 1\n            if g[n - j + 1][i] == '0':\n                x += 1\n            else:\n                y += 1\n            ans += min(x, y)\n    if n % 2 == 1:\n        for i in range(1, n // 2 + 1):\n            (x, y) = (0, 0)\n            if g[i][n // 2 + 1] == '0':\n                x += 1\n            else:\n                y += 1\n            if g[n // 2 + 1][n - i + 1] == '0':\n                x += 1\n            else:\n                y += 1\n            if g[n - i + 1][n // 2 + 1] == '0':\n                x += 1\n            else:\n                y += 1\n            if g[n // 2 + 1][i] == '0':\n                x += 1\n            else:\n                y += 1\n            ans += min(x, y)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [input() for _ in range(n)]\n    operation = 0\n    for i in range((n + 1) // 2):\n        for j in range(n // 2):\n            x = (a[i][j] + a[n - i - 1][n - j - 1] + a[j][n - i - 1] + a[n - j - 1][i]).count('1')\n            operation += min(x, 4 - x)\n    print(operation)", "for iota in range(int(input())):\n    n = int(input())\n    grid = []\n    ans = 0\n    for i in range(n):\n        grid.append(list(map(int, list(input()))))\n    for i in range((n + 1) // 2):\n        for j in range(n // 2):\n            num1 = grid[i][j] + grid[j][-i - 1] + grid[-j - 1][i] + grid[-i - 1][-j - 1]\n            if num1 >= 2:\n                ans += 4 - num1\n            else:\n                ans += num1\n    print(ans)", "def main():\n    for x in range(int(input())):\n        n = int(input())\n        mat = []\n        for i in range(n):\n            mat.append(list(map(int, list(input()))))\n        print(contador(mat))\n\ndef contador(mat):\n    cont = 0\n    for x in range(len(mat) // 2):\n        for j in range(x, len(mat) - x - 1):\n            u = 0\n            c = 0\n            if mat[x][j] == 1:\n                u += 1\n            else:\n                c += 1\n            if mat[j][len(mat) - 1 - x] == 1:\n                u += 1\n            else:\n                c += 1\n            if mat[len(mat) - 1 - x][len(mat) - j - 1] == 1:\n                u += 1\n            else:\n                c += 1\n            if mat[len(mat) - 1 - j][x] == 1:\n                u += 1\n            else:\n                c += 1\n            if c < u:\n                cont += c\n            else:\n                cont += u\n    return cont\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input())))\n    answer = 0\n    for i in range(n // 2):\n        for j in range(i, n - i - 1):\n            temp = matrix[i][j] + matrix[j][~i] + matrix[~i][~j] + matrix[~j][i]\n            answer += min(temp, 4 - temp)\n    print(answer)", "for _ in range(int(input())):\n    n = int(input())\n    d = [list(map(int, input())) for _ in range(n)]\n    counter = 0\n    i = 0\n    while i < (n - 1) / 2:\n        j = i\n        while j < n - i - 1:\n            summa = d[j][i] + d[n - i - 1][j] + d[n - j - 1][n - i - 1] + d[i][n - j - 1]\n            if summa == 2:\n                counter += 2\n            if summa == 1 or summa == 3:\n                counter += 1\n            j += 1\n        i += 1\n    print(counter)", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    b = [[]]\n    ans = 0\n    for i in range(n):\n        b.append([0] + list(map(int, list(sys.stdin.readline().strip()))))\n    for i in range(1, (n + 1) // 2 + 1):\n        for j in range(1, n // 2 + 1):\n            s = b[i][j] + b[j][n - i + 1] + b[n - i + 1][n - j + 1] + b[n - j + 1][i]\n            ans += min(s, 4 - s)\n    print(ans)", "def nchanges(a, b, c, d):\n    s = a + b + c + d\n    if s >= 2:\n        return 4 - s\n    else:\n        return s\n\ndef main():\n    i = int(input())\n    for _ in range(i):\n        n = int(input().strip('\\r\\n'))\n        a = []\n        for _ in range(n):\n            a.append([int(c) for c in input().strip('\\r\\n')])\n        res = 0\n        for iidx in range(n // 2):\n            for jidx in range(n // 2):\n                v1 = a[iidx][jidx]\n                v2 = a[jidx][n - iidx - 1]\n                v3 = a[n - iidx - 1][n - jidx - 1]\n                v4 = a[n - jidx - 1][iidx]\n                res += nchanges(v1, v2, v3, v4)\n        if n % 2 == 1:\n            for iidx in range(n // 2):\n                v1 = a[n // 2][iidx]\n                v2 = a[iidx][n // 2]\n                v3 = a[n // 2][n - iidx - 1]\n                v4 = a[n - iidx - 1][n // 2]\n                res += nchanges(v1, v2, v3, v4)\n        print(res)\nmain()", "import sys\nimport math\nfrom itertools import combinations\niput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    dat = [list(input()) for i in range(n)]\n    ans = 0\n    for i in range(len(dat) // 2):\n        for j in range(i, len(dat) - i - 1):\n            (o, f) = (0, 0)\n            if dat[i][j] == '0':\n                o += 1\n            else:\n                f += 1\n            if dat[j][n - i - 1] == '0':\n                o += 1\n            else:\n                f += 1\n            if dat[n - i - 1][n - j - 1] == '0':\n                o += 1\n            else:\n                f += 1\n            if dat[n - j - 1][i] == '0':\n                o += 1\n            else:\n                f += 1\n            if o == 0 or f == 0:\n                ans += 0\n            else:\n                ans += min(o, f)\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    iter = math.ceil(n / 2)\n    iter2 = n // 2\n    mat = []\n    res = 0\n    for x in range(n):\n        mat.append(input())\n    for i in range(iter):\n        for j in range(iter2):\n            a = int(mat[i][j]) + int(mat[j][n - i - 1]) + int(mat[n - 1 - i][n - 1 - j]) + int(mat[n - 1 - j][i])\n            if a == 2:\n                res += 2\n            elif a % 2:\n                res += 1\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = [list(map(int, input())) for _ in range(n)]\n    total = 0\n    for i in range(n // 2):\n        for j in range((n + 1) // 2):\n            s = a[i][j] + a[j][n - 1 - i] + a[n - 1 - i][n - 1 - j] + a[n - 1 - j][i]\n            total += min(s, 4 - s)\n    print(total)", "t = int(input())\nfor vvod in range(t):\n    n = int(input())\n    v = list()\n    ans = 0\n    for i in range(n):\n        s = input()\n        v.append(s)\n    for i in range(0, n // 2):\n        for j in range(i, n - i - 1):\n            g = int(v[i][j]) + int(v[n - 1 - j][i]) + int(v[n - 1 - i][n - 1 - j]) + int(v[j][n - 1 - i])\n            if g == 3 or g == 1:\n                ans += 1\n            elif g == 2:\n                ans += 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    m = [[int(x) for x in input()] for _ in range(n)]\n    s = 0\n    for i in range((n + 1) // 2):\n        for j in range(n // 2):\n            a = m[i][j] + m[j][n - i - 1] + m[n - i - 1][n - j - 1] + m[n - j - 1][i]\n            s += min(a, 4 - a)\n    print(s)", "import os\nimport collections\nimport math\nimport sys\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    A = []\n    for i in range(n):\n        s = input()\n        A.append(s)\n    r = int(n / 2)\n    sum = 0\n    for i in range(r):\n        for j in range(r):\n            num0 = 0\n            num1 = 0\n            tmp1 = A[i][j]\n            tmp2 = A[j][n - 1 - i]\n            tmp3 = A[n - 1 - j][i]\n            tmp4 = A[n - 1 - i][n - 1 - j]\n            if tmp1 == '0':\n                num0 += 1\n            else:\n                num1 += 1\n            if tmp2 == '0':\n                num0 += 1\n            else:\n                num1 += 1\n            if tmp3 == '0':\n                num0 += 1\n            else:\n                num1 += 1\n            if tmp4 == '0':\n                num0 += 1\n            else:\n                num1 += 1\n            sum += min(num0, num1)\n    if n & 1 == 1:\n        for j in range(r):\n            num0 = 0\n            num1 = 0\n            tmp1 = A[r][j]\n            tmp2 = A[j][n - 1 - r]\n            tmp3 = A[n - 1 - j][r]\n            tmp4 = A[n - 1 - r][n - 1 - j]\n            if tmp1 == '0':\n                num0 += 1\n            else:\n                num1 += 1\n            if tmp2 == '0':\n                num0 += 1\n            else:\n                num1 += 1\n            if tmp3 == '0':\n                num0 += 1\n            else:\n                num1 += 1\n            if tmp4 == '0':\n                num0 += 1\n            else:\n                num1 += 1\n            sum += min(num0, num1)\n    print(sum)", "for i in range(int(input())):\n    n = int(input())\n    l = []\n    a = 0\n    for i in range(n):\n        l.append(list(input()))\n    for i in range(n // 2 + n % 2):\n        for j in range(n // 2):\n            cn = int(l[i][j]) + int(l[j][~i]) + int(l[~j][i]) + int(l[~i][~j])\n            a += min(cn, 4 - cn)\n    print(a)", "for _ in range(int(input())):\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        matrix.append(input())\n    ans = 0\n    for r in range(n // 2):\n        for c in range(n // 2 + 1 if n % 2 else n // 2):\n            curr = int(matrix[r][c]) + int(matrix[n - 1 - c][r]) + int(matrix[n - 1 - r][n - 1 - c]) + int(matrix[c][n - 1 - r])\n            ans += min(curr, 4 - curr)\n    print(ans)", "for cases in range(int(input())):\n    k = 0\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, list(input()))))\n    for i in range(n // 2 + 1):\n        for j in range(i, n - i - 1):\n            s = l[i][j] + l[abs(n - j - 1)][i] + l[abs(n - i - 1)][abs(n - j - 1)] + l[j][abs(n - i - 1)]\n            if s == 4:\n                k += 0\n            elif s == 3:\n                k += 1\n            elif s == 2:\n                k += 2\n            elif s == 1:\n                k += 1\n            elif s == 0:\n                k += 0\n    print(k)", "def miis():\n    return map(int, input().split())\nfor _ in range(int(input())):\n    n = int(input())\n    print\n    s = [list(map(int, list(input()))) for i in range(n)]\n    ans = 0\n    for i in range((n - 1) // 2 + 1 - n % 2):\n        for j in range((n - 1) // 2 + 1):\n            ans += 2 - abs(2 - (s[i][j] + s[j][n - i - 1] + s[n - i - 1][n - j - 1] + s[n - j - 1][n - (n - i - 1) - 1]))\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [list(map(int, input())) for _ in range(n)]\n    total = 0\n    for i in range(n // 2):\n        for j in range((n + 1) // 2):\n            s = a[i][j] + a[j][n - 1 - i] + a[n - 1 - i][n - 1 - j] + a[n - 1 - j][i]\n            total += min(s, 4 - s)\n    print(total)", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = [input() for i in range(n)]\n    z = 0\n    for i in range(n // 2):\n        for j in range((n + 1) // 2):\n            s = int(a[i][j]) + int(a[j][n - 1 - i]) + int(a[n - 1 - i][n - 1 - j]) + int(a[n - 1 - j][i])\n            z += min(s, 4 - s)\n    print(z)", "from collections import *\nimport math\nfor _ in range(int(input())):\n    n = int(input())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, list(input()))))\n    r = len(matrix)\n    c = len(matrix[0])\n    ans = 0\n    for i in range(0, math.ceil(r // 2)):\n        for ii in range(0, math.ceil(c / 2)):\n            ct = matrix[i][ii] + matrix[ii][-i - 1] + matrix[-i - 1][-ii - 1] + matrix[-ii - 1][i]\n            ans += min(ct, 4 - ct)\n    print(ans)", "import sys\nprintf = sys.stdout.write\n\ndef intput():\n    return int(sys.stdin.readline())\n\ndef get_int():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_lis():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_liss():\n    return sys.stdin.readline().split()\n\ndef get_ints():\n    return sys.stdin.readline().split()\n\ndef get_str():\n    return sys.stdin.readline().strip()\nfrom collections import defaultdict\nt = intput()\nwhile t:\n    n = intput()\n    s = 0\n    ans = 0\n    l = [input() for _ in range(n)]\n    for i in range(n // 2):\n        for j in range((n + 1) // 2):\n            s = int(l[i][j]) + int(l[j][n - 1 - i]) + int(l[n - 1 - i][n - 1 - j]) + int(l[n - 1 - j][i])\n            ans += min(s, 4 - s)\n    printf(str(ans))\n    printf('\\n')\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    v = list()\n    ans = 0\n    for i in range(n):\n        s = input()\n        v.append(s)\n    for i in range(n // 2):\n        for j in range(i, n - i - 1):\n            g = int(v[i][j]) + int(v[n - 1 - j][i]) + int(v[n - 1 - i][n - 1 - j]) + int(v[j][n - 1 - i])\n            if g == 3 or g == 1:\n                ans += 1\n            elif g == 2:\n                ans += 2\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    op = 0\n    for i in range(n):\n        a.append(list(map(int, list(input()))))\n    for i in range(n - 1):\n        for j in range(i, n - i - 1):\n            one = a[i][j] + a[j][n - i - 1] + a[n - i - 1][n - j - 1] + a[n - j - 1][i]\n            zero = 4 - one\n            if one >= zero:\n                op += zero\n            else:\n                op += one\n    print(op)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    grid = []\n    for _ in range(n):\n        grid.append(list(map(int, input())))\n    ans = 0\n    for i in range((n + 1) // 2):\n        for j in range(n // 2):\n            s = grid[j][n - 1 - i] + grid[n - 1 - j][i] + grid[i][j] + grid[n - i - 1][n - j - 1]\n            ans += min(s, 4 - s)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [input() for _ in range(n)]\n    res = 0\n    for i in range(n // 2):\n        for j in range((n + 1) // 2):\n            v = int(a[i][j]) + int(a[j][n - 1 - i]) + int(a[n - 1 - i][n - 1 - j]) + int(a[n - 1 - j][i])\n            res += min(v, 4 - v)\n    print(res)", "def check(a, i, j):\n    i1 = i + 1\n    j1 = j + 1\n    c = int(a[i1 - 1][j1 - 1]) + int(a[j1 - 1][n - i1]) + int(a[n - i1][n - j1]) + int(a[n - j1][i1 - 1])\n    if c == 0 or c == 4:\n        return 0\n    elif c == 1 or c == 3:\n        return 1\n    elif c == 2:\n        return 2\nfor _ in range(int(input())):\n    n = int(input())\n    a = [['0' for x in range(n)] for y in range(n)]\n    r = 0\n    for i in range(n):\n        a[i] = list(input())\n    for i in range((n + 2) // 2):\n        if i > n - (i + 1):\n            break\n        elif i == n - (i + 1):\n            r += 0\n        else:\n            for j in range(i, n - (i + 1)):\n                r += check(a, i, j)\n    print(r)", "def rasn(*l):\n    _s = sum(map(int, l))\n    if _s > 2:\n        return 4 - _s\n    else:\n        return _s\nfor _ in range(int(input())):\n    n = int(input())\n    ls = [input() for _ in range(n)]\n    w = n // 2\n    h = w + n % 2\n    r = 0\n    for i in range(w):\n        for j in range(h):\n            r += rasn(ls[j][i], ls[i][-j - 1], ls[-j - 1][-i - 1], ls[-i - 1][j])\n    print(r)", "for _ in range(int(input())):\n    n = int(input())\n    lst = []\n    for i in range(n):\n        lst.append(input())\n    ans = int()\n    for i in range((n + 1) // 2):\n        for j in range(n // 2):\n            s = int(lst[i][j]) + int(lst[j][n - 1 - i]) + int(lst[n - 1 - j][i]) + int(lst[n - 1 - i][n - 1 - j])\n            ans += abs(min(s, 4 - s))\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = [list(map(int, list(input()))) for _ in range(n)]\n    tot = 0\n    for i in range(n // 2):\n        for j in range((n + 1) // 2):\n            vs = [s[i][j], s[j][~i], s[~i][~j], s[~j][i]]\n            tot += min(sum(vs), 4 - sum(vs))\n    print(tot)", "for _ in range(int(input())):\n    n = int(input())\n    ls = [input() for i in range(n)]\n    ans = 0\n    for i in range(0, n // 2):\n        for j in range(i, n - 1 - i):\n            p1 = n - 1 - i\n            p2 = n - 1 - j\n            l = [ls[i][j], ls[p1][p2], ls[p2][i], ls[j][p1]]\n            (z, o) = (0, 0)\n            for c in l:\n                if c == '0':\n                    o += 1\n                else:\n                    z += 1\n            ans += min(o, z)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    m = []\n    for i in range(n):\n        m += [[int(x) for x in input()]]\n    s = 0\n    for i in range((n + 1) // 2):\n        for j in range(n // 2):\n            a = m[i][j] + m[j][n - i - 1] + m[n - i - 1][n - j - 1] + m[n - j - 1][i]\n            s += min(a, 4 - a)\n    print(s)", "for nothing in range(int(input())):\n    ans = 0\n    n = int(input())\n    m = [[int(j) for j in input()] for i in range(n)]\n    for i in range(n // 2):\n        for j in range(n // 2):\n            s = m[i][j] + m[j][n - 1 - i] + m[n - 1 - i][n - 1 - j] + m[n - 1 - j][i]\n            ans += min(4 - s, s)\n    if n % 2 == 1:\n        for i in range(n // 2):\n            s = m[n // 2][i] + m[n // 2][n - 1 - i] + m[n - 1 - i][n // 2] + m[i][n // 2]\n            ans += min(4 - s, s)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    m = list()\n    for i in range(n):\n        m.append(list(map(int, input())))\n    res = 0\n    for i in range(n // 2 + 1):\n        for j in range(i, n - i - 1):\n            fingerprint = sum([m[i][j], m[n - j - 1][i], m[n - i - 1][n - j - 1], m[j][n - i - 1]])\n            res += min(fingerprint, 4 - fingerprint)\n    print(res)", "import sys\nimport math\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    lst = []\n    for i in range(n):\n        lst.append(list(str(input()))[:-1])\n    k = (n + 1) // 2\n    t = 0\n    ans = []\n    while t < k:\n        p = math.ceil(n / 2)\n        i = t\n        for j in range(n // 2):\n            ans.append(int(lst[i][j]) + int(lst[n - j - 1][i]) + int(lst[n - i - 1][n - j - 1]) + int(lst[j][n - i - 1]))\n        t += 1\n    dem = 0\n    for i in ans:\n        dem += min(i, 4 - i)\n    print(dem)", "for o in range(int(input())):\n    x = int(input())\n    m = []\n    for i in range(x):\n        l = input()\n        m.append(l)\n    c = 0\n    n = x - 1\n    for i in range(x // 2):\n        (p, q) = (i, x - (i + 1))\n        for j in range(n):\n            s = 0\n            s += int(m[p][p + j]) + int(m[p + j][q]) + int(m[q][q - j]) + int(m[q - j][p])\n            if 0 < s < 4:\n                if s < 4 - s:\n                    c += s\n                else:\n                    c += 4 - s\n        n -= 2\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    M = [list(map(int, input())) for __ in range(n)]\n    count = 0\n    for col in range((n + 1) // 2):\n        for row in range(n // 2):\n            ones = int(M[row][col]) + int(M[col][-1 - row]) + int(M[-1 - row][-1 - col]) + int(M[-1 - col][row])\n            count += min(ones, 4 - ones)\n    print(count)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    grid = [[] for j in range(n)]\n    for j in range(n):\n        row = input()\n        for k in range(n):\n            grid[j].append(row[k])\n    ops = 0\n    if n % 2 == 0:\n        r2 = n // 2\n    else:\n        r2 = n // 2 + 1\n    for j in range(0, n // 2):\n        for k in range(0, r2):\n            m = 1\n            if grid[j][k] == grid[n - 1 - k][j]:\n                m += 1\n            if grid[j][k] == grid[n - 1 - j][n - 1 - k]:\n                m += 1\n            if grid[j][k] == grid[k][n - 1 - j]:\n                m += 1\n            if m == 1 or m == 3:\n                ops += 1\n            elif m == 2:\n                ops += 2\n    print(ops)", "import sys\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    mas = []\n    ans = 0\n    for jj in range(n):\n        a1 = [int(ii) for ii in input()]\n        mas.append(a1)\n    a = 0\n    nn = n\n    while nn > 1:\n        for i in range(nn - 1):\n            temp = mas[a][i + a] + mas[a + i][n - 1 - a] + mas[n - 1 - a][n - 1 - a - i] + mas[n - 1 - a - i][a]\n            if temp == 3:\n                temp = 1\n            elif temp == 4:\n                temp = 0\n            ans += temp\n        a += 1\n        nn -= 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        temp = [int(i) for i in input()]\n        arr.append(temp)\n    res = 0\n    for i in range(n // 2):\n        for j in range(i, n - 1 - i):\n            cnt = 0\n            cnt += arr[i][j]\n            cnt += arr[j][n - 1 - i]\n            cnt += arr[n - 1 - i][n - 1 - j]\n            cnt += arr[n - 1 - j][i]\n            res += min(cnt, 4 - cnt)\n    print(res)", "def read_int() -> int:\n    return int(input().strip())\n\ndef read_ints_map() -> map:\n    return map(int, input().strip().split())\n\ndef read_ints_list() -> [int]:\n    return [*read_ints_map()]\ntry:\n    fin = open('./input.txt')\n    import sys\n    sys.stdin = fin\nexcept:\n    pass\nt = read_int()\nfor _ in range(t):\n    n = read_int()\n    mat = []\n    for _ in range(n):\n        mat.append(input())\n    mid = n >> 1\n    moves = 0\n    for i in range(mid):\n        for j in range(mid):\n            s = mat[i][j] + mat[j][n - 1 - i] + mat[n - 1 - i][n - 1 - j] + mat[n - 1 - j][i]\n            moves += min(s.count('0'), s.count('1'))\n    if n & 1:\n        for i in range(mid):\n            s = mat[i][mid] + mat[n - 1 - i][mid] + mat[mid][i] + mat[mid][n - 1 - i]\n            moves += min(s.count('0'), s.count('1'))\n    print(moves)", "def main():\n    t = int(input())\n    while t:\n        t -= 1\n        n = int(input())\n        g = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            line = input()\n            for (j, c) in enumerate(line):\n                g[i][j] = c\n        count_one = 0\n        count_zero = 0\n        count = 0\n        for i in range(0, n // 2):\n            for j in range(i, n - i - 1):\n                count_one = int(g[j][n - 1 - i]) + int(g[n - 1 - i][n - 1 - j]) + int(g[i][j]) + int(g[n - 1 - j][i])\n                count_zero = 4 - count_one\n                count += min(count_one, count_zero)\n        print(count)\nmain()", "t = int(input())\nfor t in range(t):\n    n = int(input())\n    a = [input() for i in range(n)]\n    z = 0\n    for i in range(n // 2):\n        for j in range((n + 1) // 2):\n            s = int(a[i][j]) + int(a[j][n - 1 - i]) + int(a[n - 1 - i][n - 1 - j]) + int(a[n - 1 - j][i])\n            z += min(s, 4 - s)\n    print(z)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(input())\n    if n % 2 == 1:\n        x = n // 2\n        ans = 0\n        for i in range(x + 1):\n            for j in range(1, x + 1):\n                if i != 0 or j != 0:\n                    b = l[x - i][x - j] + l[x + j][x - i] + l[x + i][x + j] + l[x - j][x + i]\n                    a = 0\n                    for k in b:\n                        if k == '1':\n                            a += 1\n                    ans += min(abs(a), abs(4 - a))\n    if n % 2 == 0:\n        x = n // 2\n        ans = 0\n        for i in range(x):\n            for j in range(x):\n                b = l[i][j] + l[n - 1 - j][i] + l[n - 1 - i][n - 1 - j] + l[j][n - 1 - i]\n                a = 0\n                for k in b:\n                    if k == '1':\n                        a += 1\n                ans += min(abs(a), abs(4 - a))\n    print(ans)", "def resiOmotac(matrica, duzina, pocI, pocJ):\n    if duzina == 1:\n        return 0\n    jedinice = [0] * (duzina - 1)\n    for i in range(duzina - 1):\n        jedinice[i] += matrica[pocI][pocJ + i]\n    for i in range(duzina - 1):\n        jedinice[i] += matrica[pocI + i][pocJ + duzina - 1]\n    for i in range(duzina - 1):\n        jedinice[i] += matrica[pocI + duzina - 1][pocJ + duzina - 1 - i]\n    for i in range(duzina - 1):\n        jedinice[i] += matrica[pocI + duzina - 1 - i][pocJ]\n    iz = 0\n    for i in range(duzina - 1):\n        if jedinice[i] > 2:\n            iz += 4 - jedinice[i]\n        else:\n            iz += jedinice[i]\n    return iz\n\ndef resi():\n    n = int(input())\n    matrica = [[0] * n for i in range(n)]\n    for i in range(n):\n        s = str(input())\n        for j in range(n):\n            matrica[i][j] = int(s[j])\n    resenje = 0\n    for i in range(n // 2):\n        resenje += resiOmotac(matrica, n - 2 * i, i, i)\n    print(resenje)\nfor _ in range(int(input())):\n    resi()", "import math\nfor _ in range(int(input())):\n    a = int(input())\n    l = []\n    c = 0\n    m = a - 1\n    n = m\n    for i in range(a):\n        l.append(input())\n    for i in range(math.ceil(a / 2)):\n        for j in range(i, n):\n            w = int(l[i][j])\n            x = int(l[m - i][m - j])\n            y = int(l[j][m - i])\n            z = int(l[m - j][i])\n            s = w + x + y + z\n            c += min(s, 4 - s)\n        n -= 1\n    print(c)", "import math\n\ndef resolve(N, list_1):\n    result = 0\n    if N % 2 == 0:\n        X = int(N / 2)\n        Y = int(N / 2)\n    else:\n        X = int(N / 2) + 1\n        Y = int(N / 2)\n    for x_index in range(X):\n        for y_index in range(Y):\n            a = list_1[x_index][y_index]\n            b = list_1[y_index][N - 1 - x_index]\n            c = list_1[N - 1 - x_index][N - 1 - y_index]\n            d = list_1[N - 1 - y_index][x_index]\n            one_num = 0\n            zero_num = 0\n            if a == 1:\n                one_num += 1\n            else:\n                zero_num += 1\n            if b == 1:\n                one_num += 1\n            else:\n                zero_num += 1\n            if c == 1:\n                one_num += 1\n            else:\n                zero_num += 1\n            if d == 1:\n                one_num += 1\n            else:\n                zero_num += 1\n            smaller = min(zero_num, one_num)\n            result += smaller\n    return result\n\ndef read_input():\n    N = int(input())\n    list_1 = []\n    for index in range(N):\n        list_2 = []\n        temp_2 = input()\n        for item in temp_2:\n            list_2.append(int(item))\n        list_1.append(list_2)\n    return (N, list_1)\ncase_num = int(input())\nif not case_num == 0:\n    for index in range(case_num):\n        (N, list_1) = read_input()\n        res = resolve(N, list_1)\n        print(res)", "from math import ceil\n\ndef rotate_matrix(m):\n    return [[m[j][i] for j in range(len(m))] for i in range(len(m[0]) - 1, -1, -1)]\nn = int(input())\nfor i in range(n):\n    k = int(input())\n    arr = []\n    for j in range(k):\n        brr = list(input())\n        arr.append(brr)\n        sum = 0\n    for x in range(0, k // 2):\n        for y in range(0 + x, k - 1 - x):\n            s1 = arr[x][k - y - 1]\n            s2 = arr[y][x]\n            s3 = arr[k - y - 1][k - x - 1]\n            s4 = arr[k - x - 1][y]\n            temp = int(s1) + int(s2) + int(s3) + int(s4)\n            sum += min(temp, 4 - temp)\n    print(ceil(sum))", "from math import ceil\n\ndef main():\n    temp = int(int(input()))\n    for _ in range(temp):\n        l = int(input())\n        m = [list(map(int, list(input()))) for i in range(l)]\n        a = (l + 1) // 2\n        k = 0\n        for i in range(a):\n            for j in range(a):\n                k_0 = 0\n                k_1 = 0\n                if m[i][j] == 1:\n                    k_1 += 1\n                else:\n                    k_0 += 1\n                if m[l - j - 1][i] == 1:\n                    k_1 += 1\n                else:\n                    k_0 += 1\n                if m[l - i - 1][l - j - 1] == 1:\n                    k_1 += 1\n                else:\n                    k_0 += 1\n                if m[j][l - i - 1] == 1:\n                    k_1 += 1\n                else:\n                    k_0 += 1\n                if k_0 > k_1:\n                    k += k_1\n                    m[i][j] = 1\n                    m[l - j - 1][i] = 1\n                    m[l - i - 1][l - j - 1] = 1\n                    m[j][l - i - 1] = 1\n                else:\n                    k += k_0\n                    m[i][j] = 0\n                    m[l - j - 1][i] = 0\n                    m[l - i - 1][l - j - 1] = 0\n                    m[j][l - i - 1] = 0\n        print(k)\nmain()", "t = int(input())\nwhile t:\n    n = int(input())\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, list(input()))))\n    ans = 0\n    for i in range(int((n + 1) / 2)):\n        for j in range(int(n / 2)):\n            r = i\n            c = j\n            s = grid[r][c]\n            r = n - 1 - r\n            s += grid[c][r]\n            c = n - 1 - c\n            s += grid[r][c]\n            r = i\n            s += grid[c][r]\n            ans = ans + min(4 - s, s)\n    print(ans)\n    t = t - 1", "from collections import defaultdict as df\nimport bisect\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        s = input()\n        a.append(s)\n    minop = 0\n    for i in range(n // 2):\n        for j in range(i, n - i - 1):\n            count = int(a[i][j])\n            count += int(a[n - i - 1][n - j - 1])\n            count += int(a[j][n - i - 1])\n            count += int(a[n - j - 1][i])\n            minop += min(count, 4 - count)\n    print(minop)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        s = input()\n        l.append(s)\n    count = 0\n    d = {}\n    for i in range(n // 2 + 1):\n        for j in range(i, n - i - 1):\n            d[i, j, 1] = int(l[i][j]) + int(l[j][n - i - 1]) + int(l[n - i - 1][n - j - 1]) + int(l[n - j - 1][i])\n    for i in d:\n        count += min(d[i], 4 - d[i])\n    print(count)", "for t in range(int(input())):\n    n = int(input())\n    matrix = [list(map(int, list(input()))) for x in range(n)]\n    check = n // 2\n    count = 0\n    for i in range(check):\n        pos_ul = [i, i]\n        pos_dl = [n - 1 - i, i]\n        pos_ur = [i, n - 1 - i]\n        pos_dr = [n - 1 - i, n - 1 - i]\n        for k in range(n - 1 - 2 * i):\n            nums = matrix[pos_ul[0]][pos_ul[1]] + matrix[pos_dl[0]][pos_dl[1]] + matrix[pos_ur[0]][pos_ur[1]] + matrix[pos_dr[0]][pos_dr[1]]\n            count += min(nums, 4 - nums)\n            pos_ul[1] += 1\n            pos_dl[0] -= 1\n            pos_ur[0] += 1\n            pos_dr[1] -= 1\n    print(count)", "tt = int(input())\nfor _ in range(tt):\n    n = int(input())\n    l = []\n    for i in range(n):\n        s = input()\n        temp = [int(i) for i in list(s)]\n        l.append(temp)\n    c = 0\n    for i in range(n // 2):\n        for j in range((n + 1) // 2):\n            zero = l[i][j]\n            ninety = l[j][n - i - 1]\n            rev = l[n - i - 1][n - j - 1]\n            twoseven = l[n - j - 1][i]\n            s = zero + ninety + rev + twoseven\n            c += min(s, 4 - s)\n    print(c)", "t = int(input())\nfor i in range(t):\n    ar = []\n    n = int(input())\n    for j in range(n):\n        tmp = [int(k) for k in list(input())]\n        ar.append(tmp)\n    mid = n // 2\n    ans = 0\n    for j in range(mid):\n        u = [ar[j][k] for k in range(j, n - j)]\n        r = [ar[k][n - j - 1] for k in range(j, n - j)]\n        d = [ar[n - j - 1][k] for k in range(j, n - j)]\n        l = [ar[k][j] for k in range(j, n - j)]\n        for k in range(n - 2 * j - 1):\n            sum = u[k] + r[k] + d[len(d) - 1 - k] + l[len(l) - 1 - k]\n            ans += min(sum, 4 - sum)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    table = []\n    for i in range(n):\n        table.append(list(map(int, input())))\n    for i in range((n + 1) // 2):\n        for j in range(n // 2):\n            s = [table[i][j], table[j][n - 1 - i], table[n - 1 - i][n - j - 1], table[n - j - 1][i]]\n            sm = sum(s)\n            ans += min(sm, 4 - sm)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, list(input()))))\n    ans = 0\n    for i in range(len(matrix) // 2):\n        for j in range(i, len(matrix) - i - 1):\n            sum_val = matrix[i][j]\n            sum_val += matrix[len(matrix) - 1 - j][i]\n            sum_val += matrix[len(matrix) - 1 - i][len(matrix) - 1 - j]\n            sum_val += matrix[j][len(matrix) - 1 - i]\n            ans += abs(abs(sum_val - 2) - 2)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    grid = []\n    for i in range(n):\n        grid.append([int(a) for a in input()])\n    count = 0\n    for i in range(n // 2):\n        for j in range(n // 2):\n            s = grid[i][j] + grid[j][n - i - 1] + grid[n - i - 1][n - j - 1] + grid[n - j - 1][i]\n            count += min(s, 4 - s)\n    if n % 2:\n        for i in range(n // 2):\n            s = grid[i][n // 2] + grid[n // 2][n - i - 1] + grid[n - i - 1][n // 2] + grid[n // 2][i]\n            count += min(s, 4 - s)\n    print(count)"]