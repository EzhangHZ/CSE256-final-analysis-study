["from math import gcd\n\ndef readline():\n    return map(int, input().split())\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nx = 1\nd = []\ni = 2\nwhile x <= 10 ** 9:\n    x = lcm(x, i)\n    d.append(x)\n    i += 1\nassert d[-1] > 10 ** 9\n\ndef solve():\n    (n,) = readline()\n    a = readline()\n    return all((ai % di for (ai, di) in zip(a, d)))\nt = int(input())\nfor __ in range(t):\n    print('YES' if solve() else 'NO')", "from math import gcd\na = []\nfor _ in range(int(input())):\n    n = int(input())\n    lcm = 1\n    for (i, x) in enumerate(map(int, input().split()), 2):\n        if lcm != -1:\n            lcm = lcm * i // gcd(lcm, i)\n            if lcm > int(1000000000.0):\n                lcm = -1\n        if lcm != -1 and x % lcm == 0:\n            a.append('NO')\n            break\n    else:\n        a.append('YES')\nprint(*a, sep='\\n')", "def compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nlcms = []\nlcm_to_this_moment = 1\nfor i in range(1, 22):\n    lcm_to_this_moment = compute_lcm(lcm_to_this_moment, i + 1)\n    lcms.append(lcm_to_this_moment)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    flag = 1\n    for (i, j) in zip(a, lcms[:n]):\n        if i % j == 0:\n            print('NO')\n            flag = 0\n            break\n    if flag:\n        print('YES')", "from math import gcd\nimport sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    data = list(map(int, input().split()))\n    accum = 1\n    flg = True\n    for (i, t) in enumerate(data):\n        accum = accum // gcd(i + 2, accum) * (i + 2)\n        if accum > int(1000000000.0):\n            break\n        if t % accum == 0:\n            flg = False\n            break\n    if flg:\n        print('YES')\n    else:\n        print('NO')", "from sys import stdin, stdout\nimport math\n\ndef gcd(a, b):\n    return math.gcd(a, b)\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    x = 1\n    xx = 0\n    for i in range(n):\n        g = gcd(x, i + 2)\n        x *= i + 2\n        x //= g\n        if x > 1000000000:\n            xx = 1\n            break\n        if a[i] % x == 0:\n            xx = 2\n            break\n    if xx == 2:\n        print('NO')\n    else:\n        print('YES')", "from math import gcd\nfrom sys import stdin\nfrom collections import Counter, deque\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    m = 1\n    key = 0\n    for i in range(n):\n        m = m * (i + 2) // gcd(m, i + 2)\n        if m > 1000000000:\n            break\n        if a[i] % m == 0:\n            key = 1\n            break\n    if key == 0:\n        print('YES')\n    else:\n        print('NO')", "from cmath import sqrt\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom functools import reduce\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    k = 0\n    d = 2\n    for i in range(n):\n        d = d * (i + 2) // math.gcd(d, i + 2)\n        if d > 1000000000:\n            break\n        if a[i] % d == 0:\n            k = 1\n            break\n    if k == 1:\n        print('NO')\n    else:\n        print('YES')", "import bisect\nimport os, sys, math\nfrom io import BytesIO, IOBase\nfrom collections import defaultdict, deque\nip = lambda : input()\nit = lambda : int(input())\nma = lambda : map(int, input().split())\nli = lambda : list(map(int, input().split()))\nMOD = 10 ** 9 + 7\nMD = 998244353\nmod = 100007\nMIL = 1000000\nInf = float('inf')\nye = 'YES'\nne = 'NO'\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\narr = [-1]\nl = 1\nfor i in range(2, 23):\n    z = lcm(l, i)\n    arr.append(z)\n    l = z\nfor _ in range(it()):\n    n = it()\n    a = li()\n    ans = ye\n    k = min(n, 21)\n    for i in range(1, k + 1):\n        if a[i - 1] % arr[i] == 0:\n            ans = ne\n            break\n    print(ans)", "from math import gcd\ninf = 10 ** 9\nans = []\nfor _ in range(int(input())):\n    n = int(input())\n    nums = [int(_) for _ in input().split()]\n    x = 1\n    for (i, j) in enumerate(nums):\n        x = x * (i + 2) // gcd(x, i + 2) if x < inf else x\n        if j >= x and j % x == 0:\n            ans.append('NO')\n            break\n    else:\n        ans.append('YES')\nprint('\\n'.join(ans))", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(min(25, n)):\n        c = True\n        for j in range(i + 2, 1, -1):\n            if a[i] % j:\n                c = False\n                break\n        if c:\n            return 'NO'\n    return 'YES'\nfor i in range(int(input())):\n    print(solve())", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(min(25, n)):\n        c = True\n        for j in range(i + 2, 1, -1):\n            if a[i] % j:\n                c = False\n                break\n        if c:\n            return 'NO'\n    return 'YES'\nfor i in range(int(input())):\n    print(solve())", "def divis(el, ind):\n    while ind > 1:\n        if el % ind != 0:\n            return ind\n        ind -= 1\n    return -1\n\ndef do(arr):\n    if arr[0] % 2 == 0:\n        return 'NO'\n    now = 1\n    for i in range(1, len(arr)):\n        ni = divis(arr[i], i + 2)\n        if ni == -1:\n            return 'NO'\n        if i - (ni - 2) > now:\n            return 'NO'\n        now += 1\n    return 'YES'\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(do(arr))", "def divisible(n, a):\n    if a[0] % 2 == 0:\n        return 'NO'\n    for j in range(n):\n        delta = 2\n        while True:\n            i = j + delta\n            if i <= 1:\n                return 'NO'\n            if a[j] % i != 0:\n                break\n            delta -= 1\n    return 'YES'\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    print(divisible(n, a))", "lcm = [2]\ncur = 2\ni = 2\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nwhile cur <= 10 ** 9:\n    cur = lcm[i - 2]\n    lcm.append(cur * (i + 1) // gcd(cur, i + 1))\n    i += 1\nt = int(input())\nwhile t:\n    n = int(input())\n    a = list(map(int, input().split()))\n    t -= 1\n    f = 1\n    for i in range(len(a)):\n        if not a[i] % lcm[min(i, len(lcm) - 1)]:\n            f = 0\n            print('NO')\n            break\n    if f:\n        print('YES')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    g = 2\n    ans = True\n    for i in range(n):\n        if g > 10 ** 9:\n            break\n        if l[i] % g == 0:\n            ans = False\n            break\n        else:\n            g = g * (i + 3) // math.gcd(g, i + 3)\n    if ans == True:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    lcm = 1\n    for i in range(min(n, 23)):\n        lcm = lcm * (i + 2) // math.gcd(lcm, i + 2)\n        if a[i] % lcm == 0:\n            print('NO')\n            break\n    else:\n        print('YES')", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        f = True\n        for j in range(i + 1):\n            if arr[i] % (j + 2):\n                f = False\n                break\n        if f:\n            return 'NO'\n    return 'YES'\nfor _ in range(int(input())):\n    print(solve())", "from math import gcd\n\ndef solve():\n    l = int(input())\n    div = 1\n    arr = list(map(int, input().split()))\n    for i in range(l):\n        val = lcm(div, i + 2)\n        if div < 10 ** 9:\n            div = val\n        if arr[i] % div == 0:\n            return 'NO'\n    return 'YES'\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nn = int(input())\nfor i in range(n):\n    print(solve())", "def solve(arr):\n    for i in range(len(arr)):\n        can_remove = False\n        for j in range(2, i + 3):\n            if arr[i] % j != 0:\n                can_remove = True\n                break\n        if not can_remove:\n            return 'NO'\n    return 'YES'\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(solve(arr))", "import math\n\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)\nmx = 10 ** 9\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a[0] % 2 == 0:\n        print('NO')\n        continue\n    k = 2\n    isit = True\n    for i in range(1, n):\n        k = lcm(k, i + 2)\n        if k > mx:\n            break\n        if a[i] % k == 0:\n            isit = False\n            break\n    print('YES' if isit else 'NO')", "from math import gcd\n\ndef solve():\n    l = int(input())\n    div = 1\n    arr = list(map(int, input().split()))\n    for i in range(l):\n        val = lcm(div, i + 2)\n        if div < 10 ** 9:\n            div = val\n        if arr[i] % div == 0:\n            return 'NO'\n    return 'YES'\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nn = int(input())\nfor i in range(n):\n    print(solve())", "def int_input():\n    a = int(input())\n    return a\n\ndef int_list_input():\n    a = list(map(int, input().split()))\n    return a\n\ndef solve():\n    n = int_input()\n    arr = int_list_input()\n    flag = True\n    for i in range(n):\n        t = True\n        for j in range(i + 1):\n            if arr[i] % (j + 2) != 0:\n                t = False\n                break\n        if t:\n            flag = False\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')\nfor _ in range(int(input())):\n    solve()", "def solve(n, v):\n    for i in range(min(25, len(v))):\n        divisible = True\n        for j in range(2, i + 3):\n            if v[i] % j > 0:\n                divisible = False\n                break\n        if divisible is True:\n            print('NO')\n            return\n    print('YES')\nfor _ in range(int(input())):\n    n = int(input())\n    v = [int(x) for x in input().split()]\n    solve(n, v)", "import collections\nfrom math import ceil, gcd, sqrt, log\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    for i in range(n):\n        flag = 0\n        for j in range(i + 2, 1, -1):\n            if A[i] % j != 0:\n                flag = 1\n                break\n        if flag == 0:\n            print('NO')\n            return\n    print('YES')\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    array = list(map(int, input().split()))\n    i = 2\n    ans = 'YES'\n    for item in array:\n        if item % i != 0:\n            i += 1\n        else:\n            j = i - 1\n            while j >= 2 and item % j == 0:\n                j -= 1\n            if item % j == 0:\n                ans = 'NO'\n            i += 1\n        if ans == 'NO':\n            break\n    print(ans)", "t = int(input())\nfor e in range(t):\n    n = int(input())\n    c = 0\n    l1 = list(map(int, input().split()))\n    for i in range(min(len(l1), 21)):\n        q = l1[i]\n        chk = 0\n        for i in range(2, i + 3):\n            if q % i != 0:\n                chk = 1\n                break\n        if chk == 1:\n            continue\n        else:\n            c = 1\n            break\n    if c == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor t_i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(min(29, n)):\n        flag = True\n        for j in range(2, i + 3):\n            if a[i] % j != 0:\n                flag = False\n                break\n        if flag == True:\n            print('NO')\n            break\n    if flag == False:\n        print('YES')", "t = int(input())\nfor t_i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(min(29, n)):\n        flag = True\n        for j in range(2, i + 3):\n            if a[i] % j != 0:\n                flag = False\n                break\n        if flag == True:\n            print('NO')\n            break\n    if flag == False:\n        print('YES')", "for test in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    flag = True\n    for i in range(len(a)):\n        for j in range(2, i + 3):\n            if a[i] % j:\n                break\n        else:\n            flag = False\n            break\n    print('YES') if flag else print('NO')", "import collections\nfrom math import ceil, gcd, sqrt, log\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    flag = 1\n    for i in range(n):\n        if A[i] % (i + 2) != 0:\n            continue\n        flag = 0\n        for j in range(i + 2, 1, -1):\n            if A[i] % j != 0:\n                flag = 1\n                break\n        if flag == 0:\n            print('NO')\n            return\n    print('YES')\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "I = lambda : map(int, input().split())\nfor _ in [0] * int(input()):\n    n = int(input())\n    k = 1\n    for i in I():\n        for j in range(k + 1, 1, -1):\n            if i % j != 0:\n                ff = 1\n                break\n        else:\n            ff = 0\n            break\n        k = k + 1\n    print('YNEOS'[int(ff == 0)::2])", "def gcd(a, b):\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a\nt = int(input())\nfor w in range(t):\n    n = int(input())\n    N = list(map(int, input().split()))\n    NumLcm = 2\n    isGood = True\n    for i in range(n):\n        if NumLcm < 2 * 10 ** 9:\n            NumLcm = NumLcm * (i + 2) // gcd(NumLcm, i + 2)\n        if N[i] % NumLcm == 0:\n            isGood = False\n            break\n    if isGood:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    v = [int(i) for i in input().split()]\n    s = []\n    for i in range(n):\n        iss = True\n        s.append(i + 2)\n        for j in s:\n            if v[i] % j != 0:\n                iss = False\n                break\n        if iss:\n            print('NO')\n            break\n    if not iss:\n        print('YES')", "for s in [*open(0)][2::2]:\n    print('NYOE S'[all((any((x % j for j in range(2, min(24, i)))) for (i, x) in enumerate(map(int, s.split()), 3)))::2])", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        for j in range(i + 2, 1, -1):\n            if a[i] % j != 0:\n                break\n        else:\n            print('NO')\n            break\n    else:\n        print('YES')", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    lcm = 2\n    flag = 1\n    for i in range(n):\n        k = i + 3\n        if lcm > int(1000000000.0):\n            break\n        if l[i] % lcm == 0:\n            flag = 0\n        lcm = lcm * k // math.gcd(lcm, k)\n    if flag == 0:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    lst = [int(item) for item in input().split()]\n    grace = True\n    for i in range(n):\n        for j in range(2, i + 3):\n            if lst[i] % j:\n                break\n        else:\n            grace = False\n            break\n    print('YES' if grace else 'NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    flag = 1\n    for j in range(n):\n        index = 0\n        for k in range(2, j + 3):\n            if a[j] % k != 0:\n                index = 1\n                break\n        if index == 0:\n            flag = 0\n            break\n    if flag == 0:\n        print('NO')\n    else:\n        print('YES')", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    ans = 'YES'\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            f = 0\n            for k in range(i + 2, 2, -1):\n                if arr[i] % k != 0:\n                    f = 1\n                    break\n            if f == 0:\n                ans = 'NO'\n                break\n    print(ans)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef divisibleConfusion(n, array):\n    multiplier = 1\n    for x in range(min(n, 24)):\n        multiplier = lcm(multiplier, x + 2)\n        if array[x] % multiplier == 0:\n            return 'NO'\n    return 'YES'\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(divisibleConfusion(n, l))", "for i in range(int(input())):\n    a = int(input())\n    b = list(map(int, input().split()))\n    for i in range(len(b)):\n        for l in range(i + 2, 1, -1):\n            if b[i] % l != 0:\n                break\n        else:\n            print('NO')\n            break\n    else:\n        print('YES')", "for t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    st = 2\n    bool = True\n    for i in range(n):\n        bool = True\n        for j in range(2, i + 3):\n            if arr[i] % j != 0:\n                bool = False\n                break\n        if bool:\n            print('NO')\n            break\n    if not bool:\n        print('YES')\n        continue", "for _ in range(int(input())):\n    n = int(input())\n    ans = 'YES'\n    x = list(map(int, input().split()))\n    for i in range(n):\n        for j in range(2, i + 3):\n            if x[i] % j > 0:\n                break\n        if j == i + 2 and x[i] % j == 0:\n            ans = 'NO'\n            break\n    print(ans)", "t = int(input())\nans = []\nfor _ in range(t):\n    n = int(input())\n    nums = [int(_) for _ in input().split()]\n    for i in range(n):\n        for j in range(i + 2, 1, -1):\n            if nums[i] % j != 0:\n                break\n        else:\n            ans.append('NO')\n            break\n    else:\n        ans.append('YES')\nprint('\\n'.join(ans))", "import sys\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = [int(i) for i in input().split(' ')]\n    ans = True\n    for i in range(n):\n        divall = True\n        for j in range(2, i + 3):\n            if arr[i] % j != 0:\n                divall = False\n                break\n        if divall:\n            ans = False\n            break\n    if ans:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a / gcd(a, b) * b\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split(' ')))\n        l = len(a)\n        flag = True\n        lc = 2\n        for j in range(l):\n            lc = lcm(lc, j + 2)\n            if lc > 1000000000:\n                break\n            if a[j] % lc == 0:\n                flag = False\n                break\n        if flag:\n            print('YES')\n        else:\n            print('NO')\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    ans = 'YES'\n    x = list(map(int, input().split()))\n    for i in range(0, n):\n        check = False\n        for j in range(2, i + 3):\n            if x[i] % j != 0:\n                check = True\n                break\n        if check is False:\n            ans = 'NO'\n            break\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    i = n - 1\n    while i >= 0:\n        if a[i] % (i + 2) != 0:\n            a.pop(i)\n            i = len(a) - 1\n        else:\n            i -= 1\n    if i < 0 and len(a) == 0:\n        print('YES')\n    else:\n        print('NO')", "import sys\ninp = sys.stdin.readline\n\ndef solve():\n    n = int(inp())\n    a = list(map(int, inp().split()))\n    c = 0\n    for i in range(n):\n        b = None\n        for j in range(i, -1, -1):\n            if a[i] % (j + 2) != 0:\n                b = j\n                break\n        if b is None or b < i - c:\n            print('NO')\n            return\n        c += 1\n    print('YES')\n\ndef main():\n    for i in range(int(inp())):\n        solve()\nmain()", "def gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    div = 1\n    ok = True\n    for i in range(0, n):\n        if i <= 24:\n            div = lcm(div, i + 2)\n        if a[i] % div == 0:\n            ok = False\n            break\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "from math import *\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom collections import Counter as ctr\nfrom collections import deque as dq\nfrom array import array\nfrom re import search\nli = lambda : list(map(int, input().split()))\narr = lambda a: array('i', a)\nbi = lambda n: bin(n).replace('0b', '')\nyn = lambda f: print('NYOE S'[f::2])\nsbstr = lambda a, s: search('.*'.join(a), s)\n\ndef smnd(n):\n    for i in range(2, n + 2):\n        if n % i != 0:\n            return i\n\ndef solve():\n    for _ in range(int(input())):\n        n = int(input())\n        a = li()\n        f = True\n        d = 1\n        for i in range(n):\n            if a[i] % (i + 2) == 0 and smnd(a[i]) > i + 2:\n                f = False\n                break\n        yn(f)\nsolve()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    i = n - 1\n    while i >= 0:\n        if a[i] % (i + 2) != 0:\n            a.pop(i)\n            i = len(a) - 1\n        else:\n            i -= 1\n    if i < 0 and len(a) == 0:\n        print('YES')\n    else:\n        print('NO')", "for s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    print('NYOE S'[all((any((x % j for j in range(2, min(24, i)))) for (i, x) in enumerate(a, 3)))::2])", "for test in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    flag = True\n    for i in range(len(a)):\n        for j in range(2, min(i + 2, 30) + 1):\n            if a[i] % j:\n                break\n        else:\n            flag = False\n            break\n    print('YES') if flag else print('NO')", "t = int(input())\nfor i in range(t):\n    n = input()\n    a = input().split()\n    check = True\n    for _ in range(len(a)):\n        k = int(a[_])\n        jud = False\n        for j in range(2, _ + 3):\n            if k % j != 0:\n                jud = True\n                break\n        if jud == False:\n            check = False\n            break\n    if check == False:\n        print('NO')\n    else:\n        print('YES')", "def GCD(a, b):\n    if b == 0:\n        return a\n    return GCD(b, a % b)\n\ndef LCM(a, b):\n    return int(a * b / GCD(a, b))\nt = int(input())\nm = 1000000000.0 + 7\nfor x1 in range(t):\n    h = 2\n    boo = 0\n    n = int(input())\n    a = input().split()\n    for y in range(n):\n        if h < m:\n            h = LCM(h, y + 2)\n        if int(a[y]) % h == 0:\n            print('NO')\n            boo = 2\n            break\n    if boo == 0:\n        print('YES')", "import sys\nsys.setrecursionlimit(100100)\n\ndef main():\n    for _ in range(int(input())):\n        _ = int(input())\n        seq = list(map(int, input().split()))\n        print(iter_solution(seq))\n\ndef solution(seq: list) -> str:\n    if not seq:\n        return 'YES'\n    for i in range(len(seq), 0, -1):\n        a = seq[i - 1]\n        if a % (i + 1) != 0:\n            del seq[i - 1]\n            return solution(seq)\n    return 'NO'\n\ndef iter_solution(seq: list) -> str:\n    while seq:\n        no = True\n        for i in range(len(seq), 0, -1):\n            a = seq[i - 1]\n            if a % (i + 1) != 0:\n                no = False\n                del seq[i - 1]\n                break\n        if no and seq:\n            return 'NO'\n    return 'YES'\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    i = n - 1\n    while i >= 0:\n        if arr[i] % (i + 2) != 0:\n            arr.pop(i)\n            i = len(arr) - 1\n        else:\n            i -= 1\n    if i < 0 and len(arr) == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    ans = 'YES'\n    x = list(map(int, input().split()))\n    for i in range(n):\n        for j in range(2, i + 3):\n            if x[i] % j > 0:\n                break\n        if j == i + 2 and x[i] % j == 0:\n            ans = 'NO'\n            break\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    h = list(map(int, input().split()))\n    accomodate = True\n    for i in range(n):\n        j = 2\n        k = i + 2\n        while j <= k:\n            if h[k - 2] % j != 0:\n                break\n            else:\n                j += 1\n        if j == k + 1:\n            accomodate = False\n            break\n    if accomodate:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for j in range(n):\n        var = False\n        for k in range(2, j + 3):\n            if a[j] % k != 0:\n                ans += 1\n                var = True\n                break\n        if var == False:\n            break\n    if ans == n:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nanswers = list()\nfor k in range(t):\n    n = int(input())\n    mas = list(map(int, input().split()))\n    solved = False\n    for i in range(n):\n        if not mas[i] % (i + 2) == 0:\n            continue\n        else:\n            m = 0\n            for j in range(i + 1, 0, -1):\n                if not mas[i] % j == 0:\n                    m = j\n                    break\n            if m == 0:\n                solved = True\n                answers.append('NO')\n                break\n    if not solved:\n        answers.append('YES')\nprint('\\n'.join(answers))", "k = int(input())\nfor i in range(k):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        for j in range(i + 2, 1, -1):\n            if a[i] % j != 0:\n                break\n        else:\n            print('NO')\n            break\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.insert(0, 0)\n    flag = True\n    for i in range(1, n + 1):\n        f = True\n        for j in range(1, i + 1):\n            if a[i] % (j + 1) != 0:\n                f = False\n                break\n        if f:\n            flag = False\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "a = int(input())\nfor x in range(a):\n    b = int(input())\n    c = list(map(int, input().split()))\n    l = 0\n    for y in range(b):\n        s = 2\n        t = -1\n        while s <= y + 2:\n            if c[y] % s != 0:\n                t = 0\n                break\n            s += 1\n        if t == -1:\n            l = -1\n            break\n    if l == -1:\n        print('NO')\n    else:\n        print('YES')", "import collections\nfrom math import ceil, gcd, sqrt, log\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        if A[i] % (i + 2) != 0:\n            count += 1\n            continue\n        flag = 0\n        k = i + 2\n        for j in range(count + 1):\n            if A[i] % (k - j) != 0:\n                count += 1\n                flag = 1\n                break\n        if flag == 0:\n            print('NO')\n            return\n    print('YES')\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "for test in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    flag = True\n    for i in range(len(a)):\n        for j in range(2, min(i + 2, 30) + 1):\n            if a[i] % j != 0:\n                break\n        else:\n            flag = False\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "n_test = int(input())\nfor k in range(n_test):\n    n = int(input())\n    elements = input().split()\n    for x in range(len(elements)):\n        i = x + 2\n        valido = False\n        indice = i\n        while valido is not True:\n            if indice == 1:\n                print('NO')\n                break\n            elif int(elements[x]) % indice != 0:\n                valido = True\n            else:\n                indice = indice - 1\n        if valido is not True:\n            break\n    if valido:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().strip().split()]\n    i = 0\n    min_i = 0\n    while i < n:\n        check = False\n        for j in range(0, i + 1):\n            if a[i] % (j + 2) != 0:\n                check = True\n                break\n        if check == False:\n            break\n        i += 1\n    if check:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor k in range(t):\n    b = int(input())\n    ls = list(map(int, input().split()))\n    key = 'YES'\n    for i in range(b):\n        for j in range(2, i + 3):\n            if ls[i] % j != 0:\n                key == 'YES'\n                break\n            elif j == i + 2 and ls[i] % j == 0:\n                print('NO')\n                key = 'NO'\n                break\n        if key == 'NO':\n            break\n    if key == 'YES':\n        print(key)", "def solve(n, arr):\n    while n != 0:\n        for i in range(n - 1, -1, -1):\n            if arr[i] % (i + 2) != 0:\n                arr.pop(i)\n                n -= 1\n                break\n        else:\n            return 'NO'\n    return 'YES'\nt = int(input().strip())\nfor _ in range(t):\n    _n_ = int(input().strip())\n    _arr_ = [int(x) for x in input().strip().split()]\n    _result_ = solve(_n_, _arr_)\n    print(_result_)", "for s in [*open(0)][2::2]:\n    print('NYOE S'[all((any((int(x) % j for j in range(2, i))) for (i, x) in enumerate(s.split(), 3)))::2])", "t = int(input())\n\ndef ucln(a, b):\n    if a == 0:\n        return b\n    else:\n        return ucln(b % a, a)\nfor i in range(t):\n    n = int(input())\n    s1 = '0 '\n    s2 = input()\n    a = (s1 + s2).split()\n    kt = 0\n    for j in range(1, n + 1):\n        kt = 0\n        a[j] = int(a[j])\n        for g in range(2, j + 2):\n            if a[j] % g != 0:\n                kt = 1\n                break\n        if kt == 0:\n            print('NO')\n            break\n    if kt == 1:\n        print('YES')", "for s in [*open(0)][2::2]:\n    print('NYOE S'[all((any((int(x) % j for j in range(2, i))) for (i, x) in enumerate(s.split(), 3)))::2])", "for s in [*open(0)][2::2]:\n    print('NYOE S'[all((any((int(x) % j for j in range(2, min(24, i)))) for (i, x) in enumerate(s.split(), 3)))::2])", "import sys\n\ndef read_line():\n    return sys.stdin.readline()\ncases = int(read_line())\nfor _ in range(cases):\n    N = int(read_line())\n    arr = read_line().split()\n    num_arr = list(map(int, arr))\n    removable = 0\n    problem = 0\n    for i in range(len(num_arr)):\n        if num_arr[i] % (i + 2) != 0:\n            removable += 1\n            continue\n        found = 0\n        for r in range(1, removable + 1):\n            if num_arr[i] % (i + 2 - r) != 0:\n                removable += 1\n                found = 1\n                break\n        if found == 0:\n            problem = 1\n            break\n    if problem == 0:\n        print('YES')\n    else:\n        print('NO')", "for s in [*open(0)][2::2]:\n    print('NYOE S'[all((any((int(x) % j for j in range(2, min(24, i)))) for (i, x) in enumerate(s.split(), 3)))::2])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    yes = True\n    for i in range(n):\n        b = 0\n        if a[i] == 1:\n            b = 1\n        for j in range(1, a[i] + 2):\n            if a[i] % (j + 1) != 0:\n                b = j\n                break\n        if b > i + 1:\n            yes = False\n            break\n    print('YES' if yes else 'NO')", "for s in [*open(0)][2::2]:\n    print('NYOE S'[all((any((int(x) % j for j in range(2, i))) for (i, x) in enumerate(s.split(), 3)))::2])", "for s in [*open(0)][2::2]:\n    print('NYOE S'[all((any((int(x) % j for j in range(2, min(24, i)))) for (i, x) in enumerate(s.split(), 3)))::2])", "t = int(input())\nfor tc in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    solve = True\n    for i in range(1, n + 1):\n        num = a[i - 1]\n        numflag = False\n        if i >= 22:\n            numflag = True\n        else:\n            for j in range(2, i + 2):\n                if num % j != 0:\n                    numflag = True\n                    break\n        solve &= numflag\n    if solve:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    while a:\n        for i in range(len(a) - 1, -1, -1):\n            if a[i] % (i + 2):\n                del a[i]\n                break\n        else:\n            break\n    if a:\n        print('NO')\n    else:\n        print('YES')", "for w in range(int(input())):\n    a = int(input())\n    k = a\n    b = list(map(int, input().split()))\n    if b[0] % 2 == 0:\n        print('NO')\n    else:\n        for q in range(a):\n            for i in range(k):\n                if b[-1 - i] % (k - i + 1) != 0:\n                    b.pop(-1 - i)\n                    k -= 1\n                    break\n        if len(b) == 0:\n            print('YES')\n        else:\n            print('NO')", "def canDestroy(a, n):\n    while n > 0:\n        for (i, elem) in zip(range(n, -1, -1), reversed(a)):\n            if elem % (i + 1) != 0:\n                del a[i - 1]\n                break\n        if len(a) == n:\n            return False\n        else:\n            n = len(a)\n    return True\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = [x for x in map(int, input().split(' '))]\n        print('YES') if canDestroy(a, n) else print('NO')\nmain()", "for _ in range(int(input())):\n    size = int(input())\n    arr = list(map(int, input().split()))\n    while True:\n        if len(arr) == 0:\n            print('YES')\n            break\n        dif = 0\n        bad = 0\n        for ind in range(len(arr) - 1, -1, -1):\n            if arr[ind] % (ind + 2) != 0 and (not bad):\n                arr.pop(ind)\n                dif += 1\n            elif arr[ind] % (ind + 2) != 0:\n                arr.pop(ind)\n                dif += 1\n                break\n            else:\n                bad = 1\n        if dif == 0 and len(arr) != 0:\n            print('NO')\n            break", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a[0] % 2 == 0:\n        print('NO')\n        continue\n    while True:\n        thingy = False\n        for j in range(len(a) - 1, -1, -1):\n            if a[j] % (j + 2) != 0 or a[j] < j + 2:\n                a.pop(j)\n                thingy = True\n                break\n        if len(a) == 0:\n            print('YES')\n            break\n        if thingy == False:\n            print('NO')\n            break", "for _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    ok = True\n    for i in range(n):\n        f = False\n        for j in range(i + 2, 1, -1):\n            if A[i] % j:\n                f = True\n                break\n        ok &= f\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "from collections import *\nfor y in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    ans = 'YES'\n    for i in range(n):\n        f = 0\n        for j in range(2, i + 3):\n            if lst[i] % j != 0:\n                f = 1\n                break\n        if f == 0:\n            ans = 'NO'\n    print(ans)", "import math\n\ndef main_function():\n    test_cases = range(int(input()))\n    for test_case in test_cases:\n        n = int(input())\n        a = [int(u) for u in input().split(' ')]\n        ans_not_found = True\n        counter = [-1 for i in range(len(a))]\n        for i in range(len(a)):\n            real_counter = 0\n            targ_i = i + 2\n            while targ_i > 0 and a[i] % targ_i == 0:\n                real_counter += 1\n                targ_i -= 1\n            if targ_i > 0:\n                counter[i] = real_counter\n        if -1 in counter:\n            print('NO')\n        else:\n            print('YES')\nmain_function()", "for _ in range(int(input())):\n    n = int(input())\n    f = 0\n    l = list(map(int, input().split()))\n    ans = 1\n    c = 0\n    for i in range(1, n + 1):\n        c = 0\n        for j in range(i + 1, 1, -1):\n            if l[i - 1] % j:\n                c = 1\n                break\n        ans = c & ans\n    if ans == 1:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    q = []\n    i = n - 1\n    while i >= 0:\n        item = l.pop()\n        if item % (i + 2) == 0:\n            q.append((item, i))\n        elif len(q) > 0:\n            j = 0\n            while j < len(q) and q[j][0] % (q[j][1] + 1) != 0:\n                j += 1\n            for k in range(len(q) - 1, j - 1, -1):\n                l.append(q[k][0])\n                i += 1\n            q = []\n        i -= 1\n    print('YES' if len(l) <= 0 and len(q) <= 0 else 'NO')", "t = int(input())\nfor tc in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    solve = True\n    for i in range(1, n + 1):\n        num = a[i - 1]\n        numflag = False\n        for j in range(2, i + 2):\n            if num % j != 0:\n                numflag = True\n                break\n        solve &= numflag\n    if solve:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    (*a,) = map(int, input().split())\n    a = [0] + a\n    ans = True\n    for i in range(1, n + 1):\n        k = False\n        for j in range(i + 1, 1, -1):\n            if a[i] % j != 0:\n                k = True\n                break\n        ans &= k\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    ok = True\n    a = list(map(int, input().split()))\n    for i in range(1, n + 1):\n        found = False\n        for j in range(i + 1, 1, -1):\n            if a[i - 1] % j:\n                found = True\n                break\n        ok = ok & found\n    if ok:\n        print('YES')\n    else:\n        print('NO')"]