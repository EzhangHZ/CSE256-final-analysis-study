["from sys import stdin\ninput = stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    perms = []\n    for _ in range(n):\n        perms.append(list(input().split()))\n    start = None\n    if perms[0][0] == perms[1][0] or perms[0][0] == perms[2][0]:\n        start = perms[0][0]\n    else:\n        start = perms[1][0]\n    for perm in perms:\n        if perm[0] != start:\n            print(start + ' ' + ' '.join(perm))\n            break", "import sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    ans = []\n    l = []\n    for i in range(n):\n        l.append(sys.stdin.readline().split())\n    for i in range(n):\n        for j in range(i + 1, n):\n            if l[i][1] != l[j][1] or l[i][0] == l[j][0]:\n                continue\n            else:\n                temp = j - 1\n                if temp == i:\n                    temp = (j + 1) % n\n                if l[temp][0] == l[j][0]:\n                    ans = [l[j][0]] + l[i]\n                else:\n                    ans = [l[i][0]] + l[j]\n                break\n    print(' '.join(ans))", "m = []\nn = int(input())\nfor i in range(n):\n    k = int(input())\n    a = input()\n    b = a.split()[0]\n    c = 0\n    d = []\n    d.append(a)\n    for j in range(k - 1):\n        a1 = input()\n        if b != a1.split()[0]:\n            d.append(a1)\n            b1 = a1.split()[0]\n        else:\n            c = c + 1\n    if c == 0:\n        m.append(b1 + ' ' + d[0])\n    else:\n        m.append(b + ' ' + d[1])\nfor i in m:\n    print(i)", "import sys\ninput = sys.stdin.readline\ns = set()\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    if a[0] == b[0]:\n        corr = a[0]\n    elif b[0] == c[0]:\n        corr = b[0]\n    elif a[0] == c[0]:\n        corr = a[0]\n    if a[0] != corr:\n        for i in range(n - 3):\n            input()\n        print(str(corr), ' '.join(list(map(str, a))))\n    elif b[0] != corr:\n        for i in range(n - 3):\n            input()\n        print(str(corr), ' '.join(list(map(str, b))))\n    elif c[0] != corr:\n        for i in range(n - 3):\n            input()\n        print(str(corr), ' '.join(list(map(str, c))))\n    else:\n        for i in range(n - 3):\n            inp = list(map(int, input().split()))\n            if inp[0] != corr:\n                a = inp\n        print(str(corr), ' '.join(list(map(str, a))))", "import sys\ninput = sys.stdin.readline\nout = []\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        buf = [int(i) for i in input().split()]\n        a.append(buf)\n    p0 = [i[0] for i in a]\n    p0.sort()\n    if p0[0] == p0[1]:\n        (u, c) = (p0[-1], p0[0])\n    else:\n        (u, c) = (p0[0], p0[-1])\n    for i in a:\n        if i[0] == u:\n            ans = [c] + i\n            break\n    out.append(ans)\nfor i in out:\n    print(*i)", "def main():\n    test = int(input())\n    for _ in range(test):\n        n = int(input())\n        lst = []\n        i = 0\n        while i < n:\n            lst.append(input().split())\n            i += 1\n        i = 1\n        while i < len(lst):\n            if lst[i][0] != lst[i - 1][0]:\n                break\n            i += 1\n        answer = ''\n        if i == 1 and lst[1][0] == lst[2][0]:\n            answer = lst[i][0] + ' ' + ' '.join(lst[0])\n        else:\n            answer = lst[i - 1][0] + ' ' + ' '.join(lst[i])\n        print(answer)\nmain()", "def program():\n    n = int(input())\n    table = []\n    count_one = 0\n    count_two = 0\n    first_encounter = -1\n    scnd_encounter = -1\n    target = -1\n    for i in range(0, n):\n        table.append([int(x) for x in input().split()])\n        if i == 0:\n            first_encounter = table[i][0]\n            count_one = 1\n        elif table[i][0] == first_encounter:\n            count_one += 1\n        else:\n            scnd_encounter = table[i][0]\n            count_two = +1\n        if count_one != 0 and count_two != 0:\n            if count_one > count_two:\n                target = scnd_encounter\n            else:\n                target = first_encounter\n    for i in range(0, n):\n        if table[i][0] == target:\n            a = [str(x) for x in table[i]]\n            b = str(first_encounter)\n            c = str(scnd_encounter)\n            if count_one > count_two:\n                return b + ' ' + ' '.join(a)\n            else:\n                return c + ' ' + ' '.join(a)\n            break\nt = int(input())\nanswers = []\nfor i in range(0, t):\n    answers.append(program())\nfor i in answers:\n    print(i)", "import sys, math, cmath, time\nfrom bisect import bisect_left\nstart_time = time.time()\n\ndef solve():\n    n = inp()\n    a = []\n    for i in range(n):\n        l = [int(k) for k in inps()]\n        a.append(l)\n    k = a[0][0]\n    d = {}\n    for i in a:\n        d[i[0]] = d.get(i[0], 0) + 1\n    for i in a:\n        if d[i[0]] == 1:\n            ans = i\n    for i in d:\n        if d[i] > 1:\n            k = [i]\n    k.extend(ans)\n    for i in k:\n        print(i, end=' ')\n    print()\n\ndef main():\n    testcases = 1\n    testcases = inp()\n    for t in range(testcases):\n        solve()\n\ndef inp():\n    return int(input())\n\ndef inps():\n    return input().split()\nONLINE_JUDGE = __debug__\nif ONLINE_JUDGE:\n    input = sys.stdin.readline\nmain()", "import sys\n\ndef solve():\n    n = int(data.readline())\n    all = {k: 0 for k in range(1, n + 1)}\n    for _ in range(n):\n        row = list(map(int, data.readline().split()))\n        for (i, x) in enumerate(row):\n            all[x] += i\n    print(*sorted(all.keys(), key=lambda k: all[k]))\ndata = sys.stdin\ntotal_tests = int(data.readline())\nfor test in range(total_tests):\n    solve()", "def solve():\n    n = inp()\n    permSize = [0] * n\n    perm = []\n    for i in range(0, n):\n        permSize[i] = inp()\n        permList = []\n        for i in range(0, permSize[i]):\n            permList.append(inlt())\n        perm.append(permList)\n    for i in range(0, n):\n        miss = perm[i][0][0]\n        start = perm[i][1][0]\n        if miss == start:\n            for j in range(2, permSize[i]):\n                if perm[i][j][0] != start:\n                    break\n        elif start != perm[i][2][0]:\n            start = miss\n            miss = perm[i][1][0]\n            j = 1\n        else:\n            j = 0\n        print(start, end=' ')\n        print(' '.join(map(str, perm[i][j])))\n\ndef main():\n    solve()\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\nmain()", "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    arrs = []\n    for __ in range(N):\n        arrs.append(list(map(int, input().split())))\n    end = []\n    for i in range(N):\n        end.append(arrs[i][-1])\n    end = Counter(end)\n    end = sorted(end.items(), key=lambda x: x[1])\n    Min = end[0][0]\n    Max = end[1][0]\n    for i in range(N):\n        if arrs[i][-1] == Min:\n            result = arrs[i]\n            result.append(Max)\n            break\n    print(' '.join(map(str, result)))", "def solve(p):\n    v = [p[0][0], p[1][0], p[2][0]]\n    vb = v[0]\n    if v.count(vb) == 1:\n        vb = v[1]\n    for i in range(len(p)):\n        if p[i][0] != vb:\n            res = p[i].copy()\n            res.insert(0, vb)\n            return res\n    return []\nt = int(input())\nans = []\nfor ti in range(t):\n    n = int(input())\n    p = []\n    for ni in range(n):\n        p.append([int(x) for x in input().split()])\n    ans.append(solve(p))\nfor a in ans:\n    print(' '.join([str(x) for x in a]))", "def sol(n, l):\n    set1 = set()\n    start = ''\n    for a in range(3):\n        if l[a][0] in set1:\n            start = l[a][0]\n        set1.add(l[a][0])\n    if len(set1) == 3:\n        i = 0 if l[0][0] != start else 1\n        return start + ' '.join(l[i])\n    for a in l:\n        if a[0] != start:\n            return start + ' ' + ' '.join(a)\n    return None\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = []\n    for _ in range(n):\n        l.append(input().split())\n    print(sol(n, l))", "t = int(input())\nfor e in range(t):\n    n = int(input())\n    x = []\n    r = p = a = ''\n    for i in range(n):\n        q = input()\n        x.append(q)\n        if i < 3:\n            for w in x[i]:\n                if w != ' ' and i == 0:\n                    r += w\n                elif w != ' ' and i == 1:\n                    p += w\n                elif w != ' ' and i == 2:\n                    a += w\n                else:\n                    break\n    c = ''\n    if r == p:\n        c = r\n    elif p == a:\n        c = p\n    else:\n        c = a\n    u = ''\n    for i in x:\n        u = ''\n        for w in i:\n            if w != ' ':\n                u += w\n            else:\n                break\n        if u != c:\n            print(c + ' ' + i)\n            break", "t = int(input())\nfor i in range(t):\n    a = []\n    n = int(input())\n    for j in range(n):\n        a.append(input().split())\n    b = []\n    if a[0][0] == a[1][0] or a[0][0] == a[2][0]:\n        b.append(a[0][0])\n    elif a[1][0] == a[2][0]:\n        b.append(a[1][0])\n    for j in range(n - 1):\n        f = True\n        for k in range(n):\n            if a[k][j] != b[j]:\n                b.append(a[k][j])\n                f = False\n                break\n        if f:\n            b.append(b[j])\n    print(' '.join(b))", "import math\nimport sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    tree = []\n    for i in range(n):\n        tree.append([])\n    for i in range(n):\n        tree[i] = list(map(int, input().split()))\n    if tree[0][0] == tree[1][0]:\n        a = tree[0][0]\n        b = 0\n    elif tree[0][0] == tree[2][0]:\n        a = tree[0][0]\n        b = 0\n    else:\n        a = tree[1][0]\n        b = 1\n    for i in range(n):\n        if tree[i][0] != a:\n            ans = i\n            break\n    print(a, end=' ')\n    for i in range(n - 1):\n        print(tree[ans][i], end=' ')\n    print()", "def get(a):\n    b = ''\n    for x in a:\n        if x == ' ':\n            return b\n        else:\n            b = b + x\nfor x in range(int(input())):\n    y = int(input())\n    a = input()\n    b = input()\n    c = input()\n    e = True\n    if get(a) == get(b) and get(b) == get(c):\n        for z in range(y - 3):\n            d = input()\n            if e:\n                if get(d) != get(a):\n                    c = d\n                    e = False\n        print(get(a) + ' ' + c)\n    elif get(a) == get(b) and get(b) != get(c):\n        for z in range(y - 3):\n            d = input()\n        print(get(a) + ' ' + c)\n    elif get(a) == get(c) and get(b) != get(c):\n        for z in range(y - 3):\n            d = input()\n        print(get(a) + ' ' + b)\n    elif get(b) == get(c) and get(b) != get(a):\n        for z in range(y - 3):\n            d = input()\n        print(get(c) + ' ' + a)", "from math import pi\n\ndef sample():\n    n = int(input())\n    a = [input() for i in range(n)]\n    d = {}\n    for item in a:\n        first = item.split()[0]\n        if first not in d:\n            d.update({first: (0, item)})\n        d[first] = (d[first][0] + 1, d[first][1])\n    keys = list(d.keys())\n    if d[keys[0]][0] != n - 1:\n        keys.reverse()\n    print(d[keys[0]][1].split()[0] + ' ' + d[keys[1]][1])\nt = int(input())\nfor task in range(t):\n    sample()", "t = input()\nt = int(t)\nwhile t > 0:\n    t -= 1\n    n = input()\n    n = int(n)\n    c = []\n    d = {}\n    for i in range(n):\n        c.append(input().split())\n    for i in range(n):\n        a = c[i][0]\n        if d.get(a) == None:\n            d[a] = 1\n        else:\n            d[a] += 1\n    ans = []\n    for i in d:\n        if d[i] == 1:\n            for j in range(n):\n                if c[j][0] == i:\n                    ans = ans + c[j]\n        else:\n            ans = [i] + ans\n    print(' '.join(ans))", "for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        temp = input().split(' ')\n        arr.append(temp)\n    ans = []\n    temp = arr[0][0]\n    curr = temp\n    if arr[1][0] != temp and arr[2][0] != temp:\n        curr = arr[1][0]\n    ans.append(curr)\n    for i in range(n - 1):\n        for j in range(n):\n            if arr[j][i] != curr:\n                curr = arr[j][i]\n                ans.append(curr)\n                break\n    print(' '.join(ans))", "import sys\nfrom math import *\nfrom collections import defaultdict, deque\ninput = sys.stdin.readline\nmod = 10 ** 9 + 7\nINF = 1061109567\nN = int(2 * 10 ** 5 + 5)\nLINF = 4557430888798830399\n\ndef solve():\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    cnt = [0] * (n + 1)\n    (num, idx) = (0, 0)\n    for i in range(n):\n        cnt[a[i][0]] += 1\n        if cnt[a[i][0]] >= idx:\n            idx = cnt[a[i][0]]\n            num = a[i][0]\n    for i in range(n):\n        if a[i][0] != num:\n            print(num, end=' ')\n            for j in range(n - 1):\n                print(a[i][j], end=' ')\n            print()\n            break\nT = int(input())\nfor t in range(T):\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef solve_c():\n    answ = []\n    perms = {}\n    n = int(input())\n    for i in range(n):\n        perm = list(map(int, input().split()))\n        for j in range(n - 1):\n            val = perm[j]\n            if j not in perms:\n                perms[j] = [[val, 1]]\n            else:\n                mas = perms[j]\n                if mas[0][0] == val:\n                    mas[0][1] += 1\n                elif len(mas) == 1:\n                    mas.append([val, 1])\n                else:\n                    mas[1][1] += 1\n    val = 0\n    a = perms[0][0][1]\n    b = perms[0][1][1]\n    if a > b:\n        val = perms[0][0][0]\n    else:\n        val = perms[0][1][0]\n    answ.append(val)\n    for i in range(n - 1):\n        mas = perms[i]\n        if mas[0][0] == answ[i]:\n            answ.append(mas[1][0])\n        else:\n            answ.append(mas[0][0])\n    return answ\n\ndef main():\n    for _ in range(int(input())):\n        answ = solve_c()\n        print(*answ)\nmain()", "t = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    res = sorted((input().strip().split(maxsplit=1) for _ in range(n)))\n    if res[0][0] == res[1][0]:\n        print(res[0][0], res[-1][0], res[-1][1])\n    else:\n        print(res[1][0], res[0][0], res[0][1])", "def main():\n    _i = int(input())\n    for _ in range(_i):\n        n = int(input().strip('\\r\\n'))\n        a1 = [int(x) for x in input().strip('\\r\\n').split()]\n        a2 = [int(x) for x in input().strip('\\r\\n').split()]\n        skip = 2\n        if a1[0] == a2[0]:\n            a3 = list(a2)\n            while a3[0] == a2[0]:\n                a3 = [int(x) for x in input().strip('\\r\\n').split()]\n                skip += 1\n        else:\n            a3 = [int(x) for x in input().strip('\\r\\n').split()]\n            skip += 1\n        for _ in range(n - skip):\n            _ = [int(x) for x in input().strip('\\r\\n').split()]\n        if a1[0] == a2[0]:\n            res = [a1[0]] + a3\n        elif a1[0] == a3[0]:\n            res = [a1[0]] + a2\n        else:\n            res = [a2[0]] + a1\n        print(' '.join([str(x) for x in res]))\nmain()", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    lists = []\n    for i in range(0, n):\n        lists.append([num for num in input().split()])\n    last1 = lists[0][n - 2]\n    last2 = lists[1][n - 2]\n    last3 = lists[2][n - 2]\n    if last1 == last2:\n        last = str(last1)\n    elif last1 == last3:\n        last = str(last1)\n    else:\n        last = str(last2)\n    for list1 in lists:\n        if list1[n - 2] != last:\n            s = ''\n            for num in list1:\n                s += str(num) + ' '\n            s += str(last)\n            break\n    print(s)", "def solve():\n    number_of_them = int(input())\n    vals = []\n    for i in range(number_of_them):\n        vals.append([int(_) for _ in input().split()])\n    first_element = {}\n    what_we_are_looking_for = None\n    for i in range(3):\n        element = vals[i][0]\n        if element in first_element:\n            what_we_are_looking_for = element\n            break\n        else:\n            first_element[element] = 1\n    i = 0\n    while i < number_of_them:\n        if vals[i][0] == what_we_are_looking_for:\n            i += 1\n        else:\n            return [what_we_are_looking_for] + vals[i]\n    return []\nn = int(input())\nfor j in range(n):\n    res = solve()\n    print(' '.join([str(_) for _ in res]))", "testcases = int(input())\nfor i in range(testcases):\n    n = int(input())\n    perm = list()\n    for j in range(2):\n        inp = list(map(int, input().split()))\n        perm.append(inp)\n        if j == 0:\n            first_0 = inp[0]\n        if j == 1:\n            first_1 = inp[0]\n            if first_0 == first_1:\n                start_found = True\n                start = first_0\n                for j in range(2, n):\n                    inp = list(map(int, input().split()))\n                    if inp[0] != start:\n                        output = [start] + inp\n            else:\n                start_found = False\n                inp = list(map(int, input().split()))\n                if inp[0] == first_0:\n                    output = [first_0] + perm[1]\n                else:\n                    output = [first_1] + perm[0]\n                for j in range(3, n):\n                    inp = list(map(int, input().split()))\n    print(' '.join(map(str, output)))", "for _ in range(int(input())):\n    n = int(input())\n    matrix = []\n    matrix.append(list(input().split()))\n    (a, b) = (matrix[0][0], 0)\n    (a_freq, b_freq) = (1, 0)\n    for i in range(n - 1):\n        matrix.append(list(input().split()))\n        if matrix[-1][0] == a:\n            a_freq += 1\n        else:\n            b = matrix[-1][0]\n            b_freq += 1\n    first_ele = a if a_freq > b_freq else b\n    for i in range(n):\n        if matrix[i][0] != first_ele:\n            seq = ' '.join(matrix[i])\n    seq = first_ele + ' ' + seq\n    print(seq)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    (l, l1) = ([], [])\n    for i in range(n):\n        s = list(map(int, input().split()))\n        l.append(s)\n        l1.append(l[i][0])\n    u = list(set(l1))\n    a = {}\n    for i in u:\n        a[i] = l1.count(i)\n    m = max(a, key=a.get)\n    s1 = [m]\n    for i in range(n):\n        if l[i][0] != m:\n            for i in l[i]:\n                s1.append(i)\n            break\n    for i in s1:\n        print(i, end=' ')\n    print()\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    res = sorted((input().split(maxsplit=1) for _ in range(n)))\n    if res[0][0] == res[1][0]:\n        print(res[0][0], res[-1][0], res[-1][1])\n    else:\n        print(res[1][0], res[0][0], res[0][1])", "def solve():\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        t = list(map(int, input().split()))\n        arr.append(t)\n    ff = []\n    for i in range(3):\n        ff.append(arr[i][0])\n    ff.sort()\n    firstval = ff[1]\n    for i in range(n):\n        if arr[i][0] != firstval:\n            print(firstval, *arr[i])\n            break\nfor _ in range(int(input())):\n    solve()", "for sol in range(int(input())):\n    d = dict()\n    ans = ''\n    n = int(input())\n    for i in range(n):\n        lst = input().split()\n        if lst[0] in d:\n            d[lst[0]][0] += 1\n        else:\n            d[lst[0]] = [1, lst]\n    p = []\n    for el in d.keys():\n        p.append(d[el])\n    if p[0][0] < p[1][0]:\n        print(str(p[1][1][0]), end=' ')\n        for el in p[0][1]:\n            print(el, end=' ')\n        print()\n    else:\n        print(str(p[0][1][0]), end=' ')\n        for el in p[1][1]:\n            print(el, end=' ')\n        print()", "def check(line1, lines):\n    for line2 in lines:\n        x = line1.index(list(set(line1) - set(line2))[0])\n        if line1[:x] + line1[x + 1:] != line2:\n            return False\n    return True\nans = []\nfor t in range(int(input())):\n    n = int(input())\n    line = input().split()\n    lines = [input().split() for _ in range(n - 1)]\n    num = list(set(map(str, range(1, len(line) + 2))) - set(line))\n    for i in range(len(line) + 1):\n        line1 = line[:i] + num + line[i:]\n        if check(line1, lines):\n            ans.append(' '.join(line1))\n            break\nprint('\\n'.join(ans))", "first = 0\nfor i in range(int(input())):\n    n = int(input())\n    spisok = [list(map(int, input().split())) for i in range(n)]\n    if spisok[0][0] == spisok[1][0]:\n        first = spisok[0][0]\n    else:\n        first = spisok[2][0]\n    for i in range(n):\n        if spisok[i][0] != first:\n            print(first, *spisok[i])", "n = int(input())\nfor _ in range(n):\n    m = int(input())\n    vals = [list(map(int, input().split())) for _ in range(m)]\n    if vals[0][0] == vals[1][0]:\n        for x in vals:\n            if x[0] != vals[0][0]:\n                r = [vals[0][0]] + x\n    elif vals[1][0] == vals[2][0]:\n        r = [vals[1][0]] + vals[0]\n    else:\n        r = [vals[0][0]] + vals[1]\n    t = ''\n    for x in r:\n        t = t + str(x) + ' '\n    print(t[:-1])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = []\n    for i in range(n):\n        a = list(map(int, input().split()))\n        l.append(a)\n    l.sort()\n    f = l[1][0]\n    if f == l[0][0]:\n        ans = l[-1]\n        ans.insert(0, f)\n    else:\n        ans = l[0]\n        ans.insert(0, f)\n    for i in range(n - 1):\n        print(ans[i], end=' ')\n    print(ans[-1])", "t = int(input())\nfor ncase in range(1, t + 1):\n    n = int(input())\n    s = []\n    for i in range(n):\n        s.append([int(i) for i in input().split(' ')])\n    ans = []\n    if s[0][0] == s[1][0]:\n        ans.append(s[0][0])\n    else:\n        ans.append(s[2][0])\n    for i in range(n):\n        if s[i][0] != ans[0]:\n            ans += s[i]\n    print(' '.join([str(i) for i in ans]))", "import sys\n\ndef main():\n    tc = int(input())\n    for _ in range(tc):\n        n = int(input())\n        arr = [[int(a) for a in input().split()] for i in range(n)]\n        ini = arr[0][0]\n        j = n - 1\n        for i in range(1, n):\n            if ini == arr[i][0]:\n                j = i\n            elif ini != arr[i][0]:\n                break\n        ans = []\n        ans.append(arr[j][0])\n        if ini == arr[j][0]:\n            ans += arr[i]\n        else:\n            ans += arr[0]\n        print(*ans)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    perms = []\n    for _ in range(n):\n        l = list(map(int, input().split()))\n        perms.append(l)\n    perms.sort()\n    if perms[0][0] == perms[1][0]:\n        print(perms[0][0], *perms[-1])\n    else:\n        print(perms[1][0], *perms[0])", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    perms = []\n    for _ in range(n):\n        l = list(map(int, input().split()))\n        perms.append(l)\n    perms.sort()\n    if perms[0][0] == perms[1][0]:\n        print(perms[0][0], *perms[-1])\n    else:\n        print(perms[1][0], *perms[0])\n    t = t - 1", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (a, b, *_, c) = sorted((R() for _ in [0] * R()[0]))\n    print(*(c[:1] + a, a[:1] + c)[a[0] == b[0]])", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    l = []\n    for _ in range(n):\n        l.append([i for i in input().split(' ')])\n    i = 0\n    for i in range(n - 1):\n        if not l[i][n - 2] == l[i + 1][n - 2]:\n            break\n    if i < n - 2:\n        if l[i][n - 2] == l[i + 2][n - 2]:\n            l[i + 1].append(l[i][n - 2])\n            print(*l[i + 1])\n        if l[i + 1][n - 2] == l[i + 2][n - 2]:\n            l[i].append(l[i + 1][n - 2])\n            print(*l[i])\n    else:\n        if l[i][n - 2] == l[i - 1][n - 2]:\n            l[i + 1].append(l[i][n - 2])\n            print(*l[i + 1])\n        if l[i + 1][n - 2] == l[i - 1][n - 2]:\n            l[i].append(l[i + 1][n - 2])\n            print(*l[i])", "for i in range(int(input())):\n    n = int(input())\n    total = []\n    for j in range(n):\n        total.append([int(x) for x in input().split()])\n    if total[0][0] == total[1][0] or total[0][0] == total[2][0]:\n        first = total[0][0]\n    else:\n        first = total[1][0]\n    for j in range(n):\n        if total[j][0] != first:\n            print(first, *total[j])\n            break", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    count = 0\n    work = 0\n    for j in range(n):\n        numbers = [int(num) for num in input().split(' ', n - 2)]\n        if work == 0:\n            if j == 0:\n                k1 = numbers[0]\n                ans1 = numbers\n            elif j == 1 and numbers[0] != k1:\n                k2 = numbers[0]\n                ans2 = numbers\n                count += 1\n            elif j == 2 and count == 1 and (numbers[0] != k1):\n                ans1.insert(0, k2)\n                print(' '.join([str(elem) for elem in ans1]))\n                work = 1\n            elif j == 2 and count == 1 and (numbers[0] == k1):\n                ans2.insert(0, k1)\n                print(' '.join([str(elem) for elem in ans2]))\n                work = 1\n            elif numbers[0] != k1:\n                numbers.insert(0, k1)\n                print(' '.join([str(elem) for elem in numbers]))\n                work = 1", "def func():\n    n = int(input())\n    lt = []\n    for i in range(n):\n        lt.append(list(map(int, input().split())))\n    ans = lt[0]\n    a = n * (n + 1) // 2 - sum(ans)\n    mn = n\n    mx = 0\n    for i in range(1, n):\n        for j in range(n - 1):\n            if lt[i][j] == a:\n                mn = min(mn, j)\n                mx = max(mx, j)\n    if mx == 0:\n        ans.insert(0, a)\n    else:\n        ans.insert(mn + 1, a)\n    print(' '.join(map(str, ans)))\nfor i in range(int(input())):\n    func()", "def solve():\n    n = int(input())\n    l = []\n    for i in range(n):\n        a = list(map(int, input().split()))\n        l.append(a)\n    ans = []\n    fuck = []\n    for i in range(len(l)):\n        fuck.append(l[i][0])\n    suck = list(set(fuck))\n    a = 0\n    if fuck.count(suck[0]) == 1:\n        a = suck[1]\n        for i in range(len(fuck)):\n            if fuck[i] == suck[0]:\n                ans = l[i]\n                break\n    else:\n        a = suck[0]\n        for i in range(len(fuck)):\n            if fuck[i] == suck[1]:\n                ans = l[i]\n                break\n    print(a, *ans)\nfor _ in range(int(input())):\n    solve()", "def yj(m):\n    n1 = dict()\n    for i in range(3):\n        n1[m[i][0]] = n1.get(m[i][0], 0) + 1\n    k = 0\n    for i in n1.items():\n        if i[1] > 1:\n            k = i[0]\n            break\n    s = 0\n    for i in m:\n        if i[0] != k:\n            s = i\n            break\n    return [k] + s\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    m = []\n    for i in range(n):\n        m.append(list(map(int, input().split())))\n    print(*yj(m))", "def solution(n, seq, fir):\n    (maxi, mini) = (max(fir), min(fir))\n    ind1 = fir.index(maxi)\n    ind2 = fir.index(mini)\n    if fir.count(maxi) > 1:\n        res = [maxi] + seq[ind2]\n    else:\n        res = [mini] + seq[ind1]\n    print(' '.join(map(str, res)))\n    return\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    seq = []\n    fir = []\n    for i in range(n):\n        s = list(map(int, input().split()))\n        seq.append(s)\n        fir.append(s[0])\n    solution(n, seq, fir)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = [None] * n\n    for i in range(n):\n        l[i] = list(map(int, input().split()))\n    a = l[0][0]\n    count = 1\n    for i in range(1, len(l)):\n        if l[i][0] == a:\n            count += 1\n        else:\n            b = i\n    if count == 1:\n        a = l[1][0]\n        b = 0\n    output = str(a)\n    for i in range(len(l[b])):\n        output += ' '\n        output += str(l[b][i])\n    print(output)", "for t in range(int(input())):\n    n = int(input())\n    num_list = []\n    fir = []\n    for i in range(n):\n        a = input().split()\n        num_list.append(a)\n        fir.append(a[0])\n    fir.sort()\n    ans = ['0'] * n\n    if fir.count(fir[0]) > fir.count(fir[-1]):\n        ans[0] = fir[0]\n    else:\n        ans[0] = fir[-1]\n    for i in range(n - 1):\n        c = []\n        for j in num_list:\n            if j[i] != ans[i]:\n                ans[i + 1] = j[i]\n    print(*ans)", "t = int(input())\nfor i in range(t):\n    s = int(input())\n    a = []\n    b = []\n    k = 0\n    x = []\n    for j in range(s):\n        z = list(map(int, input().split()))\n        b.append(z)\n        a.append(z[0])\n        if j >= 2 and a.count(z[0]) == 1 and (k == 0):\n            k = z[0]\n            x = b[-1]\n    if k != 0:\n        print(a[0], *x)\n    elif a.count(a[0]) == 1:\n        print(a[1], *b[0])\n    else:\n        print(a[0], *b[1])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    for j in range(n):\n        tmp = list(input().split(' '))\n        a.append(tmp)\n    b = a[0][n - 2]\n    if a[1][n - 2] == b:\n        last = b\n    else:\n        last = a[2][n - 2]\n    for k in range(n):\n        if a[k].count(last) == 0:\n            for ii in range(n - 1):\n                print(a[k][ii], end=' ')\n            print(last)\n            break", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    perms = []\n    for _ in range(n):\n        l = list(map(int, input().split()))\n        perms.append(l)\n    perms.sort()\n    if perms[0][0] == perms[1][0]:\n        print(perms[0][0], *perms[-1])\n    else:\n        print(perms[1][0], *perms[0])\n    t = t - 1", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (a, b, *_, c) = sorted((R() for _ in [0] * R()[0]))\n    print(*(c[:1] + a, a[:1] + c)[a[0] == b[0]])", "for jj in range(int(input())):\n    n = int(input())\n    grid = []\n    for i in range(n):\n        a = [int(i) for i in input().split()]\n        grid.append(a)\n    if grid[0][0] == grid[1][0]:\n        for j in range(2, n):\n            if grid[j][0] != grid[0][0]:\n                print(*[grid[0][0]] + grid[j])\n                break\n    elif grid[2][0] == grid[0][0]:\n        print(*[grid[2][0]] + grid[1])\n    else:\n        print(*[grid[2][0]] + grid[0])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    count = [0] * (n + 1)\n    for pi in p:\n        count[pi[0]] += 1\n    f = count.index(max(count))\n    print(f, end=' ')\n    for pi in p:\n        if pi[0] != f:\n            print(*pi)", "n = int(input())\nfor i in range(n):\n    nn = int(input())\n    res = []\n    tres_listas = []\n    primer_numero = 0\n    for j in range(3):\n        tres_listas.append([int(k) for k in input().split()])\n    if tres_listas[0][0] == tres_listas[1][0] and tres_listas[0][0] != tres_listas[2][0]:\n        primer_numero = tres_listas[0][0]\n        res = [primer_numero] + tres_listas[2]\n    elif tres_listas[0][0] == tres_listas[1][0]:\n        primer_numero = tres_listas[0][0]\n    elif tres_listas[0][0] == tres_listas[2][0]:\n        primer_numero = tres_listas[0][0]\n        res = [primer_numero] + tres_listas[1]\n    else:\n        primer_numero = tres_listas[1][0]\n        res = [primer_numero] + tres_listas[0]\n    for j in range(3, nn):\n        lista = [int(k) for k in input().split()]\n        if lista[0] != primer_numero:\n            res = [primer_numero] + lista\n    res = [str(i) for i in res]\n    print(' '.join(res))", "cases = int(input())\nfor i in range(cases):\n    n = int(input())\n    p = []\n    for j in range(n):\n        p.append(list(map(int, input().split())))\n    p.sort()\n    if p[0][0] == p[1][0]:\n        print(p[0][0], *p[n - 1])\n    else:\n        print(p[1][0], *p[0])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n    if a[0][0] == a[1][0] or a[0][0] == a[2][0]:\n        x = a[0][0]\n    else:\n        x = a[1][0]\n    k = 0\n    while a[k][0] == x:\n        k += 1\n    ans = a[k]\n    print(str(x) + ' ' + ' '.join(map(str, ans)))", "K = lambda : [*map(int, input().split())]\nfor _ in [0] * K()[0]:\n    (a, b, *_, c) = sorted((K() for _ in [0] * K()[0]))\n    print(*(c[:1] + a, a[:1] + c)[a[0] == b[0]])", "def ii(num=False):\n    i = input().split()\n    if num:\n        return int(i[0])\n    try:\n        return list(map(int, i))\n    except Exception:\n        return i\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nfor _ in range(ii(1)):\n    n = ii(1)\n    matrix = []\n    for i in range(n):\n        matrix.append(ii())\n    if matrix[0][0] != matrix[1][0] and matrix[1][0] == matrix[2][0]:\n        print(matrix[1][0], *matrix[0])\n    else:\n        first = matrix[0][0]\n        for i in range(n):\n            if matrix[i][0] != first:\n                print(first, *matrix[i])\n                break", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    count = [0] * (n + 1)\n    for pi in p:\n        count[pi[0]] += 1\n    f = count.index(max(count))\n    print(f, end=' ')\n    for pi in p:\n        if pi[0] != f:\n            print(*pi)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    count = [0] * (n + 1)\n    for pi in p:\n        count[pi[0]] += 1\n    f = count.index(max(count))\n    print(f, end=' ')\n    for pi in p:\n        if pi[0] != f:\n            print(*pi)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    count = [0] * (n + 1)\n    for pi in p:\n        count[pi[0]] += 1\n    f = count.index(max(count))\n    print(f, end=' ')\n    for pi in p:\n        if pi[0] != f:\n            print(*pi)", "T = int(input())\nfor tc in range(T):\n    n = int(input())\n    x = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        x.append(l)\n    x.sort()\n    if x[0][0] == x[1][0]:\n        print(x[0][0], *x[-1])\n    else:\n        print(x[1][0], *x[0])", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    perms = []\n    for _ in range(n):\n        l = list(map(int, input().split()))\n        perms.append(l)\n    perms.sort()\n    if perms[0][0] == perms[1][0]:\n        print(perms[0][0], *perms[-1])\n    else:\n        print(perms[1][0], *perms[0])\n    t = t - 1", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    a.sort()\n    if a[0][0] == a[1][0]:\n        print(a[0][0], *a[-1])\n    else:\n        print(a[1][0], *a[0])", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a += [list(map(int, input().split()))]\n    a.sort()\n    if a[0][0] == a[1][0]:\n        print(a[0][0], *a[-1])\n    else:\n        print(a[-1][0], *a[0])", "for i in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    f = c[0]\n    count = 1\n    sum = 0\n    for i in range(n - 1):\n        a = list(map(int, input().split()))\n        if a[0] == f:\n            count += 1\n            b = a\n        else:\n            sum += 1\n            d = a\n    if count > sum:\n        print(f, ' '.join(list(map(str, d))))\n    else:\n        print(d[0], ' '.join(list(map(str, c))))", "from collections import defaultdict\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        rec = defaultdict(list)\n        seqs = []\n        for _ in range(n):\n            seqs.append(list(map(int, input().split())))\n            rec[seqs[-1][0]].append(len(seqs) - 1)\n        (ans, idx) = ([], -1)\n        for (k, v) in rec.items():\n            if len(v) == 1:\n                idx = v[0]\n            else:\n                ans.append(k)\n        ans.extend(seqs[idx])\n        print(' '.join(map(str, ans)))\nmain()", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (a, b, *_, c) = sorted((R() for _ in [0] * R()[0]))\n    print(*(c[:1] + a, a[:1] + c)[a[0] == b[0]])", "for t in range(int(input())):\n    n = int(input())\n    l = []\n    d = {}\n    while n > 0:\n        nums = list(map(int, input().split()))\n        d[n, nums[0]] = nums\n        l.append(nums[0])\n        n -= 1\n    l = sorted(l)\n    if l.count(l[0]) > 1:\n        f = l[0]\n        s = l[-1]\n    else:\n        f = l[-1]\n        s = l[0]\n    for key in d:\n        if key[1] == s:\n            l = [f]\n            l.extend(d[key])\n            break\n    l = [str(num) for num in l]\n    s = ' '.join(l)\n    print(s)", "a = int(input())\nfor i in range(a):\n    b = int(input())\n    m = list(map(int, input().split()))\n    n = list(map(int, input().split()))\n    pnt = 0\n    if m[0] != n[0] and m[1] != n[1] and (pnt == 0):\n        if m[0] == n[1]:\n            print(n[0], *m)\n            pnt = 1\n        else:\n            print(m[0], *n)\n            pnt = 1\n    for j in range(b - 2):\n        g = list(map(int, input().split()))\n        if m[0] != g[0] and m[1] != g[1] and (pnt == 0):\n            if m[0] == g[1]:\n                print(g[0], *m)\n                pnt = 1\n            else:\n                print(m[0], *g)\n                pnt = 1\n        elif n[0] != g[0] and n[1] != g[1] and (pnt == 0):\n            if n[0] == g[1]:\n                print(g[0], *n)\n                pnt = 1\n            else:\n                print(n[0], *g)\n                pnt = 1", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (a, b, *_, c) = sorted((R() for _ in [0] * R()[0]))\n    print(*(c[:1] + a, a[:1] + c)[a[0] == b[0]])", "R = lambda : [*map(int, input().split())]\nfor _ in [0] * R()[0]:\n    (a, b, *_, c) = sorted((R() for _ in [0] * R()[0]))\n    print(*(c[:1] + a, a[:1] + c)[a[0] == b[0]])", "for _ in range(int(input())):\n    n = int(input())\n    res = []\n    cnt = [0] * n\n    p = []\n    ans = []\n    for i in range(n):\n        k = [int(i) for i in input().split()]\n        if k[0] not in p:\n            res.append(k)\n            p.append(k[0])\n        cnt[k[0] - 1] += 1\n    k = cnt.index(max(cnt)) + 1\n    if res[0][0] == k:\n        print(res[0][0], end=' ')\n        print(*res[1])\n    else:\n        print(res[1][0], end=' ')\n        print(*res[0])", "for __ in range(int(input())):\n    (l, head) = ([], [])\n    for _ in range(int(input())):\n        l.append(list(map(int, input().split())))\n        head.append(l[-1][0])\n    s = sorted(head)\n    if s[0] != s[1]:\n        i = head.index(s[0])\n        print(s[1], end=' ')\n        print(*l[i])\n    elif s[-2] != s[-1]:\n        i = head.index(s[-1])\n        print(s[0], end=' ')\n        print(*l[i])", "import math\nimport sys\ninput = sys.stdin.readline\nimport heapq\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nfor _ in range(inp()):\n    n = int(input())\n    ans = []\n    datas = []\n    nota = {}\n    for i in range(n):\n        datas.append(inlt())\n    for i in range(n - 1):\n        data = {}\n        for j in range(n):\n            if j in nota:\n                continue\n            if datas[j][i] in data:\n                data[datas[j][i]][0] += 1\n            else:\n                data[datas[j][i]] = [1, j]\n        kons = list(data.keys())\n        if data[kons[0]][0] == 1 and data[kons[1]][0] == 1:\n            notar = list(nota.keys())[0]\n            ans += [datas[notar][-2], datas[notar][-1]]\n            continue\n        for k in data:\n            if data[k][0] > 1:\n                ans.append(k)\n            else:\n                nota[data[k][1]] = k\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    i = 2\n    v1 = l1[0]\n    v2 = l2[0]\n    f = 0\n    if v1 == v2:\n        f = 1\n    f1 = 0\n    while n - i:\n        l = list(map(int, input().split()))\n        if f1 == 0:\n            if f == 1:\n                if l[0] != v1:\n                    r = [v1] + l\n                    f1 = 1\n            else:\n                if l[0] != v1:\n                    r = [l[0]] + l1\n                else:\n                    r = [l[0]] + l2\n                f1 = 1\n        i += 1\n    print(*r)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    li = []\n    ans_li = []\n    for _ in range(n):\n        arr = list(map(int, input().split()))\n        li.append(arr)\n    li_sorted = sorted(li, key=lambda x: x[0])\n    if li_sorted[0][0] == li_sorted[1][0] and li_sorted[0][0] != li_sorted[-1][0]:\n        ans_li.append(li_sorted[0][0])\n        ans_li.append(li_sorted[-1])\n    else:\n        ans_li.append(li_sorted[-1][0])\n        ans_li.append(li_sorted[0])\n    print(ans_li[0], *ans_li[1], end=' ')\n    print()", "from collections import defaultdict\nt = int(input())\nres = []\nfor _ in range(t):\n    n = int(input())\n    seq = []\n    real = []\n    freq = defaultdict(int)\n    for i in range(n):\n        a = list(map(int, input().split()))\n        freq[a[0]] += 1\n        seq.append(a)\n    vals = sorted(freq.items(), key=lambda kv: kv[1])\n    real.append(vals[1][0])\n    real.append(vals[0][0])\n    for j in range(1, n - 1):\n        for i in range(n):\n            if seq[i][j] not in real:\n                real.append(seq[i][j])\n                break\n    res.append(real)\nfor i in res:\n    print(*i)", "for t in range(int(input())):\n    n = int(input())\n    num_list = []\n    fir = []\n    for i in range(n):\n        a = input().split()\n        num_list.append(a)\n        fir.append(a[0])\n    fir.sort()\n    ans = ['0'] * n\n    if fir.count(fir[0]) > fir.count(fir[-1]):\n        ans[0] = fir[0]\n    else:\n        ans[0] = fir[-1]\n    for i in range(n - 1):\n        c = []\n        for j in num_list:\n            if j[i] != ans[i]:\n                ans[i + 1] = j[i]\n    print(*ans)", "for t in range(int(input())):\n    n = int(input())\n    num_list = []\n    fir = []\n    for i in range(n):\n        a = input().split()\n        num_list.append(a)\n        fir.append(a[0])\n    fir.sort()\n    ans = ['0'] * n\n    if fir.count(fir[0]) > fir.count(fir[-1]):\n        ans[0] = fir[0]\n    else:\n        ans[0] = fir[-1]\n    for i in range(n - 1):\n        c = []\n        for j in num_list:\n            if j[i] != ans[i]:\n                ans[i + 1] = j[i]\n    print(*ans)", "t = int(input())\nwhile t > 0:\n    per = []\n    first = []\n    n = int(input())\n    for i in range(n):\n        tmp = list(map(int, input().split()))\n        first.append(tmp[0])\n        per.append(tmp)\n    first2 = first.copy()\n    first2.sort()\n    if first2[0] != first2[1]:\n        x = first2[1]\n        ind = first.index(first2[0])\n    else:\n        x = first2[0]\n        ind = first.index(first2[-1])\n    first2 = []\n    print(x, *per[ind])\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    if l1[0] == l2[0]:\n        for i in range(n - 2):\n            l = list(map(int, input().split()))\n            if l[0] != l1[0]:\n                print(l1[0], end=' ')\n                for j in range(n - 1):\n                    if j == n - 2:\n                        print(l[j])\n                    else:\n                        print(l[j], end=' ')\n    else:\n        l = list(map(int, input().split()))\n        if l[0] == l1[0]:\n            print(l1[0], end=' ')\n            for j in range(n - 1):\n                if j == n - 2:\n                    print(l2[j])\n                else:\n                    print(l2[j], end=' ')\n        else:\n            print(l[0], end=' ')\n            for j in range(n - 1):\n                if j == n - 2:\n                    print(l1[j])\n                else:\n                    print(l1[j], end=' ')\n        for k in range(n - 3):\n            l = list(map(int, input().split()))", "for t in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        p = [int(x) for x in input().rstrip().split()]\n        l.append(p)\n    l.sort()\n    f = l[1][0]\n    if f == l[0][0]:\n        ans = l[-1]\n        ans.insert(0, f)\n    else:\n        ans = l[0]\n        ans.insert(0, f)\n    for i in range(0, n - 1):\n        print(ans[i], end=' ')\n    print(ans[-1])", "for _ in range(int(input())):\n    lth = int(input())\n    matrix = []\n    for __ in range(lth):\n        matrix.append(list(map(int, input().split())))\n    if matrix[0][0] == matrix[1][0]:\n        lhs = matrix[0][0]\n    else:\n        lhs = matrix[2][0]\n    for i in range(lth):\n        if matrix[i][0] != lhs:\n            print(lhs, *matrix[i])", "for _ in range(int(input())):\n    lth = int(input())\n    matrix = []\n    for __ in range(lth):\n        matrix.append(list(map(int, input().split())))\n    if matrix[0][0] == matrix[1][0]:\n        lhs = matrix[0][0]\n    else:\n        lhs = matrix[2][0]\n    for i in range(lth):\n        if matrix[i][0] != lhs:\n            print(lhs, *matrix[i])", "from math import gcd\nfrom sys import setrecursionlimit\nsetrecursionlimit(10 ** 6)\n\ndef ye():\n    print('Yes')\n\ndef no():\n    print('NO')\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    A = a[-1]\n    B = b[-1]\n    C = c[-1]\n    S = 0\n    s = []\n    fl = 0\n    if A == B:\n        S = A\n        if C != A:\n            fl = 1\n            s = c\n    elif A == C:\n        S = A\n        fl = 1\n        s = b\n    else:\n        S = B\n        fl = 1\n        s = a\n    for i in range(3, n):\n        now = list(map(int, input().split()))\n        if fl:\n            continue\n        if now[-1] != S:\n            s = now\n            fl = 1\n    for i in range(n - 1):\n        print(s[i], end=' ')\n    print(S)\n    return\nTT_T = int(input())\nwhile TT_T:\n    solve()\n    TT_T -= 1", "def one():\n    n = int(input())\n    t = []\n    for i in range(n):\n        t.append(list(map(int, input().split())))\n    if t[0][0] != t[1][0] == t[2][0]:\n        print(t[1][0], *t[0])\n    else:\n        x = t[0][0]\n        for i in range(1, n):\n            if t[i][0] != x:\n                print(x, *t[i])\n                return\nt = int(input())\nfor i in range(t):\n    one()", "for t in range(int(input())):\n    s = list()\n    n = int(input())\n    for i in range(n):\n        s.append(list(map(int, input().split())))\n    s.sort()\n    if s[0][0] != s[1][0]:\n        target = s[0]\n    else:\n        target = s[-1]\n    ava = set(target)\n    for i in range(1, n + 1):\n        if i not in ava:\n            print(*[i] + target)", "t = int(input())\n\ndef solve():\n    n = int(input())\n    ps = []\n    for _ in range(n):\n        ps.append(list(map(int, input().split())))\n    a = ps[0][0]\n    b = ps[1][0]\n    c = ps[2][0]\n    if a == b:\n        p0 = a\n    elif a == c:\n        p0 = a\n    else:\n        p0 = b\n    ans = [p0]\n    for i in range(n):\n        if ps[i][0] != p0:\n            ans.extend(ps[i])\n    print(*ans)\nfor _ in range(t):\n    solve()", "def sol(mat, n):\n    a = [0 for i in range(n)]\n    if mat[0][0] == mat[1][0]:\n        fe = mat[0][0]\n    else:\n        fe = mat[2][0]\n    a[0] = fe\n    r = 0\n    for i in range(n):\n        if mat[i][0] != fe:\n            r = i\n            break\n    return [fe] + mat[r]\nfor _ in range(int(input())):\n    n = int(input())\n    mat = []\n    for i in range(n):\n        mat.append(list(map(int, input().split())))\n    print(*sol(mat, n))", "def solve():\n    n = int(input())\n    lis = list()\n    for i in range(n):\n        lis.append(list(map(int, input().split())))\n    di = dict()\n    for i in range(n):\n        di[lis[i][0]] = di.get(lis[i][0], 0) + 1\n    for i in range(n):\n        if di[lis[i][0]] == 1:\n            ans = lis[i]\n            break\n    for i in range(1, n + 1):\n        if i not in ans:\n            ans = [i] + ans\n            print(*ans)\n            break\nfor _ in range(int(input())):\n    solve()", "from math import *\n\ndef lstStrRd():\n    return list(input())\n\ndef intRd():\n    return int(input())\n\ndef lstRd():\n    return list(map(int, input().split()))\nfor _ in range(intRd()):\n    n = intRd()\n    a = []\n    s = []\n    for i in range(n):\n        a.append(lstRd())\n    a = sorted(a)\n    if a[0][0] == a[1][0]:\n        print(a[0][0], *a[-1])\n    else:\n        print(a[-1][0], *a[0])", "T = int(input())\nwhile T:\n    T -= 1\n    n = int(input())\n    first = -1\n    flag = False\n    temp = []\n    tt = False\n    q = [0] * 101\n    for i in range(n):\n        a = list(map(int, input().split()))\n        if tt:\n            continue\n        temp.append(a)\n        if flag:\n            q = [0] * 101\n            if temp[0][0] == temp[2][0]:\n                print(temp[0][0], end=' ')\n                for cc in temp[1]:\n                    print(cc, end=' ')\n                print()\n            else:\n                print(temp[1][0], end=' ')\n                for cc in temp[0]:\n                    print(cc, end=' ')\n                print()\n            tt = True\n            continue\n        if first == -1:\n            first = a[0]\n            q[a[0]] += 1\n            continue\n        elif first != a[0]:\n            if q[first] > 1 and q[a[0]] == 0:\n                print(first, end=' ')\n                for cc in a:\n                    print(cc, end=' ')\n                print()\n                tt = True\n                continue\n            elif q[first] == 1 and q[a[0]] == 0:\n                flag = True\n                continue\n        else:\n            q[first] += 1\n            continue"]