["import sys\n\ndef solve1(n, m, a):\n    s = 0\n    ok = False\n    for i in a:\n        v = i // m\n        if v >= 2:\n            s += v\n            if v > 2:\n                ok = True\n    if ok:\n        return s >= n\n    else:\n        return s >= n and n % 2 == 0\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, m, k) = map(int, inp().split())\n    a = list(map(int, inp().split()))\n    if solve1(n, m, a) or solve1(m, n, a):\n        print('Yes')\n    else:\n        print('No')\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "from sys import stdin, stdout\n\ndef get_ints():\n    return map(int, stdin.readline().split())\n\ndef PRINT(s):\n    stdout.write(s + '\\n')\n\ndef f(a, b, arr):\n    evens = []\n    odds = []\n    s = 0\n    t = False\n    for v in arr:\n        x = v // a\n        if x >= 2:\n            s += x\n            if x % 2 == 0:\n                evens.append(x)\n            else:\n                odds.append(x)\n            if x >= 4:\n                t = True\n    L = len(odds)\n    if not t and b % 2 == 1 and (L == 0):\n        return False\n    if b % 2 == 0 and L % 2 == 1 or (b % 2 == 1 and L % 2 == 0):\n        s -= 1\n    if s >= b:\n        return True\n    return False\n\ndef logic(n, m, arr):\n    if f(n, m, arr) or f(m, n, arr):\n        return 'Yes'\n    return 'No'\nfor w in range(int(stdin.readline())):\n    (n, m, k) = get_ints()\n    arr = [int(x) for x in stdin.readline().split()]\n    print(logic(n, m, arr))", "import collections\nimport sys\n\nclass Solver(collections.namedtuple('Solver', ('n', 'm', 'k', 'volumes'))):\n\n    @classmethod\n    def read(cls, fin):\n        (n, m, k) = map(int, fin.readline().split())\n        volumes = list(map(int, fin.readline().split()))\n        return cls(n, m, k, volumes)\n\n    def try_vertical(self, transpose=False):\n        (n, m) = (self.n, self.m)\n        if transpose:\n            (n, m) = (m, n)\n\n        def get_max_width(volume):\n            if (width := (volume // n)) >= 2:\n                return width\n            return 0\n        widths = list(map(get_max_width, self.volumes))\n        if all(map(lambda x: x <= 2, widths)) and m % 2 == 1:\n            return False\n        return sum(widths) >= m\n\n    def solve(self):\n        return self.try_vertical() or self.try_vertical(transpose=True)\n\ndef main():\n    if '--local-run' in sys.argv:\n        fin = open('input.txt', 'r')\n        fout = open('output.txt', 'w')\n    else:\n        fin = sys.stdin\n        fout = sys.stdout\n    num = int(fin.readline())\n    for i in range(num):\n        print('Yes' if Solver.read(fin).solve() else 'No', file=fout)\nmain()", "def solve(n, m):\n    s = 0\n    cut = False\n    for i in a:\n        t = i // n\n        if t >= 2:\n            s += t\n            if t > 2 and (not cut):\n                cut = True\n    return s >= m and (m % 2 == 0 or cut)\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print('Yes' if solve(n, m) or solve(m, n) else 'No')", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, m, k) = map(int, input().split())\n    (*a,) = map(int, input().split())\n    b = []\n    c = []\n    bodd = 0\n    codd = 0\n    for e in a:\n        bi = e // n\n        bi = bi * (bi >= 2)\n        ci = e // m\n        ci = ci * (ci >= 2)\n        bodd |= bi >= 3\n        codd |= ci >= 3\n        b += [bi]\n        c += [ci]\n    sb = sum(b)\n    sc = sum(c)\n    o = ''\n    if sb >= m and (m & 1 == 0 or bodd) or (sc >= n and (n & 1 == 0 or codd)):\n        o = 'Yes'\n    else:\n        o = 'No'\n    print(o)", "t = int(input())\n\ndef solve(n, m):\n    res = 0\n    for i in piles:\n        u = i // n\n        if u > 1:\n            res += u\n        if res >= m:\n            if res - u == m - 1:\n                return piles[0] // n > 2\n            return True\n    return False\nfor _ in range(t):\n    (n, m, k) = map(int, input().split())\n    piles = sorted(map(int, input().split()), reverse=True)\n    if solve(n, m) or solve(m, n):\n        print('Yes')\n    else:\n        print('No')", "def possible(xs, m, n):\n    ys = [x // m for x in xs]\n    ys = [y for y in ys if y > 1]\n    if len(ys) == 0 or sum(ys) < n:\n        return False\n    return max(ys) >= 3 or n % 2 == 0\n\ndef solve():\n    (n, m, k) = map(int, input().split())\n    xs = [int(x) for x in input().split()]\n    if possible(xs, m, n) or possible(xs, n, m):\n        print('Yes')\n    else:\n        print('No')\n\ndef main():\n    T = int(input().strip())\n    for t in range(1, T + 1):\n        solve()\nmain()", "R = lambda : map(int, input().split())\nG = range\n(t,) = R()\n\ndef f(n, m):\n    b = [v // n for v in a if v >= 2 * n]\n    return not (m & 1 and all((v == 2 for v in b))) and sum(b) >= m\nfor _ in G(t):\n    (n, m, k) = R()\n    a = [*R()]\n    print(['No', 'Yes'][f(n, m) or f(m, n)])", "def solve(n, m, arr):\n    p = m\n    curr = 0\n    flag = False\n    for i in arr:\n        k = i // p\n        if k > 1:\n            curr += k\n        if k > 2:\n            flag = True\n    if n % 2 == 0:\n        if curr >= n:\n            return True\n        else:\n            return False\n    elif curr >= n and flag:\n        return True\n    else:\n        return False\nt = int(input())\nwhile t:\n    (n, m, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    a = solve(n, m, arr)\n    b = solve(m, n, arr)\n    if a or b:\n        print('Yes')\n    else:\n        print('No')\n    t -= 1", "R = lambda : map(int, input().split())\nG = range\n(t,) = R()\n\ndef f(n, m):\n    b = [v // n for v in a if v >= 2 * n]\n    return not (m & 1 and all((v == 2 for v in b))) and sum(b) >= m\nfor _ in G(t):\n    (n, m, k) = R()\n    a = [*R()]\n    print(['No', 'Yes'][f(n, m) or f(m, n)])", "R = lambda : map(int, input().split())\nG = range\n(t,) = R()\n\ndef f(n, m):\n    b = [v // n for v in a if v >= 2 * n]\n    return not (m & 1 and all((v == 2 for v in b))) and sum(b) >= m\nfor _ in G(t):\n    (n, m, k) = R()\n    a = [*R()]\n    print(['No', 'Yes'][f(n, m) or f(m, n)])", "standard_input = '6\\n4 6 3\\n12 9 8\\n3 3 2\\n8 8\\n3 3 2\\n9 5\\n4 5 2\\n10 11\\n5 4 2\\n9 11\\n10 10 3\\n11 45 14\\n'\n\ndef isPossible(major, minor, colors):\n    usable = []\n    canDoOdd = False\n    for i in colors:\n        col = i // major\n        if col >= 2:\n            usable.append(col)\n        if col >= 3:\n            canDoOdd = True\n    return sum(usable) >= minor and (minor % 2 == 0 or canDoOdd)\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print('Yes' if isPossible(n, m, a) or isPossible(m, n, a) else 'No')", "import bisect\nx = int(input())\n\ndef cal(n, m, k, arr):\n    arr.sort()\n    if arr[-1] >= n * m:\n        return True\n    t = bisect.bisect_left(arr, n * 2)\n    if t < k:\n        ck = 0\n        thr = 0\n        for i in range(t, k):\n            a = arr[i] // n\n            if a > 2:\n                thr += 1\n            ck += a\n        if ck >= m:\n            if thr > 0:\n                return True\n            elif m % 2 == 0:\n                return True\n    (n, m) = (m, n)\n    t = bisect.bisect_left(arr, n * 2)\n    if t < k:\n        ck = 0\n        thr = 0\n        for i in range(t, k):\n            a = arr[i] // n\n            if a > 2:\n                thr += 1\n            ck += a\n        if ck >= m:\n            if thr > 0:\n                return True\n            elif m % 2 == 0:\n                return True\n    return False\nfor jj in range(x):\n    (n, m, k) = [int(i) for i in input().split(' ')]\n    arr = [int(i) for i in input().split(' ')]\n    if cal(n, m, k, arr):\n        print('Yes')\n    else:\n        print('No')", "def test(n, m, a):\n    x = [i // m for i in a]\n    enough = sum((i for i in x if i >= 2)) >= n\n    if n % 2 == 1:\n        enough = enough and any((i >= 3 for i in x))\n    return enough\nT = int(input())\nfor cc in range(T):\n    (n, m, k) = (int(_) for _ in input().split())\n    a = [int(_) for _ in input().split()]\n    ans = test(n, m, a) or test(m, n, a)\n    print('Yes' if ans else 'No')", "def solve(n, m):\n    b = [x // n for x in a]\n    b = list(filter(lambda x: x >= 2, b))\n    return sum(b) >= m and (m % 2 == 0 or any((x >= 3 for x in b)))\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print('Yes' if solve(n, m) or solve(m, n) else 'No')", "def solve(n, m):\n    b = [x // n for x in a]\n    b = list(filter(lambda x: x >= 2, b))\n    return sum(b) >= m and (m % 2 == 0 or any((x >= 3 for x in b)))\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print('Yes' if solve(n, m) or solve(m, n) else 'No')", "def solve(n, m):\n    b = [x // n for x in a]\n    b = list(filter(lambda x: x >= 2, b))\n    return sum(b) >= m and (m % 2 == 0 or any((x >= 3 for x in b)))\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print('Yes' if solve(n, m) or solve(m, n) else 'No')", "def solve(n, m):\n    b = [x // n for x in a]\n    b = list(filter(lambda x: x >= 2, b))\n    return sum(b) >= m and (m % 2 == 0 or any((x >= 3 for x in b)))\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print('Yes' if solve(n, m) or solve(m, n) else 'No')", "R = lambda : map(int, input().split())\nG = range\n(t,) = R()\n\ndef f(n, m):\n    b = [v // n for v in a if v >= 2 * n]\n    return not (m & 1 and all((v == 2 for v in b))) and sum(b) >= m\nfor _ in G(t):\n    (n, m, k) = R()\n    a = [*R()]\n    print(['No', 'Yes'][f(n, m) or f(m, n)])", "def solve(n, m):\n    b = [x // n for x in a]\n    b = list(filter(lambda x: x >= 2, b))\n    return sum(b) >= m and (m % 2 == 0 or any((x >= 3 for x in b)))\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print('Yes' if solve(n, m) or solve(m, n) else 'No')", "def solve(n, m):\n    b = [x // n for x in a]\n    b = list(filter(lambda x: x >= 2, b))\n    return sum(b) >= m and (m % 2 == 0 or any((x >= 3 for x in b)))\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print('Yes' if solve(n, m) or solve(m, n) else 'No')", "def solve(n, m):\n    b = [x // n for x in a]\n    b = list(filter(lambda x: x >= 2, b))\n    return sum(b) >= m and (m % 2 == 0 or any((x >= 3 for x in b)))\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print('Yes' if solve(n, m) or solve(m, n) else 'No')", "def solve(n, m):\n    b = [x // n for x in a]\n    b = list(filter(lambda x: x >= 2, b))\n    return sum(b) >= m and (m % 2 == 0 or any((x >= 3 for x in b)))\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print('Yes' if solve(n, m) or solve(m, n) else 'No')", "def iin():\n    return list(map(int, input().split(' ')))\n\ndef solve(n, m, p):\n    pigments = p.copy()\n    for pigment in pigments:\n        cols = pigment // n\n        if cols >= m:\n            return 'Yes'\n        elif cols > 1 and m > 3:\n            m = max(2, m - cols)\n    return 'No'\n[t] = iin()\nfor _ in range(t):\n    [n, m, k] = iin()\n    pigments = iin()\n    pigments.sort()\n    if solve(n, m, pigments) == 'Yes':\n        print('Yes')\n    else:\n        print(solve(m, n, pigments))", "import math\n\ndef possible_to_color(n, m, colors):\n    return try_cover(n, m, colors) or try_cover(m, n, colors)\n\ndef try_cover(rows, cols, colors):\n    covered = 0\n    used_big = False\n    for color in colors:\n        akt = color // rows\n        if akt >= 2:\n            covered += akt\n        if akt >= 3:\n            used_big = True\n        if covered == cols or (covered > cols and used_big):\n            return True\n    return False\ntests = int(input())\nfor _ in range(tests):\n    (n, m, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    print('Yes' if possible_to_color(n, m, a) else 'No')", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    valid = 0\n    an = a[:]\n    ans = 0\n    for i in range(len(an)):\n        an[i] //= n\n        if an[i] >= 2 and ans + 2 <= m:\n            ans += 2\n            an[i] -= 2\n        else:\n            an[i] = 0\n    if sum(an) + ans >= m:\n        valid = 1\n    if valid == 0:\n        an = a[:]\n        ans = 0\n        for i in range(len(an)):\n            an[i] //= m\n            if an[i] >= 2 and ans + 2 <= n:\n                ans += 2\n                an[i] -= 2\n            else:\n                an[i] = 0\n        if sum(an) + ans >= n:\n            valid = 1\n    if n == 1 or m == 1:\n        valid = 0\n    if valid:\n        print('Yes')\n    else:\n        print('No')", "def resi():\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mDK = [0] * k\n    for i in range(k):\n        mDK[i] = a[i] // n\n        if mDK[i] == 1:\n            mDK[i] = 0\n    mDV = [0] * k\n    for i in range(k):\n        mDV[i] = a[i] // m\n        if mDV[i] == 1:\n            mDV[i] = 0\n    if max(mDV) == 2 and max(mDK) == 2:\n        if sum(mDK) >= m and m % 2 == 0:\n            print('Yes')\n            return\n        if sum(mDV) >= n and n % 2 == 0:\n            print('Yes')\n            return\n        print('No')\n        return\n    if max(mDV) == 2:\n        if sum(mDV) >= n and n % 2 == 0:\n            print('Yes')\n            return\n        if sum(mDK) >= m:\n            print('Yes')\n            return\n        print('No')\n        return\n    if max(mDK) == 2:\n        if sum(mDK) >= m and m % 2 == 0:\n            print('Yes')\n            return\n        if sum(mDV) >= n:\n            print('Yes')\n            return\n        print('No')\n        return\n    if sum(mDK) < m and sum(mDV) < n:\n        print('No')\n        return\n    print('Yes')\nfor _ in range(int(input())):\n    resi()", "def solve(n, m):\n    b = [x // n for x in a]\n    b = list(filter(lambda x: x >= 2, b))\n    return sum(b) >= m and (m % 2 == 0 or any((x >= 3 for x in b)))\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print('Yes' if solve(n, m) or solve(m, n) else 'No')", "def rr(a, n, m):\n    if m % 2 == 1:\n        count = 0\n        if a[0] >= 3 * n:\n            pass\n        else:\n            return False\n        for i in a:\n            if i // n >= 2:\n                count += i // n\n        if count >= m:\n            return True\n        else:\n            return False\n    else:\n        count = 0\n        for i in a:\n            if i // n >= 2:\n                count += i // n\n        if count >= m:\n            return True\n        else:\n            return False\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a, reverse=True)\n    if rr(a, n, m):\n        print('Yes')\n    elif rr(a, m, n):\n        print('Yes')\n    else:\n        print('No')", "def solve(n, m):\n    b = [x // n for x in a]\n    b = list(filter(lambda x: x >= 2, b))\n    return sum(b) >= m and (m % 2 == 0 or any((x >= 3 for x in b)))\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print('Yes' if solve(n, m) or solve(m, n) else 'No')", "t = int(input())\nfor _ in range(t):\n    (m, n, k) = list(map(int, input().split(' ')))\n    arr = list(map(int, input().split(' ')))\n    total = 0\n    flag = False\n    for num in arr:\n        mult = num // n\n        if mult > 2:\n            flag = True\n        if mult >= 2:\n            total += mult\n    if total >= m and (flag or m % 2 == 0):\n        print('Yes')\n        continue\n    total = 0\n    flag = False\n    for num in arr:\n        mult = num // m\n        if mult > 2:\n            flag = True\n        if mult >= 2:\n            total += mult\n    if total >= n and (flag or n % 2 == 0):\n        print('Yes')\n        continue\n    print('No')", "def solve(n, m):\n    b = [x // n for x in a]\n    b = list(filter(lambda x: x >= 2, b))\n    return sum(b) >= m and (m % 2 == 0 or any((x >= 3 for x in b)))\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print('Yes' if solve(n, m) or solve(m, n) else 'No')", "def solve(n, m):\n    b = [x // n for x in a]\n    b = list(filter(lambda x: x >= 2, b))\n    return sum(b) >= m and (m % 2 == 0 or any((x >= 3 for x in b)))\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print('Yes' if solve(n, m) or solve(m, n) else 'No')", "def solve(n, m):\n    b = [x // n for x in a]\n    b = list(filter(lambda x: x >= 2, b))\n    return sum(b) >= m and (m % 2 == 0 or any((x >= 3 for x in b)))\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print('Yes' if solve(n, m) or solve(m, n) else 'No')", "def solve(n, m):\n    b = [x // n for x in a]\n    b = list(filter(lambda x: x >= 2, b))\n    return sum(b) >= m and (m % 2 == 0 or any((x >= 3 for x in b)))\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print('Yes' if solve(n, m) or solve(m, n) else 'No')", "def solve(a, n, m):\n    b = []\n    flag = False\n    for i in a:\n        curr = i // n\n        if curr >= 3:\n            flag = True\n        if curr >= 2:\n            b.append(curr)\n    if m % 2 == 1:\n        if not flag:\n            return False\n    return sum(b) >= m\nfor t in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    if solve(a.copy(), n, m) or solve(a.copy(), m, n):\n        print('Yes')\n    else:\n        print('No')", "def canColor(n, m, colors):\n    colors.sort(reverse=True)\n    (n, m) = (_n, _m) = sorted([n, m])\n    cando = 0\n    mfirst = colors[0] // n\n    nfirst = colors[0] // m\n    for c in colors:\n        if c // n > 1:\n            if _m == 1:\n                if mfirst > 2:\n                    _m = 0\n            else:\n                _m -= c // n\n        if c // m > 1:\n            if _n == 1:\n                if nfirst > 2:\n                    _n = 0\n            else:\n                _n -= c // m\n    if _m <= 0 or _n <= 0:\n        cando = 1\n    return 'Yes' if cando else 'No'\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, m, k) = map(int, input().split())\n        colors = list(map(int, input().split()))\n        print(canColor(n, m, colors))\nmain()", "def ss(t, l):\n    if sum(l) < t:\n        return False\n    x = sum(l)\n    twos = 0\n    odd = 0\n    even = 0\n    for i in l:\n        if i == 2:\n            twos += 1\n        elif i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if t % 2 == 0:\n        return True\n    xxx = 0\n    for i in l:\n        if i > 2:\n            xxx += 1\n    if xxx > 0:\n        return True\n    return False\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l = sorted(l)[::-1]\n    a1 = []\n    a2 = []\n    for i in l:\n        x = i // n\n        if x >= 2:\n            a1.append(x)\n        x = i // m\n        if x >= 2:\n            a2.append(x)\n    if ss(m, a1) or ss(n, a2):\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (cols, rows) = ([], [])\n    for count in a:\n        if count // n >= 2:\n            cols.append(count // n)\n        if count // m >= 2:\n            rows.append(count // m)\n    ans = 'No'\n    if m <= sum(cols):\n        if m % 2 == 1 and max(cols) == 2:\n            pass\n        else:\n            ans = 'Yes'\n    if n <= sum(rows):\n        if n % 2 == 1 and max(rows) == 2:\n            pass\n        else:\n            ans = 'Yes'\n    print(ans)", "def canColor(n, m, colors):\n    colors.sort(reverse=True)\n    (n, m) = (_n, _m) = sorted([n, m])\n    cando = 0\n    mfirst = colors[0] // n\n    nfirst = colors[0] // m\n    for c in colors:\n        if c // n > 1:\n            if _m == 1:\n                if mfirst > 2:\n                    _m = 0\n            else:\n                _m -= c // n\n        if c // m > 1:\n            if _n == 1:\n                if nfirst > 2:\n                    _n = 0\n            else:\n                _n -= c // m\n    if _m <= 0 or _n <= 0:\n        cando = 1\n    return 'Yes' if cando else 'No'\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, m, k) = map(int, input().split())\n        colors = list(map(int, input().split()))\n        print(canColor(n, m, colors))\nmain()", "def solve(n, m):\n    b = [x // n for x in a]\n    b = list(filter(lambda x: x >= 2, b))\n    if sum(b) < m:\n        return False\n    if m % 2 == 1:\n        return any((x >= 3 for x in b))\n    return True\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print('Yes' if solve(n, m) or solve(m, n) else 'No')", "t = int(input())\nfor x in range(t):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    cols = 0\n    for num in a:\n        if num // n > 1:\n            cols += num // n\n    ans = 'No'\n    if m % 2 == 0 and cols >= m:\n        ans = 'Yes'\n    elif cols >= m:\n        for num in a:\n            if num // n - 1 > 1:\n                ans = 'Yes'\n    if ans == 'Yes':\n        print(ans)\n        continue\n    rows = 0\n    for num in a:\n        if num // m > 1:\n            rows += num // m\n    if n % 2 == 0 and rows >= n:\n        ans = 'Yes'\n    elif rows >= n:\n        for num in a:\n            if num // m - 1 > 1:\n                ans = 'Yes'\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ok = False\n    for _ in range(2):\n        (n, m) = (m, n)\n        s = 0\n        o = 0\n        for i in range(k):\n            x = a[i] // n\n            if x > 1:\n                s += x\n            if x > 2:\n                o += 1\n        if s < m:\n            continue\n        if m % 2 == 0:\n            ok = True\n            break\n        elif o > 0:\n            ok = True\n            break\n    print('Yes' if ok else 'No')", "def solve(m, n, arr):\n    res = 0\n    flag = 0\n    for i in arr:\n        if i // n <= 1:\n            continue\n        res += i // n\n        if i // n >= 3:\n            flag = 1\n    if res >= m and (m % 2 == 1 and flag or m % 2 == 0):\n        return 1\n    else:\n        return 0\nt = int(input())\nwhile t:\n    (n, m, k) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    if solve(m, n, arr) or solve(n, m, arr):\n        print('Yes')\n    else:\n        print('No')\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (n, m, k) = map(int, input().split())\n    l = [int(x) for x in input().split()]\n    l.sort(reverse=True)\n    i = 0\n    ans = 0\n    flag = False\n    while i < k:\n        x = l[i] // m\n        if x > 2:\n            flag = True\n        if x >= 2:\n            ans += x\n        i += 1\n    if ans >= n and (flag or n % 2 == 0):\n        print('Yes')\n    else:\n        i = 0\n        ans = 0\n        False\n        while i < k:\n            x = l[i] // n\n            if x > 2:\n                flag = True\n            if x >= 2:\n                ans += x\n            i += 1\n        if ans >= m and (flag or m % 2 == 0):\n            print('Yes')\n        else:\n            print('No')", "for i in range(int(input())):\n    (n, m, k) = [int(x) for x in input().split()]\n    colors = [int(x) for x in input().split()]\n    (col, row) = ([], [])\n    for i in range(k):\n        cell = colors[i]\n        if cell // n >= 2:\n            col.append(cell // n)\n        else:\n            col.append(0)\n        if cell // m >= 2:\n            row.append(cell // m)\n        else:\n            row.append(0)\n    ans1 = False\n    if sum(col) >= m:\n        if m % 2 == 1:\n            for i in col:\n                if i >= 3:\n                    ans1 = True\n                    break\n        else:\n            ans1 = True\n    ans2 = False\n    if sum(row) >= n:\n        if n % 2 == 1:\n            for i in row:\n                if i >= 3:\n                    ans2 = True\n                    break\n        else:\n            ans2 = True\n    fin = 'Yes' if ans1 or ans2 else 'No'\n    print(fin)", "def main():\n    for t in range(int(input())):\n        (n, m, k) = map(int, input().split())\n        a = sorted(list(map(int, input().split())), reverse=True)\n        (x, y) = (0, 0)\n        (flag1, flag2) = (False, False)\n        for i in range(k):\n            if a[i] // n > 2:\n                flag1 = True\n            if a[i] // n >= 2:\n                x += a[i] // n\n        for i in range(k):\n            if a[i] // m > 2:\n                flag2 = True\n            if a[i] // m >= 2:\n                y += a[i] // m\n        if x >= m and (m % 2 == 0 or (m % 2 == 1 and flag1)) or (y >= n and (n % 2 == 0 or (n % 2 == 1 and flag2))):\n            print('Yes')\n        else:\n            print('No')\nmain()", "for _ in range(int(input())):\n    (n, m, k) = list(map(int, input().split()))\n    color = list(map(int, input().split()))\n    row_cost = m\n    col_cost = n\n    tot = 0\n    flag = False\n    for i in color:\n        if i // row_cost > 2:\n            flag = True\n        if i // row_cost >= 2:\n            tot += i // row_cost\n    if tot >= n and (n % 2 == 0 or flag):\n        print('Yes')\n        continue\n    tot = 0\n    flag = False\n    for i in color:\n        if i // col_cost > 2:\n            flag = True\n        if i // col_cost >= 2:\n            tot += i // col_cost\n    if tot >= m and (m % 2 == 0 or flag):\n        print('Yes')\n    else:\n        print('No')", "def column(a, n, m, k):\n    sumi = 0\n    if n % 2:\n        if a[-1] >= 3 * m:\n            a[-1] -= 3 * m\n            n -= 3\n            sumi += a[-1] // m\n            a[-1] = 0\n        else:\n            return -1\n    r = 2 * m\n    for i in range(k):\n        if a[i] >= r:\n            sumi += a[i] // m\n    if sumi >= n:\n        return 1\n    else:\n        return -1\nt = int(input())\nwhile t > 0:\n    x = input().split()\n    (n, m, k) = (int(x[0]), int(x[1]), int(x[2]))\n    a = input().split()\n    for i in range(k):\n        a[i] = int(a[i])\n    fl = 0\n    a.sort()\n    p = n\n    q = m\n    b = [a[i] for i in range(k)]\n    c = column(b, p, q, k)\n    d = column(a, m, n, k)\n    if c == 1 or d == 1:\n        print('Yes')\n    else:\n        print('No')\n    t -= 1", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m, k) = [int(x) for x in input().split(' ')]\n    quantities = [int(x) for x in input().split(' ')]\n    row_count = 0\n    flag = False\n    for num in quantities:\n        if num // m >= 2:\n            row_count += num // m\n        if num // m >= 3:\n            flag = True\n    if row_count >= n and (n % 2 == 0 or flag):\n        print('Yes')\n        continue\n    col_count = 0\n    flag = False\n    for num in quantities:\n        if num // n >= 2:\n            col_count += num // n\n        if num // n >= 3:\n            flag = True\n    if col_count >= m and (m % 2 == 0 or flag):\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m, k) = map(int, input().split())\n    (numH, numV) = (0, 0)\n    (ntH, ntV) = (False, False)\n    a = list(map(int, input().split()))\n    for i in a:\n        if int(i / n) > 1:\n            numH += int(i / n)\n            if int(i / n) > 2:\n                ntH = True\n        if int(i / m) > 1:\n            numV += int(i / m)\n            if int(i / m) > 2:\n                ntV = True\n    ans = False\n    if numH >= m:\n        if m % 2 == 0 or ntH:\n            ans = True\n    if numV >= n:\n        if n % 2 == 0 or ntV:\n            ans = True\n    if ans:\n        print('Yes')\n    else:\n        print('No')", "import math as mt\nfrom collections import defaultdict, deque\nfrom bisect import bisect_left as b_l\nfrom bisect import bisect_right as b_r\nimport sys\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if n == 1 or m == 1:\n        print('No')\n        continue\n    else:\n        a.sort(reverse=True)\n        total = m\n        if total & 1:\n            flag = False\n        else:\n            flag = True\n        for i in a:\n            if total & 1:\n                if i // n >= 3:\n                    flag = True\n            if i // n > 1:\n                total -= i // n\n        if total <= 0 and flag:\n            print('Yes')\n            continue\n        total = n\n        if total & 1:\n            flag = False\n        else:\n            flag = True\n        for i in a:\n            if total & 1:\n                if i // m >= 3:\n                    flag = True\n            if i // m > 1:\n                total -= i // m\n        if total <= 0 and flag:\n            print('Yes')\n            continue\n        print('No')", "for i in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    m1 = []\n    n1 = []\n    m01 = 0\n    n01 = 0\n    for j in map(int, input().split()):\n        m1 += [j // n]\n        n1 += [j // m]\n        if j // n > 1:\n            m01 += j // n\n        if j // m > 1:\n            n01 += j // m\n    maxm1 = max(m1)\n    maxn1 = max(n1)\n    summ1 = sum(m1)\n    sumn1 = sum(n1)\n    if m == 1 and summ1 > 0 or (n == 1 and sumn1 > 0) or (m01 >= m and (maxm1 > 2 or m % 2 < 1)) or (n01 >= n and (maxn1 > 2 or n % 2 < 1)):\n        print('Yes')\n    else:\n        print('No')", "from collections import Counter\nfrom functools import *\nfrom sys import setrecursionlimit, getsizeof\nsetrecursionlimit(100050)\n\ndef f(n, m, a):\n    temp = [i // n for i in a if i // n > 1]\n    temp.sort(reverse=True)\n    cnt = 0\n    while cnt < len(temp) and temp[cnt] > 2:\n        cnt += 1\n    (s, p) = (0, 0)\n    while p < len(temp) and s + temp[p] < m:\n        s += temp[p]\n        p += 1\n    rem = m - s\n    if p == len(temp):\n        return False\n    if rem == 1:\n        return cnt >= 1\n    return True\nx = int(input())\nwhile x:\n    x -= 1\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if f(n, m, a) or f(m, n, a):\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor _ in range(t):\n    (n, m, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr1 = []\n    arr2 = []\n    for i in arr:\n        if i // n > 1:\n            arr1.append(i // n)\n        if i // m > 1:\n            arr2.append(i // m)\n    arr1.sort(reverse=True)\n    arr2.sort(reverse=True)\n    s1 = 0\n    for i in arr1:\n        s1 += i\n        if s1 > m:\n            if i - (s1 - m) == 1 and arr1[0] == 2:\n                break\n            s1 = m\n        if s1 == m:\n            break\n    s2 = 0\n    for i in arr2:\n        s2 += i\n        if s2 > n:\n            if i - (s2 - n) == 1 and arr2[0] == 2:\n                break\n            s2 = n\n        if s2 == n:\n            break\n    if s1 == m or s2 == n:\n        print('Yes')\n    else:\n        print('No')", "def solve(n, m, k, K):\n    Q = [x for x in K]\n    P = [0 for x in K]\n    idx = 0\n    z = n\n    for i in range(k):\n        if Q[i] >= 2 * m and z >= 2:\n            Q[i] -= 2 * m\n            P[i] = 2\n            z -= 2\n    if z == 0:\n        return True\n    for i in range(k):\n        if P[i] > 0:\n            z -= Q[i] // m\n    if z <= 0:\n        return True\n    return False\n\ndef read():\n    s = input().split(' ')\n    n = int(s[0])\n    m = int(s[1])\n    k = int(s[2])\n    s = input().split(' ')\n    return (n, m, k, sorted([int(x) for x in s], reverse=True))\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        (n, m, k, K) = read()\n        if solve(n, m, k, K) or solve(m, n, k, K):\n            print('Yes')\n        else:\n            print('No')\n        pass\n    pass\nmain()", "try:\n    for _ in range(int(input())):\n        (n, m, k) = map(int, input().split(' '))\n        l = list(map(int, input().split(' ')))\n        l.sort()\n        mul = m * n\n        mn = 10000000\n        f = 0\n        mx = 0\n        g = 0\n        for i in range(k):\n            if l[i] // n > 1 and f == 0:\n                mul = mul - (l[i] - l[i] % n)\n                mn = min(mn, l[i] - l[i] % n)\n                if mul == n:\n                    f = 1\n            else:\n                mx = max(mx, l[i])\n        if f == 1:\n            if mn // n < mx // n:\n                print('Yes')\n            else:\n                g = 1\n        elif mul <= 0:\n            print('Yes')\n        else:\n            g = 1\n        if g == 1:\n            mul = m * n\n            mn = 10000000\n            f = 0\n            mx = 0\n            for i in range(k):\n                if l[i] // m > 1 and f == 0:\n                    mul = mul - (l[i] - l[i] % m)\n                    mn = min(mn, l[i] - l[i] % m)\n                    if mul == m:\n                        f = 1\n                else:\n                    mx = max(mx, l[i])\n            if f == 1:\n                if mn // m < mx // m:\n                    print('Yes')\n                else:\n                    print('No')\n            elif mul <= 0:\n                print('Yes')\n            else:\n                print('No')\nexcept:\n    pass", "def solve(n, m):\n    b = [x // n for x in a]\n    b = list(filter(lambda x: x >= 2, b))\n    return sum(b) >= m and (m % 2 == 0 or any((x >= 3 for x in b)))\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print('Yes' if solve(n, m) or solve(m, n) else 'No')"]