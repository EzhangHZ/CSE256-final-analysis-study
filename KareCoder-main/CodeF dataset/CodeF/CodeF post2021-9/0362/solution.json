["for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    A = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    sortQ = sorted(Q)\n    height = 0\n    i = 0\n    dico = {}\n    for k in sortQ:\n        while i < n and A[i] <= k:\n            height += A[i]\n            i += 1\n        dico[k] = height\n    print(' '.join([str(dico[p]) for p in Q]))", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    A = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    sortQ = sorted(Q)\n    height = 0\n    i = 0\n    dico = {}\n    for k in sortQ:\n        while i < n and A[i] <= k:\n            height += A[i]\n            i += 1\n        dico[k] = height\n    print(' '.join([str(dico[p]) for p in Q]))", "import bisect\n\ndef solve(s, q):\n    ms = []\n    mh = 0\n    cnt = 0\n    ss = []\n    res = []\n    for e in s:\n        cnt += e\n        mh = max(mh, e)\n        ms.append(mh)\n        ss.append(cnt)\n    for k in q:\n        idx = bisect.bisect(ms, k)\n        res.append(ss[idx - 1] if idx != 0 else 0)\n    return ' '.join([str(e) for e in res])\n\ndef main():\n    for _ in range(int(input())):\n        _ = input()\n        s = [int(e) for e in input().split()]\n        q = [int(e) for e in input().split()]\n        print(solve(s, q))\nmain()", "def solve():\n    t = int(input())\n    for _ in range(t):\n        (n, q) = map(int, input().split())\n        steps = list(map(int, input().split()))\n        questions = list(map(int, input().split()))\n        answers = [0] * len(questions)\n        indexes = sorted(enumerate(questions), key=lambda q: q[1])\n        height = 0\n        index = 0\n        for step in steps:\n            while index < len(indexes) and indexes[index][1] < step:\n                answers[indexes[index][0]] = height\n                index += 1\n            height += step\n        while index < len(indexes):\n            answers[indexes[index][0]] = height\n            index += 1\n        print(' '.join(map(str, answers)))\nsolve()", "import bisect\nts = int(input())\nfor i in range(ts):\n    (n, x) = [int(i) for i in input().split()]\n    ar = [int(i) for i in input().split()]\n    (a, b) = ([], [0])\n    (c, s) = (0, 0)\n    for i in ar:\n        c = max(i, c)\n        s += i\n        a.append(c)\n        b.append(s)\n    y = [int(i) for i in input().split()]\n    res = []\n    for i in y:\n        ind = bisect.bisect(a, i)\n        res.append(b[ind])\n    print(' '.join(map(str, res)))", "import bisect\n\ndef get_max_heights(a, k):\n    prefix_max = a.copy()\n    prefix_sum = a.copy()\n    for i in range(1, len(a)):\n        prefix_max[i] = max(prefix_max[i], prefix_max[i - 1])\n        prefix_sum[i] += prefix_sum[i - 1]\n    max_heights = []\n    for k_i in k:\n        max_height_idx = bisect.bisect_right(prefix_max, k_i) - 1\n        if max_height_idx < 0:\n            max_heights.append('0')\n            continue\n        max_height = prefix_sum[max_height_idx]\n        max_heights.append(str(max_height))\n    return max_heights\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, q) = map(int, input().split())\n        a = list(map(int, input().split()))\n        k = list(map(int, input().split()))\n        max_heights = get_max_heights(a, k)\n        print(' '.join(max_heights))\nmain()", "import os\nimport math\nimport collections\nimport bisect\nimport functools\nimport itertools\nimport heapq\n\ndef solve(a, queries):\n    n = len(a)\n    m = a[:]\n    for i in range(1, n):\n        m[i] = max(m[i], m[i - 1])\n    pre = [0] * (n + 1)\n    for i in range(n):\n        pre[i + 1] = pre[i] + a[i]\n    ans = []\n    for x in queries:\n        i = bisect.bisect_left(m, x + 1) - 1\n        ans.append(pre[i + 1])\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    queries = list(map(int, input().split()))\n    print(' '.join((str(x) for x in solve(a, queries))))", "from bisect import bisect\nfor tcase in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    (s, m) = ([0], [0])\n    for ai in a:\n        s.append(s[-1] + ai)\n        m.append(max(m[-1], ai))\n    ans = []\n    for ki in k:\n        i = bisect(m, ki)\n        ans.append(s[i - 1])\n    print(' '.join(map(str, ans)))", "import bisect\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, q) = map(int, input().split())\n    arrN = list(map(int, input().split()))\n    arrQ = list(map(int, input().split()))\n    arrSave = []\n    arrMax = []\n    j = 1\n    for (i, x) in enumerate(arrN):\n        if i == 0:\n            arrSave.append(x)\n            arrMax.append(x)\n        else:\n            arrSave.append(arrSave[i - 1] + x)\n            arrMax.append(max(arrMax[i - 1], x))\n    resultArray = []\n    for x in arrQ:\n        indexResult = bisect.bisect(arrMax, x) - 1\n        if indexResult < 0:\n            resultArray.append(str(0))\n        else:\n            resultArray.append(str(arrSave[indexResult]))\n    print(' '.join(resultArray))", "from bisect import bisect\nfor tcase in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    (s, m) = ([0], [0])\n    for ai in a:\n        s.append(s[-1] + ai)\n        m.append(max(m[-1], ai))\n    ans = []\n    for ki in k:\n        i = bisect(m, ki)\n        ans.append(s[i - 1])\n    print(' '.join(map(str, ans)))", "from bisect import *\nRsydgcfhb_ydga = lambda : map(int, input().split())\n(t,) = Rsydgcfhb_ydga()\nwhile t:\n    t -= 1\n    Rsydgcfhb_ydga()\n    a = [0]\n    b = [0]\n    for x in Rsydgcfhb_ydga():\n        a += (max(a[-1], x),)\n        b += (b[-1] + x,)\n    print(*(b[bisect(a, y) - 1] for y in Rsydgcfhb_ydga()))", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = [0]\n    b = [0]\n    for x in R():\n        a += (max(a[-1], x),)\n        b += (b[-1] + x,)\n    print(*(b[bisect(a, y) - 1] for y in R()))", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = [0]\n    b = [0]\n    for x in R():\n        a += (max(a[-1], x),)\n        b += (b[-1] + x,)\n    print(*(b[bisect(a, y) - 1] for y in R()))", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = [0]\n    b = [0]\n    for x in R():\n        a += (max(a[-1], x),)\n        b += (b[-1] + x,)\n    print(*(b[bisect(a, y) - 1] for y in R()))", "import bisect\n\ndef main():\n    (n, q) = map(int, input().split())\n    heights_arr = list(map(int, input().split()))\n    questions_arr = list(map(int, input().split()))\n    prev = heights_arr[0]\n    my_max_till_i = prev\n    my_max_arr = [0 for i in range(n)]\n    sum_till_i = [0] + [heights_arr[0] for i in range(n)]\n    for index in range(0, n):\n        my_max_till_i = max(heights_arr[index], my_max_till_i)\n        my_max_arr[index] = my_max_till_i\n        if not index:\n            continue\n        sum_till_i[index + 1] = sum_till_i[index] + heights_arr[index]\n    result = [0 for i in range(len(questions_arr))]\n    for (index, step_size) in enumerate(questions_arr):\n        ans_idx = bisect.bisect_right(my_max_arr, step_size)\n        result[index] = sum_till_i[ans_idx]\n    print(*result, sep=' ')\nt = int(input())\nfor _ in range(t):\n    main()", "from bisect import *\nK = lambda : map(int, input().split())\n(t,) = K()\nwhile t:\n    t -= 1\n    K()\n    a = [0]\n    b = [0]\n    for x in K():\n        a += (max(a[-1], x),)\n        b += (b[-1] + x,)\n    print(*(b[bisect(a, y) - 1] for y in K()))", "def solve():\n    (n, k) = map(int, input().split())\n    lis = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    pref = [0] * n\n    s = 0\n    for i in range(n):\n        s += lis[i]\n        pref[i] = s\n    from bisect import bisect_right\n    Mx = lis[0]\n    for i in range(1, n):\n        Mx = max(Mx, lis[i])\n        lis[i] = Mx\n    ans = list()\n    for i in k:\n        ind = bisect_right(lis, i)\n        if ind == 0:\n            ans.append(0)\n        else:\n            ans.append(pref[ind - 1])\n    print(*ans)\nfor _ in range(int(input())):\n    solve()", "from bisect import bisect\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    N = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    hiarr = [0] * n\n    csum = [0] * n\n    lasthi = -1\n    csum[0] = N[0]\n    hiarr[0] = N[0]\n    for i in range(1, n):\n        csum[i] += csum[i - 1] + N[i]\n        hiarr[i] = max(hiarr[i - 1], N[i])\n    res = [0] * q\n    for i in range(q):\n        ind = bisect(hiarr, Q[i]) - 1\n        if ind < 0:\n            res[i] = 0\n        else:\n            res[i] = csum[ind]\n    print(' '.join(map(str, res)))", "from collections import defaultdict, deque, Counter\nfrom functools import lru_cache\nfrom heapq import heappush, heappop\nfrom bisect import bisect_right, bisect_left\n\ndef inpNum():\n    return int(input())\n\ndef inpStr():\n    return input()\n\ndef inpSepNum():\n    return map(int, input().split())\n\ndef inpNumList():\n    return list(map(int, input().split()))\n\ndef inpChList():\n    return list(input().split())\ntc = inpNum()\nfor _ in range(tc):\n    (n, q) = inpSepNum()\n    stairs = inpNumList()\n    prefix = [0]\n    ques = inpNumList()\n    cur = stairs[0]\n    for i in range(n):\n        prefix.append(prefix[-1] + stairs[i])\n        if stairs[i] < cur:\n            stairs[i] = cur\n        else:\n            cur = stairs[i]\n    ans = []\n    for q in ques:\n        pos = bisect_right(stairs, q)\n        ans.append(prefix[pos])\n    print(*ans)", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = [0]\n    b = [0]\n    for x in R():\n        a += (max(a[-1], x),)\n        b += (b[-1] + x,)\n    print(*(b[bisect(a, y) - 1] for y in R()))", "t = int(input())\nfrom bisect import bisect_right\nfor ncase in range(1, t + 1):\n    (n, q) = [int(s) for s in input().split(' ')]\n    nn = [int(s) for s in input().split(' ')]\n    qq = [int(s) for s in input().split(' ')]\n    d = {0: 0, nn[0]: nn[0]}\n    dmax = nn[0]\n    for i in range(1, n):\n        if nn[i] > dmax:\n            d[nn[i]] = d[dmax] + nn[i]\n            dmax = nn[i]\n        else:\n            d[dmax] += nn[i]\n    key = sorted(d.keys())\n    ans = []\n    for i in range(q):\n        k = bisect_right(key, qq[i])\n        ans.append(str(d[key[k - 1]]))\n    print(' '.join(ans))", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = [0]\n    b = [0]\n    for x in R():\n        a += (max(a[-1], x),)\n        b += (b[-1] + x,)\n    print(*(b[bisect(a, y) - 1] for y in R()))", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = [0]\n    b = [0]\n    for x in R():\n        a += (max(a[-1], x),)\n        b += (b[-1] + x,)\n    print(*(b[bisect(a, y) - 1] for y in R()))", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = [0]\n    b = [0]\n    for x in R():\n        a += (max(a[-1], x),)\n        b += (b[-1] + x,)\n    print(*(b[bisect(a, y) - 1] for y in R()))", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = [0]\n    b = [0]\n    for x in R():\n        a += (max(a[-1], x),)\n        b += (b[-1] + x,)\n    print(*(b[bisect(a, y) - 1] for y in R()))", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = [0]\n    b = [0]\n    for x in R():\n        a += (max(a[-1], x),)\n        b += (b[-1] + x,)\n    print(*(b[bisect(a, y) - 1] for y in R()))", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = [0]\n    b = [0]\n    for x in R():\n        a += (max(a[-1], x),)\n        b += (b[-1] + x,)\n    print(*(b[bisect(a, y) - 1] for y in R()))", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = [0]\n    b = [0]\n    for x in R():\n        a += (max(a[-1], x),)\n        b += (b[-1] + x,)\n    print(*(b[bisect(a, y) - 1] for y in R()))", "from bisect import bisect_right\nfrom itertools import accumulate\n\ndef solution():\n    (n, q) = map(int, input().split())\n    a = [int(num) for num in input().split()]\n    k = [int(num) for num in input().split()]\n    ans = []\n    acc = list(accumulate(a, initial=0))\n    b = []\n    maximum = -float('Inf')\n    for num in a:\n        maximum = max(maximum, num)\n        b.append(maximum)\n    for j in range(q):\n        index = bisect_right(b, k[j])\n        if index == len(b):\n            ans.append(acc[-1])\n        else:\n            ans.append(acc[index])\n    print(*ans)\n\ndef main():\n    t = int(input())\n    while t:\n        solution()\n        t -= 1\nmain()", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = [0]\n    b = [0]\n    for x in R():\n        a += (max(a[-1], x),)\n        b += (b[-1] + x,)\n    print(*(b[bisect(a, y) - 1] for y in R()))", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = [0]\n    b = [0]\n    for x in R():\n        a += (max(a[-1], x),)\n        b += (b[-1] + x,)\n    print(*(b[bisect(a, y) - 1] for y in R()))", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = [0]\n    b = [0]\n    for x in R():\n        a += (max(a[-1], x),)\n        b += (b[-1] + x,)\n    print(*(b[bisect(a, y) - 1] for y in R()))", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = [0]\n    b = [0]\n    for x in R():\n        a += (max(a[-1], x),)\n        b += (b[-1] + x,)\n    print(*(b[bisect(a, y) - 1] for y in R()))", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = [0]\n    b = [0]\n    for x in R():\n        a += (max(a[-1], x),)\n        b += (b[-1] + x,)\n    print(*(b[bisect(a, y) - 1] for y in R()))", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = [0]\n    b = [0]\n    for x in R():\n        a += (max(a[-1], x),)\n        b += (b[-1] + x,)\n    print(*(b[bisect(a, y) - 1] for y in R()))", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = [0]\n    b = [0]\n    for x in R():\n        a += (max(a[-1], x),)\n        b += (b[-1] + x,)\n    print(*(b[bisect(a, y) - 1] for y in R()))", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = [0]\n    b = [0]\n    for x in R():\n        a += (max(a[-1], x),)\n        b += (b[-1] + x,)\n    print(*(b[bisect(a, y) - 1] for y in R()))", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = [0]\n    b = [0]\n    for x in R():\n        a += (max(a[-1], x),)\n        b += (b[-1] + x,)\n    print(*(b[bisect(a, y) - 1] for y in R()))", "from bisect import *\nR = lambda : map(int, input().split())\n(t,) = R()\nwhile t:\n    t -= 1\n    R()\n    a = [0]\n    b = [0]\n    for x in R():\n        a += (max(a[-1], x),)\n        b += (b[-1] + x,)\n    print(*(b[bisect(a, y) - 1] for y in R()))", "import bisect\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    p = [0]\n    for i in a:\n        p.append(p[-1] + i)\n    m = [a[0]]\n    for i in a[1:]:\n        m.append(max(m[-1], i))\n    print(*[p[bisect.bisect_right(m, i)] for i in k])", "from bisect import bisect\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    k_sorted = k[:]\n    k_sorted.sort()\n    ans = {}\n    h = i = 0\n    for ki in k_sorted:\n        while i < n and a[i] <= ki:\n            h += a[i]\n            i += 1\n        ans[ki] = h\n    for i in k:\n        print(ans[i], end=' ')\n    print()"]