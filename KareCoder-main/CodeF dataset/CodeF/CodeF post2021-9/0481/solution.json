["def solve():\n    (n, a, b) = map(int, input().split())\n    x = list(map(int, input().split()))\n    ans = 10 ** 18\n    suffix = 0\n    for i in range(n - 1, -1, -1):\n        prefix = x[i]\n        ans = min(ans, (a + b) * prefix + b * suffix)\n        if i == 0:\n            suffix += x[i] * n\n        else:\n            suffix += (x[i] - x[i - 1]) * (n - i)\n    ans = min(ans, b * suffix)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "def solve(n, a, b, xs):\n    S = sum(xs)\n    res = b * S\n    for i in range(n):\n        S -= xs[i]\n        tmp = a * xs[i] + b * (S - (n - i - 2) * xs[i])\n        res = min(res, tmp)\n    return res\nfor _ in range(int(input())):\n    (n, a, b) = map(int, input().split())\n    xs = [*map(int, input().split())]\n    res = solve(n, a, b, xs)\n    print(res)", "def solve(n, a, b, xs):\n    S = sum(xs)\n    res = b * S\n    for i in range(n):\n        S -= xs[i]\n        tmp = a * xs[i] + b * (S - (n - i - 2) * xs[i])\n        res = min(res, tmp)\n    return res\nfor _ in range(int(input())):\n    (n, a, b) = map(int, input().split())\n    xs = [*map(int, input().split())]\n    res = solve(n, a, b, xs)\n    print(res)", "def solve():\n    (n, a, b) = list(map(int, input().split(' ')))\n    x = [0] + list(map(int, input().split(' ')))\n    mn = float('inf')\n    sum = x[n]\n    for i in range(n - 1, -1, -1):\n        res = b * x[i] + a * x[i] + b * (sum - (n - i) * x[i])\n        sum += x[i]\n        mn = min(res, mn)\n    print(mn)\nfor t in range(int(input())):\n    solve()", "import sys\nfrom collections import deque\ninput = sys.stdin.readline\n\ndef solve():\n    (n, a, b) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    q = deque([])\n    ans = idx = curr = 0\n    while idx < n:\n        if not q or a > (n - idx) * b:\n            q.append(idx)\n            ans += (arr[q[-1]] - curr) * b\n            idx += 1\n            continue\n        ans += (arr[q[0]] - curr) * a\n        curr = arr[q.popleft()]\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, a, b) = map(int, input().split())\n    positions = [0]\n    positions.extend(map(int, input().split()))\n    cost = 0\n    capital = 0\n    for i in range(1, n + 1):\n        if b * (n - i - 1) > a - b:\n            cost += (a + b) * (positions[i] - positions[i - 1])\n            capital = positions[i]\n        else:\n            cost += b * (positions[i] - capital)\n    print(cost)", "t = int(input())\nfor i in range(t):\n    (n, a, b) = map(int, input().split())\n    ls = list(map(int, input().split()))\n    ls.insert(0, 0)\n    n += 1\n    sum = 0\n    x = ls[n - 1]\n    lastCost = x * (a + b)\n    for j in range(n - 1, -1, -1):\n        x = ls[j]\n        cost = x * (a + b) + b * (sum - (n - j - 1) * x)\n        if cost > lastCost:\n            break\n        else:\n            lastCost = cost\n        sum += x\n    print(str(lastCost))", "def solve():\n    (n, a, b) = map(int, input().split())\n    x = [0] + list(map(int, input().split()))\n    n += 1\n    s = sum(x[1:])\n    mx = float('inf')\n    for i in range(n):\n        v = x[i]\n        cr = (a + b) * v\n        s -= v\n        cr += (s - (n - i - 1) * v) * b\n        mx = min(mx, cr)\n    print(mx)\ntc = int(input())\nfor _ in range(tc):\n    solve()", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random, threading\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(how_much_noob_I_am):\n        (n, a, b) = sep()\n        arr = lis()\n        p = sum(arr)\n        ans = b * p\n        for i in range(n):\n            p -= arr[i]\n            ans = min(ans, (a + b) * arr[i] + (p - (n - i - 1) * arr[i]) * b)\n        print(ans)\nmain()", "for _ in range(int(input())):\n    (n, a, b) = map(int, input().split())\n    positions = [0]\n    positions.extend(map(int, input().split()))\n    cost = 0\n    capital = 0\n    for i in range(1, n + 1):\n        if b * (n - i - 1) > a - b:\n            cost += (a + b) * (positions[i] - positions[i - 1])\n            capital = positions[i]\n        else:\n            cost += b * (positions[i] - capital)\n    print(cost)", "import sys\nfrom collections import deque\ninput = sys.stdin.readline\n\ndef solve():\n    (n, a, b) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    q = deque([])\n    ans = idx = curr = 0\n    while idx < n:\n        if not q or a > (n - q[0] - 1) * b:\n            q.append(idx)\n            ans += (arr[q[-1]] - curr) * b\n            idx += 1\n            continue\n        ans += (arr[q[0]] - curr) * a\n        curr = arr[q.popleft()]\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "cases = int(input())\nfor case in range(cases):\n    (n, b, a) = map(int, input().split())\n    kingdoms = list(map(int, input().split()))\n    total = a * sum(kingdoms)\n    index = 0\n    cur = 0\n    for item in kingdoms:\n        difference = (item - cur) * b - a * (item - cur) * (n - 1 - index)\n        if difference < 0:\n            total += difference\n            cur = item\n            index += 1\n        else:\n            break\n    print(total)", "import math\nimport sys, io, os\nfrom collections import deque\nimport heapq\nimport bisect\nimport copy\nMOD = 1000000007\nNO = lambda : print('NO')\nYES = lambda : print('YES')\n_1 = lambda : print(-1)\nari = lambda : [int(_) for _ in input().split()]\ncin = lambda : int(input())\ncis = lambda : input()\nshow = lambda x: print(x)\nfast = lambda : sys.stdin.readline()\nflush = lambda : sys.stdout.flush()\ntest_case = 1\ntest_case = int(input())\nsys.setrecursionlimit(10 ** 6)\n\ndef ans():\n    (size, x, y) = ari()\n    arr = [0]\n    arr += ari()\n    sp = sum(arr)\n    ans = float('inf')\n    size += 1\n    for i in range(size - 1):\n        temp = (x + y) * arr[i]\n        sp -= arr[i]\n        cap = size - i - 1\n        temp += (sp - cap * arr[i]) * y\n        ans = min(ans, temp)\n    print(ans)\n    return\nfor _ in range(test_case):\n    ans()", "for i in range(int(input())):\n    l = list(map(int, input().split()))\n    n = l[0]\n    a = l[1]\n    b = l[2]\n    l = [0]\n    l.extend(list(map(int, input().split())))\n    l1 = [b * sum(l)]\n    a1 = 0\n    b1 = 1\n    for j in range(n):\n        l1.append(l1[j] + a * (l[j + 1] - l[j]) - (n - j - 1) * b * (l[j + 1] - l[j]))\n    print(min(l1))", "for _ in range(int(input())):\n    (n, a, b) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l = [0] + l\n    ans = [0 for i in range(n)]\n    ans[0] = sum(l) * b\n    for i in range(1, len(ans)):\n        ans[i] = ans[i - 1] + (l[i] - l[i - 1]) * a - (n - i) * b * (l[i] - l[i - 1])\n    print(min(ans))", "t = int(input())\nwhile t:\n    t -= 1\n    (n, a, b) = map(int, input().split())\n    x = [0] + [*map(int, input().split())]\n    l = [sum(x) * b]\n    for i in range(1, n):\n        c = l[-1] + a * (x[i] - x[i - 1]) - (x[i] - x[i - 1]) * (n - i) * b\n        if c > l[-1]:\n            break\n        l.append(c)\n    print(l[-1])", "for _ in range(int(input())):\n    (n, a, b) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l = [0] + l\n    ans = [0 for i in range(n)]\n    ans[0] = sum(l) * b\n    for i in range(1, len(ans)):\n        ans[i] = ans[i - 1] + (l[i] - l[i - 1]) * a - (n - i) * b * (l[i] - l[i - 1])\n    print(min(ans))", "import collections\nimport math\nimport sys\nneed_two = 0\n\ndef main():\n    (n, a, b) = map(int, input().split())\n    x = list(map(int, input().split()))\n    s = sum(x)\n    res = 2 ** 100\n    x.insert(0, 0)\n    n += 1\n    for i in range(n):\n        cur = (a + b) * x[i]\n        s -= x[i]\n        cur += (s - (n - i - 1) * x[i]) * b\n        res = min(res, cur)\n    print(res)\nt = int(input())\nwhile t > 0:\n    main()\n    t -= 1", "for _ in range(int(input())):\n    (n, a, b) = map(int, input().split(' '))\n    c = list(map(int, input().split(' ')))\n    sc = sum(c)\n    sci = 0\n    ans = b * sc\n    for i in range(n):\n        sc -= c[i]\n        val = (a + b) * c[i] + b * (sc - c[i] * (len(c) - i - 1))\n        if val <= ans:\n            ans = val\n    print(ans)", "for _ in range(int(input())):\n    (n, a, b) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l = [0] + l\n    ans = [0 for i in range(n)]\n    ans[0] = sum(l) * b\n    for i in range(1, len(ans)):\n        ans[i] = ans[i - 1] + (l[i] - l[i - 1]) * a - (n - i) * b * (l[i] - l[i - 1])\n    print(min(ans))", "def main():\n    T = int(input())\n    for _ in range(T):\n        (n, a, b) = list(map(int, input().strip().split(' ')))\n        v = list(map(int, input().strip().split(' ')))\n        sum = 0\n        for i in range(len(v)):\n            sum += v[i]\n        res = 1e+18\n        v.insert(0, 0)\n        cur = 0\n        for i in range(0, n):\n            cur = (a + b) * v[i]\n            sum -= v[i]\n            cur += (sum - (n - i) * v[i]) * b\n            res = min(res, cur)\n        print(res)\nmain()", "def solve():\n    (N, A, B) = map(int, input().split())\n    x = list(map(int, input().split()))\n    x.append(0)\n    x.insert(0, 0)\n    N += 1\n    COSTA = 0\n    COSTB = 0\n    COSTC = 0\n    ANS = 1 << 60\n    for i in range(N):\n        COSTB += x[i] * B\n    for i in range(0, N):\n        COSTA = x[i] * A\n        COSTB -= (N - i) * (x[i] - x[i - 1]) * B\n        COSTC = x[i] * B\n        ANS = min(ANS, COSTA + COSTB + COSTC)\n    print(ANS)\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1", "for test in range(int(input())):\n    (n, a, b) = map(int, input().split())\n    x = list(map(int, input().split()))\n    sm = sum(x)\n    ans = sm * b\n    s = 0\n    for i in range(n):\n        s += x[i]\n        ans = min(ans, (a + b) * x[i] + (sm - s - (n - i - 1) * x[i]) * b)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, a, b) = map(int, input().split())\n    x = list(map(int, input().split()))\n    sumX = 0\n    for num in x:\n        sumX += num\n    sumPrev = 0\n    minimum = 2 * 10 ^ 13 + 1\n    for i in range(n - 1):\n        if i != 0:\n            sumPrev += x[i - 1]\n        additional = a * x[i] - b * (sumPrev + x[i] * (n - i - 1))\n        if additional < minimum:\n            minimum = additional\n    print(min(b * sumX, b * sumX + minimum))", "t = int(input())\nfor _ in range(t):\n    (n, a, b) = map(int, input().split())\n    x = list(map(int, input().split()))\n    sumX = 0\n    for num in x:\n        sumX += num\n    sumPrev = 0\n    minimum = 2 * 10 ** 13 + 1\n    for i in range(n - 1):\n        if i != 0:\n            sumPrev += x[i - 1]\n        additional = a * x[i] - b * (sumPrev + x[i] * (n - i - 1))\n        if additional < minimum:\n            minimum = additional\n    print(min(b * sumX, b * sumX + minimum))", "for i in range(int(input())):\n    (n, a, b) = map(int, input().split())\n    vh = list(map(int, input().split()))\n    sm = sum(vh)\n    rs = sm * b\n    s = 0\n    for j in range(n):\n        s += vh[j]\n        rs = min(rs, (a + b) * vh[j] + (sm - s - (n - j - 1) * vh[j]) * b)\n    print(rs)", "def solve():\n    (n, a, b) = list(map(int, input().split()))\n    arr = [0] + list(map(int, input().split()))\n    second_arr = [0] + [abs(arr[i] - arr[i + 1]) for i in range(n)]\n    s = sum(arr)\n    iter_sum = 0\n    min_ = float('inf')\n    n = len(arr)\n    length = n\n    for i in range(length):\n        s -= arr[i]\n        n -= 1\n        value = abs(s - n * arr[i])\n        iter_sum += second_arr[i]\n        min_ = min(min_, (a + b) * iter_sum + b * value)\n    return min_\nfor _ in range(int(input())):\n    print(solve())", "for _ in range(int(input())):\n    (n, a, b) = map(int, input().split())\n    l = list(map(int, input().split()))\n    x = sum(l)\n    ans = x * b\n    for i in range(n):\n        x -= l[i]\n        ans = min(ans, l[i] * (a + b) + (x - l[i] * (n - i - 1)) * b)\n    print(ans)", "t = int(input())\n\ndef solve(n, a, b, X):\n    dists = [X[0]]\n    for x in X[1:]:\n        dists.append(x + dists[-1])\n    lowest = dists[-1] * b\n    for i in range(n - 1):\n        current = a * X[i]\n        current += b * X[i + 1]\n        current += (dists[-1] - dists[i + 1] - (n - i - 2) * X[i]) * b\n        lowest = min(current, lowest)\n    return lowest\nfor _ in range(t):\n    (n, a, b) = map(int, input().split())\n    X = list(map(int, input().split()))\n    print(solve(n, a, b, X))", "t = int(input())\nfor i in range(t):\n    (n, a, b) = [int(i) for i in input().split()]\n    positions = [int(i) for i in input().split()]\n    s = sum(positions)\n    finals = []\n    neg = 0\n    for i in range(len(positions)):\n        neg += positions[i]\n        cost = 0\n        cost += positions[i] * (a + b)\n        cost += (s - neg - (n - i - 1) * positions[i]) * b\n        finals.append(cost)\n    finals.append(sum(positions) * b)\n    print(min(finals))", "for test in range(int(input())):\n    (n, a, b) = map(int, input().split())\n    x = list(map(int, input().split()))\n    sm = sum(x)\n    ans = sm * b\n    s = 0\n    for i in range(n):\n        s += x[i]\n        ans = min(ans, (a + b) * x[i] + (sm - s - (n - i - 1) * x[i]) * b)\n    print(ans)", "for i in range(int(input())):\n    (n, a, b) = map(int, input().split())\n    vh = list(map(int, input().split()))\n    sm = sum(vh)\n    rs = sm * b\n    s = 0\n    for j in range(n):\n        s += vh[j]\n        rs = min(rs, (a + b) * vh[j] + (sm - s - (n - j - 1) * vh[j]) * b)\n    print(rs)", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, a, b) = map(int, inp().split())\n    x = list(map(int, inp().split()))\n    s = sum(x)\n    r = 0\n    now = 0\n    for i in range(n):\n        s -= x[i]\n        r += (x[i] - now) * b\n        if (s - now * (n - i - 1)) * b >= (s - x[i] * (n - i - 1)) * b + (x[i] - now) * a:\n            r += (x[i] - now) * a\n            now = x[i]\n    print(r)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "for _ in range(int(input())):\n    (n, a, b) = map(int, input().split())\n    v = list(map(int, input().split()))\n    v = [0] + v\n    s = sum(v)\n    res = int(1e+18)\n    n += 1\n    for i in range(n):\n        curr = (a + b) * v[i]\n        s -= v[i]\n        curr += (s - (n - i - 1) * v[i]) * b\n        res = min(res, curr)\n    print(res)", "def mincost(nums):\n    presum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        presum[i] = presum[i - 1] + nums[i - 1]\n    ans = b * presum[n]\n    for i in range(n):\n        tmp = b * nums[i] + a * nums[i] + b * (presum[n] - presum[i + 1]) - (n - i - 1) * b * nums[i]\n        ans = min(ans, tmp)\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, a, b) = [int(x) for x in input().split()]\n    nums = [int(x) for x in input().split()]\n    print(mincost(nums))", "for _ in range(int(input())):\n    (n, a, b) = map(int, input().split())\n    array = list(map(int, input().split()))\n    sm = sum(array)\n    sums = [sm]\n    for i in array:\n        sm -= i\n        sums.append(sm)\n    mn = sums[0] * b\n    for i in range(n):\n        tp = array[i] * a\n        tp += (sums[i + 1] - (n - i - 2) * array[i]) * b\n        mn = min(mn, tp)\n    print(mn)", "t = int(input())\nfor qwer in range(t):\n    (n, a, b) = map(int, input().split())\n    l = ['0'] + input().split()\n    sp = list(map(int, l))\n    ind = 0\n    colvo = n\n    for i in range(n - 1):\n        c = sp[i + 1] - sp[ind]\n        if c * (colvo - 1) * b > c * a:\n            ind = i + 1\n        colvo -= 1\n    if a <= b:\n        s = 0\n        for i in range(n):\n            s += (sp[i + 1] - sp[i]) * (a + b)\n        s -= (sp[-1] - sp[-2]) * a\n    else:\n        s = 0\n        for i in range(n):\n            if i < ind:\n                s += (sp[i + 1] - sp[i]) * (b + a)\n            else:\n                s += (sp[i + 1] - sp[ind]) * b\n    print(s)", "import math as m\nt = int(input())\nfor _ in range(0, t):\n    (n, k, b) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.insert(0, 0)\n    p = 0\n    for i in range(0, n + 1):\n        p += l[i]\n    r = 1e+18\n    for i in range(0, n + 1):\n        c = (k + b) * l[i]\n        p -= l[i]\n        c += (p - (n - i) * l[i]) * b\n        r = min(r, c)\n    print(r)", "t = int(input())\nfor _ in range(0, t):\n    inputs = [int(num) for num in input().split()]\n    n = inputs[0]\n    a = inputs[1]\n    b = inputs[2]\n    list1 = [int(num) for num in input().split()]\n    c = 0\n    cost_now = 0\n    now = 0\n    cost = 0\n    for i in range(0, len(list1)):\n        point = list1[i]\n        cost += (point - now) * b\n        c += 1\n        if (point - now) * a <= (point - now) * b * (n - c):\n            cost += (point - now) * a\n            now = point\n    print(cost)", "for _ in range(int(input())):\n    (n, a, b) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    pos = 0\n    llstr = [0]\n    s2 = sum(lst)\n    mini = sum(lst) * b\n    for i in range(n):\n        llstr.append((a + b) * (lst[i] - pos) + llstr[-1])\n        pos = lst[i]\n        s2 -= lst[i]\n        s3 = s2 - pos * (n - 1 - i)\n        mini = min(s3 * b + llstr[-1], mini)\n        pos = lst[i]\n    print(mini)", "for _ in range(int(input())):\n    (n, a, b) = map(int, input().split())\n    arr = [0]\n    my = [int(i) for i in input().split()]\n    arr.extend(my)\n    tot = sum(arr) * b\n    ans = 0\n    pre = 0\n    post = 1\n    for i in range(1, len(arr)):\n        while post < i:\n            save = (arr[post] - arr[pre]) * b * (len(arr) - i)\n            ext = (arr[post] - arr[pre]) * a\n            if save >= ext:\n                tot -= save - ext\n                pre = post\n                post += 1\n            else:\n                break\n    print(tot)", "t = int(input())\nfor i in range(t):\n    (n, a, b) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    pre = [lst[0]]\n    for j in range(1, n):\n        pre.append(pre[-1] + lst[j])\n    ans = []\n    dif = [lst[0]]\n    for j in range(1, n):\n        dif.append(lst[j] - lst[j - 1])\n    ans.append(pre[-1] * b)\n    predif = [dif[0]]\n    for j in range(1, len(dif)):\n        predif.append(predif[-1] + dif[j])\n    for j in range(n):\n        q = (a + b) * predif[j]\n        w = (pre[-1] - pre[j] - (n - j - 1) * lst[j]) * b\n        ans.append(q + w)\n    print(min(ans))", "import sys\ninput = sys.stdin.readline\nfrom math import ceil, floor, gcd\n\ndef inp():\n    return int(input())\n\ndef lis():\n    return list(map(int, input().split()))\n\ndef ma():\n    return map(int, input().split())\n\ndef st():\n    return input().rstrip('\\n')\n\ndef isPrime(n):\n    if n == 1:\n        return 0\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return 0\n    return 1\nt = inp()\nfor _ in range(t):\n    (n, a, b) = map(int, input().split())\n    s = lis()\n    dp = [0 for i in range(n)]\n    k = 0\n    m = 1\n    for i in range(n - 1, 0, -1):\n        k += (s[i] - s[i - 1]) * m\n        m += 1\n        dp[i] = k * b\n    k += (s[0] - 0) * m\n    dp[0] = k * b\n    capi = 0\n    ans = float('inf')\n    now = 0\n    for i in range(n):\n        tobe = now + dp[i]\n        ans = min(ans, tobe)\n        now += (s[i] - capi) * b\n        now += (s[i] - capi) * a\n        capi = s[i]\n    ans = min(now, ans)\n    print(ans)", "for iii in range(int(input())):\n    (n, a, b) = map(int, input().split())\n    q = list(map(int, input().split()))\n    q1 = [0] + q\n    for i in range(1, n + 1):\n        q1[i] += q1[i - 1]\n    bwd_sum = 0\n    shift_cap = 0\n    fwd = 0\n    summ = 123456789876543212345678\n    for i in range(n + 1):\n        if i == 0:\n            bwd_sum = 0\n        elif i == 1:\n            bwd_sum = q[i - 1] * b\n        else:\n            bwd_sum = bwd_sum + (q[i - 1] - q[i - 2]) * b\n        if i == 0:\n            shift_cap = 0\n        else:\n            shift_cap = q[i - 1] * a\n        if i == 0:\n            fwd = q1[n] * b\n        else:\n            fwd = (q1[n] - q1[i] - q[i - 1] * (n - i)) * b\n        summ = min(summ, fwd + bwd_sum + shift_cap)\n    print(summ)", "t = int(input())\nwhile t > 0:\n    c = input().split()\n    (n, a, b) = (int(c[0]), int(c[1]), int(c[2]))\n    x = input().split()\n    for i in range(n):\n        x[i] = int(x[i])\n    x = [0] + x\n    ans = 0\n    cur = 0\n    ind = 0\n    for i in range(1, n + 1):\n        while ind < i - 1:\n            if b * (x[ind + 1] - x[ind]) * (n + 1 - i) >= a * (x[ind + 1] - x[ind]):\n                ans += a * (x[ind + 1] - x[ind])\n                ind += 1\n            else:\n                break\n        ans += b * (x[i] - x[ind])\n    print(ans)\n    t -= 1", "for _ in range(int(input())):\n    (n, a, b) = [int(x) for x in input().split()]\n    v = [int(x) for x in input().split()]\n    v = [0] + v\n    con = [0] * (n + 1)\n    for i in range(1, n + 1):\n        con[i] = b * (v[i] - 0)\n    for i in range(n - 1, -1, -1):\n        con[i] += con[i + 1]\n    cost = 0\n    val = 0\n    ans = 10 ** 18\n    for i in range(n):\n        cost = v[i] * a\n        if i != 0:\n            val += (v[i] - v[i - 1]) * b\n        cost += val\n        rem = n - i\n        rem *= v[i] * b\n        cost += con[i + 1] - rem\n        ans = min(ans, cost)\n    print(ans)", "iter = int(input())\nfor _ in range(iter):\n    lst = list(map(int, input().split()))\n    kingdoms = list(map(int, input().split()))\n    min_cost = 0\n    prefix = [0] * lst[0]\n    prefix[0] = kingdoms[0]\n    for i in range(1, lst[0]):\n        prefix[i] += kingdoms[i] + prefix[i - 1]\n    min_cost = lst[2] * prefix[-1]\n    for i in range(lst[0] - 1):\n        curr_cost = kingdoms[0] * (lst[1] + lst[2])\n        curr_cost += (kingdoms[i] - kingdoms[0]) * (lst[2] + lst[1])\n        curr_cost += -kingdoms[i] * lst[2] * (lst[0] - 1 - i)\n        curr_cost += (prefix[-1] - prefix[i]) * lst[2]\n        min_cost = min(curr_cost, min_cost)\n    print(min_cost)", "t = int(input())\nfor _ in range(t):\n    (n, a, b) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    help = [0] * n\n    for i in reversed(range(n - 1)):\n        help[i] = help[i + 1] + arr[i + 1]\n    cost = b * arr[0]\n    index = 0\n    capital = 0\n    while index < n - 1:\n        if b * (help[index] - capital * (n - (index + 1))) > a * (arr[index] - capital) + b * (help[index] - arr[index] * (n - (index + 1))):\n            cost += a * (arr[index] - capital)\n            capital = arr[index]\n        cost += b * (arr[index + 1] - capital)\n        index += 1\n    print(cost)", "for _ in ' ' * int(input()):\n    (n, a, b) = map(int, input().split())\n    x = list(map(int, input().split()))\n    sf = [0] * n\n    pr = [0] * n\n    sf[-1] = x[-1]\n    pr[0] = x[0]\n    for i in range(1, n):\n        pr[i] = pr[i - 1] + x[i]\n    for i in range(n - 2, -1, -1):\n        sf[i] = sf[i + 1] + x[i]\n    mnc = b * sum(x)\n    prc = 0\n    xc = 0\n    xi = -1\n    for i in range(n - 1):\n        if xi == -1:\n            temp = b * pr[i]\n        else:\n            temp = b * (pr[i] - pr[xi] - (i - xi) * xc)\n        crc = prc + a * (x[i] - xc) + temp\n        if crc + b * (sf[i + 1] - (n - i - 1) * x[i]) <= mnc:\n            mnc = crc + b * (sf[i + 1] - (n - i - 1) * x[i])\n            prc = crc\n            xc = x[i]\n            xi = i\n    print(mnc)"]