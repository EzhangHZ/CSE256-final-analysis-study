["from math import gcd as gc\nfor i in [*open(0)][2::2]:\n    l = list(map(int, i.split()))\n    g = l[0]\n    for j in l:\n        g = gc(g, j)\n    print(l[-1] // g)", "import math\nfor s in [*open(0)][2::2]:\n    d = 0\n    for x in map(int, s.split()):\n        d = math.gcd(d, x)\n    print(x // d)", "import math\nfor s in [*open(0)][2::2]:\n    d = 0\n    for x in map(int, s.split()):\n        d = math.gcd(d, x)\n    print(x // d)", "import sys\ns = sys.stdin.read()\nimport math\n\ndef solve(data, lenght):\n    data_list = map(int, data.split())\n    d = 0\n    for x in data_list:\n        d = math.gcd(d, x)\n    print(x // d)\nlines = s.split('\\n')\nfor index in range(1, len(lines) - 2, 2):\n    lenght = int(lines[index])\n    data = lines[index + 1]\n    solve(data, lenght)", "import math\nfor s in [*open(0)][2::2]:\n    d = 0\n    for x in map(int, s.split()):\n        d = math.gcd(d, x)\n    print(x // d)", "import math\nfor s in [*open(0)][2::2]:\n    d = 0\n    for x in map(int, s.split()):\n        d = math.gcd(d, x)\n    print(x // d)", "import math\nfor s in [*open(0)][2::2]:\n    d = 0\n    for x in map(int, s.split()):\n        d = math.gcd(d, x)\n    print(x // d)", "import math\nfor s in [*open(0)][2::2]:\n    d = 0\n    for x in map(int, s.split()):\n        d = math.gcd(d, x)\n    print(x // d)", "import sys\nimport math\nFILE = False\nif FILE:\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef get_int():\n    return int(sys.stdin.readline())\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef write_int(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef write_list(list):\n    sys.stdout.write(' '.join(map(str, list)) + '\\n')\ntest_cases = get_int()\nfor test in range(test_cases):\n    n = get_int()\n    input = [int(x) for x in get_string().split()]\n    k = 0\n    for n in input:\n        k = math.gcd(k, n)\n    result = input[-1] / k\n    print(int(result))", "import math\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    d = 0\n    for x in a:\n        d = math.gcd(d, x)\n    print(a[-1] // d)", "import math\nfor s in [*open(0)][2::2]:\n    d = 0\n    for x in map(int, s.split()):\n        d = math.gcd(d, x)\n    print(x // d)", "import math\nfor s in [*open(0)][2::2]:\n    d = 0\n    for x in map(int, s.split()):\n        d = math.gcd(d, x)\n    print(x // d)", "import math\nfor s in [*open(0)][2::2]:\n    a = (*map(int, s.split()),)\n    d = 0\n    for x in a:\n        d = math.gcd(d, x)\n    print(a[-1] // d)", "import math\nt = int(input())\nl = []\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    hcf = a[0]\n    for i in a:\n        hcf = math.gcd(hcf, i)\n    l.append(m // hcf)\nfor i in l:\n    print(i)", "import sys\nimport math\n\ndef solve():\n    gcd = math.gcd\n    inp = sys.stdin.readline\n    n = int(inp())\n    g = 0\n    m = 0\n    for v in map(int, inp().split()):\n        g = gcd(g, v)\n        m = max(m, v)\n    print(m // g)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nt = inp()\nfor i in range(t):\n    n = inp()\n    l = li()\n    s = set(l)\n    m = sys.maxsize\n    m2 = max(l)\n    g = l[0]\n    for i in range(n):\n        g = gcd(g, l[i])\n    print(m2 // g)", "import math\nimport sys\ninput = lambda : sys.stdin.readline().strip()\nx = int(input())\nfor i in range(x):\n    y = int(input())\n    k = list(map(int, input().split()))\n    a = k[0]\n    b = k[1]\n    d = math.gcd(a, b)\n    for i in range(2, y):\n        d = math.gcd(d, k[i])\n    print(max(k) // d)", "import math\nimport sys\ninput = lambda : sys.stdin.readline().strip()\nfor i in range(int(input())):\n    c = int(input())\n    m = list(map(int, input().split()))\n    gcdi = math.gcd(m[0], m[1])\n    for i in range(2, c):\n        gcdi = math.gcd(m[i], gcdi)\n    print(m[-1] // gcdi)", "import sys\nfrom bisect import bisect_left, bisect_right\nfrom heapq import heapify, heappush, heappop\nfrom collections import deque\nfrom math import gcd, sqrt, log10, log2, floor, ceil, sqrt\nfrom collections import deque, defaultdict\ninput = sys.stdin.readline\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\nmod = 1000000000 + 7\ndx = [-1, -2, 1, 2, 2, -2, -1, 1]\ndy = [2, 1, 2, 1, -1, -1, -2, -2]\nfor _ in range(ii()):\n    n = ii()\n    arr = il()\n    val = gcd(arr[0], arr[1])\n    for i in range(1, n):\n        val = gcd(val, arr[i])\n    print(max(arr) // val)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    t = a[0]\n    for x in a[1:]:\n        t = gcd(t, x)\n    print(max(a) // t)", "from math import gcd\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    g = l[0]\n    for i in l:\n        g = gcd(i, g)\n    print(max(l) // g)", "from math import gcd\nfrom functools import reduce\nfor (n, s) in ((int(input()), input()) for _ in range(int(input()))):\n    arr = list(map(int, s.split(' ')))\n    print(max(arr) // reduce(gcd, arr))", "import math\nt = int(input())\n\ndef solve():\n    n = int(input())\n    lst = list(map(int, input().split()))\n    s = set()\n    if lst[0] == 1:\n        print(max(lst))\n    else:\n        ans = lst[0]\n        for i in range(1, n):\n            ans = math.gcd(ans, lst[i])\n        if ans == 1:\n            print(max(lst))\n        else:\n            print(lst[n - 1] // ans)\nwhile t:\n    solve()\n    t -= 1", "from math import gcd\nfrom functools import reduce\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    fl = True\n    a1 = reduce(gcd, a)\n    if a1 != 1:\n        print(a[n - 1] // a1)\n    else:\n        print(a[n - 1])", "from math import gcd\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    g = 0\n    for i in A:\n        g = gcd(g, i)\n    print(A[N - 1] // g)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = 0\n    for i in range(n):\n        g = gcd(g, a[i])\n    print(a[-1] // g)", "import sys\nimport math\ninput = lambda : sys.stdin.readline().strip()\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor i in range(int(input())):\n    a = int(input())\n    b = list(map(int, input().split()))\n    c = []\n    num1 = b[0]\n    num2 = b[1]\n    gcd = find_gcd(num1, num2)\n    for i in range(2, len(b)):\n        gcd = find_gcd(gcd, b[i])\n    print(max(b) // gcd)", "import os, sys, io, math\nfrom array import *\nfrom math import *\nfrom bisect import *\nfrom heapq import *\nfrom functools import *\nfrom itertools import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\nfor _ in range(IN()):\n    (n, l, g) = (IN(), I(), 0)\n    for i in l:\n        g = gcd(g, i)\n    print(l[-1] // g + (l[0] == 0))", "from math import gcd\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    g = arr[0]\n    for j in arr:\n        g = gcd(g, j)\n    print(arr[-1] // g)", "import math\nfrom functools import reduce\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    i = reduce(math.gcd, a)\n    m = max(a)\n    print(m // i)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\nt = int(sys.stdin.readline())\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor i in range(t):\n    n = int(sys.stdin.readline())\n    arr = list(map(int, sys.stdin.readline().split()))\n    g = 0\n    for j in range(n):\n        g = gcd(arr[j], g)\n        if g == 1:\n            break\n    x = int(arr[-1] / g)\n    sys.stdout.write(str(x) + '\\n')", "from math import gcd\nMOD = int(100000.0 + 1)\nfor _ in range(int(input())):\n    n = int(input()) % MOD\n    arr = sorted(map(int, input().split()))\n    common = 0\n    for i in arr:\n        common = gcd(common, i)\n    print(arr[-1] // common)", "t = int(input())\nimport math\nfor i in range(t):\n    n = int(input())\n    ans = 0\n    array = list(map(int, input().split(' ')))\n    for i in range(len(array)):\n        ans = math.gcd(ans, array[i])\n    print(int(array[len(array) - 1] / ans))", "from math import gcd\nfrom functools import reduce\n\ndef find_gcd(list):\n    x = reduce(gcd, list)\n    return x\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    gcf = find_gcd(a)\n    print(max(a) // gcf)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    g = 0\n    for i in range(n):\n        g = gcd(g, s[i])\n    print(max(s) // g)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    (*a,) = map(int, input().split())\n    k = a[0]\n    for j in a:\n        k = math.gcd(j, k)\n    print(a[-1] // k)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = 0\n    for j in l:\n        d = math.gcd(d, j)\n    print(j // d)", "import math\n\ndef gcd(list1):\n    hcf = list1[0]\n    for j in range(1, len(list1)):\n        a = math.gcd(hcf, list1[j])\n        hcf = a\n    return hcf\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    l1 = input()\n    S = list(map(int, l1.split()))\n    ans = max(S) // gcd(S)\n    print(ans)", "import math\nfor _ in range(int(input())):\n    input()\n    l = list(map(int, input().split()))\n    a = l[0]\n    for i in l:\n        a = math.gcd(a, i)\n    print(max(l) // a)", "from math import gcd\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    (*a,) = map(int, input().split())\n    ans = 0\n    for j in a:\n        ans = gcd(ans, j)\n    print(a[-1] // ans)", "from math import gcd\n\ndef solve():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    arr.sort()\n    mx = arr[n - 1]\n    ggcd = arr[0]\n    for i in range(1, n):\n        ggcd = gcd(arr[i], ggcd)\n    if ggcd == 1:\n        print(mx)\n    else:\n        mn = ggcd\n        count = (mx - mn) // ggcd + 1\n        print(count)\nt = int(input())\nfor i in range(t):\n    solve()", "import math\nfrom collections import *\n\ndef solve():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    g = 0\n    for i in a:\n        g = math.gcd(g, i)\n    print(a[n - 1] // g)\nt = int(input())\nfor _ in range(t):\n    solve()", "from math import gcd\nfor i in range(int(input())):\n    k = int(input())\n    d = list(map(int, input().split()))\n    g = max(d)\n    f = d[0]\n    for i in range(1, k):\n        f = gcd(f, d[i])\n    print(g // f)", "import math\nfor t in range(0, int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = a[0]\n    for i in range(1, n):\n        x = math.gcd(x, a[i])\n    print(int(a[n - 1] / x))", "from math import gcd\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l = sorted(l1)\n    mx = max(l)\n    le = len(l)\n    g = l[0]\n    for j in l[1:]:\n        g = gcd(g, j)\n    print(mx // g)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    gcd = arr[0]\n    for num in arr[1:]:\n        gcd = math.gcd(gcd, num)\n    print(max(arr) // gcd)", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = max(l)\n    y = l[0]\n    for i in range(1, n):\n        y = gcd(y, l[i])\n    print(x // y)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    g = 0\n    for i in range(n):\n        g = gcd(g, s[i])\n    print(max(s) // g)", "from math import *\n\ndef solve(n, l):\n    gcd_a = l[0]\n    for i in range(1, n):\n        gcd_a = gcd(gcd_a, l[i])\n    return l[-1] // gcd_a\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(solve(n, l))", "import math\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = 0\n    for j in l:\n        d = math.gcd(d, j)\n    print(j // d)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = 0\n    for i in range(n):\n        g = gcd(g, a[i])\n    print(a[-1] // g)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    S = list(map(int, input().split()))\n    k = S[0]\n    for i in S:\n        k = math.gcd(k, i)\n    print(S[-1] // k)", "from math import gcd as gcd\nfor _ in range(int(input())):\n    x = int(input())\n    l = list(map(int, input().split()))\n    g = l[0]\n    for i in range(1, x):\n        g = gcd(g, l[i])\n    print(max(l) // g)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = 0\n    for j in l:\n        d = math.gcd(d, j)\n    print(j // d)", "import math\n\ndef res(n, a):\n    ans = a[0]\n    for x in a:\n        ans = math.gcd(x, ans)\n    ans = max(a) // ans\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(res(n, a))", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    t = a[0]\n    for x in a[1:]:\n        t = gcd(t, x)\n    print(max(a) // t)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    maxa = max(a)\n    w = 0\n    for x in a:\n        w = math.gcd(w, x)\n    print(maxa // w)", "import math\nfor _ in range(int(input())):\n    input()\n    l = list(map(int, input().split()))\n    a = l[0]\n    for i in l:\n        a = math.gcd(a, i)\n    print(max(l) // a)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = a[0]\n    for i in range(1, n):\n        g = gcd(g, a[i])\n    print(a[n - 1] // g)", "from math import gcd\n\ndef solve(nums):\n    if len(nums) == 1:\n        return nums[0]\n    div = gcd(nums[0], nums[1])\n    if len(nums) == 2:\n        return div\n    for i in range(1, len(nums) - 1):\n        div = gcd(div, nums[i + 1])\n        if div == 1:\n            return div\n    return div\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().strip().split()]\n    v = solve(a)\n    print(a[-1] // v)", "def gcd(a, b):\n    r = 0\n    while b > 0:\n        r = a % b\n        a = b\n        b = r\n    return a\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split(' ')]\n    gcd_all = arr[0]\n    for i in arr:\n        gcd_all = gcd(gcd_all, i)\n    print(arr[-1] // gcd_all)", "from math import gcd\nI = lambda : int(input())\nIs = lambda : map(int, input().split())\nLi = lambda : list(map(int, input().split()))\n\ndef solve():\n    n = I()\n    lst = Li()\n    lst.sort(reverse=True)\n    s = lst[0]\n    for i in range(1, n):\n        s = gcd(s, lst[i])\n    print(lst[0] // s)\n    return 1\nt = I()\nwhile t:\n    solve()\n    t -= 1", "from math import gcd\nfor jj in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    t = arr[0]\n    for i in range(1, n):\n        t = gcd(t, arr[i])\n    print(max(arr) // t)", "from math import gcd\nfrom functools import reduce\n\ndef find_gcd(lst):\n    x = reduce(gcd, lst)\n    return x\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = find_gcd(a)\n    M = a[n - 1]\n    answer = M // d\n    print(answer)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = a[0]\n    for i in range(1, n):\n        x = gcd(x, a[i])\n    print(max(a) // x)", "import math\nfrom collections import Counter\n\ndef li():\n    return list(map(int, input().split()))\n\ndef n():\n    return int(input())\n\ndef st():\n    return input()\nyes = 'YES'\nno = 'NO'\neven = 'EVEN'\nodd = 'ODD'\n\ndef prefix(L):\n    size = len(L)\n    for i in range(1, size):\n        L[i] = L[i] + L[i - 1]\n    return L\nfor _ in range(int(input())):\n    x = n()\n    L = li()\n    g = 0\n    for i in L:\n        g = math.gcd(g, i)\n    print(L[-1] // g)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    g = 0\n    for i in range(n):\n        g = gcd(g, s[i])\n    print(max(s) // g)", "import math\nk = int(input())\nfor q in range(k):\n    n = int(input())\n    a = list(map(int, input().split()))\n    flag = 0\n    temp = a[0]\n    for i in range(1, n):\n        temp = math.gcd(temp, a[i])\n        if temp == 0:\n            flag = 1\n            break\n    if flag == 1:\n        print(a[-1])\n    else:\n        print(int(a[-1] / temp))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mm = a[0]\n    for i in range(1, len(a)):\n        mm = math.gcd(mm, a[i])\n        if mm == 1:\n            break\n    print(a[n - 1] // mm)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = 0\n    for i in range(n):\n        g = math.gcd(g, a[i])\n    print(a[n - 1] // g)", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = max(l)\n    y = l[0]\n    for i in range(1, n):\n        y = gcd(y, l[i])\n    print(x // y)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    gcd = arr[0]\n    for num in arr[1:]:\n        gcd = math.gcd(gcd, num)\n    print(max(arr) // gcd)", "import math\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    g = mx = 0\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        g = math.gcd(g, arr[i])\n    mx = arr[n - 1] // g\n    print(mx)\n    t -= 1", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = 0\n    for i in range(n):\n        g = gcd(g, a[i])\n    print(max(a) // g)", "import math\nfor tcas in range(int(input())):\n    n = int(input())\n    list1 = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans = math.gcd(ans, list1[i])\n    print(list1[n - 1] // ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    g = 0\n    for i in range(n):\n        g = gcd(g, s[i])\n    print(max(s) // g)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    g = 0\n    for i in range(n):\n        g = gcd(g, s[i])\n    print(s[-1] // g)", "def func(lst):\n    g = lst[0]\n    for elem in lst:\n        g = gcd(elem, g)\n    return max(lst) // g\n\ndef gcd(a, b):\n    while b != 0:\n        (b, a) = (a % b, b)\n    return a\nt = int(input())\nfor i in range(t):\n    int(input())\n    print(func(list(map(int, input().split()))))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    gcd = 0\n    for i in range(0, n):\n        gcd = math.gcd(gcd, a[i])\n    print(a[-1] // gcd)", "import math\n\ndef fun(st):\n    gc = math.gcd(st[0], st[1])\n    for i in range(2, len(st)):\n        gc = math.gcd(gc, st[i])\n        if gc == 1:\n            break\n    if gc == 1:\n        print(st[len(st) - 1])\n    else:\n        v = (st[len(st) - 1] - gc) / gc\n        print(int(v) + 1)\n\ndef parsing():\n    k = int(input())\n    while k > 0:\n        n = int(input())\n        st = input()\n        st = list(map(int, st.split(' ')))\n        fun(st)\n        k -= 1\nparsing()", "import math\nt = int(int(input()))\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    m = max(arr)\n    f = arr[0]\n    for v in range(1, len(arr)):\n        f = math.gcd(f, arr[v])\n    if f != 1:\n        print(m // f)\n    else:\n        print(m)", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    fac = gcd(a[0], a[1])\n    for i in range(2, n):\n        fac = gcd(fac, a[i])\n    print(a[n - 1] // fac)", "import math\nt = int(input())\nfor _ in range(t):\n    gcd1 = 0\n    n = int(input())\n    m = list(map(int, input().split()))\n    for i in range(0, len(m)):\n        gcd1 = math.gcd(gcd1, m[i])\n    print(max(m) // gcd1)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    r = a[0]\n    for i in range(1, n):\n        r = math.gcd(r, a[i])\n    print(m // r)", "TT = int(input())\nimport functools\nimport math\nfrom math import gcd\nwhile TT:\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    a.sort()\n    now = a[0]\n    for i in range(1, n):\n        now = gcd(now, a[i])\n    if now == 1:\n        print(max(a))\n    else:\n        print(max(a) // now)\n    TT -= 1", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = 0\n    for i in range(n):\n        g = gcd(g, a[i])\n    print(a[n - 1] // g)", "from sys import setrecursionlimit\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nfrom getopt import getopt\nfrom re import sub\nimport re\nfrom os import path\nimport random\nfrom math import gcd\nfrom typing import DefaultDict\nimport math\nfrom collections import defaultdict\nfrom math import sqrt\nimport collections\nfrom sys import maxsize\nfrom itertools import combinations_with_replacement\nimport sys\nimport copy\nimport heapq\nfrom collections import Counter\nfrom collections import deque\nmod1 = 998244353\nmod = 10 ** 9 + 7\nsys.setrecursionlimit(10 ** 7)\nvowels = 'aeiou'\nMAX = float('inf')\nMIN = float('-inf')\nif path.exists('INPUT.txt'):\n    sys.stdin = open('INPUT.txt', 'r')\n    sys.stdout = open('OUTPUT.txt', 'w')\nfor _ in range(int(input())):\n    s = int(input())\n    lst = list(map(int, input().split()))\n    maxi = max(lst)\n    if s < 2:\n        print(s)\n    else:\n        x = lst[0]\n        y = lst[1]\n        ans = math.gcd(x, y)\n        for i in range(2, s):\n            ans = math.gcd(ans, lst[i])\n        print(maxi // ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    num = list(map(int, input().split()))\n    a = num[0]\n    for i in range(n):\n        a = math.gcd(a, num[i])\n    if a == 1:\n        print(num[-1])\n    else:\n        print(num[-1] // a)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    if a[0] == 1:\n        print(a[n - 1])\n        continue\n    g = math.gcd(a[0], a[1])\n    for i in range(1, n):\n        g = math.gcd(g, a[i])\n    print(a[-1] // g)", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor tc in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = a[0]\n    for i in range(n):\n        x = gcd(x, a[i])\n    a.sort()\n    ans = a[-1] // x\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        print(1)\n        continue\n    gcdnum = math.gcd(arr[0], arr[1])\n    for num in arr[2:]:\n        gcdnum = math.gcd(gcdnum, num)\n    alldiv = True\n    isOneOdd = False\n    for num in arr:\n        if num % gcdnum != 0:\n            alldiv = False\n        if num & 1:\n            isOneOdd = True\n    if alldiv:\n        print(max(arr) // gcdnum)\n    elif isOneOdd:\n        print(max(arr))\n    else:\n        print(max(arr) // 2)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = max(a)\n    temp = a[0]\n    for i in range(n):\n        temp = math.gcd(temp, a[i])\n    print(k // temp)", "from math import gcd as gcd\nfor _ in range(int(input())):\n    x = int(input())\n    l = list(map(int, input().split()))\n    g = l[0]\n    for i in range(1, x):\n        g = gcd(g, l[i])\n    print(max(l) // g)", "import math\nT = int(input())\nfor tc in range(T):\n    n = int(input())\n    a = 0\n    l1 = list(map(int, input().split()))\n    for i in range(n):\n        a = math.gcd(a, l1[i])\n    print(max(l1) // a)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    gcd = a[0]\n    for i in range(n):\n        gcd = math.gcd(gcd, a[i])\n    x = (max(a) - gcd) / gcd\n    x = int(x)\n    print(x + 1)", "import math\nT = int(input())\nfor tc in range(T):\n    n = int(input())\n    a = 0\n    l1 = list(map(int, input().split()))\n    for i in range(n):\n        a = math.gcd(a, l1[i])\n    print(max(l1) // a)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = a[0]\n    for x in a:\n        g = math.gcd(g, x)\n    print(a[-1] // g)", "from math import gcd\nfrom functools import reduce\nfor _ in range(0, int(input())):\n    n = input()\n    a = sorted([int(i) for i in input().split()])\n    if len(a) > 1:\n        s = a[0]\n        for i in a[1:]:\n            s = gcd(s, i)\n            if s == 1:\n                break\n        print(a[-1] // s)\n    else:\n        print(1)", "from math import gcd\nfor t in range(int(input())):\n    n = int(input())\n    l_list = list(map(int, input().split()))\n    l_list.sort()\n    gcd_result = 0\n    for x in range(n):\n        gcd_result = gcd(gcd_result, l_list[x])\n    print(max(l_list) // gcd_result)"]