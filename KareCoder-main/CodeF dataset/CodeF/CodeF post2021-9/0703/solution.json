["import random\ncache = {}\n\ndef popcount(n):\n    res = 0\n    while n:\n        res += 1\n        n &= n - 1\n    return res\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return popcount(n) & 1\n    if k % 2 == 1:\n        t = solve(n, k - 1)\n        x = popcount(k - 1 ^ n + k - 1) & 1\n        return t + x\n    if (n, k) in cache:\n        return cache[n, k]\n    if n % 2 == 0:\n        one_cell = 2\n        zero_cell = 0\n        cnt1 = solve(n // 2, k // 2)\n        cnt0 = k // 2 - cnt1\n    else:\n        one_cell = 0\n        zero_cell = 1\n        cnt1 = solve(n // 2, k // 2) + solve(n // 2 + 1, k // 2)\n        cnt0 = k - cnt1\n    res = one_cell * cnt1 + zero_cell * cnt0\n    cache[n, k] = res\n    return res\nt = int(input())\nfor _ in range(t):\n    cache.clear()\n    (n, k) = map(int, input().split())\n    print(solve(n, k))", "import random\ncache = {}\n\ndef popcount(n):\n    res = 0\n    while n:\n        res += 1\n        n &= n - 1\n    return res\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return popcount(n) & 1\n    if k % 2 == 1:\n        t = solve(n, k - 1)\n        x = popcount(k - 1 ^ n + k - 1) & 1\n        return t + x\n    if (n, k) in cache:\n        return cache[n, k]\n    if n % 2 == 0:\n        one_cell = 2\n        zero_cell = 0\n        cnt1 = solve(n // 2, k // 2)\n        cnt0 = k // 2 - cnt1\n    else:\n        one_cell = 0\n        zero_cell = 1\n        cnt1 = solve(n // 2, k // 2) + solve(n // 2 + 1, k // 2)\n        cnt0 = k - cnt1\n    res = one_cell * cnt1 + zero_cell * cnt0\n    cache[n, k] = res\n    return res\nt = int(input())\nfor _ in range(t):\n    cache.clear()\n    (n, k) = map(int, input().split())\n    print(solve(n, k))", "import random\ncache = {}\n\ndef popcount(n):\n    res = 0\n    while n:\n        res += 1\n        n &= n - 1\n    return res\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return popcount(n) & 1\n    if k % 2 == 1:\n        t = solve(n, k - 1)\n        x = popcount(k - 1 ^ n + k - 1) & 1\n        return t + x\n    if (n, k) in cache:\n        return cache[n, k]\n    if n % 2 == 0:\n        one_cell = 2\n        zero_cell = 0\n        cnt1 = solve(n // 2, k // 2)\n        cnt0 = k // 2 - cnt1\n    else:\n        one_cell = 0\n        zero_cell = 1\n        cnt1 = solve(n // 2, k // 2) + solve(n // 2 + 1, k // 2)\n        cnt0 = k - cnt1\n    res = one_cell * cnt1 + zero_cell * cnt0\n    cache[n, k] = res\n    return res\nt = int(input())\nfor _ in range(t):\n    cache.clear()\n    (n, k) = map(int, input().split())\n    print(solve(n, k))"]