["for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(j, i) - d.get(j - x, -i) for j in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(j, i) - d.get(j - x, -i) for j in range(x, t + 1, x))) for x in d if x and t % (x or t + 1) < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(j, i) - d.get(j - x, -i) for j in range(x, t + 1, x))) for x in d if x and t % (x or t + 1) < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(j, i) - d.get(j - x, -i) for j in range(x, t + 1, x))) for x in d if x and t % (x or t + 1) < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(j, i) - d.get(j - x, -i) for j in range(x, t + 1, x))) for x in d if x and t % (x or t + 1) < 1)))", "t = int(input())\nout = ''\nfor _ in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    sum_ = sum(arr)\n    best = float('inf')\n    for c in range(n, 0, -1):\n        target = sum_ / c\n        max_ = 0\n        now = 0\n        size = 0\n        for x in arr:\n            now += x\n            size += 1\n            if now > target:\n                break\n            if now == target:\n                now = 0\n                max_ = max(max_, size)\n                size = 0\n        else:\n            if now == 0:\n                max_ = max(max_, size)\n                best = min(best, max_)\n    out += str(best) + '\\n'\nprint(out)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def check(sm):\n        maxi = 0\n        cur = 0\n        ln = 0\n        for i in range(n):\n            if cur > sm:\n                return (False, -1)\n            if cur < sm:\n                cur += a[i]\n                ln += 1\n            else:\n                maxi = max(maxi, ln)\n                ln = 1\n                cur = a[i]\n        if cur == sm:\n            return (True, max(maxi, ln))\n        return (False, -1)\n    t = sum(a)\n    ans = n + 2\n    for seg in range(1, n + 1):\n        if t % seg:\n            continue\n        temp = check(t // seg)\n        if temp[0]:\n            ans = min(ans, temp[1])\n    print(ans)", "from genericpath import exists\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    p = [0]\n    exists = {}\n    for el in arr:\n        p.append(p[-1] + el)\n        exists[p[-1]] = len(p) - 1\n    res = n\n    for i in range(1, n + 1):\n        if p[-1] % p[i] == 0:\n            curr = i\n            k = 1\n            while p[i] * k < p[-1] and p[i] * (k + 1) in exists:\n                curr = max(curr, exists[p[i] * (k + 1)] - exists[p[i] * k])\n                k += 1\n            if p[i] * k == p[-1]:\n                res = min(res, curr)\n    print(res)", "def evaluate(A, target):\n    ans = 0\n    psum = 0\n    count = 0\n    for x in A:\n        count += 1\n        psum += x\n        if psum == target:\n            ans = max(ans, count)\n            count = 0\n            psum = 0\n        elif psum > target:\n            return -1\n    return ans\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    candidates = []\n    asum = sum(A)\n    for i in range(n, 1, -1):\n        if asum % i == 0:\n            candidates.append(asum // i)\n    ans = n\n    for c in candidates:\n        res = evaluate(A, c)\n        if res != -1:\n            ans = min(ans, res)\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "import sys\nreadline = sys.stdin.readline\nT = int(readline())\nfor _ in range(T):\n    N = int(readline())\n    A = list(map(int, readline().split()))\n    ttl = sum(A)\n    ans = N\n    for i in range(2, N + 1):\n        (q, r) = divmod(ttl, i)\n        if r != 0:\n            continue\n        else:\n            tmp = num = length = 0\n            for a in A:\n                tmp += a\n                num += 1\n                if tmp == q:\n                    tmp = 0\n                    length = max(length, num)\n                    num = 0\n                elif tmp > q:\n                    break\n            else:\n                if tmp == 0:\n                    ans = min(ans, length)\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split(' ')))\n    s = sum(lst)\n    lst1 = []\n    for i in range(1, int(s ** (1 / 2)) + 1):\n        if s % i == 0:\n            if i <= n:\n                lst1.append(i)\n            if s // i <= n:\n                lst1.append(s // i)\n    lst1.append(s)\n    lst1.sort(reverse=True)\n    r_ans = 2000000\n    for i in lst1:\n        sm = s // i\n        res = 0\n        cnt = 0\n        ans = 0\n        for j in lst:\n            cnt += 1\n            ans = max(ans, cnt)\n            res += j\n            if res == sm:\n                res = 0\n                cnt = 0\n            elif res > sm:\n                break\n        else:\n            r_ans = min(r_ans, ans)\n    print(r_ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    res = n\n    for j in range(2, n + 1):\n        if s % j == 0:\n            d = s // j\n            l = 0\n            (x, y) = (0, 0)\n            lst1 = []\n            for i in range(n):\n                d -= a[i]\n                if d == 0:\n                    l = max(l, i - x + 1)\n                    x = i + 1\n                    d = s // j\n                elif d < 0:\n                    l = n\n                    break\n            else:\n                res = min(l, res)\n    print(res)", "def Minimize_the_Thickness(n, A):\n    divisor = []\n    sum_v = sum(A)\n    for i in range(n):\n        if sum_v % (i + 1) == 0:\n            divisor.append(sum_v / (i + 1))\n    divisor.reverse()\n    max_thick_all = float('inf')\n    for j in divisor:\n        k = 0\n        sum_seg = 0\n        thickness = 0\n        max_thick = -float('inf')\n        while k < n:\n            sum_seg += A[k]\n            thickness += 1\n            if sum_seg == j:\n                sum_seg = 0\n                if thickness > max_thick:\n                    max_thick = thickness\n                thickness = 0\n            elif sum_seg > j:\n                break\n            k += 1\n        if sum_seg == 0:\n            if max_thick < max_thick_all:\n                max_thick_all = max_thick\n    return max_thick_all\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(Minimize_the_Thickness(n, a))", "from bisect import bisect_left\nfrom math import inf\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        (*nums,) = map(int, input().split())\n        prefix = [0]\n        for (i, value) in enumerate(nums):\n            prefix.append(prefix[i] + value)\n        ans = n\n        for i in range(1, n + 1):\n            num = prefix[i]\n            multi = 2\n            indexes = [i]\n            trusted = False\n            while num <= prefix[-1]:\n                num = multi * prefix[i]\n                index = bisect_left(prefix, num)\n                if index <= n and prefix[index] == num:\n                    indexes.append(index)\n                    if index == n and prefix[index] == num:\n                        trusted = True\n                else:\n                    break\n                multi += 1\n            thickness = -inf\n            if trusted:\n                for i in range(1, len(indexes)):\n                    thickness = max(thickness, indexes[i] - indexes[i - 1])\n                thickness = max(indexes[0], thickness, 1)\n                ans = min(ans, thickness)\n        print(ans)\nmain()", "def min_thickness(n, arr):\n    divisor = []\n    arr_sum = sum(arr)\n    for i in range(n):\n        if arr_sum % (i + 1) == 0:\n            divisor.append(arr_sum / (i + 1))\n    divisor.reverse()\n    max_thick_all = float('inf')\n    for j in divisor:\n        i = 0\n        (sum_seg, thick) = (0, 0)\n        max_thick = float('-inf')\n        while i < n:\n            sum_seg += arr[i]\n            thick += 1\n            if sum_seg == j:\n                sum_seg = 0\n                max_thick = max(max_thick, thick)\n                thick = 0\n            elif sum_seg > j:\n                break\n            i += 1\n        if sum_seg == 0:\n            max_thick_all = min(max_thick_all, max_thick)\n    return max_thick_all\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(min_thickness(n, arr))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ts = sum(arr)\n    cs = 0\n    minl = math.inf\n    for i in range(n):\n        cs += arr[i]\n        maxl = i + 1\n        if (ts - cs) % cs == 0:\n            s = 0\n            cl = 0\n            for j in range(i + 1, n):\n                s += arr[j]\n                cl += 1\n                if s == cs:\n                    s = 0\n                    maxl = max(maxl, cl)\n                    cl = 0\n            if s == 0:\n                minl = min(maxl, minl)\n    print(minl)", "for i in range(int(input())):\n    n = int(input())\n    mas = list(map(int, input().split()))\n    sum_mas = sum(mas)\n    min_ans = n\n    for j in range(n, 0, -1):\n        cur_ans = -1\n        if sum_mas % j == 0:\n            sum2 = sum_mas // j\n            sum3 = 0\n            h = False\n            o = 0\n            for z in range(n):\n                if sum3 > sum2:\n                    h = True\n                    break\n                elif sum3 == sum2:\n                    cur_ans = max(cur_ans, o)\n                    sum3 = 0\n                    o = 0\n                sum3 += mas[z]\n                o += 1\n            if not h:\n                if sum3 == sum2 or sum2 == 0:\n                    cur_ans = max(cur_ans, o)\n                    sum3 = 0\n                    o = 0\n                    min_ans = min(cur_ans, min_ans)\n    print(min_ans)", "import sys\ninput = sys.stdin.readline\n\ndef getMyDivisor(n):\n    divisorsList = []\n    for i in range(1, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            divisorsList.append(i)\n            if i ** 2 != n:\n                divisorsList.append(n // i)\n    divisorsList.sort()\n    return divisorsList\nfor tc in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    answer = n\n    SUM = sum(a)\n    for v in getMyDivisor(SUM):\n        req = SUM / v\n        flag = True\n        s = 0\n        length = 0\n        MAX = 0\n        for i in range(n):\n            s += a[i]\n            length += 1\n            if s == req:\n                MAX = max(length, MAX)\n                s = 0\n                length = 0\n            elif s > req:\n                flag = False\n                break\n        if flag:\n            answer = min(answer, MAX)\n    print(answer)", "def check(values, size):\n    max_thick = 0\n    thick = 0\n    sm = 0\n    for v in values:\n        thick += 1\n        sm += v\n        if sm > size:\n            return -1\n        if sm == size:\n            max_thick = max(max_thick, thick)\n            sm = 0\n            thick = 0\n    return max_thick\n\ndef thickness(n, values):\n    mn_thick = n\n    total = sum(values)\n    factor = n\n    while factor > 1:\n        if total % factor == 0:\n            size = total // factor\n            thick = check(values, size)\n            if thick != -1:\n                mn_thick = min(mn_thick, thick)\n        factor -= 1\n    return mn_thick\nfor _ in range(int(input())):\n    n = int(input())\n    values = list(map(int, input().split()))\n    print(thickness(n, values))", "def check(arr, segment, totalsum):\n    sumofone = totalsum // segment\n    csum = 0\n    clen = 0\n    mxlen = -1\n    segs = 0\n    for val in arr:\n        csum += val\n        if csum < sumofone:\n            clen += 1\n        elif csum == sumofone:\n            clen += 1\n            mxlen = max(mxlen, clen)\n            segs += 1\n            csum = 0\n            clen = 0\n        else:\n            csum = 0\n            clen = 0\n    if segs == segment:\n        return mxlen\n    return float('inf')\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    ans = float('inf')\n    a = list(map(int, input().split()))\n    sumofarr = sum(a)\n    for segments in range(1, n + 1):\n        if sumofarr % segments == 0:\n            ans = min(ans, check(a, segments, sumofarr))\n    print(ans)\n    t -= 1", "for i in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split(' '))]\n    s = sum(a)\n    m = 0\n    for p in range(1, n + 1):\n        if p == 1:\n            m = n\n            continue\n        d = s // p\n        if d * p != s:\n            continue\n        r = 0\n        t = 0\n        b = True\n        c = 0\n        for i in range(n):\n            r += a[i]\n            c += 1\n            if r > d:\n                b = False\n                break\n            if r == d:\n                t = max(t, c)\n                r = 0\n                c = 0\n        else:\n            m = min(m, t)\n    print(m)", "for _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    ans = n\n    sum = 0\n    s = 0\n    for i in lis:\n        s += i\n    for i in range(n):\n        sum += lis[i]\n        ref = i + 1\n        if s % sum == 0:\n            cur_sum = 0\n            lower = i + 1\n            for j in range(i + 1, n):\n                cur_sum += lis[j]\n                if cur_sum == sum:\n                    cur_sum = 0\n                    ref = max(ref, j - lower + 1)\n                    lower = j + 1\n            if cur_sum == 0:\n                ans = min(ans, ref)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    ans = n\n    s = sum(lis)\n    s_sum = 0\n    for i in range(n):\n        s_sum += lis[i]\n        ref = i + 1\n        if s % s_sum == 0:\n            cur_sum = 0\n            lower = i + 1\n            for j in range(i + 1, n):\n                cur_sum += lis[j]\n                if cur_sum == s_sum:\n                    cur_sum = 0\n                    ref = max(ref, j - lower + 1)\n                    lower = j + 1\n                elif cur_sum > s_sum:\n                    break\n            if cur_sum == 0:\n                ans = min(ans, ref)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    ans = n\n    s = sum(lis)\n    s_sum = 0\n    for i in range(n):\n        s_sum += lis[i]\n        ref = i + 1\n        if s % s_sum == 0:\n            cur_sum = 0\n            lower = 0\n            for j in range(i + 1, n):\n                cur_sum += lis[j]\n                lower += 1\n                if cur_sum == s_sum:\n                    cur_sum = 0\n                    ref = max(ref, lower)\n                    lower = 0\n                elif cur_sum > s_sum:\n                    break\n            if cur_sum == 0:\n                ans = min(ans, ref)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    di = dict()\n    for i in range(1, n):\n        lis[i] += lis[i - 1]\n    for i in range(n):\n        di[lis[i]] = i\n    sum = lis[-1]\n    ans = n\n    for i in range(n):\n        if sum % lis[i] == 0:\n            cur_sum = lis[i] * 2\n            last_ind = i + 1\n            Mx = i + 1\n            while cur_sum in di:\n                Mx = max(Mx, di[cur_sum] - last_ind + 1)\n                last_ind = di[cur_sum] + 1\n                cur_sum += lis[i]\n            if last_ind == n:\n                ans = min(ans, Mx)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split(sep=' ')))\n    arr1 = []\n    arr2 = []\n    s = 0\n    s1 = 0\n    s2 = 0\n    cnt = 0\n    for j in range(n):\n        s += arr[j]\n    j = 0\n    while j < n - 1:\n        s1 += arr[j]\n        if s % s1 == 0:\n            arr1.append(s1)\n        j = j + 1\n    for k in range(len(arr1)):\n        m = 0\n        temp = m - 1\n        s2 = 0\n        for j in range(n):\n            s2 += arr[j]\n            if s2 == arr1[k]:\n                s2 = 0\n                if j - temp > m:\n                    m = j - temp\n                temp = j\n        if s2 == 0:\n            arr2.append(m)\n    if arr.count(arr[0]) == n:\n        print(1)\n    elif len(arr2) == 0 or (len(arr2) == 1 and arr2[0] == 1):\n        print(n)\n    else:\n        print(min(arr2))", "def check(arr, sum, l):\n    count = 0\n    Sum = 0\n    diff = 0\n    str = 0\n    for i in range(len(arr)):\n        Sum += arr[i]\n        if Sum == sum:\n            count += 1\n            Sum = 0\n            if i - str + 1 > diff:\n                diff = i - str + 1\n            str = i + 1\n        elif Sum > sum:\n            return 0\n    if count == l:\n        return diff\n    return 0\na = int(input())\nfor i in range(a):\n    b = int(input())\n    array = list(map(int, input().split()))\n    Sum = sum(array)\n    min = len(array)\n    for k in range(1, b + 1):\n        if Sum / k == Sum // k and check(array, Sum / k, k) != 0:\n            if min > check(array, Sum / k, k):\n                min = check(array, Sum / k, k)\n    print(min)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = []\n    d = {}\n    s = 0\n    for i in range(n):\n        s += a[i]\n        d[s] = i\n        p.append(s)\n    x = n\n    for i in range(n):\n        o = i\n        h = 2 * p[i]\n        k = i + 1\n        chk = 1\n        while h <= s:\n            if h in d:\n                k = max(k, d[h] - o)\n                o = d[h]\n                h += p[i]\n            else:\n                chk = 0\n                break\n        if chk == 1 and h == s + p[i]:\n            x = min(x, k)\n    print(x)", "for _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    ans = n\n    sum = 0\n    s = 0\n    for i in lis:\n        s += i\n    for i in range(n):\n        sum += lis[i]\n        ref = i + 1\n        if s % sum == 0:\n            cur_sum = 0\n            lower = i + 1\n            for j in range(i + 1, n):\n                cur_sum += lis[j]\n                if cur_sum == sum:\n                    cur_sum = 0\n                    ref = max(ref, j - lower + 1)\n                    lower = j + 1\n            if cur_sum == 0:\n                ans = min(ans, ref)\n    print(ans)", "def helper(n, a):\n    sums = sum(a)\n    temp = 0\n    mini = n\n    cnt = 0\n    for i in range(n):\n        temp += a[i]\n        cnt += 1\n        temp_max = 0\n        if sums % temp == 0:\n            temp_max = cnt\n            (temp_sum, temp_cnt) = (0, 0)\n            for j in range(i + 1, n):\n                temp_sum += a[j]\n                temp_cnt += 1\n                if temp_sum == temp:\n                    temp_max = max(temp_max, temp_cnt)\n                    temp_sum = 0\n                    temp_cnt = 0\n            if temp_sum == 0:\n                mini = min(temp_max, mini)\n    print(mini)\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    helper(n, a)", "from bisect import bisect_left\nfrom math import inf\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        (*nums,) = map(int, input().split())\n        prefix = [0]\n        for (i, value) in enumerate(nums):\n            prefix.append(prefix[i] + value)\n        ans = n\n        for i in range(1, n + 1):\n            num = prefix[i]\n            multi = 2\n            indexes = [i]\n            trusted = False\n            while num <= prefix[-1]:\n                num = multi * prefix[i]\n                index = bisect_left(prefix, num)\n                if index <= n and prefix[index] == num:\n                    indexes.append(index)\n                    if index == n and prefix[index] == num:\n                        trusted = True\n                else:\n                    break\n                multi += 1\n            thickness = -inf\n            if trusted:\n                for i in range(1, len(indexes)):\n                    thickness = max(thickness, indexes[i] - indexes[i - 1])\n                thickness = max(indexes[0], thickness, 1)\n                ans = min(ans, thickness)\n        print(ans)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    ans = n\n    di = dict()\n    for i in range(1, n):\n        lis[i] += lis[i - 1]\n    for i in range(n):\n        di[lis[i]] = i\n    s = lis[-1]\n    for i in range(n):\n        if s % lis[i] == 0:\n            mx = i + 1\n            cnt = 1\n            nxt_sum = lis[i] * 2\n            while nxt_sum in di:\n                mx = max(mx, di[nxt_sum] - di[nxt_sum - lis[i]])\n                nxt_sum += lis[i]\n                cnt += 1\n            if cnt * lis[i] == s:\n                ans = min(ans, mx)\n    print(ans)", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    j = 1\n    m = 2000000000.0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    for x in filter(None, d):\n        try:\n            if t % x < 1:\n                m = min(m, max((d[i] - d[i - x] for i in range(x, t + 1, x))))\n        except:\n            x\n    print(m)", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    j = 1\n    m = 2000000000.0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    for x in d:\n        try:\n            if x and t % x < 1:\n                m = min(m, max((d[i] - d[i - x] for i in range(x, t + 1, x))))\n        except:\n            x\n    print(m)", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    m = 2000000000.0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    for x in d:\n        try:\n            if x and t % x < 1:\n                m = min(m, max((d[i] - d[i - x] for i in range(x, t + 1, x))))\n        except:\n            x\n    print(m)", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    m = 2000000000.0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    for x in d:\n        if x and t % x < 1:\n            m = min(m, max((d.get(i, 2000000000.0) - d.get(i - x, 2000000000.0) for i in range(x, t + 1, x))))\n    print(m)", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    M = m = 2000000000.0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    for x in d:\n        if x and t % x < 1:\n            m = min(m, max((d.get(i, M) - d.get(i - x, M) for i in range(x, t + 1, x))))\n    print(m)", "M = 2000000000.0\nfor s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, M) - d.get(i - x, M) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, t) - d.get(i - x, -t) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(j, i) - d.get(j - x, -i) for j in range(x, t + 1, x))) for x in d if x and t % (x or t + 1) < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(j, i) - d.get(j - x, -i) for j in range(x, t + 1, x))) for x in d if x and t % (x or t + 1) < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(j, i) - d.get(j - x, -i) for j in range(x, t + 1, x))) for x in d if x and t % (x or t + 1) < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(j, i) - d.get(j - x, -i) for j in range(x, t + 1, x))) for x in d if x and t % (x or t + 1) < 1)))", "def fun(s, a):\n    curr = 0\n    l = 0\n    ans = 0\n    for i in range(len(a)):\n        curr += a[i]\n        l += 1\n        if curr == s:\n            ans = max(ans, l)\n            l = 0\n            curr = 0\n        elif curr > s:\n            return -1\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    ans = -1\n    tmp = 0\n    for i in range(n):\n        tmp += a[i]\n        if s % tmp == 0:\n            val = fun(tmp, a)\n            if ans == -1 and val != -1:\n                ans = val\n            elif val != -1:\n                ans = min(ans, val)\n    if ans == -1:\n        print(1)\n    else:\n        print(ans)", "def cal(tong, ls, start, cand):\n    if start >= len(ls):\n        return len(ls)\n    s = 0\n    dem = 0\n    for i in range(start, len(ls)):\n        dem += 1\n        s += ls[i]\n        if s > tong:\n            return\n        if s == tong:\n            s = 0\n            cand.append(dem)\n            dem = 0\n    return max(cand)\n\ndef solve(ls):\n    kq = float('inf')\n    s = 0\n    for j in range(len(ls)):\n        s += ls[j]\n    cur_s = 0\n    for j in range(len(ls)):\n        cur_s += ls[j]\n        if s % cur_s == 0:\n            m = cal(cur_s, ls, j + 1, [j + 1])\n            if m != None and kq > m:\n                kq = m\n    return kq\nl = []\nn = int(input())\nfor i in range(n):\n    k = int(input())\n    ls = list(map(int, input().split()))\n    l.append(solve(ls))\nfor i in l:\n    print(i)", "def cal(tong, ls, start, cand):\n    if start >= len(ls):\n        return len(ls)\n    s = 0\n    dem = 0\n    for i in range(start, len(ls)):\n        dem += 1\n        s += ls[i]\n        if s > tong:\n            return\n        if s == tong:\n            s = 0\n            cand.append(dem)\n            dem = 0\n    return max(cand)\n\ndef solve(ls):\n    kq = float('inf')\n    s = 0\n    for j in range(len(ls)):\n        s += ls[j]\n    cur_s = 0\n    for j in range(len(ls)):\n        cur_s += ls[j]\n        if s % cur_s == 0:\n            m = cal(cur_s, ls, j + 1, [j + 1])\n            if m != None and kq > m:\n                kq = m\n    return kq\nl = []\nn = int(input())\nfor i in range(n):\n    k = int(input())\n    ls = list(map(int, input().split()))\n    l.append(solve(ls))\nfor i in l:\n    print(i)", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "for _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    ans = n\n    s = sum(lis)\n    s_sum = 0\n    for i in range(n):\n        s_sum += lis[i]\n        ref = i + 1\n        if s % s_sum == 0:\n            cur_sum = 0\n            lower = 0\n            for j in range(i + 1, n):\n                cur_sum += lis[j]\n                lower += 1\n                if cur_sum == s_sum:\n                    cur_sum = 0\n                    ref = max(ref, lower)\n                    lower = 0\n                elif cur_sum > s_sum:\n                    break\n            if cur_sum == 0:\n                ans = min(ans, ref)\n    print(ans)", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "n = int(input())\nfor _ in range(n):\n    a = int(input())\n    b = list(map(int, input().split()))\n    s = sum(b)\n    zx = 1000000\n    for i in range(1, a + 1):\n        if s % i:\n            continue\n        else:\n            k = s / i\n            s1 = 0\n            lenzd = bz = syc = cd = 0\n            for j in range(a):\n                if s1 + b[j] > k:\n                    bz = 1\n                    break\n                elif s1 + b[j] == k:\n                    s1 = 0\n                    cd = j - syc + 1\n                    syc = j + 1\n                    if cd > lenzd:\n                        lenzd = cd\n                else:\n                    s1 += b[j]\n            if bz:\n                continue\n            elif zx > lenzd:\n                zx = lenzd\n    print(zx)", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, t) - d.get(i - x, -t) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "import math\n\ndef minimize_the_thickness():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    tot = 0\n    for i in range(n):\n        tot += a[i]\n    ans = n\n    for segs in range(1, n + 1):\n        if tot % segs:\n            continue\n        req = tot / segs\n        cur = 0\n        at = 0\n        possible = 1\n        mx = 0\n        for i in range(n):\n            cur += a[i]\n            if cur > req:\n                possible = 0\n            if cur == req:\n                mx = max(i - at + 1, mx)\n                at = i + 1\n                cur = 0\n        if possible:\n            ans = min(ans, mx)\n    print(ans)\nfor i in range(int(input())):\n    minimize_the_thickness()", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "t = int(input())\nres = list()\nfor _ in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    target = max(nums)\n    p = [0] * n\n    p[0] = nums[0]\n    for i in range(1, n):\n        p[i] = p[i - 1] + nums[i]\n    ans = n\n    for i in range(n):\n        if p[i] < target:\n            continue\n        target = p[i]\n        if p[n - 1] % target == 0:\n            left = tmp = 0\n            cnt = p[n - 1] // target\n            x = 1\n            for j in range(i, n):\n                (div, mod) = divmod(p[j], target)\n                if mod == 0 and div == x:\n                    tmp = max(tmp, j - left + 1)\n                    left = j + 1\n                    x += 1\n            if x - 1 == cnt:\n                ans = min(ans, tmp)\n    res.append(ans)\nfor ans in res:\n    print(ans)", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "for sminimizthick in [*open(0)][2::2]:\n    d = {0: 0}\n    tminimizthick = i = 0\n    for x in sminimizthick.split():\n        tminimizthick += int(x)\n        i += 1\n        d[tminimizthick] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, tminimizthick + 1, x))) for x in d if x and tminimizthick % x < 1)))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    for i in range(1, n, 1):\n        a[i] = a[i - 1] + a[i]\n    suma = a[n - 1]\n    ans = 1000000000.0\n    for i in range(1, n + 1, 1):\n        if suma % i != 0:\n            continue\n        d = suma // i\n        cnt = d\n        last = -1\n        maxv = 0\n        for j in range(n):\n            if a[j] == cnt:\n                maxv = max(maxv, j - last)\n                cnt += d\n                last = j\n        if cnt == suma + d:\n            ans = min(ans, maxv)\n    print(ans)", "def getFactors(n):\n    fac = [1]\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            fac.append(i)\n            if i * i != n:\n                fac.append(n // i)\n        i += 1\n    fac.append(n)\n    return fac\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = sum(arr)\n    factors = getFactors(s)\n    ans = 2 ** 31\n    for f in factors:\n        ess = s // f\n        i = 0\n        cs = 0\n        cos = 0\n        j = -1\n        loes = 0\n        while i < n:\n            cs += arr[i]\n            if cs == ess:\n                cos += 1\n                loes = max(loes, i - j)\n                j = i\n                cs = 0\n            elif cs > ess:\n                break\n            i += 1\n        if cs == ess:\n            cos += 1\n            loes = max(loes, i - 1 - j)\n        if cos == f:\n            ans = min(ans, loes)\n    print(ans)", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "for c in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in c.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, t) - d.get(i - x, -t) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "from math import inf\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ts = sum(arr)\n    cs = 0\n    minl = inf\n    for i in range(n):\n        cs += arr[i]\n        maxl = i + 1\n        if (ts - cs) % cs == 0:\n            s = 0\n            cl = 0\n            for j in range(i + 1, n):\n                s += arr[j]\n                cl += 1\n                if s == cs:\n                    s = 0\n                    maxl = max(maxl, cl)\n                    cl = 0\n            if s == 0:\n                minl = min(maxl, minl)\n    print(minl)", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(j, i) - d.get(j - x, -i) for j in range(x, t + 1, x))) for x in d if x and t % (x or t + 1) < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "for a in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in a.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "from math import log\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    b = []\n    for i in range(n):\n        v = s / (n - i)\n        if v // 1 != v:\n            continue\n        t = 0\n        c = True\n        m = 0\n        q = 0\n        for j in range(n):\n            t += a[j]\n            q += 1\n            if t > v:\n                c = False\n                break\n            elif t == v:\n                t = 0\n                m = max(m, q)\n                q = 0\n        if c:\n            b.append(m)\n    print(min(b))", "for _ in range(int(input())):\n    n = int(input())\n    wah = list(map(int, input().split(' ')))\n    all_s = sum(wah)\n    dels = []\n    for i in range(1, int(all_s ** (1 / 2)) + 1):\n        if all_s % i == 0:\n            dels.append(i)\n            num = all_s // i\n            if num != i:\n                dels.append(num)\n    min_length = n\n    for div in dels:\n        s = 0\n        flag = True\n        max_length = 0\n        need_sum = all_s // div\n        start = 0\n        for i in range(n):\n            s += wah[i]\n            if s > need_sum:\n                flag = False\n                break\n            elif s == need_sum:\n                s = 0\n                max_length = max(max_length, i - start + 1)\n                start = i + 1\n        if start != n:\n            flag = False\n        if flag:\n            min_length = min(max_length, min_length)\n    print(min_length)", "for r in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in r.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    pref = []\n    s = 0\n    d = {}\n    for i in range(n):\n        s += a[i]\n        pref.append(s)\n        d[s] = i\n    ans = n\n    for i in range(n - 1):\n        if s % pref[i] != 0:\n            continue\n        k = s // pref[i]\n        flag = True\n        cur_ans = i + 1\n        left_ind = i\n        right_ind = i\n        for j in range(2, k + 1):\n            v = d.get(j * pref[i], -1)\n            if v == -1:\n                flag = False\n                break\n            right_ind = v\n            cur_ans = max(cur_ans, right_ind - left_ind)\n            left_ind = v\n        if not flag:\n            continue\n        ans = min(ans, cur_ans)\n    print(ans)", "def exe():\n    length = 0\n    s = sum(lst)\n    l = []\n    while length <= n:\n        length += 1\n        sub_sum = s / length\n        if sub_sum % 1 != 0:\n            continue\n        max_len = 0\n        temp_sum = 0\n        c = 0\n        index = 0\n        for i in range(n):\n            temp_sum += lst[i]\n            c += 1\n            if temp_sum == sub_sum:\n                max_len = max(c, max_len)\n                c = 0\n                temp_sum = 0\n                index = i\n        if max_len != 0 and index == n - 1:\n            l.append(max_len)\n    if len(l) == 0:\n        return n\n    else:\n        return min(l)\nfor i in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    print(exe())", "def exe():\n    length = 0\n    s = sum(lst)\n    l = []\n    while length <= n:\n        length += 1\n        sub_sum = s / length\n        if sub_sum % 1 != 0:\n            continue\n        max_len = 0\n        temp_sum = 0\n        c = 0\n        index = 0\n        for i in range(n):\n            temp_sum += lst[i]\n            c += 1\n            if temp_sum == sub_sum:\n                max_len = max(c, max_len)\n                c = 0\n                temp_sum = 0\n                index = i\n        if max_len != 0 and index == n - 1:\n            l.append(max_len)\n    if len(l) == 0:\n        return n\n    else:\n        return min(l)\nfor i in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    print(exe())", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "def next_valid_index(a, start, goal):\n    curr_sum = a[start]\n    curr_index = start + 1\n    while curr_sum < goal and curr_index < len(a):\n        curr_sum += a[curr_index]\n        curr_index += 1\n    return curr_index if curr_sum == goal else -1\n\ndef max_width_by_sum(a, goal):\n    curr_index = 0\n    ans = 0\n    while curr_index < len(a):\n        next_index = next_valid_index(a, curr_index, goal)\n        if next_index == -1:\n            return len(a)\n        ans = max(ans, next_index - curr_index)\n        curr_index = next_index\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    summa = sum(a)\n    left_sum = a[0]\n    index = 1\n    max_width = n\n    while index < n:\n        while summa % left_sum != 0 and index < n:\n            left_sum += a[index]\n            index += 1\n        if summa % left_sum == 0:\n            max_width = min(max_width, max_width_by_sum(a, left_sum))\n            if index == n:\n                break\n            left_sum += a[index]\n            index += 1\n    print(max_width)", "import math\nT = int(input(''))\nfor i in range(T):\n    n = int(input())\n    str1 = input()\n    l1 = [int(c) for c in str1.split()]\n    total = 0\n    for element in l1:\n        total += element\n    firstSum = 0\n    j = 0\n    max_dists = []\n    index = 0\n    while j < n:\n        dist = []\n        firstSum += l1[j]\n        if total % firstSum == 0:\n            dist.append(j + 1)\n            index = j\n            standard = firstSum\n            k = j + 1\n            secondSum = 0\n            while k < n:\n                secondSum += l1[k]\n                if secondSum == standard:\n                    secondSum = 0\n                    dist.append(k - index)\n                    index = k\n                k += 1\n            if secondSum == 0:\n                j += 1\n                max_dists.append(max(dist))\n                continue\n            else:\n                j += 1\n        else:\n            j += 1\n    print(min(max_dists))", "from bisect import bisect_left\n\ndef find_index(a, x):\n    i = bisect_left(a, x)\n    if i != len(a) and a[i] == x:\n        return i\n    return -1\n\ndef solve():\n    _ = int(input())\n    v = [int(x) for x in input().split()]\n    for i in range(1, len(v)):\n        v[i] += v[i - 1]\n    result = len(v)\n    for s in v:\n        if v[-1] % s != 0:\n            continue\n        max_segment = 0\n        last_index = -1\n        i = 1\n        while i * s <= v[-1]:\n            index = find_index(v, i * s)\n            if index == -1:\n                max_segment = 0\n                break\n            max_segment = max(max_segment, index - last_index)\n            last_index = index\n            i += 1\n        if max_segment > 0:\n            result = min(result, max_segment)\n    print(result)\nfor _ in range(int(input())):\n    solve()", "def main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        s = sum(a)\n        min_thickness = n\n        for i in range(2, n + 1):\n            if s % i == 0:\n                val = s // i\n                partition = True\n                partial = 0\n                found_thickness = 0\n                thickness = 0\n                for j in range(n):\n                    if partial > val:\n                        partition = False\n                        break\n                    if partial == val:\n                        partial = 0\n                        if thickness > found_thickness:\n                            found_thickness = thickness\n                        thickness = 0\n                    partial += a[j]\n                    thickness += 1\n                if partial != val:\n                    partition = False\n                if partial == val:\n                    partial = 0\n                    if thickness > found_thickness:\n                        found_thickness = thickness\n                    thickness = 0\n                if partition and min_thickness > found_thickness:\n                    min_thickness = found_thickness\n        print(min_thickness)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    array = list(map(int, input().split()))\n    total = sum(array)\n    min_len = n\n    for no_of_segments in range(1, n + 1):\n        subarray_sum = total / no_of_segments\n        if total % no_of_segments:\n            continue\n        (l, cur_len, cur_sum, segments) = (0, 0, 0, 0)\n        for r in range(len(array)):\n            cur_sum += array[r]\n            if cur_sum == subarray_sum:\n                segments += 1\n                cur_len = max(cur_len, r - l + 1)\n                l = r + 1\n                cur_sum = 0\n        if segments == no_of_segments:\n            min_len = min(min_len, cur_len)\n    print(min_len)", "t = int(input())\nwhile t > 0:\n    n2 = int(input())\n    arr = list(map(int, input().split()))\n    sem = sum(arr)\n    temp = 0\n    cnt = 0\n    result = n2\n    for i in range(n2):\n        temp = temp + arr[i]\n        cnt += 1\n        cnt1 = 0\n        if sem % temp == 0:\n            cnt1 = cnt\n            t_s = 0\n            t_c = 0\n            for j in range(i + 1, n2):\n                t_s = t_s + arr[j]\n                t_c += 1\n                if t_s == temp:\n                    cnt1 = max(t_c, cnt1)\n                    t_s = 0\n                    t_c = 0\n            if t_s == 0:\n                result = min(result, cnt1)\n    print(result)\n    t = t - 1", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    k = i = 0\n    for x in s.split():\n        k += int(x)\n        i += 1\n        d[k] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, k + 1, x))) for x in d if x and k % x < 1)))", "for s in [*open(0)][2::2]:\n    d = {0: 0}\n    t = i = 0\n    for x in s.split():\n        t += int(x)\n        i += 1\n        d[t] = i\n    print(min((max((d.get(i, 99) - d.get(i - x, 0) for i in range(x, t + 1, x))) for x in d if x and t % x < 1)))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = []\n    d = {}\n    s = 0\n    for i in range(n):\n        s += a[i]\n        d[s] = i\n        p.append(s)\n    x = n\n    for i in range(n):\n        o = i\n        h = 2 * p[i]\n        k = i + 1\n        chk = 1\n        while h <= s:\n            if h in d:\n                k = max(k, d[h] - o)\n                o = d[h]\n                h += p[i]\n            else:\n                chk = 0\n                break\n        if chk == 1 and h == s + p[i]:\n            x = min(x, k)\n    print(x)", "def cal(n, arr):\n    if n == 1:\n        return 1\n    if len(set(arr)) == 1:\n        return 1\n    if n == 2:\n        return 2\n    t = [0] * n\n    dic = {}\n    for i in range(n):\n        t[i] = arr[i] + t[i - 1]\n        dic[t[i]] = i\n    ans = n\n    for i in range(n):\n        if t[-1] % t[i] == 0:\n            res = i + 1\n            tag = t[i]\n            st = i\n            ck = 0\n            for j in range(t[i] + tag, t[-1] + tag, tag):\n                if j in dic:\n                    res = max(res, dic[j] - st)\n                    st = dic[j]\n                else:\n                    ck = 1\n                    break\n            if ck == 0:\n                ans = min(ans, res)\n    return ans\nfor jj in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    print(cal(n, arr))", "import math\nimport collections\n\ndef func(k, n, psum, sum):\n    i = 0\n    temp = 0\n    req = sum // k\n    l1 = []\n    while i < n:\n        if psum[i] - temp == req:\n            l1.append(i)\n            temp = psum[i]\n        i += 1\n    if len(l1) == 0:\n        return n\n    if l1[-1] != n - 1:\n        return n\n    ans = l1[0] + 1\n    for k in range(len(l1) - 1):\n        ans = max(ans, l1[k + 1] - l1[k])\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    sum = 0\n    for w in l:\n        sum += w\n    psum = []\n    psum.append(l[0])\n    for i in range(1, n):\n        psum.append(l[i] + psum[-1])\n    ans = n\n    for j in range(1, n + 1):\n        if sum % j != 0:\n            continue\n        else:\n            ans = min(ans, func(j, n, psum, sum))\n    print(ans)"]