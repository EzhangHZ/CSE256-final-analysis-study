["cases = int(input())\nfor _ in range(cases):\n    n = int(input())\n    parents = list(map(int, input().split()))\n    if len(parents) == 1:\n        print('1\\n1\\n1')\n        continue\n    leaves = set((i + 1 for i in range(n))) - set(parents)\n    print(len(leaves))\n    visited = set()\n    for leaf in leaves:\n        cur = leaf\n        path = [leaf]\n        while parents[cur - 1] != cur:\n            cur = parents[cur - 1]\n            if cur in visited:\n                break\n            visited.add(cur)\n            path.append(cur)\n        print(len(path))\n        print(' '.join(map(str, reversed(path))))", "cases = int(input())\nfor _ in range(cases):\n    n = int(input())\n    parents = list(map(int, input().split()))\n    if len(parents) == 1:\n        print('1\\n1\\n1')\n        continue\n    leaves = set((i + 1 for i in range(n))) - set(parents)\n    print(len(leaves))\n    visited = set()\n    for leaf in leaves:\n        cur = leaf\n        path = [leaf]\n        while parents[cur - 1] != cur:\n            cur = parents[cur - 1]\n            if cur in visited:\n                break\n            visited.add(cur)\n            path.append(cur)\n        print(len(path))\n        print(' '.join(map(str, reversed(path))))", "for g in range(int(input())):\n    n = int(input())\n    p = [int(i) - 1 for i in input().split()]\n    (s, v, a) = (set(p), [1] * n, [])\n    for i in range(n):\n        if i in s and n > 1:\n            continue\n        t = []\n        while v[i]:\n            t += [i + 1]\n            v[i] = 0\n            i = p[i]\n        a += [t[::-1]]\n    print(len(a))\n    for v in a:\n        print(len(v))\n        print(*v)", "for x in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    used = [False] * n\n    g = [[] for i in range(n)]\n    for i in range(n):\n        if p[i] - 1 != i:\n            g[p[i] - 1].append(i)\n    c = 0\n    s = ''\n    for i in range(n):\n        if not g[i]:\n            c += 1\n            ans = []\n            l = 0\n            while p[i] - 1 != i and (not used[i]):\n                used[i] = True\n                l += 1\n                ans.append(i + 1)\n                i = p[i] - 1\n            if p[i] - 1 == i and (not used[i]):\n                used[i] = True\n                ans.append(i + 1)\n                l += 1\n            s += str(l) + '\\n' + ' '.join(map(str, ans[::-1])) + '\\n'\n    print(c)\n    print(s[:len(s) - 1])", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    parents = list(map(int, input().split()))\n    if n == 1:\n        print(1)\n        print(1)\n        print(1)\n        continue\n    leaves = []\n    graph = defaultdict(int)\n    for i in range(n):\n        graph[parents[i]] += 1\n    for i in range(1, n + 1):\n        if graph[i] == 0:\n            leaves.append(i)\n    ans = len(leaves)\n    ansArray = []\n    for leaf in leaves:\n        node = leaf\n        temp = [node]\n        graph[node] = -1\n        while parents[node - 1] != node and graph[parents[node - 1]] != -1:\n            temp.append(parents[node - 1])\n            node = parents[node - 1]\n            graph[node] = -1\n        ansArray.append(temp[::-1])\n    print(ans)\n    for i in range(len(ansArray)):\n        print(len(ansArray[i]))\n        print(*ansArray[i])", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    p = [int(i) for i in input().split(' ')]\n    if n == 1:\n        print('1\\n1\\n1\\n')\n        continue\n    parents = set(p)\n    all_nodes = set(list(range(1, n + 1)))\n    leaves = all_nodes - parents\n    col = [0 for i in range(n)]\n    print(len(leaves))\n    for leaf in leaves:\n        rpath = [leaf]\n        node = leaf\n        col[node - 1] = 1\n        while col[p[node - 1] - 1] == 0:\n            node = p[node - 1]\n            col[node - 1] = 1\n            rpath.append(node)\n        print(len(rpath))\n        for i in reversed(rpath):\n            print(i, end=' ')\n        print('')\n    print('')", "for _ in range(int(input())):\n    n = int(input())\n    p = [int(x) - 1 for x in input().split()]\n    leaves = set(range(n)) - set(p)\n    if not leaves:\n        print(1)\n        print(1)\n        print(1)\n        continue\n    visited = [False] * n\n    paths = []\n    for i in leaves:\n        path = []\n        while not visited[i]:\n            path.append(i)\n            visited[i] = True\n            i = p[i]\n        paths.append(path)\n    print(len(paths))\n    for path in paths:\n        print(len(path))\n        print(' '.join((str(x + 1) for x in reversed(path))))", "for _ in range(int(input())):\n    n = int(input())\n    parents = [int(x) - 1 for x in input().split()]\n    leaves = set(range(n)) - set(parents)\n    if n == 1:\n        print(1)\n        print(1)\n        print(1)\n        continue\n    visited = [False] * n\n    paths = []\n    for i in leaves:\n        path = []\n        while not visited[i]:\n            path.append(i)\n            visited[i] = True\n            i = parents[i]\n        paths.append(path)\n    print(len(paths))\n    for path in paths:\n        print(len(path))\n        print(' '.join((str(x + 1) for x in reversed(path))))", "import math\nfor i in range(int(input())):\n    n = int(input())\n    parents = list(map(int, input().split()))\n    if n == 1:\n        print(1, 1, 1, sep='\\n')\n        print()\n        continue\n    childs = [0] * n\n    for j in range(n):\n        parents[j] -= 1\n        childs[parents[j]] = -1\n    npaths = 0\n    nPathArray = []\n    for k in range(n):\n        if childs[k] == 0:\n            npaths += 1\n            newpath = [k]\n            childs[k] = npaths\n            p = parents[k]\n            while childs[p] == -1:\n                newpath.append(p)\n                childs[p] = npaths\n                p = parents[p]\n            nPathArray.append(newpath)\n    print(len(nPathArray))\n    for l in nPathArray:\n        print(len(l))\n        for m in range(len(l) - 1, -1, -1):\n            print(l[m] + 1, end=' ')\n        print()\n    print()", "cnt = int(input())\ni = 1\nwhile i <= cnt:\n    n = int(input())\n    p = input().split()\n    if n == 1:\n        print(1)\n        print(1)\n        print(1)\n        i += 1\n        continue\n    mark = [0] * (n + 1)\n    for j in range(len(p)):\n        p[j] = int(p[j])\n        mark[p[j]] = 1\n    ans = []\n    for node in range(1, n + 1):\n        if mark[node] == 0:\n            path = []\n            now = node\n            path.append(now)\n            while mark[p[now - 1]] == 1:\n                path.append(p[now - 1])\n                mark[p[now - 1]] = 2\n                now = p[now - 1]\n            ans.append(path)\n    print(len(ans))\n    for a in ans:\n        print(len(a))\n        for k in reversed(range(len(a))):\n            print(a[k], end=' ')\n        print('')\n    i += 1", "N = int(input())\nfor i in range(N):\n    n = int(input())\n    ll = list(map(int, input().split()))\n    for i in range(n):\n        if ll[i] == i + 1:\n            root = i + 1\n    v = dict()\n    for i in range(n):\n        if i + 1 != root:\n            if ll[i] not in v.keys():\n                v[ll[i]] = list()\n            v[ll[i]].append(i + 1)\n    lvs = [False for i in range(n + 1)]\n    lvs[0] = True\n    cnt = 0\n    for i in ll:\n        lvs[i] = True\n    for i in lvs:\n        if not i:\n            cnt += 1\n    if n == 1:\n        cnt = 1\n    print(cnt)\n    if n == 1:\n        print(1)\n        print(ll[0])\n    st = [False for i in range(n + 1)]\n    for i in range(1, len(lvs)):\n        if not lvs[i]:\n            cur = i\n            tmp = []\n            while not st[cur]:\n                tmp.append(cur)\n                st[cur] = True\n                cur = ll[cur - 1]\n            print(len(tmp))\n            for i in range(len(tmp) - 1, -1, -1):\n                print(tmp[i], end=' ')\n            print()\n    print()"]