["import sys\nisPrime = [True] * int(1000000.0 + 2)\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, e) = map(int, inp().split())\n    a = list(map(int, inp().split()))\n    w = [True] * n\n    r = 0\n    for i in range(n):\n        if w[i]:\n            j = 0\n            z = i\n            last = -1\n            last1 = -1\n            p = False\n            while z < n:\n                w[z] = False\n                v = a[z]\n                if v > 1:\n                    (last, last1) = (j, last)\n                    p = isPrime[v]\n                    if p:\n                        r -= 1\n                if p:\n                    r += last - last1\n                z += e\n                j += 1\n    print(r)\n\ndef main():\n    M = len(isPrime)\n    isPrime[1] = False\n    isPrime[0] = False\n    i = 2\n    while i * i < M:\n        if isPrime[i]:\n            j = i * i\n            while j < M:\n                isPrime[j] = False\n                j += i\n        i += 1\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "import sys\nisPrime = [True] * int(1000000.0 + 2)\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, e) = map(int, inp().split())\n    a = list(map(int, inp().split()))\n    w = [True] * n\n    r = 0\n    for i in range(n):\n        if w[i]:\n            j = 0\n            z = i\n            last = -1\n            last1 = -1\n            p = False\n            while z < n:\n                w[z] = False\n                v = a[z]\n                if v > 1:\n                    (last, last1) = (j, last)\n                    p = isPrime[v]\n                    if p:\n                        r -= 1\n                if p:\n                    r += last - last1\n                z += e\n                j += 1\n    print(r)\n\ndef main():\n    M = len(isPrime)\n    isPrime[1] = False\n    isPrime[0] = False\n    i = 2\n    while i * i < M:\n        if isPrime[i]:\n            j = i * i\n            while j < M:\n                isPrime[j] = False\n                j += i\n        i += 1\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "from sys import stdin\ninput = stdin.readline\nn = 10 ** 6\nprime = [True for i in range(n + 1)]\nprime[1] = False\np = 2\nwhile p * p <= n:\n    if prime[p] == True:\n        for i in range(p * p, n + 1, p):\n            prime[i] = False\n    p += 1\nfor _ in range(int(input())):\n    (n, b) = map(int, input().split())\n    li = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        if prime[li[i]] == True:\n            (j, c) = (i + b, 0)\n            while j < n and li[j] == 1:\n                (j, c) = (j + b, c + 1)\n            (d, j) = (0, i - b)\n            while j >= 0 and li[j] == 1:\n                (j, d) = (j - b, d + 1)\n            ans = ans + c + d * (c + 1)\n    print(ans)", "n = 10 ** 6\nprime = [True for i in range(n + 1)]\nprime[1] = False\np = 2\nwhile p * p <= n:\n    if prime[p]:\n        for i in range(p * p, n + 1, p):\n            prime[i] = False\n    p += 1\nfor _ in range(int(input())):\n    (n, b) = map(int, input().split())\n    li = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        if prime[li[i]]:\n            (j, c) = (i + b, 0)\n            while j < n and li[j] == 1:\n                (j, c) = (j + b, c + 1)\n            (d, j) = (0, i - b)\n            while j >= 0 and li[j] == 1:\n                (j, d) = (j - b, d + 1)\n            ans += c + d * (c + 1)\n    print(ans)", "from sys import stdin\np = 2\nisprime = [True] * (10 ** 6 + 1)\nisprime[0] = isprime[1] = False\nwhile p * p <= 10 ** 6:\n    if isprime[p]:\n        for i in range(p * p, 10 ** 6 + 1, p):\n            isprime[i] = False\n    p += 1\nfor _ in range(int(stdin.readline())):\n    (n, e) = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    onesahead = [0 for i in range(n)]\n    onesbefore = [0 for i in range(n)]\n    for i in range(n - 1, -1, -1):\n        if arr[i] == 1:\n            onesahead[i] = 1\n            if i + e < n:\n                onesahead[i] += onesahead[i + e]\n    for i in range(0, n):\n        if arr[i] == 1:\n            onesbefore[i] = 1\n            if i - e >= 0:\n                onesbefore[i] += onesbefore[i - e]\n    ans = 0\n    for i in range(n):\n        if isprime[arr[i]]:\n            a = 0\n            b = 0\n            if i + e < n:\n                a = onesahead[i + e]\n            if i - e >= 0:\n                b = onesbefore[i - e]\n                b = b * (a + 1)\n            nn = a + b\n            3\n            ans += nn\n    print(ans)", "n = 10 ** 6\nprime = [True for i in range(n + 1)]\nprime[1] = False\np = 2\nwhile p <= 1000:\n    if prime[p]:\n        for i in range(p * p, n + 1, p):\n            prime[i] = False\n    p += 1\nt = int(input())\nfor _ in range(t):\n    (n, e) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for i in range(e):\n        j = i\n        left = 0\n        right = 0\n        while j < n:\n            if arr[j] == 1:\n                left += 1\n                j += e\n                continue\n            if prime[arr[j]]:\n                j += e\n                while j < n and arr[j] == 1:\n                    right += 1\n                    j += e\n                ans += left + right + left * right\n                left = right\n                right = 0\n            else:\n                left = 0\n                j += e\n    print(ans)", "prime = [1 for i in range(1000002)]\np = 2\n(prime[0], prime[1]) = (0, 0)\nwhile p * p <= 1000001:\n    if prime[p]:\n        for i in range(p * p, 1000002, p):\n            prime[i] = 0\n    p += 1\nfor _ in range(int(input())):\n    (n, e) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        if prime[arr[i]]:\n            j = i + e\n            c = 0\n            while j < n and arr[j] == 1:\n                c += 1\n                j += e\n            j = i - e\n            d = 0\n            while j >= 0 and arr[j] == 1:\n                d += 1\n                j -= e\n            ans = ans + c + (c + 1) * d\n    print(ans)", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000000 + 7\nmod2 = 998244353\nprime = [1 for i in range(1000002)]\np = 2\nwhile p * p <= 1000001:\n    if prime[p]:\n        for i in range(p * p, 1000002, p):\n            prime[i] = 0\n    p += 1\nfor _ in range(I()):\n    (n, e) = M()\n    a = L()\n    ans = 0\n    for i in range(n):\n        if a[i] > 1 and prime[a[i]]:\n            j = i - e\n            d1 = d2 = 0\n            while j >= 0 and a[j] == 1:\n                j -= e\n                d1 += 1\n            k = i + e\n            while k < n and a[k] == 1:\n                k += e\n                d2 += 1\n            ans += d1 * d2 + d1 + d2\n    print(ans)", "def SieveOfEratosthenes(n):\n    li = [1] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if li[p] == 1:\n            for i in range(p ** 2, n + 1, p):\n                li[i] = 0\n        p += 1\n    li[0] = 0\n    li[1] = 0\n    return li\nli = SieveOfEratosthenes(10 ** 6 + 1)\nt = int(input())\nfor i in range(t):\n    (n, e) = map(int, input().split())\n    a = list(map(int, input().split()))\n    lipr = []\n    c = 0\n    for i in range(n):\n        if li[a[i]] == 1:\n            lipr.append(i)\n    c = 0\n    le = len(lipr)\n    for i in range(le):\n        lc = 0\n        rc = 0\n        for j in range(lipr[i] + e, n, e):\n            if a[j] == 1:\n                lc += 1\n            else:\n                break\n        for j in range(lipr[i] - e, -1, -e):\n            if a[j] == 1:\n                rc += 1\n            else:\n                break\n        c += rc\n        c += lc\n        c += rc * lc\n    print(c)", "isPrime = [1 for j in range(1000003)]\n\ndef sieve(isPrime):\n    maxN = 1000002\n    (isPrime[0], isPrime[1]) = (0, 0)\n    i = 2\n    while i * i <= maxN:\n        if isPrime[i]:\n            for j in range(i * i, maxN + 1, i):\n                isPrime[j] = 0\n        i += 1\nsieve(isPrime)\nfor i in range(int(input())):\n    (n, e) = map(int, input().split())\n    a = [int(j) for j in input().split()]\n    ans = 0\n    for j in range(len(a)):\n        if a[j] == 1 or isPrime[a[j]]:\n            (x, y) = (0, 0)\n            (k, cnt) = (0, 0)\n            while j + k * e < n:\n                if a[j + k * e] == 1:\n                    if cnt == 0:\n                        a[j + k * e] = -1\n                        x += 1\n                    else:\n                        y += 1\n                    k += 1\n                elif cnt == 0 and isPrime[a[j + k * e]]:\n                    a[j + k * e] = -1\n                    cnt += 1\n                    x += 1\n                    k += 1\n                else:\n                    break\n            if k == 1:\n                ans += 0\n            elif y != 0:\n                ans += (x - 1) * (y + 1) + y\n            elif x > 1 and cnt != 0:\n                ans += x - 1\n    print(ans)", "def soe(n):\n    s = set()\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    for p in range(2, n + 1):\n        if prime[p]:\n            s.add(p)\n    return s\ns = soe(10 ** 6)\n\ndef count(cnt1, cnt2):\n    return (cnt1 - 1) * (cnt2 - 1)\nfor _ in range(int(input())):\n    (n, e) = map(int, input().split())\n    a = list(map(int, input().split()))\n    pa = [0] * n\n    ons = [0] * n\n    vis = [0] * n\n    for i in range(n):\n        if a[i] == 1:\n            ons[i] = 1\n        elif a[i] in s:\n            pa[i] = 1\n    ans = 0\n    i = 0\n    while i < n:\n        if pa[i] == 1:\n            j = i + e\n            cnt1 = 1\n            while j < n:\n                if ons[j] == 1:\n                    cnt1 += 1\n                    vis[j] = 1\n                else:\n                    break\n                j += e\n            j = i - e\n            cnt2 = 1\n            while j >= 0:\n                if ons[j] == 1:\n                    cnt2 += 1\n                    vis[j] = 1\n                else:\n                    break\n                j -= e\n            if cnt1 + cnt2 > 2:\n                ans += count(cnt1, cnt2) + cnt1 + cnt2 - 2\n            i += 1\n        else:\n            i += 1\n    print(ans)", "def SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    m = {}\n    for p in range(2, n):\n        if prime[p]:\n            m[p] = 1\n    return m\nh = SieveOfEratosthenes(10 ** 6)\na = int(input())\nfor x in range(a):\n    (b, c) = map(int, input().split())\n    d = list(map(int, input().split()))\n    f = 0\n    for y in range(b):\n        n = 0\n        p = 0\n        if h.get(d[y]) != None:\n            for z in range(y + c, b, c):\n                if d[z] == 1:\n                    n += 1\n                else:\n                    break\n            for z in range(y - c, -1, -c):\n                if d[z] == 1:\n                    p += 1\n                else:\n                    break\n        f += n + p * (n + 1)\n    print(f)", "import sys\ninput = sys.stdin.readline\nn = 10 ** 6\nis_prime = [True for i in range(n + 1)]\nis_prime[1] = False\np = 2\nwhile p * p <= n:\n    if is_prime[p]:\n        for i in range(p * p, n + 1, p):\n            is_prime[i] = False\n    p += 1\nt = int(input())\nfor _ in range(t):\n    (n, e) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        (l, r) = (0, 0)\n        if is_prime[a[i]] and a[i] != 1:\n            for j in range(i + e, n, e):\n                if a[j] == 1:\n                    r += 1\n                else:\n                    break\n            for j in range(i - e, -1, -e):\n                if a[j] == 1:\n                    l += 1\n                else:\n                    break\n        ans += l + r + l * r\n    print(ans)", "n = 10 ** 6\nis_prime = [True for i in range(n + 1)]\nis_prime[1] = False\np = 2\nwhile p * p <= n:\n    if is_prime[p]:\n        for i in range(p * p, n + 1, p):\n            is_prime[i] = False\n    p += 1\nt = int(input())\nfor _ in range(t):\n    (n, e) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        (l, r) = (0, 0)\n        if is_prime[a[i]] and a[i] != 1:\n            for j in range(i + e, n, e):\n                if a[j] == 1:\n                    r += 1\n                else:\n                    break\n            for j in range(i - e, -1, -e):\n                if a[j] == 1:\n                    l += 1\n                else:\n                    break\n        ans += l + r + l * r\n    print(ans)", "import sys\n\ndef fprime():\n    taille = 10 ** 6 + 1\n    primes = [True for x in range(taille)]\n    primes[0] = False\n    primes[1] = False\n    for i in range(2, taille):\n        if primes[i]:\n            j = 2 * i\n            while j < taille:\n                primes[j] = False\n                j += i\n    return primes\n\ndef main():\n    input = sys.stdin.readline\n    t = int(input())\n    primes = fprime()\n    for _ in range(t):\n        (n, e) = map(int, input().split())\n        a = list(map(int, input().split()))\n        nbUn = [0 for i in range(n)]\n        for i in range(n - 1, -1, -1):\n            if a[i] == 1:\n                if i < n - e:\n                    nbUn[i] = nbUn[i + e] + 1\n                else:\n                    nbUn[i] = 1\n            else:\n                nbUn[i] = 0\n        nbSol = [0 for i in range(n)]\n        for i in range(n - 1, -1, -1):\n            if a[i] != 1 and i < n - e and (nbUn[i + e] > 0):\n                if primes[a[i]]:\n                    nbSol[i] = nbUn[i + e]\n            if a[i] == 1 and i < n - e:\n                if a[i + e] == 1:\n                    nbSol[i] = nbSol[i + e]\n                elif primes[a[i + e]]:\n                    nbSol[i] = nbSol[i + e] + 1\n        print(sum(nbSol))\nmain()", "max = 10 ** 6 + 1\nallPrime = [True] * max\nallPrime[0] = allPrime[1] = False\nfor i in range(2, max):\n    if allPrime[i]:\n        for j in range(i, max, i):\n            if j != i:\n                allPrime[j] = False\ntest = int(input())\nfor t in range(test):\n    (n, e) = map(int, input().split())\n    array = list(map(int, input().split()))[:n]\n    noOfOnesLeft = [0] * n\n    noOfOnesRight = [0] * n\n    ans = 0\n    for i in range(n - 1, e - 1, -1):\n        if array[i] == 1:\n            noOfOnesLeft[i - e] = noOfOnesLeft[i] + 1\n    for i in range(n - e):\n        if array[i] == 1:\n            noOfOnesRight[i + e] = noOfOnesRight[i] + 1\n    for i in range(n):\n        if allPrime[array[i]]:\n            ans += noOfOnesLeft[i] + noOfOnesRight[i] * (noOfOnesLeft[i] + 1)\n    print(ans)", "primes = []\nd = list(range(10 ** 6 + 1))\nfor i in range(2, 10 ** 6 + 1):\n    if d[i] == i:\n        primes.append(i)\n    for j in primes:\n        if i * j > 10 ** 6:\n            break\n        if j > d[i]:\n            break\n        d[i * j] = j\nfor _ in ' ' * int(input()):\n    (n, e) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    ans = 0\n    for i in range(e):\n        la = a[i::e]\n        delims = [i for (i, v) in enumerate(la) if v != 1]\n        for (i, v) in enumerate(delims):\n            u = delims[i - 1] + 1 if i else 0\n            w = delims[i + 1] - 1 if i < len(delims) - 1 else len(la) - 1\n            if d[la[v]] == la[v]:\n                ans += (v - u + 1) * (w - v + 1) - 1\n    print(ans)", "p = [1 for i in range(10 ** 6 + 1)]\np[0] = 0\np[1] = 0\nfor i in range(2, len(p)):\n    if p[i] == 1:\n        for j in range(i * 2, len(p), i):\n            if j % i == 0:\n                p[j] = 0\nt = int(input())\nfor test in range(t):\n    (n, e) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    b = []\n    for j in range(e):\n        b.append([a[i] for i in range(j, len(a), e)])\n    ans = 0\n    for j in range(len(b)):\n        for i in range(len(b[j])):\n            if p[b[j][i]] == 1:\n                l = i\n                r = i\n                Left = True\n                Right = True\n                while Left == True or Right == True:\n                    if r + 1 < len(b[j]) and b[j][r + 1] == 1:\n                        r += 1\n                    else:\n                        Right = False\n                    if l - 1 >= 0 and b[j][l - 1] == 1:\n                        l -= 1\n                    else:\n                        Left = False\n                ans += r - i + (i - l)\n                ans += (r - i) * (i - l)\n    print(ans)"]