["T = int(input())\nfor _ in range(T):\n    n = int(input())\n    ans = [str(i) for i in range(n, 0, -1)]\n    print(' '.join(ans))\n    for i in range(n - 1):\n        (ans[i], ans[i + 1]) = (ans[i + 1], ans[i])\n        print(' '.join(ans))\n        (ans[i], ans[i + 1]) = (ans[i + 1], ans[i])", "t = int(input())\nresult = []\nfor i in range(t):\n    n = int(input())\n    if n == 3:\n        result.append('3 2 1')\n        result.append('3 1 2')\n        result.append('1 3 2')\n    else:\n        array = [str(j) for j in range(n, 0, -1)]\n        result.append(' '.join(array))\n        for j in range(n - 1):\n            array.insert(0, array[n - 1])\n            del array[n]\n            result.append(' '.join(array))\nfor i in result:\n    print(i)", "t = int(input())\n\ndef q(n):\n    if n == 3:\n        return '3 2 1\\n3 1 2\\n1 3 2'\nfor i in range(t):\n    n = int(input())\n    l = [str(i) for i in range(1, n + 1)]\n    (l[1], l[2]) = ('3', '2')\n    if n != 3:\n        print(' '.join(l))\n        for k in range(n - 1):\n            val = l[0]\n            l.remove(val)\n            l.append(val)\n            print(' '.join(l))\n    else:\n        print(q(3))", "for _ in range(int(input())):\n    N = int(input())\n    A = [str(i) for i in range(N, 0, -1)]\n    for i in range(N):\n        (A[i], A[0]) = (A[0], A[i])\n        print(' '.join(A))", "nbTest = int(input())\n\ndef swap(orig, i, j):\n    new = orig.copy()\n    tmp = new[i]\n    new[i] = new[j]\n    new[j] = tmp\n    return new\nfor testN in range(nbTest):\n    n = int(input())\n    original = []\n    for i in range(n, -1, -1):\n        original.append(str(i))\n    original.remove('0')\n    print(' '.join(original))\n    for i in range(n - 1):\n        new = swap(original, i, i + 1)\n        print(' '.join(new))", "def solve():\n    n = int(input())\n    if n == 3:\n        print('3 2 1')\n        print('1 3 2')\n        print('3 1 2')\n    else:\n        ans = [str(x) for x in list(range(n, 0, -1))]\n        for i in range(n):\n            print(' '.join(ans))\n            ans = [ans[-1]] + ans[:-1]\nfor tc in range(int(input())):\n    solve()", "global cur\ncur = 0\n\ndef solve(a):\n    n = a\n    out = []\n    for k in range(1, n + 1):\n        s = [i for i in range(n, k, -1)] + [1] + [i + 1 for i in range(k - 1, 0, -1)]\n        out.append(' '.join(map(str, s)))\n    return '\\n'.join(out)\nout = []\nt = int(input())\nfor case in range(t):\n    s = int(input())\n    out.append(str(solve(s)))\nprint('\\n'.join(out))", "for _ in range(int(input())):\n    n = int(input())\n    temp = list(range(2, n + 1))\n    temp.append(1)\n    temp = [str(i) for i in temp]\n    print(' '.join(temp))\n    for i in range(1, n):\n        (temp[i], temp[i - 1]) = (temp[i - 1], temp[i])\n        print(' '.join(temp))", "def find(N):\n    result = [str(x) for x in range(1, N + 1)]\n    result.reverse()\n    s0 = ' '.join(result)\n    print(s0)\n    result.reverse()\n    if N > 1:\n        one = result.pop(0)\n        result.append(one)\n        s1 = ' '.join(result)\n        print(s1)\n        two = result.pop(0)\n        result.append(two)\n        s2 = ' '.join(result)\n        print(s2)\n        three = result.pop(0)\n        for i in range(0, n - 3):\n            first = result.pop(0)\n            result.append(first)\n            result.append(three)\n            s = ' '.join(result)\n            print(s)\n            result.pop()\n    return\nnum = int(input())\nfor i in range(num):\n    n = int(input())\n    find(n)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr1 = [str(i) for i in range(1, n + 1)]\n    arr = sorted(arr1, reverse=True)\n    k = 0\n    for j in range(n):\n        (arr[k], arr[0]) = (arr[0], arr[k])\n        print(' '.join(arr))\n        k += 1", "def func(n):\n    res = ''\n    arr = [str(i) for i in range(n, 0, -1)]\n    for i in range(n):\n        res += ' '.join(arr)\n        if i < n - 1:\n            res += '\\n'\n        (arr[n - i - 1], arr[n - i - 2]) = (arr[n - i - 2], arr[n - i - 1])\n    return res\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(func(n))", "n = int(input())\na = [[['3', '2', '1'], ['3', '1', '2'], ['1', '3', '2']]] * 50\nfor i in range(3, 50):\n    a[i] = a[i - 1] + [a[i - 1][0]]\n    for j in range(i + 1):\n        a[i][j] = [str(i + 1)] + a[i][j]\n    a[i][j] = [a[i][j][1]] + [a[i][j][0]] + a[i][j][2:]\nfor i in range(n):\n    b = int(input())\n    for j in a[b - 1]:\n        print(' '.join(j))", "test = int(input())\nfor t in range(test):\n    n = int(input())\n    original = [str(i) for i in range(1, n + 1)]\n    original.reverse()\n    x = ' '.join(original)\n    print(x)\n    i = 0\n    while i < n - 1:\n        arr = original.copy()\n        (arr[i], arr[i + 1]) = (arr[i + 1], arr[i])\n        x = ' '.join(arr)\n        print(x)\n        i += 1", "t = int(input())\nfor i in range(t):\n    tamanho = int(input())\n    if tamanho > 3:\n        a = list(range(1, tamanho + 1))\n        a = a[::-1]\n        print(' '.join(map(str, a)))\n        risk = tamanho // 2\n        for j in range(1, tamanho):\n            if j == risk + 2:\n                (a[j - risk], a[j - risk - 1]) = (a[j - risk - 1], a[j - risk])\n                print(' '.join(map(str, a)))\n                (a[j - risk - 1], a[j - risk]) = (a[j - risk], a[j - risk - 1])\n            else:\n                (a[0], a[j]) = (a[j], a[0])\n                print(' '.join(map(str, a)))\n                (a[0], a[j]) = (a[j], a[0])\n    else:\n        print(3, 2, 1)\n        print(2, 3, 1)\n        print(1, 3, 2)", "def shift(a: list):\n    end = a[0]\n    a.pop(0)\n    a.append(end)\n\ndef buildNAntiFibo(n):\n    if n == 3:\n        return [[3, 2, 1], [1, 3, 2], [3, 1, 2]]\n    ret = []\n    count = n - 1\n    a = [n - x for x in range(n)]\n    ret.append(a.copy())\n    while count > 0:\n        shift(a)\n        count -= 1\n        ret.append(a.copy())\n    return ret\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    perms = buildNAntiFibo(n)\n    for perm in perms:\n        print(' '.join(map(str, perm)))", "n = int(input())\nfor i in range(n):\n    x = int(input())\n    l = [str(i) for i in range(1, x + 1)]\n    for j in range(x):\n        if x == 3 and l[0] == '3':\n            print('2 3 1')\n        else:\n            print(' '.join(l[::-1]))\n        l.pop(0)\n        l.append(str(int(l[0]) - 1))", "for i in range(int(input())):\n    n = int(input())\n    a = list(range(2, n + 1))\n    a.sort(reverse=True)\n    k = ' 1 '\n    a = list(map(str, a))\n    for i in range(n):\n        print(' '.join(a[:i]) + k + ' '.join(a[i:]))", "num = int(input())\nfor i in range(num):\n    nums = int(input())\n    lst = temp = [str(i) for i in range(1, nums + 1)][::-1]\n    for j in range(nums):\n        (lst[0], lst[j]) = (lst[j], lst[0])\n        print(' '.join(lst))\n        lst = temp", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    S = []\n    for q in range(1, n + 1):\n        S.append(str(n + 1 - q) + ' ')\n    S *= 2\n    if n > 3:\n        for i in range(0, n):\n            print(''.join(S[i:i + n]))\n    else:\n        print(1, 3, 2)\n        print(3, 1, 2)\n        print(3, 2, 1)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(1, n + 1):\n        l.append(i)\n    l = l[::-1]\n    res = [l.copy()]\n    for i in range(2, n):\n        (l[0], l[i]) = (l[i], l[0])\n        res.append(l.copy())\n        (l[0], l[i]) = (l[i], l[0])\n        (l[1], l[i]) = (l[i], l[1])\n        res.append(l.copy())\n        (l[1], l[i]) = (l[i], l[1])\n    if n % 2 == 1 and n != 3:\n        res.append(l[::-1])\n    if n == 3:\n        res = [[3, 2, 1], [2, 3, 1], [1, 3, 2]]\n    for x in res[:n]:\n        k = [str(a) for a in x]\n        print(' '.join(k))", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\n\ndef get_print_int_same(x):\n    sys.stdout.write(str(x) + ' ')\n\ndef get_print_same(x):\n    sys.stdout.write(x + ' ')\n\ndef solve():\n    dp = []\n    dp.append([[2, 3, 1], [3, 1, 2], [3, 2, 1]])\n    for i in range(4, 51, 1):\n        ans = [[]]\n        prev = dp[i - 3 - 1]\n        for j in prev:\n            cj = j[:]\n            cj.insert(0, i)\n            ans.append(cj)\n        last = ans[-1][:]\n        (last[0], last[1]) = (last[1], last[0])\n        ans[0] = last\n        dp.append(ans)\n    for _ in range(get_int()):\n        n = get_int()\n        ans = dp[n - 3]\n        for i in ans:\n            get_print(' '.join(map(str, i)))\nsolve()", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    a = [0] * n\n    for i in range(n):\n        a[i] = str(n - i)\n    print(' '.join((x for x in a)))\n    for i in range(n - 1):\n        (a[i], a[i + 1]) = (a[i + 1], a[i])\n        print(' '.join((x for x in a)))\n        (a[i], a[i + 1]) = (a[i + 1], a[i])", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    if n == 3:\n        print('3 2 1')\n        print('2 3 1')\n        print('1 3 2')\n    else:\n        for i in range(n):\n            lst = list(range(n - 1, 0, -1))\n            if n % 2 and i + 1 == n // 2 + 2:\n                lst = list(range(1, n + 1))\n                (lst[-1], lst[0]) = (lst[0], lst[-1])\n            else:\n                lst.insert(i, n)\n            print(' '.join(map(str, lst)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(range(1, n + 1))[::-1]\n    if n == 3:\n        print('3 2 1')\n        print('1 3 2')\n        print('3 1 2')\n    else:\n        for i in range(n):\n            ans = [str(x) for x in a[i:] + a[:i]]\n            print(' '.join(ans))", "for _ in range(int(input())):\n    n = int(input())\n    if n == 3:\n        print('3 1 2')\n        print('3 2 1')\n        print('2 3 1')\n        continue\n    a = list(range(1, n + 1))[::-1]\n    print(' '.join(map(str, a)))\n    for __ in range(n - 1):\n        a = a[-1:] + a[:-1]\n        print(' '.join(map(str, a)))", "from collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 3:\n        print('3 2 1')\n        print('3 1 2')\n        print('1 3 2')\n    else:\n        ns = deque(map(str, range(n, 0, -1)))\n        for _ in range(n):\n            print(' '.join(ns))\n            ns.rotate()", "T = int(input())\n\ndef print_seq(l):\n    print(' '.join([str(i) for i in l]))\nfor _ in range(T):\n    n = int(input())\n    if n == 3:\n        print_seq([3, 2, 1])\n        print_seq([1, 3, 2])\n        print_seq([3, 1, 2])\n    else:\n        print_seq(list(range(n, 0, -1)))\n        base_seq = list(range(2, n + 1))\n        for i in range(n - 1):\n            print_seq(base_seq[i:] + base_seq[:i] + [1])", "for _ in range(int(input())):\n    n = int(input())\n    l = ['1', '3', '2', '4']\n    while len(l) > n:\n        l.pop()\n    for x in range(5, n + 1):\n        l.append(str(x))\n    if n == 3:\n        print('1 3 2')\n        print('3 2 1')\n        print('3 1 2')\n    else:\n        for x in range(n):\n            print(' '.join(l[x:]) + ' ' + ' '.join(l[:x]))", "n = int(input())\nfor i in range(n):\n    num = int(input())\n    perm = []\n    for i in range(num):\n        perm.append(num - i)\n    if num == 3:\n        print('1 3 2')\n        print('2 3 1')\n        print('3 2 1')\n    else:\n        for j in range(num):\n            temp = perm[0]\n            perm.pop(0)\n            perm.append(temp)\n            print(' '.join(list(map(str, perm))))", "import sys\nimport math\nstrInp = lambda : input().strip().split()\nintInp = lambda : list(map(int, strInp()))\n\ndef gen(init, n):\n    newInit = []\n    for i in range(n - 1):\n        newInit.append([n] + init[i])\n    last = list.copy(newInit[n - 2])\n    tmp = last[0]\n    last[0] = last[1]\n    last[1] = tmp\n    newInit.append(last)\n    return newInit\nfor t in range(int(input())):\n    n = int(input())\n    init = [[3, 2, 1], [3, 1, 2], [1, 3, 2]]\n    for i in range(4, n + 1):\n        init = gen(init, i)\n    for i in init:\n        print(' '.join((str(e) for e in i)))", "num_tests = int(input())\ninputs = []\noutputs = []\nfor _ in range(num_tests):\n    inputs.append(int(input()))\nfor n in inputs:\n    descending = list(range(n - 1, 0, -1))\n    largest_elem = n\n    for i in range(n):\n        output = descending.copy()\n        output.insert(i, largest_elem)\n        if n % 2 == 1 and i >= 2:\n            if descending[i - 2] + descending[i - 1] == largest_elem:\n                tmp1 = output[i - 1]\n                tmp2 = output[i - 2]\n                output[i - 1] = largest_elem\n                output[i - 2] = tmp1\n                output[i] = tmp2\n        outputs.append(' '.join((str(num) for num in output)))\nfor output in outputs:\n    print(output)", "for i in range(int(input())):\n    n = int(input())\n    a = []\n    if n == 3:\n        print('2 3 1')\n        print('3 1 2')\n        print('3 2 1')\n    else:\n        for i in range(n):\n            a.append(i + 1)\n        a.reverse()\n        for i in range(n):\n            a.append(a[0])\n            a.remove(a[0])\n            a = list(map(str, a))\n            print(' '.join(a))", "from enum import Enum, auto\nimport copy\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        if n == 3:\n            print('3 2 1')\n            print('1 3 2')\n            print('3 1 2')\n        else:\n            res = list(reversed(range(1, n + 1)))\n            for i in range(n):\n                print(' '.join(list(map(str, res))))\n                res = [res[-1]] + res[:-1]\nmain()", "def reverse(l, i, j):\n    while i < j:\n        temp = l[i]\n        l[i] = l[j]\n        l[j] = temp\n        i += 1\n        j -= 1\n\ndef rotate(l):\n    reverse(l, 0, len(l) - 2)\n    reverse(l, 0, len(l) - 1)\n\ndef display(l):\n    print(' '.join(map(str, l)))\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(range(n, 0, -1))\n    for i in range(n):\n        if n == 3 and i == 2:\n            temp = l[0]\n            l[0] = l[2]\n            l[2] = temp\n            display(l)\n        else:\n            display(l)\n            rotate(l)", "def isAntifibo(a, n):\n    for i in range(n - 2):\n        if a[i] + a[i + 1] == a[i + 2]:\n            return False\n    return True\n\ndef shift(a: list):\n    end = a[0]\n    a.pop(0)\n    a.append(end)\n\ndef buildNAntiFibo(n):\n    if n == 3:\n        return [[3, 2, 1], [1, 3, 2], [3, 1, 2]]\n    ret = []\n    count = n - 1\n    a = [n - x for x in range(n)]\n    ret.append(a.copy())\n    while count > 0:\n        shift(a)\n        if isAntifibo(a, n):\n            count -= 1\n            ret.append(a.copy())\n    return ret\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    perms = buildNAntiFibo(n)\n    for perm in perms:\n        print(' '.join(map(str, perm)))", "import itertools\nfrom sys import stdin\nn = int(stdin.readline())\nfor _ in range(n):\n    x = int(stdin.readline())\n    d = list(range(3, x + 1)) + [1]\n    for i in range(x):\n        d.insert(i, 2)\n        print(str.join(' ', map(str, d)))\n        d.pop(i)", "def readLineToInts():\n    return [int(item) for item in input().split()]\ntn = readLineToInts()[0]\nfor ti in range(tn):\n    n = readLineToInts()[0]\n    for i in range(n):\n        curans = ([j + 1 for j in range(n) if j != i] + [i + 1])[::-1]\n        print(' '.join([str(x) for x in curans]))", "def anti_fib(t, lnt):\n    for i in range(lnt - 2):\n        if t[i] + t[i + 1] == t[i + 2]:\n            return False\n    return True\n\ndef generate_perm(x):\n    perm = [[], [], [(1, 2), (2, 1)]]\n    n = 3\n    while n <= 4:\n        nxt = []\n        for t in perm[-1]:\n            for i in range(n):\n                nxt.append(t[:i] + (n,) + t[i:])\n        perm.append(nxt)\n        n += 1\n    while n <= x:\n        nxt = []\n        for t in perm[-1]:\n            for i in range(n):\n                tup = t[:i] + (n,) + t[i:]\n                if anti_fib(tup, n):\n                    nxt.append(tup)\n            if len(nxt) > x:\n                break\n        perm.append(nxt)\n        n += 1\n    perm[3] = [(1, 3, 2), (3, 1, 2), (2, 3, 1), (3, 2, 1)]\n    nw = []\n    for tup in perm[4]:\n        if anti_fib(tup, 4):\n            nw.append(tup)\n    perm[4] = nw\n    return tuple(perm)\nper = generate_perm(50)\naf = [[], [], []]\nfor i in range(3, 51):\n    nxt = []\n    for j in range(i):\n        s = ''\n        for k in per[i][j]:\n            s += str(k) + ' '\n        nxt.append(s.rstrip())\n    af.append(nxt)\nt = int(input())\nwhile t > 0:\n    for s in af[int(input())]:\n        print(s)\n    t -= 1", "from itertools import permutations\n\ndef notFib(arr):\n    for i in range(len(arr) - 2):\n        if arr[i] + arr[i + 1] == arr[i + 2]:\n            return False\n    return True\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(x) + 1 for x in range(n)]\n    a.reverse()\n    perm = permutations(a, n)\n    c = 0\n    for i in perm:\n        if notFib(i):\n            print(' '.join([str(x) for x in i]))\n            c += 1\n            if c == n:\n                break", "for _ in range(int(input())):\n    n = int(input())\n    arr = [1, 3, 2]\n    if n == 3:\n        print('3' + ' ' + '2' + ' ' + '1')\n        print('1' + ' ' + '3' + ' ' + '2')\n        print('3' + ' ' + '1' + ' ' + '2')\n    else:\n        arr = [x for x in range(n, 0, -1)]\n        str_arr = [str(x) for x in arr]\n        print(' '.join(str_arr))\n        for j in range(n - 1):\n            x = arr[0]\n            for i in range(n - 1):\n                arr[i] = arr[i + 1]\n            arr[n - 1] = x\n            str_arr = [str(x) for x in arr]\n            print(' '.join(str_arr))", "import copy\nfor t in range(int(input())):\n    n = int(input())\n    if n == 3:\n        print('3 2 1')\n        print('2 3 1')\n        print('3 1 2')\n        continue\n    elif n == 5:\n        print('5 4 3 2 1')\n        print('5 4 3 1 2')\n        print('5 3 4 1 2')\n        print('5 3 4 2 1')\n        print('4 5 3 2 1')\n        continue\n    res = list()\n    for i in range(min(6, n // 2)):\n        ln = len(res)\n        if ln > 0:\n            j = 0\n            while j < ln:\n                tmp = copy.deepcopy(res[j])\n                res.append(tmp)\n                j += 1\n            for l in range(ln):\n                res[l].extend([2 * i + 1, 2 * i + 2])\n            for l in range(ln, 2 * ln):\n                res[l].extend([2 * i + 2, 2 * i + 1])\n        else:\n            res.append([1 << i, (1 << i) + 1])\n            res.append([(1 << i) + 1, 1 << i])\n    cnt = 0\n    for each in res:\n        if len(each) < n:\n            each.extend([k for k in range(len(each) + 1, n + 1)])\n        if cnt < n:\n            print(' '.join(list(map(str, [ele for ele in reversed(each)]))))\n            cnt += 1\n        else:\n            break", "import math\nimport sys\nimport itertools\nimport fractions\nimport random\nwtf = sys.stdin.read()\nwtf = wtf.strip().split('\\n')\nfor t in wtf[1:]:\n    n = int(t)\n    fibs = []\n    for i in range(n, 0, -1):\n        fibs.append(i)\n    for i in range(n):\n        print(' '.join(map(str, fibs)))\n        if i + 1 == n:\n            break\n        if i > 0 and i < n - 1:\n            if fibs[i - 1] + fibs[i + 1] == fibs[i]:\n                (fibs[i - 1], fibs[i + 1]) = (fibs[i + 1], fibs[i - 1])\n                continue\n        (fibs[i], fibs[i + 1]) = (fibs[i + 1], fibs[i])", "for _ in range(int(input())):\n    a = int(input())\n    lst = [i + 1 for i in range(a)]\n    res = []\n    for i in lst:\n        pl = str(i)\n        for c in lst[:i - 1:-1]:\n            pl += ' ' + str(c)\n        if i != 1:\n            for c in lst[i - 2::-1]:\n                pl += ' ' + str(c)\n        res.append(pl)\n    print(*res, sep='\\n')", "tc = int(input())\nfor i in range(tc):\n    x = int(input())\n    if x == 3:\n        print('3 2 1')\n        print('1 3 2')\n        print('3 1 2')\n    else:\n        list1 = []\n        for j in range(x, 0, -1):\n            list1.append(j)\n        for i in range(x, 0, -1):\n            list2 = list1[i:] + list1[:i]\n            str1 = ''\n            for i in list2:\n                str1 += str(i) + ' '\n            print(str1)", "from collections import OrderedDict\nfor _ in range(int(input())):\n    n = int(input())\n    x = [i for i in range(1, n + 1)]\n    y = x[::-1]\n    for i in range(1, n):\n        new = [e for e in range(n, 0, -1) if e != y[-i]]\n        q = [y[0], y[-i]] + new\n        ans = list(OrderedDict.fromkeys(q))\n        print(' '.join((str(i) for i in ans)))\n    (y[0], y[1]) = (y[1], y[0])\n    print(' '.join((str(i) for i in y)))", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    list1 = []\n    s = ''\n    for i in range(n, 0, -1):\n        list1.append(i)\n        s += str(i) + ' '\n    print(s.strip())\n    i = 1\n    for i in range(1, n):\n        temp = list1[i]\n        list1[i] = list1[0]\n        list1[0] = temp\n        s = ''\n        if i >= 2 and list1[i - 1] + list1[i - 2] == list1[i]:\n            temp = list1[i - 1]\n            list1[i - 1] = list1[i]\n            list1[i] = temp\n            j = 0\n            for j in range(0, n):\n                s += str(list1[j]) + ' '\n            print(s.strip())\n            temp = list1[i - 1]\n            list1[i - 1] = list1[i]\n            list1[i] = temp\n        else:\n            j = 0\n            for j in range(0, n):\n                s += str(list1[j]) + ' '\n            print(s.strip())\n        temp = list1[i]\n        list1[i] = list1[0]\n        list1[0] = temp", "for _ in range(int(input())):\n    n = int(input())\n    arr = [i for i in range(1, n + 1)][::-1]\n    for i in range(n):\n        print(*[arr[i]] + arr[:i] + arr[i + 1:])", "for _ in range(int(input())):\n    n = int(input())\n    if n == 3:\n        a = [3, 2, 1]\n        b = [1, 3, 2]\n        c = [3, 1, 2]\n        print(*a)\n        print(*b)\n        print(*c)\n    else:\n        a = []\n        for i in range(n, 0, -1):\n            a.append(i)\n        print(*a)\n        for i in range(n - 1):\n            a = a[1:] + [a[0]]\n            print(*a)", "for _ in range(0, int(input())):\n    n = int(input())\n    v = list(range(1, n + 1))[::-1]\n    for i in range(1, n):\n        print(*sorted(v[0:i]) + v[i:])\n    print(*v[:-2] + [v[-1]] + [v[-2]])", "for ii in range(int(input())):\n    n = int(input())\n    if n == 5:\n        l = [jj for jj in range(n, 0, -1)]\n        for jj in range(n - 1):\n            print(*l[jj:] + l[:jj])\n        print(*l[:-2], 1, 2)\n    else:\n        l = [jj for jj in range(n, 1, -1)]\n        for jj in range(n - 1):\n            print(*l[jj:] + l[:jj], 1)\n        print(*l[:-1], 1, 2)", "import itertools\n\ndef case1(n):\n    count = 0\n    out = []\n    s = [i for i in range(1, n + 1)]\n    for i in itertools.permutations(s, r=n):\n        if count == n:\n            break\n        i = list(i)\n        flag = True\n        for x in range(2, n):\n            if i[x] == i[x - 1] + i[x - 2]:\n                flag = False\n                break\n        if flag:\n            count += 1\n            out += [i]\n    return out\n\ndef case2(n):\n    s = [i for i in range(1, n - 4)]\n    (s[2], s[3]) = (s[3], s[2])\n    d = [i for i in range(n - 4, n + 1)]\n    count = 0\n    out = []\n    for i in itertools.permutations(d, r=5):\n        if count == n:\n            break\n        out += [s + list(i)]\n        count += 1\n    return out\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 9:\n        for i in case1(n):\n            print(*i)\n    if n >= 10:\n        for i in case2(n):\n            print(*i)", "def solve():\n    n = int(input())\n    l = [*range(1, n + 1)]\n    l.reverse()\n    if n == 3:\n        s = [[3, 2, 1], [1, 3, 2], [3, 1, 2]]\n        for i in s:\n            print(*i)\n        return\n    for i in range(n):\n        temp = l[-1]\n        l = [temp] + l[:n - 1]\n        print(*l)\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lista = []\n    for j in range(n):\n        lista.append(j + 1)\n    lista.reverse()\n    if n == 3:\n        print('3 2 1')\n        print('1 3 2')\n        print('3 1 2')\n    else:\n        for k in range(n):\n            print(*lista)\n            badas = lista[-1]\n            lista.pop()\n            lista.insert(0, badas)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 3:\n        print('3 1 2\\n2 3 1\\n3 2 1')\n        continue\n    a = list('1243')\n    for i in range(5, n + 1):\n        a.append(i)\n    i = 1\n    while i <= n:\n        print(*a[i:], *a[:i], sep=' ')\n        i += 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [i for i in range(n, 0, -1)]\n    last = n - 1\n    for _ in range(n):\n        print(*arr)\n        (arr[last], arr[last - 1]) = (arr[last - 1], arr[last])\n        last -= 1", "for _ in range(int(input())):\n    n = int(input())\n    arr = [i for i in range(1, n + 1)][::-1]\n    for i in range(n):\n        print(*[arr[i]] + arr[:i] + arr[i + 1:])", "def deepcopy(l):\n    temp = []\n    for i in l:\n        temp.append(i)\n    return temp\n\ndef solution1(count):\n    t = []\n    t.append([1, 2, 3])\n    t.append([2, 3, 1])\n    t.append([2, 1, 3])\n    if count == 3:\n        return t\n    for i in range(4, count + 1):\n        for j in t:\n            j.append(i)\n        copy1 = t[-1]\n        copy2 = deepcopy(copy1)\n        (copy2[-1], copy2[-2]) = (copy2[-2], copy2[-1])\n        t.append(copy2)\n    return t\n\ndef check(ans):\n    for i in range(len(ans) - 2):\n        if ans[i] + ans[i + 1] == ans[i + 2]:\n            return False\n    return True\ntc = int(input())\nfor i in range(tc):\n    count = int(input())\n    ans = solution1(count)\n    for i in ans:\n        i = i[::-1]\n        print(*i)", "for _ in range(int(input())):\n    n = int(input())\n    per = [i for i in range(n, 0, -1)]\n    while n:\n        print(*per)\n        n -= 1\n        (per[n], per[n - 1]) = (per[n - 1], per[n])", "for _ in range(int(input())):\n    n = int(input())\n    arr = [i for i in range(1, n + 1)][::-1]\n    for i in range(n):\n        print(*[arr[i]] + arr[:i] + arr[i + 1:])", "for _ in range(int(input())):\n    n = int(input())\n    arr = [i for i in range(1, n + 1)][::-1]\n    for i in range(n):\n        print(*[arr[i]] + arr[:i] + arr[i + 1:])", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    if n == 3:\n        print('3 2 1')\n        print('1 3 2')\n        print('3 1 2')\n    else:\n        answer = [n - i for i in range(n)]\n        for i in range(n):\n            print(*answer)\n            answer.append(answer.pop(0))", "import math\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    b = [int(i) for i in range(n, 0, -1)]\n    res = 0\n    for i in range(n):\n        print(*b)\n        (b[n - 1 - res], b[n - 2 - res]) = (b[n - 2 - res], b[n - 1 - res])\n        res += 1", "import sys\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\ndef solve():\n    n = int(input())\n    if n > 3:\n        for i in range(n):\n            print(*range(n - i, 0, -1), *range(n, n - i, -1))\n    else:\n        print(3, 2, 1)\n        print(3, 1, 2)\n        print(1, 3, 2)\nt = int(input())\nfor __ in range(t):\n    solve()", "out = []\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 3:\n        print('3 2 1')\n        print('1 3 2')\n        print('3 1 2')\n    else:\n        a = [i for i in range(n, 0, -1)]\n        for i in range(n):\n            print(*a)\n            a.insert(0, a.pop())", "t = int(input())\n\ndef print_permut(permut):\n    for x in permut:\n        print(x, end=' ')\n    print()\n\ndef testcase():\n    n = int(input())\n    permut = list(reversed([i for i in range(1, n + 1)]))\n    print_permut(permut)\n    for i in range(2, n + 1):\n        rev = n - i\n        (permut[rev + 1], permut[rev]) = (permut[rev], permut[rev + 1])\n        print_permut(permut)\nfor x in range(t):\n    testcase()", "for _ in range(int(input())):\n    nn = int(input())\n    if nn == 3:\n        print('3 2 1\\n1 3 2\\n3 1 2')\n        continue\n    l = [i for i in range(nn, 0, -1)]\n    print(*l)\n    j = 0\n    for i in range(nn - 1):\n        l.append(l[j])\n        print(*l[j + 1:])\n        j += 1", "def fun():\n    n = int(input())\n    if n == 3:\n        print(*[3, 2, 1])\n        print(*[3, 1, 2])\n        print(*[1, 3, 2])\n        return\n    arr = [i for i in range(n, 0, -1)]\n    for i in range(n):\n        print(*arr)\n        arr = arr[-1:] + arr[:-1]\nfor _ in range(int(input())):\n    fun()", "def AbhiSolveKiya(n):\n    a = [[1, 3, 2], [3, 2, 1], [3, 1, 2], [2, 3, 1]]\n    if n == 3:\n        for i in range(3):\n            print(*a[i])\n        return\n    count = 0\n    for j in a:\n        b = [i for i in range(4, n + 1)]\n        for i in range(n - 3):\n            c = b[i:] + b[:i] + j\n            print(*c)\n            count += 1\n            if count == n:\n                return\n    return\nfor _ in range(int(input())):\n    n = int(input())\n    AbhiSolveKiya(n)", "for t in range(int(input())):\n    n = int(input())\n    A1 = [int(i) for i in range(1, (n + 1) // 2 + 1)]\n    A2 = [int(i) for i in range((n + 1) // 2 + 1, n + 1)]\n    if n == 3:\n        ans = [[1, 3, 2], [3, 2, 1], [3, 1, 2]]\n        for i in ans:\n            print(*i)\n    else:\n        ans = [int(i) for i in range(1, n + 1)]\n        (ans[0], ans[-2]) = (ans[-2], ans[0])\n        for i in range(n):\n            print(*ans)\n            ans = ans[1:] + [ans[0]]", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(1, n + 1):\n        l.append(i)\n    l = l[::-1]\n    if n == 3:\n        t = []\n        t.append([3, 2, 1])\n        t.append([1, 3, 2])\n        t.append([3, 1, 2])\n        for i in range(n):\n            print(*t[i])\n    else:\n        for i in range(n):\n            print(*l)\n            p = l.pop(0)\n            l.append(p)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    nums = []\n    for j in range(n, 0, -1):\n        nums.append(j)\n    print(*nums)\n    for k in range(n - 1, 0, -1):\n        l = nums[k]\n        nums[k] = nums[k - 1]\n        nums[k - 1] = l\n        print(*nums)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = [x + 1 for x in range(n)]\n    l.reverse()\n    print(*l)\n    for i in range(n - 1):\n        x = l + []\n        xx = x[i]\n        x[i] = x[i + 1]\n        x[i + 1] = xx\n        print(*x)", "from itertools import permutations\nl = list(permutations(range(1, 5 + 1)))\nl2 = []\nfor i in l:\n    l1 = i\n    flag = False\n    for i1 in range(2, len(l1)):\n        s = l1[i1 - 1] + l1[i1 - 2]\n        if l1[i1] == s:\n            flag = True\n            break\n    if flag == False:\n        l2.append(list(i))\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 3:\n        print('3 2 1')\n        print('1 3 2')\n        print('3 1 2')\n    elif n == 4:\n        print('4 3 2 1')\n        print('1 2 4 3')\n        print('3 4 1 2')\n        print('2 4 1 3')\n    elif n == 5:\n        for i in range(5):\n            print(*l2[i])\n    else:\n        ans = []\n        for i in range(n, 5, -1):\n            ans.append(i)\n        for i in range(n):\n            ans1 = ans + l2[i]\n            print(*ans1)", "def printPerm(n, arr, choices, k):\n    if len(res) == n:\n        return\n    if k == n:\n        res.append(arr)\n    if k < 2:\n        for (i, ch) in enumerate(choices):\n            arr[k] = choices[i]\n            printPerm(n, arr[:], choices[:i] + choices[i + 1:], k + 1)\n    else:\n        for (i, ch) in enumerate(choices):\n            if ch != arr[k - 1] + arr[k - 2]:\n                arr[k] = ch\n                printPerm(n, arr[:], choices[:i] + choices[i + 1:], k + 1)\n    return\nfor _ in range(int(input())):\n    n = int(input())\n    res = []\n    printPerm(n, [0] * n, [i + 1 for i in range(n)], 0)\n    for arr in res:\n        print(' '.join(map(str, arr)))", "test = int(input())\nfor i in range(test):\n    n = int(input())\n    l = []\n    for i in range(1, n + 1):\n        l.append(i)\n    l.sort(reverse=True)\n    for i in range(1, n + 1):\n        k = n - i\n        l.remove(1)\n        l.insert(k, 1)\n        print(*l)", "from itertools import permutations\nlog = []\nperms = permutations([str(i) for i in range(5, 0, -1)])\nc = 0\nfor perm in perms:\n    good = True\n    for i in range(2, 5):\n        if int(perm[i]) == int(perm[i - 1]) + int(perm[i - 2]):\n            good = False\n    if good:\n        log.append(perm)\n        c += 1\nfor _ in range(int(input())):\n    n = int(input())\n    if n > 5:\n        base = [str(i) for i in range(n, 5, -1)]\n        for indx in range(n):\n            print(*base, *log[indx])\n    else:\n        for indx in range(n):\n            print(*log[indx][-n:])", "def solve():\n    n = int(input())\n    arr = [i for i in range(n, 0, -1)]\n    if n == 3:\n        print(3, 2, 1)\n        print(2, 3, 1)\n        print(3, 1, 2)\n    else:\n        for i in range(n):\n            print(*arr)\n            arr.insert(0, arr.pop())\ntst = int(input())\nfor i in range(tst):\n    solve()", "import sys\ninput = sys.stdin.readline\nfrom math import ceil, floor, gcd\n\ndef inp():\n    return int(input())\n\ndef lis():\n    return list(map(int, input().split()))\n\ndef ma():\n    return map(int, input().split())\n\ndef st():\n    return input().rstrip('\\n')\n\ndef isPrime(n):\n    if n == 1:\n        return 0\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return 0\n    return 1\nt = inp()\nfor _ in range(t):\n    n = inp()\n    a = [i for i in range(1, n + 1)]\n    a = a[::-1]\n    c = a[:]\n    print(*a)\n    for i in range(n - 2):\n        a = c[-i - 1:] + c[:-i - 1]\n        print(*a)\n    (c[-1], c[-2]) = (c[-2], c[-1])\n    print(*c)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    if n == 3:\n        print('3 2 1')\n        print('1 3 2')\n        print('3 1 2')\n    else:\n        myper = list(range(n, 0, -1))\n        for i in range(n):\n            print(*myper)\n            l = myper[-1]\n            myper.pop()\n            myper.insert(0, l)", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nmod = 1000000007\nt = inp()\nfor j in range(t):\n    n = inp()\n    l = [i for i in range(n, 1, -1)] + [1]\n    print(*l)\n    for i in range(n - 1):\n        (l[i], l[i + 1]) = (l[i + 1], l[i])\n        print(*l)\n        (l[i], l[i + 1]) = (l[i + 1], l[i])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(reversed(list(range(1, n + 1))))\n    print(*a)\n    b = a\n    for i in range(n - 1):\n        (b[n - i - 2], b[n - i - 1]) = (b[n - i - 1], b[n - i - 2])\n        print(*b)", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    d = list((x for x in range(n, 0, -1)))\n    for i in range(n):\n        k = d[0 + i:n + i] + d[:i]\n        if k[0] + k[1] == k[2]:\n            (k[2], k[1]) = (k[1], k[2])\n        print(*k)", "for _ in range(int(input())):\n    n = int(input())\n    p = list(range(1, n + 1))\n    for i in range(0, n):\n        x = p.copy()\n        del x[i]\n        print(p[i], *sorted(x, reverse=True))", "import sys\nfrom os import path\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\nfor index in range(int(input())):\n    n = int(input())\n    arr = [i for i in range(1, n + 1)][::-1]\n    for i in range(n):\n        print(*[arr[i]] + arr[:i] + arr[i + 1:])", "for _ in range(int(input())):\n    l = list(range(1, int(input()) + 1))[::-1]\n    for i in range(len(l)):\n        print(*l)\n        if i != len(l) - 1:\n            (l[-i - 1], l[-i - 2]) = (l[-i - 2], l[-i - 1])", "for _ in range(int(input())):\n    n = int(input())\n    per = [i for i in range(n, 0, -1)]\n    while n:\n        print(*per)\n        n -= 1\n        (per[n], per[n - 1]) = (per[n - 1], per[n])", "for x in range(int(input())):\n    lists = [x for x in range(1, int(input()) + 1)][::-1]\n    for x in lists:\n        print(*[x] + lists[:lists.index(x)] + lists[lists.index(x) + 1:])", "for i in range(int(input())):\n    n = int(input())\n    a = list()\n    for i in range(n, 0, -1):\n        a.append(i)\n    if n == 3:\n        print('3 1 2')\n        print('2 3 1')\n        print('3 2 1')\n    else:\n        for i in range(n):\n            print(*a)\n            a.append(a[0])\n            a.pop(0)", "for _ in range(int(input())):\n    n = int(input())\n    per = [i for i in range(n, 0, -1)]\n    while n:\n        print(*per)\n        n -= 1\n        (per[n], per[n - 1]) = (per[n - 1], per[n])", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    ans = [i for i in range(n, 0, -1)]\n    end = n - 1\n    for i in range(n):\n        print(*ans)\n        (ans[end], ans[end - 1]) = (ans[end - 1], ans[end])\n        end -= 1", "import sys\nimport math\nfrom collections import deque, defaultdict\ninput = sys.stdin.readline\n\ndef multiple():\n    a = map(int, input().split())\n    return a\n\ndef array():\n    a = input().split()\n    return a\n\ndef intarray():\n    a = list(map(int, input().split()))\n    return a\n\ndef nondec(a):\n    n = len(a)\n    if n == 1:\n        return True\n    for i in range(1, n):\n        if a[i] >= a[i - 1]:\n            continue\n        else:\n            return False\n    return True\n\ndef solution():\n    n = int(input())\n    arr = []\n    for i in reversed(range(1, n + 1)):\n        arr.append(i)\n    print(*arr)\n    for i in range(n - 1):\n        (arr[i], arr[i + 1]) = (arr[i + 1], arr[i])\n        print(*arr)\n        (arr[i], arr[i + 1]) = (arr[i + 1], arr[i])\n    return\nt = int(input())\nfor _ in range(t):\n    solution()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [i for i in range(2, n + 1)]\n    temp = [1, 3, 2] + [i for i in range(4, n + 1)]\n    print(*temp)\n    for i in range(1, n):\n        temp = a[i:] + a[:i] + [1]\n        print(*temp)", "from sys import stdin, stdout\nimport sys\nimport math\nimport itertools\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 6)\n\ndef main():\n    t = int(stdin.readline().strip())\n    for j in range(1, t + 1):\n        n = int(stdin.readline().strip())\n        arr = [i + 1 for i in range(n - 1, -1, -1)]\n        print(*arr)\n        k = 0\n        for i in range(n - 1):\n            new_arr = arr.copy()\n            (new_arr[k], new_arr[k + 1]) = (new_arr[k + 1], new_arr[k])\n            print(*new_arr)\n            k += 1\nmain()", "from collections import deque\nfor kdk in range(int(input())):\n    n = int(input())\n    a = deque()\n    for i in range(n):\n        a.append(n - i)\n    print(*a)\n    (a[-1], a[-2]) = (a[-2], a[-1])\n    print(*a)\n    (a[-3], a[-2]) = (a[-2], a[-3])\n    print(*a)\n    x = n - 3\n    (a[-3], a[-2], a[-1]) = (3, 2, 1)\n    while x > 0:\n        t = a.popleft()\n        a.append(t)\n        print(*a)\n        x -= 1", "import math\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 3:\n        print(3, 2, 1)\n        print(1, 3, 2)\n        print(3, 1, 2)\n        continue\n    a = []\n    for i in range(n, 0, -1):\n        a.append(i)\n    print(*a)\n    for _ in range(n - 1):\n        a.insert(0, a[-1])\n        a.pop()\n        print(*a)", "t = int(float(input()))\nfor _ in range(t):\n    n = int(float(input()))\n    arr = [i for i in range(1, n + 1)]\n    arr.sort(reverse=True)\n    c = n - 1\n    for i in range(n):\n        print(*arr)\n        (arr[c], arr[c - 1]) = (arr[c - 1], arr[c])\n        c -= 1"]