["(I, R) = (lambda : map(int, input().split()), range)\nfor _ in R(*I()):\n    (n, m) = I()\n    a = [[*I()] for _ in R(n)]\n    l = [0] * (m + n)\n    r = l[:]\n    for i in R(n):\n        for j in R(m):\n            b = a[i][j]\n            l[i - j + m - 1] += b\n            r[i + j] += b\n    print(max((l[i - j + m - 1] + r[i + j] - a[i][j] for i in R(n) for j in R(m))))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    u = {d: sum((a[i][d - i] for i in range(n) if 0 <= d - i < m)) for d in range(n + m - 1)}\n    v = {d: sum((a[i][d + i] for i in range(n) if 0 <= d + i < m)) for d in range(1 - n, m)}\n    print(max((u[i + j] + v[j - i] - a[i][j] for i in range(n) for j in range(m))))", "import sys\ninput = sys.stdin.readline\n\ndef init_diagonal_sum(n, m, arr):\n    if n == 1 or m == 1:\n        return\n    add_sum = [0] * (n + m - 1)\n    sub_sum = [0] * (n + m - 1)\n    for i in range(n):\n        for j in range(m):\n            add_sum[i + j] += arr[i][j]\n            sub_sum[i - j + (m - 1)] += arr[i][j]\n    return (add_sum, sub_sum)\n\ndef get_max_score_bishop(n, m, arr):\n    if n == 1 or m == 1:\n        return\n    (add_sum, sub_sum) = init_diagonal_sum(n, m, arr)\n    max_score = 0\n    for i in range(n):\n        for j in range(m):\n            max_score = max(max_score, add_sum[i + j] + sub_sum[i - j + (m - 1)] - arr[i][j])\n    return max_score\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    arr = [list(map(int, input().split())) for _ in range(n)]\n    if n == 1:\n        print(max(arr[0]))\n    elif m == 1:\n        print(max([num for inner_list in arr for num in inner_list]))\n    else:\n        print(get_max_score_bishop(n, m, arr))", "(kvs, z) = (lambda : map(int, input().split()), range)\nfor _ in z(*kvs()):\n    (n, m) = kvs()\n    a = [[*kvs()] for _ in z(n)]\n    l = [0] * (m + n)\n    r = l[:]\n    for i in z(n):\n        for j in z(m):\n            b = a[i][j]\n            l[i - j + m - 1] += b\n            r[i + j] += b\n    print(max((l[i - j + m - 1] + r[i + j] - a[i][j] for i in z(n) for j in z(m))))", "(I, R) = (lambda : map(int, input().split()), range)\nfor _ in R(*I()):\n    (n, m) = I()\n    a = [[*I()] for _ in R(n)]\n    l = [0] * (m + n)\n    r = l[:]\n    for i in R(n):\n        for j in R(m):\n            b = a[i][j]\n            l[i - j + m - 1] += b\n            r[i + j] += b\n    print(max((l[i - j + m - 1] + r[i + j] - a[i][j] for i in R(n) for j in R(m))))", "(I, R) = (lambda : map(int, input().split()), range)\nfor _ in R(*I()):\n    (n, m) = I()\n    a = [[*I()] for _ in R(n)]\n    l = [0] * (m + n)\n    r = l[:]\n    for i in R(n):\n        for j in R(m):\n            b = a[i][j]\n            l[i - j + m - 1] += b\n            r[i + j] += b\n    print(max((l[i - j + m - 1] + r[i + j] - a[i][j] for i in R(n) for j in R(m))))", "(k, o) = (lambda : map(int, input().split()), range)\nfor f in o(*k()):\n    (n, m) = k()\n    a = [[*k()] for t in o(n)]\n    l = [0] * (m + n)\n    r = l[:]\n    for i in o(n):\n        for j in o(m):\n            b = a[i][j]\n            l[i - j + m - 1] += b\n            r[i + j] += b\n    print(max((l[i - j + m - 1] + r[i + j] - a[i][j] for i in o(n) for j in o(m))))", "(I, R) = (lambda : map(int, input().split()), range)\nfor _ in R(*I()):\n    (n, m) = I()\n    a = []\n    l = [0] * (m + n)\n    r = l[:]\n    for i in R(n):\n        a.append([*I()])\n        for j in R(m):\n            b = a[i][j]\n            l[i - j + m - 1] += b\n            r[i + j] += b\n    print(max((l[i - j + m - 1] + r[i + j] - a[i][j] for i in R(n) for j in R(m))))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    dL = [0] * (n + m + 2)\n    dR = [0] * (n + m + 2)\n    for i in range(n):\n        for j in range(m):\n            dL[i - j] += a[i][j]\n            dR[i + j] += a[i][j]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            ans = max(ans, dL[i - j] + dR[i + j] - a[i][j])\n    print(ans)", "(k, o) = (lambda : map(int, input().split()), range)\nfor f in o(*k()):\n    (n, m) = k()\n    a = [[*k()] for t in o(n)]\n    l = [0] * (m + n)\n    r = l[:]\n    for i in o(n):\n        for j in o(m):\n            b = a[i][j]\n            l[i - j + m - 1] += b\n            r[i + j] += b\n    print(max((l[i - j + m - 1] + r[i + j] - a[i][j] for i in o(n) for j in o(m))))", "from collections import defaultdict\n\ndef re(arr):\n    mdia = defaultdict(int)\n    adia = defaultdict(int)\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            mdia[j - i] += arr[i][j]\n            adia[j + i] += arr[i][j]\n    max_ = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if mdia[j - i] + adia[j + i] - arr[i][j] > max_:\n                max_ = mdia[j - i] + adia[j + i] - arr[i][j]\n    print(max_)\nnum = int(input())\nfor _ in range(num):\n    (r, c) = list(map(int, input().split()))\n    arr = [[0 * c] for _ in range(r)]\n    for i in range(r):\n        arr[i] = list(map(int, input().split()))\n    re(arr)", "from collections import defaultdict\n\ndef bishopAttack(m, n, board):\n    majorDiagonal = defaultdict(int)\n    minorDiagonal = defaultdict(int)\n    for i in range(m):\n        for j in range(n):\n            majorDiagonal[i + j] += board[i][j]\n            minorDiagonal[i - j] += board[i][j]\n    maximum_damage = 0\n    for i in range(m):\n        for j in range(n):\n            attack = majorDiagonal[i + j] + minorDiagonal[i - j] - board[i][j]\n            maximum_damage = max(maximum_damage, attack)\n    return maximum_damage\nrep = int(input())\nfor _ in range(rep):\n    (m, n) = map(int, input().split())\n    board = []\n    for _ in range(m):\n        board.append(list(map(int, input().split())))\n    print(bishopAttack(m, n, board))", "(k, o) = (lambda : map(int, input().split()), range)\nfor f in o(*k()):\n    (n, m) = k()\n    a = [[*k()] for t in o(n)]\n    l = [0] * (m + n)\n    r = l[:]\n    for i in o(n):\n        for j in o(m):\n            b = a[i][j]\n            l[i - j + m - 1] += b\n            r[i + j] += b\n    print(max((l[i - j + m - 1] + r[i + j] - a[i][j] for i in o(n) for j in o(m))))", "t = int(input())\n\ndef maximum(row, col, arr):\n    d1 = [0] * (row + col - 1)\n    d2 = [0] * (row + col - 1)\n    for i in range(row):\n        for j in range(col):\n            d1[j - i] += arr[i][j]\n            d2[i + j] += arr[i][j]\n    maxi = 0\n    for i in range(row):\n        for j in range(col):\n            maxi = max(maxi, d1[j - i] + d2[i + j] - arr[i][j])\n    print(maxi)\nfor i in range(t):\n    grid = list(map(int, input().split(' ')))\n    card = []\n    for j in range(grid[0]):\n        card.append(list(map(int, input().split(' '))))\n    maximum(grid[0], grid[1], card)", "def findMaxValue(grid, n, m):\n    leftDiagonal = [0] * 440\n    rightDiagonal = [0] * 440\n    maxValue = float('-inf')\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            leftDiagonal[i + j] += grid[i][j]\n            rightDiagonal[i - j + m] += grid[i][j]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            maxValue = max(maxValue, leftDiagonal[i + j] + rightDiagonal[i - j + m] - grid[i][j])\n    return maxValue\n\ndef main():\n    tc = int(input())\n    for _ in range(tc):\n        (n, m) = map(int, input().split())\n        grid = [[0 for i in range(m + 1)] for j in range(n + 1)]\n        for __ in range(n):\n            l = list(map(int, input().split()))\n            for j in range(m):\n                grid[__ + 1][j + 1] = l[j]\n        print(findMaxValue(grid, n, m))\nmain()", "def calc(n, m, field):\n    (bslash, slash) = ({}, {})\n    for i in range(n):\n        for j in range(m):\n            bslash[i - j] = bslash.get(i - j, 0) + field[i][j]\n            slash[i + j] = slash.get(i + j, 0) + field[i][j]\n    return (bslash, slash)\n\ndef xsum(field, x, y, bslash, slash):\n    return bslash[x - y] + slash[x + y] - field[x][y]\n\ndef main():\n    (n, m) = map(int, input().split())\n    field = [[int(x) for x in input().split()] for _ in range(n)]\n    (bslash, slash) = calc(n, m, field)\n    result = -1\n    for i in range(n):\n        for j in range(m):\n            result = max(result, xsum(field, i, j, bslash, slash))\n    print(result)\nt = int(input())\nfor _ in range(t):\n    main()", "import sys\n\ndef solve():\n    inp = sys.stdin.readline\n    (n, m) = map(int, inp().split())\n    a = [None] * n\n    d1 = [0] * (n + m)\n    d2 = [0] * (n + m)\n    for i in range(n):\n        a[i] = list(map(int, inp().split()))\n        for j in range(m):\n            d1[i + j] += a[i][j]\n            d2[i - j] += a[i][j]\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            cost = 0\n            res = max(res, d1[i + j] + d2[i - j] - a[i][j])\n    print(res)\n\ndef main():\n    for i in range(int(sys.stdin.readline())):\n        solve()\nmain()", "q = int(input())\nfor test in range(q):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    sm1 = [0] * (n + m)\n    sm2 = [0] * (n + m)\n    for i in range(n):\n        for j in range(m):\n            sm1[i + j] += a[i][j]\n            sm2[i - j + m] += a[i][j]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            ans = max(ans, sm1[i + j] + sm2[i - j + m] - a[i][j])\n    print(ans)", "def task(n, m, a):\n    lefts = dict()\n    rights = dict()\n    for i in range(n):\n        for j in range(m):\n            leftkey = i - j\n            if not leftkey in lefts:\n                lefts[leftkey] = 0\n            lefts[leftkey] += a[i][j]\n            rightkey = i + j\n            if not rightkey in rights:\n                rights[rightkey] = 0\n            rights[rightkey] += a[i][j]\n    best = 0\n    for i in range(n):\n        for j in range(m):\n            leftkey = i - j\n            rightkey = i + j\n            suma = lefts[leftkey] + rights[rightkey] - a[i][j]\n            best = max(best, suma)\n    print(best)\nt = int(input())\nfor i in range(0, t):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        b = list(map(int, input().split()))\n        a.append(b)\n    task(n, m, a)", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n\n    def add_rightdown(r: int, c: int):\n        cur_sum = 0\n        visited = []\n        while r < n and c < m:\n            cur_sum += board[r][c]\n            visited.append((r, c))\n            r += 1\n            c += 1\n        for (r, c) in visited:\n            score[r][c] += cur_sum\n\n    def add_leftdown(r: int, c: int):\n        cur_sum = 0\n        visited = []\n        while r < n and 0 <= c:\n            cur_sum += board[r][c]\n            visited.append((r, c))\n            r += 1\n            c -= 1\n        for (r, c) in visited:\n            score[r][c] += cur_sum\n    t = int(input())\n    for tc in range(t):\n        (n, m) = map(int, input().split())\n        board = [list(map(int, input().split())) for _ in range(n)]\n        score = [[0 for col in range(m)] for row in range(n)]\n        for col in range(m):\n            add_rightdown(0, col)\n        for row in range(1, n):\n            add_rightdown(row, 0)\n        for col in range(m):\n            add_leftdown(0, col)\n        for row in range(1, n):\n            add_leftdown(row, m - 1)\n        max_sum = 0\n        for row in range(n):\n            for col in range(m):\n                max_sum = max(max_sum, score[row][col] - board[row][col])\n        print(max_sum)\nmain()", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nfrom collections import defaultdict as dd\n\ndef solve():\n    res = 0\n    (N, M) = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(N)]\n    RU = dd(int)\n    RD = dd(int)\n    for i in range(N):\n        for j in range(M):\n            RU[i + j] += A[i][j]\n            RD[i - j] += A[i][j]\n    for i in range(N):\n        for j in range(M):\n            res = max(res, RU[i + j] + RD[i - j] - A[i][j])\n    print(res)\n    return\nT = int(input())\nfor _ in range(T):\n    solve()", "from collections import defaultdict\n\ndef fun(a, n, m):\n    sf = defaultdict(int)\n    df = defaultdict(int)\n    for i in range(n):\n        for j in range(m):\n            sf[i + j] += a[i][j]\n            df[i - j] += a[i][j]\n    mx = 0\n    for i in range(n):\n        for j in range(m):\n            th = sf[i + j] + df[i - j] - a[i][j]\n            mx = max(mx, th)\n    return mx\ntc = int(input())\nfor _ in range(1, tc + 1):\n    (n, m) = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        a.append(l)\n    print(fun(a, n, m))", "t = int(input())\nfor j in range(t):\n    (n, m) = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    x = [0 for i in range(n + m - 1)]\n    y = [0 for i in range(n + m - 1)]\n    for i in range(n):\n        for j in range(m):\n            x[i + j] += a[i][j]\n    for i in range(n):\n        for j in range(m):\n            y[i + j] += a[i][m - 1 - j]\n    mn = 0\n    for i in range(n):\n        for j in range(m):\n            mn = max(x[i + j] + y[m - 1 - j + i] - a[i][j], mn)\n    print(mn)", "def diagonals(L):\n    (h, w) = (len(L), len(L[0]))\n    return [[L[h - p + q - 1][q] for q in range(max(p - h + 1, 0), min(p + 1, w))] for p in range(h + w - 1)]\n\ndef antidiagonals(L):\n    (h, w) = (len(L), len(L[0]))\n    return [[L[p - q][q] for q in range(max(p - h + 1, 0), min(p + 1, w))] for p in range(h + w - 1)]\nt = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().strip().split()))\n    mygrid = []\n    for i in range(n):\n        gridrow = list(map(int, input().strip().split()))\n        mygrid.append(gridrow)\n    Dg = diagonals(mygrid)\n    Ag = antidiagonals(mygrid)\n    Dattack = [sum(x) for x in diagonals(mygrid)]\n    Aattack = [sum(x) for x in antidiagonals(mygrid)]\n    power = 0\n    current_power = 0\n    for i in range(n):\n        for j in range(m):\n            current_power = Aattack[i + j] + Dattack[n - 1 - i + j] - mygrid[i][j]\n            if current_power > power:\n                power = current_power\n    print(power)", "t = int(input())\nfor nabor in range(t):\n    (n, m) = map(int, input().split())\n    arr = tuple((tuple(map(int, input().split())) for y in range(n)))\n    sums = [0] * (n + m - 1)\n    sums2 = [0] * (n + m - 1)\n    for y in range(n):\n        nn = n - y - 1\n        for (x, i) in enumerate(arr[y]):\n            sums[x + y] += i\n            sums2[x + nn] += i\n    Max = 0\n    for y in range(n):\n        nn = n - y - 1\n        for (x, i) in enumerate(arr[y]):\n            Max = max(Max, sums[x + y] + sums2[x + nn] - arr[y][x])\n    print(Max)", "def solve(grid):\n    (m, n) = (len(grid), len(grid[0]))\n    b1 = {}\n    for i in range(n):\n        b1[-i] = sum([grid[k][i + k] for k in range(min(m, n - i))])\n    for i in range(1, m):\n        b1[i] = sum([grid[i + k][k] for k in range(min(m - i, n))])\n    b2 = {}\n    for i in range(n):\n        b2[i] = sum([grid[k][i - k] for k in range(min(m, i + 1))])\n    for i in range(1, m):\n        b2[i + n - 1] = sum([grid[i + k][n - 1 - k] for k in range(min(m - i, n))])\n    ans = 0\n    for i in range(m):\n        for j in range(n):\n            tmp = b1[i - j] + b2[i + j] - grid[i][j]\n            ans = max(ans, tmp)\n    return ans\nT = int(input())\nfor _ in range(T):\n    (N, M) = list(map(int, input().split()))\n    grid = []\n    for i in range(N):\n        grid.append(list(map(int, input().split())))\n    ans = solve(grid)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    s = []\n    a = []\n    b = []\n    for i in range(n):\n        s += [list(map(int, input().split()))]\n    for j in range(m):\n        (sm1, sm2) = (0, 0)\n        for i in range(min(j + 1, n)):\n            sm1 += s[i][j - i]\n        for i in range(min(n, m - j)):\n            sm2 += s[i][j + i]\n        a += [sm1]\n        b += [sm2]\n    for i in range(1, n):\n        (sm1, sm2) = (0, 0)\n        for j in range(m - 1, -1 + m - min(m, n - i), -1):\n            sm1 += s[i - j + m - 1][j]\n        for j in range(min(n - i, m)):\n            sm2 += s[i + j][j]\n        a += [sm1]\n        b = [sm2] + b\n    mx = 0\n    for i in range(n):\n        for j in range(m):\n            mx = max(mx, a[i + j] + b[j + n - i - 1] - s[i][j])\n    print(mx)", "T = int(input())\nfor t in range(T):\n    (n, m) = map(int, input().split())\n    g = [0] * (n + m - 1)\n    p = [0] * (n + m - 1)\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n        for j in range(m):\n            p[i + j] += a[i][j]\n            try:\n                g[m - j + i - 1] += a[i][j]\n            except:\n                print('m,j,i =', m, j, i)\n    h_max = 0\n    for i in range(n):\n        for j in range(m):\n            h = g[m - j - 1 + i] + p[j + i] - a[i][j]\n            if h > h_max:\n                h_max = h\n    print(h_max)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    dL = [0] * (n + m + 2)\n    dR = [0] * (n + m + 2)\n    for i in range(n):\n        for j in range(m):\n            dL[i - j] += a[i][j]\n            dR[i + j] += a[i][j]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            ans = max(ans, dL[i - j] + dR[i + j] - a[i][j])\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, input().split())))\n    d1 = [0] * (n + m - 1)\n    d2 = [0] * (n + m - 1)\n    for i in range(n):\n        for j in range(m):\n            d1[i + j] += arr[i][j]\n            d2[i - j + m - 1] += arr[i][j]\n    maxx = 0\n    for i in range(n):\n        for j in range(m):\n            maxx = max(maxx, d1[i + j] + d2[i - j + m - 1] - arr[i][j])\n    print(maxx)", "import sys\ninput = sys.stdin.readline\nmp = [0] * 200\n\ndef solve():\n    (n, m) = map(int, input().split())\n    ans = 0\n    a1 = [0] * (n + m + 2)\n    a2 = [0] * (n + m + 2)\n    ans = 0\n    for i in range(n):\n        mp[i] = list(map(int, input().split()))\n        for j in range(m):\n            a1[i + j] += mp[i][j]\n            a2[i - j] += mp[i][j]\n    for i in range(n):\n        for j in range(m):\n            ans = max(ans, a1[i + j] + a2[i - j] - mp[i][j])\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [[*map(int, input().split())] for i in range(n)]\n    kd = m + n - 1\n    gd = [0] * kd\n    pd = [0] * kd\n    for i in range(n):\n        for j in range(m):\n            gd[i - j] += a[i][j]\n            pd[i + j] += a[i][j]\n    for i in range(n):\n        for j in range(m):\n            a[i][j] = gd[i - j] + pd[i + j] - a[i][j]\n    print(max(map(max, a)))", "import sys\nfrom collections import defaultdict\ninput = sys.stdin.readline\nimport heapq\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\ntestcase = inp()\nfor i in range(0, testcase):\n    (n, m) = inlt()\n    grid = []\n    for i in range(n):\n        grid.append(inlt())\n    d1 = defaultdict(int)\n    d2 = defaultdict(int)\n    for i in range(n):\n        for j in range(m):\n            d1[i - j] += grid[i][j]\n            d2[i + j] += grid[i][j]\n    Max = 0\n    for i in range(n):\n        for j in range(m):\n            Max = max(Max, d1[i - j] + d2[i + j] - grid[i][j])\n    print(Max)", "t = int(input())\nfor i in range(t):\n    (n, m) = list(map(int, input().split()))\n    lst = []\n    for i in range(n):\n        lst.append(list(map(int, input().split())))\n    dic1 = {}\n    dic2 = {}\n    for i in range(n):\n        for j in range(m):\n            if i + j in dic1:\n                dic1[i + j] += lst[i][j]\n            else:\n                dic1[i + j] = lst[i][j]\n            if i - j in dic2:\n                dic2[i - j] += lst[i][j]\n            else:\n                dic2[i - j] = lst[i][j]\n    sumlist = []\n    for i in range(n):\n        for j in range(m):\n            sumlist.append(dic1[i + j] + dic2[i - j] - lst[i][j])\n    print(max(sumlist))", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (n, m) = [int(d) for d in input().split()]\n    current = []\n    for _ in range(n):\n        current.append([int(k) for k in input().split()])\n    frw_diagonal_sum = defaultdict(int)\n    bkw_diagonal_sum = defaultdict(int)\n    for i in range(n):\n        for j in range(m):\n            frw_diagonal_sum[i + j] += current[i][j]\n            bkw_diagonal_sum[i - j] += current[i][j]\n    an = float('-inf')\n    for i in range(n):\n        for j in range(m):\n            an = max(an, frw_diagonal_sum[i + j] + bkw_diagonal_sum[i - j] - current[i][j])\n    print(an)", "from collections import defaultdict\np = int(input())\nfor _ in range(p):\n    [n, m] = list(map(int, input().split(' ')))\n    ls = []\n    for i in range(n):\n        ls.append(list(map(int, input().split(' '))))\n    d_up = defaultdict(int)\n    d_down = defaultdict(int)\n    for i in range(n):\n        for j in range(m):\n            d_up[i + j] += ls[i][j]\n            d_down[i - j] += ls[i][j]\n    mx_d = float('-inf')\n    for i in range(n):\n        for j in range(m):\n            mx_d = max(mx_d, d_up[i + j] + d_down[i - j] - ls[i][j])\n    print(mx_d)", "from collections import defaultdict\n\ndef solve(grid):\n    (slant1, slant2) = (defaultdict(int), defaultdict(int))\n    (M, N) = (len(grid), len(grid[0]))\n    for i in range(M):\n        for j in range(N):\n            slant1[i + j] += grid[i][j]\n            slant2[i - j] += grid[i][j]\n    max_val = -1\n    for i in range(M):\n        for j in range(N):\n            current_sum = slant1[i + j] + slant2[i - j] - grid[i][j]\n            max_val = max(max_val, current_sum)\n    return max_val\ntests = int(input())\nfor _ in range(tests):\n    (r, c) = list(map(int, input().split()))\n    grid = []\n    for i in range(r):\n        grid.append(list(map(int, input().split())))\n    print(solve(grid))", "def solution(matrix):\n    positive = {}\n    negative = {}\n    res = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            positive[i + j] = matrix[i][j] + positive.get(i + j, 0)\n            negative[i - j] = matrix[i][j] + negative.get(i - j, 0)\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if i + j in positive and i - j in negative:\n                res = max(res, positive[i + j] + negative[i - j] - matrix[i][j])\n    return res\nq1 = int(input())\nfor i in range(q1):\n    q2 = list(map(int, input().split()))\n    mat = []\n    for j in range(q2[0]):\n        mat.append(list(map(int, input().split())))\n    print(solution(mat))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split(' '))\n    a = []\n    arr = [0] * (n + m - 1)\n    brr = [0] * (n + m - 1)\n    for i in range(n):\n        a.append(list(map(int, input().split(' '))))\n        for j in range(m):\n            arr[i + j] += a[i][j]\n            brr[m - j + i - 1] += a[i][j]\n        max_value = 0\n        value = 0\n    for i in range(n):\n        for j in range(m):\n            value = arr[i + j] + brr[m - j + i - 1] - a[i][j]\n            if value > max_value:\n                max_value = value\n    print(max_value)", "for i in range(int(input())):\n    (n, m) = [int(a) for a in input().split()]\n    lst = []\n    dr = [0] * (n + m + 5)\n    dl = [0] * (n + m + 5)\n    for i in range(n):\n        lst.append([int(a) for a in input().split()])\n        for j in range(m):\n            dr[i + j] += lst[i][j]\n            dl[i - j] += lst[i][j]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            ans = max(ans, dr[i + j] + dl[i - j] - lst[i][j])\n    print(ans)", "import collections\n\ndef method(graph):\n    (m, n) = (len(graph), len(graph[0]))\n    rec1 = collections.defaultdict(int)\n    rec2 = collections.defaultdict(int)\n    for i in range(m):\n        for j in range(n):\n            rec1[i + j] += graph[i][j]\n            rec2[i - j] += graph[i][j]\n    ans = 0\n    for i in range(m):\n        for j in range(n):\n            ans = max(ans, rec1[i + j] + rec2[i - j] - graph[i][j])\n    return ans\nt = int(input())\nfor _ in range(t):\n    (m, n) = map(int, input().split())\n    graph = []\n    for _ in range(m):\n        graph.append(list(map(int, input().split())))\n    print(method(graph))", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, m) = (int(x) for x in input().split())\n    grid = []\n    for _ in range(n):\n        grid.append([int(x) for x in input().split()])\n    (d, u) = (defaultdict(int), defaultdict(int))\n    for r in range(n):\n        for c in range(m):\n            d[r - c] += grid[r][c]\n            u[r + c] += grid[r][c]\n    ans = 0\n    for r in range(n):\n        for c in range(m):\n            ans = max(ans, d[r - c] + u[r + c] - grid[r][c])\n    print(ans)", "(I, R) = (lambda : map(int, input().split()), range)\nfor _ in R(*I()):\n    (n, m) = I()\n    a = [[*I()] for _ in R(n)]\n    l = [0] * (m + n)\n    r = l[:]\n    for i in R(n):\n        for j in R(m):\n            b = a[i][j]\n            l[i - j + m - 1] += b\n            r[i + j] += b\n    print(max((l[i - j + m - 1] + r[i + j] - a[i][j] for i in R(n) for j in R(m))))", "import collections\n\ndef method(graph):\n    (m, n) = (len(graph), len(graph[0]))\n    rec1 = collections.defaultdict(int)\n    rec2 = collections.defaultdict(int)\n    for i in range(m):\n        for j in range(n):\n            rec1[i + j] += graph[i][j]\n            rec2[i - j] += graph[i][j]\n    ans = 0\n    for i in range(m):\n        for j in range(n):\n            ans = max(ans, rec1[i + j] + rec2[i - j] - graph[i][j])\n    return ans\nt = int(input())\nfor _ in range(t):\n    (m, n) = map(int, input().split())\n    graph = []\n    for _ in range(m):\n        graph.append(list(map(int, input().split())))\n    print(method(graph))", "(I, R) = (lambda : map(int, input().split()), range)\nfor _ in R(*I()):\n    (n, m) = I()\n    a = [[*I()] for _ in R(n)]\n    l = [0] * (m + n)\n    r = l[:]\n    for i in R(n):\n        for j in R(m):\n            b = a[i][j]\n            l[i - j + m - 1] += b\n            r[i + j] += b\n    print(max((l[i - j + m - 1] + r[i + j] - a[i][j] for i in R(n) for j in R(m))))", "(I, R) = (lambda : map(int, input().split()), range)\nfor _ in R(*I()):\n    (n, m) = I()\n    a = [[*I()] for _ in R(n)]\n    l = [0] * (m + n)\n    r = l[:]\n    for i in R(n):\n        for j in R(m):\n            b = a[i][j]\n            l[i - j + m - 1] += b\n            r[i + j] += b\n    print(max((l[i - j + m - 1] + r[i + j] - a[i][j] for i in R(n) for j in R(m))))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    board = [list(map(int, input().split())) for _ in range(n)]\n    d_plus = {i: 0 for i in range(m + n)}\n    d_minus = {i: 0 for i in range(-m - n, m + n)}\n    for i in range(n):\n        for j in range(m):\n            d_plus[i + j] += board[i][j]\n            d_minus[i - j] += board[i][j]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            ans = max(ans, d_plus[i + j] + d_minus[i - j] - board[i][j])\n    print(ans)", "from collections import defaultdict\nt = int(input())\n\ndef solve():\n    (n, m) = map(int, input().split())\n    board = [list(map(int, input().split())) for _ in range(n)]\n    rightdown = defaultdict(int)\n    rightup = defaultdict(int)\n    for i in range(n):\n        for j in range(m):\n            rightdown[i + j] += board[i][j]\n            rightup[i - j] += board[i][j]\n    out = 0\n    for i in range(n):\n        for j in range(m):\n            out = max(out, rightdown[i + j] + rightup[i - j] - board[i][j])\n    print(out)\nfor _ in range(t):\n    solve()", "(I, R) = (lambda : map(int, input().split()), range)\nfor _ in R(*I()):\n    (n, m) = I()\n    a = [[*I()] for _ in R(n)]\n    l = [0] * (m + n)\n    r = l[:]\n    for i in R(n):\n        for j in R(m):\n            b = a[i][j]\n            l[i - j + m - 1] += b\n            r[i + j] += b\n    print(max((l[i - j + m - 1] + r[i + j] - a[i][j] for i in R(n) for j in R(m))))", "(I, R) = (lambda : map(int, input().split()), range)\nfor _ in R(*I()):\n    (n, m) = I()\n    a = [[*I()] for _ in R(n)]\n    l = [0] * (m + n)\n    r = l[:]\n    for i in R(n):\n        for j in R(m):\n            b = a[i][j]\n            l[i - j + m - 1] += b\n            r[i + j] += b\n    print(max((l[i - j + m - 1] + r[i + j] - a[i][j] for i in R(n) for j in R(m))))", "t = int(input())\nfor _ in range(t):\n    board = []\n    (n, m) = map(int, input().split())\n    for _ in range(n):\n        row = list(map(int, input().split()))\n        board.append(row)\n    l = [0] * (m + n)\n    r = [0] * (m + n)\n    for i in range(n):\n        for j in range(m):\n            b = board[i][j]\n            l[i - j + m - 1] += b\n            r[i + j] += b\n    print(max((l[i - j + m - 1] + r[i + j] - board[i][j] for i in range(n) for j in range(m))))", "(I, R) = (lambda : map(int, input().split()), range)\nfor _ in R(*I()):\n    (n, m) = I()\n    a = [[*I()] for _ in R(n)]\n    l = [0] * (m + n)\n    r = l[:]\n    for i in R(n):\n        for j in R(m):\n            b = a[i][j]\n            l[i - j + m - 1] += b\n            r[i + j] += b\n    print(max((l[i - j + m - 1] + r[i + j] - a[i][j] for i in R(n) for j in R(m))))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    board = []\n    for i in range(n):\n        board.append(list(map(int, input().split())))\n    up_mht = {}\n    down_mht = {}\n    for i in range(0, m + n - 1):\n        up_mht[i] = 0\n        down_mht[i] = 0\n    for i in range(n):\n        for j in range(m):\n            up_mht[i + j] += board[i][j]\n    for i in range(n):\n        for j in range(m):\n            down_mht[n - 1 - i + j] += board[i][j]\n    ans = []\n    for i in range(n):\n        for j in range(m):\n            cand = up_mht[i + j] + down_mht[n - 1 - i + j] - board[i][j]\n            ans.append(cand)\n    print(max(ans))", "import math\n\ndef dig(brd, d1, d2):\n    for i in range(len(brd)):\n        for j in range(len(brd[0])):\n            if i - j in d1:\n                d1[i - j] += brd[i][j]\n            else:\n                d1[i - j] = brd[i][j]\n            if i + j in d2:\n                d2[i + j] += brd[i][j]\n            else:\n                d2[i + j] = brd[i][j]\n\ndef fun(brd):\n    ans = [[0 for i in range(len(brd[0]))] for _ in range(len(brd))]\n    m = 0\n    pdig = {}\n    ndig = {}\n    dig(brd, pdig, ndig)\n    m = 0\n    for i in range(len(brd)):\n        for j in range(len(brd[0])):\n            val = pdig[i - j] + ndig[i + j] - brd[i][j]\n            if val > m:\n                m = val\n    return [m]\nn = int(input())\nfor _ in range(n):\n    q = input().split()\n    board = []\n    for m in range(int(q[0])):\n        arr = input().split()\n        arr = list(map(int, arr))\n        board.append(arr)\n    x = fun(board)\n    for i in x:\n        print(i, end=' ')\n    print()", "(k, o) = (lambda : map(int, input().split()), range)\nfor f in o(*k()):\n    (n, m) = k()\n    a = [[*k()] for t in o(n)]\n    l = [0] * (m + n)\n    r = l[:]\n    for i in o(n):\n        for j in o(m):\n            b = a[i][j]\n            l[i - j + m - 1] += b\n            r[i + j] += b\n    print(max((l[i - j + m - 1] + r[i + j] - a[i][j] for i in o(n) for j in o(m))))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    board = []\n    for i in range(n):\n        board.append(list(map(int, input().split())))\n    up_mht = {}\n    down_mht = {}\n    for i in range(0, m + n - 1):\n        up_mht[i] = 0\n        down_mht[i] = 0\n    for i in range(n):\n        for j in range(m):\n            up_mht[i + j] += board[i][j]\n    for i in range(n):\n        for j in range(m):\n            down_mht[n - 1 - i + j] += board[i][j]\n    ans = []\n    for i in range(n):\n        for j in range(m):\n            cand = up_mht[i + j] + down_mht[n - 1 - i + j] - board[i][j]\n            ans.append(cand)\n    print(max(ans))", "import collections\nimport sys\ninput = sys.stdin.readline\n\ndef input_single_integer():\n    return int(input())\n\ndef input_list():\n    return list(map(int, input().split()))\n\ndef input_string():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef input_space_seperated_integer_variables():\n    return map(int, input().split())\n\ndef find_x_sum(chessboard, n, m):\n    x = collections.defaultdict(int)\n    y = collections.defaultdict(int)\n    for i in range(n):\n        for j in range(m):\n            x[i + j] += chessboard[i][j]\n            y[i - j] += chessboard[i][j]\n    max_so_far = 0\n    for i in range(n):\n        for j in range(m):\n            max_so_far = max(max_so_far, x[i + j] + y[i - j] - chessboard[i][j])\n    print(max_so_far)\ntest_case = input_single_integer()\nwhile test_case:\n    (m, n) = input_space_seperated_integer_variables()\n    chessboard = []\n    for i in range(m):\n        row = input_list()\n        chessboard.append(row)\n    find_x_sum(chessboard, m, n)\n    test_case -= 1", "from collections import defaultdict\nfor i in range(int(input())):\n    z = []\n    (x, y) = map(int, input().split())\n    for j in range(x):\n        z.append([int(k) for k in input().split()])\n    d = defaultdict(int)\n    e = defaultdict(int)\n    for l in range(x):\n        for m in range(y):\n            d[l - m] += z[l][m]\n            e[l + m] += z[l][m]\n    ma = 0\n    for l in range(x):\n        for m in range(y):\n            ma = max(ma, d[l - m] + e[l + m] - z[l][m])\n    print(ma)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    (d1, d2) = ([0] * (n + m - 1), [0] * (n + m - 1))\n    for i in range(n):\n        for j in range(m):\n            d1[i + j] += a[i][j]\n            d2[i - j] += a[i][j]\n    for i in range(n):\n        for j in range(m):\n            a[i][j] = d1[i + j] + d2[i - j] - a[i][j]\n    print(max(map(max, a)))", "for pratyush in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        a.append(l)\n    c = m + n - 1\n    (p, s) = ([0] * c, [0] * c)\n    for i in range(n):\n        for j in range(m):\n            p[i - j] += a[i][j]\n            s[i + j] += a[i][j]\n    h = 0\n    for i in range(n):\n        for j in range(m):\n            a[i][j] = p[i - j] + s[i + j] - a[i][j]\n            if h < a[i][j]:\n                h = a[i][j]\n    print(h)", "z = lambda : map(int, input().split())\n(t,) = z()\nfor _ in [1] * t:\n    (n, m) = z()\n    ch = []\n    p = [0] * (n + m - 1)\n    q = [0] * (n + m - 1)\n    for i in [1] * n:\n        ch.append([*z()])\n    for i in range(n):\n        for j in range(m):\n            p[i - j] += ch[i][j]\n            q[i + j] += ch[i][j]\n    mx = -2000000000.0\n    for i in range(n):\n        for j in range(m):\n            mx = max(mx, p[i - j] + q[i + j] - ch[i][j])\n    print(mx)", "for k in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    l = []\n    for i in range(n):\n        l.append([int(j) for j in input().split()])\n    (l1, l2) = ([0] * (n + m - 1), [0] * (n + m - 1))\n    for i in range(n):\n        for j in range(m):\n            l1[i + j] += l[i][j]\n            l2[j - i + n - 1] += l[i][j]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            ans = max(ans, l1[i + j] + l2[j - i + n - 1] - l[i][j])\n    print(ans)", "(k, o) = (lambda : map(int, input().split()), range)\nfor f in o(*k()):\n    (n, m) = k()\n    a = [[*k()] for t in o(n)]\n    l = [0] * (m + n)\n    r = l[:]\n    for i in o(n):\n        for j in o(m):\n            b = a[i][j]\n            l[i - j + m - 1] += b\n            r[i + j] += b\n    print(max((l[i - j + m - 1] + r[i + j] - a[i][j] for i in o(n) for j in o(m))))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    (d1, d2) = ([0] * (n + m - 1), [0] * (n + m - 1))\n    for i in range(n):\n        for j in range(m):\n            d1[i + j] += a[i][j]\n            d2[i - j] += a[i][j]\n    for i in range(n):\n        for j in range(m):\n            a[i][j] = d1[i + j] + d2[i - j] - a[i][j]\n    print(max(map(max, a)))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        a.append(l)\n    c = m + n - 1\n    (p, s) = ([0] * c, [0] * c)\n    for i in range(n):\n        for j in range(m):\n            p[i - j] += a[i][j]\n            s[i + j] += a[i][j]\n    h = 0\n    for i in range(n):\n        for j in range(m):\n            a[i][j] = p[i - j] + s[i + j] - a[i][j]\n            if h < a[i][j]:\n                h = a[i][j]\n    print(h)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    dr = [0] * (m + n)\n    dl = [0] * (m + n)\n    row = []\n    ans = 0\n    for i in range(n):\n        row.append(list(map(int, input().split())))\n        for j in range(m):\n            dr[i + j] += row[i][j]\n            dl[i - j + m] += row[i][j]\n    for i in range(n):\n        for j in range(m):\n            ans = max(ans, dr[i + j] + dl[i - j + m] - row[i][j])\n    print(ans)", "def xsum(x) -> int:\n    forward = {}\n    backward = {}\n    maximum = 0\n    for row in range(len(x)):\n        for col in range(len(x[0])):\n            forward[row + col] = x[row][col] + forward.get(row + col, 0)\n            backward[row - col] = x[row][col] + backward.get(row - col, 0)\n    for row in range(len(x)):\n        for col in range(len(x[0])):\n            maximum = max(maximum, forward[row + col] + backward[row - col] - x[row][col])\n    return maximum\nsize = int(input())\nfor _ in range(size):\n    (row, col) = map(int, input().split())\n    Lists = []\n    for _ in range(row):\n        Lists.append(list(map(int, input().split())))\n    result = xsum(Lists)\n    print(result)", "from collections import defaultdict\n\ndef helper(grid):\n    (row, col) = (len(grid), len(grid[0]))\n    diagonal1 = defaultdict(int)\n    diagonal2 = defaultdict(int)\n    for r in range(row):\n        for c in range(col):\n            diagonal1[r - c] += grid[r][c]\n            diagonal2[r + c] += grid[r][c]\n    max_sum = float('-inf')\n    for r in range(row):\n        for c in range(col):\n            cur = diagonal1[r - c] + diagonal2[r + c] - grid[r][c]\n            max_sum = max(max_sum, cur)\n    return max_sum\nlength = int(input())\nfor _ in range(length):\n    size = list(map(int, input().split()))\n    grid = []\n    for i in range(size[0]):\n        row = list(map(int, input().split()))\n        grid.append(row)\n    print(helper(grid))", "for test in range(int(input())):\n    diag = {}\n    anti = {}\n    matrix = []\n    for x in range(list(map(int, input().split()))[0]):\n        matrix.append(list(map(int, input().split())))\n    maxx = 0\n    for row in range(len(matrix)):\n        for col in range(len(matrix[row])):\n            dg = row + col\n            ati = col - row\n            diag[dg] = diag.get(dg, 0) + matrix[row][col]\n            anti[ati] = anti.get(ati, 0) + matrix[row][col]\n    maxx = 0\n    for row in range(len(matrix)):\n        for col in range(len(matrix[row])):\n            dg = col + row\n            at = col - row\n            maxx = max(diag[dg] + anti[at] - matrix[row][col], maxx)\n    print(maxx)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    matrix = [list(map(int, input().split())) for i in range(n)]\n    diagonalSum1 = defaultdict(int)\n    diagonalSum2 = defaultdict(int)\n    for row in range(len(matrix)):\n        for col in range(len(matrix[0])):\n            diagonalSum1[col - row] += matrix[row][col]\n            diagonalSum2[col + row] += matrix[row][col]\n    maximumSum = 0\n    for row in range(len(matrix)):\n        for col in range(len(matrix[0])):\n            firstDiagonalSum = diagonalSum1[col - row]\n            secondDiagonalSum = diagonalSum2[col + row]\n            cellSum = firstDiagonalSum + secondDiagonalSum - matrix[row][col]\n            if cellSum > maximumSum:\n                maximumSum = cellSum\n    print(maximumSum)", "from collections import defaultdict\ntestCases = int(input())\nfor _ in range(testCases):\n    rightDiagonal = defaultdict(int)\n    leftDiagonal = defaultdict(int)\n    chessboard = []\n    (rows, columns) = list(map(int, input().split()))\n    for index in range(rows):\n        row = list(map(int, input().split()))\n        chessboard.append(row)\n        length = len(row)\n        for i in range(length):\n            rightDiagonal[index - i] += row[i]\n            leftDiagonal[index + i] += row[i]\n    maxSum = -1\n    for i in range(rows):\n        for j in range(columns):\n            sum = rightDiagonal[i - j] + leftDiagonal[i + j] - chessboard[i][j]\n            maxSum = max(maxSum, sum)\n    print(maxSum)", "from collections import defaultdict\ntestCases = int(input())\nfor _ in range(testCases):\n    rd = defaultdict(int)\n    ld = defaultdict(int)\n    chessboard = []\n    (rows, columns) = list(map(int, input().split()))\n    for index in range(rows):\n        row = list(map(int, input().split()))\n        chessboard.append(row)\n        length = len(row)\n        for i in range(length):\n            rd[index - i] += row[i]\n            ld[index + i] += row[i]\n    maxi = -1\n    for i in range(rows):\n        for j in range(columns):\n            sum = rd[i - j] + ld[i + j] - chessboard[i][j]\n            maxi = max(maxi, sum)\n    print(maxi)", "from collections import *\ntest_case = int(input())\nfor _ in range(test_case):\n    (n, m) = map(int, input().split())\n    dctMD = defaultdict(int)\n    dctOD = defaultdict(int)\n    mtr = []\n    for _ in range(n):\n        row = list(map(int, input().split()))\n        mtr.append(row)\n    for i in range(n):\n        for j in range(m):\n            dctMD[i - j] += mtr[i][j]\n            dctOD[i + j] += mtr[i][j]\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            res = max(res, dctMD[i - j] + dctOD[i + j] - mtr[i][j])\n    print(res)", "from collections import defaultdict\nsize_of_test_case = int(input())\nfor _ in range(size_of_test_case):\n    (rows, cols) = map(int, input().split())\n    grid = []\n    for _ in range(rows):\n        row_val = list(map(int, input().split()))\n        grid.append(row_val)\n    difference_of_row_col = defaultdict(int)\n    sum_of_row_col = defaultdict(int)\n    max_val = float('-inf')\n    length_grid = len(grid)\n    for (row, row_val) in enumerate(grid):\n        for col in range(len(row_val)):\n            sum_of_row_col[col + row] += row_val[col]\n            difference_of_row_col[row - col] += row_val[col]\n    for (row, row_val) in enumerate(grid):\n        for col in range(len(row_val)):\n            score = sum_of_row_col[col + row] + difference_of_row_col[row - col] - row_val[col]\n            max_val = max(score, max_val)\n    print(max_val)", "n = int(input())\nfor i in range(n):\n    (r, m) = list(map(int, input().split()))\n    mat = []\n    for i in range(r):\n        mat.append(list(map(int, input().split())))\n    from collections import defaultdict\n    row = len(mat)\n    col = len(mat[0])\n    diagonal = defaultdict(int)\n    anti_diagonal = defaultdict(int)\n    for i in range(row):\n        for j in range(col):\n            diagonal[i + j] += mat[i][j]\n            anti_diagonal[j - i] += mat[i][j]\n    _max = 0\n    for i in range(row):\n        for j in range(col):\n            if diagonal[i + j] + anti_diagonal[j - i] - mat[i][j] > _max:\n                _max = diagonal[i + j] + anti_diagonal[j - i] - mat[i][j]\n    print(_max)", "from collections import defaultdict\ntestCases = int(input())\nfor _ in range(testCases):\n    nm = input().split()\n    rows = int(nm[0])\n    cols = int(nm[1])\n    diagSum1 = defaultdict(int)\n    diagSum2 = defaultdict(int)\n    grid = []\n    for _ in range(rows):\n        row = list(map(int, input().split()))\n        grid.append(row)\n    for row in range(rows):\n        for col in range(cols):\n            num = grid[row][col]\n            diagSum1[row - col] += num\n            diagSum2[row + col] += num\n    maxx = 0\n    for row in range(rows):\n        for col in range(cols):\n            num = grid[row][col]\n            summ = diagSum1[row - col] + diagSum2[row + col] - num\n            maxx = max(maxx, summ)\n    print(maxx)", "def bishopAttack(matrix):\n    m = len(matrix)\n    n = len(matrix[0])\n    forward = {}\n    backward = {}\n    for row in range(m):\n        for col in range(n):\n            if row - col in forward:\n                forward[row - col] += matrix[row][col]\n            else:\n                forward[row - col] = matrix[row][col]\n            if row + col in backward:\n                backward[row + col] += matrix[row][col]\n            else:\n                backward[row + col] = matrix[row][col]\n    maxx = 0\n    for row in range(m):\n        for col in range(n):\n            curSum = forward[row - col] + backward[row + col] - matrix[row][col]\n            maxx = max(maxx, curSum)\n    return maxx\ntests = int(input())\nfor i in range(tests):\n    inp = input().split(' ')\n    (n, m) = (int(inp[0]), int(inp[1]))\n    matrix = []\n    for j in range(n):\n        row = list(map(int, input().split(' ')))\n        matrix.append(row)\n    print(bishopAttack(matrix))", "import collections\n\ndef process(matrix, rows, cols):\n    diff = collections.defaultdict(int)\n    add = collections.defaultdict(int)\n    for row in range(rows):\n        for col in range(cols):\n            diff[row - col] += matrix[row][col]\n            add[row + col] += matrix[row][col]\n    maximal_res = 0\n    for row in range(rows):\n        for col in range(cols):\n            maximal_res = max(maximal_res, diff[row - col] + add[row + col] - matrix[row][col])\n    print(maximal_res)\ntest = int(input())\nfor i in range(test):\n    (rows, cols) = list(map(int, input().split()))\n    mat = []\n    for j in range(rows):\n        temp = list(map(int, input().split()))\n        mat.append(temp)\n    process(mat, rows, cols)", "from collections import defaultdict\ntest_num = int(input())\nfor _ in range(test_num):\n    input_ = []\n    (rows, cols) = list(map(int, input().split(' ')))\n    max_ = 0\n    for _ in range(rows):\n        cell = list(map(int, input().split()))\n        input_.append(cell)\n    sum_hash_map = defaultdict(int)\n    diff_hash_map = defaultdict(int)\n    res = []\n    for row in range(rows):\n        for col in range(cols):\n            diff_hash_map[col - row] += input_[row][col]\n            sum_hash_map[col + row] += input_[row][col]\n    for row in range(rows):\n        for col in range(cols):\n            sum_ = diff_hash_map[col - row] + sum_hash_map[col + row] - input_[row][col]\n            max_ = max(max_, sum_)\n    print(max_)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (row, col) = list(map(int, input().split()))\n    board = []\n    for temp in range(row):\n        l = list(map(int, input().split()))\n        board.append(l)\n    diagonal = defaultdict(int)\n    diagonal2 = defaultdict(int)\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            diagonal[j - i] += board[i][j]\n            diagonal2[j + i] += board[i][j]\n    maxSum = float('-inf')\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            curSum = diagonal[j - i] + diagonal2[j + i] - board[i][j]\n            maxSum = max(maxSum, curSum)\n    print(maxSum)", "import sys\nfrom collections import defaultdict\ninput = sys.stdin.readline\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (row, col) = list(map(int, input().split()))\n        grid = []\n        for i in range(row):\n            nums = list(map(int, input().split()))\n            grid.append(nums)\n        diagonal_1_sum_map = defaultdict(int)\n        diagonal_2_sum_map = defaultdict(int)\n        for i in range(row):\n            for j in range(col):\n                diagonal_1_key = i + j\n                diagonal_2_key = i - j\n                diagonal_1_sum_map[diagonal_1_key] += grid[i][j]\n                diagonal_2_sum_map[diagonal_2_key] += grid[i][j]\n        max_cross_sum = 0\n        for i in range(row):\n            for j in range(col):\n                diagonal_1_key = i + j\n                diagonal_2_key = i - j\n                diagonal_1_sum = diagonal_1_sum_map[diagonal_1_key]\n                diagonal_2_sum = diagonal_2_sum_map[diagonal_2_key]\n                total_digonal_sum = diagonal_1_sum + diagonal_2_sum - grid[i][j]\n                max_cross_sum = max(max_cross_sum, total_digonal_sum)\n        print(max_cross_sum)\nmain()", "from collections import defaultdict\ntest_cases = int(input().strip())\nfor _ in range(test_cases):\n    (n, m) = map(int, input().split())\n    li = []\n    diagonal_sum = defaultdict(int)\n    anti_diagonal_sum = defaultdict(int)\n    max_ = index = -1\n    for i in range(n):\n        arr = list(map(int, input().split()))\n        li.append(arr)\n    for i in range(n):\n        for j in range(m):\n            diagonal_sum[i - j] += li[i][j]\n            anti_diagonal_sum[j + i] += li[i][j]\n    for i in range(n):\n        for j in range(m):\n            max_ = max(max_, diagonal_sum[i - j] + anti_diagonal_sum[j + i] - li[i][j])\n    print(max_)", "def main():\n    T = int(input())\n    for test in range(T):\n        pos = list(map(int, input().split()))\n        n = pos[0]\n        m = pos[1]\n        grid = []\n        for i in range(n):\n            grid.append(list(map(int, input().split())))\n        main_diagonal_sums = {}\n        right_diagonal_sums = {}\n        d_diff = n - 1\n        d_sum = 0\n        while d_diff >= -m + 1:\n            i = max(0, d_diff)\n            main_sum = 0\n            while i < n and i - d_diff < m:\n                main_sum += grid[i][i - d_diff]\n                i += 1\n            main_diagonal_sums[d_diff] = main_sum\n            d_diff -= 1\n        while d_sum <= n + m - 2:\n            i = min(m - 1, d_sum)\n            right_sum = 0\n            while d_sum - i < n and i >= 0:\n                right_sum += grid[d_sum - i][i]\n                i -= 1\n            right_diagonal_sums[d_sum] = right_sum\n            d_sum += 1\n        max_sum = 0\n        for (i, row) in enumerate(grid):\n            for (j, cell) in enumerate(row):\n                max_sum = max(max_sum, main_diagonal_sums[i - j] + right_diagonal_sums[i + j] - cell)\n        print(max_sum)\nmain()", "rng = int(input())\n\ndef x_sum(row, col, matrix):\n    to_right = {}\n    to_left = {}\n    for i in range(row):\n        for j in range(col):\n            s = i + j\n            d = i - j\n            if s not in to_left:\n                to_left[s] = matrix[i][j]\n            else:\n                to_left[s] = to_left[s] + matrix[i][j]\n            if d not in to_right:\n                to_right[d] = matrix[i][j]\n            else:\n                to_right[d] = to_right[d] + matrix[i][j]\n    ans = 0\n    for i in range(row):\n        for j in range(col):\n            ans = max(ans, to_left[i + j] + to_right[i - j] - matrix[i][j])\n    print(ans)\nfor i in range(rng):\n    lst = list(map(int, input().split()))\n    row = lst[0]\n    col = lst[1]\n    matrix = []\n    for i in range(row):\n        temp = list(map(int, input().split()))\n        matrix.append(temp)\n    x_sum(row, col, matrix)", "def BishopMaxAttack(board):\n    row = len(board)\n    col = len(board[0])\n    left_diagonal_sum = {}\n    right_diagonal_sum = {}\n    for i in range(row):\n        for j in range(col):\n            left_diagonal_sum[i - j] = left_diagonal_sum.get(i - j, 0) + board[i][j]\n            right_diagonal_sum[i + j] = right_diagonal_sum.get(i + j, 0) + board[i][j]\n    maxAttack = 0\n    for i in range(row):\n        for j in range(col):\n            maxAttack = max(maxAttack, left_diagonal_sum[i - j] + right_diagonal_sum[i + j] - board[i][j])\n    return maxAttack\ntestcases = int(input())\nchessboards = [[] for i in range(testcases)]\nfor i in range(testcases):\n    (m, n) = map(int, input().split())\n    for _ in range(m):\n        chessboards[i].append(list(map(int, input().split())))\nfor chess in chessboards:\n    print(BishopMaxAttack(chess))", "from collections import defaultdict\nn = int(input())\nfor i in range(n):\n    (n, m) = list(map(int, input().split()))\n    grid = []\n    for _ in range(n):\n        row = list(map(int, input().split()))\n        grid.append(row)\n    diagonal1 = defaultdict(int)\n    diagonal2 = defaultdict(int)\n    for row in range(n):\n        for col in range(m):\n            diagonal1[row - col] += grid[row][col]\n            diagonal2[row + col] += grid[row][col]\n    max_value = 0\n    for row in range(n):\n        for col in range(m):\n            curr_value = diagonal1[row - col] + diagonal2[row + col] - grid[row][col]\n            max_value = max(max_value, curr_value)\n    print(max_value)", "from collections import defaultdict\ntestcase = int(input())\nfor _ in range(testcase):\n    newlist = list(tuple(map(int, input().split())))\n    c = newlist[1]\n    r = newlist[0]\n    grid = []\n    for row in range(r):\n        eachrow = list(map(int, input().split()))\n        grid.append(eachrow)\n    diagonal1 = defaultdict(int)\n    diagonal2 = defaultdict(int)\n    for row in range(len(grid)):\n        for col in range(len(grid[0])):\n            diagonal1[row - col] += grid[row][col]\n    for row in range(len(grid)):\n        for col in range(len(grid[0])):\n            diagonal2[row + col] += grid[row][col]\n    output = 0\n    for row in range(len(grid)):\n        for col in range(len(grid[0])):\n            diag1 = diagonal1[row - col]\n            diag2 = diagonal2[row + col]\n            output = max(output, diag1 + diag2 - grid[row][col])\n    print(output)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    board = [list(map(int, input().split())) for _ in range(n)]\n    d_plus = {i: 0 for i in range(m + n)}\n    d_minus = {i: 0 for i in range(-m - n, m + n)}\n    for i in range(n):\n        for j in range(m):\n            d_plus[i + j] += board[i][j]\n            d_minus[i - j] += board[i][j]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            ans = max(ans, d_plus[i + j] + d_minus[i - j] - board[i][j])\n    print(ans)", "T = int(input())\nfor t in range(T):\n    (n, m) = list(map(int, input().split()))\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n    left = [0 for i in range(n + m - 1)]\n    for i in range(n):\n        for j in range(m):\n            left[i + j] += arr[i][j]\n    right = [0 for i in range(n + m - 1)]\n    for i in range(n):\n        for j in range(m - 1, -1, -1):\n            right[i + (m - j - 1)] += arr[i][j]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            temp = left[i + j] + right[i + (m - j - 1)] - arr[i][j]\n            ans = max(ans, temp)\n    print(ans)", "t = int(input())\nfor test_idx in range(t):\n    (n, m) = list(map(int, input().split()))\n    lines = []\n    for _ in range(n):\n        line = list(map(int, input().split()))\n        lines.append(line)\n    diags_r = [0 for _ in range(n + m)]\n    diags_l = [0 for _ in range(n + m)]\n    for i1 in range(n):\n        for i2 in range(m):\n            diags_r[i1 + i2] += lines[i1][i2]\n            diags_l[i1 - i2 + m - 1] += lines[i1][i2]\n    max_value = 0\n    for i1 in range(n):\n        for i2 in range(m):\n            max_value = max(max_value, diags_r[i1 + i2] + diags_l[i1 - i2 + m - 1] - lines[i1][i2])\n    print(max_value)", "t = int(input())\nresult = []\nfor iter in range(t):\n    (n, m) = map(int, input().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, input().split())))\n    data = {}\n    data1 = {}\n    for i in range(1, len(matrix)):\n        data[0 - i] = matrix[i][0]\n        tempx = i\n        tempy = 0\n        while tempx + 1 < n and tempy + 1 < m:\n            data[0 - i] += matrix[tempx + 1][tempy + 1]\n            tempx += 1\n            tempy += 1\n        data1[i + m - 1] = matrix[i][m - 1]\n        tempx = i\n        tempy = m - 1\n        while tempx + 1 < n and tempy - 1 >= 0:\n            data1[i + m - 1] += matrix[tempx + 1][tempy - 1]\n            tempx += 1\n            tempy -= 1\n    for i in range(m):\n        data[i] = matrix[0][i]\n        tempx = 0\n        tempy = i\n        while tempx + 1 < n and tempy + 1 < m:\n            data[i] += matrix[tempx + 1][tempy + 1]\n            tempx += 1\n            tempy += 1\n        data1[i] = matrix[0][i]\n        tempx = 0\n        tempy = i\n        while tempx + 1 < n and tempy - 1 >= 0:\n            data1[i] += matrix[tempx + 1][tempy - 1]\n            tempx += 1\n            tempy -= 1\n    maxx = -1\n    for i in range(n):\n        for j in range(m):\n            if data[j - i] + data1[j + i] - matrix[i][j] > maxx:\n                maxx = data[j - i] + data1[j + i] - matrix[i][j]\n    print(maxx)", "for _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    a = []\n    for t in range(n):\n        a.append([int(q) for q in input().split()])\n    mp1 = {}\n    mp2 = {}\n    for i in range(n):\n        for j in range(m):\n            if i - j in mp1:\n                mp1[i - j] += a[i][j]\n            else:\n                mp1[i - j] = a[i][j]\n            if i + j in mp2:\n                mp2[i + j] += a[i][j]\n            else:\n                mp2[i + j] = a[i][j]\n    ans = 0\n    for i in range(n):\n        cur = 0\n        for j in range(m):\n            cur = mp1[i - j] + mp2[i + j] - a[i][j]\n            ans = max(ans, cur)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    maxi = 0\n    mat = [list(map(int, input().split())) for i in range(n)]\n    x = [0 for i in range(n + m - 1)]\n    y = [0 for i in range(n + m - 1)]\n    for i in range(n):\n        for j in range(m):\n            x[i + j] += mat[i][j]\n    for i in range(n):\n        for j in range(m):\n            y[i + j] += mat[i][m - 1 - j]\n    for i in range(n):\n        for j in range(m):\n            maxi = max(x[j + i] + y[m - 1 - j + i] - mat[i][j], maxi)\n    print(maxi)", "import math\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\nimport math\ntests = inp()\nfor i in range(tests):\n    (n, m) = inlt()\n    grid = []\n    d1 = {}\n    d2 = {}\n    for i in range(n):\n        grid.append(inlt())\n    for i in range(n):\n        for j in range(m):\n            if i + j not in d1:\n                d1[i + j] = 0\n            if i - j not in d2:\n                d2[i - j] = 0\n            d1[i + j] += grid[i][j]\n            d2[i - j] += grid[i][j]\n    maximal = -math.inf\n    for i in range(n):\n        for j in range(m):\n            curVal = d1[i + j] + d2[i - j] - grid[i][j]\n            maximal = max(maximal, curVal)\n    print(maximal)", "nb_tests = int(input())\nfor tests in range(nb_tests):\n    (N, M) = map(int, input().split())\n    matrice = []\n    for _ in range(N):\n        matrice.append(list(map(int, input().split())))\n    diag = {}\n    anti_diag = {}\n    for i in range(N):\n        for j in range(M):\n            if i + j not in diag:\n                diag[i + j] = 0\n            if i - j not in anti_diag:\n                anti_diag[i - j] = 0\n            diag[i + j] += matrice[i][j]\n            anti_diag[i - j] += matrice[i][j]\n    max_value = 0\n    for i in range(N):\n        for j in range(M):\n            max_value = max(diag[i + j] + anti_diag[i - j] - matrice[i][j], max_value)\n    print(max_value)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    l = []\n    r = []\n    for i in range(m):\n        s = 0\n        j = 0\n        k = i\n        while j < n and k >= 0:\n            s += a[j][k]\n            j += 1\n            k -= 1\n        l.append(s)\n    for i in range(1, n):\n        s = 0\n        j = m - 1\n        k = i\n        while j >= 0 and k < n:\n            s += a[k][j]\n            k += 1\n            j -= 1\n        l.append(s)\n    for i in range(m):\n        s = 0\n        j = 0\n        k = i\n        while j < n and k < m:\n            s += a[j][k]\n            j += 1\n            k += 1\n        r.append(s)\n    for i in range(1, n):\n        s = 0\n        j = 0\n        k = i\n        while k < n and j < m:\n            s += a[k][j]\n            k += 1\n            j += 1\n        r.append(s)\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            c = l[i + j]\n            if i > j:\n                d = r[m + (i - j) - 1]\n            else:\n                d = r[j - i]\n            ans = max(ans, c + d - a[i][j])\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    mat = [list(map(int, input().split())) for _ in range(n)]\n    dur = defaultdict(int)\n    dul = defaultdict(int)\n    for i in range(n):\n        for j in range(m):\n            dur[i + j] += mat[i][j]\n            dul[i - j] += mat[i][j]\n    ans = -float('inf')\n    for i in range(n):\n        for j in range(m):\n            ans = max(ans, dur[i + j] + dul[i - j] - mat[i][j])\n    print(ans)", "from collections import defaultdict\n\ndef inp():\n    return int(input())\n\ndef invr():\n    return list(map(int, input().split()))\nfor _ in range(inp()):\n    (n, m) = invr()\n    mat = [invr() for _ in range(n)]\n    dur = defaultdict(int)\n    dul = defaultdict(int)\n    for i in range(n):\n        for j in range(m):\n            dur[i + j] += mat[i][j]\n            dul[i - j] += mat[i][j]\n    ans = -float('inf')\n    for i in range(n):\n        for j in range(m):\n            ans = max(ans, dur[i + j] + dul[i - j] - mat[i][j])\n    print(ans)", "t = int(input())\nfor z in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    M = []\n    for i in range(n):\n        l_row = [int(x) for x in input().split()]\n        M.append(l_row)\n    ld = []\n    for row1 in range(n):\n        u = row1\n        v = 0\n        sumd = 0\n        while 0 <= u and v < m:\n            sumd += M[u][v]\n            u -= 1\n            v += 1\n        ld.append(sumd)\n    for column1 in range(1, m):\n        u = n - 1\n        v = column1\n        sumd = 0\n        while 0 <= u and v < m:\n            sumd += M[u][v]\n            u -= 1\n            v += 1\n        ld.append(sumd)\n    lpd = []\n    for column2 in range(m):\n        u = n - 1\n        v = column2\n        sumd = 0\n        while 0 <= u and 0 <= v:\n            sumd += M[u][v]\n            u -= 1\n            v -= 1\n        lpd.append(sumd)\n    for row2 in range(n - 2, -1, -1):\n        u = row2\n        v = m - 1\n        sumd = 0\n        while 0 <= u and 0 <= v:\n            sumd += M[u][v]\n            u -= 1\n            v -= 1\n        lpd.append(sumd)\n    xfac = n - 1\n    ans = 0\n    for g in range(n):\n        rfac = xfac - g\n        h = 0\n        cfac = g\n        while h < m:\n            evaluate = lpd[rfac] + ld[cfac] - M[g][h]\n            if ans < evaluate:\n                ans = evaluate\n            cfac += 1\n            rfac += 1\n            h += 1\n    print(ans)", "(I, R) = (lambda : map(int, input().split()), range)\nfor _ in R(*I()):\n    (n, m) = I()\n    a = []\n    l = [0] * (m + n)\n    r = l[:]\n    for i in R(n):\n        a.append([*I()])\n        for j in R(m):\n            b = a[i][j]\n            l[i - j + m - 1] += b\n            r[i + j] += b\n    print(max((l[i - j + m - 1] + r[i + j] - a[i][j] for i in R(n) for j in R(m))))"]