["t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [x + y for (x, y) in enumerate(a)]\n    print(sum(sorted(b)[:n - k]) - (n - k) * (n - k - 1) // 2)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [x + y for (x, y) in enumerate(a)]\n    print(sum(sorted(b)[:n - k]) - (n - k) * (n - k - 1) // 2)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [x + y for (x, y) in enumerate(a)]\n    print(sum(sorted(b)[:n - k]) - (n - k) * (n - k - 1) // 2)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [x + y for (x, y) in enumerate(a)]\n    print(sum(sorted(b)[:n - k]) - (n - k) * (n - k - 1) // 2)", "I = input\nR = lambda : map(int, I().split())\nfor i in range(int(I())):\n    (n, k) = R()\n    a = sorted([v + i for (i, v) in enumerate(R())])\n    print(sum(a[:-k]) - (n - k) * (0 + n - k - 1) // 2)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [x + y for (x, y) in enumerate(a)]\n    print(sum(sorted(b)[:n - k]) - (n - k) * (n - k - 1) // 2)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [x + y for (x, y) in enumerate(a)]\n    print(sum(sorted(b)[:n - k]) - (n - k) * (n - k - 1) // 2)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [x + y for (x, y) in enumerate(a)]\n    print(sum(sorted(b)[:n - k]) - (n - k) * (n - k - 1) // 2)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [x + y for (x, y) in enumerate(a)]\n    print(sum(sorted(b)[:n - k]) - (n - k) * (n - k - 1) // 2)", "r = int(input())\nfor i in range(r):\n    (p, k) = map(int, input().split())\n    g = list(map(int, input().split()))\n    h = [x + y for (x, y) in enumerate(g)]\n    print(sum(sorted(h)[:p - k]) - (p - k) * (p - k - 1) // 2)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [x + y for (x, y) in enumerate(a)]\n    print(sum(sorted(b)[:n - k]) - (n - k) * (n - k - 1) // 2)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [x + y for (x, y) in enumerate(a)]\n    print(sum(sorted(b)[:n - k]) - (n - k) * (n - k - 1) // 2)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [x + y for (x, y) in enumerate(a)]\n    print(sum(sorted(b)[:n - k]) - (n - k) * (n - k - 1) // 2)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [x + y for (x, y) in enumerate(a)]\n    print(sum(sorted(b)[:n - k]) - (n - k) * (n - k - 1) // 2)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [x + y for (x, y) in enumerate(a)]\n    print(sum(sorted(b)[:n - k]) - (n - k) * (n - k - 1) // 2)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [x + y for (x, y) in enumerate(a)]\n    print(sum(sorted(b)[:n - k]) - (n - k) * (n - k - 1) // 2)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [x + y for (x, y) in enumerate(a)]\n    print(sum(sorted(b)[:n - k]) - (n - k) * (n - k - 1) // 2)", "kvs = int(input())\nfor _ in range(kvs):\n    (c, d) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [x + y for (x, y) in enumerate(a)]\n    print(sum(sorted(b)[:c - d]) - (c - d) * (c - d - 1) // 2)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [x + y for (x, y) in enumerate(a)]\n    print(sum(sorted(b)[:n - k]) - (n - k) * (n - k - 1) // 2)", "def solve(n, k, arr):\n    if k >= n:\n        print(0)\n        return\n    first_k = k\n    res = []\n    ans = sum(arr)\n    arr = arr[::-1]\n    damage_idx = []\n    for i in range(len(arr)):\n        damage_idx.append(i - arr[i])\n    damage_idx.sort()\n    for i in range(k):\n        ans += damage_idx[i]\n    print(int(ans - k * (k - 1) / 2))\n\ndef get_input():\n    first_line = input()\n    n = int(first_line.split()[0])\n    k = int(first_line.split()[1])\n    arr = list(map(int, input().split()))\n    return (n, k, arr)\nt = int(input())\nfor i in range(t):\n    (n, k, arr) = get_input()\n    solve(n, k, arr)", "I = input\nR = lambda : map(int, I().split())\nfor i in range(int(I())):\n    (n, k) = R()\n    a = sorted([v + i for (i, v) in enumerate(R())])\n    print(sum(a[:-k]) - (n - k) * (0 + n - k - 1) // 2)", "def resi():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    for i in range(n):\n        a[i] = a[i] - (n - (i + 1))\n    a.sort()\n    print(s - sum(a[-k:]) - k * (k - 1) // 2)\n    return\nfor _ in range(int(input())):\n    resi()", "for _ in range(int(input())):\n    (trap, jump) = map(int, input().split())\n    temp = list(map(int, input().split()))\n    print(sum(sorted([temp[i] + i for i in range(trap)])[:trap - jump]) - (trap - jump) * (trap - jump - 1) // 2)", "def find(n, k, a):\n    if k >= n:\n        return 0\n    carry = [a[i] + i + 1 for i in range(n)]\n    carry.sort()\n    carry.reverse()\n    skip = sum(carry[:k])\n    return sum(a) + n * k - int((k - 1) * k / 2) - skip\ncase = int(input())\nfor _ in range(case):\n    line = input().split()\n    (n, k) = (line[0], line[1])\n    raw = input().split()\n    a = [int(elem) for elem in raw]\n    print(find(int(n), int(k), a))", "t = int(input())\nwhile t:\n    t -= 1\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    diff = [x - (n - 1 - i) for (i, x) in enumerate(a)]\n    diff.sort()\n    ans = sum(a)\n    ans -= sum(diff[-k:])\n    ans -= k * (k - 1) // 2\n    print(ans)", "def solve(n, k, arr):\n    if k >= n:\n        print(0)\n        return\n    res = []\n    ans = sum(arr)\n    damage_idx = []\n    for i in range(len(arr)):\n        damage_idx.append(len(arr) - i - 1 - arr[i])\n    damage_idx.sort()\n    for i in range(k):\n        ans += damage_idx[i]\n    print(int(ans - k * (k - 1) / 2))\n\ndef get_input():\n    first_line = input()\n    n = int(first_line.split()[0])\n    k = int(first_line.split()[1])\n    arr = list(map(int, input().split()))\n    return (n, k, arr)\nt = int(input())\nfor i in range(t):\n    (n, k, arr) = get_input()\n    solve(n, k, arr)", "def main():\n    tc = int(input())\n    for _ in range(tc):\n        (n, k) = map(int, input().split())\n        arr = [int(a) for a in input().split()]\n        cost = sum(arr)\n        removals = []\n        for i in range(n):\n            removals.append(arr[i] - (n - i - 1))\n        removals.sort(reverse=True)\n        for i in range(k):\n            cost -= removals[i]\n        print(cost - k * (k - 1) // 2)\nmain()", "def dTraps(n, k, l):\n    costs = []\n    for i in range(n):\n        costs.append(n - i - 1 - l[i])\n    costs.sort()\n    c = 0\n    for i in range(k):\n        c += costs[i]\n    c -= k * (k - 1) // 2\n    print(sum(l) + c)\nt = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    dTraps(n, k, l)\n    t = t - 1", "import collections\nfrom math import ceil, gcd, sqrt, log\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    total_damage = sum(A)\n    additional_damage_removed = k * (k - 1) // 2\n    removed = []\n    for i in range(n):\n        ok = A[i] - (n - i - 1)\n        removed.append(ok)\n    removed.sort(reverse=True)\n    net_removed_damage = 0\n    for i in range(k):\n        net_removed_damage += removed[i]\n    ans = total_damage - net_removed_damage - additional_damage_removed\n    print(ans)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n\n    def solve(arr, n, k):\n        if k == n:\n            return 0\n        sumi = 0\n        for i in range(n):\n            sumi += arr[i]\n            arr[i] -= n - i - 1\n        if k == 0:\n            return sumi\n        arr.sort(reverse=True)\n        for i in range(k):\n            sumi -= arr[i]\n        sumi -= k * (k - 1) // 2\n        return sumi\n    print(solve(arr, n, k))", "def find_minimal_damage_count(n, jumps, attacks):\n    damageCount = 0\n    if n == jumps:\n        return damageCount\n    for i in range(n):\n        damageCount += attacks[i]\n        attacks[i] += i + 1\n    attacks.sort()\n    attacks.reverse()\n    for i in range(jumps):\n        damageCount -= attacks[i]\n        damageCount += n - i\n    return damageCount\nt = int(input())\nfor i in range(t):\n    lens = input().split(' ')\n    n = int(lens[0])\n    jumps = int(lens[1])\n    attacks = list(map(int, input().split(' ')))\n    print(str(find_minimal_damage_count(n, jumps, attacks)))", "def r():\n    return list(map(int, input().split()))\nfor i in range(int(input())):\n    (a, b) = r()\n    c = r()\n    e = []\n    for i in range(a):\n        e.append(a - i - 1 - c[i])\n    print(sum(c) - b * (b - 1) // 2 + sum(sorted(e)[:b]))", "def solve():\n    (n, k) = map(int, input().split())\n    a = tuple(map(int, input().split()))\n    dmg_bonus = [i for i in range(n)]\n    dmg_bonus.sort(key=lambda x: a[x] + x, reverse=True)\n    jump = [False] * n\n    for i in range(k):\n        jump[dmg_bonus[i]] = True\n    ans = 0\n    bonus = 0\n    for i in range(n):\n        if jump[i]:\n            bonus += 1\n        else:\n            ans += a[i] + bonus\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "T = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = [A[i] - N + i for i in range(N)]\n    B.sort(reverse=True)\n    total = sum(A) - K * (K + 1) // 2\n    for i in range(K):\n        total -= B[i]\n    print(total)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    d = list(map(int, input().split()))\n    sm = sum(d)\n    for i in range(n):\n        d[i] = -d[i] + (n - 1 - i)\n    d.sort()\n    for i in range(k):\n        sm += d[i] - i\n    print(sm)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    otv = sum(a)\n    esl_per = [0] * n\n    for i in range(n):\n        esl_per[i] = a[i] - (n - 1 - i)\n    kaz = k * (k - 1) // 2\n    esl_per.sort(reverse=True)\n    if n == k:\n        print(0)\n    else:\n        print(otv - sum(esl_per[:k]) - kaz)", "for _ in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    A = [int(i) for i in input().split()]\n    res = sum(A) - k * (k - 1) // 2\n    for i in range(n):\n        A[i] -= n - i - 1\n    A.sort()\n    for i in range(k):\n        res -= A[-i - 1]\n    print(res)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = [int(i) for i in input().split()]\n    ll = sorted([-l[i] + (n - 1 - i) for i in range(n)])\n    base = sum(l)\n    poss = [base]\n    for i in range(k):\n        base += ll[i] - i\n        poss.append(base)\n    print(min(poss))", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    v = list(map(int, input().split()))\n    ans = 0\n    for i in range(0, n):\n        ans += v[i]\n        v[i] = -v[i] + n - i\n    v.sort()\n    for i in range(0, k):\n        ans += v[i]\n    ans -= k * (k + 1) // 2\n    print(ans)\n    t -= 1", "for _ in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    A = [int(i) for i in input().split()]\n    res = sum(A) - k * (k - 1) // 2\n    for i in range(n):\n        A[i] -= n - i - 1\n    A.sort()\n    for i in range(k):\n        res -= A[-i - 1]\n    print(res)", "import math\nfor _ in range(int(input())):\n    (trap, jump) = map(int, input().split())\n    temp = list(map(int, input().split()))\n    z = {}\n    for i in range(trap):\n        z[i] = temp[i] + i\n    k = sorted(list(z.values()))\n    total = 0\n    for i in range(trap - jump):\n        total += k[i]\n    a = trap - jump\n    total -= a * (a - 1) // 2\n    print(total)", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    v = list(map(int, input().split()))\n    ans = 0\n    for i in range(0, n):\n        ans += v[i]\n        v[i] = -v[i] + n - i - 1\n    v.sort()\n    for i in range(0, k):\n        ans += v[i]\n    ans -= k * (k - 1) // 2\n    print(ans)\n    t -= 1", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    l = [int(x) for x in input().split()]\n    ans = []\n    if n <= k:\n        print(0)\n    else:\n        for (i, j) in enumerate(l):\n            ans.append(j - n + i + 1)\n        a = sorted(ans)\n        sumu = sum(l)\n        t = k\n        for i in range(k):\n            sumu -= a[n - i - 1]\n        print(sumu - t * (t - 1) // 2)", "T = int(input())\nwhile T:\n    T -= 1\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n        a[i] += i + 1\n    a.sort(reverse=True)\n    for i in range(k):\n        sum -= a[i] - n + k - (i + 1)\n    print(sum)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    v = list(map(int, input().split()))\n    ans = 0\n    for i in range(0, n):\n        ans += v[i]\n        v[i] = -v[i] + n - i - 1\n    v.sort()\n    for i in range(0, k):\n        ans += v[i]\n    ans -= k * (k - 1) // 2\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans += arr[i]\n        arr[i] += i + 1\n    arr.sort(reverse=True)\n    for i in range(k):\n        ans -= arr[i]\n    for i in range(k):\n        ans += n\n        ans -= i\n    print(ans)", "t = int(input())\nfor test in range(t):\n    (n, k) = map(lambda x: int(x), input().split())\n    a = list(map(lambda x: int(x), input().split()))\n    total = sum(a)\n    costs = [0] * n\n    for i in range(n):\n        costs[i] = a[i] - (n - i - 1)\n    costs.sort(reverse=True)\n    for i in range(k):\n        if costs[i] + i > 0:\n            total -= costs[i] + i\n    print(total)", "def get_minimum_damage(trap_count: int, base_damage: list, jumps: int):\n    if trap_count <= jumps:\n        return 0\n    damage_loss_pairs = [(idx, val, val - (trap_count - idx) + 1) for (idx, val) in enumerate(base_damage)]\n    damage_loss_pairs.sort(key=lambda x: x[2], reverse=True)\n    jumbed_trap = damage_loss_pairs[:jumps]\n    other_trap = damage_loss_pairs[jumps:]\n    total_penalty = sum([trap_count - trap[0] - (jumps - idx) for (idx, trap) in enumerate(jumbed_trap)])\n    damage_gained = sum(map(lambda x: x[1], other_trap)) + total_penalty\n    return damage_gained\nno_test = int(input())\nfor _ in range(no_test):\n    (num, no_of_jumsps) = map(int, input().split())\n    numbers = list(map(int, input().split()))\n    damages = get_minimum_damage(num, numbers, no_of_jumsps)\n    print(damages)", "for inh in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    pen = [0] * n\n    for i in range(n):\n        pen[i] = a[i] - (n - 1 - i)\n    ref = pen.copy()\n    ref.sort(reverse=True)\n    ref = ref[:k]\n    j = ref.count(ref[-1])\n    for i in range(n):\n        if pen[i] > ref[-1]:\n            a[i] = 0\n        elif pen[i] == ref[-1]:\n            if j > 0:\n                a[i] = 0\n                j -= 1\n    ans = 0\n    penalty = 0\n    for i in range(n):\n        ans += a[i]\n        if a[i] == 0:\n            penalty += 1\n        else:\n            ans += penalty\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    costs = []\n    for i in range(n):\n        costs.append(n - i - 1 - l[i])\n    costs.sort()\n    c = 0\n    for i in range(k):\n        c += costs[i]\n    c -= k * (k - 1) // 2\n    print(sum(l) + c)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    traps = list(map(int, input().split()))\n    if k >= n:\n        print(0)\n        continue\n    sortedred = []\n    for i in range(n):\n        sortedred.append((i, traps[i] - (n - i - 1)))\n    sortedred.sort(key=lambda x: x[1], reverse=True)\n    totalred = 0\n    j = 0\n    for i in range(k):\n        totalred += sortedred[i][1]\n        j += 1\n    print(sum(traps) - totalred - j * (j - 1) // 2)", "import sys\nsys.setrecursionlimit(10 ** 5)\n\ndef pro(arr, k):\n    n = len(arr)\n    tot = sum(arr)\n    lst = []\n    for i in range(n):\n        lst.append((arr[i] + i, i))\n    lst.sort(reverse=True)\n    for i in range(k):\n        arr[lst[i][1]] = -1\n    x = 0\n    ans = 0\n    for i in range(n):\n        if arr[i] != -1:\n            ans += arr[i] + x\n        else:\n            x += 1\n    print(ans)\nt = int(input())\nfor i in range(t):\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    pro(arr, k)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    L = list(map(int, input().split()))\n    D = []\n    for i in range(n):\n        D.append((L[i] - n + 1 + i, i))\n    D.sort(reverse=True)\n    ans = sum(L)\n    for i in range(k):\n        ans -= D[i][0]\n    ans -= k * (k - 1) // 2\n    print(ans)", "def getMin(d, k):\n    l = []\n    for i in range(len(d)):\n        penalty = len(d) - i\n        l.append((d[i] - penalty, i))\n    l.sort(reverse=True)\n    total = 0\n    indices = set([l[i][1] for i in range(k, len(d))])\n    penalty = 0\n    for i in range(len(d)):\n        if i in indices:\n            total += d[i] + penalty\n        else:\n            penalty += 1\n    return total\ncases = int(input())\nfor i in range(cases):\n    (n, k) = map(int, input().split())\n    d = list(map(int, input().split()))\n    print(getMin(d, k))", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    Arr = list(map(int, input().split()))\n    if N == K:\n        print(0)\n        continue\n    Temp = []\n    for i in range(N):\n        Temp.append([Arr[i] - (N - i - 1), i])\n    Temp.sort(key=lambda x: x[0])\n    Allowed = [False] * N\n    for i in range(N - K):\n        Allowed[Temp[i][1]] = True\n    Answer = 0\n    Jump = 0\n    for i in range(N):\n        if Allowed[i]:\n            Answer += Arr[i] + Jump\n        else:\n            Jump += 1\n    print(Answer)", "test = int(input())\nwhile test:\n    test -= 1\n    (n, k) = [int(x) for x in input().split()]\n    arr = [(int(x), i) for (i, x) in enumerate(input().split())]\n    check = []\n    for (val, index) in arr:\n        check.append((val - n + index, index))\n    check.sort(reverse=True)\n    index = set()\n    for i in range(k):\n        index.add(check[i][1])\n    ans = 0\n    bonus = 0\n    for i in range(n):\n        (val, pos) = arr[i]\n        if pos in index:\n            bonus += 1\n        else:\n            ans += val\n            ans += bonus\n    print(ans)", "from collections import deque\n\ndef solve():\n    if k == n:\n        return 0\n    if k == 0:\n        res = sum(arr)\n        return res\n    vals = [arr[i] + i - n + k + 1 for i in range(n - k, n)]\n    vals.sort()\n    second = [(arr[i] - (n - k - 1 - i), -i) for i in range(n - k)]\n    second.sort(reverse=True)\n    res = 0\n    ind = 0\n    for i in range(len(second)):\n        if ind < k and second[i][0] > vals[ind]:\n            res += vals[ind] + arr[abs(second[i][1])] - second[i][0]\n            ind += 1\n        else:\n            res += arr[abs(second[i][1])]\n    return res\nT = int(input())\nfor t in range(T):\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    ans = solve()\n    print(ans)", "for T in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    l = [int(i) for i in input().split()]\n    l2 = [(l[i] - (n - i - 1), i) for i in range(n)]\n    l2.sort()\n    skipped = {j[1] for j in l2[-k:]}\n    damage = 0\n    s = k\n    for (i, v) in enumerate(l):\n        if i in skipped:\n            damage += n - i - s\n            s -= 1\n        else:\n            damage += v\n    print(damage)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    narr = [(arr[i] - (n - i - 1), i) for i in range(n)]\n    narr.sort(reverse=True)\n    narr = narr[:k]\n    indexs = list(map(lambda x: x[1], narr))\n    indexs.sort()\n    ls = len(indexs)\n    (j, k, ans) = (0, 0, 0)\n    for i in range(n):\n        if j < ls:\n            if i == indexs[j]:\n                k += 1\n                j += 1\n                continue\n        ans += k + arr[i]\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    li = []\n    for i in range(n):\n        li.append([a[i] + i, i])\n    li.sort(reverse=True)\n    nli = [0 for i in range(n)]\n    for i in range(k):\n        nli[li[i][1]] = 1\n    c = 0\n    ans = 0\n    for i in range(n):\n        if nli[i] == 0:\n            ans += a[i] + c\n        else:\n            c += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, list(input().split()))\n    l = list(map(int, input().split()))\n    ar = [(i, -l[i] + n - i - 1) for i in range(n)]\n    ar.sort(key=lambda x: (x[1], x[0]))\n    ans = 0\n    s = sum(l)\n    for i in range(k):\n        ans += n - ar[i][0] - i - 1\n        s -= l[ar[i][0]]\n    print(s + ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    t = []\n    for i in range(n):\n        t.append([l[i] - (n - i - 1), i])\n    t = sorted(t)[::-1]\n    x = [0 for _ in range(n)]\n    for i in range(k):\n        x[t[i][1]] = 1\n    ans = 0\n    p = 0\n    for i in range(n):\n        if x[i] == 1:\n            p += 1\n        else:\n            ans += l[i] + p\n    print(ans)", "from posixpath import split\nt = int(input())\nwhile t > 0:\n    r = input().split()\n    (n, k) = (int(r[0]), int(r[1]))\n    a = input().split()\n    for i in range(n):\n        a[i] = int(a[i])\n    b = []\n    for i in range(n):\n        b.append((a[i] - n + i, i))\n    b.sort()\n    ans = sum(a)\n    m = sum(a)\n    for i in range(n - 1, n - k - 1, -1):\n        m = m - a[b[i][1]] + n - b[i][1] - 1 - (n - i - 1)\n        ans = min(ans, m)\n    print(ans)\n    t -= 1", "t = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if k == n:\n        print(0)\n    else:\n        arr = []\n        for i in range(n):\n            arr.append([a[i] + i, i])\n        arr = sorted(arr, reverse=True)\n        temp = [0] * n\n        for i in range(k):\n            temp[arr[i][1]] = 1\n        c = 0\n        ans = 0\n        for i in range(len(a)):\n            if temp[i] == 1:\n                c += 1\n            else:\n                ans += a[i] + c\n        print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    pre = [arr[0]]\n    for i in range(1, n):\n        pre.append(pre[-1] + arr[i])\n    suf = [arr[-1]]\n    for i in range(n - 2, -1, -1):\n        suf.append(suf[-1] + arr[i])\n    suf = suf[::-1]\n    fin = []\n    for i in range(n):\n        (idx, res) = (i, 0)\n        if i != n - 1:\n            res += n - i - 1 + suf[i + 1]\n        if i > 0:\n            res += pre[i - 1]\n        fin.append([res, idx])\n    fin.sort()\n    if k == n:\n        print(0)\n    else:\n        st = set()\n        for i in range(k, n):\n            st.add(fin[i][1])\n        udhar = 0\n        curr = 0\n        for i in range(n):\n            if i in st:\n                curr += arr[i]\n                curr += udhar\n            else:\n                udhar += 1\n        print(curr)"]