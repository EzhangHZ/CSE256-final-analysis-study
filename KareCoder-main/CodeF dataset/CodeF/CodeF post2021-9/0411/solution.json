["import sys\ninput = sys.stdin.readline\n\ndef divisors(n):\n    if n == 1:\n        return [1]\n    l = []\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            l += [i]\n    return l + [n]\nd = {}\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    u = set([x.count('1') for x in zip(*(f'{x:031b}' for x in a))])\n    res = []\n    for el in u:\n        if el == 0:\n            continue\n        if el in d:\n            div = d[el]\n        else:\n            div = divisors(el)\n            d[el] = div\n        if res == []:\n            res = div.copy()\n            continue\n        new = []\n        for f in res:\n            if f in div:\n                new += [f]\n        res = new.copy()\n    if res == []:\n        res = [i for i in range(1, n + 1)]\n    print(*res, sep=' ')", "def divisors(n):\n    if n == 1:\n        return [1]\n    l = []\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            l += [i]\n    return l + [n]\nd = {}\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    u = set([x.count('1') for x in zip(*(f'{x:031b}' for x in a))])\n    res = []\n    for el in u:\n        if el == 0:\n            continue\n        if el in d:\n            div = d[el]\n        else:\n            div = divisors(el)\n            d[el] = div\n        if res == []:\n            res = div.copy()\n            continue\n        new = []\n        for f in res:\n            if f in div:\n                new += [f]\n        res = new.copy()\n    if res == []:\n        res = [i for i in range(1, n + 1)]\n    print(*res, sep=' ')", "def divisors(n):\n    if n == 1:\n        return [1]\n    l = []\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            l += [i]\n    return l + [n]\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    u = [x.count('1') for x in zip(*(f'{x:031b}' for x in a))]\n    res = []\n    for el in u:\n        if el == 0:\n            continue\n        div = divisors(el)\n        if res == []:\n            res = div.copy()\n            continue\n        new = []\n        for f in res:\n            if f in div:\n                new += [f]\n        res = new.copy()\n    if res == []:\n        res = [i for i in range(1, n + 1)]\n    print(*res, sep=' ')", "import sys\nimport bisect\nimport math\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    k = lambda x: bin(int(x))[2:][::-1]\n    a = list(map(k, input().split()))\n    m = 0\n    for i in a:\n        m = max(m, len(i))\n    c = [0] * m\n    for i in a:\n        for j in range(len(i)):\n            if i[j] == '1':\n                c[j] += 1\n    s = set(c)\n    s = list(s)\n    gcd = s[0]\n    for i in range(1, len(s)):\n        gcd = math.gcd(gcd, s[i])\n    for i in range(1, n + 1):\n        if gcd % i == 0:\n            print(i, end=' ')\n    print()\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    arr = list(map(int, sys.stdin.readline().split()))\n    bits = [0] * 30\n    for i in range(30):\n        cur_long_int = 1 << i\n        for num in arr:\n            if num & cur_long_int != 0:\n                bits[i] += 1\n    print(1, end=' ')\n    for k in range(1, n):\n        flag = True\n        for no_of_bit in bits:\n            if no_of_bit % (k + 1):\n                flag = False\n                break\n        if flag:\n            sys.stdout.write(str(k + 1) + ' ')\n    sys.stdout.write('\\n')\n\ndef main():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        solve()\nmain()", "def array_eliminations(arr, n):\n    bit_count = [0 for _ in range(30)]\n    num = 1\n    for i in range(30):\n        for elm in arr:\n            k = elm & num\n            if k != 0:\n                bit_count[i] += 1\n        num *= 2\n    results = []\n    for k in range(1, n + 1):\n        flag = True\n        for i in range(30):\n            if bit_count[i] % k != 0:\n                flag = False\n                break\n        if flag:\n            results.append(str(k))\n    return ' '.join(results)\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    a = list(map(int, input().rstrip().split()))\n    ans = array_eliminations(a, n)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mask = 1\n    bits = []\n    for _ in range(30):\n        cnt = 0\n        for i in arr:\n            if i & mask:\n                cnt += 1\n        bits.append(cnt)\n        mask <<= 1\n    ans = []\n    for k in range(1, n + 1):\n        f = 1\n        for i in bits:\n            if i % k:\n                f = 0\n                break\n        if f:\n            ans.append(k)\n    print(*ans)", "import math as m\nfrom functools import reduce\n\ndef factors(n):\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    if n == 4:\n        return [1, 2, 4]\n    l = []\n    u = []\n    l.append(1)\n    u.append(n)\n    if n % 2 == 0:\n        l.append(2)\n        u.append(n // 2)\n    for i in range(3, int(n ** 0.5) + 1):\n        if n % i == 0:\n            l.append(i)\n            u.append(n // i)\n    u = u[::-1]\n    if l[-1] == u[0]:\n        u = u[1:]\n    return l + u\n\ndef isSorted(arr):\n    i = arr[0]\n    for j in arr[1:]:\n        if i > j:\n            return False\n        i = j\n    return True\ni = input()\ninp = []\nfor a in range(0, int(i)):\n    input()\n    inp.append([int(x) for x in input().split()])\n\ndef logic(arr):\n    n = len(arr)\n    if n == 1:\n        return '1'\n    freqs = [0] * 31\n    for i in arr:\n        b = bin(i)[2:]\n        for i in range(len(b)):\n            if b[-i - 1] == '1':\n                freqs[i] += 1\n    g = m.gcd(freqs[0], freqs[1])\n    for x in freqs[2:]:\n        g = m.gcd(g, x)\n    if g == 0:\n        return ' '.join([str(j) for j in range(1, n + 1)])\n    else:\n        return ' '.join([str(j) for j in factors(g)])\nfor arr in inp:\n    print(logic(arr))", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef printAllDivisors(arr):\n    N = len(arr)\n    g = arr[0]\n    divisors = dict()\n    for i in range(1, N):\n        g = gcd(arr[i], g)\n    for i in range(1, g + 1):\n        if i * i > g:\n            break\n        if g % i == 0:\n            divisors[i] = 1\n            if g // i != i:\n                divisors[g // i] = 1\n    ans = ''\n    for it in sorted(divisors):\n        ans += str(it) + ' '\n    ans.strip()\n    print(ans)\n\ndef b(a):\n    y = str(bin(int(a)))[2:]\n    l = len(y)\n    return '0' * (30 - l) + y\nt = int(input())\nfor iasdfc in range(t):\n    n = int(input())\n    ar = list(map(b, input().split()))\n    ar2 = []\n    for ind in range(30):\n        count = 0\n        for bind in ar:\n            if bind[ind] == '1':\n                count += 1\n        if count:\n            ar2.append(count)\n    if ar2 == []:\n        print(' '.join(map(str, range(1, n + 1))))\n    else:\n        printAllDivisors(ar2)", "from functools import reduce\nfrom math import gcd\ninput = __import__('sys').stdin.readline\n\ndef solve():\n    n = int(input())\n    count = [0] * 32\n    for x in map(int, input().split()):\n        for i in range(32):\n            count[i] += x >> i & 1\n    d = reduce(gcd, count)\n    for i in range(1, n + 1):\n        if d % i == 0:\n            print(i, end=' ')\n    print()\nfor _ in range(int(input())):\n    solve()", "import sys\nimport collections\nfrom math import ceil, gcd, sqrt, log\nimport bisect\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    net = [0] * 31\n    for i in range(31):\n        for e in A:\n            if e & 1 << i:\n                net[i] += 1\n    ans = []\n    for k in range(1, n + 1):\n        ok = True\n        for i in range(31):\n            if net[i] % k != 0:\n                ok = False\n                break\n        if ok:\n            ans.append(k)\n    print(*ans)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "from math import gcd\n\ndef b(n, g):\n    s = bin(n).replace('0b', '')\n    while len(s) < g:\n        s = '0' + s\n    return s\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        jjk = 0\n        if max(a) == min(a) and min(a) == 0:\n            for i in range(n):\n                print(i + 1, end=' ')\n            print()\n            continue\n        for i in range(n):\n            jjk = max(len(bin(a[i])) - 2, jjk)\n        j = []\n        for i in range(n):\n            j += [b(a[i], jjk)]\n        k = {}\n        for i in range(n):\n            for jk in range(jjk):\n                if j[i][jk] == '1':\n                    if jk in k:\n                        k[jk] += 1\n                    else:\n                        k[jk] = 1\n        jh = 0\n        for i in k:\n            jh = gcd(jh, k[i])\n        l = []\n        for i in range(1, jh + 1):\n            if jh % i == 0:\n                print(i, end=' ')\n        print()\nmain()", "import sys\nimport collections\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef solve(nums):\n    d = collections.defaultdict(int)\n    for i in nums:\n        for j in range(32):\n            if i & 1 << j:\n                d[j] += 1\n    cnt = []\n    for i in d:\n        cnt.append(d[i])\n        if len(cnt) == 2:\n            cnt = [find_gcd(cnt[0], cnt[1])]\n    gcd = cnt[0]\n    ans = set()\n    t = 1\n    while 1:\n        if gcd % t == 0:\n            ans.add(t)\n            ans.add(gcd // t)\n        t += 1\n        if t * t > gcd:\n            break\n    return sorted(list(ans))\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    nums = get_ints()\n    if nums.count(0) == len(nums):\n        print(*list(range(1, 1 + len(nums))))\n    else:\n        print(*solve(nums))", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef factors(n):\n    import math\n    arr = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            arr.append(i)\n            if i != n // i:\n                arr.append(n // i)\n    return sorted(arr)\n\ndef fun():\n    for _ in range(int(input())):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        if arr == [0] * n:\n            for i in range(n):\n                print(i + 1, end=' ')\n            print()\n            continue\n        size = len(bin(max(arr))[2:])\n        bits = [0 for i in range(size)]\n        for each in arr:\n            idx = size - 1\n            while each:\n                if each & 1 == 1:\n                    bits[idx] += 1\n                each = each >> 1\n                idx -= 1\n        hcf = None\n        for i in bits:\n            if i != 0:\n                hcf = i\n                break\n        for i in bits:\n            if i == 0:\n                continue\n            hcf = gcd(hcf, i)\n        x = factors(hcf)\n        for each in x:\n            print(each, end=' ')\n        print()\nfun()", "import math\n\ndef array_elimination(n, a):\n    counts = {i: 0 for i in range(32)}\n    for ai in a:\n        bin_ai = '{:032b}'.format(ai)\n        for i in range(32):\n            if bin_ai[i] == '1':\n                counts[i] += 1\n    groups = []\n    for i in range(32):\n        if counts[i] > 0:\n            groups += [counts[i]]\n    if len(groups) == 0:\n        print(' '.join(map(str, range(1, n + 1))))\n        return\n    counts_by_divisor = {}\n    for group_size in groups:\n        for divisor in get_divisors(group_size):\n            if divisor in counts_by_divisor:\n                counts_by_divisor[divisor] += 1\n            else:\n                counts_by_divisor[divisor] = 1\n    k = []\n    for divisor in counts_by_divisor:\n        if counts_by_divisor[divisor] == len(groups):\n            k += [divisor]\n    print(' '.join(map(str, sorted(k))))\n\ndef get_divisors(value):\n    m = int(math.ceil(math.sqrt(value)))\n    for d in range(1, m + 1):\n        if value % d == 0:\n            e = value // d\n            if d < e:\n                yield d\n                yield e\n            elif d == e:\n                yield d\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    array_elimination(n, a)", "import sys\ninput = sys.stdin.readline\n\ndef extend_euc(a, b):\n    if b == 0:\n        return (a, 1, 0)\n    (gcd, x, y) = extend_euc(b, a % b)\n    return (gcd, y, x - a // b * y)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    bits = [0] * len(list(format(sum(a), 'b')))\n    for e in a:\n        t = list(format(e, 'b'))\n        bl = t[::-1]\n        for i in range(len(bl)):\n            if bl[i] == '1':\n                bits[i] += 1\n    gcd = min(bits)\n    for e in bits:\n        if e:\n            gcd = extend_euc(gcd, e)[0]\n    if gcd == 0:\n        for i in range(1, n + 1):\n            print(i, end=' ')\n    else:\n        for i in range(1, gcd + 1):\n            if gcd % i == 0:\n                print(i, end=' ')\n    print()", "import math\nfor _ in range(int(input().strip())):\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split()))\n    binarr = [None] * n\n    counts = [0] * 64\n    for i in range(n):\n        temp = bin(arr[i])[2:]\n        binarr[i] = temp[::-1]\n        for j in range(len(binarr[i])):\n            if binarr[i][j] == '1':\n                counts[j] += 1\n    g = 0\n    for i in counts:\n        g = math.gcd(g, i)\n    for i in range(1, n + 1):\n        if g % i == 0:\n            print(i, end=' ')\n    print()", "import sys\ninput = sys.stdin.readline\nfor _ in [0] * int(input()):\n    n = int(input())\n    y = [0] * 33\n    for i in map(int, input().split()):\n        for (j, k) in enumerate(bin(i)[::-1]):\n            if k == '1':\n                y[j] = y[j] + 1\n    for i in range(1, n + 1):\n        if all((x % i == 0 for x in y)):\n            print(i, end=' ')\n    print()", "import math\nfrom collections import deque, defaultdict\nfrom math import sqrt, ceil, factorial, floor, inf, gcd, log\nimport bisect\nimport sys\nimport random\nimport heapq\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        a = get_array()\n        cnt = [0] * 31\n        for i in range(31):\n            for j in range(n):\n                if a[j] & 1 << i:\n                    cnt[i] += 1\n        cum_gcd = max(cnt)\n        ok = False\n        for i in range(30):\n            if cnt[i] > 0:\n                ok = True\n            if ok:\n                cum_gcd = gcd(cum_gcd, cnt[i])\n        if cum_gcd == 0:\n            print(*list(range(1, n + 1)))\n            continue\n        ans = []\n        for i in range(1, int(sqrt(cum_gcd)) + 1):\n            if cum_gcd % i == 0:\n                ans.append(i)\n                if i * i != cum_gcd:\n                    ans.append(cum_gcd // i)\n        ans.sort()\n        print(*ans)\nmain()", "def extend_euc(a, b):\n    if b == 0:\n        return (a, 1, 0)\n    (gcd, x, y) = extend_euc(b, a % b)\n    return (gcd, y, x - a // b * y)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    bits = [0] * len(list(format(sum(a), 'b')))\n    for e in a:\n        t = list(format(e, 'b'))\n        bl = t[::-1]\n        for i in range(len(bl)):\n            if bl[i] == '1':\n                bits[i] += 1\n    gcd = min(bits)\n    for e in bits:\n        if e:\n            gcd = extend_euc(gcd, e)[0]\n    print(*[i for i in range(1, n + 1)]) if gcd == 0 else print(*[i for i in range(1, gcd + 1) if gcd % i == 0])", "from math import gcd\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = 0\n    for b in range(0, 30):\n        c = 0\n        for x in a:\n            if x & 1 << b:\n                c = c + 1\n        g = gcd(g, c)\n    for i in range(1, n + 1):\n        if g % i == 0:\n            print(i, end=' ')\n    print()", "import math\nn = int(input())\nfor e in range(n):\n    t = int(input())\n    l = list(map(int, input().split()))\n    mx = max(l)\n    if mx == 0:\n        ans = []\n        for i in range(1, t + 1):\n            ans.append(i)\n        print(*ans)\n    else:\n        q = int(math.log(mx, 2)) + 1\n        a = []\n        for i in range(q):\n            c = 0\n            for j in l:\n                if j & 1 << i != 0:\n                    c += 1\n            a.append(c)\n        ans = []\n        for i in range(1, max(a) + 1):\n            chk = 0\n            for j in a:\n                if j % i == 0:\n                    continue\n                else:\n                    chk = 1\n                    break\n            if chk == 0:\n                ans.append(i)\n        print(*ans)", "import sys\ninput = sys.stdin.readline\nfor _ in [0] * int(input()):\n    n = int(input())\n    y = [0] * 33\n    for i in map(int, input().split()):\n        for (j, k) in enumerate(bin(i)[::-1]):\n            if k == '1':\n                y[j] = y[j] + 1\n    for i in range(1, n + 1):\n        if all((x % i == 0 for x in y)):\n            print(i, end=' ')\n    print()", "import sys\nfrom functools import reduce\nimport math\ninput = sys.stdin.readline\n\ndef get_integers():\n    return map(int, input().strip().split())\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    arr = [int(x) for x in input().strip().split()]\n    cnt = [0] * 30\n    for element in arr:\n        for i in range(30):\n            if element & 1 << i:\n                cnt[i] += 1\n    if sum(cnt) == 0:\n        ans = list(range(1, n + 1))\n        print(*ans)\n        continue\n    cnt_set = set(cnt)\n    gcd = reduce(math.gcd, cnt_set)\n    ans = []\n    for i in range(1, int(math.sqrt(gcd)) + 1):\n        if gcd % i == 0:\n            ans.append(i)\n            if i != gcd // i:\n                ans.append(gcd // i)\n    print(*sorted(ans))", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split(' ')]\n    cou = [0] * 30\n    res = []\n    for bit in range(30):\n        for x in a:\n            if x & 1 << bit:\n                cou[bit] += 1\n    for k in range(1, n + 1):\n        ok = True\n        for numbit in cou:\n            if numbit % k != 0:\n                ok = False\n                break\n        if ok:\n            res.append(k)\n    print(*res)", "def gcd(a, b):\n    if b > a:\n        (a, b) = (b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    cnt = [0 for i in range(30)]\n    for i in a:\n        for j in range(31):\n            if i & 1 << j:\n                cnt[j] += 1\n    ans = 0\n    for i in cnt:\n        ans = gcd(ans, i)\n    i = 1\n    if ans == 0:\n        for i in range(i, n + 1):\n            print(i, end=' ')\n        print()\n        continue\n    for i in range(1, ans + 1):\n        if ans % i == 0:\n            print(i, end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split(' ')]\n    cou = [0] * 30\n    res = []\n    for bit in range(30):\n        for x in a:\n            if x & 1 << bit:\n                cou[bit] += 1\n    for k in range(1, n + 1):\n        ok = True\n        for numbit in cou:\n            if numbit % k != 0:\n                ok = False\n                break\n        if ok:\n            res.append(k)\n    print(*res)", "import math\nfor tc in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    bits = 30\n    cnts = [0] * 30\n    for b in range(bits):\n        for num in a:\n            if num & 1 << b > 0:\n                cnts[b] += 1\n    g = 0\n    for c in cnts:\n        g = math.gcd(g, c)\n    if g == 0:\n        print(*range(1, n + 1))\n    else:\n        ans = []\n        for x in range(1, int(math.sqrt(g) + 1)):\n            b = g // x\n            if g % x == 0:\n                ans.append(x)\n                if x != b:\n                    ans.append(b)\n        print(*sorted(ans))", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split(' ')]\n    cou = [0] * 30\n    res = []\n    for bit in range(30):\n        for x in a:\n            if x & 1 << bit:\n                cou[bit] += 1\n    for k in range(1, n + 1):\n        ok = True\n        for numbit in cou:\n            if numbit % k != 0:\n                ok = False\n                break\n        if ok:\n            res.append(k)\n    print(*res)", "from math import *\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = [int(_) for _ in input().split()]\n    if max(nums) == 0:\n        print(' '.join([str(i) for i in range(1, n + 1)]))\n        continue\n    cnts = [0] * 30\n    for x in nums:\n        for i in range(30):\n            if x & 1 << i:\n                cnts[i] += 1\n    cnts = [c for c in cnts if c > 0]\n    m = cnts[0]\n    for c in cnts:\n        m = gcd(m, c)\n    ans = [1]\n    if m > 1:\n        ans.append(m)\n        for i in range(2, min(int(sqrt(m)) + 1, m)):\n            if m % i == 0:\n                ans.append(i)\n                ans.append(m // i)\n    ans = sorted(set(ans))\n    print(' '.join([str(i) for i in ans]))", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split(' ')]\n    cou = [0] * 30\n    res = []\n    for bit in range(30):\n        for x in a:\n            if x & 1 << bit:\n                cou[bit] += 1\n    for k in range(1, n + 1):\n        ok = True\n        for numbit in cou:\n            if numbit % k != 0:\n                ok = False\n                break\n        if ok:\n            res.append(k)\n    print(*res)"]