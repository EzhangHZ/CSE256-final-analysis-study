["import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef st():\n    return input().rstrip('\\n')\n\ndef lis():\n    return list(map(int, input().split()))\n\ndef ma():\n    return map(int, input().split())\nt = inp()\nwhile t:\n    t -= 1\n    (n, m) = ma()\n    p = 10 ** 9 + 7\n    x = 0\n    for i in range(m):\n        (l, r, x1) = ma()\n        x = x | x1\n    x = x * 2 ** (n - 1)\n    x %= p\n    print(x)", "import sys\ninput = sys.stdin.readline\nmod = 10 ** 9 + 7\nfor _ in ' ' * int(input()):\n    (n, m) = map(int, input().split())\n    res = 0\n    for _ in ' ' * m:\n        (l, r, x) = map(int, input().split())\n        res |= x\n    print(res * pow(2, n - 1, mod) % mod)", "from sys import stdin\nimport math\nfrom collections import deque\nfrom heapq import heapify, heappop, heappush\nfrom bisect import bisect_left, bisect_right\ninput = stdin.readline\n(power, mod) = ({}, 1000000007)\n\ndef getpower(k):\n    if k == 0:\n        return 1\n    if k == 1:\n        return 2\n    if k in power:\n        return power[k]\n    power[k] = getpower(k // 2) * getpower(k - k // 2) % mod\n    return power[k]\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    (arr, mod, easy) = ([], 1000000007, [0] * 30)\n    powerval = getpower(n - 1)\n    easy = 0\n    for _ in range(m):\n        (l, r, x) = map(int, input().split())\n        easy = easy | x\n    (value, total) = (1, 0)\n    for i in range(30):\n        if easy % 2 == 0:\n            value = value * 2 % mod\n            easy = easy // 2\n            continue\n        total += value\n        total = total % mod\n        value = value * 2\n        value = value % mod\n        easy = easy // 2\n    print(total * powerval % mod)", "import sys\nmod = 10 ** 9 + 7\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    orx = 0\n    for j in range(m):\n        (l, r, orc) = map(int, input().split())\n        orx = orx | orc\n    print(orx * pow(2, n - 1, mod) % mod)", "import sys\nimport bisect\nimport math\nfrom collections import deque\ninput = lambda : sys.stdin.readline().strip()\nmod = 10 ** 9 + 7\n\ndef solve():\n    (n, k) = map(int, input().split())\n    bits = 0\n    for _t in range(k):\n        (l, r, x) = map(int, input().split())\n        bits |= x\n    return bits * pow(2, n - 1, mod) % mod\nt = 1\nt = int(input())\nfor _ in range(t):\n    print(solve())", "import sys\ninput = sys.stdin.readline\n\ndef solve(n, m, Q):\n    mo = 10 ** 9 + 7\n    curr = 0\n    for (l, r, x) in Q:\n        curr |= x\n    print(curr * pow(2, n - 1, mo) % mo)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    Q = [tuple(map(int, input().split())) for _ in range(m)]\n    solve(n, m, Q)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    xor = 0\n    mod = 1000000007\n\n    def fun(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 2\n        t = fun(n // 2)\n        if n % 2 == 0:\n            return t * t % mod\n        return t * (t * 2) % mod % mod\n    for i in range(m):\n        l = list(map(int, input().split()))\n        xor |= l[2]\n    print(fun(n - 1) * xor % mod)", "p = int(input())\nfor _ in range(p):\n    n = input().split(' ')\n    (n, k) = (int(n[0]), int(n[1]))\n    m = 0\n    mod = 10 ** 9 + 7\n    for i in range(k):\n        x = input().split()\n        m = m | int(x[2])\n    n = n - 1\n    ans = 1\n    res = 2\n    while n > 0:\n        if n & 1:\n            ans = ans * res % mod\n        res = res * res % mod\n        n = n >> 1\n    print(m * ans % mod)", "mod = 10 ** 9 + 7\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ax = power(a, int(b / 2))\n    ax = ax * ax % mod\n    if b % 2 == 1:\n        ax = ax * a % mod\n    return ax\np = int(input())\nfor _ in range(p):\n    n = input().split(' ')\n    (n, k) = (int(n[0]), int(n[1]))\n    m = 0\n    for i in range(k):\n        x = input().split()\n        m = m | int(x[2])\n    ans = power(2, n - 1)\n    print(m * ans % mod)", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000000 + 7\nmod2 = 998244353\nfor _ in range(I()):\n    (n, m) = M()\n    s = 0\n    for i in range(m):\n        (l, r, x) = M()\n        s |= x\n    print(s * (1 << n - 1) % mod1)", "mod = 1000000007\n\ndef f():\n    (n, m) = map(int, input().split())\n    s = 0\n    for i in range(m):\n        (l, r, x) = map(int, input().split())\n        s |= x\n    return int(s * pow(2, n - 1, mod)) % mod\nfor _ in range(int(input())):\n    print(f())", "import itertools\nimport functools\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, m) = map(int, input().split())\n        s = 0\n        for _ in range(m):\n            (l, r, x) = map(int, input().split())\n            s = s | x\n        print(2 ** (n - 1) * s % 1000000007)\nmain()", "MOD = 1000000007\n\ndef solve():\n    (n, m) = [int(x) for x in input().split()]\n    k = 0\n    for i in range(m):\n        (a, b, c) = [int(x) for x in input().split()]\n        k = k | c\n    print(k * pow(2, n - 1, MOD) % MOD)\nfor i in range(int(input())):\n    solve()", "from collections import Counter, deque\nfrom sys import stdout\nimport time\nfrom math import factorial, log\n\ndef main():\n    (n, m) = [int(i) for i in input().split()]\n    global_or = 0\n    for i in range(m):\n        (_, __, _and) = [int(i) for i in input().split()]\n        global_or |= _and\n    print(global_or * pow(2, n - 1, mod) % mod)\nmod = 10 ** 9 + 7\nfor t in range(int(input())):\n    main()", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    xo = 0\n    for i in range(m):\n        (l, r, x) = map(int, input().split())\n        xo = xo | x\n    ans = pow(2, n - 1, 10 ** 9 + 7)\n    ans *= xo\n    print(ans % (10 ** 9 + 7))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    bits = 0\n    mod = 10 ** 9 + 7\n    (a, b, c) = map(int, input().split())\n    ans = c\n    for i in range(m - 1):\n        (d, e, f) = map(int, input().split())\n        ans |= f\n    print(ans % mod * (pow(2, n - 1) % mod) % mod)", "for _ in range(int(input())):\n    (y, [n, m]) = (0, map(int, input().split()))\n    for i in range(m):\n        y |= [int(x) for x in input().split()][2]\n    print(2 ** (n - 1) * y % (10 ** 9 + 7))", "(MOD, T) = (10 ** 9 + 7, int(input()))\nfor CASE in range(T):\n    (n, m) = map(int, input().split())\n    a = 0\n    for i in range(m):\n        (l, r, x) = map(int, input().split())\n        a = a | x\n    print(a * pow(2, n - 1, MOD) % MOD)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    x = 0\n    for j in range(m):\n        (l, r, o) = map(int, input().split())\n        x |= o\n    mod = 1000000007\n    c = pow(2, n - 1, mod) % mod\n    c = c % mod * x % mod % mod\n    print(c)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    y = 0\n    for i in range(m):\n        (l, r, x) = map(int, input().split())\n        y = y | x\n    print(2 ** (n - 1) * y % (10 ** 9 + 7))", "def power_of_two(base, n):\n    mod = 1000000007\n    if n == 1:\n        return 2\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        val = power_of_two(base, n / 2)\n        return val % mod * (val % mod) % mod\n    else:\n        val = 2 * (power_of_two(base, n - 1) % mod) % mod\n        return val % mod\nt = int(input())\nfor i in range(0, t):\n    mod = 1000000007\n    l1 = [int(x) for x in input().split()]\n    n = l1[0]\n    m = l1[1]\n    or_val = 0\n    for j in range(0, m):\n        l2 = [int(x) for x in input().split()]\n        or_val = or_val | l2[2]\n    powerval = power_of_two(2, n - 1)\n    ans = powerval % mod * (or_val % mod) % mod\n    print(ans)", "t = int(input())\nmod = 1000000007\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    or_of_all = 0\n    for i in range(m):\n        (l, r, x) = map(int, input().split())\n        or_of_all |= x\n    ans = or_of_all * 2 ** (n - 1)\n    print(ans % mod)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    bits = 0\n    mod = 10 ** 9 + 7\n    (a, b, c) = map(int, input().split())\n    ans = c\n    for i in range(m - 1):\n        (d, e, f) = map(int, input().split())\n        ans |= f\n    print(ans % mod * (pow(2, n - 1) % mod) % mod)", "MOD = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = 0\n    for i in range(m):\n        (l, r, x) = map(int, input().split())\n        a = a | x\n    print(a * pow(2, n - 1, MOD) % MOD)", "M = 10 ** 9 + 7\n\ndef xorSum(arr, n):\n    bits = 0\n    for i in range(len(arr)):\n        bits |= arr[i]\n    ans = bits * pow(2, n - 1)\n    ans %= M\n    return ans\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = []\n    for i in range(m):\n        (l, r, val) = map(int, input().split())\n        arr.append(val)\n    print(xorSum(arr, n))", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    z = 0\n    (n, k) = map(int, input().split())\n    for i in range(k):\n        (l, r, p) = map(int, input().split())\n        z |= p\n    print(z * pow(2, n - 1, mod) % mod)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split(' '))\n    here = 0\n    mod = int(1000000000.0 + 7)\n    for y in range(m):\n        (l, r, x) = map(int, input().split(' '))\n        here |= x\n    print(pow(2, n - 1, mod) * here % mod)", "t = int(input())\nMOD = int(1000000000.0 + 7)\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    acc = 0\n    for i in range(m):\n        (_, _, x) = map(int, input().split())\n        acc |= x\n    print(acc * pow(2, n - 1, MOD) % MOD)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    z = 0\n    (n, k) = map(int, input().split())\n    for i in range(k):\n        (l, r, p) = map(int, input().split())\n        z |= p\n    print(z * pow(2, n - 1, mod) % mod)", "MOD = int(1000000000.0 + 7)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = 0\n    for i in range(m):\n        (l, r, k) = map(int, input().split())\n        s |= k\n    print(s * pow(2, n - 1, MOD) % MOD)", "I = lambda : [*map(int, input().split())]\nM = 10 ** 9 + 7\nfor _ in [0] * I()[0]:\n    (n, m) = I()\n    o = 0\n    for i in range(m):\n        o |= I()[2]\n    print(o * 2 ** (n - 1) % M)", "I = lambda : [*map(int, input().split())]\nM = 10 ** 9 + 7\nfor _ in [0] * I()[0]:\n    (n, m) = I()\n    o = 0\n    for i in range(m):\n        o |= I()[2]\n    print(o * 2 ** (n - 1) % M)", "I = lambda : [*map(int, input().split())]\nM = 10 ** 9 + 7\nfor _ in [0] * I()[0]:\n    (n, m) = I()\n    o = 0\n    for i in range(m):\n        o |= I()[2]\n    print(o * 2 ** (n - 1) % M)", "I = lambda : [*map(int, input().split())]\nM = 10 ** 9 + 7\nfor _ in [0] * I()[0]:\n    (n, m) = I()\n    o = 0\n    for i in range(m):\n        o |= I()[2]\n    print(o * 2 ** (n - 1) % M)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ans = 0\n    for i in range(k):\n        (a, b, c) = map(int, input().split())\n        ans = ans | c\n    print(pow(2, n - 1, mod) * (ans % mod) % mod)", "import math\nfrom collections import defaultdict\nmod = 10 ** 9 + 7\n\ndef bexp(a, b):\n    res = 1\n    while b:\n        if b % 2:\n            res = res * a % mod\n            b = b - 1\n        else:\n            a = a * a % mod\n            b = b // 2\n    return res\nfor cases in range(int(input())):\n    (n, m) = map(int, input().split())\n    xor = 0\n    for i in range(0, m):\n        (l, r, x) = map(int, input().split())\n        xor = xor | x\n    ans = bexp(2, n - 1)\n    ans = ans * xor % mod\n    print(ans)", "t = eval(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    result = 0\n    for j in range(m):\n        (l, r, x) = map(int, input().split())\n        result = result | x\n    print(result * 2 ** (n - 1) % (10 ** 9 + 7))", "I = lambda : [*map(int, input().split())]\nM = 10 ** 9 + 7\nfor _ in [0] * I()[0]:\n    (n, m) = I()\n    o = 0\n    for i in range(m):\n        o |= I()[2]\n    print(o * 2 ** (n - 1) % M)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    X = 0\n    for j in range(m):\n        (l, r, x) = map(int, input().split())\n        X |= x\n    ans = X * 2 ** (n - 1)\n    print(ans % (10 ** 9 + 7))", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    a = []\n    z = 0\n    (n, k) = map(int, input().split())\n    for i in range(k):\n        (l, r, p) = map(int, input().split())\n        z |= p\n    ans = z * pow(2, n - 1, mod) % mod\n    print(ans)", "t = int(input())\nrajawat = 10 ** 9 + 7\nfor test in range(t):\n    (n, m) = map(int, input().split())\n    temp = 0\n    for k in range(m):\n        lks = list(map(int, input().split()))\n        temp |= lks[-1]\n    print(temp * 2 ** (n - 1) % rajawat)", "I = lambda : [*map(int, input().split())]\nM = 10 ** 9 + 7\nfor _ in [0] * I()[0]:\n    (n, m) = I()\n    o = 0\n    for i in range(m):\n        o |= I()[2]\n    print(o * 2 ** (n - 1) % M)", "mod = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    (n, m) = [int(i) for i in input().split(' ')]\n    ans = 0\n    for i in range(m):\n        (l, r, x) = [int(i) for i in input().split(' ')]\n        ans |= x\n    print(pow(2, n - 1, mod) * ans % mod)", "I = lambda : [*map(int, input().split())]\nM = 10 ** 9 + 7\nfor _ in [0] * I()[0]:\n    (n, m) = I()\n    o = 0\n    for i in range(m):\n        o |= I()[2]\n    print(o * 2 ** (n - 1) % M)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    oor = -1\n    for i in range(m):\n        (l, r, x) = map(int, input().split())\n        if i == 0:\n            oor = x\n        else:\n            oor = oor | x\n    print(2 ** (n - 1) * oor % (10 ** 9 + 7))", "I = lambda : [*map(int, input().split())]\nM = 10 ** 9 + 7\nfor _ in [0] * I()[0]:\n    (n, m) = I()\n    o = 0\n    for i in range(m):\n        o |= I()[2]\n    print(o * 2 ** (n - 1) % M)", "import math\nt = int(input())\nfor alp in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    mx = 31\n    v = []\n    a = 0\n    for i in range(m):\n        (l, r, x) = [int(x) for x in input().split()]\n        a = a | x\n    mod = int(1000000000.0 + 7)\n    temp = pow(2, n - 1, mod) * a % mod\n    print(int(temp))", "I = lambda : [*map(int, input().split())]\nM = 10 ** 9 + 7\nfor _ in [0] * I()[0]:\n    (n, m) = I()\n    o = 0\n    for i in range(m):\n        o |= I()[2]\n    print(o * 2 ** (n - 1) % M)", "I = lambda : [*map(int, input().split())]\nM = 10 ** 9 + 7\nfor _ in [0] * I()[0]:\n    (n, m) = I()\n    o = 0\n    for i in range(m):\n        o |= I()[2]\n    print(o * 2 ** (n - 1) % M)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    xor = 0\n    for i in range(m):\n        A = list(map(int, input().split()))\n        xor = xor | A[2]\n    ans = 2 ** (n - 1) * xor\n    print(ans % 1000000007)", "def input_int():\n    return int(input())\n\ndef input_multiple():\n    return map(int, input().split())\nt = input_int()\nwhile t > 0:\n    (n, m) = input_multiple()\n    or_value = 0\n    for i in range(m):\n        (l, r, x) = input_multiple()\n        or_value |= x\n    print(or_value * 2 ** (n - 1) % 1000000007)\n    t -= 1", "t = int(input())\nmod = 1000000007\n\ndef power(n):\n    if n == 1:\n        return 2\n    if n == 0:\n        return 1\n    ans = power(n // 2)\n    if n % 2 != 0:\n        return ans * (ans * 2) % mod % mod\n    else:\n        return ans * ans % mod\nwhile t > 0:\n    (n, m) = list(map(int, input().split()))\n    total_or = 0\n    for i in range(m):\n        tmp = list(map(int, input().split()))\n        total_or |= tmp[2]\n    ans = total_or * power(n - 1) % mod\n    print(ans)\n    t = t - 1", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    k = 0\n    for _ in range(m):\n        (l, r, x) = map(int, input().split())\n        k |= x\n    print(k % mod * pow(2, n - 1, mod) % mod)", "from itertools import accumulate\nimport functools\n\ndef solve():\n    (n, m) = list(map(int, input().split()))\n    X = []\n    for _ in range(m):\n        (l, r, x) = list(map(int, input().split()))\n        X.append(x)\n    or_sum = functools.reduce(lambda x, y: x | y, X)\n    return or_sum * pow(2, n - 1) % (10 ** 9 + 7)\nfor _ in range(int(input())):\n    print(solve())", "for _ in range(int(input())):\n    (y, [n, m]) = (0, map(int, input().split()))\n    for i in range(m):\n        y |= [int(x) for x in input().split()][2]\n    print(2 ** (n - 1) * y % (10 ** 9 + 7))", "for t in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    (l, r, xx) = list(map(int, input().split()))\n    for i in range(m - 1):\n        (l, r, x) = list(map(int, input().split()))\n        xx = xx | x\n    print(2 ** (n - 1) * xx % 1000000007)", "mod = 1000000007\n\ndef inp():\n    return list(map(int, input().split()))\n_t = int(input())\nfor _ in range(_t):\n    (n, m) = inp()\n    bit = 0\n    for i in range(m):\n        (l, r, x) = inp()\n        bit |= x\n    ans = bit * pow(2, n - 1, mod=mod)\n    print(ans % mod)", "mod = 10 ** 9 + 7\nfor i in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    fullOr = 0\n    for i in range(m):\n        (_, _, x) = list(map(int, input().split()))\n        fullOr |= x\n    print(fullOr * 2 ** (n - 1) % mod)", "def power(x, MOD):\n    ans = 1\n    for i in range(x):\n        ans = ans * 2 % MOD\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    ans = 0\n    MOD = pow(10, 9) + 7\n    totalOr = 0\n    for j in range(k):\n        (a, b, c) = [int(x) for x in input().split()]\n        totalOr = c | totalOr\n    temp = totalOr * power(n - 1, MOD) % MOD\n    ans = (ans + temp) % MOD\n    print(ans)", "for iiii in range(int(input())):\n    (n, m) = map(int, input().split())\n    x = 0\n    for i in range(m):\n        (a, b, c) = map(int, input().split())\n        x = x | c\n    per = 1000000000 + 7\n    cou = x % per\n    for i in range(n - 1):\n        cou = cou % per * 2 % per\n    print(cou)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split(' '))\n    l = [0 for theta in range(m)]\n    r = [0 for delta in range(m)]\n    all_and = 0\n    for j in range(m):\n        (l[j], r[j], x) = map(int, input().split(' '))\n        all_and = all_and | x\n    p = 10 ** 9 + 7\n    all_and = all_and % p\n    temp = pow(2, n - 1, p)\n    ans = temp * all_and % p\n    print(ans)", "import sys\nfrom math import sqrt, gcd\nfrom collections import deque\nsys.setrecursionlimit(10 ** 8)\nI = lambda : int(input())\nS = lambda : input().strip()\nM = lambda : map(int, input().strip().split())\nL = lambda : list(map(int, input().strip().split()))\nmod = 1000000007\nfor _ in range(I()):\n    (n, m) = M()\n    ans = 0\n    for i in range(m):\n        (l, r, v) = M()\n        ans |= v\n    print(2 ** (n - 1) * ans % mod)", "t = int(input())\nwhile t:\n    t -= 1\n    b = list(map(int, input().split()))\n    x = 0\n    for i in range(b[1]):\n        a = list(map(int, input().split()))\n        x = x | a[2]\n    x = x % 1000000007\n    y = 1\n    for i in range(b[0] - 1):\n        y = y * 2 % 1000000007\n    print(x * y % 1000000007)", "t = int(input())\nwhile t:\n    t -= 1\n    b = list(map(int, input().split()))\n    x = 0\n    for i in range(b[1]):\n        a = list(map(int, input().split()))\n        x = x | a[2]\n    x = x % 1000000007\n    y = 2 - 1\n    for i in range(b[0] - 1):\n        y = y * 2 % 1000000007\n    print(x * y % 1000000007)", "mod = 1000000007\nfor _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    y = 0\n    for i in range(m):\n        (l, r, x) = list(map(int, input().split()))\n        y |= x\n    t = 0\n    for i in range(32):\n        if y & 1 << i:\n            t += (1 << i) * pow(2, n - 1, mod)\n    print(t % mod)", "t = int(input())\nwhile t > 0:\n    (n, m) = [int(x) for x in input().split()]\n    ans = 0\n    for i in range(m):\n        ip = [int(x) for x in input().split()]\n        l = ip[0]\n        r = ip[1]\n        x = ip[2]\n        ans = ans | x\n    for i in range(n - 1):\n        ans = ans % 1000000007 * 2 % 1000000007\n    print(ans % 1000000007)\n    t -= 1", "from collections import *\n\ndef xorSum(arr, n):\n    bits = 0\n    for i in range(n):\n        bits |= arr[i]\n    ans = bits * pow(2, n - 1, mod) % mod % mod\n    return ans\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = 0\n    mod = 1000000007\n    arr = [0 for i in range(n)]\n    for i in range(m):\n        (l, r, x) = map(int, input().split())\n        arr[r - 1] = max(x, arr[r - 1])\n    print(xorSum(arr, len(arr)) % mod)", "mod = 10 ** 9 + 7\n\ndef mpow(a, b):\n    ans = 1\n    while b:\n        if b & 1:\n            ans = ans * a % mod\n        a = a * a % mod\n        b >>= 1\n    return ans\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(m):\n        a.append([int(x) for x in input().split()])\n    sm = 0\n    for i in range(m):\n        sm |= a[i][2]\n    ans = mpow(2, n - 1)\n    ans *= sm\n    ans %= mod\n    print(ans)", "def hehe(n):\n    res = 1\n    for i in range(n - 1):\n        res = res * 2 % 1000000007\n    return res\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    ans = 0\n    for i in range(m):\n        temp = list(map(int, input().split()))\n        l.append(temp)\n    for i in range(m):\n        ans = ans | l[i][2]\n    print(hehe(n) * ans % 1000000007)", "def hehe(n):\n    res = 1\n    for i in range(n - 1):\n        res = res * 2 % 1000000007\n    return res\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    ans = 0\n    for i in range(m):\n        temp = list(map(int, input().split()))\n        l.append(temp)\n    for i in range(m):\n        ans = ans | l[i][2]\n    print(hehe(n) * ans % 1000000007)"]