["def solve(n, a):\n    max_value = 1000000\n    res = max_value\n    inds = {}\n    for (i, x) in enumerate(a):\n        if x in inds:\n            res = min(res, i - inds[x])\n        inds[x] = i\n    result = n - res if res < max_value else -1\n    return result\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    result = solve(n, a)\n    print(result)", "import collections\n\ndef problem2(n, arr):\n    hashmap = collections.defaultdict(int)\n    ans = -1\n    for (i, v) in enumerate(arr):\n        if v in hashmap:\n            ans = max(ans, n - (i - hashmap[v]))\n        hashmap[v] = i\n    print(ans)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(num) for num in input().split(' ')]\n    problem2(n, arr)", "def solve():\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    last = [None] * (max(A) + 1)\n    res = -1\n    for (i, x) in enumerate(A):\n        if last[x] is not None:\n            res = max(res, last[x] + n - i)\n        last[x] = i\n    return res\nt = int(input())\nfor _ in range(t):\n    print(solve())", "def solve(n, a):\n    c = [-1] * (max(a) + 1)\n    ans = -1\n    for i in range(n):\n        if c[a[i]] >= 0:\n            ans = max(ans, n - (i - c[a[i]]))\n        c[a[i]] = i\n    print(ans)\ndebugmode = 0\nif debugmode:\n    with open('input.txt', 'r') as f:\n        t = int(f.readline())\n        for _ in range(t):\n            n = int(f.readline())\n            a = list(map(int, f.readline().split()))\n            solve(n, a)\nelse:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        solve(n, a)", "a = []\npre = []\nfor i in range(150001):\n    a.append(-1)\n    pre.append(-1)\nfor t in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    ans = -1\n    for i in range(n):\n        if a[c[i]] != t:\n            a[c[i]] = t\n        elif pre[c[i]] + n - i > ans:\n            ans = pre[c[i]] + n - i\n        pre[c[i]] = i\n    print(ans)", "from sys import exit\nt = int(input())\nwhile t:\n    l = int(input())\n    val = list(map(int, input('').split()))\n    mindis = 150000\n    dict = {}\n    for (index, i) in enumerate(val):\n        if dict.get(i) or dict.get(i) == 0:\n            ans = index - dict.get(i)\n            mindis = ans if mindis > ans else mindis\n        dict[i] = index\n    if mindis == 150000:\n        print(-1)\n    else:\n        print(l - mindis)\n    t -= 1", "ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    kol = [-1] * 150002\n    x = list(map(int, input().split()))\n    otv = n + 1\n    for i in range(n):\n        if kol[x[i]] != -1:\n            otv = min(otv, i - kol[x[i]])\n            kol[x[i]] = i\n        else:\n            kol[x[i]] = i\n    if otv == n + 1:\n        otv = -1\n    else:\n        otv = n - otv\n    ans.append(otv)\nprint('\\n'.join([str(i) for i in ans]))", "import sys, bisect, math\nfrom collections import deque, Counter\ninput = lambda : sys.stdin.readline().strip()\nceil = lambda x: math.ceil(x)\nmod = 10 ** 9 + 7\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = -1\n    d = {}\n    for i in range(n):\n        if a[i] in d:\n            m = max(m, n - i + d[a[i]])\n        d[a[i]] = i\n    return m\nt = 1\nt = int(input())\nfor _ in range(t):\n    print(solve())", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    dic = {}\n    ans = 0\n    for j in range(0, n):\n        try:\n            m = dic[lis[j]]\n            s = dic[lis[j]] + n - j\n            if ans < s:\n                ans = s\n            dic[lis[j]] = j\n        except:\n            dic[lis[j]] = j\n    if ans == 0:\n        print(-1)\n    else:\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    arr = [-1] * (max(a) + 1)\n    ans = -1\n    for (i, x) in enumerate(a):\n        if arr[x] != -1:\n            ans = max(ans, n - i + arr[x])\n        arr[x] = i\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = [-1] * (max(a) + 1)\n    ans = -1\n    for i in range(n):\n        if c[a[i]] >= 0:\n            ans = max(ans, n - (i - c[a[i]]))\n        c[a[i]] = i\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    arr = [-1] * (max(a) + 1)\n    ans = -1\n    for (i, x) in enumerate(a):\n        if arr[x] != -1:\n            ans = max(ans, n - i + arr[x])\n        arr[x] = i\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    marker = [-1] * 150001\n    ans = 150001\n    for i in range(n):\n        if marker[a[i]] == -1:\n            marker[a[i]] = i\n        else:\n            ans = min(ans, i - marker[a[i]])\n            marker[a[i]] = i\n    if ans == 150001:\n        print(-1)\n    else:\n        print(n - ans)", "for s in [*open(0)][2::2]:\n    a = s.split()\n    r = i = -1\n    d = {}\n    for x in a:\n        i += 1\n        r = max(r, len(a) - i + d.get(x, -200000.0))\n        d[x] = i\n    print(r)", "ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    kol = [-1] * 150002\n    x = list(map(int, input().split()))\n    otv = n + 1\n    for i in range(n):\n        if kol[x[i]] != -1:\n            otv = min(otv, i - kol[x[i]])\n            kol[x[i]] = i\n        else:\n            kol[x[i]] = i\n    if otv == n + 1:\n        otv = -1\n    else:\n        otv = n - otv\n    ans.append(otv)\nprint('\\n'.join([str(i) for i in ans]))", "for s in [*open(0)][2::2]:\n    a = s.split()\n    r = -1\n    d = {}\n    i = 0\n    for x in a:\n        i += 1\n        r = max(r, len(a) - i + d.get(x, -200000.0))\n        d[x] = i\n    print(r)", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    r = 1\n    for x in s.split():\n        r += r > i\n        r = min(r, i - d.get(x, -r))\n        d[x] = i\n        i += 1\n    print(i - r)", "a = int(input())\nfor x in range(a):\n    b = int(input())\n    d = list(map(int, input().split()))\n    l = 0\n    h = {}\n    for y in range(b):\n        if h.get(d[y]) != None:\n            l = max(h[d[y]] + (b - y), l)\n            h[d[y]] = y\n        else:\n            h[d[y]] = y\n    if l == 0:\n        print(-1)\n    else:\n        print(l)", "for s in [*open(0)][2::2]:\n    a = s.split()\n    d = {}\n    i = 0\n    r = 200000.0\n    for x in a:\n        r = min(r, i - d.get(x, -r))\n        d[x] = i\n        i += 1\n    print(max(-1, len(a) - r))", "s = int(input())\nfor i in range(s):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    positions = {}\n    ans = -1\n    for j in range(n):\n        if arr[j] in positions:\n            a = positions[arr[j]] - j + n\n            ans = max(ans, a)\n        positions[arr[j]] = j\n    print(ans)", "for s in [*open(0)][2::2]:\n    n = len((a := s.split()))\n    r = -1\n    d = {}\n    i = 0\n    for x in a:\n        i += 1\n        r = max(r, n - i + d.get(x, -n))\n        d[x] = i\n    print(r)", "for s in [*open(0)][2::2]:\n    a = s.split()\n    r = -1\n    d = {}\n    i = 0\n    for x in a:\n        i += 1\n        r = max(r, len(a) - i + d.get(x, -200000.0))\n        d[x] = i\n    print(r)", "for s in [*open(0)][2::2]:\n    n = len((a := s.split()))\n    r = -1\n    d = {}\n    i = 0\n    for x in a:\n        i += 1\n        r = max(r, n - i + d.get(x, -n))\n        d[x] = i\n    print(r)", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    r = 1\n    for x in s.split():\n        r += r > i\n        r = min(r, i - d.get(x, -r))\n        d[x] = i\n        i += 1\n    print(i - r)", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    r = 1\n    for x in s.split():\n        r += r > i\n        r = min(r, i - d.get(x, -r))\n        d[x] = i\n        i += 1\n    print(i - r)", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    r = 1\n    for x in s.split():\n        r += r > i\n        r = min(r, i - d.get(x, -r))\n        d[x] = i\n        i += 1\n    print(i - r)", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    r = 1\n    for x in s.split():\n        r += r > i\n        r = min(r, i - d.get(x, -r))\n        d[x] = i\n        i += 1\n    print(i - r)", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    r = 1\n    for x in s.split():\n        r += r > i\n        r = min(r, i - d.get(x, -r))\n        d[x] = i\n        i += 1\n    print(i - r)", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    r = 1\n    for x in s.split():\n        r += r > i\n        r = min(r, i - d.get(x, -r))\n        d[x] = i\n        i += 1\n    print(i - r)", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    r = 1\n    for x in s.split():\n        r += r > i\n        r = min(r, i - d.get(x, -r))\n        d[x] = i\n        i += 1\n    print(i - r)", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    r = 1\n    for x in s.split():\n        r += r > i\n        r = min(r, i - d.get(x, -r))\n        d[x] = i\n        i += 1\n    print(i - r)", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    r = 1\n    for x in s.split():\n        r += r > i\n        r = min(r, i - d.get(x, -r))\n        d[x] = i\n        i += 1\n    print(i - r)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = [-1] * (max(a) + 1)\n    ans = -1\n    for i in range(n):\n        if c[a[i]] >= 0:\n            ans = max(ans, n - (i - c[a[i]]))\n        c[a[i]] = i\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = [-1] * (max(a) + 1)\n    ans = -1\n    for i in range(n):\n        if c[a[i]] >= 0:\n            ans = max(ans, n - (i - c[a[i]]))\n        c[a[i]] = i\n    print(ans)", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    r = 1\n    for x in s.split():\n        r += r > i\n        r = min(r, i - d.get(x, -r))\n        d[x] = i\n        i += 1\n    print(i - r)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    last = {}\n    ans = -1\n    for i in range(n):\n        if a[i] in last:\n            ans = max(ans, last[a[i]] + n - i)\n        last[a[i]] = i\n    print(ans)", "def getParticles():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    indexes = dict()\n    for i in range(n):\n        exist = indexes.get(arr[i], [])\n        exist.append(i)\n        indexes[arr[i]] = exist\n    maxLen = -1\n    for (key, value) in indexes.items():\n        for i in range(1, len(value)):\n            if n - value[i] + value[i - 1] > maxLen:\n                maxLen = n - value[i] + value[i - 1]\n            if maxLen == n - 1:\n                break\n    print(maxLen)\n    return\nt = int(input())\nfor i in range(t):\n    getParticles()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    coord = {}\n    d = {}\n    for i in range(n):\n        x = a[i]\n        if x not in coord:\n            coord[x] = i\n        else:\n            if x not in d:\n                d[x] = i - coord[x]\n            else:\n                d[x] = min(d[x], i - coord[x])\n            coord[x] = i\n    if len(d) == 0:\n        print(-1)\n    else:\n        print(n - min(d.values()))", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    r = 1\n    for x in s.split():\n        r = min((r := (r + (r > i))), i - d.get(x, -r))\n        d[x] = i\n        i += 1\n    print(i - r)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = [-1] * 150000\n    mn = n + 1\n    for i in range(n):\n        if l[a[i] - 1] != -1:\n            mn = min(mn, i - l[a[i] - 1])\n        l[a[i] - 1] = i\n    print(n - mn)", "def solve():\n    n = int(input())\n    arr = input().split()\n    d = {}\n    for i in range(n):\n        if arr[i] not in d:\n            d[arr[i]] = [i]\n        else:\n            d[arr[i]].append(i)\n    ans = -1\n    for i in d:\n        if len(d[i]) < 2:\n            continue\n        for j in range(1, len(d[i])):\n            first = d[i][j - 1]\n            last = d[i][j]\n            t = n - (last - first)\n            ans = max(t, ans)\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "for t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.reverse()\n    d = {}\n    now = set()\n    ma = -1\n    for i in range(n):\n        if not l[i] in now:\n            now.add(l[i])\n            d[l[i]] = i\n        else:\n            ma = max(n - i + d[l[i]], ma)\n            d[l[i]] = i\n    if ma == -1:\n        print(-1)\n    else:\n        print(ma)", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    r = 1\n    for x in s.split():\n        r += r > i\n        r = min(r, i - d.get(x, -r))\n        d[x] = i\n        i += 1\n    print(i - r)", "for s in [*open(0)][2::2]:\n    d = {}\n    i = 0\n    r = 1\n    for x in s.split():\n        r += r > i\n        r = min(r, i - d.get(x, -r))\n        d[x] = i\n        i += 1\n    print(i - r)", "_ = int(input())\nfor _ in range(0, _):\n    n = int(input())\n    st = [-1] * 150010\n    res = -1\n    a = input().split()\n    for j in range(0, len(a)):\n        a[j] = int(a[j])\n    for i in range(0, n):\n        if st[a[i]] != -1:\n            res = max(res, st[a[i]] + n - i)\n        st[a[i]] = i\n    print(res)", "def solve():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    m = {}\n    for i in range(n):\n        if a[i] in m:\n            m[a[i]].append(i)\n        else:\n            m[a[i]] = [i]\n    best = -1\n    for (k, v) in m.items():\n        for i in range(len(v) - 1):\n            (l, r) = (v[i], v[i + 1])\n            best = max(best, l + (n - r - 1) + 1)\n    return best\nt = int(input())\nfor tc in range(t):\n    print(solve())", "def maxLen(n, arr):\n    pos = {}\n    for i in range(n):\n        if pos.get(arr[i]):\n            pos[arr[i]].append(i)\n        else:\n            pos[arr[i]] = [i]\n    max_len = -1\n    for i in pos.keys():\n        if len(pos[i]) > 1:\n            for j in range(1, len(pos[i])):\n                max_len = max(max_len, pos[i][j - 1] + (n - pos[i][j]))\n    return max_len\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(maxLen(n, arr))", "import math\nnt = int(input())\nans = []\n\ndef calc(indices, n):\n    maxs = 0\n    siz = 0\n    for x in range(len(indices) - 1):\n        siz = indices[x] + n - indices[x + 1]\n        if siz > maxs:\n            maxs = siz\n    return maxs\n\ndef soln(arr, n):\n    d = {}\n    maxc = 0\n    for x in range(n):\n        if d.get(arr[x]) == None:\n            d[arr[x]] = [x]\n        else:\n            d[arr[x]].append(x)\n    p = list(d.keys())\n    for x in range(len(p)):\n        if len(d[p[x]]) >= 2:\n            indices = d[p[x]]\n            c = calc(indices, n)\n            if c > maxc:\n                maxc = c\n    if maxc == 0:\n        return -1\n    else:\n        return maxc\nfor x in range(nt):\n    n = int(input())\n    x = list(map(int, input().split()))\n    ans.append(soln(x, n))\nfor a in ans:\n    print(a)", "T = int(input())\nfor testcase in range(1, T + 1):\n    n = int(input())\n    a = list(map(int, input().split()))\n    h = {}\n    for (i, x) in enumerate(a):\n        if not x in h:\n            h[x] = []\n        h[x].append(i)\n    best = 150001\n    for x in h:\n        if len(h[x]) > 1:\n            l = h[x]\n            l.sort()\n            for i in range(len(l) - 1):\n                if l[i + 1] - l[i] < best:\n                    best = l[i + 1] - l[i]\n    if best == 150001:\n        print(-1)\n    else:\n        print(n - best)", "def sol():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = set(a)\n    if len(b) == n:\n        print('-1')\n    else:\n        cns = n\n        d = dict()\n        for i in b:\n            d[i] = []\n        for i in range(n):\n            d[a[i]].append(i)\n        ans = 1500000\n        for i in d.keys():\n            z = len(d[i])\n            if z > 1:\n                for j in range(z - 1):\n                    ans = min(ans, d[i][j + 1] - d[i][j])\n        print(cns - ans)\nfor tt in range(int(input())):\n    sol()", "def fun(p, a, n, t):\n    x = a[1] - a[0]\n    for i in range(1, n - 1):\n        x = min(x, a[i + 1] - a[i])\n    p.append(t - x)\nfrom collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = defaultdict(list)\n    for i in range(n):\n        d[a[i]].append(i)\n    p = []\n    for i in d:\n        if len(d[i]) > 1:\n            fun(p, d[i], len(d[i]), n)\n    if p == []:\n        print(-1)\n    else:\n        print(max(p))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict()\n    for i in range(n):\n        if a[i] in d:\n            d[a[i]].append(i)\n        else:\n            d[a[i]] = [i]\n    ans = []\n    for i in d:\n        li = d[i]\n        if len(li) >= 2:\n            le = len(li)\n            for j in range(1, le):\n                ans.append(n - li[j] + li[j - 1])\n    if ans == []:\n        print(-1)\n    else:\n        print(max(ans))", "repeat = int(input())\nfor j in range(repeat):\n    l = int(input())\n    num_list = list(map(int, input().split()))\n    memo = {}\n    for i in range(l):\n        if num_list[i] not in memo:\n            memo[num_list[i]] = [i, l + 1]\n        else:\n            if i - memo[num_list[i]][0] < memo[num_list[i]][1]:\n                memo[num_list[i]][1] = i - memo[num_list[i]][0]\n            memo[num_list[i]][0] = i\n    mini = l + 1\n    for i in memo:\n        if memo[i][1] == 0:\n            continue\n        if memo[i][1] < mini:\n            mini = memo[i][1]\n    result = l - mini\n    if result == l + 1:\n        result = -1\n    print(result)", "import math\n\ndef printDivisors(n):\n    i = 1\n    l = []\n    l1 = []\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n / i == i:\n                l.append(i)\n            else:\n                l.append(i)\n                l1.append(n // i)\n        i = i + 1\n    return l + l1[::-1]\n\ndef primeFactors(n):\n    s = set()\n    while n % 2 == 0:\n        s.add(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            s.add(i)\n            n = n / i\n    if n > 2:\n        s.add(n)\n    return list(s)\n\ndef check(high, fact, primes, mid):\n    s = set()\n    if mid > len(primes):\n        return False\n    for ele in primes[:mid]:\n        curr = high // ele\n        x = curr\n        if x in s:\n            return False\n        s.add(x)\n        while x <= high:\n            x += curr\n            if x in s and x != high:\n                return False\n            s.add(x)\n    return True\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    d = defaultdict(list)\n    for i in range(n):\n        d[lis[i]].append(i)\n    ans = -1\n    for v in d.values():\n        for i in range(len(v) - 1):\n            ans = max(ans, v[i] - 0 + n - v[i + 1])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    store = {}\n    for (i, item) in enumerate(a):\n        if store.get(item):\n            store[item].append(i)\n        else:\n            store[item] = [i]\n    flag = False\n    ans = -1\n    for (k, v) in store.items():\n        if len(v) > 1:\n            for i in range(len(v) - 1):\n                if n - v[i + 1] + v[i] > ans:\n                    ans = n - v[i + 1] + v[i]\n    print(ans)", "import sys\nfrom math import *\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a.count(a[0]) == len(a):\n        print(n - 1)\n    else:\n        h = {}\n        minn = {}\n        for i in range(n):\n            if a[i] not in h:\n                h[a[i]] = i\n                minn[a[i]] = 10 ** 9\n            else:\n                k = abs(h[a[i]] - i)\n                minn[a[i]] = min(minn[a[i]], k)\n                h[a[i]] = i\n        m = 10 ** 9\n        for i in minn:\n            m = min(m, minn[i])\n        print(n - m) if m != 10 ** 9 else print(-1)", "for t in range(int(input())):\n    n = int(input())\n    A = [int(i) for i in input().split()]\n    d = dict()\n    for i in range(n):\n        if A[i] in d:\n            x = i + 1 - d[A[i]][0]\n            if x < d[A[i]][1]:\n                d[A[i]][1] = x\n            d[A[i]][0] = i + 1\n        else:\n            a = [i + 1, n + 1]\n            d[A[i]] = a\n    ans = n + 2\n    for i in d:\n        if d[i][1] < ans:\n            ans = d[i][1]\n    print(n - ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dict = {}\n    checklist = []\n    length = -1\n    for i in range(n):\n        try:\n            length = max(length, n - i - 1 + dict[arr[i]][-1] + 1)\n            dict[arr[i]].append(i)\n        except:\n            dict[arr[i]] = [i]\n            checklist.append(arr[i])\n    print(length)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if arr[i] in d:\n            d[arr[i]].append(i)\n        else:\n            d[arr[i]] = [i]\n    ans = 1000000005\n    for (i, j) in d.items():\n        k = len(j)\n        for p in range(1, k):\n            ans = min(ans, j[p] - j[p - 1])\n    if ans == 1000000005:\n        print(-1)\n    else:\n        print(n - ans)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    f = [-1] * (150000 + 1)\n    l = [-1] * (150000 + 1)\n    ans = 0\n    for i in range(n):\n        if f[arr[i]] == -1:\n            f[arr[i]] = i\n        elif l[arr[i]] == -1:\n            l[arr[i]] = i\n            ans = max(ans, 1 + f[arr[i]] + n - 1 - l[arr[i]])\n        else:\n            f[arr[i]] = l[arr[i]]\n            l[arr[i]] = i\n            ans = max(ans, 1 + f[arr[i]] + n - 1 - l[arr[i]])\n    if ans == 0:\n        print(-1)\n    else:\n        print(ans)\n    t = t - 1", "for _ in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    d = dict()\n    for i in range(len(l)):\n        if l[i] in d:\n            d[l[i]].append(i)\n        else:\n            d[l[i]] = [i]\n    ans = -1\n    for key in d:\n        val = d[key]\n        if len(val) > 1:\n            for g in range(len(val) - 1):\n                ans = max(ans, val[g] + n - val[g + 1])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        x = arr[i]\n        if x in d.keys():\n            d[x].append(i)\n        else:\n            d[x] = [i]\n    ans = -1\n    for a in d.keys():\n        pp = d[a]\n        if len(pp) == 1:\n            continue\n        else:\n            for i in range(0, len(pp) - 1):\n                ans = max(ans, n + pp[i] - pp[i + 1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if a[i] not in d:\n            d[a[i]] = [i]\n        else:\n            d[a[i]].append(i)\n    mn = 100000000000\n    for i in d:\n        x = len(d[i])\n        for j in range(1, x):\n            mn = min(mn, d[i][j] - d[i][j - 1])\n    if mn == 100000000000:\n        print(-1)\n    else:\n        print(n - mn)", "last = {}\nfor i in range(150001):\n    last[i] = -1\nt = int(input())\nfor k in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = -1\n    for i in range(n):\n        if last[a[i]] != -1:\n            ans = max(ans, last[a[i]] + (n - i))\n        last[a[i]] = i\n    for i in range(n):\n        last[a[i]] = -1\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    s = sorted(enumerate(w), key=lambda x: x[1])\n    c = 500000\n    for i in range(n - 1):\n        if s[i][1] == s[i + 1][1]:\n            d = abs(s[i][0] - s[i + 1][0])\n            if d < c:\n                c = d\n    print(n - c if c != 500000 else -1)", "from _collections import defaultdict\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dic = defaultdict(lambda : [])\n    for j in range(n):\n        dic[arr[j]].append(j)\n    mi = -1\n    for el in dic:\n        le = len(dic[el])\n        for j in range(le - 1):\n            fro = dic[el][j]\n            bac = n - dic[el][j + 1] - 1\n            mi = max(mi, fro + bac + 1)\n    print(mi)", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    ans = -1\n    for i in range(len(a)):\n        if a[i] in d:\n            ans = max(ans, min(d[a[i]], i) + min(n - d[a[i]], n - i))\n            d[a[i]] = i\n        else:\n            d[a[i]] = i\n    print(ans)", "import sys\nfrom math import sqrt, gcd\nfrom collections import deque, Counter\nsys.setrecursionlimit(10 ** 8)\nI = lambda : int(input())\nS = lambda : input().strip()\nM = lambda : map(int, input().strip().split())\nL = lambda : list(map(int, input().strip().split()))\nmod = 1000000007\nfor _ in range(I()):\n    n = I()\n    arr = L()\n    d = {}\n    for i in range(n):\n        if arr[i] in d:\n            d[arr[i]].append(i)\n        else:\n            d[arr[i]] = [i]\n    ans = float('inf')\n    for j in d.values():\n        if len(j) >= 2:\n            j.sort()\n            t = float('inf')\n            for i in range(len(j) - 1):\n                m = j[i + 1] - j[i]\n                if m < t:\n                    t = m\n            if t < ans:\n                ans = t\n    print(-1 if ans == float('inf') else n - ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    count = {}\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]].append(i)\n        else:\n            count[arr[i]] = [i]\n    minm = n + 1\n    for i in count:\n        x = len(count[i])\n        for j in range(x - 1):\n            minm = min(minm, count[i][j + 1] - count[i][j])\n            if minm == 1:\n                break\n        if minm == 1:\n            break\n    print(n - minm)", "T = int(input())\nfor tc in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    D = {}\n    for i in range(n):\n        if a[i] in D.keys():\n            D[a[i]].append(i)\n        else:\n            D[a[i]] = [i]\n    count = 1000000000\n    for value in D.values():\n        if len(value) >= 2:\n            value.sort()\n            t = 1000000000\n            for i in range(len(value) - 1):\n                m = value[i + 1] - value[i]\n                if m < t:\n                    t = m\n            if t < count:\n                count = t\n    if count == 1000000000:\n        print(-1)\n    else:\n        print(n - count)", "t = int(input())\nans = []\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    f = dict()\n    imp = True\n    for i in range(n):\n        if a[i] in f:\n            f[a[i]].append(i)\n            imp = False\n        else:\n            f[a[i]] = [i]\n    if imp:\n        ans.append(-1)\n        continue\n    mx = 1\n    for c1 in f:\n        c = f[c1]\n        if len(c) < 2:\n            continue\n        closest = 0\n        mind = c[1] - c[0]\n        for i in range(1, len(c) - 1):\n            if c[i + 1] - c[i] < mind:\n                mind = c[i + 1] - c[i]\n                closest = i\n        mx = max(mx, n - c[closest + 1] + c[closest])\n    ans.append(mx)\nfor i in ans:\n    print(i)", "from collections import Counter\nfrom math import ceil, floor, log, gcd\nimport bisect as bs\nimport sys\ninput = sys.stdin.readline\ninp_lis = lambda : list(map(int, input().split()))\ninp_multi = lambda : map(int, input().split())\ninp_int = lambda : int(input().strip())\nmaximum = 10 ** 6\nm = {}\nfor i in range(maximum):\n    m[i] = -1\nfor _ in range(int(input().strip())):\n    n = inp_int()\n    a = inp_lis()\n    ans = -1\n    for i in range(n):\n        if m[a[i]] != -1:\n            ans = max(ans, n - i - 1 + m[a[i]] + 1)\n        m[a[i]] = i\n    print(ans)\n    for each in a:\n        m[each] = -1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    tempDict = {}\n    tempset = set([])\n    maxLen = -1\n    for i in range(n):\n        try:\n            tempDict[a[i]].append(i)\n        except:\n            tempset.add(a[i])\n            tempDict[a[i]] = [i]\n    for i in tempDict:\n        if len(tempDict[i]) > 1:\n            for j in range(len(tempDict[i]) - 1):\n                maxLen = max(maxLen, tempDict[i][j] - tempDict[i][j + 1] + n)\n    print(maxLen)", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    a = input().split()\n    net = {}\n    for i in range(n):\n        if a[i] not in net:\n            net[a[i]] = [i]\n        else:\n            net[a[i]].append(i)\n    ans = -1\n    for i in net:\n        if len(net[i]) < 2:\n            continue\n        x = net[i]\n        for j in range(len(x) - 1):\n            k1 = x[j]\n            k2 = x[j + 1]\n            l = min(k1, k2) + min(n - k1, n - k2)\n            ans = max(ans, l)\n    print(ans)\n    t -= 1", "def get_number():\n    nb_test = int(input())\n    return nb_test\n\ndef read_case():\n    size = int(input())\n    tab = list(map(int, input().split()))\n    return (tab, size)\n\ndef main():\n    nb_test = get_number()\n    for i in range(nb_test):\n        (tab, size) = read_case()\n        dico = make_dico(tab)\n        ans = find_ans(dico, size)\n        print(ans)\n\ndef make_dico(tab):\n    dico = {}\n    for i in range(0, len(tab)):\n        str_key = str(tab[i])\n        if str_key in dico.keys():\n            dico[str_key].append(i)\n        else:\n            dico[str_key] = [i]\n    return dico\n\ndef find_closest(tab, size):\n    step = size\n    if len(tab) != 1:\n        for i in range(0, len(tab) - 1):\n            buf = tab[i + 1] - tab[i]\n            step = min(buf, step)\n    return step\n\ndef find_ans(dico, size):\n    step = size\n    for (key, value) in dico.items():\n        buf = find_closest(value, size)\n        step = min(step, buf)\n    if step == size:\n        ans = -1\n    else:\n        ans = size - step\n    return ans\nmain()", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    d = {}\n    for i in range(n):\n        if a[i] not in d.keys():\n            d[a[i]] = []\n        d[a[i]].append(i)\n    maxl = 0\n    flag = 0\n    for (key, val) in d.items():\n        if len(val) > 1:\n            flag = 1\n    for (keys, val) in d.items():\n        if len(val) > 1:\n            for i in range(len(val) - 1):\n                ans = val[i] - 0 + n - 1 - val[i + 1] + 1\n                if ans > maxl:\n                    maxl = ans\n    if flag == 0:\n        print(-1)\n    else:\n        print(maxl)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    z = list(map(int, input().split()))\n    ans = -1\n    d = dict()\n    for i in range(n):\n        if z[i] in d:\n            d[z[i]].append(i + 1)\n        else:\n            d[z[i]] = [i + 1]\n    k = []\n    for i in d.values():\n        if len(i) > 1:\n            k.append(i)\n    l = []\n    for i in k:\n        p = i[0]\n        for j in range(1, len(i)):\n            q = i[j]\n            s = [p + n - q, p + n - q + 1]\n            l.append(min(s))\n            p = q\n    if len(l) == 0:\n        print(-1)\n    else:\n        print(max(l))", "N = int(input())\nfor _ in range(N):\n    n = int(input())\n    m = list(map(int, input().split()))\n    ans = -1\n    dick = {}\n    for i in range(n):\n        s = m[i]\n        dick[s] = dick.get(s, [-1, 0])\n        if dick[s][0] < 0:\n            dick[s][0] = 1e+32\n        elif dick[s][0] >= abs(i - dick[s][1]):\n            dick[s][0] = abs(i - dick[s][1])\n        dick[s][1] = i\n    for s in dick:\n        ans = max(ans, n - dick[s][0])\n    print(ans)", "def solve(length, data):\n    s = set(data)\n    if len(s) == length:\n        return -1\n    else:\n        indices = {elem: [] for elem in s}\n        for (i, elem) in enumerate(data):\n            indices[elem].append(i)\n        indices = {key: indices[key] for key in indices if len(indices[key]) > 1}\n        dict_keys = list(indices.keys())\n        memo = indices[dict_keys[0]][1] - indices[dict_keys[0]][0]\n        for key in indices:\n            for (i, elem) in enumerate(indices[key][1:]):\n                if elem - indices[key][i] < memo:\n                    memo = elem - indices[key][i]\n        return length - memo\n\ndef do_all():\n    solutions = []\n    for i in range(int(input())):\n        solutions.append(solve(int(input()), [int(c) for c in input().split(' ')]))\n    for x in solutions:\n        print(x)\ndo_all()", "def fun(n, a):\n    lis = []\n    ans = []\n    for i in range(n):\n        lis.append([a[i], i + 1])\n    lis.sort(key=lambda x: x[0])\n    for j in range(1, n):\n        if lis[j][0] == lis[j - 1][0]:\n            ans.append(lis[j - 1][1] + (n - lis[j][1]))\n    if len(ans) != 0:\n        return max(ans)\n    return -1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(fun(n, a))", "def give(n, l):\n    e = [[l[i], i] for i in range(n)]\n    e.sort(key=lambda a: a[0])\n    m = -1\n    for i in range(n - 1):\n        d = 0\n        if e[i][0] == e[i + 1][0]:\n            d = n - e[i + 1][1] + e[i][1]\n        m = max(m, d)\n    if m == 0:\n        m = -1\n    print(m)\nfor _ in range(int(input())):\n    give(int(input()), list(map(int, input().split(' '))))", "import math\n\ndef findMinDiff(arr, n):\n    arr = sorted(arr)\n    diff = 10 ** 20\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] < diff:\n            diff = arr[i + 1] - arr[i]\n    return diff\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if l[i] not in d:\n            d[l[i]] = [i]\n        else:\n            d[l[i]].append(i)\n    mini = math.inf\n    for j in d:\n        x = len(d[j])\n        mini = min(mini, findMinDiff(d[j], x))\n    if n - mini <= 0:\n        print(-1)\n    else:\n        print(n - mini)", "for _ in range(int(input())):\n    n = int(input())\n    b = list(map(int, input().split()))\n    a = sorted(zip(b, range(n)))\n    b = sorted(set(b))\n    c = [a[0][1] - n - 1] + [0] * (len(b) - 1)\n    i = 0\n    y = n + 1\n    for (e, x) in a:\n        if e == b[i]:\n            y = min(y, x - c[i])\n            c[i] = x\n            if y == 1:\n                break\n        else:\n            i = i + 1\n            c[i] = x\n    print(n - y)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = {}\n    ans = -1\n    for i in range(n):\n        if arr[i] not in d:\n            d[arr[i]] = [-1, i, -1]\n        else:\n            d[arr[i]][0] = d[arr[i]][1]\n            d[arr[i]][1] = i\n            d[arr[i]][2] = max(d[arr[i]][2], d[arr[i]][0] + (n - (d[arr[i]][1] + 1)) + 1)\n        ans = max(ans, d[arr[i]][2])\n    print(ans)", "from collections import defaultdict\nfor cases in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    arr = [-1] * 10 ** 6\n    ans = -1\n    for i in range(0, len(l)):\n        if arr[l[i]] != -1:\n            ans = max(ans, arr[l[i]] + n - i)\n        arr[l[i]] = i\n    if ans == n:\n        ans = ans - 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if d.get(arr[i]):\n            d[arr[i]][0] += 1\n            d[arr[i]][1].append(i)\n        else:\n            d[arr[i]] = [1, [i]]\n    best = 0\n    flag = False\n    for (k, v) in d.items():\n        if v[0] <= 1:\n            continue\n        flag = True\n        i = 0\n        j = 1\n        while j < len(v[1]):\n            left = n - 1 - v[1][j]\n            right = v[1][i]\n            i += 1\n            j += 1\n            best = max(best, left + right + 1)\n    if flag:\n        print(best)\n    else:\n        print(-1)", "for i in range(int(input())):\n    n = int(input())\n    old = [int(k) for k in input().split()]\n    new = []\n    for i in range(n):\n        new.append([old[i], i])\n    new.sort()\n    k = -1\n    for i in range(1, n):\n        if new[i][0] == new[i - 1][0]:\n            k = max(k, new[i - 1][1] + n - new[i][1])\n    print(k)", "import math\nfrom sys import stdin\nfrom collections import Counter, deque\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        l.append([a[i], i])\n    l.sort()\n    m = -1\n    for i in range(n - 1):\n        if l[i][0] == l[i + 1][0]:\n            m = max(m, n - (l[i + 1][1] - l[i][1]))\n    print(m)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        l.append([a[i], i])\n    l.sort()\n    m = -1\n    for i in range(n - 1):\n        if l[i][0] == l[i + 1][0]:\n            m = max(m, n - (l[i + 1][1] - l[i][1]))\n    print(m)", "from math import inf\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    idx = [-1 for _ in range(150001)]\n    short = inf\n    for i in range(n):\n        k = arr[i]\n        if idx[k] != -1:\n            short = min(short, i - idx[k])\n        idx[k] = i\n    if short == inf:\n        print(-1)\n    else:\n        print(n - short)", "for _ in range(int(input())):\n    n = int(input())\n    last_inds = [-1] * 150001\n    min_diffs = [150001] * 150001\n    i = 0\n    for x in input().split():\n        x = int(x)\n        if last_inds[x] >= 0:\n            if i - last_inds[x] < min_diffs[x]:\n                min_diffs[x] = i - last_inds[x]\n        last_inds[x] = i\n        i += 1\n    if min(min_diffs) == 150001:\n        print(-1)\n    else:\n        print(n - min(min_diffs))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ele = []\n    for i in range(n):\n        ele.append([arr[i], i])\n    ele.sort()\n    maxx = -1\n    for i in range(n - 1):\n        if ele[i][0] == ele[i + 1][0]:\n            maxx = max(maxx, n - ele[i + 1][1] + ele[i][1])\n    print(maxx)", "for i in range(int(input())):\n    length = int(input())\n    l = list(map(int, input().split()))\n    s = set(l)\n    if len(s) == len(l) or len(l) == 1:\n        print(-1)\n    elif len(s) == 1:\n        print(len(l) - 1)\n    else:\n        newlist = []\n        for (i, v) in enumerate(l):\n            newlist += [[v, i]]\n        newlist.sort()\n        max_ = 0\n        for i in range(1, length):\n            if newlist[i][0] == newlist[i - 1][0]:\n                temp = length - newlist[i][1] + newlist[i - 1][1]\n                if max_ < temp:\n                    max_ = temp\n        print(max_)", "import collections\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = -1\n    d = defaultdict(lambda : [])\n    for i in range(n):\n        d[a[i]].append([i, n - 1 - i])\n    for x in d:\n        z = d[x]\n        for i in range(len(z) - 1):\n            ans = max(ans, 1 + min(z[i][0], z[i + 1][0]) + min(z[i][1], z[i + 1][1]))\n    print(ans)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    min = 1000000\n    w = None\n    a = sorted([[l[i], i] for i in range(n)])\n    for i in range(n - 1):\n        if a[i][0] == a[i + 1][0]:\n            if a[i + 1][1] - a[i][1] < min:\n                (w, e) = (a[i + 1][1], a[i][1])\n                min = w - e\n        else:\n            i = i + 1\n    else:\n        if w == None:\n            print(-1)\n        else:\n            print(n - w + e)\n    t = t - 1"]