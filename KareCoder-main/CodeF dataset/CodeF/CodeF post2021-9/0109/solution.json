["def troca(arr, i, j):\n    aux = arr[j]\n    arr[j] = arr[i]\n    arr[i] = aux\n    return arr\n\ndef permutation(n):\n    arr = [str(i) for i in range(1, n + 1)]\n    print(' '.join(arr))\n    troca(arr, len(arr) - 1, 0)\n    print(' '.join(arr))\n    if len(arr) > 2:\n        for i in range(len(arr) - 1, 1, -1):\n            troca(arr, i, i - 1)\n            print(' '.join(arr))\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        el = int(input())\n        print(el)\n        permutation(el)\nmain()", "case = int(input())\nfor i in range(case):\n    n = int(input())\n    list1 = []\n    print(n)\n    for j in range(n):\n        list1.append(str(j + 1))\n    print(' '.join(list1))\n    for k in range(n - 1):\n        (list1[k], list1[k + 1]) = (list1[k + 1], list1[k])\n        print(' '.join(list1))", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        perm = list(map(str, range(1, n + 1)))\n        print(n)\n        print(' '.join(perm))\n        for i in range(1, n):\n            (perm[i], perm[i - 1]) = (perm[i - 1], perm[i])\n            print(' '.join(perm))\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        nums = [str(i) for i in range(1, n + 1)]\n        print(n)\n        print(' '.join(nums))\n        for i in range(n - 1):\n            (nums[i], nums[i + 1]) = (nums[i + 1], nums[i])\n            print(' '.join(nums))\nmain()", "case = int(input())\nfor i in range(case):\n    n = int(input())\n    list1 = []\n    print(n)\n    for j in range(n):\n        list1.append(str(j + 1))\n    print(' '.join(list1))\n    for k in range(n - 1):\n        (list1[k], list1[k + 1]) = (list1[k + 1], list1[k])\n        print(' '.join(list1))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    print(n)\n    for k in range(1, n + 1):\n        a.append(str(k))\n    j = 0\n    while j < n - 1:\n        print(' '.join(a))\n        (a[j], a[j + 1]) = (a[j + 1], a[j])\n        j += 1\n    print(' '.join(a))", "for z in range(int(input())):\n    n = int(input())\n    a1 = [str(i) for i in range(1, n + 1)]\n    print(n)\n    print(' '.join(a1))\n    for k in range(1, n):\n        temp = a1[n - k]\n        a1[n - k] = a1[n - k - 1]\n        a1[n - k - 1] = temp\n        print(' '.join(a1))", "for _ in range(int(input())):\n    n = int(input())\n    out = [str(nn) for nn in range(1, n + 1)]\n    print(n)\n    print(' '.join(out))\n    for x in range(1, n):\n        (out[x], out[0]) = (out[0], out[x])\n        print(' '.join(out))", "for _ in range(int(input())):\n    n = int(input())\n    if n == 2:\n        print(2)\n        print(1, 2)\n        print(2, 1)\n    else:\n        print(n)\n        s = []\n        for i in range(n):\n            s.append(str(i + 1))\n        for i in range(n - 1, 0, -1):\n            print(' '.join(s))\n            tmp = s[0]\n            s[0] = s[i]\n            s[i] = tmp\n        print(' '.join(s))", "t = int(input())\nfor i in range(t):\n    numberPermutation = int(input())\n    permutation = list(map(str, range(1, numberPermutation + 1)))\n    text = ' '.join(permutation)\n    print(numberPermutation)\n    print(text)\n    for j in range(numberPermutation - 1):\n        (permutation[j], permutation[j + 1]) = (permutation[j + 1], permutation[j])\n        text = ' '.join(permutation)\n        print(text)", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        p = list(map(str, range(1, n + 1)))\n        print(n)\n        i = 0\n        while i < n:\n            print(' '.join(p))\n            (p[i], p[-1]) = (p[-1], p[i])\n            i += 1\nmain()", "for i in range(int(input())):\n    num = int(input())\n    lis = [str(x) for x in list(range(1, num + 1))]\n    line = []\n    line.append(' '.join(lis))\n    (lis[0], lis[-1]) = (lis[-1], lis[0])\n    line.append(' '.join(lis))\n    first = 1\n    last = -1\n    for x in range(num - 2):\n        (lis[first], lis[last]) = (lis[last], lis[first])\n        line.append(' '.join(lis))\n        last -= 1\n    print(num)\n    for x in line:\n        print(x)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    perm = [str(i + 1) for i in range(n)]\n    print(n)\n    print(' '.join(perm))\n    for i in range(1, n):\n        (perm[i], perm[i - 1]) = (perm[i - 1], perm[i])\n        print(' '.join(perm))", "for _ in range(int(input())):\n    n = int(input())\n    a = [str(i + 1) for i in range(n)]\n    print(n)\n    print(' '.join(a))\n    for i in range(2, n + 1):\n        (a[-i], a[-1]) = (a[-1], a[-i])\n        print(' '.join(a))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(str, range(1, n + 1)))\n    print(n)\n    for k in range(n):\n        print(' '.join(p))\n        (p[k], p[-1]) = (p[-1], p[k])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(n)\n    a = [0] * n\n    for i in range(n):\n        a[i] = str(i + 1)\n    print(' '.join(a))\n    for i in range(n - 1):\n        c = a[i] + ''\n        a[i] = a[i + 1] + ''\n        a[i + 1] = c + ''\n        print(' '.join(a))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(n)\n    a = []\n    for k in range(n):\n        a.append(str(k + 1))\n    for k in range(n):\n        s = ' '.join(a)\n        print(s)\n        if k != n - 1:\n            x = a[k]\n            a[k] = a[k + 1]\n            a[k + 1] = x", "for _ in range(int(input())):\n    n = int(input())\n    print(n)\n    x = [str(i) for i in range(1, n + 1)]\n    print(' '.join(x))\n    for i in range(n - 1):\n        (x[i], x[i + 1]) = (x[i + 1], x[i])\n        print(' '.join(x))", "x = int(input())\n\ndef cal(n):\n    t = []\n    p = [str(i) for i in range(1, n + 1)]\n    t.append(p)\n    for i in range(n - 1):\n        k = t[-1][:]\n        (k[i], k[n - 1]) = (k[n - 1], k[i])\n        t.append(k)\n    return t\nfor jj in range(x):\n    n = int(input())\n    a = cal(n)\n    print(n)\n    for i in range(n):\n        print(' '.join(a[i]))", "trials = int(input())\nanswer_list = []\nfor _ in range(trials):\n    i = int(input())\n    answer_list.append(i)\n    x = i - 2\n    li = []\n    for d in range(i):\n        li.append(str(d + 1))\n    answer_list.append(' '.join(li))\n    index = -1\n    while x >= 0:\n        index += 1\n        j = li[index]\n        li[index] = li[index + 1]\n        li[index + 1] = j\n        answer_list.append(' '.join(li))\n        x -= 1\nfor g in answer_list:\n    print(g)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    print(N)\n    lis = [str(x) for x in range(1, N + 1)]\n    string = ' '.join(lis)\n    print(string)\n    for i in range(0, N - 1):\n        (lis[i], lis[i + 1]) = (lis[i + 1], lis[i])\n        string = ' '.join(lis)\n        print(string)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(i + 1)\n        a[i] = str(a[i])\n    print(n)\n    print(' '.join(a))\n    for i in range(1, n):\n        temp = a[i]\n        a[i] = a[i - 1]\n        a[i - 1] = temp\n        print(' '.join(a))", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    print(n)\n    a0 = []\n    for i in range(n):\n        a0.append(str(i + 1))\n    temp = ' '.join(a0)\n    print(temp)\n    for i in range(n - 1):\n        (a0[i], a0[-1]) = (a0[-1], a0[i])\n        temp = ' '.join(a0)\n        print(temp)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(n)\n    a = list(map(str, range(1, n + 1)))\n    for i in range(n):\n        print(' '.join(a))\n        try:\n            (a[i], a[i + 1]) = (a[i + 1], a[i])\n        except:\n            continue", "def main():\n    n = int(input())\n    for i in range(n):\n        k = int(input())\n        a = [str(i) for i in range(1, k + 1)]\n        print(k)\n        print(' '.join(a))\n        for j in range(k - 1):\n            (a[j], a[j + 1]) = (a[j + 1], a[j])\n            print(' '.join(a))\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    arr = [str(x) for x in range(1, n + 1)]\n    print(n)\n    print(' '.join(arr))\n    (arr[0], arr[n - 1]) = (arr[n - 1], arr[0])\n    temp = n - 1\n    for i in range(n - 1):\n        print(' '.join(arr))\n        (arr[temp], arr[temp - 1]) = (arr[temp - 1], arr[temp])\n        temp -= 1", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    if n != 1:\n        answer = n\n    else:\n        answer = 1\n    print(answer)\n    l = []\n    for j in range(0, n):\n        l.append(str(j + 1))\n    print(' '.join(l))\n    if n == 1:\n        continue\n    else:\n        for k in range(0, n - 1):\n            (l[k], l[k + 1]) = (l[k + 1], l[k])\n            print(' '.join(l))", "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        print(n)\n        origin = list(map(str, range(1, n + 1)))\n        print(' '.join(origin))\n        for i in range(1, n):\n            (origin[i - 1], origin[i]) = (origin[i], origin[i - 1])\n            print(' '.join(origin))\nmain()", "t = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    arr = [str(i + 1) for i in range(n)]\n    print(n)\n    for i in range(n):\n        print(' '.join(arr))\n        if i == n - 1:\n            break\n        (arr[i], arr[i + 1]) = (arr[i + 1], arr[i])", "ncase = int(input())\nfor case in range(1, ncase + 1):\n    n = int(input())\n    print(n)\n    a = [str(i) for i in range(1, n + 1)]\n    print(' '.join(a))\n    i = 0\n    for i in range(n - 1):\n        (a[i], a[i + 1]) = (a[i + 1], a[i])\n        print(' '.join(a))", "def solve(n):\n    print(n)\n    ans = list(map(str, range(1, n + 1)))\n    print(' '.join(ans))\n    (ans[0], ans[-1]) = (ans[-1], ans[0])\n    p1 = n - 1\n    for i in range(n - 1):\n        print(' '.join(ans))\n        (ans[p1], ans[p1 - 1]) = (ans[p1 - 1], ans[p1])\n        p1 -= 1\n    return 0\nfor _ in range(int(input())):\n    n = int(input())\n    solve(n)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    permutation = [str(i) for i in range(1, n + 1)]\n    print(n)\n    for j in range(n - 1, -1, -1):\n        begin = permutation[0:j]\n        end = permutation[j:n - 1]\n        print(' '.join(begin) + (' ' if len(begin) > 0 else '') + str(n) + (' ' if len(end) > 0 else '') + ' '.join(end))", "def get(n):\n    print(n)\n    l = []\n    for x in range(1, n + 1):\n        l.append(str(x))\n    p = len(l)\n    print(stri(l))\n    i = 0\n    while i < p - 1:\n        (l[i], l[i + 1]) = (l[i + 1], l[i])\n        print(stri(l))\n        i = i + 1\n\ndef stri(l):\n    str1 = ''\n    for ele in l:\n        str1 += ele + ' '\n    return str1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    get(n)", "from typing import List\nn = int(input())\n\ndef printArray(array: List[int]):\n    print(str(array).replace(',', '').replace('[', '').replace(']', ''))\n\ndef printlongChain(size: int):\n    array = [i + 1 for i in range(size)]\n    printArray(array)\n    for i in range(size - 1):\n        aux = array[i]\n        array[i] = array[-1]\n        array[-1] = aux\n        printArray(array)\nfor i in range(n):\n    size = int(input())\n    print(size)\n    printlongChain(size)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(n)\n    seq = []\n    for j in range(n):\n        seq.append(str(j + 1))\n    print(' '.join(map(str, seq)))\n    for j in range(n, 1, -1):\n        (seq[j - 1], seq[j - 2]) = (seq[j - 2], seq[j - 1])\n        print(' '.join(map(str, seq)))", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        print(n)\n        cur = list(range(1, n + 1))\n        for i in range(n - 1):\n            print(' '.join(map(str, cur)))\n            t = cur[i]\n            cur[i] = cur[i + 1]\n            cur[i + 1] = t\n        print(' '.join(map(str, cur)))\nmain()", "def sol(n):\n    arr = [i for i in range(1, n + 1)]\n    print(n)\n    print(' '.join(map(str, arr)))\n    for i in range(n - 1, 0, -1):\n        (arr[i], arr[i - 1]) = (arr[i - 1], arr[i])\n        print(' '.join(map(str, arr)))\nx = int(input())\nfor _ in range(x):\n    n = int(input())\n    sol(n)", "test_cases = int(input())\nk = 1\nwhile k <= test_cases:\n    permutation_number = int(input())\n    print(permutation_number)\n    i = 1\n    S = [t + 1 for t in range(permutation_number)]\n    betterlist = ' '.join((repr(item) for item in S))\n    print(betterlist)\n    while i < permutation_number:\n        S.pop(i)\n        S.pop(0)\n        S.insert(0, i + 1)\n        S.insert(i, i)\n        betterlist = ' '.join((repr(item) for item in S))\n        print(betterlist)\n        i += 1\n    k += 1", "num_inp = lambda : int(input())\narr_inp = lambda : list(map(int, input().split()))\nsp_inp = lambda : map(int, input().split())\nstr_inp = lambda : input()\nt = num_inp()\nfor _ in range(t):\n    n = num_inp()\n    a = [i for i in range(1, n + 1)]\n    print(n)\n    print(' '.join(map(str, a)))\n    (a[0], a[-1]) = (a[-1], a[0])\n    for i in range(n - 1):\n        print(' '.join(map(str, a)))\n        (a[i], a[i + 1]) = (a[i + 1], a[i])", "import sys\ninput = sys.stdin.readline\n\ndef print(*args, end='\\n', sep=' ') -> None:\n    sys.stdout.write(sep.join(map(str, args)) + end)\nN = []\nfor t in range(int(input())):\n    N.append(int(input()))\nfor n in N:\n    print(n)\n    a = [i for i in range(1, n + 1)]\n    print(*a)\n    for i in range(n - 2):\n        (a[1], a[~i]) = (a[~i], a[1])\n        print(*a)\n    (a[0], a[-1]) = (a[-1], a[0])\n    print(*a)", "Tests = int(input())\nfor _ in range(Tests):\n    m = int(input())\n    n = [i + 1 for i in range(m)]\n    print(m)\n    print(' '.join(map(str, n)))\n    for i in range(m - 1):\n        (n[i], n[i + 1]) = (n[i + 1], n[i])\n        print(' '.join(map(str, n)))", "for tcase in range(int(input())):\n    n = int(input())\n    a = [i + 1 for i in range(n)]\n    print(n)\n    for i in range(n):\n        print(' '.join(map(str, a)))\n        (a[i], a[-1]) = (a[-1], a[i])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    p = list(range(1, n + 1))\n    print(n)\n    print(' '.join(map(str, p)))\n    (p[0], p[1]) = (p[1], p[0])\n    for i in range(2, n):\n        print(' '.join(map(str, p)))\n        (p[i], p[1]) = (p[1], p[i])\n    print(' '.join(map(str, p)))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(range(1, n + 1))\n    print(n)\n    print(' '.join(map(str, l)))\n    k = 0\n    for j in range(n - 1):\n        temp = l[k]\n        l[k] = l[k + 1]\n        l[k + 1] = temp\n        print(' '.join(map(str, l)))\n        k = k + 1", "t = int(input().strip())\n\ndef dontknowwhattowrite(n):\n    a = [n]\n    if n == 1:\n        return a\n    for i in range(n - 1):\n        a.append(i + 1)\n    return a\nfor _ in range(t):\n    n = int(input().strip())\n    print(n)\n    a = [x + 1 for x in range(n)]\n    print(str(a).replace(',', '').replace('[', '').replace(']', ''))\n    if n == 1:\n        continue\n    elif n == 2:\n        print('2 1')\n    if n >= 3:\n        for i in range(2, n + 1):\n            t = dontknowwhattowrite(i) + a[i:n]\n            print(str(t).replace(',', '').replace('[', '').replace(']', ''))", "for _ in range(int(input())):\n    n = int(input())\n    array = [i + 1 for i in range(n)]\n    print(n)\n    print(' '.join(map(str, array)))\n    idx = 0\n    while idx < len(array) - 1:\n        (array[idx], array[idx + 1]) = (array[idx + 1], array[idx])\n        print(' '.join(map(str, array)))\n        idx += 1", "for _ in range(int(input())):\n    L = [x for x in range(1, int(input()) + 1)]\n    n = len(L)\n    print(n)\n    print(' '.join(list(map(str, L))))\n    for j in range(1, n):\n        (L[0], L[j]) = (L[j], L[0])\n        print(' '.join(list(map(str, L))))", "def chain(n):\n    print(n)\n    ans = [i for i in range(1, n + 1)]\n    curr = 0\n    print(' '.join(list(map(str, ans))))\n    while curr < n - 1:\n        (ans[curr], ans[n - 1]) = (ans[n - 1], ans[curr])\n        print(' '.join(list(map(str, ans))))\n        curr += 1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    chain(n)", "t = int(input())\nfor case in range(t):\n    n = int(input())\n    perms = list()\n    first_permutation = [int(i) for i in range(1, n + 1)]\n    perms.append(first_permutation)\n    current_permutation = first_permutation.copy()\n    for i in range(n - 1):\n        aux = current_permutation[i]\n        current_permutation[i] = current_permutation[n - 1]\n        current_permutation[n - 1] = aux\n        perms.append(current_permutation.copy())\n    print(len(perms))\n    for i in range(len(perms)):\n        print(' '.join(map(str, perms[i])))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(n)\n    L = []\n    for j in range(1, n + 1):\n        L.append(j)\n    print(' '.join(map(str, L)))\n    i = n - 2\n    while i >= 0:\n        (L[n - 1], L[i]) = (L[i], L[n - 1])\n        print(' '.join(map(str, L)))\n        i -= 1", "import sys\nt = int(sys.stdin.readline())\nwhile t:\n    t -= 1\n    n = int(sys.stdin.readline())\n    a = list(range(1, n + 1))\n    print(n)\n    print(' '.join(map(str, a)))\n    for i in range(n - 1):\n        if i == 0:\n            (a[0], a[-1]) = (a[-1], a[0])\n        else:\n            (a[n - i - 1], a[n - i]) = (a[n - i], a[n - i - 1])\n        print(' '.join(map(str, a)))", "for z in range(int(input())):\n    n = int(input())\n    a1 = [i for i in range(1, n + 1)]\n    print(n)\n    print(' '.join(map(str, a1)))\n    for k in range(1, n):\n        temp = a1[n - k]\n        a1[n - k] = a1[n - k - 1]\n        a1[n - k - 1] = temp\n        print(' '.join(map(str, a1)))", "for _ in range(int(input())):\n    n = int(input())\n    print(n)\n    arr = [i for i in range(1, n + 1)]\n    for i in range(n):\n        print(' '.join(list(map(str, arr))))\n        if i != n - 1:\n            (arr[i], arr[i + 1]) = (arr[i + 1], arr[i])", "def ans(n):\n    r = []\n    a = []\n    for i in range(1, n + 1):\n        a.append(i)\n    l = a[0:n]\n    r.append(l)\n    for i in range(n - 1, 0, -1):\n        k = a[i]\n        a[i] = a[i - 1]\n        a[i - 1] = k\n        l = a[0:n]\n        r.append(l)\n    return r\nT = int(input())\nl = []\nfor _ in range(T):\n    n = int(input())\n    c = ans(n)\n    l.append(c)\nfor i in range(T):\n    print(len(l[i]))\n    for j in range(len(l[i])):\n        print(' '.join(map(str, l[i][j])))", "for i in range(int(input())):\n    n = int(input())\n    a = list(range(1, n + 1))\n    print(n)\n    print(' '.join(list(map(str, a))))\n    for i in range(n - 1):\n        temp = a[i + 1]\n        a[i + 1] = a[i]\n        a[i] = temp\n        print(' '.join(list(map(str, a))))", "test_cases = int(input())\nfor i in range(test_cases):\n    l = int(input())\n    print(l)\n    chain = list(range(1, l + 1))\n    print(' '.join([str(i) for i in chain]))\n    for i in range(l - 1):\n        (chain[l - (i + 1)], chain[l - (i + 2)]) = (chain[l - (i + 2)], chain[l - (i + 1)])\n        print(' '.join([str(i) for i in chain]))", "tests = int(input())\nfor _ in range(tests):\n    m = int(input())\n    n = [i + 1 for i in range(m)]\n    print(m)\n    print(' '.join(map(str, n)))\n    for i in range(m - 1):\n        (n[i], n[i + 1]) = (n[i + 1], n[i])\n        print(' '.join(map(str, n)))", "def printArr(arr):\n    s = ' '.join([str(x) for x in arr])\n    print(s)\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = [i for i in range(1, n + 1)]\n    print(n)\n    printArr(arr)\n    k = 0\n    while k < n - 1:\n        (arr[k], arr[k + 1]) = (arr[k + 1], arr[k])\n        printArr(arr)\n        k += 1\n    t -= 1", "numcase = int(input())\nre = []\n\ndef send(lis):\n    b = [str(j) for j in lis]\n    return ' '.join(b)\nfor i in range(numcase):\n    lenlis = int(input())\n    re.append(lenlis)\n    lis1 = []\n    for i in range(1, lenlis + 1):\n        lis1.append(i)\n    re.append(send(lis1))\n    for i in range(lenlis - 1):\n        a = lenlis - 1 - i\n        b = lenlis - 2 - i\n        (lis1[b], lis1[a]) = (lis1[a], lis1[b])\n        re.append(send(lis1))\nfor term in re:\n    print(term)", "def permutations():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        listinha = list(range(1, n + 1, 1))\n        print(n)\n        for i in range(n):\n            if i > 0:\n                (listinha[i - 1], listinha[i]) = (listinha[i], listinha[i - 1])\n            print(' '.join([str(x) for x in listinha]))\npermutations()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(n)\n    array = list(range(1, n + 1))\n    print(' '.join([str(i) for i in array]))\n    for i in range(n - 1):\n        (array[i + 1], array[0]) = (array[0], array[i + 1])\n        print(' '.join([str(i) for i in array]))", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    answer = []\n    array = [x for x in range(1, n + 1)]\n    answer.append(list(array))\n    for i in range(n - 1):\n        (array[i], array[i + 1]) = (array[i + 1], array[i])\n        answer.append(list(array))\n    print(n)\n    for arr in answer:\n        print(' '.join([str(x) for x in arr]))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(n)\n    array = list(range(1, n + 1))\n    print(' '.join([str(i) for i in array]))\n    for i in range(n - 1):\n        (array[i + 1], array[0]) = (array[0], array[i + 1])\n        print(' '.join([str(i) for i in array]))", "for _ in range(int(input())):\n    n = int(input())\n    print(n)\n    l = [i for i in range(1, n + 1)]\n    print(' '.join((str(a) for a in l)))\n    x = l[n - 1]\n    l[n - 1] = l[0]\n    l[0] = x\n    j = n - 1\n    print(' '.join((str(a) for a in l)))\n    for _ in range(n - 2):\n        y = l[j]\n        l[j] = l[j - 1]\n        l[j - 1] = y\n        j -= 1\n        print(' '.join((str(a) for a in l)))", "def swap(a, i, j):\n    (a[i], a[j]) = (a[j], a[i])\n    return a\n\ndef repr(a):\n    print(' '.join([str(i) for i in a]))\n\ndef permu(n):\n    print(n)\n    arr = [i for i in range(1, n + 1)]\n    repr(arr)\n    for i in range(2, n + 1)[::-1]:\n        arr = swap(arr, i - 1, i - 2)\n        repr(arr)\nk = int(input())\nfor _ in range(k):\n    permu(int(input()))", "def solve():\n    n = int(input())\n    a = list(range(1, n + 1))\n    print(n)\n    print(' '.join((str(i) for i in a)))\n    for i in range(n - 1):\n        (a[i], a[i + 1]) = (a[i + 1], a[i])\n        print(' '.join((str(j) for j in a)))\nfor _ in range(int(input())):\n    ans = solve()", "def swap(arr, i1, i2):\n    (arr[i1], arr[i2]) = (arr[i2], arr[i1])\n    return arr\nfor i in range(int(input())):\n    n = int(input())\n    arr = [k for k in range(1, n + 1)]\n    print(n)\n    for i in range(n - 1):\n        print(' '.join([str(num) for num in arr]))\n        arr = swap(arr, i, n - 1)\n    print(' '.join([str(num) for num in arr]))", "def solve():\n    n = int(input())\n    tc = list()\n    for i in range(n):\n        tc.append(int(input()))\n    for test in tc:\n        initial = [_ for _ in range(1, test + 1)]\n        last = [initial[-1]] + initial\n        last.pop()\n        print(test)\n        print(arrToStr(initial))\n        l = 0\n        r = test - 1\n        c = True\n        for i in range(test - 1):\n            t = initial[l]\n            initial[l] = initial[r]\n            initial[r] = t\n            if c:\n                l += 1\n                c = False\n            else:\n                r -= 1\n                c = True\n            print(arrToStr(initial))\n\ndef arrToStr(arr):\n    s = ''\n    for val in arr:\n        s += f'{val} '\n    s = s[0:len(s) - 1]\n    return s\nsolve()", "for _ in range(int(input())):\n    n = int(input())\n    print(n)\n    l = [i for i in range(1, n + 1)]\n    print(' '.join((str(a) for a in l)))\n    x = l[n - 1]\n    l[n - 1] = l[0]\n    l[0] = x\n    j = n - 1\n    print(' '.join((str(a) for a in l)))\n    for _ in range(n - 2):\n        y = l[j]\n        l[j] = l[j - 1]\n        l[j - 1] = y\n        j -= 1\n        print(' '.join((str(a) for a in l)))", "t = int(input())\nsol = []\nfor _ in range(t):\n    n = int(input())\n    s = []\n    nums = [i for i in range(n)]\n    s.append(nums)\n    for i in range(1, n):\n        nums = nums[:]\n        tmp = nums[i]\n        nums[i] = nums[i - 1]\n        nums[i - 1] = tmp\n        s.append(nums)\n    sol.append(s)\nfor s in sol:\n    print(len(s))\n    for si in s:\n        print(' '.join([str(i + 1) for i in si]))", "def main():\n    output = 0\n    N = int(input())\n    l = [i + 1 for i in range(N)]\n    x = 0\n    print(N)\n    while x < N - 1:\n        print(' '.join((str(z) for z in l)))\n        if x % 2 == 0:\n            t = l[0]\n            l[0] = l[x + 1]\n            l[x + 1] = t\n        else:\n            t = l[1]\n            l[1] = l[x + 1]\n            l[x + 1] = t\n        x += 1\n    print(' '.join((str(z) for z in l)))\n    return output\nnum_of_cases = [int(i) for i in input().split()][0]\nfor p in range(num_of_cases):\n    output = main()", "def permutation_chain(n):\n    k = [i for i in range(1, n + 1)]\n    print(' '.join((str(i) for i in k)))\n    for i in range(n - 1):\n        (k[i], k[i + 1]) = (k[i + 1], k[i])\n        print(' '.join((str(i) for i in k)))\nnum_cases = int(input())\nfor i in range(num_cases):\n    case_value = int(input())\n    print(case_value)\n    permutation_chain(case_value)", "import math\nt = int(input())\n\ndef solve():\n    n = int(input())\n    arr = [i for i in range(1, n + 1)]\n    brr = [i for i in range(1, n + 1)]\n    print(n)\n    print(' '.join((str(ele) for ele in brr)))\n    for i in range(1, n):\n        curr = brr.pop(i)\n        brr = [curr] + brr\n        print(' '.join((str(ele) for ele in brr)))\n        brr = arr.copy()\nwhile t:\n    solve()\n    t -= 1", "tests = int(input())\nnums = []\nsave = []\nfor i in range(tests):\n    n = int(input())\n    save.append(n)\n    p = list(range(1, n + 1))\n    nums.append(p)\nfor j in range(tests):\n    print(max(nums[j]))\n    print(' '.join((str(e) for e in nums[j])))\n    lt = nums[j]\n    for m in range(len(lt) - 1, 0, -1):\n        templist = lt\n        (templist[0], templist[m]) = (templist[m], templist[0])\n        print(' '.join((str(x) for x in templist)))", "def fixedness(a):\n    f = 0\n    for (k, v) in enumerate(a):\n        if k + 1 == v:\n            f += 1\n    return f\n\ndef permute(n):\n    perm = {}\n    SIZE = n\n    n = [v + 1 for v in range(n)]\n    a = n.copy()\n    f = fixedness(a)\n    perm[f] = a.copy()\n    for i in range(SIZE - 1, 1, -1):\n        (a[i], a[i - 1]) = (a[i - 1], a[i])\n        f = fixedness(a)\n        if perm.get(f) == None:\n            perm[f] = a.copy()\n    (a[0], a[1]) = (a[1], a[0])\n    f = fixedness(a)\n    perm[f] = a.copy()\n    perm = dict(sorted(perm.items(), reverse=True))\n    return perm\n\ndef main():\n    t = input()\n    t = int(t)\n    for i in range(t):\n        n = input()\n        n = int(n)\n        p = permute(n)\n        print(n)\n        for k in p:\n            v = ' '.join([str(d) for d in p[k]])\n            print(v)\nmain()", "def findF(perm):\n    f = 0\n    for (i, elem) in enumerate(perm):\n        if i + 1 == elem:\n            f += 1\n    return f\n\ndef solveFor(x):\n    a = [i + 1 for i in range(x)]\n    iterations = []\n    f = x\n    iterations.append(' '.join([str(i) for i in a.copy()]))\n    for (i, _) in enumerate(a):\n        (a[0], a[i]) = (a[i], a[0])\n        _f = findF(a)\n        if _f < f:\n            f = _f\n            iterations.append(' '.join([str(i) for i in a.copy()]))\n    return '\\n'.join(iterations)\nfor _ in range(int(input())):\n    x = int(input())\n    print(x)\n    print(solveFor(x))", "from sys import stdin\nrd = stdin.readline\nfor _ in range(int(rd())):\n    n = int(rd())\n    print(n)\n    l = [i for i in range(1, n + 1)]\n    print(' '.join(map(str, l)))\n    while l[0] != n:\n        x = l.index(n)\n        (l[x], l[x - 1]) = (l[x - 1], l[x])\n        print(' '.join(map(str, l)))", "def listToString(s):\n    str1 = ''\n    for ele in s:\n        str1 += str(ele) + ' '\n    print(str1)\n\ndef permutations(n):\n    list2 = []\n    list = [i + 1 for i in range(n)]\n    for i in range(n):\n        listToString([list[i]] + list[:i] + list[i + 1:])\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(n)\n    permutations(n)", "def listToString(s):\n    str1 = ''\n    for ele in s:\n        str1 += str(ele) + ' '\n    print(str1)\n\ndef permutations(n):\n    list2 = []\n    list = [i + 1 for i in range(n)]\n    for i in range(n):\n        listToString([list[i]] + list[:i] + list[i + 1:])\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(n)\n    permutations(n)", "def invr():\n    return map(int, input().split())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef printlis(lis):\n    ans = ''\n    for i in lis:\n        ans += str(i) + ' '\n    print(ans)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        lis = list(range(1, n + 1))\n        print(n)\n        printlis(lis)\n        a = lis[0]\n        lis[0] = lis[n - 1]\n        lis[n - 1] = a\n        printlis(lis)\n        for i in range(n - 2):\n            a = lis[n - i - 1]\n            lis[n - i - 1] = lis[n - i - 2]\n            lis[n - i - 2] = a\n            printlis(lis)\nmain()", "def LtoS(L):\n    s = ''\n    for i in range(len(L)):\n        s += str(L[i])\n        s += ' '\n    return s\n\ndef iffixed(e, L):\n    if L.index(e) == e - 1:\n        return True\n    else:\n        return False\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    L = []\n    for j in range(n):\n        L.append(j + 1)\n    print(n)\n    print(LtoS(L))\n    for k in range(len(L)):\n        a = 0\n        b = 0\n        if k == 0:\n            pass\n        elif k == 1:\n            (L[0], L[1]) = (L[1], L[0])\n            print(LtoS(L))\n        elif iffixed(L[k], L):\n            a = L[k]\n            b = L[0]\n            (L[L.index(a)], L[L.index(b)]) = (L[L.index(b)], L[L.index(a)])\n            print(LtoS(L))\n        else:\n            pass", "t = int(input())\nque = []\nfor _ in range(t):\n    que.append(int(input()))\nfor i in que:\n    print(i)\n    ans1 = list(range(i + 1))[1:]\n    s = ''\n    for _ in ans1:\n        s = s + str(_) + ' '\n    s = s.rstrip()\n    print(s)\n    x = len(ans1) - 1\n    y = len(ans1) - 2\n    for _ in range(i - 1):\n        (ans1[x], ans1[y]) = (ans1[y], ans1[x])\n        x -= 1\n        y -= 1\n        s = ''\n        for _ in ans1:\n            s = s + str(_) + ' '\n        s = s.rstrip()\n        print(s)", "t = int(input())\nfor _ in range(t):\n    a = []\n    f = []\n    k = int(input())\n    print(k)\n    a.append(list(range(1, k + 1)))\n    f.append(k)\n    for i in range(k):\n        print(' '.join((str(x) for x in a[i])))\n        ai = a[i]\n        fi = f[i]\n        if f[i] == k:\n            (ai[i], ai[i + 1]) = (ai[i + 1], ai[i])\n            fi -= 2\n        else:\n            (swp1, swp2) = (-1, -1)\n            for (j, e) in enumerate(ai):\n                if e != j + 1 and swp1 == -1:\n                    swp1 = j\n                elif e == j + 1 and swp2 == -1:\n                    swp2 = j\n                elif swp1 != -1 and swp2 != -1:\n                    break\n            (ai[swp1], ai[swp2]) = (ai[swp2], ai[swp1])\n            fi -= 1\n        a.append(ai)\n        f.append(fi)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    for i in range(1, n + 1):\n        arr.append(i)\n    print(n)\n    st = ''\n    for i in arr:\n        st += str(i) + ' '\n    print(st)\n    for i in range(n - 1):\n        arr[i] = arr[i + 1]\n        arr[i + 1] = 1\n        st = ''\n        for i in arr:\n            st += str(i) + ' '\n        print(st)", "for _ in range(int(input())):\n    n = int(input())\n    a1 = [ele for ele in range(1, n + 1)]\n    print(n)\n    s = ''\n    for ele in a1:\n        s += str(ele) + ' '\n    print(s)\n    for i in range(n - 1, 0, -1):\n        a = a1[i]\n        a1[i] = a1[i - 1]\n        a1[i - 1] = a\n        s = ''\n        for e in a1:\n            s += str(e) + ' '\n        print(s)", "import math\nn = int(input())\nfor i in range(n):\n    x = int(input())\n    print(x)\n    z = []\n    for j in range(x):\n        z.append(j + 1)\n    n = ''\n    for l in range(x):\n        n = n + str(z[l]) + ' '\n    print(n)\n    for j in range(x - 1):\n        f = z[j]\n        z[j] = z[j + 1]\n        z[j + 1] = f\n        m = ''\n        for l in range(x):\n            m = m + str(z[l]) + ' '\n        print(m)", "n = int(input())\nfor _ in range(n):\n    data = int(input())\n    perms = []\n    aux = []\n    for i in range(data):\n        aux.append(i + 1)\n    perms.append(aux)\n    for i in range(data - 1):\n        aux = perms[i].copy()\n        (aux[i], aux[-1]) = (aux[-1], aux[i])\n        perms.append(aux)\n    print(data)\n    for i in perms:\n        st = ''\n        for j in i:\n            st += str(j)\n            st += ' '\n        print(st)", "def swap(arr, i, j):\n    aux = arr[i]\n    arr[i] = arr[j]\n    arr[j] = aux\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(n)\n    first_permutation = [str(k) for k in range(1, n + 1)]\n    print(*first_permutation)\n    swap(first_permutation, 0, n - 1)\n    print(*first_permutation)\n    i = n - 2\n    while i > 0:\n        swap(first_permutation, i + 1, i)\n        print(*first_permutation)\n        i -= 1", "reps = int(input())\nfor _ in range(reps):\n    n = int(input())\n    print(n)\n    arr = list(range(1, n + 1))\n    print(*arr)\n    for i in range(1, n):\n        (arr[i - 1], arr[i]) = (arr[i], arr[i - 1])\n        print(*arr)", "n = int(input())\nfor i in range(n):\n    s = int(input())\n    print(s)\n    l = list(range(1, s + 1))\n    print(*l)\n    for j in range(s - 1):\n        (l[j], l[s - 1]) = (l[s - 1], l[j])\n        print(*l)", "for _ in range(int(input())):\n    n = int(input())\n    k = []\n    for i in range(n):\n        k.append(i + 1)\n    i = 1\n    print(n)\n    print(*k)\n    while i < len(k):\n        (k[0], k[i]) = (k[i], k[0])\n        i += 1\n        print(*k)", "r = range\nfor n in [*open(0)][1:]:\n    print((n := int(n)))\n    for i in r(2, n + 2):\n        print(*r(2, i), 1, *r(i, n + 1))", "k = int(input())\nfor _ in range(k):\n    n = int(input())\n    a = [i + 1 for i in range(n)]\n    print(n)\n    print(*a)\n    for i in range(n - 1):\n        (a[i], a[i + 1]) = (a[i + 1], a[i])\n        print(*a)", "from collections import deque\nfrom math import gcd, factorial, sqrt, pi\nfrom functools import lru_cache\nfrom itertools import permutations\nI = lambda : input()\nIN = lambda : int(input())\nM = lambda : map(int, input().strip().split())\nL = lambda : list(map(int, input().strip().split()))\nLCHR = lambda : [i for i in input()]\nLW = lambda : [i for i in input().split()]\nLCM = lambda a, b: a * b // gcd(a, b)\nfor _ in range(IN()):\n    n = IN()\n    l = [i for i in range(1, n + 1)]\n    print(n)\n    print(*l)\n    for i in range(1, n):\n        (l[i], l[i - 1]) = (l[i - 1], l[i])\n        print(*l)", "def inp_a():\n    return [int(x) for x in input().split()]\n\ndef inp_s(k):\n    arr = []\n    for i in range(k):\n        arr.append(input())\n    return arr\n\ndef help(n):\n    count = 1\n    ans = []\n    p = []\n    for i in range(1, n + 1):\n        p.append(i)\n    ans.append(list(p))\n    (p[0], p[-1]) = (p[-1], p[0])\n    ans.append(list(p))\n    count = 2\n    for i in range(n - 2):\n        (p[i], p[i + 1]) = (p[i + 1], p[i])\n        ans.append(list(p))\n        count += 1\n    return (count, ans)\nfor _ in range(int(input())):\n    n = int(input())\n    (c, a) = help(n)\n    print(c)\n    for i in a:\n        print(*i)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    print(n)\n    for i in range(1, n + 1):\n        l.append(i)\n        c = l.copy()\n    print(*l)\n    for i in range(n - 1):\n        (l[i], l[i + 1]) = (l[i + 1], l[i])\n        print(*l)", "for i in range(int(input())):\n    length = int(input())\n    list1 = []\n    for j in range(1, length + 1):\n        list1.append(j)\n    if length == 1:\n        print(length)\n        print(*list1)\n    else:\n        print(length)\n        print(*list1)\n        (list1[0], list1[1]) = (list1[1], list1[0])\n        position = 2\n        print(*list1)\n        while position != length:\n            (list1[position - 1], list1[position]) = (list1[position], list1[position - 1])\n            position += 1\n            print(*list1)", "for i in range(int(input())):\n    n = int(input())\n    print(n)\n    lst = []\n    flag = n - 1\n    temp = 0\n    for j in range(1, n + 1):\n        lst.append(j)\n    print(*lst)\n    for j in range(n - 1):\n        (lst[flag], lst[flag - 1]) = (lst[flag - 1], lst[flag])\n        flag -= 1\n        print(*lst)", "import sys\nfrom os import path\nimport os\nfrom collections import defaultdict\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nfor _ in range(int(input())):\n    n = int(input())\n    a = [i for i in range(1, n + 1)]\n    print(n)\n    m = n\n    i = 0\n    while m:\n        print(*a)\n        (a[i], a[i + 1]) = (a[i + 1], a[i])\n        i -= 1\n        m -= 1"]