["def solve(n, arr):\n    n_0 = arr.count(0)\n    k = arr[:n_0].count(1)\n    mod = 998244353\n    _sum = 0\n    for i in range(1, k + 1):\n        _sum += pow(i * i, -1, mod)\n    return n * (n - 1) // 2 * _sum % mod\nT = int(input().strip())\nfor i in range(T):\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split()))\n    print(solve(n, arr))", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    k = sum(a)\n    st = sum(a[-k:])\n    ans = sum((n * (n - 1) // 2 * pow(k - i, -2, 998244353) for i in range(st, k))) % 998244353\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    k = sum(a)\n    st = sum(a[-k:])\n    ans = sum((n * (n - 1) // 2 * pow(k - i, -2, 998244353) for i in range(st, k))) % 998244353\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    k = sum(a)\n    st = sum(a[-k:])\n    ans = sum((n * (n - 1) // 2 * pow(k - i, -2, 998244353) for i in range(st, k))) % 998244353\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    k = sum(a)\n    st = sum(a[-k:])\n    ans = sum((n * (n - 1) // 2 * pow(k - i, -2, 998244353) for i in range(st, k))) % 998244353\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    k = sum(a)\n    st = sum(a[-k:])\n    ans = sum((n * (n - 1) // 2 * pow(k - i, -2, 998244353) for i in range(st, k))) % 998244353\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    k = sum(a)\n    st = sum(a[-k:])\n    ans = sum((n * (n - 1) // 2 * pow(k - i, -2, 998244353) for i in range(st, k))) % 998244353\n    print(ans)", "def invr() -> list:\n    return list(map(int, input().split()))\nP = 998244353\n\ndef modular_solver(a, P):\n    return pow(a, P - 2, P) % P\n\ndef qpow(n, m) -> int:\n    res = 1\n    base = n\n    while m != 0:\n        if m & 1 == 1:\n            res *= base % P\n        base *= base % P\n        m = m >> 1\n    return res\n\ndef problem():\n    n = int(input())\n    sequence = invr()\n    count_zero = n - sum(sequence)\n    least_swap_count = sum(sequence[:count_zero])\n    numerator = n * (n - 1) // 2\n    i = 1\n    expect_individual: list = []\n    while i <= least_swap_count:\n        expect_individual.append(modular_solver(pow(i, 2), P) % P)\n        i += 1\n    expect = numerator % P * sum(expect_individual) % P\n    return expect\nt = int(input())\nfor _ in range(t):\n    ans = problem()\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (x, sum, e, fuck) = [0, 0, 0, n * (n - 1)]\n    for i in range(0, n):\n        if a[i] == 0:\n            sum += a[x]\n            x += 1\n    for i in range(1, sum + 1):\n        e += fuck * pow(i * i, 998244351, 998244353)\n    print(e * 499122177 % 998244353)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (c, s, e, p) = [0, 0, 0, n * (n - 1)]\n    for i in range(0, n):\n        if a[i] == 0:\n            s += a[c]\n            c += 1\n    for i in range(1, s + 1):\n        e += p * pow(i * i, 998244351, 998244353)\n    print(e * 499122177 % 998244353)", "P = 998244353\n\ndef modular_solver(a, b, P):\n    return b * pow(a, P - 2, P) % P\n\ndef problem():\n    n = int(input())\n    sequence = [int(_) for _ in input().split()]\n    count_zero = n - sum(sequence)\n    least_swap_count = sum(sequence[:count_zero])\n    numerator = n * (n - 1) // 2\n    expect_individual = [modular_solver(pow(i + 1, 2), 1, P) % P for i in range(least_swap_count)]\n    expect = numerator % P * sum(expect_individual) % P\n    return expect\nt = int(input())\nfor _ in range(t):\n    ans = problem()\n    print(ans)", "mod = 998244353\nfor _ in range(int(input())):\n    n = int(input())\n    (s, a, b, cnt) = (0, (n - 1) * n, 0, 0)\n    v = list(map(int, input().split()))\n    for i in v:\n        if i == 0:\n            s += v[cnt]\n            cnt += 1\n    for i in range(s):\n        b += a * pow((i + 1) * (i + 1), mod - 2, mod)\n    b = b * 499122177 % mod\n    print(b)", "for _ in range(int(input())):\n    n = int(input())\n    t = list(map(int, input().split()))\n    (c, s, e, p) = [0, 0, 0, n * (n - 1)]\n    for i in range(0, n):\n        if t[i] == 0:\n            s += t[c]\n            c += 1\n    for i in range(1, s + 1):\n        e += p * pow(i * i, 998244351, 998244353)\n    print(e * 499122177 % 998244353)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (c, s, e, p) = [0, 0, 0, n * (n - 1)]\n    for i in range(0, n):\n        if a[i] == 0:\n            s += a[c]\n            c += 1\n    for i in range(1, s + 1):\n        e += p * pow(i * i, 998244351, 998244353)\n    print(e * 499122177 % 998244353)", "for tc in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    cap = 0\n    sun = 0\n    exp = 0\n    mod = 998244353\n    power = n * (n - 1)\n    for i in range(0, n):\n        if arr[i] == 0:\n            sun += arr[cap]\n            cap = cap + 1\n    for i in range(1, sun + 1):\n        exp += power * pow(i * i, 998244351, mod)\n    print(exp * 499122177 % mod)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (c, s, e, p) = [0, 0, 0, n * (n - 1)]\n    for i in range(0, n):\n        if a[i] == 0:\n            s += a[c]\n            c += 1\n    for i in range(1, s + 1):\n        e += p * pow(i * i, 998244351, 998244353)\n    print(e * 499122177 % 998244353)"]