["for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    s = s.replace('b b', 'b')\n    s = s.replace('a a', 'a')\n    s = s.replace(' ', '')\n    while len(s) != n:\n        s += 'a'\n    print(s)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if len(s) == 2:\n        s = s + 'a'\n    else:\n        s = s.replace('b b', 'b')\n        s = s.replace('a a', 'a')\n        s = s.replace('a b', 'ab')\n        s = s.replace('b a', 'ba')\n        if len(s) < n:\n            s = s + 'a'\n    print(s)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    s = input()\n    s = s.replace('b b', 'b')\n    s = s.replace('a a', 'a')\n    s = s.replace(' ', '')\n    if n > len(s):\n        s += 'a' * (n - len(s))\n    print(s)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    ls = input()\n    ls = ls.replace('b b', 'b')\n    ls = ls.replace('a a', 'a')\n    ls = ls.replace(' ', '')\n    while len(ls) != n:\n        ls += 'a'\n    print(ls)", "for t in range(int(input())):\n    n = int(input())\n    b = input()\n    b = b.replace('b b', 'b')\n    b = b.replace('a a', 'a')\n    b = b.replace(' ', '')\n    while len(b) != n:\n        b += 'a'\n    print(b)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    s = s.replace('a a', 'a')\n    s = s.replace('b b', 'b')\n    s = s.replace(' ', '')\n    while len(s) != n:\n        s += 'a'\n    print(s)", "for t in range(int(input())):\n    n = int(input())\n    b = input()\n    b = b.replace('b b', 'b')\n    b = b.replace('a a', 'a')\n    b = b.replace(' ', '')\n    while len(b) != n:\n        b += 'a'\n    print(b)", "for t in range(int(input())):\n    n = int(input())\n    b = input()\n    b = b.replace('b b', 'b')\n    b = b.replace('a a', 'a')\n    b = b.replace(' ', '')\n    while len(b) != n:\n        b += 'a'\n    print(b)", "t = int(input())\ns = ''\n\ndef read_input():\n    return input().split()\n\ndef calc(s):\n    r = s[0]\n    for i in s[1:]:\n        if r[-1] != i[0]:\n            r += i\n        else:\n            r += i[1]\n    return r\n\ndef display(r, n):\n    if len(r) != n:\n        r += 'a'\n    print(r)\nwhile t != 0:\n    n = int(input())\n    s = read_input()\n    r = calc(s)\n    display(r, n)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    s = s.replace('a a', 'a')\n    s = s.replace('b b', 'b')\n    s = s.replace(' ', '')\n    while len(s) != n:\n        s += 'a'\n    print(s)", "import sys\nimport bisect\nimport math\nfrom collections import deque\ninput = lambda : sys.stdin.readline().strip()\nmod = 10 ** 9 + 7\n\ndef solve():\n    n = int(input())\n    a = input().split()\n    for i in range(1, len(a)):\n        if a[i][0] != a[i - 1][-1]:\n            return ''.join((a[j][0] for j in range(i))) + a[i - 1][1] + ''.join((a[j][0] for j in range(i, len(a)))) + a[-1][1]\n    return ''.join((x[0] for x in a)) + a[-1][1] * 2\nt = 1\nt = int(input())\nfor _ in range(t):\n    print(solve())", "def main():\n    T = int(input())\n    for t in range(T):\n        n = int(input())\n        w = list(input().strip().split(' '))\n        word = w[0]\n        for l in w[1:]:\n            if l[0] == word[-1]:\n                word += l[1]\n            else:\n                word += l\n        if len(word) != n:\n            word += 'a'\n        print(word)\nmain()", "import sys\ninput = iter(sys.stdin.read().splitlines()).__next__\n\ndef solve(N, A):\n    res = A[0][0]\n    mismatch_found = False\n    for i in range(1, N - 2):\n        if A[i - 1][1] != A[i][0]:\n            mismatch_found = True\n            res += A[i - 1][1]\n        res += A[i][0]\n    res += A[-1][1]\n    if not mismatch_found:\n        res += 'a'\n    return res\nTC = int(input())\nfor tc in range(TC):\n    N = int(input())\n    A = list(input().split())\n    res = solve(N, A)\n    print(res)", "def solve(bigrams, length):\n    prev = bigrams[0]\n    for (i, bigram) in enumerate(bigrams[1:]):\n        if prev[1] != bigram[0]:\n            bigrams.insert(i + 1, f'{prev[1]}{bigram[0]}')\n            break\n        prev = bigram\n    ans = bigrams[0]\n    for bigram in bigrams[1:-2]:\n        ans += bigram[1]\n    ans += bigrams[-1]\n    while len(ans) < length:\n        ans += 'a'\n    print(ans[:length])\nC = int(input())\nfor _ in range(C):\n    L = int(input())\n    bigrams = input().split(' ')\n    solve(bigrams, L)", "class Solution:\n\n    def find(self, k, arr):\n        string = arr[0]\n        for i in range(1, len(arr), 1):\n            if arr[i][0] == string[-1]:\n                string += arr[i][1]\n            else:\n                string += arr[i]\n        while len(string) < k:\n            string += 'a'\n        print(string[:k])\nt = int(input())\nobj = Solution()\nfor _ in range(t):\n    k = int(input())\n    obj.find(k, input().split())", "k = int(input())\nfor i in range(k):\n    n = int(input())\n    ans = list()\n    l = input().split()\n    ans.append(l[0][0])\n    for (x, y) in zip(l[:-1], l[1:]):\n        if x[1] == y[0]:\n            ans.append(x[1])\n        else:\n            ans.append(x[1])\n            ans.append(y[0])\n    ans.append(l[-1][1])\n    if len(ans) < n:\n        ans.append('a')\n    print(''.join(ans))", "from sys import stdin\ntest = int(stdin.readline())\nfor t in range(test):\n    n = int(stdin.readline())\n    strings = stdin.readline().rstrip().split()\n    ans = strings[0]\n    for i in range(1, len(strings)):\n        if ans[-1] == strings[i][0]:\n            ans = ans + strings[i][1:]\n        else:\n            ans = ans + strings[i]\n    if len(ans) == n:\n        print(ans)\n    else:\n        print(ans + 'a')", "import sys\n\ndef parseInput():\n    rawInput = sys.stdin.read().split('\\n')\n    rawInput = rawInput[1:-1]\n    inputs = rawInput[1::2]\n    return inputs\n\ndef createOriginalString(bigrams):\n    extraBigramAdded = False\n    originalString = ''\n    for bigram in bigrams.split():\n        if originalString == '':\n            originalString = bigram\n        elif bigram[0] == originalString[-1]:\n            originalString += bigram[1]\n        else:\n            originalString += bigram\n            extraBigramAdded = True\n    if extraBigramAdded == False:\n        originalString += 'a'\n    return originalString\nfor bigrams in parseInput():\n    print(createOriginalString(bigrams))", "class Solution:\n\n    def find(self, k, arr):\n        string = arr[0]\n        for i in range(1, len(arr), 1):\n            if arr[i][0] == string[-1]:\n                string += arr[i][1]\n            else:\n                string += arr[i]\n        while len(string) < k:\n            string += 'a'\n        print(string[:k])\nt = int(input())\nobj = Solution()\nfor _ in range(t):\n    k = int(input())\n    obj.find(k, input().split())", "class Solution:\n\n    def find(self, k, arr):\n        string = arr[0]\n        for i in range(1, len(arr), 1):\n            if arr[i][0] == string[-1]:\n                string += arr[i][1]\n            else:\n                string += arr[i]\n        while len(string) < k:\n            string += 'a'\n        print(string[:k])\nt = int(input())\nobj = Solution()\nfor _ in range(t):\n    k = int(input())\n    obj.find(k, input().split())", "class Solution:\n\n    def find(self, k, arr):\n        string = arr[0]\n        for i in range(1, len(arr), 1):\n            if arr[i][0] == string[-1]:\n                string += arr[i][1]\n            else:\n                string += arr[i]\n        while len(string) < k:\n            string += 'a'\n        print(string[:k])\nt = int(input())\nobj = Solution()\nfor _ in range(t):\n    k = int(input())\n    obj.find(k, input().split())", "class Solution:\n\n    def find(self, k, arr):\n        string = arr[0]\n        for i in range(1, len(arr), 1):\n            if arr[i][0] == string[-1]:\n                string += arr[i][1]\n            else:\n                string += arr[i]\n        while len(string) < k:\n            string += 'a'\n        print(string[:k])\nt = int(input())\nobj = Solution()\nfor _ in range(t):\n    k = int(input())\n    obj.find(k, input().split())", "class Solution:\n\n    def find(self, k, arr):\n        string = arr[0]\n        for i in range(1, len(arr), 1):\n            if arr[i][0] == string[-1]:\n                string += arr[i][1]\n            else:\n                string += arr[i]\n        while len(string) < k:\n            string += 'a'\n        print(string[:k])\nt = int(input())\nobj = Solution()\nfor _ in range(t):\n    k = int(input())\n    obj.find(k, input().split())", "class Solution:\n\n    def find(self, w, q):\n        string = q[0]\n        for i in range(1, len(q), 1):\n            if q[i][0] == string[-1]:\n                string += q[i][1]\n            else:\n                string += q[i]\n        while len(string) < w:\n            string += 'a'\n        print(string[:w])\nt = int(input())\nobj = Solution()\nfor _ in range(t):\n    w = int(input())\n    obj.find(w, input().split())", "class Solution:\n\n    def find(self, k, arr):\n        string = arr[0]\n        for i in range(1, len(arr), 1):\n            if arr[i][0] == string[-1]:\n                string += arr[i][1]\n            else:\n                string += arr[i]\n        while len(string) < k:\n            string += 'a'\n        print(string[:k])\nt = int(input())\nobj = Solution()\nfor _ in range(t):\n    k = int(input())\n    obj.find(k, input().split())", "class Solution:\n\n    def find(self, k, arr):\n        string = arr[0]\n        for i in range(1, len(arr), 1):\n            if arr[i][0] == string[-1]:\n                string += arr[i][1]\n            else:\n                string += arr[i]\n        while len(string) < k:\n            string += 'a'\n        print(string[:k])\nt = int(input())\nobj = Solution()\nfor _ in range(t):\n    k = int(input())\n    obj.find(k, input().split())", "class Solution:\n\n    def find(self, k, arr):\n        string = arr[0]\n        for i in range(1, len(arr), 1):\n            if arr[i][0] == string[-1]:\n                string += arr[i][1]\n            else:\n                string += arr[i]\n        while len(string) < k:\n            string += 'a'\n        print(string[:k])\nt = int(input())\nobj = Solution()\nfor _ in range(t):\n    k = int(input())\n    obj.find(k, input().split())", "class Solution:\n\n    def find(self, k, arr):\n        string = arr[0]\n        for i in range(1, len(arr), 1):\n            if arr[i][0] == string[-1]:\n                string += arr[i][1]\n            else:\n                string += arr[i]\n        while len(string) < k:\n            string += 'a'\n        print(string[:k])\nt = int(input())\nobj = Solution()\nfor _ in range(t):\n    k = int(input())\n    obj.find(k, input().split())", "class Solution:\n\n    def find(self, k, arr):\n        string = arr[0]\n        for i in range(1, len(arr), 1):\n            if arr[i][0] == string[-1]:\n                string += arr[i][1]\n            else:\n                string += arr[i]\n        while len(string) < k:\n            string += 'a'\n        print(string[:k])\nt = int(input())\nobj = Solution()\nfor _ in range(t):\n    k = int(input())\n    obj.find(k, input().split())", "class Solution:\n\n    def find(self, k, arr):\n        string = arr[0]\n        for i in range(1, len(arr), 1):\n            if arr[i][0] == string[-1]:\n                string += arr[i][1]\n            else:\n                string += arr[i]\n        while len(string) < k:\n            string += 'a'\n        print(string[:k])\nt = int(input())\nobj = Solution()\nfor _ in range(t):\n    k = int(input())\n    obj.find(k, input().split())", "class Solution:\n\n    def find(self, k, arr):\n        string = arr[0]\n        for i in range(1, len(arr), 1):\n            if arr[i][0] == string[-1]:\n                string += arr[i][1]\n            else:\n                string += arr[i]\n        while len(string) < k:\n            string += 'a'\n        print(string[:k])\nt = int(input())\nobj = Solution()\nfor _ in range(t):\n    k = int(input())\n    obj.find(k, input().split())", "class Solution:\n\n    def find(self, j, arr):\n        string = arr[0]\n        for i in range(1, len(arr), 1):\n            if arr[i][0] == string[-1]:\n                string += arr[i][1]\n            else:\n                string += arr[i]\n        while len(string) < j:\n            string += 'a'\n        print(string[:j])\nt = int(input())\nobj = Solution()\nfor _ in range(t):\n    j = int(input())\n    obj.find(j, input().split())", "def solve(n, tempstr):\n    inmid = -1\n    for i in range(len(tempstr) - 1):\n        if tempstr[i][1] != tempstr[i + 1][0]:\n            inmid = i + 1\n            break\n    ans = ''\n    if inmid != -1:\n        for i in range(len(tempstr)):\n            if i == 0 or i == inmid:\n                ans += tempstr[i]\n            else:\n                ans += tempstr[i][1]\n        if len(ans) < n:\n            ans += tempstr[-1][1]\n        print(ans)\n        return\n    else:\n        for i in range(len(tempstr)):\n            ans += tempstr[i][0]\n        ans += tempstr[len(tempstr) - 1][1]\n        ans += ans[-1]\n        print(ans)\n        return\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    tempstr = input().split(' ')\n    solve(n, tempstr)\n    t -= 1", "import sys\nint1 = lambda x: int(x) - 1\npDB = lambda *x: print(*x, end='\\n', file=sys.stderr)\np2D = lambda x: print(*x, sep='\\n', end='\\n\\n', file=sys.stderr)\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef LI1():\n    return list(map(int1, sys.stdin.readline().split()))\n\ndef LLI1(rows_number):\n    return [LI1() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline().rstrip()\ninf = 4294967295\nmd = 998244353\n\ndef solve():\n    n = II()\n    ss = SI().split()\n    ans = ss[0][0]\n    for i in range(n - 3):\n        if ss[i][1] == ss[i + 1][0]:\n            ans += ss[i][1]\n        else:\n            ans += ss[i][1] + ss[i + 1][0]\n    ans += ss[-1][1]\n    if len(ans) < n:\n        ans += ans[-1]\n    print(ans)\nfor testcase in range(II()):\n    solve()", "def solution():\n    n = int(input())\n    a = list(input().split())\n    s = a[0]\n    for i in range(1, n - 2):\n        if a[i][0] != s[-1]:\n            s += a[i]\n            continue\n        s += a[i][1]\n    if len(s) != n:\n        s += 'a'\n    print(s)\nt = int(input())\nfor _ in range(t):\n    solution()", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    bis = [s for s in input().split()]\n    ans = None\n    for i in range(n - 3):\n        if bis[i][1] == bis[i + 1][0]:\n            continue\n        ans = (i, bis[i][1] + bis[i + 1][0])\n    if ans:\n        bis = bis[:ans[0] + 1] + [ans[1]] + bis[ans[0] + 1:]\n        word = ''.join([b[0] for b in bis])\n        word += bis[len(bis) - 1][1]\n        print(word)\n    else:\n        word = ''.join([b[0] for b in bis])\n        word += bis[len(bis) - 1][1] + 'a'\n        print(word)", "for _ in range(int(input())):\n    n = int(input())\n    l = input().split()\n    k = 0\n    ans = l[0]\n    for i in range(1, n - 2):\n        if ans[-1] != l[i][0]:\n            k = 1\n            ans += l[i]\n        else:\n            ans += l[i][1]\n    if k == 0:\n        ans += l[-1][-1]\n    print(ans)", "def op():\n    n = int(input())\n    a = input().split()\n    ans = a[0]\n    for i in range(1, n - 2):\n        if a[i - 1][1] != a[i][0]:\n            ans += a[i]\n        else:\n            ans += a[i][1]\n    if len(ans) != n:\n        ans += 'a'\n    print(ans)\nfor i in range(int(input())):\n    op()", "def bigram(n, bi):\n    a = []\n    a.append(bi[0][0])\n    if len(bi) == 1:\n        a.append(bi[0][1])\n        a.append(bi[0][1])\n        print(''.join(a))\n        return\n    for i in range(1, len(bi)):\n        if bi[i][0] != bi[i - 1][1]:\n            a.append(bi[i - 1][1])\n        a.append(bi[i][0])\n    a.append(bi[-1][1])\n    while len(a) < n:\n        a.append(a[-1])\n    print(''.join(a))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    bi = input().split()\n    bigram(n, bi)", "def bigram(n, ls):\n    ans = ls[0]\n    for i in range(1, len(ls), 1):\n        if ls[i][0] == ans[-1]:\n            ans += ls[i][1]\n        else:\n            ans += ls[i]\n    if len(ans) < n:\n        ans += 'a'\n    return ans\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        ls = list(input().split())\n        print(bigram(n, ls))\nmain()", "for _ in range(int(input())):\n    n_letters = int(input())\n    words = input().split()\n    new_word = ' '\n    for word in words:\n        if word[0] == new_word[-1]:\n            new_word += word[1]\n        else:\n            new_word += word\n    if len(new_word) - 1 < n_letters:\n        new_word += 'a'\n    print(new_word[1:])", "def main():\n    t = int(input())\n    while t:\n        x = int(input())\n        l = input().split()\n        res = l[0][0]\n        flag = 0\n        for i in range(len(l)):\n            if i == len(l) - 1:\n                res += l[i][-1]\n                break\n            if l[i][-1] == l[i + 1][0]:\n                res += l[i][-1]\n            else:\n                flag = 1\n                res += l[i][-1]\n                res += l[i + 1][0]\n        if flag == 0 and len(res) != x:\n            res += res[-1]\n        print(res)\n        t -= 1\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    big = input().split(' ')\n    k = 0\n    for i in range(n - 3):\n        if big[i][1] != big[i + 1][0]:\n            big.insert(i + 1, big[i][1] + big[i + 1][0])\n            k = 1\n            break\n    if k != 1:\n        big.append(big[-1][-1] * 2)\n    ans = big[0]\n    for i in range(1, len(big)):\n        ans += big[i][1]\n    print(ans)", "import sys\ninput = sys.stdin.readline\nri = lambda : int(input())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input().strip('\\r\\n')\n\ndef solve():\n    n = ri()\n    s = list(map(str, input().split()))\n    ans = s[0]\n    flag = 0\n    for i in range(1, len(s)):\n        if s[i][0] == s[i - 1][-1]:\n            ans += s[i][-1]\n        else:\n            flag = 1\n            ans += s[i]\n    if not flag:\n        ans += s[-1][-1]\n    return ans\nfor _ in range(ri()):\n    print(solve())", "import sys\n\ndef solve(li, x):\n    ans = li[0][0]\n    flag = 0\n    for i in range(len(li) - 1):\n        if li[i][1] != li[i + 1][0]:\n            flag = 1\n            missing = str(li[i][1] + li[i + 1][0])\n            ans += missing\n        else:\n            ans += li[i][1]\n    ans += li[-1][1]\n    if flag == 0:\n        ans += 'a'\n        return ans\n    return ans\nn = int(input())\nfor _ in range(n):\n    x = int(input())\n    numbers = [x for x in input().split()]\n    print(solve(numbers, x))", "def check(l1, l2):\n    l3 = [l1[0], l1[1], l1[2], l1[0] + l1[1], l1[0] + l1[2], l1[1] + l1[2], l1[1] + l1[2] + l1[0]]\n    return l3 == l2\nfor _ in range(int(input())):\n    n = int(input())\n    l = input().split()\n    ans = ''\n    for i in range(len(l) - 1):\n        ans += l[i][0]\n        if l[i][1] != l[i + 1][0]:\n            ans += l[i][1]\n    ans += l[-1][0]\n    ans += l[-1][1]\n    if len(ans) < n:\n        ans += 'a' * (n - len(ans))\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(input().split())\n    s = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i - 1][1] == arr[i][0]:\n            s += arr[i][1]\n        else:\n            s += arr[i]\n    if len(s) == n:\n        print(s)\n    else:\n        print(s + 'a')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = input().split()\n    res = []\n    res.append(l[0][0])\n    for i in range(n - 3):\n        if l[i][1] == l[i + 1][0]:\n            res.append(l[i][1])\n        else:\n            res.append(l[i][1])\n            res.append(l[i + 1][0])\n    res.append(l[-1][1])\n    s = ''.join(res)\n    if len(s) == n:\n        print(s)\n    else:\n        s += s[-1]\n        print(s)", "q = int(input())\nwhile q != 0:\n    n = int(input())\n    s = input().split()\n    r = s[0]\n    for i in s[1:]:\n        if r[-1] != i[0]:\n            r += i\n        else:\n            r += i[1]\n    if len(r) != n:\n        r += 'a'\n    print(r)\n    q -= 1", "def solver():\n\n    def flatten(bigrams, elem, pos=None):\n        final_string = ''\n        if pos is None:\n            for i in bigrams:\n                final_string = final_string + i[0]\n            final_string = final_string + elem\n        else:\n            for i in range(len(bigrams)):\n                final_string = final_string + bigrams[i][0]\n                if i == pos:\n                    final_string = final_string + elem[0]\n            final_string = final_string + bigrams[-1][-1]\n        return final_string\n    n = int(input())\n    for i in range(n):\n        j = int(input())\n        bigram_list = str(input()).split()\n        missing_bigram = None\n        counter = None\n        for k in range(j - 3):\n            first_char = bigram_list[k][1]\n            second_char = bigram_list[k + 1][0]\n            if first_char != second_char:\n                missing_bigram = first_char + second_char\n                counter = k\n        if missing_bigram is None:\n            final_elem = bigram_list[-1][-1]\n            print(flatten(bigram_list, final_elem + final_elem))\n        else:\n            print(flatten(bigram_list, missing_bigram, counter))\nsolver()", "for _ in range(int(input())):\n    n = int(input()) - 2\n    (b, i) = (input().split(), 1)\n    while i < n and b[i][0] == b[i - 1][1]:\n        i += 1\n    b.append(b[-1][1] + 'a')\n    b = b[:i] + [b[i - 1][1] + b[i][0]] + b[i:n] + [b[n - 1][1]]\n    print(''.join(b[::2]))", "def fun(li, n):\n    st = ''\n    if len(li) == 1:\n        x = n - len(li[0])\n        st = li[0] + li[0][1] * x\n        return st\n    else:\n        for i in range(len(li)):\n            if i == 0:\n                st = st + li[0]\n            elif li[i][0] == pre:\n                st = st + li[i][1]\n            else:\n                st = st + li[i]\n            pre = li[i][1]\n        if len(st) != n:\n            y = n - len(st)\n            st = st + st[-1] * y\n        return st\nt = int(input())\nfor z in range(t):\n    n = int(input())\n    li = [x for x in input().split()]\n    res = fun(li, n)\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [i for i in input().split()]\n    ans = arr[0][0]\n    for i in range(len(arr) - 1):\n        if arr[i][1] == arr[i + 1][0]:\n            ans += arr[i][1]\n        else:\n            ans += arr[i][1] + arr[i + 1][0]\n    ans += arr[-1][1]\n    if len(ans) != n:\n        ans += 'a'\n    print(ans)", "import sys\ninput = sys.stdin.readline\nT = int(input())\nR = []\nfor _ in range(T):\n    N = int(input())\n    l = input()[:-1].split()\n    s = ''\n    is_selected = False\n    for c in l:\n        if s == '':\n            s += c\n        elif s[-1] == c[0]:\n            s += c[1]\n        else:\n            is_selected = True\n            s += c\n    if len(s) < N:\n        s += 'a'\n    R.append(s)\nprint('\\n'.join(R))", "for i in range(int(input())):\n    n = int(input())\n    b = list(input().split())\n    ans = []\n    ans.append(b[0][0])\n    for i in range(len(b) - 1):\n        if b[i][1] == b[i + 1][0]:\n            ans.append(b[i][1])\n        else:\n            ans.append(b[i][1] + b[i + 1][0])\n    ans.append(b[-1][1])\n    if len(''.join(ans)) != n:\n        ans.append('a')\n    print(''.join(ans))", "deekht2 = int(input())\nwhile deekht2 != 0:\n    dcrtg = int(input())\n    vfty7 = input().split()\n    deeklai9 = vfty7[0]\n    for i in vfty7[1:]:\n        if deeklai9[-1] != i[0]:\n            deeklai9 += i\n        else:\n            deeklai9 += i[1]\n    if len(deeklai9) != dcrtg:\n        deeklai9 += 'a'\n    print(deeklai9)\n    deekht2 -= 1", "z = int(input())\nfor _ in range(z):\n    n = int(input())\n    s = input()\n    s = s.split(' ')\n    s = ''.join(s)\n    k = ''\n    c = 0\n    for i in range(1, len(s) - 1, 2):\n        if s[i] != s[i + 1]:\n            c = 1\n            k += s[i] + s[i + 1]\n        else:\n            k += s[i]\n    if c == 1:\n        print(s[0] + k + s[len(s) - 1])\n    else:\n        print(s[0] + k + s[len(s) - 1] + 'a')", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\n\ndef solve():\n    T = int(input())\n    for i in range(T):\n        word_len = int(input())\n        bigrams = list(map(list, input().split()))\n        ans = []\n        ans.append(bigrams[0][0])\n        for i in range(1, word_len - 2):\n            if bigrams[i][0] == bigrams[i - 1][1]:\n                ans.append(bigrams[i - 1][1])\n            else:\n                ans.append(bigrams[i - 1][1])\n                ans.append(bigrams[i][0])\n        ans.append(bigrams[word_len - 3][1])\n        if len(ans) < word_len:\n            ans.append('a')\n        print(''.join(ans))\nsolve()", "def create_string(bgrm_list):\n    size = len(bgrm_list)\n    ret_str = ''\n    for ele in bgrm_list:\n        ret_str += ele[0]\n    ret_str += bgrm_list[size - 1][1]\n    return ret_str\n\ndef mismatch(bgrm_list):\n    mis_ind = -1\n    size = len(bgrm_list)\n    for i in range(1, size):\n        if bgrm_list[i][0] != bgrm_list[i - 1][1]:\n            mis_ind = i\n    return mis_ind\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    og_bgrm = input()\n    bgrm_list = og_bgrm.split()\n    mis_ind = mismatch(bgrm_list)\n    if mis_ind == -1:\n        inserter = ''\n        inserter += bgrm_list[n - 3][1]\n        inserter += inserter[0]\n        bgrm_list.append(inserter)\n    else:\n        inserter = ''\n        inserter += bgrm_list[mis_ind - 1][1]\n        inserter += bgrm_list[mis_ind][0]\n        bgrm_list.insert(mis_ind, inserter)\n    ret_str = create_string(bgrm_list)\n    print(ret_str)", "n = int(input())\nfor i in range(n):\n    m = int(input())\n    arr = input().split()\n    arr2 = str(arr.pop(0))\n    for j in range(m - 3):\n        if arr2[-1] == arr[j][0]:\n            arr2 = arr2 + arr[j][-1]\n        elif arr2[-1] != arr[j][0]:\n            arr2 = arr2 + arr[j]\n            j += 1\n    if len(arr2) < m:\n        arr2 += arr2[-1]\n    print(arr2)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    a = s.split()\n    ans = ''\n    ans += a[0]\n    for i in range(1, len(a)):\n        p = a[i]\n        if ans[-1] == p[0]:\n            ans += p[-1]\n        else:\n            ans += p\n    if len(ans) == n:\n        print(ans)\n    elif len(ans) == 2:\n        print(ans + 'a')\n    else:\n        print(ans + 'a' * (n - len(ans)))", "t = int(input())\nl = []\nwhile t:\n    t = t - 1\n    n = int(input())\n    s = ''\n    s1 = list(input().split())\n    for i in s1:\n        if s == '':\n            s = s + i\n        elif s[-1] == i[0]:\n            s = s + i[1]\n        else:\n            s = s + i\n    if len(s) != n:\n        while len(s) != n:\n            s = s + 'a'\n    l.append(s)\nfor i in l:\n    print(i)", "x = int(input())\n\ndef abhishek(LIST, m):\n    txt = LIST[0]\n    for i in range(len(LIST) - 1):\n        if LIST[i][1] == LIST[i + 1][0]:\n            txt += LIST[i + 1][1]\n        else:\n            txt += LIST[i + 1]\n    if len(txt) == m:\n        print(txt)\n    else:\n        print(txt + 'a')\n\ndef main():\n    for _ in range(x):\n        n = int(input())\n        LIST = input().split()\n        abhishek(LIST, n)\nmain()", "def find_word(bigram_arr):\n    idx = 1\n    prev_elem = bigram_arr[0]\n    arr_size = size - 2\n    for j in range(1, arr_size):\n        if prev_elem[1:] != bigram_arr[j][:1]:\n            temp_elem = prev_elem[1:] + bigram_arr[j][:1]\n            bigram_arr.insert(idx, temp_elem)\n            break\n        idx += 1\n        prev_elem = bigram_arr[j]\n    word = bigram_arr[0][::1]\n    for k in range(1, len(bigram_arr)):\n        word = word + bigram_arr[k][1:]\n    word_size = len(word)\n    if word_size != size:\n        flag = True\n        while flag:\n            lst_alpha = word[word_size - 1]\n            word = word + lst_alpha\n            if len(word) == size:\n                flag = False\n    print(word)\nt = int(input())\nfor i in range(t):\n    size = int(input())\n    user_input = input().split()\n    find_word(user_input)", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nsys.setrecursionlimit(100000000)\n\ndef solve():\n    n = int(input())\n    s = ''.join(map(str, input().split()))\n    ans = ''\n    for i in range(1, len(s) - 1, 2):\n        if s[i] != s[i + 1]:\n            ans = ans + s[i] + s[i + 1]\n        else:\n            ans += s[i]\n    res = s[0] + ans + s[-1]\n    if len(res) < n:\n        return res + 'a'\n    else:\n        return res\n\ndef main():\n    t = int(input())\n    while t:\n        print(solve())\n        t -= 1\nmain()", "def solve(n, arr):\n    ans = arr[0][0]\n    for i in range(1, len(arr)):\n        if arr[i - 1][1] == arr[i][0]:\n            ans += arr[i - 1][1]\n        else:\n            ans += arr[i - 1][1] + arr[i][0]\n    if len(ans) == n - 2:\n        return ans + arr[-1][1] * 2\n    return ans + arr[-1][1]\nfor i in range(int(input())):\n    print(solve(int(input()), input().split()))", "import sys, os, io\nimport math\nfrom collections import defaultdict\n\ndef ij():\n    return int(input())\n\ndef li():\n    return list(map(int, input().split()))\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef solve():\n    n = ij()\n    l = [i for i in input().split()]\n    newer = []\n    newer.append(l[0][0])\n    for i in range(len(l) - 1):\n        if l[i][1] == l[i + 1][0]:\n            newer.append(l[i][1])\n        else:\n            newer.append(l[i][1])\n            newer.append(l[i + 1][0])\n    newer.append(l[-1][-1])\n    if len(newer) != n:\n        newer.append(newer[-1])\n    print(''.join(newer))\ntest = 1\ntest = ij()\nfor _ in range(test):\n    solve()", "import sys, os, io\nimport math\nfrom collections import defaultdict\n\ndef ii():\n    return int(input())\n\ndef li():\n    return list(map(int, input().split()))\n\ndef solve():\n    n = ii()\n    l = [i for i in input().split()]\n    new = []\n    new.append(l[0][0])\n    for i in range(len(l) - 1):\n        if l[i][1] == l[i + 1][0]:\n            new.append(l[i][1])\n        else:\n            new.append(l[i][1])\n            new.append(l[i + 1][0])\n    new.append(l[-1][-1])\n    if len(new) != n:\n        new.append(new[-1])\n    print(''.join(new))\nt = 1\nt = ii()\nfor _ in range(t):\n    solve()", "testcase = int(input())\ng = 0\nwhile testcase > 0:\n    n_length = int(input())\n    strr = input().split()\n    r = strr[0]\n    for i in strr[1:]:\n        if r[-1] != i[0]:\n            r += i\n            g += 1\n        else:\n            r += i[1]\n    if len(r) != n_length:\n        r += 'a'\n    print(r)\n    testcase -= 1", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nsys.setrecursionlimit(100000000)\n\ndef solve():\n    num = int(input())\n    st = ''.join(map(str, input().split()))\n    res = ''\n    for i in range(1, len(st) - 1, 2):\n        if st[i] != st[i + 1]:\n            res = res + st[i] + st[i + 1]\n        else:\n            res += st[i]\n    ans = st[0] + res + st[-1]\n    if len(ans) < num:\n        print(ans + 'a')\n    else:\n        print(ans)\n\ndef main():\n    t = int(input())\n    while t:\n        solve()\n        t -= 1\nmain()", "def bigram(n, bigrams):\n    a = ''\n    for i in range(n - 2):\n        char = bigrams[i]\n        if i == 0:\n            a += char\n        else:\n            l = a[-1]\n            if char[0] == l:\n                a += char[-1]\n            else:\n                a += char\n    if len(a) != n:\n        a += 'a'\n    return a\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    bigrams = input().split()\n    result = bigram(n, bigrams)\n    print(result)", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\n\ndef solve():\n    T = int(input())\n    for i in range(T):\n        word_len = int(input())\n        bigrams = list(map(list, input().split()))\n        ans = []\n        ans.append(bigrams[0][0])\n        for i in range(1, word_len - 2):\n            if bigrams[i][0] == bigrams[i - 1][1]:\n                ans.append(bigrams[i - 1][1])\n            else:\n                ans.append(bigrams[i - 1][1])\n                ans.append(bigrams[i][0])\n        ans.append(bigrams[word_len - 3][1])\n        if len(ans) < word_len:\n            ans.append('a')\n        print(''.join(ans))\nsolve()", "for _ in range(int(input())):\n    n = int(input())\n    s = input().split()\n    r = s[0]\n    for i in s[1:]:\n        if r[-1] != i[0]:\n            r += i\n        else:\n            r += i[1]\n    if len(r) != n:\n        r += 'a'\n    print(r)", "for asdfasf in range(int(input())):\n    n = int(input())\n    bi = input().split()\n    last = bi[0][0]\n    s = [last]\n    for it in bi:\n        if last != it[0]:\n            s.append(it)\n        else:\n            s.append(it[1])\n        last = it[1]\n    st = ''.join(s)\n    if len(st) < n:\n        st += 'a'\n    print(st)", "t = int(input())\nfor _ in range(t):\n    (n, l) = (int(input()), input().split())\n    x = l[0]\n    for i in range(1, n - 2):\n        if l[i][0] == l[i - 1][-1]:\n            x = x + l[i][1]\n        else:\n            x = x + l[i]\n    x = x if len(x) == n else x + 'a'\n    print(x)", "for _ in range(int(input())):\n    n = int(input())\n    s = input().split()\n    r = s[0]\n    for i in s[1:]:\n        r += i if r[-1] != i[0] else i[1]\n    if len(r) != n:\n        r += 'a'\n    print(r)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input().split()\n    r = s[0]\n    for i in s[1:]:\n        if r[-1] != i[0]:\n            r += i\n        else:\n            r += i[1]\n    if len(r) != n:\n        r += 'a'\n    print(r)", "n = int(input())\nwhile n != 0:\n    x = int(input())\n    lst = input().split()\n    st = lst[0][0]\n    for it in lst:\n        if it[0] != st[-1]:\n            st += it\n        else:\n            st += it[1]\n    if len(st) < x:\n        st += 'a' * (x - len(st))\n    print(st)\n    n -= 1", "for _ in range(int(input())):\n    n = int(input())\n    a = input().split()\n    s = a[0]\n    t = True\n    for i in range(1, n - 2):\n        if a[i][0] != s[i] and t:\n            s += a[i]\n            t = False\n        else:\n            s += a[i][1]\n    if t:\n        s += s[-1]\n    print(s)", "def solve(n, tempstr):\n    inmid = -1\n    for i in range(len(tempstr) - 1):\n        if tempstr[i][1] != tempstr[i + 1][0]:\n            inmid = i + 1\n            break\n    ans = ''\n    if inmid != -1:\n        for i in range(len(tempstr)):\n            if i != inmid - 1 and i != inmid:\n                if i != inmid + 1:\n                    ans += tempstr[i][0]\n            else:\n                ans += tempstr[i]\n        if len(ans) < n:\n            ans += tempstr[-1][1]\n        print(ans)\n        return\n    else:\n        for i in range(len(tempstr)):\n            ans += tempstr[i][0]\n        ans += tempstr[len(tempstr) - 1][1]\n        ans += ans[-1]\n        print(ans)\n        return\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    tempstr = input().split(' ')\n    solve(n, tempstr)\n    t -= 1", "for s in [*open(0)][2::2]:\n    (a, b) = zip(*s.split())\n    (r, *a) = a\n    for (x, y) in zip(b, a):\n        r += (x + y)[x == y:]\n    print((r + 2 * b[-1])[:len(b) + 2])", "Test_case = int(input())\noutput = []\nfor t in range(Test_case):\n    Polycrab = ''\n    length = int(input())\n    bigrams = input()\n    seq = bigrams.split()\n    for index in range(length - 3):\n        if seq[index][1] != seq[index + 1][0]:\n            seq.insert(index + 1, seq[index][1] + seq[index + 1][0])\n    for bigram in seq[:-1]:\n        Polycrab += bigram[0]\n    Polycrab += seq[-1]\n    if len(seq) == length - 2:\n        Polycrab += 'a'\n    output.append(Polycrab)\nfor res in output:\n    print(res)", "for s in [*open(0)][2::2]:\n    (a, b) = zip(*s.split())\n    (r, *a) = a\n    for (x, y) in zip(b, a):\n        r += (x + y)[x == y:]\n    print((r + 2 * b[-1])[:len(b) + 2])", "for s in [*open(0)][2::2]:\n    (a, b) = zip(*s.split())\n    (r, *a) = a\n    for (x, y) in zip(b, a):\n        r += (x + y)[x == y:]\n    print((r + 2 * b[-1])[:len(b) + 2])", "class Solution:\n\n    def find(self, k, arr):\n        string = arr[0]\n        for i in range(1, len(arr), 1):\n            if arr[i][0] == string[-1]:\n                string += arr[i][1]\n            else:\n                string += arr[i]\n        while len(string) < k:\n            string += 'a'\n        print(string[:k])\nt = int(input())\nobj = Solution()\nfor _ in range(t):\n    k = int(input())\n    obj.find(k, input().split())", "a = input()\ni = int(a)\nfor x in range(i):\n    j = int(input())\n    l = input().split(' ')\n    res = l[0][0]\n    for y in l:\n        if res[-1] != y[0]:\n            res += y[0]\n        res += y[1]\n    if len(res) < j:\n        res += 'a'\n    print(res)"]